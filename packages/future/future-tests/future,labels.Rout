
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:32.870] plan(): Setting new future strategy stack:
[17:46:32.871] List of future strategies:
[17:46:32.871] 1. sequential:
[17:46:32.871]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.871]    - tweaked: FALSE
[17:46:32.871]    - call: future::plan("sequential")
[17:46:32.882] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[17:46:32.908] plan(): Setting new future strategy stack:
[17:46:32.908] List of future strategies:
[17:46:32.908] 1. sequential:
[17:46:32.908]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.908]    - tweaked: FALSE
[17:46:32.908]    - call: plan(strategy)
[17:46:32.920] plan(): nbrOfWorkers() = 1
[17:46:32.921] getGlobalsAndPackages() ...
[17:46:32.921] Searching for globals...
[17:46:32.923] 
[17:46:32.923] Searching for globals ... DONE
[17:46:32.924] - globals: [0] <none>
[17:46:32.924] getGlobalsAndPackages() ... DONE
[17:46:32.925] Packages needed by the future expression (n = 0): <none>
[17:46:32.925] Packages needed by future strategies (n = 0): <none>
[17:46:32.925] {
[17:46:32.925]     {
[17:46:32.925]         {
[17:46:32.925]             ...future.startTime <- base::Sys.time()
[17:46:32.925]             {
[17:46:32.925]                 {
[17:46:32.925]                   {
[17:46:32.925]                     base::local({
[17:46:32.925]                       has_future <- base::requireNamespace("future", 
[17:46:32.925]                         quietly = TRUE)
[17:46:32.925]                       if (has_future) {
[17:46:32.925]                         ns <- base::getNamespace("future")
[17:46:32.925]                         version <- ns[[".package"]][["version"]]
[17:46:32.925]                         if (is.null(version)) 
[17:46:32.925]                           version <- utils::packageVersion("future")
[17:46:32.925]                       }
[17:46:32.925]                       else {
[17:46:32.925]                         version <- NULL
[17:46:32.925]                       }
[17:46:32.925]                       if (!has_future || version < "1.8.0") {
[17:46:32.925]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.925]                           "", base::R.version$version.string), 
[17:46:32.925]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.925]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.925]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.925]                             "release", "version")], collapse = " "), 
[17:46:32.925]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.925]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.925]                           info)
[17:46:32.925]                         info <- base::paste(info, collapse = "; ")
[17:46:32.925]                         if (!has_future) {
[17:46:32.925]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.925]                             info)
[17:46:32.925]                         }
[17:46:32.925]                         else {
[17:46:32.925]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.925]                             info, version)
[17:46:32.925]                         }
[17:46:32.925]                         base::stop(msg)
[17:46:32.925]                       }
[17:46:32.925]                     })
[17:46:32.925]                   }
[17:46:32.925]                   ...future.strategy.old <- future::plan("list")
[17:46:32.925]                   options(future.plan = NULL)
[17:46:32.925]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.925]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.925]                 }
[17:46:32.925]                 ...future.workdir <- getwd()
[17:46:32.925]             }
[17:46:32.925]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.925]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.925]         }
[17:46:32.925]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.925]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.925]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.925]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.925]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.925]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.925]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.925]             base::names(...future.oldOptions))
[17:46:32.925]     }
[17:46:32.925]     if (FALSE) {
[17:46:32.925]     }
[17:46:32.925]     else {
[17:46:32.925]         if (TRUE) {
[17:46:32.925]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.925]                 open = "w")
[17:46:32.925]         }
[17:46:32.925]         else {
[17:46:32.925]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.925]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.925]         }
[17:46:32.925]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.925]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.925]             base::sink(type = "output", split = FALSE)
[17:46:32.925]             base::close(...future.stdout)
[17:46:32.925]         }, add = TRUE)
[17:46:32.925]     }
[17:46:32.925]     ...future.frame <- base::sys.nframe()
[17:46:32.925]     ...future.conditions <- base::list()
[17:46:32.925]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.925]     if (FALSE) {
[17:46:32.925]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.925]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.925]     }
[17:46:32.925]     ...future.result <- base::tryCatch({
[17:46:32.925]         base::withCallingHandlers({
[17:46:32.925]             ...future.value <- base::withVisible(base::local(42))
[17:46:32.925]             future::FutureResult(value = ...future.value$value, 
[17:46:32.925]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.925]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.925]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.925]                     ...future.globalenv.names))
[17:46:32.925]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.925]         }, condition = base::local({
[17:46:32.925]             c <- base::c
[17:46:32.925]             inherits <- base::inherits
[17:46:32.925]             invokeRestart <- base::invokeRestart
[17:46:32.925]             length <- base::length
[17:46:32.925]             list <- base::list
[17:46:32.925]             seq.int <- base::seq.int
[17:46:32.925]             signalCondition <- base::signalCondition
[17:46:32.925]             sys.calls <- base::sys.calls
[17:46:32.925]             `[[` <- base::`[[`
[17:46:32.925]             `+` <- base::`+`
[17:46:32.925]             `<<-` <- base::`<<-`
[17:46:32.925]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.925]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.925]                   3L)]
[17:46:32.925]             }
[17:46:32.925]             function(cond) {
[17:46:32.925]                 is_error <- inherits(cond, "error")
[17:46:32.925]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.925]                   NULL)
[17:46:32.925]                 if (is_error) {
[17:46:32.925]                   sessionInformation <- function() {
[17:46:32.925]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.925]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.925]                       search = base::search(), system = base::Sys.info())
[17:46:32.925]                   }
[17:46:32.925]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.925]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.925]                     cond$call), session = sessionInformation(), 
[17:46:32.925]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.925]                   signalCondition(cond)
[17:46:32.925]                 }
[17:46:32.925]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.925]                 "immediateCondition"))) {
[17:46:32.925]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.925]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.925]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.925]                   if (TRUE && !signal) {
[17:46:32.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.925]                     {
[17:46:32.925]                       inherits <- base::inherits
[17:46:32.925]                       invokeRestart <- base::invokeRestart
[17:46:32.925]                       is.null <- base::is.null
[17:46:32.925]                       muffled <- FALSE
[17:46:32.925]                       if (inherits(cond, "message")) {
[17:46:32.925]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.925]                         if (muffled) 
[17:46:32.925]                           invokeRestart("muffleMessage")
[17:46:32.925]                       }
[17:46:32.925]                       else if (inherits(cond, "warning")) {
[17:46:32.925]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.925]                         if (muffled) 
[17:46:32.925]                           invokeRestart("muffleWarning")
[17:46:32.925]                       }
[17:46:32.925]                       else if (inherits(cond, "condition")) {
[17:46:32.925]                         if (!is.null(pattern)) {
[17:46:32.925]                           computeRestarts <- base::computeRestarts
[17:46:32.925]                           grepl <- base::grepl
[17:46:32.925]                           restarts <- computeRestarts(cond)
[17:46:32.925]                           for (restart in restarts) {
[17:46:32.925]                             name <- restart$name
[17:46:32.925]                             if (is.null(name)) 
[17:46:32.925]                               next
[17:46:32.925]                             if (!grepl(pattern, name)) 
[17:46:32.925]                               next
[17:46:32.925]                             invokeRestart(restart)
[17:46:32.925]                             muffled <- TRUE
[17:46:32.925]                             break
[17:46:32.925]                           }
[17:46:32.925]                         }
[17:46:32.925]                       }
[17:46:32.925]                       invisible(muffled)
[17:46:32.925]                     }
[17:46:32.925]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.925]                   }
[17:46:32.925]                 }
[17:46:32.925]                 else {
[17:46:32.925]                   if (TRUE) {
[17:46:32.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.925]                     {
[17:46:32.925]                       inherits <- base::inherits
[17:46:32.925]                       invokeRestart <- base::invokeRestart
[17:46:32.925]                       is.null <- base::is.null
[17:46:32.925]                       muffled <- FALSE
[17:46:32.925]                       if (inherits(cond, "message")) {
[17:46:32.925]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.925]                         if (muffled) 
[17:46:32.925]                           invokeRestart("muffleMessage")
[17:46:32.925]                       }
[17:46:32.925]                       else if (inherits(cond, "warning")) {
[17:46:32.925]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.925]                         if (muffled) 
[17:46:32.925]                           invokeRestart("muffleWarning")
[17:46:32.925]                       }
[17:46:32.925]                       else if (inherits(cond, "condition")) {
[17:46:32.925]                         if (!is.null(pattern)) {
[17:46:32.925]                           computeRestarts <- base::computeRestarts
[17:46:32.925]                           grepl <- base::grepl
[17:46:32.925]                           restarts <- computeRestarts(cond)
[17:46:32.925]                           for (restart in restarts) {
[17:46:32.925]                             name <- restart$name
[17:46:32.925]                             if (is.null(name)) 
[17:46:32.925]                               next
[17:46:32.925]                             if (!grepl(pattern, name)) 
[17:46:32.925]                               next
[17:46:32.925]                             invokeRestart(restart)
[17:46:32.925]                             muffled <- TRUE
[17:46:32.925]                             break
[17:46:32.925]                           }
[17:46:32.925]                         }
[17:46:32.925]                       }
[17:46:32.925]                       invisible(muffled)
[17:46:32.925]                     }
[17:46:32.925]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.925]                   }
[17:46:32.925]                 }
[17:46:32.925]             }
[17:46:32.925]         }))
[17:46:32.925]     }, error = function(ex) {
[17:46:32.925]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.925]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.925]                 ...future.rng), started = ...future.startTime, 
[17:46:32.925]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.925]             version = "1.8"), class = "FutureResult")
[17:46:32.925]     }, finally = {
[17:46:32.925]         if (!identical(...future.workdir, getwd())) 
[17:46:32.925]             setwd(...future.workdir)
[17:46:32.925]         {
[17:46:32.925]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.925]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.925]             }
[17:46:32.925]             base::options(...future.oldOptions)
[17:46:32.925]             if (.Platform$OS.type == "windows") {
[17:46:32.925]                 old_names <- names(...future.oldEnvVars)
[17:46:32.925]                 envs <- base::Sys.getenv()
[17:46:32.925]                 names <- names(envs)
[17:46:32.925]                 common <- intersect(names, old_names)
[17:46:32.925]                 added <- setdiff(names, old_names)
[17:46:32.925]                 removed <- setdiff(old_names, names)
[17:46:32.925]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.925]                   envs[common]]
[17:46:32.925]                 NAMES <- toupper(changed)
[17:46:32.925]                 args <- list()
[17:46:32.925]                 for (kk in seq_along(NAMES)) {
[17:46:32.925]                   name <- changed[[kk]]
[17:46:32.925]                   NAME <- NAMES[[kk]]
[17:46:32.925]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.925]                     next
[17:46:32.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.925]                 }
[17:46:32.925]                 NAMES <- toupper(added)
[17:46:32.925]                 for (kk in seq_along(NAMES)) {
[17:46:32.925]                   name <- added[[kk]]
[17:46:32.925]                   NAME <- NAMES[[kk]]
[17:46:32.925]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.925]                     next
[17:46:32.925]                   args[[name]] <- ""
[17:46:32.925]                 }
[17:46:32.925]                 NAMES <- toupper(removed)
[17:46:32.925]                 for (kk in seq_along(NAMES)) {
[17:46:32.925]                   name <- removed[[kk]]
[17:46:32.925]                   NAME <- NAMES[[kk]]
[17:46:32.925]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.925]                     next
[17:46:32.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.925]                 }
[17:46:32.925]                 if (length(args) > 0) 
[17:46:32.925]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.925]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.925]             }
[17:46:32.925]             else {
[17:46:32.925]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.925]             }
[17:46:32.925]             {
[17:46:32.925]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.925]                   0L) {
[17:46:32.925]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.925]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.925]                   base::options(opts)
[17:46:32.925]                 }
[17:46:32.925]                 {
[17:46:32.925]                   {
[17:46:32.925]                     NULL
[17:46:32.925]                     RNGkind("Mersenne-Twister")
[17:46:32.925]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.925]                       inherits = FALSE)
[17:46:32.925]                   }
[17:46:32.925]                   options(future.plan = NULL)
[17:46:32.925]                   if (is.na(NA_character_)) 
[17:46:32.925]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.925]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.925]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.925]                     .init = FALSE)
[17:46:32.925]                 }
[17:46:32.925]             }
[17:46:32.925]         }
[17:46:32.925]     })
[17:46:32.925]     if (TRUE) {
[17:46:32.925]         base::sink(type = "output", split = FALSE)
[17:46:32.925]         if (TRUE) {
[17:46:32.925]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.925]         }
[17:46:32.925]         else {
[17:46:32.925]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.925]         }
[17:46:32.925]         base::close(...future.stdout)
[17:46:32.925]         ...future.stdout <- NULL
[17:46:32.925]     }
[17:46:32.925]     ...future.result$conditions <- ...future.conditions
[17:46:32.925]     ...future.result$finished <- base::Sys.time()
[17:46:32.925]     ...future.result
[17:46:32.925] }
[17:46:32.927] plan(): Setting new future strategy stack:
[17:46:32.927] List of future strategies:
[17:46:32.927] 1. sequential:
[17:46:32.927]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.927]    - tweaked: FALSE
[17:46:32.927]    - call: NULL
[17:46:32.928] plan(): nbrOfWorkers() = 1
[17:46:32.929] plan(): Setting new future strategy stack:
[17:46:32.929] List of future strategies:
[17:46:32.929] 1. sequential:
[17:46:32.929]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.929]    - tweaked: FALSE
[17:46:32.929]    - call: plan(strategy)
[17:46:32.929] plan(): nbrOfWorkers() = 1
[17:46:32.930] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.931] getGlobalsAndPackages() ...
[17:46:32.931] Searching for globals...
[17:46:32.932] 
[17:46:32.932] Searching for globals ... DONE
[17:46:32.932] - globals: [0] <none>
[17:46:32.932] getGlobalsAndPackages() ... DONE
[17:46:32.932] run() for ‘Future’ ...
[17:46:32.932] - state: ‘created’
[17:46:32.933] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:32.933] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.933] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:32.933]   - Field: ‘label’
[17:46:32.933]   - Field: ‘local’
[17:46:32.933]   - Field: ‘owner’
[17:46:32.933]   - Field: ‘envir’
[17:46:32.933]   - Field: ‘packages’
[17:46:32.933]   - Field: ‘gc’
[17:46:32.934]   - Field: ‘conditions’
[17:46:32.934]   - Field: ‘expr’
[17:46:32.934]   - Field: ‘uuid’
[17:46:32.934]   - Field: ‘seed’
[17:46:32.934]   - Field: ‘version’
[17:46:32.934]   - Field: ‘result’
[17:46:32.934]   - Field: ‘asynchronous’
[17:46:32.934]   - Field: ‘calls’
[17:46:32.934]   - Field: ‘globals’
[17:46:32.934]   - Field: ‘stdout’
[17:46:32.934]   - Field: ‘earlySignal’
[17:46:32.934]   - Field: ‘lazy’
[17:46:32.935]   - Field: ‘state’
[17:46:32.935] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:32.935] - Launch lazy future ...
[17:46:32.935] Packages needed by the future expression (n = 0): <none>
[17:46:32.935] Packages needed by future strategies (n = 0): <none>
[17:46:32.935] {
[17:46:32.935]     {
[17:46:32.935]         {
[17:46:32.935]             ...future.startTime <- base::Sys.time()
[17:46:32.935]             {
[17:46:32.935]                 {
[17:46:32.935]                   {
[17:46:32.935]                     base::local({
[17:46:32.935]                       has_future <- base::requireNamespace("future", 
[17:46:32.935]                         quietly = TRUE)
[17:46:32.935]                       if (has_future) {
[17:46:32.935]                         ns <- base::getNamespace("future")
[17:46:32.935]                         version <- ns[[".package"]][["version"]]
[17:46:32.935]                         if (is.null(version)) 
[17:46:32.935]                           version <- utils::packageVersion("future")
[17:46:32.935]                       }
[17:46:32.935]                       else {
[17:46:32.935]                         version <- NULL
[17:46:32.935]                       }
[17:46:32.935]                       if (!has_future || version < "1.8.0") {
[17:46:32.935]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.935]                           "", base::R.version$version.string), 
[17:46:32.935]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.935]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.935]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.935]                             "release", "version")], collapse = " "), 
[17:46:32.935]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.935]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.935]                           info)
[17:46:32.935]                         info <- base::paste(info, collapse = "; ")
[17:46:32.935]                         if (!has_future) {
[17:46:32.935]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.935]                             info)
[17:46:32.935]                         }
[17:46:32.935]                         else {
[17:46:32.935]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.935]                             info, version)
[17:46:32.935]                         }
[17:46:32.935]                         base::stop(msg)
[17:46:32.935]                       }
[17:46:32.935]                     })
[17:46:32.935]                   }
[17:46:32.935]                   ...future.strategy.old <- future::plan("list")
[17:46:32.935]                   options(future.plan = NULL)
[17:46:32.935]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.935]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.935]                 }
[17:46:32.935]                 ...future.workdir <- getwd()
[17:46:32.935]             }
[17:46:32.935]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.935]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.935]         }
[17:46:32.935]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.935]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.935]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.935]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.935]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.935]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.935]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.935]             base::names(...future.oldOptions))
[17:46:32.935]     }
[17:46:32.935]     if (FALSE) {
[17:46:32.935]     }
[17:46:32.935]     else {
[17:46:32.935]         if (TRUE) {
[17:46:32.935]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.935]                 open = "w")
[17:46:32.935]         }
[17:46:32.935]         else {
[17:46:32.935]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.935]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.935]         }
[17:46:32.935]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.935]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.935]             base::sink(type = "output", split = FALSE)
[17:46:32.935]             base::close(...future.stdout)
[17:46:32.935]         }, add = TRUE)
[17:46:32.935]     }
[17:46:32.935]     ...future.frame <- base::sys.nframe()
[17:46:32.935]     ...future.conditions <- base::list()
[17:46:32.935]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.935]     if (FALSE) {
[17:46:32.935]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.935]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.935]     }
[17:46:32.935]     ...future.result <- base::tryCatch({
[17:46:32.935]         base::withCallingHandlers({
[17:46:32.935]             ...future.value <- base::withVisible(base::local(42))
[17:46:32.935]             future::FutureResult(value = ...future.value$value, 
[17:46:32.935]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.935]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.935]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.935]                     ...future.globalenv.names))
[17:46:32.935]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.935]         }, condition = base::local({
[17:46:32.935]             c <- base::c
[17:46:32.935]             inherits <- base::inherits
[17:46:32.935]             invokeRestart <- base::invokeRestart
[17:46:32.935]             length <- base::length
[17:46:32.935]             list <- base::list
[17:46:32.935]             seq.int <- base::seq.int
[17:46:32.935]             signalCondition <- base::signalCondition
[17:46:32.935]             sys.calls <- base::sys.calls
[17:46:32.935]             `[[` <- base::`[[`
[17:46:32.935]             `+` <- base::`+`
[17:46:32.935]             `<<-` <- base::`<<-`
[17:46:32.935]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.935]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.935]                   3L)]
[17:46:32.935]             }
[17:46:32.935]             function(cond) {
[17:46:32.935]                 is_error <- inherits(cond, "error")
[17:46:32.935]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.935]                   NULL)
[17:46:32.935]                 if (is_error) {
[17:46:32.935]                   sessionInformation <- function() {
[17:46:32.935]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.935]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.935]                       search = base::search(), system = base::Sys.info())
[17:46:32.935]                   }
[17:46:32.935]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.935]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.935]                     cond$call), session = sessionInformation(), 
[17:46:32.935]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.935]                   signalCondition(cond)
[17:46:32.935]                 }
[17:46:32.935]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.935]                 "immediateCondition"))) {
[17:46:32.935]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.935]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.935]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.935]                   if (TRUE && !signal) {
[17:46:32.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.935]                     {
[17:46:32.935]                       inherits <- base::inherits
[17:46:32.935]                       invokeRestart <- base::invokeRestart
[17:46:32.935]                       is.null <- base::is.null
[17:46:32.935]                       muffled <- FALSE
[17:46:32.935]                       if (inherits(cond, "message")) {
[17:46:32.935]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.935]                         if (muffled) 
[17:46:32.935]                           invokeRestart("muffleMessage")
[17:46:32.935]                       }
[17:46:32.935]                       else if (inherits(cond, "warning")) {
[17:46:32.935]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.935]                         if (muffled) 
[17:46:32.935]                           invokeRestart("muffleWarning")
[17:46:32.935]                       }
[17:46:32.935]                       else if (inherits(cond, "condition")) {
[17:46:32.935]                         if (!is.null(pattern)) {
[17:46:32.935]                           computeRestarts <- base::computeRestarts
[17:46:32.935]                           grepl <- base::grepl
[17:46:32.935]                           restarts <- computeRestarts(cond)
[17:46:32.935]                           for (restart in restarts) {
[17:46:32.935]                             name <- restart$name
[17:46:32.935]                             if (is.null(name)) 
[17:46:32.935]                               next
[17:46:32.935]                             if (!grepl(pattern, name)) 
[17:46:32.935]                               next
[17:46:32.935]                             invokeRestart(restart)
[17:46:32.935]                             muffled <- TRUE
[17:46:32.935]                             break
[17:46:32.935]                           }
[17:46:32.935]                         }
[17:46:32.935]                       }
[17:46:32.935]                       invisible(muffled)
[17:46:32.935]                     }
[17:46:32.935]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.935]                   }
[17:46:32.935]                 }
[17:46:32.935]                 else {
[17:46:32.935]                   if (TRUE) {
[17:46:32.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.935]                     {
[17:46:32.935]                       inherits <- base::inherits
[17:46:32.935]                       invokeRestart <- base::invokeRestart
[17:46:32.935]                       is.null <- base::is.null
[17:46:32.935]                       muffled <- FALSE
[17:46:32.935]                       if (inherits(cond, "message")) {
[17:46:32.935]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.935]                         if (muffled) 
[17:46:32.935]                           invokeRestart("muffleMessage")
[17:46:32.935]                       }
[17:46:32.935]                       else if (inherits(cond, "warning")) {
[17:46:32.935]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.935]                         if (muffled) 
[17:46:32.935]                           invokeRestart("muffleWarning")
[17:46:32.935]                       }
[17:46:32.935]                       else if (inherits(cond, "condition")) {
[17:46:32.935]                         if (!is.null(pattern)) {
[17:46:32.935]                           computeRestarts <- base::computeRestarts
[17:46:32.935]                           grepl <- base::grepl
[17:46:32.935]                           restarts <- computeRestarts(cond)
[17:46:32.935]                           for (restart in restarts) {
[17:46:32.935]                             name <- restart$name
[17:46:32.935]                             if (is.null(name)) 
[17:46:32.935]                               next
[17:46:32.935]                             if (!grepl(pattern, name)) 
[17:46:32.935]                               next
[17:46:32.935]                             invokeRestart(restart)
[17:46:32.935]                             muffled <- TRUE
[17:46:32.935]                             break
[17:46:32.935]                           }
[17:46:32.935]                         }
[17:46:32.935]                       }
[17:46:32.935]                       invisible(muffled)
[17:46:32.935]                     }
[17:46:32.935]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.935]                   }
[17:46:32.935]                 }
[17:46:32.935]             }
[17:46:32.935]         }))
[17:46:32.935]     }, error = function(ex) {
[17:46:32.935]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.935]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.935]                 ...future.rng), started = ...future.startTime, 
[17:46:32.935]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.935]             version = "1.8"), class = "FutureResult")
[17:46:32.935]     }, finally = {
[17:46:32.935]         if (!identical(...future.workdir, getwd())) 
[17:46:32.935]             setwd(...future.workdir)
[17:46:32.935]         {
[17:46:32.935]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.935]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.935]             }
[17:46:32.935]             base::options(...future.oldOptions)
[17:46:32.935]             if (.Platform$OS.type == "windows") {
[17:46:32.935]                 old_names <- names(...future.oldEnvVars)
[17:46:32.935]                 envs <- base::Sys.getenv()
[17:46:32.935]                 names <- names(envs)
[17:46:32.935]                 common <- intersect(names, old_names)
[17:46:32.935]                 added <- setdiff(names, old_names)
[17:46:32.935]                 removed <- setdiff(old_names, names)
[17:46:32.935]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.935]                   envs[common]]
[17:46:32.935]                 NAMES <- toupper(changed)
[17:46:32.935]                 args <- list()
[17:46:32.935]                 for (kk in seq_along(NAMES)) {
[17:46:32.935]                   name <- changed[[kk]]
[17:46:32.935]                   NAME <- NAMES[[kk]]
[17:46:32.935]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.935]                     next
[17:46:32.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.935]                 }
[17:46:32.935]                 NAMES <- toupper(added)
[17:46:32.935]                 for (kk in seq_along(NAMES)) {
[17:46:32.935]                   name <- added[[kk]]
[17:46:32.935]                   NAME <- NAMES[[kk]]
[17:46:32.935]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.935]                     next
[17:46:32.935]                   args[[name]] <- ""
[17:46:32.935]                 }
[17:46:32.935]                 NAMES <- toupper(removed)
[17:46:32.935]                 for (kk in seq_along(NAMES)) {
[17:46:32.935]                   name <- removed[[kk]]
[17:46:32.935]                   NAME <- NAMES[[kk]]
[17:46:32.935]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.935]                     next
[17:46:32.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.935]                 }
[17:46:32.935]                 if (length(args) > 0) 
[17:46:32.935]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.935]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.935]             }
[17:46:32.935]             else {
[17:46:32.935]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.935]             }
[17:46:32.935]             {
[17:46:32.935]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.935]                   0L) {
[17:46:32.935]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.935]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.935]                   base::options(opts)
[17:46:32.935]                 }
[17:46:32.935]                 {
[17:46:32.935]                   {
[17:46:32.935]                     NULL
[17:46:32.935]                     RNGkind("Mersenne-Twister")
[17:46:32.935]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.935]                       inherits = FALSE)
[17:46:32.935]                   }
[17:46:32.935]                   options(future.plan = NULL)
[17:46:32.935]                   if (is.na(NA_character_)) 
[17:46:32.935]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.935]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.935]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.935]                     .init = FALSE)
[17:46:32.935]                 }
[17:46:32.935]             }
[17:46:32.935]         }
[17:46:32.935]     })
[17:46:32.935]     if (TRUE) {
[17:46:32.935]         base::sink(type = "output", split = FALSE)
[17:46:32.935]         if (TRUE) {
[17:46:32.935]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.935]         }
[17:46:32.935]         else {
[17:46:32.935]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.935]         }
[17:46:32.935]         base::close(...future.stdout)
[17:46:32.935]         ...future.stdout <- NULL
[17:46:32.935]     }
[17:46:32.935]     ...future.result$conditions <- ...future.conditions
[17:46:32.935]     ...future.result$finished <- base::Sys.time()
[17:46:32.935]     ...future.result
[17:46:32.935] }
[17:46:32.937] plan(): Setting new future strategy stack:
[17:46:32.937] List of future strategies:
[17:46:32.937] 1. sequential:
[17:46:32.937]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.937]    - tweaked: FALSE
[17:46:32.937]    - call: NULL
[17:46:32.938] plan(): nbrOfWorkers() = 1
[17:46:32.938] plan(): Setting new future strategy stack:
[17:46:32.938] List of future strategies:
[17:46:32.938] 1. sequential:
[17:46:32.938]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.938]    - tweaked: FALSE
[17:46:32.938]    - call: plan(strategy)
[17:46:32.939] plan(): nbrOfWorkers() = 1
[17:46:32.939] SequentialFuture started (and completed)
[17:46:32.939] - Launch lazy future ... done
[17:46:32.939] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.941] getGlobalsAndPackages() ...
[17:46:32.941] Searching for globals...
[17:46:32.942] - globals found: [1] ‘{’
[17:46:32.942] Searching for globals ... DONE
[17:46:32.942] Resolving globals: FALSE
[17:46:32.943] 
[17:46:32.943] 
[17:46:32.943] getGlobalsAndPackages() ... DONE
[17:46:32.943] run() for ‘Future’ ...
[17:46:32.943] - state: ‘created’
[17:46:32.943] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:32.944] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.944] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:32.944]   - Field: ‘label’
[17:46:32.944]   - Field: ‘local’
[17:46:32.944]   - Field: ‘owner’
[17:46:32.944]   - Field: ‘envir’
[17:46:32.944]   - Field: ‘packages’
[17:46:32.944]   - Field: ‘gc’
[17:46:32.944]   - Field: ‘conditions’
[17:46:32.944]   - Field: ‘expr’
[17:46:32.945]   - Field: ‘uuid’
[17:46:32.945]   - Field: ‘seed’
[17:46:32.945]   - Field: ‘version’
[17:46:32.945]   - Field: ‘result’
[17:46:32.945]   - Field: ‘asynchronous’
[17:46:32.945]   - Field: ‘calls’
[17:46:32.945]   - Field: ‘globals’
[17:46:32.945]   - Field: ‘stdout’
[17:46:32.945]   - Field: ‘earlySignal’
[17:46:32.945]   - Field: ‘lazy’
[17:46:32.945]   - Field: ‘state’
[17:46:32.946] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:32.946] - Launch lazy future ...
[17:46:32.946] Packages needed by the future expression (n = 0): <none>
[17:46:32.946] Packages needed by future strategies (n = 0): <none>
[17:46:32.946] {
[17:46:32.946]     {
[17:46:32.946]         {
[17:46:32.946]             ...future.startTime <- base::Sys.time()
[17:46:32.946]             {
[17:46:32.946]                 {
[17:46:32.946]                   {
[17:46:32.946]                     base::local({
[17:46:32.946]                       has_future <- base::requireNamespace("future", 
[17:46:32.946]                         quietly = TRUE)
[17:46:32.946]                       if (has_future) {
[17:46:32.946]                         ns <- base::getNamespace("future")
[17:46:32.946]                         version <- ns[[".package"]][["version"]]
[17:46:32.946]                         if (is.null(version)) 
[17:46:32.946]                           version <- utils::packageVersion("future")
[17:46:32.946]                       }
[17:46:32.946]                       else {
[17:46:32.946]                         version <- NULL
[17:46:32.946]                       }
[17:46:32.946]                       if (!has_future || version < "1.8.0") {
[17:46:32.946]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.946]                           "", base::R.version$version.string), 
[17:46:32.946]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.946]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.946]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.946]                             "release", "version")], collapse = " "), 
[17:46:32.946]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.946]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.946]                           info)
[17:46:32.946]                         info <- base::paste(info, collapse = "; ")
[17:46:32.946]                         if (!has_future) {
[17:46:32.946]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.946]                             info)
[17:46:32.946]                         }
[17:46:32.946]                         else {
[17:46:32.946]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.946]                             info, version)
[17:46:32.946]                         }
[17:46:32.946]                         base::stop(msg)
[17:46:32.946]                       }
[17:46:32.946]                     })
[17:46:32.946]                   }
[17:46:32.946]                   ...future.strategy.old <- future::plan("list")
[17:46:32.946]                   options(future.plan = NULL)
[17:46:32.946]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.946]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.946]                 }
[17:46:32.946]                 ...future.workdir <- getwd()
[17:46:32.946]             }
[17:46:32.946]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.946]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.946]         }
[17:46:32.946]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.946]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.946]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.946]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.946]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.946]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.946]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.946]             base::names(...future.oldOptions))
[17:46:32.946]     }
[17:46:32.946]     if (FALSE) {
[17:46:32.946]     }
[17:46:32.946]     else {
[17:46:32.946]         if (TRUE) {
[17:46:32.946]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.946]                 open = "w")
[17:46:32.946]         }
[17:46:32.946]         else {
[17:46:32.946]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.946]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.946]         }
[17:46:32.946]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.946]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.946]             base::sink(type = "output", split = FALSE)
[17:46:32.946]             base::close(...future.stdout)
[17:46:32.946]         }, add = TRUE)
[17:46:32.946]     }
[17:46:32.946]     ...future.frame <- base::sys.nframe()
[17:46:32.946]     ...future.conditions <- base::list()
[17:46:32.946]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.946]     if (FALSE) {
[17:46:32.946]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.946]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.946]     }
[17:46:32.946]     ...future.result <- base::tryCatch({
[17:46:32.946]         base::withCallingHandlers({
[17:46:32.946]             ...future.value <- base::withVisible(base::local({
[17:46:32.946]                 42
[17:46:32.946]             }))
[17:46:32.946]             future::FutureResult(value = ...future.value$value, 
[17:46:32.946]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.946]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.946]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.946]                     ...future.globalenv.names))
[17:46:32.946]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.946]         }, condition = base::local({
[17:46:32.946]             c <- base::c
[17:46:32.946]             inherits <- base::inherits
[17:46:32.946]             invokeRestart <- base::invokeRestart
[17:46:32.946]             length <- base::length
[17:46:32.946]             list <- base::list
[17:46:32.946]             seq.int <- base::seq.int
[17:46:32.946]             signalCondition <- base::signalCondition
[17:46:32.946]             sys.calls <- base::sys.calls
[17:46:32.946]             `[[` <- base::`[[`
[17:46:32.946]             `+` <- base::`+`
[17:46:32.946]             `<<-` <- base::`<<-`
[17:46:32.946]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.946]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.946]                   3L)]
[17:46:32.946]             }
[17:46:32.946]             function(cond) {
[17:46:32.946]                 is_error <- inherits(cond, "error")
[17:46:32.946]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.946]                   NULL)
[17:46:32.946]                 if (is_error) {
[17:46:32.946]                   sessionInformation <- function() {
[17:46:32.946]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.946]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.946]                       search = base::search(), system = base::Sys.info())
[17:46:32.946]                   }
[17:46:32.946]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.946]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.946]                     cond$call), session = sessionInformation(), 
[17:46:32.946]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.946]                   signalCondition(cond)
[17:46:32.946]                 }
[17:46:32.946]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.946]                 "immediateCondition"))) {
[17:46:32.946]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.946]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.946]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.946]                   if (TRUE && !signal) {
[17:46:32.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.946]                     {
[17:46:32.946]                       inherits <- base::inherits
[17:46:32.946]                       invokeRestart <- base::invokeRestart
[17:46:32.946]                       is.null <- base::is.null
[17:46:32.946]                       muffled <- FALSE
[17:46:32.946]                       if (inherits(cond, "message")) {
[17:46:32.946]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.946]                         if (muffled) 
[17:46:32.946]                           invokeRestart("muffleMessage")
[17:46:32.946]                       }
[17:46:32.946]                       else if (inherits(cond, "warning")) {
[17:46:32.946]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.946]                         if (muffled) 
[17:46:32.946]                           invokeRestart("muffleWarning")
[17:46:32.946]                       }
[17:46:32.946]                       else if (inherits(cond, "condition")) {
[17:46:32.946]                         if (!is.null(pattern)) {
[17:46:32.946]                           computeRestarts <- base::computeRestarts
[17:46:32.946]                           grepl <- base::grepl
[17:46:32.946]                           restarts <- computeRestarts(cond)
[17:46:32.946]                           for (restart in restarts) {
[17:46:32.946]                             name <- restart$name
[17:46:32.946]                             if (is.null(name)) 
[17:46:32.946]                               next
[17:46:32.946]                             if (!grepl(pattern, name)) 
[17:46:32.946]                               next
[17:46:32.946]                             invokeRestart(restart)
[17:46:32.946]                             muffled <- TRUE
[17:46:32.946]                             break
[17:46:32.946]                           }
[17:46:32.946]                         }
[17:46:32.946]                       }
[17:46:32.946]                       invisible(muffled)
[17:46:32.946]                     }
[17:46:32.946]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.946]                   }
[17:46:32.946]                 }
[17:46:32.946]                 else {
[17:46:32.946]                   if (TRUE) {
[17:46:32.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.946]                     {
[17:46:32.946]                       inherits <- base::inherits
[17:46:32.946]                       invokeRestart <- base::invokeRestart
[17:46:32.946]                       is.null <- base::is.null
[17:46:32.946]                       muffled <- FALSE
[17:46:32.946]                       if (inherits(cond, "message")) {
[17:46:32.946]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.946]                         if (muffled) 
[17:46:32.946]                           invokeRestart("muffleMessage")
[17:46:32.946]                       }
[17:46:32.946]                       else if (inherits(cond, "warning")) {
[17:46:32.946]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.946]                         if (muffled) 
[17:46:32.946]                           invokeRestart("muffleWarning")
[17:46:32.946]                       }
[17:46:32.946]                       else if (inherits(cond, "condition")) {
[17:46:32.946]                         if (!is.null(pattern)) {
[17:46:32.946]                           computeRestarts <- base::computeRestarts
[17:46:32.946]                           grepl <- base::grepl
[17:46:32.946]                           restarts <- computeRestarts(cond)
[17:46:32.946]                           for (restart in restarts) {
[17:46:32.946]                             name <- restart$name
[17:46:32.946]                             if (is.null(name)) 
[17:46:32.946]                               next
[17:46:32.946]                             if (!grepl(pattern, name)) 
[17:46:32.946]                               next
[17:46:32.946]                             invokeRestart(restart)
[17:46:32.946]                             muffled <- TRUE
[17:46:32.946]                             break
[17:46:32.946]                           }
[17:46:32.946]                         }
[17:46:32.946]                       }
[17:46:32.946]                       invisible(muffled)
[17:46:32.946]                     }
[17:46:32.946]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.946]                   }
[17:46:32.946]                 }
[17:46:32.946]             }
[17:46:32.946]         }))
[17:46:32.946]     }, error = function(ex) {
[17:46:32.946]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.946]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.946]                 ...future.rng), started = ...future.startTime, 
[17:46:32.946]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.946]             version = "1.8"), class = "FutureResult")
[17:46:32.946]     }, finally = {
[17:46:32.946]         if (!identical(...future.workdir, getwd())) 
[17:46:32.946]             setwd(...future.workdir)
[17:46:32.946]         {
[17:46:32.946]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.946]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.946]             }
[17:46:32.946]             base::options(...future.oldOptions)
[17:46:32.946]             if (.Platform$OS.type == "windows") {
[17:46:32.946]                 old_names <- names(...future.oldEnvVars)
[17:46:32.946]                 envs <- base::Sys.getenv()
[17:46:32.946]                 names <- names(envs)
[17:46:32.946]                 common <- intersect(names, old_names)
[17:46:32.946]                 added <- setdiff(names, old_names)
[17:46:32.946]                 removed <- setdiff(old_names, names)
[17:46:32.946]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.946]                   envs[common]]
[17:46:32.946]                 NAMES <- toupper(changed)
[17:46:32.946]                 args <- list()
[17:46:32.946]                 for (kk in seq_along(NAMES)) {
[17:46:32.946]                   name <- changed[[kk]]
[17:46:32.946]                   NAME <- NAMES[[kk]]
[17:46:32.946]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.946]                     next
[17:46:32.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.946]                 }
[17:46:32.946]                 NAMES <- toupper(added)
[17:46:32.946]                 for (kk in seq_along(NAMES)) {
[17:46:32.946]                   name <- added[[kk]]
[17:46:32.946]                   NAME <- NAMES[[kk]]
[17:46:32.946]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.946]                     next
[17:46:32.946]                   args[[name]] <- ""
[17:46:32.946]                 }
[17:46:32.946]                 NAMES <- toupper(removed)
[17:46:32.946]                 for (kk in seq_along(NAMES)) {
[17:46:32.946]                   name <- removed[[kk]]
[17:46:32.946]                   NAME <- NAMES[[kk]]
[17:46:32.946]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.946]                     next
[17:46:32.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.946]                 }
[17:46:32.946]                 if (length(args) > 0) 
[17:46:32.946]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.946]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.946]             }
[17:46:32.946]             else {
[17:46:32.946]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.946]             }
[17:46:32.946]             {
[17:46:32.946]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.946]                   0L) {
[17:46:32.946]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.946]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.946]                   base::options(opts)
[17:46:32.946]                 }
[17:46:32.946]                 {
[17:46:32.946]                   {
[17:46:32.946]                     NULL
[17:46:32.946]                     RNGkind("Mersenne-Twister")
[17:46:32.946]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.946]                       inherits = FALSE)
[17:46:32.946]                   }
[17:46:32.946]                   options(future.plan = NULL)
[17:46:32.946]                   if (is.na(NA_character_)) 
[17:46:32.946]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.946]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.946]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.946]                     .init = FALSE)
[17:46:32.946]                 }
[17:46:32.946]             }
[17:46:32.946]         }
[17:46:32.946]     })
[17:46:32.946]     if (TRUE) {
[17:46:32.946]         base::sink(type = "output", split = FALSE)
[17:46:32.946]         if (TRUE) {
[17:46:32.946]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.946]         }
[17:46:32.946]         else {
[17:46:32.946]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.946]         }
[17:46:32.946]         base::close(...future.stdout)
[17:46:32.946]         ...future.stdout <- NULL
[17:46:32.946]     }
[17:46:32.946]     ...future.result$conditions <- ...future.conditions
[17:46:32.946]     ...future.result$finished <- base::Sys.time()
[17:46:32.946]     ...future.result
[17:46:32.946] }
[17:46:32.948] plan(): Setting new future strategy stack:
[17:46:32.948] List of future strategies:
[17:46:32.948] 1. sequential:
[17:46:32.948]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.948]    - tweaked: FALSE
[17:46:32.948]    - call: NULL
[17:46:32.949] plan(): nbrOfWorkers() = 1
[17:46:32.949] plan(): Setting new future strategy stack:
[17:46:32.949] List of future strategies:
[17:46:32.949] 1. sequential:
[17:46:32.949]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.949]    - tweaked: FALSE
[17:46:32.949]    - call: plan(strategy)
[17:46:32.950] plan(): nbrOfWorkers() = 1
[17:46:32.950] SequentialFuture started (and completed)
[17:46:32.950] - Launch lazy future ... done
[17:46:32.950] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.951] getGlobalsAndPackages() ...
[17:46:32.951] Searching for globals...
[17:46:32.951] 
[17:46:32.951] Searching for globals ... DONE
[17:46:32.951] - globals: [0] <none>
[17:46:32.952] getGlobalsAndPackages() ... DONE
[17:46:32.952] Packages needed by the future expression (n = 0): <none>
[17:46:32.952] Packages needed by future strategies (n = 0): <none>
[17:46:32.952] {
[17:46:32.952]     {
[17:46:32.952]         {
[17:46:32.952]             ...future.startTime <- base::Sys.time()
[17:46:32.952]             {
[17:46:32.952]                 {
[17:46:32.952]                   {
[17:46:32.952]                     base::local({
[17:46:32.952]                       has_future <- base::requireNamespace("future", 
[17:46:32.952]                         quietly = TRUE)
[17:46:32.952]                       if (has_future) {
[17:46:32.952]                         ns <- base::getNamespace("future")
[17:46:32.952]                         version <- ns[[".package"]][["version"]]
[17:46:32.952]                         if (is.null(version)) 
[17:46:32.952]                           version <- utils::packageVersion("future")
[17:46:32.952]                       }
[17:46:32.952]                       else {
[17:46:32.952]                         version <- NULL
[17:46:32.952]                       }
[17:46:32.952]                       if (!has_future || version < "1.8.0") {
[17:46:32.952]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.952]                           "", base::R.version$version.string), 
[17:46:32.952]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.952]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.952]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.952]                             "release", "version")], collapse = " "), 
[17:46:32.952]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.952]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.952]                           info)
[17:46:32.952]                         info <- base::paste(info, collapse = "; ")
[17:46:32.952]                         if (!has_future) {
[17:46:32.952]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.952]                             info)
[17:46:32.952]                         }
[17:46:32.952]                         else {
[17:46:32.952]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.952]                             info, version)
[17:46:32.952]                         }
[17:46:32.952]                         base::stop(msg)
[17:46:32.952]                       }
[17:46:32.952]                     })
[17:46:32.952]                   }
[17:46:32.952]                   ...future.strategy.old <- future::plan("list")
[17:46:32.952]                   options(future.plan = NULL)
[17:46:32.952]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.952]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.952]                 }
[17:46:32.952]                 ...future.workdir <- getwd()
[17:46:32.952]             }
[17:46:32.952]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.952]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.952]         }
[17:46:32.952]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.952]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.952]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.952]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.952]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.952]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.952]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.952]             base::names(...future.oldOptions))
[17:46:32.952]     }
[17:46:32.952]     if (FALSE) {
[17:46:32.952]     }
[17:46:32.952]     else {
[17:46:32.952]         if (TRUE) {
[17:46:32.952]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.952]                 open = "w")
[17:46:32.952]         }
[17:46:32.952]         else {
[17:46:32.952]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.952]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.952]         }
[17:46:32.952]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.952]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.952]             base::sink(type = "output", split = FALSE)
[17:46:32.952]             base::close(...future.stdout)
[17:46:32.952]         }, add = TRUE)
[17:46:32.952]     }
[17:46:32.952]     ...future.frame <- base::sys.nframe()
[17:46:32.952]     ...future.conditions <- base::list()
[17:46:32.952]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.952]     if (FALSE) {
[17:46:32.952]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.952]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.952]     }
[17:46:32.952]     ...future.result <- base::tryCatch({
[17:46:32.952]         base::withCallingHandlers({
[17:46:32.952]             ...future.value <- base::withVisible(base::local(42))
[17:46:32.952]             future::FutureResult(value = ...future.value$value, 
[17:46:32.952]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.952]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.952]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.952]                     ...future.globalenv.names))
[17:46:32.952]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.952]         }, condition = base::local({
[17:46:32.952]             c <- base::c
[17:46:32.952]             inherits <- base::inherits
[17:46:32.952]             invokeRestart <- base::invokeRestart
[17:46:32.952]             length <- base::length
[17:46:32.952]             list <- base::list
[17:46:32.952]             seq.int <- base::seq.int
[17:46:32.952]             signalCondition <- base::signalCondition
[17:46:32.952]             sys.calls <- base::sys.calls
[17:46:32.952]             `[[` <- base::`[[`
[17:46:32.952]             `+` <- base::`+`
[17:46:32.952]             `<<-` <- base::`<<-`
[17:46:32.952]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.952]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.952]                   3L)]
[17:46:32.952]             }
[17:46:32.952]             function(cond) {
[17:46:32.952]                 is_error <- inherits(cond, "error")
[17:46:32.952]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.952]                   NULL)
[17:46:32.952]                 if (is_error) {
[17:46:32.952]                   sessionInformation <- function() {
[17:46:32.952]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.952]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.952]                       search = base::search(), system = base::Sys.info())
[17:46:32.952]                   }
[17:46:32.952]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.952]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.952]                     cond$call), session = sessionInformation(), 
[17:46:32.952]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.952]                   signalCondition(cond)
[17:46:32.952]                 }
[17:46:32.952]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.952]                 "immediateCondition"))) {
[17:46:32.952]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.952]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.952]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.952]                   if (TRUE && !signal) {
[17:46:32.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.952]                     {
[17:46:32.952]                       inherits <- base::inherits
[17:46:32.952]                       invokeRestart <- base::invokeRestart
[17:46:32.952]                       is.null <- base::is.null
[17:46:32.952]                       muffled <- FALSE
[17:46:32.952]                       if (inherits(cond, "message")) {
[17:46:32.952]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.952]                         if (muffled) 
[17:46:32.952]                           invokeRestart("muffleMessage")
[17:46:32.952]                       }
[17:46:32.952]                       else if (inherits(cond, "warning")) {
[17:46:32.952]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.952]                         if (muffled) 
[17:46:32.952]                           invokeRestart("muffleWarning")
[17:46:32.952]                       }
[17:46:32.952]                       else if (inherits(cond, "condition")) {
[17:46:32.952]                         if (!is.null(pattern)) {
[17:46:32.952]                           computeRestarts <- base::computeRestarts
[17:46:32.952]                           grepl <- base::grepl
[17:46:32.952]                           restarts <- computeRestarts(cond)
[17:46:32.952]                           for (restart in restarts) {
[17:46:32.952]                             name <- restart$name
[17:46:32.952]                             if (is.null(name)) 
[17:46:32.952]                               next
[17:46:32.952]                             if (!grepl(pattern, name)) 
[17:46:32.952]                               next
[17:46:32.952]                             invokeRestart(restart)
[17:46:32.952]                             muffled <- TRUE
[17:46:32.952]                             break
[17:46:32.952]                           }
[17:46:32.952]                         }
[17:46:32.952]                       }
[17:46:32.952]                       invisible(muffled)
[17:46:32.952]                     }
[17:46:32.952]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.952]                   }
[17:46:32.952]                 }
[17:46:32.952]                 else {
[17:46:32.952]                   if (TRUE) {
[17:46:32.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.952]                     {
[17:46:32.952]                       inherits <- base::inherits
[17:46:32.952]                       invokeRestart <- base::invokeRestart
[17:46:32.952]                       is.null <- base::is.null
[17:46:32.952]                       muffled <- FALSE
[17:46:32.952]                       if (inherits(cond, "message")) {
[17:46:32.952]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.952]                         if (muffled) 
[17:46:32.952]                           invokeRestart("muffleMessage")
[17:46:32.952]                       }
[17:46:32.952]                       else if (inherits(cond, "warning")) {
[17:46:32.952]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.952]                         if (muffled) 
[17:46:32.952]                           invokeRestart("muffleWarning")
[17:46:32.952]                       }
[17:46:32.952]                       else if (inherits(cond, "condition")) {
[17:46:32.952]                         if (!is.null(pattern)) {
[17:46:32.952]                           computeRestarts <- base::computeRestarts
[17:46:32.952]                           grepl <- base::grepl
[17:46:32.952]                           restarts <- computeRestarts(cond)
[17:46:32.952]                           for (restart in restarts) {
[17:46:32.952]                             name <- restart$name
[17:46:32.952]                             if (is.null(name)) 
[17:46:32.952]                               next
[17:46:32.952]                             if (!grepl(pattern, name)) 
[17:46:32.952]                               next
[17:46:32.952]                             invokeRestart(restart)
[17:46:32.952]                             muffled <- TRUE
[17:46:32.952]                             break
[17:46:32.952]                           }
[17:46:32.952]                         }
[17:46:32.952]                       }
[17:46:32.952]                       invisible(muffled)
[17:46:32.952]                     }
[17:46:32.952]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.952]                   }
[17:46:32.952]                 }
[17:46:32.952]             }
[17:46:32.952]         }))
[17:46:32.952]     }, error = function(ex) {
[17:46:32.952]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.952]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.952]                 ...future.rng), started = ...future.startTime, 
[17:46:32.952]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.952]             version = "1.8"), class = "FutureResult")
[17:46:32.952]     }, finally = {
[17:46:32.952]         if (!identical(...future.workdir, getwd())) 
[17:46:32.952]             setwd(...future.workdir)
[17:46:32.952]         {
[17:46:32.952]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.952]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.952]             }
[17:46:32.952]             base::options(...future.oldOptions)
[17:46:32.952]             if (.Platform$OS.type == "windows") {
[17:46:32.952]                 old_names <- names(...future.oldEnvVars)
[17:46:32.952]                 envs <- base::Sys.getenv()
[17:46:32.952]                 names <- names(envs)
[17:46:32.952]                 common <- intersect(names, old_names)
[17:46:32.952]                 added <- setdiff(names, old_names)
[17:46:32.952]                 removed <- setdiff(old_names, names)
[17:46:32.952]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.952]                   envs[common]]
[17:46:32.952]                 NAMES <- toupper(changed)
[17:46:32.952]                 args <- list()
[17:46:32.952]                 for (kk in seq_along(NAMES)) {
[17:46:32.952]                   name <- changed[[kk]]
[17:46:32.952]                   NAME <- NAMES[[kk]]
[17:46:32.952]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.952]                     next
[17:46:32.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.952]                 }
[17:46:32.952]                 NAMES <- toupper(added)
[17:46:32.952]                 for (kk in seq_along(NAMES)) {
[17:46:32.952]                   name <- added[[kk]]
[17:46:32.952]                   NAME <- NAMES[[kk]]
[17:46:32.952]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.952]                     next
[17:46:32.952]                   args[[name]] <- ""
[17:46:32.952]                 }
[17:46:32.952]                 NAMES <- toupper(removed)
[17:46:32.952]                 for (kk in seq_along(NAMES)) {
[17:46:32.952]                   name <- removed[[kk]]
[17:46:32.952]                   NAME <- NAMES[[kk]]
[17:46:32.952]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.952]                     next
[17:46:32.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.952]                 }
[17:46:32.952]                 if (length(args) > 0) 
[17:46:32.952]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.952]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.952]             }
[17:46:32.952]             else {
[17:46:32.952]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.952]             }
[17:46:32.952]             {
[17:46:32.952]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.952]                   0L) {
[17:46:32.952]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.952]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.952]                   base::options(opts)
[17:46:32.952]                 }
[17:46:32.952]                 {
[17:46:32.952]                   {
[17:46:32.952]                     NULL
[17:46:32.952]                     RNGkind("Mersenne-Twister")
[17:46:32.952]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.952]                       inherits = FALSE)
[17:46:32.952]                   }
[17:46:32.952]                   options(future.plan = NULL)
[17:46:32.952]                   if (is.na(NA_character_)) 
[17:46:32.952]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.952]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.952]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.952]                     .init = FALSE)
[17:46:32.952]                 }
[17:46:32.952]             }
[17:46:32.952]         }
[17:46:32.952]     })
[17:46:32.952]     if (TRUE) {
[17:46:32.952]         base::sink(type = "output", split = FALSE)
[17:46:32.952]         if (TRUE) {
[17:46:32.952]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.952]         }
[17:46:32.952]         else {
[17:46:32.952]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.952]         }
[17:46:32.952]         base::close(...future.stdout)
[17:46:32.952]         ...future.stdout <- NULL
[17:46:32.952]     }
[17:46:32.952]     ...future.result$conditions <- ...future.conditions
[17:46:32.952]     ...future.result$finished <- base::Sys.time()
[17:46:32.952]     ...future.result
[17:46:32.952] }
[17:46:32.954] plan(): Setting new future strategy stack:
[17:46:32.954] List of future strategies:
[17:46:32.954] 1. sequential:
[17:46:32.954]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.954]    - tweaked: FALSE
[17:46:32.954]    - call: NULL
[17:46:32.954] plan(): nbrOfWorkers() = 1
[17:46:32.955] plan(): Setting new future strategy stack:
[17:46:32.955] List of future strategies:
[17:46:32.955] 1. sequential:
[17:46:32.955]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.955]    - tweaked: FALSE
[17:46:32.955]    - call: plan(strategy)
[17:46:32.956] plan(): nbrOfWorkers() = 1
[17:46:32.956] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.956] getGlobalsAndPackages() ...
[17:46:32.956] Searching for globals...
[17:46:32.957] 
[17:46:32.957] Searching for globals ... DONE
[17:46:32.957] - globals: [0] <none>
[17:46:32.957] getGlobalsAndPackages() ... DONE
[17:46:32.957] run() for ‘Future’ ...
[17:46:32.957] - state: ‘created’
[17:46:32.957] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:32.958] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.958] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:32.958]   - Field: ‘label’
[17:46:32.958]   - Field: ‘local’
[17:46:32.958]   - Field: ‘owner’
[17:46:32.958]   - Field: ‘envir’
[17:46:32.958]   - Field: ‘packages’
[17:46:32.958]   - Field: ‘gc’
[17:46:32.958]   - Field: ‘conditions’
[17:46:32.958]   - Field: ‘expr’
[17:46:32.959]   - Field: ‘uuid’
[17:46:32.959]   - Field: ‘seed’
[17:46:32.959]   - Field: ‘version’
[17:46:32.959]   - Field: ‘result’
[17:46:32.959]   - Field: ‘asynchronous’
[17:46:32.959]   - Field: ‘calls’
[17:46:32.959]   - Field: ‘globals’
[17:46:32.959]   - Field: ‘stdout’
[17:46:32.959]   - Field: ‘earlySignal’
[17:46:32.959]   - Field: ‘lazy’
[17:46:32.959]   - Field: ‘state’
[17:46:32.960] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:32.960] - Launch lazy future ...
[17:46:32.960] Packages needed by the future expression (n = 0): <none>
[17:46:32.960] Packages needed by future strategies (n = 0): <none>
[17:46:32.960] {
[17:46:32.960]     {
[17:46:32.960]         {
[17:46:32.960]             ...future.startTime <- base::Sys.time()
[17:46:32.960]             {
[17:46:32.960]                 {
[17:46:32.960]                   {
[17:46:32.960]                     base::local({
[17:46:32.960]                       has_future <- base::requireNamespace("future", 
[17:46:32.960]                         quietly = TRUE)
[17:46:32.960]                       if (has_future) {
[17:46:32.960]                         ns <- base::getNamespace("future")
[17:46:32.960]                         version <- ns[[".package"]][["version"]]
[17:46:32.960]                         if (is.null(version)) 
[17:46:32.960]                           version <- utils::packageVersion("future")
[17:46:32.960]                       }
[17:46:32.960]                       else {
[17:46:32.960]                         version <- NULL
[17:46:32.960]                       }
[17:46:32.960]                       if (!has_future || version < "1.8.0") {
[17:46:32.960]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.960]                           "", base::R.version$version.string), 
[17:46:32.960]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.960]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.960]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.960]                             "release", "version")], collapse = " "), 
[17:46:32.960]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.960]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.960]                           info)
[17:46:32.960]                         info <- base::paste(info, collapse = "; ")
[17:46:32.960]                         if (!has_future) {
[17:46:32.960]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.960]                             info)
[17:46:32.960]                         }
[17:46:32.960]                         else {
[17:46:32.960]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.960]                             info, version)
[17:46:32.960]                         }
[17:46:32.960]                         base::stop(msg)
[17:46:32.960]                       }
[17:46:32.960]                     })
[17:46:32.960]                   }
[17:46:32.960]                   ...future.strategy.old <- future::plan("list")
[17:46:32.960]                   options(future.plan = NULL)
[17:46:32.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.960]                 }
[17:46:32.960]                 ...future.workdir <- getwd()
[17:46:32.960]             }
[17:46:32.960]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.960]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.960]         }
[17:46:32.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.960]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.960]             base::names(...future.oldOptions))
[17:46:32.960]     }
[17:46:32.960]     if (FALSE) {
[17:46:32.960]     }
[17:46:32.960]     else {
[17:46:32.960]         if (TRUE) {
[17:46:32.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.960]                 open = "w")
[17:46:32.960]         }
[17:46:32.960]         else {
[17:46:32.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.960]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.960]         }
[17:46:32.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.960]             base::sink(type = "output", split = FALSE)
[17:46:32.960]             base::close(...future.stdout)
[17:46:32.960]         }, add = TRUE)
[17:46:32.960]     }
[17:46:32.960]     ...future.frame <- base::sys.nframe()
[17:46:32.960]     ...future.conditions <- base::list()
[17:46:32.960]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.960]     if (FALSE) {
[17:46:32.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.960]     }
[17:46:32.960]     ...future.result <- base::tryCatch({
[17:46:32.960]         base::withCallingHandlers({
[17:46:32.960]             ...future.value <- base::withVisible(base::local(42))
[17:46:32.960]             future::FutureResult(value = ...future.value$value, 
[17:46:32.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.960]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.960]                     ...future.globalenv.names))
[17:46:32.960]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.960]         }, condition = base::local({
[17:46:32.960]             c <- base::c
[17:46:32.960]             inherits <- base::inherits
[17:46:32.960]             invokeRestart <- base::invokeRestart
[17:46:32.960]             length <- base::length
[17:46:32.960]             list <- base::list
[17:46:32.960]             seq.int <- base::seq.int
[17:46:32.960]             signalCondition <- base::signalCondition
[17:46:32.960]             sys.calls <- base::sys.calls
[17:46:32.960]             `[[` <- base::`[[`
[17:46:32.960]             `+` <- base::`+`
[17:46:32.960]             `<<-` <- base::`<<-`
[17:46:32.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.960]                   3L)]
[17:46:32.960]             }
[17:46:32.960]             function(cond) {
[17:46:32.960]                 is_error <- inherits(cond, "error")
[17:46:32.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.960]                   NULL)
[17:46:32.960]                 if (is_error) {
[17:46:32.960]                   sessionInformation <- function() {
[17:46:32.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.960]                       search = base::search(), system = base::Sys.info())
[17:46:32.960]                   }
[17:46:32.960]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.960]                     cond$call), session = sessionInformation(), 
[17:46:32.960]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.960]                   signalCondition(cond)
[17:46:32.960]                 }
[17:46:32.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.960]                 "immediateCondition"))) {
[17:46:32.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.960]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.960]                   if (TRUE && !signal) {
[17:46:32.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.960]                     {
[17:46:32.960]                       inherits <- base::inherits
[17:46:32.960]                       invokeRestart <- base::invokeRestart
[17:46:32.960]                       is.null <- base::is.null
[17:46:32.960]                       muffled <- FALSE
[17:46:32.960]                       if (inherits(cond, "message")) {
[17:46:32.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.960]                         if (muffled) 
[17:46:32.960]                           invokeRestart("muffleMessage")
[17:46:32.960]                       }
[17:46:32.960]                       else if (inherits(cond, "warning")) {
[17:46:32.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.960]                         if (muffled) 
[17:46:32.960]                           invokeRestart("muffleWarning")
[17:46:32.960]                       }
[17:46:32.960]                       else if (inherits(cond, "condition")) {
[17:46:32.960]                         if (!is.null(pattern)) {
[17:46:32.960]                           computeRestarts <- base::computeRestarts
[17:46:32.960]                           grepl <- base::grepl
[17:46:32.960]                           restarts <- computeRestarts(cond)
[17:46:32.960]                           for (restart in restarts) {
[17:46:32.960]                             name <- restart$name
[17:46:32.960]                             if (is.null(name)) 
[17:46:32.960]                               next
[17:46:32.960]                             if (!grepl(pattern, name)) 
[17:46:32.960]                               next
[17:46:32.960]                             invokeRestart(restart)
[17:46:32.960]                             muffled <- TRUE
[17:46:32.960]                             break
[17:46:32.960]                           }
[17:46:32.960]                         }
[17:46:32.960]                       }
[17:46:32.960]                       invisible(muffled)
[17:46:32.960]                     }
[17:46:32.960]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.960]                   }
[17:46:32.960]                 }
[17:46:32.960]                 else {
[17:46:32.960]                   if (TRUE) {
[17:46:32.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.960]                     {
[17:46:32.960]                       inherits <- base::inherits
[17:46:32.960]                       invokeRestart <- base::invokeRestart
[17:46:32.960]                       is.null <- base::is.null
[17:46:32.960]                       muffled <- FALSE
[17:46:32.960]                       if (inherits(cond, "message")) {
[17:46:32.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.960]                         if (muffled) 
[17:46:32.960]                           invokeRestart("muffleMessage")
[17:46:32.960]                       }
[17:46:32.960]                       else if (inherits(cond, "warning")) {
[17:46:32.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.960]                         if (muffled) 
[17:46:32.960]                           invokeRestart("muffleWarning")
[17:46:32.960]                       }
[17:46:32.960]                       else if (inherits(cond, "condition")) {
[17:46:32.960]                         if (!is.null(pattern)) {
[17:46:32.960]                           computeRestarts <- base::computeRestarts
[17:46:32.960]                           grepl <- base::grepl
[17:46:32.960]                           restarts <- computeRestarts(cond)
[17:46:32.960]                           for (restart in restarts) {
[17:46:32.960]                             name <- restart$name
[17:46:32.960]                             if (is.null(name)) 
[17:46:32.960]                               next
[17:46:32.960]                             if (!grepl(pattern, name)) 
[17:46:32.960]                               next
[17:46:32.960]                             invokeRestart(restart)
[17:46:32.960]                             muffled <- TRUE
[17:46:32.960]                             break
[17:46:32.960]                           }
[17:46:32.960]                         }
[17:46:32.960]                       }
[17:46:32.960]                       invisible(muffled)
[17:46:32.960]                     }
[17:46:32.960]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.960]                   }
[17:46:32.960]                 }
[17:46:32.960]             }
[17:46:32.960]         }))
[17:46:32.960]     }, error = function(ex) {
[17:46:32.960]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.960]                 ...future.rng), started = ...future.startTime, 
[17:46:32.960]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.960]             version = "1.8"), class = "FutureResult")
[17:46:32.960]     }, finally = {
[17:46:32.960]         if (!identical(...future.workdir, getwd())) 
[17:46:32.960]             setwd(...future.workdir)
[17:46:32.960]         {
[17:46:32.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.960]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.960]             }
[17:46:32.960]             base::options(...future.oldOptions)
[17:46:32.960]             if (.Platform$OS.type == "windows") {
[17:46:32.960]                 old_names <- names(...future.oldEnvVars)
[17:46:32.960]                 envs <- base::Sys.getenv()
[17:46:32.960]                 names <- names(envs)
[17:46:32.960]                 common <- intersect(names, old_names)
[17:46:32.960]                 added <- setdiff(names, old_names)
[17:46:32.960]                 removed <- setdiff(old_names, names)
[17:46:32.960]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.960]                   envs[common]]
[17:46:32.960]                 NAMES <- toupper(changed)
[17:46:32.960]                 args <- list()
[17:46:32.960]                 for (kk in seq_along(NAMES)) {
[17:46:32.960]                   name <- changed[[kk]]
[17:46:32.960]                   NAME <- NAMES[[kk]]
[17:46:32.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.960]                     next
[17:46:32.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.960]                 }
[17:46:32.960]                 NAMES <- toupper(added)
[17:46:32.960]                 for (kk in seq_along(NAMES)) {
[17:46:32.960]                   name <- added[[kk]]
[17:46:32.960]                   NAME <- NAMES[[kk]]
[17:46:32.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.960]                     next
[17:46:32.960]                   args[[name]] <- ""
[17:46:32.960]                 }
[17:46:32.960]                 NAMES <- toupper(removed)
[17:46:32.960]                 for (kk in seq_along(NAMES)) {
[17:46:32.960]                   name <- removed[[kk]]
[17:46:32.960]                   NAME <- NAMES[[kk]]
[17:46:32.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.960]                     next
[17:46:32.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.960]                 }
[17:46:32.960]                 if (length(args) > 0) 
[17:46:32.960]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.960]             }
[17:46:32.960]             else {
[17:46:32.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.960]             }
[17:46:32.960]             {
[17:46:32.960]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.960]                   0L) {
[17:46:32.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.960]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.960]                   base::options(opts)
[17:46:32.960]                 }
[17:46:32.960]                 {
[17:46:32.960]                   {
[17:46:32.960]                     NULL
[17:46:32.960]                     RNGkind("Mersenne-Twister")
[17:46:32.960]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.960]                       inherits = FALSE)
[17:46:32.960]                   }
[17:46:32.960]                   options(future.plan = NULL)
[17:46:32.960]                   if (is.na(NA_character_)) 
[17:46:32.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.960]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.960]                     .init = FALSE)
[17:46:32.960]                 }
[17:46:32.960]             }
[17:46:32.960]         }
[17:46:32.960]     })
[17:46:32.960]     if (TRUE) {
[17:46:32.960]         base::sink(type = "output", split = FALSE)
[17:46:32.960]         if (TRUE) {
[17:46:32.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.960]         }
[17:46:32.960]         else {
[17:46:32.960]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.960]         }
[17:46:32.960]         base::close(...future.stdout)
[17:46:32.960]         ...future.stdout <- NULL
[17:46:32.960]     }
[17:46:32.960]     ...future.result$conditions <- ...future.conditions
[17:46:32.960]     ...future.result$finished <- base::Sys.time()
[17:46:32.960]     ...future.result
[17:46:32.960] }
[17:46:32.962] plan(): Setting new future strategy stack:
[17:46:32.964] List of future strategies:
[17:46:32.964] 1. sequential:
[17:46:32.964]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.964]    - tweaked: FALSE
[17:46:32.964]    - call: NULL
[17:46:32.965] plan(): nbrOfWorkers() = 1
[17:46:32.965] plan(): Setting new future strategy stack:
[17:46:32.966] List of future strategies:
[17:46:32.966] 1. sequential:
[17:46:32.966]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.966]    - tweaked: FALSE
[17:46:32.966]    - call: plan(strategy)
[17:46:32.966] plan(): nbrOfWorkers() = 1
[17:46:32.966] SequentialFuture started (and completed)
[17:46:32.966] - Launch lazy future ... done
[17:46:32.966] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.967] getGlobalsAndPackages() ...
[17:46:32.967] Searching for globals...
[17:46:32.968] - globals found: [1] ‘{’
[17:46:32.968] Searching for globals ... DONE
[17:46:32.968] Resolving globals: FALSE
[17:46:32.968] 
[17:46:32.968] 
[17:46:32.968] getGlobalsAndPackages() ... DONE
[17:46:32.969] run() for ‘Future’ ...
[17:46:32.969] - state: ‘created’
[17:46:32.969] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:32.969] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.969] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:32.969]   - Field: ‘label’
[17:46:32.969]   - Field: ‘local’
[17:46:32.970]   - Field: ‘owner’
[17:46:32.970]   - Field: ‘envir’
[17:46:32.970]   - Field: ‘packages’
[17:46:32.970]   - Field: ‘gc’
[17:46:32.970]   - Field: ‘conditions’
[17:46:32.970]   - Field: ‘expr’
[17:46:32.970]   - Field: ‘uuid’
[17:46:32.970]   - Field: ‘seed’
[17:46:32.970]   - Field: ‘version’
[17:46:32.970]   - Field: ‘result’
[17:46:32.970]   - Field: ‘asynchronous’
[17:46:32.971]   - Field: ‘calls’
[17:46:32.971]   - Field: ‘globals’
[17:46:32.971]   - Field: ‘stdout’
[17:46:32.971]   - Field: ‘earlySignal’
[17:46:32.971]   - Field: ‘lazy’
[17:46:32.971]   - Field: ‘state’
[17:46:32.971] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:32.971] - Launch lazy future ...
[17:46:32.971] Packages needed by the future expression (n = 0): <none>
[17:46:32.971] Packages needed by future strategies (n = 0): <none>
[17:46:32.972] {
[17:46:32.972]     {
[17:46:32.972]         {
[17:46:32.972]             ...future.startTime <- base::Sys.time()
[17:46:32.972]             {
[17:46:32.972]                 {
[17:46:32.972]                   {
[17:46:32.972]                     base::local({
[17:46:32.972]                       has_future <- base::requireNamespace("future", 
[17:46:32.972]                         quietly = TRUE)
[17:46:32.972]                       if (has_future) {
[17:46:32.972]                         ns <- base::getNamespace("future")
[17:46:32.972]                         version <- ns[[".package"]][["version"]]
[17:46:32.972]                         if (is.null(version)) 
[17:46:32.972]                           version <- utils::packageVersion("future")
[17:46:32.972]                       }
[17:46:32.972]                       else {
[17:46:32.972]                         version <- NULL
[17:46:32.972]                       }
[17:46:32.972]                       if (!has_future || version < "1.8.0") {
[17:46:32.972]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.972]                           "", base::R.version$version.string), 
[17:46:32.972]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.972]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.972]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.972]                             "release", "version")], collapse = " "), 
[17:46:32.972]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.972]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.972]                           info)
[17:46:32.972]                         info <- base::paste(info, collapse = "; ")
[17:46:32.972]                         if (!has_future) {
[17:46:32.972]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.972]                             info)
[17:46:32.972]                         }
[17:46:32.972]                         else {
[17:46:32.972]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.972]                             info, version)
[17:46:32.972]                         }
[17:46:32.972]                         base::stop(msg)
[17:46:32.972]                       }
[17:46:32.972]                     })
[17:46:32.972]                   }
[17:46:32.972]                   ...future.strategy.old <- future::plan("list")
[17:46:32.972]                   options(future.plan = NULL)
[17:46:32.972]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.972]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.972]                 }
[17:46:32.972]                 ...future.workdir <- getwd()
[17:46:32.972]             }
[17:46:32.972]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.972]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.972]         }
[17:46:32.972]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.972]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.972]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.972]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.972]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.972]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.972]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.972]             base::names(...future.oldOptions))
[17:46:32.972]     }
[17:46:32.972]     if (FALSE) {
[17:46:32.972]     }
[17:46:32.972]     else {
[17:46:32.972]         if (TRUE) {
[17:46:32.972]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.972]                 open = "w")
[17:46:32.972]         }
[17:46:32.972]         else {
[17:46:32.972]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.972]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.972]         }
[17:46:32.972]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.972]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.972]             base::sink(type = "output", split = FALSE)
[17:46:32.972]             base::close(...future.stdout)
[17:46:32.972]         }, add = TRUE)
[17:46:32.972]     }
[17:46:32.972]     ...future.frame <- base::sys.nframe()
[17:46:32.972]     ...future.conditions <- base::list()
[17:46:32.972]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.972]     if (FALSE) {
[17:46:32.972]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.972]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.972]     }
[17:46:32.972]     ...future.result <- base::tryCatch({
[17:46:32.972]         base::withCallingHandlers({
[17:46:32.972]             ...future.value <- base::withVisible(base::local({
[17:46:32.972]                 42
[17:46:32.972]             }))
[17:46:32.972]             future::FutureResult(value = ...future.value$value, 
[17:46:32.972]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.972]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.972]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.972]                     ...future.globalenv.names))
[17:46:32.972]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.972]         }, condition = base::local({
[17:46:32.972]             c <- base::c
[17:46:32.972]             inherits <- base::inherits
[17:46:32.972]             invokeRestart <- base::invokeRestart
[17:46:32.972]             length <- base::length
[17:46:32.972]             list <- base::list
[17:46:32.972]             seq.int <- base::seq.int
[17:46:32.972]             signalCondition <- base::signalCondition
[17:46:32.972]             sys.calls <- base::sys.calls
[17:46:32.972]             `[[` <- base::`[[`
[17:46:32.972]             `+` <- base::`+`
[17:46:32.972]             `<<-` <- base::`<<-`
[17:46:32.972]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.972]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.972]                   3L)]
[17:46:32.972]             }
[17:46:32.972]             function(cond) {
[17:46:32.972]                 is_error <- inherits(cond, "error")
[17:46:32.972]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.972]                   NULL)
[17:46:32.972]                 if (is_error) {
[17:46:32.972]                   sessionInformation <- function() {
[17:46:32.972]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.972]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.972]                       search = base::search(), system = base::Sys.info())
[17:46:32.972]                   }
[17:46:32.972]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.972]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.972]                     cond$call), session = sessionInformation(), 
[17:46:32.972]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.972]                   signalCondition(cond)
[17:46:32.972]                 }
[17:46:32.972]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.972]                 "immediateCondition"))) {
[17:46:32.972]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.972]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.972]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.972]                   if (TRUE && !signal) {
[17:46:32.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.972]                     {
[17:46:32.972]                       inherits <- base::inherits
[17:46:32.972]                       invokeRestart <- base::invokeRestart
[17:46:32.972]                       is.null <- base::is.null
[17:46:32.972]                       muffled <- FALSE
[17:46:32.972]                       if (inherits(cond, "message")) {
[17:46:32.972]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.972]                         if (muffled) 
[17:46:32.972]                           invokeRestart("muffleMessage")
[17:46:32.972]                       }
[17:46:32.972]                       else if (inherits(cond, "warning")) {
[17:46:32.972]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.972]                         if (muffled) 
[17:46:32.972]                           invokeRestart("muffleWarning")
[17:46:32.972]                       }
[17:46:32.972]                       else if (inherits(cond, "condition")) {
[17:46:32.972]                         if (!is.null(pattern)) {
[17:46:32.972]                           computeRestarts <- base::computeRestarts
[17:46:32.972]                           grepl <- base::grepl
[17:46:32.972]                           restarts <- computeRestarts(cond)
[17:46:32.972]                           for (restart in restarts) {
[17:46:32.972]                             name <- restart$name
[17:46:32.972]                             if (is.null(name)) 
[17:46:32.972]                               next
[17:46:32.972]                             if (!grepl(pattern, name)) 
[17:46:32.972]                               next
[17:46:32.972]                             invokeRestart(restart)
[17:46:32.972]                             muffled <- TRUE
[17:46:32.972]                             break
[17:46:32.972]                           }
[17:46:32.972]                         }
[17:46:32.972]                       }
[17:46:32.972]                       invisible(muffled)
[17:46:32.972]                     }
[17:46:32.972]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.972]                   }
[17:46:32.972]                 }
[17:46:32.972]                 else {
[17:46:32.972]                   if (TRUE) {
[17:46:32.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.972]                     {
[17:46:32.972]                       inherits <- base::inherits
[17:46:32.972]                       invokeRestart <- base::invokeRestart
[17:46:32.972]                       is.null <- base::is.null
[17:46:32.972]                       muffled <- FALSE
[17:46:32.972]                       if (inherits(cond, "message")) {
[17:46:32.972]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.972]                         if (muffled) 
[17:46:32.972]                           invokeRestart("muffleMessage")
[17:46:32.972]                       }
[17:46:32.972]                       else if (inherits(cond, "warning")) {
[17:46:32.972]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.972]                         if (muffled) 
[17:46:32.972]                           invokeRestart("muffleWarning")
[17:46:32.972]                       }
[17:46:32.972]                       else if (inherits(cond, "condition")) {
[17:46:32.972]                         if (!is.null(pattern)) {
[17:46:32.972]                           computeRestarts <- base::computeRestarts
[17:46:32.972]                           grepl <- base::grepl
[17:46:32.972]                           restarts <- computeRestarts(cond)
[17:46:32.972]                           for (restart in restarts) {
[17:46:32.972]                             name <- restart$name
[17:46:32.972]                             if (is.null(name)) 
[17:46:32.972]                               next
[17:46:32.972]                             if (!grepl(pattern, name)) 
[17:46:32.972]                               next
[17:46:32.972]                             invokeRestart(restart)
[17:46:32.972]                             muffled <- TRUE
[17:46:32.972]                             break
[17:46:32.972]                           }
[17:46:32.972]                         }
[17:46:32.972]                       }
[17:46:32.972]                       invisible(muffled)
[17:46:32.972]                     }
[17:46:32.972]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.972]                   }
[17:46:32.972]                 }
[17:46:32.972]             }
[17:46:32.972]         }))
[17:46:32.972]     }, error = function(ex) {
[17:46:32.972]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.972]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.972]                 ...future.rng), started = ...future.startTime, 
[17:46:32.972]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.972]             version = "1.8"), class = "FutureResult")
[17:46:32.972]     }, finally = {
[17:46:32.972]         if (!identical(...future.workdir, getwd())) 
[17:46:32.972]             setwd(...future.workdir)
[17:46:32.972]         {
[17:46:32.972]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.972]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.972]             }
[17:46:32.972]             base::options(...future.oldOptions)
[17:46:32.972]             if (.Platform$OS.type == "windows") {
[17:46:32.972]                 old_names <- names(...future.oldEnvVars)
[17:46:32.972]                 envs <- base::Sys.getenv()
[17:46:32.972]                 names <- names(envs)
[17:46:32.972]                 common <- intersect(names, old_names)
[17:46:32.972]                 added <- setdiff(names, old_names)
[17:46:32.972]                 removed <- setdiff(old_names, names)
[17:46:32.972]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.972]                   envs[common]]
[17:46:32.972]                 NAMES <- toupper(changed)
[17:46:32.972]                 args <- list()
[17:46:32.972]                 for (kk in seq_along(NAMES)) {
[17:46:32.972]                   name <- changed[[kk]]
[17:46:32.972]                   NAME <- NAMES[[kk]]
[17:46:32.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.972]                     next
[17:46:32.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.972]                 }
[17:46:32.972]                 NAMES <- toupper(added)
[17:46:32.972]                 for (kk in seq_along(NAMES)) {
[17:46:32.972]                   name <- added[[kk]]
[17:46:32.972]                   NAME <- NAMES[[kk]]
[17:46:32.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.972]                     next
[17:46:32.972]                   args[[name]] <- ""
[17:46:32.972]                 }
[17:46:32.972]                 NAMES <- toupper(removed)
[17:46:32.972]                 for (kk in seq_along(NAMES)) {
[17:46:32.972]                   name <- removed[[kk]]
[17:46:32.972]                   NAME <- NAMES[[kk]]
[17:46:32.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.972]                     next
[17:46:32.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.972]                 }
[17:46:32.972]                 if (length(args) > 0) 
[17:46:32.972]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.972]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.972]             }
[17:46:32.972]             else {
[17:46:32.972]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.972]             }
[17:46:32.972]             {
[17:46:32.972]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.972]                   0L) {
[17:46:32.972]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.972]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.972]                   base::options(opts)
[17:46:32.972]                 }
[17:46:32.972]                 {
[17:46:32.972]                   {
[17:46:32.972]                     NULL
[17:46:32.972]                     RNGkind("Mersenne-Twister")
[17:46:32.972]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.972]                       inherits = FALSE)
[17:46:32.972]                   }
[17:46:32.972]                   options(future.plan = NULL)
[17:46:32.972]                   if (is.na(NA_character_)) 
[17:46:32.972]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.972]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.972]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.972]                     .init = FALSE)
[17:46:32.972]                 }
[17:46:32.972]             }
[17:46:32.972]         }
[17:46:32.972]     })
[17:46:32.972]     if (TRUE) {
[17:46:32.972]         base::sink(type = "output", split = FALSE)
[17:46:32.972]         if (TRUE) {
[17:46:32.972]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.972]         }
[17:46:32.972]         else {
[17:46:32.972]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.972]         }
[17:46:32.972]         base::close(...future.stdout)
[17:46:32.972]         ...future.stdout <- NULL
[17:46:32.972]     }
[17:46:32.972]     ...future.result$conditions <- ...future.conditions
[17:46:32.972]     ...future.result$finished <- base::Sys.time()
[17:46:32.972]     ...future.result
[17:46:32.972] }
[17:46:32.974] plan(): Setting new future strategy stack:
[17:46:32.974] List of future strategies:
[17:46:32.974] 1. sequential:
[17:46:32.974]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.974]    - tweaked: FALSE
[17:46:32.974]    - call: NULL
[17:46:32.974] plan(): nbrOfWorkers() = 1
[17:46:32.975] plan(): Setting new future strategy stack:
[17:46:32.975] List of future strategies:
[17:46:32.975] 1. sequential:
[17:46:32.975]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.975]    - tweaked: FALSE
[17:46:32.975]    - call: plan(strategy)
[17:46:32.975] plan(): nbrOfWorkers() = 1
[17:46:32.975] SequentialFuture started (and completed)
[17:46:32.976] - Launch lazy future ... done
[17:46:32.976] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[17:46:32.977] plan(): Setting new future strategy stack:
[17:46:32.977] List of future strategies:
[17:46:32.977] 1. multicore:
[17:46:32.977]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:32.977]    - tweaked: FALSE
[17:46:32.977]    - call: plan(strategy)
[17:46:32.980] plan(): nbrOfWorkers() = 2
[17:46:32.984] getGlobalsAndPackages() ...
[17:46:32.984] 
[17:46:32.984] - globals: [0] <none>
[17:46:32.984] getGlobalsAndPackages() ... DONE
[17:46:32.985] Packages needed by the future expression (n = 0): <none>
[17:46:32.985] Packages needed by future strategies (n = 0): <none>
[17:46:32.986] {
[17:46:32.986]     {
[17:46:32.986]         {
[17:46:32.986]             ...future.startTime <- base::Sys.time()
[17:46:32.986]             {
[17:46:32.986]                 {
[17:46:32.986]                   {
[17:46:32.986]                     {
[17:46:32.986]                       base::local({
[17:46:32.986]                         has_future <- base::requireNamespace("future", 
[17:46:32.986]                           quietly = TRUE)
[17:46:32.986]                         if (has_future) {
[17:46:32.986]                           ns <- base::getNamespace("future")
[17:46:32.986]                           version <- ns[[".package"]][["version"]]
[17:46:32.986]                           if (is.null(version)) 
[17:46:32.986]                             version <- utils::packageVersion("future")
[17:46:32.986]                         }
[17:46:32.986]                         else {
[17:46:32.986]                           version <- NULL
[17:46:32.986]                         }
[17:46:32.986]                         if (!has_future || version < "1.8.0") {
[17:46:32.986]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.986]                             "", base::R.version$version.string), 
[17:46:32.986]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:32.986]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.986]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.986]                               "release", "version")], collapse = " "), 
[17:46:32.986]                             hostname = base::Sys.info()[["nodename"]])
[17:46:32.986]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.986]                             info)
[17:46:32.986]                           info <- base::paste(info, collapse = "; ")
[17:46:32.986]                           if (!has_future) {
[17:46:32.986]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.986]                               info)
[17:46:32.986]                           }
[17:46:32.986]                           else {
[17:46:32.986]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.986]                               info, version)
[17:46:32.986]                           }
[17:46:32.986]                           base::stop(msg)
[17:46:32.986]                         }
[17:46:32.986]                       })
[17:46:32.986]                     }
[17:46:32.986]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:32.986]                     base::options(mc.cores = 1L)
[17:46:32.986]                   }
[17:46:32.986]                   ...future.strategy.old <- future::plan("list")
[17:46:32.986]                   options(future.plan = NULL)
[17:46:32.986]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.986]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.986]                 }
[17:46:32.986]                 ...future.workdir <- getwd()
[17:46:32.986]             }
[17:46:32.986]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.986]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.986]         }
[17:46:32.986]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.986]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.986]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.986]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.986]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.986]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.986]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.986]             base::names(...future.oldOptions))
[17:46:32.986]     }
[17:46:32.986]     if (FALSE) {
[17:46:32.986]     }
[17:46:32.986]     else {
[17:46:32.986]         if (TRUE) {
[17:46:32.986]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.986]                 open = "w")
[17:46:32.986]         }
[17:46:32.986]         else {
[17:46:32.986]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.986]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.986]         }
[17:46:32.986]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.986]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.986]             base::sink(type = "output", split = FALSE)
[17:46:32.986]             base::close(...future.stdout)
[17:46:32.986]         }, add = TRUE)
[17:46:32.986]     }
[17:46:32.986]     ...future.frame <- base::sys.nframe()
[17:46:32.986]     ...future.conditions <- base::list()
[17:46:32.986]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.986]     if (FALSE) {
[17:46:32.986]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.986]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.986]     }
[17:46:32.986]     ...future.result <- base::tryCatch({
[17:46:32.986]         base::withCallingHandlers({
[17:46:32.986]             ...future.value <- base::withVisible(base::local({
[17:46:32.986]                 withCallingHandlers({
[17:46:32.986]                   42
[17:46:32.986]                 }, immediateCondition = function(cond) {
[17:46:32.986]                   save_rds <- function (object, pathname, ...) 
[17:46:32.986]                   {
[17:46:32.986]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:32.986]                     if (file_test("-f", pathname_tmp)) {
[17:46:32.986]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.986]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:32.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.986]                         fi_tmp[["mtime"]])
[17:46:32.986]                     }
[17:46:32.986]                     tryCatch({
[17:46:32.986]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:32.986]                     }, error = function(ex) {
[17:46:32.986]                       msg <- conditionMessage(ex)
[17:46:32.986]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.986]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:32.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.986]                         fi_tmp[["mtime"]], msg)
[17:46:32.986]                       ex$message <- msg
[17:46:32.986]                       stop(ex)
[17:46:32.986]                     })
[17:46:32.986]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:32.986]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:32.986]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:32.986]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.986]                       fi <- file.info(pathname)
[17:46:32.986]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:32.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.986]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:32.986]                         fi[["size"]], fi[["mtime"]])
[17:46:32.986]                       stop(msg)
[17:46:32.986]                     }
[17:46:32.986]                     invisible(pathname)
[17:46:32.986]                   }
[17:46:32.986]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:32.986]                     rootPath = tempdir()) 
[17:46:32.986]                   {
[17:46:32.986]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:32.986]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:32.986]                       tmpdir = path, fileext = ".rds")
[17:46:32.986]                     save_rds(obj, file)
[17:46:32.986]                   }
[17:46:32.986]                   saveImmediateCondition(cond, path = "/tmp/Rtmpprm7aJ/.future/immediateConditions")
[17:46:32.986]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.986]                   {
[17:46:32.986]                     inherits <- base::inherits
[17:46:32.986]                     invokeRestart <- base::invokeRestart
[17:46:32.986]                     is.null <- base::is.null
[17:46:32.986]                     muffled <- FALSE
[17:46:32.986]                     if (inherits(cond, "message")) {
[17:46:32.986]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:32.986]                       if (muffled) 
[17:46:32.986]                         invokeRestart("muffleMessage")
[17:46:32.986]                     }
[17:46:32.986]                     else if (inherits(cond, "warning")) {
[17:46:32.986]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:32.986]                       if (muffled) 
[17:46:32.986]                         invokeRestart("muffleWarning")
[17:46:32.986]                     }
[17:46:32.986]                     else if (inherits(cond, "condition")) {
[17:46:32.986]                       if (!is.null(pattern)) {
[17:46:32.986]                         computeRestarts <- base::computeRestarts
[17:46:32.986]                         grepl <- base::grepl
[17:46:32.986]                         restarts <- computeRestarts(cond)
[17:46:32.986]                         for (restart in restarts) {
[17:46:32.986]                           name <- restart$name
[17:46:32.986]                           if (is.null(name)) 
[17:46:32.986]                             next
[17:46:32.986]                           if (!grepl(pattern, name)) 
[17:46:32.986]                             next
[17:46:32.986]                           invokeRestart(restart)
[17:46:32.986]                           muffled <- TRUE
[17:46:32.986]                           break
[17:46:32.986]                         }
[17:46:32.986]                       }
[17:46:32.986]                     }
[17:46:32.986]                     invisible(muffled)
[17:46:32.986]                   }
[17:46:32.986]                   muffleCondition(cond)
[17:46:32.986]                 })
[17:46:32.986]             }))
[17:46:32.986]             future::FutureResult(value = ...future.value$value, 
[17:46:32.986]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.986]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.986]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.986]                     ...future.globalenv.names))
[17:46:32.986]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.986]         }, condition = base::local({
[17:46:32.986]             c <- base::c
[17:46:32.986]             inherits <- base::inherits
[17:46:32.986]             invokeRestart <- base::invokeRestart
[17:46:32.986]             length <- base::length
[17:46:32.986]             list <- base::list
[17:46:32.986]             seq.int <- base::seq.int
[17:46:32.986]             signalCondition <- base::signalCondition
[17:46:32.986]             sys.calls <- base::sys.calls
[17:46:32.986]             `[[` <- base::`[[`
[17:46:32.986]             `+` <- base::`+`
[17:46:32.986]             `<<-` <- base::`<<-`
[17:46:32.986]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.986]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.986]                   3L)]
[17:46:32.986]             }
[17:46:32.986]             function(cond) {
[17:46:32.986]                 is_error <- inherits(cond, "error")
[17:46:32.986]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.986]                   NULL)
[17:46:32.986]                 if (is_error) {
[17:46:32.986]                   sessionInformation <- function() {
[17:46:32.986]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.986]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.986]                       search = base::search(), system = base::Sys.info())
[17:46:32.986]                   }
[17:46:32.986]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.986]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.986]                     cond$call), session = sessionInformation(), 
[17:46:32.986]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.986]                   signalCondition(cond)
[17:46:32.986]                 }
[17:46:32.986]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.986]                 "immediateCondition"))) {
[17:46:32.986]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.986]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.986]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.986]                   if (TRUE && !signal) {
[17:46:32.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.986]                     {
[17:46:32.986]                       inherits <- base::inherits
[17:46:32.986]                       invokeRestart <- base::invokeRestart
[17:46:32.986]                       is.null <- base::is.null
[17:46:32.986]                       muffled <- FALSE
[17:46:32.986]                       if (inherits(cond, "message")) {
[17:46:32.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.986]                         if (muffled) 
[17:46:32.986]                           invokeRestart("muffleMessage")
[17:46:32.986]                       }
[17:46:32.986]                       else if (inherits(cond, "warning")) {
[17:46:32.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.986]                         if (muffled) 
[17:46:32.986]                           invokeRestart("muffleWarning")
[17:46:32.986]                       }
[17:46:32.986]                       else if (inherits(cond, "condition")) {
[17:46:32.986]                         if (!is.null(pattern)) {
[17:46:32.986]                           computeRestarts <- base::computeRestarts
[17:46:32.986]                           grepl <- base::grepl
[17:46:32.986]                           restarts <- computeRestarts(cond)
[17:46:32.986]                           for (restart in restarts) {
[17:46:32.986]                             name <- restart$name
[17:46:32.986]                             if (is.null(name)) 
[17:46:32.986]                               next
[17:46:32.986]                             if (!grepl(pattern, name)) 
[17:46:32.986]                               next
[17:46:32.986]                             invokeRestart(restart)
[17:46:32.986]                             muffled <- TRUE
[17:46:32.986]                             break
[17:46:32.986]                           }
[17:46:32.986]                         }
[17:46:32.986]                       }
[17:46:32.986]                       invisible(muffled)
[17:46:32.986]                     }
[17:46:32.986]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.986]                   }
[17:46:32.986]                 }
[17:46:32.986]                 else {
[17:46:32.986]                   if (TRUE) {
[17:46:32.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.986]                     {
[17:46:32.986]                       inherits <- base::inherits
[17:46:32.986]                       invokeRestart <- base::invokeRestart
[17:46:32.986]                       is.null <- base::is.null
[17:46:32.986]                       muffled <- FALSE
[17:46:32.986]                       if (inherits(cond, "message")) {
[17:46:32.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.986]                         if (muffled) 
[17:46:32.986]                           invokeRestart("muffleMessage")
[17:46:32.986]                       }
[17:46:32.986]                       else if (inherits(cond, "warning")) {
[17:46:32.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.986]                         if (muffled) 
[17:46:32.986]                           invokeRestart("muffleWarning")
[17:46:32.986]                       }
[17:46:32.986]                       else if (inherits(cond, "condition")) {
[17:46:32.986]                         if (!is.null(pattern)) {
[17:46:32.986]                           computeRestarts <- base::computeRestarts
[17:46:32.986]                           grepl <- base::grepl
[17:46:32.986]                           restarts <- computeRestarts(cond)
[17:46:32.986]                           for (restart in restarts) {
[17:46:32.986]                             name <- restart$name
[17:46:32.986]                             if (is.null(name)) 
[17:46:32.986]                               next
[17:46:32.986]                             if (!grepl(pattern, name)) 
[17:46:32.986]                               next
[17:46:32.986]                             invokeRestart(restart)
[17:46:32.986]                             muffled <- TRUE
[17:46:32.986]                             break
[17:46:32.986]                           }
[17:46:32.986]                         }
[17:46:32.986]                       }
[17:46:32.986]                       invisible(muffled)
[17:46:32.986]                     }
[17:46:32.986]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.986]                   }
[17:46:32.986]                 }
[17:46:32.986]             }
[17:46:32.986]         }))
[17:46:32.986]     }, error = function(ex) {
[17:46:32.986]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.986]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.986]                 ...future.rng), started = ...future.startTime, 
[17:46:32.986]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.986]             version = "1.8"), class = "FutureResult")
[17:46:32.986]     }, finally = {
[17:46:32.986]         if (!identical(...future.workdir, getwd())) 
[17:46:32.986]             setwd(...future.workdir)
[17:46:32.986]         {
[17:46:32.986]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.986]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.986]             }
[17:46:32.986]             base::options(...future.oldOptions)
[17:46:32.986]             if (.Platform$OS.type == "windows") {
[17:46:32.986]                 old_names <- names(...future.oldEnvVars)
[17:46:32.986]                 envs <- base::Sys.getenv()
[17:46:32.986]                 names <- names(envs)
[17:46:32.986]                 common <- intersect(names, old_names)
[17:46:32.986]                 added <- setdiff(names, old_names)
[17:46:32.986]                 removed <- setdiff(old_names, names)
[17:46:32.986]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.986]                   envs[common]]
[17:46:32.986]                 NAMES <- toupper(changed)
[17:46:32.986]                 args <- list()
[17:46:32.986]                 for (kk in seq_along(NAMES)) {
[17:46:32.986]                   name <- changed[[kk]]
[17:46:32.986]                   NAME <- NAMES[[kk]]
[17:46:32.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.986]                     next
[17:46:32.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.986]                 }
[17:46:32.986]                 NAMES <- toupper(added)
[17:46:32.986]                 for (kk in seq_along(NAMES)) {
[17:46:32.986]                   name <- added[[kk]]
[17:46:32.986]                   NAME <- NAMES[[kk]]
[17:46:32.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.986]                     next
[17:46:32.986]                   args[[name]] <- ""
[17:46:32.986]                 }
[17:46:32.986]                 NAMES <- toupper(removed)
[17:46:32.986]                 for (kk in seq_along(NAMES)) {
[17:46:32.986]                   name <- removed[[kk]]
[17:46:32.986]                   NAME <- NAMES[[kk]]
[17:46:32.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.986]                     next
[17:46:32.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.986]                 }
[17:46:32.986]                 if (length(args) > 0) 
[17:46:32.986]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.986]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.986]             }
[17:46:32.986]             else {
[17:46:32.986]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.986]             }
[17:46:32.986]             {
[17:46:32.986]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.986]                   0L) {
[17:46:32.986]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.986]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.986]                   base::options(opts)
[17:46:32.986]                 }
[17:46:32.986]                 {
[17:46:32.986]                   {
[17:46:32.986]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:32.986]                     NULL
[17:46:32.986]                   }
[17:46:32.986]                   options(future.plan = NULL)
[17:46:32.986]                   if (is.na(NA_character_)) 
[17:46:32.986]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.986]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.986]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.986]                     .init = FALSE)
[17:46:32.986]                 }
[17:46:32.986]             }
[17:46:32.986]         }
[17:46:32.986]     })
[17:46:32.986]     if (TRUE) {
[17:46:32.986]         base::sink(type = "output", split = FALSE)
[17:46:32.986]         if (TRUE) {
[17:46:32.986]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.986]         }
[17:46:32.986]         else {
[17:46:32.986]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.986]         }
[17:46:32.986]         base::close(...future.stdout)
[17:46:32.986]         ...future.stdout <- NULL
[17:46:32.986]     }
[17:46:32.986]     ...future.result$conditions <- ...future.conditions
[17:46:32.986]     ...future.result$finished <- base::Sys.time()
[17:46:32.986]     ...future.result
[17:46:32.986] }
[17:46:32.988] requestCore(): workers = 2
[17:46:32.990] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[17:46:32.991] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:32.991] List of future strategies:
[17:46:32.991] 1. sequential:
[17:46:32.991]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.991]    - tweaked: FALSE
[17:46:32.991]    - call: NULL
[17:46:32.992] plan(): nbrOfWorkers() = 1
[17:46:32.994] plan(): Setting new future strategy stack:
[17:46:32.994] List of future strategies:
[17:46:32.994] 1. multicore:
[17:46:32.994]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:32.994]    - tweaked: FALSE
[17:46:32.994]    - call: plan(strategy)
[17:46:32.999] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.001] result() for MulticoreFuture ...
[17:46:33.006] result() for MulticoreFuture ...
[17:46:33.006] result() for MulticoreFuture ... done
[17:46:33.006] result() for MulticoreFuture ... done
[17:46:33.006] result() for MulticoreFuture ...
[17:46:33.006] result() for MulticoreFuture ... done
[17:46:33.006] getGlobalsAndPackages() ...
[17:46:33.006] Searching for globals...
[17:46:33.007] 
[17:46:33.007] Searching for globals ... DONE
[17:46:33.007] - globals: [0] <none>
[17:46:33.007] getGlobalsAndPackages() ... DONE
[17:46:33.007] run() for ‘Future’ ...
[17:46:33.008] - state: ‘created’
[17:46:33.008] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.012] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.012] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:33.012]   - Field: ‘label’
[17:46:33.012]   - Field: ‘local’
[17:46:33.012]   - Field: ‘owner’
[17:46:33.012]   - Field: ‘envir’
[17:46:33.012]   - Field: ‘workers’
[17:46:33.012]   - Field: ‘packages’
[17:46:33.013]   - Field: ‘gc’
[17:46:33.013]   - Field: ‘job’
[17:46:33.013]   - Field: ‘conditions’
[17:46:33.013]   - Field: ‘expr’
[17:46:33.013]   - Field: ‘uuid’
[17:46:33.013]   - Field: ‘seed’
[17:46:33.013]   - Field: ‘version’
[17:46:33.013]   - Field: ‘result’
[17:46:33.013]   - Field: ‘asynchronous’
[17:46:33.014]   - Field: ‘calls’
[17:46:33.014]   - Field: ‘globals’
[17:46:33.014]   - Field: ‘stdout’
[17:46:33.014]   - Field: ‘earlySignal’
[17:46:33.014]   - Field: ‘lazy’
[17:46:33.014]   - Field: ‘state’
[17:46:33.014] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:33.014] - Launch lazy future ...
[17:46:33.015] Packages needed by the future expression (n = 0): <none>
[17:46:33.015] Packages needed by future strategies (n = 0): <none>
[17:46:33.015] {
[17:46:33.015]     {
[17:46:33.015]         {
[17:46:33.015]             ...future.startTime <- base::Sys.time()
[17:46:33.015]             {
[17:46:33.015]                 {
[17:46:33.015]                   {
[17:46:33.015]                     {
[17:46:33.015]                       base::local({
[17:46:33.015]                         has_future <- base::requireNamespace("future", 
[17:46:33.015]                           quietly = TRUE)
[17:46:33.015]                         if (has_future) {
[17:46:33.015]                           ns <- base::getNamespace("future")
[17:46:33.015]                           version <- ns[[".package"]][["version"]]
[17:46:33.015]                           if (is.null(version)) 
[17:46:33.015]                             version <- utils::packageVersion("future")
[17:46:33.015]                         }
[17:46:33.015]                         else {
[17:46:33.015]                           version <- NULL
[17:46:33.015]                         }
[17:46:33.015]                         if (!has_future || version < "1.8.0") {
[17:46:33.015]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.015]                             "", base::R.version$version.string), 
[17:46:33.015]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.015]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.015]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.015]                               "release", "version")], collapse = " "), 
[17:46:33.015]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.015]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.015]                             info)
[17:46:33.015]                           info <- base::paste(info, collapse = "; ")
[17:46:33.015]                           if (!has_future) {
[17:46:33.015]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.015]                               info)
[17:46:33.015]                           }
[17:46:33.015]                           else {
[17:46:33.015]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.015]                               info, version)
[17:46:33.015]                           }
[17:46:33.015]                           base::stop(msg)
[17:46:33.015]                         }
[17:46:33.015]                       })
[17:46:33.015]                     }
[17:46:33.015]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.015]                     base::options(mc.cores = 1L)
[17:46:33.015]                   }
[17:46:33.015]                   ...future.strategy.old <- future::plan("list")
[17:46:33.015]                   options(future.plan = NULL)
[17:46:33.015]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.015]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.015]                 }
[17:46:33.015]                 ...future.workdir <- getwd()
[17:46:33.015]             }
[17:46:33.015]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.015]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.015]         }
[17:46:33.015]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.015]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.015]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.015]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.015]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.015]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.015]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.015]             base::names(...future.oldOptions))
[17:46:33.015]     }
[17:46:33.015]     if (FALSE) {
[17:46:33.015]     }
[17:46:33.015]     else {
[17:46:33.015]         if (TRUE) {
[17:46:33.015]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.015]                 open = "w")
[17:46:33.015]         }
[17:46:33.015]         else {
[17:46:33.015]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.015]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.015]         }
[17:46:33.015]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.015]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.015]             base::sink(type = "output", split = FALSE)
[17:46:33.015]             base::close(...future.stdout)
[17:46:33.015]         }, add = TRUE)
[17:46:33.015]     }
[17:46:33.015]     ...future.frame <- base::sys.nframe()
[17:46:33.015]     ...future.conditions <- base::list()
[17:46:33.015]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.015]     if (FALSE) {
[17:46:33.015]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.015]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.015]     }
[17:46:33.015]     ...future.result <- base::tryCatch({
[17:46:33.015]         base::withCallingHandlers({
[17:46:33.015]             ...future.value <- base::withVisible(base::local({
[17:46:33.015]                 withCallingHandlers({
[17:46:33.015]                   42
[17:46:33.015]                 }, immediateCondition = function(cond) {
[17:46:33.015]                   save_rds <- function (object, pathname, ...) 
[17:46:33.015]                   {
[17:46:33.015]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:33.015]                     if (file_test("-f", pathname_tmp)) {
[17:46:33.015]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.015]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:33.015]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.015]                         fi_tmp[["mtime"]])
[17:46:33.015]                     }
[17:46:33.015]                     tryCatch({
[17:46:33.015]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:33.015]                     }, error = function(ex) {
[17:46:33.015]                       msg <- conditionMessage(ex)
[17:46:33.015]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.015]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:33.015]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.015]                         fi_tmp[["mtime"]], msg)
[17:46:33.015]                       ex$message <- msg
[17:46:33.015]                       stop(ex)
[17:46:33.015]                     })
[17:46:33.015]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:33.015]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:33.015]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:33.015]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.015]                       fi <- file.info(pathname)
[17:46:33.015]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:33.015]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.015]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:33.015]                         fi[["size"]], fi[["mtime"]])
[17:46:33.015]                       stop(msg)
[17:46:33.015]                     }
[17:46:33.015]                     invisible(pathname)
[17:46:33.015]                   }
[17:46:33.015]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:33.015]                     rootPath = tempdir()) 
[17:46:33.015]                   {
[17:46:33.015]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:33.015]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:33.015]                       tmpdir = path, fileext = ".rds")
[17:46:33.015]                     save_rds(obj, file)
[17:46:33.015]                   }
[17:46:33.015]                   saveImmediateCondition(cond, path = "/tmp/Rtmpprm7aJ/.future/immediateConditions")
[17:46:33.015]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.015]                   {
[17:46:33.015]                     inherits <- base::inherits
[17:46:33.015]                     invokeRestart <- base::invokeRestart
[17:46:33.015]                     is.null <- base::is.null
[17:46:33.015]                     muffled <- FALSE
[17:46:33.015]                     if (inherits(cond, "message")) {
[17:46:33.015]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.015]                       if (muffled) 
[17:46:33.015]                         invokeRestart("muffleMessage")
[17:46:33.015]                     }
[17:46:33.015]                     else if (inherits(cond, "warning")) {
[17:46:33.015]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.015]                       if (muffled) 
[17:46:33.015]                         invokeRestart("muffleWarning")
[17:46:33.015]                     }
[17:46:33.015]                     else if (inherits(cond, "condition")) {
[17:46:33.015]                       if (!is.null(pattern)) {
[17:46:33.015]                         computeRestarts <- base::computeRestarts
[17:46:33.015]                         grepl <- base::grepl
[17:46:33.015]                         restarts <- computeRestarts(cond)
[17:46:33.015]                         for (restart in restarts) {
[17:46:33.015]                           name <- restart$name
[17:46:33.015]                           if (is.null(name)) 
[17:46:33.015]                             next
[17:46:33.015]                           if (!grepl(pattern, name)) 
[17:46:33.015]                             next
[17:46:33.015]                           invokeRestart(restart)
[17:46:33.015]                           muffled <- TRUE
[17:46:33.015]                           break
[17:46:33.015]                         }
[17:46:33.015]                       }
[17:46:33.015]                     }
[17:46:33.015]                     invisible(muffled)
[17:46:33.015]                   }
[17:46:33.015]                   muffleCondition(cond)
[17:46:33.015]                 })
[17:46:33.015]             }))
[17:46:33.015]             future::FutureResult(value = ...future.value$value, 
[17:46:33.015]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.015]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.015]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.015]                     ...future.globalenv.names))
[17:46:33.015]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.015]         }, condition = base::local({
[17:46:33.015]             c <- base::c
[17:46:33.015]             inherits <- base::inherits
[17:46:33.015]             invokeRestart <- base::invokeRestart
[17:46:33.015]             length <- base::length
[17:46:33.015]             list <- base::list
[17:46:33.015]             seq.int <- base::seq.int
[17:46:33.015]             signalCondition <- base::signalCondition
[17:46:33.015]             sys.calls <- base::sys.calls
[17:46:33.015]             `[[` <- base::`[[`
[17:46:33.015]             `+` <- base::`+`
[17:46:33.015]             `<<-` <- base::`<<-`
[17:46:33.015]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.015]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.015]                   3L)]
[17:46:33.015]             }
[17:46:33.015]             function(cond) {
[17:46:33.015]                 is_error <- inherits(cond, "error")
[17:46:33.015]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.015]                   NULL)
[17:46:33.015]                 if (is_error) {
[17:46:33.015]                   sessionInformation <- function() {
[17:46:33.015]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.015]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.015]                       search = base::search(), system = base::Sys.info())
[17:46:33.015]                   }
[17:46:33.015]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.015]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.015]                     cond$call), session = sessionInformation(), 
[17:46:33.015]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.015]                   signalCondition(cond)
[17:46:33.015]                 }
[17:46:33.015]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.015]                 "immediateCondition"))) {
[17:46:33.015]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.015]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.015]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.015]                   if (TRUE && !signal) {
[17:46:33.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.015]                     {
[17:46:33.015]                       inherits <- base::inherits
[17:46:33.015]                       invokeRestart <- base::invokeRestart
[17:46:33.015]                       is.null <- base::is.null
[17:46:33.015]                       muffled <- FALSE
[17:46:33.015]                       if (inherits(cond, "message")) {
[17:46:33.015]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.015]                         if (muffled) 
[17:46:33.015]                           invokeRestart("muffleMessage")
[17:46:33.015]                       }
[17:46:33.015]                       else if (inherits(cond, "warning")) {
[17:46:33.015]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.015]                         if (muffled) 
[17:46:33.015]                           invokeRestart("muffleWarning")
[17:46:33.015]                       }
[17:46:33.015]                       else if (inherits(cond, "condition")) {
[17:46:33.015]                         if (!is.null(pattern)) {
[17:46:33.015]                           computeRestarts <- base::computeRestarts
[17:46:33.015]                           grepl <- base::grepl
[17:46:33.015]                           restarts <- computeRestarts(cond)
[17:46:33.015]                           for (restart in restarts) {
[17:46:33.015]                             name <- restart$name
[17:46:33.015]                             if (is.null(name)) 
[17:46:33.015]                               next
[17:46:33.015]                             if (!grepl(pattern, name)) 
[17:46:33.015]                               next
[17:46:33.015]                             invokeRestart(restart)
[17:46:33.015]                             muffled <- TRUE
[17:46:33.015]                             break
[17:46:33.015]                           }
[17:46:33.015]                         }
[17:46:33.015]                       }
[17:46:33.015]                       invisible(muffled)
[17:46:33.015]                     }
[17:46:33.015]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.015]                   }
[17:46:33.015]                 }
[17:46:33.015]                 else {
[17:46:33.015]                   if (TRUE) {
[17:46:33.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.015]                     {
[17:46:33.015]                       inherits <- base::inherits
[17:46:33.015]                       invokeRestart <- base::invokeRestart
[17:46:33.015]                       is.null <- base::is.null
[17:46:33.015]                       muffled <- FALSE
[17:46:33.015]                       if (inherits(cond, "message")) {
[17:46:33.015]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.015]                         if (muffled) 
[17:46:33.015]                           invokeRestart("muffleMessage")
[17:46:33.015]                       }
[17:46:33.015]                       else if (inherits(cond, "warning")) {
[17:46:33.015]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.015]                         if (muffled) 
[17:46:33.015]                           invokeRestart("muffleWarning")
[17:46:33.015]                       }
[17:46:33.015]                       else if (inherits(cond, "condition")) {
[17:46:33.015]                         if (!is.null(pattern)) {
[17:46:33.015]                           computeRestarts <- base::computeRestarts
[17:46:33.015]                           grepl <- base::grepl
[17:46:33.015]                           restarts <- computeRestarts(cond)
[17:46:33.015]                           for (restart in restarts) {
[17:46:33.015]                             name <- restart$name
[17:46:33.015]                             if (is.null(name)) 
[17:46:33.015]                               next
[17:46:33.015]                             if (!grepl(pattern, name)) 
[17:46:33.015]                               next
[17:46:33.015]                             invokeRestart(restart)
[17:46:33.015]                             muffled <- TRUE
[17:46:33.015]                             break
[17:46:33.015]                           }
[17:46:33.015]                         }
[17:46:33.015]                       }
[17:46:33.015]                       invisible(muffled)
[17:46:33.015]                     }
[17:46:33.015]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.015]                   }
[17:46:33.015]                 }
[17:46:33.015]             }
[17:46:33.015]         }))
[17:46:33.015]     }, error = function(ex) {
[17:46:33.015]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.015]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.015]                 ...future.rng), started = ...future.startTime, 
[17:46:33.015]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.015]             version = "1.8"), class = "FutureResult")
[17:46:33.015]     }, finally = {
[17:46:33.015]         if (!identical(...future.workdir, getwd())) 
[17:46:33.015]             setwd(...future.workdir)
[17:46:33.015]         {
[17:46:33.015]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.015]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.015]             }
[17:46:33.015]             base::options(...future.oldOptions)
[17:46:33.015]             if (.Platform$OS.type == "windows") {
[17:46:33.015]                 old_names <- names(...future.oldEnvVars)
[17:46:33.015]                 envs <- base::Sys.getenv()
[17:46:33.015]                 names <- names(envs)
[17:46:33.015]                 common <- intersect(names, old_names)
[17:46:33.015]                 added <- setdiff(names, old_names)
[17:46:33.015]                 removed <- setdiff(old_names, names)
[17:46:33.015]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.015]                   envs[common]]
[17:46:33.015]                 NAMES <- toupper(changed)
[17:46:33.015]                 args <- list()
[17:46:33.015]                 for (kk in seq_along(NAMES)) {
[17:46:33.015]                   name <- changed[[kk]]
[17:46:33.015]                   NAME <- NAMES[[kk]]
[17:46:33.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.015]                     next
[17:46:33.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.015]                 }
[17:46:33.015]                 NAMES <- toupper(added)
[17:46:33.015]                 for (kk in seq_along(NAMES)) {
[17:46:33.015]                   name <- added[[kk]]
[17:46:33.015]                   NAME <- NAMES[[kk]]
[17:46:33.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.015]                     next
[17:46:33.015]                   args[[name]] <- ""
[17:46:33.015]                 }
[17:46:33.015]                 NAMES <- toupper(removed)
[17:46:33.015]                 for (kk in seq_along(NAMES)) {
[17:46:33.015]                   name <- removed[[kk]]
[17:46:33.015]                   NAME <- NAMES[[kk]]
[17:46:33.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.015]                     next
[17:46:33.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.015]                 }
[17:46:33.015]                 if (length(args) > 0) 
[17:46:33.015]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.015]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.015]             }
[17:46:33.015]             else {
[17:46:33.015]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.015]             }
[17:46:33.015]             {
[17:46:33.015]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.015]                   0L) {
[17:46:33.015]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.015]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.015]                   base::options(opts)
[17:46:33.015]                 }
[17:46:33.015]                 {
[17:46:33.015]                   {
[17:46:33.015]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.015]                     NULL
[17:46:33.015]                   }
[17:46:33.015]                   options(future.plan = NULL)
[17:46:33.015]                   if (is.na(NA_character_)) 
[17:46:33.015]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.015]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.015]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.015]                     .init = FALSE)
[17:46:33.015]                 }
[17:46:33.015]             }
[17:46:33.015]         }
[17:46:33.015]     })
[17:46:33.015]     if (TRUE) {
[17:46:33.015]         base::sink(type = "output", split = FALSE)
[17:46:33.015]         if (TRUE) {
[17:46:33.015]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.015]         }
[17:46:33.015]         else {
[17:46:33.015]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.015]         }
[17:46:33.015]         base::close(...future.stdout)
[17:46:33.015]         ...future.stdout <- NULL
[17:46:33.015]     }
[17:46:33.015]     ...future.result$conditions <- ...future.conditions
[17:46:33.015]     ...future.result$finished <- base::Sys.time()
[17:46:33.015]     ...future.result
[17:46:33.015] }
[17:46:33.018] requestCore(): workers = 2
[17:46:33.020] MulticoreFuture started
[17:46:33.020] - Launch lazy future ... done
[17:46:33.020] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
[17:46:33.021] plan(): Setting new future strategy stack:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.021] List of future strategies:
[17:46:33.021] 1. sequential:
[17:46:33.021]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:33.021]    - tweaked: FALSE
[17:46:33.021]    - call: NULL
[17:46:33.022] plan(): nbrOfWorkers() = 1
[17:46:33.024] plan(): Setting new future strategy stack:
[17:46:33.024] List of future strategies:
[17:46:33.024] 1. multicore:
[17:46:33.024]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:33.024]    - tweaked: FALSE
[17:46:33.024]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.032] result() for MulticoreFuture ...
[17:46:33.034] plan(): nbrOfWorkers() = 2
[17:46:33.035] result() for MulticoreFuture ...
[17:46:33.035] result() for MulticoreFuture ... done
[17:46:33.035] result() for MulticoreFuture ... done
[17:46:33.035] result() for MulticoreFuture ...
[17:46:33.035] result() for MulticoreFuture ... done
[17:46:33.036] getGlobalsAndPackages() ...
[17:46:33.036] Searching for globals...
[17:46:33.037] - globals found: [1] ‘{’
[17:46:33.040] Searching for globals ... DONE
[17:46:33.040] Resolving globals: FALSE
[17:46:33.041] 
[17:46:33.041] 
[17:46:33.041] getGlobalsAndPackages() ... DONE
[17:46:33.041] run() for ‘Future’ ...
[17:46:33.041] - state: ‘created’
[17:46:33.042] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.046] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.046] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:33.046]   - Field: ‘label’
[17:46:33.046]   - Field: ‘local’
[17:46:33.046]   - Field: ‘owner’
[17:46:33.046]   - Field: ‘envir’
[17:46:33.046]   - Field: ‘workers’
[17:46:33.046]   - Field: ‘packages’
[17:46:33.047]   - Field: ‘gc’
[17:46:33.047]   - Field: ‘job’
[17:46:33.047]   - Field: ‘conditions’
[17:46:33.047]   - Field: ‘expr’
[17:46:33.047]   - Field: ‘uuid’
[17:46:33.047]   - Field: ‘seed’
[17:46:33.047]   - Field: ‘version’
[17:46:33.047]   - Field: ‘result’
[17:46:33.048]   - Field: ‘asynchronous’
[17:46:33.048]   - Field: ‘calls’
[17:46:33.048]   - Field: ‘globals’
[17:46:33.048]   - Field: ‘stdout’
[17:46:33.048]   - Field: ‘earlySignal’
[17:46:33.048]   - Field: ‘lazy’
[17:46:33.048]   - Field: ‘state’
[17:46:33.048] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:33.049] - Launch lazy future ...
[17:46:33.049] Packages needed by the future expression (n = 0): <none>
[17:46:33.049] Packages needed by future strategies (n = 0): <none>
[17:46:33.049] {
[17:46:33.049]     {
[17:46:33.049]         {
[17:46:33.049]             ...future.startTime <- base::Sys.time()
[17:46:33.049]             {
[17:46:33.049]                 {
[17:46:33.049]                   {
[17:46:33.049]                     {
[17:46:33.049]                       base::local({
[17:46:33.049]                         has_future <- base::requireNamespace("future", 
[17:46:33.049]                           quietly = TRUE)
[17:46:33.049]                         if (has_future) {
[17:46:33.049]                           ns <- base::getNamespace("future")
[17:46:33.049]                           version <- ns[[".package"]][["version"]]
[17:46:33.049]                           if (is.null(version)) 
[17:46:33.049]                             version <- utils::packageVersion("future")
[17:46:33.049]                         }
[17:46:33.049]                         else {
[17:46:33.049]                           version <- NULL
[17:46:33.049]                         }
[17:46:33.049]                         if (!has_future || version < "1.8.0") {
[17:46:33.049]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.049]                             "", base::R.version$version.string), 
[17:46:33.049]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.049]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.049]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.049]                               "release", "version")], collapse = " "), 
[17:46:33.049]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.049]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.049]                             info)
[17:46:33.049]                           info <- base::paste(info, collapse = "; ")
[17:46:33.049]                           if (!has_future) {
[17:46:33.049]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.049]                               info)
[17:46:33.049]                           }
[17:46:33.049]                           else {
[17:46:33.049]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.049]                               info, version)
[17:46:33.049]                           }
[17:46:33.049]                           base::stop(msg)
[17:46:33.049]                         }
[17:46:33.049]                       })
[17:46:33.049]                     }
[17:46:33.049]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.049]                     base::options(mc.cores = 1L)
[17:46:33.049]                   }
[17:46:33.049]                   ...future.strategy.old <- future::plan("list")
[17:46:33.049]                   options(future.plan = NULL)
[17:46:33.049]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.049]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.049]                 }
[17:46:33.049]                 ...future.workdir <- getwd()
[17:46:33.049]             }
[17:46:33.049]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.049]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.049]         }
[17:46:33.049]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.049]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.049]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.049]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.049]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.049]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.049]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.049]             base::names(...future.oldOptions))
[17:46:33.049]     }
[17:46:33.049]     if (FALSE) {
[17:46:33.049]     }
[17:46:33.049]     else {
[17:46:33.049]         if (TRUE) {
[17:46:33.049]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.049]                 open = "w")
[17:46:33.049]         }
[17:46:33.049]         else {
[17:46:33.049]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.049]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.049]         }
[17:46:33.049]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.049]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.049]             base::sink(type = "output", split = FALSE)
[17:46:33.049]             base::close(...future.stdout)
[17:46:33.049]         }, add = TRUE)
[17:46:33.049]     }
[17:46:33.049]     ...future.frame <- base::sys.nframe()
[17:46:33.049]     ...future.conditions <- base::list()
[17:46:33.049]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.049]     if (FALSE) {
[17:46:33.049]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.049]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.049]     }
[17:46:33.049]     ...future.result <- base::tryCatch({
[17:46:33.049]         base::withCallingHandlers({
[17:46:33.049]             ...future.value <- base::withVisible(base::local({
[17:46:33.049]                 withCallingHandlers({
[17:46:33.049]                   {
[17:46:33.049]                     42
[17:46:33.049]                   }
[17:46:33.049]                 }, immediateCondition = function(cond) {
[17:46:33.049]                   save_rds <- function (object, pathname, ...) 
[17:46:33.049]                   {
[17:46:33.049]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:33.049]                     if (file_test("-f", pathname_tmp)) {
[17:46:33.049]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.049]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:33.049]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.049]                         fi_tmp[["mtime"]])
[17:46:33.049]                     }
[17:46:33.049]                     tryCatch({
[17:46:33.049]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:33.049]                     }, error = function(ex) {
[17:46:33.049]                       msg <- conditionMessage(ex)
[17:46:33.049]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.049]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:33.049]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.049]                         fi_tmp[["mtime"]], msg)
[17:46:33.049]                       ex$message <- msg
[17:46:33.049]                       stop(ex)
[17:46:33.049]                     })
[17:46:33.049]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:33.049]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:33.049]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:33.049]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.049]                       fi <- file.info(pathname)
[17:46:33.049]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:33.049]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.049]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:33.049]                         fi[["size"]], fi[["mtime"]])
[17:46:33.049]                       stop(msg)
[17:46:33.049]                     }
[17:46:33.049]                     invisible(pathname)
[17:46:33.049]                   }
[17:46:33.049]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:33.049]                     rootPath = tempdir()) 
[17:46:33.049]                   {
[17:46:33.049]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:33.049]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:33.049]                       tmpdir = path, fileext = ".rds")
[17:46:33.049]                     save_rds(obj, file)
[17:46:33.049]                   }
[17:46:33.049]                   saveImmediateCondition(cond, path = "/tmp/Rtmpprm7aJ/.future/immediateConditions")
[17:46:33.049]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.049]                   {
[17:46:33.049]                     inherits <- base::inherits
[17:46:33.049]                     invokeRestart <- base::invokeRestart
[17:46:33.049]                     is.null <- base::is.null
[17:46:33.049]                     muffled <- FALSE
[17:46:33.049]                     if (inherits(cond, "message")) {
[17:46:33.049]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.049]                       if (muffled) 
[17:46:33.049]                         invokeRestart("muffleMessage")
[17:46:33.049]                     }
[17:46:33.049]                     else if (inherits(cond, "warning")) {
[17:46:33.049]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.049]                       if (muffled) 
[17:46:33.049]                         invokeRestart("muffleWarning")
[17:46:33.049]                     }
[17:46:33.049]                     else if (inherits(cond, "condition")) {
[17:46:33.049]                       if (!is.null(pattern)) {
[17:46:33.049]                         computeRestarts <- base::computeRestarts
[17:46:33.049]                         grepl <- base::grepl
[17:46:33.049]                         restarts <- computeRestarts(cond)
[17:46:33.049]                         for (restart in restarts) {
[17:46:33.049]                           name <- restart$name
[17:46:33.049]                           if (is.null(name)) 
[17:46:33.049]                             next
[17:46:33.049]                           if (!grepl(pattern, name)) 
[17:46:33.049]                             next
[17:46:33.049]                           invokeRestart(restart)
[17:46:33.049]                           muffled <- TRUE
[17:46:33.049]                           break
[17:46:33.049]                         }
[17:46:33.049]                       }
[17:46:33.049]                     }
[17:46:33.049]                     invisible(muffled)
[17:46:33.049]                   }
[17:46:33.049]                   muffleCondition(cond)
[17:46:33.049]                 })
[17:46:33.049]             }))
[17:46:33.049]             future::FutureResult(value = ...future.value$value, 
[17:46:33.049]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.049]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.049]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.049]                     ...future.globalenv.names))
[17:46:33.049]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.049]         }, condition = base::local({
[17:46:33.049]             c <- base::c
[17:46:33.049]             inherits <- base::inherits
[17:46:33.049]             invokeRestart <- base::invokeRestart
[17:46:33.049]             length <- base::length
[17:46:33.049]             list <- base::list
[17:46:33.049]             seq.int <- base::seq.int
[17:46:33.049]             signalCondition <- base::signalCondition
[17:46:33.049]             sys.calls <- base::sys.calls
[17:46:33.049]             `[[` <- base::`[[`
[17:46:33.049]             `+` <- base::`+`
[17:46:33.049]             `<<-` <- base::`<<-`
[17:46:33.049]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.049]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.049]                   3L)]
[17:46:33.049]             }
[17:46:33.049]             function(cond) {
[17:46:33.049]                 is_error <- inherits(cond, "error")
[17:46:33.049]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.049]                   NULL)
[17:46:33.049]                 if (is_error) {
[17:46:33.049]                   sessionInformation <- function() {
[17:46:33.049]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.049]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.049]                       search = base::search(), system = base::Sys.info())
[17:46:33.049]                   }
[17:46:33.049]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.049]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.049]                     cond$call), session = sessionInformation(), 
[17:46:33.049]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.049]                   signalCondition(cond)
[17:46:33.049]                 }
[17:46:33.049]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.049]                 "immediateCondition"))) {
[17:46:33.049]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.049]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.049]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.049]                   if (TRUE && !signal) {
[17:46:33.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.049]                     {
[17:46:33.049]                       inherits <- base::inherits
[17:46:33.049]                       invokeRestart <- base::invokeRestart
[17:46:33.049]                       is.null <- base::is.null
[17:46:33.049]                       muffled <- FALSE
[17:46:33.049]                       if (inherits(cond, "message")) {
[17:46:33.049]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.049]                         if (muffled) 
[17:46:33.049]                           invokeRestart("muffleMessage")
[17:46:33.049]                       }
[17:46:33.049]                       else if (inherits(cond, "warning")) {
[17:46:33.049]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.049]                         if (muffled) 
[17:46:33.049]                           invokeRestart("muffleWarning")
[17:46:33.049]                       }
[17:46:33.049]                       else if (inherits(cond, "condition")) {
[17:46:33.049]                         if (!is.null(pattern)) {
[17:46:33.049]                           computeRestarts <- base::computeRestarts
[17:46:33.049]                           grepl <- base::grepl
[17:46:33.049]                           restarts <- computeRestarts(cond)
[17:46:33.049]                           for (restart in restarts) {
[17:46:33.049]                             name <- restart$name
[17:46:33.049]                             if (is.null(name)) 
[17:46:33.049]                               next
[17:46:33.049]                             if (!grepl(pattern, name)) 
[17:46:33.049]                               next
[17:46:33.049]                             invokeRestart(restart)
[17:46:33.049]                             muffled <- TRUE
[17:46:33.049]                             break
[17:46:33.049]                           }
[17:46:33.049]                         }
[17:46:33.049]                       }
[17:46:33.049]                       invisible(muffled)
[17:46:33.049]                     }
[17:46:33.049]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.049]                   }
[17:46:33.049]                 }
[17:46:33.049]                 else {
[17:46:33.049]                   if (TRUE) {
[17:46:33.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.049]                     {
[17:46:33.049]                       inherits <- base::inherits
[17:46:33.049]                       invokeRestart <- base::invokeRestart
[17:46:33.049]                       is.null <- base::is.null
[17:46:33.049]                       muffled <- FALSE
[17:46:33.049]                       if (inherits(cond, "message")) {
[17:46:33.049]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.049]                         if (muffled) 
[17:46:33.049]                           invokeRestart("muffleMessage")
[17:46:33.049]                       }
[17:46:33.049]                       else if (inherits(cond, "warning")) {
[17:46:33.049]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.049]                         if (muffled) 
[17:46:33.049]                           invokeRestart("muffleWarning")
[17:46:33.049]                       }
[17:46:33.049]                       else if (inherits(cond, "condition")) {
[17:46:33.049]                         if (!is.null(pattern)) {
[17:46:33.049]                           computeRestarts <- base::computeRestarts
[17:46:33.049]                           grepl <- base::grepl
[17:46:33.049]                           restarts <- computeRestarts(cond)
[17:46:33.049]                           for (restart in restarts) {
[17:46:33.049]                             name <- restart$name
[17:46:33.049]                             if (is.null(name)) 
[17:46:33.049]                               next
[17:46:33.049]                             if (!grepl(pattern, name)) 
[17:46:33.049]                               next
[17:46:33.049]                             invokeRestart(restart)
[17:46:33.049]                             muffled <- TRUE
[17:46:33.049]                             break
[17:46:33.049]                           }
[17:46:33.049]                         }
[17:46:33.049]                       }
[17:46:33.049]                       invisible(muffled)
[17:46:33.049]                     }
[17:46:33.049]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.049]                   }
[17:46:33.049]                 }
[17:46:33.049]             }
[17:46:33.049]         }))
[17:46:33.049]     }, error = function(ex) {
[17:46:33.049]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.049]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.049]                 ...future.rng), started = ...future.startTime, 
[17:46:33.049]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.049]             version = "1.8"), class = "FutureResult")
[17:46:33.049]     }, finally = {
[17:46:33.049]         if (!identical(...future.workdir, getwd())) 
[17:46:33.049]             setwd(...future.workdir)
[17:46:33.049]         {
[17:46:33.049]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.049]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.049]             }
[17:46:33.049]             base::options(...future.oldOptions)
[17:46:33.049]             if (.Platform$OS.type == "windows") {
[17:46:33.049]                 old_names <- names(...future.oldEnvVars)
[17:46:33.049]                 envs <- base::Sys.getenv()
[17:46:33.049]                 names <- names(envs)
[17:46:33.049]                 common <- intersect(names, old_names)
[17:46:33.049]                 added <- setdiff(names, old_names)
[17:46:33.049]                 removed <- setdiff(old_names, names)
[17:46:33.049]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.049]                   envs[common]]
[17:46:33.049]                 NAMES <- toupper(changed)
[17:46:33.049]                 args <- list()
[17:46:33.049]                 for (kk in seq_along(NAMES)) {
[17:46:33.049]                   name <- changed[[kk]]
[17:46:33.049]                   NAME <- NAMES[[kk]]
[17:46:33.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.049]                     next
[17:46:33.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.049]                 }
[17:46:33.049]                 NAMES <- toupper(added)
[17:46:33.049]                 for (kk in seq_along(NAMES)) {
[17:46:33.049]                   name <- added[[kk]]
[17:46:33.049]                   NAME <- NAMES[[kk]]
[17:46:33.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.049]                     next
[17:46:33.049]                   args[[name]] <- ""
[17:46:33.049]                 }
[17:46:33.049]                 NAMES <- toupper(removed)
[17:46:33.049]                 for (kk in seq_along(NAMES)) {
[17:46:33.049]                   name <- removed[[kk]]
[17:46:33.049]                   NAME <- NAMES[[kk]]
[17:46:33.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.049]                     next
[17:46:33.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.049]                 }
[17:46:33.049]                 if (length(args) > 0) 
[17:46:33.049]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.049]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.049]             }
[17:46:33.049]             else {
[17:46:33.049]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.049]             }
[17:46:33.049]             {
[17:46:33.049]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.049]                   0L) {
[17:46:33.049]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.049]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.049]                   base::options(opts)
[17:46:33.049]                 }
[17:46:33.049]                 {
[17:46:33.049]                   {
[17:46:33.049]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.049]                     NULL
[17:46:33.049]                   }
[17:46:33.049]                   options(future.plan = NULL)
[17:46:33.049]                   if (is.na(NA_character_)) 
[17:46:33.049]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.049]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.049]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.049]                     .init = FALSE)
[17:46:33.049]                 }
[17:46:33.049]             }
[17:46:33.049]         }
[17:46:33.049]     })
[17:46:33.049]     if (TRUE) {
[17:46:33.049]         base::sink(type = "output", split = FALSE)
[17:46:33.049]         if (TRUE) {
[17:46:33.049]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.049]         }
[17:46:33.049]         else {
[17:46:33.049]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.049]         }
[17:46:33.049]         base::close(...future.stdout)
[17:46:33.049]         ...future.stdout <- NULL
[17:46:33.049]     }
[17:46:33.049]     ...future.result$conditions <- ...future.conditions
[17:46:33.049]     ...future.result$finished <- base::Sys.time()
[17:46:33.049]     ...future.result
[17:46:33.049] }
[17:46:33.052] requestCore(): workers = 2
[17:46:33.054] MulticoreFuture started
[17:46:33.054] - Launch lazy future ... done
[17:46:33.054] run() for ‘MulticoreFuture’ ... done
[17:46:33.055] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.055] List of future strategies:
[17:46:33.055] 1. sequential:
[17:46:33.055]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:33.055]    - tweaked: FALSE
[17:46:33.055]    - call: NULL
[17:46:33.056] plan(): nbrOfWorkers() = 1
[17:46:33.058] plan(): Setting new future strategy stack:
[17:46:33.058] List of future strategies:
[17:46:33.058] 1. multicore:
[17:46:33.058]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:33.058]    - tweaked: FALSE
[17:46:33.058]    - call: plan(strategy)
[17:46:33.063] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.064] result() for MulticoreFuture ...
[17:46:33.065] result() for MulticoreFuture ...
[17:46:33.065] result() for MulticoreFuture ... done
[17:46:33.065] result() for MulticoreFuture ... done
[17:46:33.065] result() for MulticoreFuture ...
[17:46:33.065] result() for MulticoreFuture ... done
[17:46:33.069] getGlobalsAndPackages() ...
[17:46:33.069] 
[17:46:33.069] - globals: [0] <none>
[17:46:33.069] getGlobalsAndPackages() ... DONE
[17:46:33.070] Packages needed by the future expression (n = 0): <none>
[17:46:33.070] Packages needed by future strategies (n = 0): <none>
[17:46:33.071] {
[17:46:33.071]     {
[17:46:33.071]         {
[17:46:33.071]             ...future.startTime <- base::Sys.time()
[17:46:33.071]             {
[17:46:33.071]                 {
[17:46:33.071]                   {
[17:46:33.071]                     {
[17:46:33.071]                       base::local({
[17:46:33.071]                         has_future <- base::requireNamespace("future", 
[17:46:33.071]                           quietly = TRUE)
[17:46:33.071]                         if (has_future) {
[17:46:33.071]                           ns <- base::getNamespace("future")
[17:46:33.071]                           version <- ns[[".package"]][["version"]]
[17:46:33.071]                           if (is.null(version)) 
[17:46:33.071]                             version <- utils::packageVersion("future")
[17:46:33.071]                         }
[17:46:33.071]                         else {
[17:46:33.071]                           version <- NULL
[17:46:33.071]                         }
[17:46:33.071]                         if (!has_future || version < "1.8.0") {
[17:46:33.071]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.071]                             "", base::R.version$version.string), 
[17:46:33.071]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.071]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.071]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.071]                               "release", "version")], collapse = " "), 
[17:46:33.071]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.071]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.071]                             info)
[17:46:33.071]                           info <- base::paste(info, collapse = "; ")
[17:46:33.071]                           if (!has_future) {
[17:46:33.071]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.071]                               info)
[17:46:33.071]                           }
[17:46:33.071]                           else {
[17:46:33.071]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.071]                               info, version)
[17:46:33.071]                           }
[17:46:33.071]                           base::stop(msg)
[17:46:33.071]                         }
[17:46:33.071]                       })
[17:46:33.071]                     }
[17:46:33.071]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.071]                     base::options(mc.cores = 1L)
[17:46:33.071]                   }
[17:46:33.071]                   ...future.strategy.old <- future::plan("list")
[17:46:33.071]                   options(future.plan = NULL)
[17:46:33.071]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.071]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.071]                 }
[17:46:33.071]                 ...future.workdir <- getwd()
[17:46:33.071]             }
[17:46:33.071]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.071]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.071]         }
[17:46:33.071]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.071]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.071]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.071]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.071]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.071]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.071]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.071]             base::names(...future.oldOptions))
[17:46:33.071]     }
[17:46:33.071]     if (FALSE) {
[17:46:33.071]     }
[17:46:33.071]     else {
[17:46:33.071]         if (TRUE) {
[17:46:33.071]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.071]                 open = "w")
[17:46:33.071]         }
[17:46:33.071]         else {
[17:46:33.071]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.071]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.071]         }
[17:46:33.071]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.071]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.071]             base::sink(type = "output", split = FALSE)
[17:46:33.071]             base::close(...future.stdout)
[17:46:33.071]         }, add = TRUE)
[17:46:33.071]     }
[17:46:33.071]     ...future.frame <- base::sys.nframe()
[17:46:33.071]     ...future.conditions <- base::list()
[17:46:33.071]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.071]     if (FALSE) {
[17:46:33.071]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.071]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.071]     }
[17:46:33.071]     ...future.result <- base::tryCatch({
[17:46:33.071]         base::withCallingHandlers({
[17:46:33.071]             ...future.value <- base::withVisible(base::local({
[17:46:33.071]                 withCallingHandlers({
[17:46:33.071]                   42
[17:46:33.071]                 }, immediateCondition = function(cond) {
[17:46:33.071]                   save_rds <- function (object, pathname, ...) 
[17:46:33.071]                   {
[17:46:33.071]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:33.071]                     if (file_test("-f", pathname_tmp)) {
[17:46:33.071]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.071]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:33.071]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.071]                         fi_tmp[["mtime"]])
[17:46:33.071]                     }
[17:46:33.071]                     tryCatch({
[17:46:33.071]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:33.071]                     }, error = function(ex) {
[17:46:33.071]                       msg <- conditionMessage(ex)
[17:46:33.071]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.071]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:33.071]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.071]                         fi_tmp[["mtime"]], msg)
[17:46:33.071]                       ex$message <- msg
[17:46:33.071]                       stop(ex)
[17:46:33.071]                     })
[17:46:33.071]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:33.071]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:33.071]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:33.071]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.071]                       fi <- file.info(pathname)
[17:46:33.071]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:33.071]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.071]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:33.071]                         fi[["size"]], fi[["mtime"]])
[17:46:33.071]                       stop(msg)
[17:46:33.071]                     }
[17:46:33.071]                     invisible(pathname)
[17:46:33.071]                   }
[17:46:33.071]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:33.071]                     rootPath = tempdir()) 
[17:46:33.071]                   {
[17:46:33.071]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:33.071]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:33.071]                       tmpdir = path, fileext = ".rds")
[17:46:33.071]                     save_rds(obj, file)
[17:46:33.071]                   }
[17:46:33.071]                   saveImmediateCondition(cond, path = "/tmp/Rtmpprm7aJ/.future/immediateConditions")
[17:46:33.071]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.071]                   {
[17:46:33.071]                     inherits <- base::inherits
[17:46:33.071]                     invokeRestart <- base::invokeRestart
[17:46:33.071]                     is.null <- base::is.null
[17:46:33.071]                     muffled <- FALSE
[17:46:33.071]                     if (inherits(cond, "message")) {
[17:46:33.071]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.071]                       if (muffled) 
[17:46:33.071]                         invokeRestart("muffleMessage")
[17:46:33.071]                     }
[17:46:33.071]                     else if (inherits(cond, "warning")) {
[17:46:33.071]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.071]                       if (muffled) 
[17:46:33.071]                         invokeRestart("muffleWarning")
[17:46:33.071]                     }
[17:46:33.071]                     else if (inherits(cond, "condition")) {
[17:46:33.071]                       if (!is.null(pattern)) {
[17:46:33.071]                         computeRestarts <- base::computeRestarts
[17:46:33.071]                         grepl <- base::grepl
[17:46:33.071]                         restarts <- computeRestarts(cond)
[17:46:33.071]                         for (restart in restarts) {
[17:46:33.071]                           name <- restart$name
[17:46:33.071]                           if (is.null(name)) 
[17:46:33.071]                             next
[17:46:33.071]                           if (!grepl(pattern, name)) 
[17:46:33.071]                             next
[17:46:33.071]                           invokeRestart(restart)
[17:46:33.071]                           muffled <- TRUE
[17:46:33.071]                           break
[17:46:33.071]                         }
[17:46:33.071]                       }
[17:46:33.071]                     }
[17:46:33.071]                     invisible(muffled)
[17:46:33.071]                   }
[17:46:33.071]                   muffleCondition(cond)
[17:46:33.071]                 })
[17:46:33.071]             }))
[17:46:33.071]             future::FutureResult(value = ...future.value$value, 
[17:46:33.071]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.071]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.071]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.071]                     ...future.globalenv.names))
[17:46:33.071]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.071]         }, condition = base::local({
[17:46:33.071]             c <- base::c
[17:46:33.071]             inherits <- base::inherits
[17:46:33.071]             invokeRestart <- base::invokeRestart
[17:46:33.071]             length <- base::length
[17:46:33.071]             list <- base::list
[17:46:33.071]             seq.int <- base::seq.int
[17:46:33.071]             signalCondition <- base::signalCondition
[17:46:33.071]             sys.calls <- base::sys.calls
[17:46:33.071]             `[[` <- base::`[[`
[17:46:33.071]             `+` <- base::`+`
[17:46:33.071]             `<<-` <- base::`<<-`
[17:46:33.071]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.071]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.071]                   3L)]
[17:46:33.071]             }
[17:46:33.071]             function(cond) {
[17:46:33.071]                 is_error <- inherits(cond, "error")
[17:46:33.071]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.071]                   NULL)
[17:46:33.071]                 if (is_error) {
[17:46:33.071]                   sessionInformation <- function() {
[17:46:33.071]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.071]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.071]                       search = base::search(), system = base::Sys.info())
[17:46:33.071]                   }
[17:46:33.071]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.071]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.071]                     cond$call), session = sessionInformation(), 
[17:46:33.071]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.071]                   signalCondition(cond)
[17:46:33.071]                 }
[17:46:33.071]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.071]                 "immediateCondition"))) {
[17:46:33.071]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.071]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.071]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.071]                   if (TRUE && !signal) {
[17:46:33.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.071]                     {
[17:46:33.071]                       inherits <- base::inherits
[17:46:33.071]                       invokeRestart <- base::invokeRestart
[17:46:33.071]                       is.null <- base::is.null
[17:46:33.071]                       muffled <- FALSE
[17:46:33.071]                       if (inherits(cond, "message")) {
[17:46:33.071]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.071]                         if (muffled) 
[17:46:33.071]                           invokeRestart("muffleMessage")
[17:46:33.071]                       }
[17:46:33.071]                       else if (inherits(cond, "warning")) {
[17:46:33.071]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.071]                         if (muffled) 
[17:46:33.071]                           invokeRestart("muffleWarning")
[17:46:33.071]                       }
[17:46:33.071]                       else if (inherits(cond, "condition")) {
[17:46:33.071]                         if (!is.null(pattern)) {
[17:46:33.071]                           computeRestarts <- base::computeRestarts
[17:46:33.071]                           grepl <- base::grepl
[17:46:33.071]                           restarts <- computeRestarts(cond)
[17:46:33.071]                           for (restart in restarts) {
[17:46:33.071]                             name <- restart$name
[17:46:33.071]                             if (is.null(name)) 
[17:46:33.071]                               next
[17:46:33.071]                             if (!grepl(pattern, name)) 
[17:46:33.071]                               next
[17:46:33.071]                             invokeRestart(restart)
[17:46:33.071]                             muffled <- TRUE
[17:46:33.071]                             break
[17:46:33.071]                           }
[17:46:33.071]                         }
[17:46:33.071]                       }
[17:46:33.071]                       invisible(muffled)
[17:46:33.071]                     }
[17:46:33.071]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.071]                   }
[17:46:33.071]                 }
[17:46:33.071]                 else {
[17:46:33.071]                   if (TRUE) {
[17:46:33.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.071]                     {
[17:46:33.071]                       inherits <- base::inherits
[17:46:33.071]                       invokeRestart <- base::invokeRestart
[17:46:33.071]                       is.null <- base::is.null
[17:46:33.071]                       muffled <- FALSE
[17:46:33.071]                       if (inherits(cond, "message")) {
[17:46:33.071]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.071]                         if (muffled) 
[17:46:33.071]                           invokeRestart("muffleMessage")
[17:46:33.071]                       }
[17:46:33.071]                       else if (inherits(cond, "warning")) {
[17:46:33.071]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.071]                         if (muffled) 
[17:46:33.071]                           invokeRestart("muffleWarning")
[17:46:33.071]                       }
[17:46:33.071]                       else if (inherits(cond, "condition")) {
[17:46:33.071]                         if (!is.null(pattern)) {
[17:46:33.071]                           computeRestarts <- base::computeRestarts
[17:46:33.071]                           grepl <- base::grepl
[17:46:33.071]                           restarts <- computeRestarts(cond)
[17:46:33.071]                           for (restart in restarts) {
[17:46:33.071]                             name <- restart$name
[17:46:33.071]                             if (is.null(name)) 
[17:46:33.071]                               next
[17:46:33.071]                             if (!grepl(pattern, name)) 
[17:46:33.071]                               next
[17:46:33.071]                             invokeRestart(restart)
[17:46:33.071]                             muffled <- TRUE
[17:46:33.071]                             break
[17:46:33.071]                           }
[17:46:33.071]                         }
[17:46:33.071]                       }
[17:46:33.071]                       invisible(muffled)
[17:46:33.071]                     }
[17:46:33.071]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.071]                   }
[17:46:33.071]                 }
[17:46:33.071]             }
[17:46:33.071]         }))
[17:46:33.071]     }, error = function(ex) {
[17:46:33.071]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.071]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.071]                 ...future.rng), started = ...future.startTime, 
[17:46:33.071]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.071]             version = "1.8"), class = "FutureResult")
[17:46:33.071]     }, finally = {
[17:46:33.071]         if (!identical(...future.workdir, getwd())) 
[17:46:33.071]             setwd(...future.workdir)
[17:46:33.071]         {
[17:46:33.071]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.071]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.071]             }
[17:46:33.071]             base::options(...future.oldOptions)
[17:46:33.071]             if (.Platform$OS.type == "windows") {
[17:46:33.071]                 old_names <- names(...future.oldEnvVars)
[17:46:33.071]                 envs <- base::Sys.getenv()
[17:46:33.071]                 names <- names(envs)
[17:46:33.071]                 common <- intersect(names, old_names)
[17:46:33.071]                 added <- setdiff(names, old_names)
[17:46:33.071]                 removed <- setdiff(old_names, names)
[17:46:33.071]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.071]                   envs[common]]
[17:46:33.071]                 NAMES <- toupper(changed)
[17:46:33.071]                 args <- list()
[17:46:33.071]                 for (kk in seq_along(NAMES)) {
[17:46:33.071]                   name <- changed[[kk]]
[17:46:33.071]                   NAME <- NAMES[[kk]]
[17:46:33.071]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.071]                     next
[17:46:33.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.071]                 }
[17:46:33.071]                 NAMES <- toupper(added)
[17:46:33.071]                 for (kk in seq_along(NAMES)) {
[17:46:33.071]                   name <- added[[kk]]
[17:46:33.071]                   NAME <- NAMES[[kk]]
[17:46:33.071]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.071]                     next
[17:46:33.071]                   args[[name]] <- ""
[17:46:33.071]                 }
[17:46:33.071]                 NAMES <- toupper(removed)
[17:46:33.071]                 for (kk in seq_along(NAMES)) {
[17:46:33.071]                   name <- removed[[kk]]
[17:46:33.071]                   NAME <- NAMES[[kk]]
[17:46:33.071]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.071]                     next
[17:46:33.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.071]                 }
[17:46:33.071]                 if (length(args) > 0) 
[17:46:33.071]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.071]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.071]             }
[17:46:33.071]             else {
[17:46:33.071]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.071]             }
[17:46:33.071]             {
[17:46:33.071]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.071]                   0L) {
[17:46:33.071]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.071]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.071]                   base::options(opts)
[17:46:33.071]                 }
[17:46:33.071]                 {
[17:46:33.071]                   {
[17:46:33.071]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.071]                     NULL
[17:46:33.071]                   }
[17:46:33.071]                   options(future.plan = NULL)
[17:46:33.071]                   if (is.na(NA_character_)) 
[17:46:33.071]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.071]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.071]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.071]                     .init = FALSE)
[17:46:33.071]                 }
[17:46:33.071]             }
[17:46:33.071]         }
[17:46:33.071]     })
[17:46:33.071]     if (TRUE) {
[17:46:33.071]         base::sink(type = "output", split = FALSE)
[17:46:33.071]         if (TRUE) {
[17:46:33.071]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.071]         }
[17:46:33.071]         else {
[17:46:33.071]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.071]         }
[17:46:33.071]         base::close(...future.stdout)
[17:46:33.071]         ...future.stdout <- NULL
[17:46:33.071]     }
[17:46:33.071]     ...future.result$conditions <- ...future.conditions
[17:46:33.071]     ...future.result$finished <- base::Sys.time()
[17:46:33.071]     ...future.result
[17:46:33.071] }
[17:46:33.074] requestCore(): workers = 2
[17:46:33.075] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.077] plan(): Setting new future strategy stack:
[17:46:33.077] List of future strategies:
[17:46:33.077] 1. sequential:
[17:46:33.077]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:33.077]    - tweaked: FALSE
[17:46:33.077]    - call: NULL
[17:46:33.078] plan(): nbrOfWorkers() = 1
[17:46:33.081] plan(): Setting new future strategy stack:
[17:46:33.081] List of future strategies:
[17:46:33.081] 1. multicore:
[17:46:33.081]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:33.081]    - tweaked: FALSE
[17:46:33.081]    - call: plan(strategy)
[17:46:33.087] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.087] result() for MulticoreFuture ...
[17:46:33.088] result() for MulticoreFuture ...
[17:46:33.088] result() for MulticoreFuture ... done
[17:46:33.089] result() for MulticoreFuture ... done
[17:46:33.089] result() for MulticoreFuture ...
[17:46:33.089] result() for MulticoreFuture ... done
[17:46:33.089] getGlobalsAndPackages() ...
[17:46:33.089] Searching for globals...
[17:46:33.090] 
[17:46:33.090] Searching for globals ... DONE
[17:46:33.090] - globals: [0] <none>
[17:46:33.090] getGlobalsAndPackages() ... DONE
[17:46:33.091] run() for ‘Future’ ...
[17:46:33.091] - state: ‘created’
[17:46:33.091] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.095] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.095] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:33.095]   - Field: ‘label’
[17:46:33.095]   - Field: ‘local’
[17:46:33.095]   - Field: ‘owner’
[17:46:33.096]   - Field: ‘envir’
[17:46:33.096]   - Field: ‘workers’
[17:46:33.096]   - Field: ‘packages’
[17:46:33.096]   - Field: ‘gc’
[17:46:33.096]   - Field: ‘job’
[17:46:33.096]   - Field: ‘conditions’
[17:46:33.096]   - Field: ‘expr’
[17:46:33.096]   - Field: ‘uuid’
[17:46:33.096]   - Field: ‘seed’
[17:46:33.097]   - Field: ‘version’
[17:46:33.097]   - Field: ‘result’
[17:46:33.097]   - Field: ‘asynchronous’
[17:46:33.097]   - Field: ‘calls’
[17:46:33.097]   - Field: ‘globals’
[17:46:33.097]   - Field: ‘stdout’
[17:46:33.097]   - Field: ‘earlySignal’
[17:46:33.097]   - Field: ‘lazy’
[17:46:33.097]   - Field: ‘state’
[17:46:33.098] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:33.098] - Launch lazy future ...
[17:46:33.098] Packages needed by the future expression (n = 0): <none>
[17:46:33.098] Packages needed by future strategies (n = 0): <none>
[17:46:33.099] {
[17:46:33.099]     {
[17:46:33.099]         {
[17:46:33.099]             ...future.startTime <- base::Sys.time()
[17:46:33.099]             {
[17:46:33.099]                 {
[17:46:33.099]                   {
[17:46:33.099]                     {
[17:46:33.099]                       base::local({
[17:46:33.099]                         has_future <- base::requireNamespace("future", 
[17:46:33.099]                           quietly = TRUE)
[17:46:33.099]                         if (has_future) {
[17:46:33.099]                           ns <- base::getNamespace("future")
[17:46:33.099]                           version <- ns[[".package"]][["version"]]
[17:46:33.099]                           if (is.null(version)) 
[17:46:33.099]                             version <- utils::packageVersion("future")
[17:46:33.099]                         }
[17:46:33.099]                         else {
[17:46:33.099]                           version <- NULL
[17:46:33.099]                         }
[17:46:33.099]                         if (!has_future || version < "1.8.0") {
[17:46:33.099]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.099]                             "", base::R.version$version.string), 
[17:46:33.099]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.099]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.099]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.099]                               "release", "version")], collapse = " "), 
[17:46:33.099]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.099]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.099]                             info)
[17:46:33.099]                           info <- base::paste(info, collapse = "; ")
[17:46:33.099]                           if (!has_future) {
[17:46:33.099]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.099]                               info)
[17:46:33.099]                           }
[17:46:33.099]                           else {
[17:46:33.099]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.099]                               info, version)
[17:46:33.099]                           }
[17:46:33.099]                           base::stop(msg)
[17:46:33.099]                         }
[17:46:33.099]                       })
[17:46:33.099]                     }
[17:46:33.099]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.099]                     base::options(mc.cores = 1L)
[17:46:33.099]                   }
[17:46:33.099]                   ...future.strategy.old <- future::plan("list")
[17:46:33.099]                   options(future.plan = NULL)
[17:46:33.099]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.099]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.099]                 }
[17:46:33.099]                 ...future.workdir <- getwd()
[17:46:33.099]             }
[17:46:33.099]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.099]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.099]         }
[17:46:33.099]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.099]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.099]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.099]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.099]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.099]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.099]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.099]             base::names(...future.oldOptions))
[17:46:33.099]     }
[17:46:33.099]     if (FALSE) {
[17:46:33.099]     }
[17:46:33.099]     else {
[17:46:33.099]         if (TRUE) {
[17:46:33.099]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.099]                 open = "w")
[17:46:33.099]         }
[17:46:33.099]         else {
[17:46:33.099]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.099]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.099]         }
[17:46:33.099]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.099]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.099]             base::sink(type = "output", split = FALSE)
[17:46:33.099]             base::close(...future.stdout)
[17:46:33.099]         }, add = TRUE)
[17:46:33.099]     }
[17:46:33.099]     ...future.frame <- base::sys.nframe()
[17:46:33.099]     ...future.conditions <- base::list()
[17:46:33.099]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.099]     if (FALSE) {
[17:46:33.099]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.099]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.099]     }
[17:46:33.099]     ...future.result <- base::tryCatch({
[17:46:33.099]         base::withCallingHandlers({
[17:46:33.099]             ...future.value <- base::withVisible(base::local({
[17:46:33.099]                 withCallingHandlers({
[17:46:33.099]                   42
[17:46:33.099]                 }, immediateCondition = function(cond) {
[17:46:33.099]                   save_rds <- function (object, pathname, ...) 
[17:46:33.099]                   {
[17:46:33.099]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:33.099]                     if (file_test("-f", pathname_tmp)) {
[17:46:33.099]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.099]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:33.099]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.099]                         fi_tmp[["mtime"]])
[17:46:33.099]                     }
[17:46:33.099]                     tryCatch({
[17:46:33.099]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:33.099]                     }, error = function(ex) {
[17:46:33.099]                       msg <- conditionMessage(ex)
[17:46:33.099]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.099]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:33.099]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.099]                         fi_tmp[["mtime"]], msg)
[17:46:33.099]                       ex$message <- msg
[17:46:33.099]                       stop(ex)
[17:46:33.099]                     })
[17:46:33.099]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:33.099]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:33.099]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:33.099]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.099]                       fi <- file.info(pathname)
[17:46:33.099]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:33.099]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.099]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:33.099]                         fi[["size"]], fi[["mtime"]])
[17:46:33.099]                       stop(msg)
[17:46:33.099]                     }
[17:46:33.099]                     invisible(pathname)
[17:46:33.099]                   }
[17:46:33.099]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:33.099]                     rootPath = tempdir()) 
[17:46:33.099]                   {
[17:46:33.099]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:33.099]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:33.099]                       tmpdir = path, fileext = ".rds")
[17:46:33.099]                     save_rds(obj, file)
[17:46:33.099]                   }
[17:46:33.099]                   saveImmediateCondition(cond, path = "/tmp/Rtmpprm7aJ/.future/immediateConditions")
[17:46:33.099]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.099]                   {
[17:46:33.099]                     inherits <- base::inherits
[17:46:33.099]                     invokeRestart <- base::invokeRestart
[17:46:33.099]                     is.null <- base::is.null
[17:46:33.099]                     muffled <- FALSE
[17:46:33.099]                     if (inherits(cond, "message")) {
[17:46:33.099]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.099]                       if (muffled) 
[17:46:33.099]                         invokeRestart("muffleMessage")
[17:46:33.099]                     }
[17:46:33.099]                     else if (inherits(cond, "warning")) {
[17:46:33.099]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.099]                       if (muffled) 
[17:46:33.099]                         invokeRestart("muffleWarning")
[17:46:33.099]                     }
[17:46:33.099]                     else if (inherits(cond, "condition")) {
[17:46:33.099]                       if (!is.null(pattern)) {
[17:46:33.099]                         computeRestarts <- base::computeRestarts
[17:46:33.099]                         grepl <- base::grepl
[17:46:33.099]                         restarts <- computeRestarts(cond)
[17:46:33.099]                         for (restart in restarts) {
[17:46:33.099]                           name <- restart$name
[17:46:33.099]                           if (is.null(name)) 
[17:46:33.099]                             next
[17:46:33.099]                           if (!grepl(pattern, name)) 
[17:46:33.099]                             next
[17:46:33.099]                           invokeRestart(restart)
[17:46:33.099]                           muffled <- TRUE
[17:46:33.099]                           break
[17:46:33.099]                         }
[17:46:33.099]                       }
[17:46:33.099]                     }
[17:46:33.099]                     invisible(muffled)
[17:46:33.099]                   }
[17:46:33.099]                   muffleCondition(cond)
[17:46:33.099]                 })
[17:46:33.099]             }))
[17:46:33.099]             future::FutureResult(value = ...future.value$value, 
[17:46:33.099]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.099]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.099]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.099]                     ...future.globalenv.names))
[17:46:33.099]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.099]         }, condition = base::local({
[17:46:33.099]             c <- base::c
[17:46:33.099]             inherits <- base::inherits
[17:46:33.099]             invokeRestart <- base::invokeRestart
[17:46:33.099]             length <- base::length
[17:46:33.099]             list <- base::list
[17:46:33.099]             seq.int <- base::seq.int
[17:46:33.099]             signalCondition <- base::signalCondition
[17:46:33.099]             sys.calls <- base::sys.calls
[17:46:33.099]             `[[` <- base::`[[`
[17:46:33.099]             `+` <- base::`+`
[17:46:33.099]             `<<-` <- base::`<<-`
[17:46:33.099]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.099]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.099]                   3L)]
[17:46:33.099]             }
[17:46:33.099]             function(cond) {
[17:46:33.099]                 is_error <- inherits(cond, "error")
[17:46:33.099]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.099]                   NULL)
[17:46:33.099]                 if (is_error) {
[17:46:33.099]                   sessionInformation <- function() {
[17:46:33.099]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.099]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.099]                       search = base::search(), system = base::Sys.info())
[17:46:33.099]                   }
[17:46:33.099]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.099]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.099]                     cond$call), session = sessionInformation(), 
[17:46:33.099]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.099]                   signalCondition(cond)
[17:46:33.099]                 }
[17:46:33.099]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.099]                 "immediateCondition"))) {
[17:46:33.099]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.099]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.099]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.099]                   if (TRUE && !signal) {
[17:46:33.099]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.099]                     {
[17:46:33.099]                       inherits <- base::inherits
[17:46:33.099]                       invokeRestart <- base::invokeRestart
[17:46:33.099]                       is.null <- base::is.null
[17:46:33.099]                       muffled <- FALSE
[17:46:33.099]                       if (inherits(cond, "message")) {
[17:46:33.099]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.099]                         if (muffled) 
[17:46:33.099]                           invokeRestart("muffleMessage")
[17:46:33.099]                       }
[17:46:33.099]                       else if (inherits(cond, "warning")) {
[17:46:33.099]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.099]                         if (muffled) 
[17:46:33.099]                           invokeRestart("muffleWarning")
[17:46:33.099]                       }
[17:46:33.099]                       else if (inherits(cond, "condition")) {
[17:46:33.099]                         if (!is.null(pattern)) {
[17:46:33.099]                           computeRestarts <- base::computeRestarts
[17:46:33.099]                           grepl <- base::grepl
[17:46:33.099]                           restarts <- computeRestarts(cond)
[17:46:33.099]                           for (restart in restarts) {
[17:46:33.099]                             name <- restart$name
[17:46:33.099]                             if (is.null(name)) 
[17:46:33.099]                               next
[17:46:33.099]                             if (!grepl(pattern, name)) 
[17:46:33.099]                               next
[17:46:33.099]                             invokeRestart(restart)
[17:46:33.099]                             muffled <- TRUE
[17:46:33.099]                             break
[17:46:33.099]                           }
[17:46:33.099]                         }
[17:46:33.099]                       }
[17:46:33.099]                       invisible(muffled)
[17:46:33.099]                     }
[17:46:33.099]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.099]                   }
[17:46:33.099]                 }
[17:46:33.099]                 else {
[17:46:33.099]                   if (TRUE) {
[17:46:33.099]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.099]                     {
[17:46:33.099]                       inherits <- base::inherits
[17:46:33.099]                       invokeRestart <- base::invokeRestart
[17:46:33.099]                       is.null <- base::is.null
[17:46:33.099]                       muffled <- FALSE
[17:46:33.099]                       if (inherits(cond, "message")) {
[17:46:33.099]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.099]                         if (muffled) 
[17:46:33.099]                           invokeRestart("muffleMessage")
[17:46:33.099]                       }
[17:46:33.099]                       else if (inherits(cond, "warning")) {
[17:46:33.099]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.099]                         if (muffled) 
[17:46:33.099]                           invokeRestart("muffleWarning")
[17:46:33.099]                       }
[17:46:33.099]                       else if (inherits(cond, "condition")) {
[17:46:33.099]                         if (!is.null(pattern)) {
[17:46:33.099]                           computeRestarts <- base::computeRestarts
[17:46:33.099]                           grepl <- base::grepl
[17:46:33.099]                           restarts <- computeRestarts(cond)
[17:46:33.099]                           for (restart in restarts) {
[17:46:33.099]                             name <- restart$name
[17:46:33.099]                             if (is.null(name)) 
[17:46:33.099]                               next
[17:46:33.099]                             if (!grepl(pattern, name)) 
[17:46:33.099]                               next
[17:46:33.099]                             invokeRestart(restart)
[17:46:33.099]                             muffled <- TRUE
[17:46:33.099]                             break
[17:46:33.099]                           }
[17:46:33.099]                         }
[17:46:33.099]                       }
[17:46:33.099]                       invisible(muffled)
[17:46:33.099]                     }
[17:46:33.099]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.099]                   }
[17:46:33.099]                 }
[17:46:33.099]             }
[17:46:33.099]         }))
[17:46:33.099]     }, error = function(ex) {
[17:46:33.099]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.099]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.099]                 ...future.rng), started = ...future.startTime, 
[17:46:33.099]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.099]             version = "1.8"), class = "FutureResult")
[17:46:33.099]     }, finally = {
[17:46:33.099]         if (!identical(...future.workdir, getwd())) 
[17:46:33.099]             setwd(...future.workdir)
[17:46:33.099]         {
[17:46:33.099]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.099]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.099]             }
[17:46:33.099]             base::options(...future.oldOptions)
[17:46:33.099]             if (.Platform$OS.type == "windows") {
[17:46:33.099]                 old_names <- names(...future.oldEnvVars)
[17:46:33.099]                 envs <- base::Sys.getenv()
[17:46:33.099]                 names <- names(envs)
[17:46:33.099]                 common <- intersect(names, old_names)
[17:46:33.099]                 added <- setdiff(names, old_names)
[17:46:33.099]                 removed <- setdiff(old_names, names)
[17:46:33.099]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.099]                   envs[common]]
[17:46:33.099]                 NAMES <- toupper(changed)
[17:46:33.099]                 args <- list()
[17:46:33.099]                 for (kk in seq_along(NAMES)) {
[17:46:33.099]                   name <- changed[[kk]]
[17:46:33.099]                   NAME <- NAMES[[kk]]
[17:46:33.099]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.099]                     next
[17:46:33.099]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.099]                 }
[17:46:33.099]                 NAMES <- toupper(added)
[17:46:33.099]                 for (kk in seq_along(NAMES)) {
[17:46:33.099]                   name <- added[[kk]]
[17:46:33.099]                   NAME <- NAMES[[kk]]
[17:46:33.099]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.099]                     next
[17:46:33.099]                   args[[name]] <- ""
[17:46:33.099]                 }
[17:46:33.099]                 NAMES <- toupper(removed)
[17:46:33.099]                 for (kk in seq_along(NAMES)) {
[17:46:33.099]                   name <- removed[[kk]]
[17:46:33.099]                   NAME <- NAMES[[kk]]
[17:46:33.099]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.099]                     next
[17:46:33.099]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.099]                 }
[17:46:33.099]                 if (length(args) > 0) 
[17:46:33.099]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.099]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.099]             }
[17:46:33.099]             else {
[17:46:33.099]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.099]             }
[17:46:33.099]             {
[17:46:33.099]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.099]                   0L) {
[17:46:33.099]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.099]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.099]                   base::options(opts)
[17:46:33.099]                 }
[17:46:33.099]                 {
[17:46:33.099]                   {
[17:46:33.099]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.099]                     NULL
[17:46:33.099]                   }
[17:46:33.099]                   options(future.plan = NULL)
[17:46:33.099]                   if (is.na(NA_character_)) 
[17:46:33.099]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.099]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.099]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.099]                     .init = FALSE)
[17:46:33.099]                 }
[17:46:33.099]             }
[17:46:33.099]         }
[17:46:33.099]     })
[17:46:33.099]     if (TRUE) {
[17:46:33.099]         base::sink(type = "output", split = FALSE)
[17:46:33.099]         if (TRUE) {
[17:46:33.099]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.099]         }
[17:46:33.099]         else {
[17:46:33.099]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.099]         }
[17:46:33.099]         base::close(...future.stdout)
[17:46:33.099]         ...future.stdout <- NULL
[17:46:33.099]     }
[17:46:33.099]     ...future.result$conditions <- ...future.conditions
[17:46:33.099]     ...future.result$finished <- base::Sys.time()
[17:46:33.099]     ...future.result
[17:46:33.099] }
[17:46:33.101] requestCore(): workers = 2
[17:46:33.103] MulticoreFuture started
[17:46:33.104] - Launch lazy future ... done
[17:46:33.104] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[17:46:33.104] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.104] List of future strategies:
[17:46:33.104] 1. sequential:
[17:46:33.104]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:33.104]    - tweaked: FALSE
[17:46:33.104]    - call: NULL
[17:46:33.105] plan(): nbrOfWorkers() = 1
[17:46:33.107] plan(): Setting new future strategy stack:
[17:46:33.108] List of future strategies:
[17:46:33.108] 1. multicore:
[17:46:33.108]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:33.108]    - tweaked: FALSE
[17:46:33.108]    - call: plan(strategy)
[17:46:33.113] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.114] result() for MulticoreFuture ...
[17:46:33.115] result() for MulticoreFuture ...
[17:46:33.115] result() for MulticoreFuture ... done
[17:46:33.115] result() for MulticoreFuture ... done
[17:46:33.115] result() for MulticoreFuture ...
[17:46:33.115] result() for MulticoreFuture ... done
[17:46:33.116] getGlobalsAndPackages() ...
[17:46:33.116] Searching for globals...
[17:46:33.117] - globals found: [1] ‘{’
[17:46:33.117] Searching for globals ... DONE
[17:46:33.117] Resolving globals: FALSE
[17:46:33.118] 
[17:46:33.118] 
[17:46:33.118] getGlobalsAndPackages() ... DONE
[17:46:33.118] run() for ‘Future’ ...
[17:46:33.118] - state: ‘created’
[17:46:33.118] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.123] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.123] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:33.123]   - Field: ‘label’
[17:46:33.123]   - Field: ‘local’
[17:46:33.123]   - Field: ‘owner’
[17:46:33.123]   - Field: ‘envir’
[17:46:33.124]   - Field: ‘workers’
[17:46:33.124]   - Field: ‘packages’
[17:46:33.124]   - Field: ‘gc’
[17:46:33.124]   - Field: ‘job’
[17:46:33.124]   - Field: ‘conditions’
[17:46:33.124]   - Field: ‘expr’
[17:46:33.124]   - Field: ‘uuid’
[17:46:33.124]   - Field: ‘seed’
[17:46:33.125]   - Field: ‘version’
[17:46:33.125]   - Field: ‘result’
[17:46:33.125]   - Field: ‘asynchronous’
[17:46:33.125]   - Field: ‘calls’
[17:46:33.125]   - Field: ‘globals’
[17:46:33.125]   - Field: ‘stdout’
[17:46:33.125]   - Field: ‘earlySignal’
[17:46:33.125]   - Field: ‘lazy’
[17:46:33.125]   - Field: ‘state’
[17:46:33.125] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:33.126] - Launch lazy future ...
[17:46:33.126] Packages needed by the future expression (n = 0): <none>
[17:46:33.126] Packages needed by future strategies (n = 0): <none>
[17:46:33.127] {
[17:46:33.127]     {
[17:46:33.127]         {
[17:46:33.127]             ...future.startTime <- base::Sys.time()
[17:46:33.127]             {
[17:46:33.127]                 {
[17:46:33.127]                   {
[17:46:33.127]                     {
[17:46:33.127]                       base::local({
[17:46:33.127]                         has_future <- base::requireNamespace("future", 
[17:46:33.127]                           quietly = TRUE)
[17:46:33.127]                         if (has_future) {
[17:46:33.127]                           ns <- base::getNamespace("future")
[17:46:33.127]                           version <- ns[[".package"]][["version"]]
[17:46:33.127]                           if (is.null(version)) 
[17:46:33.127]                             version <- utils::packageVersion("future")
[17:46:33.127]                         }
[17:46:33.127]                         else {
[17:46:33.127]                           version <- NULL
[17:46:33.127]                         }
[17:46:33.127]                         if (!has_future || version < "1.8.0") {
[17:46:33.127]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.127]                             "", base::R.version$version.string), 
[17:46:33.127]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.127]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.127]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.127]                               "release", "version")], collapse = " "), 
[17:46:33.127]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.127]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.127]                             info)
[17:46:33.127]                           info <- base::paste(info, collapse = "; ")
[17:46:33.127]                           if (!has_future) {
[17:46:33.127]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.127]                               info)
[17:46:33.127]                           }
[17:46:33.127]                           else {
[17:46:33.127]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.127]                               info, version)
[17:46:33.127]                           }
[17:46:33.127]                           base::stop(msg)
[17:46:33.127]                         }
[17:46:33.127]                       })
[17:46:33.127]                     }
[17:46:33.127]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.127]                     base::options(mc.cores = 1L)
[17:46:33.127]                   }
[17:46:33.127]                   ...future.strategy.old <- future::plan("list")
[17:46:33.127]                   options(future.plan = NULL)
[17:46:33.127]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.127]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.127]                 }
[17:46:33.127]                 ...future.workdir <- getwd()
[17:46:33.127]             }
[17:46:33.127]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.127]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.127]         }
[17:46:33.127]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.127]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.127]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.127]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.127]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.127]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.127]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.127]             base::names(...future.oldOptions))
[17:46:33.127]     }
[17:46:33.127]     if (FALSE) {
[17:46:33.127]     }
[17:46:33.127]     else {
[17:46:33.127]         if (TRUE) {
[17:46:33.127]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.127]                 open = "w")
[17:46:33.127]         }
[17:46:33.127]         else {
[17:46:33.127]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.127]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.127]         }
[17:46:33.127]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.127]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.127]             base::sink(type = "output", split = FALSE)
[17:46:33.127]             base::close(...future.stdout)
[17:46:33.127]         }, add = TRUE)
[17:46:33.127]     }
[17:46:33.127]     ...future.frame <- base::sys.nframe()
[17:46:33.127]     ...future.conditions <- base::list()
[17:46:33.127]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.127]     if (FALSE) {
[17:46:33.127]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.127]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.127]     }
[17:46:33.127]     ...future.result <- base::tryCatch({
[17:46:33.127]         base::withCallingHandlers({
[17:46:33.127]             ...future.value <- base::withVisible(base::local({
[17:46:33.127]                 withCallingHandlers({
[17:46:33.127]                   {
[17:46:33.127]                     42
[17:46:33.127]                   }
[17:46:33.127]                 }, immediateCondition = function(cond) {
[17:46:33.127]                   save_rds <- function (object, pathname, ...) 
[17:46:33.127]                   {
[17:46:33.127]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:33.127]                     if (file_test("-f", pathname_tmp)) {
[17:46:33.127]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.127]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:33.127]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.127]                         fi_tmp[["mtime"]])
[17:46:33.127]                     }
[17:46:33.127]                     tryCatch({
[17:46:33.127]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:33.127]                     }, error = function(ex) {
[17:46:33.127]                       msg <- conditionMessage(ex)
[17:46:33.127]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.127]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:33.127]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.127]                         fi_tmp[["mtime"]], msg)
[17:46:33.127]                       ex$message <- msg
[17:46:33.127]                       stop(ex)
[17:46:33.127]                     })
[17:46:33.127]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:33.127]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:33.127]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:33.127]                       fi_tmp <- file.info(pathname_tmp)
[17:46:33.127]                       fi <- file.info(pathname)
[17:46:33.127]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:33.127]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:33.127]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:33.127]                         fi[["size"]], fi[["mtime"]])
[17:46:33.127]                       stop(msg)
[17:46:33.127]                     }
[17:46:33.127]                     invisible(pathname)
[17:46:33.127]                   }
[17:46:33.127]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:33.127]                     rootPath = tempdir()) 
[17:46:33.127]                   {
[17:46:33.127]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:33.127]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:33.127]                       tmpdir = path, fileext = ".rds")
[17:46:33.127]                     save_rds(obj, file)
[17:46:33.127]                   }
[17:46:33.127]                   saveImmediateCondition(cond, path = "/tmp/Rtmpprm7aJ/.future/immediateConditions")
[17:46:33.127]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.127]                   {
[17:46:33.127]                     inherits <- base::inherits
[17:46:33.127]                     invokeRestart <- base::invokeRestart
[17:46:33.127]                     is.null <- base::is.null
[17:46:33.127]                     muffled <- FALSE
[17:46:33.127]                     if (inherits(cond, "message")) {
[17:46:33.127]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.127]                       if (muffled) 
[17:46:33.127]                         invokeRestart("muffleMessage")
[17:46:33.127]                     }
[17:46:33.127]                     else if (inherits(cond, "warning")) {
[17:46:33.127]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.127]                       if (muffled) 
[17:46:33.127]                         invokeRestart("muffleWarning")
[17:46:33.127]                     }
[17:46:33.127]                     else if (inherits(cond, "condition")) {
[17:46:33.127]                       if (!is.null(pattern)) {
[17:46:33.127]                         computeRestarts <- base::computeRestarts
[17:46:33.127]                         grepl <- base::grepl
[17:46:33.127]                         restarts <- computeRestarts(cond)
[17:46:33.127]                         for (restart in restarts) {
[17:46:33.127]                           name <- restart$name
[17:46:33.127]                           if (is.null(name)) 
[17:46:33.127]                             next
[17:46:33.127]                           if (!grepl(pattern, name)) 
[17:46:33.127]                             next
[17:46:33.127]                           invokeRestart(restart)
[17:46:33.127]                           muffled <- TRUE
[17:46:33.127]                           break
[17:46:33.127]                         }
[17:46:33.127]                       }
[17:46:33.127]                     }
[17:46:33.127]                     invisible(muffled)
[17:46:33.127]                   }
[17:46:33.127]                   muffleCondition(cond)
[17:46:33.127]                 })
[17:46:33.127]             }))
[17:46:33.127]             future::FutureResult(value = ...future.value$value, 
[17:46:33.127]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.127]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.127]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.127]                     ...future.globalenv.names))
[17:46:33.127]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.127]         }, condition = base::local({
[17:46:33.127]             c <- base::c
[17:46:33.127]             inherits <- base::inherits
[17:46:33.127]             invokeRestart <- base::invokeRestart
[17:46:33.127]             length <- base::length
[17:46:33.127]             list <- base::list
[17:46:33.127]             seq.int <- base::seq.int
[17:46:33.127]             signalCondition <- base::signalCondition
[17:46:33.127]             sys.calls <- base::sys.calls
[17:46:33.127]             `[[` <- base::`[[`
[17:46:33.127]             `+` <- base::`+`
[17:46:33.127]             `<<-` <- base::`<<-`
[17:46:33.127]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.127]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.127]                   3L)]
[17:46:33.127]             }
[17:46:33.127]             function(cond) {
[17:46:33.127]                 is_error <- inherits(cond, "error")
[17:46:33.127]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.127]                   NULL)
[17:46:33.127]                 if (is_error) {
[17:46:33.127]                   sessionInformation <- function() {
[17:46:33.127]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.127]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.127]                       search = base::search(), system = base::Sys.info())
[17:46:33.127]                   }
[17:46:33.127]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.127]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.127]                     cond$call), session = sessionInformation(), 
[17:46:33.127]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.127]                   signalCondition(cond)
[17:46:33.127]                 }
[17:46:33.127]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.127]                 "immediateCondition"))) {
[17:46:33.127]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.127]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.127]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.127]                   if (TRUE && !signal) {
[17:46:33.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.127]                     {
[17:46:33.127]                       inherits <- base::inherits
[17:46:33.127]                       invokeRestart <- base::invokeRestart
[17:46:33.127]                       is.null <- base::is.null
[17:46:33.127]                       muffled <- FALSE
[17:46:33.127]                       if (inherits(cond, "message")) {
[17:46:33.127]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.127]                         if (muffled) 
[17:46:33.127]                           invokeRestart("muffleMessage")
[17:46:33.127]                       }
[17:46:33.127]                       else if (inherits(cond, "warning")) {
[17:46:33.127]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.127]                         if (muffled) 
[17:46:33.127]                           invokeRestart("muffleWarning")
[17:46:33.127]                       }
[17:46:33.127]                       else if (inherits(cond, "condition")) {
[17:46:33.127]                         if (!is.null(pattern)) {
[17:46:33.127]                           computeRestarts <- base::computeRestarts
[17:46:33.127]                           grepl <- base::grepl
[17:46:33.127]                           restarts <- computeRestarts(cond)
[17:46:33.127]                           for (restart in restarts) {
[17:46:33.127]                             name <- restart$name
[17:46:33.127]                             if (is.null(name)) 
[17:46:33.127]                               next
[17:46:33.127]                             if (!grepl(pattern, name)) 
[17:46:33.127]                               next
[17:46:33.127]                             invokeRestart(restart)
[17:46:33.127]                             muffled <- TRUE
[17:46:33.127]                             break
[17:46:33.127]                           }
[17:46:33.127]                         }
[17:46:33.127]                       }
[17:46:33.127]                       invisible(muffled)
[17:46:33.127]                     }
[17:46:33.127]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.127]                   }
[17:46:33.127]                 }
[17:46:33.127]                 else {
[17:46:33.127]                   if (TRUE) {
[17:46:33.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.127]                     {
[17:46:33.127]                       inherits <- base::inherits
[17:46:33.127]                       invokeRestart <- base::invokeRestart
[17:46:33.127]                       is.null <- base::is.null
[17:46:33.127]                       muffled <- FALSE
[17:46:33.127]                       if (inherits(cond, "message")) {
[17:46:33.127]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.127]                         if (muffled) 
[17:46:33.127]                           invokeRestart("muffleMessage")
[17:46:33.127]                       }
[17:46:33.127]                       else if (inherits(cond, "warning")) {
[17:46:33.127]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.127]                         if (muffled) 
[17:46:33.127]                           invokeRestart("muffleWarning")
[17:46:33.127]                       }
[17:46:33.127]                       else if (inherits(cond, "condition")) {
[17:46:33.127]                         if (!is.null(pattern)) {
[17:46:33.127]                           computeRestarts <- base::computeRestarts
[17:46:33.127]                           grepl <- base::grepl
[17:46:33.127]                           restarts <- computeRestarts(cond)
[17:46:33.127]                           for (restart in restarts) {
[17:46:33.127]                             name <- restart$name
[17:46:33.127]                             if (is.null(name)) 
[17:46:33.127]                               next
[17:46:33.127]                             if (!grepl(pattern, name)) 
[17:46:33.127]                               next
[17:46:33.127]                             invokeRestart(restart)
[17:46:33.127]                             muffled <- TRUE
[17:46:33.127]                             break
[17:46:33.127]                           }
[17:46:33.127]                         }
[17:46:33.127]                       }
[17:46:33.127]                       invisible(muffled)
[17:46:33.127]                     }
[17:46:33.127]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.127]                   }
[17:46:33.127]                 }
[17:46:33.127]             }
[17:46:33.127]         }))
[17:46:33.127]     }, error = function(ex) {
[17:46:33.127]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.127]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.127]                 ...future.rng), started = ...future.startTime, 
[17:46:33.127]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.127]             version = "1.8"), class = "FutureResult")
[17:46:33.127]     }, finally = {
[17:46:33.127]         if (!identical(...future.workdir, getwd())) 
[17:46:33.127]             setwd(...future.workdir)
[17:46:33.127]         {
[17:46:33.127]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.127]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.127]             }
[17:46:33.127]             base::options(...future.oldOptions)
[17:46:33.127]             if (.Platform$OS.type == "windows") {
[17:46:33.127]                 old_names <- names(...future.oldEnvVars)
[17:46:33.127]                 envs <- base::Sys.getenv()
[17:46:33.127]                 names <- names(envs)
[17:46:33.127]                 common <- intersect(names, old_names)
[17:46:33.127]                 added <- setdiff(names, old_names)
[17:46:33.127]                 removed <- setdiff(old_names, names)
[17:46:33.127]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.127]                   envs[common]]
[17:46:33.127]                 NAMES <- toupper(changed)
[17:46:33.127]                 args <- list()
[17:46:33.127]                 for (kk in seq_along(NAMES)) {
[17:46:33.127]                   name <- changed[[kk]]
[17:46:33.127]                   NAME <- NAMES[[kk]]
[17:46:33.127]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.127]                     next
[17:46:33.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.127]                 }
[17:46:33.127]                 NAMES <- toupper(added)
[17:46:33.127]                 for (kk in seq_along(NAMES)) {
[17:46:33.127]                   name <- added[[kk]]
[17:46:33.127]                   NAME <- NAMES[[kk]]
[17:46:33.127]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.127]                     next
[17:46:33.127]                   args[[name]] <- ""
[17:46:33.127]                 }
[17:46:33.127]                 NAMES <- toupper(removed)
[17:46:33.127]                 for (kk in seq_along(NAMES)) {
[17:46:33.127]                   name <- removed[[kk]]
[17:46:33.127]                   NAME <- NAMES[[kk]]
[17:46:33.127]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.127]                     next
[17:46:33.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.127]                 }
[17:46:33.127]                 if (length(args) > 0) 
[17:46:33.127]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.127]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.127]             }
[17:46:33.127]             else {
[17:46:33.127]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.127]             }
[17:46:33.127]             {
[17:46:33.127]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.127]                   0L) {
[17:46:33.127]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.127]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.127]                   base::options(opts)
[17:46:33.127]                 }
[17:46:33.127]                 {
[17:46:33.127]                   {
[17:46:33.127]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.127]                     NULL
[17:46:33.127]                   }
[17:46:33.127]                   options(future.plan = NULL)
[17:46:33.127]                   if (is.na(NA_character_)) 
[17:46:33.127]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.127]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.127]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.127]                     .init = FALSE)
[17:46:33.127]                 }
[17:46:33.127]             }
[17:46:33.127]         }
[17:46:33.127]     })
[17:46:33.127]     if (TRUE) {
[17:46:33.127]         base::sink(type = "output", split = FALSE)
[17:46:33.127]         if (TRUE) {
[17:46:33.127]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.127]         }
[17:46:33.127]         else {
[17:46:33.127]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.127]         }
[17:46:33.127]         base::close(...future.stdout)
[17:46:33.127]         ...future.stdout <- NULL
[17:46:33.127]     }
[17:46:33.127]     ...future.result$conditions <- ...future.conditions
[17:46:33.127]     ...future.result$finished <- base::Sys.time()
[17:46:33.127]     ...future.result
[17:46:33.127] }
[17:46:33.129] requestCore(): workers = 2
[17:46:33.131] MulticoreFuture started
[17:46:33.132] - Launch lazy future ... done
[17:46:33.132] run() for ‘MulticoreFuture’ ... done
[17:46:33.132] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.133] List of future strategies:
[17:46:33.133] 1. sequential:
[17:46:33.133]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:33.133]    - tweaked: FALSE
[17:46:33.133]    - call: NULL
[17:46:33.134] plan(): nbrOfWorkers() = 1
[17:46:33.136] plan(): Setting new future strategy stack:
[17:46:33.136] List of future strategies:
[17:46:33.136] 1. multicore:
[17:46:33.136]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:33.136]    - tweaked: FALSE
[17:46:33.136]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.144] result() for MulticoreFuture ...
[17:46:33.147] plan(): nbrOfWorkers() = 2
[17:46:33.147] result() for MulticoreFuture ...
[17:46:33.147] result() for MulticoreFuture ... done
[17:46:33.148] result() for MulticoreFuture ... done
[17:46:33.148] result() for MulticoreFuture ...
[17:46:33.151] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[17:46:33.151] plan(): Setting new future strategy stack:
[17:46:33.152] List of future strategies:
[17:46:33.152] 1. multisession:
[17:46:33.152]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:33.152]    - tweaked: FALSE
[17:46:33.152]    - call: plan(strategy)
[17:46:33.152] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:46:33.152] multisession:
[17:46:33.152] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:33.152] - tweaked: FALSE
[17:46:33.152] - call: plan(strategy)
[17:46:33.158] getGlobalsAndPackages() ...
[17:46:33.159] Not searching for globals
[17:46:33.159] - globals: [0] <none>
[17:46:33.159] getGlobalsAndPackages() ... DONE
[17:46:33.159] [local output] makeClusterPSOCK() ...
[17:46:33.204] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:33.205] [local output] Base port: 11169
[17:46:33.205] [local output] Getting setup options for 2 cluster nodes ...
[17:46:33.205] [local output]  - Node 1 of 2 ...
[17:46:33.206] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:33.206] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpprm7aJ/worker.rank=1.parallelly.parent=40772.9f441bdf5d5e.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpprm7aJ/worker.rank=1.parallelly.parent=40772.9f441bdf5d5e.pid")'’
[17:46:33.393] - Possible to infer worker's PID: TRUE
[17:46:33.394] [local output] Rscript port: 11169

[17:46:33.394] [local output]  - Node 2 of 2 ...
[17:46:33.394] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:33.395] [local output] Rscript port: 11169

[17:46:33.395] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:33.395] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:33.396] [local output] Setting up PSOCK nodes in parallel
[17:46:33.396] List of 36
[17:46:33.396]  $ worker          : chr "localhost"
[17:46:33.396]   ..- attr(*, "localhost")= logi TRUE
[17:46:33.396]  $ master          : chr "localhost"
[17:46:33.396]  $ port            : int 11169
[17:46:33.396]  $ connectTimeout  : num 120
[17:46:33.396]  $ timeout         : num 2592000
[17:46:33.396]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:33.396]  $ homogeneous     : logi TRUE
[17:46:33.396]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:33.396]  $ rscript_envs    : NULL
[17:46:33.396]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:33.396]  $ rscript_startup : NULL
[17:46:33.396]  $ rscript_sh      : chr "sh"
[17:46:33.396]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:33.396]  $ methods         : logi TRUE
[17:46:33.396]  $ socketOptions   : chr "no-delay"
[17:46:33.396]  $ useXDR          : logi FALSE
[17:46:33.396]  $ outfile         : chr "/dev/null"
[17:46:33.396]  $ renice          : int NA
[17:46:33.396]  $ rshcmd          : NULL
[17:46:33.396]  $ user            : chr(0) 
[17:46:33.396]  $ revtunnel       : logi FALSE
[17:46:33.396]  $ rshlogfile      : NULL
[17:46:33.396]  $ rshopts         : chr(0) 
[17:46:33.396]  $ rank            : int 1
[17:46:33.396]  $ manual          : logi FALSE
[17:46:33.396]  $ dryrun          : logi FALSE
[17:46:33.396]  $ quiet           : logi FALSE
[17:46:33.396]  $ setup_strategy  : chr "parallel"
[17:46:33.396]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:33.396]  $ pidfile         : chr "/tmp/Rtmpprm7aJ/worker.rank=1.parallelly.parent=40772.9f441bdf5d5e.pid"
[17:46:33.396]  $ rshcmd_label    : NULL
[17:46:33.396]  $ rsh_call        : NULL
[17:46:33.396]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:33.396]  $ localMachine    : logi TRUE
[17:46:33.396]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:33.396]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:33.396]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:33.396]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:33.396]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:33.396]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:33.396]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:33.396]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:33.396]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:33.396]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:33.396]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:33.396]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:33.396]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:33.396]  $ arguments       :List of 28
[17:46:33.396]   ..$ worker          : chr "localhost"
[17:46:33.396]   ..$ master          : NULL
[17:46:33.396]   ..$ port            : int 11169
[17:46:33.396]   ..$ connectTimeout  : num 120
[17:46:33.396]   ..$ timeout         : num 2592000
[17:46:33.396]   ..$ rscript         : NULL
[17:46:33.396]   ..$ homogeneous     : NULL
[17:46:33.396]   ..$ rscript_args    : NULL
[17:46:33.396]   ..$ rscript_envs    : NULL
[17:46:33.396]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:33.396]   ..$ rscript_startup : NULL
[17:46:33.396]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:33.396]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:33.396]   ..$ methods         : logi TRUE
[17:46:33.396]   ..$ socketOptions   : chr "no-delay"
[17:46:33.396]   ..$ useXDR          : logi FALSE
[17:46:33.396]   ..$ outfile         : chr "/dev/null"
[17:46:33.396]   ..$ renice          : int NA
[17:46:33.396]   ..$ rshcmd          : NULL
[17:46:33.396]   ..$ user            : NULL
[17:46:33.396]   ..$ revtunnel       : logi NA
[17:46:33.396]   ..$ rshlogfile      : NULL
[17:46:33.396]   ..$ rshopts         : NULL
[17:46:33.396]   ..$ rank            : int 1
[17:46:33.396]   ..$ manual          : logi FALSE
[17:46:33.396]   ..$ dryrun          : logi FALSE
[17:46:33.396]   ..$ quiet           : logi FALSE
[17:46:33.396]   ..$ setup_strategy  : chr "parallel"
[17:46:33.396]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:33.415] [local output] System call to launch all workers:
[17:46:33.415] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpprm7aJ/worker.rank=1.parallelly.parent=40772.9f441bdf5d5e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11169 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:33.415] [local output] Starting PSOCK main server
[17:46:33.421] [local output] Workers launched
[17:46:33.421] [local output] Waiting for workers to connect back
[17:46:33.421]  - [local output] 0 workers out of 2 ready
[17:46:33.682]  - [local output] 0 workers out of 2 ready
[17:46:33.683]  - [local output] 1 workers out of 2 ready
[17:46:33.685]  - [local output] 1 workers out of 2 ready
[17:46:33.685]  - [local output] 2 workers out of 2 ready
[17:46:33.685] [local output] Launching of workers completed
[17:46:33.686] [local output] Collecting session information from workers
[17:46:33.686] [local output]  - Worker #1 of 2
[17:46:33.687] [local output]  - Worker #2 of 2
[17:46:33.687] [local output] makeClusterPSOCK() ... done
[17:46:33.699] Packages needed by the future expression (n = 0): <none>
[17:46:33.699] Packages needed by future strategies (n = 0): <none>
[17:46:33.700] {
[17:46:33.700]     {
[17:46:33.700]         {
[17:46:33.700]             ...future.startTime <- base::Sys.time()
[17:46:33.700]             {
[17:46:33.700]                 {
[17:46:33.700]                   {
[17:46:33.700]                     {
[17:46:33.700]                       base::local({
[17:46:33.700]                         has_future <- base::requireNamespace("future", 
[17:46:33.700]                           quietly = TRUE)
[17:46:33.700]                         if (has_future) {
[17:46:33.700]                           ns <- base::getNamespace("future")
[17:46:33.700]                           version <- ns[[".package"]][["version"]]
[17:46:33.700]                           if (is.null(version)) 
[17:46:33.700]                             version <- utils::packageVersion("future")
[17:46:33.700]                         }
[17:46:33.700]                         else {
[17:46:33.700]                           version <- NULL
[17:46:33.700]                         }
[17:46:33.700]                         if (!has_future || version < "1.8.0") {
[17:46:33.700]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.700]                             "", base::R.version$version.string), 
[17:46:33.700]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.700]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.700]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.700]                               "release", "version")], collapse = " "), 
[17:46:33.700]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.700]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.700]                             info)
[17:46:33.700]                           info <- base::paste(info, collapse = "; ")
[17:46:33.700]                           if (!has_future) {
[17:46:33.700]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.700]                               info)
[17:46:33.700]                           }
[17:46:33.700]                           else {
[17:46:33.700]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.700]                               info, version)
[17:46:33.700]                           }
[17:46:33.700]                           base::stop(msg)
[17:46:33.700]                         }
[17:46:33.700]                       })
[17:46:33.700]                     }
[17:46:33.700]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.700]                     base::options(mc.cores = 1L)
[17:46:33.700]                   }
[17:46:33.700]                   ...future.strategy.old <- future::plan("list")
[17:46:33.700]                   options(future.plan = NULL)
[17:46:33.700]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.700]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.700]                 }
[17:46:33.700]                 ...future.workdir <- getwd()
[17:46:33.700]             }
[17:46:33.700]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.700]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.700]         }
[17:46:33.700]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.700]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.700]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.700]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.700]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.700]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.700]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.700]             base::names(...future.oldOptions))
[17:46:33.700]     }
[17:46:33.700]     if (FALSE) {
[17:46:33.700]     }
[17:46:33.700]     else {
[17:46:33.700]         if (TRUE) {
[17:46:33.700]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.700]                 open = "w")
[17:46:33.700]         }
[17:46:33.700]         else {
[17:46:33.700]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.700]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.700]         }
[17:46:33.700]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.700]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.700]             base::sink(type = "output", split = FALSE)
[17:46:33.700]             base::close(...future.stdout)
[17:46:33.700]         }, add = TRUE)
[17:46:33.700]     }
[17:46:33.700]     ...future.frame <- base::sys.nframe()
[17:46:33.700]     ...future.conditions <- base::list()
[17:46:33.700]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.700]     if (FALSE) {
[17:46:33.700]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.700]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.700]     }
[17:46:33.700]     ...future.result <- base::tryCatch({
[17:46:33.700]         base::withCallingHandlers({
[17:46:33.700]             ...future.value <- base::withVisible(base::local({
[17:46:33.700]                 ...future.makeSendCondition <- base::local({
[17:46:33.700]                   sendCondition <- NULL
[17:46:33.700]                   function(frame = 1L) {
[17:46:33.700]                     if (is.function(sendCondition)) 
[17:46:33.700]                       return(sendCondition)
[17:46:33.700]                     ns <- getNamespace("parallel")
[17:46:33.700]                     if (exists("sendData", mode = "function", 
[17:46:33.700]                       envir = ns)) {
[17:46:33.700]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.700]                         envir = ns)
[17:46:33.700]                       envir <- sys.frame(frame)
[17:46:33.700]                       master <- NULL
[17:46:33.700]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.700]                         !identical(envir, emptyenv())) {
[17:46:33.700]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.700]                           inherits = FALSE)) {
[17:46:33.700]                           master <- get("master", mode = "list", 
[17:46:33.700]                             envir = envir, inherits = FALSE)
[17:46:33.700]                           if (inherits(master, c("SOCKnode", 
[17:46:33.700]                             "SOCK0node"))) {
[17:46:33.700]                             sendCondition <<- function(cond) {
[17:46:33.700]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.700]                                 success = TRUE)
[17:46:33.700]                               parallel_sendData(master, data)
[17:46:33.700]                             }
[17:46:33.700]                             return(sendCondition)
[17:46:33.700]                           }
[17:46:33.700]                         }
[17:46:33.700]                         frame <- frame + 1L
[17:46:33.700]                         envir <- sys.frame(frame)
[17:46:33.700]                       }
[17:46:33.700]                     }
[17:46:33.700]                     sendCondition <<- function(cond) NULL
[17:46:33.700]                   }
[17:46:33.700]                 })
[17:46:33.700]                 withCallingHandlers({
[17:46:33.700]                   NA
[17:46:33.700]                 }, immediateCondition = function(cond) {
[17:46:33.700]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.700]                   sendCondition(cond)
[17:46:33.700]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.700]                   {
[17:46:33.700]                     inherits <- base::inherits
[17:46:33.700]                     invokeRestart <- base::invokeRestart
[17:46:33.700]                     is.null <- base::is.null
[17:46:33.700]                     muffled <- FALSE
[17:46:33.700]                     if (inherits(cond, "message")) {
[17:46:33.700]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.700]                       if (muffled) 
[17:46:33.700]                         invokeRestart("muffleMessage")
[17:46:33.700]                     }
[17:46:33.700]                     else if (inherits(cond, "warning")) {
[17:46:33.700]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.700]                       if (muffled) 
[17:46:33.700]                         invokeRestart("muffleWarning")
[17:46:33.700]                     }
[17:46:33.700]                     else if (inherits(cond, "condition")) {
[17:46:33.700]                       if (!is.null(pattern)) {
[17:46:33.700]                         computeRestarts <- base::computeRestarts
[17:46:33.700]                         grepl <- base::grepl
[17:46:33.700]                         restarts <- computeRestarts(cond)
[17:46:33.700]                         for (restart in restarts) {
[17:46:33.700]                           name <- restart$name
[17:46:33.700]                           if (is.null(name)) 
[17:46:33.700]                             next
[17:46:33.700]                           if (!grepl(pattern, name)) 
[17:46:33.700]                             next
[17:46:33.700]                           invokeRestart(restart)
[17:46:33.700]                           muffled <- TRUE
[17:46:33.700]                           break
[17:46:33.700]                         }
[17:46:33.700]                       }
[17:46:33.700]                     }
[17:46:33.700]                     invisible(muffled)
[17:46:33.700]                   }
[17:46:33.700]                   muffleCondition(cond)
[17:46:33.700]                 })
[17:46:33.700]             }))
[17:46:33.700]             future::FutureResult(value = ...future.value$value, 
[17:46:33.700]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.700]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.700]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.700]                     ...future.globalenv.names))
[17:46:33.700]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.700]         }, condition = base::local({
[17:46:33.700]             c <- base::c
[17:46:33.700]             inherits <- base::inherits
[17:46:33.700]             invokeRestart <- base::invokeRestart
[17:46:33.700]             length <- base::length
[17:46:33.700]             list <- base::list
[17:46:33.700]             seq.int <- base::seq.int
[17:46:33.700]             signalCondition <- base::signalCondition
[17:46:33.700]             sys.calls <- base::sys.calls
[17:46:33.700]             `[[` <- base::`[[`
[17:46:33.700]             `+` <- base::`+`
[17:46:33.700]             `<<-` <- base::`<<-`
[17:46:33.700]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.700]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.700]                   3L)]
[17:46:33.700]             }
[17:46:33.700]             function(cond) {
[17:46:33.700]                 is_error <- inherits(cond, "error")
[17:46:33.700]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.700]                   NULL)
[17:46:33.700]                 if (is_error) {
[17:46:33.700]                   sessionInformation <- function() {
[17:46:33.700]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.700]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.700]                       search = base::search(), system = base::Sys.info())
[17:46:33.700]                   }
[17:46:33.700]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.700]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.700]                     cond$call), session = sessionInformation(), 
[17:46:33.700]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.700]                   signalCondition(cond)
[17:46:33.700]                 }
[17:46:33.700]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.700]                 "immediateCondition"))) {
[17:46:33.700]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.700]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.700]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.700]                   if (TRUE && !signal) {
[17:46:33.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.700]                     {
[17:46:33.700]                       inherits <- base::inherits
[17:46:33.700]                       invokeRestart <- base::invokeRestart
[17:46:33.700]                       is.null <- base::is.null
[17:46:33.700]                       muffled <- FALSE
[17:46:33.700]                       if (inherits(cond, "message")) {
[17:46:33.700]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.700]                         if (muffled) 
[17:46:33.700]                           invokeRestart("muffleMessage")
[17:46:33.700]                       }
[17:46:33.700]                       else if (inherits(cond, "warning")) {
[17:46:33.700]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.700]                         if (muffled) 
[17:46:33.700]                           invokeRestart("muffleWarning")
[17:46:33.700]                       }
[17:46:33.700]                       else if (inherits(cond, "condition")) {
[17:46:33.700]                         if (!is.null(pattern)) {
[17:46:33.700]                           computeRestarts <- base::computeRestarts
[17:46:33.700]                           grepl <- base::grepl
[17:46:33.700]                           restarts <- computeRestarts(cond)
[17:46:33.700]                           for (restart in restarts) {
[17:46:33.700]                             name <- restart$name
[17:46:33.700]                             if (is.null(name)) 
[17:46:33.700]                               next
[17:46:33.700]                             if (!grepl(pattern, name)) 
[17:46:33.700]                               next
[17:46:33.700]                             invokeRestart(restart)
[17:46:33.700]                             muffled <- TRUE
[17:46:33.700]                             break
[17:46:33.700]                           }
[17:46:33.700]                         }
[17:46:33.700]                       }
[17:46:33.700]                       invisible(muffled)
[17:46:33.700]                     }
[17:46:33.700]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.700]                   }
[17:46:33.700]                 }
[17:46:33.700]                 else {
[17:46:33.700]                   if (TRUE) {
[17:46:33.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.700]                     {
[17:46:33.700]                       inherits <- base::inherits
[17:46:33.700]                       invokeRestart <- base::invokeRestart
[17:46:33.700]                       is.null <- base::is.null
[17:46:33.700]                       muffled <- FALSE
[17:46:33.700]                       if (inherits(cond, "message")) {
[17:46:33.700]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.700]                         if (muffled) 
[17:46:33.700]                           invokeRestart("muffleMessage")
[17:46:33.700]                       }
[17:46:33.700]                       else if (inherits(cond, "warning")) {
[17:46:33.700]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.700]                         if (muffled) 
[17:46:33.700]                           invokeRestart("muffleWarning")
[17:46:33.700]                       }
[17:46:33.700]                       else if (inherits(cond, "condition")) {
[17:46:33.700]                         if (!is.null(pattern)) {
[17:46:33.700]                           computeRestarts <- base::computeRestarts
[17:46:33.700]                           grepl <- base::grepl
[17:46:33.700]                           restarts <- computeRestarts(cond)
[17:46:33.700]                           for (restart in restarts) {
[17:46:33.700]                             name <- restart$name
[17:46:33.700]                             if (is.null(name)) 
[17:46:33.700]                               next
[17:46:33.700]                             if (!grepl(pattern, name)) 
[17:46:33.700]                               next
[17:46:33.700]                             invokeRestart(restart)
[17:46:33.700]                             muffled <- TRUE
[17:46:33.700]                             break
[17:46:33.700]                           }
[17:46:33.700]                         }
[17:46:33.700]                       }
[17:46:33.700]                       invisible(muffled)
[17:46:33.700]                     }
[17:46:33.700]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.700]                   }
[17:46:33.700]                 }
[17:46:33.700]             }
[17:46:33.700]         }))
[17:46:33.700]     }, error = function(ex) {
[17:46:33.700]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.700]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.700]                 ...future.rng), started = ...future.startTime, 
[17:46:33.700]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.700]             version = "1.8"), class = "FutureResult")
[17:46:33.700]     }, finally = {
[17:46:33.700]         if (!identical(...future.workdir, getwd())) 
[17:46:33.700]             setwd(...future.workdir)
[17:46:33.700]         {
[17:46:33.700]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.700]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.700]             }
[17:46:33.700]             base::options(...future.oldOptions)
[17:46:33.700]             if (.Platform$OS.type == "windows") {
[17:46:33.700]                 old_names <- names(...future.oldEnvVars)
[17:46:33.700]                 envs <- base::Sys.getenv()
[17:46:33.700]                 names <- names(envs)
[17:46:33.700]                 common <- intersect(names, old_names)
[17:46:33.700]                 added <- setdiff(names, old_names)
[17:46:33.700]                 removed <- setdiff(old_names, names)
[17:46:33.700]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.700]                   envs[common]]
[17:46:33.700]                 NAMES <- toupper(changed)
[17:46:33.700]                 args <- list()
[17:46:33.700]                 for (kk in seq_along(NAMES)) {
[17:46:33.700]                   name <- changed[[kk]]
[17:46:33.700]                   NAME <- NAMES[[kk]]
[17:46:33.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.700]                     next
[17:46:33.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.700]                 }
[17:46:33.700]                 NAMES <- toupper(added)
[17:46:33.700]                 for (kk in seq_along(NAMES)) {
[17:46:33.700]                   name <- added[[kk]]
[17:46:33.700]                   NAME <- NAMES[[kk]]
[17:46:33.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.700]                     next
[17:46:33.700]                   args[[name]] <- ""
[17:46:33.700]                 }
[17:46:33.700]                 NAMES <- toupper(removed)
[17:46:33.700]                 for (kk in seq_along(NAMES)) {
[17:46:33.700]                   name <- removed[[kk]]
[17:46:33.700]                   NAME <- NAMES[[kk]]
[17:46:33.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.700]                     next
[17:46:33.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.700]                 }
[17:46:33.700]                 if (length(args) > 0) 
[17:46:33.700]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.700]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.700]             }
[17:46:33.700]             else {
[17:46:33.700]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.700]             }
[17:46:33.700]             {
[17:46:33.700]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.700]                   0L) {
[17:46:33.700]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.700]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.700]                   base::options(opts)
[17:46:33.700]                 }
[17:46:33.700]                 {
[17:46:33.700]                   {
[17:46:33.700]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.700]                     NULL
[17:46:33.700]                   }
[17:46:33.700]                   options(future.plan = NULL)
[17:46:33.700]                   if (is.na(NA_character_)) 
[17:46:33.700]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.700]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.700]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.700]                     .init = FALSE)
[17:46:33.700]                 }
[17:46:33.700]             }
[17:46:33.700]         }
[17:46:33.700]     })
[17:46:33.700]     if (TRUE) {
[17:46:33.700]         base::sink(type = "output", split = FALSE)
[17:46:33.700]         if (TRUE) {
[17:46:33.700]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.700]         }
[17:46:33.700]         else {
[17:46:33.700]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.700]         }
[17:46:33.700]         base::close(...future.stdout)
[17:46:33.700]         ...future.stdout <- NULL
[17:46:33.700]     }
[17:46:33.700]     ...future.result$conditions <- ...future.conditions
[17:46:33.700]     ...future.result$finished <- base::Sys.time()
[17:46:33.700]     ...future.result
[17:46:33.700] }
[17:46:33.751] MultisessionFuture started
[17:46:33.751] result() for ClusterFuture ...
[17:46:33.752] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.752] - Validating connection of MultisessionFuture
[17:46:33.784] - received message: FutureResult
[17:46:33.785] - Received FutureResult
[17:46:33.785] - Erased future from FutureRegistry
[17:46:33.785] result() for ClusterFuture ...
[17:46:33.785] - result already collected: FutureResult
[17:46:33.785] result() for ClusterFuture ... done
[17:46:33.785] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:33.785] result() for ClusterFuture ... done
[17:46:33.785] result() for ClusterFuture ...
[17:46:33.785] - result already collected: FutureResult
[17:46:33.785] result() for ClusterFuture ... done
[17:46:33.786] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:46:33.790] plan(): nbrOfWorkers() = 2
[17:46:33.793] getGlobalsAndPackages() ...
[17:46:33.793] 
[17:46:33.793] - globals: [0] <none>
[17:46:33.793] getGlobalsAndPackages() ... DONE
[17:46:33.804] Packages needed by the future expression (n = 0): <none>
[17:46:33.805] Packages needed by future strategies (n = 0): <none>
[17:46:33.805] {
[17:46:33.805]     {
[17:46:33.805]         {
[17:46:33.805]             ...future.startTime <- base::Sys.time()
[17:46:33.805]             {
[17:46:33.805]                 {
[17:46:33.805]                   {
[17:46:33.805]                     {
[17:46:33.805]                       base::local({
[17:46:33.805]                         has_future <- base::requireNamespace("future", 
[17:46:33.805]                           quietly = TRUE)
[17:46:33.805]                         if (has_future) {
[17:46:33.805]                           ns <- base::getNamespace("future")
[17:46:33.805]                           version <- ns[[".package"]][["version"]]
[17:46:33.805]                           if (is.null(version)) 
[17:46:33.805]                             version <- utils::packageVersion("future")
[17:46:33.805]                         }
[17:46:33.805]                         else {
[17:46:33.805]                           version <- NULL
[17:46:33.805]                         }
[17:46:33.805]                         if (!has_future || version < "1.8.0") {
[17:46:33.805]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.805]                             "", base::R.version$version.string), 
[17:46:33.805]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.805]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.805]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.805]                               "release", "version")], collapse = " "), 
[17:46:33.805]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.805]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.805]                             info)
[17:46:33.805]                           info <- base::paste(info, collapse = "; ")
[17:46:33.805]                           if (!has_future) {
[17:46:33.805]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.805]                               info)
[17:46:33.805]                           }
[17:46:33.805]                           else {
[17:46:33.805]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.805]                               info, version)
[17:46:33.805]                           }
[17:46:33.805]                           base::stop(msg)
[17:46:33.805]                         }
[17:46:33.805]                       })
[17:46:33.805]                     }
[17:46:33.805]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.805]                     base::options(mc.cores = 1L)
[17:46:33.805]                   }
[17:46:33.805]                   ...future.strategy.old <- future::plan("list")
[17:46:33.805]                   options(future.plan = NULL)
[17:46:33.805]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.805]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.805]                 }
[17:46:33.805]                 ...future.workdir <- getwd()
[17:46:33.805]             }
[17:46:33.805]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.805]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.805]         }
[17:46:33.805]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.805]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.805]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.805]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.805]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.805]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.805]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.805]             base::names(...future.oldOptions))
[17:46:33.805]     }
[17:46:33.805]     if (FALSE) {
[17:46:33.805]     }
[17:46:33.805]     else {
[17:46:33.805]         if (TRUE) {
[17:46:33.805]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.805]                 open = "w")
[17:46:33.805]         }
[17:46:33.805]         else {
[17:46:33.805]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.805]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.805]         }
[17:46:33.805]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.805]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.805]             base::sink(type = "output", split = FALSE)
[17:46:33.805]             base::close(...future.stdout)
[17:46:33.805]         }, add = TRUE)
[17:46:33.805]     }
[17:46:33.805]     ...future.frame <- base::sys.nframe()
[17:46:33.805]     ...future.conditions <- base::list()
[17:46:33.805]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.805]     if (FALSE) {
[17:46:33.805]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.805]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.805]     }
[17:46:33.805]     ...future.result <- base::tryCatch({
[17:46:33.805]         base::withCallingHandlers({
[17:46:33.805]             ...future.value <- base::withVisible(base::local({
[17:46:33.805]                 ...future.makeSendCondition <- base::local({
[17:46:33.805]                   sendCondition <- NULL
[17:46:33.805]                   function(frame = 1L) {
[17:46:33.805]                     if (is.function(sendCondition)) 
[17:46:33.805]                       return(sendCondition)
[17:46:33.805]                     ns <- getNamespace("parallel")
[17:46:33.805]                     if (exists("sendData", mode = "function", 
[17:46:33.805]                       envir = ns)) {
[17:46:33.805]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.805]                         envir = ns)
[17:46:33.805]                       envir <- sys.frame(frame)
[17:46:33.805]                       master <- NULL
[17:46:33.805]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.805]                         !identical(envir, emptyenv())) {
[17:46:33.805]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.805]                           inherits = FALSE)) {
[17:46:33.805]                           master <- get("master", mode = "list", 
[17:46:33.805]                             envir = envir, inherits = FALSE)
[17:46:33.805]                           if (inherits(master, c("SOCKnode", 
[17:46:33.805]                             "SOCK0node"))) {
[17:46:33.805]                             sendCondition <<- function(cond) {
[17:46:33.805]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.805]                                 success = TRUE)
[17:46:33.805]                               parallel_sendData(master, data)
[17:46:33.805]                             }
[17:46:33.805]                             return(sendCondition)
[17:46:33.805]                           }
[17:46:33.805]                         }
[17:46:33.805]                         frame <- frame + 1L
[17:46:33.805]                         envir <- sys.frame(frame)
[17:46:33.805]                       }
[17:46:33.805]                     }
[17:46:33.805]                     sendCondition <<- function(cond) NULL
[17:46:33.805]                   }
[17:46:33.805]                 })
[17:46:33.805]                 withCallingHandlers({
[17:46:33.805]                   42
[17:46:33.805]                 }, immediateCondition = function(cond) {
[17:46:33.805]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.805]                   sendCondition(cond)
[17:46:33.805]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.805]                   {
[17:46:33.805]                     inherits <- base::inherits
[17:46:33.805]                     invokeRestart <- base::invokeRestart
[17:46:33.805]                     is.null <- base::is.null
[17:46:33.805]                     muffled <- FALSE
[17:46:33.805]                     if (inherits(cond, "message")) {
[17:46:33.805]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.805]                       if (muffled) 
[17:46:33.805]                         invokeRestart("muffleMessage")
[17:46:33.805]                     }
[17:46:33.805]                     else if (inherits(cond, "warning")) {
[17:46:33.805]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.805]                       if (muffled) 
[17:46:33.805]                         invokeRestart("muffleWarning")
[17:46:33.805]                     }
[17:46:33.805]                     else if (inherits(cond, "condition")) {
[17:46:33.805]                       if (!is.null(pattern)) {
[17:46:33.805]                         computeRestarts <- base::computeRestarts
[17:46:33.805]                         grepl <- base::grepl
[17:46:33.805]                         restarts <- computeRestarts(cond)
[17:46:33.805]                         for (restart in restarts) {
[17:46:33.805]                           name <- restart$name
[17:46:33.805]                           if (is.null(name)) 
[17:46:33.805]                             next
[17:46:33.805]                           if (!grepl(pattern, name)) 
[17:46:33.805]                             next
[17:46:33.805]                           invokeRestart(restart)
[17:46:33.805]                           muffled <- TRUE
[17:46:33.805]                           break
[17:46:33.805]                         }
[17:46:33.805]                       }
[17:46:33.805]                     }
[17:46:33.805]                     invisible(muffled)
[17:46:33.805]                   }
[17:46:33.805]                   muffleCondition(cond)
[17:46:33.805]                 })
[17:46:33.805]             }))
[17:46:33.805]             future::FutureResult(value = ...future.value$value, 
[17:46:33.805]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.805]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.805]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.805]                     ...future.globalenv.names))
[17:46:33.805]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.805]         }, condition = base::local({
[17:46:33.805]             c <- base::c
[17:46:33.805]             inherits <- base::inherits
[17:46:33.805]             invokeRestart <- base::invokeRestart
[17:46:33.805]             length <- base::length
[17:46:33.805]             list <- base::list
[17:46:33.805]             seq.int <- base::seq.int
[17:46:33.805]             signalCondition <- base::signalCondition
[17:46:33.805]             sys.calls <- base::sys.calls
[17:46:33.805]             `[[` <- base::`[[`
[17:46:33.805]             `+` <- base::`+`
[17:46:33.805]             `<<-` <- base::`<<-`
[17:46:33.805]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.805]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.805]                   3L)]
[17:46:33.805]             }
[17:46:33.805]             function(cond) {
[17:46:33.805]                 is_error <- inherits(cond, "error")
[17:46:33.805]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.805]                   NULL)
[17:46:33.805]                 if (is_error) {
[17:46:33.805]                   sessionInformation <- function() {
[17:46:33.805]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.805]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.805]                       search = base::search(), system = base::Sys.info())
[17:46:33.805]                   }
[17:46:33.805]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.805]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.805]                     cond$call), session = sessionInformation(), 
[17:46:33.805]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.805]                   signalCondition(cond)
[17:46:33.805]                 }
[17:46:33.805]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.805]                 "immediateCondition"))) {
[17:46:33.805]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.805]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.805]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.805]                   if (TRUE && !signal) {
[17:46:33.805]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.805]                     {
[17:46:33.805]                       inherits <- base::inherits
[17:46:33.805]                       invokeRestart <- base::invokeRestart
[17:46:33.805]                       is.null <- base::is.null
[17:46:33.805]                       muffled <- FALSE
[17:46:33.805]                       if (inherits(cond, "message")) {
[17:46:33.805]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.805]                         if (muffled) 
[17:46:33.805]                           invokeRestart("muffleMessage")
[17:46:33.805]                       }
[17:46:33.805]                       else if (inherits(cond, "warning")) {
[17:46:33.805]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.805]                         if (muffled) 
[17:46:33.805]                           invokeRestart("muffleWarning")
[17:46:33.805]                       }
[17:46:33.805]                       else if (inherits(cond, "condition")) {
[17:46:33.805]                         if (!is.null(pattern)) {
[17:46:33.805]                           computeRestarts <- base::computeRestarts
[17:46:33.805]                           grepl <- base::grepl
[17:46:33.805]                           restarts <- computeRestarts(cond)
[17:46:33.805]                           for (restart in restarts) {
[17:46:33.805]                             name <- restart$name
[17:46:33.805]                             if (is.null(name)) 
[17:46:33.805]                               next
[17:46:33.805]                             if (!grepl(pattern, name)) 
[17:46:33.805]                               next
[17:46:33.805]                             invokeRestart(restart)
[17:46:33.805]                             muffled <- TRUE
[17:46:33.805]                             break
[17:46:33.805]                           }
[17:46:33.805]                         }
[17:46:33.805]                       }
[17:46:33.805]                       invisible(muffled)
[17:46:33.805]                     }
[17:46:33.805]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.805]                   }
[17:46:33.805]                 }
[17:46:33.805]                 else {
[17:46:33.805]                   if (TRUE) {
[17:46:33.805]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.805]                     {
[17:46:33.805]                       inherits <- base::inherits
[17:46:33.805]                       invokeRestart <- base::invokeRestart
[17:46:33.805]                       is.null <- base::is.null
[17:46:33.805]                       muffled <- FALSE
[17:46:33.805]                       if (inherits(cond, "message")) {
[17:46:33.805]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.805]                         if (muffled) 
[17:46:33.805]                           invokeRestart("muffleMessage")
[17:46:33.805]                       }
[17:46:33.805]                       else if (inherits(cond, "warning")) {
[17:46:33.805]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.805]                         if (muffled) 
[17:46:33.805]                           invokeRestart("muffleWarning")
[17:46:33.805]                       }
[17:46:33.805]                       else if (inherits(cond, "condition")) {
[17:46:33.805]                         if (!is.null(pattern)) {
[17:46:33.805]                           computeRestarts <- base::computeRestarts
[17:46:33.805]                           grepl <- base::grepl
[17:46:33.805]                           restarts <- computeRestarts(cond)
[17:46:33.805]                           for (restart in restarts) {
[17:46:33.805]                             name <- restart$name
[17:46:33.805]                             if (is.null(name)) 
[17:46:33.805]                               next
[17:46:33.805]                             if (!grepl(pattern, name)) 
[17:46:33.805]                               next
[17:46:33.805]                             invokeRestart(restart)
[17:46:33.805]                             muffled <- TRUE
[17:46:33.805]                             break
[17:46:33.805]                           }
[17:46:33.805]                         }
[17:46:33.805]                       }
[17:46:33.805]                       invisible(muffled)
[17:46:33.805]                     }
[17:46:33.805]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.805]                   }
[17:46:33.805]                 }
[17:46:33.805]             }
[17:46:33.805]         }))
[17:46:33.805]     }, error = function(ex) {
[17:46:33.805]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.805]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.805]                 ...future.rng), started = ...future.startTime, 
[17:46:33.805]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.805]             version = "1.8"), class = "FutureResult")
[17:46:33.805]     }, finally = {
[17:46:33.805]         if (!identical(...future.workdir, getwd())) 
[17:46:33.805]             setwd(...future.workdir)
[17:46:33.805]         {
[17:46:33.805]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.805]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.805]             }
[17:46:33.805]             base::options(...future.oldOptions)
[17:46:33.805]             if (.Platform$OS.type == "windows") {
[17:46:33.805]                 old_names <- names(...future.oldEnvVars)
[17:46:33.805]                 envs <- base::Sys.getenv()
[17:46:33.805]                 names <- names(envs)
[17:46:33.805]                 common <- intersect(names, old_names)
[17:46:33.805]                 added <- setdiff(names, old_names)
[17:46:33.805]                 removed <- setdiff(old_names, names)
[17:46:33.805]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.805]                   envs[common]]
[17:46:33.805]                 NAMES <- toupper(changed)
[17:46:33.805]                 args <- list()
[17:46:33.805]                 for (kk in seq_along(NAMES)) {
[17:46:33.805]                   name <- changed[[kk]]
[17:46:33.805]                   NAME <- NAMES[[kk]]
[17:46:33.805]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.805]                     next
[17:46:33.805]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.805]                 }
[17:46:33.805]                 NAMES <- toupper(added)
[17:46:33.805]                 for (kk in seq_along(NAMES)) {
[17:46:33.805]                   name <- added[[kk]]
[17:46:33.805]                   NAME <- NAMES[[kk]]
[17:46:33.805]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.805]                     next
[17:46:33.805]                   args[[name]] <- ""
[17:46:33.805]                 }
[17:46:33.805]                 NAMES <- toupper(removed)
[17:46:33.805]                 for (kk in seq_along(NAMES)) {
[17:46:33.805]                   name <- removed[[kk]]
[17:46:33.805]                   NAME <- NAMES[[kk]]
[17:46:33.805]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.805]                     next
[17:46:33.805]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.805]                 }
[17:46:33.805]                 if (length(args) > 0) 
[17:46:33.805]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.805]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.805]             }
[17:46:33.805]             else {
[17:46:33.805]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.805]             }
[17:46:33.805]             {
[17:46:33.805]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.805]                   0L) {
[17:46:33.805]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.805]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.805]                   base::options(opts)
[17:46:33.805]                 }
[17:46:33.805]                 {
[17:46:33.805]                   {
[17:46:33.805]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.805]                     NULL
[17:46:33.805]                   }
[17:46:33.805]                   options(future.plan = NULL)
[17:46:33.805]                   if (is.na(NA_character_)) 
[17:46:33.805]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.805]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.805]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.805]                     .init = FALSE)
[17:46:33.805]                 }
[17:46:33.805]             }
[17:46:33.805]         }
[17:46:33.805]     })
[17:46:33.805]     if (TRUE) {
[17:46:33.805]         base::sink(type = "output", split = FALSE)
[17:46:33.805]         if (TRUE) {
[17:46:33.805]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.805]         }
[17:46:33.805]         else {
[17:46:33.805]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.805]         }
[17:46:33.805]         base::close(...future.stdout)
[17:46:33.805]         ...future.stdout <- NULL
[17:46:33.805]     }
[17:46:33.805]     ...future.result$conditions <- ...future.conditions
[17:46:33.805]     ...future.result$finished <- base::Sys.time()
[17:46:33.805]     ...future.result
[17:46:33.805] }
[17:46:33.808] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.810] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.810] - Validating connection of MultisessionFuture
[17:46:33.810] - received message: FutureResult
[17:46:33.810] - Received FutureResult
[17:46:33.810] - Erased future from FutureRegistry
[17:46:33.811] result() for ClusterFuture ...
[17:46:33.811] - result already collected: FutureResult
[17:46:33.811] result() for ClusterFuture ... done
[17:46:33.811] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.811] result() for ClusterFuture ...
[17:46:33.811] - result already collected: FutureResult
[17:46:33.811] result() for ClusterFuture ... done
[17:46:33.812] result() for ClusterFuture ...
[17:46:33.812] - result already collected: FutureResult
[17:46:33.812] result() for ClusterFuture ... done
[17:46:33.812] getGlobalsAndPackages() ...
[17:46:33.812] Searching for globals...
[17:46:33.812] 
[17:46:33.813] Searching for globals ... DONE
[17:46:33.813] - globals: [0] <none>
[17:46:33.813] getGlobalsAndPackages() ... DONE
[17:46:33.813] run() for ‘Future’ ...
[17:46:33.813] - state: ‘created’
[17:46:33.813] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.827] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.828] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:33.828]   - Field: ‘node’
[17:46:33.828]   - Field: ‘label’
[17:46:33.828]   - Field: ‘local’
[17:46:33.828]   - Field: ‘owner’
[17:46:33.828]   - Field: ‘envir’
[17:46:33.828]   - Field: ‘workers’
[17:46:33.828]   - Field: ‘packages’
[17:46:33.828]   - Field: ‘gc’
[17:46:33.828]   - Field: ‘conditions’
[17:46:33.829]   - Field: ‘persistent’
[17:46:33.829]   - Field: ‘expr’
[17:46:33.829]   - Field: ‘uuid’
[17:46:33.829]   - Field: ‘seed’
[17:46:33.829]   - Field: ‘version’
[17:46:33.829]   - Field: ‘result’
[17:46:33.829]   - Field: ‘asynchronous’
[17:46:33.829]   - Field: ‘calls’
[17:46:33.829]   - Field: ‘globals’
[17:46:33.830]   - Field: ‘stdout’
[17:46:33.830]   - Field: ‘earlySignal’
[17:46:33.830]   - Field: ‘lazy’
[17:46:33.830]   - Field: ‘state’
[17:46:33.830] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:33.830] - Launch lazy future ...
[17:46:33.830] Packages needed by the future expression (n = 0): <none>
[17:46:33.831] Packages needed by future strategies (n = 0): <none>
[17:46:33.831] {
[17:46:33.831]     {
[17:46:33.831]         {
[17:46:33.831]             ...future.startTime <- base::Sys.time()
[17:46:33.831]             {
[17:46:33.831]                 {
[17:46:33.831]                   {
[17:46:33.831]                     {
[17:46:33.831]                       base::local({
[17:46:33.831]                         has_future <- base::requireNamespace("future", 
[17:46:33.831]                           quietly = TRUE)
[17:46:33.831]                         if (has_future) {
[17:46:33.831]                           ns <- base::getNamespace("future")
[17:46:33.831]                           version <- ns[[".package"]][["version"]]
[17:46:33.831]                           if (is.null(version)) 
[17:46:33.831]                             version <- utils::packageVersion("future")
[17:46:33.831]                         }
[17:46:33.831]                         else {
[17:46:33.831]                           version <- NULL
[17:46:33.831]                         }
[17:46:33.831]                         if (!has_future || version < "1.8.0") {
[17:46:33.831]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.831]                             "", base::R.version$version.string), 
[17:46:33.831]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.831]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.831]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.831]                               "release", "version")], collapse = " "), 
[17:46:33.831]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.831]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.831]                             info)
[17:46:33.831]                           info <- base::paste(info, collapse = "; ")
[17:46:33.831]                           if (!has_future) {
[17:46:33.831]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.831]                               info)
[17:46:33.831]                           }
[17:46:33.831]                           else {
[17:46:33.831]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.831]                               info, version)
[17:46:33.831]                           }
[17:46:33.831]                           base::stop(msg)
[17:46:33.831]                         }
[17:46:33.831]                       })
[17:46:33.831]                     }
[17:46:33.831]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.831]                     base::options(mc.cores = 1L)
[17:46:33.831]                   }
[17:46:33.831]                   ...future.strategy.old <- future::plan("list")
[17:46:33.831]                   options(future.plan = NULL)
[17:46:33.831]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.831]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.831]                 }
[17:46:33.831]                 ...future.workdir <- getwd()
[17:46:33.831]             }
[17:46:33.831]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.831]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.831]         }
[17:46:33.831]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.831]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.831]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.831]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.831]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.831]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.831]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.831]             base::names(...future.oldOptions))
[17:46:33.831]     }
[17:46:33.831]     if (FALSE) {
[17:46:33.831]     }
[17:46:33.831]     else {
[17:46:33.831]         if (TRUE) {
[17:46:33.831]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.831]                 open = "w")
[17:46:33.831]         }
[17:46:33.831]         else {
[17:46:33.831]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.831]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.831]         }
[17:46:33.831]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.831]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.831]             base::sink(type = "output", split = FALSE)
[17:46:33.831]             base::close(...future.stdout)
[17:46:33.831]         }, add = TRUE)
[17:46:33.831]     }
[17:46:33.831]     ...future.frame <- base::sys.nframe()
[17:46:33.831]     ...future.conditions <- base::list()
[17:46:33.831]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.831]     if (FALSE) {
[17:46:33.831]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.831]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.831]     }
[17:46:33.831]     ...future.result <- base::tryCatch({
[17:46:33.831]         base::withCallingHandlers({
[17:46:33.831]             ...future.value <- base::withVisible(base::local({
[17:46:33.831]                 ...future.makeSendCondition <- base::local({
[17:46:33.831]                   sendCondition <- NULL
[17:46:33.831]                   function(frame = 1L) {
[17:46:33.831]                     if (is.function(sendCondition)) 
[17:46:33.831]                       return(sendCondition)
[17:46:33.831]                     ns <- getNamespace("parallel")
[17:46:33.831]                     if (exists("sendData", mode = "function", 
[17:46:33.831]                       envir = ns)) {
[17:46:33.831]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.831]                         envir = ns)
[17:46:33.831]                       envir <- sys.frame(frame)
[17:46:33.831]                       master <- NULL
[17:46:33.831]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.831]                         !identical(envir, emptyenv())) {
[17:46:33.831]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.831]                           inherits = FALSE)) {
[17:46:33.831]                           master <- get("master", mode = "list", 
[17:46:33.831]                             envir = envir, inherits = FALSE)
[17:46:33.831]                           if (inherits(master, c("SOCKnode", 
[17:46:33.831]                             "SOCK0node"))) {
[17:46:33.831]                             sendCondition <<- function(cond) {
[17:46:33.831]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.831]                                 success = TRUE)
[17:46:33.831]                               parallel_sendData(master, data)
[17:46:33.831]                             }
[17:46:33.831]                             return(sendCondition)
[17:46:33.831]                           }
[17:46:33.831]                         }
[17:46:33.831]                         frame <- frame + 1L
[17:46:33.831]                         envir <- sys.frame(frame)
[17:46:33.831]                       }
[17:46:33.831]                     }
[17:46:33.831]                     sendCondition <<- function(cond) NULL
[17:46:33.831]                   }
[17:46:33.831]                 })
[17:46:33.831]                 withCallingHandlers({
[17:46:33.831]                   42
[17:46:33.831]                 }, immediateCondition = function(cond) {
[17:46:33.831]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.831]                   sendCondition(cond)
[17:46:33.831]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.831]                   {
[17:46:33.831]                     inherits <- base::inherits
[17:46:33.831]                     invokeRestart <- base::invokeRestart
[17:46:33.831]                     is.null <- base::is.null
[17:46:33.831]                     muffled <- FALSE
[17:46:33.831]                     if (inherits(cond, "message")) {
[17:46:33.831]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.831]                       if (muffled) 
[17:46:33.831]                         invokeRestart("muffleMessage")
[17:46:33.831]                     }
[17:46:33.831]                     else if (inherits(cond, "warning")) {
[17:46:33.831]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.831]                       if (muffled) 
[17:46:33.831]                         invokeRestart("muffleWarning")
[17:46:33.831]                     }
[17:46:33.831]                     else if (inherits(cond, "condition")) {
[17:46:33.831]                       if (!is.null(pattern)) {
[17:46:33.831]                         computeRestarts <- base::computeRestarts
[17:46:33.831]                         grepl <- base::grepl
[17:46:33.831]                         restarts <- computeRestarts(cond)
[17:46:33.831]                         for (restart in restarts) {
[17:46:33.831]                           name <- restart$name
[17:46:33.831]                           if (is.null(name)) 
[17:46:33.831]                             next
[17:46:33.831]                           if (!grepl(pattern, name)) 
[17:46:33.831]                             next
[17:46:33.831]                           invokeRestart(restart)
[17:46:33.831]                           muffled <- TRUE
[17:46:33.831]                           break
[17:46:33.831]                         }
[17:46:33.831]                       }
[17:46:33.831]                     }
[17:46:33.831]                     invisible(muffled)
[17:46:33.831]                   }
[17:46:33.831]                   muffleCondition(cond)
[17:46:33.831]                 })
[17:46:33.831]             }))
[17:46:33.831]             future::FutureResult(value = ...future.value$value, 
[17:46:33.831]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.831]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.831]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.831]                     ...future.globalenv.names))
[17:46:33.831]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.831]         }, condition = base::local({
[17:46:33.831]             c <- base::c
[17:46:33.831]             inherits <- base::inherits
[17:46:33.831]             invokeRestart <- base::invokeRestart
[17:46:33.831]             length <- base::length
[17:46:33.831]             list <- base::list
[17:46:33.831]             seq.int <- base::seq.int
[17:46:33.831]             signalCondition <- base::signalCondition
[17:46:33.831]             sys.calls <- base::sys.calls
[17:46:33.831]             `[[` <- base::`[[`
[17:46:33.831]             `+` <- base::`+`
[17:46:33.831]             `<<-` <- base::`<<-`
[17:46:33.831]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.831]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.831]                   3L)]
[17:46:33.831]             }
[17:46:33.831]             function(cond) {
[17:46:33.831]                 is_error <- inherits(cond, "error")
[17:46:33.831]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.831]                   NULL)
[17:46:33.831]                 if (is_error) {
[17:46:33.831]                   sessionInformation <- function() {
[17:46:33.831]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.831]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.831]                       search = base::search(), system = base::Sys.info())
[17:46:33.831]                   }
[17:46:33.831]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.831]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.831]                     cond$call), session = sessionInformation(), 
[17:46:33.831]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.831]                   signalCondition(cond)
[17:46:33.831]                 }
[17:46:33.831]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.831]                 "immediateCondition"))) {
[17:46:33.831]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.831]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.831]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.831]                   if (TRUE && !signal) {
[17:46:33.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.831]                     {
[17:46:33.831]                       inherits <- base::inherits
[17:46:33.831]                       invokeRestart <- base::invokeRestart
[17:46:33.831]                       is.null <- base::is.null
[17:46:33.831]                       muffled <- FALSE
[17:46:33.831]                       if (inherits(cond, "message")) {
[17:46:33.831]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.831]                         if (muffled) 
[17:46:33.831]                           invokeRestart("muffleMessage")
[17:46:33.831]                       }
[17:46:33.831]                       else if (inherits(cond, "warning")) {
[17:46:33.831]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.831]                         if (muffled) 
[17:46:33.831]                           invokeRestart("muffleWarning")
[17:46:33.831]                       }
[17:46:33.831]                       else if (inherits(cond, "condition")) {
[17:46:33.831]                         if (!is.null(pattern)) {
[17:46:33.831]                           computeRestarts <- base::computeRestarts
[17:46:33.831]                           grepl <- base::grepl
[17:46:33.831]                           restarts <- computeRestarts(cond)
[17:46:33.831]                           for (restart in restarts) {
[17:46:33.831]                             name <- restart$name
[17:46:33.831]                             if (is.null(name)) 
[17:46:33.831]                               next
[17:46:33.831]                             if (!grepl(pattern, name)) 
[17:46:33.831]                               next
[17:46:33.831]                             invokeRestart(restart)
[17:46:33.831]                             muffled <- TRUE
[17:46:33.831]                             break
[17:46:33.831]                           }
[17:46:33.831]                         }
[17:46:33.831]                       }
[17:46:33.831]                       invisible(muffled)
[17:46:33.831]                     }
[17:46:33.831]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.831]                   }
[17:46:33.831]                 }
[17:46:33.831]                 else {
[17:46:33.831]                   if (TRUE) {
[17:46:33.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.831]                     {
[17:46:33.831]                       inherits <- base::inherits
[17:46:33.831]                       invokeRestart <- base::invokeRestart
[17:46:33.831]                       is.null <- base::is.null
[17:46:33.831]                       muffled <- FALSE
[17:46:33.831]                       if (inherits(cond, "message")) {
[17:46:33.831]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.831]                         if (muffled) 
[17:46:33.831]                           invokeRestart("muffleMessage")
[17:46:33.831]                       }
[17:46:33.831]                       else if (inherits(cond, "warning")) {
[17:46:33.831]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.831]                         if (muffled) 
[17:46:33.831]                           invokeRestart("muffleWarning")
[17:46:33.831]                       }
[17:46:33.831]                       else if (inherits(cond, "condition")) {
[17:46:33.831]                         if (!is.null(pattern)) {
[17:46:33.831]                           computeRestarts <- base::computeRestarts
[17:46:33.831]                           grepl <- base::grepl
[17:46:33.831]                           restarts <- computeRestarts(cond)
[17:46:33.831]                           for (restart in restarts) {
[17:46:33.831]                             name <- restart$name
[17:46:33.831]                             if (is.null(name)) 
[17:46:33.831]                               next
[17:46:33.831]                             if (!grepl(pattern, name)) 
[17:46:33.831]                               next
[17:46:33.831]                             invokeRestart(restart)
[17:46:33.831]                             muffled <- TRUE
[17:46:33.831]                             break
[17:46:33.831]                           }
[17:46:33.831]                         }
[17:46:33.831]                       }
[17:46:33.831]                       invisible(muffled)
[17:46:33.831]                     }
[17:46:33.831]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.831]                   }
[17:46:33.831]                 }
[17:46:33.831]             }
[17:46:33.831]         }))
[17:46:33.831]     }, error = function(ex) {
[17:46:33.831]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.831]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.831]                 ...future.rng), started = ...future.startTime, 
[17:46:33.831]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.831]             version = "1.8"), class = "FutureResult")
[17:46:33.831]     }, finally = {
[17:46:33.831]         if (!identical(...future.workdir, getwd())) 
[17:46:33.831]             setwd(...future.workdir)
[17:46:33.831]         {
[17:46:33.831]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.831]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.831]             }
[17:46:33.831]             base::options(...future.oldOptions)
[17:46:33.831]             if (.Platform$OS.type == "windows") {
[17:46:33.831]                 old_names <- names(...future.oldEnvVars)
[17:46:33.831]                 envs <- base::Sys.getenv()
[17:46:33.831]                 names <- names(envs)
[17:46:33.831]                 common <- intersect(names, old_names)
[17:46:33.831]                 added <- setdiff(names, old_names)
[17:46:33.831]                 removed <- setdiff(old_names, names)
[17:46:33.831]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.831]                   envs[common]]
[17:46:33.831]                 NAMES <- toupper(changed)
[17:46:33.831]                 args <- list()
[17:46:33.831]                 for (kk in seq_along(NAMES)) {
[17:46:33.831]                   name <- changed[[kk]]
[17:46:33.831]                   NAME <- NAMES[[kk]]
[17:46:33.831]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.831]                     next
[17:46:33.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.831]                 }
[17:46:33.831]                 NAMES <- toupper(added)
[17:46:33.831]                 for (kk in seq_along(NAMES)) {
[17:46:33.831]                   name <- added[[kk]]
[17:46:33.831]                   NAME <- NAMES[[kk]]
[17:46:33.831]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.831]                     next
[17:46:33.831]                   args[[name]] <- ""
[17:46:33.831]                 }
[17:46:33.831]                 NAMES <- toupper(removed)
[17:46:33.831]                 for (kk in seq_along(NAMES)) {
[17:46:33.831]                   name <- removed[[kk]]
[17:46:33.831]                   NAME <- NAMES[[kk]]
[17:46:33.831]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.831]                     next
[17:46:33.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.831]                 }
[17:46:33.831]                 if (length(args) > 0) 
[17:46:33.831]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.831]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.831]             }
[17:46:33.831]             else {
[17:46:33.831]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.831]             }
[17:46:33.831]             {
[17:46:33.831]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.831]                   0L) {
[17:46:33.831]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.831]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.831]                   base::options(opts)
[17:46:33.831]                 }
[17:46:33.831]                 {
[17:46:33.831]                   {
[17:46:33.831]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.831]                     NULL
[17:46:33.831]                   }
[17:46:33.831]                   options(future.plan = NULL)
[17:46:33.831]                   if (is.na(NA_character_)) 
[17:46:33.831]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.831]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.831]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.831]                     .init = FALSE)
[17:46:33.831]                 }
[17:46:33.831]             }
[17:46:33.831]         }
[17:46:33.831]     })
[17:46:33.831]     if (TRUE) {
[17:46:33.831]         base::sink(type = "output", split = FALSE)
[17:46:33.831]         if (TRUE) {
[17:46:33.831]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.831]         }
[17:46:33.831]         else {
[17:46:33.831]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.831]         }
[17:46:33.831]         base::close(...future.stdout)
[17:46:33.831]         ...future.stdout <- NULL
[17:46:33.831]     }
[17:46:33.831]     ...future.result$conditions <- ...future.conditions
[17:46:33.831]     ...future.result$finished <- base::Sys.time()
[17:46:33.831]     ...future.result
[17:46:33.831] }
[17:46:33.834] MultisessionFuture started
[17:46:33.834] - Launch lazy future ... done
[17:46:33.835] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.839] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.839] - Validating connection of MultisessionFuture
[17:46:33.840] - received message: FutureResult
[17:46:33.840] - Received FutureResult
[17:46:33.840] - Erased future from FutureRegistry
[17:46:33.840] result() for ClusterFuture ...
[17:46:33.840] - result already collected: FutureResult
[17:46:33.840] result() for ClusterFuture ... done
[17:46:33.840] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.841] result() for ClusterFuture ...
[17:46:33.841] - result already collected: FutureResult
[17:46:33.841] result() for ClusterFuture ... done
[17:46:33.841] result() for ClusterFuture ...
[17:46:33.841] - result already collected: FutureResult
[17:46:33.841] result() for ClusterFuture ... done
[17:46:33.841] getGlobalsAndPackages() ...
[17:46:33.842] Searching for globals...
[17:46:33.842] - globals found: [1] ‘{’
[17:46:33.842] Searching for globals ... DONE
[17:46:33.843] Resolving globals: FALSE
[17:46:33.843] 
[17:46:33.843] 
[17:46:33.843] getGlobalsAndPackages() ... DONE
[17:46:33.843] run() for ‘Future’ ...
[17:46:33.844] - state: ‘created’
[17:46:33.844] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.858] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.858] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:33.858]   - Field: ‘node’
[17:46:33.858]   - Field: ‘label’
[17:46:33.858]   - Field: ‘local’
[17:46:33.859]   - Field: ‘owner’
[17:46:33.859]   - Field: ‘envir’
[17:46:33.859]   - Field: ‘workers’
[17:46:33.859]   - Field: ‘packages’
[17:46:33.859]   - Field: ‘gc’
[17:46:33.859]   - Field: ‘conditions’
[17:46:33.859]   - Field: ‘persistent’
[17:46:33.859]   - Field: ‘expr’
[17:46:33.859]   - Field: ‘uuid’
[17:46:33.860]   - Field: ‘seed’
[17:46:33.860]   - Field: ‘version’
[17:46:33.860]   - Field: ‘result’
[17:46:33.860]   - Field: ‘asynchronous’
[17:46:33.860]   - Field: ‘calls’
[17:46:33.860]   - Field: ‘globals’
[17:46:33.860]   - Field: ‘stdout’
[17:46:33.860]   - Field: ‘earlySignal’
[17:46:33.861]   - Field: ‘lazy’
[17:46:33.861]   - Field: ‘state’
[17:46:33.861] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:33.861] - Launch lazy future ...
[17:46:33.861] Packages needed by the future expression (n = 0): <none>
[17:46:33.861] Packages needed by future strategies (n = 0): <none>
[17:46:33.862] {
[17:46:33.862]     {
[17:46:33.862]         {
[17:46:33.862]             ...future.startTime <- base::Sys.time()
[17:46:33.862]             {
[17:46:33.862]                 {
[17:46:33.862]                   {
[17:46:33.862]                     {
[17:46:33.862]                       base::local({
[17:46:33.862]                         has_future <- base::requireNamespace("future", 
[17:46:33.862]                           quietly = TRUE)
[17:46:33.862]                         if (has_future) {
[17:46:33.862]                           ns <- base::getNamespace("future")
[17:46:33.862]                           version <- ns[[".package"]][["version"]]
[17:46:33.862]                           if (is.null(version)) 
[17:46:33.862]                             version <- utils::packageVersion("future")
[17:46:33.862]                         }
[17:46:33.862]                         else {
[17:46:33.862]                           version <- NULL
[17:46:33.862]                         }
[17:46:33.862]                         if (!has_future || version < "1.8.0") {
[17:46:33.862]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.862]                             "", base::R.version$version.string), 
[17:46:33.862]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.862]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.862]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.862]                               "release", "version")], collapse = " "), 
[17:46:33.862]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.862]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.862]                             info)
[17:46:33.862]                           info <- base::paste(info, collapse = "; ")
[17:46:33.862]                           if (!has_future) {
[17:46:33.862]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.862]                               info)
[17:46:33.862]                           }
[17:46:33.862]                           else {
[17:46:33.862]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.862]                               info, version)
[17:46:33.862]                           }
[17:46:33.862]                           base::stop(msg)
[17:46:33.862]                         }
[17:46:33.862]                       })
[17:46:33.862]                     }
[17:46:33.862]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.862]                     base::options(mc.cores = 1L)
[17:46:33.862]                   }
[17:46:33.862]                   ...future.strategy.old <- future::plan("list")
[17:46:33.862]                   options(future.plan = NULL)
[17:46:33.862]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.862]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.862]                 }
[17:46:33.862]                 ...future.workdir <- getwd()
[17:46:33.862]             }
[17:46:33.862]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.862]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.862]         }
[17:46:33.862]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.862]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.862]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.862]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.862]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.862]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.862]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.862]             base::names(...future.oldOptions))
[17:46:33.862]     }
[17:46:33.862]     if (FALSE) {
[17:46:33.862]     }
[17:46:33.862]     else {
[17:46:33.862]         if (TRUE) {
[17:46:33.862]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.862]                 open = "w")
[17:46:33.862]         }
[17:46:33.862]         else {
[17:46:33.862]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.862]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.862]         }
[17:46:33.862]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.862]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.862]             base::sink(type = "output", split = FALSE)
[17:46:33.862]             base::close(...future.stdout)
[17:46:33.862]         }, add = TRUE)
[17:46:33.862]     }
[17:46:33.862]     ...future.frame <- base::sys.nframe()
[17:46:33.862]     ...future.conditions <- base::list()
[17:46:33.862]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.862]     if (FALSE) {
[17:46:33.862]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.862]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.862]     }
[17:46:33.862]     ...future.result <- base::tryCatch({
[17:46:33.862]         base::withCallingHandlers({
[17:46:33.862]             ...future.value <- base::withVisible(base::local({
[17:46:33.862]                 ...future.makeSendCondition <- base::local({
[17:46:33.862]                   sendCondition <- NULL
[17:46:33.862]                   function(frame = 1L) {
[17:46:33.862]                     if (is.function(sendCondition)) 
[17:46:33.862]                       return(sendCondition)
[17:46:33.862]                     ns <- getNamespace("parallel")
[17:46:33.862]                     if (exists("sendData", mode = "function", 
[17:46:33.862]                       envir = ns)) {
[17:46:33.862]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.862]                         envir = ns)
[17:46:33.862]                       envir <- sys.frame(frame)
[17:46:33.862]                       master <- NULL
[17:46:33.862]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.862]                         !identical(envir, emptyenv())) {
[17:46:33.862]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.862]                           inherits = FALSE)) {
[17:46:33.862]                           master <- get("master", mode = "list", 
[17:46:33.862]                             envir = envir, inherits = FALSE)
[17:46:33.862]                           if (inherits(master, c("SOCKnode", 
[17:46:33.862]                             "SOCK0node"))) {
[17:46:33.862]                             sendCondition <<- function(cond) {
[17:46:33.862]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.862]                                 success = TRUE)
[17:46:33.862]                               parallel_sendData(master, data)
[17:46:33.862]                             }
[17:46:33.862]                             return(sendCondition)
[17:46:33.862]                           }
[17:46:33.862]                         }
[17:46:33.862]                         frame <- frame + 1L
[17:46:33.862]                         envir <- sys.frame(frame)
[17:46:33.862]                       }
[17:46:33.862]                     }
[17:46:33.862]                     sendCondition <<- function(cond) NULL
[17:46:33.862]                   }
[17:46:33.862]                 })
[17:46:33.862]                 withCallingHandlers({
[17:46:33.862]                   {
[17:46:33.862]                     42
[17:46:33.862]                   }
[17:46:33.862]                 }, immediateCondition = function(cond) {
[17:46:33.862]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.862]                   sendCondition(cond)
[17:46:33.862]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.862]                   {
[17:46:33.862]                     inherits <- base::inherits
[17:46:33.862]                     invokeRestart <- base::invokeRestart
[17:46:33.862]                     is.null <- base::is.null
[17:46:33.862]                     muffled <- FALSE
[17:46:33.862]                     if (inherits(cond, "message")) {
[17:46:33.862]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.862]                       if (muffled) 
[17:46:33.862]                         invokeRestart("muffleMessage")
[17:46:33.862]                     }
[17:46:33.862]                     else if (inherits(cond, "warning")) {
[17:46:33.862]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.862]                       if (muffled) 
[17:46:33.862]                         invokeRestart("muffleWarning")
[17:46:33.862]                     }
[17:46:33.862]                     else if (inherits(cond, "condition")) {
[17:46:33.862]                       if (!is.null(pattern)) {
[17:46:33.862]                         computeRestarts <- base::computeRestarts
[17:46:33.862]                         grepl <- base::grepl
[17:46:33.862]                         restarts <- computeRestarts(cond)
[17:46:33.862]                         for (restart in restarts) {
[17:46:33.862]                           name <- restart$name
[17:46:33.862]                           if (is.null(name)) 
[17:46:33.862]                             next
[17:46:33.862]                           if (!grepl(pattern, name)) 
[17:46:33.862]                             next
[17:46:33.862]                           invokeRestart(restart)
[17:46:33.862]                           muffled <- TRUE
[17:46:33.862]                           break
[17:46:33.862]                         }
[17:46:33.862]                       }
[17:46:33.862]                     }
[17:46:33.862]                     invisible(muffled)
[17:46:33.862]                   }
[17:46:33.862]                   muffleCondition(cond)
[17:46:33.862]                 })
[17:46:33.862]             }))
[17:46:33.862]             future::FutureResult(value = ...future.value$value, 
[17:46:33.862]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.862]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.862]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.862]                     ...future.globalenv.names))
[17:46:33.862]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.862]         }, condition = base::local({
[17:46:33.862]             c <- base::c
[17:46:33.862]             inherits <- base::inherits
[17:46:33.862]             invokeRestart <- base::invokeRestart
[17:46:33.862]             length <- base::length
[17:46:33.862]             list <- base::list
[17:46:33.862]             seq.int <- base::seq.int
[17:46:33.862]             signalCondition <- base::signalCondition
[17:46:33.862]             sys.calls <- base::sys.calls
[17:46:33.862]             `[[` <- base::`[[`
[17:46:33.862]             `+` <- base::`+`
[17:46:33.862]             `<<-` <- base::`<<-`
[17:46:33.862]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.862]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.862]                   3L)]
[17:46:33.862]             }
[17:46:33.862]             function(cond) {
[17:46:33.862]                 is_error <- inherits(cond, "error")
[17:46:33.862]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.862]                   NULL)
[17:46:33.862]                 if (is_error) {
[17:46:33.862]                   sessionInformation <- function() {
[17:46:33.862]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.862]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.862]                       search = base::search(), system = base::Sys.info())
[17:46:33.862]                   }
[17:46:33.862]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.862]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.862]                     cond$call), session = sessionInformation(), 
[17:46:33.862]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.862]                   signalCondition(cond)
[17:46:33.862]                 }
[17:46:33.862]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.862]                 "immediateCondition"))) {
[17:46:33.862]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.862]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.862]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.862]                   if (TRUE && !signal) {
[17:46:33.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.862]                     {
[17:46:33.862]                       inherits <- base::inherits
[17:46:33.862]                       invokeRestart <- base::invokeRestart
[17:46:33.862]                       is.null <- base::is.null
[17:46:33.862]                       muffled <- FALSE
[17:46:33.862]                       if (inherits(cond, "message")) {
[17:46:33.862]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.862]                         if (muffled) 
[17:46:33.862]                           invokeRestart("muffleMessage")
[17:46:33.862]                       }
[17:46:33.862]                       else if (inherits(cond, "warning")) {
[17:46:33.862]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.862]                         if (muffled) 
[17:46:33.862]                           invokeRestart("muffleWarning")
[17:46:33.862]                       }
[17:46:33.862]                       else if (inherits(cond, "condition")) {
[17:46:33.862]                         if (!is.null(pattern)) {
[17:46:33.862]                           computeRestarts <- base::computeRestarts
[17:46:33.862]                           grepl <- base::grepl
[17:46:33.862]                           restarts <- computeRestarts(cond)
[17:46:33.862]                           for (restart in restarts) {
[17:46:33.862]                             name <- restart$name
[17:46:33.862]                             if (is.null(name)) 
[17:46:33.862]                               next
[17:46:33.862]                             if (!grepl(pattern, name)) 
[17:46:33.862]                               next
[17:46:33.862]                             invokeRestart(restart)
[17:46:33.862]                             muffled <- TRUE
[17:46:33.862]                             break
[17:46:33.862]                           }
[17:46:33.862]                         }
[17:46:33.862]                       }
[17:46:33.862]                       invisible(muffled)
[17:46:33.862]                     }
[17:46:33.862]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.862]                   }
[17:46:33.862]                 }
[17:46:33.862]                 else {
[17:46:33.862]                   if (TRUE) {
[17:46:33.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.862]                     {
[17:46:33.862]                       inherits <- base::inherits
[17:46:33.862]                       invokeRestart <- base::invokeRestart
[17:46:33.862]                       is.null <- base::is.null
[17:46:33.862]                       muffled <- FALSE
[17:46:33.862]                       if (inherits(cond, "message")) {
[17:46:33.862]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.862]                         if (muffled) 
[17:46:33.862]                           invokeRestart("muffleMessage")
[17:46:33.862]                       }
[17:46:33.862]                       else if (inherits(cond, "warning")) {
[17:46:33.862]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.862]                         if (muffled) 
[17:46:33.862]                           invokeRestart("muffleWarning")
[17:46:33.862]                       }
[17:46:33.862]                       else if (inherits(cond, "condition")) {
[17:46:33.862]                         if (!is.null(pattern)) {
[17:46:33.862]                           computeRestarts <- base::computeRestarts
[17:46:33.862]                           grepl <- base::grepl
[17:46:33.862]                           restarts <- computeRestarts(cond)
[17:46:33.862]                           for (restart in restarts) {
[17:46:33.862]                             name <- restart$name
[17:46:33.862]                             if (is.null(name)) 
[17:46:33.862]                               next
[17:46:33.862]                             if (!grepl(pattern, name)) 
[17:46:33.862]                               next
[17:46:33.862]                             invokeRestart(restart)
[17:46:33.862]                             muffled <- TRUE
[17:46:33.862]                             break
[17:46:33.862]                           }
[17:46:33.862]                         }
[17:46:33.862]                       }
[17:46:33.862]                       invisible(muffled)
[17:46:33.862]                     }
[17:46:33.862]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.862]                   }
[17:46:33.862]                 }
[17:46:33.862]             }
[17:46:33.862]         }))
[17:46:33.862]     }, error = function(ex) {
[17:46:33.862]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.862]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.862]                 ...future.rng), started = ...future.startTime, 
[17:46:33.862]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.862]             version = "1.8"), class = "FutureResult")
[17:46:33.862]     }, finally = {
[17:46:33.862]         if (!identical(...future.workdir, getwd())) 
[17:46:33.862]             setwd(...future.workdir)
[17:46:33.862]         {
[17:46:33.862]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.862]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.862]             }
[17:46:33.862]             base::options(...future.oldOptions)
[17:46:33.862]             if (.Platform$OS.type == "windows") {
[17:46:33.862]                 old_names <- names(...future.oldEnvVars)
[17:46:33.862]                 envs <- base::Sys.getenv()
[17:46:33.862]                 names <- names(envs)
[17:46:33.862]                 common <- intersect(names, old_names)
[17:46:33.862]                 added <- setdiff(names, old_names)
[17:46:33.862]                 removed <- setdiff(old_names, names)
[17:46:33.862]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.862]                   envs[common]]
[17:46:33.862]                 NAMES <- toupper(changed)
[17:46:33.862]                 args <- list()
[17:46:33.862]                 for (kk in seq_along(NAMES)) {
[17:46:33.862]                   name <- changed[[kk]]
[17:46:33.862]                   NAME <- NAMES[[kk]]
[17:46:33.862]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.862]                     next
[17:46:33.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.862]                 }
[17:46:33.862]                 NAMES <- toupper(added)
[17:46:33.862]                 for (kk in seq_along(NAMES)) {
[17:46:33.862]                   name <- added[[kk]]
[17:46:33.862]                   NAME <- NAMES[[kk]]
[17:46:33.862]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.862]                     next
[17:46:33.862]                   args[[name]] <- ""
[17:46:33.862]                 }
[17:46:33.862]                 NAMES <- toupper(removed)
[17:46:33.862]                 for (kk in seq_along(NAMES)) {
[17:46:33.862]                   name <- removed[[kk]]
[17:46:33.862]                   NAME <- NAMES[[kk]]
[17:46:33.862]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.862]                     next
[17:46:33.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.862]                 }
[17:46:33.862]                 if (length(args) > 0) 
[17:46:33.862]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.862]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.862]             }
[17:46:33.862]             else {
[17:46:33.862]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.862]             }
[17:46:33.862]             {
[17:46:33.862]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.862]                   0L) {
[17:46:33.862]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.862]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.862]                   base::options(opts)
[17:46:33.862]                 }
[17:46:33.862]                 {
[17:46:33.862]                   {
[17:46:33.862]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.862]                     NULL
[17:46:33.862]                   }
[17:46:33.862]                   options(future.plan = NULL)
[17:46:33.862]                   if (is.na(NA_character_)) 
[17:46:33.862]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.862]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.862]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.862]                     .init = FALSE)
[17:46:33.862]                 }
[17:46:33.862]             }
[17:46:33.862]         }
[17:46:33.862]     })
[17:46:33.862]     if (TRUE) {
[17:46:33.862]         base::sink(type = "output", split = FALSE)
[17:46:33.862]         if (TRUE) {
[17:46:33.862]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.862]         }
[17:46:33.862]         else {
[17:46:33.862]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.862]         }
[17:46:33.862]         base::close(...future.stdout)
[17:46:33.862]         ...future.stdout <- NULL
[17:46:33.862]     }
[17:46:33.862]     ...future.result$conditions <- ...future.conditions
[17:46:33.862]     ...future.result$finished <- base::Sys.time()
[17:46:33.862]     ...future.result
[17:46:33.862] }
[17:46:33.865] MultisessionFuture started
[17:46:33.865] - Launch lazy future ... done
[17:46:33.865] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.866] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.867] - Validating connection of MultisessionFuture
[17:46:33.867] - received message: FutureResult
[17:46:33.867] - Received FutureResult
[17:46:33.867] - Erased future from FutureRegistry
[17:46:33.867] result() for ClusterFuture ...
[17:46:33.867] - result already collected: FutureResult
[17:46:33.867] result() for ClusterFuture ... done
[17:46:33.868] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.868] result() for ClusterFuture ...
[17:46:33.868] - result already collected: FutureResult
[17:46:33.868] result() for ClusterFuture ... done
[17:46:33.868] result() for ClusterFuture ...
[17:46:33.868] - result already collected: FutureResult
[17:46:33.868] result() for ClusterFuture ... done
[17:46:33.872] getGlobalsAndPackages() ...
[17:46:33.872] 
[17:46:33.872] - globals: [0] <none>
[17:46:33.872] getGlobalsAndPackages() ... DONE
[17:46:33.883] Packages needed by the future expression (n = 0): <none>
[17:46:33.883] Packages needed by future strategies (n = 0): <none>
[17:46:33.884] {
[17:46:33.884]     {
[17:46:33.884]         {
[17:46:33.884]             ...future.startTime <- base::Sys.time()
[17:46:33.884]             {
[17:46:33.884]                 {
[17:46:33.884]                   {
[17:46:33.884]                     {
[17:46:33.884]                       base::local({
[17:46:33.884]                         has_future <- base::requireNamespace("future", 
[17:46:33.884]                           quietly = TRUE)
[17:46:33.884]                         if (has_future) {
[17:46:33.884]                           ns <- base::getNamespace("future")
[17:46:33.884]                           version <- ns[[".package"]][["version"]]
[17:46:33.884]                           if (is.null(version)) 
[17:46:33.884]                             version <- utils::packageVersion("future")
[17:46:33.884]                         }
[17:46:33.884]                         else {
[17:46:33.884]                           version <- NULL
[17:46:33.884]                         }
[17:46:33.884]                         if (!has_future || version < "1.8.0") {
[17:46:33.884]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.884]                             "", base::R.version$version.string), 
[17:46:33.884]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.884]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.884]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.884]                               "release", "version")], collapse = " "), 
[17:46:33.884]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.884]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.884]                             info)
[17:46:33.884]                           info <- base::paste(info, collapse = "; ")
[17:46:33.884]                           if (!has_future) {
[17:46:33.884]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.884]                               info)
[17:46:33.884]                           }
[17:46:33.884]                           else {
[17:46:33.884]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.884]                               info, version)
[17:46:33.884]                           }
[17:46:33.884]                           base::stop(msg)
[17:46:33.884]                         }
[17:46:33.884]                       })
[17:46:33.884]                     }
[17:46:33.884]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.884]                     base::options(mc.cores = 1L)
[17:46:33.884]                   }
[17:46:33.884]                   ...future.strategy.old <- future::plan("list")
[17:46:33.884]                   options(future.plan = NULL)
[17:46:33.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.884]                 }
[17:46:33.884]                 ...future.workdir <- getwd()
[17:46:33.884]             }
[17:46:33.884]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.884]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.884]         }
[17:46:33.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.884]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.884]             base::names(...future.oldOptions))
[17:46:33.884]     }
[17:46:33.884]     if (FALSE) {
[17:46:33.884]     }
[17:46:33.884]     else {
[17:46:33.884]         if (TRUE) {
[17:46:33.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.884]                 open = "w")
[17:46:33.884]         }
[17:46:33.884]         else {
[17:46:33.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.884]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.884]         }
[17:46:33.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.884]             base::sink(type = "output", split = FALSE)
[17:46:33.884]             base::close(...future.stdout)
[17:46:33.884]         }, add = TRUE)
[17:46:33.884]     }
[17:46:33.884]     ...future.frame <- base::sys.nframe()
[17:46:33.884]     ...future.conditions <- base::list()
[17:46:33.884]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.884]     if (FALSE) {
[17:46:33.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.884]     }
[17:46:33.884]     ...future.result <- base::tryCatch({
[17:46:33.884]         base::withCallingHandlers({
[17:46:33.884]             ...future.value <- base::withVisible(base::local({
[17:46:33.884]                 ...future.makeSendCondition <- base::local({
[17:46:33.884]                   sendCondition <- NULL
[17:46:33.884]                   function(frame = 1L) {
[17:46:33.884]                     if (is.function(sendCondition)) 
[17:46:33.884]                       return(sendCondition)
[17:46:33.884]                     ns <- getNamespace("parallel")
[17:46:33.884]                     if (exists("sendData", mode = "function", 
[17:46:33.884]                       envir = ns)) {
[17:46:33.884]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.884]                         envir = ns)
[17:46:33.884]                       envir <- sys.frame(frame)
[17:46:33.884]                       master <- NULL
[17:46:33.884]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.884]                         !identical(envir, emptyenv())) {
[17:46:33.884]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.884]                           inherits = FALSE)) {
[17:46:33.884]                           master <- get("master", mode = "list", 
[17:46:33.884]                             envir = envir, inherits = FALSE)
[17:46:33.884]                           if (inherits(master, c("SOCKnode", 
[17:46:33.884]                             "SOCK0node"))) {
[17:46:33.884]                             sendCondition <<- function(cond) {
[17:46:33.884]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.884]                                 success = TRUE)
[17:46:33.884]                               parallel_sendData(master, data)
[17:46:33.884]                             }
[17:46:33.884]                             return(sendCondition)
[17:46:33.884]                           }
[17:46:33.884]                         }
[17:46:33.884]                         frame <- frame + 1L
[17:46:33.884]                         envir <- sys.frame(frame)
[17:46:33.884]                       }
[17:46:33.884]                     }
[17:46:33.884]                     sendCondition <<- function(cond) NULL
[17:46:33.884]                   }
[17:46:33.884]                 })
[17:46:33.884]                 withCallingHandlers({
[17:46:33.884]                   42
[17:46:33.884]                 }, immediateCondition = function(cond) {
[17:46:33.884]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.884]                   sendCondition(cond)
[17:46:33.884]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.884]                   {
[17:46:33.884]                     inherits <- base::inherits
[17:46:33.884]                     invokeRestart <- base::invokeRestart
[17:46:33.884]                     is.null <- base::is.null
[17:46:33.884]                     muffled <- FALSE
[17:46:33.884]                     if (inherits(cond, "message")) {
[17:46:33.884]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.884]                       if (muffled) 
[17:46:33.884]                         invokeRestart("muffleMessage")
[17:46:33.884]                     }
[17:46:33.884]                     else if (inherits(cond, "warning")) {
[17:46:33.884]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.884]                       if (muffled) 
[17:46:33.884]                         invokeRestart("muffleWarning")
[17:46:33.884]                     }
[17:46:33.884]                     else if (inherits(cond, "condition")) {
[17:46:33.884]                       if (!is.null(pattern)) {
[17:46:33.884]                         computeRestarts <- base::computeRestarts
[17:46:33.884]                         grepl <- base::grepl
[17:46:33.884]                         restarts <- computeRestarts(cond)
[17:46:33.884]                         for (restart in restarts) {
[17:46:33.884]                           name <- restart$name
[17:46:33.884]                           if (is.null(name)) 
[17:46:33.884]                             next
[17:46:33.884]                           if (!grepl(pattern, name)) 
[17:46:33.884]                             next
[17:46:33.884]                           invokeRestart(restart)
[17:46:33.884]                           muffled <- TRUE
[17:46:33.884]                           break
[17:46:33.884]                         }
[17:46:33.884]                       }
[17:46:33.884]                     }
[17:46:33.884]                     invisible(muffled)
[17:46:33.884]                   }
[17:46:33.884]                   muffleCondition(cond)
[17:46:33.884]                 })
[17:46:33.884]             }))
[17:46:33.884]             future::FutureResult(value = ...future.value$value, 
[17:46:33.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.884]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.884]                     ...future.globalenv.names))
[17:46:33.884]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.884]         }, condition = base::local({
[17:46:33.884]             c <- base::c
[17:46:33.884]             inherits <- base::inherits
[17:46:33.884]             invokeRestart <- base::invokeRestart
[17:46:33.884]             length <- base::length
[17:46:33.884]             list <- base::list
[17:46:33.884]             seq.int <- base::seq.int
[17:46:33.884]             signalCondition <- base::signalCondition
[17:46:33.884]             sys.calls <- base::sys.calls
[17:46:33.884]             `[[` <- base::`[[`
[17:46:33.884]             `+` <- base::`+`
[17:46:33.884]             `<<-` <- base::`<<-`
[17:46:33.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.884]                   3L)]
[17:46:33.884]             }
[17:46:33.884]             function(cond) {
[17:46:33.884]                 is_error <- inherits(cond, "error")
[17:46:33.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.884]                   NULL)
[17:46:33.884]                 if (is_error) {
[17:46:33.884]                   sessionInformation <- function() {
[17:46:33.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.884]                       search = base::search(), system = base::Sys.info())
[17:46:33.884]                   }
[17:46:33.884]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.884]                     cond$call), session = sessionInformation(), 
[17:46:33.884]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.884]                   signalCondition(cond)
[17:46:33.884]                 }
[17:46:33.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.884]                 "immediateCondition"))) {
[17:46:33.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.884]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.884]                   if (TRUE && !signal) {
[17:46:33.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.884]                     {
[17:46:33.884]                       inherits <- base::inherits
[17:46:33.884]                       invokeRestart <- base::invokeRestart
[17:46:33.884]                       is.null <- base::is.null
[17:46:33.884]                       muffled <- FALSE
[17:46:33.884]                       if (inherits(cond, "message")) {
[17:46:33.884]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.884]                         if (muffled) 
[17:46:33.884]                           invokeRestart("muffleMessage")
[17:46:33.884]                       }
[17:46:33.884]                       else if (inherits(cond, "warning")) {
[17:46:33.884]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.884]                         if (muffled) 
[17:46:33.884]                           invokeRestart("muffleWarning")
[17:46:33.884]                       }
[17:46:33.884]                       else if (inherits(cond, "condition")) {
[17:46:33.884]                         if (!is.null(pattern)) {
[17:46:33.884]                           computeRestarts <- base::computeRestarts
[17:46:33.884]                           grepl <- base::grepl
[17:46:33.884]                           restarts <- computeRestarts(cond)
[17:46:33.884]                           for (restart in restarts) {
[17:46:33.884]                             name <- restart$name
[17:46:33.884]                             if (is.null(name)) 
[17:46:33.884]                               next
[17:46:33.884]                             if (!grepl(pattern, name)) 
[17:46:33.884]                               next
[17:46:33.884]                             invokeRestart(restart)
[17:46:33.884]                             muffled <- TRUE
[17:46:33.884]                             break
[17:46:33.884]                           }
[17:46:33.884]                         }
[17:46:33.884]                       }
[17:46:33.884]                       invisible(muffled)
[17:46:33.884]                     }
[17:46:33.884]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.884]                   }
[17:46:33.884]                 }
[17:46:33.884]                 else {
[17:46:33.884]                   if (TRUE) {
[17:46:33.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.884]                     {
[17:46:33.884]                       inherits <- base::inherits
[17:46:33.884]                       invokeRestart <- base::invokeRestart
[17:46:33.884]                       is.null <- base::is.null
[17:46:33.884]                       muffled <- FALSE
[17:46:33.884]                       if (inherits(cond, "message")) {
[17:46:33.884]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.884]                         if (muffled) 
[17:46:33.884]                           invokeRestart("muffleMessage")
[17:46:33.884]                       }
[17:46:33.884]                       else if (inherits(cond, "warning")) {
[17:46:33.884]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.884]                         if (muffled) 
[17:46:33.884]                           invokeRestart("muffleWarning")
[17:46:33.884]                       }
[17:46:33.884]                       else if (inherits(cond, "condition")) {
[17:46:33.884]                         if (!is.null(pattern)) {
[17:46:33.884]                           computeRestarts <- base::computeRestarts
[17:46:33.884]                           grepl <- base::grepl
[17:46:33.884]                           restarts <- computeRestarts(cond)
[17:46:33.884]                           for (restart in restarts) {
[17:46:33.884]                             name <- restart$name
[17:46:33.884]                             if (is.null(name)) 
[17:46:33.884]                               next
[17:46:33.884]                             if (!grepl(pattern, name)) 
[17:46:33.884]                               next
[17:46:33.884]                             invokeRestart(restart)
[17:46:33.884]                             muffled <- TRUE
[17:46:33.884]                             break
[17:46:33.884]                           }
[17:46:33.884]                         }
[17:46:33.884]                       }
[17:46:33.884]                       invisible(muffled)
[17:46:33.884]                     }
[17:46:33.884]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.884]                   }
[17:46:33.884]                 }
[17:46:33.884]             }
[17:46:33.884]         }))
[17:46:33.884]     }, error = function(ex) {
[17:46:33.884]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.884]                 ...future.rng), started = ...future.startTime, 
[17:46:33.884]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.884]             version = "1.8"), class = "FutureResult")
[17:46:33.884]     }, finally = {
[17:46:33.884]         if (!identical(...future.workdir, getwd())) 
[17:46:33.884]             setwd(...future.workdir)
[17:46:33.884]         {
[17:46:33.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.884]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.884]             }
[17:46:33.884]             base::options(...future.oldOptions)
[17:46:33.884]             if (.Platform$OS.type == "windows") {
[17:46:33.884]                 old_names <- names(...future.oldEnvVars)
[17:46:33.884]                 envs <- base::Sys.getenv()
[17:46:33.884]                 names <- names(envs)
[17:46:33.884]                 common <- intersect(names, old_names)
[17:46:33.884]                 added <- setdiff(names, old_names)
[17:46:33.884]                 removed <- setdiff(old_names, names)
[17:46:33.884]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.884]                   envs[common]]
[17:46:33.884]                 NAMES <- toupper(changed)
[17:46:33.884]                 args <- list()
[17:46:33.884]                 for (kk in seq_along(NAMES)) {
[17:46:33.884]                   name <- changed[[kk]]
[17:46:33.884]                   NAME <- NAMES[[kk]]
[17:46:33.884]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.884]                     next
[17:46:33.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.884]                 }
[17:46:33.884]                 NAMES <- toupper(added)
[17:46:33.884]                 for (kk in seq_along(NAMES)) {
[17:46:33.884]                   name <- added[[kk]]
[17:46:33.884]                   NAME <- NAMES[[kk]]
[17:46:33.884]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.884]                     next
[17:46:33.884]                   args[[name]] <- ""
[17:46:33.884]                 }
[17:46:33.884]                 NAMES <- toupper(removed)
[17:46:33.884]                 for (kk in seq_along(NAMES)) {
[17:46:33.884]                   name <- removed[[kk]]
[17:46:33.884]                   NAME <- NAMES[[kk]]
[17:46:33.884]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.884]                     next
[17:46:33.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.884]                 }
[17:46:33.884]                 if (length(args) > 0) 
[17:46:33.884]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.884]             }
[17:46:33.884]             else {
[17:46:33.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.884]             }
[17:46:33.884]             {
[17:46:33.884]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.884]                   0L) {
[17:46:33.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.884]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.884]                   base::options(opts)
[17:46:33.884]                 }
[17:46:33.884]                 {
[17:46:33.884]                   {
[17:46:33.884]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.884]                     NULL
[17:46:33.884]                   }
[17:46:33.884]                   options(future.plan = NULL)
[17:46:33.884]                   if (is.na(NA_character_)) 
[17:46:33.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.884]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.884]                     .init = FALSE)
[17:46:33.884]                 }
[17:46:33.884]             }
[17:46:33.884]         }
[17:46:33.884]     })
[17:46:33.884]     if (TRUE) {
[17:46:33.884]         base::sink(type = "output", split = FALSE)
[17:46:33.884]         if (TRUE) {
[17:46:33.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.884]         }
[17:46:33.884]         else {
[17:46:33.884]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.884]         }
[17:46:33.884]         base::close(...future.stdout)
[17:46:33.884]         ...future.stdout <- NULL
[17:46:33.884]     }
[17:46:33.884]     ...future.result$conditions <- ...future.conditions
[17:46:33.884]     ...future.result$finished <- base::Sys.time()
[17:46:33.884]     ...future.result
[17:46:33.884] }
[17:46:33.889] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.891] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.891] - Validating connection of MultisessionFuture
[17:46:33.891] - received message: FutureResult
[17:46:33.891] - Received FutureResult
[17:46:33.891] - Erased future from FutureRegistry
[17:46:33.891] result() for ClusterFuture ...
[17:46:33.892] - result already collected: FutureResult
[17:46:33.892] result() for ClusterFuture ... done
[17:46:33.892] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.892] result() for ClusterFuture ...
[17:46:33.892] - result already collected: FutureResult
[17:46:33.892] result() for ClusterFuture ... done
[17:46:33.892] result() for ClusterFuture ...
[17:46:33.892] - result already collected: FutureResult
[17:46:33.892] result() for ClusterFuture ... done
[17:46:33.892] getGlobalsAndPackages() ...
[17:46:33.893] Searching for globals...
[17:46:33.893] 
[17:46:33.893] Searching for globals ... DONE
[17:46:33.893] - globals: [0] <none>
[17:46:33.893] getGlobalsAndPackages() ... DONE
[17:46:33.893] run() for ‘Future’ ...
[17:46:33.893] - state: ‘created’
[17:46:33.894] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.907] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.907] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:33.907]   - Field: ‘node’
[17:46:33.907]   - Field: ‘label’
[17:46:33.908]   - Field: ‘local’
[17:46:33.908]   - Field: ‘owner’
[17:46:33.908]   - Field: ‘envir’
[17:46:33.908]   - Field: ‘workers’
[17:46:33.908]   - Field: ‘packages’
[17:46:33.908]   - Field: ‘gc’
[17:46:33.908]   - Field: ‘conditions’
[17:46:33.908]   - Field: ‘persistent’
[17:46:33.908]   - Field: ‘expr’
[17:46:33.908]   - Field: ‘uuid’
[17:46:33.908]   - Field: ‘seed’
[17:46:33.909]   - Field: ‘version’
[17:46:33.909]   - Field: ‘result’
[17:46:33.909]   - Field: ‘asynchronous’
[17:46:33.909]   - Field: ‘calls’
[17:46:33.909]   - Field: ‘globals’
[17:46:33.909]   - Field: ‘stdout’
[17:46:33.909]   - Field: ‘earlySignal’
[17:46:33.909]   - Field: ‘lazy’
[17:46:33.909]   - Field: ‘state’
[17:46:33.909] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:33.909] - Launch lazy future ...
[17:46:33.910] Packages needed by the future expression (n = 0): <none>
[17:46:33.910] Packages needed by future strategies (n = 0): <none>
[17:46:33.910] {
[17:46:33.910]     {
[17:46:33.910]         {
[17:46:33.910]             ...future.startTime <- base::Sys.time()
[17:46:33.910]             {
[17:46:33.910]                 {
[17:46:33.910]                   {
[17:46:33.910]                     {
[17:46:33.910]                       base::local({
[17:46:33.910]                         has_future <- base::requireNamespace("future", 
[17:46:33.910]                           quietly = TRUE)
[17:46:33.910]                         if (has_future) {
[17:46:33.910]                           ns <- base::getNamespace("future")
[17:46:33.910]                           version <- ns[[".package"]][["version"]]
[17:46:33.910]                           if (is.null(version)) 
[17:46:33.910]                             version <- utils::packageVersion("future")
[17:46:33.910]                         }
[17:46:33.910]                         else {
[17:46:33.910]                           version <- NULL
[17:46:33.910]                         }
[17:46:33.910]                         if (!has_future || version < "1.8.0") {
[17:46:33.910]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.910]                             "", base::R.version$version.string), 
[17:46:33.910]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.910]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.910]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.910]                               "release", "version")], collapse = " "), 
[17:46:33.910]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.910]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.910]                             info)
[17:46:33.910]                           info <- base::paste(info, collapse = "; ")
[17:46:33.910]                           if (!has_future) {
[17:46:33.910]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.910]                               info)
[17:46:33.910]                           }
[17:46:33.910]                           else {
[17:46:33.910]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.910]                               info, version)
[17:46:33.910]                           }
[17:46:33.910]                           base::stop(msg)
[17:46:33.910]                         }
[17:46:33.910]                       })
[17:46:33.910]                     }
[17:46:33.910]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.910]                     base::options(mc.cores = 1L)
[17:46:33.910]                   }
[17:46:33.910]                   ...future.strategy.old <- future::plan("list")
[17:46:33.910]                   options(future.plan = NULL)
[17:46:33.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.910]                 }
[17:46:33.910]                 ...future.workdir <- getwd()
[17:46:33.910]             }
[17:46:33.910]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.910]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.910]         }
[17:46:33.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.910]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.910]             base::names(...future.oldOptions))
[17:46:33.910]     }
[17:46:33.910]     if (FALSE) {
[17:46:33.910]     }
[17:46:33.910]     else {
[17:46:33.910]         if (TRUE) {
[17:46:33.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.910]                 open = "w")
[17:46:33.910]         }
[17:46:33.910]         else {
[17:46:33.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.910]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.910]         }
[17:46:33.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.910]             base::sink(type = "output", split = FALSE)
[17:46:33.910]             base::close(...future.stdout)
[17:46:33.910]         }, add = TRUE)
[17:46:33.910]     }
[17:46:33.910]     ...future.frame <- base::sys.nframe()
[17:46:33.910]     ...future.conditions <- base::list()
[17:46:33.910]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.910]     if (FALSE) {
[17:46:33.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.910]     }
[17:46:33.910]     ...future.result <- base::tryCatch({
[17:46:33.910]         base::withCallingHandlers({
[17:46:33.910]             ...future.value <- base::withVisible(base::local({
[17:46:33.910]                 ...future.makeSendCondition <- base::local({
[17:46:33.910]                   sendCondition <- NULL
[17:46:33.910]                   function(frame = 1L) {
[17:46:33.910]                     if (is.function(sendCondition)) 
[17:46:33.910]                       return(sendCondition)
[17:46:33.910]                     ns <- getNamespace("parallel")
[17:46:33.910]                     if (exists("sendData", mode = "function", 
[17:46:33.910]                       envir = ns)) {
[17:46:33.910]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.910]                         envir = ns)
[17:46:33.910]                       envir <- sys.frame(frame)
[17:46:33.910]                       master <- NULL
[17:46:33.910]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.910]                         !identical(envir, emptyenv())) {
[17:46:33.910]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.910]                           inherits = FALSE)) {
[17:46:33.910]                           master <- get("master", mode = "list", 
[17:46:33.910]                             envir = envir, inherits = FALSE)
[17:46:33.910]                           if (inherits(master, c("SOCKnode", 
[17:46:33.910]                             "SOCK0node"))) {
[17:46:33.910]                             sendCondition <<- function(cond) {
[17:46:33.910]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.910]                                 success = TRUE)
[17:46:33.910]                               parallel_sendData(master, data)
[17:46:33.910]                             }
[17:46:33.910]                             return(sendCondition)
[17:46:33.910]                           }
[17:46:33.910]                         }
[17:46:33.910]                         frame <- frame + 1L
[17:46:33.910]                         envir <- sys.frame(frame)
[17:46:33.910]                       }
[17:46:33.910]                     }
[17:46:33.910]                     sendCondition <<- function(cond) NULL
[17:46:33.910]                   }
[17:46:33.910]                 })
[17:46:33.910]                 withCallingHandlers({
[17:46:33.910]                   42
[17:46:33.910]                 }, immediateCondition = function(cond) {
[17:46:33.910]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.910]                   sendCondition(cond)
[17:46:33.910]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.910]                   {
[17:46:33.910]                     inherits <- base::inherits
[17:46:33.910]                     invokeRestart <- base::invokeRestart
[17:46:33.910]                     is.null <- base::is.null
[17:46:33.910]                     muffled <- FALSE
[17:46:33.910]                     if (inherits(cond, "message")) {
[17:46:33.910]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.910]                       if (muffled) 
[17:46:33.910]                         invokeRestart("muffleMessage")
[17:46:33.910]                     }
[17:46:33.910]                     else if (inherits(cond, "warning")) {
[17:46:33.910]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.910]                       if (muffled) 
[17:46:33.910]                         invokeRestart("muffleWarning")
[17:46:33.910]                     }
[17:46:33.910]                     else if (inherits(cond, "condition")) {
[17:46:33.910]                       if (!is.null(pattern)) {
[17:46:33.910]                         computeRestarts <- base::computeRestarts
[17:46:33.910]                         grepl <- base::grepl
[17:46:33.910]                         restarts <- computeRestarts(cond)
[17:46:33.910]                         for (restart in restarts) {
[17:46:33.910]                           name <- restart$name
[17:46:33.910]                           if (is.null(name)) 
[17:46:33.910]                             next
[17:46:33.910]                           if (!grepl(pattern, name)) 
[17:46:33.910]                             next
[17:46:33.910]                           invokeRestart(restart)
[17:46:33.910]                           muffled <- TRUE
[17:46:33.910]                           break
[17:46:33.910]                         }
[17:46:33.910]                       }
[17:46:33.910]                     }
[17:46:33.910]                     invisible(muffled)
[17:46:33.910]                   }
[17:46:33.910]                   muffleCondition(cond)
[17:46:33.910]                 })
[17:46:33.910]             }))
[17:46:33.910]             future::FutureResult(value = ...future.value$value, 
[17:46:33.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.910]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.910]                     ...future.globalenv.names))
[17:46:33.910]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.910]         }, condition = base::local({
[17:46:33.910]             c <- base::c
[17:46:33.910]             inherits <- base::inherits
[17:46:33.910]             invokeRestart <- base::invokeRestart
[17:46:33.910]             length <- base::length
[17:46:33.910]             list <- base::list
[17:46:33.910]             seq.int <- base::seq.int
[17:46:33.910]             signalCondition <- base::signalCondition
[17:46:33.910]             sys.calls <- base::sys.calls
[17:46:33.910]             `[[` <- base::`[[`
[17:46:33.910]             `+` <- base::`+`
[17:46:33.910]             `<<-` <- base::`<<-`
[17:46:33.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.910]                   3L)]
[17:46:33.910]             }
[17:46:33.910]             function(cond) {
[17:46:33.910]                 is_error <- inherits(cond, "error")
[17:46:33.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.910]                   NULL)
[17:46:33.910]                 if (is_error) {
[17:46:33.910]                   sessionInformation <- function() {
[17:46:33.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.910]                       search = base::search(), system = base::Sys.info())
[17:46:33.910]                   }
[17:46:33.910]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.910]                     cond$call), session = sessionInformation(), 
[17:46:33.910]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.910]                   signalCondition(cond)
[17:46:33.910]                 }
[17:46:33.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.910]                 "immediateCondition"))) {
[17:46:33.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.910]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.910]                   if (TRUE && !signal) {
[17:46:33.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.910]                     {
[17:46:33.910]                       inherits <- base::inherits
[17:46:33.910]                       invokeRestart <- base::invokeRestart
[17:46:33.910]                       is.null <- base::is.null
[17:46:33.910]                       muffled <- FALSE
[17:46:33.910]                       if (inherits(cond, "message")) {
[17:46:33.910]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.910]                         if (muffled) 
[17:46:33.910]                           invokeRestart("muffleMessage")
[17:46:33.910]                       }
[17:46:33.910]                       else if (inherits(cond, "warning")) {
[17:46:33.910]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.910]                         if (muffled) 
[17:46:33.910]                           invokeRestart("muffleWarning")
[17:46:33.910]                       }
[17:46:33.910]                       else if (inherits(cond, "condition")) {
[17:46:33.910]                         if (!is.null(pattern)) {
[17:46:33.910]                           computeRestarts <- base::computeRestarts
[17:46:33.910]                           grepl <- base::grepl
[17:46:33.910]                           restarts <- computeRestarts(cond)
[17:46:33.910]                           for (restart in restarts) {
[17:46:33.910]                             name <- restart$name
[17:46:33.910]                             if (is.null(name)) 
[17:46:33.910]                               next
[17:46:33.910]                             if (!grepl(pattern, name)) 
[17:46:33.910]                               next
[17:46:33.910]                             invokeRestart(restart)
[17:46:33.910]                             muffled <- TRUE
[17:46:33.910]                             break
[17:46:33.910]                           }
[17:46:33.910]                         }
[17:46:33.910]                       }
[17:46:33.910]                       invisible(muffled)
[17:46:33.910]                     }
[17:46:33.910]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.910]                   }
[17:46:33.910]                 }
[17:46:33.910]                 else {
[17:46:33.910]                   if (TRUE) {
[17:46:33.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.910]                     {
[17:46:33.910]                       inherits <- base::inherits
[17:46:33.910]                       invokeRestart <- base::invokeRestart
[17:46:33.910]                       is.null <- base::is.null
[17:46:33.910]                       muffled <- FALSE
[17:46:33.910]                       if (inherits(cond, "message")) {
[17:46:33.910]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.910]                         if (muffled) 
[17:46:33.910]                           invokeRestart("muffleMessage")
[17:46:33.910]                       }
[17:46:33.910]                       else if (inherits(cond, "warning")) {
[17:46:33.910]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.910]                         if (muffled) 
[17:46:33.910]                           invokeRestart("muffleWarning")
[17:46:33.910]                       }
[17:46:33.910]                       else if (inherits(cond, "condition")) {
[17:46:33.910]                         if (!is.null(pattern)) {
[17:46:33.910]                           computeRestarts <- base::computeRestarts
[17:46:33.910]                           grepl <- base::grepl
[17:46:33.910]                           restarts <- computeRestarts(cond)
[17:46:33.910]                           for (restart in restarts) {
[17:46:33.910]                             name <- restart$name
[17:46:33.910]                             if (is.null(name)) 
[17:46:33.910]                               next
[17:46:33.910]                             if (!grepl(pattern, name)) 
[17:46:33.910]                               next
[17:46:33.910]                             invokeRestart(restart)
[17:46:33.910]                             muffled <- TRUE
[17:46:33.910]                             break
[17:46:33.910]                           }
[17:46:33.910]                         }
[17:46:33.910]                       }
[17:46:33.910]                       invisible(muffled)
[17:46:33.910]                     }
[17:46:33.910]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.910]                   }
[17:46:33.910]                 }
[17:46:33.910]             }
[17:46:33.910]         }))
[17:46:33.910]     }, error = function(ex) {
[17:46:33.910]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.910]                 ...future.rng), started = ...future.startTime, 
[17:46:33.910]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.910]             version = "1.8"), class = "FutureResult")
[17:46:33.910]     }, finally = {
[17:46:33.910]         if (!identical(...future.workdir, getwd())) 
[17:46:33.910]             setwd(...future.workdir)
[17:46:33.910]         {
[17:46:33.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.910]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.910]             }
[17:46:33.910]             base::options(...future.oldOptions)
[17:46:33.910]             if (.Platform$OS.type == "windows") {
[17:46:33.910]                 old_names <- names(...future.oldEnvVars)
[17:46:33.910]                 envs <- base::Sys.getenv()
[17:46:33.910]                 names <- names(envs)
[17:46:33.910]                 common <- intersect(names, old_names)
[17:46:33.910]                 added <- setdiff(names, old_names)
[17:46:33.910]                 removed <- setdiff(old_names, names)
[17:46:33.910]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.910]                   envs[common]]
[17:46:33.910]                 NAMES <- toupper(changed)
[17:46:33.910]                 args <- list()
[17:46:33.910]                 for (kk in seq_along(NAMES)) {
[17:46:33.910]                   name <- changed[[kk]]
[17:46:33.910]                   NAME <- NAMES[[kk]]
[17:46:33.910]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.910]                     next
[17:46:33.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.910]                 }
[17:46:33.910]                 NAMES <- toupper(added)
[17:46:33.910]                 for (kk in seq_along(NAMES)) {
[17:46:33.910]                   name <- added[[kk]]
[17:46:33.910]                   NAME <- NAMES[[kk]]
[17:46:33.910]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.910]                     next
[17:46:33.910]                   args[[name]] <- ""
[17:46:33.910]                 }
[17:46:33.910]                 NAMES <- toupper(removed)
[17:46:33.910]                 for (kk in seq_along(NAMES)) {
[17:46:33.910]                   name <- removed[[kk]]
[17:46:33.910]                   NAME <- NAMES[[kk]]
[17:46:33.910]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.910]                     next
[17:46:33.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.910]                 }
[17:46:33.910]                 if (length(args) > 0) 
[17:46:33.910]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.910]             }
[17:46:33.910]             else {
[17:46:33.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.910]             }
[17:46:33.910]             {
[17:46:33.910]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.910]                   0L) {
[17:46:33.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.910]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.910]                   base::options(opts)
[17:46:33.910]                 }
[17:46:33.910]                 {
[17:46:33.910]                   {
[17:46:33.910]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.910]                     NULL
[17:46:33.910]                   }
[17:46:33.910]                   options(future.plan = NULL)
[17:46:33.910]                   if (is.na(NA_character_)) 
[17:46:33.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.910]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.910]                     .init = FALSE)
[17:46:33.910]                 }
[17:46:33.910]             }
[17:46:33.910]         }
[17:46:33.910]     })
[17:46:33.910]     if (TRUE) {
[17:46:33.910]         base::sink(type = "output", split = FALSE)
[17:46:33.910]         if (TRUE) {
[17:46:33.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.910]         }
[17:46:33.910]         else {
[17:46:33.910]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.910]         }
[17:46:33.910]         base::close(...future.stdout)
[17:46:33.910]         ...future.stdout <- NULL
[17:46:33.910]     }
[17:46:33.910]     ...future.result$conditions <- ...future.conditions
[17:46:33.910]     ...future.result$finished <- base::Sys.time()
[17:46:33.910]     ...future.result
[17:46:33.910] }
[17:46:33.913] MultisessionFuture started
[17:46:33.913] - Launch lazy future ... done
[17:46:33.913] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.914] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.914] - Validating connection of MultisessionFuture
[17:46:33.914] - received message: FutureResult
[17:46:33.915] - Received FutureResult
[17:46:33.915] - Erased future from FutureRegistry
[17:46:33.915] result() for ClusterFuture ...
[17:46:33.915] - result already collected: FutureResult
[17:46:33.915] result() for ClusterFuture ... done
[17:46:33.915] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.915] result() for ClusterFuture ...
[17:46:33.915] - result already collected: FutureResult
[17:46:33.915] result() for ClusterFuture ... done
[17:46:33.915] result() for ClusterFuture ...
[17:46:33.916] - result already collected: FutureResult
[17:46:33.916] result() for ClusterFuture ... done
[17:46:33.916] getGlobalsAndPackages() ...
[17:46:33.916] Searching for globals...
[17:46:33.917] - globals found: [1] ‘{’
[17:46:33.917] Searching for globals ... DONE
[17:46:33.917] Resolving globals: FALSE
[17:46:33.917] 
[17:46:33.917] 
[17:46:33.917] getGlobalsAndPackages() ... DONE
[17:46:33.917] run() for ‘Future’ ...
[17:46:33.918] - state: ‘created’
[17:46:33.918] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:33.931] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.931] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:33.931]   - Field: ‘node’
[17:46:33.931]   - Field: ‘label’
[17:46:33.931]   - Field: ‘local’
[17:46:33.932]   - Field: ‘owner’
[17:46:33.932]   - Field: ‘envir’
[17:46:33.932]   - Field: ‘workers’
[17:46:33.932]   - Field: ‘packages’
[17:46:33.932]   - Field: ‘gc’
[17:46:33.932]   - Field: ‘conditions’
[17:46:33.932]   - Field: ‘persistent’
[17:46:33.932]   - Field: ‘expr’
[17:46:33.932]   - Field: ‘uuid’
[17:46:33.932]   - Field: ‘seed’
[17:46:33.932]   - Field: ‘version’
[17:46:33.933]   - Field: ‘result’
[17:46:33.933]   - Field: ‘asynchronous’
[17:46:33.933]   - Field: ‘calls’
[17:46:33.933]   - Field: ‘globals’
[17:46:33.933]   - Field: ‘stdout’
[17:46:33.933]   - Field: ‘earlySignal’
[17:46:33.933]   - Field: ‘lazy’
[17:46:33.933]   - Field: ‘state’
[17:46:33.933] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:33.933] - Launch lazy future ...
[17:46:33.934] Packages needed by the future expression (n = 0): <none>
[17:46:33.934] Packages needed by future strategies (n = 0): <none>
[17:46:33.934] {
[17:46:33.934]     {
[17:46:33.934]         {
[17:46:33.934]             ...future.startTime <- base::Sys.time()
[17:46:33.934]             {
[17:46:33.934]                 {
[17:46:33.934]                   {
[17:46:33.934]                     {
[17:46:33.934]                       base::local({
[17:46:33.934]                         has_future <- base::requireNamespace("future", 
[17:46:33.934]                           quietly = TRUE)
[17:46:33.934]                         if (has_future) {
[17:46:33.934]                           ns <- base::getNamespace("future")
[17:46:33.934]                           version <- ns[[".package"]][["version"]]
[17:46:33.934]                           if (is.null(version)) 
[17:46:33.934]                             version <- utils::packageVersion("future")
[17:46:33.934]                         }
[17:46:33.934]                         else {
[17:46:33.934]                           version <- NULL
[17:46:33.934]                         }
[17:46:33.934]                         if (!has_future || version < "1.8.0") {
[17:46:33.934]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:33.934]                             "", base::R.version$version.string), 
[17:46:33.934]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:33.934]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:33.934]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:33.934]                               "release", "version")], collapse = " "), 
[17:46:33.934]                             hostname = base::Sys.info()[["nodename"]])
[17:46:33.934]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:33.934]                             info)
[17:46:33.934]                           info <- base::paste(info, collapse = "; ")
[17:46:33.934]                           if (!has_future) {
[17:46:33.934]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:33.934]                               info)
[17:46:33.934]                           }
[17:46:33.934]                           else {
[17:46:33.934]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:33.934]                               info, version)
[17:46:33.934]                           }
[17:46:33.934]                           base::stop(msg)
[17:46:33.934]                         }
[17:46:33.934]                       })
[17:46:33.934]                     }
[17:46:33.934]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:33.934]                     base::options(mc.cores = 1L)
[17:46:33.934]                   }
[17:46:33.934]                   ...future.strategy.old <- future::plan("list")
[17:46:33.934]                   options(future.plan = NULL)
[17:46:33.934]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.934]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:33.934]                 }
[17:46:33.934]                 ...future.workdir <- getwd()
[17:46:33.934]             }
[17:46:33.934]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:33.934]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:33.934]         }
[17:46:33.934]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:33.934]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:33.934]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:33.934]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:33.934]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:33.934]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:33.934]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:33.934]             base::names(...future.oldOptions))
[17:46:33.934]     }
[17:46:33.934]     if (FALSE) {
[17:46:33.934]     }
[17:46:33.934]     else {
[17:46:33.934]         if (TRUE) {
[17:46:33.934]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:33.934]                 open = "w")
[17:46:33.934]         }
[17:46:33.934]         else {
[17:46:33.934]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:33.934]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:33.934]         }
[17:46:33.934]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:33.934]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:33.934]             base::sink(type = "output", split = FALSE)
[17:46:33.934]             base::close(...future.stdout)
[17:46:33.934]         }, add = TRUE)
[17:46:33.934]     }
[17:46:33.934]     ...future.frame <- base::sys.nframe()
[17:46:33.934]     ...future.conditions <- base::list()
[17:46:33.934]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:33.934]     if (FALSE) {
[17:46:33.934]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:33.934]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:33.934]     }
[17:46:33.934]     ...future.result <- base::tryCatch({
[17:46:33.934]         base::withCallingHandlers({
[17:46:33.934]             ...future.value <- base::withVisible(base::local({
[17:46:33.934]                 ...future.makeSendCondition <- base::local({
[17:46:33.934]                   sendCondition <- NULL
[17:46:33.934]                   function(frame = 1L) {
[17:46:33.934]                     if (is.function(sendCondition)) 
[17:46:33.934]                       return(sendCondition)
[17:46:33.934]                     ns <- getNamespace("parallel")
[17:46:33.934]                     if (exists("sendData", mode = "function", 
[17:46:33.934]                       envir = ns)) {
[17:46:33.934]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:33.934]                         envir = ns)
[17:46:33.934]                       envir <- sys.frame(frame)
[17:46:33.934]                       master <- NULL
[17:46:33.934]                       while (!identical(envir, .GlobalEnv) && 
[17:46:33.934]                         !identical(envir, emptyenv())) {
[17:46:33.934]                         if (exists("master", mode = "list", envir = envir, 
[17:46:33.934]                           inherits = FALSE)) {
[17:46:33.934]                           master <- get("master", mode = "list", 
[17:46:33.934]                             envir = envir, inherits = FALSE)
[17:46:33.934]                           if (inherits(master, c("SOCKnode", 
[17:46:33.934]                             "SOCK0node"))) {
[17:46:33.934]                             sendCondition <<- function(cond) {
[17:46:33.934]                               data <- list(type = "VALUE", value = cond, 
[17:46:33.934]                                 success = TRUE)
[17:46:33.934]                               parallel_sendData(master, data)
[17:46:33.934]                             }
[17:46:33.934]                             return(sendCondition)
[17:46:33.934]                           }
[17:46:33.934]                         }
[17:46:33.934]                         frame <- frame + 1L
[17:46:33.934]                         envir <- sys.frame(frame)
[17:46:33.934]                       }
[17:46:33.934]                     }
[17:46:33.934]                     sendCondition <<- function(cond) NULL
[17:46:33.934]                   }
[17:46:33.934]                 })
[17:46:33.934]                 withCallingHandlers({
[17:46:33.934]                   {
[17:46:33.934]                     42
[17:46:33.934]                   }
[17:46:33.934]                 }, immediateCondition = function(cond) {
[17:46:33.934]                   sendCondition <- ...future.makeSendCondition()
[17:46:33.934]                   sendCondition(cond)
[17:46:33.934]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.934]                   {
[17:46:33.934]                     inherits <- base::inherits
[17:46:33.934]                     invokeRestart <- base::invokeRestart
[17:46:33.934]                     is.null <- base::is.null
[17:46:33.934]                     muffled <- FALSE
[17:46:33.934]                     if (inherits(cond, "message")) {
[17:46:33.934]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:33.934]                       if (muffled) 
[17:46:33.934]                         invokeRestart("muffleMessage")
[17:46:33.934]                     }
[17:46:33.934]                     else if (inherits(cond, "warning")) {
[17:46:33.934]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:33.934]                       if (muffled) 
[17:46:33.934]                         invokeRestart("muffleWarning")
[17:46:33.934]                     }
[17:46:33.934]                     else if (inherits(cond, "condition")) {
[17:46:33.934]                       if (!is.null(pattern)) {
[17:46:33.934]                         computeRestarts <- base::computeRestarts
[17:46:33.934]                         grepl <- base::grepl
[17:46:33.934]                         restarts <- computeRestarts(cond)
[17:46:33.934]                         for (restart in restarts) {
[17:46:33.934]                           name <- restart$name
[17:46:33.934]                           if (is.null(name)) 
[17:46:33.934]                             next
[17:46:33.934]                           if (!grepl(pattern, name)) 
[17:46:33.934]                             next
[17:46:33.934]                           invokeRestart(restart)
[17:46:33.934]                           muffled <- TRUE
[17:46:33.934]                           break
[17:46:33.934]                         }
[17:46:33.934]                       }
[17:46:33.934]                     }
[17:46:33.934]                     invisible(muffled)
[17:46:33.934]                   }
[17:46:33.934]                   muffleCondition(cond)
[17:46:33.934]                 })
[17:46:33.934]             }))
[17:46:33.934]             future::FutureResult(value = ...future.value$value, 
[17:46:33.934]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.934]                   ...future.rng), globalenv = if (FALSE) 
[17:46:33.934]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:33.934]                     ...future.globalenv.names))
[17:46:33.934]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:33.934]         }, condition = base::local({
[17:46:33.934]             c <- base::c
[17:46:33.934]             inherits <- base::inherits
[17:46:33.934]             invokeRestart <- base::invokeRestart
[17:46:33.934]             length <- base::length
[17:46:33.934]             list <- base::list
[17:46:33.934]             seq.int <- base::seq.int
[17:46:33.934]             signalCondition <- base::signalCondition
[17:46:33.934]             sys.calls <- base::sys.calls
[17:46:33.934]             `[[` <- base::`[[`
[17:46:33.934]             `+` <- base::`+`
[17:46:33.934]             `<<-` <- base::`<<-`
[17:46:33.934]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:33.934]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:33.934]                   3L)]
[17:46:33.934]             }
[17:46:33.934]             function(cond) {
[17:46:33.934]                 is_error <- inherits(cond, "error")
[17:46:33.934]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:33.934]                   NULL)
[17:46:33.934]                 if (is_error) {
[17:46:33.934]                   sessionInformation <- function() {
[17:46:33.934]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:33.934]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:33.934]                       search = base::search(), system = base::Sys.info())
[17:46:33.934]                   }
[17:46:33.934]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.934]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:33.934]                     cond$call), session = sessionInformation(), 
[17:46:33.934]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:33.934]                   signalCondition(cond)
[17:46:33.934]                 }
[17:46:33.934]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:33.934]                 "immediateCondition"))) {
[17:46:33.934]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:33.934]                   ...future.conditions[[length(...future.conditions) + 
[17:46:33.934]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:33.934]                   if (TRUE && !signal) {
[17:46:33.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.934]                     {
[17:46:33.934]                       inherits <- base::inherits
[17:46:33.934]                       invokeRestart <- base::invokeRestart
[17:46:33.934]                       is.null <- base::is.null
[17:46:33.934]                       muffled <- FALSE
[17:46:33.934]                       if (inherits(cond, "message")) {
[17:46:33.934]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.934]                         if (muffled) 
[17:46:33.934]                           invokeRestart("muffleMessage")
[17:46:33.934]                       }
[17:46:33.934]                       else if (inherits(cond, "warning")) {
[17:46:33.934]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.934]                         if (muffled) 
[17:46:33.934]                           invokeRestart("muffleWarning")
[17:46:33.934]                       }
[17:46:33.934]                       else if (inherits(cond, "condition")) {
[17:46:33.934]                         if (!is.null(pattern)) {
[17:46:33.934]                           computeRestarts <- base::computeRestarts
[17:46:33.934]                           grepl <- base::grepl
[17:46:33.934]                           restarts <- computeRestarts(cond)
[17:46:33.934]                           for (restart in restarts) {
[17:46:33.934]                             name <- restart$name
[17:46:33.934]                             if (is.null(name)) 
[17:46:33.934]                               next
[17:46:33.934]                             if (!grepl(pattern, name)) 
[17:46:33.934]                               next
[17:46:33.934]                             invokeRestart(restart)
[17:46:33.934]                             muffled <- TRUE
[17:46:33.934]                             break
[17:46:33.934]                           }
[17:46:33.934]                         }
[17:46:33.934]                       }
[17:46:33.934]                       invisible(muffled)
[17:46:33.934]                     }
[17:46:33.934]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.934]                   }
[17:46:33.934]                 }
[17:46:33.934]                 else {
[17:46:33.934]                   if (TRUE) {
[17:46:33.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:33.934]                     {
[17:46:33.934]                       inherits <- base::inherits
[17:46:33.934]                       invokeRestart <- base::invokeRestart
[17:46:33.934]                       is.null <- base::is.null
[17:46:33.934]                       muffled <- FALSE
[17:46:33.934]                       if (inherits(cond, "message")) {
[17:46:33.934]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:33.934]                         if (muffled) 
[17:46:33.934]                           invokeRestart("muffleMessage")
[17:46:33.934]                       }
[17:46:33.934]                       else if (inherits(cond, "warning")) {
[17:46:33.934]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:33.934]                         if (muffled) 
[17:46:33.934]                           invokeRestart("muffleWarning")
[17:46:33.934]                       }
[17:46:33.934]                       else if (inherits(cond, "condition")) {
[17:46:33.934]                         if (!is.null(pattern)) {
[17:46:33.934]                           computeRestarts <- base::computeRestarts
[17:46:33.934]                           grepl <- base::grepl
[17:46:33.934]                           restarts <- computeRestarts(cond)
[17:46:33.934]                           for (restart in restarts) {
[17:46:33.934]                             name <- restart$name
[17:46:33.934]                             if (is.null(name)) 
[17:46:33.934]                               next
[17:46:33.934]                             if (!grepl(pattern, name)) 
[17:46:33.934]                               next
[17:46:33.934]                             invokeRestart(restart)
[17:46:33.934]                             muffled <- TRUE
[17:46:33.934]                             break
[17:46:33.934]                           }
[17:46:33.934]                         }
[17:46:33.934]                       }
[17:46:33.934]                       invisible(muffled)
[17:46:33.934]                     }
[17:46:33.934]                     muffleCondition(cond, pattern = "^muffle")
[17:46:33.934]                   }
[17:46:33.934]                 }
[17:46:33.934]             }
[17:46:33.934]         }))
[17:46:33.934]     }, error = function(ex) {
[17:46:33.934]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:33.934]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:33.934]                 ...future.rng), started = ...future.startTime, 
[17:46:33.934]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:33.934]             version = "1.8"), class = "FutureResult")
[17:46:33.934]     }, finally = {
[17:46:33.934]         if (!identical(...future.workdir, getwd())) 
[17:46:33.934]             setwd(...future.workdir)
[17:46:33.934]         {
[17:46:33.934]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:33.934]                 ...future.oldOptions$nwarnings <- NULL
[17:46:33.934]             }
[17:46:33.934]             base::options(...future.oldOptions)
[17:46:33.934]             if (.Platform$OS.type == "windows") {
[17:46:33.934]                 old_names <- names(...future.oldEnvVars)
[17:46:33.934]                 envs <- base::Sys.getenv()
[17:46:33.934]                 names <- names(envs)
[17:46:33.934]                 common <- intersect(names, old_names)
[17:46:33.934]                 added <- setdiff(names, old_names)
[17:46:33.934]                 removed <- setdiff(old_names, names)
[17:46:33.934]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:33.934]                   envs[common]]
[17:46:33.934]                 NAMES <- toupper(changed)
[17:46:33.934]                 args <- list()
[17:46:33.934]                 for (kk in seq_along(NAMES)) {
[17:46:33.934]                   name <- changed[[kk]]
[17:46:33.934]                   NAME <- NAMES[[kk]]
[17:46:33.934]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.934]                     next
[17:46:33.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.934]                 }
[17:46:33.934]                 NAMES <- toupper(added)
[17:46:33.934]                 for (kk in seq_along(NAMES)) {
[17:46:33.934]                   name <- added[[kk]]
[17:46:33.934]                   NAME <- NAMES[[kk]]
[17:46:33.934]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.934]                     next
[17:46:33.934]                   args[[name]] <- ""
[17:46:33.934]                 }
[17:46:33.934]                 NAMES <- toupper(removed)
[17:46:33.934]                 for (kk in seq_along(NAMES)) {
[17:46:33.934]                   name <- removed[[kk]]
[17:46:33.934]                   NAME <- NAMES[[kk]]
[17:46:33.934]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:33.934]                     next
[17:46:33.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:33.934]                 }
[17:46:33.934]                 if (length(args) > 0) 
[17:46:33.934]                   base::do.call(base::Sys.setenv, args = args)
[17:46:33.934]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:33.934]             }
[17:46:33.934]             else {
[17:46:33.934]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:33.934]             }
[17:46:33.934]             {
[17:46:33.934]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:33.934]                   0L) {
[17:46:33.934]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:33.934]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:33.934]                   base::options(opts)
[17:46:33.934]                 }
[17:46:33.934]                 {
[17:46:33.934]                   {
[17:46:33.934]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:33.934]                     NULL
[17:46:33.934]                   }
[17:46:33.934]                   options(future.plan = NULL)
[17:46:33.934]                   if (is.na(NA_character_)) 
[17:46:33.934]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:33.934]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:33.934]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:33.934]                     .init = FALSE)
[17:46:33.934]                 }
[17:46:33.934]             }
[17:46:33.934]         }
[17:46:33.934]     })
[17:46:33.934]     if (TRUE) {
[17:46:33.934]         base::sink(type = "output", split = FALSE)
[17:46:33.934]         if (TRUE) {
[17:46:33.934]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:33.934]         }
[17:46:33.934]         else {
[17:46:33.934]             ...future.result["stdout"] <- base::list(NULL)
[17:46:33.934]         }
[17:46:33.934]         base::close(...future.stdout)
[17:46:33.934]         ...future.stdout <- NULL
[17:46:33.934]     }
[17:46:33.934]     ...future.result$conditions <- ...future.conditions
[17:46:33.934]     ...future.result$finished <- base::Sys.time()
[17:46:33.934]     ...future.result
[17:46:33.934] }
[17:46:33.937] MultisessionFuture started
[17:46:33.937] - Launch lazy future ... done
[17:46:33.937] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:46:33.938] receiveMessageFromWorker() for ClusterFuture ...
[17:46:33.938] - Validating connection of MultisessionFuture
[17:46:33.938] - received message: FutureResult
[17:46:33.939] - Received FutureResult
[17:46:33.939] - Erased future from FutureRegistry
[17:46:33.939] result() for ClusterFuture ...
[17:46:33.939] - result already collected: FutureResult
[17:46:33.939] result() for ClusterFuture ... done
[17:46:33.939] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2084f295-2211-a929-4e73-1f967d00c458
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:33.939] result() for ClusterFuture ...
[17:46:33.939] - result already collected: FutureResult
[17:46:33.939] result() for ClusterFuture ... done
[17:46:33.940] result() for ClusterFuture ...
[17:46:33.940] - result already collected: FutureResult
[17:46:33.940] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[17:46:33.940] plan(): Setting new future strategy stack:
[17:46:33.941] List of future strategies:
[17:46:33.941] 1. FutureStrategy:
[17:46:33.941]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:33.941]    - tweaked: FALSE
[17:46:33.941]    - call: future::plan(oplan)
[17:46:33.941] plan(): nbrOfWorkers() = 1
> 
