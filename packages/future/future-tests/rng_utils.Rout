
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[18:06:47.692] plan(): Setting new future strategy stack:
[18:06:47.693] List of future strategies:
[18:06:47.693] 1. sequential:
[18:06:47.693]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:06:47.693]    - tweaked: FALSE
[18:06:47.693]    - call: future::plan("sequential")
[18:06:47.717] plan(): nbrOfWorkers() = 1
> 
> message("*** RNG ...")
*** RNG ...
> 
> set_random_seed(seed = NULL)
Warning in rm(list = ".Random.seed", envir = env, inherits = FALSE) :
  object '.Random.seed' not found
> seed <- get_random_seed()
> stopifnot(is.null(seed))
> 
> set_random_seed(seed = 42L)
> seed <- get_random_seed()
> stopifnot(identical(seed, 42L))
> 
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = FALSE)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be TRUE if logical: FALSE>
> stopifnot(inherits(res, "error"))
> 
> seed <- as_lecyer_cmrg_seed(seed = 42L)
Warning in RNGkind("L'Ecuyer-CMRG") :
  '.Random.seed[1]' is not a valid RNG kind so ignored
> str(seed)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(is_lecyer_cmrg_seed(seed))
> set_random_seed(seed = seed)
> stopifnot(identical(get_random_seed(), seed))
> 
> seed2 <- as_lecyer_cmrg_seed(seed = TRUE)
> str(seed2)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(identical(seed2, seed))
> 
> seed3 <- as_lecyer_cmrg_seed(seed = seed)
> str(seed3)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(identical(seed3, seed))
> 
> ## A random seed
> seed4 <- as_lecyer_cmrg_seed(seed = NA)
> str(seed4)
 int [1:7] 10407 1279540750 -941988041 -2007404020 745992093 -1794778694 2071448563
> stopifnot(is_lecyer_cmrg_seed(seed4))
> 
> 
> message(" - exceptions ...")
 - exceptions ...
> 
> ## Invalid L'Ecuyer seed
> seed_invalid <- seed + 1L
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = seed_invalid)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:7] 10408 -2133391686 507561767 1260545904 1362917093 -1772566378 -1344458669>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = 1:2)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:2] 1 2>
> stopifnot(inherits(res, "error"))
> 
> message(" - replicated RNG draws")
 - replicated RNG draws
> 
> seed_org <- next_random_seed()
> set.seed(42)
> 
> ## Draw two random number from 1:100 one after the other
> seed_before <- get_random_seed()
> kind_before <- RNGkind()
> x <- sample.int(100L, size = 5L)
> y <- sample.int(100L, size = 5L)
> seed_after <- get_random_seed()
> kind_after <- RNGkind()
> print(c(x, y))
 [1]  2  4 63 76 97  9 85 10 66 23
> 
> ## Draw two random number from 1:100 at once
> set_random_seed(seed_before)
> kind_before2 <- RNGkind()
> z <- sample.int(100L, size = 10L)
> seed_after2 <- get_random_seed()
> kind_after2 <- RNGkind()
> print(z)
 [1]  2  4 63 76 97  9 85 10 66 23
> 
> ## The RNG state is the same after the second ...
> ## run as after the first, two-step, approach
> stopifnot(identical(seed_after2, seed_after))
> stopifnot(identical(kind_before2, kind_before))
> stopifnot(identical(kind_after2, kind_after))
> 
> ## .... and the exact same set of random numbers where
> ## drawn [only true in R (>= 4.0.0)]
> if (getRversion() >= "4.0.0") {
+   stopifnot(identical(z, c(x, y)))
+ } else {
+   stopifnot(identical(z[seq_along(x)], x))
+ }
> 
> set_random_seed(seed_org)
> stopifnot(identical(get_random_seed(), seed_org))
> 
> message("*** RNG ... DONE")
*** RNG ... DONE
> 
> source("incl/end.R")
[18:06:47.749] plan(): Setting new future strategy stack:
[18:06:47.749] List of future strategies:
[18:06:47.749] 1. FutureStrategy:
[18:06:47.749]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:06:47.749]    - tweaked: FALSE
[18:06:47.749]    - call: future::plan(oplan)
[18:06:47.773] plan(): nbrOfWorkers() = 1
> 
