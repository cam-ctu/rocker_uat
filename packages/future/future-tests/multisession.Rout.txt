
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:03:04.425] plan(): Setting new future strategy stack:
[17:03:04.425] List of future strategies:
[17:03:04.425] 1. sequential:
[17:03:04.425]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.425]    - tweaked: FALSE
[17:03:04.425]    - call: future::plan("sequential")
[17:03:04.436] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[17:03:04.493] getGlobalsAndPackages() ...
[17:03:04.493] Searching for globals...
[17:03:04.496] - globals found: [1] ‘{’
[17:03:04.496] Searching for globals ... DONE
[17:03:04.496] Resolving globals: FALSE
[17:03:04.497] 
[17:03:04.497] 
[17:03:04.497] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:04.499] Packages needed by the future expression (n = 0): <none>
[17:03:04.499] Packages needed by future strategies (n = 0): <none>
[17:03:04.500] {
[17:03:04.500]     {
[17:03:04.500]         {
[17:03:04.500]             ...future.startTime <- base::Sys.time()
[17:03:04.500]             {
[17:03:04.500]                 {
[17:03:04.500]                   {
[17:03:04.500]                     base::local({
[17:03:04.500]                       has_future <- base::requireNamespace("future", 
[17:03:04.500]                         quietly = TRUE)
[17:03:04.500]                       if (has_future) {
[17:03:04.500]                         ns <- base::getNamespace("future")
[17:03:04.500]                         version <- ns[[".package"]][["version"]]
[17:03:04.500]                         if (is.null(version)) 
[17:03:04.500]                           version <- utils::packageVersion("future")
[17:03:04.500]                       }
[17:03:04.500]                       else {
[17:03:04.500]                         version <- NULL
[17:03:04.500]                       }
[17:03:04.500]                       if (!has_future || version < "1.8.0") {
[17:03:04.500]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.500]                           "", base::R.version$version.string), 
[17:03:04.500]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.500]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.500]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.500]                             "release", "version")], collapse = " "), 
[17:03:04.500]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.500]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.500]                           info)
[17:03:04.500]                         info <- base::paste(info, collapse = "; ")
[17:03:04.500]                         if (!has_future) {
[17:03:04.500]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.500]                             info)
[17:03:04.500]                         }
[17:03:04.500]                         else {
[17:03:04.500]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.500]                             info, version)
[17:03:04.500]                         }
[17:03:04.500]                         base::stop(msg)
[17:03:04.500]                       }
[17:03:04.500]                     })
[17:03:04.500]                   }
[17:03:04.500]                   ...future.strategy.old <- future::plan("list")
[17:03:04.500]                   options(future.plan = NULL)
[17:03:04.500]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.500]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.500]                 }
[17:03:04.500]                 ...future.workdir <- getwd()
[17:03:04.500]             }
[17:03:04.500]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.500]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.500]         }
[17:03:04.500]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.500]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.500]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.500]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.500]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.500]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.500]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.500]             base::names(...future.oldOptions))
[17:03:04.500]     }
[17:03:04.500]     if (FALSE) {
[17:03:04.500]     }
[17:03:04.500]     else {
[17:03:04.500]         if (TRUE) {
[17:03:04.500]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.500]                 open = "w")
[17:03:04.500]         }
[17:03:04.500]         else {
[17:03:04.500]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.500]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.500]         }
[17:03:04.500]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.500]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.500]             base::sink(type = "output", split = FALSE)
[17:03:04.500]             base::close(...future.stdout)
[17:03:04.500]         }, add = TRUE)
[17:03:04.500]     }
[17:03:04.500]     ...future.frame <- base::sys.nframe()
[17:03:04.500]     ...future.conditions <- base::list()
[17:03:04.500]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.500]     if (FALSE) {
[17:03:04.500]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.500]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.500]     }
[17:03:04.500]     ...future.result <- base::tryCatch({
[17:03:04.500]         base::withCallingHandlers({
[17:03:04.500]             ...future.value <- base::withVisible(base::local({
[17:03:04.500]                 42L
[17:03:04.500]             }))
[17:03:04.500]             future::FutureResult(value = ...future.value$value, 
[17:03:04.500]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.500]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.500]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.500]                     ...future.globalenv.names))
[17:03:04.500]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.500]         }, condition = base::local({
[17:03:04.500]             c <- base::c
[17:03:04.500]             inherits <- base::inherits
[17:03:04.500]             invokeRestart <- base::invokeRestart
[17:03:04.500]             length <- base::length
[17:03:04.500]             list <- base::list
[17:03:04.500]             seq.int <- base::seq.int
[17:03:04.500]             signalCondition <- base::signalCondition
[17:03:04.500]             sys.calls <- base::sys.calls
[17:03:04.500]             `[[` <- base::`[[`
[17:03:04.500]             `+` <- base::`+`
[17:03:04.500]             `<<-` <- base::`<<-`
[17:03:04.500]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.500]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.500]                   3L)]
[17:03:04.500]             }
[17:03:04.500]             function(cond) {
[17:03:04.500]                 is_error <- inherits(cond, "error")
[17:03:04.500]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.500]                   NULL)
[17:03:04.500]                 if (is_error) {
[17:03:04.500]                   sessionInformation <- function() {
[17:03:04.500]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.500]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.500]                       search = base::search(), system = base::Sys.info())
[17:03:04.500]                   }
[17:03:04.500]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.500]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.500]                     cond$call), session = sessionInformation(), 
[17:03:04.500]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.500]                   signalCondition(cond)
[17:03:04.500]                 }
[17:03:04.500]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.500]                 "immediateCondition"))) {
[17:03:04.500]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.500]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.500]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.500]                   if (TRUE && !signal) {
[17:03:04.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.500]                     {
[17:03:04.500]                       inherits <- base::inherits
[17:03:04.500]                       invokeRestart <- base::invokeRestart
[17:03:04.500]                       is.null <- base::is.null
[17:03:04.500]                       muffled <- FALSE
[17:03:04.500]                       if (inherits(cond, "message")) {
[17:03:04.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.500]                         if (muffled) 
[17:03:04.500]                           invokeRestart("muffleMessage")
[17:03:04.500]                       }
[17:03:04.500]                       else if (inherits(cond, "warning")) {
[17:03:04.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.500]                         if (muffled) 
[17:03:04.500]                           invokeRestart("muffleWarning")
[17:03:04.500]                       }
[17:03:04.500]                       else if (inherits(cond, "condition")) {
[17:03:04.500]                         if (!is.null(pattern)) {
[17:03:04.500]                           computeRestarts <- base::computeRestarts
[17:03:04.500]                           grepl <- base::grepl
[17:03:04.500]                           restarts <- computeRestarts(cond)
[17:03:04.500]                           for (restart in restarts) {
[17:03:04.500]                             name <- restart$name
[17:03:04.500]                             if (is.null(name)) 
[17:03:04.500]                               next
[17:03:04.500]                             if (!grepl(pattern, name)) 
[17:03:04.500]                               next
[17:03:04.500]                             invokeRestart(restart)
[17:03:04.500]                             muffled <- TRUE
[17:03:04.500]                             break
[17:03:04.500]                           }
[17:03:04.500]                         }
[17:03:04.500]                       }
[17:03:04.500]                       invisible(muffled)
[17:03:04.500]                     }
[17:03:04.500]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.500]                   }
[17:03:04.500]                 }
[17:03:04.500]                 else {
[17:03:04.500]                   if (TRUE) {
[17:03:04.500]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.500]                     {
[17:03:04.500]                       inherits <- base::inherits
[17:03:04.500]                       invokeRestart <- base::invokeRestart
[17:03:04.500]                       is.null <- base::is.null
[17:03:04.500]                       muffled <- FALSE
[17:03:04.500]                       if (inherits(cond, "message")) {
[17:03:04.500]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.500]                         if (muffled) 
[17:03:04.500]                           invokeRestart("muffleMessage")
[17:03:04.500]                       }
[17:03:04.500]                       else if (inherits(cond, "warning")) {
[17:03:04.500]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.500]                         if (muffled) 
[17:03:04.500]                           invokeRestart("muffleWarning")
[17:03:04.500]                       }
[17:03:04.500]                       else if (inherits(cond, "condition")) {
[17:03:04.500]                         if (!is.null(pattern)) {
[17:03:04.500]                           computeRestarts <- base::computeRestarts
[17:03:04.500]                           grepl <- base::grepl
[17:03:04.500]                           restarts <- computeRestarts(cond)
[17:03:04.500]                           for (restart in restarts) {
[17:03:04.500]                             name <- restart$name
[17:03:04.500]                             if (is.null(name)) 
[17:03:04.500]                               next
[17:03:04.500]                             if (!grepl(pattern, name)) 
[17:03:04.500]                               next
[17:03:04.500]                             invokeRestart(restart)
[17:03:04.500]                             muffled <- TRUE
[17:03:04.500]                             break
[17:03:04.500]                           }
[17:03:04.500]                         }
[17:03:04.500]                       }
[17:03:04.500]                       invisible(muffled)
[17:03:04.500]                     }
[17:03:04.500]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.500]                   }
[17:03:04.500]                 }
[17:03:04.500]             }
[17:03:04.500]         }))
[17:03:04.500]     }, error = function(ex) {
[17:03:04.500]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.500]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.500]                 ...future.rng), started = ...future.startTime, 
[17:03:04.500]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.500]             version = "1.8"), class = "FutureResult")
[17:03:04.500]     }, finally = {
[17:03:04.500]         if (!identical(...future.workdir, getwd())) 
[17:03:04.500]             setwd(...future.workdir)
[17:03:04.500]         {
[17:03:04.500]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.500]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.500]             }
[17:03:04.500]             base::options(...future.oldOptions)
[17:03:04.500]             if (.Platform$OS.type == "windows") {
[17:03:04.500]                 old_names <- names(...future.oldEnvVars)
[17:03:04.500]                 envs <- base::Sys.getenv()
[17:03:04.500]                 names <- names(envs)
[17:03:04.500]                 common <- intersect(names, old_names)
[17:03:04.500]                 added <- setdiff(names, old_names)
[17:03:04.500]                 removed <- setdiff(old_names, names)
[17:03:04.500]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.500]                   envs[common]]
[17:03:04.500]                 NAMES <- toupper(changed)
[17:03:04.500]                 args <- list()
[17:03:04.500]                 for (kk in seq_along(NAMES)) {
[17:03:04.500]                   name <- changed[[kk]]
[17:03:04.500]                   NAME <- NAMES[[kk]]
[17:03:04.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.500]                     next
[17:03:04.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.500]                 }
[17:03:04.500]                 NAMES <- toupper(added)
[17:03:04.500]                 for (kk in seq_along(NAMES)) {
[17:03:04.500]                   name <- added[[kk]]
[17:03:04.500]                   NAME <- NAMES[[kk]]
[17:03:04.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.500]                     next
[17:03:04.500]                   args[[name]] <- ""
[17:03:04.500]                 }
[17:03:04.500]                 NAMES <- toupper(removed)
[17:03:04.500]                 for (kk in seq_along(NAMES)) {
[17:03:04.500]                   name <- removed[[kk]]
[17:03:04.500]                   NAME <- NAMES[[kk]]
[17:03:04.500]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.500]                     next
[17:03:04.500]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.500]                 }
[17:03:04.500]                 if (length(args) > 0) 
[17:03:04.500]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.500]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.500]             }
[17:03:04.500]             else {
[17:03:04.500]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.500]             }
[17:03:04.500]             {
[17:03:04.500]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.500]                   0L) {
[17:03:04.500]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.500]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.500]                   base::options(opts)
[17:03:04.500]                 }
[17:03:04.500]                 {
[17:03:04.500]                   {
[17:03:04.500]                     NULL
[17:03:04.500]                     RNGkind("Mersenne-Twister")
[17:03:04.500]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.500]                       inherits = FALSE)
[17:03:04.500]                   }
[17:03:04.500]                   options(future.plan = NULL)
[17:03:04.500]                   if (is.na(NA_character_)) 
[17:03:04.500]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.500]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.500]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.500]                     .init = FALSE)
[17:03:04.500]                 }
[17:03:04.500]             }
[17:03:04.500]         }
[17:03:04.500]     })
[17:03:04.500]     if (TRUE) {
[17:03:04.500]         base::sink(type = "output", split = FALSE)
[17:03:04.500]         if (TRUE) {
[17:03:04.500]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.500]         }
[17:03:04.500]         else {
[17:03:04.500]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.500]         }
[17:03:04.500]         base::close(...future.stdout)
[17:03:04.500]         ...future.stdout <- NULL
[17:03:04.500]     }
[17:03:04.500]     ...future.result$conditions <- ...future.conditions
[17:03:04.500]     ...future.result$finished <- base::Sys.time()
[17:03:04.500]     ...future.result
[17:03:04.500] }
[17:03:04.502] plan(): Setting new future strategy stack:
[17:03:04.502] List of future strategies:
[17:03:04.502] 1. sequential:
[17:03:04.502]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.502]    - tweaked: FALSE
[17:03:04.502]    - call: NULL
[17:03:04.502] plan(): nbrOfWorkers() = 1
[17:03:04.503] plan(): Setting new future strategy stack:
[17:03:04.503] List of future strategies:
[17:03:04.503] 1. sequential:
[17:03:04.503]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.503]    - tweaked: FALSE
[17:03:04.503]    - call: future::plan("sequential")
[17:03:04.504] plan(): nbrOfWorkers() = 1
[17:03:04.504] SequentialFuture started (and completed)
[17:03:04.505] resolved() for ‘SequentialFuture’ ...
[17:03:04.505] - state: ‘finished’
[17:03:04.505] - run: TRUE
[17:03:04.505] - result: ‘FutureResult’
[17:03:04.505] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[17:03:04.509] getGlobalsAndPackages() ...
[17:03:04.509] Searching for globals...
[17:03:04.514] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:03:04.514] Searching for globals ... DONE
[17:03:04.515] Resolving globals: FALSE
[17:03:04.515] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:04.516] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:03:04.516] - globals: [1] ‘a’
[17:03:04.516] 
[17:03:04.516] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:04.517] Packages needed by the future expression (n = 0): <none>
[17:03:04.517] Packages needed by future strategies (n = 0): <none>
[17:03:04.518] {
[17:03:04.518]     {
[17:03:04.518]         {
[17:03:04.518]             ...future.startTime <- base::Sys.time()
[17:03:04.518]             {
[17:03:04.518]                 {
[17:03:04.518]                   {
[17:03:04.518]                     base::local({
[17:03:04.518]                       has_future <- base::requireNamespace("future", 
[17:03:04.518]                         quietly = TRUE)
[17:03:04.518]                       if (has_future) {
[17:03:04.518]                         ns <- base::getNamespace("future")
[17:03:04.518]                         version <- ns[[".package"]][["version"]]
[17:03:04.518]                         if (is.null(version)) 
[17:03:04.518]                           version <- utils::packageVersion("future")
[17:03:04.518]                       }
[17:03:04.518]                       else {
[17:03:04.518]                         version <- NULL
[17:03:04.518]                       }
[17:03:04.518]                       if (!has_future || version < "1.8.0") {
[17:03:04.518]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.518]                           "", base::R.version$version.string), 
[17:03:04.518]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.518]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.518]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.518]                             "release", "version")], collapse = " "), 
[17:03:04.518]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.518]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.518]                           info)
[17:03:04.518]                         info <- base::paste(info, collapse = "; ")
[17:03:04.518]                         if (!has_future) {
[17:03:04.518]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.518]                             info)
[17:03:04.518]                         }
[17:03:04.518]                         else {
[17:03:04.518]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.518]                             info, version)
[17:03:04.518]                         }
[17:03:04.518]                         base::stop(msg)
[17:03:04.518]                       }
[17:03:04.518]                     })
[17:03:04.518]                   }
[17:03:04.518]                   ...future.strategy.old <- future::plan("list")
[17:03:04.518]                   options(future.plan = NULL)
[17:03:04.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.518]                 }
[17:03:04.518]                 ...future.workdir <- getwd()
[17:03:04.518]             }
[17:03:04.518]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.518]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.518]         }
[17:03:04.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.518]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.518]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.518]             base::names(...future.oldOptions))
[17:03:04.518]     }
[17:03:04.518]     if (FALSE) {
[17:03:04.518]     }
[17:03:04.518]     else {
[17:03:04.518]         if (TRUE) {
[17:03:04.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.518]                 open = "w")
[17:03:04.518]         }
[17:03:04.518]         else {
[17:03:04.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.518]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.518]         }
[17:03:04.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.518]             base::sink(type = "output", split = FALSE)
[17:03:04.518]             base::close(...future.stdout)
[17:03:04.518]         }, add = TRUE)
[17:03:04.518]     }
[17:03:04.518]     ...future.frame <- base::sys.nframe()
[17:03:04.518]     ...future.conditions <- base::list()
[17:03:04.518]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.518]     if (FALSE) {
[17:03:04.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.518]     }
[17:03:04.518]     ...future.result <- base::tryCatch({
[17:03:04.518]         base::withCallingHandlers({
[17:03:04.518]             ...future.value <- base::withVisible(base::local({
[17:03:04.518]                 b <- 3
[17:03:04.518]                 c <- 2
[17:03:04.518]                 a * b * c
[17:03:04.518]             }))
[17:03:04.518]             future::FutureResult(value = ...future.value$value, 
[17:03:04.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.518]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.518]                     ...future.globalenv.names))
[17:03:04.518]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.518]         }, condition = base::local({
[17:03:04.518]             c <- base::c
[17:03:04.518]             inherits <- base::inherits
[17:03:04.518]             invokeRestart <- base::invokeRestart
[17:03:04.518]             length <- base::length
[17:03:04.518]             list <- base::list
[17:03:04.518]             seq.int <- base::seq.int
[17:03:04.518]             signalCondition <- base::signalCondition
[17:03:04.518]             sys.calls <- base::sys.calls
[17:03:04.518]             `[[` <- base::`[[`
[17:03:04.518]             `+` <- base::`+`
[17:03:04.518]             `<<-` <- base::`<<-`
[17:03:04.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.518]                   3L)]
[17:03:04.518]             }
[17:03:04.518]             function(cond) {
[17:03:04.518]                 is_error <- inherits(cond, "error")
[17:03:04.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.518]                   NULL)
[17:03:04.518]                 if (is_error) {
[17:03:04.518]                   sessionInformation <- function() {
[17:03:04.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.518]                       search = base::search(), system = base::Sys.info())
[17:03:04.518]                   }
[17:03:04.518]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.518]                     cond$call), session = sessionInformation(), 
[17:03:04.518]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.518]                   signalCondition(cond)
[17:03:04.518]                 }
[17:03:04.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.518]                 "immediateCondition"))) {
[17:03:04.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.518]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.518]                   if (TRUE && !signal) {
[17:03:04.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.518]                     {
[17:03:04.518]                       inherits <- base::inherits
[17:03:04.518]                       invokeRestart <- base::invokeRestart
[17:03:04.518]                       is.null <- base::is.null
[17:03:04.518]                       muffled <- FALSE
[17:03:04.518]                       if (inherits(cond, "message")) {
[17:03:04.518]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.518]                         if (muffled) 
[17:03:04.518]                           invokeRestart("muffleMessage")
[17:03:04.518]                       }
[17:03:04.518]                       else if (inherits(cond, "warning")) {
[17:03:04.518]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.518]                         if (muffled) 
[17:03:04.518]                           invokeRestart("muffleWarning")
[17:03:04.518]                       }
[17:03:04.518]                       else if (inherits(cond, "condition")) {
[17:03:04.518]                         if (!is.null(pattern)) {
[17:03:04.518]                           computeRestarts <- base::computeRestarts
[17:03:04.518]                           grepl <- base::grepl
[17:03:04.518]                           restarts <- computeRestarts(cond)
[17:03:04.518]                           for (restart in restarts) {
[17:03:04.518]                             name <- restart$name
[17:03:04.518]                             if (is.null(name)) 
[17:03:04.518]                               next
[17:03:04.518]                             if (!grepl(pattern, name)) 
[17:03:04.518]                               next
[17:03:04.518]                             invokeRestart(restart)
[17:03:04.518]                             muffled <- TRUE
[17:03:04.518]                             break
[17:03:04.518]                           }
[17:03:04.518]                         }
[17:03:04.518]                       }
[17:03:04.518]                       invisible(muffled)
[17:03:04.518]                     }
[17:03:04.518]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.518]                   }
[17:03:04.518]                 }
[17:03:04.518]                 else {
[17:03:04.518]                   if (TRUE) {
[17:03:04.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.518]                     {
[17:03:04.518]                       inherits <- base::inherits
[17:03:04.518]                       invokeRestart <- base::invokeRestart
[17:03:04.518]                       is.null <- base::is.null
[17:03:04.518]                       muffled <- FALSE
[17:03:04.518]                       if (inherits(cond, "message")) {
[17:03:04.518]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.518]                         if (muffled) 
[17:03:04.518]                           invokeRestart("muffleMessage")
[17:03:04.518]                       }
[17:03:04.518]                       else if (inherits(cond, "warning")) {
[17:03:04.518]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.518]                         if (muffled) 
[17:03:04.518]                           invokeRestart("muffleWarning")
[17:03:04.518]                       }
[17:03:04.518]                       else if (inherits(cond, "condition")) {
[17:03:04.518]                         if (!is.null(pattern)) {
[17:03:04.518]                           computeRestarts <- base::computeRestarts
[17:03:04.518]                           grepl <- base::grepl
[17:03:04.518]                           restarts <- computeRestarts(cond)
[17:03:04.518]                           for (restart in restarts) {
[17:03:04.518]                             name <- restart$name
[17:03:04.518]                             if (is.null(name)) 
[17:03:04.518]                               next
[17:03:04.518]                             if (!grepl(pattern, name)) 
[17:03:04.518]                               next
[17:03:04.518]                             invokeRestart(restart)
[17:03:04.518]                             muffled <- TRUE
[17:03:04.518]                             break
[17:03:04.518]                           }
[17:03:04.518]                         }
[17:03:04.518]                       }
[17:03:04.518]                       invisible(muffled)
[17:03:04.518]                     }
[17:03:04.518]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.518]                   }
[17:03:04.518]                 }
[17:03:04.518]             }
[17:03:04.518]         }))
[17:03:04.518]     }, error = function(ex) {
[17:03:04.518]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.518]                 ...future.rng), started = ...future.startTime, 
[17:03:04.518]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.518]             version = "1.8"), class = "FutureResult")
[17:03:04.518]     }, finally = {
[17:03:04.518]         if (!identical(...future.workdir, getwd())) 
[17:03:04.518]             setwd(...future.workdir)
[17:03:04.518]         {
[17:03:04.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.518]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.518]             }
[17:03:04.518]             base::options(...future.oldOptions)
[17:03:04.518]             if (.Platform$OS.type == "windows") {
[17:03:04.518]                 old_names <- names(...future.oldEnvVars)
[17:03:04.518]                 envs <- base::Sys.getenv()
[17:03:04.518]                 names <- names(envs)
[17:03:04.518]                 common <- intersect(names, old_names)
[17:03:04.518]                 added <- setdiff(names, old_names)
[17:03:04.518]                 removed <- setdiff(old_names, names)
[17:03:04.518]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.518]                   envs[common]]
[17:03:04.518]                 NAMES <- toupper(changed)
[17:03:04.518]                 args <- list()
[17:03:04.518]                 for (kk in seq_along(NAMES)) {
[17:03:04.518]                   name <- changed[[kk]]
[17:03:04.518]                   NAME <- NAMES[[kk]]
[17:03:04.518]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.518]                     next
[17:03:04.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.518]                 }
[17:03:04.518]                 NAMES <- toupper(added)
[17:03:04.518]                 for (kk in seq_along(NAMES)) {
[17:03:04.518]                   name <- added[[kk]]
[17:03:04.518]                   NAME <- NAMES[[kk]]
[17:03:04.518]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.518]                     next
[17:03:04.518]                   args[[name]] <- ""
[17:03:04.518]                 }
[17:03:04.518]                 NAMES <- toupper(removed)
[17:03:04.518]                 for (kk in seq_along(NAMES)) {
[17:03:04.518]                   name <- removed[[kk]]
[17:03:04.518]                   NAME <- NAMES[[kk]]
[17:03:04.518]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.518]                     next
[17:03:04.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.518]                 }
[17:03:04.518]                 if (length(args) > 0) 
[17:03:04.518]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.518]             }
[17:03:04.518]             else {
[17:03:04.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.518]             }
[17:03:04.518]             {
[17:03:04.518]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.518]                   0L) {
[17:03:04.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.518]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.518]                   base::options(opts)
[17:03:04.518]                 }
[17:03:04.518]                 {
[17:03:04.518]                   {
[17:03:04.518]                     NULL
[17:03:04.518]                     RNGkind("Mersenne-Twister")
[17:03:04.518]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.518]                       inherits = FALSE)
[17:03:04.518]                   }
[17:03:04.518]                   options(future.plan = NULL)
[17:03:04.518]                   if (is.na(NA_character_)) 
[17:03:04.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.518]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.518]                     .init = FALSE)
[17:03:04.518]                 }
[17:03:04.518]             }
[17:03:04.518]         }
[17:03:04.518]     })
[17:03:04.518]     if (TRUE) {
[17:03:04.518]         base::sink(type = "output", split = FALSE)
[17:03:04.518]         if (TRUE) {
[17:03:04.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.518]         }
[17:03:04.518]         else {
[17:03:04.518]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.518]         }
[17:03:04.518]         base::close(...future.stdout)
[17:03:04.518]         ...future.stdout <- NULL
[17:03:04.518]     }
[17:03:04.518]     ...future.result$conditions <- ...future.conditions
[17:03:04.518]     ...future.result$finished <- base::Sys.time()
[17:03:04.518]     ...future.result
[17:03:04.518] }
[17:03:04.519] assign_globals() ...
[17:03:04.519] List of 1
[17:03:04.519]  $ a: num 0
[17:03:04.519]  - attr(*, "where")=List of 1
[17:03:04.519]   ..$ a:<environment: R_EmptyEnv> 
[17:03:04.519]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:04.519]  - attr(*, "resolved")= logi FALSE
[17:03:04.519]  - attr(*, "total_size")= num 56
[17:03:04.527] - copied ‘a’ to environment
[17:03:04.527] assign_globals() ... done
[17:03:04.527] plan(): Setting new future strategy stack:
[17:03:04.527] List of future strategies:
[17:03:04.527] 1. sequential:
[17:03:04.527]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.527]    - tweaked: FALSE
[17:03:04.527]    - call: NULL
[17:03:04.528] plan(): nbrOfWorkers() = 1
[17:03:04.528] plan(): Setting new future strategy stack:
[17:03:04.529] List of future strategies:
[17:03:04.529] 1. sequential:
[17:03:04.529]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.529]    - tweaked: FALSE
[17:03:04.529]    - call: future::plan("sequential")
[17:03:04.529] plan(): nbrOfWorkers() = 1
[17:03:04.529] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[17:03:04.533] getGlobalsAndPackages() ...
[17:03:04.533] Searching for globals...
[17:03:04.534] - globals found: [2] ‘{’, ‘ii’
[17:03:04.534] Searching for globals ... DONE
[17:03:04.534] Resolving globals: FALSE
[17:03:04.534] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:04.535] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:04.535] - globals: [1] ‘ii’
[17:03:04.535] 
[17:03:04.535] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[17:03:04.539] getGlobalsAndPackages() ...
[17:03:04.539] Searching for globals...
[17:03:04.539] - globals found: [2] ‘{’, ‘ii’
[17:03:04.540] Searching for globals ... DONE
[17:03:04.540] Resolving globals: FALSE
[17:03:04.540] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:04.540] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:04.541] - globals: [1] ‘ii’
[17:03:04.541] 
[17:03:04.541] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[17:03:04.541] Packages needed by the future expression (n = 0): <none>
[17:03:04.541] Packages needed by future strategies (n = 0): <none>
[17:03:04.542] {
[17:03:04.542]     {
[17:03:04.542]         {
[17:03:04.542]             ...future.startTime <- base::Sys.time()
[17:03:04.542]             {
[17:03:04.542]                 {
[17:03:04.542]                   {
[17:03:04.542]                     base::local({
[17:03:04.542]                       has_future <- base::requireNamespace("future", 
[17:03:04.542]                         quietly = TRUE)
[17:03:04.542]                       if (has_future) {
[17:03:04.542]                         ns <- base::getNamespace("future")
[17:03:04.542]                         version <- ns[[".package"]][["version"]]
[17:03:04.542]                         if (is.null(version)) 
[17:03:04.542]                           version <- utils::packageVersion("future")
[17:03:04.542]                       }
[17:03:04.542]                       else {
[17:03:04.542]                         version <- NULL
[17:03:04.542]                       }
[17:03:04.542]                       if (!has_future || version < "1.8.0") {
[17:03:04.542]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.542]                           "", base::R.version$version.string), 
[17:03:04.542]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.542]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.542]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.542]                             "release", "version")], collapse = " "), 
[17:03:04.542]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.542]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.542]                           info)
[17:03:04.542]                         info <- base::paste(info, collapse = "; ")
[17:03:04.542]                         if (!has_future) {
[17:03:04.542]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.542]                             info)
[17:03:04.542]                         }
[17:03:04.542]                         else {
[17:03:04.542]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.542]                             info, version)
[17:03:04.542]                         }
[17:03:04.542]                         base::stop(msg)
[17:03:04.542]                       }
[17:03:04.542]                     })
[17:03:04.542]                   }
[17:03:04.542]                   ...future.strategy.old <- future::plan("list")
[17:03:04.542]                   options(future.plan = NULL)
[17:03:04.542]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.542]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.542]                 }
[17:03:04.542]                 ...future.workdir <- getwd()
[17:03:04.542]             }
[17:03:04.542]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.542]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.542]         }
[17:03:04.542]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.542]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.542]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.542]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.542]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.542]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.542]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.542]             base::names(...future.oldOptions))
[17:03:04.542]     }
[17:03:04.542]     if (FALSE) {
[17:03:04.542]     }
[17:03:04.542]     else {
[17:03:04.542]         if (TRUE) {
[17:03:04.542]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.542]                 open = "w")
[17:03:04.542]         }
[17:03:04.542]         else {
[17:03:04.542]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.542]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.542]         }
[17:03:04.542]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.542]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.542]             base::sink(type = "output", split = FALSE)
[17:03:04.542]             base::close(...future.stdout)
[17:03:04.542]         }, add = TRUE)
[17:03:04.542]     }
[17:03:04.542]     ...future.frame <- base::sys.nframe()
[17:03:04.542]     ...future.conditions <- base::list()
[17:03:04.542]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.542]     if (FALSE) {
[17:03:04.542]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.542]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.542]     }
[17:03:04.542]     ...future.result <- base::tryCatch({
[17:03:04.542]         base::withCallingHandlers({
[17:03:04.542]             ...future.value <- base::withVisible(base::local({
[17:03:04.542]                 ii
[17:03:04.542]             }))
[17:03:04.542]             future::FutureResult(value = ...future.value$value, 
[17:03:04.542]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.542]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.542]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.542]                     ...future.globalenv.names))
[17:03:04.542]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.542]         }, condition = base::local({
[17:03:04.542]             c <- base::c
[17:03:04.542]             inherits <- base::inherits
[17:03:04.542]             invokeRestart <- base::invokeRestart
[17:03:04.542]             length <- base::length
[17:03:04.542]             list <- base::list
[17:03:04.542]             seq.int <- base::seq.int
[17:03:04.542]             signalCondition <- base::signalCondition
[17:03:04.542]             sys.calls <- base::sys.calls
[17:03:04.542]             `[[` <- base::`[[`
[17:03:04.542]             `+` <- base::`+`
[17:03:04.542]             `<<-` <- base::`<<-`
[17:03:04.542]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.542]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.542]                   3L)]
[17:03:04.542]             }
[17:03:04.542]             function(cond) {
[17:03:04.542]                 is_error <- inherits(cond, "error")
[17:03:04.542]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.542]                   NULL)
[17:03:04.542]                 if (is_error) {
[17:03:04.542]                   sessionInformation <- function() {
[17:03:04.542]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.542]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.542]                       search = base::search(), system = base::Sys.info())
[17:03:04.542]                   }
[17:03:04.542]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.542]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.542]                     cond$call), session = sessionInformation(), 
[17:03:04.542]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.542]                   signalCondition(cond)
[17:03:04.542]                 }
[17:03:04.542]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.542]                 "immediateCondition"))) {
[17:03:04.542]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.542]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.542]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.542]                   if (TRUE && !signal) {
[17:03:04.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.542]                     {
[17:03:04.542]                       inherits <- base::inherits
[17:03:04.542]                       invokeRestart <- base::invokeRestart
[17:03:04.542]                       is.null <- base::is.null
[17:03:04.542]                       muffled <- FALSE
[17:03:04.542]                       if (inherits(cond, "message")) {
[17:03:04.542]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.542]                         if (muffled) 
[17:03:04.542]                           invokeRestart("muffleMessage")
[17:03:04.542]                       }
[17:03:04.542]                       else if (inherits(cond, "warning")) {
[17:03:04.542]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.542]                         if (muffled) 
[17:03:04.542]                           invokeRestart("muffleWarning")
[17:03:04.542]                       }
[17:03:04.542]                       else if (inherits(cond, "condition")) {
[17:03:04.542]                         if (!is.null(pattern)) {
[17:03:04.542]                           computeRestarts <- base::computeRestarts
[17:03:04.542]                           grepl <- base::grepl
[17:03:04.542]                           restarts <- computeRestarts(cond)
[17:03:04.542]                           for (restart in restarts) {
[17:03:04.542]                             name <- restart$name
[17:03:04.542]                             if (is.null(name)) 
[17:03:04.542]                               next
[17:03:04.542]                             if (!grepl(pattern, name)) 
[17:03:04.542]                               next
[17:03:04.542]                             invokeRestart(restart)
[17:03:04.542]                             muffled <- TRUE
[17:03:04.542]                             break
[17:03:04.542]                           }
[17:03:04.542]                         }
[17:03:04.542]                       }
[17:03:04.542]                       invisible(muffled)
[17:03:04.542]                     }
[17:03:04.542]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.542]                   }
[17:03:04.542]                 }
[17:03:04.542]                 else {
[17:03:04.542]                   if (TRUE) {
[17:03:04.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.542]                     {
[17:03:04.542]                       inherits <- base::inherits
[17:03:04.542]                       invokeRestart <- base::invokeRestart
[17:03:04.542]                       is.null <- base::is.null
[17:03:04.542]                       muffled <- FALSE
[17:03:04.542]                       if (inherits(cond, "message")) {
[17:03:04.542]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.542]                         if (muffled) 
[17:03:04.542]                           invokeRestart("muffleMessage")
[17:03:04.542]                       }
[17:03:04.542]                       else if (inherits(cond, "warning")) {
[17:03:04.542]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.542]                         if (muffled) 
[17:03:04.542]                           invokeRestart("muffleWarning")
[17:03:04.542]                       }
[17:03:04.542]                       else if (inherits(cond, "condition")) {
[17:03:04.542]                         if (!is.null(pattern)) {
[17:03:04.542]                           computeRestarts <- base::computeRestarts
[17:03:04.542]                           grepl <- base::grepl
[17:03:04.542]                           restarts <- computeRestarts(cond)
[17:03:04.542]                           for (restart in restarts) {
[17:03:04.542]                             name <- restart$name
[17:03:04.542]                             if (is.null(name)) 
[17:03:04.542]                               next
[17:03:04.542]                             if (!grepl(pattern, name)) 
[17:03:04.542]                               next
[17:03:04.542]                             invokeRestart(restart)
[17:03:04.542]                             muffled <- TRUE
[17:03:04.542]                             break
[17:03:04.542]                           }
[17:03:04.542]                         }
[17:03:04.542]                       }
[17:03:04.542]                       invisible(muffled)
[17:03:04.542]                     }
[17:03:04.542]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.542]                   }
[17:03:04.542]                 }
[17:03:04.542]             }
[17:03:04.542]         }))
[17:03:04.542]     }, error = function(ex) {
[17:03:04.542]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.542]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.542]                 ...future.rng), started = ...future.startTime, 
[17:03:04.542]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.542]             version = "1.8"), class = "FutureResult")
[17:03:04.542]     }, finally = {
[17:03:04.542]         if (!identical(...future.workdir, getwd())) 
[17:03:04.542]             setwd(...future.workdir)
[17:03:04.542]         {
[17:03:04.542]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.542]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.542]             }
[17:03:04.542]             base::options(...future.oldOptions)
[17:03:04.542]             if (.Platform$OS.type == "windows") {
[17:03:04.542]                 old_names <- names(...future.oldEnvVars)
[17:03:04.542]                 envs <- base::Sys.getenv()
[17:03:04.542]                 names <- names(envs)
[17:03:04.542]                 common <- intersect(names, old_names)
[17:03:04.542]                 added <- setdiff(names, old_names)
[17:03:04.542]                 removed <- setdiff(old_names, names)
[17:03:04.542]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.542]                   envs[common]]
[17:03:04.542]                 NAMES <- toupper(changed)
[17:03:04.542]                 args <- list()
[17:03:04.542]                 for (kk in seq_along(NAMES)) {
[17:03:04.542]                   name <- changed[[kk]]
[17:03:04.542]                   NAME <- NAMES[[kk]]
[17:03:04.542]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.542]                     next
[17:03:04.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.542]                 }
[17:03:04.542]                 NAMES <- toupper(added)
[17:03:04.542]                 for (kk in seq_along(NAMES)) {
[17:03:04.542]                   name <- added[[kk]]
[17:03:04.542]                   NAME <- NAMES[[kk]]
[17:03:04.542]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.542]                     next
[17:03:04.542]                   args[[name]] <- ""
[17:03:04.542]                 }
[17:03:04.542]                 NAMES <- toupper(removed)
[17:03:04.542]                 for (kk in seq_along(NAMES)) {
[17:03:04.542]                   name <- removed[[kk]]
[17:03:04.542]                   NAME <- NAMES[[kk]]
[17:03:04.542]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.542]                     next
[17:03:04.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.542]                 }
[17:03:04.542]                 if (length(args) > 0) 
[17:03:04.542]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.542]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.542]             }
[17:03:04.542]             else {
[17:03:04.542]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.542]             }
[17:03:04.542]             {
[17:03:04.542]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.542]                   0L) {
[17:03:04.542]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.542]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.542]                   base::options(opts)
[17:03:04.542]                 }
[17:03:04.542]                 {
[17:03:04.542]                   {
[17:03:04.542]                     NULL
[17:03:04.542]                     RNGkind("Mersenne-Twister")
[17:03:04.542]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.542]                       inherits = FALSE)
[17:03:04.542]                   }
[17:03:04.542]                   options(future.plan = NULL)
[17:03:04.542]                   if (is.na(NA_character_)) 
[17:03:04.542]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.542]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.542]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.542]                     .init = FALSE)
[17:03:04.542]                 }
[17:03:04.542]             }
[17:03:04.542]         }
[17:03:04.542]     })
[17:03:04.542]     if (TRUE) {
[17:03:04.542]         base::sink(type = "output", split = FALSE)
[17:03:04.542]         if (TRUE) {
[17:03:04.542]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.542]         }
[17:03:04.542]         else {
[17:03:04.542]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.542]         }
[17:03:04.542]         base::close(...future.stdout)
[17:03:04.542]         ...future.stdout <- NULL
[17:03:04.542]     }
[17:03:04.542]     ...future.result$conditions <- ...future.conditions
[17:03:04.542]     ...future.result$finished <- base::Sys.time()
[17:03:04.542]     ...future.result
[17:03:04.542] }
[17:03:04.544] assign_globals() ...
[17:03:04.544] List of 1
[17:03:04.544]  $ ii: int 1
[17:03:04.544]  - attr(*, "where")=List of 1
[17:03:04.544]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:04.544]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:04.544]  - attr(*, "resolved")= logi FALSE
[17:03:04.544]  - attr(*, "total_size")= num 56
[17:03:04.546] - copied ‘ii’ to environment
[17:03:04.546] assign_globals() ... done
[17:03:04.546] plan(): Setting new future strategy stack:
[17:03:04.546] List of future strategies:
[17:03:04.546] 1. sequential:
[17:03:04.546]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.546]    - tweaked: FALSE
[17:03:04.546]    - call: NULL
[17:03:04.547] plan(): nbrOfWorkers() = 1
[17:03:04.548] plan(): Setting new future strategy stack:
[17:03:04.548] List of future strategies:
[17:03:04.548] 1. sequential:
[17:03:04.548]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.548]    - tweaked: FALSE
[17:03:04.548]    - call: future::plan("sequential")
[17:03:04.548] plan(): nbrOfWorkers() = 1
[17:03:04.548] SequentialFuture started (and completed)
[17:03:04.549] Packages needed by the future expression (n = 0): <none>
[17:03:04.549] Packages needed by future strategies (n = 0): <none>
[17:03:04.549] {
[17:03:04.549]     {
[17:03:04.549]         {
[17:03:04.549]             ...future.startTime <- base::Sys.time()
[17:03:04.549]             {
[17:03:04.549]                 {
[17:03:04.549]                   {
[17:03:04.549]                     base::local({
[17:03:04.549]                       has_future <- base::requireNamespace("future", 
[17:03:04.549]                         quietly = TRUE)
[17:03:04.549]                       if (has_future) {
[17:03:04.549]                         ns <- base::getNamespace("future")
[17:03:04.549]                         version <- ns[[".package"]][["version"]]
[17:03:04.549]                         if (is.null(version)) 
[17:03:04.549]                           version <- utils::packageVersion("future")
[17:03:04.549]                       }
[17:03:04.549]                       else {
[17:03:04.549]                         version <- NULL
[17:03:04.549]                       }
[17:03:04.549]                       if (!has_future || version < "1.8.0") {
[17:03:04.549]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.549]                           "", base::R.version$version.string), 
[17:03:04.549]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.549]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.549]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.549]                             "release", "version")], collapse = " "), 
[17:03:04.549]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.549]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.549]                           info)
[17:03:04.549]                         info <- base::paste(info, collapse = "; ")
[17:03:04.549]                         if (!has_future) {
[17:03:04.549]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.549]                             info)
[17:03:04.549]                         }
[17:03:04.549]                         else {
[17:03:04.549]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.549]                             info, version)
[17:03:04.549]                         }
[17:03:04.549]                         base::stop(msg)
[17:03:04.549]                       }
[17:03:04.549]                     })
[17:03:04.549]                   }
[17:03:04.549]                   ...future.strategy.old <- future::plan("list")
[17:03:04.549]                   options(future.plan = NULL)
[17:03:04.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.549]                 }
[17:03:04.549]                 ...future.workdir <- getwd()
[17:03:04.549]             }
[17:03:04.549]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.549]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.549]         }
[17:03:04.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.549]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.549]             base::names(...future.oldOptions))
[17:03:04.549]     }
[17:03:04.549]     if (FALSE) {
[17:03:04.549]     }
[17:03:04.549]     else {
[17:03:04.549]         if (TRUE) {
[17:03:04.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.549]                 open = "w")
[17:03:04.549]         }
[17:03:04.549]         else {
[17:03:04.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.549]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.549]         }
[17:03:04.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.549]             base::sink(type = "output", split = FALSE)
[17:03:04.549]             base::close(...future.stdout)
[17:03:04.549]         }, add = TRUE)
[17:03:04.549]     }
[17:03:04.549]     ...future.frame <- base::sys.nframe()
[17:03:04.549]     ...future.conditions <- base::list()
[17:03:04.549]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.549]     if (FALSE) {
[17:03:04.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.549]     }
[17:03:04.549]     ...future.result <- base::tryCatch({
[17:03:04.549]         base::withCallingHandlers({
[17:03:04.549]             ...future.value <- base::withVisible(base::local({
[17:03:04.549]                 ii
[17:03:04.549]             }))
[17:03:04.549]             future::FutureResult(value = ...future.value$value, 
[17:03:04.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.549]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.549]                     ...future.globalenv.names))
[17:03:04.549]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.549]         }, condition = base::local({
[17:03:04.549]             c <- base::c
[17:03:04.549]             inherits <- base::inherits
[17:03:04.549]             invokeRestart <- base::invokeRestart
[17:03:04.549]             length <- base::length
[17:03:04.549]             list <- base::list
[17:03:04.549]             seq.int <- base::seq.int
[17:03:04.549]             signalCondition <- base::signalCondition
[17:03:04.549]             sys.calls <- base::sys.calls
[17:03:04.549]             `[[` <- base::`[[`
[17:03:04.549]             `+` <- base::`+`
[17:03:04.549]             `<<-` <- base::`<<-`
[17:03:04.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.549]                   3L)]
[17:03:04.549]             }
[17:03:04.549]             function(cond) {
[17:03:04.549]                 is_error <- inherits(cond, "error")
[17:03:04.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.549]                   NULL)
[17:03:04.549]                 if (is_error) {
[17:03:04.549]                   sessionInformation <- function() {
[17:03:04.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.549]                       search = base::search(), system = base::Sys.info())
[17:03:04.549]                   }
[17:03:04.549]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.549]                     cond$call), session = sessionInformation(), 
[17:03:04.549]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.549]                   signalCondition(cond)
[17:03:04.549]                 }
[17:03:04.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.549]                 "immediateCondition"))) {
[17:03:04.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.549]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.549]                   if (TRUE && !signal) {
[17:03:04.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.549]                     {
[17:03:04.549]                       inherits <- base::inherits
[17:03:04.549]                       invokeRestart <- base::invokeRestart
[17:03:04.549]                       is.null <- base::is.null
[17:03:04.549]                       muffled <- FALSE
[17:03:04.549]                       if (inherits(cond, "message")) {
[17:03:04.549]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.549]                         if (muffled) 
[17:03:04.549]                           invokeRestart("muffleMessage")
[17:03:04.549]                       }
[17:03:04.549]                       else if (inherits(cond, "warning")) {
[17:03:04.549]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.549]                         if (muffled) 
[17:03:04.549]                           invokeRestart("muffleWarning")
[17:03:04.549]                       }
[17:03:04.549]                       else if (inherits(cond, "condition")) {
[17:03:04.549]                         if (!is.null(pattern)) {
[17:03:04.549]                           computeRestarts <- base::computeRestarts
[17:03:04.549]                           grepl <- base::grepl
[17:03:04.549]                           restarts <- computeRestarts(cond)
[17:03:04.549]                           for (restart in restarts) {
[17:03:04.549]                             name <- restart$name
[17:03:04.549]                             if (is.null(name)) 
[17:03:04.549]                               next
[17:03:04.549]                             if (!grepl(pattern, name)) 
[17:03:04.549]                               next
[17:03:04.549]                             invokeRestart(restart)
[17:03:04.549]                             muffled <- TRUE
[17:03:04.549]                             break
[17:03:04.549]                           }
[17:03:04.549]                         }
[17:03:04.549]                       }
[17:03:04.549]                       invisible(muffled)
[17:03:04.549]                     }
[17:03:04.549]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.549]                   }
[17:03:04.549]                 }
[17:03:04.549]                 else {
[17:03:04.549]                   if (TRUE) {
[17:03:04.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.549]                     {
[17:03:04.549]                       inherits <- base::inherits
[17:03:04.549]                       invokeRestart <- base::invokeRestart
[17:03:04.549]                       is.null <- base::is.null
[17:03:04.549]                       muffled <- FALSE
[17:03:04.549]                       if (inherits(cond, "message")) {
[17:03:04.549]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.549]                         if (muffled) 
[17:03:04.549]                           invokeRestart("muffleMessage")
[17:03:04.549]                       }
[17:03:04.549]                       else if (inherits(cond, "warning")) {
[17:03:04.549]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.549]                         if (muffled) 
[17:03:04.549]                           invokeRestart("muffleWarning")
[17:03:04.549]                       }
[17:03:04.549]                       else if (inherits(cond, "condition")) {
[17:03:04.549]                         if (!is.null(pattern)) {
[17:03:04.549]                           computeRestarts <- base::computeRestarts
[17:03:04.549]                           grepl <- base::grepl
[17:03:04.549]                           restarts <- computeRestarts(cond)
[17:03:04.549]                           for (restart in restarts) {
[17:03:04.549]                             name <- restart$name
[17:03:04.549]                             if (is.null(name)) 
[17:03:04.549]                               next
[17:03:04.549]                             if (!grepl(pattern, name)) 
[17:03:04.549]                               next
[17:03:04.549]                             invokeRestart(restart)
[17:03:04.549]                             muffled <- TRUE
[17:03:04.549]                             break
[17:03:04.549]                           }
[17:03:04.549]                         }
[17:03:04.549]                       }
[17:03:04.549]                       invisible(muffled)
[17:03:04.549]                     }
[17:03:04.549]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.549]                   }
[17:03:04.549]                 }
[17:03:04.549]             }
[17:03:04.549]         }))
[17:03:04.549]     }, error = function(ex) {
[17:03:04.549]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.549]                 ...future.rng), started = ...future.startTime, 
[17:03:04.549]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.549]             version = "1.8"), class = "FutureResult")
[17:03:04.549]     }, finally = {
[17:03:04.549]         if (!identical(...future.workdir, getwd())) 
[17:03:04.549]             setwd(...future.workdir)
[17:03:04.549]         {
[17:03:04.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.549]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.549]             }
[17:03:04.549]             base::options(...future.oldOptions)
[17:03:04.549]             if (.Platform$OS.type == "windows") {
[17:03:04.549]                 old_names <- names(...future.oldEnvVars)
[17:03:04.549]                 envs <- base::Sys.getenv()
[17:03:04.549]                 names <- names(envs)
[17:03:04.549]                 common <- intersect(names, old_names)
[17:03:04.549]                 added <- setdiff(names, old_names)
[17:03:04.549]                 removed <- setdiff(old_names, names)
[17:03:04.549]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.549]                   envs[common]]
[17:03:04.549]                 NAMES <- toupper(changed)
[17:03:04.549]                 args <- list()
[17:03:04.549]                 for (kk in seq_along(NAMES)) {
[17:03:04.549]                   name <- changed[[kk]]
[17:03:04.549]                   NAME <- NAMES[[kk]]
[17:03:04.549]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.549]                     next
[17:03:04.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.549]                 }
[17:03:04.549]                 NAMES <- toupper(added)
[17:03:04.549]                 for (kk in seq_along(NAMES)) {
[17:03:04.549]                   name <- added[[kk]]
[17:03:04.549]                   NAME <- NAMES[[kk]]
[17:03:04.549]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.549]                     next
[17:03:04.549]                   args[[name]] <- ""
[17:03:04.549]                 }
[17:03:04.549]                 NAMES <- toupper(removed)
[17:03:04.549]                 for (kk in seq_along(NAMES)) {
[17:03:04.549]                   name <- removed[[kk]]
[17:03:04.549]                   NAME <- NAMES[[kk]]
[17:03:04.549]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.549]                     next
[17:03:04.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.549]                 }
[17:03:04.549]                 if (length(args) > 0) 
[17:03:04.549]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.549]             }
[17:03:04.549]             else {
[17:03:04.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.549]             }
[17:03:04.549]             {
[17:03:04.549]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.549]                   0L) {
[17:03:04.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.549]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.549]                   base::options(opts)
[17:03:04.549]                 }
[17:03:04.549]                 {
[17:03:04.549]                   {
[17:03:04.549]                     NULL
[17:03:04.549]                     RNGkind("Mersenne-Twister")
[17:03:04.549]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.549]                       inherits = FALSE)
[17:03:04.549]                   }
[17:03:04.549]                   options(future.plan = NULL)
[17:03:04.549]                   if (is.na(NA_character_)) 
[17:03:04.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.549]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.549]                     .init = FALSE)
[17:03:04.549]                 }
[17:03:04.549]             }
[17:03:04.549]         }
[17:03:04.549]     })
[17:03:04.549]     if (TRUE) {
[17:03:04.549]         base::sink(type = "output", split = FALSE)
[17:03:04.549]         if (TRUE) {
[17:03:04.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.549]         }
[17:03:04.549]         else {
[17:03:04.549]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.549]         }
[17:03:04.549]         base::close(...future.stdout)
[17:03:04.549]         ...future.stdout <- NULL
[17:03:04.549]     }
[17:03:04.549]     ...future.result$conditions <- ...future.conditions
[17:03:04.549]     ...future.result$finished <- base::Sys.time()
[17:03:04.549]     ...future.result
[17:03:04.549] }
[17:03:04.551] assign_globals() ...
[17:03:04.551] List of 1
[17:03:04.551]  $ ii: int 2
[17:03:04.551]  - attr(*, "where")=List of 1
[17:03:04.551]   ..$ ii:<environment: R_EmptyEnv> 
[17:03:04.551]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:04.551]  - attr(*, "resolved")= logi FALSE
[17:03:04.551]  - attr(*, "total_size")= num 56
[17:03:04.553] - copied ‘ii’ to environment
[17:03:04.553] assign_globals() ... done
[17:03:04.553] plan(): Setting new future strategy stack:
[17:03:04.553] List of future strategies:
[17:03:04.553] 1. sequential:
[17:03:04.553]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.553]    - tweaked: FALSE
[17:03:04.553]    - call: NULL
[17:03:04.554] plan(): nbrOfWorkers() = 1
[17:03:04.555] plan(): Setting new future strategy stack:
[17:03:04.555] List of future strategies:
[17:03:04.555] 1. sequential:
[17:03:04.555]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.555]    - tweaked: FALSE
[17:03:04.555]    - call: future::plan("sequential")
[17:03:04.555] plan(): nbrOfWorkers() = 1
[17:03:04.555] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[17:03:04.556] getGlobalsAndPackages() ...
[17:03:04.556] Searching for globals...
[17:03:04.556] - globals found: [1] ‘.libPaths’
[17:03:04.556] Searching for globals ... DONE
[17:03:04.556] Resolving globals: FALSE
[17:03:04.557] 
[17:03:04.557] 
[17:03:04.557] getGlobalsAndPackages() ... DONE
[17:03:04.557] run() for ‘Future’ ...
[17:03:04.557] - state: ‘created’
[17:03:04.558] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:04.558] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:04.558] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:04.558]   - Field: ‘label’
[17:03:04.558]   - Field: ‘local’
[17:03:04.558]   - Field: ‘owner’
[17:03:04.558]   - Field: ‘envir’
[17:03:04.558]   - Field: ‘packages’
[17:03:04.559]   - Field: ‘gc’
[17:03:04.559]   - Field: ‘conditions’
[17:03:04.559]   - Field: ‘expr’
[17:03:04.559]   - Field: ‘uuid’
[17:03:04.559]   - Field: ‘seed’
[17:03:04.559]   - Field: ‘version’
[17:03:04.559]   - Field: ‘result’
[17:03:04.559]   - Field: ‘asynchronous’
[17:03:04.559]   - Field: ‘calls’
[17:03:04.559]   - Field: ‘globals’
[17:03:04.559]   - Field: ‘stdout’
[17:03:04.560]   - Field: ‘earlySignal’
[17:03:04.560]   - Field: ‘lazy’
[17:03:04.560]   - Field: ‘state’
[17:03:04.560] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:04.560] - Launch lazy future ...
[17:03:04.560] Packages needed by the future expression (n = 0): <none>
[17:03:04.560] Packages needed by future strategies (n = 0): <none>
[17:03:04.561] {
[17:03:04.561]     {
[17:03:04.561]         {
[17:03:04.561]             ...future.startTime <- base::Sys.time()
[17:03:04.561]             {
[17:03:04.561]                 {
[17:03:04.561]                   {
[17:03:04.561]                     base::local({
[17:03:04.561]                       has_future <- base::requireNamespace("future", 
[17:03:04.561]                         quietly = TRUE)
[17:03:04.561]                       if (has_future) {
[17:03:04.561]                         ns <- base::getNamespace("future")
[17:03:04.561]                         version <- ns[[".package"]][["version"]]
[17:03:04.561]                         if (is.null(version)) 
[17:03:04.561]                           version <- utils::packageVersion("future")
[17:03:04.561]                       }
[17:03:04.561]                       else {
[17:03:04.561]                         version <- NULL
[17:03:04.561]                       }
[17:03:04.561]                       if (!has_future || version < "1.8.0") {
[17:03:04.561]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.561]                           "", base::R.version$version.string), 
[17:03:04.561]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.561]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.561]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.561]                             "release", "version")], collapse = " "), 
[17:03:04.561]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.561]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.561]                           info)
[17:03:04.561]                         info <- base::paste(info, collapse = "; ")
[17:03:04.561]                         if (!has_future) {
[17:03:04.561]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.561]                             info)
[17:03:04.561]                         }
[17:03:04.561]                         else {
[17:03:04.561]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.561]                             info, version)
[17:03:04.561]                         }
[17:03:04.561]                         base::stop(msg)
[17:03:04.561]                       }
[17:03:04.561]                     })
[17:03:04.561]                   }
[17:03:04.561]                   ...future.strategy.old <- future::plan("list")
[17:03:04.561]                   options(future.plan = NULL)
[17:03:04.561]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.561]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.561]                 }
[17:03:04.561]                 ...future.workdir <- getwd()
[17:03:04.561]             }
[17:03:04.561]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.561]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.561]         }
[17:03:04.561]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.561]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.561]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.561]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.561]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.561]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.561]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.561]             base::names(...future.oldOptions))
[17:03:04.561]     }
[17:03:04.561]     if (FALSE) {
[17:03:04.561]     }
[17:03:04.561]     else {
[17:03:04.561]         if (TRUE) {
[17:03:04.561]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.561]                 open = "w")
[17:03:04.561]         }
[17:03:04.561]         else {
[17:03:04.561]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.561]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.561]         }
[17:03:04.561]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.561]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.561]             base::sink(type = "output", split = FALSE)
[17:03:04.561]             base::close(...future.stdout)
[17:03:04.561]         }, add = TRUE)
[17:03:04.561]     }
[17:03:04.561]     ...future.frame <- base::sys.nframe()
[17:03:04.561]     ...future.conditions <- base::list()
[17:03:04.561]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.561]     if (FALSE) {
[17:03:04.561]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.561]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.561]     }
[17:03:04.561]     ...future.result <- base::tryCatch({
[17:03:04.561]         base::withCallingHandlers({
[17:03:04.561]             ...future.value <- base::withVisible(base::local(.libPaths()))
[17:03:04.561]             future::FutureResult(value = ...future.value$value, 
[17:03:04.561]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.561]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.561]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.561]                     ...future.globalenv.names))
[17:03:04.561]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.561]         }, condition = base::local({
[17:03:04.561]             c <- base::c
[17:03:04.561]             inherits <- base::inherits
[17:03:04.561]             invokeRestart <- base::invokeRestart
[17:03:04.561]             length <- base::length
[17:03:04.561]             list <- base::list
[17:03:04.561]             seq.int <- base::seq.int
[17:03:04.561]             signalCondition <- base::signalCondition
[17:03:04.561]             sys.calls <- base::sys.calls
[17:03:04.561]             `[[` <- base::`[[`
[17:03:04.561]             `+` <- base::`+`
[17:03:04.561]             `<<-` <- base::`<<-`
[17:03:04.561]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.561]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.561]                   3L)]
[17:03:04.561]             }
[17:03:04.561]             function(cond) {
[17:03:04.561]                 is_error <- inherits(cond, "error")
[17:03:04.561]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.561]                   NULL)
[17:03:04.561]                 if (is_error) {
[17:03:04.561]                   sessionInformation <- function() {
[17:03:04.561]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.561]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.561]                       search = base::search(), system = base::Sys.info())
[17:03:04.561]                   }
[17:03:04.561]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.561]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.561]                     cond$call), session = sessionInformation(), 
[17:03:04.561]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.561]                   signalCondition(cond)
[17:03:04.561]                 }
[17:03:04.561]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.561]                 "immediateCondition"))) {
[17:03:04.561]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.561]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.561]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.561]                   if (TRUE && !signal) {
[17:03:04.561]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.561]                     {
[17:03:04.561]                       inherits <- base::inherits
[17:03:04.561]                       invokeRestart <- base::invokeRestart
[17:03:04.561]                       is.null <- base::is.null
[17:03:04.561]                       muffled <- FALSE
[17:03:04.561]                       if (inherits(cond, "message")) {
[17:03:04.561]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.561]                         if (muffled) 
[17:03:04.561]                           invokeRestart("muffleMessage")
[17:03:04.561]                       }
[17:03:04.561]                       else if (inherits(cond, "warning")) {
[17:03:04.561]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.561]                         if (muffled) 
[17:03:04.561]                           invokeRestart("muffleWarning")
[17:03:04.561]                       }
[17:03:04.561]                       else if (inherits(cond, "condition")) {
[17:03:04.561]                         if (!is.null(pattern)) {
[17:03:04.561]                           computeRestarts <- base::computeRestarts
[17:03:04.561]                           grepl <- base::grepl
[17:03:04.561]                           restarts <- computeRestarts(cond)
[17:03:04.561]                           for (restart in restarts) {
[17:03:04.561]                             name <- restart$name
[17:03:04.561]                             if (is.null(name)) 
[17:03:04.561]                               next
[17:03:04.561]                             if (!grepl(pattern, name)) 
[17:03:04.561]                               next
[17:03:04.561]                             invokeRestart(restart)
[17:03:04.561]                             muffled <- TRUE
[17:03:04.561]                             break
[17:03:04.561]                           }
[17:03:04.561]                         }
[17:03:04.561]                       }
[17:03:04.561]                       invisible(muffled)
[17:03:04.561]                     }
[17:03:04.561]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.561]                   }
[17:03:04.561]                 }
[17:03:04.561]                 else {
[17:03:04.561]                   if (TRUE) {
[17:03:04.561]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.561]                     {
[17:03:04.561]                       inherits <- base::inherits
[17:03:04.561]                       invokeRestart <- base::invokeRestart
[17:03:04.561]                       is.null <- base::is.null
[17:03:04.561]                       muffled <- FALSE
[17:03:04.561]                       if (inherits(cond, "message")) {
[17:03:04.561]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.561]                         if (muffled) 
[17:03:04.561]                           invokeRestart("muffleMessage")
[17:03:04.561]                       }
[17:03:04.561]                       else if (inherits(cond, "warning")) {
[17:03:04.561]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.561]                         if (muffled) 
[17:03:04.561]                           invokeRestart("muffleWarning")
[17:03:04.561]                       }
[17:03:04.561]                       else if (inherits(cond, "condition")) {
[17:03:04.561]                         if (!is.null(pattern)) {
[17:03:04.561]                           computeRestarts <- base::computeRestarts
[17:03:04.561]                           grepl <- base::grepl
[17:03:04.561]                           restarts <- computeRestarts(cond)
[17:03:04.561]                           for (restart in restarts) {
[17:03:04.561]                             name <- restart$name
[17:03:04.561]                             if (is.null(name)) 
[17:03:04.561]                               next
[17:03:04.561]                             if (!grepl(pattern, name)) 
[17:03:04.561]                               next
[17:03:04.561]                             invokeRestart(restart)
[17:03:04.561]                             muffled <- TRUE
[17:03:04.561]                             break
[17:03:04.561]                           }
[17:03:04.561]                         }
[17:03:04.561]                       }
[17:03:04.561]                       invisible(muffled)
[17:03:04.561]                     }
[17:03:04.561]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.561]                   }
[17:03:04.561]                 }
[17:03:04.561]             }
[17:03:04.561]         }))
[17:03:04.561]     }, error = function(ex) {
[17:03:04.561]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.561]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.561]                 ...future.rng), started = ...future.startTime, 
[17:03:04.561]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.561]             version = "1.8"), class = "FutureResult")
[17:03:04.561]     }, finally = {
[17:03:04.561]         if (!identical(...future.workdir, getwd())) 
[17:03:04.561]             setwd(...future.workdir)
[17:03:04.561]         {
[17:03:04.561]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.561]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.561]             }
[17:03:04.561]             base::options(...future.oldOptions)
[17:03:04.561]             if (.Platform$OS.type == "windows") {
[17:03:04.561]                 old_names <- names(...future.oldEnvVars)
[17:03:04.561]                 envs <- base::Sys.getenv()
[17:03:04.561]                 names <- names(envs)
[17:03:04.561]                 common <- intersect(names, old_names)
[17:03:04.561]                 added <- setdiff(names, old_names)
[17:03:04.561]                 removed <- setdiff(old_names, names)
[17:03:04.561]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.561]                   envs[common]]
[17:03:04.561]                 NAMES <- toupper(changed)
[17:03:04.561]                 args <- list()
[17:03:04.561]                 for (kk in seq_along(NAMES)) {
[17:03:04.561]                   name <- changed[[kk]]
[17:03:04.561]                   NAME <- NAMES[[kk]]
[17:03:04.561]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.561]                     next
[17:03:04.561]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.561]                 }
[17:03:04.561]                 NAMES <- toupper(added)
[17:03:04.561]                 for (kk in seq_along(NAMES)) {
[17:03:04.561]                   name <- added[[kk]]
[17:03:04.561]                   NAME <- NAMES[[kk]]
[17:03:04.561]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.561]                     next
[17:03:04.561]                   args[[name]] <- ""
[17:03:04.561]                 }
[17:03:04.561]                 NAMES <- toupper(removed)
[17:03:04.561]                 for (kk in seq_along(NAMES)) {
[17:03:04.561]                   name <- removed[[kk]]
[17:03:04.561]                   NAME <- NAMES[[kk]]
[17:03:04.561]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.561]                     next
[17:03:04.561]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.561]                 }
[17:03:04.561]                 if (length(args) > 0) 
[17:03:04.561]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.561]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.561]             }
[17:03:04.561]             else {
[17:03:04.561]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.561]             }
[17:03:04.561]             {
[17:03:04.561]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.561]                   0L) {
[17:03:04.561]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.561]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.561]                   base::options(opts)
[17:03:04.561]                 }
[17:03:04.561]                 {
[17:03:04.561]                   {
[17:03:04.561]                     NULL
[17:03:04.561]                     RNGkind("Mersenne-Twister")
[17:03:04.561]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.561]                       inherits = FALSE)
[17:03:04.561]                   }
[17:03:04.561]                   options(future.plan = NULL)
[17:03:04.561]                   if (is.na(NA_character_)) 
[17:03:04.561]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.561]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.561]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.561]                     .init = FALSE)
[17:03:04.561]                 }
[17:03:04.561]             }
[17:03:04.561]         }
[17:03:04.561]     })
[17:03:04.561]     if (TRUE) {
[17:03:04.561]         base::sink(type = "output", split = FALSE)
[17:03:04.561]         if (TRUE) {
[17:03:04.561]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.561]         }
[17:03:04.561]         else {
[17:03:04.561]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.561]         }
[17:03:04.561]         base::close(...future.stdout)
[17:03:04.561]         ...future.stdout <- NULL
[17:03:04.561]     }
[17:03:04.561]     ...future.result$conditions <- ...future.conditions
[17:03:04.561]     ...future.result$finished <- base::Sys.time()
[17:03:04.561]     ...future.result
[17:03:04.561] }
[17:03:04.562] plan(): Setting new future strategy stack:
[17:03:04.562] List of future strategies:
[17:03:04.562] 1. sequential:
[17:03:04.562]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.562]    - tweaked: FALSE
[17:03:04.562]    - call: NULL
[17:03:04.565] plan(): nbrOfWorkers() = 1
[17:03:04.565] plan(): Setting new future strategy stack:
[17:03:04.566] List of future strategies:
[17:03:04.566] 1. sequential:
[17:03:04.566]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.566]    - tweaked: FALSE
[17:03:04.566]    - call: future::plan("sequential")
[17:03:04.566] plan(): nbrOfWorkers() = 1
[17:03:04.566] SequentialFuture started (and completed)
[17:03:04.566] - Launch lazy future ... done
[17:03:04.566] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[17:03:04.571] getGlobalsAndPackages() ...
[17:03:04.571] Searching for globals...
[17:03:04.572] - globals found: [2] ‘{’, ‘stop’
[17:03:04.572] Searching for globals ... DONE
[17:03:04.572] Resolving globals: FALSE
[17:03:04.572] 
[17:03:04.573] 
[17:03:04.573] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:04.573] Packages needed by the future expression (n = 0): <none>
[17:03:04.573] Packages needed by future strategies (n = 0): <none>
[17:03:04.574] {
[17:03:04.574]     {
[17:03:04.574]         {
[17:03:04.574]             ...future.startTime <- base::Sys.time()
[17:03:04.574]             {
[17:03:04.574]                 {
[17:03:04.574]                   {
[17:03:04.574]                     base::local({
[17:03:04.574]                       has_future <- base::requireNamespace("future", 
[17:03:04.574]                         quietly = TRUE)
[17:03:04.574]                       if (has_future) {
[17:03:04.574]                         ns <- base::getNamespace("future")
[17:03:04.574]                         version <- ns[[".package"]][["version"]]
[17:03:04.574]                         if (is.null(version)) 
[17:03:04.574]                           version <- utils::packageVersion("future")
[17:03:04.574]                       }
[17:03:04.574]                       else {
[17:03:04.574]                         version <- NULL
[17:03:04.574]                       }
[17:03:04.574]                       if (!has_future || version < "1.8.0") {
[17:03:04.574]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.574]                           "", base::R.version$version.string), 
[17:03:04.574]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.574]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.574]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.574]                             "release", "version")], collapse = " "), 
[17:03:04.574]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.574]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.574]                           info)
[17:03:04.574]                         info <- base::paste(info, collapse = "; ")
[17:03:04.574]                         if (!has_future) {
[17:03:04.574]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.574]                             info)
[17:03:04.574]                         }
[17:03:04.574]                         else {
[17:03:04.574]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.574]                             info, version)
[17:03:04.574]                         }
[17:03:04.574]                         base::stop(msg)
[17:03:04.574]                       }
[17:03:04.574]                     })
[17:03:04.574]                   }
[17:03:04.574]                   ...future.strategy.old <- future::plan("list")
[17:03:04.574]                   options(future.plan = NULL)
[17:03:04.574]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.574]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.574]                 }
[17:03:04.574]                 ...future.workdir <- getwd()
[17:03:04.574]             }
[17:03:04.574]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.574]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.574]         }
[17:03:04.574]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.574]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.574]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.574]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.574]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.574]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.574]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.574]             base::names(...future.oldOptions))
[17:03:04.574]     }
[17:03:04.574]     if (FALSE) {
[17:03:04.574]     }
[17:03:04.574]     else {
[17:03:04.574]         if (TRUE) {
[17:03:04.574]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.574]                 open = "w")
[17:03:04.574]         }
[17:03:04.574]         else {
[17:03:04.574]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.574]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.574]         }
[17:03:04.574]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.574]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.574]             base::sink(type = "output", split = FALSE)
[17:03:04.574]             base::close(...future.stdout)
[17:03:04.574]         }, add = TRUE)
[17:03:04.574]     }
[17:03:04.574]     ...future.frame <- base::sys.nframe()
[17:03:04.574]     ...future.conditions <- base::list()
[17:03:04.574]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.574]     if (FALSE) {
[17:03:04.574]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.574]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.574]     }
[17:03:04.574]     ...future.result <- base::tryCatch({
[17:03:04.574]         base::withCallingHandlers({
[17:03:04.574]             ...future.value <- base::withVisible(base::local({
[17:03:04.574]                 stop("Whoops!")
[17:03:04.574]                 1
[17:03:04.574]             }))
[17:03:04.574]             future::FutureResult(value = ...future.value$value, 
[17:03:04.574]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.574]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.574]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.574]                     ...future.globalenv.names))
[17:03:04.574]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.574]         }, condition = base::local({
[17:03:04.574]             c <- base::c
[17:03:04.574]             inherits <- base::inherits
[17:03:04.574]             invokeRestart <- base::invokeRestart
[17:03:04.574]             length <- base::length
[17:03:04.574]             list <- base::list
[17:03:04.574]             seq.int <- base::seq.int
[17:03:04.574]             signalCondition <- base::signalCondition
[17:03:04.574]             sys.calls <- base::sys.calls
[17:03:04.574]             `[[` <- base::`[[`
[17:03:04.574]             `+` <- base::`+`
[17:03:04.574]             `<<-` <- base::`<<-`
[17:03:04.574]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.574]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.574]                   3L)]
[17:03:04.574]             }
[17:03:04.574]             function(cond) {
[17:03:04.574]                 is_error <- inherits(cond, "error")
[17:03:04.574]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.574]                   NULL)
[17:03:04.574]                 if (is_error) {
[17:03:04.574]                   sessionInformation <- function() {
[17:03:04.574]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.574]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.574]                       search = base::search(), system = base::Sys.info())
[17:03:04.574]                   }
[17:03:04.574]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.574]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.574]                     cond$call), session = sessionInformation(), 
[17:03:04.574]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.574]                   signalCondition(cond)
[17:03:04.574]                 }
[17:03:04.574]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.574]                 "immediateCondition"))) {
[17:03:04.574]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.574]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.574]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.574]                   if (TRUE && !signal) {
[17:03:04.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.574]                     {
[17:03:04.574]                       inherits <- base::inherits
[17:03:04.574]                       invokeRestart <- base::invokeRestart
[17:03:04.574]                       is.null <- base::is.null
[17:03:04.574]                       muffled <- FALSE
[17:03:04.574]                       if (inherits(cond, "message")) {
[17:03:04.574]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.574]                         if (muffled) 
[17:03:04.574]                           invokeRestart("muffleMessage")
[17:03:04.574]                       }
[17:03:04.574]                       else if (inherits(cond, "warning")) {
[17:03:04.574]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.574]                         if (muffled) 
[17:03:04.574]                           invokeRestart("muffleWarning")
[17:03:04.574]                       }
[17:03:04.574]                       else if (inherits(cond, "condition")) {
[17:03:04.574]                         if (!is.null(pattern)) {
[17:03:04.574]                           computeRestarts <- base::computeRestarts
[17:03:04.574]                           grepl <- base::grepl
[17:03:04.574]                           restarts <- computeRestarts(cond)
[17:03:04.574]                           for (restart in restarts) {
[17:03:04.574]                             name <- restart$name
[17:03:04.574]                             if (is.null(name)) 
[17:03:04.574]                               next
[17:03:04.574]                             if (!grepl(pattern, name)) 
[17:03:04.574]                               next
[17:03:04.574]                             invokeRestart(restart)
[17:03:04.574]                             muffled <- TRUE
[17:03:04.574]                             break
[17:03:04.574]                           }
[17:03:04.574]                         }
[17:03:04.574]                       }
[17:03:04.574]                       invisible(muffled)
[17:03:04.574]                     }
[17:03:04.574]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.574]                   }
[17:03:04.574]                 }
[17:03:04.574]                 else {
[17:03:04.574]                   if (TRUE) {
[17:03:04.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.574]                     {
[17:03:04.574]                       inherits <- base::inherits
[17:03:04.574]                       invokeRestart <- base::invokeRestart
[17:03:04.574]                       is.null <- base::is.null
[17:03:04.574]                       muffled <- FALSE
[17:03:04.574]                       if (inherits(cond, "message")) {
[17:03:04.574]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.574]                         if (muffled) 
[17:03:04.574]                           invokeRestart("muffleMessage")
[17:03:04.574]                       }
[17:03:04.574]                       else if (inherits(cond, "warning")) {
[17:03:04.574]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.574]                         if (muffled) 
[17:03:04.574]                           invokeRestart("muffleWarning")
[17:03:04.574]                       }
[17:03:04.574]                       else if (inherits(cond, "condition")) {
[17:03:04.574]                         if (!is.null(pattern)) {
[17:03:04.574]                           computeRestarts <- base::computeRestarts
[17:03:04.574]                           grepl <- base::grepl
[17:03:04.574]                           restarts <- computeRestarts(cond)
[17:03:04.574]                           for (restart in restarts) {
[17:03:04.574]                             name <- restart$name
[17:03:04.574]                             if (is.null(name)) 
[17:03:04.574]                               next
[17:03:04.574]                             if (!grepl(pattern, name)) 
[17:03:04.574]                               next
[17:03:04.574]                             invokeRestart(restart)
[17:03:04.574]                             muffled <- TRUE
[17:03:04.574]                             break
[17:03:04.574]                           }
[17:03:04.574]                         }
[17:03:04.574]                       }
[17:03:04.574]                       invisible(muffled)
[17:03:04.574]                     }
[17:03:04.574]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.574]                   }
[17:03:04.574]                 }
[17:03:04.574]             }
[17:03:04.574]         }))
[17:03:04.574]     }, error = function(ex) {
[17:03:04.574]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.574]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.574]                 ...future.rng), started = ...future.startTime, 
[17:03:04.574]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.574]             version = "1.8"), class = "FutureResult")
[17:03:04.574]     }, finally = {
[17:03:04.574]         if (!identical(...future.workdir, getwd())) 
[17:03:04.574]             setwd(...future.workdir)
[17:03:04.574]         {
[17:03:04.574]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.574]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.574]             }
[17:03:04.574]             base::options(...future.oldOptions)
[17:03:04.574]             if (.Platform$OS.type == "windows") {
[17:03:04.574]                 old_names <- names(...future.oldEnvVars)
[17:03:04.574]                 envs <- base::Sys.getenv()
[17:03:04.574]                 names <- names(envs)
[17:03:04.574]                 common <- intersect(names, old_names)
[17:03:04.574]                 added <- setdiff(names, old_names)
[17:03:04.574]                 removed <- setdiff(old_names, names)
[17:03:04.574]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.574]                   envs[common]]
[17:03:04.574]                 NAMES <- toupper(changed)
[17:03:04.574]                 args <- list()
[17:03:04.574]                 for (kk in seq_along(NAMES)) {
[17:03:04.574]                   name <- changed[[kk]]
[17:03:04.574]                   NAME <- NAMES[[kk]]
[17:03:04.574]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.574]                     next
[17:03:04.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.574]                 }
[17:03:04.574]                 NAMES <- toupper(added)
[17:03:04.574]                 for (kk in seq_along(NAMES)) {
[17:03:04.574]                   name <- added[[kk]]
[17:03:04.574]                   NAME <- NAMES[[kk]]
[17:03:04.574]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.574]                     next
[17:03:04.574]                   args[[name]] <- ""
[17:03:04.574]                 }
[17:03:04.574]                 NAMES <- toupper(removed)
[17:03:04.574]                 for (kk in seq_along(NAMES)) {
[17:03:04.574]                   name <- removed[[kk]]
[17:03:04.574]                   NAME <- NAMES[[kk]]
[17:03:04.574]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.574]                     next
[17:03:04.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.574]                 }
[17:03:04.574]                 if (length(args) > 0) 
[17:03:04.574]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.574]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.574]             }
[17:03:04.574]             else {
[17:03:04.574]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.574]             }
[17:03:04.574]             {
[17:03:04.574]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.574]                   0L) {
[17:03:04.574]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.574]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.574]                   base::options(opts)
[17:03:04.574]                 }
[17:03:04.574]                 {
[17:03:04.574]                   {
[17:03:04.574]                     NULL
[17:03:04.574]                     RNGkind("Mersenne-Twister")
[17:03:04.574]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.574]                       inherits = FALSE)
[17:03:04.574]                   }
[17:03:04.574]                   options(future.plan = NULL)
[17:03:04.574]                   if (is.na(NA_character_)) 
[17:03:04.574]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.574]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.574]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.574]                     .init = FALSE)
[17:03:04.574]                 }
[17:03:04.574]             }
[17:03:04.574]         }
[17:03:04.574]     })
[17:03:04.574]     if (TRUE) {
[17:03:04.574]         base::sink(type = "output", split = FALSE)
[17:03:04.574]         if (TRUE) {
[17:03:04.574]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.574]         }
[17:03:04.574]         else {
[17:03:04.574]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.574]         }
[17:03:04.574]         base::close(...future.stdout)
[17:03:04.574]         ...future.stdout <- NULL
[17:03:04.574]     }
[17:03:04.574]     ...future.result$conditions <- ...future.conditions
[17:03:04.574]     ...future.result$finished <- base::Sys.time()
[17:03:04.574]     ...future.result
[17:03:04.574] }
[17:03:04.576] plan(): Setting new future strategy stack:
[17:03:04.576] List of future strategies:
[17:03:04.576] 1. sequential:
[17:03:04.576]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.576]    - tweaked: FALSE
[17:03:04.576]    - call: NULL
[17:03:04.576] plan(): nbrOfWorkers() = 1
[17:03:04.577] plan(): Setting new future strategy stack:
[17:03:04.577] List of future strategies:
[17:03:04.577] 1. sequential:
[17:03:04.577]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.577]    - tweaked: FALSE
[17:03:04.577]    - call: future::plan("sequential")
[17:03:04.578] plan(): nbrOfWorkers() = 1
[17:03:04.578] SequentialFuture started (and completed)
[17:03:04.578] signalConditions() ...
[17:03:04.578]  - include = ‘immediateCondition’
[17:03:04.578]  - exclude = 
[17:03:04.578]  - resignal = FALSE
[17:03:04.578]  - Number of conditions: 1
[17:03:04.579] signalConditions() ... done
[17:03:04.579] signalConditions() ...
[17:03:04.579]  - include = ‘immediateCondition’
[17:03:04.579]  - exclude = 
[17:03:04.579]  - resignal = FALSE
[17:03:04.579]  - Number of conditions: 1
[17:03:04.579] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:04.579] signalConditions() ...
[17:03:04.580]  - include = ‘immediateCondition’
[17:03:04.580]  - exclude = 
[17:03:04.580]  - resignal = FALSE
[17:03:04.580]  - Number of conditions: 1
[17:03:04.580] signalConditions() ... done
[17:03:04.580] Future state: ‘finished’
[17:03:04.580] signalConditions() ...
[17:03:04.580]  - include = ‘condition’
[17:03:04.580]  - exclude = ‘immediateCondition’
[17:03:04.580]  - resignal = TRUE
[17:03:04.580]  - Number of conditions: 1
[17:03:04.581]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:04.581] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:04.581] signalConditions() ...
[17:03:04.581]  - include = ‘immediateCondition’
[17:03:04.581]  - exclude = 
[17:03:04.581]  - resignal = FALSE
[17:03:04.581]  - Number of conditions: 1
[17:03:04.581] signalConditions() ... done
[17:03:04.582] Future state: ‘finished’
[17:03:04.582] signalConditions() ...
[17:03:04.582]  - include = ‘condition’
[17:03:04.582]  - exclude = ‘immediateCondition’
[17:03:04.582]  - resignal = TRUE
[17:03:04.582]  - Number of conditions: 1
[17:03:04.582]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:04.582] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:03:04.586] getGlobalsAndPackages() ...
[17:03:04.586] Searching for globals...
[17:03:04.588] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:03:04.588] Searching for globals ... DONE
[17:03:04.588] Resolving globals: FALSE
[17:03:04.589] 
[17:03:04.589] 
[17:03:04.589] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:04.589] Packages needed by the future expression (n = 0): <none>
[17:03:04.590] Packages needed by future strategies (n = 0): <none>
[17:03:04.590] {
[17:03:04.590]     {
[17:03:04.590]         {
[17:03:04.590]             ...future.startTime <- base::Sys.time()
[17:03:04.590]             {
[17:03:04.590]                 {
[17:03:04.590]                   {
[17:03:04.590]                     base::local({
[17:03:04.590]                       has_future <- base::requireNamespace("future", 
[17:03:04.590]                         quietly = TRUE)
[17:03:04.590]                       if (has_future) {
[17:03:04.590]                         ns <- base::getNamespace("future")
[17:03:04.590]                         version <- ns[[".package"]][["version"]]
[17:03:04.590]                         if (is.null(version)) 
[17:03:04.590]                           version <- utils::packageVersion("future")
[17:03:04.590]                       }
[17:03:04.590]                       else {
[17:03:04.590]                         version <- NULL
[17:03:04.590]                       }
[17:03:04.590]                       if (!has_future || version < "1.8.0") {
[17:03:04.590]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:04.590]                           "", base::R.version$version.string), 
[17:03:04.590]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:04.590]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:04.590]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:04.590]                             "release", "version")], collapse = " "), 
[17:03:04.590]                           hostname = base::Sys.info()[["nodename"]])
[17:03:04.590]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:04.590]                           info)
[17:03:04.590]                         info <- base::paste(info, collapse = "; ")
[17:03:04.590]                         if (!has_future) {
[17:03:04.590]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:04.590]                             info)
[17:03:04.590]                         }
[17:03:04.590]                         else {
[17:03:04.590]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:04.590]                             info, version)
[17:03:04.590]                         }
[17:03:04.590]                         base::stop(msg)
[17:03:04.590]                       }
[17:03:04.590]                     })
[17:03:04.590]                   }
[17:03:04.590]                   ...future.strategy.old <- future::plan("list")
[17:03:04.590]                   options(future.plan = NULL)
[17:03:04.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:04.590]                 }
[17:03:04.590]                 ...future.workdir <- getwd()
[17:03:04.590]             }
[17:03:04.590]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:04.590]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:04.590]         }
[17:03:04.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:04.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:04.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:04.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:04.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:04.590]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:04.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:04.590]             base::names(...future.oldOptions))
[17:03:04.590]     }
[17:03:04.590]     if (FALSE) {
[17:03:04.590]     }
[17:03:04.590]     else {
[17:03:04.590]         if (TRUE) {
[17:03:04.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:04.590]                 open = "w")
[17:03:04.590]         }
[17:03:04.590]         else {
[17:03:04.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:04.590]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:04.590]         }
[17:03:04.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:04.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:04.590]             base::sink(type = "output", split = FALSE)
[17:03:04.590]             base::close(...future.stdout)
[17:03:04.590]         }, add = TRUE)
[17:03:04.590]     }
[17:03:04.590]     ...future.frame <- base::sys.nframe()
[17:03:04.590]     ...future.conditions <- base::list()
[17:03:04.590]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:04.590]     if (FALSE) {
[17:03:04.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:04.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:04.590]     }
[17:03:04.590]     ...future.result <- base::tryCatch({
[17:03:04.590]         base::withCallingHandlers({
[17:03:04.590]             ...future.value <- base::withVisible(base::local({
[17:03:04.590]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:03:04.590]                   "error", "condition")))
[17:03:04.590]             }))
[17:03:04.590]             future::FutureResult(value = ...future.value$value, 
[17:03:04.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.590]                   ...future.rng), globalenv = if (FALSE) 
[17:03:04.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:04.590]                     ...future.globalenv.names))
[17:03:04.590]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:04.590]         }, condition = base::local({
[17:03:04.590]             c <- base::c
[17:03:04.590]             inherits <- base::inherits
[17:03:04.590]             invokeRestart <- base::invokeRestart
[17:03:04.590]             length <- base::length
[17:03:04.590]             list <- base::list
[17:03:04.590]             seq.int <- base::seq.int
[17:03:04.590]             signalCondition <- base::signalCondition
[17:03:04.590]             sys.calls <- base::sys.calls
[17:03:04.590]             `[[` <- base::`[[`
[17:03:04.590]             `+` <- base::`+`
[17:03:04.590]             `<<-` <- base::`<<-`
[17:03:04.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:04.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:04.590]                   3L)]
[17:03:04.590]             }
[17:03:04.590]             function(cond) {
[17:03:04.590]                 is_error <- inherits(cond, "error")
[17:03:04.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:04.590]                   NULL)
[17:03:04.590]                 if (is_error) {
[17:03:04.590]                   sessionInformation <- function() {
[17:03:04.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:04.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:04.590]                       search = base::search(), system = base::Sys.info())
[17:03:04.590]                   }
[17:03:04.590]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:04.590]                     cond$call), session = sessionInformation(), 
[17:03:04.590]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:04.590]                   signalCondition(cond)
[17:03:04.590]                 }
[17:03:04.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:04.590]                 "immediateCondition"))) {
[17:03:04.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:04.590]                   ...future.conditions[[length(...future.conditions) + 
[17:03:04.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:04.590]                   if (TRUE && !signal) {
[17:03:04.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.590]                     {
[17:03:04.590]                       inherits <- base::inherits
[17:03:04.590]                       invokeRestart <- base::invokeRestart
[17:03:04.590]                       is.null <- base::is.null
[17:03:04.590]                       muffled <- FALSE
[17:03:04.590]                       if (inherits(cond, "message")) {
[17:03:04.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.590]                         if (muffled) 
[17:03:04.590]                           invokeRestart("muffleMessage")
[17:03:04.590]                       }
[17:03:04.590]                       else if (inherits(cond, "warning")) {
[17:03:04.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.590]                         if (muffled) 
[17:03:04.590]                           invokeRestart("muffleWarning")
[17:03:04.590]                       }
[17:03:04.590]                       else if (inherits(cond, "condition")) {
[17:03:04.590]                         if (!is.null(pattern)) {
[17:03:04.590]                           computeRestarts <- base::computeRestarts
[17:03:04.590]                           grepl <- base::grepl
[17:03:04.590]                           restarts <- computeRestarts(cond)
[17:03:04.590]                           for (restart in restarts) {
[17:03:04.590]                             name <- restart$name
[17:03:04.590]                             if (is.null(name)) 
[17:03:04.590]                               next
[17:03:04.590]                             if (!grepl(pattern, name)) 
[17:03:04.590]                               next
[17:03:04.590]                             invokeRestart(restart)
[17:03:04.590]                             muffled <- TRUE
[17:03:04.590]                             break
[17:03:04.590]                           }
[17:03:04.590]                         }
[17:03:04.590]                       }
[17:03:04.590]                       invisible(muffled)
[17:03:04.590]                     }
[17:03:04.590]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.590]                   }
[17:03:04.590]                 }
[17:03:04.590]                 else {
[17:03:04.590]                   if (TRUE) {
[17:03:04.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:04.590]                     {
[17:03:04.590]                       inherits <- base::inherits
[17:03:04.590]                       invokeRestart <- base::invokeRestart
[17:03:04.590]                       is.null <- base::is.null
[17:03:04.590]                       muffled <- FALSE
[17:03:04.590]                       if (inherits(cond, "message")) {
[17:03:04.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:04.590]                         if (muffled) 
[17:03:04.590]                           invokeRestart("muffleMessage")
[17:03:04.590]                       }
[17:03:04.590]                       else if (inherits(cond, "warning")) {
[17:03:04.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:04.590]                         if (muffled) 
[17:03:04.590]                           invokeRestart("muffleWarning")
[17:03:04.590]                       }
[17:03:04.590]                       else if (inherits(cond, "condition")) {
[17:03:04.590]                         if (!is.null(pattern)) {
[17:03:04.590]                           computeRestarts <- base::computeRestarts
[17:03:04.590]                           grepl <- base::grepl
[17:03:04.590]                           restarts <- computeRestarts(cond)
[17:03:04.590]                           for (restart in restarts) {
[17:03:04.590]                             name <- restart$name
[17:03:04.590]                             if (is.null(name)) 
[17:03:04.590]                               next
[17:03:04.590]                             if (!grepl(pattern, name)) 
[17:03:04.590]                               next
[17:03:04.590]                             invokeRestart(restart)
[17:03:04.590]                             muffled <- TRUE
[17:03:04.590]                             break
[17:03:04.590]                           }
[17:03:04.590]                         }
[17:03:04.590]                       }
[17:03:04.590]                       invisible(muffled)
[17:03:04.590]                     }
[17:03:04.590]                     muffleCondition(cond, pattern = "^muffle")
[17:03:04.590]                   }
[17:03:04.590]                 }
[17:03:04.590]             }
[17:03:04.590]         }))
[17:03:04.590]     }, error = function(ex) {
[17:03:04.590]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:04.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:04.590]                 ...future.rng), started = ...future.startTime, 
[17:03:04.590]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:04.590]             version = "1.8"), class = "FutureResult")
[17:03:04.590]     }, finally = {
[17:03:04.590]         if (!identical(...future.workdir, getwd())) 
[17:03:04.590]             setwd(...future.workdir)
[17:03:04.590]         {
[17:03:04.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:04.590]                 ...future.oldOptions$nwarnings <- NULL
[17:03:04.590]             }
[17:03:04.590]             base::options(...future.oldOptions)
[17:03:04.590]             if (.Platform$OS.type == "windows") {
[17:03:04.590]                 old_names <- names(...future.oldEnvVars)
[17:03:04.590]                 envs <- base::Sys.getenv()
[17:03:04.590]                 names <- names(envs)
[17:03:04.590]                 common <- intersect(names, old_names)
[17:03:04.590]                 added <- setdiff(names, old_names)
[17:03:04.590]                 removed <- setdiff(old_names, names)
[17:03:04.590]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:04.590]                   envs[common]]
[17:03:04.590]                 NAMES <- toupper(changed)
[17:03:04.590]                 args <- list()
[17:03:04.590]                 for (kk in seq_along(NAMES)) {
[17:03:04.590]                   name <- changed[[kk]]
[17:03:04.590]                   NAME <- NAMES[[kk]]
[17:03:04.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.590]                     next
[17:03:04.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.590]                 }
[17:03:04.590]                 NAMES <- toupper(added)
[17:03:04.590]                 for (kk in seq_along(NAMES)) {
[17:03:04.590]                   name <- added[[kk]]
[17:03:04.590]                   NAME <- NAMES[[kk]]
[17:03:04.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.590]                     next
[17:03:04.590]                   args[[name]] <- ""
[17:03:04.590]                 }
[17:03:04.590]                 NAMES <- toupper(removed)
[17:03:04.590]                 for (kk in seq_along(NAMES)) {
[17:03:04.590]                   name <- removed[[kk]]
[17:03:04.590]                   NAME <- NAMES[[kk]]
[17:03:04.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:04.590]                     next
[17:03:04.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:04.590]                 }
[17:03:04.590]                 if (length(args) > 0) 
[17:03:04.590]                   base::do.call(base::Sys.setenv, args = args)
[17:03:04.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:04.590]             }
[17:03:04.590]             else {
[17:03:04.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:04.590]             }
[17:03:04.590]             {
[17:03:04.590]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:04.590]                   0L) {
[17:03:04.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:04.590]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:04.590]                   base::options(opts)
[17:03:04.590]                 }
[17:03:04.590]                 {
[17:03:04.590]                   {
[17:03:04.590]                     NULL
[17:03:04.590]                     RNGkind("Mersenne-Twister")
[17:03:04.590]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:04.590]                       inherits = FALSE)
[17:03:04.590]                   }
[17:03:04.590]                   options(future.plan = NULL)
[17:03:04.590]                   if (is.na(NA_character_)) 
[17:03:04.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:04.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:04.590]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:04.590]                     .init = FALSE)
[17:03:04.590]                 }
[17:03:04.590]             }
[17:03:04.590]         }
[17:03:04.590]     })
[17:03:04.590]     if (TRUE) {
[17:03:04.590]         base::sink(type = "output", split = FALSE)
[17:03:04.590]         if (TRUE) {
[17:03:04.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:04.590]         }
[17:03:04.590]         else {
[17:03:04.590]             ...future.result["stdout"] <- base::list(NULL)
[17:03:04.590]         }
[17:03:04.590]         base::close(...future.stdout)
[17:03:04.590]         ...future.stdout <- NULL
[17:03:04.590]     }
[17:03:04.590]     ...future.result$conditions <- ...future.conditions
[17:03:04.590]     ...future.result$finished <- base::Sys.time()
[17:03:04.590]     ...future.result
[17:03:04.590] }
[17:03:04.592] plan(): Setting new future strategy stack:
[17:03:04.592] List of future strategies:
[17:03:04.592] 1. sequential:
[17:03:04.592]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.592]    - tweaked: FALSE
[17:03:04.592]    - call: NULL
[17:03:04.592] plan(): nbrOfWorkers() = 1
[17:03:04.593] plan(): Setting new future strategy stack:
[17:03:04.593] List of future strategies:
[17:03:04.593] 1. sequential:
[17:03:04.593]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:04.593]    - tweaked: FALSE
[17:03:04.593]    - call: future::plan("sequential")
[17:03:04.594] plan(): nbrOfWorkers() = 1
[17:03:04.594] SequentialFuture started (and completed)
[17:03:04.594] signalConditions() ...
[17:03:04.594]  - include = ‘immediateCondition’
[17:03:04.594]  - exclude = 
[17:03:04.595]  - resignal = FALSE
[17:03:04.595]  - Number of conditions: 1
[17:03:04.595] signalConditions() ... done
[17:03:04.595] signalConditions() ...
[17:03:04.595]  - include = ‘immediateCondition’
[17:03:04.595]  - exclude = 
[17:03:04.595]  - resignal = FALSE
[17:03:04.595]  - Number of conditions: 1
[17:03:04.595] signalConditions() ... done
<MyError: boom>
[17:03:04.596] signalConditions() ...
[17:03:04.596]  - include = ‘immediateCondition’
[17:03:04.596]  - exclude = 
[17:03:04.596]  - resignal = FALSE
[17:03:04.596]  - Number of conditions: 1
[17:03:04.596] signalConditions() ... done
[17:03:04.596] Future state: ‘finished’
[17:03:04.596] signalConditions() ...
[17:03:04.596]  - include = ‘condition’
[17:03:04.596]  - exclude = ‘immediateCondition’
[17:03:04.596]  - resignal = TRUE
[17:03:04.597]  - Number of conditions: 1
[17:03:04.597]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:03:04.597] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[17:03:04.602] getGlobalsAndPackages() ...
[17:03:04.602] 
[17:03:04.602] - globals: [0] <none>
[17:03:04.602] getGlobalsAndPackages() ... DONE
[17:03:04.603] [local output] makeClusterPSOCK() ...
[17:03:04.642] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:04.643] [local output] Base port: 11844
[17:03:04.644] [local output] Getting setup options for 2 cluster nodes ...
[17:03:04.644] [local output]  - Node 1 of 2 ...
[17:03:04.644] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:04.645] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b2443953fd39.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b2443953fd39.pid")'’
[17:03:04.837] - Possible to infer worker's PID: TRUE
[17:03:04.838] [local output] Rscript port: 11844

[17:03:04.838] [local output]  - Node 2 of 2 ...
[17:03:04.838] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:04.839] [local output] Rscript port: 11844

[17:03:04.839] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:04.839] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:04.840] [local output] Setting up PSOCK nodes in parallel
[17:03:04.840] List of 36
[17:03:04.840]  $ worker          : chr "localhost"
[17:03:04.840]   ..- attr(*, "localhost")= logi TRUE
[17:03:04.840]  $ master          : chr "localhost"
[17:03:04.840]  $ port            : int 11844
[17:03:04.840]  $ connectTimeout  : num 120
[17:03:04.840]  $ timeout         : num 2592000
[17:03:04.840]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:04.840]  $ homogeneous     : logi TRUE
[17:03:04.840]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:04.840]  $ rscript_envs    : NULL
[17:03:04.840]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:04.840]  $ rscript_startup : NULL
[17:03:04.840]  $ rscript_sh      : chr "sh"
[17:03:04.840]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:04.840]  $ methods         : logi TRUE
[17:03:04.840]  $ socketOptions   : chr "no-delay"
[17:03:04.840]  $ useXDR          : logi FALSE
[17:03:04.840]  $ outfile         : chr "/dev/null"
[17:03:04.840]  $ renice          : int NA
[17:03:04.840]  $ rshcmd          : NULL
[17:03:04.840]  $ user            : chr(0) 
[17:03:04.840]  $ revtunnel       : logi FALSE
[17:03:04.840]  $ rshlogfile      : NULL
[17:03:04.840]  $ rshopts         : chr(0) 
[17:03:04.840]  $ rank            : int 1
[17:03:04.840]  $ manual          : logi FALSE
[17:03:04.840]  $ dryrun          : logi FALSE
[17:03:04.840]  $ quiet           : logi FALSE
[17:03:04.840]  $ setup_strategy  : chr "parallel"
[17:03:04.840]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:04.840]  $ pidfile         : chr "/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b2443953fd39.pid"
[17:03:04.840]  $ rshcmd_label    : NULL
[17:03:04.840]  $ rsh_call        : NULL
[17:03:04.840]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:04.840]  $ localMachine    : logi TRUE
[17:03:04.840]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:04.840]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:04.840]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:04.840]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:04.840]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:04.840]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:04.840]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:04.840]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:04.840]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:04.840]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:04.840]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:04.840]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:04.840]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:04.840]  $ arguments       :List of 28
[17:03:04.840]   ..$ worker          : chr "localhost"
[17:03:04.840]   ..$ master          : NULL
[17:03:04.840]   ..$ port            : int 11844
[17:03:04.840]   ..$ connectTimeout  : num 120
[17:03:04.840]   ..$ timeout         : num 2592000
[17:03:04.840]   ..$ rscript         : NULL
[17:03:04.840]   ..$ homogeneous     : NULL
[17:03:04.840]   ..$ rscript_args    : NULL
[17:03:04.840]   ..$ rscript_envs    : NULL
[17:03:04.840]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:04.840]   ..$ rscript_startup : NULL
[17:03:04.840]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:04.840]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:04.840]   ..$ methods         : logi TRUE
[17:03:04.840]   ..$ socketOptions   : chr "no-delay"
[17:03:04.840]   ..$ useXDR          : logi FALSE
[17:03:04.840]   ..$ outfile         : chr "/dev/null"
[17:03:04.840]   ..$ renice          : int NA
[17:03:04.840]   ..$ rshcmd          : NULL
[17:03:04.840]   ..$ user            : NULL
[17:03:04.840]   ..$ revtunnel       : logi NA
[17:03:04.840]   ..$ rshlogfile      : NULL
[17:03:04.840]   ..$ rshopts         : NULL
[17:03:04.840]   ..$ rank            : int 1
[17:03:04.840]   ..$ manual          : logi FALSE
[17:03:04.840]   ..$ dryrun          : logi FALSE
[17:03:04.840]   ..$ quiet           : logi FALSE
[17:03:04.840]   ..$ setup_strategy  : chr "parallel"
[17:03:04.840]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:04.857] [local output] System call to launch all workers:
[17:03:04.857] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b2443953fd39.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11844 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:04.857] [local output] Starting PSOCK main server
[17:03:04.863] [local output] Workers launched
[17:03:04.863] [local output] Waiting for workers to connect back
[17:03:04.863]  - [local output] 0 workers out of 2 ready
[17:03:05.115]  - [local output] 0 workers out of 2 ready
[17:03:05.115]  - [local output] 1 workers out of 2 ready
[17:03:05.116]  - [local output] 2 workers out of 2 ready
[17:03:05.116] [local output] Launching of workers completed
[17:03:05.116] [local output] Collecting session information from workers
[17:03:05.117] [local output]  - Worker #1 of 2
[17:03:05.117] [local output]  - Worker #2 of 2
[17:03:05.117] [local output] makeClusterPSOCK() ... done
[17:03:05.130] Packages needed by the future expression (n = 0): <none>
[17:03:05.130] Packages needed by future strategies (n = 0): <none>
[17:03:05.130] {
[17:03:05.130]     {
[17:03:05.130]         {
[17:03:05.130]             ...future.startTime <- base::Sys.time()
[17:03:05.130]             {
[17:03:05.130]                 {
[17:03:05.130]                   {
[17:03:05.130]                     {
[17:03:05.130]                       base::local({
[17:03:05.130]                         has_future <- base::requireNamespace("future", 
[17:03:05.130]                           quietly = TRUE)
[17:03:05.130]                         if (has_future) {
[17:03:05.130]                           ns <- base::getNamespace("future")
[17:03:05.130]                           version <- ns[[".package"]][["version"]]
[17:03:05.130]                           if (is.null(version)) 
[17:03:05.130]                             version <- utils::packageVersion("future")
[17:03:05.130]                         }
[17:03:05.130]                         else {
[17:03:05.130]                           version <- NULL
[17:03:05.130]                         }
[17:03:05.130]                         if (!has_future || version < "1.8.0") {
[17:03:05.130]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.130]                             "", base::R.version$version.string), 
[17:03:05.130]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.130]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.130]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.130]                               "release", "version")], collapse = " "), 
[17:03:05.130]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.130]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.130]                             info)
[17:03:05.130]                           info <- base::paste(info, collapse = "; ")
[17:03:05.130]                           if (!has_future) {
[17:03:05.130]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.130]                               info)
[17:03:05.130]                           }
[17:03:05.130]                           else {
[17:03:05.130]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.130]                               info, version)
[17:03:05.130]                           }
[17:03:05.130]                           base::stop(msg)
[17:03:05.130]                         }
[17:03:05.130]                       })
[17:03:05.130]                     }
[17:03:05.130]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.130]                     base::options(mc.cores = 1L)
[17:03:05.130]                   }
[17:03:05.130]                   ...future.strategy.old <- future::plan("list")
[17:03:05.130]                   options(future.plan = NULL)
[17:03:05.130]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.130]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.130]                 }
[17:03:05.130]                 ...future.workdir <- getwd()
[17:03:05.130]             }
[17:03:05.130]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.130]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.130]         }
[17:03:05.130]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.130]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.130]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.130]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.130]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.130]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.130]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.130]             base::names(...future.oldOptions))
[17:03:05.130]     }
[17:03:05.130]     if (FALSE) {
[17:03:05.130]     }
[17:03:05.130]     else {
[17:03:05.130]         if (TRUE) {
[17:03:05.130]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.130]                 open = "w")
[17:03:05.130]         }
[17:03:05.130]         else {
[17:03:05.130]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.130]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.130]         }
[17:03:05.130]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.130]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.130]             base::sink(type = "output", split = FALSE)
[17:03:05.130]             base::close(...future.stdout)
[17:03:05.130]         }, add = TRUE)
[17:03:05.130]     }
[17:03:05.130]     ...future.frame <- base::sys.nframe()
[17:03:05.130]     ...future.conditions <- base::list()
[17:03:05.130]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.130]     if (FALSE) {
[17:03:05.130]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.130]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.130]     }
[17:03:05.130]     ...future.result <- base::tryCatch({
[17:03:05.130]         base::withCallingHandlers({
[17:03:05.130]             ...future.value <- base::withVisible(base::local({
[17:03:05.130]                 ...future.makeSendCondition <- base::local({
[17:03:05.130]                   sendCondition <- NULL
[17:03:05.130]                   function(frame = 1L) {
[17:03:05.130]                     if (is.function(sendCondition)) 
[17:03:05.130]                       return(sendCondition)
[17:03:05.130]                     ns <- getNamespace("parallel")
[17:03:05.130]                     if (exists("sendData", mode = "function", 
[17:03:05.130]                       envir = ns)) {
[17:03:05.130]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.130]                         envir = ns)
[17:03:05.130]                       envir <- sys.frame(frame)
[17:03:05.130]                       master <- NULL
[17:03:05.130]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.130]                         !identical(envir, emptyenv())) {
[17:03:05.130]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.130]                           inherits = FALSE)) {
[17:03:05.130]                           master <- get("master", mode = "list", 
[17:03:05.130]                             envir = envir, inherits = FALSE)
[17:03:05.130]                           if (inherits(master, c("SOCKnode", 
[17:03:05.130]                             "SOCK0node"))) {
[17:03:05.130]                             sendCondition <<- function(cond) {
[17:03:05.130]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.130]                                 success = TRUE)
[17:03:05.130]                               parallel_sendData(master, data)
[17:03:05.130]                             }
[17:03:05.130]                             return(sendCondition)
[17:03:05.130]                           }
[17:03:05.130]                         }
[17:03:05.130]                         frame <- frame + 1L
[17:03:05.130]                         envir <- sys.frame(frame)
[17:03:05.130]                       }
[17:03:05.130]                     }
[17:03:05.130]                     sendCondition <<- function(cond) NULL
[17:03:05.130]                   }
[17:03:05.130]                 })
[17:03:05.130]                 withCallingHandlers({
[17:03:05.130]                   {
[17:03:05.130]                     42L
[17:03:05.130]                   }
[17:03:05.130]                 }, immediateCondition = function(cond) {
[17:03:05.130]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.130]                   sendCondition(cond)
[17:03:05.130]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.130]                   {
[17:03:05.130]                     inherits <- base::inherits
[17:03:05.130]                     invokeRestart <- base::invokeRestart
[17:03:05.130]                     is.null <- base::is.null
[17:03:05.130]                     muffled <- FALSE
[17:03:05.130]                     if (inherits(cond, "message")) {
[17:03:05.130]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.130]                       if (muffled) 
[17:03:05.130]                         invokeRestart("muffleMessage")
[17:03:05.130]                     }
[17:03:05.130]                     else if (inherits(cond, "warning")) {
[17:03:05.130]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.130]                       if (muffled) 
[17:03:05.130]                         invokeRestart("muffleWarning")
[17:03:05.130]                     }
[17:03:05.130]                     else if (inherits(cond, "condition")) {
[17:03:05.130]                       if (!is.null(pattern)) {
[17:03:05.130]                         computeRestarts <- base::computeRestarts
[17:03:05.130]                         grepl <- base::grepl
[17:03:05.130]                         restarts <- computeRestarts(cond)
[17:03:05.130]                         for (restart in restarts) {
[17:03:05.130]                           name <- restart$name
[17:03:05.130]                           if (is.null(name)) 
[17:03:05.130]                             next
[17:03:05.130]                           if (!grepl(pattern, name)) 
[17:03:05.130]                             next
[17:03:05.130]                           invokeRestart(restart)
[17:03:05.130]                           muffled <- TRUE
[17:03:05.130]                           break
[17:03:05.130]                         }
[17:03:05.130]                       }
[17:03:05.130]                     }
[17:03:05.130]                     invisible(muffled)
[17:03:05.130]                   }
[17:03:05.130]                   muffleCondition(cond)
[17:03:05.130]                 })
[17:03:05.130]             }))
[17:03:05.130]             future::FutureResult(value = ...future.value$value, 
[17:03:05.130]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.130]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.130]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.130]                     ...future.globalenv.names))
[17:03:05.130]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.130]         }, condition = base::local({
[17:03:05.130]             c <- base::c
[17:03:05.130]             inherits <- base::inherits
[17:03:05.130]             invokeRestart <- base::invokeRestart
[17:03:05.130]             length <- base::length
[17:03:05.130]             list <- base::list
[17:03:05.130]             seq.int <- base::seq.int
[17:03:05.130]             signalCondition <- base::signalCondition
[17:03:05.130]             sys.calls <- base::sys.calls
[17:03:05.130]             `[[` <- base::`[[`
[17:03:05.130]             `+` <- base::`+`
[17:03:05.130]             `<<-` <- base::`<<-`
[17:03:05.130]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.130]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.130]                   3L)]
[17:03:05.130]             }
[17:03:05.130]             function(cond) {
[17:03:05.130]                 is_error <- inherits(cond, "error")
[17:03:05.130]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.130]                   NULL)
[17:03:05.130]                 if (is_error) {
[17:03:05.130]                   sessionInformation <- function() {
[17:03:05.130]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.130]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.130]                       search = base::search(), system = base::Sys.info())
[17:03:05.130]                   }
[17:03:05.130]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.130]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.130]                     cond$call), session = sessionInformation(), 
[17:03:05.130]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.130]                   signalCondition(cond)
[17:03:05.130]                 }
[17:03:05.130]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.130]                 "immediateCondition"))) {
[17:03:05.130]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.130]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.130]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.130]                   if (TRUE && !signal) {
[17:03:05.130]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.130]                     {
[17:03:05.130]                       inherits <- base::inherits
[17:03:05.130]                       invokeRestart <- base::invokeRestart
[17:03:05.130]                       is.null <- base::is.null
[17:03:05.130]                       muffled <- FALSE
[17:03:05.130]                       if (inherits(cond, "message")) {
[17:03:05.130]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.130]                         if (muffled) 
[17:03:05.130]                           invokeRestart("muffleMessage")
[17:03:05.130]                       }
[17:03:05.130]                       else if (inherits(cond, "warning")) {
[17:03:05.130]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.130]                         if (muffled) 
[17:03:05.130]                           invokeRestart("muffleWarning")
[17:03:05.130]                       }
[17:03:05.130]                       else if (inherits(cond, "condition")) {
[17:03:05.130]                         if (!is.null(pattern)) {
[17:03:05.130]                           computeRestarts <- base::computeRestarts
[17:03:05.130]                           grepl <- base::grepl
[17:03:05.130]                           restarts <- computeRestarts(cond)
[17:03:05.130]                           for (restart in restarts) {
[17:03:05.130]                             name <- restart$name
[17:03:05.130]                             if (is.null(name)) 
[17:03:05.130]                               next
[17:03:05.130]                             if (!grepl(pattern, name)) 
[17:03:05.130]                               next
[17:03:05.130]                             invokeRestart(restart)
[17:03:05.130]                             muffled <- TRUE
[17:03:05.130]                             break
[17:03:05.130]                           }
[17:03:05.130]                         }
[17:03:05.130]                       }
[17:03:05.130]                       invisible(muffled)
[17:03:05.130]                     }
[17:03:05.130]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.130]                   }
[17:03:05.130]                 }
[17:03:05.130]                 else {
[17:03:05.130]                   if (TRUE) {
[17:03:05.130]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.130]                     {
[17:03:05.130]                       inherits <- base::inherits
[17:03:05.130]                       invokeRestart <- base::invokeRestart
[17:03:05.130]                       is.null <- base::is.null
[17:03:05.130]                       muffled <- FALSE
[17:03:05.130]                       if (inherits(cond, "message")) {
[17:03:05.130]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.130]                         if (muffled) 
[17:03:05.130]                           invokeRestart("muffleMessage")
[17:03:05.130]                       }
[17:03:05.130]                       else if (inherits(cond, "warning")) {
[17:03:05.130]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.130]                         if (muffled) 
[17:03:05.130]                           invokeRestart("muffleWarning")
[17:03:05.130]                       }
[17:03:05.130]                       else if (inherits(cond, "condition")) {
[17:03:05.130]                         if (!is.null(pattern)) {
[17:03:05.130]                           computeRestarts <- base::computeRestarts
[17:03:05.130]                           grepl <- base::grepl
[17:03:05.130]                           restarts <- computeRestarts(cond)
[17:03:05.130]                           for (restart in restarts) {
[17:03:05.130]                             name <- restart$name
[17:03:05.130]                             if (is.null(name)) 
[17:03:05.130]                               next
[17:03:05.130]                             if (!grepl(pattern, name)) 
[17:03:05.130]                               next
[17:03:05.130]                             invokeRestart(restart)
[17:03:05.130]                             muffled <- TRUE
[17:03:05.130]                             break
[17:03:05.130]                           }
[17:03:05.130]                         }
[17:03:05.130]                       }
[17:03:05.130]                       invisible(muffled)
[17:03:05.130]                     }
[17:03:05.130]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.130]                   }
[17:03:05.130]                 }
[17:03:05.130]             }
[17:03:05.130]         }))
[17:03:05.130]     }, error = function(ex) {
[17:03:05.130]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.130]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.130]                 ...future.rng), started = ...future.startTime, 
[17:03:05.130]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.130]             version = "1.8"), class = "FutureResult")
[17:03:05.130]     }, finally = {
[17:03:05.130]         if (!identical(...future.workdir, getwd())) 
[17:03:05.130]             setwd(...future.workdir)
[17:03:05.130]         {
[17:03:05.130]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.130]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.130]             }
[17:03:05.130]             base::options(...future.oldOptions)
[17:03:05.130]             if (.Platform$OS.type == "windows") {
[17:03:05.130]                 old_names <- names(...future.oldEnvVars)
[17:03:05.130]                 envs <- base::Sys.getenv()
[17:03:05.130]                 names <- names(envs)
[17:03:05.130]                 common <- intersect(names, old_names)
[17:03:05.130]                 added <- setdiff(names, old_names)
[17:03:05.130]                 removed <- setdiff(old_names, names)
[17:03:05.130]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.130]                   envs[common]]
[17:03:05.130]                 NAMES <- toupper(changed)
[17:03:05.130]                 args <- list()
[17:03:05.130]                 for (kk in seq_along(NAMES)) {
[17:03:05.130]                   name <- changed[[kk]]
[17:03:05.130]                   NAME <- NAMES[[kk]]
[17:03:05.130]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.130]                     next
[17:03:05.130]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.130]                 }
[17:03:05.130]                 NAMES <- toupper(added)
[17:03:05.130]                 for (kk in seq_along(NAMES)) {
[17:03:05.130]                   name <- added[[kk]]
[17:03:05.130]                   NAME <- NAMES[[kk]]
[17:03:05.130]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.130]                     next
[17:03:05.130]                   args[[name]] <- ""
[17:03:05.130]                 }
[17:03:05.130]                 NAMES <- toupper(removed)
[17:03:05.130]                 for (kk in seq_along(NAMES)) {
[17:03:05.130]                   name <- removed[[kk]]
[17:03:05.130]                   NAME <- NAMES[[kk]]
[17:03:05.130]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.130]                     next
[17:03:05.130]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.130]                 }
[17:03:05.130]                 if (length(args) > 0) 
[17:03:05.130]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.130]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.130]             }
[17:03:05.130]             else {
[17:03:05.130]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.130]             }
[17:03:05.130]             {
[17:03:05.130]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.130]                   0L) {
[17:03:05.130]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.130]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.130]                   base::options(opts)
[17:03:05.130]                 }
[17:03:05.130]                 {
[17:03:05.130]                   {
[17:03:05.130]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.130]                     NULL
[17:03:05.130]                   }
[17:03:05.130]                   options(future.plan = NULL)
[17:03:05.130]                   if (is.na(NA_character_)) 
[17:03:05.130]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.130]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.130]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.130]                     .init = FALSE)
[17:03:05.130]                 }
[17:03:05.130]             }
[17:03:05.130]         }
[17:03:05.130]     })
[17:03:05.130]     if (TRUE) {
[17:03:05.130]         base::sink(type = "output", split = FALSE)
[17:03:05.130]         if (TRUE) {
[17:03:05.130]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.130]         }
[17:03:05.130]         else {
[17:03:05.130]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.130]         }
[17:03:05.130]         base::close(...future.stdout)
[17:03:05.130]         ...future.stdout <- NULL
[17:03:05.130]     }
[17:03:05.130]     ...future.result$conditions <- ...future.conditions
[17:03:05.130]     ...future.result$finished <- base::Sys.time()
[17:03:05.130]     ...future.result
[17:03:05.130] }
[17:03:05.185] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[17:03:05.207] result() for ClusterFuture ...
[17:03:05.208] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.208] - Validating connection of MultisessionFuture
[17:03:05.218] - received message: FutureResult
[17:03:05.218] - Received FutureResult
[17:03:05.221] - Erased future from FutureRegistry
[17:03:05.221] result() for ClusterFuture ...
[17:03:05.221] - result already collected: FutureResult
[17:03:05.221] result() for ClusterFuture ... done
[17:03:05.221] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:05.222] result() for ClusterFuture ... done
[17:03:05.222] result() for ClusterFuture ...
[17:03:05.222] - result already collected: FutureResult
[17:03:05.222] result() for ClusterFuture ... done
[1] 42
[17:03:05.226] getGlobalsAndPackages() ...
[17:03:05.226] Searching for globals...
[17:03:05.229] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:03:05.229] Searching for globals ... DONE
[17:03:05.229] Resolving globals: FALSE
[17:03:05.229] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:05.230] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:03:05.230] - globals: [1] ‘a’
[17:03:05.230] 
[17:03:05.230] getGlobalsAndPackages() ... DONE
[17:03:05.241] Packages needed by the future expression (n = 0): <none>
[17:03:05.242] Packages needed by future strategies (n = 0): <none>
[17:03:05.242] {
[17:03:05.242]     {
[17:03:05.242]         {
[17:03:05.242]             ...future.startTime <- base::Sys.time()
[17:03:05.242]             {
[17:03:05.242]                 {
[17:03:05.242]                   {
[17:03:05.242]                     {
[17:03:05.242]                       base::local({
[17:03:05.242]                         has_future <- base::requireNamespace("future", 
[17:03:05.242]                           quietly = TRUE)
[17:03:05.242]                         if (has_future) {
[17:03:05.242]                           ns <- base::getNamespace("future")
[17:03:05.242]                           version <- ns[[".package"]][["version"]]
[17:03:05.242]                           if (is.null(version)) 
[17:03:05.242]                             version <- utils::packageVersion("future")
[17:03:05.242]                         }
[17:03:05.242]                         else {
[17:03:05.242]                           version <- NULL
[17:03:05.242]                         }
[17:03:05.242]                         if (!has_future || version < "1.8.0") {
[17:03:05.242]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.242]                             "", base::R.version$version.string), 
[17:03:05.242]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.242]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.242]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.242]                               "release", "version")], collapse = " "), 
[17:03:05.242]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.242]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.242]                             info)
[17:03:05.242]                           info <- base::paste(info, collapse = "; ")
[17:03:05.242]                           if (!has_future) {
[17:03:05.242]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.242]                               info)
[17:03:05.242]                           }
[17:03:05.242]                           else {
[17:03:05.242]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.242]                               info, version)
[17:03:05.242]                           }
[17:03:05.242]                           base::stop(msg)
[17:03:05.242]                         }
[17:03:05.242]                       })
[17:03:05.242]                     }
[17:03:05.242]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.242]                     base::options(mc.cores = 1L)
[17:03:05.242]                   }
[17:03:05.242]                   ...future.strategy.old <- future::plan("list")
[17:03:05.242]                   options(future.plan = NULL)
[17:03:05.242]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.242]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.242]                 }
[17:03:05.242]                 ...future.workdir <- getwd()
[17:03:05.242]             }
[17:03:05.242]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.242]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.242]         }
[17:03:05.242]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.242]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.242]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.242]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.242]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.242]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.242]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.242]             base::names(...future.oldOptions))
[17:03:05.242]     }
[17:03:05.242]     if (FALSE) {
[17:03:05.242]     }
[17:03:05.242]     else {
[17:03:05.242]         if (TRUE) {
[17:03:05.242]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.242]                 open = "w")
[17:03:05.242]         }
[17:03:05.242]         else {
[17:03:05.242]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.242]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.242]         }
[17:03:05.242]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.242]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.242]             base::sink(type = "output", split = FALSE)
[17:03:05.242]             base::close(...future.stdout)
[17:03:05.242]         }, add = TRUE)
[17:03:05.242]     }
[17:03:05.242]     ...future.frame <- base::sys.nframe()
[17:03:05.242]     ...future.conditions <- base::list()
[17:03:05.242]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.242]     if (FALSE) {
[17:03:05.242]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.242]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.242]     }
[17:03:05.242]     ...future.result <- base::tryCatch({
[17:03:05.242]         base::withCallingHandlers({
[17:03:05.242]             ...future.value <- base::withVisible(base::local({
[17:03:05.242]                 ...future.makeSendCondition <- base::local({
[17:03:05.242]                   sendCondition <- NULL
[17:03:05.242]                   function(frame = 1L) {
[17:03:05.242]                     if (is.function(sendCondition)) 
[17:03:05.242]                       return(sendCondition)
[17:03:05.242]                     ns <- getNamespace("parallel")
[17:03:05.242]                     if (exists("sendData", mode = "function", 
[17:03:05.242]                       envir = ns)) {
[17:03:05.242]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.242]                         envir = ns)
[17:03:05.242]                       envir <- sys.frame(frame)
[17:03:05.242]                       master <- NULL
[17:03:05.242]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.242]                         !identical(envir, emptyenv())) {
[17:03:05.242]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.242]                           inherits = FALSE)) {
[17:03:05.242]                           master <- get("master", mode = "list", 
[17:03:05.242]                             envir = envir, inherits = FALSE)
[17:03:05.242]                           if (inherits(master, c("SOCKnode", 
[17:03:05.242]                             "SOCK0node"))) {
[17:03:05.242]                             sendCondition <<- function(cond) {
[17:03:05.242]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.242]                                 success = TRUE)
[17:03:05.242]                               parallel_sendData(master, data)
[17:03:05.242]                             }
[17:03:05.242]                             return(sendCondition)
[17:03:05.242]                           }
[17:03:05.242]                         }
[17:03:05.242]                         frame <- frame + 1L
[17:03:05.242]                         envir <- sys.frame(frame)
[17:03:05.242]                       }
[17:03:05.242]                     }
[17:03:05.242]                     sendCondition <<- function(cond) NULL
[17:03:05.242]                   }
[17:03:05.242]                 })
[17:03:05.242]                 withCallingHandlers({
[17:03:05.242]                   {
[17:03:05.242]                     b <- 3
[17:03:05.242]                     c <- 2
[17:03:05.242]                     a * b * c
[17:03:05.242]                   }
[17:03:05.242]                 }, immediateCondition = function(cond) {
[17:03:05.242]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.242]                   sendCondition(cond)
[17:03:05.242]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.242]                   {
[17:03:05.242]                     inherits <- base::inherits
[17:03:05.242]                     invokeRestart <- base::invokeRestart
[17:03:05.242]                     is.null <- base::is.null
[17:03:05.242]                     muffled <- FALSE
[17:03:05.242]                     if (inherits(cond, "message")) {
[17:03:05.242]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.242]                       if (muffled) 
[17:03:05.242]                         invokeRestart("muffleMessage")
[17:03:05.242]                     }
[17:03:05.242]                     else if (inherits(cond, "warning")) {
[17:03:05.242]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.242]                       if (muffled) 
[17:03:05.242]                         invokeRestart("muffleWarning")
[17:03:05.242]                     }
[17:03:05.242]                     else if (inherits(cond, "condition")) {
[17:03:05.242]                       if (!is.null(pattern)) {
[17:03:05.242]                         computeRestarts <- base::computeRestarts
[17:03:05.242]                         grepl <- base::grepl
[17:03:05.242]                         restarts <- computeRestarts(cond)
[17:03:05.242]                         for (restart in restarts) {
[17:03:05.242]                           name <- restart$name
[17:03:05.242]                           if (is.null(name)) 
[17:03:05.242]                             next
[17:03:05.242]                           if (!grepl(pattern, name)) 
[17:03:05.242]                             next
[17:03:05.242]                           invokeRestart(restart)
[17:03:05.242]                           muffled <- TRUE
[17:03:05.242]                           break
[17:03:05.242]                         }
[17:03:05.242]                       }
[17:03:05.242]                     }
[17:03:05.242]                     invisible(muffled)
[17:03:05.242]                   }
[17:03:05.242]                   muffleCondition(cond)
[17:03:05.242]                 })
[17:03:05.242]             }))
[17:03:05.242]             future::FutureResult(value = ...future.value$value, 
[17:03:05.242]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.242]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.242]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.242]                     ...future.globalenv.names))
[17:03:05.242]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.242]         }, condition = base::local({
[17:03:05.242]             c <- base::c
[17:03:05.242]             inherits <- base::inherits
[17:03:05.242]             invokeRestart <- base::invokeRestart
[17:03:05.242]             length <- base::length
[17:03:05.242]             list <- base::list
[17:03:05.242]             seq.int <- base::seq.int
[17:03:05.242]             signalCondition <- base::signalCondition
[17:03:05.242]             sys.calls <- base::sys.calls
[17:03:05.242]             `[[` <- base::`[[`
[17:03:05.242]             `+` <- base::`+`
[17:03:05.242]             `<<-` <- base::`<<-`
[17:03:05.242]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.242]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.242]                   3L)]
[17:03:05.242]             }
[17:03:05.242]             function(cond) {
[17:03:05.242]                 is_error <- inherits(cond, "error")
[17:03:05.242]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.242]                   NULL)
[17:03:05.242]                 if (is_error) {
[17:03:05.242]                   sessionInformation <- function() {
[17:03:05.242]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.242]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.242]                       search = base::search(), system = base::Sys.info())
[17:03:05.242]                   }
[17:03:05.242]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.242]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.242]                     cond$call), session = sessionInformation(), 
[17:03:05.242]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.242]                   signalCondition(cond)
[17:03:05.242]                 }
[17:03:05.242]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.242]                 "immediateCondition"))) {
[17:03:05.242]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.242]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.242]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.242]                   if (TRUE && !signal) {
[17:03:05.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.242]                     {
[17:03:05.242]                       inherits <- base::inherits
[17:03:05.242]                       invokeRestart <- base::invokeRestart
[17:03:05.242]                       is.null <- base::is.null
[17:03:05.242]                       muffled <- FALSE
[17:03:05.242]                       if (inherits(cond, "message")) {
[17:03:05.242]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.242]                         if (muffled) 
[17:03:05.242]                           invokeRestart("muffleMessage")
[17:03:05.242]                       }
[17:03:05.242]                       else if (inherits(cond, "warning")) {
[17:03:05.242]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.242]                         if (muffled) 
[17:03:05.242]                           invokeRestart("muffleWarning")
[17:03:05.242]                       }
[17:03:05.242]                       else if (inherits(cond, "condition")) {
[17:03:05.242]                         if (!is.null(pattern)) {
[17:03:05.242]                           computeRestarts <- base::computeRestarts
[17:03:05.242]                           grepl <- base::grepl
[17:03:05.242]                           restarts <- computeRestarts(cond)
[17:03:05.242]                           for (restart in restarts) {
[17:03:05.242]                             name <- restart$name
[17:03:05.242]                             if (is.null(name)) 
[17:03:05.242]                               next
[17:03:05.242]                             if (!grepl(pattern, name)) 
[17:03:05.242]                               next
[17:03:05.242]                             invokeRestart(restart)
[17:03:05.242]                             muffled <- TRUE
[17:03:05.242]                             break
[17:03:05.242]                           }
[17:03:05.242]                         }
[17:03:05.242]                       }
[17:03:05.242]                       invisible(muffled)
[17:03:05.242]                     }
[17:03:05.242]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.242]                   }
[17:03:05.242]                 }
[17:03:05.242]                 else {
[17:03:05.242]                   if (TRUE) {
[17:03:05.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.242]                     {
[17:03:05.242]                       inherits <- base::inherits
[17:03:05.242]                       invokeRestart <- base::invokeRestart
[17:03:05.242]                       is.null <- base::is.null
[17:03:05.242]                       muffled <- FALSE
[17:03:05.242]                       if (inherits(cond, "message")) {
[17:03:05.242]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.242]                         if (muffled) 
[17:03:05.242]                           invokeRestart("muffleMessage")
[17:03:05.242]                       }
[17:03:05.242]                       else if (inherits(cond, "warning")) {
[17:03:05.242]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.242]                         if (muffled) 
[17:03:05.242]                           invokeRestart("muffleWarning")
[17:03:05.242]                       }
[17:03:05.242]                       else if (inherits(cond, "condition")) {
[17:03:05.242]                         if (!is.null(pattern)) {
[17:03:05.242]                           computeRestarts <- base::computeRestarts
[17:03:05.242]                           grepl <- base::grepl
[17:03:05.242]                           restarts <- computeRestarts(cond)
[17:03:05.242]                           for (restart in restarts) {
[17:03:05.242]                             name <- restart$name
[17:03:05.242]                             if (is.null(name)) 
[17:03:05.242]                               next
[17:03:05.242]                             if (!grepl(pattern, name)) 
[17:03:05.242]                               next
[17:03:05.242]                             invokeRestart(restart)
[17:03:05.242]                             muffled <- TRUE
[17:03:05.242]                             break
[17:03:05.242]                           }
[17:03:05.242]                         }
[17:03:05.242]                       }
[17:03:05.242]                       invisible(muffled)
[17:03:05.242]                     }
[17:03:05.242]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.242]                   }
[17:03:05.242]                 }
[17:03:05.242]             }
[17:03:05.242]         }))
[17:03:05.242]     }, error = function(ex) {
[17:03:05.242]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.242]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.242]                 ...future.rng), started = ...future.startTime, 
[17:03:05.242]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.242]             version = "1.8"), class = "FutureResult")
[17:03:05.242]     }, finally = {
[17:03:05.242]         if (!identical(...future.workdir, getwd())) 
[17:03:05.242]             setwd(...future.workdir)
[17:03:05.242]         {
[17:03:05.242]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.242]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.242]             }
[17:03:05.242]             base::options(...future.oldOptions)
[17:03:05.242]             if (.Platform$OS.type == "windows") {
[17:03:05.242]                 old_names <- names(...future.oldEnvVars)
[17:03:05.242]                 envs <- base::Sys.getenv()
[17:03:05.242]                 names <- names(envs)
[17:03:05.242]                 common <- intersect(names, old_names)
[17:03:05.242]                 added <- setdiff(names, old_names)
[17:03:05.242]                 removed <- setdiff(old_names, names)
[17:03:05.242]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.242]                   envs[common]]
[17:03:05.242]                 NAMES <- toupper(changed)
[17:03:05.242]                 args <- list()
[17:03:05.242]                 for (kk in seq_along(NAMES)) {
[17:03:05.242]                   name <- changed[[kk]]
[17:03:05.242]                   NAME <- NAMES[[kk]]
[17:03:05.242]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.242]                     next
[17:03:05.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.242]                 }
[17:03:05.242]                 NAMES <- toupper(added)
[17:03:05.242]                 for (kk in seq_along(NAMES)) {
[17:03:05.242]                   name <- added[[kk]]
[17:03:05.242]                   NAME <- NAMES[[kk]]
[17:03:05.242]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.242]                     next
[17:03:05.242]                   args[[name]] <- ""
[17:03:05.242]                 }
[17:03:05.242]                 NAMES <- toupper(removed)
[17:03:05.242]                 for (kk in seq_along(NAMES)) {
[17:03:05.242]                   name <- removed[[kk]]
[17:03:05.242]                   NAME <- NAMES[[kk]]
[17:03:05.242]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.242]                     next
[17:03:05.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.242]                 }
[17:03:05.242]                 if (length(args) > 0) 
[17:03:05.242]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.242]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.242]             }
[17:03:05.242]             else {
[17:03:05.242]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.242]             }
[17:03:05.242]             {
[17:03:05.242]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.242]                   0L) {
[17:03:05.242]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.242]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.242]                   base::options(opts)
[17:03:05.242]                 }
[17:03:05.242]                 {
[17:03:05.242]                   {
[17:03:05.242]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.242]                     NULL
[17:03:05.242]                   }
[17:03:05.242]                   options(future.plan = NULL)
[17:03:05.242]                   if (is.na(NA_character_)) 
[17:03:05.242]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.242]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.242]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.242]                     .init = FALSE)
[17:03:05.242]                 }
[17:03:05.242]             }
[17:03:05.242]         }
[17:03:05.242]     })
[17:03:05.242]     if (TRUE) {
[17:03:05.242]         base::sink(type = "output", split = FALSE)
[17:03:05.242]         if (TRUE) {
[17:03:05.242]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.242]         }
[17:03:05.242]         else {
[17:03:05.242]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.242]         }
[17:03:05.242]         base::close(...future.stdout)
[17:03:05.242]         ...future.stdout <- NULL
[17:03:05.242]     }
[17:03:05.242]     ...future.result$conditions <- ...future.conditions
[17:03:05.242]     ...future.result$finished <- base::Sys.time()
[17:03:05.242]     ...future.result
[17:03:05.242] }
[17:03:05.245] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:03:05.245] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:03:05.246] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:03:05.246] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:03:05.246] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:05.249] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.249] - Validating connection of MultisessionFuture
[17:03:05.249] - received message: FutureResult
[17:03:05.249] - Received FutureResult
[17:03:05.249] - Erased future from FutureRegistry
[17:03:05.250] result() for ClusterFuture ...
[17:03:05.250] - result already collected: FutureResult
[17:03:05.250] result() for ClusterFuture ... done
[17:03:05.250] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:05.250] result() for ClusterFuture ...
[17:03:05.250] - result already collected: FutureResult
[17:03:05.250] result() for ClusterFuture ... done
[17:03:05.250] result() for ClusterFuture ...
[17:03:05.251] - result already collected: FutureResult
[17:03:05.251] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[17:03:05.255] getGlobalsAndPackages() ...
[17:03:05.255] Searching for globals...
[17:03:05.256] - globals found: [2] ‘{’, ‘ii’
[17:03:05.256] Searching for globals ... DONE
[17:03:05.256] Resolving globals: FALSE
[17:03:05.256] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:05.257] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:05.257] - globals: [1] ‘ii’
[17:03:05.257] 
[17:03:05.257] getGlobalsAndPackages() ... DONE
[17:03:05.268] Packages needed by the future expression (n = 0): <none>
[17:03:05.269] Packages needed by future strategies (n = 0): <none>
[17:03:05.269] {
[17:03:05.269]     {
[17:03:05.269]         {
[17:03:05.269]             ...future.startTime <- base::Sys.time()
[17:03:05.269]             {
[17:03:05.269]                 {
[17:03:05.269]                   {
[17:03:05.269]                     {
[17:03:05.269]                       base::local({
[17:03:05.269]                         has_future <- base::requireNamespace("future", 
[17:03:05.269]                           quietly = TRUE)
[17:03:05.269]                         if (has_future) {
[17:03:05.269]                           ns <- base::getNamespace("future")
[17:03:05.269]                           version <- ns[[".package"]][["version"]]
[17:03:05.269]                           if (is.null(version)) 
[17:03:05.269]                             version <- utils::packageVersion("future")
[17:03:05.269]                         }
[17:03:05.269]                         else {
[17:03:05.269]                           version <- NULL
[17:03:05.269]                         }
[17:03:05.269]                         if (!has_future || version < "1.8.0") {
[17:03:05.269]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.269]                             "", base::R.version$version.string), 
[17:03:05.269]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.269]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.269]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.269]                               "release", "version")], collapse = " "), 
[17:03:05.269]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.269]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.269]                             info)
[17:03:05.269]                           info <- base::paste(info, collapse = "; ")
[17:03:05.269]                           if (!has_future) {
[17:03:05.269]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.269]                               info)
[17:03:05.269]                           }
[17:03:05.269]                           else {
[17:03:05.269]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.269]                               info, version)
[17:03:05.269]                           }
[17:03:05.269]                           base::stop(msg)
[17:03:05.269]                         }
[17:03:05.269]                       })
[17:03:05.269]                     }
[17:03:05.269]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.269]                     base::options(mc.cores = 1L)
[17:03:05.269]                   }
[17:03:05.269]                   ...future.strategy.old <- future::plan("list")
[17:03:05.269]                   options(future.plan = NULL)
[17:03:05.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.269]                 }
[17:03:05.269]                 ...future.workdir <- getwd()
[17:03:05.269]             }
[17:03:05.269]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.269]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.269]         }
[17:03:05.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.269]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.269]             base::names(...future.oldOptions))
[17:03:05.269]     }
[17:03:05.269]     if (FALSE) {
[17:03:05.269]     }
[17:03:05.269]     else {
[17:03:05.269]         if (TRUE) {
[17:03:05.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.269]                 open = "w")
[17:03:05.269]         }
[17:03:05.269]         else {
[17:03:05.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.269]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.269]         }
[17:03:05.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.269]             base::sink(type = "output", split = FALSE)
[17:03:05.269]             base::close(...future.stdout)
[17:03:05.269]         }, add = TRUE)
[17:03:05.269]     }
[17:03:05.269]     ...future.frame <- base::sys.nframe()
[17:03:05.269]     ...future.conditions <- base::list()
[17:03:05.269]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.269]     if (FALSE) {
[17:03:05.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.269]     }
[17:03:05.269]     ...future.result <- base::tryCatch({
[17:03:05.269]         base::withCallingHandlers({
[17:03:05.269]             ...future.value <- base::withVisible(base::local({
[17:03:05.269]                 ...future.makeSendCondition <- base::local({
[17:03:05.269]                   sendCondition <- NULL
[17:03:05.269]                   function(frame = 1L) {
[17:03:05.269]                     if (is.function(sendCondition)) 
[17:03:05.269]                       return(sendCondition)
[17:03:05.269]                     ns <- getNamespace("parallel")
[17:03:05.269]                     if (exists("sendData", mode = "function", 
[17:03:05.269]                       envir = ns)) {
[17:03:05.269]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.269]                         envir = ns)
[17:03:05.269]                       envir <- sys.frame(frame)
[17:03:05.269]                       master <- NULL
[17:03:05.269]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.269]                         !identical(envir, emptyenv())) {
[17:03:05.269]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.269]                           inherits = FALSE)) {
[17:03:05.269]                           master <- get("master", mode = "list", 
[17:03:05.269]                             envir = envir, inherits = FALSE)
[17:03:05.269]                           if (inherits(master, c("SOCKnode", 
[17:03:05.269]                             "SOCK0node"))) {
[17:03:05.269]                             sendCondition <<- function(cond) {
[17:03:05.269]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.269]                                 success = TRUE)
[17:03:05.269]                               parallel_sendData(master, data)
[17:03:05.269]                             }
[17:03:05.269]                             return(sendCondition)
[17:03:05.269]                           }
[17:03:05.269]                         }
[17:03:05.269]                         frame <- frame + 1L
[17:03:05.269]                         envir <- sys.frame(frame)
[17:03:05.269]                       }
[17:03:05.269]                     }
[17:03:05.269]                     sendCondition <<- function(cond) NULL
[17:03:05.269]                   }
[17:03:05.269]                 })
[17:03:05.269]                 withCallingHandlers({
[17:03:05.269]                   {
[17:03:05.269]                     ii
[17:03:05.269]                   }
[17:03:05.269]                 }, immediateCondition = function(cond) {
[17:03:05.269]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.269]                   sendCondition(cond)
[17:03:05.269]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.269]                   {
[17:03:05.269]                     inherits <- base::inherits
[17:03:05.269]                     invokeRestart <- base::invokeRestart
[17:03:05.269]                     is.null <- base::is.null
[17:03:05.269]                     muffled <- FALSE
[17:03:05.269]                     if (inherits(cond, "message")) {
[17:03:05.269]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.269]                       if (muffled) 
[17:03:05.269]                         invokeRestart("muffleMessage")
[17:03:05.269]                     }
[17:03:05.269]                     else if (inherits(cond, "warning")) {
[17:03:05.269]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.269]                       if (muffled) 
[17:03:05.269]                         invokeRestart("muffleWarning")
[17:03:05.269]                     }
[17:03:05.269]                     else if (inherits(cond, "condition")) {
[17:03:05.269]                       if (!is.null(pattern)) {
[17:03:05.269]                         computeRestarts <- base::computeRestarts
[17:03:05.269]                         grepl <- base::grepl
[17:03:05.269]                         restarts <- computeRestarts(cond)
[17:03:05.269]                         for (restart in restarts) {
[17:03:05.269]                           name <- restart$name
[17:03:05.269]                           if (is.null(name)) 
[17:03:05.269]                             next
[17:03:05.269]                           if (!grepl(pattern, name)) 
[17:03:05.269]                             next
[17:03:05.269]                           invokeRestart(restart)
[17:03:05.269]                           muffled <- TRUE
[17:03:05.269]                           break
[17:03:05.269]                         }
[17:03:05.269]                       }
[17:03:05.269]                     }
[17:03:05.269]                     invisible(muffled)
[17:03:05.269]                   }
[17:03:05.269]                   muffleCondition(cond)
[17:03:05.269]                 })
[17:03:05.269]             }))
[17:03:05.269]             future::FutureResult(value = ...future.value$value, 
[17:03:05.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.269]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.269]                     ...future.globalenv.names))
[17:03:05.269]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.269]         }, condition = base::local({
[17:03:05.269]             c <- base::c
[17:03:05.269]             inherits <- base::inherits
[17:03:05.269]             invokeRestart <- base::invokeRestart
[17:03:05.269]             length <- base::length
[17:03:05.269]             list <- base::list
[17:03:05.269]             seq.int <- base::seq.int
[17:03:05.269]             signalCondition <- base::signalCondition
[17:03:05.269]             sys.calls <- base::sys.calls
[17:03:05.269]             `[[` <- base::`[[`
[17:03:05.269]             `+` <- base::`+`
[17:03:05.269]             `<<-` <- base::`<<-`
[17:03:05.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.269]                   3L)]
[17:03:05.269]             }
[17:03:05.269]             function(cond) {
[17:03:05.269]                 is_error <- inherits(cond, "error")
[17:03:05.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.269]                   NULL)
[17:03:05.269]                 if (is_error) {
[17:03:05.269]                   sessionInformation <- function() {
[17:03:05.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.269]                       search = base::search(), system = base::Sys.info())
[17:03:05.269]                   }
[17:03:05.269]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.269]                     cond$call), session = sessionInformation(), 
[17:03:05.269]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.269]                   signalCondition(cond)
[17:03:05.269]                 }
[17:03:05.269]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.269]                 "immediateCondition"))) {
[17:03:05.269]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.269]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.269]                   if (TRUE && !signal) {
[17:03:05.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.269]                     {
[17:03:05.269]                       inherits <- base::inherits
[17:03:05.269]                       invokeRestart <- base::invokeRestart
[17:03:05.269]                       is.null <- base::is.null
[17:03:05.269]                       muffled <- FALSE
[17:03:05.269]                       if (inherits(cond, "message")) {
[17:03:05.269]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.269]                         if (muffled) 
[17:03:05.269]                           invokeRestart("muffleMessage")
[17:03:05.269]                       }
[17:03:05.269]                       else if (inherits(cond, "warning")) {
[17:03:05.269]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.269]                         if (muffled) 
[17:03:05.269]                           invokeRestart("muffleWarning")
[17:03:05.269]                       }
[17:03:05.269]                       else if (inherits(cond, "condition")) {
[17:03:05.269]                         if (!is.null(pattern)) {
[17:03:05.269]                           computeRestarts <- base::computeRestarts
[17:03:05.269]                           grepl <- base::grepl
[17:03:05.269]                           restarts <- computeRestarts(cond)
[17:03:05.269]                           for (restart in restarts) {
[17:03:05.269]                             name <- restart$name
[17:03:05.269]                             if (is.null(name)) 
[17:03:05.269]                               next
[17:03:05.269]                             if (!grepl(pattern, name)) 
[17:03:05.269]                               next
[17:03:05.269]                             invokeRestart(restart)
[17:03:05.269]                             muffled <- TRUE
[17:03:05.269]                             break
[17:03:05.269]                           }
[17:03:05.269]                         }
[17:03:05.269]                       }
[17:03:05.269]                       invisible(muffled)
[17:03:05.269]                     }
[17:03:05.269]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.269]                   }
[17:03:05.269]                 }
[17:03:05.269]                 else {
[17:03:05.269]                   if (TRUE) {
[17:03:05.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.269]                     {
[17:03:05.269]                       inherits <- base::inherits
[17:03:05.269]                       invokeRestart <- base::invokeRestart
[17:03:05.269]                       is.null <- base::is.null
[17:03:05.269]                       muffled <- FALSE
[17:03:05.269]                       if (inherits(cond, "message")) {
[17:03:05.269]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.269]                         if (muffled) 
[17:03:05.269]                           invokeRestart("muffleMessage")
[17:03:05.269]                       }
[17:03:05.269]                       else if (inherits(cond, "warning")) {
[17:03:05.269]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.269]                         if (muffled) 
[17:03:05.269]                           invokeRestart("muffleWarning")
[17:03:05.269]                       }
[17:03:05.269]                       else if (inherits(cond, "condition")) {
[17:03:05.269]                         if (!is.null(pattern)) {
[17:03:05.269]                           computeRestarts <- base::computeRestarts
[17:03:05.269]                           grepl <- base::grepl
[17:03:05.269]                           restarts <- computeRestarts(cond)
[17:03:05.269]                           for (restart in restarts) {
[17:03:05.269]                             name <- restart$name
[17:03:05.269]                             if (is.null(name)) 
[17:03:05.269]                               next
[17:03:05.269]                             if (!grepl(pattern, name)) 
[17:03:05.269]                               next
[17:03:05.269]                             invokeRestart(restart)
[17:03:05.269]                             muffled <- TRUE
[17:03:05.269]                             break
[17:03:05.269]                           }
[17:03:05.269]                         }
[17:03:05.269]                       }
[17:03:05.269]                       invisible(muffled)
[17:03:05.269]                     }
[17:03:05.269]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.269]                   }
[17:03:05.269]                 }
[17:03:05.269]             }
[17:03:05.269]         }))
[17:03:05.269]     }, error = function(ex) {
[17:03:05.269]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.269]                 ...future.rng), started = ...future.startTime, 
[17:03:05.269]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.269]             version = "1.8"), class = "FutureResult")
[17:03:05.269]     }, finally = {
[17:03:05.269]         if (!identical(...future.workdir, getwd())) 
[17:03:05.269]             setwd(...future.workdir)
[17:03:05.269]         {
[17:03:05.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.269]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.269]             }
[17:03:05.269]             base::options(...future.oldOptions)
[17:03:05.269]             if (.Platform$OS.type == "windows") {
[17:03:05.269]                 old_names <- names(...future.oldEnvVars)
[17:03:05.269]                 envs <- base::Sys.getenv()
[17:03:05.269]                 names <- names(envs)
[17:03:05.269]                 common <- intersect(names, old_names)
[17:03:05.269]                 added <- setdiff(names, old_names)
[17:03:05.269]                 removed <- setdiff(old_names, names)
[17:03:05.269]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.269]                   envs[common]]
[17:03:05.269]                 NAMES <- toupper(changed)
[17:03:05.269]                 args <- list()
[17:03:05.269]                 for (kk in seq_along(NAMES)) {
[17:03:05.269]                   name <- changed[[kk]]
[17:03:05.269]                   NAME <- NAMES[[kk]]
[17:03:05.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.269]                     next
[17:03:05.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.269]                 }
[17:03:05.269]                 NAMES <- toupper(added)
[17:03:05.269]                 for (kk in seq_along(NAMES)) {
[17:03:05.269]                   name <- added[[kk]]
[17:03:05.269]                   NAME <- NAMES[[kk]]
[17:03:05.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.269]                     next
[17:03:05.269]                   args[[name]] <- ""
[17:03:05.269]                 }
[17:03:05.269]                 NAMES <- toupper(removed)
[17:03:05.269]                 for (kk in seq_along(NAMES)) {
[17:03:05.269]                   name <- removed[[kk]]
[17:03:05.269]                   NAME <- NAMES[[kk]]
[17:03:05.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.269]                     next
[17:03:05.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.269]                 }
[17:03:05.269]                 if (length(args) > 0) 
[17:03:05.269]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.269]             }
[17:03:05.269]             else {
[17:03:05.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.269]             }
[17:03:05.269]             {
[17:03:05.269]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.269]                   0L) {
[17:03:05.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.269]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.269]                   base::options(opts)
[17:03:05.269]                 }
[17:03:05.269]                 {
[17:03:05.269]                   {
[17:03:05.269]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.269]                     NULL
[17:03:05.269]                   }
[17:03:05.269]                   options(future.plan = NULL)
[17:03:05.269]                   if (is.na(NA_character_)) 
[17:03:05.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.269]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.269]                     .init = FALSE)
[17:03:05.269]                 }
[17:03:05.269]             }
[17:03:05.269]         }
[17:03:05.269]     })
[17:03:05.269]     if (TRUE) {
[17:03:05.269]         base::sink(type = "output", split = FALSE)
[17:03:05.269]         if (TRUE) {
[17:03:05.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.269]         }
[17:03:05.269]         else {
[17:03:05.269]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.269]         }
[17:03:05.269]         base::close(...future.stdout)
[17:03:05.269]         ...future.stdout <- NULL
[17:03:05.269]     }
[17:03:05.269]     ...future.result$conditions <- ...future.conditions
[17:03:05.269]     ...future.result$finished <- base::Sys.time()
[17:03:05.269]     ...future.result
[17:03:05.269] }
[17:03:05.272] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:03:05.272] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:03:05.273] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:03:05.273] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:03:05.273] MultisessionFuture started
 - Creating multisession future #1 ...
[17:03:05.279] getGlobalsAndPackages() ...
[17:03:05.279] Searching for globals...
[17:03:05.280] - globals found: [2] ‘{’, ‘ii’
[17:03:05.280] Searching for globals ... DONE
[17:03:05.281] Resolving globals: FALSE
[17:03:05.281] The total size of the 1 globals is 56 bytes (56 bytes)
[17:03:05.281] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:03:05.282] - globals: [1] ‘ii’
[17:03:05.282] 
[17:03:05.282] getGlobalsAndPackages() ... DONE
[17:03:05.293] Packages needed by the future expression (n = 0): <none>
[17:03:05.293] Packages needed by future strategies (n = 0): <none>
[17:03:05.294] {
[17:03:05.294]     {
[17:03:05.294]         {
[17:03:05.294]             ...future.startTime <- base::Sys.time()
[17:03:05.294]             {
[17:03:05.294]                 {
[17:03:05.294]                   {
[17:03:05.294]                     {
[17:03:05.294]                       base::local({
[17:03:05.294]                         has_future <- base::requireNamespace("future", 
[17:03:05.294]                           quietly = TRUE)
[17:03:05.294]                         if (has_future) {
[17:03:05.294]                           ns <- base::getNamespace("future")
[17:03:05.294]                           version <- ns[[".package"]][["version"]]
[17:03:05.294]                           if (is.null(version)) 
[17:03:05.294]                             version <- utils::packageVersion("future")
[17:03:05.294]                         }
[17:03:05.294]                         else {
[17:03:05.294]                           version <- NULL
[17:03:05.294]                         }
[17:03:05.294]                         if (!has_future || version < "1.8.0") {
[17:03:05.294]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.294]                             "", base::R.version$version.string), 
[17:03:05.294]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.294]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.294]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.294]                               "release", "version")], collapse = " "), 
[17:03:05.294]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.294]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.294]                             info)
[17:03:05.294]                           info <- base::paste(info, collapse = "; ")
[17:03:05.294]                           if (!has_future) {
[17:03:05.294]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.294]                               info)
[17:03:05.294]                           }
[17:03:05.294]                           else {
[17:03:05.294]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.294]                               info, version)
[17:03:05.294]                           }
[17:03:05.294]                           base::stop(msg)
[17:03:05.294]                         }
[17:03:05.294]                       })
[17:03:05.294]                     }
[17:03:05.294]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.294]                     base::options(mc.cores = 1L)
[17:03:05.294]                   }
[17:03:05.294]                   ...future.strategy.old <- future::plan("list")
[17:03:05.294]                   options(future.plan = NULL)
[17:03:05.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.294]                 }
[17:03:05.294]                 ...future.workdir <- getwd()
[17:03:05.294]             }
[17:03:05.294]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.294]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.294]         }
[17:03:05.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.294]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.294]             base::names(...future.oldOptions))
[17:03:05.294]     }
[17:03:05.294]     if (FALSE) {
[17:03:05.294]     }
[17:03:05.294]     else {
[17:03:05.294]         if (TRUE) {
[17:03:05.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.294]                 open = "w")
[17:03:05.294]         }
[17:03:05.294]         else {
[17:03:05.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.294]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.294]         }
[17:03:05.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.294]             base::sink(type = "output", split = FALSE)
[17:03:05.294]             base::close(...future.stdout)
[17:03:05.294]         }, add = TRUE)
[17:03:05.294]     }
[17:03:05.294]     ...future.frame <- base::sys.nframe()
[17:03:05.294]     ...future.conditions <- base::list()
[17:03:05.294]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.294]     if (FALSE) {
[17:03:05.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.294]     }
[17:03:05.294]     ...future.result <- base::tryCatch({
[17:03:05.294]         base::withCallingHandlers({
[17:03:05.294]             ...future.value <- base::withVisible(base::local({
[17:03:05.294]                 ...future.makeSendCondition <- base::local({
[17:03:05.294]                   sendCondition <- NULL
[17:03:05.294]                   function(frame = 1L) {
[17:03:05.294]                     if (is.function(sendCondition)) 
[17:03:05.294]                       return(sendCondition)
[17:03:05.294]                     ns <- getNamespace("parallel")
[17:03:05.294]                     if (exists("sendData", mode = "function", 
[17:03:05.294]                       envir = ns)) {
[17:03:05.294]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.294]                         envir = ns)
[17:03:05.294]                       envir <- sys.frame(frame)
[17:03:05.294]                       master <- NULL
[17:03:05.294]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.294]                         !identical(envir, emptyenv())) {
[17:03:05.294]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.294]                           inherits = FALSE)) {
[17:03:05.294]                           master <- get("master", mode = "list", 
[17:03:05.294]                             envir = envir, inherits = FALSE)
[17:03:05.294]                           if (inherits(master, c("SOCKnode", 
[17:03:05.294]                             "SOCK0node"))) {
[17:03:05.294]                             sendCondition <<- function(cond) {
[17:03:05.294]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.294]                                 success = TRUE)
[17:03:05.294]                               parallel_sendData(master, data)
[17:03:05.294]                             }
[17:03:05.294]                             return(sendCondition)
[17:03:05.294]                           }
[17:03:05.294]                         }
[17:03:05.294]                         frame <- frame + 1L
[17:03:05.294]                         envir <- sys.frame(frame)
[17:03:05.294]                       }
[17:03:05.294]                     }
[17:03:05.294]                     sendCondition <<- function(cond) NULL
[17:03:05.294]                   }
[17:03:05.294]                 })
[17:03:05.294]                 withCallingHandlers({
[17:03:05.294]                   {
[17:03:05.294]                     ii
[17:03:05.294]                   }
[17:03:05.294]                 }, immediateCondition = function(cond) {
[17:03:05.294]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.294]                   sendCondition(cond)
[17:03:05.294]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.294]                   {
[17:03:05.294]                     inherits <- base::inherits
[17:03:05.294]                     invokeRestart <- base::invokeRestart
[17:03:05.294]                     is.null <- base::is.null
[17:03:05.294]                     muffled <- FALSE
[17:03:05.294]                     if (inherits(cond, "message")) {
[17:03:05.294]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.294]                       if (muffled) 
[17:03:05.294]                         invokeRestart("muffleMessage")
[17:03:05.294]                     }
[17:03:05.294]                     else if (inherits(cond, "warning")) {
[17:03:05.294]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.294]                       if (muffled) 
[17:03:05.294]                         invokeRestart("muffleWarning")
[17:03:05.294]                     }
[17:03:05.294]                     else if (inherits(cond, "condition")) {
[17:03:05.294]                       if (!is.null(pattern)) {
[17:03:05.294]                         computeRestarts <- base::computeRestarts
[17:03:05.294]                         grepl <- base::grepl
[17:03:05.294]                         restarts <- computeRestarts(cond)
[17:03:05.294]                         for (restart in restarts) {
[17:03:05.294]                           name <- restart$name
[17:03:05.294]                           if (is.null(name)) 
[17:03:05.294]                             next
[17:03:05.294]                           if (!grepl(pattern, name)) 
[17:03:05.294]                             next
[17:03:05.294]                           invokeRestart(restart)
[17:03:05.294]                           muffled <- TRUE
[17:03:05.294]                           break
[17:03:05.294]                         }
[17:03:05.294]                       }
[17:03:05.294]                     }
[17:03:05.294]                     invisible(muffled)
[17:03:05.294]                   }
[17:03:05.294]                   muffleCondition(cond)
[17:03:05.294]                 })
[17:03:05.294]             }))
[17:03:05.294]             future::FutureResult(value = ...future.value$value, 
[17:03:05.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.294]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.294]                     ...future.globalenv.names))
[17:03:05.294]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.294]         }, condition = base::local({
[17:03:05.294]             c <- base::c
[17:03:05.294]             inherits <- base::inherits
[17:03:05.294]             invokeRestart <- base::invokeRestart
[17:03:05.294]             length <- base::length
[17:03:05.294]             list <- base::list
[17:03:05.294]             seq.int <- base::seq.int
[17:03:05.294]             signalCondition <- base::signalCondition
[17:03:05.294]             sys.calls <- base::sys.calls
[17:03:05.294]             `[[` <- base::`[[`
[17:03:05.294]             `+` <- base::`+`
[17:03:05.294]             `<<-` <- base::`<<-`
[17:03:05.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.294]                   3L)]
[17:03:05.294]             }
[17:03:05.294]             function(cond) {
[17:03:05.294]                 is_error <- inherits(cond, "error")
[17:03:05.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.294]                   NULL)
[17:03:05.294]                 if (is_error) {
[17:03:05.294]                   sessionInformation <- function() {
[17:03:05.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.294]                       search = base::search(), system = base::Sys.info())
[17:03:05.294]                   }
[17:03:05.294]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.294]                     cond$call), session = sessionInformation(), 
[17:03:05.294]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.294]                   signalCondition(cond)
[17:03:05.294]                 }
[17:03:05.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.294]                 "immediateCondition"))) {
[17:03:05.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.294]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.294]                   if (TRUE && !signal) {
[17:03:05.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.294]                     {
[17:03:05.294]                       inherits <- base::inherits
[17:03:05.294]                       invokeRestart <- base::invokeRestart
[17:03:05.294]                       is.null <- base::is.null
[17:03:05.294]                       muffled <- FALSE
[17:03:05.294]                       if (inherits(cond, "message")) {
[17:03:05.294]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.294]                         if (muffled) 
[17:03:05.294]                           invokeRestart("muffleMessage")
[17:03:05.294]                       }
[17:03:05.294]                       else if (inherits(cond, "warning")) {
[17:03:05.294]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.294]                         if (muffled) 
[17:03:05.294]                           invokeRestart("muffleWarning")
[17:03:05.294]                       }
[17:03:05.294]                       else if (inherits(cond, "condition")) {
[17:03:05.294]                         if (!is.null(pattern)) {
[17:03:05.294]                           computeRestarts <- base::computeRestarts
[17:03:05.294]                           grepl <- base::grepl
[17:03:05.294]                           restarts <- computeRestarts(cond)
[17:03:05.294]                           for (restart in restarts) {
[17:03:05.294]                             name <- restart$name
[17:03:05.294]                             if (is.null(name)) 
[17:03:05.294]                               next
[17:03:05.294]                             if (!grepl(pattern, name)) 
[17:03:05.294]                               next
[17:03:05.294]                             invokeRestart(restart)
[17:03:05.294]                             muffled <- TRUE
[17:03:05.294]                             break
[17:03:05.294]                           }
[17:03:05.294]                         }
[17:03:05.294]                       }
[17:03:05.294]                       invisible(muffled)
[17:03:05.294]                     }
[17:03:05.294]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.294]                   }
[17:03:05.294]                 }
[17:03:05.294]                 else {
[17:03:05.294]                   if (TRUE) {
[17:03:05.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.294]                     {
[17:03:05.294]                       inherits <- base::inherits
[17:03:05.294]                       invokeRestart <- base::invokeRestart
[17:03:05.294]                       is.null <- base::is.null
[17:03:05.294]                       muffled <- FALSE
[17:03:05.294]                       if (inherits(cond, "message")) {
[17:03:05.294]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.294]                         if (muffled) 
[17:03:05.294]                           invokeRestart("muffleMessage")
[17:03:05.294]                       }
[17:03:05.294]                       else if (inherits(cond, "warning")) {
[17:03:05.294]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.294]                         if (muffled) 
[17:03:05.294]                           invokeRestart("muffleWarning")
[17:03:05.294]                       }
[17:03:05.294]                       else if (inherits(cond, "condition")) {
[17:03:05.294]                         if (!is.null(pattern)) {
[17:03:05.294]                           computeRestarts <- base::computeRestarts
[17:03:05.294]                           grepl <- base::grepl
[17:03:05.294]                           restarts <- computeRestarts(cond)
[17:03:05.294]                           for (restart in restarts) {
[17:03:05.294]                             name <- restart$name
[17:03:05.294]                             if (is.null(name)) 
[17:03:05.294]                               next
[17:03:05.294]                             if (!grepl(pattern, name)) 
[17:03:05.294]                               next
[17:03:05.294]                             invokeRestart(restart)
[17:03:05.294]                             muffled <- TRUE
[17:03:05.294]                             break
[17:03:05.294]                           }
[17:03:05.294]                         }
[17:03:05.294]                       }
[17:03:05.294]                       invisible(muffled)
[17:03:05.294]                     }
[17:03:05.294]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.294]                   }
[17:03:05.294]                 }
[17:03:05.294]             }
[17:03:05.294]         }))
[17:03:05.294]     }, error = function(ex) {
[17:03:05.294]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.294]                 ...future.rng), started = ...future.startTime, 
[17:03:05.294]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.294]             version = "1.8"), class = "FutureResult")
[17:03:05.294]     }, finally = {
[17:03:05.294]         if (!identical(...future.workdir, getwd())) 
[17:03:05.294]             setwd(...future.workdir)
[17:03:05.294]         {
[17:03:05.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.294]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.294]             }
[17:03:05.294]             base::options(...future.oldOptions)
[17:03:05.294]             if (.Platform$OS.type == "windows") {
[17:03:05.294]                 old_names <- names(...future.oldEnvVars)
[17:03:05.294]                 envs <- base::Sys.getenv()
[17:03:05.294]                 names <- names(envs)
[17:03:05.294]                 common <- intersect(names, old_names)
[17:03:05.294]                 added <- setdiff(names, old_names)
[17:03:05.294]                 removed <- setdiff(old_names, names)
[17:03:05.294]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.294]                   envs[common]]
[17:03:05.294]                 NAMES <- toupper(changed)
[17:03:05.294]                 args <- list()
[17:03:05.294]                 for (kk in seq_along(NAMES)) {
[17:03:05.294]                   name <- changed[[kk]]
[17:03:05.294]                   NAME <- NAMES[[kk]]
[17:03:05.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.294]                     next
[17:03:05.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.294]                 }
[17:03:05.294]                 NAMES <- toupper(added)
[17:03:05.294]                 for (kk in seq_along(NAMES)) {
[17:03:05.294]                   name <- added[[kk]]
[17:03:05.294]                   NAME <- NAMES[[kk]]
[17:03:05.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.294]                     next
[17:03:05.294]                   args[[name]] <- ""
[17:03:05.294]                 }
[17:03:05.294]                 NAMES <- toupper(removed)
[17:03:05.294]                 for (kk in seq_along(NAMES)) {
[17:03:05.294]                   name <- removed[[kk]]
[17:03:05.294]                   NAME <- NAMES[[kk]]
[17:03:05.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.294]                     next
[17:03:05.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.294]                 }
[17:03:05.294]                 if (length(args) > 0) 
[17:03:05.294]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.294]             }
[17:03:05.294]             else {
[17:03:05.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.294]             }
[17:03:05.294]             {
[17:03:05.294]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.294]                   0L) {
[17:03:05.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.294]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.294]                   base::options(opts)
[17:03:05.294]                 }
[17:03:05.294]                 {
[17:03:05.294]                   {
[17:03:05.294]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.294]                     NULL
[17:03:05.294]                   }
[17:03:05.294]                   options(future.plan = NULL)
[17:03:05.294]                   if (is.na(NA_character_)) 
[17:03:05.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.294]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.294]                     .init = FALSE)
[17:03:05.294]                 }
[17:03:05.294]             }
[17:03:05.294]         }
[17:03:05.294]     })
[17:03:05.294]     if (TRUE) {
[17:03:05.294]         base::sink(type = "output", split = FALSE)
[17:03:05.294]         if (TRUE) {
[17:03:05.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.294]         }
[17:03:05.294]         else {
[17:03:05.294]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.294]         }
[17:03:05.294]         base::close(...future.stdout)
[17:03:05.294]         ...future.stdout <- NULL
[17:03:05.294]     }
[17:03:05.294]     ...future.result$conditions <- ...future.conditions
[17:03:05.294]     ...future.result$finished <- base::Sys.time()
[17:03:05.294]     ...future.result
[17:03:05.294] }
[17:03:05.347] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[17:03:05.348] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:03:05.348] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:03:05.348] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[17:03:05.349] MultisessionFuture started
 - Resolving 2 multisession futures
[17:03:05.349] result() for ClusterFuture ...
[17:03:05.349] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.349] - Validating connection of MultisessionFuture
[17:03:05.383] - received message: FutureResult
[17:03:05.383] - Received FutureResult
[17:03:05.383] - Erased future from FutureRegistry
[17:03:05.383] result() for ClusterFuture ...
[17:03:05.383] - result already collected: FutureResult
[17:03:05.383] result() for ClusterFuture ... done
[17:03:05.384] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:05.384] result() for ClusterFuture ... done
[17:03:05.384] result() for ClusterFuture ...
[17:03:05.384] - result already collected: FutureResult
[17:03:05.384] result() for ClusterFuture ... done
[17:03:05.384] result() for ClusterFuture ...
[17:03:05.384] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.384] - Validating connection of MultisessionFuture
[17:03:05.385] - received message: FutureResult
[17:03:05.385] - Received FutureResult
[17:03:05.385] - Erased future from FutureRegistry
[17:03:05.385] result() for ClusterFuture ...
[17:03:05.385] - result already collected: FutureResult
[17:03:05.385] result() for ClusterFuture ... done
[17:03:05.385] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:05.385] result() for ClusterFuture ... done
[17:03:05.386] result() for ClusterFuture ...
[17:03:05.386] - result already collected: FutureResult
[17:03:05.386] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[17:03:05.386] getGlobalsAndPackages() ...
[17:03:05.386] Searching for globals...
[17:03:05.387] - globals found: [1] ‘.libPaths’
[17:03:05.387] Searching for globals ... DONE
[17:03:05.387] Resolving globals: FALSE
[17:03:05.387] 
[17:03:05.388] 
[17:03:05.388] getGlobalsAndPackages() ... DONE
[17:03:05.388] run() for ‘Future’ ...
[17:03:05.388] - state: ‘created’
[17:03:05.388] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:05.389] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:05.389] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:05.389]   - Field: ‘label’
[17:03:05.389]   - Field: ‘local’
[17:03:05.389]   - Field: ‘owner’
[17:03:05.389]   - Field: ‘envir’
[17:03:05.389]   - Field: ‘packages’
[17:03:05.389]   - Field: ‘gc’
[17:03:05.390]   - Field: ‘conditions’
[17:03:05.390]   - Field: ‘expr’
[17:03:05.390]   - Field: ‘uuid’
[17:03:05.390]   - Field: ‘seed’
[17:03:05.390]   - Field: ‘version’
[17:03:05.390]   - Field: ‘result’
[17:03:05.390]   - Field: ‘asynchronous’
[17:03:05.390]   - Field: ‘calls’
[17:03:05.390]   - Field: ‘globals’
[17:03:05.391]   - Field: ‘stdout’
[17:03:05.391]   - Field: ‘earlySignal’
[17:03:05.391]   - Field: ‘lazy’
[17:03:05.391]   - Field: ‘state’
[17:03:05.391] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:05.391] - Launch lazy future ...
[17:03:05.391] Packages needed by the future expression (n = 0): <none>
[17:03:05.392] Packages needed by future strategies (n = 0): <none>
[17:03:05.392] {
[17:03:05.392]     {
[17:03:05.392]         {
[17:03:05.392]             ...future.startTime <- base::Sys.time()
[17:03:05.392]             {
[17:03:05.392]                 {
[17:03:05.392]                   {
[17:03:05.392]                     base::local({
[17:03:05.392]                       has_future <- base::requireNamespace("future", 
[17:03:05.392]                         quietly = TRUE)
[17:03:05.392]                       if (has_future) {
[17:03:05.392]                         ns <- base::getNamespace("future")
[17:03:05.392]                         version <- ns[[".package"]][["version"]]
[17:03:05.392]                         if (is.null(version)) 
[17:03:05.392]                           version <- utils::packageVersion("future")
[17:03:05.392]                       }
[17:03:05.392]                       else {
[17:03:05.392]                         version <- NULL
[17:03:05.392]                       }
[17:03:05.392]                       if (!has_future || version < "1.8.0") {
[17:03:05.392]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.392]                           "", base::R.version$version.string), 
[17:03:05.392]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:05.392]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.392]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.392]                             "release", "version")], collapse = " "), 
[17:03:05.392]                           hostname = base::Sys.info()[["nodename"]])
[17:03:05.392]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.392]                           info)
[17:03:05.392]                         info <- base::paste(info, collapse = "; ")
[17:03:05.392]                         if (!has_future) {
[17:03:05.392]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.392]                             info)
[17:03:05.392]                         }
[17:03:05.392]                         else {
[17:03:05.392]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.392]                             info, version)
[17:03:05.392]                         }
[17:03:05.392]                         base::stop(msg)
[17:03:05.392]                       }
[17:03:05.392]                     })
[17:03:05.392]                   }
[17:03:05.392]                   ...future.strategy.old <- future::plan("list")
[17:03:05.392]                   options(future.plan = NULL)
[17:03:05.392]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.392]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.392]                 }
[17:03:05.392]                 ...future.workdir <- getwd()
[17:03:05.392]             }
[17:03:05.392]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.392]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.392]         }
[17:03:05.392]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.392]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.392]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.392]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.392]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.392]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.392]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.392]             base::names(...future.oldOptions))
[17:03:05.392]     }
[17:03:05.392]     if (FALSE) {
[17:03:05.392]     }
[17:03:05.392]     else {
[17:03:05.392]         if (TRUE) {
[17:03:05.392]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.392]                 open = "w")
[17:03:05.392]         }
[17:03:05.392]         else {
[17:03:05.392]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.392]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.392]         }
[17:03:05.392]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.392]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.392]             base::sink(type = "output", split = FALSE)
[17:03:05.392]             base::close(...future.stdout)
[17:03:05.392]         }, add = TRUE)
[17:03:05.392]     }
[17:03:05.392]     ...future.frame <- base::sys.nframe()
[17:03:05.392]     ...future.conditions <- base::list()
[17:03:05.392]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.392]     if (FALSE) {
[17:03:05.392]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.392]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.392]     }
[17:03:05.392]     ...future.result <- base::tryCatch({
[17:03:05.392]         base::withCallingHandlers({
[17:03:05.392]             ...future.value <- base::withVisible(base::local(.libPaths()))
[17:03:05.392]             future::FutureResult(value = ...future.value$value, 
[17:03:05.392]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.392]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.392]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.392]                     ...future.globalenv.names))
[17:03:05.392]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.392]         }, condition = base::local({
[17:03:05.392]             c <- base::c
[17:03:05.392]             inherits <- base::inherits
[17:03:05.392]             invokeRestart <- base::invokeRestart
[17:03:05.392]             length <- base::length
[17:03:05.392]             list <- base::list
[17:03:05.392]             seq.int <- base::seq.int
[17:03:05.392]             signalCondition <- base::signalCondition
[17:03:05.392]             sys.calls <- base::sys.calls
[17:03:05.392]             `[[` <- base::`[[`
[17:03:05.392]             `+` <- base::`+`
[17:03:05.392]             `<<-` <- base::`<<-`
[17:03:05.392]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.392]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.392]                   3L)]
[17:03:05.392]             }
[17:03:05.392]             function(cond) {
[17:03:05.392]                 is_error <- inherits(cond, "error")
[17:03:05.392]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.392]                   NULL)
[17:03:05.392]                 if (is_error) {
[17:03:05.392]                   sessionInformation <- function() {
[17:03:05.392]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.392]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.392]                       search = base::search(), system = base::Sys.info())
[17:03:05.392]                   }
[17:03:05.392]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.392]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.392]                     cond$call), session = sessionInformation(), 
[17:03:05.392]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.392]                   signalCondition(cond)
[17:03:05.392]                 }
[17:03:05.392]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.392]                 "immediateCondition"))) {
[17:03:05.392]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.392]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.392]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.392]                   if (TRUE && !signal) {
[17:03:05.392]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.392]                     {
[17:03:05.392]                       inherits <- base::inherits
[17:03:05.392]                       invokeRestart <- base::invokeRestart
[17:03:05.392]                       is.null <- base::is.null
[17:03:05.392]                       muffled <- FALSE
[17:03:05.392]                       if (inherits(cond, "message")) {
[17:03:05.392]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.392]                         if (muffled) 
[17:03:05.392]                           invokeRestart("muffleMessage")
[17:03:05.392]                       }
[17:03:05.392]                       else if (inherits(cond, "warning")) {
[17:03:05.392]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.392]                         if (muffled) 
[17:03:05.392]                           invokeRestart("muffleWarning")
[17:03:05.392]                       }
[17:03:05.392]                       else if (inherits(cond, "condition")) {
[17:03:05.392]                         if (!is.null(pattern)) {
[17:03:05.392]                           computeRestarts <- base::computeRestarts
[17:03:05.392]                           grepl <- base::grepl
[17:03:05.392]                           restarts <- computeRestarts(cond)
[17:03:05.392]                           for (restart in restarts) {
[17:03:05.392]                             name <- restart$name
[17:03:05.392]                             if (is.null(name)) 
[17:03:05.392]                               next
[17:03:05.392]                             if (!grepl(pattern, name)) 
[17:03:05.392]                               next
[17:03:05.392]                             invokeRestart(restart)
[17:03:05.392]                             muffled <- TRUE
[17:03:05.392]                             break
[17:03:05.392]                           }
[17:03:05.392]                         }
[17:03:05.392]                       }
[17:03:05.392]                       invisible(muffled)
[17:03:05.392]                     }
[17:03:05.392]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.392]                   }
[17:03:05.392]                 }
[17:03:05.392]                 else {
[17:03:05.392]                   if (TRUE) {
[17:03:05.392]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.392]                     {
[17:03:05.392]                       inherits <- base::inherits
[17:03:05.392]                       invokeRestart <- base::invokeRestart
[17:03:05.392]                       is.null <- base::is.null
[17:03:05.392]                       muffled <- FALSE
[17:03:05.392]                       if (inherits(cond, "message")) {
[17:03:05.392]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.392]                         if (muffled) 
[17:03:05.392]                           invokeRestart("muffleMessage")
[17:03:05.392]                       }
[17:03:05.392]                       else if (inherits(cond, "warning")) {
[17:03:05.392]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.392]                         if (muffled) 
[17:03:05.392]                           invokeRestart("muffleWarning")
[17:03:05.392]                       }
[17:03:05.392]                       else if (inherits(cond, "condition")) {
[17:03:05.392]                         if (!is.null(pattern)) {
[17:03:05.392]                           computeRestarts <- base::computeRestarts
[17:03:05.392]                           grepl <- base::grepl
[17:03:05.392]                           restarts <- computeRestarts(cond)
[17:03:05.392]                           for (restart in restarts) {
[17:03:05.392]                             name <- restart$name
[17:03:05.392]                             if (is.null(name)) 
[17:03:05.392]                               next
[17:03:05.392]                             if (!grepl(pattern, name)) 
[17:03:05.392]                               next
[17:03:05.392]                             invokeRestart(restart)
[17:03:05.392]                             muffled <- TRUE
[17:03:05.392]                             break
[17:03:05.392]                           }
[17:03:05.392]                         }
[17:03:05.392]                       }
[17:03:05.392]                       invisible(muffled)
[17:03:05.392]                     }
[17:03:05.392]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.392]                   }
[17:03:05.392]                 }
[17:03:05.392]             }
[17:03:05.392]         }))
[17:03:05.392]     }, error = function(ex) {
[17:03:05.392]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.392]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.392]                 ...future.rng), started = ...future.startTime, 
[17:03:05.392]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.392]             version = "1.8"), class = "FutureResult")
[17:03:05.392]     }, finally = {
[17:03:05.392]         if (!identical(...future.workdir, getwd())) 
[17:03:05.392]             setwd(...future.workdir)
[17:03:05.392]         {
[17:03:05.392]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.392]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.392]             }
[17:03:05.392]             base::options(...future.oldOptions)
[17:03:05.392]             if (.Platform$OS.type == "windows") {
[17:03:05.392]                 old_names <- names(...future.oldEnvVars)
[17:03:05.392]                 envs <- base::Sys.getenv()
[17:03:05.392]                 names <- names(envs)
[17:03:05.392]                 common <- intersect(names, old_names)
[17:03:05.392]                 added <- setdiff(names, old_names)
[17:03:05.392]                 removed <- setdiff(old_names, names)
[17:03:05.392]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.392]                   envs[common]]
[17:03:05.392]                 NAMES <- toupper(changed)
[17:03:05.392]                 args <- list()
[17:03:05.392]                 for (kk in seq_along(NAMES)) {
[17:03:05.392]                   name <- changed[[kk]]
[17:03:05.392]                   NAME <- NAMES[[kk]]
[17:03:05.392]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.392]                     next
[17:03:05.392]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.392]                 }
[17:03:05.392]                 NAMES <- toupper(added)
[17:03:05.392]                 for (kk in seq_along(NAMES)) {
[17:03:05.392]                   name <- added[[kk]]
[17:03:05.392]                   NAME <- NAMES[[kk]]
[17:03:05.392]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.392]                     next
[17:03:05.392]                   args[[name]] <- ""
[17:03:05.392]                 }
[17:03:05.392]                 NAMES <- toupper(removed)
[17:03:05.392]                 for (kk in seq_along(NAMES)) {
[17:03:05.392]                   name <- removed[[kk]]
[17:03:05.392]                   NAME <- NAMES[[kk]]
[17:03:05.392]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.392]                     next
[17:03:05.392]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.392]                 }
[17:03:05.392]                 if (length(args) > 0) 
[17:03:05.392]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.392]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.392]             }
[17:03:05.392]             else {
[17:03:05.392]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.392]             }
[17:03:05.392]             {
[17:03:05.392]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.392]                   0L) {
[17:03:05.392]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.392]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.392]                   base::options(opts)
[17:03:05.392]                 }
[17:03:05.392]                 {
[17:03:05.392]                   {
[17:03:05.392]                     NULL
[17:03:05.392]                     RNGkind("Mersenne-Twister")
[17:03:05.392]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:05.392]                       inherits = FALSE)
[17:03:05.392]                   }
[17:03:05.392]                   options(future.plan = NULL)
[17:03:05.392]                   if (is.na(NA_character_)) 
[17:03:05.392]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.392]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.392]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.392]                     .init = FALSE)
[17:03:05.392]                 }
[17:03:05.392]             }
[17:03:05.392]         }
[17:03:05.392]     })
[17:03:05.392]     if (TRUE) {
[17:03:05.392]         base::sink(type = "output", split = FALSE)
[17:03:05.392]         if (TRUE) {
[17:03:05.392]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.392]         }
[17:03:05.392]         else {
[17:03:05.392]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.392]         }
[17:03:05.392]         base::close(...future.stdout)
[17:03:05.392]         ...future.stdout <- NULL
[17:03:05.392]     }
[17:03:05.392]     ...future.result$conditions <- ...future.conditions
[17:03:05.392]     ...future.result$finished <- base::Sys.time()
[17:03:05.392]     ...future.result
[17:03:05.392] }
[17:03:05.394] plan(): Setting new future strategy stack:
[17:03:05.394] List of future strategies:
[17:03:05.394] 1. sequential:
[17:03:05.394]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:05.394]    - tweaked: FALSE
[17:03:05.394]    - call: NULL
[17:03:05.395] plan(): nbrOfWorkers() = 1
[17:03:05.398] plan(): Setting new future strategy stack:
[17:03:05.398] List of future strategies:
[17:03:05.398] 1. sequential:
[17:03:05.398]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:05.398]    - tweaked: FALSE
[17:03:05.398]    - call: future::plan("sequential")
[17:03:05.399] plan(): nbrOfWorkers() = 1
[17:03:05.399] SequentialFuture started (and completed)
[17:03:05.399] - Launch lazy future ... done
[17:03:05.399] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[17:03:05.403] getGlobalsAndPackages() ...
[17:03:05.403] 
[17:03:05.403] - globals: [0] <none>
[17:03:05.403] getGlobalsAndPackages() ... DONE
[17:03:05.414] Packages needed by the future expression (n = 0): <none>
[17:03:05.414] Packages needed by future strategies (n = 0): <none>
[17:03:05.415] {
[17:03:05.415]     {
[17:03:05.415]         {
[17:03:05.415]             ...future.startTime <- base::Sys.time()
[17:03:05.415]             {
[17:03:05.415]                 {
[17:03:05.415]                   {
[17:03:05.415]                     {
[17:03:05.415]                       base::local({
[17:03:05.415]                         has_future <- base::requireNamespace("future", 
[17:03:05.415]                           quietly = TRUE)
[17:03:05.415]                         if (has_future) {
[17:03:05.415]                           ns <- base::getNamespace("future")
[17:03:05.415]                           version <- ns[[".package"]][["version"]]
[17:03:05.415]                           if (is.null(version)) 
[17:03:05.415]                             version <- utils::packageVersion("future")
[17:03:05.415]                         }
[17:03:05.415]                         else {
[17:03:05.415]                           version <- NULL
[17:03:05.415]                         }
[17:03:05.415]                         if (!has_future || version < "1.8.0") {
[17:03:05.415]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.415]                             "", base::R.version$version.string), 
[17:03:05.415]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.415]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.415]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.415]                               "release", "version")], collapse = " "), 
[17:03:05.415]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.415]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.415]                             info)
[17:03:05.415]                           info <- base::paste(info, collapse = "; ")
[17:03:05.415]                           if (!has_future) {
[17:03:05.415]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.415]                               info)
[17:03:05.415]                           }
[17:03:05.415]                           else {
[17:03:05.415]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.415]                               info, version)
[17:03:05.415]                           }
[17:03:05.415]                           base::stop(msg)
[17:03:05.415]                         }
[17:03:05.415]                       })
[17:03:05.415]                     }
[17:03:05.415]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.415]                     base::options(mc.cores = 1L)
[17:03:05.415]                   }
[17:03:05.415]                   ...future.strategy.old <- future::plan("list")
[17:03:05.415]                   options(future.plan = NULL)
[17:03:05.415]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.415]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.415]                 }
[17:03:05.415]                 ...future.workdir <- getwd()
[17:03:05.415]             }
[17:03:05.415]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.415]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.415]         }
[17:03:05.415]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.415]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.415]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.415]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.415]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.415]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.415]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.415]             base::names(...future.oldOptions))
[17:03:05.415]     }
[17:03:05.415]     if (FALSE) {
[17:03:05.415]     }
[17:03:05.415]     else {
[17:03:05.415]         if (TRUE) {
[17:03:05.415]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.415]                 open = "w")
[17:03:05.415]         }
[17:03:05.415]         else {
[17:03:05.415]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.415]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.415]         }
[17:03:05.415]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.415]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.415]             base::sink(type = "output", split = FALSE)
[17:03:05.415]             base::close(...future.stdout)
[17:03:05.415]         }, add = TRUE)
[17:03:05.415]     }
[17:03:05.415]     ...future.frame <- base::sys.nframe()
[17:03:05.415]     ...future.conditions <- base::list()
[17:03:05.415]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.415]     if (FALSE) {
[17:03:05.415]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.415]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.415]     }
[17:03:05.415]     ...future.result <- base::tryCatch({
[17:03:05.415]         base::withCallingHandlers({
[17:03:05.415]             ...future.value <- base::withVisible(base::local({
[17:03:05.415]                 ...future.makeSendCondition <- base::local({
[17:03:05.415]                   sendCondition <- NULL
[17:03:05.415]                   function(frame = 1L) {
[17:03:05.415]                     if (is.function(sendCondition)) 
[17:03:05.415]                       return(sendCondition)
[17:03:05.415]                     ns <- getNamespace("parallel")
[17:03:05.415]                     if (exists("sendData", mode = "function", 
[17:03:05.415]                       envir = ns)) {
[17:03:05.415]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.415]                         envir = ns)
[17:03:05.415]                       envir <- sys.frame(frame)
[17:03:05.415]                       master <- NULL
[17:03:05.415]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.415]                         !identical(envir, emptyenv())) {
[17:03:05.415]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.415]                           inherits = FALSE)) {
[17:03:05.415]                           master <- get("master", mode = "list", 
[17:03:05.415]                             envir = envir, inherits = FALSE)
[17:03:05.415]                           if (inherits(master, c("SOCKnode", 
[17:03:05.415]                             "SOCK0node"))) {
[17:03:05.415]                             sendCondition <<- function(cond) {
[17:03:05.415]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.415]                                 success = TRUE)
[17:03:05.415]                               parallel_sendData(master, data)
[17:03:05.415]                             }
[17:03:05.415]                             return(sendCondition)
[17:03:05.415]                           }
[17:03:05.415]                         }
[17:03:05.415]                         frame <- frame + 1L
[17:03:05.415]                         envir <- sys.frame(frame)
[17:03:05.415]                       }
[17:03:05.415]                     }
[17:03:05.415]                     sendCondition <<- function(cond) NULL
[17:03:05.415]                   }
[17:03:05.415]                 })
[17:03:05.415]                 withCallingHandlers({
[17:03:05.415]                   {
[17:03:05.415]                     stop("Whoops!")
[17:03:05.415]                     1
[17:03:05.415]                   }
[17:03:05.415]                 }, immediateCondition = function(cond) {
[17:03:05.415]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.415]                   sendCondition(cond)
[17:03:05.415]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.415]                   {
[17:03:05.415]                     inherits <- base::inherits
[17:03:05.415]                     invokeRestart <- base::invokeRestart
[17:03:05.415]                     is.null <- base::is.null
[17:03:05.415]                     muffled <- FALSE
[17:03:05.415]                     if (inherits(cond, "message")) {
[17:03:05.415]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.415]                       if (muffled) 
[17:03:05.415]                         invokeRestart("muffleMessage")
[17:03:05.415]                     }
[17:03:05.415]                     else if (inherits(cond, "warning")) {
[17:03:05.415]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.415]                       if (muffled) 
[17:03:05.415]                         invokeRestart("muffleWarning")
[17:03:05.415]                     }
[17:03:05.415]                     else if (inherits(cond, "condition")) {
[17:03:05.415]                       if (!is.null(pattern)) {
[17:03:05.415]                         computeRestarts <- base::computeRestarts
[17:03:05.415]                         grepl <- base::grepl
[17:03:05.415]                         restarts <- computeRestarts(cond)
[17:03:05.415]                         for (restart in restarts) {
[17:03:05.415]                           name <- restart$name
[17:03:05.415]                           if (is.null(name)) 
[17:03:05.415]                             next
[17:03:05.415]                           if (!grepl(pattern, name)) 
[17:03:05.415]                             next
[17:03:05.415]                           invokeRestart(restart)
[17:03:05.415]                           muffled <- TRUE
[17:03:05.415]                           break
[17:03:05.415]                         }
[17:03:05.415]                       }
[17:03:05.415]                     }
[17:03:05.415]                     invisible(muffled)
[17:03:05.415]                   }
[17:03:05.415]                   muffleCondition(cond)
[17:03:05.415]                 })
[17:03:05.415]             }))
[17:03:05.415]             future::FutureResult(value = ...future.value$value, 
[17:03:05.415]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.415]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.415]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.415]                     ...future.globalenv.names))
[17:03:05.415]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.415]         }, condition = base::local({
[17:03:05.415]             c <- base::c
[17:03:05.415]             inherits <- base::inherits
[17:03:05.415]             invokeRestart <- base::invokeRestart
[17:03:05.415]             length <- base::length
[17:03:05.415]             list <- base::list
[17:03:05.415]             seq.int <- base::seq.int
[17:03:05.415]             signalCondition <- base::signalCondition
[17:03:05.415]             sys.calls <- base::sys.calls
[17:03:05.415]             `[[` <- base::`[[`
[17:03:05.415]             `+` <- base::`+`
[17:03:05.415]             `<<-` <- base::`<<-`
[17:03:05.415]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.415]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.415]                   3L)]
[17:03:05.415]             }
[17:03:05.415]             function(cond) {
[17:03:05.415]                 is_error <- inherits(cond, "error")
[17:03:05.415]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.415]                   NULL)
[17:03:05.415]                 if (is_error) {
[17:03:05.415]                   sessionInformation <- function() {
[17:03:05.415]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.415]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.415]                       search = base::search(), system = base::Sys.info())
[17:03:05.415]                   }
[17:03:05.415]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.415]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.415]                     cond$call), session = sessionInformation(), 
[17:03:05.415]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.415]                   signalCondition(cond)
[17:03:05.415]                 }
[17:03:05.415]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.415]                 "immediateCondition"))) {
[17:03:05.415]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.415]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.415]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.415]                   if (TRUE && !signal) {
[17:03:05.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.415]                     {
[17:03:05.415]                       inherits <- base::inherits
[17:03:05.415]                       invokeRestart <- base::invokeRestart
[17:03:05.415]                       is.null <- base::is.null
[17:03:05.415]                       muffled <- FALSE
[17:03:05.415]                       if (inherits(cond, "message")) {
[17:03:05.415]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.415]                         if (muffled) 
[17:03:05.415]                           invokeRestart("muffleMessage")
[17:03:05.415]                       }
[17:03:05.415]                       else if (inherits(cond, "warning")) {
[17:03:05.415]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.415]                         if (muffled) 
[17:03:05.415]                           invokeRestart("muffleWarning")
[17:03:05.415]                       }
[17:03:05.415]                       else if (inherits(cond, "condition")) {
[17:03:05.415]                         if (!is.null(pattern)) {
[17:03:05.415]                           computeRestarts <- base::computeRestarts
[17:03:05.415]                           grepl <- base::grepl
[17:03:05.415]                           restarts <- computeRestarts(cond)
[17:03:05.415]                           for (restart in restarts) {
[17:03:05.415]                             name <- restart$name
[17:03:05.415]                             if (is.null(name)) 
[17:03:05.415]                               next
[17:03:05.415]                             if (!grepl(pattern, name)) 
[17:03:05.415]                               next
[17:03:05.415]                             invokeRestart(restart)
[17:03:05.415]                             muffled <- TRUE
[17:03:05.415]                             break
[17:03:05.415]                           }
[17:03:05.415]                         }
[17:03:05.415]                       }
[17:03:05.415]                       invisible(muffled)
[17:03:05.415]                     }
[17:03:05.415]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.415]                   }
[17:03:05.415]                 }
[17:03:05.415]                 else {
[17:03:05.415]                   if (TRUE) {
[17:03:05.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.415]                     {
[17:03:05.415]                       inherits <- base::inherits
[17:03:05.415]                       invokeRestart <- base::invokeRestart
[17:03:05.415]                       is.null <- base::is.null
[17:03:05.415]                       muffled <- FALSE
[17:03:05.415]                       if (inherits(cond, "message")) {
[17:03:05.415]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.415]                         if (muffled) 
[17:03:05.415]                           invokeRestart("muffleMessage")
[17:03:05.415]                       }
[17:03:05.415]                       else if (inherits(cond, "warning")) {
[17:03:05.415]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.415]                         if (muffled) 
[17:03:05.415]                           invokeRestart("muffleWarning")
[17:03:05.415]                       }
[17:03:05.415]                       else if (inherits(cond, "condition")) {
[17:03:05.415]                         if (!is.null(pattern)) {
[17:03:05.415]                           computeRestarts <- base::computeRestarts
[17:03:05.415]                           grepl <- base::grepl
[17:03:05.415]                           restarts <- computeRestarts(cond)
[17:03:05.415]                           for (restart in restarts) {
[17:03:05.415]                             name <- restart$name
[17:03:05.415]                             if (is.null(name)) 
[17:03:05.415]                               next
[17:03:05.415]                             if (!grepl(pattern, name)) 
[17:03:05.415]                               next
[17:03:05.415]                             invokeRestart(restart)
[17:03:05.415]                             muffled <- TRUE
[17:03:05.415]                             break
[17:03:05.415]                           }
[17:03:05.415]                         }
[17:03:05.415]                       }
[17:03:05.415]                       invisible(muffled)
[17:03:05.415]                     }
[17:03:05.415]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.415]                   }
[17:03:05.415]                 }
[17:03:05.415]             }
[17:03:05.415]         }))
[17:03:05.415]     }, error = function(ex) {
[17:03:05.415]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.415]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.415]                 ...future.rng), started = ...future.startTime, 
[17:03:05.415]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.415]             version = "1.8"), class = "FutureResult")
[17:03:05.415]     }, finally = {
[17:03:05.415]         if (!identical(...future.workdir, getwd())) 
[17:03:05.415]             setwd(...future.workdir)
[17:03:05.415]         {
[17:03:05.415]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.415]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.415]             }
[17:03:05.415]             base::options(...future.oldOptions)
[17:03:05.415]             if (.Platform$OS.type == "windows") {
[17:03:05.415]                 old_names <- names(...future.oldEnvVars)
[17:03:05.415]                 envs <- base::Sys.getenv()
[17:03:05.415]                 names <- names(envs)
[17:03:05.415]                 common <- intersect(names, old_names)
[17:03:05.415]                 added <- setdiff(names, old_names)
[17:03:05.415]                 removed <- setdiff(old_names, names)
[17:03:05.415]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.415]                   envs[common]]
[17:03:05.415]                 NAMES <- toupper(changed)
[17:03:05.415]                 args <- list()
[17:03:05.415]                 for (kk in seq_along(NAMES)) {
[17:03:05.415]                   name <- changed[[kk]]
[17:03:05.415]                   NAME <- NAMES[[kk]]
[17:03:05.415]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.415]                     next
[17:03:05.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.415]                 }
[17:03:05.415]                 NAMES <- toupper(added)
[17:03:05.415]                 for (kk in seq_along(NAMES)) {
[17:03:05.415]                   name <- added[[kk]]
[17:03:05.415]                   NAME <- NAMES[[kk]]
[17:03:05.415]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.415]                     next
[17:03:05.415]                   args[[name]] <- ""
[17:03:05.415]                 }
[17:03:05.415]                 NAMES <- toupper(removed)
[17:03:05.415]                 for (kk in seq_along(NAMES)) {
[17:03:05.415]                   name <- removed[[kk]]
[17:03:05.415]                   NAME <- NAMES[[kk]]
[17:03:05.415]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.415]                     next
[17:03:05.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.415]                 }
[17:03:05.415]                 if (length(args) > 0) 
[17:03:05.415]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.415]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.415]             }
[17:03:05.415]             else {
[17:03:05.415]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.415]             }
[17:03:05.415]             {
[17:03:05.415]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.415]                   0L) {
[17:03:05.415]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.415]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.415]                   base::options(opts)
[17:03:05.415]                 }
[17:03:05.415]                 {
[17:03:05.415]                   {
[17:03:05.415]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.415]                     NULL
[17:03:05.415]                   }
[17:03:05.415]                   options(future.plan = NULL)
[17:03:05.415]                   if (is.na(NA_character_)) 
[17:03:05.415]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.415]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.415]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.415]                     .init = FALSE)
[17:03:05.415]                 }
[17:03:05.415]             }
[17:03:05.415]         }
[17:03:05.415]     })
[17:03:05.415]     if (TRUE) {
[17:03:05.415]         base::sink(type = "output", split = FALSE)
[17:03:05.415]         if (TRUE) {
[17:03:05.415]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.415]         }
[17:03:05.415]         else {
[17:03:05.415]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.415]         }
[17:03:05.415]         base::close(...future.stdout)
[17:03:05.415]         ...future.stdout <- NULL
[17:03:05.415]     }
[17:03:05.415]     ...future.result$conditions <- ...future.conditions
[17:03:05.415]     ...future.result$finished <- base::Sys.time()
[17:03:05.415]     ...future.result
[17:03:05.415] }
[17:03:05.418] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:05.420] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.420] - Validating connection of MultisessionFuture
[17:03:05.421] - received message: FutureResult
[17:03:05.421] - Received FutureResult
[17:03:05.421] - Erased future from FutureRegistry
[17:03:05.421] result() for ClusterFuture ...
[17:03:05.421] - result already collected: FutureResult
[17:03:05.421] result() for ClusterFuture ... done
[17:03:05.421] signalConditions() ...
[17:03:05.421]  - include = ‘immediateCondition’
[17:03:05.421]  - exclude = 
[17:03:05.421]  - resignal = FALSE
[17:03:05.421]  - Number of conditions: 1
[17:03:05.422] signalConditions() ... done
[17:03:05.422] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:05.422] result() for ClusterFuture ...
[17:03:05.422] - result already collected: FutureResult
[17:03:05.422] result() for ClusterFuture ... done
[17:03:05.422] result() for ClusterFuture ...
[17:03:05.422] - result already collected: FutureResult
[17:03:05.422] result() for ClusterFuture ... done
[17:03:05.422] signalConditions() ...
[17:03:05.422]  - include = ‘immediateCondition’
[17:03:05.422]  - exclude = 
[17:03:05.423]  - resignal = FALSE
[17:03:05.423]  - Number of conditions: 1
[17:03:05.423] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:05.423] result() for ClusterFuture ...
[17:03:05.423] - result already collected: FutureResult
[17:03:05.423] result() for ClusterFuture ... done
[17:03:05.423] result() for ClusterFuture ...
[17:03:05.424] - result already collected: FutureResult
[17:03:05.424] result() for ClusterFuture ... done
[17:03:05.424] signalConditions() ...
[17:03:05.424]  - include = ‘immediateCondition’
[17:03:05.424]  - exclude = 
[17:03:05.424]  - resignal = FALSE
[17:03:05.424]  - Number of conditions: 1
[17:03:05.424] signalConditions() ... done
[17:03:05.424] Future state: ‘finished’
[17:03:05.424] result() for ClusterFuture ...
[17:03:05.424] - result already collected: FutureResult
[17:03:05.425] result() for ClusterFuture ... done
[17:03:05.425] signalConditions() ...
[17:03:05.425]  - include = ‘condition’
[17:03:05.425]  - exclude = ‘immediateCondition’
[17:03:05.425]  - resignal = TRUE
[17:03:05.425]  - Number of conditions: 1
[17:03:05.425]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:05.425] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:05.426] result() for ClusterFuture ...
[17:03:05.426] - result already collected: FutureResult
[17:03:05.426] result() for ClusterFuture ... done
[17:03:05.426] result() for ClusterFuture ...
[17:03:05.426] - result already collected: FutureResult
[17:03:05.426] result() for ClusterFuture ... done
[17:03:05.426] signalConditions() ...
[17:03:05.426]  - include = ‘immediateCondition’
[17:03:05.426]  - exclude = 
[17:03:05.427]  - resignal = FALSE
[17:03:05.427]  - Number of conditions: 1
[17:03:05.427] signalConditions() ... done
[17:03:05.427] Future state: ‘finished’
[17:03:05.427] result() for ClusterFuture ...
[17:03:05.427] - result already collected: FutureResult
[17:03:05.427] result() for ClusterFuture ... done
[17:03:05.427] signalConditions() ...
[17:03:05.427]  - include = ‘condition’
[17:03:05.427]  - exclude = ‘immediateCondition’
[17:03:05.427]  - resignal = TRUE
[17:03:05.428]  - Number of conditions: 1
[17:03:05.428]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:03:05.428] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:03:05.432] getGlobalsAndPackages() ...
[17:03:05.432] 
[17:03:05.432] - globals: [0] <none>
[17:03:05.432] getGlobalsAndPackages() ... DONE
[17:03:05.443] Packages needed by the future expression (n = 0): <none>
[17:03:05.443] Packages needed by future strategies (n = 0): <none>
[17:03:05.444] {
[17:03:05.444]     {
[17:03:05.444]         {
[17:03:05.444]             ...future.startTime <- base::Sys.time()
[17:03:05.444]             {
[17:03:05.444]                 {
[17:03:05.444]                   {
[17:03:05.444]                     {
[17:03:05.444]                       base::local({
[17:03:05.444]                         has_future <- base::requireNamespace("future", 
[17:03:05.444]                           quietly = TRUE)
[17:03:05.444]                         if (has_future) {
[17:03:05.444]                           ns <- base::getNamespace("future")
[17:03:05.444]                           version <- ns[[".package"]][["version"]]
[17:03:05.444]                           if (is.null(version)) 
[17:03:05.444]                             version <- utils::packageVersion("future")
[17:03:05.444]                         }
[17:03:05.444]                         else {
[17:03:05.444]                           version <- NULL
[17:03:05.444]                         }
[17:03:05.444]                         if (!has_future || version < "1.8.0") {
[17:03:05.444]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.444]                             "", base::R.version$version.string), 
[17:03:05.444]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.444]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.444]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.444]                               "release", "version")], collapse = " "), 
[17:03:05.444]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.444]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.444]                             info)
[17:03:05.444]                           info <- base::paste(info, collapse = "; ")
[17:03:05.444]                           if (!has_future) {
[17:03:05.444]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.444]                               info)
[17:03:05.444]                           }
[17:03:05.444]                           else {
[17:03:05.444]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.444]                               info, version)
[17:03:05.444]                           }
[17:03:05.444]                           base::stop(msg)
[17:03:05.444]                         }
[17:03:05.444]                       })
[17:03:05.444]                     }
[17:03:05.444]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.444]                     base::options(mc.cores = 1L)
[17:03:05.444]                   }
[17:03:05.444]                   ...future.strategy.old <- future::plan("list")
[17:03:05.444]                   options(future.plan = NULL)
[17:03:05.444]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.444]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.444]                 }
[17:03:05.444]                 ...future.workdir <- getwd()
[17:03:05.444]             }
[17:03:05.444]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.444]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.444]         }
[17:03:05.444]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.444]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.444]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.444]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.444]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.444]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.444]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.444]             base::names(...future.oldOptions))
[17:03:05.444]     }
[17:03:05.444]     if (FALSE) {
[17:03:05.444]     }
[17:03:05.444]     else {
[17:03:05.444]         if (TRUE) {
[17:03:05.444]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.444]                 open = "w")
[17:03:05.444]         }
[17:03:05.444]         else {
[17:03:05.444]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.444]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.444]         }
[17:03:05.444]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.444]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.444]             base::sink(type = "output", split = FALSE)
[17:03:05.444]             base::close(...future.stdout)
[17:03:05.444]         }, add = TRUE)
[17:03:05.444]     }
[17:03:05.444]     ...future.frame <- base::sys.nframe()
[17:03:05.444]     ...future.conditions <- base::list()
[17:03:05.444]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.444]     if (FALSE) {
[17:03:05.444]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.444]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.444]     }
[17:03:05.444]     ...future.result <- base::tryCatch({
[17:03:05.444]         base::withCallingHandlers({
[17:03:05.444]             ...future.value <- base::withVisible(base::local({
[17:03:05.444]                 ...future.makeSendCondition <- base::local({
[17:03:05.444]                   sendCondition <- NULL
[17:03:05.444]                   function(frame = 1L) {
[17:03:05.444]                     if (is.function(sendCondition)) 
[17:03:05.444]                       return(sendCondition)
[17:03:05.444]                     ns <- getNamespace("parallel")
[17:03:05.444]                     if (exists("sendData", mode = "function", 
[17:03:05.444]                       envir = ns)) {
[17:03:05.444]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.444]                         envir = ns)
[17:03:05.444]                       envir <- sys.frame(frame)
[17:03:05.444]                       master <- NULL
[17:03:05.444]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.444]                         !identical(envir, emptyenv())) {
[17:03:05.444]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.444]                           inherits = FALSE)) {
[17:03:05.444]                           master <- get("master", mode = "list", 
[17:03:05.444]                             envir = envir, inherits = FALSE)
[17:03:05.444]                           if (inherits(master, c("SOCKnode", 
[17:03:05.444]                             "SOCK0node"))) {
[17:03:05.444]                             sendCondition <<- function(cond) {
[17:03:05.444]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.444]                                 success = TRUE)
[17:03:05.444]                               parallel_sendData(master, data)
[17:03:05.444]                             }
[17:03:05.444]                             return(sendCondition)
[17:03:05.444]                           }
[17:03:05.444]                         }
[17:03:05.444]                         frame <- frame + 1L
[17:03:05.444]                         envir <- sys.frame(frame)
[17:03:05.444]                       }
[17:03:05.444]                     }
[17:03:05.444]                     sendCondition <<- function(cond) NULL
[17:03:05.444]                   }
[17:03:05.444]                 })
[17:03:05.444]                 withCallingHandlers({
[17:03:05.444]                   {
[17:03:05.444]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:03:05.444]                       "error", "condition")))
[17:03:05.444]                   }
[17:03:05.444]                 }, immediateCondition = function(cond) {
[17:03:05.444]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.444]                   sendCondition(cond)
[17:03:05.444]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.444]                   {
[17:03:05.444]                     inherits <- base::inherits
[17:03:05.444]                     invokeRestart <- base::invokeRestart
[17:03:05.444]                     is.null <- base::is.null
[17:03:05.444]                     muffled <- FALSE
[17:03:05.444]                     if (inherits(cond, "message")) {
[17:03:05.444]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.444]                       if (muffled) 
[17:03:05.444]                         invokeRestart("muffleMessage")
[17:03:05.444]                     }
[17:03:05.444]                     else if (inherits(cond, "warning")) {
[17:03:05.444]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.444]                       if (muffled) 
[17:03:05.444]                         invokeRestart("muffleWarning")
[17:03:05.444]                     }
[17:03:05.444]                     else if (inherits(cond, "condition")) {
[17:03:05.444]                       if (!is.null(pattern)) {
[17:03:05.444]                         computeRestarts <- base::computeRestarts
[17:03:05.444]                         grepl <- base::grepl
[17:03:05.444]                         restarts <- computeRestarts(cond)
[17:03:05.444]                         for (restart in restarts) {
[17:03:05.444]                           name <- restart$name
[17:03:05.444]                           if (is.null(name)) 
[17:03:05.444]                             next
[17:03:05.444]                           if (!grepl(pattern, name)) 
[17:03:05.444]                             next
[17:03:05.444]                           invokeRestart(restart)
[17:03:05.444]                           muffled <- TRUE
[17:03:05.444]                           break
[17:03:05.444]                         }
[17:03:05.444]                       }
[17:03:05.444]                     }
[17:03:05.444]                     invisible(muffled)
[17:03:05.444]                   }
[17:03:05.444]                   muffleCondition(cond)
[17:03:05.444]                 })
[17:03:05.444]             }))
[17:03:05.444]             future::FutureResult(value = ...future.value$value, 
[17:03:05.444]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.444]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.444]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.444]                     ...future.globalenv.names))
[17:03:05.444]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.444]         }, condition = base::local({
[17:03:05.444]             c <- base::c
[17:03:05.444]             inherits <- base::inherits
[17:03:05.444]             invokeRestart <- base::invokeRestart
[17:03:05.444]             length <- base::length
[17:03:05.444]             list <- base::list
[17:03:05.444]             seq.int <- base::seq.int
[17:03:05.444]             signalCondition <- base::signalCondition
[17:03:05.444]             sys.calls <- base::sys.calls
[17:03:05.444]             `[[` <- base::`[[`
[17:03:05.444]             `+` <- base::`+`
[17:03:05.444]             `<<-` <- base::`<<-`
[17:03:05.444]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.444]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.444]                   3L)]
[17:03:05.444]             }
[17:03:05.444]             function(cond) {
[17:03:05.444]                 is_error <- inherits(cond, "error")
[17:03:05.444]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.444]                   NULL)
[17:03:05.444]                 if (is_error) {
[17:03:05.444]                   sessionInformation <- function() {
[17:03:05.444]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.444]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.444]                       search = base::search(), system = base::Sys.info())
[17:03:05.444]                   }
[17:03:05.444]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.444]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.444]                     cond$call), session = sessionInformation(), 
[17:03:05.444]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.444]                   signalCondition(cond)
[17:03:05.444]                 }
[17:03:05.444]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.444]                 "immediateCondition"))) {
[17:03:05.444]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.444]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.444]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.444]                   if (TRUE && !signal) {
[17:03:05.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.444]                     {
[17:03:05.444]                       inherits <- base::inherits
[17:03:05.444]                       invokeRestart <- base::invokeRestart
[17:03:05.444]                       is.null <- base::is.null
[17:03:05.444]                       muffled <- FALSE
[17:03:05.444]                       if (inherits(cond, "message")) {
[17:03:05.444]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.444]                         if (muffled) 
[17:03:05.444]                           invokeRestart("muffleMessage")
[17:03:05.444]                       }
[17:03:05.444]                       else if (inherits(cond, "warning")) {
[17:03:05.444]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.444]                         if (muffled) 
[17:03:05.444]                           invokeRestart("muffleWarning")
[17:03:05.444]                       }
[17:03:05.444]                       else if (inherits(cond, "condition")) {
[17:03:05.444]                         if (!is.null(pattern)) {
[17:03:05.444]                           computeRestarts <- base::computeRestarts
[17:03:05.444]                           grepl <- base::grepl
[17:03:05.444]                           restarts <- computeRestarts(cond)
[17:03:05.444]                           for (restart in restarts) {
[17:03:05.444]                             name <- restart$name
[17:03:05.444]                             if (is.null(name)) 
[17:03:05.444]                               next
[17:03:05.444]                             if (!grepl(pattern, name)) 
[17:03:05.444]                               next
[17:03:05.444]                             invokeRestart(restart)
[17:03:05.444]                             muffled <- TRUE
[17:03:05.444]                             break
[17:03:05.444]                           }
[17:03:05.444]                         }
[17:03:05.444]                       }
[17:03:05.444]                       invisible(muffled)
[17:03:05.444]                     }
[17:03:05.444]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.444]                   }
[17:03:05.444]                 }
[17:03:05.444]                 else {
[17:03:05.444]                   if (TRUE) {
[17:03:05.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.444]                     {
[17:03:05.444]                       inherits <- base::inherits
[17:03:05.444]                       invokeRestart <- base::invokeRestart
[17:03:05.444]                       is.null <- base::is.null
[17:03:05.444]                       muffled <- FALSE
[17:03:05.444]                       if (inherits(cond, "message")) {
[17:03:05.444]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.444]                         if (muffled) 
[17:03:05.444]                           invokeRestart("muffleMessage")
[17:03:05.444]                       }
[17:03:05.444]                       else if (inherits(cond, "warning")) {
[17:03:05.444]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.444]                         if (muffled) 
[17:03:05.444]                           invokeRestart("muffleWarning")
[17:03:05.444]                       }
[17:03:05.444]                       else if (inherits(cond, "condition")) {
[17:03:05.444]                         if (!is.null(pattern)) {
[17:03:05.444]                           computeRestarts <- base::computeRestarts
[17:03:05.444]                           grepl <- base::grepl
[17:03:05.444]                           restarts <- computeRestarts(cond)
[17:03:05.444]                           for (restart in restarts) {
[17:03:05.444]                             name <- restart$name
[17:03:05.444]                             if (is.null(name)) 
[17:03:05.444]                               next
[17:03:05.444]                             if (!grepl(pattern, name)) 
[17:03:05.444]                               next
[17:03:05.444]                             invokeRestart(restart)
[17:03:05.444]                             muffled <- TRUE
[17:03:05.444]                             break
[17:03:05.444]                           }
[17:03:05.444]                         }
[17:03:05.444]                       }
[17:03:05.444]                       invisible(muffled)
[17:03:05.444]                     }
[17:03:05.444]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.444]                   }
[17:03:05.444]                 }
[17:03:05.444]             }
[17:03:05.444]         }))
[17:03:05.444]     }, error = function(ex) {
[17:03:05.444]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.444]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.444]                 ...future.rng), started = ...future.startTime, 
[17:03:05.444]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.444]             version = "1.8"), class = "FutureResult")
[17:03:05.444]     }, finally = {
[17:03:05.444]         if (!identical(...future.workdir, getwd())) 
[17:03:05.444]             setwd(...future.workdir)
[17:03:05.444]         {
[17:03:05.444]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.444]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.444]             }
[17:03:05.444]             base::options(...future.oldOptions)
[17:03:05.444]             if (.Platform$OS.type == "windows") {
[17:03:05.444]                 old_names <- names(...future.oldEnvVars)
[17:03:05.444]                 envs <- base::Sys.getenv()
[17:03:05.444]                 names <- names(envs)
[17:03:05.444]                 common <- intersect(names, old_names)
[17:03:05.444]                 added <- setdiff(names, old_names)
[17:03:05.444]                 removed <- setdiff(old_names, names)
[17:03:05.444]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.444]                   envs[common]]
[17:03:05.444]                 NAMES <- toupper(changed)
[17:03:05.444]                 args <- list()
[17:03:05.444]                 for (kk in seq_along(NAMES)) {
[17:03:05.444]                   name <- changed[[kk]]
[17:03:05.444]                   NAME <- NAMES[[kk]]
[17:03:05.444]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.444]                     next
[17:03:05.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.444]                 }
[17:03:05.444]                 NAMES <- toupper(added)
[17:03:05.444]                 for (kk in seq_along(NAMES)) {
[17:03:05.444]                   name <- added[[kk]]
[17:03:05.444]                   NAME <- NAMES[[kk]]
[17:03:05.444]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.444]                     next
[17:03:05.444]                   args[[name]] <- ""
[17:03:05.444]                 }
[17:03:05.444]                 NAMES <- toupper(removed)
[17:03:05.444]                 for (kk in seq_along(NAMES)) {
[17:03:05.444]                   name <- removed[[kk]]
[17:03:05.444]                   NAME <- NAMES[[kk]]
[17:03:05.444]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.444]                     next
[17:03:05.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.444]                 }
[17:03:05.444]                 if (length(args) > 0) 
[17:03:05.444]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.444]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.444]             }
[17:03:05.444]             else {
[17:03:05.444]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.444]             }
[17:03:05.444]             {
[17:03:05.444]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.444]                   0L) {
[17:03:05.444]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.444]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.444]                   base::options(opts)
[17:03:05.444]                 }
[17:03:05.444]                 {
[17:03:05.444]                   {
[17:03:05.444]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.444]                     NULL
[17:03:05.444]                   }
[17:03:05.444]                   options(future.plan = NULL)
[17:03:05.444]                   if (is.na(NA_character_)) 
[17:03:05.444]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.444]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.444]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.444]                     .init = FALSE)
[17:03:05.444]                 }
[17:03:05.444]             }
[17:03:05.444]         }
[17:03:05.444]     })
[17:03:05.444]     if (TRUE) {
[17:03:05.444]         base::sink(type = "output", split = FALSE)
[17:03:05.444]         if (TRUE) {
[17:03:05.444]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.444]         }
[17:03:05.444]         else {
[17:03:05.444]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.444]         }
[17:03:05.444]         base::close(...future.stdout)
[17:03:05.444]         ...future.stdout <- NULL
[17:03:05.444]     }
[17:03:05.444]     ...future.result$conditions <- ...future.conditions
[17:03:05.444]     ...future.result$finished <- base::Sys.time()
[17:03:05.444]     ...future.result
[17:03:05.444] }
[17:03:05.447] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:05.449] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.449] - Validating connection of MultisessionFuture
[17:03:05.449] - received message: FutureResult
[17:03:05.449] - Received FutureResult
[17:03:05.449] - Erased future from FutureRegistry
[17:03:05.450] result() for ClusterFuture ...
[17:03:05.450] - result already collected: FutureResult
[17:03:05.450] result() for ClusterFuture ... done
[17:03:05.450] signalConditions() ...
[17:03:05.450]  - include = ‘immediateCondition’
[17:03:05.450]  - exclude = 
[17:03:05.450]  - resignal = FALSE
[17:03:05.450]  - Number of conditions: 1
[17:03:05.450] signalConditions() ... done
[17:03:05.450] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:05.450] result() for ClusterFuture ...
[17:03:05.451] - result already collected: FutureResult
[17:03:05.451] result() for ClusterFuture ... done
[17:03:05.451] result() for ClusterFuture ...
[17:03:05.451] - result already collected: FutureResult
[17:03:05.451] result() for ClusterFuture ... done
[17:03:05.451] signalConditions() ...
[17:03:05.451]  - include = ‘immediateCondition’
[17:03:05.451]  - exclude = 
[17:03:05.451]  - resignal = FALSE
[17:03:05.451]  - Number of conditions: 1
[17:03:05.451] signalConditions() ... done
<MyError: boom>
[17:03:05.452] result() for ClusterFuture ...
[17:03:05.452] - result already collected: FutureResult
[17:03:05.452] result() for ClusterFuture ... done
[17:03:05.452] result() for ClusterFuture ...
[17:03:05.452] - result already collected: FutureResult
[17:03:05.452] result() for ClusterFuture ... done
[17:03:05.452] signalConditions() ...
[17:03:05.452]  - include = ‘immediateCondition’
[17:03:05.452]  - exclude = 
[17:03:05.452]  - resignal = FALSE
[17:03:05.453]  - Number of conditions: 1
[17:03:05.453] signalConditions() ... done
[17:03:05.453] Future state: ‘finished’
[17:03:05.453] result() for ClusterFuture ...
[17:03:05.453] - result already collected: FutureResult
[17:03:05.453] result() for ClusterFuture ... done
[17:03:05.453] signalConditions() ...
[17:03:05.453]  - include = ‘condition’
[17:03:05.453]  - exclude = ‘immediateCondition’
[17:03:05.453]  - resignal = TRUE
[17:03:05.453]  - Number of conditions: 1
[17:03:05.453]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:03:05.454] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[17:03:05.470] getGlobalsAndPackages() ...
[17:03:05.470] Searching for globals...
[17:03:05.471] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:03:05.471] Searching for globals ... DONE
[17:03:05.471] Resolving globals: FALSE
[17:03:05.471] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[17:03:05.472] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[17:03:05.472] - globals: [1] ‘a’
[17:03:05.472] 
[17:03:05.472] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:05.473] Packages needed by the future expression (n = 0): <none>
[17:03:05.473] Packages needed by future strategies (n = 0): <none>
[17:03:05.474] {
[17:03:05.474]     {
[17:03:05.474]         {
[17:03:05.474]             ...future.startTime <- base::Sys.time()
[17:03:05.474]             {
[17:03:05.474]                 {
[17:03:05.474]                   {
[17:03:05.474]                     base::local({
[17:03:05.474]                       has_future <- base::requireNamespace("future", 
[17:03:05.474]                         quietly = TRUE)
[17:03:05.474]                       if (has_future) {
[17:03:05.474]                         ns <- base::getNamespace("future")
[17:03:05.474]                         version <- ns[[".package"]][["version"]]
[17:03:05.474]                         if (is.null(version)) 
[17:03:05.474]                           version <- utils::packageVersion("future")
[17:03:05.474]                       }
[17:03:05.474]                       else {
[17:03:05.474]                         version <- NULL
[17:03:05.474]                       }
[17:03:05.474]                       if (!has_future || version < "1.8.0") {
[17:03:05.474]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.474]                           "", base::R.version$version.string), 
[17:03:05.474]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:05.474]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.474]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.474]                             "release", "version")], collapse = " "), 
[17:03:05.474]                           hostname = base::Sys.info()[["nodename"]])
[17:03:05.474]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.474]                           info)
[17:03:05.474]                         info <- base::paste(info, collapse = "; ")
[17:03:05.474]                         if (!has_future) {
[17:03:05.474]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.474]                             info)
[17:03:05.474]                         }
[17:03:05.474]                         else {
[17:03:05.474]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.474]                             info, version)
[17:03:05.474]                         }
[17:03:05.474]                         base::stop(msg)
[17:03:05.474]                       }
[17:03:05.474]                     })
[17:03:05.474]                   }
[17:03:05.474]                   ...future.strategy.old <- future::plan("list")
[17:03:05.474]                   options(future.plan = NULL)
[17:03:05.474]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.474]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.474]                 }
[17:03:05.474]                 ...future.workdir <- getwd()
[17:03:05.474]             }
[17:03:05.474]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.474]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.474]         }
[17:03:05.474]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.474]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[17:03:05.474]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.474]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.474]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.474]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.474]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.474]             base::names(...future.oldOptions))
[17:03:05.474]     }
[17:03:05.474]     if (FALSE) {
[17:03:05.474]     }
[17:03:05.474]     else {
[17:03:05.474]         if (TRUE) {
[17:03:05.474]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.474]                 open = "w")
[17:03:05.474]         }
[17:03:05.474]         else {
[17:03:05.474]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.474]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.474]         }
[17:03:05.474]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.474]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.474]             base::sink(type = "output", split = FALSE)
[17:03:05.474]             base::close(...future.stdout)
[17:03:05.474]         }, add = TRUE)
[17:03:05.474]     }
[17:03:05.474]     ...future.frame <- base::sys.nframe()
[17:03:05.474]     ...future.conditions <- base::list()
[17:03:05.474]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.474]     if (FALSE) {
[17:03:05.474]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.474]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.474]     }
[17:03:05.474]     ...future.result <- base::tryCatch({
[17:03:05.474]         base::withCallingHandlers({
[17:03:05.474]             ...future.value <- base::withVisible(base::local({
[17:03:05.474]                 sum(a)
[17:03:05.474]             }))
[17:03:05.474]             future::FutureResult(value = ...future.value$value, 
[17:03:05.474]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.474]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.474]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.474]                     ...future.globalenv.names))
[17:03:05.474]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.474]         }, condition = base::local({
[17:03:05.474]             c <- base::c
[17:03:05.474]             inherits <- base::inherits
[17:03:05.474]             invokeRestart <- base::invokeRestart
[17:03:05.474]             length <- base::length
[17:03:05.474]             list <- base::list
[17:03:05.474]             seq.int <- base::seq.int
[17:03:05.474]             signalCondition <- base::signalCondition
[17:03:05.474]             sys.calls <- base::sys.calls
[17:03:05.474]             `[[` <- base::`[[`
[17:03:05.474]             `+` <- base::`+`
[17:03:05.474]             `<<-` <- base::`<<-`
[17:03:05.474]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.474]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.474]                   3L)]
[17:03:05.474]             }
[17:03:05.474]             function(cond) {
[17:03:05.474]                 is_error <- inherits(cond, "error")
[17:03:05.474]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.474]                   NULL)
[17:03:05.474]                 if (is_error) {
[17:03:05.474]                   sessionInformation <- function() {
[17:03:05.474]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.474]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.474]                       search = base::search(), system = base::Sys.info())
[17:03:05.474]                   }
[17:03:05.474]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.474]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.474]                     cond$call), session = sessionInformation(), 
[17:03:05.474]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.474]                   signalCondition(cond)
[17:03:05.474]                 }
[17:03:05.474]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.474]                 "immediateCondition"))) {
[17:03:05.474]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.474]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.474]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.474]                   if (TRUE && !signal) {
[17:03:05.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.474]                     {
[17:03:05.474]                       inherits <- base::inherits
[17:03:05.474]                       invokeRestart <- base::invokeRestart
[17:03:05.474]                       is.null <- base::is.null
[17:03:05.474]                       muffled <- FALSE
[17:03:05.474]                       if (inherits(cond, "message")) {
[17:03:05.474]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.474]                         if (muffled) 
[17:03:05.474]                           invokeRestart("muffleMessage")
[17:03:05.474]                       }
[17:03:05.474]                       else if (inherits(cond, "warning")) {
[17:03:05.474]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.474]                         if (muffled) 
[17:03:05.474]                           invokeRestart("muffleWarning")
[17:03:05.474]                       }
[17:03:05.474]                       else if (inherits(cond, "condition")) {
[17:03:05.474]                         if (!is.null(pattern)) {
[17:03:05.474]                           computeRestarts <- base::computeRestarts
[17:03:05.474]                           grepl <- base::grepl
[17:03:05.474]                           restarts <- computeRestarts(cond)
[17:03:05.474]                           for (restart in restarts) {
[17:03:05.474]                             name <- restart$name
[17:03:05.474]                             if (is.null(name)) 
[17:03:05.474]                               next
[17:03:05.474]                             if (!grepl(pattern, name)) 
[17:03:05.474]                               next
[17:03:05.474]                             invokeRestart(restart)
[17:03:05.474]                             muffled <- TRUE
[17:03:05.474]                             break
[17:03:05.474]                           }
[17:03:05.474]                         }
[17:03:05.474]                       }
[17:03:05.474]                       invisible(muffled)
[17:03:05.474]                     }
[17:03:05.474]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.474]                   }
[17:03:05.474]                 }
[17:03:05.474]                 else {
[17:03:05.474]                   if (TRUE) {
[17:03:05.474]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.474]                     {
[17:03:05.474]                       inherits <- base::inherits
[17:03:05.474]                       invokeRestart <- base::invokeRestart
[17:03:05.474]                       is.null <- base::is.null
[17:03:05.474]                       muffled <- FALSE
[17:03:05.474]                       if (inherits(cond, "message")) {
[17:03:05.474]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.474]                         if (muffled) 
[17:03:05.474]                           invokeRestart("muffleMessage")
[17:03:05.474]                       }
[17:03:05.474]                       else if (inherits(cond, "warning")) {
[17:03:05.474]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.474]                         if (muffled) 
[17:03:05.474]                           invokeRestart("muffleWarning")
[17:03:05.474]                       }
[17:03:05.474]                       else if (inherits(cond, "condition")) {
[17:03:05.474]                         if (!is.null(pattern)) {
[17:03:05.474]                           computeRestarts <- base::computeRestarts
[17:03:05.474]                           grepl <- base::grepl
[17:03:05.474]                           restarts <- computeRestarts(cond)
[17:03:05.474]                           for (restart in restarts) {
[17:03:05.474]                             name <- restart$name
[17:03:05.474]                             if (is.null(name)) 
[17:03:05.474]                               next
[17:03:05.474]                             if (!grepl(pattern, name)) 
[17:03:05.474]                               next
[17:03:05.474]                             invokeRestart(restart)
[17:03:05.474]                             muffled <- TRUE
[17:03:05.474]                             break
[17:03:05.474]                           }
[17:03:05.474]                         }
[17:03:05.474]                       }
[17:03:05.474]                       invisible(muffled)
[17:03:05.474]                     }
[17:03:05.474]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.474]                   }
[17:03:05.474]                 }
[17:03:05.474]             }
[17:03:05.474]         }))
[17:03:05.474]     }, error = function(ex) {
[17:03:05.474]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.474]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.474]                 ...future.rng), started = ...future.startTime, 
[17:03:05.474]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.474]             version = "1.8"), class = "FutureResult")
[17:03:05.474]     }, finally = {
[17:03:05.474]         if (!identical(...future.workdir, getwd())) 
[17:03:05.474]             setwd(...future.workdir)
[17:03:05.474]         {
[17:03:05.474]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.474]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.474]             }
[17:03:05.474]             base::options(...future.oldOptions)
[17:03:05.474]             if (.Platform$OS.type == "windows") {
[17:03:05.474]                 old_names <- names(...future.oldEnvVars)
[17:03:05.474]                 envs <- base::Sys.getenv()
[17:03:05.474]                 names <- names(envs)
[17:03:05.474]                 common <- intersect(names, old_names)
[17:03:05.474]                 added <- setdiff(names, old_names)
[17:03:05.474]                 removed <- setdiff(old_names, names)
[17:03:05.474]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.474]                   envs[common]]
[17:03:05.474]                 NAMES <- toupper(changed)
[17:03:05.474]                 args <- list()
[17:03:05.474]                 for (kk in seq_along(NAMES)) {
[17:03:05.474]                   name <- changed[[kk]]
[17:03:05.474]                   NAME <- NAMES[[kk]]
[17:03:05.474]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.474]                     next
[17:03:05.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.474]                 }
[17:03:05.474]                 NAMES <- toupper(added)
[17:03:05.474]                 for (kk in seq_along(NAMES)) {
[17:03:05.474]                   name <- added[[kk]]
[17:03:05.474]                   NAME <- NAMES[[kk]]
[17:03:05.474]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.474]                     next
[17:03:05.474]                   args[[name]] <- ""
[17:03:05.474]                 }
[17:03:05.474]                 NAMES <- toupper(removed)
[17:03:05.474]                 for (kk in seq_along(NAMES)) {
[17:03:05.474]                   name <- removed[[kk]]
[17:03:05.474]                   NAME <- NAMES[[kk]]
[17:03:05.474]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.474]                     next
[17:03:05.474]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.474]                 }
[17:03:05.474]                 if (length(args) > 0) 
[17:03:05.474]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.474]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.474]             }
[17:03:05.474]             else {
[17:03:05.474]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.474]             }
[17:03:05.474]             {
[17:03:05.474]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.474]                   0L) {
[17:03:05.474]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.474]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.474]                   base::options(opts)
[17:03:05.474]                 }
[17:03:05.474]                 {
[17:03:05.474]                   {
[17:03:05.474]                     NULL
[17:03:05.474]                     RNGkind("Mersenne-Twister")
[17:03:05.474]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:05.474]                       inherits = FALSE)
[17:03:05.474]                   }
[17:03:05.474]                   options(future.plan = NULL)
[17:03:05.474]                   if (is.na(NA_character_)) 
[17:03:05.474]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.474]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.474]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.474]                     .init = FALSE)
[17:03:05.474]                 }
[17:03:05.474]             }
[17:03:05.474]         }
[17:03:05.474]     })
[17:03:05.474]     if (TRUE) {
[17:03:05.474]         base::sink(type = "output", split = FALSE)
[17:03:05.474]         if (TRUE) {
[17:03:05.474]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.474]         }
[17:03:05.474]         else {
[17:03:05.474]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.474]         }
[17:03:05.474]         base::close(...future.stdout)
[17:03:05.474]         ...future.stdout <- NULL
[17:03:05.474]     }
[17:03:05.474]     ...future.result$conditions <- ...future.conditions
[17:03:05.474]     ...future.result$finished <- base::Sys.time()
[17:03:05.474]     ...future.result
[17:03:05.474] }
[17:03:05.475] assign_globals() ...
[17:03:05.475] List of 1
[17:03:05.475]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[17:03:05.475]  - attr(*, "where")=List of 1
[17:03:05.475]   ..$ a:<environment: R_EmptyEnv> 
[17:03:05.475]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:05.475]  - attr(*, "resolved")= logi FALSE
[17:03:05.475]  - attr(*, "total_size")= num 4104
[17:03:05.478] - copied ‘a’ to environment
[17:03:05.478] assign_globals() ... done
[17:03:05.478] plan(): Setting new future strategy stack:
[17:03:05.478] List of future strategies:
[17:03:05.478] 1. sequential:
[17:03:05.478]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:05.478]    - tweaked: FALSE
[17:03:05.478]    - call: NULL
[17:03:05.479] plan(): nbrOfWorkers() = 1
[17:03:05.480] plan(): Setting new future strategy stack:
[17:03:05.480] List of future strategies:
[17:03:05.480] 1. sequential:
[17:03:05.480]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:05.480]    - tweaked: FALSE
[17:03:05.480]    - call: future::plan("sequential")
[17:03:05.480] plan(): nbrOfWorkers() = 1
[17:03:05.480] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[17:03:05.481] getGlobalsAndPackages() ...
[17:03:05.481] Searching for globals...
[17:03:05.482] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:03:05.482] Searching for globals ... DONE
[17:03:05.482] Resolving globals: FALSE
[17:03:05.482] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[17:03:05.483] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[17:03:05.483] getGlobalsAndPackages() ...
[17:03:05.483] Searching for globals...
[17:03:05.484] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:03:05.484] Searching for globals ... DONE
[17:03:05.484] Resolving globals: FALSE
[17:03:05.484] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[17:03:05.485] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[17:03:05.485] - globals: [1] ‘a’
[17:03:05.485] 
[17:03:05.485] getGlobalsAndPackages() ... DONE
[17:03:05.496] Packages needed by the future expression (n = 0): <none>
[17:03:05.496] Packages needed by future strategies (n = 0): <none>
[17:03:05.496] {
[17:03:05.496]     {
[17:03:05.496]         {
[17:03:05.496]             ...future.startTime <- base::Sys.time()
[17:03:05.496]             {
[17:03:05.496]                 {
[17:03:05.496]                   {
[17:03:05.496]                     {
[17:03:05.496]                       base::local({
[17:03:05.496]                         has_future <- base::requireNamespace("future", 
[17:03:05.496]                           quietly = TRUE)
[17:03:05.496]                         if (has_future) {
[17:03:05.496]                           ns <- base::getNamespace("future")
[17:03:05.496]                           version <- ns[[".package"]][["version"]]
[17:03:05.496]                           if (is.null(version)) 
[17:03:05.496]                             version <- utils::packageVersion("future")
[17:03:05.496]                         }
[17:03:05.496]                         else {
[17:03:05.496]                           version <- NULL
[17:03:05.496]                         }
[17:03:05.496]                         if (!has_future || version < "1.8.0") {
[17:03:05.496]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.496]                             "", base::R.version$version.string), 
[17:03:05.496]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.496]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.496]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.496]                               "release", "version")], collapse = " "), 
[17:03:05.496]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.496]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.496]                             info)
[17:03:05.496]                           info <- base::paste(info, collapse = "; ")
[17:03:05.496]                           if (!has_future) {
[17:03:05.496]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.496]                               info)
[17:03:05.496]                           }
[17:03:05.496]                           else {
[17:03:05.496]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.496]                               info, version)
[17:03:05.496]                           }
[17:03:05.496]                           base::stop(msg)
[17:03:05.496]                         }
[17:03:05.496]                       })
[17:03:05.496]                     }
[17:03:05.496]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.496]                     base::options(mc.cores = 1L)
[17:03:05.496]                   }
[17:03:05.496]                   ...future.strategy.old <- future::plan("list")
[17:03:05.496]                   options(future.plan = NULL)
[17:03:05.496]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.496]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.496]                 }
[17:03:05.496]                 ...future.workdir <- getwd()
[17:03:05.496]             }
[17:03:05.496]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.496]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.496]         }
[17:03:05.496]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.496]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[17:03:05.496]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.496]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.496]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.496]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.496]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.496]             base::names(...future.oldOptions))
[17:03:05.496]     }
[17:03:05.496]     if (FALSE) {
[17:03:05.496]     }
[17:03:05.496]     else {
[17:03:05.496]         if (TRUE) {
[17:03:05.496]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.496]                 open = "w")
[17:03:05.496]         }
[17:03:05.496]         else {
[17:03:05.496]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.496]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.496]         }
[17:03:05.496]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.496]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.496]             base::sink(type = "output", split = FALSE)
[17:03:05.496]             base::close(...future.stdout)
[17:03:05.496]         }, add = TRUE)
[17:03:05.496]     }
[17:03:05.496]     ...future.frame <- base::sys.nframe()
[17:03:05.496]     ...future.conditions <- base::list()
[17:03:05.496]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.496]     if (FALSE) {
[17:03:05.496]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.496]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.496]     }
[17:03:05.496]     ...future.result <- base::tryCatch({
[17:03:05.496]         base::withCallingHandlers({
[17:03:05.496]             ...future.value <- base::withVisible(base::local({
[17:03:05.496]                 ...future.makeSendCondition <- base::local({
[17:03:05.496]                   sendCondition <- NULL
[17:03:05.496]                   function(frame = 1L) {
[17:03:05.496]                     if (is.function(sendCondition)) 
[17:03:05.496]                       return(sendCondition)
[17:03:05.496]                     ns <- getNamespace("parallel")
[17:03:05.496]                     if (exists("sendData", mode = "function", 
[17:03:05.496]                       envir = ns)) {
[17:03:05.496]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.496]                         envir = ns)
[17:03:05.496]                       envir <- sys.frame(frame)
[17:03:05.496]                       master <- NULL
[17:03:05.496]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.496]                         !identical(envir, emptyenv())) {
[17:03:05.496]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.496]                           inherits = FALSE)) {
[17:03:05.496]                           master <- get("master", mode = "list", 
[17:03:05.496]                             envir = envir, inherits = FALSE)
[17:03:05.496]                           if (inherits(master, c("SOCKnode", 
[17:03:05.496]                             "SOCK0node"))) {
[17:03:05.496]                             sendCondition <<- function(cond) {
[17:03:05.496]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.496]                                 success = TRUE)
[17:03:05.496]                               parallel_sendData(master, data)
[17:03:05.496]                             }
[17:03:05.496]                             return(sendCondition)
[17:03:05.496]                           }
[17:03:05.496]                         }
[17:03:05.496]                         frame <- frame + 1L
[17:03:05.496]                         envir <- sys.frame(frame)
[17:03:05.496]                       }
[17:03:05.496]                     }
[17:03:05.496]                     sendCondition <<- function(cond) NULL
[17:03:05.496]                   }
[17:03:05.496]                 })
[17:03:05.496]                 withCallingHandlers({
[17:03:05.496]                   {
[17:03:05.496]                     sum(a)
[17:03:05.496]                   }
[17:03:05.496]                 }, immediateCondition = function(cond) {
[17:03:05.496]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.496]                   sendCondition(cond)
[17:03:05.496]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.496]                   {
[17:03:05.496]                     inherits <- base::inherits
[17:03:05.496]                     invokeRestart <- base::invokeRestart
[17:03:05.496]                     is.null <- base::is.null
[17:03:05.496]                     muffled <- FALSE
[17:03:05.496]                     if (inherits(cond, "message")) {
[17:03:05.496]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.496]                       if (muffled) 
[17:03:05.496]                         invokeRestart("muffleMessage")
[17:03:05.496]                     }
[17:03:05.496]                     else if (inherits(cond, "warning")) {
[17:03:05.496]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.496]                       if (muffled) 
[17:03:05.496]                         invokeRestart("muffleWarning")
[17:03:05.496]                     }
[17:03:05.496]                     else if (inherits(cond, "condition")) {
[17:03:05.496]                       if (!is.null(pattern)) {
[17:03:05.496]                         computeRestarts <- base::computeRestarts
[17:03:05.496]                         grepl <- base::grepl
[17:03:05.496]                         restarts <- computeRestarts(cond)
[17:03:05.496]                         for (restart in restarts) {
[17:03:05.496]                           name <- restart$name
[17:03:05.496]                           if (is.null(name)) 
[17:03:05.496]                             next
[17:03:05.496]                           if (!grepl(pattern, name)) 
[17:03:05.496]                             next
[17:03:05.496]                           invokeRestart(restart)
[17:03:05.496]                           muffled <- TRUE
[17:03:05.496]                           break
[17:03:05.496]                         }
[17:03:05.496]                       }
[17:03:05.496]                     }
[17:03:05.496]                     invisible(muffled)
[17:03:05.496]                   }
[17:03:05.496]                   muffleCondition(cond)
[17:03:05.496]                 })
[17:03:05.496]             }))
[17:03:05.496]             future::FutureResult(value = ...future.value$value, 
[17:03:05.496]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.496]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.496]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.496]                     ...future.globalenv.names))
[17:03:05.496]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.496]         }, condition = base::local({
[17:03:05.496]             c <- base::c
[17:03:05.496]             inherits <- base::inherits
[17:03:05.496]             invokeRestart <- base::invokeRestart
[17:03:05.496]             length <- base::length
[17:03:05.496]             list <- base::list
[17:03:05.496]             seq.int <- base::seq.int
[17:03:05.496]             signalCondition <- base::signalCondition
[17:03:05.496]             sys.calls <- base::sys.calls
[17:03:05.496]             `[[` <- base::`[[`
[17:03:05.496]             `+` <- base::`+`
[17:03:05.496]             `<<-` <- base::`<<-`
[17:03:05.496]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.496]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.496]                   3L)]
[17:03:05.496]             }
[17:03:05.496]             function(cond) {
[17:03:05.496]                 is_error <- inherits(cond, "error")
[17:03:05.496]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.496]                   NULL)
[17:03:05.496]                 if (is_error) {
[17:03:05.496]                   sessionInformation <- function() {
[17:03:05.496]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.496]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.496]                       search = base::search(), system = base::Sys.info())
[17:03:05.496]                   }
[17:03:05.496]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.496]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.496]                     cond$call), session = sessionInformation(), 
[17:03:05.496]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.496]                   signalCondition(cond)
[17:03:05.496]                 }
[17:03:05.496]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.496]                 "immediateCondition"))) {
[17:03:05.496]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.496]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.496]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.496]                   if (TRUE && !signal) {
[17:03:05.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.496]                     {
[17:03:05.496]                       inherits <- base::inherits
[17:03:05.496]                       invokeRestart <- base::invokeRestart
[17:03:05.496]                       is.null <- base::is.null
[17:03:05.496]                       muffled <- FALSE
[17:03:05.496]                       if (inherits(cond, "message")) {
[17:03:05.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.496]                         if (muffled) 
[17:03:05.496]                           invokeRestart("muffleMessage")
[17:03:05.496]                       }
[17:03:05.496]                       else if (inherits(cond, "warning")) {
[17:03:05.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.496]                         if (muffled) 
[17:03:05.496]                           invokeRestart("muffleWarning")
[17:03:05.496]                       }
[17:03:05.496]                       else if (inherits(cond, "condition")) {
[17:03:05.496]                         if (!is.null(pattern)) {
[17:03:05.496]                           computeRestarts <- base::computeRestarts
[17:03:05.496]                           grepl <- base::grepl
[17:03:05.496]                           restarts <- computeRestarts(cond)
[17:03:05.496]                           for (restart in restarts) {
[17:03:05.496]                             name <- restart$name
[17:03:05.496]                             if (is.null(name)) 
[17:03:05.496]                               next
[17:03:05.496]                             if (!grepl(pattern, name)) 
[17:03:05.496]                               next
[17:03:05.496]                             invokeRestart(restart)
[17:03:05.496]                             muffled <- TRUE
[17:03:05.496]                             break
[17:03:05.496]                           }
[17:03:05.496]                         }
[17:03:05.496]                       }
[17:03:05.496]                       invisible(muffled)
[17:03:05.496]                     }
[17:03:05.496]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.496]                   }
[17:03:05.496]                 }
[17:03:05.496]                 else {
[17:03:05.496]                   if (TRUE) {
[17:03:05.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.496]                     {
[17:03:05.496]                       inherits <- base::inherits
[17:03:05.496]                       invokeRestart <- base::invokeRestart
[17:03:05.496]                       is.null <- base::is.null
[17:03:05.496]                       muffled <- FALSE
[17:03:05.496]                       if (inherits(cond, "message")) {
[17:03:05.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.496]                         if (muffled) 
[17:03:05.496]                           invokeRestart("muffleMessage")
[17:03:05.496]                       }
[17:03:05.496]                       else if (inherits(cond, "warning")) {
[17:03:05.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.496]                         if (muffled) 
[17:03:05.496]                           invokeRestart("muffleWarning")
[17:03:05.496]                       }
[17:03:05.496]                       else if (inherits(cond, "condition")) {
[17:03:05.496]                         if (!is.null(pattern)) {
[17:03:05.496]                           computeRestarts <- base::computeRestarts
[17:03:05.496]                           grepl <- base::grepl
[17:03:05.496]                           restarts <- computeRestarts(cond)
[17:03:05.496]                           for (restart in restarts) {
[17:03:05.496]                             name <- restart$name
[17:03:05.496]                             if (is.null(name)) 
[17:03:05.496]                               next
[17:03:05.496]                             if (!grepl(pattern, name)) 
[17:03:05.496]                               next
[17:03:05.496]                             invokeRestart(restart)
[17:03:05.496]                             muffled <- TRUE
[17:03:05.496]                             break
[17:03:05.496]                           }
[17:03:05.496]                         }
[17:03:05.496]                       }
[17:03:05.496]                       invisible(muffled)
[17:03:05.496]                     }
[17:03:05.496]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.496]                   }
[17:03:05.496]                 }
[17:03:05.496]             }
[17:03:05.496]         }))
[17:03:05.496]     }, error = function(ex) {
[17:03:05.496]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.496]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.496]                 ...future.rng), started = ...future.startTime, 
[17:03:05.496]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.496]             version = "1.8"), class = "FutureResult")
[17:03:05.496]     }, finally = {
[17:03:05.496]         if (!identical(...future.workdir, getwd())) 
[17:03:05.496]             setwd(...future.workdir)
[17:03:05.496]         {
[17:03:05.496]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.496]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.496]             }
[17:03:05.496]             base::options(...future.oldOptions)
[17:03:05.496]             if (.Platform$OS.type == "windows") {
[17:03:05.496]                 old_names <- names(...future.oldEnvVars)
[17:03:05.496]                 envs <- base::Sys.getenv()
[17:03:05.496]                 names <- names(envs)
[17:03:05.496]                 common <- intersect(names, old_names)
[17:03:05.496]                 added <- setdiff(names, old_names)
[17:03:05.496]                 removed <- setdiff(old_names, names)
[17:03:05.496]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.496]                   envs[common]]
[17:03:05.496]                 NAMES <- toupper(changed)
[17:03:05.496]                 args <- list()
[17:03:05.496]                 for (kk in seq_along(NAMES)) {
[17:03:05.496]                   name <- changed[[kk]]
[17:03:05.496]                   NAME <- NAMES[[kk]]
[17:03:05.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.496]                     next
[17:03:05.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.496]                 }
[17:03:05.496]                 NAMES <- toupper(added)
[17:03:05.496]                 for (kk in seq_along(NAMES)) {
[17:03:05.496]                   name <- added[[kk]]
[17:03:05.496]                   NAME <- NAMES[[kk]]
[17:03:05.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.496]                     next
[17:03:05.496]                   args[[name]] <- ""
[17:03:05.496]                 }
[17:03:05.496]                 NAMES <- toupper(removed)
[17:03:05.496]                 for (kk in seq_along(NAMES)) {
[17:03:05.496]                   name <- removed[[kk]]
[17:03:05.496]                   NAME <- NAMES[[kk]]
[17:03:05.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.496]                     next
[17:03:05.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.496]                 }
[17:03:05.496]                 if (length(args) > 0) 
[17:03:05.496]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.496]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.496]             }
[17:03:05.496]             else {
[17:03:05.496]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.496]             }
[17:03:05.496]             {
[17:03:05.496]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.496]                   0L) {
[17:03:05.496]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.496]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.496]                   base::options(opts)
[17:03:05.496]                 }
[17:03:05.496]                 {
[17:03:05.496]                   {
[17:03:05.496]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.496]                     NULL
[17:03:05.496]                   }
[17:03:05.496]                   options(future.plan = NULL)
[17:03:05.496]                   if (is.na(NA_character_)) 
[17:03:05.496]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.496]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.496]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.496]                     .init = FALSE)
[17:03:05.496]                 }
[17:03:05.496]             }
[17:03:05.496]         }
[17:03:05.496]     })
[17:03:05.496]     if (TRUE) {
[17:03:05.496]         base::sink(type = "output", split = FALSE)
[17:03:05.496]         if (TRUE) {
[17:03:05.496]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.496]         }
[17:03:05.496]         else {
[17:03:05.496]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.496]         }
[17:03:05.496]         base::close(...future.stdout)
[17:03:05.496]         ...future.stdout <- NULL
[17:03:05.496]     }
[17:03:05.496]     ...future.result$conditions <- ...future.conditions
[17:03:05.496]     ...future.result$finished <- base::Sys.time()
[17:03:05.496]     ...future.result
[17:03:05.496] }
[17:03:05.499] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[17:03:05.499] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[17:03:05.500] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[17:03:05.500] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[17:03:05.500] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:03:05.502] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.502] - Validating connection of MultisessionFuture
[17:03:05.502] - received message: FutureResult
[17:03:05.503] - Received FutureResult
[17:03:05.503] - Erased future from FutureRegistry
[17:03:05.503] result() for ClusterFuture ...
[17:03:05.503] - result already collected: FutureResult
[17:03:05.503] result() for ClusterFuture ... done
[17:03:05.503] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9b580f58-00cd-5bf3-e928-68b7c4c60fa9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:05.503] result() for ClusterFuture ...
[17:03:05.503] - result already collected: FutureResult
[17:03:05.503] result() for ClusterFuture ... done
[17:03:05.504] result() for ClusterFuture ...
[17:03:05.504] - result already collected: FutureResult
[17:03:05.504] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[17:03:05.504] getGlobalsAndPackages() ...
[17:03:05.504] Searching for globals...
[17:03:05.505] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:03:05.505] Searching for globals ... DONE
[17:03:05.505] Resolving globals: FALSE
[17:03:05.506] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[17:03:05.506] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[17:03:05.507] getGlobalsAndPackages() ...
[17:03:05.507] Searching for globals...
[17:03:05.508] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:03:05.508] Searching for globals ... DONE
[17:03:05.508] Resolving globals: FALSE
[17:03:05.508] The total size of the 2 globals is 112 bytes (112 bytes)
[17:03:05.509] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:03:05.509] - globals: [2] ‘a’, ‘b’
[17:03:05.509] 
[17:03:05.509] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[17:03:05.509] Packages needed by the future expression (n = 0): <none>
[17:03:05.509] Packages needed by future strategies (n = 0): <none>
[17:03:05.510] {
[17:03:05.510]     {
[17:03:05.510]         {
[17:03:05.510]             ...future.startTime <- base::Sys.time()
[17:03:05.510]             {
[17:03:05.510]                 {
[17:03:05.510]                   {
[17:03:05.510]                     base::local({
[17:03:05.510]                       has_future <- base::requireNamespace("future", 
[17:03:05.510]                         quietly = TRUE)
[17:03:05.510]                       if (has_future) {
[17:03:05.510]                         ns <- base::getNamespace("future")
[17:03:05.510]                         version <- ns[[".package"]][["version"]]
[17:03:05.510]                         if (is.null(version)) 
[17:03:05.510]                           version <- utils::packageVersion("future")
[17:03:05.510]                       }
[17:03:05.510]                       else {
[17:03:05.510]                         version <- NULL
[17:03:05.510]                       }
[17:03:05.510]                       if (!has_future || version < "1.8.0") {
[17:03:05.510]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.510]                           "", base::R.version$version.string), 
[17:03:05.510]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:05.510]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.510]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.510]                             "release", "version")], collapse = " "), 
[17:03:05.510]                           hostname = base::Sys.info()[["nodename"]])
[17:03:05.510]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.510]                           info)
[17:03:05.510]                         info <- base::paste(info, collapse = "; ")
[17:03:05.510]                         if (!has_future) {
[17:03:05.510]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.510]                             info)
[17:03:05.510]                         }
[17:03:05.510]                         else {
[17:03:05.510]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.510]                             info, version)
[17:03:05.510]                         }
[17:03:05.510]                         base::stop(msg)
[17:03:05.510]                       }
[17:03:05.510]                     })
[17:03:05.510]                   }
[17:03:05.510]                   ...future.strategy.old <- future::plan("list")
[17:03:05.510]                   options(future.plan = NULL)
[17:03:05.510]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.510]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.510]                 }
[17:03:05.510]                 ...future.workdir <- getwd()
[17:03:05.510]             }
[17:03:05.510]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.510]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.510]         }
[17:03:05.510]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.510]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.510]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.510]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.510]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.510]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.510]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.510]             base::names(...future.oldOptions))
[17:03:05.510]     }
[17:03:05.510]     if (FALSE) {
[17:03:05.510]     }
[17:03:05.510]     else {
[17:03:05.510]         if (TRUE) {
[17:03:05.510]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.510]                 open = "w")
[17:03:05.510]         }
[17:03:05.510]         else {
[17:03:05.510]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.510]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.510]         }
[17:03:05.510]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.510]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.510]             base::sink(type = "output", split = FALSE)
[17:03:05.510]             base::close(...future.stdout)
[17:03:05.510]         }, add = TRUE)
[17:03:05.510]     }
[17:03:05.510]     ...future.frame <- base::sys.nframe()
[17:03:05.510]     ...future.conditions <- base::list()
[17:03:05.510]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.510]     if (FALSE) {
[17:03:05.510]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.510]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.510]     }
[17:03:05.510]     ...future.result <- base::tryCatch({
[17:03:05.510]         base::withCallingHandlers({
[17:03:05.510]             ...future.value <- base::withVisible(base::local({
[17:03:05.510]                 a * b
[17:03:05.510]             }))
[17:03:05.510]             future::FutureResult(value = ...future.value$value, 
[17:03:05.510]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.510]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.510]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.510]                     ...future.globalenv.names))
[17:03:05.510]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.510]         }, condition = base::local({
[17:03:05.510]             c <- base::c
[17:03:05.510]             inherits <- base::inherits
[17:03:05.510]             invokeRestart <- base::invokeRestart
[17:03:05.510]             length <- base::length
[17:03:05.510]             list <- base::list
[17:03:05.510]             seq.int <- base::seq.int
[17:03:05.510]             signalCondition <- base::signalCondition
[17:03:05.510]             sys.calls <- base::sys.calls
[17:03:05.510]             `[[` <- base::`[[`
[17:03:05.510]             `+` <- base::`+`
[17:03:05.510]             `<<-` <- base::`<<-`
[17:03:05.510]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.510]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.510]                   3L)]
[17:03:05.510]             }
[17:03:05.510]             function(cond) {
[17:03:05.510]                 is_error <- inherits(cond, "error")
[17:03:05.510]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.510]                   NULL)
[17:03:05.510]                 if (is_error) {
[17:03:05.510]                   sessionInformation <- function() {
[17:03:05.510]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.510]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.510]                       search = base::search(), system = base::Sys.info())
[17:03:05.510]                   }
[17:03:05.510]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.510]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.510]                     cond$call), session = sessionInformation(), 
[17:03:05.510]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.510]                   signalCondition(cond)
[17:03:05.510]                 }
[17:03:05.510]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.510]                 "immediateCondition"))) {
[17:03:05.510]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.510]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.510]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.510]                   if (TRUE && !signal) {
[17:03:05.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.510]                     {
[17:03:05.510]                       inherits <- base::inherits
[17:03:05.510]                       invokeRestart <- base::invokeRestart
[17:03:05.510]                       is.null <- base::is.null
[17:03:05.510]                       muffled <- FALSE
[17:03:05.510]                       if (inherits(cond, "message")) {
[17:03:05.510]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.510]                         if (muffled) 
[17:03:05.510]                           invokeRestart("muffleMessage")
[17:03:05.510]                       }
[17:03:05.510]                       else if (inherits(cond, "warning")) {
[17:03:05.510]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.510]                         if (muffled) 
[17:03:05.510]                           invokeRestart("muffleWarning")
[17:03:05.510]                       }
[17:03:05.510]                       else if (inherits(cond, "condition")) {
[17:03:05.510]                         if (!is.null(pattern)) {
[17:03:05.510]                           computeRestarts <- base::computeRestarts
[17:03:05.510]                           grepl <- base::grepl
[17:03:05.510]                           restarts <- computeRestarts(cond)
[17:03:05.510]                           for (restart in restarts) {
[17:03:05.510]                             name <- restart$name
[17:03:05.510]                             if (is.null(name)) 
[17:03:05.510]                               next
[17:03:05.510]                             if (!grepl(pattern, name)) 
[17:03:05.510]                               next
[17:03:05.510]                             invokeRestart(restart)
[17:03:05.510]                             muffled <- TRUE
[17:03:05.510]                             break
[17:03:05.510]                           }
[17:03:05.510]                         }
[17:03:05.510]                       }
[17:03:05.510]                       invisible(muffled)
[17:03:05.510]                     }
[17:03:05.510]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.510]                   }
[17:03:05.510]                 }
[17:03:05.510]                 else {
[17:03:05.510]                   if (TRUE) {
[17:03:05.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.510]                     {
[17:03:05.510]                       inherits <- base::inherits
[17:03:05.510]                       invokeRestart <- base::invokeRestart
[17:03:05.510]                       is.null <- base::is.null
[17:03:05.510]                       muffled <- FALSE
[17:03:05.510]                       if (inherits(cond, "message")) {
[17:03:05.510]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.510]                         if (muffled) 
[17:03:05.510]                           invokeRestart("muffleMessage")
[17:03:05.510]                       }
[17:03:05.510]                       else if (inherits(cond, "warning")) {
[17:03:05.510]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.510]                         if (muffled) 
[17:03:05.510]                           invokeRestart("muffleWarning")
[17:03:05.510]                       }
[17:03:05.510]                       else if (inherits(cond, "condition")) {
[17:03:05.510]                         if (!is.null(pattern)) {
[17:03:05.510]                           computeRestarts <- base::computeRestarts
[17:03:05.510]                           grepl <- base::grepl
[17:03:05.510]                           restarts <- computeRestarts(cond)
[17:03:05.510]                           for (restart in restarts) {
[17:03:05.510]                             name <- restart$name
[17:03:05.510]                             if (is.null(name)) 
[17:03:05.510]                               next
[17:03:05.510]                             if (!grepl(pattern, name)) 
[17:03:05.510]                               next
[17:03:05.510]                             invokeRestart(restart)
[17:03:05.510]                             muffled <- TRUE
[17:03:05.510]                             break
[17:03:05.510]                           }
[17:03:05.510]                         }
[17:03:05.510]                       }
[17:03:05.510]                       invisible(muffled)
[17:03:05.510]                     }
[17:03:05.510]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.510]                   }
[17:03:05.510]                 }
[17:03:05.510]             }
[17:03:05.510]         }))
[17:03:05.510]     }, error = function(ex) {
[17:03:05.510]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.510]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.510]                 ...future.rng), started = ...future.startTime, 
[17:03:05.510]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.510]             version = "1.8"), class = "FutureResult")
[17:03:05.510]     }, finally = {
[17:03:05.510]         if (!identical(...future.workdir, getwd())) 
[17:03:05.510]             setwd(...future.workdir)
[17:03:05.510]         {
[17:03:05.510]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.510]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.510]             }
[17:03:05.510]             base::options(...future.oldOptions)
[17:03:05.510]             if (.Platform$OS.type == "windows") {
[17:03:05.510]                 old_names <- names(...future.oldEnvVars)
[17:03:05.510]                 envs <- base::Sys.getenv()
[17:03:05.510]                 names <- names(envs)
[17:03:05.510]                 common <- intersect(names, old_names)
[17:03:05.510]                 added <- setdiff(names, old_names)
[17:03:05.510]                 removed <- setdiff(old_names, names)
[17:03:05.510]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.510]                   envs[common]]
[17:03:05.510]                 NAMES <- toupper(changed)
[17:03:05.510]                 args <- list()
[17:03:05.510]                 for (kk in seq_along(NAMES)) {
[17:03:05.510]                   name <- changed[[kk]]
[17:03:05.510]                   NAME <- NAMES[[kk]]
[17:03:05.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.510]                     next
[17:03:05.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.510]                 }
[17:03:05.510]                 NAMES <- toupper(added)
[17:03:05.510]                 for (kk in seq_along(NAMES)) {
[17:03:05.510]                   name <- added[[kk]]
[17:03:05.510]                   NAME <- NAMES[[kk]]
[17:03:05.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.510]                     next
[17:03:05.510]                   args[[name]] <- ""
[17:03:05.510]                 }
[17:03:05.510]                 NAMES <- toupper(removed)
[17:03:05.510]                 for (kk in seq_along(NAMES)) {
[17:03:05.510]                   name <- removed[[kk]]
[17:03:05.510]                   NAME <- NAMES[[kk]]
[17:03:05.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.510]                     next
[17:03:05.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.510]                 }
[17:03:05.510]                 if (length(args) > 0) 
[17:03:05.510]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.510]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.510]             }
[17:03:05.510]             else {
[17:03:05.510]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.510]             }
[17:03:05.510]             {
[17:03:05.510]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.510]                   0L) {
[17:03:05.510]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.510]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.510]                   base::options(opts)
[17:03:05.510]                 }
[17:03:05.510]                 {
[17:03:05.510]                   {
[17:03:05.510]                     NULL
[17:03:05.510]                     RNGkind("Mersenne-Twister")
[17:03:05.510]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:05.510]                       inherits = FALSE)
[17:03:05.510]                   }
[17:03:05.510]                   options(future.plan = NULL)
[17:03:05.510]                   if (is.na(NA_character_)) 
[17:03:05.510]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.510]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.510]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.510]                     .init = FALSE)
[17:03:05.510]                 }
[17:03:05.510]             }
[17:03:05.510]         }
[17:03:05.510]     })
[17:03:05.510]     if (TRUE) {
[17:03:05.510]         base::sink(type = "output", split = FALSE)
[17:03:05.510]         if (TRUE) {
[17:03:05.510]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.510]         }
[17:03:05.510]         else {
[17:03:05.510]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.510]         }
[17:03:05.510]         base::close(...future.stdout)
[17:03:05.510]         ...future.stdout <- NULL
[17:03:05.510]     }
[17:03:05.510]     ...future.result$conditions <- ...future.conditions
[17:03:05.510]     ...future.result$finished <- base::Sys.time()
[17:03:05.510]     ...future.result
[17:03:05.510] }
[17:03:05.511] assign_globals() ...
[17:03:05.512] List of 2
[17:03:05.512]  $ a: num 2
[17:03:05.512]  $ b: num 3
[17:03:05.512]  - attr(*, "where")=List of 2
[17:03:05.512]   ..$ a:<environment: R_EmptyEnv> 
[17:03:05.512]   ..$ b:<environment: R_EmptyEnv> 
[17:03:05.512]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:05.512]  - attr(*, "resolved")= logi FALSE
[17:03:05.512]  - attr(*, "total_size")= num 112
[17:03:05.517] - copied ‘a’ to environment
[17:03:05.517] - copied ‘b’ to environment
[17:03:05.517] assign_globals() ... done
[17:03:05.517] plan(): Setting new future strategy stack:
[17:03:05.517] List of future strategies:
[17:03:05.517] 1. sequential:
[17:03:05.517]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:05.517]    - tweaked: FALSE
[17:03:05.517]    - call: NULL
[17:03:05.518] plan(): nbrOfWorkers() = 1
[17:03:05.519] plan(): Setting new future strategy stack:
[17:03:05.519] List of future strategies:
[17:03:05.519] 1. sequential:
[17:03:05.519]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:05.519]    - tweaked: FALSE
[17:03:05.519]    - call: future::plan("sequential")
[17:03:05.519] plan(): nbrOfWorkers() = 1
[17:03:05.519] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[17:03:05.520] plan(): Setting new future strategy stack:
[17:03:05.520] List of future strategies:
[17:03:05.520] 1. multisession:
[17:03:05.520]    - args: function (..., workers = 2L, envir = parent.frame())
[17:03:05.520]    - tweaked: TRUE
[17:03:05.520]    - call: plan(multisession, workers = 2L)
[17:03:05.534] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:05.534] multisession:
[17:03:05.534] - args: function (..., workers = 2L, envir = parent.frame())
[17:03:05.534] - tweaked: TRUE
[17:03:05.534] - call: plan(multisession, workers = 2L)
[17:03:05.535] getGlobalsAndPackages() ...
[17:03:05.535] Not searching for globals
[17:03:05.535] - globals: [0] <none>
[17:03:05.535] getGlobalsAndPackages() ... DONE
[17:03:05.535] [local output] makeClusterPSOCK() ...
[17:03:05.539] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:05.540] [local output] Base port: 11652
[17:03:05.540] [local output] Getting setup options for 2 cluster nodes ...
[17:03:05.540] [local output]  - Node 1 of 2 ...
[17:03:05.540] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:05.541] [local output] Rscript port: 11652

[17:03:05.541] [local output]  - Node 2 of 2 ...
[17:03:05.541] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:05.542] [local output] Rscript port: 11652

[17:03:05.542] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:05.542] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:05.543] [local output] Setting up PSOCK nodes in parallel
[17:03:05.543] List of 36
[17:03:05.543]  $ worker          : chr "localhost"
[17:03:05.543]   ..- attr(*, "localhost")= logi TRUE
[17:03:05.543]  $ master          : chr "localhost"
[17:03:05.543]  $ port            : int 11652
[17:03:05.543]  $ connectTimeout  : num 120
[17:03:05.543]  $ timeout         : num 2592000
[17:03:05.543]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:05.543]  $ homogeneous     : logi TRUE
[17:03:05.543]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:05.543]  $ rscript_envs    : NULL
[17:03:05.543]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:05.543]  $ rscript_startup : NULL
[17:03:05.543]  $ rscript_sh      : chr "sh"
[17:03:05.543]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:05.543]  $ methods         : logi TRUE
[17:03:05.543]  $ socketOptions   : chr "no-delay"
[17:03:05.543]  $ useXDR          : logi FALSE
[17:03:05.543]  $ outfile         : chr "/dev/null"
[17:03:05.543]  $ renice          : int NA
[17:03:05.543]  $ rshcmd          : NULL
[17:03:05.543]  $ user            : chr(0) 
[17:03:05.543]  $ revtunnel       : logi FALSE
[17:03:05.543]  $ rshlogfile      : NULL
[17:03:05.543]  $ rshopts         : chr(0) 
[17:03:05.543]  $ rank            : int 1
[17:03:05.543]  $ manual          : logi FALSE
[17:03:05.543]  $ dryrun          : logi FALSE
[17:03:05.543]  $ quiet           : logi FALSE
[17:03:05.543]  $ setup_strategy  : chr "parallel"
[17:03:05.543]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:05.543]  $ pidfile         : chr "/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b244150dd0b4.pid"
[17:03:05.543]  $ rshcmd_label    : NULL
[17:03:05.543]  $ rsh_call        : NULL
[17:03:05.543]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:05.543]  $ localMachine    : logi TRUE
[17:03:05.543]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:05.543]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:05.543]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:05.543]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:05.543]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:05.543]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:05.543]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:05.543]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:05.543]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:05.543]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:05.543]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:05.543]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:05.543]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:05.543]  $ arguments       :List of 28
[17:03:05.543]   ..$ worker          : chr "localhost"
[17:03:05.543]   ..$ master          : NULL
[17:03:05.543]   ..$ port            : int 11652
[17:03:05.543]   ..$ connectTimeout  : num 120
[17:03:05.543]   ..$ timeout         : num 2592000
[17:03:05.543]   ..$ rscript         : NULL
[17:03:05.543]   ..$ homogeneous     : NULL
[17:03:05.543]   ..$ rscript_args    : NULL
[17:03:05.543]   ..$ rscript_envs    : NULL
[17:03:05.543]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:05.543]   ..$ rscript_startup : NULL
[17:03:05.543]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:05.543]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:05.543]   ..$ methods         : logi TRUE
[17:03:05.543]   ..$ socketOptions   : chr "no-delay"
[17:03:05.543]   ..$ useXDR          : logi FALSE
[17:03:05.543]   ..$ outfile         : chr "/dev/null"
[17:03:05.543]   ..$ renice          : int NA
[17:03:05.543]   ..$ rshcmd          : NULL
[17:03:05.543]   ..$ user            : NULL
[17:03:05.543]   ..$ revtunnel       : logi NA
[17:03:05.543]   ..$ rshlogfile      : NULL
[17:03:05.543]   ..$ rshopts         : NULL
[17:03:05.543]   ..$ rank            : int 1
[17:03:05.543]   ..$ manual          : logi FALSE
[17:03:05.543]   ..$ dryrun          : logi FALSE
[17:03:05.543]   ..$ quiet           : logi FALSE
[17:03:05.543]   ..$ setup_strategy  : chr "parallel"
[17:03:05.543]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:05.560] [local output] System call to launch all workers:
[17:03:05.560] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b244150dd0b4.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11652 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:05.560] [local output] Starting PSOCK main server
[17:03:05.561] [local output] Workers launched
[17:03:05.562] [local output] Waiting for workers to connect back
[17:03:05.562]  - [local output] 0 workers out of 2 ready
[17:03:05.805]  - [local output] 0 workers out of 2 ready
[17:03:05.806]  - [local output] 1 workers out of 2 ready
[17:03:05.824]  - [local output] 1 workers out of 2 ready
[17:03:05.824]  - [local output] 2 workers out of 2 ready
[17:03:05.824] [local output] Launching of workers completed
[17:03:05.824] [local output] Collecting session information from workers
[17:03:05.825] [local output]  - Worker #1 of 2
[17:03:05.826] [local output]  - Worker #2 of 2
[17:03:05.826] [local output] makeClusterPSOCK() ... done
[17:03:05.837] Packages needed by the future expression (n = 0): <none>
[17:03:05.837] Packages needed by future strategies (n = 0): <none>
[17:03:05.837] {
[17:03:05.837]     {
[17:03:05.837]         {
[17:03:05.837]             ...future.startTime <- base::Sys.time()
[17:03:05.837]             {
[17:03:05.837]                 {
[17:03:05.837]                   {
[17:03:05.837]                     {
[17:03:05.837]                       base::local({
[17:03:05.837]                         has_future <- base::requireNamespace("future", 
[17:03:05.837]                           quietly = TRUE)
[17:03:05.837]                         if (has_future) {
[17:03:05.837]                           ns <- base::getNamespace("future")
[17:03:05.837]                           version <- ns[[".package"]][["version"]]
[17:03:05.837]                           if (is.null(version)) 
[17:03:05.837]                             version <- utils::packageVersion("future")
[17:03:05.837]                         }
[17:03:05.837]                         else {
[17:03:05.837]                           version <- NULL
[17:03:05.837]                         }
[17:03:05.837]                         if (!has_future || version < "1.8.0") {
[17:03:05.837]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.837]                             "", base::R.version$version.string), 
[17:03:05.837]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.837]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.837]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.837]                               "release", "version")], collapse = " "), 
[17:03:05.837]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.837]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.837]                             info)
[17:03:05.837]                           info <- base::paste(info, collapse = "; ")
[17:03:05.837]                           if (!has_future) {
[17:03:05.837]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.837]                               info)
[17:03:05.837]                           }
[17:03:05.837]                           else {
[17:03:05.837]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.837]                               info, version)
[17:03:05.837]                           }
[17:03:05.837]                           base::stop(msg)
[17:03:05.837]                         }
[17:03:05.837]                       })
[17:03:05.837]                     }
[17:03:05.837]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.837]                     base::options(mc.cores = 1L)
[17:03:05.837]                   }
[17:03:05.837]                   ...future.strategy.old <- future::plan("list")
[17:03:05.837]                   options(future.plan = NULL)
[17:03:05.837]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.837]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.837]                 }
[17:03:05.837]                 ...future.workdir <- getwd()
[17:03:05.837]             }
[17:03:05.837]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.837]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.837]         }
[17:03:05.837]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.837]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.837]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.837]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.837]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.837]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.837]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.837]             base::names(...future.oldOptions))
[17:03:05.837]     }
[17:03:05.837]     if (FALSE) {
[17:03:05.837]     }
[17:03:05.837]     else {
[17:03:05.837]         if (TRUE) {
[17:03:05.837]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.837]                 open = "w")
[17:03:05.837]         }
[17:03:05.837]         else {
[17:03:05.837]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.837]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.837]         }
[17:03:05.837]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.837]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.837]             base::sink(type = "output", split = FALSE)
[17:03:05.837]             base::close(...future.stdout)
[17:03:05.837]         }, add = TRUE)
[17:03:05.837]     }
[17:03:05.837]     ...future.frame <- base::sys.nframe()
[17:03:05.837]     ...future.conditions <- base::list()
[17:03:05.837]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.837]     if (FALSE) {
[17:03:05.837]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.837]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.837]     }
[17:03:05.837]     ...future.result <- base::tryCatch({
[17:03:05.837]         base::withCallingHandlers({
[17:03:05.837]             ...future.value <- base::withVisible(base::local({
[17:03:05.837]                 ...future.makeSendCondition <- base::local({
[17:03:05.837]                   sendCondition <- NULL
[17:03:05.837]                   function(frame = 1L) {
[17:03:05.837]                     if (is.function(sendCondition)) 
[17:03:05.837]                       return(sendCondition)
[17:03:05.837]                     ns <- getNamespace("parallel")
[17:03:05.837]                     if (exists("sendData", mode = "function", 
[17:03:05.837]                       envir = ns)) {
[17:03:05.837]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.837]                         envir = ns)
[17:03:05.837]                       envir <- sys.frame(frame)
[17:03:05.837]                       master <- NULL
[17:03:05.837]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.837]                         !identical(envir, emptyenv())) {
[17:03:05.837]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.837]                           inherits = FALSE)) {
[17:03:05.837]                           master <- get("master", mode = "list", 
[17:03:05.837]                             envir = envir, inherits = FALSE)
[17:03:05.837]                           if (inherits(master, c("SOCKnode", 
[17:03:05.837]                             "SOCK0node"))) {
[17:03:05.837]                             sendCondition <<- function(cond) {
[17:03:05.837]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.837]                                 success = TRUE)
[17:03:05.837]                               parallel_sendData(master, data)
[17:03:05.837]                             }
[17:03:05.837]                             return(sendCondition)
[17:03:05.837]                           }
[17:03:05.837]                         }
[17:03:05.837]                         frame <- frame + 1L
[17:03:05.837]                         envir <- sys.frame(frame)
[17:03:05.837]                       }
[17:03:05.837]                     }
[17:03:05.837]                     sendCondition <<- function(cond) NULL
[17:03:05.837]                   }
[17:03:05.837]                 })
[17:03:05.837]                 withCallingHandlers({
[17:03:05.837]                   NA
[17:03:05.837]                 }, immediateCondition = function(cond) {
[17:03:05.837]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.837]                   sendCondition(cond)
[17:03:05.837]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.837]                   {
[17:03:05.837]                     inherits <- base::inherits
[17:03:05.837]                     invokeRestart <- base::invokeRestart
[17:03:05.837]                     is.null <- base::is.null
[17:03:05.837]                     muffled <- FALSE
[17:03:05.837]                     if (inherits(cond, "message")) {
[17:03:05.837]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.837]                       if (muffled) 
[17:03:05.837]                         invokeRestart("muffleMessage")
[17:03:05.837]                     }
[17:03:05.837]                     else if (inherits(cond, "warning")) {
[17:03:05.837]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.837]                       if (muffled) 
[17:03:05.837]                         invokeRestart("muffleWarning")
[17:03:05.837]                     }
[17:03:05.837]                     else if (inherits(cond, "condition")) {
[17:03:05.837]                       if (!is.null(pattern)) {
[17:03:05.837]                         computeRestarts <- base::computeRestarts
[17:03:05.837]                         grepl <- base::grepl
[17:03:05.837]                         restarts <- computeRestarts(cond)
[17:03:05.837]                         for (restart in restarts) {
[17:03:05.837]                           name <- restart$name
[17:03:05.837]                           if (is.null(name)) 
[17:03:05.837]                             next
[17:03:05.837]                           if (!grepl(pattern, name)) 
[17:03:05.837]                             next
[17:03:05.837]                           invokeRestart(restart)
[17:03:05.837]                           muffled <- TRUE
[17:03:05.837]                           break
[17:03:05.837]                         }
[17:03:05.837]                       }
[17:03:05.837]                     }
[17:03:05.837]                     invisible(muffled)
[17:03:05.837]                   }
[17:03:05.837]                   muffleCondition(cond)
[17:03:05.837]                 })
[17:03:05.837]             }))
[17:03:05.837]             future::FutureResult(value = ...future.value$value, 
[17:03:05.837]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.837]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.837]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.837]                     ...future.globalenv.names))
[17:03:05.837]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.837]         }, condition = base::local({
[17:03:05.837]             c <- base::c
[17:03:05.837]             inherits <- base::inherits
[17:03:05.837]             invokeRestart <- base::invokeRestart
[17:03:05.837]             length <- base::length
[17:03:05.837]             list <- base::list
[17:03:05.837]             seq.int <- base::seq.int
[17:03:05.837]             signalCondition <- base::signalCondition
[17:03:05.837]             sys.calls <- base::sys.calls
[17:03:05.837]             `[[` <- base::`[[`
[17:03:05.837]             `+` <- base::`+`
[17:03:05.837]             `<<-` <- base::`<<-`
[17:03:05.837]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.837]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.837]                   3L)]
[17:03:05.837]             }
[17:03:05.837]             function(cond) {
[17:03:05.837]                 is_error <- inherits(cond, "error")
[17:03:05.837]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.837]                   NULL)
[17:03:05.837]                 if (is_error) {
[17:03:05.837]                   sessionInformation <- function() {
[17:03:05.837]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.837]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.837]                       search = base::search(), system = base::Sys.info())
[17:03:05.837]                   }
[17:03:05.837]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.837]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.837]                     cond$call), session = sessionInformation(), 
[17:03:05.837]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.837]                   signalCondition(cond)
[17:03:05.837]                 }
[17:03:05.837]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.837]                 "immediateCondition"))) {
[17:03:05.837]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.837]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.837]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.837]                   if (TRUE && !signal) {
[17:03:05.837]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.837]                     {
[17:03:05.837]                       inherits <- base::inherits
[17:03:05.837]                       invokeRestart <- base::invokeRestart
[17:03:05.837]                       is.null <- base::is.null
[17:03:05.837]                       muffled <- FALSE
[17:03:05.837]                       if (inherits(cond, "message")) {
[17:03:05.837]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.837]                         if (muffled) 
[17:03:05.837]                           invokeRestart("muffleMessage")
[17:03:05.837]                       }
[17:03:05.837]                       else if (inherits(cond, "warning")) {
[17:03:05.837]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.837]                         if (muffled) 
[17:03:05.837]                           invokeRestart("muffleWarning")
[17:03:05.837]                       }
[17:03:05.837]                       else if (inherits(cond, "condition")) {
[17:03:05.837]                         if (!is.null(pattern)) {
[17:03:05.837]                           computeRestarts <- base::computeRestarts
[17:03:05.837]                           grepl <- base::grepl
[17:03:05.837]                           restarts <- computeRestarts(cond)
[17:03:05.837]                           for (restart in restarts) {
[17:03:05.837]                             name <- restart$name
[17:03:05.837]                             if (is.null(name)) 
[17:03:05.837]                               next
[17:03:05.837]                             if (!grepl(pattern, name)) 
[17:03:05.837]                               next
[17:03:05.837]                             invokeRestart(restart)
[17:03:05.837]                             muffled <- TRUE
[17:03:05.837]                             break
[17:03:05.837]                           }
[17:03:05.837]                         }
[17:03:05.837]                       }
[17:03:05.837]                       invisible(muffled)
[17:03:05.837]                     }
[17:03:05.837]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.837]                   }
[17:03:05.837]                 }
[17:03:05.837]                 else {
[17:03:05.837]                   if (TRUE) {
[17:03:05.837]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.837]                     {
[17:03:05.837]                       inherits <- base::inherits
[17:03:05.837]                       invokeRestart <- base::invokeRestart
[17:03:05.837]                       is.null <- base::is.null
[17:03:05.837]                       muffled <- FALSE
[17:03:05.837]                       if (inherits(cond, "message")) {
[17:03:05.837]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.837]                         if (muffled) 
[17:03:05.837]                           invokeRestart("muffleMessage")
[17:03:05.837]                       }
[17:03:05.837]                       else if (inherits(cond, "warning")) {
[17:03:05.837]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.837]                         if (muffled) 
[17:03:05.837]                           invokeRestart("muffleWarning")
[17:03:05.837]                       }
[17:03:05.837]                       else if (inherits(cond, "condition")) {
[17:03:05.837]                         if (!is.null(pattern)) {
[17:03:05.837]                           computeRestarts <- base::computeRestarts
[17:03:05.837]                           grepl <- base::grepl
[17:03:05.837]                           restarts <- computeRestarts(cond)
[17:03:05.837]                           for (restart in restarts) {
[17:03:05.837]                             name <- restart$name
[17:03:05.837]                             if (is.null(name)) 
[17:03:05.837]                               next
[17:03:05.837]                             if (!grepl(pattern, name)) 
[17:03:05.837]                               next
[17:03:05.837]                             invokeRestart(restart)
[17:03:05.837]                             muffled <- TRUE
[17:03:05.837]                             break
[17:03:05.837]                           }
[17:03:05.837]                         }
[17:03:05.837]                       }
[17:03:05.837]                       invisible(muffled)
[17:03:05.837]                     }
[17:03:05.837]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.837]                   }
[17:03:05.837]                 }
[17:03:05.837]             }
[17:03:05.837]         }))
[17:03:05.837]     }, error = function(ex) {
[17:03:05.837]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.837]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.837]                 ...future.rng), started = ...future.startTime, 
[17:03:05.837]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.837]             version = "1.8"), class = "FutureResult")
[17:03:05.837]     }, finally = {
[17:03:05.837]         if (!identical(...future.workdir, getwd())) 
[17:03:05.837]             setwd(...future.workdir)
[17:03:05.837]         {
[17:03:05.837]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.837]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.837]             }
[17:03:05.837]             base::options(...future.oldOptions)
[17:03:05.837]             if (.Platform$OS.type == "windows") {
[17:03:05.837]                 old_names <- names(...future.oldEnvVars)
[17:03:05.837]                 envs <- base::Sys.getenv()
[17:03:05.837]                 names <- names(envs)
[17:03:05.837]                 common <- intersect(names, old_names)
[17:03:05.837]                 added <- setdiff(names, old_names)
[17:03:05.837]                 removed <- setdiff(old_names, names)
[17:03:05.837]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.837]                   envs[common]]
[17:03:05.837]                 NAMES <- toupper(changed)
[17:03:05.837]                 args <- list()
[17:03:05.837]                 for (kk in seq_along(NAMES)) {
[17:03:05.837]                   name <- changed[[kk]]
[17:03:05.837]                   NAME <- NAMES[[kk]]
[17:03:05.837]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.837]                     next
[17:03:05.837]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.837]                 }
[17:03:05.837]                 NAMES <- toupper(added)
[17:03:05.837]                 for (kk in seq_along(NAMES)) {
[17:03:05.837]                   name <- added[[kk]]
[17:03:05.837]                   NAME <- NAMES[[kk]]
[17:03:05.837]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.837]                     next
[17:03:05.837]                   args[[name]] <- ""
[17:03:05.837]                 }
[17:03:05.837]                 NAMES <- toupper(removed)
[17:03:05.837]                 for (kk in seq_along(NAMES)) {
[17:03:05.837]                   name <- removed[[kk]]
[17:03:05.837]                   NAME <- NAMES[[kk]]
[17:03:05.837]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.837]                     next
[17:03:05.837]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.837]                 }
[17:03:05.837]                 if (length(args) > 0) 
[17:03:05.837]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.837]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.837]             }
[17:03:05.837]             else {
[17:03:05.837]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.837]             }
[17:03:05.837]             {
[17:03:05.837]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.837]                   0L) {
[17:03:05.837]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.837]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.837]                   base::options(opts)
[17:03:05.837]                 }
[17:03:05.837]                 {
[17:03:05.837]                   {
[17:03:05.837]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.837]                     NULL
[17:03:05.837]                   }
[17:03:05.837]                   options(future.plan = NULL)
[17:03:05.837]                   if (is.na(NA_character_)) 
[17:03:05.837]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.837]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.837]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.837]                     .init = FALSE)
[17:03:05.837]                 }
[17:03:05.837]             }
[17:03:05.837]         }
[17:03:05.837]     })
[17:03:05.837]     if (TRUE) {
[17:03:05.837]         base::sink(type = "output", split = FALSE)
[17:03:05.837]         if (TRUE) {
[17:03:05.837]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.837]         }
[17:03:05.837]         else {
[17:03:05.837]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.837]         }
[17:03:05.837]         base::close(...future.stdout)
[17:03:05.837]         ...future.stdout <- NULL
[17:03:05.837]     }
[17:03:05.837]     ...future.result$conditions <- ...future.conditions
[17:03:05.837]     ...future.result$finished <- base::Sys.time()
[17:03:05.837]     ...future.result
[17:03:05.837] }
[17:03:05.890] MultisessionFuture started
[17:03:05.890] result() for ClusterFuture ...
[17:03:05.891] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.891] - Validating connection of MultisessionFuture
[17:03:05.923] - received message: FutureResult
[17:03:05.924] - Received FutureResult
[17:03:05.924] - Erased future from FutureRegistry
[17:03:05.924] result() for ClusterFuture ...
[17:03:05.924] - result already collected: FutureResult
[17:03:05.924] result() for ClusterFuture ... done
[17:03:05.924] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:05.924] result() for ClusterFuture ... done
[17:03:05.924] result() for ClusterFuture ...
[17:03:05.925] - result already collected: FutureResult
[17:03:05.925] result() for ClusterFuture ... done
[17:03:05.925] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:05.925] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[17:03:05.925] getGlobalsAndPackages() ...
[17:03:05.925] Searching for globals...
[17:03:05.926] - globals found: [2] ‘{’, ‘gc’
[17:03:05.926] Searching for globals ... DONE
[17:03:05.926] Resolving globals: FALSE
[17:03:05.927] 
[17:03:05.927] 
[17:03:05.927] getGlobalsAndPackages() ... DONE
[17:03:05.927] run() for ‘Future’ ...
[17:03:05.927] - state: ‘created’
[17:03:05.927] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:05.938] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:05.938] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:05.938]   - Field: ‘node’
[17:03:05.938]   - Field: ‘label’
[17:03:05.938]   - Field: ‘local’
[17:03:05.938]   - Field: ‘owner’
[17:03:05.938]   - Field: ‘envir’
[17:03:05.938]   - Field: ‘workers’
[17:03:05.938]   - Field: ‘packages’
[17:03:05.939]   - Field: ‘gc’
[17:03:05.939]   - Field: ‘conditions’
[17:03:05.939]   - Field: ‘persistent’
[17:03:05.939]   - Field: ‘expr’
[17:03:05.939]   - Field: ‘uuid’
[17:03:05.939]   - Field: ‘seed’
[17:03:05.939]   - Field: ‘version’
[17:03:05.939]   - Field: ‘result’
[17:03:05.939]   - Field: ‘asynchronous’
[17:03:05.939]   - Field: ‘calls’
[17:03:05.939]   - Field: ‘globals’
[17:03:05.939]   - Field: ‘stdout’
[17:03:05.940]   - Field: ‘earlySignal’
[17:03:05.940]   - Field: ‘lazy’
[17:03:05.940]   - Field: ‘state’
[17:03:05.940] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:05.940] - Launch lazy future ...
[17:03:05.940] Packages needed by the future expression (n = 0): <none>
[17:03:05.940] Packages needed by future strategies (n = 0): <none>
[17:03:05.941] {
[17:03:05.941]     {
[17:03:05.941]         {
[17:03:05.941]             ...future.startTime <- base::Sys.time()
[17:03:05.941]             {
[17:03:05.941]                 {
[17:03:05.941]                   {
[17:03:05.941]                     {
[17:03:05.941]                       base::local({
[17:03:05.941]                         has_future <- base::requireNamespace("future", 
[17:03:05.941]                           quietly = TRUE)
[17:03:05.941]                         if (has_future) {
[17:03:05.941]                           ns <- base::getNamespace("future")
[17:03:05.941]                           version <- ns[[".package"]][["version"]]
[17:03:05.941]                           if (is.null(version)) 
[17:03:05.941]                             version <- utils::packageVersion("future")
[17:03:05.941]                         }
[17:03:05.941]                         else {
[17:03:05.941]                           version <- NULL
[17:03:05.941]                         }
[17:03:05.941]                         if (!has_future || version < "1.8.0") {
[17:03:05.941]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.941]                             "", base::R.version$version.string), 
[17:03:05.941]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.941]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.941]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.941]                               "release", "version")], collapse = " "), 
[17:03:05.941]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.941]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.941]                             info)
[17:03:05.941]                           info <- base::paste(info, collapse = "; ")
[17:03:05.941]                           if (!has_future) {
[17:03:05.941]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.941]                               info)
[17:03:05.941]                           }
[17:03:05.941]                           else {
[17:03:05.941]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.941]                               info, version)
[17:03:05.941]                           }
[17:03:05.941]                           base::stop(msg)
[17:03:05.941]                         }
[17:03:05.941]                       })
[17:03:05.941]                     }
[17:03:05.941]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.941]                     base::options(mc.cores = 1L)
[17:03:05.941]                   }
[17:03:05.941]                   ...future.strategy.old <- future::plan("list")
[17:03:05.941]                   options(future.plan = NULL)
[17:03:05.941]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.941]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.941]                 }
[17:03:05.941]                 ...future.workdir <- getwd()
[17:03:05.941]             }
[17:03:05.941]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.941]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.941]         }
[17:03:05.941]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.941]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.941]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.941]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.941]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.941]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.941]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.941]             base::names(...future.oldOptions))
[17:03:05.941]     }
[17:03:05.941]     if (FALSE) {
[17:03:05.941]     }
[17:03:05.941]     else {
[17:03:05.941]         if (TRUE) {
[17:03:05.941]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.941]                 open = "w")
[17:03:05.941]         }
[17:03:05.941]         else {
[17:03:05.941]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.941]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.941]         }
[17:03:05.941]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.941]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.941]             base::sink(type = "output", split = FALSE)
[17:03:05.941]             base::close(...future.stdout)
[17:03:05.941]         }, add = TRUE)
[17:03:05.941]     }
[17:03:05.941]     ...future.frame <- base::sys.nframe()
[17:03:05.941]     ...future.conditions <- base::list()
[17:03:05.941]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.941]     if (FALSE) {
[17:03:05.941]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.941]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.941]     }
[17:03:05.941]     ...future.result <- base::tryCatch({
[17:03:05.941]         base::withCallingHandlers({
[17:03:05.941]             ...future.value <- base::withVisible(base::local({
[17:03:05.941]                 ...future.makeSendCondition <- base::local({
[17:03:05.941]                   sendCondition <- NULL
[17:03:05.941]                   function(frame = 1L) {
[17:03:05.941]                     if (is.function(sendCondition)) 
[17:03:05.941]                       return(sendCondition)
[17:03:05.941]                     ns <- getNamespace("parallel")
[17:03:05.941]                     if (exists("sendData", mode = "function", 
[17:03:05.941]                       envir = ns)) {
[17:03:05.941]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.941]                         envir = ns)
[17:03:05.941]                       envir <- sys.frame(frame)
[17:03:05.941]                       master <- NULL
[17:03:05.941]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.941]                         !identical(envir, emptyenv())) {
[17:03:05.941]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.941]                           inherits = FALSE)) {
[17:03:05.941]                           master <- get("master", mode = "list", 
[17:03:05.941]                             envir = envir, inherits = FALSE)
[17:03:05.941]                           if (inherits(master, c("SOCKnode", 
[17:03:05.941]                             "SOCK0node"))) {
[17:03:05.941]                             sendCondition <<- function(cond) {
[17:03:05.941]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.941]                                 success = TRUE)
[17:03:05.941]                               parallel_sendData(master, data)
[17:03:05.941]                             }
[17:03:05.941]                             return(sendCondition)
[17:03:05.941]                           }
[17:03:05.941]                         }
[17:03:05.941]                         frame <- frame + 1L
[17:03:05.941]                         envir <- sys.frame(frame)
[17:03:05.941]                       }
[17:03:05.941]                     }
[17:03:05.941]                     sendCondition <<- function(cond) NULL
[17:03:05.941]                   }
[17:03:05.941]                 })
[17:03:05.941]                 withCallingHandlers({
[17:03:05.941]                   {
[17:03:05.941]                     gc()
[17:03:05.941]                   }
[17:03:05.941]                 }, immediateCondition = function(cond) {
[17:03:05.941]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.941]                   sendCondition(cond)
[17:03:05.941]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.941]                   {
[17:03:05.941]                     inherits <- base::inherits
[17:03:05.941]                     invokeRestart <- base::invokeRestart
[17:03:05.941]                     is.null <- base::is.null
[17:03:05.941]                     muffled <- FALSE
[17:03:05.941]                     if (inherits(cond, "message")) {
[17:03:05.941]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.941]                       if (muffled) 
[17:03:05.941]                         invokeRestart("muffleMessage")
[17:03:05.941]                     }
[17:03:05.941]                     else if (inherits(cond, "warning")) {
[17:03:05.941]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.941]                       if (muffled) 
[17:03:05.941]                         invokeRestart("muffleWarning")
[17:03:05.941]                     }
[17:03:05.941]                     else if (inherits(cond, "condition")) {
[17:03:05.941]                       if (!is.null(pattern)) {
[17:03:05.941]                         computeRestarts <- base::computeRestarts
[17:03:05.941]                         grepl <- base::grepl
[17:03:05.941]                         restarts <- computeRestarts(cond)
[17:03:05.941]                         for (restart in restarts) {
[17:03:05.941]                           name <- restart$name
[17:03:05.941]                           if (is.null(name)) 
[17:03:05.941]                             next
[17:03:05.941]                           if (!grepl(pattern, name)) 
[17:03:05.941]                             next
[17:03:05.941]                           invokeRestart(restart)
[17:03:05.941]                           muffled <- TRUE
[17:03:05.941]                           break
[17:03:05.941]                         }
[17:03:05.941]                       }
[17:03:05.941]                     }
[17:03:05.941]                     invisible(muffled)
[17:03:05.941]                   }
[17:03:05.941]                   muffleCondition(cond)
[17:03:05.941]                 })
[17:03:05.941]             }))
[17:03:05.941]             future::FutureResult(value = ...future.value$value, 
[17:03:05.941]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.941]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.941]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.941]                     ...future.globalenv.names))
[17:03:05.941]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.941]         }, condition = base::local({
[17:03:05.941]             c <- base::c
[17:03:05.941]             inherits <- base::inherits
[17:03:05.941]             invokeRestart <- base::invokeRestart
[17:03:05.941]             length <- base::length
[17:03:05.941]             list <- base::list
[17:03:05.941]             seq.int <- base::seq.int
[17:03:05.941]             signalCondition <- base::signalCondition
[17:03:05.941]             sys.calls <- base::sys.calls
[17:03:05.941]             `[[` <- base::`[[`
[17:03:05.941]             `+` <- base::`+`
[17:03:05.941]             `<<-` <- base::`<<-`
[17:03:05.941]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.941]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.941]                   3L)]
[17:03:05.941]             }
[17:03:05.941]             function(cond) {
[17:03:05.941]                 is_error <- inherits(cond, "error")
[17:03:05.941]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.941]                   NULL)
[17:03:05.941]                 if (is_error) {
[17:03:05.941]                   sessionInformation <- function() {
[17:03:05.941]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.941]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.941]                       search = base::search(), system = base::Sys.info())
[17:03:05.941]                   }
[17:03:05.941]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.941]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.941]                     cond$call), session = sessionInformation(), 
[17:03:05.941]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.941]                   signalCondition(cond)
[17:03:05.941]                 }
[17:03:05.941]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.941]                 "immediateCondition"))) {
[17:03:05.941]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.941]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.941]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.941]                   if (TRUE && !signal) {
[17:03:05.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.941]                     {
[17:03:05.941]                       inherits <- base::inherits
[17:03:05.941]                       invokeRestart <- base::invokeRestart
[17:03:05.941]                       is.null <- base::is.null
[17:03:05.941]                       muffled <- FALSE
[17:03:05.941]                       if (inherits(cond, "message")) {
[17:03:05.941]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.941]                         if (muffled) 
[17:03:05.941]                           invokeRestart("muffleMessage")
[17:03:05.941]                       }
[17:03:05.941]                       else if (inherits(cond, "warning")) {
[17:03:05.941]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.941]                         if (muffled) 
[17:03:05.941]                           invokeRestart("muffleWarning")
[17:03:05.941]                       }
[17:03:05.941]                       else if (inherits(cond, "condition")) {
[17:03:05.941]                         if (!is.null(pattern)) {
[17:03:05.941]                           computeRestarts <- base::computeRestarts
[17:03:05.941]                           grepl <- base::grepl
[17:03:05.941]                           restarts <- computeRestarts(cond)
[17:03:05.941]                           for (restart in restarts) {
[17:03:05.941]                             name <- restart$name
[17:03:05.941]                             if (is.null(name)) 
[17:03:05.941]                               next
[17:03:05.941]                             if (!grepl(pattern, name)) 
[17:03:05.941]                               next
[17:03:05.941]                             invokeRestart(restart)
[17:03:05.941]                             muffled <- TRUE
[17:03:05.941]                             break
[17:03:05.941]                           }
[17:03:05.941]                         }
[17:03:05.941]                       }
[17:03:05.941]                       invisible(muffled)
[17:03:05.941]                     }
[17:03:05.941]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.941]                   }
[17:03:05.941]                 }
[17:03:05.941]                 else {
[17:03:05.941]                   if (TRUE) {
[17:03:05.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.941]                     {
[17:03:05.941]                       inherits <- base::inherits
[17:03:05.941]                       invokeRestart <- base::invokeRestart
[17:03:05.941]                       is.null <- base::is.null
[17:03:05.941]                       muffled <- FALSE
[17:03:05.941]                       if (inherits(cond, "message")) {
[17:03:05.941]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.941]                         if (muffled) 
[17:03:05.941]                           invokeRestart("muffleMessage")
[17:03:05.941]                       }
[17:03:05.941]                       else if (inherits(cond, "warning")) {
[17:03:05.941]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.941]                         if (muffled) 
[17:03:05.941]                           invokeRestart("muffleWarning")
[17:03:05.941]                       }
[17:03:05.941]                       else if (inherits(cond, "condition")) {
[17:03:05.941]                         if (!is.null(pattern)) {
[17:03:05.941]                           computeRestarts <- base::computeRestarts
[17:03:05.941]                           grepl <- base::grepl
[17:03:05.941]                           restarts <- computeRestarts(cond)
[17:03:05.941]                           for (restart in restarts) {
[17:03:05.941]                             name <- restart$name
[17:03:05.941]                             if (is.null(name)) 
[17:03:05.941]                               next
[17:03:05.941]                             if (!grepl(pattern, name)) 
[17:03:05.941]                               next
[17:03:05.941]                             invokeRestart(restart)
[17:03:05.941]                             muffled <- TRUE
[17:03:05.941]                             break
[17:03:05.941]                           }
[17:03:05.941]                         }
[17:03:05.941]                       }
[17:03:05.941]                       invisible(muffled)
[17:03:05.941]                     }
[17:03:05.941]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.941]                   }
[17:03:05.941]                 }
[17:03:05.941]             }
[17:03:05.941]         }))
[17:03:05.941]     }, error = function(ex) {
[17:03:05.941]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.941]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.941]                 ...future.rng), started = ...future.startTime, 
[17:03:05.941]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.941]             version = "1.8"), class = "FutureResult")
[17:03:05.941]     }, finally = {
[17:03:05.941]         if (!identical(...future.workdir, getwd())) 
[17:03:05.941]             setwd(...future.workdir)
[17:03:05.941]         {
[17:03:05.941]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.941]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.941]             }
[17:03:05.941]             base::options(...future.oldOptions)
[17:03:05.941]             if (.Platform$OS.type == "windows") {
[17:03:05.941]                 old_names <- names(...future.oldEnvVars)
[17:03:05.941]                 envs <- base::Sys.getenv()
[17:03:05.941]                 names <- names(envs)
[17:03:05.941]                 common <- intersect(names, old_names)
[17:03:05.941]                 added <- setdiff(names, old_names)
[17:03:05.941]                 removed <- setdiff(old_names, names)
[17:03:05.941]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.941]                   envs[common]]
[17:03:05.941]                 NAMES <- toupper(changed)
[17:03:05.941]                 args <- list()
[17:03:05.941]                 for (kk in seq_along(NAMES)) {
[17:03:05.941]                   name <- changed[[kk]]
[17:03:05.941]                   NAME <- NAMES[[kk]]
[17:03:05.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.941]                     next
[17:03:05.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.941]                 }
[17:03:05.941]                 NAMES <- toupper(added)
[17:03:05.941]                 for (kk in seq_along(NAMES)) {
[17:03:05.941]                   name <- added[[kk]]
[17:03:05.941]                   NAME <- NAMES[[kk]]
[17:03:05.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.941]                     next
[17:03:05.941]                   args[[name]] <- ""
[17:03:05.941]                 }
[17:03:05.941]                 NAMES <- toupper(removed)
[17:03:05.941]                 for (kk in seq_along(NAMES)) {
[17:03:05.941]                   name <- removed[[kk]]
[17:03:05.941]                   NAME <- NAMES[[kk]]
[17:03:05.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.941]                     next
[17:03:05.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.941]                 }
[17:03:05.941]                 if (length(args) > 0) 
[17:03:05.941]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.941]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.941]             }
[17:03:05.941]             else {
[17:03:05.941]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.941]             }
[17:03:05.941]             {
[17:03:05.941]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.941]                   0L) {
[17:03:05.941]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.941]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.941]                   base::options(opts)
[17:03:05.941]                 }
[17:03:05.941]                 {
[17:03:05.941]                   {
[17:03:05.941]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.941]                     NULL
[17:03:05.941]                   }
[17:03:05.941]                   options(future.plan = NULL)
[17:03:05.941]                   if (is.na(NA_character_)) 
[17:03:05.941]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.941]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.941]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.941]                     .init = FALSE)
[17:03:05.941]                 }
[17:03:05.941]             }
[17:03:05.941]         }
[17:03:05.941]     })
[17:03:05.941]     if (TRUE) {
[17:03:05.941]         base::sink(type = "output", split = FALSE)
[17:03:05.941]         if (TRUE) {
[17:03:05.941]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.941]         }
[17:03:05.941]         else {
[17:03:05.941]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.941]         }
[17:03:05.941]         base::close(...future.stdout)
[17:03:05.941]         ...future.stdout <- NULL
[17:03:05.941]     }
[17:03:05.941]     ...future.result$conditions <- ...future.conditions
[17:03:05.941]     ...future.result$finished <- base::Sys.time()
[17:03:05.941]     ...future.result
[17:03:05.941] }
[17:03:05.944] MultisessionFuture started
[17:03:05.944] - Launch lazy future ... done
[17:03:05.944] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:03:05.944] result() for ClusterFuture ...
[17:03:05.944] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.944] - Validating connection of MultisessionFuture
[17:03:05.973] - received message: FutureResult
[17:03:05.973] - Received FutureResult
[17:03:05.973] - Erased future from FutureRegistry
[17:03:05.973] result() for ClusterFuture ...
[17:03:05.973] - result already collected: FutureResult
[17:03:05.973] result() for ClusterFuture ... done
[17:03:05.973] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:05.973] result() for ClusterFuture ... done
[17:03:05.973] result() for ClusterFuture ...
[17:03:05.974] - result already collected: FutureResult
[17:03:05.974] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 407014 21.8     692222   37   692222 37.0
Vcells 729668  5.6    8388608   64  1923668 14.7
> 
> f <- future({ integer(10e6) })
[17:03:05.974] getGlobalsAndPackages() ...
[17:03:05.974] Searching for globals...
[17:03:05.975] - globals found: [2] ‘{’, ‘integer’
[17:03:05.975] Searching for globals ... DONE
[17:03:05.975] Resolving globals: FALSE
[17:03:05.975] 
[17:03:05.975] 
[17:03:05.976] getGlobalsAndPackages() ... DONE
[17:03:05.976] run() for ‘Future’ ...
[17:03:05.976] - state: ‘created’
[17:03:05.976] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:05.986] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:05.987] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:05.987]   - Field: ‘node’
[17:03:05.987]   - Field: ‘label’
[17:03:05.987]   - Field: ‘local’
[17:03:05.987]   - Field: ‘owner’
[17:03:05.987]   - Field: ‘envir’
[17:03:05.987]   - Field: ‘workers’
[17:03:05.987]   - Field: ‘packages’
[17:03:05.987]   - Field: ‘gc’
[17:03:05.987]   - Field: ‘conditions’
[17:03:05.987]   - Field: ‘persistent’
[17:03:05.988]   - Field: ‘expr’
[17:03:05.988]   - Field: ‘uuid’
[17:03:05.988]   - Field: ‘seed’
[17:03:05.988]   - Field: ‘version’
[17:03:05.988]   - Field: ‘result’
[17:03:05.988]   - Field: ‘asynchronous’
[17:03:05.988]   - Field: ‘calls’
[17:03:05.988]   - Field: ‘globals’
[17:03:05.988]   - Field: ‘stdout’
[17:03:05.988]   - Field: ‘earlySignal’
[17:03:05.988]   - Field: ‘lazy’
[17:03:05.989]   - Field: ‘state’
[17:03:05.989] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:05.989] - Launch lazy future ...
[17:03:05.989] Packages needed by the future expression (n = 0): <none>
[17:03:05.989] Packages needed by future strategies (n = 0): <none>
[17:03:05.992] {
[17:03:05.992]     {
[17:03:05.992]         {
[17:03:05.992]             ...future.startTime <- base::Sys.time()
[17:03:05.992]             {
[17:03:05.992]                 {
[17:03:05.992]                   {
[17:03:05.992]                     {
[17:03:05.992]                       base::local({
[17:03:05.992]                         has_future <- base::requireNamespace("future", 
[17:03:05.992]                           quietly = TRUE)
[17:03:05.992]                         if (has_future) {
[17:03:05.992]                           ns <- base::getNamespace("future")
[17:03:05.992]                           version <- ns[[".package"]][["version"]]
[17:03:05.992]                           if (is.null(version)) 
[17:03:05.992]                             version <- utils::packageVersion("future")
[17:03:05.992]                         }
[17:03:05.992]                         else {
[17:03:05.992]                           version <- NULL
[17:03:05.992]                         }
[17:03:05.992]                         if (!has_future || version < "1.8.0") {
[17:03:05.992]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:05.992]                             "", base::R.version$version.string), 
[17:03:05.992]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:05.992]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:05.992]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:05.992]                               "release", "version")], collapse = " "), 
[17:03:05.992]                             hostname = base::Sys.info()[["nodename"]])
[17:03:05.992]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:05.992]                             info)
[17:03:05.992]                           info <- base::paste(info, collapse = "; ")
[17:03:05.992]                           if (!has_future) {
[17:03:05.992]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:05.992]                               info)
[17:03:05.992]                           }
[17:03:05.992]                           else {
[17:03:05.992]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:05.992]                               info, version)
[17:03:05.992]                           }
[17:03:05.992]                           base::stop(msg)
[17:03:05.992]                         }
[17:03:05.992]                       })
[17:03:05.992]                     }
[17:03:05.992]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:05.992]                     base::options(mc.cores = 1L)
[17:03:05.992]                   }
[17:03:05.992]                   ...future.strategy.old <- future::plan("list")
[17:03:05.992]                   options(future.plan = NULL)
[17:03:05.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:05.992]                 }
[17:03:05.992]                 ...future.workdir <- getwd()
[17:03:05.992]             }
[17:03:05.992]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:05.992]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:05.992]         }
[17:03:05.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:05.992]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:05.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:05.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:05.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:05.992]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:05.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:05.992]             base::names(...future.oldOptions))
[17:03:05.992]     }
[17:03:05.992]     if (FALSE) {
[17:03:05.992]     }
[17:03:05.992]     else {
[17:03:05.992]         if (TRUE) {
[17:03:05.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:05.992]                 open = "w")
[17:03:05.992]         }
[17:03:05.992]         else {
[17:03:05.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:05.992]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:05.992]         }
[17:03:05.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:05.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:05.992]             base::sink(type = "output", split = FALSE)
[17:03:05.992]             base::close(...future.stdout)
[17:03:05.992]         }, add = TRUE)
[17:03:05.992]     }
[17:03:05.992]     ...future.frame <- base::sys.nframe()
[17:03:05.992]     ...future.conditions <- base::list()
[17:03:05.992]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:05.992]     if (FALSE) {
[17:03:05.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:05.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:05.992]     }
[17:03:05.992]     ...future.result <- base::tryCatch({
[17:03:05.992]         base::withCallingHandlers({
[17:03:05.992]             ...future.value <- base::withVisible(base::local({
[17:03:05.992]                 ...future.makeSendCondition <- base::local({
[17:03:05.992]                   sendCondition <- NULL
[17:03:05.992]                   function(frame = 1L) {
[17:03:05.992]                     if (is.function(sendCondition)) 
[17:03:05.992]                       return(sendCondition)
[17:03:05.992]                     ns <- getNamespace("parallel")
[17:03:05.992]                     if (exists("sendData", mode = "function", 
[17:03:05.992]                       envir = ns)) {
[17:03:05.992]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:05.992]                         envir = ns)
[17:03:05.992]                       envir <- sys.frame(frame)
[17:03:05.992]                       master <- NULL
[17:03:05.992]                       while (!identical(envir, .GlobalEnv) && 
[17:03:05.992]                         !identical(envir, emptyenv())) {
[17:03:05.992]                         if (exists("master", mode = "list", envir = envir, 
[17:03:05.992]                           inherits = FALSE)) {
[17:03:05.992]                           master <- get("master", mode = "list", 
[17:03:05.992]                             envir = envir, inherits = FALSE)
[17:03:05.992]                           if (inherits(master, c("SOCKnode", 
[17:03:05.992]                             "SOCK0node"))) {
[17:03:05.992]                             sendCondition <<- function(cond) {
[17:03:05.992]                               data <- list(type = "VALUE", value = cond, 
[17:03:05.992]                                 success = TRUE)
[17:03:05.992]                               parallel_sendData(master, data)
[17:03:05.992]                             }
[17:03:05.992]                             return(sendCondition)
[17:03:05.992]                           }
[17:03:05.992]                         }
[17:03:05.992]                         frame <- frame + 1L
[17:03:05.992]                         envir <- sys.frame(frame)
[17:03:05.992]                       }
[17:03:05.992]                     }
[17:03:05.992]                     sendCondition <<- function(cond) NULL
[17:03:05.992]                   }
[17:03:05.992]                 })
[17:03:05.992]                 withCallingHandlers({
[17:03:05.992]                   {
[17:03:05.992]                     integer(1e+07)
[17:03:05.992]                   }
[17:03:05.992]                 }, immediateCondition = function(cond) {
[17:03:05.992]                   sendCondition <- ...future.makeSendCondition()
[17:03:05.992]                   sendCondition(cond)
[17:03:05.992]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.992]                   {
[17:03:05.992]                     inherits <- base::inherits
[17:03:05.992]                     invokeRestart <- base::invokeRestart
[17:03:05.992]                     is.null <- base::is.null
[17:03:05.992]                     muffled <- FALSE
[17:03:05.992]                     if (inherits(cond, "message")) {
[17:03:05.992]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:05.992]                       if (muffled) 
[17:03:05.992]                         invokeRestart("muffleMessage")
[17:03:05.992]                     }
[17:03:05.992]                     else if (inherits(cond, "warning")) {
[17:03:05.992]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:05.992]                       if (muffled) 
[17:03:05.992]                         invokeRestart("muffleWarning")
[17:03:05.992]                     }
[17:03:05.992]                     else if (inherits(cond, "condition")) {
[17:03:05.992]                       if (!is.null(pattern)) {
[17:03:05.992]                         computeRestarts <- base::computeRestarts
[17:03:05.992]                         grepl <- base::grepl
[17:03:05.992]                         restarts <- computeRestarts(cond)
[17:03:05.992]                         for (restart in restarts) {
[17:03:05.992]                           name <- restart$name
[17:03:05.992]                           if (is.null(name)) 
[17:03:05.992]                             next
[17:03:05.992]                           if (!grepl(pattern, name)) 
[17:03:05.992]                             next
[17:03:05.992]                           invokeRestart(restart)
[17:03:05.992]                           muffled <- TRUE
[17:03:05.992]                           break
[17:03:05.992]                         }
[17:03:05.992]                       }
[17:03:05.992]                     }
[17:03:05.992]                     invisible(muffled)
[17:03:05.992]                   }
[17:03:05.992]                   muffleCondition(cond)
[17:03:05.992]                 })
[17:03:05.992]             }))
[17:03:05.992]             future::FutureResult(value = ...future.value$value, 
[17:03:05.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.992]                   ...future.rng), globalenv = if (FALSE) 
[17:03:05.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:05.992]                     ...future.globalenv.names))
[17:03:05.992]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:05.992]         }, condition = base::local({
[17:03:05.992]             c <- base::c
[17:03:05.992]             inherits <- base::inherits
[17:03:05.992]             invokeRestart <- base::invokeRestart
[17:03:05.992]             length <- base::length
[17:03:05.992]             list <- base::list
[17:03:05.992]             seq.int <- base::seq.int
[17:03:05.992]             signalCondition <- base::signalCondition
[17:03:05.992]             sys.calls <- base::sys.calls
[17:03:05.992]             `[[` <- base::`[[`
[17:03:05.992]             `+` <- base::`+`
[17:03:05.992]             `<<-` <- base::`<<-`
[17:03:05.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:05.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:05.992]                   3L)]
[17:03:05.992]             }
[17:03:05.992]             function(cond) {
[17:03:05.992]                 is_error <- inherits(cond, "error")
[17:03:05.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:05.992]                   NULL)
[17:03:05.992]                 if (is_error) {
[17:03:05.992]                   sessionInformation <- function() {
[17:03:05.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:05.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:05.992]                       search = base::search(), system = base::Sys.info())
[17:03:05.992]                   }
[17:03:05.992]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:05.992]                     cond$call), session = sessionInformation(), 
[17:03:05.992]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:05.992]                   signalCondition(cond)
[17:03:05.992]                 }
[17:03:05.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:05.992]                 "immediateCondition"))) {
[17:03:05.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:05.992]                   ...future.conditions[[length(...future.conditions) + 
[17:03:05.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:05.992]                   if (TRUE && !signal) {
[17:03:05.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.992]                     {
[17:03:05.992]                       inherits <- base::inherits
[17:03:05.992]                       invokeRestart <- base::invokeRestart
[17:03:05.992]                       is.null <- base::is.null
[17:03:05.992]                       muffled <- FALSE
[17:03:05.992]                       if (inherits(cond, "message")) {
[17:03:05.992]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.992]                         if (muffled) 
[17:03:05.992]                           invokeRestart("muffleMessage")
[17:03:05.992]                       }
[17:03:05.992]                       else if (inherits(cond, "warning")) {
[17:03:05.992]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.992]                         if (muffled) 
[17:03:05.992]                           invokeRestart("muffleWarning")
[17:03:05.992]                       }
[17:03:05.992]                       else if (inherits(cond, "condition")) {
[17:03:05.992]                         if (!is.null(pattern)) {
[17:03:05.992]                           computeRestarts <- base::computeRestarts
[17:03:05.992]                           grepl <- base::grepl
[17:03:05.992]                           restarts <- computeRestarts(cond)
[17:03:05.992]                           for (restart in restarts) {
[17:03:05.992]                             name <- restart$name
[17:03:05.992]                             if (is.null(name)) 
[17:03:05.992]                               next
[17:03:05.992]                             if (!grepl(pattern, name)) 
[17:03:05.992]                               next
[17:03:05.992]                             invokeRestart(restart)
[17:03:05.992]                             muffled <- TRUE
[17:03:05.992]                             break
[17:03:05.992]                           }
[17:03:05.992]                         }
[17:03:05.992]                       }
[17:03:05.992]                       invisible(muffled)
[17:03:05.992]                     }
[17:03:05.992]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.992]                   }
[17:03:05.992]                 }
[17:03:05.992]                 else {
[17:03:05.992]                   if (TRUE) {
[17:03:05.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:05.992]                     {
[17:03:05.992]                       inherits <- base::inherits
[17:03:05.992]                       invokeRestart <- base::invokeRestart
[17:03:05.992]                       is.null <- base::is.null
[17:03:05.992]                       muffled <- FALSE
[17:03:05.992]                       if (inherits(cond, "message")) {
[17:03:05.992]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:05.992]                         if (muffled) 
[17:03:05.992]                           invokeRestart("muffleMessage")
[17:03:05.992]                       }
[17:03:05.992]                       else if (inherits(cond, "warning")) {
[17:03:05.992]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:05.992]                         if (muffled) 
[17:03:05.992]                           invokeRestart("muffleWarning")
[17:03:05.992]                       }
[17:03:05.992]                       else if (inherits(cond, "condition")) {
[17:03:05.992]                         if (!is.null(pattern)) {
[17:03:05.992]                           computeRestarts <- base::computeRestarts
[17:03:05.992]                           grepl <- base::grepl
[17:03:05.992]                           restarts <- computeRestarts(cond)
[17:03:05.992]                           for (restart in restarts) {
[17:03:05.992]                             name <- restart$name
[17:03:05.992]                             if (is.null(name)) 
[17:03:05.992]                               next
[17:03:05.992]                             if (!grepl(pattern, name)) 
[17:03:05.992]                               next
[17:03:05.992]                             invokeRestart(restart)
[17:03:05.992]                             muffled <- TRUE
[17:03:05.992]                             break
[17:03:05.992]                           }
[17:03:05.992]                         }
[17:03:05.992]                       }
[17:03:05.992]                       invisible(muffled)
[17:03:05.992]                     }
[17:03:05.992]                     muffleCondition(cond, pattern = "^muffle")
[17:03:05.992]                   }
[17:03:05.992]                 }
[17:03:05.992]             }
[17:03:05.992]         }))
[17:03:05.992]     }, error = function(ex) {
[17:03:05.992]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:05.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:05.992]                 ...future.rng), started = ...future.startTime, 
[17:03:05.992]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:05.992]             version = "1.8"), class = "FutureResult")
[17:03:05.992]     }, finally = {
[17:03:05.992]         if (!identical(...future.workdir, getwd())) 
[17:03:05.992]             setwd(...future.workdir)
[17:03:05.992]         {
[17:03:05.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:05.992]                 ...future.oldOptions$nwarnings <- NULL
[17:03:05.992]             }
[17:03:05.992]             base::options(...future.oldOptions)
[17:03:05.992]             if (.Platform$OS.type == "windows") {
[17:03:05.992]                 old_names <- names(...future.oldEnvVars)
[17:03:05.992]                 envs <- base::Sys.getenv()
[17:03:05.992]                 names <- names(envs)
[17:03:05.992]                 common <- intersect(names, old_names)
[17:03:05.992]                 added <- setdiff(names, old_names)
[17:03:05.992]                 removed <- setdiff(old_names, names)
[17:03:05.992]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:05.992]                   envs[common]]
[17:03:05.992]                 NAMES <- toupper(changed)
[17:03:05.992]                 args <- list()
[17:03:05.992]                 for (kk in seq_along(NAMES)) {
[17:03:05.992]                   name <- changed[[kk]]
[17:03:05.992]                   NAME <- NAMES[[kk]]
[17:03:05.992]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.992]                     next
[17:03:05.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.992]                 }
[17:03:05.992]                 NAMES <- toupper(added)
[17:03:05.992]                 for (kk in seq_along(NAMES)) {
[17:03:05.992]                   name <- added[[kk]]
[17:03:05.992]                   NAME <- NAMES[[kk]]
[17:03:05.992]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.992]                     next
[17:03:05.992]                   args[[name]] <- ""
[17:03:05.992]                 }
[17:03:05.992]                 NAMES <- toupper(removed)
[17:03:05.992]                 for (kk in seq_along(NAMES)) {
[17:03:05.992]                   name <- removed[[kk]]
[17:03:05.992]                   NAME <- NAMES[[kk]]
[17:03:05.992]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:05.992]                     next
[17:03:05.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:05.992]                 }
[17:03:05.992]                 if (length(args) > 0) 
[17:03:05.992]                   base::do.call(base::Sys.setenv, args = args)
[17:03:05.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:05.992]             }
[17:03:05.992]             else {
[17:03:05.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:05.992]             }
[17:03:05.992]             {
[17:03:05.992]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:05.992]                   0L) {
[17:03:05.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:05.992]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:05.992]                   base::options(opts)
[17:03:05.992]                 }
[17:03:05.992]                 {
[17:03:05.992]                   {
[17:03:05.992]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:05.992]                     NULL
[17:03:05.992]                   }
[17:03:05.992]                   options(future.plan = NULL)
[17:03:05.992]                   if (is.na(NA_character_)) 
[17:03:05.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:05.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:05.992]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:05.992]                     .init = FALSE)
[17:03:05.992]                 }
[17:03:05.992]             }
[17:03:05.992]         }
[17:03:05.992]     })
[17:03:05.992]     if (TRUE) {
[17:03:05.992]         base::sink(type = "output", split = FALSE)
[17:03:05.992]         if (TRUE) {
[17:03:05.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:05.992]         }
[17:03:05.992]         else {
[17:03:05.992]             ...future.result["stdout"] <- base::list(NULL)
[17:03:05.992]         }
[17:03:05.992]         base::close(...future.stdout)
[17:03:05.992]         ...future.stdout <- NULL
[17:03:05.992]     }
[17:03:05.992]     ...future.result$conditions <- ...future.conditions
[17:03:05.992]     ...future.result$finished <- base::Sys.time()
[17:03:05.992]     ...future.result
[17:03:05.992] }
[17:03:05.995] MultisessionFuture started
[17:03:05.995] - Launch lazy future ... done
[17:03:05.995] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:03:05.995] result() for ClusterFuture ...
[17:03:05.995] receiveMessageFromWorker() for ClusterFuture ...
[17:03:05.995] - Validating connection of MultisessionFuture
[17:03:06.049] - received message: FutureResult
[17:03:06.049] - Received FutureResult
[17:03:06.049] - Erased future from FutureRegistry
[17:03:06.049] result() for ClusterFuture ...
[17:03:06.049] - result already collected: FutureResult
[17:03:06.050] result() for ClusterFuture ... done
[17:03:06.050] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:06.050] result() for ClusterFuture ... done
[17:03:06.050] result() for ClusterFuture ...
[17:03:06.050] - result already collected: FutureResult
[17:03:06.050] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[17:03:06.050] getGlobalsAndPackages() ...
[17:03:06.051] Searching for globals...
[17:03:06.051] - globals found: [2] ‘{’, ‘gc’
[17:03:06.052] Searching for globals ... DONE
[17:03:06.052] Resolving globals: FALSE
[17:03:06.052] 
[17:03:06.052] 
[17:03:06.052] getGlobalsAndPackages() ... DONE
[17:03:06.052] run() for ‘Future’ ...
[17:03:06.052] - state: ‘created’
[17:03:06.053] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:06.063] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:06.063] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:06.063]   - Field: ‘node’
[17:03:06.064]   - Field: ‘label’
[17:03:06.064]   - Field: ‘local’
[17:03:06.064]   - Field: ‘owner’
[17:03:06.064]   - Field: ‘envir’
[17:03:06.064]   - Field: ‘workers’
[17:03:06.064]   - Field: ‘packages’
[17:03:06.064]   - Field: ‘gc’
[17:03:06.064]   - Field: ‘conditions’
[17:03:06.064]   - Field: ‘persistent’
[17:03:06.064]   - Field: ‘expr’
[17:03:06.064]   - Field: ‘uuid’
[17:03:06.064]   - Field: ‘seed’
[17:03:06.065]   - Field: ‘version’
[17:03:06.065]   - Field: ‘result’
[17:03:06.065]   - Field: ‘asynchronous’
[17:03:06.065]   - Field: ‘calls’
[17:03:06.065]   - Field: ‘globals’
[17:03:06.065]   - Field: ‘stdout’
[17:03:06.065]   - Field: ‘earlySignal’
[17:03:06.065]   - Field: ‘lazy’
[17:03:06.065]   - Field: ‘state’
[17:03:06.065] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:06.065] - Launch lazy future ...
[17:03:06.066] Packages needed by the future expression (n = 0): <none>
[17:03:06.066] Packages needed by future strategies (n = 0): <none>
[17:03:06.066] {
[17:03:06.066]     {
[17:03:06.066]         {
[17:03:06.066]             ...future.startTime <- base::Sys.time()
[17:03:06.066]             {
[17:03:06.066]                 {
[17:03:06.066]                   {
[17:03:06.066]                     {
[17:03:06.066]                       base::local({
[17:03:06.066]                         has_future <- base::requireNamespace("future", 
[17:03:06.066]                           quietly = TRUE)
[17:03:06.066]                         if (has_future) {
[17:03:06.066]                           ns <- base::getNamespace("future")
[17:03:06.066]                           version <- ns[[".package"]][["version"]]
[17:03:06.066]                           if (is.null(version)) 
[17:03:06.066]                             version <- utils::packageVersion("future")
[17:03:06.066]                         }
[17:03:06.066]                         else {
[17:03:06.066]                           version <- NULL
[17:03:06.066]                         }
[17:03:06.066]                         if (!has_future || version < "1.8.0") {
[17:03:06.066]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:06.066]                             "", base::R.version$version.string), 
[17:03:06.066]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:06.066]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:06.066]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:06.066]                               "release", "version")], collapse = " "), 
[17:03:06.066]                             hostname = base::Sys.info()[["nodename"]])
[17:03:06.066]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:06.066]                             info)
[17:03:06.066]                           info <- base::paste(info, collapse = "; ")
[17:03:06.066]                           if (!has_future) {
[17:03:06.066]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:06.066]                               info)
[17:03:06.066]                           }
[17:03:06.066]                           else {
[17:03:06.066]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:06.066]                               info, version)
[17:03:06.066]                           }
[17:03:06.066]                           base::stop(msg)
[17:03:06.066]                         }
[17:03:06.066]                       })
[17:03:06.066]                     }
[17:03:06.066]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:06.066]                     base::options(mc.cores = 1L)
[17:03:06.066]                   }
[17:03:06.066]                   ...future.strategy.old <- future::plan("list")
[17:03:06.066]                   options(future.plan = NULL)
[17:03:06.066]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.066]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:06.066]                 }
[17:03:06.066]                 ...future.workdir <- getwd()
[17:03:06.066]             }
[17:03:06.066]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:06.066]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:06.066]         }
[17:03:06.066]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:06.066]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:06.066]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:06.066]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:06.066]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:06.066]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:06.066]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:06.066]             base::names(...future.oldOptions))
[17:03:06.066]     }
[17:03:06.066]     if (FALSE) {
[17:03:06.066]     }
[17:03:06.066]     else {
[17:03:06.066]         if (TRUE) {
[17:03:06.066]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:06.066]                 open = "w")
[17:03:06.066]         }
[17:03:06.066]         else {
[17:03:06.066]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:06.066]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:06.066]         }
[17:03:06.066]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:06.066]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:06.066]             base::sink(type = "output", split = FALSE)
[17:03:06.066]             base::close(...future.stdout)
[17:03:06.066]         }, add = TRUE)
[17:03:06.066]     }
[17:03:06.066]     ...future.frame <- base::sys.nframe()
[17:03:06.066]     ...future.conditions <- base::list()
[17:03:06.066]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:06.066]     if (FALSE) {
[17:03:06.066]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:06.066]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:06.066]     }
[17:03:06.066]     ...future.result <- base::tryCatch({
[17:03:06.066]         base::withCallingHandlers({
[17:03:06.066]             ...future.value <- base::withVisible(base::local({
[17:03:06.066]                 ...future.makeSendCondition <- base::local({
[17:03:06.066]                   sendCondition <- NULL
[17:03:06.066]                   function(frame = 1L) {
[17:03:06.066]                     if (is.function(sendCondition)) 
[17:03:06.066]                       return(sendCondition)
[17:03:06.066]                     ns <- getNamespace("parallel")
[17:03:06.066]                     if (exists("sendData", mode = "function", 
[17:03:06.066]                       envir = ns)) {
[17:03:06.066]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:06.066]                         envir = ns)
[17:03:06.066]                       envir <- sys.frame(frame)
[17:03:06.066]                       master <- NULL
[17:03:06.066]                       while (!identical(envir, .GlobalEnv) && 
[17:03:06.066]                         !identical(envir, emptyenv())) {
[17:03:06.066]                         if (exists("master", mode = "list", envir = envir, 
[17:03:06.066]                           inherits = FALSE)) {
[17:03:06.066]                           master <- get("master", mode = "list", 
[17:03:06.066]                             envir = envir, inherits = FALSE)
[17:03:06.066]                           if (inherits(master, c("SOCKnode", 
[17:03:06.066]                             "SOCK0node"))) {
[17:03:06.066]                             sendCondition <<- function(cond) {
[17:03:06.066]                               data <- list(type = "VALUE", value = cond, 
[17:03:06.066]                                 success = TRUE)
[17:03:06.066]                               parallel_sendData(master, data)
[17:03:06.066]                             }
[17:03:06.066]                             return(sendCondition)
[17:03:06.066]                           }
[17:03:06.066]                         }
[17:03:06.066]                         frame <- frame + 1L
[17:03:06.066]                         envir <- sys.frame(frame)
[17:03:06.066]                       }
[17:03:06.066]                     }
[17:03:06.066]                     sendCondition <<- function(cond) NULL
[17:03:06.066]                   }
[17:03:06.066]                 })
[17:03:06.066]                 withCallingHandlers({
[17:03:06.066]                   {
[17:03:06.066]                     gc()
[17:03:06.066]                   }
[17:03:06.066]                 }, immediateCondition = function(cond) {
[17:03:06.066]                   sendCondition <- ...future.makeSendCondition()
[17:03:06.066]                   sendCondition(cond)
[17:03:06.066]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.066]                   {
[17:03:06.066]                     inherits <- base::inherits
[17:03:06.066]                     invokeRestart <- base::invokeRestart
[17:03:06.066]                     is.null <- base::is.null
[17:03:06.066]                     muffled <- FALSE
[17:03:06.066]                     if (inherits(cond, "message")) {
[17:03:06.066]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:06.066]                       if (muffled) 
[17:03:06.066]                         invokeRestart("muffleMessage")
[17:03:06.066]                     }
[17:03:06.066]                     else if (inherits(cond, "warning")) {
[17:03:06.066]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:06.066]                       if (muffled) 
[17:03:06.066]                         invokeRestart("muffleWarning")
[17:03:06.066]                     }
[17:03:06.066]                     else if (inherits(cond, "condition")) {
[17:03:06.066]                       if (!is.null(pattern)) {
[17:03:06.066]                         computeRestarts <- base::computeRestarts
[17:03:06.066]                         grepl <- base::grepl
[17:03:06.066]                         restarts <- computeRestarts(cond)
[17:03:06.066]                         for (restart in restarts) {
[17:03:06.066]                           name <- restart$name
[17:03:06.066]                           if (is.null(name)) 
[17:03:06.066]                             next
[17:03:06.066]                           if (!grepl(pattern, name)) 
[17:03:06.066]                             next
[17:03:06.066]                           invokeRestart(restart)
[17:03:06.066]                           muffled <- TRUE
[17:03:06.066]                           break
[17:03:06.066]                         }
[17:03:06.066]                       }
[17:03:06.066]                     }
[17:03:06.066]                     invisible(muffled)
[17:03:06.066]                   }
[17:03:06.066]                   muffleCondition(cond)
[17:03:06.066]                 })
[17:03:06.066]             }))
[17:03:06.066]             future::FutureResult(value = ...future.value$value, 
[17:03:06.066]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.066]                   ...future.rng), globalenv = if (FALSE) 
[17:03:06.066]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:06.066]                     ...future.globalenv.names))
[17:03:06.066]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:06.066]         }, condition = base::local({
[17:03:06.066]             c <- base::c
[17:03:06.066]             inherits <- base::inherits
[17:03:06.066]             invokeRestart <- base::invokeRestart
[17:03:06.066]             length <- base::length
[17:03:06.066]             list <- base::list
[17:03:06.066]             seq.int <- base::seq.int
[17:03:06.066]             signalCondition <- base::signalCondition
[17:03:06.066]             sys.calls <- base::sys.calls
[17:03:06.066]             `[[` <- base::`[[`
[17:03:06.066]             `+` <- base::`+`
[17:03:06.066]             `<<-` <- base::`<<-`
[17:03:06.066]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:06.066]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:06.066]                   3L)]
[17:03:06.066]             }
[17:03:06.066]             function(cond) {
[17:03:06.066]                 is_error <- inherits(cond, "error")
[17:03:06.066]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:06.066]                   NULL)
[17:03:06.066]                 if (is_error) {
[17:03:06.066]                   sessionInformation <- function() {
[17:03:06.066]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:06.066]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:06.066]                       search = base::search(), system = base::Sys.info())
[17:03:06.066]                   }
[17:03:06.066]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.066]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:06.066]                     cond$call), session = sessionInformation(), 
[17:03:06.066]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:06.066]                   signalCondition(cond)
[17:03:06.066]                 }
[17:03:06.066]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:06.066]                 "immediateCondition"))) {
[17:03:06.066]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:06.066]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.066]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:06.066]                   if (TRUE && !signal) {
[17:03:06.066]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.066]                     {
[17:03:06.066]                       inherits <- base::inherits
[17:03:06.066]                       invokeRestart <- base::invokeRestart
[17:03:06.066]                       is.null <- base::is.null
[17:03:06.066]                       muffled <- FALSE
[17:03:06.066]                       if (inherits(cond, "message")) {
[17:03:06.066]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.066]                         if (muffled) 
[17:03:06.066]                           invokeRestart("muffleMessage")
[17:03:06.066]                       }
[17:03:06.066]                       else if (inherits(cond, "warning")) {
[17:03:06.066]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.066]                         if (muffled) 
[17:03:06.066]                           invokeRestart("muffleWarning")
[17:03:06.066]                       }
[17:03:06.066]                       else if (inherits(cond, "condition")) {
[17:03:06.066]                         if (!is.null(pattern)) {
[17:03:06.066]                           computeRestarts <- base::computeRestarts
[17:03:06.066]                           grepl <- base::grepl
[17:03:06.066]                           restarts <- computeRestarts(cond)
[17:03:06.066]                           for (restart in restarts) {
[17:03:06.066]                             name <- restart$name
[17:03:06.066]                             if (is.null(name)) 
[17:03:06.066]                               next
[17:03:06.066]                             if (!grepl(pattern, name)) 
[17:03:06.066]                               next
[17:03:06.066]                             invokeRestart(restart)
[17:03:06.066]                             muffled <- TRUE
[17:03:06.066]                             break
[17:03:06.066]                           }
[17:03:06.066]                         }
[17:03:06.066]                       }
[17:03:06.066]                       invisible(muffled)
[17:03:06.066]                     }
[17:03:06.066]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.066]                   }
[17:03:06.066]                 }
[17:03:06.066]                 else {
[17:03:06.066]                   if (TRUE) {
[17:03:06.066]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.066]                     {
[17:03:06.066]                       inherits <- base::inherits
[17:03:06.066]                       invokeRestart <- base::invokeRestart
[17:03:06.066]                       is.null <- base::is.null
[17:03:06.066]                       muffled <- FALSE
[17:03:06.066]                       if (inherits(cond, "message")) {
[17:03:06.066]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.066]                         if (muffled) 
[17:03:06.066]                           invokeRestart("muffleMessage")
[17:03:06.066]                       }
[17:03:06.066]                       else if (inherits(cond, "warning")) {
[17:03:06.066]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.066]                         if (muffled) 
[17:03:06.066]                           invokeRestart("muffleWarning")
[17:03:06.066]                       }
[17:03:06.066]                       else if (inherits(cond, "condition")) {
[17:03:06.066]                         if (!is.null(pattern)) {
[17:03:06.066]                           computeRestarts <- base::computeRestarts
[17:03:06.066]                           grepl <- base::grepl
[17:03:06.066]                           restarts <- computeRestarts(cond)
[17:03:06.066]                           for (restart in restarts) {
[17:03:06.066]                             name <- restart$name
[17:03:06.066]                             if (is.null(name)) 
[17:03:06.066]                               next
[17:03:06.066]                             if (!grepl(pattern, name)) 
[17:03:06.066]                               next
[17:03:06.066]                             invokeRestart(restart)
[17:03:06.066]                             muffled <- TRUE
[17:03:06.066]                             break
[17:03:06.066]                           }
[17:03:06.066]                         }
[17:03:06.066]                       }
[17:03:06.066]                       invisible(muffled)
[17:03:06.066]                     }
[17:03:06.066]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.066]                   }
[17:03:06.066]                 }
[17:03:06.066]             }
[17:03:06.066]         }))
[17:03:06.066]     }, error = function(ex) {
[17:03:06.066]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:06.066]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.066]                 ...future.rng), started = ...future.startTime, 
[17:03:06.066]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:06.066]             version = "1.8"), class = "FutureResult")
[17:03:06.066]     }, finally = {
[17:03:06.066]         if (!identical(...future.workdir, getwd())) 
[17:03:06.066]             setwd(...future.workdir)
[17:03:06.066]         {
[17:03:06.066]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:06.066]                 ...future.oldOptions$nwarnings <- NULL
[17:03:06.066]             }
[17:03:06.066]             base::options(...future.oldOptions)
[17:03:06.066]             if (.Platform$OS.type == "windows") {
[17:03:06.066]                 old_names <- names(...future.oldEnvVars)
[17:03:06.066]                 envs <- base::Sys.getenv()
[17:03:06.066]                 names <- names(envs)
[17:03:06.066]                 common <- intersect(names, old_names)
[17:03:06.066]                 added <- setdiff(names, old_names)
[17:03:06.066]                 removed <- setdiff(old_names, names)
[17:03:06.066]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:06.066]                   envs[common]]
[17:03:06.066]                 NAMES <- toupper(changed)
[17:03:06.066]                 args <- list()
[17:03:06.066]                 for (kk in seq_along(NAMES)) {
[17:03:06.066]                   name <- changed[[kk]]
[17:03:06.066]                   NAME <- NAMES[[kk]]
[17:03:06.066]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.066]                     next
[17:03:06.066]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.066]                 }
[17:03:06.066]                 NAMES <- toupper(added)
[17:03:06.066]                 for (kk in seq_along(NAMES)) {
[17:03:06.066]                   name <- added[[kk]]
[17:03:06.066]                   NAME <- NAMES[[kk]]
[17:03:06.066]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.066]                     next
[17:03:06.066]                   args[[name]] <- ""
[17:03:06.066]                 }
[17:03:06.066]                 NAMES <- toupper(removed)
[17:03:06.066]                 for (kk in seq_along(NAMES)) {
[17:03:06.066]                   name <- removed[[kk]]
[17:03:06.066]                   NAME <- NAMES[[kk]]
[17:03:06.066]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.066]                     next
[17:03:06.066]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.066]                 }
[17:03:06.066]                 if (length(args) > 0) 
[17:03:06.066]                   base::do.call(base::Sys.setenv, args = args)
[17:03:06.066]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:06.066]             }
[17:03:06.066]             else {
[17:03:06.066]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:06.066]             }
[17:03:06.066]             {
[17:03:06.066]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:06.066]                   0L) {
[17:03:06.066]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:06.066]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:06.066]                   base::options(opts)
[17:03:06.066]                 }
[17:03:06.066]                 {
[17:03:06.066]                   {
[17:03:06.066]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:06.066]                     NULL
[17:03:06.066]                   }
[17:03:06.066]                   options(future.plan = NULL)
[17:03:06.066]                   if (is.na(NA_character_)) 
[17:03:06.066]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.066]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:06.066]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:06.066]                     .init = FALSE)
[17:03:06.066]                 }
[17:03:06.066]             }
[17:03:06.066]         }
[17:03:06.066]     })
[17:03:06.066]     if (TRUE) {
[17:03:06.066]         base::sink(type = "output", split = FALSE)
[17:03:06.066]         if (TRUE) {
[17:03:06.066]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:06.066]         }
[17:03:06.066]         else {
[17:03:06.066]             ...future.result["stdout"] <- base::list(NULL)
[17:03:06.066]         }
[17:03:06.066]         base::close(...future.stdout)
[17:03:06.066]         ...future.stdout <- NULL
[17:03:06.066]     }
[17:03:06.066]     ...future.result$conditions <- ...future.conditions
[17:03:06.066]     ...future.result$finished <- base::Sys.time()
[17:03:06.066]     ...future.result
[17:03:06.066] }
[17:03:06.069] MultisessionFuture started
[17:03:06.070] - Launch lazy future ... done
[17:03:06.070] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:03:06.070] result() for ClusterFuture ...
[17:03:06.070] receiveMessageFromWorker() for ClusterFuture ...
[17:03:06.070] - Validating connection of MultisessionFuture
[17:03:06.099] - received message: FutureResult
[17:03:06.099] - Received FutureResult
[17:03:06.099] - Erased future from FutureRegistry
[17:03:06.099] result() for ClusterFuture ...
[17:03:06.099] - result already collected: FutureResult
[17:03:06.100] result() for ClusterFuture ... done
[17:03:06.100] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:06.100] result() for ClusterFuture ... done
[17:03:06.100] result() for ClusterFuture ...
[17:03:06.100] - result already collected: FutureResult
[17:03:06.100] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 407009 21.8     692222   37   692222 37.0
Vcells 729658  5.6    8388608   64  5751575 43.9
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[17:03:06.100] getGlobalsAndPackages() ...
[17:03:06.100] Searching for globals...
[17:03:06.101] - globals found: [2] ‘{’, ‘integer’
[17:03:06.101] Searching for globals ... DONE
[17:03:06.101] Resolving globals: FALSE
[17:03:06.102] 
[17:03:06.102] 
[17:03:06.102] getGlobalsAndPackages() ... DONE
[17:03:06.102] run() for ‘Future’ ...
[17:03:06.102] - state: ‘created’
[17:03:06.102] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:06.113] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:06.113] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:06.114]   - Field: ‘node’
[17:03:06.114]   - Field: ‘label’
[17:03:06.114]   - Field: ‘local’
[17:03:06.114]   - Field: ‘owner’
[17:03:06.114]   - Field: ‘envir’
[17:03:06.114]   - Field: ‘workers’
[17:03:06.114]   - Field: ‘packages’
[17:03:06.114]   - Field: ‘gc’
[17:03:06.114]   - Field: ‘conditions’
[17:03:06.114]   - Field: ‘persistent’
[17:03:06.114]   - Field: ‘expr’
[17:03:06.115]   - Field: ‘uuid’
[17:03:06.115]   - Field: ‘seed’
[17:03:06.115]   - Field: ‘version’
[17:03:06.115]   - Field: ‘result’
[17:03:06.115]   - Field: ‘asynchronous’
[17:03:06.115]   - Field: ‘calls’
[17:03:06.115]   - Field: ‘globals’
[17:03:06.115]   - Field: ‘stdout’
[17:03:06.115]   - Field: ‘earlySignal’
[17:03:06.115]   - Field: ‘lazy’
[17:03:06.115]   - Field: ‘state’
[17:03:06.116] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:06.116] - Launch lazy future ...
[17:03:06.116] Packages needed by the future expression (n = 0): <none>
[17:03:06.116] Packages needed by future strategies (n = 0): <none>
[17:03:06.116] {
[17:03:06.116]     {
[17:03:06.116]         {
[17:03:06.116]             ...future.startTime <- base::Sys.time()
[17:03:06.116]             {
[17:03:06.116]                 {
[17:03:06.116]                   {
[17:03:06.116]                     {
[17:03:06.116]                       base::local({
[17:03:06.116]                         has_future <- base::requireNamespace("future", 
[17:03:06.116]                           quietly = TRUE)
[17:03:06.116]                         if (has_future) {
[17:03:06.116]                           ns <- base::getNamespace("future")
[17:03:06.116]                           version <- ns[[".package"]][["version"]]
[17:03:06.116]                           if (is.null(version)) 
[17:03:06.116]                             version <- utils::packageVersion("future")
[17:03:06.116]                         }
[17:03:06.116]                         else {
[17:03:06.116]                           version <- NULL
[17:03:06.116]                         }
[17:03:06.116]                         if (!has_future || version < "1.8.0") {
[17:03:06.116]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:06.116]                             "", base::R.version$version.string), 
[17:03:06.116]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:06.116]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:06.116]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:06.116]                               "release", "version")], collapse = " "), 
[17:03:06.116]                             hostname = base::Sys.info()[["nodename"]])
[17:03:06.116]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:06.116]                             info)
[17:03:06.116]                           info <- base::paste(info, collapse = "; ")
[17:03:06.116]                           if (!has_future) {
[17:03:06.116]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:06.116]                               info)
[17:03:06.116]                           }
[17:03:06.116]                           else {
[17:03:06.116]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:06.116]                               info, version)
[17:03:06.116]                           }
[17:03:06.116]                           base::stop(msg)
[17:03:06.116]                         }
[17:03:06.116]                       })
[17:03:06.116]                     }
[17:03:06.116]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:06.116]                     base::options(mc.cores = 1L)
[17:03:06.116]                   }
[17:03:06.116]                   ...future.strategy.old <- future::plan("list")
[17:03:06.116]                   options(future.plan = NULL)
[17:03:06.116]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.116]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:06.116]                 }
[17:03:06.116]                 ...future.workdir <- getwd()
[17:03:06.116]             }
[17:03:06.116]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:06.116]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:06.116]         }
[17:03:06.116]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:06.116]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:06.116]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:06.116]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:06.116]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:06.116]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:06.116]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:06.116]             base::names(...future.oldOptions))
[17:03:06.116]     }
[17:03:06.116]     if (FALSE) {
[17:03:06.116]     }
[17:03:06.116]     else {
[17:03:06.116]         if (TRUE) {
[17:03:06.116]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:06.116]                 open = "w")
[17:03:06.116]         }
[17:03:06.116]         else {
[17:03:06.116]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:06.116]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:06.116]         }
[17:03:06.116]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:06.116]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:06.116]             base::sink(type = "output", split = FALSE)
[17:03:06.116]             base::close(...future.stdout)
[17:03:06.116]         }, add = TRUE)
[17:03:06.116]     }
[17:03:06.116]     ...future.frame <- base::sys.nframe()
[17:03:06.116]     ...future.conditions <- base::list()
[17:03:06.116]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:06.116]     if (FALSE) {
[17:03:06.116]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:06.116]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:06.116]     }
[17:03:06.116]     ...future.result <- base::tryCatch({
[17:03:06.116]         base::withCallingHandlers({
[17:03:06.116]             ...future.value <- base::withVisible(base::local({
[17:03:06.116]                 ...future.makeSendCondition <- base::local({
[17:03:06.116]                   sendCondition <- NULL
[17:03:06.116]                   function(frame = 1L) {
[17:03:06.116]                     if (is.function(sendCondition)) 
[17:03:06.116]                       return(sendCondition)
[17:03:06.116]                     ns <- getNamespace("parallel")
[17:03:06.116]                     if (exists("sendData", mode = "function", 
[17:03:06.116]                       envir = ns)) {
[17:03:06.116]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:06.116]                         envir = ns)
[17:03:06.116]                       envir <- sys.frame(frame)
[17:03:06.116]                       master <- NULL
[17:03:06.116]                       while (!identical(envir, .GlobalEnv) && 
[17:03:06.116]                         !identical(envir, emptyenv())) {
[17:03:06.116]                         if (exists("master", mode = "list", envir = envir, 
[17:03:06.116]                           inherits = FALSE)) {
[17:03:06.116]                           master <- get("master", mode = "list", 
[17:03:06.116]                             envir = envir, inherits = FALSE)
[17:03:06.116]                           if (inherits(master, c("SOCKnode", 
[17:03:06.116]                             "SOCK0node"))) {
[17:03:06.116]                             sendCondition <<- function(cond) {
[17:03:06.116]                               data <- list(type = "VALUE", value = cond, 
[17:03:06.116]                                 success = TRUE)
[17:03:06.116]                               parallel_sendData(master, data)
[17:03:06.116]                             }
[17:03:06.116]                             return(sendCondition)
[17:03:06.116]                           }
[17:03:06.116]                         }
[17:03:06.116]                         frame <- frame + 1L
[17:03:06.116]                         envir <- sys.frame(frame)
[17:03:06.116]                       }
[17:03:06.116]                     }
[17:03:06.116]                     sendCondition <<- function(cond) NULL
[17:03:06.116]                   }
[17:03:06.116]                 })
[17:03:06.116]                 withCallingHandlers({
[17:03:06.116]                   {
[17:03:06.116]                     integer(1e+07)
[17:03:06.116]                   }
[17:03:06.116]                 }, immediateCondition = function(cond) {
[17:03:06.116]                   sendCondition <- ...future.makeSendCondition()
[17:03:06.116]                   sendCondition(cond)
[17:03:06.116]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.116]                   {
[17:03:06.116]                     inherits <- base::inherits
[17:03:06.116]                     invokeRestart <- base::invokeRestart
[17:03:06.116]                     is.null <- base::is.null
[17:03:06.116]                     muffled <- FALSE
[17:03:06.116]                     if (inherits(cond, "message")) {
[17:03:06.116]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:06.116]                       if (muffled) 
[17:03:06.116]                         invokeRestart("muffleMessage")
[17:03:06.116]                     }
[17:03:06.116]                     else if (inherits(cond, "warning")) {
[17:03:06.116]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:06.116]                       if (muffled) 
[17:03:06.116]                         invokeRestart("muffleWarning")
[17:03:06.116]                     }
[17:03:06.116]                     else if (inherits(cond, "condition")) {
[17:03:06.116]                       if (!is.null(pattern)) {
[17:03:06.116]                         computeRestarts <- base::computeRestarts
[17:03:06.116]                         grepl <- base::grepl
[17:03:06.116]                         restarts <- computeRestarts(cond)
[17:03:06.116]                         for (restart in restarts) {
[17:03:06.116]                           name <- restart$name
[17:03:06.116]                           if (is.null(name)) 
[17:03:06.116]                             next
[17:03:06.116]                           if (!grepl(pattern, name)) 
[17:03:06.116]                             next
[17:03:06.116]                           invokeRestart(restart)
[17:03:06.116]                           muffled <- TRUE
[17:03:06.116]                           break
[17:03:06.116]                         }
[17:03:06.116]                       }
[17:03:06.116]                     }
[17:03:06.116]                     invisible(muffled)
[17:03:06.116]                   }
[17:03:06.116]                   muffleCondition(cond)
[17:03:06.116]                 })
[17:03:06.116]             }))
[17:03:06.116]             future::FutureResult(value = ...future.value$value, 
[17:03:06.116]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.116]                   ...future.rng), globalenv = if (FALSE) 
[17:03:06.116]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:06.116]                     ...future.globalenv.names))
[17:03:06.116]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:06.116]         }, condition = base::local({
[17:03:06.116]             c <- base::c
[17:03:06.116]             inherits <- base::inherits
[17:03:06.116]             invokeRestart <- base::invokeRestart
[17:03:06.116]             length <- base::length
[17:03:06.116]             list <- base::list
[17:03:06.116]             seq.int <- base::seq.int
[17:03:06.116]             signalCondition <- base::signalCondition
[17:03:06.116]             sys.calls <- base::sys.calls
[17:03:06.116]             `[[` <- base::`[[`
[17:03:06.116]             `+` <- base::`+`
[17:03:06.116]             `<<-` <- base::`<<-`
[17:03:06.116]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:06.116]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:06.116]                   3L)]
[17:03:06.116]             }
[17:03:06.116]             function(cond) {
[17:03:06.116]                 is_error <- inherits(cond, "error")
[17:03:06.116]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:06.116]                   NULL)
[17:03:06.116]                 if (is_error) {
[17:03:06.116]                   sessionInformation <- function() {
[17:03:06.116]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:06.116]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:06.116]                       search = base::search(), system = base::Sys.info())
[17:03:06.116]                   }
[17:03:06.116]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.116]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:06.116]                     cond$call), session = sessionInformation(), 
[17:03:06.116]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:06.116]                   signalCondition(cond)
[17:03:06.116]                 }
[17:03:06.116]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:06.116]                 "immediateCondition"))) {
[17:03:06.116]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:06.116]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.116]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:06.116]                   if (TRUE && !signal) {
[17:03:06.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.116]                     {
[17:03:06.116]                       inherits <- base::inherits
[17:03:06.116]                       invokeRestart <- base::invokeRestart
[17:03:06.116]                       is.null <- base::is.null
[17:03:06.116]                       muffled <- FALSE
[17:03:06.116]                       if (inherits(cond, "message")) {
[17:03:06.116]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.116]                         if (muffled) 
[17:03:06.116]                           invokeRestart("muffleMessage")
[17:03:06.116]                       }
[17:03:06.116]                       else if (inherits(cond, "warning")) {
[17:03:06.116]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.116]                         if (muffled) 
[17:03:06.116]                           invokeRestart("muffleWarning")
[17:03:06.116]                       }
[17:03:06.116]                       else if (inherits(cond, "condition")) {
[17:03:06.116]                         if (!is.null(pattern)) {
[17:03:06.116]                           computeRestarts <- base::computeRestarts
[17:03:06.116]                           grepl <- base::grepl
[17:03:06.116]                           restarts <- computeRestarts(cond)
[17:03:06.116]                           for (restart in restarts) {
[17:03:06.116]                             name <- restart$name
[17:03:06.116]                             if (is.null(name)) 
[17:03:06.116]                               next
[17:03:06.116]                             if (!grepl(pattern, name)) 
[17:03:06.116]                               next
[17:03:06.116]                             invokeRestart(restart)
[17:03:06.116]                             muffled <- TRUE
[17:03:06.116]                             break
[17:03:06.116]                           }
[17:03:06.116]                         }
[17:03:06.116]                       }
[17:03:06.116]                       invisible(muffled)
[17:03:06.116]                     }
[17:03:06.116]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.116]                   }
[17:03:06.116]                 }
[17:03:06.116]                 else {
[17:03:06.116]                   if (TRUE) {
[17:03:06.116]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.116]                     {
[17:03:06.116]                       inherits <- base::inherits
[17:03:06.116]                       invokeRestart <- base::invokeRestart
[17:03:06.116]                       is.null <- base::is.null
[17:03:06.116]                       muffled <- FALSE
[17:03:06.116]                       if (inherits(cond, "message")) {
[17:03:06.116]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.116]                         if (muffled) 
[17:03:06.116]                           invokeRestart("muffleMessage")
[17:03:06.116]                       }
[17:03:06.116]                       else if (inherits(cond, "warning")) {
[17:03:06.116]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.116]                         if (muffled) 
[17:03:06.116]                           invokeRestart("muffleWarning")
[17:03:06.116]                       }
[17:03:06.116]                       else if (inherits(cond, "condition")) {
[17:03:06.116]                         if (!is.null(pattern)) {
[17:03:06.116]                           computeRestarts <- base::computeRestarts
[17:03:06.116]                           grepl <- base::grepl
[17:03:06.116]                           restarts <- computeRestarts(cond)
[17:03:06.116]                           for (restart in restarts) {
[17:03:06.116]                             name <- restart$name
[17:03:06.116]                             if (is.null(name)) 
[17:03:06.116]                               next
[17:03:06.116]                             if (!grepl(pattern, name)) 
[17:03:06.116]                               next
[17:03:06.116]                             invokeRestart(restart)
[17:03:06.116]                             muffled <- TRUE
[17:03:06.116]                             break
[17:03:06.116]                           }
[17:03:06.116]                         }
[17:03:06.116]                       }
[17:03:06.116]                       invisible(muffled)
[17:03:06.116]                     }
[17:03:06.116]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.116]                   }
[17:03:06.116]                 }
[17:03:06.116]             }
[17:03:06.116]         }))
[17:03:06.116]     }, error = function(ex) {
[17:03:06.116]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:06.116]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.116]                 ...future.rng), started = ...future.startTime, 
[17:03:06.116]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:06.116]             version = "1.8"), class = "FutureResult")
[17:03:06.116]     }, finally = {
[17:03:06.116]         if (!identical(...future.workdir, getwd())) 
[17:03:06.116]             setwd(...future.workdir)
[17:03:06.116]         {
[17:03:06.116]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:06.116]                 ...future.oldOptions$nwarnings <- NULL
[17:03:06.116]             }
[17:03:06.116]             base::options(...future.oldOptions)
[17:03:06.116]             if (.Platform$OS.type == "windows") {
[17:03:06.116]                 old_names <- names(...future.oldEnvVars)
[17:03:06.116]                 envs <- base::Sys.getenv()
[17:03:06.116]                 names <- names(envs)
[17:03:06.116]                 common <- intersect(names, old_names)
[17:03:06.116]                 added <- setdiff(names, old_names)
[17:03:06.116]                 removed <- setdiff(old_names, names)
[17:03:06.116]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:06.116]                   envs[common]]
[17:03:06.116]                 NAMES <- toupper(changed)
[17:03:06.116]                 args <- list()
[17:03:06.116]                 for (kk in seq_along(NAMES)) {
[17:03:06.116]                   name <- changed[[kk]]
[17:03:06.116]                   NAME <- NAMES[[kk]]
[17:03:06.116]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.116]                     next
[17:03:06.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.116]                 }
[17:03:06.116]                 NAMES <- toupper(added)
[17:03:06.116]                 for (kk in seq_along(NAMES)) {
[17:03:06.116]                   name <- added[[kk]]
[17:03:06.116]                   NAME <- NAMES[[kk]]
[17:03:06.116]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.116]                     next
[17:03:06.116]                   args[[name]] <- ""
[17:03:06.116]                 }
[17:03:06.116]                 NAMES <- toupper(removed)
[17:03:06.116]                 for (kk in seq_along(NAMES)) {
[17:03:06.116]                   name <- removed[[kk]]
[17:03:06.116]                   NAME <- NAMES[[kk]]
[17:03:06.116]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.116]                     next
[17:03:06.116]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.116]                 }
[17:03:06.116]                 if (length(args) > 0) 
[17:03:06.116]                   base::do.call(base::Sys.setenv, args = args)
[17:03:06.116]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:06.116]             }
[17:03:06.116]             else {
[17:03:06.116]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:06.116]             }
[17:03:06.116]             {
[17:03:06.116]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:06.116]                   0L) {
[17:03:06.116]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:06.116]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:06.116]                   base::options(opts)
[17:03:06.116]                 }
[17:03:06.116]                 {
[17:03:06.116]                   {
[17:03:06.116]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:06.116]                     NULL
[17:03:06.116]                   }
[17:03:06.116]                   options(future.plan = NULL)
[17:03:06.116]                   if (is.na(NA_character_)) 
[17:03:06.116]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.116]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:06.116]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:06.116]                     .init = FALSE)
[17:03:06.116]                 }
[17:03:06.116]             }
[17:03:06.116]         }
[17:03:06.116]     })
[17:03:06.116]     if (TRUE) {
[17:03:06.116]         base::sink(type = "output", split = FALSE)
[17:03:06.116]         if (TRUE) {
[17:03:06.116]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:06.116]         }
[17:03:06.116]         else {
[17:03:06.116]             ...future.result["stdout"] <- base::list(NULL)
[17:03:06.116]         }
[17:03:06.116]         base::close(...future.stdout)
[17:03:06.116]         ...future.stdout <- NULL
[17:03:06.116]     }
[17:03:06.116]     ...future.result$conditions <- ...future.conditions
[17:03:06.116]     ...future.result$finished <- base::Sys.time()
[17:03:06.116]     ...future.result
[17:03:06.116] }
[17:03:06.120] MultisessionFuture started
[17:03:06.120] - Launch lazy future ... done
[17:03:06.120] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:03:06.120] result() for ClusterFuture ...
[17:03:06.120] receiveMessageFromWorker() for ClusterFuture ...
[17:03:06.120] - Validating connection of MultisessionFuture
[17:03:06.187] - received message: FutureResult
[17:03:06.187] - Received FutureResult
[17:03:06.187] - Erased future from FutureRegistry
[17:03:06.187] result() for ClusterFuture ...
[17:03:06.187] - result already collected: FutureResult
[17:03:06.187] result() for ClusterFuture ... done
[17:03:06.187] - Garbage collecting worker ...
[17:03:06.448] - Garbage collecting worker ... done
[17:03:06.448] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:06.449] result() for ClusterFuture ... done
[17:03:06.449] result() for ClusterFuture ...
[17:03:06.449] - result already collected: FutureResult
[17:03:06.449] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[17:03:06.450] getGlobalsAndPackages() ...
[17:03:06.450] Searching for globals...
[17:03:06.450] - globals found: [2] ‘{’, ‘gc’
[17:03:06.451] Searching for globals ... DONE
[17:03:06.451] Resolving globals: FALSE
[17:03:06.451] 
[17:03:06.451] 
[17:03:06.451] getGlobalsAndPackages() ... DONE
[17:03:06.452] run() for ‘Future’ ...
[17:03:06.452] - state: ‘created’
[17:03:06.452] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:06.463] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:06.463] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:06.463]   - Field: ‘node’
[17:03:06.463]   - Field: ‘label’
[17:03:06.463]   - Field: ‘local’
[17:03:06.463]   - Field: ‘owner’
[17:03:06.463]   - Field: ‘envir’
[17:03:06.463]   - Field: ‘workers’
[17:03:06.463]   - Field: ‘packages’
[17:03:06.464]   - Field: ‘gc’
[17:03:06.464]   - Field: ‘conditions’
[17:03:06.464]   - Field: ‘persistent’
[17:03:06.464]   - Field: ‘expr’
[17:03:06.464]   - Field: ‘uuid’
[17:03:06.464]   - Field: ‘seed’
[17:03:06.464]   - Field: ‘version’
[17:03:06.464]   - Field: ‘result’
[17:03:06.464]   - Field: ‘asynchronous’
[17:03:06.464]   - Field: ‘calls’
[17:03:06.464]   - Field: ‘globals’
[17:03:06.465]   - Field: ‘stdout’
[17:03:06.465]   - Field: ‘earlySignal’
[17:03:06.465]   - Field: ‘lazy’
[17:03:06.465]   - Field: ‘state’
[17:03:06.465] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:06.465] - Launch lazy future ...
[17:03:06.465] Packages needed by the future expression (n = 0): <none>
[17:03:06.465] Packages needed by future strategies (n = 0): <none>
[17:03:06.466] {
[17:03:06.466]     {
[17:03:06.466]         {
[17:03:06.466]             ...future.startTime <- base::Sys.time()
[17:03:06.466]             {
[17:03:06.466]                 {
[17:03:06.466]                   {
[17:03:06.466]                     {
[17:03:06.466]                       base::local({
[17:03:06.466]                         has_future <- base::requireNamespace("future", 
[17:03:06.466]                           quietly = TRUE)
[17:03:06.466]                         if (has_future) {
[17:03:06.466]                           ns <- base::getNamespace("future")
[17:03:06.466]                           version <- ns[[".package"]][["version"]]
[17:03:06.466]                           if (is.null(version)) 
[17:03:06.466]                             version <- utils::packageVersion("future")
[17:03:06.466]                         }
[17:03:06.466]                         else {
[17:03:06.466]                           version <- NULL
[17:03:06.466]                         }
[17:03:06.466]                         if (!has_future || version < "1.8.0") {
[17:03:06.466]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:06.466]                             "", base::R.version$version.string), 
[17:03:06.466]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:06.466]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:06.466]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:06.466]                               "release", "version")], collapse = " "), 
[17:03:06.466]                             hostname = base::Sys.info()[["nodename"]])
[17:03:06.466]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:06.466]                             info)
[17:03:06.466]                           info <- base::paste(info, collapse = "; ")
[17:03:06.466]                           if (!has_future) {
[17:03:06.466]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:06.466]                               info)
[17:03:06.466]                           }
[17:03:06.466]                           else {
[17:03:06.466]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:06.466]                               info, version)
[17:03:06.466]                           }
[17:03:06.466]                           base::stop(msg)
[17:03:06.466]                         }
[17:03:06.466]                       })
[17:03:06.466]                     }
[17:03:06.466]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:06.466]                     base::options(mc.cores = 1L)
[17:03:06.466]                   }
[17:03:06.466]                   ...future.strategy.old <- future::plan("list")
[17:03:06.466]                   options(future.plan = NULL)
[17:03:06.466]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.466]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:06.466]                 }
[17:03:06.466]                 ...future.workdir <- getwd()
[17:03:06.466]             }
[17:03:06.466]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:06.466]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:06.466]         }
[17:03:06.466]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:06.466]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:06.466]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:06.466]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:06.466]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:06.466]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:06.466]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:06.466]             base::names(...future.oldOptions))
[17:03:06.466]     }
[17:03:06.466]     if (FALSE) {
[17:03:06.466]     }
[17:03:06.466]     else {
[17:03:06.466]         if (TRUE) {
[17:03:06.466]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:06.466]                 open = "w")
[17:03:06.466]         }
[17:03:06.466]         else {
[17:03:06.466]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:06.466]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:06.466]         }
[17:03:06.466]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:06.466]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:06.466]             base::sink(type = "output", split = FALSE)
[17:03:06.466]             base::close(...future.stdout)
[17:03:06.466]         }, add = TRUE)
[17:03:06.466]     }
[17:03:06.466]     ...future.frame <- base::sys.nframe()
[17:03:06.466]     ...future.conditions <- base::list()
[17:03:06.466]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:06.466]     if (FALSE) {
[17:03:06.466]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:06.466]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:06.466]     }
[17:03:06.466]     ...future.result <- base::tryCatch({
[17:03:06.466]         base::withCallingHandlers({
[17:03:06.466]             ...future.value <- base::withVisible(base::local({
[17:03:06.466]                 ...future.makeSendCondition <- base::local({
[17:03:06.466]                   sendCondition <- NULL
[17:03:06.466]                   function(frame = 1L) {
[17:03:06.466]                     if (is.function(sendCondition)) 
[17:03:06.466]                       return(sendCondition)
[17:03:06.466]                     ns <- getNamespace("parallel")
[17:03:06.466]                     if (exists("sendData", mode = "function", 
[17:03:06.466]                       envir = ns)) {
[17:03:06.466]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:06.466]                         envir = ns)
[17:03:06.466]                       envir <- sys.frame(frame)
[17:03:06.466]                       master <- NULL
[17:03:06.466]                       while (!identical(envir, .GlobalEnv) && 
[17:03:06.466]                         !identical(envir, emptyenv())) {
[17:03:06.466]                         if (exists("master", mode = "list", envir = envir, 
[17:03:06.466]                           inherits = FALSE)) {
[17:03:06.466]                           master <- get("master", mode = "list", 
[17:03:06.466]                             envir = envir, inherits = FALSE)
[17:03:06.466]                           if (inherits(master, c("SOCKnode", 
[17:03:06.466]                             "SOCK0node"))) {
[17:03:06.466]                             sendCondition <<- function(cond) {
[17:03:06.466]                               data <- list(type = "VALUE", value = cond, 
[17:03:06.466]                                 success = TRUE)
[17:03:06.466]                               parallel_sendData(master, data)
[17:03:06.466]                             }
[17:03:06.466]                             return(sendCondition)
[17:03:06.466]                           }
[17:03:06.466]                         }
[17:03:06.466]                         frame <- frame + 1L
[17:03:06.466]                         envir <- sys.frame(frame)
[17:03:06.466]                       }
[17:03:06.466]                     }
[17:03:06.466]                     sendCondition <<- function(cond) NULL
[17:03:06.466]                   }
[17:03:06.466]                 })
[17:03:06.466]                 withCallingHandlers({
[17:03:06.466]                   {
[17:03:06.466]                     gc()
[17:03:06.466]                   }
[17:03:06.466]                 }, immediateCondition = function(cond) {
[17:03:06.466]                   sendCondition <- ...future.makeSendCondition()
[17:03:06.466]                   sendCondition(cond)
[17:03:06.466]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.466]                   {
[17:03:06.466]                     inherits <- base::inherits
[17:03:06.466]                     invokeRestart <- base::invokeRestart
[17:03:06.466]                     is.null <- base::is.null
[17:03:06.466]                     muffled <- FALSE
[17:03:06.466]                     if (inherits(cond, "message")) {
[17:03:06.466]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:06.466]                       if (muffled) 
[17:03:06.466]                         invokeRestart("muffleMessage")
[17:03:06.466]                     }
[17:03:06.466]                     else if (inherits(cond, "warning")) {
[17:03:06.466]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:06.466]                       if (muffled) 
[17:03:06.466]                         invokeRestart("muffleWarning")
[17:03:06.466]                     }
[17:03:06.466]                     else if (inherits(cond, "condition")) {
[17:03:06.466]                       if (!is.null(pattern)) {
[17:03:06.466]                         computeRestarts <- base::computeRestarts
[17:03:06.466]                         grepl <- base::grepl
[17:03:06.466]                         restarts <- computeRestarts(cond)
[17:03:06.466]                         for (restart in restarts) {
[17:03:06.466]                           name <- restart$name
[17:03:06.466]                           if (is.null(name)) 
[17:03:06.466]                             next
[17:03:06.466]                           if (!grepl(pattern, name)) 
[17:03:06.466]                             next
[17:03:06.466]                           invokeRestart(restart)
[17:03:06.466]                           muffled <- TRUE
[17:03:06.466]                           break
[17:03:06.466]                         }
[17:03:06.466]                       }
[17:03:06.466]                     }
[17:03:06.466]                     invisible(muffled)
[17:03:06.466]                   }
[17:03:06.466]                   muffleCondition(cond)
[17:03:06.466]                 })
[17:03:06.466]             }))
[17:03:06.466]             future::FutureResult(value = ...future.value$value, 
[17:03:06.466]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.466]                   ...future.rng), globalenv = if (FALSE) 
[17:03:06.466]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:06.466]                     ...future.globalenv.names))
[17:03:06.466]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:06.466]         }, condition = base::local({
[17:03:06.466]             c <- base::c
[17:03:06.466]             inherits <- base::inherits
[17:03:06.466]             invokeRestart <- base::invokeRestart
[17:03:06.466]             length <- base::length
[17:03:06.466]             list <- base::list
[17:03:06.466]             seq.int <- base::seq.int
[17:03:06.466]             signalCondition <- base::signalCondition
[17:03:06.466]             sys.calls <- base::sys.calls
[17:03:06.466]             `[[` <- base::`[[`
[17:03:06.466]             `+` <- base::`+`
[17:03:06.466]             `<<-` <- base::`<<-`
[17:03:06.466]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:06.466]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:06.466]                   3L)]
[17:03:06.466]             }
[17:03:06.466]             function(cond) {
[17:03:06.466]                 is_error <- inherits(cond, "error")
[17:03:06.466]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:06.466]                   NULL)
[17:03:06.466]                 if (is_error) {
[17:03:06.466]                   sessionInformation <- function() {
[17:03:06.466]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:06.466]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:06.466]                       search = base::search(), system = base::Sys.info())
[17:03:06.466]                   }
[17:03:06.466]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.466]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:06.466]                     cond$call), session = sessionInformation(), 
[17:03:06.466]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:06.466]                   signalCondition(cond)
[17:03:06.466]                 }
[17:03:06.466]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:06.466]                 "immediateCondition"))) {
[17:03:06.466]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:06.466]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.466]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:06.466]                   if (TRUE && !signal) {
[17:03:06.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.466]                     {
[17:03:06.466]                       inherits <- base::inherits
[17:03:06.466]                       invokeRestart <- base::invokeRestart
[17:03:06.466]                       is.null <- base::is.null
[17:03:06.466]                       muffled <- FALSE
[17:03:06.466]                       if (inherits(cond, "message")) {
[17:03:06.466]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.466]                         if (muffled) 
[17:03:06.466]                           invokeRestart("muffleMessage")
[17:03:06.466]                       }
[17:03:06.466]                       else if (inherits(cond, "warning")) {
[17:03:06.466]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.466]                         if (muffled) 
[17:03:06.466]                           invokeRestart("muffleWarning")
[17:03:06.466]                       }
[17:03:06.466]                       else if (inherits(cond, "condition")) {
[17:03:06.466]                         if (!is.null(pattern)) {
[17:03:06.466]                           computeRestarts <- base::computeRestarts
[17:03:06.466]                           grepl <- base::grepl
[17:03:06.466]                           restarts <- computeRestarts(cond)
[17:03:06.466]                           for (restart in restarts) {
[17:03:06.466]                             name <- restart$name
[17:03:06.466]                             if (is.null(name)) 
[17:03:06.466]                               next
[17:03:06.466]                             if (!grepl(pattern, name)) 
[17:03:06.466]                               next
[17:03:06.466]                             invokeRestart(restart)
[17:03:06.466]                             muffled <- TRUE
[17:03:06.466]                             break
[17:03:06.466]                           }
[17:03:06.466]                         }
[17:03:06.466]                       }
[17:03:06.466]                       invisible(muffled)
[17:03:06.466]                     }
[17:03:06.466]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.466]                   }
[17:03:06.466]                 }
[17:03:06.466]                 else {
[17:03:06.466]                   if (TRUE) {
[17:03:06.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.466]                     {
[17:03:06.466]                       inherits <- base::inherits
[17:03:06.466]                       invokeRestart <- base::invokeRestart
[17:03:06.466]                       is.null <- base::is.null
[17:03:06.466]                       muffled <- FALSE
[17:03:06.466]                       if (inherits(cond, "message")) {
[17:03:06.466]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.466]                         if (muffled) 
[17:03:06.466]                           invokeRestart("muffleMessage")
[17:03:06.466]                       }
[17:03:06.466]                       else if (inherits(cond, "warning")) {
[17:03:06.466]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.466]                         if (muffled) 
[17:03:06.466]                           invokeRestart("muffleWarning")
[17:03:06.466]                       }
[17:03:06.466]                       else if (inherits(cond, "condition")) {
[17:03:06.466]                         if (!is.null(pattern)) {
[17:03:06.466]                           computeRestarts <- base::computeRestarts
[17:03:06.466]                           grepl <- base::grepl
[17:03:06.466]                           restarts <- computeRestarts(cond)
[17:03:06.466]                           for (restart in restarts) {
[17:03:06.466]                             name <- restart$name
[17:03:06.466]                             if (is.null(name)) 
[17:03:06.466]                               next
[17:03:06.466]                             if (!grepl(pattern, name)) 
[17:03:06.466]                               next
[17:03:06.466]                             invokeRestart(restart)
[17:03:06.466]                             muffled <- TRUE
[17:03:06.466]                             break
[17:03:06.466]                           }
[17:03:06.466]                         }
[17:03:06.466]                       }
[17:03:06.466]                       invisible(muffled)
[17:03:06.466]                     }
[17:03:06.466]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.466]                   }
[17:03:06.466]                 }
[17:03:06.466]             }
[17:03:06.466]         }))
[17:03:06.466]     }, error = function(ex) {
[17:03:06.466]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:06.466]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.466]                 ...future.rng), started = ...future.startTime, 
[17:03:06.466]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:06.466]             version = "1.8"), class = "FutureResult")
[17:03:06.466]     }, finally = {
[17:03:06.466]         if (!identical(...future.workdir, getwd())) 
[17:03:06.466]             setwd(...future.workdir)
[17:03:06.466]         {
[17:03:06.466]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:06.466]                 ...future.oldOptions$nwarnings <- NULL
[17:03:06.466]             }
[17:03:06.466]             base::options(...future.oldOptions)
[17:03:06.466]             if (.Platform$OS.type == "windows") {
[17:03:06.466]                 old_names <- names(...future.oldEnvVars)
[17:03:06.466]                 envs <- base::Sys.getenv()
[17:03:06.466]                 names <- names(envs)
[17:03:06.466]                 common <- intersect(names, old_names)
[17:03:06.466]                 added <- setdiff(names, old_names)
[17:03:06.466]                 removed <- setdiff(old_names, names)
[17:03:06.466]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:06.466]                   envs[common]]
[17:03:06.466]                 NAMES <- toupper(changed)
[17:03:06.466]                 args <- list()
[17:03:06.466]                 for (kk in seq_along(NAMES)) {
[17:03:06.466]                   name <- changed[[kk]]
[17:03:06.466]                   NAME <- NAMES[[kk]]
[17:03:06.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.466]                     next
[17:03:06.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.466]                 }
[17:03:06.466]                 NAMES <- toupper(added)
[17:03:06.466]                 for (kk in seq_along(NAMES)) {
[17:03:06.466]                   name <- added[[kk]]
[17:03:06.466]                   NAME <- NAMES[[kk]]
[17:03:06.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.466]                     next
[17:03:06.466]                   args[[name]] <- ""
[17:03:06.466]                 }
[17:03:06.466]                 NAMES <- toupper(removed)
[17:03:06.466]                 for (kk in seq_along(NAMES)) {
[17:03:06.466]                   name <- removed[[kk]]
[17:03:06.466]                   NAME <- NAMES[[kk]]
[17:03:06.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.466]                     next
[17:03:06.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.466]                 }
[17:03:06.466]                 if (length(args) > 0) 
[17:03:06.466]                   base::do.call(base::Sys.setenv, args = args)
[17:03:06.466]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:06.466]             }
[17:03:06.466]             else {
[17:03:06.466]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:06.466]             }
[17:03:06.466]             {
[17:03:06.466]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:06.466]                   0L) {
[17:03:06.466]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:06.466]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:06.466]                   base::options(opts)
[17:03:06.466]                 }
[17:03:06.466]                 {
[17:03:06.466]                   {
[17:03:06.466]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:06.466]                     NULL
[17:03:06.466]                   }
[17:03:06.466]                   options(future.plan = NULL)
[17:03:06.466]                   if (is.na(NA_character_)) 
[17:03:06.466]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.466]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:06.466]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:06.466]                     .init = FALSE)
[17:03:06.466]                 }
[17:03:06.466]             }
[17:03:06.466]         }
[17:03:06.466]     })
[17:03:06.466]     if (TRUE) {
[17:03:06.466]         base::sink(type = "output", split = FALSE)
[17:03:06.466]         if (TRUE) {
[17:03:06.466]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:06.466]         }
[17:03:06.466]         else {
[17:03:06.466]             ...future.result["stdout"] <- base::list(NULL)
[17:03:06.466]         }
[17:03:06.466]         base::close(...future.stdout)
[17:03:06.466]         ...future.stdout <- NULL
[17:03:06.466]     }
[17:03:06.466]     ...future.result$conditions <- ...future.conditions
[17:03:06.466]     ...future.result$finished <- base::Sys.time()
[17:03:06.466]     ...future.result
[17:03:06.466] }
[17:03:06.469] MultisessionFuture started
[17:03:06.469] - Launch lazy future ... done
[17:03:06.469] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:03:06.469] result() for ClusterFuture ...
[17:03:06.469] receiveMessageFromWorker() for ClusterFuture ...
[17:03:06.470] - Validating connection of MultisessionFuture
[17:03:06.540] - received message: FutureResult
[17:03:06.541] - Received FutureResult
[17:03:06.541] - Erased future from FutureRegistry
[17:03:06.541] result() for ClusterFuture ...
[17:03:06.541] - result already collected: FutureResult
[17:03:06.541] result() for ClusterFuture ... done
[17:03:06.541] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:06.541] result() for ClusterFuture ... done
[17:03:06.541] result() for ClusterFuture ...
[17:03:06.541] - result already collected: FutureResult
[17:03:06.541] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 407154 21.8     899071  48.1   692222  37.0
Vcells 729747  5.6   13476992 102.9 15806168 120.6
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[17:03:06.542] plan(): Setting new future strategy stack:
[17:03:06.542] List of future strategies:
[17:03:06.542] 1. multisession:
[17:03:06.542]    - args: function (..., workers = 2L, envir = parent.frame())
[17:03:06.542]    - tweaked: TRUE
[17:03:06.542]    - call: plan(multisession, workers = 2L)
[17:03:06.543] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:06.543] multisession:
[17:03:06.543] - args: function (..., workers = 2L, envir = parent.frame())
[17:03:06.543] - tweaked: TRUE
[17:03:06.543] - call: plan(multisession, workers = 2L)
[17:03:06.544] getGlobalsAndPackages() ...
[17:03:06.544] Not searching for globals
[17:03:06.544] - globals: [0] <none>
[17:03:06.544] getGlobalsAndPackages() ... DONE
[17:03:06.545] [local output] makeClusterPSOCK() ...
[17:03:06.550] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:06.550] [local output] Base port: 11712
[17:03:06.551] [local output] Getting setup options for 2 cluster nodes ...
[17:03:06.551] [local output]  - Node 1 of 2 ...
[17:03:06.551] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:06.552] [local output] Rscript port: 11712

[17:03:06.553] [local output]  - Node 2 of 2 ...
[17:03:06.554] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:06.554] [local output] Rscript port: 11712

[17:03:06.555] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:06.555] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:06.555] [local output] Setting up PSOCK nodes in parallel
[17:03:06.556] List of 36
[17:03:06.556]  $ worker          : chr "localhost"
[17:03:06.556]   ..- attr(*, "localhost")= logi TRUE
[17:03:06.556]  $ master          : chr "localhost"
[17:03:06.556]  $ port            : int 11712
[17:03:06.556]  $ connectTimeout  : num 120
[17:03:06.556]  $ timeout         : num 2592000
[17:03:06.556]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:06.556]  $ homogeneous     : logi TRUE
[17:03:06.556]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:06.556]  $ rscript_envs    : NULL
[17:03:06.556]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:06.556]  $ rscript_startup : NULL
[17:03:06.556]  $ rscript_sh      : chr "sh"
[17:03:06.556]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:06.556]  $ methods         : logi TRUE
[17:03:06.556]  $ socketOptions   : chr "no-delay"
[17:03:06.556]  $ useXDR          : logi FALSE
[17:03:06.556]  $ outfile         : chr "/dev/null"
[17:03:06.556]  $ renice          : int NA
[17:03:06.556]  $ rshcmd          : NULL
[17:03:06.556]  $ user            : chr(0) 
[17:03:06.556]  $ revtunnel       : logi FALSE
[17:03:06.556]  $ rshlogfile      : NULL
[17:03:06.556]  $ rshopts         : chr(0) 
[17:03:06.556]  $ rank            : int 1
[17:03:06.556]  $ manual          : logi FALSE
[17:03:06.556]  $ dryrun          : logi FALSE
[17:03:06.556]  $ quiet           : logi FALSE
[17:03:06.556]  $ setup_strategy  : chr "parallel"
[17:03:06.556]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:06.556]  $ pidfile         : chr "/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b244435f0cb2.pid"
[17:03:06.556]  $ rshcmd_label    : NULL
[17:03:06.556]  $ rsh_call        : NULL
[17:03:06.556]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:06.556]  $ localMachine    : logi TRUE
[17:03:06.556]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:06.556]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:06.556]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:06.556]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:06.556]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:06.556]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:06.556]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:06.556]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:06.556]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:06.556]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:06.556]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:06.556]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:06.556]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:06.556]  $ arguments       :List of 28
[17:03:06.556]   ..$ worker          : chr "localhost"
[17:03:06.556]   ..$ master          : NULL
[17:03:06.556]   ..$ port            : int 11712
[17:03:06.556]   ..$ connectTimeout  : num 120
[17:03:06.556]   ..$ timeout         : num 2592000
[17:03:06.556]   ..$ rscript         : NULL
[17:03:06.556]   ..$ homogeneous     : NULL
[17:03:06.556]   ..$ rscript_args    : NULL
[17:03:06.556]   ..$ rscript_envs    : NULL
[17:03:06.556]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:06.556]   ..$ rscript_startup : NULL
[17:03:06.556]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:06.556]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:06.556]   ..$ methods         : logi TRUE
[17:03:06.556]   ..$ socketOptions   : chr "no-delay"
[17:03:06.556]   ..$ useXDR          : logi FALSE
[17:03:06.556]   ..$ outfile         : chr "/dev/null"
[17:03:06.556]   ..$ renice          : int NA
[17:03:06.556]   ..$ rshcmd          : NULL
[17:03:06.556]   ..$ user            : NULL
[17:03:06.556]   ..$ revtunnel       : logi NA
[17:03:06.556]   ..$ rshlogfile      : NULL
[17:03:06.556]   ..$ rshopts         : NULL
[17:03:06.556]   ..$ rank            : int 1
[17:03:06.556]   ..$ manual          : logi FALSE
[17:03:06.556]   ..$ dryrun          : logi FALSE
[17:03:06.556]   ..$ quiet           : logi FALSE
[17:03:06.556]   ..$ setup_strategy  : chr "parallel"
[17:03:06.556]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:06.576] [local output] System call to launch all workers:
[17:03:06.576] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkXj9QF/worker.rank=1.parallelly.parent=45636.b244435f0cb2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11712 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:06.576] [local output] Starting PSOCK main server
[17:03:06.578] [local output] Workers launched
[17:03:06.578] [local output] Waiting for workers to connect back
[17:03:06.578]  - [local output] 0 workers out of 2 ready
[17:03:06.816]  - [local output] 0 workers out of 2 ready
[17:03:06.817]  - [local output] 1 workers out of 2 ready
[17:03:06.831]  - [local output] 1 workers out of 2 ready
[17:03:06.832]  - [local output] 2 workers out of 2 ready
[17:03:06.832] [local output] Launching of workers completed
[17:03:06.832] [local output] Collecting session information from workers
[17:03:06.833] [local output]  - Worker #1 of 2
[17:03:06.833] [local output]  - Worker #2 of 2
[17:03:06.834] [local output] makeClusterPSOCK() ... done
[17:03:06.844] Packages needed by the future expression (n = 0): <none>
[17:03:06.844] Packages needed by future strategies (n = 0): <none>
[17:03:06.845] {
[17:03:06.845]     {
[17:03:06.845]         {
[17:03:06.845]             ...future.startTime <- base::Sys.time()
[17:03:06.845]             {
[17:03:06.845]                 {
[17:03:06.845]                   {
[17:03:06.845]                     {
[17:03:06.845]                       base::local({
[17:03:06.845]                         has_future <- base::requireNamespace("future", 
[17:03:06.845]                           quietly = TRUE)
[17:03:06.845]                         if (has_future) {
[17:03:06.845]                           ns <- base::getNamespace("future")
[17:03:06.845]                           version <- ns[[".package"]][["version"]]
[17:03:06.845]                           if (is.null(version)) 
[17:03:06.845]                             version <- utils::packageVersion("future")
[17:03:06.845]                         }
[17:03:06.845]                         else {
[17:03:06.845]                           version <- NULL
[17:03:06.845]                         }
[17:03:06.845]                         if (!has_future || version < "1.8.0") {
[17:03:06.845]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:06.845]                             "", base::R.version$version.string), 
[17:03:06.845]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:06.845]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:06.845]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:06.845]                               "release", "version")], collapse = " "), 
[17:03:06.845]                             hostname = base::Sys.info()[["nodename"]])
[17:03:06.845]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:06.845]                             info)
[17:03:06.845]                           info <- base::paste(info, collapse = "; ")
[17:03:06.845]                           if (!has_future) {
[17:03:06.845]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:06.845]                               info)
[17:03:06.845]                           }
[17:03:06.845]                           else {
[17:03:06.845]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:06.845]                               info, version)
[17:03:06.845]                           }
[17:03:06.845]                           base::stop(msg)
[17:03:06.845]                         }
[17:03:06.845]                       })
[17:03:06.845]                     }
[17:03:06.845]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:06.845]                     base::options(mc.cores = 1L)
[17:03:06.845]                   }
[17:03:06.845]                   ...future.strategy.old <- future::plan("list")
[17:03:06.845]                   options(future.plan = NULL)
[17:03:06.845]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.845]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:06.845]                 }
[17:03:06.845]                 ...future.workdir <- getwd()
[17:03:06.845]             }
[17:03:06.845]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:06.845]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:06.845]         }
[17:03:06.845]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:06.845]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:06.845]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:06.845]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:06.845]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:06.845]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:06.845]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:06.845]             base::names(...future.oldOptions))
[17:03:06.845]     }
[17:03:06.845]     if (FALSE) {
[17:03:06.845]     }
[17:03:06.845]     else {
[17:03:06.845]         if (TRUE) {
[17:03:06.845]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:06.845]                 open = "w")
[17:03:06.845]         }
[17:03:06.845]         else {
[17:03:06.845]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:06.845]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:06.845]         }
[17:03:06.845]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:06.845]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:06.845]             base::sink(type = "output", split = FALSE)
[17:03:06.845]             base::close(...future.stdout)
[17:03:06.845]         }, add = TRUE)
[17:03:06.845]     }
[17:03:06.845]     ...future.frame <- base::sys.nframe()
[17:03:06.845]     ...future.conditions <- base::list()
[17:03:06.845]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:06.845]     if (FALSE) {
[17:03:06.845]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:06.845]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:06.845]     }
[17:03:06.845]     ...future.result <- base::tryCatch({
[17:03:06.845]         base::withCallingHandlers({
[17:03:06.845]             ...future.value <- base::withVisible(base::local({
[17:03:06.845]                 ...future.makeSendCondition <- base::local({
[17:03:06.845]                   sendCondition <- NULL
[17:03:06.845]                   function(frame = 1L) {
[17:03:06.845]                     if (is.function(sendCondition)) 
[17:03:06.845]                       return(sendCondition)
[17:03:06.845]                     ns <- getNamespace("parallel")
[17:03:06.845]                     if (exists("sendData", mode = "function", 
[17:03:06.845]                       envir = ns)) {
[17:03:06.845]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:06.845]                         envir = ns)
[17:03:06.845]                       envir <- sys.frame(frame)
[17:03:06.845]                       master <- NULL
[17:03:06.845]                       while (!identical(envir, .GlobalEnv) && 
[17:03:06.845]                         !identical(envir, emptyenv())) {
[17:03:06.845]                         if (exists("master", mode = "list", envir = envir, 
[17:03:06.845]                           inherits = FALSE)) {
[17:03:06.845]                           master <- get("master", mode = "list", 
[17:03:06.845]                             envir = envir, inherits = FALSE)
[17:03:06.845]                           if (inherits(master, c("SOCKnode", 
[17:03:06.845]                             "SOCK0node"))) {
[17:03:06.845]                             sendCondition <<- function(cond) {
[17:03:06.845]                               data <- list(type = "VALUE", value = cond, 
[17:03:06.845]                                 success = TRUE)
[17:03:06.845]                               parallel_sendData(master, data)
[17:03:06.845]                             }
[17:03:06.845]                             return(sendCondition)
[17:03:06.845]                           }
[17:03:06.845]                         }
[17:03:06.845]                         frame <- frame + 1L
[17:03:06.845]                         envir <- sys.frame(frame)
[17:03:06.845]                       }
[17:03:06.845]                     }
[17:03:06.845]                     sendCondition <<- function(cond) NULL
[17:03:06.845]                   }
[17:03:06.845]                 })
[17:03:06.845]                 withCallingHandlers({
[17:03:06.845]                   NA
[17:03:06.845]                 }, immediateCondition = function(cond) {
[17:03:06.845]                   sendCondition <- ...future.makeSendCondition()
[17:03:06.845]                   sendCondition(cond)
[17:03:06.845]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.845]                   {
[17:03:06.845]                     inherits <- base::inherits
[17:03:06.845]                     invokeRestart <- base::invokeRestart
[17:03:06.845]                     is.null <- base::is.null
[17:03:06.845]                     muffled <- FALSE
[17:03:06.845]                     if (inherits(cond, "message")) {
[17:03:06.845]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:06.845]                       if (muffled) 
[17:03:06.845]                         invokeRestart("muffleMessage")
[17:03:06.845]                     }
[17:03:06.845]                     else if (inherits(cond, "warning")) {
[17:03:06.845]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:06.845]                       if (muffled) 
[17:03:06.845]                         invokeRestart("muffleWarning")
[17:03:06.845]                     }
[17:03:06.845]                     else if (inherits(cond, "condition")) {
[17:03:06.845]                       if (!is.null(pattern)) {
[17:03:06.845]                         computeRestarts <- base::computeRestarts
[17:03:06.845]                         grepl <- base::grepl
[17:03:06.845]                         restarts <- computeRestarts(cond)
[17:03:06.845]                         for (restart in restarts) {
[17:03:06.845]                           name <- restart$name
[17:03:06.845]                           if (is.null(name)) 
[17:03:06.845]                             next
[17:03:06.845]                           if (!grepl(pattern, name)) 
[17:03:06.845]                             next
[17:03:06.845]                           invokeRestart(restart)
[17:03:06.845]                           muffled <- TRUE
[17:03:06.845]                           break
[17:03:06.845]                         }
[17:03:06.845]                       }
[17:03:06.845]                     }
[17:03:06.845]                     invisible(muffled)
[17:03:06.845]                   }
[17:03:06.845]                   muffleCondition(cond)
[17:03:06.845]                 })
[17:03:06.845]             }))
[17:03:06.845]             future::FutureResult(value = ...future.value$value, 
[17:03:06.845]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.845]                   ...future.rng), globalenv = if (FALSE) 
[17:03:06.845]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:06.845]                     ...future.globalenv.names))
[17:03:06.845]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:06.845]         }, condition = base::local({
[17:03:06.845]             c <- base::c
[17:03:06.845]             inherits <- base::inherits
[17:03:06.845]             invokeRestart <- base::invokeRestart
[17:03:06.845]             length <- base::length
[17:03:06.845]             list <- base::list
[17:03:06.845]             seq.int <- base::seq.int
[17:03:06.845]             signalCondition <- base::signalCondition
[17:03:06.845]             sys.calls <- base::sys.calls
[17:03:06.845]             `[[` <- base::`[[`
[17:03:06.845]             `+` <- base::`+`
[17:03:06.845]             `<<-` <- base::`<<-`
[17:03:06.845]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:06.845]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:06.845]                   3L)]
[17:03:06.845]             }
[17:03:06.845]             function(cond) {
[17:03:06.845]                 is_error <- inherits(cond, "error")
[17:03:06.845]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:06.845]                   NULL)
[17:03:06.845]                 if (is_error) {
[17:03:06.845]                   sessionInformation <- function() {
[17:03:06.845]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:06.845]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:06.845]                       search = base::search(), system = base::Sys.info())
[17:03:06.845]                   }
[17:03:06.845]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.845]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:06.845]                     cond$call), session = sessionInformation(), 
[17:03:06.845]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:06.845]                   signalCondition(cond)
[17:03:06.845]                 }
[17:03:06.845]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:06.845]                 "immediateCondition"))) {
[17:03:06.845]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:06.845]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.845]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:06.845]                   if (TRUE && !signal) {
[17:03:06.845]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.845]                     {
[17:03:06.845]                       inherits <- base::inherits
[17:03:06.845]                       invokeRestart <- base::invokeRestart
[17:03:06.845]                       is.null <- base::is.null
[17:03:06.845]                       muffled <- FALSE
[17:03:06.845]                       if (inherits(cond, "message")) {
[17:03:06.845]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.845]                         if (muffled) 
[17:03:06.845]                           invokeRestart("muffleMessage")
[17:03:06.845]                       }
[17:03:06.845]                       else if (inherits(cond, "warning")) {
[17:03:06.845]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.845]                         if (muffled) 
[17:03:06.845]                           invokeRestart("muffleWarning")
[17:03:06.845]                       }
[17:03:06.845]                       else if (inherits(cond, "condition")) {
[17:03:06.845]                         if (!is.null(pattern)) {
[17:03:06.845]                           computeRestarts <- base::computeRestarts
[17:03:06.845]                           grepl <- base::grepl
[17:03:06.845]                           restarts <- computeRestarts(cond)
[17:03:06.845]                           for (restart in restarts) {
[17:03:06.845]                             name <- restart$name
[17:03:06.845]                             if (is.null(name)) 
[17:03:06.845]                               next
[17:03:06.845]                             if (!grepl(pattern, name)) 
[17:03:06.845]                               next
[17:03:06.845]                             invokeRestart(restart)
[17:03:06.845]                             muffled <- TRUE
[17:03:06.845]                             break
[17:03:06.845]                           }
[17:03:06.845]                         }
[17:03:06.845]                       }
[17:03:06.845]                       invisible(muffled)
[17:03:06.845]                     }
[17:03:06.845]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.845]                   }
[17:03:06.845]                 }
[17:03:06.845]                 else {
[17:03:06.845]                   if (TRUE) {
[17:03:06.845]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.845]                     {
[17:03:06.845]                       inherits <- base::inherits
[17:03:06.845]                       invokeRestart <- base::invokeRestart
[17:03:06.845]                       is.null <- base::is.null
[17:03:06.845]                       muffled <- FALSE
[17:03:06.845]                       if (inherits(cond, "message")) {
[17:03:06.845]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.845]                         if (muffled) 
[17:03:06.845]                           invokeRestart("muffleMessage")
[17:03:06.845]                       }
[17:03:06.845]                       else if (inherits(cond, "warning")) {
[17:03:06.845]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.845]                         if (muffled) 
[17:03:06.845]                           invokeRestart("muffleWarning")
[17:03:06.845]                       }
[17:03:06.845]                       else if (inherits(cond, "condition")) {
[17:03:06.845]                         if (!is.null(pattern)) {
[17:03:06.845]                           computeRestarts <- base::computeRestarts
[17:03:06.845]                           grepl <- base::grepl
[17:03:06.845]                           restarts <- computeRestarts(cond)
[17:03:06.845]                           for (restart in restarts) {
[17:03:06.845]                             name <- restart$name
[17:03:06.845]                             if (is.null(name)) 
[17:03:06.845]                               next
[17:03:06.845]                             if (!grepl(pattern, name)) 
[17:03:06.845]                               next
[17:03:06.845]                             invokeRestart(restart)
[17:03:06.845]                             muffled <- TRUE
[17:03:06.845]                             break
[17:03:06.845]                           }
[17:03:06.845]                         }
[17:03:06.845]                       }
[17:03:06.845]                       invisible(muffled)
[17:03:06.845]                     }
[17:03:06.845]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.845]                   }
[17:03:06.845]                 }
[17:03:06.845]             }
[17:03:06.845]         }))
[17:03:06.845]     }, error = function(ex) {
[17:03:06.845]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:06.845]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.845]                 ...future.rng), started = ...future.startTime, 
[17:03:06.845]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:06.845]             version = "1.8"), class = "FutureResult")
[17:03:06.845]     }, finally = {
[17:03:06.845]         if (!identical(...future.workdir, getwd())) 
[17:03:06.845]             setwd(...future.workdir)
[17:03:06.845]         {
[17:03:06.845]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:06.845]                 ...future.oldOptions$nwarnings <- NULL
[17:03:06.845]             }
[17:03:06.845]             base::options(...future.oldOptions)
[17:03:06.845]             if (.Platform$OS.type == "windows") {
[17:03:06.845]                 old_names <- names(...future.oldEnvVars)
[17:03:06.845]                 envs <- base::Sys.getenv()
[17:03:06.845]                 names <- names(envs)
[17:03:06.845]                 common <- intersect(names, old_names)
[17:03:06.845]                 added <- setdiff(names, old_names)
[17:03:06.845]                 removed <- setdiff(old_names, names)
[17:03:06.845]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:06.845]                   envs[common]]
[17:03:06.845]                 NAMES <- toupper(changed)
[17:03:06.845]                 args <- list()
[17:03:06.845]                 for (kk in seq_along(NAMES)) {
[17:03:06.845]                   name <- changed[[kk]]
[17:03:06.845]                   NAME <- NAMES[[kk]]
[17:03:06.845]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.845]                     next
[17:03:06.845]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.845]                 }
[17:03:06.845]                 NAMES <- toupper(added)
[17:03:06.845]                 for (kk in seq_along(NAMES)) {
[17:03:06.845]                   name <- added[[kk]]
[17:03:06.845]                   NAME <- NAMES[[kk]]
[17:03:06.845]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.845]                     next
[17:03:06.845]                   args[[name]] <- ""
[17:03:06.845]                 }
[17:03:06.845]                 NAMES <- toupper(removed)
[17:03:06.845]                 for (kk in seq_along(NAMES)) {
[17:03:06.845]                   name <- removed[[kk]]
[17:03:06.845]                   NAME <- NAMES[[kk]]
[17:03:06.845]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.845]                     next
[17:03:06.845]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.845]                 }
[17:03:06.845]                 if (length(args) > 0) 
[17:03:06.845]                   base::do.call(base::Sys.setenv, args = args)
[17:03:06.845]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:06.845]             }
[17:03:06.845]             else {
[17:03:06.845]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:06.845]             }
[17:03:06.845]             {
[17:03:06.845]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:06.845]                   0L) {
[17:03:06.845]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:06.845]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:06.845]                   base::options(opts)
[17:03:06.845]                 }
[17:03:06.845]                 {
[17:03:06.845]                   {
[17:03:06.845]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:06.845]                     NULL
[17:03:06.845]                   }
[17:03:06.845]                   options(future.plan = NULL)
[17:03:06.845]                   if (is.na(NA_character_)) 
[17:03:06.845]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.845]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:06.845]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:06.845]                     .init = FALSE)
[17:03:06.845]                 }
[17:03:06.845]             }
[17:03:06.845]         }
[17:03:06.845]     })
[17:03:06.845]     if (TRUE) {
[17:03:06.845]         base::sink(type = "output", split = FALSE)
[17:03:06.845]         if (TRUE) {
[17:03:06.845]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:06.845]         }
[17:03:06.845]         else {
[17:03:06.845]             ...future.result["stdout"] <- base::list(NULL)
[17:03:06.845]         }
[17:03:06.845]         base::close(...future.stdout)
[17:03:06.845]         ...future.stdout <- NULL
[17:03:06.845]     }
[17:03:06.845]     ...future.result$conditions <- ...future.conditions
[17:03:06.845]     ...future.result$finished <- base::Sys.time()
[17:03:06.845]     ...future.result
[17:03:06.845] }
[17:03:06.898] MultisessionFuture started
[17:03:06.898] result() for ClusterFuture ...
[17:03:06.898] receiveMessageFromWorker() for ClusterFuture ...
[17:03:06.899] - Validating connection of MultisessionFuture
[17:03:06.931] - received message: FutureResult
[17:03:06.931] - Received FutureResult
[17:03:06.931] - Erased future from FutureRegistry
[17:03:06.931] result() for ClusterFuture ...
[17:03:06.931] - result already collected: FutureResult
[17:03:06.931] result() for ClusterFuture ... done
[17:03:06.932] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:06.932] result() for ClusterFuture ... done
[17:03:06.932] result() for ClusterFuture ...
[17:03:06.932] - result already collected: FutureResult
[17:03:06.932] result() for ClusterFuture ... done
[17:03:06.932] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:06.932] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[17:03:06.932] getGlobalsAndPackages() ...
[17:03:06.932] Searching for globals...
[17:03:06.933] 
[17:03:06.933] Searching for globals ... DONE
[17:03:06.933] - globals: [0] <none>
[17:03:06.933] getGlobalsAndPackages() ... DONE
[17:03:06.933] run() for ‘Future’ ...
[17:03:06.933] - state: ‘created’
[17:03:06.934] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:06.944] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:06.944] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:06.944]   - Field: ‘node’
[17:03:06.944]   - Field: ‘label’
[17:03:06.944]   - Field: ‘local’
[17:03:06.945]   - Field: ‘owner’
[17:03:06.945]   - Field: ‘envir’
[17:03:06.945]   - Field: ‘workers’
[17:03:06.945]   - Field: ‘packages’
[17:03:06.945]   - Field: ‘gc’
[17:03:06.945]   - Field: ‘conditions’
[17:03:06.945]   - Field: ‘persistent’
[17:03:06.945]   - Field: ‘expr’
[17:03:06.945]   - Field: ‘uuid’
[17:03:06.945]   - Field: ‘seed’
[17:03:06.945]   - Field: ‘version’
[17:03:06.946]   - Field: ‘result’
[17:03:06.946]   - Field: ‘asynchronous’
[17:03:06.946]   - Field: ‘calls’
[17:03:06.946]   - Field: ‘globals’
[17:03:06.946]   - Field: ‘stdout’
[17:03:06.946]   - Field: ‘earlySignal’
[17:03:06.946]   - Field: ‘lazy’
[17:03:06.946]   - Field: ‘state’
[17:03:06.946] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:06.946] - Launch lazy future ...
[17:03:06.947] Packages needed by the future expression (n = 0): <none>
[17:03:06.947] Packages needed by future strategies (n = 0): <none>
[17:03:06.947] {
[17:03:06.947]     {
[17:03:06.947]         {
[17:03:06.947]             ...future.startTime <- base::Sys.time()
[17:03:06.947]             {
[17:03:06.947]                 {
[17:03:06.947]                   {
[17:03:06.947]                     {
[17:03:06.947]                       base::local({
[17:03:06.947]                         has_future <- base::requireNamespace("future", 
[17:03:06.947]                           quietly = TRUE)
[17:03:06.947]                         if (has_future) {
[17:03:06.947]                           ns <- base::getNamespace("future")
[17:03:06.947]                           version <- ns[[".package"]][["version"]]
[17:03:06.947]                           if (is.null(version)) 
[17:03:06.947]                             version <- utils::packageVersion("future")
[17:03:06.947]                         }
[17:03:06.947]                         else {
[17:03:06.947]                           version <- NULL
[17:03:06.947]                         }
[17:03:06.947]                         if (!has_future || version < "1.8.0") {
[17:03:06.947]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:06.947]                             "", base::R.version$version.string), 
[17:03:06.947]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:06.947]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:06.947]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:06.947]                               "release", "version")], collapse = " "), 
[17:03:06.947]                             hostname = base::Sys.info()[["nodename"]])
[17:03:06.947]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:06.947]                             info)
[17:03:06.947]                           info <- base::paste(info, collapse = "; ")
[17:03:06.947]                           if (!has_future) {
[17:03:06.947]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:06.947]                               info)
[17:03:06.947]                           }
[17:03:06.947]                           else {
[17:03:06.947]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:06.947]                               info, version)
[17:03:06.947]                           }
[17:03:06.947]                           base::stop(msg)
[17:03:06.947]                         }
[17:03:06.947]                       })
[17:03:06.947]                     }
[17:03:06.947]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:06.947]                     base::options(mc.cores = 1L)
[17:03:06.947]                   }
[17:03:06.947]                   ...future.strategy.old <- future::plan("list")
[17:03:06.947]                   options(future.plan = NULL)
[17:03:06.947]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.947]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:06.947]                 }
[17:03:06.947]                 ...future.workdir <- getwd()
[17:03:06.947]             }
[17:03:06.947]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:06.947]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:06.947]         }
[17:03:06.947]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:06.947]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:06.947]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:06.947]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:06.947]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:06.947]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:06.947]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:06.947]             base::names(...future.oldOptions))
[17:03:06.947]     }
[17:03:06.947]     if (FALSE) {
[17:03:06.947]     }
[17:03:06.947]     else {
[17:03:06.947]         if (TRUE) {
[17:03:06.947]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:06.947]                 open = "w")
[17:03:06.947]         }
[17:03:06.947]         else {
[17:03:06.947]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:06.947]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:06.947]         }
[17:03:06.947]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:06.947]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:06.947]             base::sink(type = "output", split = FALSE)
[17:03:06.947]             base::close(...future.stdout)
[17:03:06.947]         }, add = TRUE)
[17:03:06.947]     }
[17:03:06.947]     ...future.frame <- base::sys.nframe()
[17:03:06.947]     ...future.conditions <- base::list()
[17:03:06.947]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:06.947]     if (FALSE) {
[17:03:06.947]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:06.947]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:06.947]     }
[17:03:06.947]     ...future.result <- base::tryCatch({
[17:03:06.947]         base::withCallingHandlers({
[17:03:06.947]             ...future.value <- base::withVisible(base::local({
[17:03:06.947]                 ...future.makeSendCondition <- base::local({
[17:03:06.947]                   sendCondition <- NULL
[17:03:06.947]                   function(frame = 1L) {
[17:03:06.947]                     if (is.function(sendCondition)) 
[17:03:06.947]                       return(sendCondition)
[17:03:06.947]                     ns <- getNamespace("parallel")
[17:03:06.947]                     if (exists("sendData", mode = "function", 
[17:03:06.947]                       envir = ns)) {
[17:03:06.947]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:06.947]                         envir = ns)
[17:03:06.947]                       envir <- sys.frame(frame)
[17:03:06.947]                       master <- NULL
[17:03:06.947]                       while (!identical(envir, .GlobalEnv) && 
[17:03:06.947]                         !identical(envir, emptyenv())) {
[17:03:06.947]                         if (exists("master", mode = "list", envir = envir, 
[17:03:06.947]                           inherits = FALSE)) {
[17:03:06.947]                           master <- get("master", mode = "list", 
[17:03:06.947]                             envir = envir, inherits = FALSE)
[17:03:06.947]                           if (inherits(master, c("SOCKnode", 
[17:03:06.947]                             "SOCK0node"))) {
[17:03:06.947]                             sendCondition <<- function(cond) {
[17:03:06.947]                               data <- list(type = "VALUE", value = cond, 
[17:03:06.947]                                 success = TRUE)
[17:03:06.947]                               parallel_sendData(master, data)
[17:03:06.947]                             }
[17:03:06.947]                             return(sendCondition)
[17:03:06.947]                           }
[17:03:06.947]                         }
[17:03:06.947]                         frame <- frame + 1L
[17:03:06.947]                         envir <- sys.frame(frame)
[17:03:06.947]                       }
[17:03:06.947]                     }
[17:03:06.947]                     sendCondition <<- function(cond) NULL
[17:03:06.947]                   }
[17:03:06.947]                 })
[17:03:06.947]                 withCallingHandlers({
[17:03:06.947]                   1L
[17:03:06.947]                 }, immediateCondition = function(cond) {
[17:03:06.947]                   sendCondition <- ...future.makeSendCondition()
[17:03:06.947]                   sendCondition(cond)
[17:03:06.947]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.947]                   {
[17:03:06.947]                     inherits <- base::inherits
[17:03:06.947]                     invokeRestart <- base::invokeRestart
[17:03:06.947]                     is.null <- base::is.null
[17:03:06.947]                     muffled <- FALSE
[17:03:06.947]                     if (inherits(cond, "message")) {
[17:03:06.947]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:06.947]                       if (muffled) 
[17:03:06.947]                         invokeRestart("muffleMessage")
[17:03:06.947]                     }
[17:03:06.947]                     else if (inherits(cond, "warning")) {
[17:03:06.947]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:06.947]                       if (muffled) 
[17:03:06.947]                         invokeRestart("muffleWarning")
[17:03:06.947]                     }
[17:03:06.947]                     else if (inherits(cond, "condition")) {
[17:03:06.947]                       if (!is.null(pattern)) {
[17:03:06.947]                         computeRestarts <- base::computeRestarts
[17:03:06.947]                         grepl <- base::grepl
[17:03:06.947]                         restarts <- computeRestarts(cond)
[17:03:06.947]                         for (restart in restarts) {
[17:03:06.947]                           name <- restart$name
[17:03:06.947]                           if (is.null(name)) 
[17:03:06.947]                             next
[17:03:06.947]                           if (!grepl(pattern, name)) 
[17:03:06.947]                             next
[17:03:06.947]                           invokeRestart(restart)
[17:03:06.947]                           muffled <- TRUE
[17:03:06.947]                           break
[17:03:06.947]                         }
[17:03:06.947]                       }
[17:03:06.947]                     }
[17:03:06.947]                     invisible(muffled)
[17:03:06.947]                   }
[17:03:06.947]                   muffleCondition(cond)
[17:03:06.947]                 })
[17:03:06.947]             }))
[17:03:06.947]             future::FutureResult(value = ...future.value$value, 
[17:03:06.947]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.947]                   ...future.rng), globalenv = if (FALSE) 
[17:03:06.947]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:06.947]                     ...future.globalenv.names))
[17:03:06.947]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:06.947]         }, condition = base::local({
[17:03:06.947]             c <- base::c
[17:03:06.947]             inherits <- base::inherits
[17:03:06.947]             invokeRestart <- base::invokeRestart
[17:03:06.947]             length <- base::length
[17:03:06.947]             list <- base::list
[17:03:06.947]             seq.int <- base::seq.int
[17:03:06.947]             signalCondition <- base::signalCondition
[17:03:06.947]             sys.calls <- base::sys.calls
[17:03:06.947]             `[[` <- base::`[[`
[17:03:06.947]             `+` <- base::`+`
[17:03:06.947]             `<<-` <- base::`<<-`
[17:03:06.947]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:06.947]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:06.947]                   3L)]
[17:03:06.947]             }
[17:03:06.947]             function(cond) {
[17:03:06.947]                 is_error <- inherits(cond, "error")
[17:03:06.947]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:06.947]                   NULL)
[17:03:06.947]                 if (is_error) {
[17:03:06.947]                   sessionInformation <- function() {
[17:03:06.947]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:06.947]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:06.947]                       search = base::search(), system = base::Sys.info())
[17:03:06.947]                   }
[17:03:06.947]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.947]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:06.947]                     cond$call), session = sessionInformation(), 
[17:03:06.947]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:06.947]                   signalCondition(cond)
[17:03:06.947]                 }
[17:03:06.947]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:06.947]                 "immediateCondition"))) {
[17:03:06.947]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:06.947]                   ...future.conditions[[length(...future.conditions) + 
[17:03:06.947]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:06.947]                   if (TRUE && !signal) {
[17:03:06.947]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.947]                     {
[17:03:06.947]                       inherits <- base::inherits
[17:03:06.947]                       invokeRestart <- base::invokeRestart
[17:03:06.947]                       is.null <- base::is.null
[17:03:06.947]                       muffled <- FALSE
[17:03:06.947]                       if (inherits(cond, "message")) {
[17:03:06.947]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.947]                         if (muffled) 
[17:03:06.947]                           invokeRestart("muffleMessage")
[17:03:06.947]                       }
[17:03:06.947]                       else if (inherits(cond, "warning")) {
[17:03:06.947]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.947]                         if (muffled) 
[17:03:06.947]                           invokeRestart("muffleWarning")
[17:03:06.947]                       }
[17:03:06.947]                       else if (inherits(cond, "condition")) {
[17:03:06.947]                         if (!is.null(pattern)) {
[17:03:06.947]                           computeRestarts <- base::computeRestarts
[17:03:06.947]                           grepl <- base::grepl
[17:03:06.947]                           restarts <- computeRestarts(cond)
[17:03:06.947]                           for (restart in restarts) {
[17:03:06.947]                             name <- restart$name
[17:03:06.947]                             if (is.null(name)) 
[17:03:06.947]                               next
[17:03:06.947]                             if (!grepl(pattern, name)) 
[17:03:06.947]                               next
[17:03:06.947]                             invokeRestart(restart)
[17:03:06.947]                             muffled <- TRUE
[17:03:06.947]                             break
[17:03:06.947]                           }
[17:03:06.947]                         }
[17:03:06.947]                       }
[17:03:06.947]                       invisible(muffled)
[17:03:06.947]                     }
[17:03:06.947]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.947]                   }
[17:03:06.947]                 }
[17:03:06.947]                 else {
[17:03:06.947]                   if (TRUE) {
[17:03:06.947]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:06.947]                     {
[17:03:06.947]                       inherits <- base::inherits
[17:03:06.947]                       invokeRestart <- base::invokeRestart
[17:03:06.947]                       is.null <- base::is.null
[17:03:06.947]                       muffled <- FALSE
[17:03:06.947]                       if (inherits(cond, "message")) {
[17:03:06.947]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:06.947]                         if (muffled) 
[17:03:06.947]                           invokeRestart("muffleMessage")
[17:03:06.947]                       }
[17:03:06.947]                       else if (inherits(cond, "warning")) {
[17:03:06.947]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:06.947]                         if (muffled) 
[17:03:06.947]                           invokeRestart("muffleWarning")
[17:03:06.947]                       }
[17:03:06.947]                       else if (inherits(cond, "condition")) {
[17:03:06.947]                         if (!is.null(pattern)) {
[17:03:06.947]                           computeRestarts <- base::computeRestarts
[17:03:06.947]                           grepl <- base::grepl
[17:03:06.947]                           restarts <- computeRestarts(cond)
[17:03:06.947]                           for (restart in restarts) {
[17:03:06.947]                             name <- restart$name
[17:03:06.947]                             if (is.null(name)) 
[17:03:06.947]                               next
[17:03:06.947]                             if (!grepl(pattern, name)) 
[17:03:06.947]                               next
[17:03:06.947]                             invokeRestart(restart)
[17:03:06.947]                             muffled <- TRUE
[17:03:06.947]                             break
[17:03:06.947]                           }
[17:03:06.947]                         }
[17:03:06.947]                       }
[17:03:06.947]                       invisible(muffled)
[17:03:06.947]                     }
[17:03:06.947]                     muffleCondition(cond, pattern = "^muffle")
[17:03:06.947]                   }
[17:03:06.947]                 }
[17:03:06.947]             }
[17:03:06.947]         }))
[17:03:06.947]     }, error = function(ex) {
[17:03:06.947]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:06.947]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:06.947]                 ...future.rng), started = ...future.startTime, 
[17:03:06.947]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:06.947]             version = "1.8"), class = "FutureResult")
[17:03:06.947]     }, finally = {
[17:03:06.947]         if (!identical(...future.workdir, getwd())) 
[17:03:06.947]             setwd(...future.workdir)
[17:03:06.947]         {
[17:03:06.947]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:06.947]                 ...future.oldOptions$nwarnings <- NULL
[17:03:06.947]             }
[17:03:06.947]             base::options(...future.oldOptions)
[17:03:06.947]             if (.Platform$OS.type == "windows") {
[17:03:06.947]                 old_names <- names(...future.oldEnvVars)
[17:03:06.947]                 envs <- base::Sys.getenv()
[17:03:06.947]                 names <- names(envs)
[17:03:06.947]                 common <- intersect(names, old_names)
[17:03:06.947]                 added <- setdiff(names, old_names)
[17:03:06.947]                 removed <- setdiff(old_names, names)
[17:03:06.947]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:06.947]                   envs[common]]
[17:03:06.947]                 NAMES <- toupper(changed)
[17:03:06.947]                 args <- list()
[17:03:06.947]                 for (kk in seq_along(NAMES)) {
[17:03:06.947]                   name <- changed[[kk]]
[17:03:06.947]                   NAME <- NAMES[[kk]]
[17:03:06.947]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.947]                     next
[17:03:06.947]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.947]                 }
[17:03:06.947]                 NAMES <- toupper(added)
[17:03:06.947]                 for (kk in seq_along(NAMES)) {
[17:03:06.947]                   name <- added[[kk]]
[17:03:06.947]                   NAME <- NAMES[[kk]]
[17:03:06.947]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.947]                     next
[17:03:06.947]                   args[[name]] <- ""
[17:03:06.947]                 }
[17:03:06.947]                 NAMES <- toupper(removed)
[17:03:06.947]                 for (kk in seq_along(NAMES)) {
[17:03:06.947]                   name <- removed[[kk]]
[17:03:06.947]                   NAME <- NAMES[[kk]]
[17:03:06.947]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:06.947]                     next
[17:03:06.947]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:06.947]                 }
[17:03:06.947]                 if (length(args) > 0) 
[17:03:06.947]                   base::do.call(base::Sys.setenv, args = args)
[17:03:06.947]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:06.947]             }
[17:03:06.947]             else {
[17:03:06.947]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:06.947]             }
[17:03:06.947]             {
[17:03:06.947]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:06.947]                   0L) {
[17:03:06.947]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:06.947]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:06.947]                   base::options(opts)
[17:03:06.947]                 }
[17:03:06.947]                 {
[17:03:06.947]                   {
[17:03:06.947]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:06.947]                     NULL
[17:03:06.947]                   }
[17:03:06.947]                   options(future.plan = NULL)
[17:03:06.947]                   if (is.na(NA_character_)) 
[17:03:06.947]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:06.947]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:06.947]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:06.947]                     .init = FALSE)
[17:03:06.947]                 }
[17:03:06.947]             }
[17:03:06.947]         }
[17:03:06.947]     })
[17:03:06.947]     if (TRUE) {
[17:03:06.947]         base::sink(type = "output", split = FALSE)
[17:03:06.947]         if (TRUE) {
[17:03:06.947]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:06.947]         }
[17:03:06.947]         else {
[17:03:06.947]             ...future.result["stdout"] <- base::list(NULL)
[17:03:06.947]         }
[17:03:06.947]         base::close(...future.stdout)
[17:03:06.947]         ...future.stdout <- NULL
[17:03:06.947]     }
[17:03:06.947]     ...future.result$conditions <- ...future.conditions
[17:03:06.947]     ...future.result$finished <- base::Sys.time()
[17:03:06.947]     ...future.result
[17:03:06.947] }
[17:03:06.950] MultisessionFuture started
[17:03:06.950] - Launch lazy future ... done
[17:03:06.950] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[17:03:06.951] plan(): Setting new future strategy stack:
[17:03:06.951] List of future strategies:
[17:03:06.951] 1. sequential:
[17:03:06.951]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:06.951]    - tweaked: FALSE
[17:03:06.951]    - call: plan(sequential)
[17:03:06.952] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[17:03:06.953] plan(): Setting new future strategy stack:
[17:03:06.953] List of future strategies:
[17:03:06.953] 1. FutureStrategy:
[17:03:06.953]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:06.953]    - tweaked: FALSE
[17:03:06.953]    - call: future::plan(oplan)
[17:03:06.954] plan(): nbrOfWorkers() = 1
> 
