
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:01:59.378] plan(): Setting new future strategy stack:
[17:01:59.378] List of future strategies:
[17:01:59.378] 1. sequential:
[17:01:59.378]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:59.378]    - tweaked: FALSE
[17:01:59.378]    - call: future::plan("sequential")
[17:01:59.389] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[17:01:59.408] plan(): Setting new future strategy stack:
[17:01:59.408] List of future strategies:
[17:01:59.408] 1. sequential:
[17:01:59.408]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:59.408]    - tweaked: FALSE
[17:01:59.408]    - call: plan(sequential)
[17:01:59.420] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[17:01:59.427] getGlobalsAndPackages() ...
[17:01:59.427] Searching for globals...
[17:01:59.434] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.434] Searching for globals ... DONE
[17:01:59.434] Resolving globals: FALSE
[17:01:59.438] The total size of the 2 globals is 224 bytes (224 bytes)
[17:01:59.438] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.438] - globals: [2] ‘x’, ‘i’
[17:01:59.439] 
[17:01:59.439] getGlobalsAndPackages() ... DONE
[17:01:59.440] getGlobalsAndPackages() ...
[17:01:59.440] Searching for globals...
[17:01:59.441] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.441] Searching for globals ... DONE
[17:01:59.441] Resolving globals: FALSE
[17:01:59.442] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[17:01:59.443] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.443] - globals: [2] ‘x’, ‘i’
[17:01:59.443] 
[17:01:59.443] getGlobalsAndPackages() ... DONE
[17:01:59.443] getGlobalsAndPackages() ...
[17:01:59.444] Searching for globals...
[17:01:59.445] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.445] Searching for globals ... DONE
[17:01:59.445] Resolving globals: FALSE
[17:01:59.446] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[17:01:59.447] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.447] - globals: [2] ‘x’, ‘i’
[17:01:59.447] 
[17:01:59.447] getGlobalsAndPackages() ... DONE
[17:01:59.448] getGlobalsAndPackages() ...
[17:01:59.448] Searching for globals...
[17:01:59.449] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.449] Searching for globals ... DONE
[17:01:59.449] Resolving globals: FALSE
[17:01:59.451] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[17:01:59.451] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.451] - globals: [2] ‘x’, ‘i’
[17:01:59.451] 
[17:01:59.451] getGlobalsAndPackages() ... DONE
[17:01:59.452] getGlobalsAndPackages() ...
[17:01:59.452] Searching for globals...
[17:01:59.453] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.453] Searching for globals ... DONE
[17:01:59.454] Resolving globals: FALSE
[17:01:59.455] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[17:01:59.456] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.456] - globals: [2] ‘x’, ‘i’
[17:01:59.456] 
[17:01:59.456] getGlobalsAndPackages() ... DONE
[17:01:59.457] getGlobalsAndPackages() ...
[17:01:59.457] Searching for globals...
[17:01:59.459] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.459] Searching for globals ... DONE
[17:01:59.459] Resolving globals: FALSE
[17:01:59.461] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[17:01:59.461] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.461] - globals: [2] ‘x’, ‘i’
[17:01:59.461] 
[17:01:59.462] getGlobalsAndPackages() ... DONE
[17:01:59.462] getGlobalsAndPackages() ...
[17:01:59.462] Searching for globals...
[17:01:59.465] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.465] Searching for globals ... DONE
[17:01:59.465] Resolving globals: FALSE
[17:01:59.467] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[17:01:59.468] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.468] - globals: [2] ‘x’, ‘i’
[17:01:59.468] 
[17:01:59.468] getGlobalsAndPackages() ... DONE
[17:01:59.469] getGlobalsAndPackages() ...
[17:01:59.469] Searching for globals...
[17:01:59.470] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.470] Searching for globals ... DONE
[17:01:59.471] Resolving globals: FALSE
[17:01:59.473] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[17:01:59.473] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.473] - globals: [2] ‘x’, ‘i’
[17:01:59.473] 
[17:01:59.474] getGlobalsAndPackages() ... DONE
[17:01:59.474] getGlobalsAndPackages() ...
[17:01:59.474] Searching for globals...
[17:01:59.476] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.476] Searching for globals ... DONE
[17:01:59.476] Resolving globals: FALSE
[17:01:59.478] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[17:01:59.479] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.479] - globals: [2] ‘x’, ‘i’
[17:01:59.479] 
[17:01:59.479] getGlobalsAndPackages() ... DONE
[17:01:59.480] getGlobalsAndPackages() ...
[17:01:59.480] Searching for globals...
[17:01:59.481] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.481] Searching for globals ... DONE
[17:01:59.481] Resolving globals: FALSE
[17:01:59.484] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[17:01:59.485] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.485] - globals: [2] ‘x’, ‘i’
[17:01:59.485] 
[17:01:59.485] getGlobalsAndPackages() ... DONE
[17:01:59.485] getGlobalsAndPackages() ...
[17:01:59.485] Searching for globals...
[17:01:59.489] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.489] Searching for globals ... DONE
[17:01:59.489] Resolving globals: FALSE
[17:01:59.492] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[17:01:59.492] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.492] - globals: [2] ‘x’, ‘i’
[17:01:59.493] 
[17:01:59.493] getGlobalsAndPackages() ... DONE
[17:01:59.493] getGlobalsAndPackages() ...
[17:01:59.493] Searching for globals...
[17:01:59.495] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.495] Searching for globals ... DONE
[17:01:59.495] Resolving globals: FALSE
[17:01:59.498] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[17:01:59.499] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.499] - globals: [2] ‘x’, ‘i’
[17:01:59.499] 
[17:01:59.499] getGlobalsAndPackages() ... DONE
[17:01:59.499] getGlobalsAndPackages() ...
[17:01:59.500] Searching for globals...
[17:01:59.501] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.501] Searching for globals ... DONE
[17:01:59.501] Resolving globals: FALSE
[17:01:59.505] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[17:01:59.505] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.505] - globals: [2] ‘x’, ‘i’
[17:01:59.505] 
[17:01:59.505] getGlobalsAndPackages() ... DONE
[17:01:59.506] getGlobalsAndPackages() ...
[17:01:59.506] Searching for globals...
[17:01:59.508] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.508] Searching for globals ... DONE
[17:01:59.508] Resolving globals: FALSE
[17:01:59.513] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[17:01:59.513] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.513] - globals: [2] ‘x’, ‘i’
[17:01:59.514] 
[17:01:59.514] getGlobalsAndPackages() ... DONE
[17:01:59.514] getGlobalsAndPackages() ...
[17:01:59.514] Searching for globals...
[17:01:59.516] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.516] Searching for globals ... DONE
[17:01:59.516] Resolving globals: FALSE
[17:01:59.520] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[17:01:59.521] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.521] - globals: [2] ‘x’, ‘i’
[17:01:59.521] 
[17:01:59.521] getGlobalsAndPackages() ... DONE
[17:01:59.521] getGlobalsAndPackages() ...
[17:01:59.522] Searching for globals...
[17:01:59.523] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.523] Searching for globals ... DONE
[17:01:59.523] Resolving globals: FALSE
[17:01:59.528] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[17:01:59.528] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.528] - globals: [2] ‘x’, ‘i’
[17:01:59.528] 
[17:01:59.528] getGlobalsAndPackages() ... DONE
[17:01:59.529] getGlobalsAndPackages() ...
[17:01:59.529] Searching for globals...
[17:01:59.532] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.532] Searching for globals ... DONE
[17:01:59.532] Resolving globals: FALSE
[17:01:59.537] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[17:01:59.537] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.537] - globals: [2] ‘x’, ‘i’
[17:01:59.537] 
[17:01:59.537] getGlobalsAndPackages() ... DONE
[17:01:59.538] getGlobalsAndPackages() ...
[17:01:59.538] Searching for globals...
[17:01:59.540] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.540] Searching for globals ... DONE
[17:01:59.540] Resolving globals: FALSE
[17:01:59.545] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[17:01:59.545] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.545] - globals: [2] ‘x’, ‘i’
[17:01:59.545] 
[17:01:59.545] getGlobalsAndPackages() ... DONE
[17:01:59.546] getGlobalsAndPackages() ...
[17:01:59.546] Searching for globals...
[17:01:59.548] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.548] Searching for globals ... DONE
[17:01:59.548] Resolving globals: FALSE
[17:01:59.555] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[17:01:59.555] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.555] - globals: [2] ‘x’, ‘i’
[17:01:59.555] 
[17:01:59.555] getGlobalsAndPackages() ... DONE
[17:01:59.556] getGlobalsAndPackages() ...
[17:01:59.556] Searching for globals...
[17:01:59.558] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.558] Searching for globals ... DONE
[17:01:59.558] Resolving globals: FALSE
[17:01:59.563] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[17:01:59.563] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.564] - globals: [2] ‘x’, ‘i’
[17:01:59.564] 
[17:01:59.564] getGlobalsAndPackages() ... DONE
[17:01:59.564] getGlobalsAndPackages() ...
[17:01:59.564] Searching for globals...
[17:01:59.566] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.566] Searching for globals ... DONE
[17:01:59.566] Resolving globals: FALSE
[17:01:59.574] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[17:01:59.574] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.574] - globals: [2] ‘x’, ‘i’
[17:01:59.574] 
[17:01:59.574] getGlobalsAndPackages() ... DONE
[17:01:59.575] getGlobalsAndPackages() ...
[17:01:59.575] Searching for globals...
[17:01:59.577] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.577] Searching for globals ... DONE
[17:01:59.577] Resolving globals: FALSE
[17:01:59.583] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[17:01:59.583] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.583] - globals: [2] ‘x’, ‘i’
[17:01:59.584] 
[17:01:59.584] getGlobalsAndPackages() ... DONE
[17:01:59.584] getGlobalsAndPackages() ...
[17:01:59.584] Searching for globals...
[17:01:59.586] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.586] Searching for globals ... DONE
[17:01:59.586] Resolving globals: FALSE
[17:01:59.594] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[17:01:59.594] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.594] - globals: [2] ‘x’, ‘i’
[17:01:59.595] 
[17:01:59.595] getGlobalsAndPackages() ... DONE
[17:01:59.595] getGlobalsAndPackages() ...
[17:01:59.595] Searching for globals...
[17:01:59.597] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.597] Searching for globals ... DONE
[17:01:59.597] Resolving globals: FALSE
[17:01:59.604] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[17:01:59.604] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.604] - globals: [2] ‘x’, ‘i’
[17:01:59.604] 
[17:01:59.604] getGlobalsAndPackages() ... DONE
[17:01:59.605] getGlobalsAndPackages() ...
[17:01:59.605] Searching for globals...
[17:01:59.607] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.607] Searching for globals ... DONE
[17:01:59.607] Resolving globals: FALSE
[17:01:59.615] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[17:01:59.616] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.616] - globals: [2] ‘x’, ‘i’
[17:01:59.616] 
[17:01:59.616] getGlobalsAndPackages() ... DONE
[17:01:59.617] getGlobalsAndPackages() ...
[17:01:59.617] Searching for globals...
[17:01:59.618] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.619] Searching for globals ... DONE
[17:01:59.619] Resolving globals: FALSE
[17:01:59.626] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[17:01:59.626] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.626] - globals: [2] ‘x’, ‘i’
[17:01:59.626] 
[17:01:59.626] getGlobalsAndPackages() ... DONE
[17:01:59.627] getGlobalsAndPackages() ...
[17:01:59.627] Searching for globals...
[17:01:59.629] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.629] Searching for globals ... DONE
[17:01:59.629] Resolving globals: FALSE
[17:01:59.638] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[17:01:59.638] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.639] - globals: [2] ‘x’, ‘i’
[17:01:59.639] 
[17:01:59.639] getGlobalsAndPackages() ... DONE
[17:01:59.639] getGlobalsAndPackages() ...
[17:01:59.640] Searching for globals...
[17:01:59.641] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.641] Searching for globals ... DONE
[17:01:59.641] Resolving globals: FALSE
[17:01:59.649] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[17:01:59.650] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.650] - globals: [2] ‘x’, ‘i’
[17:01:59.650] 
[17:01:59.650] getGlobalsAndPackages() ... DONE
[17:01:59.651] getGlobalsAndPackages() ...
[17:01:59.651] Searching for globals...
[17:01:59.652] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.652] Searching for globals ... DONE
[17:01:59.653] Resolving globals: FALSE
[17:01:59.662] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[17:01:59.663] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.663] - globals: [2] ‘x’, ‘i’
[17:01:59.663] 
[17:01:59.663] getGlobalsAndPackages() ... DONE
[17:01:59.664] getGlobalsAndPackages() ...
[17:01:59.664] Searching for globals...
[17:01:59.666] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.666] Searching for globals ... DONE
[17:01:59.666] Resolving globals: FALSE
[17:01:59.676] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[17:01:59.676] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.677] - globals: [2] ‘x’, ‘i’
[17:01:59.677] 
[17:01:59.677] getGlobalsAndPackages() ... DONE
[17:01:59.678] getGlobalsAndPackages() ...
[17:01:59.678] Searching for globals...
[17:01:59.679] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.680] Searching for globals ... DONE
[17:01:59.680] Resolving globals: FALSE
[17:01:59.688] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[17:01:59.689] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.689] - globals: [2] ‘x’, ‘i’
[17:01:59.689] 
[17:01:59.689] getGlobalsAndPackages() ... DONE
[17:01:59.690] getGlobalsAndPackages() ...
[17:01:59.690] Searching for globals...
[17:01:59.691] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.692] Searching for globals ... DONE
[17:01:59.692] Resolving globals: FALSE
[17:01:59.702] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[17:01:59.703] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.703] - globals: [2] ‘x’, ‘i’
[17:01:59.703] 
[17:01:59.703] getGlobalsAndPackages() ... DONE
[17:01:59.704] getGlobalsAndPackages() ...
[17:01:59.704] Searching for globals...
[17:01:59.705] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.706] Searching for globals ... DONE
[17:01:59.706] Resolving globals: FALSE
[17:01:59.716] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[17:01:59.717] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.717] - globals: [2] ‘x’, ‘i’
[17:01:59.717] 
[17:01:59.717] getGlobalsAndPackages() ... DONE
[17:01:59.718] getGlobalsAndPackages() ...
[17:01:59.718] Searching for globals...
[17:01:59.720] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.720] Searching for globals ... DONE
[17:01:59.720] Resolving globals: FALSE
[17:01:59.729] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[17:01:59.730] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.730] - globals: [2] ‘x’, ‘i’
[17:01:59.730] 
[17:01:59.730] getGlobalsAndPackages() ... DONE
[17:01:59.731] getGlobalsAndPackages() ...
[17:01:59.731] Searching for globals...
[17:01:59.733] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.733] Searching for globals ... DONE
[17:01:59.733] Resolving globals: FALSE
[17:01:59.744] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[17:01:59.744] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.745] - globals: [2] ‘x’, ‘i’
[17:01:59.745] 
[17:01:59.745] getGlobalsAndPackages() ... DONE
[17:01:59.745] getGlobalsAndPackages() ...
[17:01:59.746] Searching for globals...
[17:01:59.747] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.747] Searching for globals ... DONE
[17:01:59.747] Resolving globals: FALSE
[17:01:59.759] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[17:01:59.759] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.759] - globals: [2] ‘x’, ‘i’
[17:01:59.759] 
[17:01:59.760] getGlobalsAndPackages() ... DONE
[17:01:59.760] getGlobalsAndPackages() ...
[17:01:59.760] Searching for globals...
[17:01:59.762] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.762] Searching for globals ... DONE
[17:01:59.762] Resolving globals: FALSE
[17:01:59.774] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[17:01:59.774] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.774] - globals: [2] ‘x’, ‘i’
[17:01:59.775] 
[17:01:59.775] getGlobalsAndPackages() ... DONE
[17:01:59.775] getGlobalsAndPackages() ...
[17:01:59.776] Searching for globals...
[17:01:59.777] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.777] Searching for globals ... DONE
[17:01:59.777] Resolving globals: FALSE
[17:01:59.787] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[17:01:59.788] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.788] - globals: [2] ‘x’, ‘i’
[17:01:59.788] 
[17:01:59.788] getGlobalsAndPackages() ... DONE
[17:01:59.789] getGlobalsAndPackages() ...
[17:01:59.789] Searching for globals...
[17:01:59.792] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.792] Searching for globals ... DONE
[17:01:59.792] Resolving globals: FALSE
[17:01:59.803] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[17:01:59.803] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.803] - globals: [2] ‘x’, ‘i’
[17:01:59.804] 
[17:01:59.804] getGlobalsAndPackages() ... DONE
[17:01:59.804] getGlobalsAndPackages() ...
[17:01:59.804] Searching for globals...
[17:01:59.806] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.806] Searching for globals ... DONE
[17:01:59.806] Resolving globals: FALSE
[17:01:59.845] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[17:01:59.846] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.846] - globals: [2] ‘x’, ‘i’
[17:01:59.846] 
[17:01:59.846] getGlobalsAndPackages() ... DONE
[17:01:59.847] getGlobalsAndPackages() ...
[17:01:59.847] Searching for globals...
[17:01:59.849] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.849] Searching for globals ... DONE
[17:01:59.849] Resolving globals: FALSE
[17:01:59.861] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[17:01:59.862] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.862] - globals: [2] ‘x’, ‘i’
[17:01:59.862] 
[17:01:59.862] getGlobalsAndPackages() ... DONE
[17:01:59.863] getGlobalsAndPackages() ...
[17:01:59.863] Searching for globals...
[17:01:59.864] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.865] Searching for globals ... DONE
[17:01:59.865] Resolving globals: FALSE
[17:01:59.878] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[17:01:59.878] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.879] - globals: [2] ‘x’, ‘i’
[17:01:59.879] 
[17:01:59.879] getGlobalsAndPackages() ... DONE
[17:01:59.879] getGlobalsAndPackages() ...
[17:01:59.880] Searching for globals...
[17:01:59.881] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.881] Searching for globals ... DONE
[17:01:59.881] Resolving globals: FALSE
[17:01:59.895] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[17:01:59.895] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.896] - globals: [2] ‘x’, ‘i’
[17:01:59.896] 
[17:01:59.896] getGlobalsAndPackages() ... DONE
[17:01:59.896] getGlobalsAndPackages() ...
[17:01:59.897] Searching for globals...
[17:01:59.898] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.898] Searching for globals ... DONE
[17:01:59.898] Resolving globals: FALSE
[17:01:59.910] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[17:01:59.911] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.911] - globals: [2] ‘x’, ‘i’
[17:01:59.911] 
[17:01:59.911] getGlobalsAndPackages() ... DONE
[17:01:59.912] getGlobalsAndPackages() ...
[17:01:59.912] Searching for globals...
[17:01:59.915] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.916] Searching for globals ... DONE
[17:01:59.916] Resolving globals: FALSE
[17:01:59.928] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[17:01:59.929] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.929] - globals: [2] ‘x’, ‘i’
[17:01:59.929] 
[17:01:59.929] getGlobalsAndPackages() ... DONE
[17:01:59.930] getGlobalsAndPackages() ...
[17:01:59.930] Searching for globals...
[17:01:59.931] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.931] Searching for globals ... DONE
[17:01:59.932] Resolving globals: FALSE
[17:01:59.946] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[17:01:59.946] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.947] - globals: [2] ‘x’, ‘i’
[17:01:59.947] 
[17:01:59.947] getGlobalsAndPackages() ... DONE
[17:01:59.948] getGlobalsAndPackages() ...
[17:01:59.948] Searching for globals...
[17:01:59.949] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.949] Searching for globals ... DONE
[17:01:59.949] Resolving globals: FALSE
[17:01:59.964] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[17:01:59.965] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.965] - globals: [2] ‘x’, ‘i’
[17:01:59.965] 
[17:01:59.965] getGlobalsAndPackages() ... DONE
[17:01:59.966] getGlobalsAndPackages() ...
[17:01:59.966] Searching for globals...
[17:01:59.967] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.968] Searching for globals ... DONE
[17:01:59.968] Resolving globals: FALSE
[17:01:59.983] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[17:01:59.983] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:01:59.984] - globals: [2] ‘x’, ‘i’
[17:01:59.984] 
[17:01:59.984] getGlobalsAndPackages() ... DONE
[17:01:59.984] getGlobalsAndPackages() ...
[17:01:59.985] Searching for globals...
[17:01:59.986] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:01:59.986] Searching for globals ... DONE
[17:01:59.986] Resolving globals: FALSE
[17:02:00.002] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[17:02:00.002] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.003] - globals: [2] ‘x’, ‘i’
[17:02:00.003] 
[17:02:00.003] getGlobalsAndPackages() ... DONE
[17:02:00.004] getGlobalsAndPackages() ...
[17:02:00.004] Searching for globals...
[17:02:00.005] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.005] Searching for globals ... DONE
[17:02:00.006] Resolving globals: FALSE
[17:02:00.021] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[17:02:00.022] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.022] - globals: [2] ‘x’, ‘i’
[17:02:00.022] 
[17:02:00.022] getGlobalsAndPackages() ... DONE
[17:02:00.023] getGlobalsAndPackages() ...
[17:02:00.023] Searching for globals...
[17:02:00.024] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.025] Searching for globals ... DONE
[17:02:00.025] Resolving globals: FALSE
[17:02:00.040] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[17:02:00.041] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.041] - globals: [2] ‘x’, ‘i’
[17:02:00.041] 
[17:02:00.041] getGlobalsAndPackages() ... DONE
[17:02:00.042] getGlobalsAndPackages() ...
[17:02:00.042] Searching for globals...
[17:02:00.043] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.043] Searching for globals ... DONE
[17:02:00.043] Resolving globals: FALSE
[17:02:00.059] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[17:02:00.060] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.060] - globals: [2] ‘x’, ‘i’
[17:02:00.060] 
[17:02:00.060] getGlobalsAndPackages() ... DONE
[17:02:00.060] getGlobalsAndPackages() ...
[17:02:00.061] Searching for globals...
[17:02:00.062] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.062] Searching for globals ... DONE
[17:02:00.062] Resolving globals: FALSE
[17:02:00.078] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[17:02:00.079] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.079] - globals: [2] ‘x’, ‘i’
[17:02:00.079] 
[17:02:00.079] getGlobalsAndPackages() ... DONE
[17:02:00.080] getGlobalsAndPackages() ...
[17:02:00.080] Searching for globals...
[17:02:00.083] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.084] Searching for globals ... DONE
[17:02:00.084] Resolving globals: FALSE
[17:02:00.101] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[17:02:00.101] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.102] - globals: [2] ‘x’, ‘i’
[17:02:00.102] 
[17:02:00.102] getGlobalsAndPackages() ... DONE
[17:02:00.102] getGlobalsAndPackages() ...
[17:02:00.103] Searching for globals...
[17:02:00.104] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.104] Searching for globals ... DONE
[17:02:00.105] Resolving globals: FALSE
[17:02:00.122] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[17:02:00.122] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.122] - globals: [2] ‘x’, ‘i’
[17:02:00.122] 
[17:02:00.122] getGlobalsAndPackages() ... DONE
[17:02:00.123] getGlobalsAndPackages() ...
[17:02:00.123] Searching for globals...
[17:02:00.125] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.125] Searching for globals ... DONE
[17:02:00.125] Resolving globals: FALSE
[17:02:00.142] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[17:02:00.143] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.143] - globals: [2] ‘x’, ‘i’
[17:02:00.143] 
[17:02:00.143] getGlobalsAndPackages() ... DONE
[17:02:00.144] getGlobalsAndPackages() ...
[17:02:00.144] Searching for globals...
[17:02:00.146] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.146] Searching for globals ... DONE
[17:02:00.146] Resolving globals: FALSE
[17:02:00.163] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[17:02:00.164] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.164] - globals: [2] ‘x’, ‘i’
[17:02:00.164] 
[17:02:00.164] getGlobalsAndPackages() ... DONE
[17:02:00.165] getGlobalsAndPackages() ...
[17:02:00.165] Searching for globals...
[17:02:00.166] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.166] Searching for globals ... DONE
[17:02:00.167] Resolving globals: FALSE
[17:02:00.184] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[17:02:00.185] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.185] - globals: [2] ‘x’, ‘i’
[17:02:00.185] 
[17:02:00.185] getGlobalsAndPackages() ... DONE
[17:02:00.186] getGlobalsAndPackages() ...
[17:02:00.186] Searching for globals...
[17:02:00.187] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.188] Searching for globals ... DONE
[17:02:00.188] Resolving globals: FALSE
[17:02:00.207] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[17:02:00.208] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.208] - globals: [2] ‘x’, ‘i’
[17:02:00.208] 
[17:02:00.208] getGlobalsAndPackages() ... DONE
[17:02:00.209] getGlobalsAndPackages() ...
[17:02:00.209] Searching for globals...
[17:02:00.211] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.211] Searching for globals ... DONE
[17:02:00.211] Resolving globals: FALSE
[17:02:00.231] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[17:02:00.232] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.232] - globals: [2] ‘x’, ‘i’
[17:02:00.232] 
[17:02:00.232] getGlobalsAndPackages() ... DONE
[17:02:00.233] getGlobalsAndPackages() ...
[17:02:00.233] Searching for globals...
[17:02:00.235] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.235] Searching for globals ... DONE
[17:02:00.235] Resolving globals: FALSE
[17:02:00.254] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[17:02:00.254] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.255] - globals: [2] ‘x’, ‘i’
[17:02:00.255] 
[17:02:00.255] getGlobalsAndPackages() ... DONE
[17:02:00.255] getGlobalsAndPackages() ...
[17:02:00.256] Searching for globals...
[17:02:00.257] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.257] Searching for globals ... DONE
[17:02:00.257] Resolving globals: FALSE
[17:02:00.277] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[17:02:00.278] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.278] - globals: [2] ‘x’, ‘i’
[17:02:00.278] 
[17:02:00.278] getGlobalsAndPackages() ... DONE
[17:02:00.279] getGlobalsAndPackages() ...
[17:02:00.279] Searching for globals...
[17:02:00.280] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.281] Searching for globals ... DONE
[17:02:00.281] Resolving globals: FALSE
[17:02:00.303] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[17:02:00.303] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.304] - globals: [2] ‘x’, ‘i’
[17:02:00.304] 
[17:02:00.304] getGlobalsAndPackages() ... DONE
[17:02:00.304] getGlobalsAndPackages() ...
[17:02:00.305] Searching for globals...
[17:02:00.306] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.306] Searching for globals ... DONE
[17:02:00.306] Resolving globals: FALSE
[17:02:00.327] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[17:02:00.327] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.327] - globals: [2] ‘x’, ‘i’
[17:02:00.327] 
[17:02:00.328] getGlobalsAndPackages() ... DONE
[17:02:00.328] getGlobalsAndPackages() ...
[17:02:00.328] Searching for globals...
[17:02:00.330] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.330] Searching for globals ... DONE
[17:02:00.330] Resolving globals: FALSE
[17:02:00.351] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[17:02:00.351] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.352] - globals: [2] ‘x’, ‘i’
[17:02:00.352] 
[17:02:00.352] getGlobalsAndPackages() ... DONE
[17:02:00.353] getGlobalsAndPackages() ...
[17:02:00.353] Searching for globals...
[17:02:00.354] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.354] Searching for globals ... DONE
[17:02:00.355] Resolving globals: FALSE
[17:02:00.377] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[17:02:00.378] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.378] - globals: [2] ‘x’, ‘i’
[17:02:00.378] 
[17:02:00.378] getGlobalsAndPackages() ... DONE
[17:02:00.379] getGlobalsAndPackages() ...
[17:02:00.379] Searching for globals...
[17:02:00.380] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.380] Searching for globals ... DONE
[17:02:00.380] Resolving globals: FALSE
[17:02:00.401] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[17:02:00.401] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.401] - globals: [2] ‘x’, ‘i’
[17:02:00.401] 
[17:02:00.401] getGlobalsAndPackages() ... DONE
[17:02:00.402] getGlobalsAndPackages() ...
[17:02:00.402] Searching for globals...
[17:02:00.404] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.404] Searching for globals ... DONE
[17:02:00.404] Resolving globals: FALSE
[17:02:00.424] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[17:02:00.424] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.424] - globals: [2] ‘x’, ‘i’
[17:02:00.424] 
[17:02:00.425] getGlobalsAndPackages() ... DONE
[17:02:00.425] getGlobalsAndPackages() ...
[17:02:00.425] Searching for globals...
[17:02:00.428] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.428] Searching for globals ... DONE
[17:02:00.429] Resolving globals: FALSE
[17:02:00.449] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[17:02:00.450] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.450] - globals: [2] ‘x’, ‘i’
[17:02:00.450] 
[17:02:00.450] getGlobalsAndPackages() ... DONE
[17:02:00.450] getGlobalsAndPackages() ...
[17:02:00.451] Searching for globals...
[17:02:00.452] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.452] Searching for globals ... DONE
[17:02:00.452] Resolving globals: FALSE
[17:02:00.474] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[17:02:00.474] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.474] - globals: [2] ‘x’, ‘i’
[17:02:00.474] 
[17:02:00.474] getGlobalsAndPackages() ... DONE
[17:02:00.475] getGlobalsAndPackages() ...
[17:02:00.475] Searching for globals...
[17:02:00.478] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.479] Searching for globals ... DONE
[17:02:00.479] Resolving globals: FALSE
[17:02:00.501] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[17:02:00.502] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.502] - globals: [2] ‘x’, ‘i’
[17:02:00.502] 
[17:02:00.502] getGlobalsAndPackages() ... DONE
[17:02:00.503] getGlobalsAndPackages() ...
[17:02:00.503] Searching for globals...
[17:02:00.504] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.505] Searching for globals ... DONE
[17:02:00.505] Resolving globals: FALSE
[17:02:00.527] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[17:02:00.528] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.528] - globals: [2] ‘x’, ‘i’
[17:02:00.528] 
[17:02:00.528] getGlobalsAndPackages() ... DONE
[17:02:00.529] getGlobalsAndPackages() ...
[17:02:00.529] Searching for globals...
[17:02:00.533] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.533] Searching for globals ... DONE
[17:02:00.533] Resolving globals: FALSE
[17:02:00.556] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[17:02:00.557] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.557] - globals: [2] ‘x’, ‘i’
[17:02:00.557] 
[17:02:00.557] getGlobalsAndPackages() ... DONE
[17:02:00.558] getGlobalsAndPackages() ...
[17:02:00.558] Searching for globals...
[17:02:00.560] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.560] Searching for globals ... DONE
[17:02:00.560] Resolving globals: FALSE
[17:02:00.586] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[17:02:00.587] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.587] - globals: [2] ‘x’, ‘i’
[17:02:00.587] 
[17:02:00.587] getGlobalsAndPackages() ... DONE
[17:02:00.588] getGlobalsAndPackages() ...
[17:02:00.588] Searching for globals...
[17:02:00.590] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.590] Searching for globals ... DONE
[17:02:00.590] Resolving globals: FALSE
[17:02:00.615] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[17:02:00.615] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.615] - globals: [2] ‘x’, ‘i’
[17:02:00.615] 
[17:02:00.616] getGlobalsAndPackages() ... DONE
[17:02:00.616] getGlobalsAndPackages() ...
[17:02:00.616] Searching for globals...
[17:02:00.618] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.618] Searching for globals ... DONE
[17:02:00.618] Resolving globals: FALSE
[17:02:00.644] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[17:02:00.645] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.645] - globals: [2] ‘x’, ‘i’
[17:02:00.645] 
[17:02:00.645] getGlobalsAndPackages() ... DONE
[17:02:00.646] getGlobalsAndPackages() ...
[17:02:00.646] Searching for globals...
[17:02:00.647] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.648] Searching for globals ... DONE
[17:02:00.648] Resolving globals: FALSE
[17:02:00.672] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[17:02:00.672] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.672] - globals: [2] ‘x’, ‘i’
[17:02:00.672] 
[17:02:00.672] getGlobalsAndPackages() ... DONE
[17:02:00.675] getGlobalsAndPackages() ...
[17:02:00.675] Searching for globals...
[17:02:00.677] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.677] Searching for globals ... DONE
[17:02:00.677] Resolving globals: FALSE
[17:02:00.701] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[17:02:00.702] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.702] - globals: [2] ‘x’, ‘i’
[17:02:00.702] 
[17:02:00.702] getGlobalsAndPackages() ... DONE
[17:02:00.703] getGlobalsAndPackages() ...
[17:02:00.703] Searching for globals...
[17:02:00.704] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.704] Searching for globals ... DONE
[17:02:00.705] Resolving globals: FALSE
[17:02:00.730] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[17:02:00.731] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.731] - globals: [2] ‘x’, ‘i’
[17:02:00.731] 
[17:02:00.731] getGlobalsAndPackages() ... DONE
[17:02:00.732] getGlobalsAndPackages() ...
[17:02:00.732] Searching for globals...
[17:02:00.733] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.733] Searching for globals ... DONE
[17:02:00.734] Resolving globals: FALSE
[17:02:00.760] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[17:02:00.761] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.761] - globals: [2] ‘x’, ‘i’
[17:02:00.761] 
[17:02:00.761] getGlobalsAndPackages() ... DONE
[17:02:00.762] getGlobalsAndPackages() ...
[17:02:00.762] Searching for globals...
[17:02:00.764] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.764] Searching for globals ... DONE
[17:02:00.764] Resolving globals: FALSE
[17:02:00.790] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[17:02:00.791] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.791] - globals: [2] ‘x’, ‘i’
[17:02:00.791] 
[17:02:00.791] getGlobalsAndPackages() ... DONE
[17:02:00.792] getGlobalsAndPackages() ...
[17:02:00.792] Searching for globals...
[17:02:00.793] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.794] Searching for globals ... DONE
[17:02:00.794] Resolving globals: FALSE
[17:02:00.823] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[17:02:00.823] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.824] - globals: [2] ‘x’, ‘i’
[17:02:00.824] 
[17:02:00.824] getGlobalsAndPackages() ... DONE
[17:02:00.824] getGlobalsAndPackages() ...
[17:02:00.825] Searching for globals...
[17:02:00.826] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.826] Searching for globals ... DONE
[17:02:00.826] Resolving globals: FALSE
[17:02:00.855] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[17:02:00.856] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.856] - globals: [2] ‘x’, ‘i’
[17:02:00.856] 
[17:02:00.856] getGlobalsAndPackages() ... DONE
[17:02:00.857] getGlobalsAndPackages() ...
[17:02:00.857] Searching for globals...
[17:02:00.858] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.859] Searching for globals ... DONE
[17:02:00.859] Resolving globals: FALSE
[17:02:00.887] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[17:02:00.888] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.888] - globals: [2] ‘x’, ‘i’
[17:02:00.888] 
[17:02:00.888] getGlobalsAndPackages() ... DONE
[17:02:00.889] getGlobalsAndPackages() ...
[17:02:00.889] Searching for globals...
[17:02:00.891] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.891] Searching for globals ... DONE
[17:02:00.891] Resolving globals: FALSE
[17:02:00.921] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[17:02:00.922] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.922] - globals: [2] ‘x’, ‘i’
[17:02:00.922] 
[17:02:00.922] getGlobalsAndPackages() ... DONE
[17:02:00.923] getGlobalsAndPackages() ...
[17:02:00.923] Searching for globals...
[17:02:00.925] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.925] Searching for globals ... DONE
[17:02:00.925] Resolving globals: FALSE
[17:02:00.954] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[17:02:00.955] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.955] - globals: [2] ‘x’, ‘i’
[17:02:00.955] 
[17:02:00.956] getGlobalsAndPackages() ... DONE
[17:02:00.956] getGlobalsAndPackages() ...
[17:02:00.956] Searching for globals...
[17:02:00.958] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.959] Searching for globals ... DONE
[17:02:00.959] Resolving globals: FALSE
[17:02:00.987] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[17:02:00.988] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:00.988] - globals: [2] ‘x’, ‘i’
[17:02:00.988] 
[17:02:00.988] getGlobalsAndPackages() ... DONE
[17:02:00.989] getGlobalsAndPackages() ...
[17:02:00.989] Searching for globals...
[17:02:00.992] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:00.993] Searching for globals ... DONE
[17:02:00.993] Resolving globals: FALSE
[17:02:01.021] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[17:02:01.021] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.022] - globals: [2] ‘x’, ‘i’
[17:02:01.022] 
[17:02:01.022] getGlobalsAndPackages() ... DONE
[17:02:01.022] getGlobalsAndPackages() ...
[17:02:01.022] Searching for globals...
[17:02:01.024] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.024] Searching for globals ... DONE
[17:02:01.024] Resolving globals: FALSE
[17:02:01.055] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[17:02:01.056] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.056] - globals: [2] ‘x’, ‘i’
[17:02:01.056] 
[17:02:01.056] getGlobalsAndPackages() ... DONE
[17:02:01.057] getGlobalsAndPackages() ...
[17:02:01.057] Searching for globals...
[17:02:01.058] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.058] Searching for globals ... DONE
[17:02:01.059] Resolving globals: FALSE
[17:02:01.090] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[17:02:01.091] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.091] - globals: [2] ‘x’, ‘i’
[17:02:01.091] 
[17:02:01.091] getGlobalsAndPackages() ... DONE
[17:02:01.092] getGlobalsAndPackages() ...
[17:02:01.092] Searching for globals...
[17:02:01.094] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.094] Searching for globals ... DONE
[17:02:01.094] Resolving globals: FALSE
[17:02:01.127] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[17:02:01.127] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.127] - globals: [2] ‘x’, ‘i’
[17:02:01.127] 
[17:02:01.128] getGlobalsAndPackages() ... DONE
[17:02:01.128] getGlobalsAndPackages() ...
[17:02:01.128] Searching for globals...
[17:02:01.130] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.130] Searching for globals ... DONE
[17:02:01.130] Resolving globals: FALSE
[17:02:01.162] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[17:02:01.163] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.163] - globals: [2] ‘x’, ‘i’
[17:02:01.163] 
[17:02:01.163] getGlobalsAndPackages() ... DONE
[17:02:01.164] getGlobalsAndPackages() ...
[17:02:01.164] Searching for globals...
[17:02:01.166] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.166] Searching for globals ... DONE
[17:02:01.166] Resolving globals: FALSE
[17:02:01.199] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[17:02:01.200] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.200] - globals: [2] ‘x’, ‘i’
[17:02:01.200] 
[17:02:01.200] getGlobalsAndPackages() ... DONE
[17:02:01.201] getGlobalsAndPackages() ...
[17:02:01.201] Searching for globals...
[17:02:01.205] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.205] Searching for globals ... DONE
[17:02:01.205] Resolving globals: FALSE
[17:02:01.239] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[17:02:01.239] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.240] - globals: [2] ‘x’, ‘i’
[17:02:01.240] 
[17:02:01.240] getGlobalsAndPackages() ... DONE
[17:02:01.241] getGlobalsAndPackages() ...
[17:02:01.241] Searching for globals...
[17:02:01.243] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.243] Searching for globals ... DONE
[17:02:01.243] Resolving globals: FALSE
[17:02:01.276] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[17:02:01.277] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.277] - globals: [2] ‘x’, ‘i’
[17:02:01.277] 
[17:02:01.277] getGlobalsAndPackages() ... DONE
[17:02:01.278] getGlobalsAndPackages() ...
[17:02:01.278] Searching for globals...
[17:02:01.279] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.279] Searching for globals ... DONE
[17:02:01.280] Resolving globals: FALSE
[17:02:01.313] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[17:02:01.314] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.314] - globals: [2] ‘x’, ‘i’
[17:02:01.314] 
[17:02:01.314] getGlobalsAndPackages() ... DONE
[17:02:01.315] getGlobalsAndPackages() ...
[17:02:01.315] Searching for globals...
[17:02:01.316] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.316] Searching for globals ... DONE
[17:02:01.317] Resolving globals: FALSE
[17:02:01.351] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[17:02:01.352] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.352] - globals: [2] ‘x’, ‘i’
[17:02:01.352] 
[17:02:01.352] getGlobalsAndPackages() ... DONE
[17:02:01.353] getGlobalsAndPackages() ...
[17:02:01.353] Searching for globals...
[17:02:01.354] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:02:01.354] Searching for globals ... DONE
[17:02:01.355] Resolving globals: FALSE
[17:02:01.388] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[17:02:01.388] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:02:01.388] - globals: [2] ‘x’, ‘i’
[17:02:01.389] 
[17:02:01.389] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[17:02:01.390] run() for ‘Future’ ...
[17:02:01.390] - state: ‘created’
[17:02:01.390] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:01.390] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:01.391] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:01.391]   - Field: ‘label’
[17:02:01.391]   - Field: ‘local’
[17:02:01.391]   - Field: ‘owner’
[17:02:01.391]   - Field: ‘envir’
[17:02:01.391]   - Field: ‘packages’
[17:02:01.391]   - Field: ‘gc’
[17:02:01.391]   - Field: ‘conditions’
[17:02:01.391]   - Field: ‘expr’
[17:02:01.391]   - Field: ‘uuid’
[17:02:01.392]   - Field: ‘seed’
[17:02:01.392]   - Field: ‘version’
[17:02:01.392]   - Field: ‘result’
[17:02:01.392]   - Field: ‘asynchronous’
[17:02:01.392]   - Field: ‘calls’
[17:02:01.392]   - Field: ‘globals’
[17:02:01.392]   - Field: ‘stdout’
[17:02:01.392]   - Field: ‘earlySignal’
[17:02:01.392]   - Field: ‘lazy’
[17:02:01.392]   - Field: ‘state’
[17:02:01.392] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:01.393] - Launch lazy future ...
[17:02:01.393] Packages needed by the future expression (n = 0): <none>
[17:02:01.394] Packages needed by future strategies (n = 0): <none>
[17:02:01.394] {
[17:02:01.394]     {
[17:02:01.394]         {
[17:02:01.394]             ...future.startTime <- base::Sys.time()
[17:02:01.394]             {
[17:02:01.394]                 {
[17:02:01.394]                   {
[17:02:01.394]                     base::local({
[17:02:01.394]                       has_future <- base::requireNamespace("future", 
[17:02:01.394]                         quietly = TRUE)
[17:02:01.394]                       if (has_future) {
[17:02:01.394]                         ns <- base::getNamespace("future")
[17:02:01.394]                         version <- ns[[".package"]][["version"]]
[17:02:01.394]                         if (is.null(version)) 
[17:02:01.394]                           version <- utils::packageVersion("future")
[17:02:01.394]                       }
[17:02:01.394]                       else {
[17:02:01.394]                         version <- NULL
[17:02:01.394]                       }
[17:02:01.394]                       if (!has_future || version < "1.8.0") {
[17:02:01.394]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:01.394]                           "", base::R.version$version.string), 
[17:02:01.394]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:01.394]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:01.394]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:01.394]                             "release", "version")], collapse = " "), 
[17:02:01.394]                           hostname = base::Sys.info()[["nodename"]])
[17:02:01.394]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:01.394]                           info)
[17:02:01.394]                         info <- base::paste(info, collapse = "; ")
[17:02:01.394]                         if (!has_future) {
[17:02:01.394]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:01.394]                             info)
[17:02:01.394]                         }
[17:02:01.394]                         else {
[17:02:01.394]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:01.394]                             info, version)
[17:02:01.394]                         }
[17:02:01.394]                         base::stop(msg)
[17:02:01.394]                       }
[17:02:01.394]                     })
[17:02:01.394]                   }
[17:02:01.394]                   ...future.strategy.old <- future::plan("list")
[17:02:01.394]                   options(future.plan = NULL)
[17:02:01.394]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:01.394]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:01.394]                 }
[17:02:01.394]                 ...future.workdir <- getwd()
[17:02:01.394]             }
[17:02:01.394]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:01.394]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:01.394]         }
[17:02:01.394]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:01.394]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:01.394]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:01.394]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:01.394]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:01.394]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:01.394]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:01.394]             base::names(...future.oldOptions))
[17:02:01.394]     }
[17:02:01.394]     if (TRUE) {
[17:02:01.394]     }
[17:02:01.394]     else {
[17:02:01.394]         if (NA) {
[17:02:01.394]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:01.394]                 open = "w")
[17:02:01.394]         }
[17:02:01.394]         else {
[17:02:01.394]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:01.394]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:01.394]         }
[17:02:01.394]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:01.394]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:01.394]             base::sink(type = "output", split = FALSE)
[17:02:01.394]             base::close(...future.stdout)
[17:02:01.394]         }, add = TRUE)
[17:02:01.394]     }
[17:02:01.394]     ...future.frame <- base::sys.nframe()
[17:02:01.394]     ...future.conditions <- base::list()
[17:02:01.394]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:01.394]     if (FALSE) {
[17:02:01.394]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:01.394]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:01.394]     }
[17:02:01.394]     ...future.result <- base::tryCatch({
[17:02:01.394]         base::withCallingHandlers({
[17:02:01.394]             ...future.value <- base::withVisible(base::local({
[17:02:01.394]                 x[[i - 2]] + x[[i - 1]]
[17:02:01.394]             }))
[17:02:01.394]             future::FutureResult(value = ...future.value$value, 
[17:02:01.394]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:01.394]                   ...future.rng), globalenv = if (FALSE) 
[17:02:01.394]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:01.394]                     ...future.globalenv.names))
[17:02:01.394]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:01.394]         }, condition = base::local({
[17:02:01.394]             c <- base::c
[17:02:01.394]             inherits <- base::inherits
[17:02:01.394]             invokeRestart <- base::invokeRestart
[17:02:01.394]             length <- base::length
[17:02:01.394]             list <- base::list
[17:02:01.394]             seq.int <- base::seq.int
[17:02:01.394]             signalCondition <- base::signalCondition
[17:02:01.394]             sys.calls <- base::sys.calls
[17:02:01.394]             `[[` <- base::`[[`
[17:02:01.394]             `+` <- base::`+`
[17:02:01.394]             `<<-` <- base::`<<-`
[17:02:01.394]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:01.394]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:01.394]                   3L)]
[17:02:01.394]             }
[17:02:01.394]             function(cond) {
[17:02:01.394]                 is_error <- inherits(cond, "error")
[17:02:01.394]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:01.394]                   NULL)
[17:02:01.394]                 if (is_error) {
[17:02:01.394]                   sessionInformation <- function() {
[17:02:01.394]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:01.394]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:01.394]                       search = base::search(), system = base::Sys.info())
[17:02:01.394]                   }
[17:02:01.394]                   ...future.conditions[[length(...future.conditions) + 
[17:02:01.394]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:01.394]                     cond$call), session = sessionInformation(), 
[17:02:01.394]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:01.394]                   signalCondition(cond)
[17:02:01.394]                 }
[17:02:01.394]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[17:02:01.394]                 "immediateCondition"))) {
[17:02:01.394]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:01.394]                   ...future.conditions[[length(...future.conditions) + 
[17:02:01.394]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:01.394]                   if (TRUE && !signal) {
[17:02:01.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:01.394]                     {
[17:02:01.394]                       inherits <- base::inherits
[17:02:01.394]                       invokeRestart <- base::invokeRestart
[17:02:01.394]                       is.null <- base::is.null
[17:02:01.394]                       muffled <- FALSE
[17:02:01.394]                       if (inherits(cond, "message")) {
[17:02:01.394]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:01.394]                         if (muffled) 
[17:02:01.394]                           invokeRestart("muffleMessage")
[17:02:01.394]                       }
[17:02:01.394]                       else if (inherits(cond, "warning")) {
[17:02:01.394]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:01.394]                         if (muffled) 
[17:02:01.394]                           invokeRestart("muffleWarning")
[17:02:01.394]                       }
[17:02:01.394]                       else if (inherits(cond, "condition")) {
[17:02:01.394]                         if (!is.null(pattern)) {
[17:02:01.394]                           computeRestarts <- base::computeRestarts
[17:02:01.394]                           grepl <- base::grepl
[17:02:01.394]                           restarts <- computeRestarts(cond)
[17:02:01.394]                           for (restart in restarts) {
[17:02:01.394]                             name <- restart$name
[17:02:01.394]                             if (is.null(name)) 
[17:02:01.394]                               next
[17:02:01.394]                             if (!grepl(pattern, name)) 
[17:02:01.394]                               next
[17:02:01.394]                             invokeRestart(restart)
[17:02:01.394]                             muffled <- TRUE
[17:02:01.394]                             break
[17:02:01.394]                           }
[17:02:01.394]                         }
[17:02:01.394]                       }
[17:02:01.394]                       invisible(muffled)
[17:02:01.394]                     }
[17:02:01.394]                     muffleCondition(cond, pattern = "^muffle")
[17:02:01.394]                   }
[17:02:01.394]                 }
[17:02:01.394]                 else {
[17:02:01.394]                   if (TRUE) {
[17:02:01.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:01.394]                     {
[17:02:01.394]                       inherits <- base::inherits
[17:02:01.394]                       invokeRestart <- base::invokeRestart
[17:02:01.394]                       is.null <- base::is.null
[17:02:01.394]                       muffled <- FALSE
[17:02:01.394]                       if (inherits(cond, "message")) {
[17:02:01.394]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:01.394]                         if (muffled) 
[17:02:01.394]                           invokeRestart("muffleMessage")
[17:02:01.394]                       }
[17:02:01.394]                       else if (inherits(cond, "warning")) {
[17:02:01.394]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:01.394]                         if (muffled) 
[17:02:01.394]                           invokeRestart("muffleWarning")
[17:02:01.394]                       }
[17:02:01.394]                       else if (inherits(cond, "condition")) {
[17:02:01.394]                         if (!is.null(pattern)) {
[17:02:01.394]                           computeRestarts <- base::computeRestarts
[17:02:01.394]                           grepl <- base::grepl
[17:02:01.394]                           restarts <- computeRestarts(cond)
[17:02:01.394]                           for (restart in restarts) {
[17:02:01.394]                             name <- restart$name
[17:02:01.394]                             if (is.null(name)) 
[17:02:01.394]                               next
[17:02:01.394]                             if (!grepl(pattern, name)) 
[17:02:01.394]                               next
[17:02:01.394]                             invokeRestart(restart)
[17:02:01.394]                             muffled <- TRUE
[17:02:01.394]                             break
[17:02:01.394]                           }
[17:02:01.394]                         }
[17:02:01.394]                       }
[17:02:01.394]                       invisible(muffled)
[17:02:01.394]                     }
[17:02:01.394]                     muffleCondition(cond, pattern = "^muffle")
[17:02:01.394]                   }
[17:02:01.394]                 }
[17:02:01.394]             }
[17:02:01.394]         }))
[17:02:01.394]     }, error = function(ex) {
[17:02:01.394]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:01.394]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:01.394]                 ...future.rng), started = ...future.startTime, 
[17:02:01.394]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:01.394]             version = "1.8"), class = "FutureResult")
[17:02:01.394]     }, finally = {
[17:02:01.394]         if (!identical(...future.workdir, getwd())) 
[17:02:01.394]             setwd(...future.workdir)
[17:02:01.394]         {
[17:02:01.394]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:01.394]                 ...future.oldOptions$nwarnings <- NULL
[17:02:01.394]             }
[17:02:01.394]             base::options(...future.oldOptions)
[17:02:01.394]             if (.Platform$OS.type == "windows") {
[17:02:01.394]                 old_names <- names(...future.oldEnvVars)
[17:02:01.394]                 envs <- base::Sys.getenv()
[17:02:01.394]                 names <- names(envs)
[17:02:01.394]                 common <- intersect(names, old_names)
[17:02:01.394]                 added <- setdiff(names, old_names)
[17:02:01.394]                 removed <- setdiff(old_names, names)
[17:02:01.394]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:01.394]                   envs[common]]
[17:02:01.394]                 NAMES <- toupper(changed)
[17:02:01.394]                 args <- list()
[17:02:01.394]                 for (kk in seq_along(NAMES)) {
[17:02:01.394]                   name <- changed[[kk]]
[17:02:01.394]                   NAME <- NAMES[[kk]]
[17:02:01.394]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:01.394]                     next
[17:02:01.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:01.394]                 }
[17:02:01.394]                 NAMES <- toupper(added)
[17:02:01.394]                 for (kk in seq_along(NAMES)) {
[17:02:01.394]                   name <- added[[kk]]
[17:02:01.394]                   NAME <- NAMES[[kk]]
[17:02:01.394]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:01.394]                     next
[17:02:01.394]                   args[[name]] <- ""
[17:02:01.394]                 }
[17:02:01.394]                 NAMES <- toupper(removed)
[17:02:01.394]                 for (kk in seq_along(NAMES)) {
[17:02:01.394]                   name <- removed[[kk]]
[17:02:01.394]                   NAME <- NAMES[[kk]]
[17:02:01.394]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:01.394]                     next
[17:02:01.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:01.394]                 }
[17:02:01.394]                 if (length(args) > 0) 
[17:02:01.394]                   base::do.call(base::Sys.setenv, args = args)
[17:02:01.394]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:01.394]             }
[17:02:01.394]             else {
[17:02:01.394]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:01.394]             }
[17:02:01.394]             {
[17:02:01.394]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:01.394]                   0L) {
[17:02:01.394]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:01.394]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:01.394]                   base::options(opts)
[17:02:01.394]                 }
[17:02:01.394]                 {
[17:02:01.394]                   {
[17:02:01.394]                     NULL
[17:02:01.394]                     RNGkind("Mersenne-Twister")
[17:02:01.394]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:01.394]                       inherits = FALSE)
[17:02:01.394]                   }
[17:02:01.394]                   options(future.plan = NULL)
[17:02:01.394]                   if (is.na(NA_character_)) 
[17:02:01.394]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:01.394]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:01.394]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:01.394]                     .init = FALSE)
[17:02:01.394]                 }
[17:02:01.394]             }
[17:02:01.394]         }
[17:02:01.394]     })
[17:02:01.394]     if (FALSE) {
[17:02:01.394]         base::sink(type = "output", split = FALSE)
[17:02:01.394]         if (NA) {
[17:02:01.394]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:01.394]         }
[17:02:01.394]         else {
[17:02:01.394]             ...future.result["stdout"] <- base::list(NULL)
[17:02:01.394]         }
[17:02:01.394]         base::close(...future.stdout)
[17:02:01.394]         ...future.stdout <- NULL
[17:02:01.394]     }
[17:02:01.394]     ...future.result$conditions <- ...future.conditions
[17:02:01.394]     ...future.result$finished <- base::Sys.time()
[17:02:01.394]     ...future.result
[17:02:01.394] }
[17:02:01.398] assign_globals() ...
[17:02:01.398] List of 2
[17:02:01.398]  $ x:Classes 'listenv', 'environment' <environment: 0x55e528d15270> 
[17:02:01.398]  $ i: int 7
[17:02:01.398]  - attr(*, "where")=List of 2
[17:02:01.398]   ..$ x:<environment: R_EmptyEnv> 
[17:02:01.398]   ..$ i:<environment: R_EmptyEnv> 
[17:02:01.398]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:01.398]  - attr(*, "resolved")= logi FALSE
[17:02:01.398]  - attr(*, "total_size")= num 34264
[17:02:01.398]  - attr(*, "already-done")= logi TRUE
[17:02:01.405] - copied ‘x’ to environment
[17:02:01.405] - copied ‘i’ to environment
[17:02:01.405] assign_globals() ... done
[17:02:01.405] plan(): Setting new future strategy stack:
[17:02:01.406] List of future strategies:
[17:02:01.406] 1. sequential:
[17:02:01.406]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:01.406]    - tweaked: FALSE
[17:02:01.406]    - call: NULL
[17:02:01.406] plan(): nbrOfWorkers() = 1
[17:02:01.491] plan(): Setting new future strategy stack:
[17:02:01.491] List of future strategies:
[17:02:01.491] 1. sequential:
[17:02:01.491]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:01.491]    - tweaked: FALSE
[17:02:01.491]    - call: plan(sequential)
[17:02:01.491] plan(): nbrOfWorkers() = 1
[17:02:01.492] SequentialFuture started (and completed)
[17:02:01.492] - Launch lazy future ... done
[17:02:01.492] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[17:02:01.492] run() for ‘Future’ ...
[17:02:01.492] - state: ‘created’
[17:02:01.492] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:01.493] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:01.493] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:01.493]   - Field: ‘label’
[17:02:01.493]   - Field: ‘local’
[17:02:01.493]   - Field: ‘owner’
[17:02:01.493]   - Field: ‘envir’
[17:02:01.493]   - Field: ‘packages’
[17:02:01.493]   - Field: ‘gc’
[17:02:01.494]   - Field: ‘conditions’
[17:02:01.494]   - Field: ‘expr’
[17:02:01.494]   - Field: ‘uuid’
[17:02:01.494]   - Field: ‘seed’
[17:02:01.494]   - Field: ‘version’
[17:02:01.494]   - Field: ‘result’
[17:02:01.494]   - Field: ‘asynchronous’
[17:02:01.494]   - Field: ‘calls’
[17:02:01.494]   - Field: ‘globals’
[17:02:01.494]   - Field: ‘stdout’
[17:02:01.494]   - Field: ‘earlySignal’
[17:02:01.495]   - Field: ‘lazy’
[17:02:01.495]   - Field: ‘state’
[17:02:01.495] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:01.495] - Launch lazy future ...
[17:02:01.495] Packages needed by the future expression (n = 0): <none>
[17:02:01.495] Packages needed by future strategies (n = 0): <none>
[17:02:01.496] {
[17:02:01.496]     {
[17:02:01.496]         {
[17:02:01.496]             ...future.startTime <- base::Sys.time()
[17:02:01.496]             {
[17:02:01.496]                 {
[17:02:01.496]                   {
[17:02:01.496]                     base::local({
[17:02:01.496]                       has_future <- base::requireNamespace("future", 
[17:02:01.496]                         quietly = TRUE)
[17:02:01.496]                       if (has_future) {
[17:02:01.496]                         ns <- base::getNamespace("future")
[17:02:01.496]                         version <- ns[[".package"]][["version"]]
[17:02:01.496]                         if (is.null(version)) 
[17:02:01.496]                           version <- utils::packageVersion("future")
[17:02:01.496]                       }
[17:02:01.496]                       else {
[17:02:01.496]                         version <- NULL
[17:02:01.496]                       }
[17:02:01.496]                       if (!has_future || version < "1.8.0") {
[17:02:01.496]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:01.496]                           "", base::R.version$version.string), 
[17:02:01.496]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:01.496]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:01.496]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:01.496]                             "release", "version")], collapse = " "), 
[17:02:01.496]                           hostname = base::Sys.info()[["nodename"]])
[17:02:01.496]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:01.496]                           info)
[17:02:01.496]                         info <- base::paste(info, collapse = "; ")
[17:02:01.496]                         if (!has_future) {
[17:02:01.496]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:01.496]                             info)
[17:02:01.496]                         }
[17:02:01.496]                         else {
[17:02:01.496]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:01.496]                             info, version)
[17:02:01.496]                         }
[17:02:01.496]                         base::stop(msg)
[17:02:01.496]                       }
[17:02:01.496]                     })
[17:02:01.496]                   }
[17:02:01.496]                   ...future.strategy.old <- future::plan("list")
[17:02:01.496]                   options(future.plan = NULL)
[17:02:01.496]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:01.496]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:01.496]                 }
[17:02:01.496]                 ...future.workdir <- getwd()
[17:02:01.496]             }
[17:02:01.496]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:01.496]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:01.496]         }
[17:02:01.496]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:01.496]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:01.496]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:01.496]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:01.496]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:01.496]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:01.496]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:01.496]             base::names(...future.oldOptions))
[17:02:01.496]     }
[17:02:01.496]     if (TRUE) {
[17:02:01.496]     }
[17:02:01.496]     else {
[17:02:01.496]         if (NA) {
[17:02:01.496]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:01.496]                 open = "w")
[17:02:01.496]         }
[17:02:01.496]         else {
[17:02:01.496]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:01.496]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:01.496]         }
[17:02:01.496]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:01.496]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:01.496]             base::sink(type = "output", split = FALSE)
[17:02:01.496]             base::close(...future.stdout)
[17:02:01.496]         }, add = TRUE)
[17:02:01.496]     }
[17:02:01.496]     ...future.frame <- base::sys.nframe()
[17:02:01.496]     ...future.conditions <- base::list()
[17:02:01.496]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:01.496]     if (FALSE) {
[17:02:01.496]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:01.496]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:01.496]     }
[17:02:01.496]     ...future.result <- base::tryCatch({
[17:02:01.496]         base::withCallingHandlers({
[17:02:01.496]             ...future.value <- base::withVisible(base::local({
[17:02:01.496]                 x[[i - 2]] + x[[i - 1]]
[17:02:01.496]             }))
[17:02:01.496]             future::FutureResult(value = ...future.value$value, 
[17:02:01.496]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:01.496]                   ...future.rng), globalenv = if (FALSE) 
[17:02:01.496]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:01.496]                     ...future.globalenv.names))
[17:02:01.496]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:01.496]         }, condition = base::local({
[17:02:01.496]             c <- base::c
[17:02:01.496]             inherits <- base::inherits
[17:02:01.496]             invokeRestart <- base::invokeRestart
[17:02:01.496]             length <- base::length
[17:02:01.496]             list <- base::list
[17:02:01.496]             seq.int <- base::seq.int
[17:02:01.496]             signalCondition <- base::signalCondition
[17:02:01.496]             sys.calls <- base::sys.calls
[17:02:01.496]             `[[` <- base::`[[`
[17:02:01.496]             `+` <- base::`+`
[17:02:01.496]             `<<-` <- base::`<<-`
[17:02:01.496]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:01.496]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:01.496]                   3L)]
[17:02:01.496]             }
[17:02:01.496]             function(cond) {
[17:02:01.496]                 is_error <- inherits(cond, "error")
[17:02:01.496]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:01.496]                   NULL)
[17:02:01.496]                 if (is_error) {
[17:02:01.496]                   sessionInformation <- function() {
[17:02:01.496]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:01.496]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:01.496]                       search = base::search(), system = base::Sys.info())
[17:02:01.496]                   }
[17:02:01.496]                   ...future.conditions[[length(...future.conditions) + 
[17:02:01.496]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:01.496]                     cond$call), session = sessionInformation(), 
[17:02:01.496]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:01.496]                   signalCondition(cond)
[17:02:01.496]                 }
[17:02:01.496]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[17:02:01.496]                 "immediateCondition"))) {
[17:02:01.496]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:01.496]                   ...future.conditions[[length(...future.conditions) + 
[17:02:01.496]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:01.496]                   if (TRUE && !signal) {
[17:02:01.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:01.496]                     {
[17:02:01.496]                       inherits <- base::inherits
[17:02:01.496]                       invokeRestart <- base::invokeRestart
[17:02:01.496]                       is.null <- base::is.null
[17:02:01.496]                       muffled <- FALSE
[17:02:01.496]                       if (inherits(cond, "message")) {
[17:02:01.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:01.496]                         if (muffled) 
[17:02:01.496]                           invokeRestart("muffleMessage")
[17:02:01.496]                       }
[17:02:01.496]                       else if (inherits(cond, "warning")) {
[17:02:01.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:01.496]                         if (muffled) 
[17:02:01.496]                           invokeRestart("muffleWarning")
[17:02:01.496]                       }
[17:02:01.496]                       else if (inherits(cond, "condition")) {
[17:02:01.496]                         if (!is.null(pattern)) {
[17:02:01.496]                           computeRestarts <- base::computeRestarts
[17:02:01.496]                           grepl <- base::grepl
[17:02:01.496]                           restarts <- computeRestarts(cond)
[17:02:01.496]                           for (restart in restarts) {
[17:02:01.496]                             name <- restart$name
[17:02:01.496]                             if (is.null(name)) 
[17:02:01.496]                               next
[17:02:01.496]                             if (!grepl(pattern, name)) 
[17:02:01.496]                               next
[17:02:01.496]                             invokeRestart(restart)
[17:02:01.496]                             muffled <- TRUE
[17:02:01.496]                             break
[17:02:01.496]                           }
[17:02:01.496]                         }
[17:02:01.496]                       }
[17:02:01.496]                       invisible(muffled)
[17:02:01.496]                     }
[17:02:01.496]                     muffleCondition(cond, pattern = "^muffle")
[17:02:01.496]                   }
[17:02:01.496]                 }
[17:02:01.496]                 else {
[17:02:01.496]                   if (TRUE) {
[17:02:01.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:01.496]                     {
[17:02:01.496]                       inherits <- base::inherits
[17:02:01.496]                       invokeRestart <- base::invokeRestart
[17:02:01.496]                       is.null <- base::is.null
[17:02:01.496]                       muffled <- FALSE
[17:02:01.496]                       if (inherits(cond, "message")) {
[17:02:01.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:01.496]                         if (muffled) 
[17:02:01.496]                           invokeRestart("muffleMessage")
[17:02:01.496]                       }
[17:02:01.496]                       else if (inherits(cond, "warning")) {
[17:02:01.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:01.496]                         if (muffled) 
[17:02:01.496]                           invokeRestart("muffleWarning")
[17:02:01.496]                       }
[17:02:01.496]                       else if (inherits(cond, "condition")) {
[17:02:01.496]                         if (!is.null(pattern)) {
[17:02:01.496]                           computeRestarts <- base::computeRestarts
[17:02:01.496]                           grepl <- base::grepl
[17:02:01.496]                           restarts <- computeRestarts(cond)
[17:02:01.496]                           for (restart in restarts) {
[17:02:01.496]                             name <- restart$name
[17:02:01.496]                             if (is.null(name)) 
[17:02:01.496]                               next
[17:02:01.496]                             if (!grepl(pattern, name)) 
[17:02:01.496]                               next
[17:02:01.496]                             invokeRestart(restart)
[17:02:01.496]                             muffled <- TRUE
[17:02:01.496]                             break
[17:02:01.496]                           }
[17:02:01.496]                         }
[17:02:01.496]                       }
[17:02:01.496]                       invisible(muffled)
[17:02:01.496]                     }
[17:02:01.496]                     muffleCondition(cond, pattern = "^muffle")
[17:02:01.496]                   }
[17:02:01.496]                 }
[17:02:01.496]             }
[17:02:01.496]         }))
[17:02:01.496]     }, error = function(ex) {
[17:02:01.496]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:01.496]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:01.496]                 ...future.rng), started = ...future.startTime, 
[17:02:01.496]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:01.496]             version = "1.8"), class = "FutureResult")
[17:02:01.496]     }, finally = {
[17:02:01.496]         if (!identical(...future.workdir, getwd())) 
[17:02:01.496]             setwd(...future.workdir)
[17:02:01.496]         {
[17:02:01.496]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:01.496]                 ...future.oldOptions$nwarnings <- NULL
[17:02:01.496]             }
[17:02:01.496]             base::options(...future.oldOptions)
[17:02:01.496]             if (.Platform$OS.type == "windows") {
[17:02:01.496]                 old_names <- names(...future.oldEnvVars)
[17:02:01.496]                 envs <- base::Sys.getenv()
[17:02:01.496]                 names <- names(envs)
[17:02:01.496]                 common <- intersect(names, old_names)
[17:02:01.496]                 added <- setdiff(names, old_names)
[17:02:01.496]                 removed <- setdiff(old_names, names)
[17:02:01.496]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:01.496]                   envs[common]]
[17:02:01.496]                 NAMES <- toupper(changed)
[17:02:01.496]                 args <- list()
[17:02:01.496]                 for (kk in seq_along(NAMES)) {
[17:02:01.496]                   name <- changed[[kk]]
[17:02:01.496]                   NAME <- NAMES[[kk]]
[17:02:01.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:01.496]                     next
[17:02:01.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:01.496]                 }
[17:02:01.496]                 NAMES <- toupper(added)
[17:02:01.496]                 for (kk in seq_along(NAMES)) {
[17:02:01.496]                   name <- added[[kk]]
[17:02:01.496]                   NAME <- NAMES[[kk]]
[17:02:01.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:01.496]                     next
[17:02:01.496]                   args[[name]] <- ""
[17:02:01.496]                 }
[17:02:01.496]                 NAMES <- toupper(removed)
[17:02:01.496]                 for (kk in seq_along(NAMES)) {
[17:02:01.496]                   name <- removed[[kk]]
[17:02:01.496]                   NAME <- NAMES[[kk]]
[17:02:01.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:01.496]                     next
[17:02:01.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:01.496]                 }
[17:02:01.496]                 if (length(args) > 0) 
[17:02:01.496]                   base::do.call(base::Sys.setenv, args = args)
[17:02:01.496]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:01.496]             }
[17:02:01.496]             else {
[17:02:01.496]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:01.496]             }
[17:02:01.496]             {
[17:02:01.496]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:01.496]                   0L) {
[17:02:01.496]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:01.496]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:01.496]                   base::options(opts)
[17:02:01.496]                 }
[17:02:01.496]                 {
[17:02:01.496]                   {
[17:02:01.496]                     NULL
[17:02:01.496]                     RNGkind("Mersenne-Twister")
[17:02:01.496]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:01.496]                       inherits = FALSE)
[17:02:01.496]                   }
[17:02:01.496]                   options(future.plan = NULL)
[17:02:01.496]                   if (is.na(NA_character_)) 
[17:02:01.496]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:01.496]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:01.496]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:01.496]                     .init = FALSE)
[17:02:01.496]                 }
[17:02:01.496]             }
[17:02:01.496]         }
[17:02:01.496]     })
[17:02:01.496]     if (FALSE) {
[17:02:01.496]         base::sink(type = "output", split = FALSE)
[17:02:01.496]         if (NA) {
[17:02:01.496]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:01.496]         }
[17:02:01.496]         else {
[17:02:01.496]             ...future.result["stdout"] <- base::list(NULL)
[17:02:01.496]         }
[17:02:01.496]         base::close(...future.stdout)
[17:02:01.496]         ...future.stdout <- NULL
[17:02:01.496]     }
[17:02:01.496]     ...future.result$conditions <- ...future.conditions
[17:02:01.496]     ...future.result$finished <- base::Sys.time()
[17:02:01.496]     ...future.result
[17:02:01.496] }
[17:02:01.497] assign_globals() ...
[17:02:01.497] List of 2
[17:02:01.497]  $ x:Classes 'listenv', 'environment' <environment: 0x55e528d15270> 
[17:02:01.497]  $ i: int 50
[17:02:01.497]  - attr(*, "where")=List of 2
[17:02:01.497]   ..$ x:<environment: R_EmptyEnv> 
[17:02:01.497]   ..$ i:<environment: R_EmptyEnv> 
[17:02:01.497]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:01.497]  - attr(*, "resolved")= logi FALSE
[17:02:01.497]  - attr(*, "total_size")= num 402000
[17:02:01.497]  - attr(*, "already-done")= logi TRUE
[17:02:01.501] - copied ‘x’ to environment
[17:02:01.501] - copied ‘i’ to environment
[17:02:01.501] assign_globals() ... done
[17:02:01.501] plan(): Setting new future strategy stack:
[17:02:01.501] List of future strategies:
[17:02:01.501] 1. sequential:
[17:02:01.501]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:01.501]    - tweaked: FALSE
[17:02:01.501]    - call: NULL
[17:02:01.502] plan(): nbrOfWorkers() = 1
[17:02:02.450] plan(): Setting new future strategy stack:
[17:02:02.450] List of future strategies:
[17:02:02.450] 1. sequential:
[17:02:02.450]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.450]    - tweaked: FALSE
[17:02:02.450]    - call: plan(sequential)
[17:02:02.450] plan(): nbrOfWorkers() = 1
[17:02:02.450] SequentialFuture started (and completed)
[17:02:02.450] - Launch lazy future ... done
[17:02:02.451] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[17:02:02.451] plan(): Setting new future strategy stack:
[17:02:02.451] List of future strategies:
[17:02:02.451] 1. sequential:
[17:02:02.451]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.451]    - tweaked: FALSE
[17:02:02.451]    - call: future::plan("sequential")
[17:02:02.452] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[17:02:02.461] plan(): Setting new future strategy stack:
[17:02:02.461] List of future strategies:
[17:02:02.461] 1. sequential:
[17:02:02.461]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.461]    - tweaked: FALSE
[17:02:02.461]    - call: plan(strategy)
[17:02:02.461] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:02:02.493] getGlobalsAndPackages() ...
[17:02:02.493] Searching for globals...
[17:02:02.497] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.497] Searching for globals ... DONE
[17:02:02.497] Resolving globals: FALSE
[17:02:02.498] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.498] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.498] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.498] - packages: [1] ‘future’
[17:02:02.498] getGlobalsAndPackages() ... DONE
 2[17:02:02.503] getGlobalsAndPackages() ...
[17:02:02.503] Searching for globals...
[17:02:02.506] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.506] Searching for globals ... DONE
[17:02:02.506] Resolving globals: FALSE
[17:02:02.507] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.507] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.507] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.508] - packages: [1] ‘future’
[17:02:02.508] getGlobalsAndPackages() ... DONE
 3[17:02:02.508] getGlobalsAndPackages() ...
[17:02:02.508] Searching for globals...
[17:02:02.511] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.511] Searching for globals ... DONE
[17:02:02.512] Resolving globals: FALSE
[17:02:02.512] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.512] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.513] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.513] - packages: [1] ‘future’
[17:02:02.513] getGlobalsAndPackages() ... DONE
 4[17:02:02.513] getGlobalsAndPackages() ...
[17:02:02.513] Searching for globals...
[17:02:02.517] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.517] Searching for globals ... DONE
[17:02:02.517] Resolving globals: FALSE
[17:02:02.517] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.518] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.518] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.518] - packages: [1] ‘future’
[17:02:02.518] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:02:02.527] resolved() for ‘Future’ ...
[17:02:02.527] - state: ‘created’
[17:02:02.528] - run: TRUE
[17:02:02.528] - run() ...
[17:02:02.528] run() for ‘Future’ ...
[17:02:02.528] - state: ‘created’
[17:02:02.528] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:02.528] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:02.528] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:02.529]   - Field: ‘label’
[17:02:02.529]   - Field: ‘local’
[17:02:02.529]   - Field: ‘owner’
[17:02:02.529]   - Field: ‘envir’
[17:02:02.529]   - Field: ‘packages’
[17:02:02.529]   - Field: ‘gc’
[17:02:02.529]   - Field: ‘conditions’
[17:02:02.529]   - Field: ‘expr’
[17:02:02.529]   - Field: ‘uuid’
[17:02:02.529]   - Field: ‘seed’
[17:02:02.530]   - Field: ‘version’
[17:02:02.530]   - Field: ‘result’
[17:02:02.530]   - Field: ‘asynchronous’
[17:02:02.530]   - Field: ‘calls’
[17:02:02.530]   - Field: ‘globals’
[17:02:02.530]   - Field: ‘stdout’
[17:02:02.530]   - Field: ‘earlySignal’
[17:02:02.530]   - Field: ‘lazy’
[17:02:02.530]   - Field: ‘state’
[17:02:02.530] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:02.530] - Launch lazy future ...
[17:02:02.531] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.531] Packages needed by future strategies (n = 0): <none>
[17:02:02.531] {
[17:02:02.531]     {
[17:02:02.531]         {
[17:02:02.531]             ...future.startTime <- base::Sys.time()
[17:02:02.531]             {
[17:02:02.531]                 {
[17:02:02.531]                   {
[17:02:02.531]                     {
[17:02:02.531]                       base::local({
[17:02:02.531]                         has_future <- base::requireNamespace("future", 
[17:02:02.531]                           quietly = TRUE)
[17:02:02.531]                         if (has_future) {
[17:02:02.531]                           ns <- base::getNamespace("future")
[17:02:02.531]                           version <- ns[[".package"]][["version"]]
[17:02:02.531]                           if (is.null(version)) 
[17:02:02.531]                             version <- utils::packageVersion("future")
[17:02:02.531]                         }
[17:02:02.531]                         else {
[17:02:02.531]                           version <- NULL
[17:02:02.531]                         }
[17:02:02.531]                         if (!has_future || version < "1.8.0") {
[17:02:02.531]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.531]                             "", base::R.version$version.string), 
[17:02:02.531]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:02.531]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:02.531]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.531]                               "release", "version")], collapse = " "), 
[17:02:02.531]                             hostname = base::Sys.info()[["nodename"]])
[17:02:02.531]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.531]                             info)
[17:02:02.531]                           info <- base::paste(info, collapse = "; ")
[17:02:02.531]                           if (!has_future) {
[17:02:02.531]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.531]                               info)
[17:02:02.531]                           }
[17:02:02.531]                           else {
[17:02:02.531]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.531]                               info, version)
[17:02:02.531]                           }
[17:02:02.531]                           base::stop(msg)
[17:02:02.531]                         }
[17:02:02.531]                       })
[17:02:02.531]                     }
[17:02:02.531]                     base::local({
[17:02:02.531]                       for (pkg in "future") {
[17:02:02.531]                         base::loadNamespace(pkg)
[17:02:02.531]                         base::library(pkg, character.only = TRUE)
[17:02:02.531]                       }
[17:02:02.531]                     })
[17:02:02.531]                   }
[17:02:02.531]                   ...future.strategy.old <- future::plan("list")
[17:02:02.531]                   options(future.plan = NULL)
[17:02:02.531]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.531]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.531]                 }
[17:02:02.531]                 ...future.workdir <- getwd()
[17:02:02.531]             }
[17:02:02.531]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.531]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.531]         }
[17:02:02.531]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.531]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.531]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.531]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.531]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.531]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.531]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.531]             base::names(...future.oldOptions))
[17:02:02.531]     }
[17:02:02.531]     if (FALSE) {
[17:02:02.531]     }
[17:02:02.531]     else {
[17:02:02.531]         if (TRUE) {
[17:02:02.531]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.531]                 open = "w")
[17:02:02.531]         }
[17:02:02.531]         else {
[17:02:02.531]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.531]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.531]         }
[17:02:02.531]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.531]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.531]             base::sink(type = "output", split = FALSE)
[17:02:02.531]             base::close(...future.stdout)
[17:02:02.531]         }, add = TRUE)
[17:02:02.531]     }
[17:02:02.531]     ...future.frame <- base::sys.nframe()
[17:02:02.531]     ...future.conditions <- base::list()
[17:02:02.531]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.531]     if (FALSE) {
[17:02:02.531]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.531]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.531]     }
[17:02:02.531]     ...future.result <- base::tryCatch({
[17:02:02.531]         base::withCallingHandlers({
[17:02:02.531]             ...future.value <- base::withVisible(base::local({
[17:02:02.531]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.531]                   ii, n), appendLF = FALSE)
[17:02:02.531]                 fit <- mandelbrot(C)
[17:02:02.531]                 delay(fit)
[17:02:02.531]                 message(" done")
[17:02:02.531]                 fit
[17:02:02.531]             }))
[17:02:02.531]             future::FutureResult(value = ...future.value$value, 
[17:02:02.531]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.531]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.531]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.531]                     ...future.globalenv.names))
[17:02:02.531]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.531]         }, condition = base::local({
[17:02:02.531]             c <- base::c
[17:02:02.531]             inherits <- base::inherits
[17:02:02.531]             invokeRestart <- base::invokeRestart
[17:02:02.531]             length <- base::length
[17:02:02.531]             list <- base::list
[17:02:02.531]             seq.int <- base::seq.int
[17:02:02.531]             signalCondition <- base::signalCondition
[17:02:02.531]             sys.calls <- base::sys.calls
[17:02:02.531]             `[[` <- base::`[[`
[17:02:02.531]             `+` <- base::`+`
[17:02:02.531]             `<<-` <- base::`<<-`
[17:02:02.531]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.531]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.531]                   3L)]
[17:02:02.531]             }
[17:02:02.531]             function(cond) {
[17:02:02.531]                 is_error <- inherits(cond, "error")
[17:02:02.531]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.531]                   NULL)
[17:02:02.531]                 if (is_error) {
[17:02:02.531]                   sessionInformation <- function() {
[17:02:02.531]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.531]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.531]                       search = base::search(), system = base::Sys.info())
[17:02:02.531]                   }
[17:02:02.531]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.531]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.531]                     cond$call), session = sessionInformation(), 
[17:02:02.531]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.531]                   signalCondition(cond)
[17:02:02.531]                 }
[17:02:02.531]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.531]                 "immediateCondition"))) {
[17:02:02.531]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.531]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.531]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.531]                   if (TRUE && !signal) {
[17:02:02.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.531]                     {
[17:02:02.531]                       inherits <- base::inherits
[17:02:02.531]                       invokeRestart <- base::invokeRestart
[17:02:02.531]                       is.null <- base::is.null
[17:02:02.531]                       muffled <- FALSE
[17:02:02.531]                       if (inherits(cond, "message")) {
[17:02:02.531]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.531]                         if (muffled) 
[17:02:02.531]                           invokeRestart("muffleMessage")
[17:02:02.531]                       }
[17:02:02.531]                       else if (inherits(cond, "warning")) {
[17:02:02.531]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.531]                         if (muffled) 
[17:02:02.531]                           invokeRestart("muffleWarning")
[17:02:02.531]                       }
[17:02:02.531]                       else if (inherits(cond, "condition")) {
[17:02:02.531]                         if (!is.null(pattern)) {
[17:02:02.531]                           computeRestarts <- base::computeRestarts
[17:02:02.531]                           grepl <- base::grepl
[17:02:02.531]                           restarts <- computeRestarts(cond)
[17:02:02.531]                           for (restart in restarts) {
[17:02:02.531]                             name <- restart$name
[17:02:02.531]                             if (is.null(name)) 
[17:02:02.531]                               next
[17:02:02.531]                             if (!grepl(pattern, name)) 
[17:02:02.531]                               next
[17:02:02.531]                             invokeRestart(restart)
[17:02:02.531]                             muffled <- TRUE
[17:02:02.531]                             break
[17:02:02.531]                           }
[17:02:02.531]                         }
[17:02:02.531]                       }
[17:02:02.531]                       invisible(muffled)
[17:02:02.531]                     }
[17:02:02.531]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.531]                   }
[17:02:02.531]                 }
[17:02:02.531]                 else {
[17:02:02.531]                   if (TRUE) {
[17:02:02.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.531]                     {
[17:02:02.531]                       inherits <- base::inherits
[17:02:02.531]                       invokeRestart <- base::invokeRestart
[17:02:02.531]                       is.null <- base::is.null
[17:02:02.531]                       muffled <- FALSE
[17:02:02.531]                       if (inherits(cond, "message")) {
[17:02:02.531]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.531]                         if (muffled) 
[17:02:02.531]                           invokeRestart("muffleMessage")
[17:02:02.531]                       }
[17:02:02.531]                       else if (inherits(cond, "warning")) {
[17:02:02.531]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.531]                         if (muffled) 
[17:02:02.531]                           invokeRestart("muffleWarning")
[17:02:02.531]                       }
[17:02:02.531]                       else if (inherits(cond, "condition")) {
[17:02:02.531]                         if (!is.null(pattern)) {
[17:02:02.531]                           computeRestarts <- base::computeRestarts
[17:02:02.531]                           grepl <- base::grepl
[17:02:02.531]                           restarts <- computeRestarts(cond)
[17:02:02.531]                           for (restart in restarts) {
[17:02:02.531]                             name <- restart$name
[17:02:02.531]                             if (is.null(name)) 
[17:02:02.531]                               next
[17:02:02.531]                             if (!grepl(pattern, name)) 
[17:02:02.531]                               next
[17:02:02.531]                             invokeRestart(restart)
[17:02:02.531]                             muffled <- TRUE
[17:02:02.531]                             break
[17:02:02.531]                           }
[17:02:02.531]                         }
[17:02:02.531]                       }
[17:02:02.531]                       invisible(muffled)
[17:02:02.531]                     }
[17:02:02.531]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.531]                   }
[17:02:02.531]                 }
[17:02:02.531]             }
[17:02:02.531]         }))
[17:02:02.531]     }, error = function(ex) {
[17:02:02.531]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.531]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.531]                 ...future.rng), started = ...future.startTime, 
[17:02:02.531]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.531]             version = "1.8"), class = "FutureResult")
[17:02:02.531]     }, finally = {
[17:02:02.531]         if (!identical(...future.workdir, getwd())) 
[17:02:02.531]             setwd(...future.workdir)
[17:02:02.531]         {
[17:02:02.531]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.531]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.531]             }
[17:02:02.531]             base::options(...future.oldOptions)
[17:02:02.531]             if (.Platform$OS.type == "windows") {
[17:02:02.531]                 old_names <- names(...future.oldEnvVars)
[17:02:02.531]                 envs <- base::Sys.getenv()
[17:02:02.531]                 names <- names(envs)
[17:02:02.531]                 common <- intersect(names, old_names)
[17:02:02.531]                 added <- setdiff(names, old_names)
[17:02:02.531]                 removed <- setdiff(old_names, names)
[17:02:02.531]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.531]                   envs[common]]
[17:02:02.531]                 NAMES <- toupper(changed)
[17:02:02.531]                 args <- list()
[17:02:02.531]                 for (kk in seq_along(NAMES)) {
[17:02:02.531]                   name <- changed[[kk]]
[17:02:02.531]                   NAME <- NAMES[[kk]]
[17:02:02.531]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.531]                     next
[17:02:02.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.531]                 }
[17:02:02.531]                 NAMES <- toupper(added)
[17:02:02.531]                 for (kk in seq_along(NAMES)) {
[17:02:02.531]                   name <- added[[kk]]
[17:02:02.531]                   NAME <- NAMES[[kk]]
[17:02:02.531]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.531]                     next
[17:02:02.531]                   args[[name]] <- ""
[17:02:02.531]                 }
[17:02:02.531]                 NAMES <- toupper(removed)
[17:02:02.531]                 for (kk in seq_along(NAMES)) {
[17:02:02.531]                   name <- removed[[kk]]
[17:02:02.531]                   NAME <- NAMES[[kk]]
[17:02:02.531]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.531]                     next
[17:02:02.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.531]                 }
[17:02:02.531]                 if (length(args) > 0) 
[17:02:02.531]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.531]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.531]             }
[17:02:02.531]             else {
[17:02:02.531]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.531]             }
[17:02:02.531]             {
[17:02:02.531]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.531]                   0L) {
[17:02:02.531]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.531]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.531]                   base::options(opts)
[17:02:02.531]                 }
[17:02:02.531]                 {
[17:02:02.531]                   {
[17:02:02.531]                     NULL
[17:02:02.531]                     RNGkind("Mersenne-Twister")
[17:02:02.531]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:02.531]                       inherits = FALSE)
[17:02:02.531]                   }
[17:02:02.531]                   options(future.plan = NULL)
[17:02:02.531]                   if (is.na(NA_character_)) 
[17:02:02.531]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.531]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.531]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.531]                     .init = FALSE)
[17:02:02.531]                 }
[17:02:02.531]             }
[17:02:02.531]         }
[17:02:02.531]     })
[17:02:02.531]     if (TRUE) {
[17:02:02.531]         base::sink(type = "output", split = FALSE)
[17:02:02.531]         if (TRUE) {
[17:02:02.531]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.531]         }
[17:02:02.531]         else {
[17:02:02.531]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.531]         }
[17:02:02.531]         base::close(...future.stdout)
[17:02:02.531]         ...future.stdout <- NULL
[17:02:02.531]     }
[17:02:02.531]     ...future.result$conditions <- ...future.conditions
[17:02:02.531]     ...future.result$finished <- base::Sys.time()
[17:02:02.531]     ...future.result
[17:02:02.531] }
[17:02:02.533] assign_globals() ...
[17:02:02.533] List of 4
[17:02:02.533]  $ ii   : int 1
[17:02:02.533]  $ n    : int 4
[17:02:02.533]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[17:02:02.533]   ..- attr(*, "region")=List of 2
[17:02:02.533]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:02:02.533]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:02:02.533]   ..- attr(*, "tile")= int [1:2] 1 1
[17:02:02.533]  $ delay:function (counts)  
[17:02:02.533]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.533]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52967d170> 
[17:02:02.533]  - attr(*, "where")=List of 4
[17:02:02.533]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.533]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.533]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.533]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.533]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.533]  - attr(*, "resolved")= logi FALSE
[17:02:02.533]  - attr(*, "total_size")= num 14584
[17:02:02.533]  - attr(*, "already-done")= logi TRUE
[17:02:02.539] - copied ‘ii’ to environment
[17:02:02.539] - copied ‘n’ to environment
[17:02:02.540] - copied ‘C’ to environment
[17:02:02.540] - reassign environment for ‘delay’
[17:02:02.540] - copied ‘delay’ to environment
[17:02:02.540] assign_globals() ... done
[17:02:02.540] plan(): Setting new future strategy stack:
[17:02:02.540] List of future strategies:
[17:02:02.540] 1. sequential:
[17:02:02.540]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.540]    - tweaked: FALSE
[17:02:02.540]    - call: NULL
[17:02:02.541] plan(): nbrOfWorkers() = 1
[17:02:02.559] plan(): Setting new future strategy stack:
[17:02:02.559] List of future strategies:
[17:02:02.559] 1. sequential:
[17:02:02.559]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.559]    - tweaked: FALSE
[17:02:02.559]    - call: plan(strategy)
[17:02:02.559] plan(): nbrOfWorkers() = 1
[17:02:02.560] SequentialFuture started (and completed)
[17:02:02.560] signalConditions() ...
[17:02:02.560]  - include = ‘immediateCondition’
[17:02:02.560]  - exclude = 
[17:02:02.560]  - resignal = FALSE
[17:02:02.560]  - Number of conditions: 2
[17:02:02.560] signalConditions() ... done
[17:02:02.560] - Launch lazy future ... done
[17:02:02.560] run() for ‘SequentialFuture’ ... done
[17:02:02.561] - run() ... done
[17:02:02.561] - resolved() ...
[17:02:02.561] resolved() for ‘SequentialFuture’ ...
[17:02:02.561] - state: ‘finished’
[17:02:02.561] - run: TRUE
[17:02:02.561] - result: ‘FutureResult’
[17:02:02.561] resolved() for ‘SequentialFuture’ ... done
[17:02:02.561] - resolved: TRUE
[17:02:02.561] - resolved() ... done
[17:02:02.561] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[17:02:02.562] signalConditions() ...
[17:02:02.562]  - include = ‘immediateCondition’
[17:02:02.562]  - exclude = 
[17:02:02.562]  - resignal = FALSE
[17:02:02.562]  - Number of conditions: 2
[17:02:02.562] signalConditions() ... done
[17:02:02.562] Future state: ‘finished’
[17:02:02.562] signalConditions() ...
[17:02:02.562]  - include = ‘condition’
[17:02:02.562]  - exclude = ‘immediateCondition’
[17:02:02.562]  - resignal = TRUE
[17:02:02.563]  - Number of conditions: 2
[17:02:02.563]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:02:02.563]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.563] signalConditions() ... done
[17:02:02.564] resolved() for ‘Future’ ...
[17:02:02.565] - state: ‘created’
[17:02:02.565] - run: TRUE
[17:02:02.565] - run() ...
[17:02:02.565] run() for ‘Future’ ...
[17:02:02.565] - state: ‘created’
[17:02:02.565] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:02.565] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:02.566] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:02.566]   - Field: ‘label’
[17:02:02.566]   - Field: ‘local’
[17:02:02.566]   - Field: ‘owner’
[17:02:02.566]   - Field: ‘envir’
[17:02:02.566]   - Field: ‘packages’
[17:02:02.566]   - Field: ‘gc’
[17:02:02.566]   - Field: ‘conditions’
[17:02:02.566]   - Field: ‘expr’
[17:02:02.566]   - Field: ‘uuid’
[17:02:02.567]   - Field: ‘seed’
[17:02:02.567]   - Field: ‘version’
[17:02:02.567]   - Field: ‘result’
[17:02:02.567]   - Field: ‘asynchronous’
[17:02:02.567]   - Field: ‘calls’
[17:02:02.567]   - Field: ‘globals’
[17:02:02.567]   - Field: ‘stdout’
[17:02:02.567]   - Field: ‘earlySignal’
[17:02:02.567]   - Field: ‘lazy’
[17:02:02.567]   - Field: ‘state’
[17:02:02.568] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:02.568] - Launch lazy future ...
[17:02:02.568] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.568] Packages needed by future strategies (n = 0): <none>
[17:02:02.569] {
[17:02:02.569]     {
[17:02:02.569]         {
[17:02:02.569]             ...future.startTime <- base::Sys.time()
[17:02:02.569]             {
[17:02:02.569]                 {
[17:02:02.569]                   {
[17:02:02.569]                     {
[17:02:02.569]                       base::local({
[17:02:02.569]                         has_future <- base::requireNamespace("future", 
[17:02:02.569]                           quietly = TRUE)
[17:02:02.569]                         if (has_future) {
[17:02:02.569]                           ns <- base::getNamespace("future")
[17:02:02.569]                           version <- ns[[".package"]][["version"]]
[17:02:02.569]                           if (is.null(version)) 
[17:02:02.569]                             version <- utils::packageVersion("future")
[17:02:02.569]                         }
[17:02:02.569]                         else {
[17:02:02.569]                           version <- NULL
[17:02:02.569]                         }
[17:02:02.569]                         if (!has_future || version < "1.8.0") {
[17:02:02.569]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.569]                             "", base::R.version$version.string), 
[17:02:02.569]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:02.569]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:02.569]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.569]                               "release", "version")], collapse = " "), 
[17:02:02.569]                             hostname = base::Sys.info()[["nodename"]])
[17:02:02.569]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.569]                             info)
[17:02:02.569]                           info <- base::paste(info, collapse = "; ")
[17:02:02.569]                           if (!has_future) {
[17:02:02.569]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.569]                               info)
[17:02:02.569]                           }
[17:02:02.569]                           else {
[17:02:02.569]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.569]                               info, version)
[17:02:02.569]                           }
[17:02:02.569]                           base::stop(msg)
[17:02:02.569]                         }
[17:02:02.569]                       })
[17:02:02.569]                     }
[17:02:02.569]                     base::local({
[17:02:02.569]                       for (pkg in "future") {
[17:02:02.569]                         base::loadNamespace(pkg)
[17:02:02.569]                         base::library(pkg, character.only = TRUE)
[17:02:02.569]                       }
[17:02:02.569]                     })
[17:02:02.569]                   }
[17:02:02.569]                   ...future.strategy.old <- future::plan("list")
[17:02:02.569]                   options(future.plan = NULL)
[17:02:02.569]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.569]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.569]                 }
[17:02:02.569]                 ...future.workdir <- getwd()
[17:02:02.569]             }
[17:02:02.569]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.569]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.569]         }
[17:02:02.569]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.569]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.569]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.569]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.569]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.569]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.569]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.569]             base::names(...future.oldOptions))
[17:02:02.569]     }
[17:02:02.569]     if (FALSE) {
[17:02:02.569]     }
[17:02:02.569]     else {
[17:02:02.569]         if (TRUE) {
[17:02:02.569]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.569]                 open = "w")
[17:02:02.569]         }
[17:02:02.569]         else {
[17:02:02.569]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.569]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.569]         }
[17:02:02.569]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.569]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.569]             base::sink(type = "output", split = FALSE)
[17:02:02.569]             base::close(...future.stdout)
[17:02:02.569]         }, add = TRUE)
[17:02:02.569]     }
[17:02:02.569]     ...future.frame <- base::sys.nframe()
[17:02:02.569]     ...future.conditions <- base::list()
[17:02:02.569]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.569]     if (FALSE) {
[17:02:02.569]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.569]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.569]     }
[17:02:02.569]     ...future.result <- base::tryCatch({
[17:02:02.569]         base::withCallingHandlers({
[17:02:02.569]             ...future.value <- base::withVisible(base::local({
[17:02:02.569]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.569]                   ii, n), appendLF = FALSE)
[17:02:02.569]                 fit <- mandelbrot(C)
[17:02:02.569]                 delay(fit)
[17:02:02.569]                 message(" done")
[17:02:02.569]                 fit
[17:02:02.569]             }))
[17:02:02.569]             future::FutureResult(value = ...future.value$value, 
[17:02:02.569]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.569]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.569]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.569]                     ...future.globalenv.names))
[17:02:02.569]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.569]         }, condition = base::local({
[17:02:02.569]             c <- base::c
[17:02:02.569]             inherits <- base::inherits
[17:02:02.569]             invokeRestart <- base::invokeRestart
[17:02:02.569]             length <- base::length
[17:02:02.569]             list <- base::list
[17:02:02.569]             seq.int <- base::seq.int
[17:02:02.569]             signalCondition <- base::signalCondition
[17:02:02.569]             sys.calls <- base::sys.calls
[17:02:02.569]             `[[` <- base::`[[`
[17:02:02.569]             `+` <- base::`+`
[17:02:02.569]             `<<-` <- base::`<<-`
[17:02:02.569]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.569]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.569]                   3L)]
[17:02:02.569]             }
[17:02:02.569]             function(cond) {
[17:02:02.569]                 is_error <- inherits(cond, "error")
[17:02:02.569]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.569]                   NULL)
[17:02:02.569]                 if (is_error) {
[17:02:02.569]                   sessionInformation <- function() {
[17:02:02.569]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.569]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.569]                       search = base::search(), system = base::Sys.info())
[17:02:02.569]                   }
[17:02:02.569]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.569]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.569]                     cond$call), session = sessionInformation(), 
[17:02:02.569]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.569]                   signalCondition(cond)
[17:02:02.569]                 }
[17:02:02.569]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.569]                 "immediateCondition"))) {
[17:02:02.569]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.569]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.569]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.569]                   if (TRUE && !signal) {
[17:02:02.569]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.569]                     {
[17:02:02.569]                       inherits <- base::inherits
[17:02:02.569]                       invokeRestart <- base::invokeRestart
[17:02:02.569]                       is.null <- base::is.null
[17:02:02.569]                       muffled <- FALSE
[17:02:02.569]                       if (inherits(cond, "message")) {
[17:02:02.569]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.569]                         if (muffled) 
[17:02:02.569]                           invokeRestart("muffleMessage")
[17:02:02.569]                       }
[17:02:02.569]                       else if (inherits(cond, "warning")) {
[17:02:02.569]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.569]                         if (muffled) 
[17:02:02.569]                           invokeRestart("muffleWarning")
[17:02:02.569]                       }
[17:02:02.569]                       else if (inherits(cond, "condition")) {
[17:02:02.569]                         if (!is.null(pattern)) {
[17:02:02.569]                           computeRestarts <- base::computeRestarts
[17:02:02.569]                           grepl <- base::grepl
[17:02:02.569]                           restarts <- computeRestarts(cond)
[17:02:02.569]                           for (restart in restarts) {
[17:02:02.569]                             name <- restart$name
[17:02:02.569]                             if (is.null(name)) 
[17:02:02.569]                               next
[17:02:02.569]                             if (!grepl(pattern, name)) 
[17:02:02.569]                               next
[17:02:02.569]                             invokeRestart(restart)
[17:02:02.569]                             muffled <- TRUE
[17:02:02.569]                             break
[17:02:02.569]                           }
[17:02:02.569]                         }
[17:02:02.569]                       }
[17:02:02.569]                       invisible(muffled)
[17:02:02.569]                     }
[17:02:02.569]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.569]                   }
[17:02:02.569]                 }
[17:02:02.569]                 else {
[17:02:02.569]                   if (TRUE) {
[17:02:02.569]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.569]                     {
[17:02:02.569]                       inherits <- base::inherits
[17:02:02.569]                       invokeRestart <- base::invokeRestart
[17:02:02.569]                       is.null <- base::is.null
[17:02:02.569]                       muffled <- FALSE
[17:02:02.569]                       if (inherits(cond, "message")) {
[17:02:02.569]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.569]                         if (muffled) 
[17:02:02.569]                           invokeRestart("muffleMessage")
[17:02:02.569]                       }
[17:02:02.569]                       else if (inherits(cond, "warning")) {
[17:02:02.569]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.569]                         if (muffled) 
[17:02:02.569]                           invokeRestart("muffleWarning")
[17:02:02.569]                       }
[17:02:02.569]                       else if (inherits(cond, "condition")) {
[17:02:02.569]                         if (!is.null(pattern)) {
[17:02:02.569]                           computeRestarts <- base::computeRestarts
[17:02:02.569]                           grepl <- base::grepl
[17:02:02.569]                           restarts <- computeRestarts(cond)
[17:02:02.569]                           for (restart in restarts) {
[17:02:02.569]                             name <- restart$name
[17:02:02.569]                             if (is.null(name)) 
[17:02:02.569]                               next
[17:02:02.569]                             if (!grepl(pattern, name)) 
[17:02:02.569]                               next
[17:02:02.569]                             invokeRestart(restart)
[17:02:02.569]                             muffled <- TRUE
[17:02:02.569]                             break
[17:02:02.569]                           }
[17:02:02.569]                         }
[17:02:02.569]                       }
[17:02:02.569]                       invisible(muffled)
[17:02:02.569]                     }
[17:02:02.569]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.569]                   }
[17:02:02.569]                 }
[17:02:02.569]             }
[17:02:02.569]         }))
[17:02:02.569]     }, error = function(ex) {
[17:02:02.569]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.569]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.569]                 ...future.rng), started = ...future.startTime, 
[17:02:02.569]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.569]             version = "1.8"), class = "FutureResult")
[17:02:02.569]     }, finally = {
[17:02:02.569]         if (!identical(...future.workdir, getwd())) 
[17:02:02.569]             setwd(...future.workdir)
[17:02:02.569]         {
[17:02:02.569]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.569]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.569]             }
[17:02:02.569]             base::options(...future.oldOptions)
[17:02:02.569]             if (.Platform$OS.type == "windows") {
[17:02:02.569]                 old_names <- names(...future.oldEnvVars)
[17:02:02.569]                 envs <- base::Sys.getenv()
[17:02:02.569]                 names <- names(envs)
[17:02:02.569]                 common <- intersect(names, old_names)
[17:02:02.569]                 added <- setdiff(names, old_names)
[17:02:02.569]                 removed <- setdiff(old_names, names)
[17:02:02.569]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.569]                   envs[common]]
[17:02:02.569]                 NAMES <- toupper(changed)
[17:02:02.569]                 args <- list()
[17:02:02.569]                 for (kk in seq_along(NAMES)) {
[17:02:02.569]                   name <- changed[[kk]]
[17:02:02.569]                   NAME <- NAMES[[kk]]
[17:02:02.569]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.569]                     next
[17:02:02.569]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.569]                 }
[17:02:02.569]                 NAMES <- toupper(added)
[17:02:02.569]                 for (kk in seq_along(NAMES)) {
[17:02:02.569]                   name <- added[[kk]]
[17:02:02.569]                   NAME <- NAMES[[kk]]
[17:02:02.569]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.569]                     next
[17:02:02.569]                   args[[name]] <- ""
[17:02:02.569]                 }
[17:02:02.569]                 NAMES <- toupper(removed)
[17:02:02.569]                 for (kk in seq_along(NAMES)) {
[17:02:02.569]                   name <- removed[[kk]]
[17:02:02.569]                   NAME <- NAMES[[kk]]
[17:02:02.569]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.569]                     next
[17:02:02.569]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.569]                 }
[17:02:02.569]                 if (length(args) > 0) 
[17:02:02.569]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.569]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.569]             }
[17:02:02.569]             else {
[17:02:02.569]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.569]             }
[17:02:02.569]             {
[17:02:02.569]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.569]                   0L) {
[17:02:02.569]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.569]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.569]                   base::options(opts)
[17:02:02.569]                 }
[17:02:02.569]                 {
[17:02:02.569]                   {
[17:02:02.569]                     NULL
[17:02:02.569]                     RNGkind("Mersenne-Twister")
[17:02:02.569]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:02.569]                       inherits = FALSE)
[17:02:02.569]                   }
[17:02:02.569]                   options(future.plan = NULL)
[17:02:02.569]                   if (is.na(NA_character_)) 
[17:02:02.569]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.569]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.569]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.569]                     .init = FALSE)
[17:02:02.569]                 }
[17:02:02.569]             }
[17:02:02.569]         }
[17:02:02.569]     })
[17:02:02.569]     if (TRUE) {
[17:02:02.569]         base::sink(type = "output", split = FALSE)
[17:02:02.569]         if (TRUE) {
[17:02:02.569]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.569]         }
[17:02:02.569]         else {
[17:02:02.569]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.569]         }
[17:02:02.569]         base::close(...future.stdout)
[17:02:02.569]         ...future.stdout <- NULL
[17:02:02.569]     }
[17:02:02.569]     ...future.result$conditions <- ...future.conditions
[17:02:02.569]     ...future.result$finished <- base::Sys.time()
[17:02:02.569]     ...future.result
[17:02:02.569] }
[17:02:02.570] assign_globals() ...
[17:02:02.570] List of 4
[17:02:02.570]  $ ii   : int 2
[17:02:02.570]  $ n    : int 4
[17:02:02.570]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[17:02:02.570]   ..- attr(*, "region")=List of 2
[17:02:02.570]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:02:02.570]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:02:02.570]   ..- attr(*, "tile")= int [1:2] 1 2
[17:02:02.570]  $ delay:function (counts)  
[17:02:02.570]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.570]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52967d170> 
[17:02:02.570]  - attr(*, "where")=List of 4
[17:02:02.570]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.570]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.570]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.570]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.570]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.570]  - attr(*, "resolved")= logi FALSE
[17:02:02.570]  - attr(*, "total_size")= num 14584
[17:02:02.570]  - attr(*, "already-done")= logi TRUE
[17:02:02.576] - copied ‘ii’ to environment
[17:02:02.577] - copied ‘n’ to environment
[17:02:02.577] - copied ‘C’ to environment
[17:02:02.577] - reassign environment for ‘delay’
[17:02:02.577] - copied ‘delay’ to environment
[17:02:02.577] assign_globals() ... done
[17:02:02.577] plan(): Setting new future strategy stack:
[17:02:02.577] List of future strategies:
[17:02:02.577] 1. sequential:
[17:02:02.577]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.577]    - tweaked: FALSE
[17:02:02.577]    - call: NULL
[17:02:02.578] plan(): nbrOfWorkers() = 1
[17:02:02.594] plan(): Setting new future strategy stack:
[17:02:02.594] List of future strategies:
[17:02:02.594] 1. sequential:
[17:02:02.594]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.594]    - tweaked: FALSE
[17:02:02.594]    - call: plan(strategy)
[17:02:02.594] plan(): nbrOfWorkers() = 1
[17:02:02.594] SequentialFuture started (and completed)
[17:02:02.595] signalConditions() ...
[17:02:02.595]  - include = ‘immediateCondition’
[17:02:02.595]  - exclude = 
[17:02:02.595]  - resignal = FALSE
[17:02:02.595]  - Number of conditions: 2
[17:02:02.595] signalConditions() ... done
[17:02:02.595] - Launch lazy future ... done
[17:02:02.595] run() for ‘SequentialFuture’ ... done
[17:02:02.595] - run() ... done
[17:02:02.595] - resolved() ...
[17:02:02.596] resolved() for ‘SequentialFuture’ ...
[17:02:02.596] - state: ‘finished’
[17:02:02.596] - run: TRUE
[17:02:02.596] - result: ‘FutureResult’
[17:02:02.596] resolved() for ‘SequentialFuture’ ... done
[17:02:02.596] - resolved: TRUE
[17:02:02.596] - resolved() ... done
[17:02:02.596] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[17:02:02.596] signalConditions() ...
[17:02:02.596]  - include = ‘immediateCondition’
[17:02:02.597]  - exclude = 
[17:02:02.597]  - resignal = FALSE
[17:02:02.597]  - Number of conditions: 2
[17:02:02.597] signalConditions() ... done
[17:02:02.597] Future state: ‘finished’
[17:02:02.597] signalConditions() ...
[17:02:02.597]  - include = ‘condition’
[17:02:02.597]  - exclude = ‘immediateCondition’
[17:02:02.597]  - resignal = TRUE
[17:02:02.597]  - Number of conditions: 2
[17:02:02.597]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:02:02.598]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.598] signalConditions() ... done
[17:02:02.598] resolved() for ‘Future’ ...
[17:02:02.598] - state: ‘created’
[17:02:02.599] - run: TRUE
[17:02:02.599] - run() ...
[17:02:02.599] run() for ‘Future’ ...
[17:02:02.599] - state: ‘created’
[17:02:02.599] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:02.599] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:02.600] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:02.600]   - Field: ‘label’
[17:02:02.600]   - Field: ‘local’
[17:02:02.600]   - Field: ‘owner’
[17:02:02.600]   - Field: ‘envir’
[17:02:02.600]   - Field: ‘packages’
[17:02:02.600]   - Field: ‘gc’
[17:02:02.600]   - Field: ‘conditions’
[17:02:02.600]   - Field: ‘expr’
[17:02:02.600]   - Field: ‘uuid’
[17:02:02.600]   - Field: ‘seed’
[17:02:02.601]   - Field: ‘version’
[17:02:02.601]   - Field: ‘result’
[17:02:02.601]   - Field: ‘asynchronous’
[17:02:02.601]   - Field: ‘calls’
[17:02:02.601]   - Field: ‘globals’
[17:02:02.601]   - Field: ‘stdout’
[17:02:02.601]   - Field: ‘earlySignal’
[17:02:02.601]   - Field: ‘lazy’
[17:02:02.601]   - Field: ‘state’
[17:02:02.601] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:02.601] - Launch lazy future ...
[17:02:02.602] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.602] Packages needed by future strategies (n = 0): <none>
[17:02:02.602] {
[17:02:02.602]     {
[17:02:02.602]         {
[17:02:02.602]             ...future.startTime <- base::Sys.time()
[17:02:02.602]             {
[17:02:02.602]                 {
[17:02:02.602]                   {
[17:02:02.602]                     {
[17:02:02.602]                       base::local({
[17:02:02.602]                         has_future <- base::requireNamespace("future", 
[17:02:02.602]                           quietly = TRUE)
[17:02:02.602]                         if (has_future) {
[17:02:02.602]                           ns <- base::getNamespace("future")
[17:02:02.602]                           version <- ns[[".package"]][["version"]]
[17:02:02.602]                           if (is.null(version)) 
[17:02:02.602]                             version <- utils::packageVersion("future")
[17:02:02.602]                         }
[17:02:02.602]                         else {
[17:02:02.602]                           version <- NULL
[17:02:02.602]                         }
[17:02:02.602]                         if (!has_future || version < "1.8.0") {
[17:02:02.602]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.602]                             "", base::R.version$version.string), 
[17:02:02.602]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:02.602]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:02.602]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.602]                               "release", "version")], collapse = " "), 
[17:02:02.602]                             hostname = base::Sys.info()[["nodename"]])
[17:02:02.602]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.602]                             info)
[17:02:02.602]                           info <- base::paste(info, collapse = "; ")
[17:02:02.602]                           if (!has_future) {
[17:02:02.602]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.602]                               info)
[17:02:02.602]                           }
[17:02:02.602]                           else {
[17:02:02.602]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.602]                               info, version)
[17:02:02.602]                           }
[17:02:02.602]                           base::stop(msg)
[17:02:02.602]                         }
[17:02:02.602]                       })
[17:02:02.602]                     }
[17:02:02.602]                     base::local({
[17:02:02.602]                       for (pkg in "future") {
[17:02:02.602]                         base::loadNamespace(pkg)
[17:02:02.602]                         base::library(pkg, character.only = TRUE)
[17:02:02.602]                       }
[17:02:02.602]                     })
[17:02:02.602]                   }
[17:02:02.602]                   ...future.strategy.old <- future::plan("list")
[17:02:02.602]                   options(future.plan = NULL)
[17:02:02.602]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.602]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.602]                 }
[17:02:02.602]                 ...future.workdir <- getwd()
[17:02:02.602]             }
[17:02:02.602]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.602]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.602]         }
[17:02:02.602]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.602]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.602]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.602]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.602]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.602]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.602]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.602]             base::names(...future.oldOptions))
[17:02:02.602]     }
[17:02:02.602]     if (FALSE) {
[17:02:02.602]     }
[17:02:02.602]     else {
[17:02:02.602]         if (TRUE) {
[17:02:02.602]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.602]                 open = "w")
[17:02:02.602]         }
[17:02:02.602]         else {
[17:02:02.602]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.602]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.602]         }
[17:02:02.602]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.602]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.602]             base::sink(type = "output", split = FALSE)
[17:02:02.602]             base::close(...future.stdout)
[17:02:02.602]         }, add = TRUE)
[17:02:02.602]     }
[17:02:02.602]     ...future.frame <- base::sys.nframe()
[17:02:02.602]     ...future.conditions <- base::list()
[17:02:02.602]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.602]     if (FALSE) {
[17:02:02.602]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.602]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.602]     }
[17:02:02.602]     ...future.result <- base::tryCatch({
[17:02:02.602]         base::withCallingHandlers({
[17:02:02.602]             ...future.value <- base::withVisible(base::local({
[17:02:02.602]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.602]                   ii, n), appendLF = FALSE)
[17:02:02.602]                 fit <- mandelbrot(C)
[17:02:02.602]                 delay(fit)
[17:02:02.602]                 message(" done")
[17:02:02.602]                 fit
[17:02:02.602]             }))
[17:02:02.602]             future::FutureResult(value = ...future.value$value, 
[17:02:02.602]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.602]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.602]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.602]                     ...future.globalenv.names))
[17:02:02.602]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.602]         }, condition = base::local({
[17:02:02.602]             c <- base::c
[17:02:02.602]             inherits <- base::inherits
[17:02:02.602]             invokeRestart <- base::invokeRestart
[17:02:02.602]             length <- base::length
[17:02:02.602]             list <- base::list
[17:02:02.602]             seq.int <- base::seq.int
[17:02:02.602]             signalCondition <- base::signalCondition
[17:02:02.602]             sys.calls <- base::sys.calls
[17:02:02.602]             `[[` <- base::`[[`
[17:02:02.602]             `+` <- base::`+`
[17:02:02.602]             `<<-` <- base::`<<-`
[17:02:02.602]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.602]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.602]                   3L)]
[17:02:02.602]             }
[17:02:02.602]             function(cond) {
[17:02:02.602]                 is_error <- inherits(cond, "error")
[17:02:02.602]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.602]                   NULL)
[17:02:02.602]                 if (is_error) {
[17:02:02.602]                   sessionInformation <- function() {
[17:02:02.602]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.602]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.602]                       search = base::search(), system = base::Sys.info())
[17:02:02.602]                   }
[17:02:02.602]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.602]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.602]                     cond$call), session = sessionInformation(), 
[17:02:02.602]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.602]                   signalCondition(cond)
[17:02:02.602]                 }
[17:02:02.602]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.602]                 "immediateCondition"))) {
[17:02:02.602]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.602]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.602]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.602]                   if (TRUE && !signal) {
[17:02:02.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.602]                     {
[17:02:02.602]                       inherits <- base::inherits
[17:02:02.602]                       invokeRestart <- base::invokeRestart
[17:02:02.602]                       is.null <- base::is.null
[17:02:02.602]                       muffled <- FALSE
[17:02:02.602]                       if (inherits(cond, "message")) {
[17:02:02.602]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.602]                         if (muffled) 
[17:02:02.602]                           invokeRestart("muffleMessage")
[17:02:02.602]                       }
[17:02:02.602]                       else if (inherits(cond, "warning")) {
[17:02:02.602]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.602]                         if (muffled) 
[17:02:02.602]                           invokeRestart("muffleWarning")
[17:02:02.602]                       }
[17:02:02.602]                       else if (inherits(cond, "condition")) {
[17:02:02.602]                         if (!is.null(pattern)) {
[17:02:02.602]                           computeRestarts <- base::computeRestarts
[17:02:02.602]                           grepl <- base::grepl
[17:02:02.602]                           restarts <- computeRestarts(cond)
[17:02:02.602]                           for (restart in restarts) {
[17:02:02.602]                             name <- restart$name
[17:02:02.602]                             if (is.null(name)) 
[17:02:02.602]                               next
[17:02:02.602]                             if (!grepl(pattern, name)) 
[17:02:02.602]                               next
[17:02:02.602]                             invokeRestart(restart)
[17:02:02.602]                             muffled <- TRUE
[17:02:02.602]                             break
[17:02:02.602]                           }
[17:02:02.602]                         }
[17:02:02.602]                       }
[17:02:02.602]                       invisible(muffled)
[17:02:02.602]                     }
[17:02:02.602]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.602]                   }
[17:02:02.602]                 }
[17:02:02.602]                 else {
[17:02:02.602]                   if (TRUE) {
[17:02:02.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.602]                     {
[17:02:02.602]                       inherits <- base::inherits
[17:02:02.602]                       invokeRestart <- base::invokeRestart
[17:02:02.602]                       is.null <- base::is.null
[17:02:02.602]                       muffled <- FALSE
[17:02:02.602]                       if (inherits(cond, "message")) {
[17:02:02.602]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.602]                         if (muffled) 
[17:02:02.602]                           invokeRestart("muffleMessage")
[17:02:02.602]                       }
[17:02:02.602]                       else if (inherits(cond, "warning")) {
[17:02:02.602]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.602]                         if (muffled) 
[17:02:02.602]                           invokeRestart("muffleWarning")
[17:02:02.602]                       }
[17:02:02.602]                       else if (inherits(cond, "condition")) {
[17:02:02.602]                         if (!is.null(pattern)) {
[17:02:02.602]                           computeRestarts <- base::computeRestarts
[17:02:02.602]                           grepl <- base::grepl
[17:02:02.602]                           restarts <- computeRestarts(cond)
[17:02:02.602]                           for (restart in restarts) {
[17:02:02.602]                             name <- restart$name
[17:02:02.602]                             if (is.null(name)) 
[17:02:02.602]                               next
[17:02:02.602]                             if (!grepl(pattern, name)) 
[17:02:02.602]                               next
[17:02:02.602]                             invokeRestart(restart)
[17:02:02.602]                             muffled <- TRUE
[17:02:02.602]                             break
[17:02:02.602]                           }
[17:02:02.602]                         }
[17:02:02.602]                       }
[17:02:02.602]                       invisible(muffled)
[17:02:02.602]                     }
[17:02:02.602]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.602]                   }
[17:02:02.602]                 }
[17:02:02.602]             }
[17:02:02.602]         }))
[17:02:02.602]     }, error = function(ex) {
[17:02:02.602]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.602]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.602]                 ...future.rng), started = ...future.startTime, 
[17:02:02.602]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.602]             version = "1.8"), class = "FutureResult")
[17:02:02.602]     }, finally = {
[17:02:02.602]         if (!identical(...future.workdir, getwd())) 
[17:02:02.602]             setwd(...future.workdir)
[17:02:02.602]         {
[17:02:02.602]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.602]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.602]             }
[17:02:02.602]             base::options(...future.oldOptions)
[17:02:02.602]             if (.Platform$OS.type == "windows") {
[17:02:02.602]                 old_names <- names(...future.oldEnvVars)
[17:02:02.602]                 envs <- base::Sys.getenv()
[17:02:02.602]                 names <- names(envs)
[17:02:02.602]                 common <- intersect(names, old_names)
[17:02:02.602]                 added <- setdiff(names, old_names)
[17:02:02.602]                 removed <- setdiff(old_names, names)
[17:02:02.602]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.602]                   envs[common]]
[17:02:02.602]                 NAMES <- toupper(changed)
[17:02:02.602]                 args <- list()
[17:02:02.602]                 for (kk in seq_along(NAMES)) {
[17:02:02.602]                   name <- changed[[kk]]
[17:02:02.602]                   NAME <- NAMES[[kk]]
[17:02:02.602]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.602]                     next
[17:02:02.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.602]                 }
[17:02:02.602]                 NAMES <- toupper(added)
[17:02:02.602]                 for (kk in seq_along(NAMES)) {
[17:02:02.602]                   name <- added[[kk]]
[17:02:02.602]                   NAME <- NAMES[[kk]]
[17:02:02.602]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.602]                     next
[17:02:02.602]                   args[[name]] <- ""
[17:02:02.602]                 }
[17:02:02.602]                 NAMES <- toupper(removed)
[17:02:02.602]                 for (kk in seq_along(NAMES)) {
[17:02:02.602]                   name <- removed[[kk]]
[17:02:02.602]                   NAME <- NAMES[[kk]]
[17:02:02.602]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.602]                     next
[17:02:02.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.602]                 }
[17:02:02.602]                 if (length(args) > 0) 
[17:02:02.602]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.602]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.602]             }
[17:02:02.602]             else {
[17:02:02.602]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.602]             }
[17:02:02.602]             {
[17:02:02.602]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.602]                   0L) {
[17:02:02.602]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.602]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.602]                   base::options(opts)
[17:02:02.602]                 }
[17:02:02.602]                 {
[17:02:02.602]                   {
[17:02:02.602]                     NULL
[17:02:02.602]                     RNGkind("Mersenne-Twister")
[17:02:02.602]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:02.602]                       inherits = FALSE)
[17:02:02.602]                   }
[17:02:02.602]                   options(future.plan = NULL)
[17:02:02.602]                   if (is.na(NA_character_)) 
[17:02:02.602]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.602]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.602]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.602]                     .init = FALSE)
[17:02:02.602]                 }
[17:02:02.602]             }
[17:02:02.602]         }
[17:02:02.602]     })
[17:02:02.602]     if (TRUE) {
[17:02:02.602]         base::sink(type = "output", split = FALSE)
[17:02:02.602]         if (TRUE) {
[17:02:02.602]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.602]         }
[17:02:02.602]         else {
[17:02:02.602]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.602]         }
[17:02:02.602]         base::close(...future.stdout)
[17:02:02.602]         ...future.stdout <- NULL
[17:02:02.602]     }
[17:02:02.602]     ...future.result$conditions <- ...future.conditions
[17:02:02.602]     ...future.result$finished <- base::Sys.time()
[17:02:02.602]     ...future.result
[17:02:02.602] }
[17:02:02.604] assign_globals() ...
[17:02:02.604] List of 4
[17:02:02.604]  $ ii   : int 3
[17:02:02.604]  $ n    : int 4
[17:02:02.604]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[17:02:02.604]   ..- attr(*, "region")=List of 2
[17:02:02.604]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:02:02.604]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:02:02.604]   ..- attr(*, "tile")= int [1:2] 2 1
[17:02:02.604]  $ delay:function (counts)  
[17:02:02.604]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.604]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52967d170> 
[17:02:02.604]  - attr(*, "where")=List of 4
[17:02:02.604]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.604]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.604]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.604]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.604]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.604]  - attr(*, "resolved")= logi FALSE
[17:02:02.604]  - attr(*, "total_size")= num 14584
[17:02:02.604]  - attr(*, "already-done")= logi TRUE
[17:02:02.611] - copied ‘ii’ to environment
[17:02:02.611] - copied ‘n’ to environment
[17:02:02.611] - copied ‘C’ to environment
[17:02:02.611] - reassign environment for ‘delay’
[17:02:02.611] - copied ‘delay’ to environment
[17:02:02.611] assign_globals() ... done
[17:02:02.612] plan(): Setting new future strategy stack:
[17:02:02.612] List of future strategies:
[17:02:02.612] 1. sequential:
[17:02:02.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.612]    - tweaked: FALSE
[17:02:02.612]    - call: NULL
[17:02:02.612] plan(): nbrOfWorkers() = 1
[17:02:02.630] plan(): Setting new future strategy stack:
[17:02:02.630] List of future strategies:
[17:02:02.630] 1. sequential:
[17:02:02.630]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.630]    - tweaked: FALSE
[17:02:02.630]    - call: plan(strategy)
[17:02:02.630] plan(): nbrOfWorkers() = 1
[17:02:02.631] SequentialFuture started (and completed)
[17:02:02.631] signalConditions() ...
[17:02:02.631]  - include = ‘immediateCondition’
[17:02:02.631]  - exclude = 
[17:02:02.631]  - resignal = FALSE
[17:02:02.631]  - Number of conditions: 2
[17:02:02.631] signalConditions() ... done
[17:02:02.631] - Launch lazy future ... done
[17:02:02.631] run() for ‘SequentialFuture’ ... done
[17:02:02.632] - run() ... done
[17:02:02.632] - resolved() ...
[17:02:02.632] resolved() for ‘SequentialFuture’ ...
[17:02:02.632] - state: ‘finished’
[17:02:02.632] - run: TRUE
[17:02:02.632] - result: ‘FutureResult’
[17:02:02.632] resolved() for ‘SequentialFuture’ ... done
[17:02:02.632] - resolved: TRUE
[17:02:02.632] - resolved() ... done
[17:02:02.632] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[17:02:02.633] signalConditions() ...
[17:02:02.633]  - include = ‘immediateCondition’
[17:02:02.633]  - exclude = 
[17:02:02.633]  - resignal = FALSE
[17:02:02.633]  - Number of conditions: 2
[17:02:02.633] signalConditions() ... done
[17:02:02.633] Future state: ‘finished’
[17:02:02.633] signalConditions() ...
[17:02:02.633]  - include = ‘condition’
[17:02:02.633]  - exclude = ‘immediateCondition’
[17:02:02.633]  - resignal = TRUE
[17:02:02.634]  - Number of conditions: 2
[17:02:02.634]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:02:02.634]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.634] signalConditions() ... done
[17:02:02.635] resolved() for ‘Future’ ...
[17:02:02.635] - state: ‘created’
[17:02:02.635] - run: TRUE
[17:02:02.635] - run() ...
[17:02:02.635] run() for ‘Future’ ...
[17:02:02.635] - state: ‘created’
[17:02:02.635] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:02.636] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:02.636] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:02.636]   - Field: ‘label’
[17:02:02.636]   - Field: ‘local’
[17:02:02.636]   - Field: ‘owner’
[17:02:02.636]   - Field: ‘envir’
[17:02:02.636]   - Field: ‘packages’
[17:02:02.636]   - Field: ‘gc’
[17:02:02.636]   - Field: ‘conditions’
[17:02:02.636]   - Field: ‘expr’
[17:02:02.636]   - Field: ‘uuid’
[17:02:02.637]   - Field: ‘seed’
[17:02:02.637]   - Field: ‘version’
[17:02:02.637]   - Field: ‘result’
[17:02:02.637]   - Field: ‘asynchronous’
[17:02:02.637]   - Field: ‘calls’
[17:02:02.637]   - Field: ‘globals’
[17:02:02.637]   - Field: ‘stdout’
[17:02:02.637]   - Field: ‘earlySignal’
[17:02:02.637]   - Field: ‘lazy’
[17:02:02.637]   - Field: ‘state’
[17:02:02.637] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:02.638] - Launch lazy future ...
[17:02:02.638] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.638] Packages needed by future strategies (n = 0): <none>
[17:02:02.638] {
[17:02:02.638]     {
[17:02:02.638]         {
[17:02:02.638]             ...future.startTime <- base::Sys.time()
[17:02:02.638]             {
[17:02:02.638]                 {
[17:02:02.638]                   {
[17:02:02.638]                     {
[17:02:02.638]                       base::local({
[17:02:02.638]                         has_future <- base::requireNamespace("future", 
[17:02:02.638]                           quietly = TRUE)
[17:02:02.638]                         if (has_future) {
[17:02:02.638]                           ns <- base::getNamespace("future")
[17:02:02.638]                           version <- ns[[".package"]][["version"]]
[17:02:02.638]                           if (is.null(version)) 
[17:02:02.638]                             version <- utils::packageVersion("future")
[17:02:02.638]                         }
[17:02:02.638]                         else {
[17:02:02.638]                           version <- NULL
[17:02:02.638]                         }
[17:02:02.638]                         if (!has_future || version < "1.8.0") {
[17:02:02.638]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.638]                             "", base::R.version$version.string), 
[17:02:02.638]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:02.638]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:02.638]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.638]                               "release", "version")], collapse = " "), 
[17:02:02.638]                             hostname = base::Sys.info()[["nodename"]])
[17:02:02.638]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.638]                             info)
[17:02:02.638]                           info <- base::paste(info, collapse = "; ")
[17:02:02.638]                           if (!has_future) {
[17:02:02.638]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.638]                               info)
[17:02:02.638]                           }
[17:02:02.638]                           else {
[17:02:02.638]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.638]                               info, version)
[17:02:02.638]                           }
[17:02:02.638]                           base::stop(msg)
[17:02:02.638]                         }
[17:02:02.638]                       })
[17:02:02.638]                     }
[17:02:02.638]                     base::local({
[17:02:02.638]                       for (pkg in "future") {
[17:02:02.638]                         base::loadNamespace(pkg)
[17:02:02.638]                         base::library(pkg, character.only = TRUE)
[17:02:02.638]                       }
[17:02:02.638]                     })
[17:02:02.638]                   }
[17:02:02.638]                   ...future.strategy.old <- future::plan("list")
[17:02:02.638]                   options(future.plan = NULL)
[17:02:02.638]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.638]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.638]                 }
[17:02:02.638]                 ...future.workdir <- getwd()
[17:02:02.638]             }
[17:02:02.638]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.638]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.638]         }
[17:02:02.638]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.638]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.638]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.638]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.638]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.638]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.638]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.638]             base::names(...future.oldOptions))
[17:02:02.638]     }
[17:02:02.638]     if (FALSE) {
[17:02:02.638]     }
[17:02:02.638]     else {
[17:02:02.638]         if (TRUE) {
[17:02:02.638]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.638]                 open = "w")
[17:02:02.638]         }
[17:02:02.638]         else {
[17:02:02.638]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.638]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.638]         }
[17:02:02.638]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.638]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.638]             base::sink(type = "output", split = FALSE)
[17:02:02.638]             base::close(...future.stdout)
[17:02:02.638]         }, add = TRUE)
[17:02:02.638]     }
[17:02:02.638]     ...future.frame <- base::sys.nframe()
[17:02:02.638]     ...future.conditions <- base::list()
[17:02:02.638]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.638]     if (FALSE) {
[17:02:02.638]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.638]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.638]     }
[17:02:02.638]     ...future.result <- base::tryCatch({
[17:02:02.638]         base::withCallingHandlers({
[17:02:02.638]             ...future.value <- base::withVisible(base::local({
[17:02:02.638]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.638]                   ii, n), appendLF = FALSE)
[17:02:02.638]                 fit <- mandelbrot(C)
[17:02:02.638]                 delay(fit)
[17:02:02.638]                 message(" done")
[17:02:02.638]                 fit
[17:02:02.638]             }))
[17:02:02.638]             future::FutureResult(value = ...future.value$value, 
[17:02:02.638]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.638]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.638]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.638]                     ...future.globalenv.names))
[17:02:02.638]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.638]         }, condition = base::local({
[17:02:02.638]             c <- base::c
[17:02:02.638]             inherits <- base::inherits
[17:02:02.638]             invokeRestart <- base::invokeRestart
[17:02:02.638]             length <- base::length
[17:02:02.638]             list <- base::list
[17:02:02.638]             seq.int <- base::seq.int
[17:02:02.638]             signalCondition <- base::signalCondition
[17:02:02.638]             sys.calls <- base::sys.calls
[17:02:02.638]             `[[` <- base::`[[`
[17:02:02.638]             `+` <- base::`+`
[17:02:02.638]             `<<-` <- base::`<<-`
[17:02:02.638]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.638]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.638]                   3L)]
[17:02:02.638]             }
[17:02:02.638]             function(cond) {
[17:02:02.638]                 is_error <- inherits(cond, "error")
[17:02:02.638]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.638]                   NULL)
[17:02:02.638]                 if (is_error) {
[17:02:02.638]                   sessionInformation <- function() {
[17:02:02.638]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.638]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.638]                       search = base::search(), system = base::Sys.info())
[17:02:02.638]                   }
[17:02:02.638]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.638]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.638]                     cond$call), session = sessionInformation(), 
[17:02:02.638]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.638]                   signalCondition(cond)
[17:02:02.638]                 }
[17:02:02.638]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.638]                 "immediateCondition"))) {
[17:02:02.638]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.638]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.638]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.638]                   if (TRUE && !signal) {
[17:02:02.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.638]                     {
[17:02:02.638]                       inherits <- base::inherits
[17:02:02.638]                       invokeRestart <- base::invokeRestart
[17:02:02.638]                       is.null <- base::is.null
[17:02:02.638]                       muffled <- FALSE
[17:02:02.638]                       if (inherits(cond, "message")) {
[17:02:02.638]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.638]                         if (muffled) 
[17:02:02.638]                           invokeRestart("muffleMessage")
[17:02:02.638]                       }
[17:02:02.638]                       else if (inherits(cond, "warning")) {
[17:02:02.638]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.638]                         if (muffled) 
[17:02:02.638]                           invokeRestart("muffleWarning")
[17:02:02.638]                       }
[17:02:02.638]                       else if (inherits(cond, "condition")) {
[17:02:02.638]                         if (!is.null(pattern)) {
[17:02:02.638]                           computeRestarts <- base::computeRestarts
[17:02:02.638]                           grepl <- base::grepl
[17:02:02.638]                           restarts <- computeRestarts(cond)
[17:02:02.638]                           for (restart in restarts) {
[17:02:02.638]                             name <- restart$name
[17:02:02.638]                             if (is.null(name)) 
[17:02:02.638]                               next
[17:02:02.638]                             if (!grepl(pattern, name)) 
[17:02:02.638]                               next
[17:02:02.638]                             invokeRestart(restart)
[17:02:02.638]                             muffled <- TRUE
[17:02:02.638]                             break
[17:02:02.638]                           }
[17:02:02.638]                         }
[17:02:02.638]                       }
[17:02:02.638]                       invisible(muffled)
[17:02:02.638]                     }
[17:02:02.638]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.638]                   }
[17:02:02.638]                 }
[17:02:02.638]                 else {
[17:02:02.638]                   if (TRUE) {
[17:02:02.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.638]                     {
[17:02:02.638]                       inherits <- base::inherits
[17:02:02.638]                       invokeRestart <- base::invokeRestart
[17:02:02.638]                       is.null <- base::is.null
[17:02:02.638]                       muffled <- FALSE
[17:02:02.638]                       if (inherits(cond, "message")) {
[17:02:02.638]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.638]                         if (muffled) 
[17:02:02.638]                           invokeRestart("muffleMessage")
[17:02:02.638]                       }
[17:02:02.638]                       else if (inherits(cond, "warning")) {
[17:02:02.638]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.638]                         if (muffled) 
[17:02:02.638]                           invokeRestart("muffleWarning")
[17:02:02.638]                       }
[17:02:02.638]                       else if (inherits(cond, "condition")) {
[17:02:02.638]                         if (!is.null(pattern)) {
[17:02:02.638]                           computeRestarts <- base::computeRestarts
[17:02:02.638]                           grepl <- base::grepl
[17:02:02.638]                           restarts <- computeRestarts(cond)
[17:02:02.638]                           for (restart in restarts) {
[17:02:02.638]                             name <- restart$name
[17:02:02.638]                             if (is.null(name)) 
[17:02:02.638]                               next
[17:02:02.638]                             if (!grepl(pattern, name)) 
[17:02:02.638]                               next
[17:02:02.638]                             invokeRestart(restart)
[17:02:02.638]                             muffled <- TRUE
[17:02:02.638]                             break
[17:02:02.638]                           }
[17:02:02.638]                         }
[17:02:02.638]                       }
[17:02:02.638]                       invisible(muffled)
[17:02:02.638]                     }
[17:02:02.638]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.638]                   }
[17:02:02.638]                 }
[17:02:02.638]             }
[17:02:02.638]         }))
[17:02:02.638]     }, error = function(ex) {
[17:02:02.638]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.638]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.638]                 ...future.rng), started = ...future.startTime, 
[17:02:02.638]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.638]             version = "1.8"), class = "FutureResult")
[17:02:02.638]     }, finally = {
[17:02:02.638]         if (!identical(...future.workdir, getwd())) 
[17:02:02.638]             setwd(...future.workdir)
[17:02:02.638]         {
[17:02:02.638]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.638]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.638]             }
[17:02:02.638]             base::options(...future.oldOptions)
[17:02:02.638]             if (.Platform$OS.type == "windows") {
[17:02:02.638]                 old_names <- names(...future.oldEnvVars)
[17:02:02.638]                 envs <- base::Sys.getenv()
[17:02:02.638]                 names <- names(envs)
[17:02:02.638]                 common <- intersect(names, old_names)
[17:02:02.638]                 added <- setdiff(names, old_names)
[17:02:02.638]                 removed <- setdiff(old_names, names)
[17:02:02.638]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.638]                   envs[common]]
[17:02:02.638]                 NAMES <- toupper(changed)
[17:02:02.638]                 args <- list()
[17:02:02.638]                 for (kk in seq_along(NAMES)) {
[17:02:02.638]                   name <- changed[[kk]]
[17:02:02.638]                   NAME <- NAMES[[kk]]
[17:02:02.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.638]                     next
[17:02:02.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.638]                 }
[17:02:02.638]                 NAMES <- toupper(added)
[17:02:02.638]                 for (kk in seq_along(NAMES)) {
[17:02:02.638]                   name <- added[[kk]]
[17:02:02.638]                   NAME <- NAMES[[kk]]
[17:02:02.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.638]                     next
[17:02:02.638]                   args[[name]] <- ""
[17:02:02.638]                 }
[17:02:02.638]                 NAMES <- toupper(removed)
[17:02:02.638]                 for (kk in seq_along(NAMES)) {
[17:02:02.638]                   name <- removed[[kk]]
[17:02:02.638]                   NAME <- NAMES[[kk]]
[17:02:02.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.638]                     next
[17:02:02.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.638]                 }
[17:02:02.638]                 if (length(args) > 0) 
[17:02:02.638]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.638]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.638]             }
[17:02:02.638]             else {
[17:02:02.638]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.638]             }
[17:02:02.638]             {
[17:02:02.638]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.638]                   0L) {
[17:02:02.638]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.638]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.638]                   base::options(opts)
[17:02:02.638]                 }
[17:02:02.638]                 {
[17:02:02.638]                   {
[17:02:02.638]                     NULL
[17:02:02.638]                     RNGkind("Mersenne-Twister")
[17:02:02.638]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:02.638]                       inherits = FALSE)
[17:02:02.638]                   }
[17:02:02.638]                   options(future.plan = NULL)
[17:02:02.638]                   if (is.na(NA_character_)) 
[17:02:02.638]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.638]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.638]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.638]                     .init = FALSE)
[17:02:02.638]                 }
[17:02:02.638]             }
[17:02:02.638]         }
[17:02:02.638]     })
[17:02:02.638]     if (TRUE) {
[17:02:02.638]         base::sink(type = "output", split = FALSE)
[17:02:02.638]         if (TRUE) {
[17:02:02.638]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.638]         }
[17:02:02.638]         else {
[17:02:02.638]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.638]         }
[17:02:02.638]         base::close(...future.stdout)
[17:02:02.638]         ...future.stdout <- NULL
[17:02:02.638]     }
[17:02:02.638]     ...future.result$conditions <- ...future.conditions
[17:02:02.638]     ...future.result$finished <- base::Sys.time()
[17:02:02.638]     ...future.result
[17:02:02.638] }
[17:02:02.640] assign_globals() ...
[17:02:02.640] List of 4
[17:02:02.640]  $ ii   : int 4
[17:02:02.640]  $ n    : int 4
[17:02:02.640]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[17:02:02.640]   ..- attr(*, "region")=List of 2
[17:02:02.640]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:02:02.640]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:02:02.640]   ..- attr(*, "tile")= int [1:2] 2 2
[17:02:02.640]  $ delay:function (counts)  
[17:02:02.640]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.640]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52967d170> 
[17:02:02.640]  - attr(*, "where")=List of 4
[17:02:02.640]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.640]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.640]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.640]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.640]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.640]  - attr(*, "resolved")= logi FALSE
[17:02:02.640]  - attr(*, "total_size")= num 14584
[17:02:02.640]  - attr(*, "already-done")= logi TRUE
[17:02:02.646] - copied ‘ii’ to environment
[17:02:02.646] - copied ‘n’ to environment
[17:02:02.646] - copied ‘C’ to environment
[17:02:02.647] - reassign environment for ‘delay’
[17:02:02.647] - copied ‘delay’ to environment
[17:02:02.647] assign_globals() ... done
[17:02:02.647] plan(): Setting new future strategy stack:
[17:02:02.647] List of future strategies:
[17:02:02.647] 1. sequential:
[17:02:02.647]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.647]    - tweaked: FALSE
[17:02:02.647]    - call: NULL
[17:02:02.648] plan(): nbrOfWorkers() = 1
[17:02:02.663] plan(): Setting new future strategy stack:
[17:02:02.664] List of future strategies:
[17:02:02.664] 1. sequential:
[17:02:02.664]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.664]    - tweaked: FALSE
[17:02:02.664]    - call: plan(strategy)
[17:02:02.664] plan(): nbrOfWorkers() = 1
[17:02:02.664] SequentialFuture started (and completed)
[17:02:02.664] signalConditions() ...
[17:02:02.665]  - include = ‘immediateCondition’
[17:02:02.665]  - exclude = 
[17:02:02.665]  - resignal = FALSE
[17:02:02.665]  - Number of conditions: 2
[17:02:02.665] signalConditions() ... done
[17:02:02.665] - Launch lazy future ... done
[17:02:02.665] run() for ‘SequentialFuture’ ... done
[17:02:02.665] - run() ... done
[17:02:02.665] - resolved() ...
[17:02:02.665] resolved() for ‘SequentialFuture’ ...
[17:02:02.665] - state: ‘finished’
[17:02:02.666] - run: TRUE
[17:02:02.666] - result: ‘FutureResult’
[17:02:02.666] resolved() for ‘SequentialFuture’ ... done
[17:02:02.666] - resolved: TRUE
[17:02:02.666] - resolved() ... done
[17:02:02.666] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[17:02:02.666] signalConditions() ...
[17:02:02.666]  - include = ‘immediateCondition’
[17:02:02.666]  - exclude = 
[17:02:02.666]  - resignal = FALSE
[17:02:02.667]  - Number of conditions: 2
[17:02:02.667] signalConditions() ... done
[17:02:02.667] Future state: ‘finished’
[17:02:02.667] signalConditions() ...
[17:02:02.667]  - include = ‘condition’
[17:02:02.667]  - exclude = ‘immediateCondition’
[17:02:02.667]  - resignal = TRUE
[17:02:02.667]  - Number of conditions: 2
[17:02:02.667]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:02:02.667]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.668] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[17:02:02.674] plan(): Setting new future strategy stack:
[17:02:02.674] List of future strategies:
[17:02:02.674] 1. multicore:
[17:02:02.674]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:02.674]    - tweaked: FALSE
[17:02:02.674]    - call: plan(strategy)
[17:02:02.678] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:02:02.683] getGlobalsAndPackages() ...
[17:02:02.683] Searching for globals...
[17:02:02.689] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.689] Searching for globals ... DONE
[17:02:02.689] Resolving globals: FALSE
[17:02:02.690] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.690] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.690] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.690] - packages: [1] ‘future’
[17:02:02.691] getGlobalsAndPackages() ... DONE
 2[17:02:02.695] getGlobalsAndPackages() ...
[17:02:02.695] Searching for globals...
[17:02:02.698] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.698] Searching for globals ... DONE
[17:02:02.698] Resolving globals: FALSE
[17:02:02.699] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.699] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.699] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.699] - packages: [1] ‘future’
[17:02:02.700] getGlobalsAndPackages() ... DONE
 3[17:02:02.700] getGlobalsAndPackages() ...
[17:02:02.700] Searching for globals...
[17:02:02.703] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.703] Searching for globals ... DONE
[17:02:02.704] Resolving globals: FALSE
[17:02:02.704] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.705] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.705] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.705] - packages: [1] ‘future’
[17:02:02.705] getGlobalsAndPackages() ... DONE
 4[17:02:02.705] getGlobalsAndPackages() ...
[17:02:02.705] Searching for globals...
[17:02:02.709] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:02.709] Searching for globals ... DONE
[17:02:02.709] Resolving globals: FALSE
[17:02:02.709] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:02.710] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:02.710] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:02.710] - packages: [1] ‘future’
[17:02:02.710] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:02:02.719] resolved() for ‘Future’ ...
[17:02:02.719] - state: ‘created’
[17:02:02.719] - run: TRUE
[17:02:02.720] - run() ...
[17:02:02.720] run() for ‘Future’ ...
[17:02:02.720] - state: ‘created’
[17:02:02.720] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:02.724] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:02.724] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:02.724]   - Field: ‘label’
[17:02:02.724]   - Field: ‘local’
[17:02:02.724]   - Field: ‘owner’
[17:02:02.724]   - Field: ‘envir’
[17:02:02.724]   - Field: ‘workers’
[17:02:02.725]   - Field: ‘packages’
[17:02:02.725]   - Field: ‘gc’
[17:02:02.725]   - Field: ‘job’
[17:02:02.725]   - Field: ‘conditions’
[17:02:02.725]   - Field: ‘expr’
[17:02:02.725]   - Field: ‘uuid’
[17:02:02.725]   - Field: ‘seed’
[17:02:02.725]   - Field: ‘version’
[17:02:02.725]   - Field: ‘result’
[17:02:02.725]   - Field: ‘asynchronous’
[17:02:02.725]   - Field: ‘calls’
[17:02:02.726]   - Field: ‘globals’
[17:02:02.726]   - Field: ‘stdout’
[17:02:02.726]   - Field: ‘earlySignal’
[17:02:02.726]   - Field: ‘lazy’
[17:02:02.726]   - Field: ‘state’
[17:02:02.726] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:02.726] - Launch lazy future ...
[17:02:02.727] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.727] Packages needed by future strategies (n = 0): <none>
[17:02:02.728] {
[17:02:02.728]     {
[17:02:02.728]         {
[17:02:02.728]             ...future.startTime <- base::Sys.time()
[17:02:02.728]             {
[17:02:02.728]                 {
[17:02:02.728]                   {
[17:02:02.728]                     {
[17:02:02.728]                       {
[17:02:02.728]                         base::local({
[17:02:02.728]                           has_future <- base::requireNamespace("future", 
[17:02:02.728]                             quietly = TRUE)
[17:02:02.728]                           if (has_future) {
[17:02:02.728]                             ns <- base::getNamespace("future")
[17:02:02.728]                             version <- ns[[".package"]][["version"]]
[17:02:02.728]                             if (is.null(version)) 
[17:02:02.728]                               version <- utils::packageVersion("future")
[17:02:02.728]                           }
[17:02:02.728]                           else {
[17:02:02.728]                             version <- NULL
[17:02:02.728]                           }
[17:02:02.728]                           if (!has_future || version < "1.8.0") {
[17:02:02.728]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.728]                               "", base::R.version$version.string), 
[17:02:02.728]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:02.728]                                 base::R.version$platform, 8 * 
[17:02:02.728]                                   base::.Machine$sizeof.pointer), 
[17:02:02.728]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.728]                                 "release", "version")], collapse = " "), 
[17:02:02.728]                               hostname = base::Sys.info()[["nodename"]])
[17:02:02.728]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.728]                               info)
[17:02:02.728]                             info <- base::paste(info, collapse = "; ")
[17:02:02.728]                             if (!has_future) {
[17:02:02.728]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.728]                                 info)
[17:02:02.728]                             }
[17:02:02.728]                             else {
[17:02:02.728]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.728]                                 info, version)
[17:02:02.728]                             }
[17:02:02.728]                             base::stop(msg)
[17:02:02.728]                           }
[17:02:02.728]                         })
[17:02:02.728]                       }
[17:02:02.728]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:02.728]                       base::options(mc.cores = 1L)
[17:02:02.728]                     }
[17:02:02.728]                     base::local({
[17:02:02.728]                       for (pkg in "future") {
[17:02:02.728]                         base::loadNamespace(pkg)
[17:02:02.728]                         base::library(pkg, character.only = TRUE)
[17:02:02.728]                       }
[17:02:02.728]                     })
[17:02:02.728]                   }
[17:02:02.728]                   ...future.strategy.old <- future::plan("list")
[17:02:02.728]                   options(future.plan = NULL)
[17:02:02.728]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.728]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.728]                 }
[17:02:02.728]                 ...future.workdir <- getwd()
[17:02:02.728]             }
[17:02:02.728]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.728]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.728]         }
[17:02:02.728]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.728]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.728]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.728]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.728]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.728]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.728]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.728]             base::names(...future.oldOptions))
[17:02:02.728]     }
[17:02:02.728]     if (FALSE) {
[17:02:02.728]     }
[17:02:02.728]     else {
[17:02:02.728]         if (TRUE) {
[17:02:02.728]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.728]                 open = "w")
[17:02:02.728]         }
[17:02:02.728]         else {
[17:02:02.728]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.728]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.728]         }
[17:02:02.728]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.728]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.728]             base::sink(type = "output", split = FALSE)
[17:02:02.728]             base::close(...future.stdout)
[17:02:02.728]         }, add = TRUE)
[17:02:02.728]     }
[17:02:02.728]     ...future.frame <- base::sys.nframe()
[17:02:02.728]     ...future.conditions <- base::list()
[17:02:02.728]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.728]     if (FALSE) {
[17:02:02.728]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.728]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.728]     }
[17:02:02.728]     ...future.result <- base::tryCatch({
[17:02:02.728]         base::withCallingHandlers({
[17:02:02.728]             ...future.value <- base::withVisible(base::local({
[17:02:02.728]                 withCallingHandlers({
[17:02:02.728]                   {
[17:02:02.728]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.728]                       ii, n), appendLF = FALSE)
[17:02:02.728]                     fit <- mandelbrot(C)
[17:02:02.728]                     delay(fit)
[17:02:02.728]                     message(" done")
[17:02:02.728]                     fit
[17:02:02.728]                   }
[17:02:02.728]                 }, immediateCondition = function(cond) {
[17:02:02.728]                   save_rds <- function (object, pathname, ...) 
[17:02:02.728]                   {
[17:02:02.728]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:02.728]                     if (file_test("-f", pathname_tmp)) {
[17:02:02.728]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.728]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:02.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.728]                         fi_tmp[["mtime"]])
[17:02:02.728]                     }
[17:02:02.728]                     tryCatch({
[17:02:02.728]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:02.728]                     }, error = function(ex) {
[17:02:02.728]                       msg <- conditionMessage(ex)
[17:02:02.728]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.728]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:02.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.728]                         fi_tmp[["mtime"]], msg)
[17:02:02.728]                       ex$message <- msg
[17:02:02.728]                       stop(ex)
[17:02:02.728]                     })
[17:02:02.728]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:02.728]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:02.728]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:02.728]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.728]                       fi <- file.info(pathname)
[17:02:02.728]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:02.728]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.728]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:02.728]                         fi[["size"]], fi[["mtime"]])
[17:02:02.728]                       stop(msg)
[17:02:02.728]                     }
[17:02:02.728]                     invisible(pathname)
[17:02:02.728]                   }
[17:02:02.728]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:02.728]                     rootPath = tempdir()) 
[17:02:02.728]                   {
[17:02:02.728]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:02.728]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:02.728]                       tmpdir = path, fileext = ".rds")
[17:02:02.728]                     save_rds(obj, file)
[17:02:02.728]                   }
[17:02:02.728]                   saveImmediateCondition(cond, path = "/tmp/RtmpEpMItl/.future/immediateConditions")
[17:02:02.728]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.728]                   {
[17:02:02.728]                     inherits <- base::inherits
[17:02:02.728]                     invokeRestart <- base::invokeRestart
[17:02:02.728]                     is.null <- base::is.null
[17:02:02.728]                     muffled <- FALSE
[17:02:02.728]                     if (inherits(cond, "message")) {
[17:02:02.728]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:02.728]                       if (muffled) 
[17:02:02.728]                         invokeRestart("muffleMessage")
[17:02:02.728]                     }
[17:02:02.728]                     else if (inherits(cond, "warning")) {
[17:02:02.728]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:02.728]                       if (muffled) 
[17:02:02.728]                         invokeRestart("muffleWarning")
[17:02:02.728]                     }
[17:02:02.728]                     else if (inherits(cond, "condition")) {
[17:02:02.728]                       if (!is.null(pattern)) {
[17:02:02.728]                         computeRestarts <- base::computeRestarts
[17:02:02.728]                         grepl <- base::grepl
[17:02:02.728]                         restarts <- computeRestarts(cond)
[17:02:02.728]                         for (restart in restarts) {
[17:02:02.728]                           name <- restart$name
[17:02:02.728]                           if (is.null(name)) 
[17:02:02.728]                             next
[17:02:02.728]                           if (!grepl(pattern, name)) 
[17:02:02.728]                             next
[17:02:02.728]                           invokeRestart(restart)
[17:02:02.728]                           muffled <- TRUE
[17:02:02.728]                           break
[17:02:02.728]                         }
[17:02:02.728]                       }
[17:02:02.728]                     }
[17:02:02.728]                     invisible(muffled)
[17:02:02.728]                   }
[17:02:02.728]                   muffleCondition(cond)
[17:02:02.728]                 })
[17:02:02.728]             }))
[17:02:02.728]             future::FutureResult(value = ...future.value$value, 
[17:02:02.728]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.728]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.728]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.728]                     ...future.globalenv.names))
[17:02:02.728]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.728]         }, condition = base::local({
[17:02:02.728]             c <- base::c
[17:02:02.728]             inherits <- base::inherits
[17:02:02.728]             invokeRestart <- base::invokeRestart
[17:02:02.728]             length <- base::length
[17:02:02.728]             list <- base::list
[17:02:02.728]             seq.int <- base::seq.int
[17:02:02.728]             signalCondition <- base::signalCondition
[17:02:02.728]             sys.calls <- base::sys.calls
[17:02:02.728]             `[[` <- base::`[[`
[17:02:02.728]             `+` <- base::`+`
[17:02:02.728]             `<<-` <- base::`<<-`
[17:02:02.728]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.728]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.728]                   3L)]
[17:02:02.728]             }
[17:02:02.728]             function(cond) {
[17:02:02.728]                 is_error <- inherits(cond, "error")
[17:02:02.728]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.728]                   NULL)
[17:02:02.728]                 if (is_error) {
[17:02:02.728]                   sessionInformation <- function() {
[17:02:02.728]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.728]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.728]                       search = base::search(), system = base::Sys.info())
[17:02:02.728]                   }
[17:02:02.728]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.728]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.728]                     cond$call), session = sessionInformation(), 
[17:02:02.728]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.728]                   signalCondition(cond)
[17:02:02.728]                 }
[17:02:02.728]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.728]                 "immediateCondition"))) {
[17:02:02.728]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.728]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.728]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.728]                   if (TRUE && !signal) {
[17:02:02.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.728]                     {
[17:02:02.728]                       inherits <- base::inherits
[17:02:02.728]                       invokeRestart <- base::invokeRestart
[17:02:02.728]                       is.null <- base::is.null
[17:02:02.728]                       muffled <- FALSE
[17:02:02.728]                       if (inherits(cond, "message")) {
[17:02:02.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.728]                         if (muffled) 
[17:02:02.728]                           invokeRestart("muffleMessage")
[17:02:02.728]                       }
[17:02:02.728]                       else if (inherits(cond, "warning")) {
[17:02:02.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.728]                         if (muffled) 
[17:02:02.728]                           invokeRestart("muffleWarning")
[17:02:02.728]                       }
[17:02:02.728]                       else if (inherits(cond, "condition")) {
[17:02:02.728]                         if (!is.null(pattern)) {
[17:02:02.728]                           computeRestarts <- base::computeRestarts
[17:02:02.728]                           grepl <- base::grepl
[17:02:02.728]                           restarts <- computeRestarts(cond)
[17:02:02.728]                           for (restart in restarts) {
[17:02:02.728]                             name <- restart$name
[17:02:02.728]                             if (is.null(name)) 
[17:02:02.728]                               next
[17:02:02.728]                             if (!grepl(pattern, name)) 
[17:02:02.728]                               next
[17:02:02.728]                             invokeRestart(restart)
[17:02:02.728]                             muffled <- TRUE
[17:02:02.728]                             break
[17:02:02.728]                           }
[17:02:02.728]                         }
[17:02:02.728]                       }
[17:02:02.728]                       invisible(muffled)
[17:02:02.728]                     }
[17:02:02.728]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.728]                   }
[17:02:02.728]                 }
[17:02:02.728]                 else {
[17:02:02.728]                   if (TRUE) {
[17:02:02.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.728]                     {
[17:02:02.728]                       inherits <- base::inherits
[17:02:02.728]                       invokeRestart <- base::invokeRestart
[17:02:02.728]                       is.null <- base::is.null
[17:02:02.728]                       muffled <- FALSE
[17:02:02.728]                       if (inherits(cond, "message")) {
[17:02:02.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.728]                         if (muffled) 
[17:02:02.728]                           invokeRestart("muffleMessage")
[17:02:02.728]                       }
[17:02:02.728]                       else if (inherits(cond, "warning")) {
[17:02:02.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.728]                         if (muffled) 
[17:02:02.728]                           invokeRestart("muffleWarning")
[17:02:02.728]                       }
[17:02:02.728]                       else if (inherits(cond, "condition")) {
[17:02:02.728]                         if (!is.null(pattern)) {
[17:02:02.728]                           computeRestarts <- base::computeRestarts
[17:02:02.728]                           grepl <- base::grepl
[17:02:02.728]                           restarts <- computeRestarts(cond)
[17:02:02.728]                           for (restart in restarts) {
[17:02:02.728]                             name <- restart$name
[17:02:02.728]                             if (is.null(name)) 
[17:02:02.728]                               next
[17:02:02.728]                             if (!grepl(pattern, name)) 
[17:02:02.728]                               next
[17:02:02.728]                             invokeRestart(restart)
[17:02:02.728]                             muffled <- TRUE
[17:02:02.728]                             break
[17:02:02.728]                           }
[17:02:02.728]                         }
[17:02:02.728]                       }
[17:02:02.728]                       invisible(muffled)
[17:02:02.728]                     }
[17:02:02.728]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.728]                   }
[17:02:02.728]                 }
[17:02:02.728]             }
[17:02:02.728]         }))
[17:02:02.728]     }, error = function(ex) {
[17:02:02.728]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.728]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.728]                 ...future.rng), started = ...future.startTime, 
[17:02:02.728]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.728]             version = "1.8"), class = "FutureResult")
[17:02:02.728]     }, finally = {
[17:02:02.728]         if (!identical(...future.workdir, getwd())) 
[17:02:02.728]             setwd(...future.workdir)
[17:02:02.728]         {
[17:02:02.728]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.728]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.728]             }
[17:02:02.728]             base::options(...future.oldOptions)
[17:02:02.728]             if (.Platform$OS.type == "windows") {
[17:02:02.728]                 old_names <- names(...future.oldEnvVars)
[17:02:02.728]                 envs <- base::Sys.getenv()
[17:02:02.728]                 names <- names(envs)
[17:02:02.728]                 common <- intersect(names, old_names)
[17:02:02.728]                 added <- setdiff(names, old_names)
[17:02:02.728]                 removed <- setdiff(old_names, names)
[17:02:02.728]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.728]                   envs[common]]
[17:02:02.728]                 NAMES <- toupper(changed)
[17:02:02.728]                 args <- list()
[17:02:02.728]                 for (kk in seq_along(NAMES)) {
[17:02:02.728]                   name <- changed[[kk]]
[17:02:02.728]                   NAME <- NAMES[[kk]]
[17:02:02.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.728]                     next
[17:02:02.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.728]                 }
[17:02:02.728]                 NAMES <- toupper(added)
[17:02:02.728]                 for (kk in seq_along(NAMES)) {
[17:02:02.728]                   name <- added[[kk]]
[17:02:02.728]                   NAME <- NAMES[[kk]]
[17:02:02.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.728]                     next
[17:02:02.728]                   args[[name]] <- ""
[17:02:02.728]                 }
[17:02:02.728]                 NAMES <- toupper(removed)
[17:02:02.728]                 for (kk in seq_along(NAMES)) {
[17:02:02.728]                   name <- removed[[kk]]
[17:02:02.728]                   NAME <- NAMES[[kk]]
[17:02:02.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.728]                     next
[17:02:02.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.728]                 }
[17:02:02.728]                 if (length(args) > 0) 
[17:02:02.728]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.728]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.728]             }
[17:02:02.728]             else {
[17:02:02.728]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.728]             }
[17:02:02.728]             {
[17:02:02.728]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.728]                   0L) {
[17:02:02.728]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.728]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.728]                   base::options(opts)
[17:02:02.728]                 }
[17:02:02.728]                 {
[17:02:02.728]                   {
[17:02:02.728]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:02.728]                     NULL
[17:02:02.728]                   }
[17:02:02.728]                   options(future.plan = NULL)
[17:02:02.728]                   if (is.na(NA_character_)) 
[17:02:02.728]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.728]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.728]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.728]                     .init = FALSE)
[17:02:02.728]                 }
[17:02:02.728]             }
[17:02:02.728]         }
[17:02:02.728]     })
[17:02:02.728]     if (TRUE) {
[17:02:02.728]         base::sink(type = "output", split = FALSE)
[17:02:02.728]         if (TRUE) {
[17:02:02.728]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.728]         }
[17:02:02.728]         else {
[17:02:02.728]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.728]         }
[17:02:02.728]         base::close(...future.stdout)
[17:02:02.728]         ...future.stdout <- NULL
[17:02:02.728]     }
[17:02:02.728]     ...future.result$conditions <- ...future.conditions
[17:02:02.728]     ...future.result$finished <- base::Sys.time()
[17:02:02.728]     ...future.result
[17:02:02.728] }
[17:02:02.730] assign_globals() ...
[17:02:02.730] List of 4
[17:02:02.730]  $ ii   : int 1
[17:02:02.730]  $ n    : int 4
[17:02:02.730]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[17:02:02.730]   ..- attr(*, "region")=List of 2
[17:02:02.730]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:02:02.730]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:02:02.730]   ..- attr(*, "tile")= int [1:2] 1 1
[17:02:02.730]  $ delay:function (counts)  
[17:02:02.730]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.730]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52af57978> 
[17:02:02.730]  - attr(*, "where")=List of 4
[17:02:02.730]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.730]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.730]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.730]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.730]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.730]  - attr(*, "resolved")= logi FALSE
[17:02:02.730]  - attr(*, "total_size")= num 14584
[17:02:02.730]  - attr(*, "already-done")= logi TRUE
[17:02:02.737] - copied ‘ii’ to environment
[17:02:02.737] - copied ‘n’ to environment
[17:02:02.737] - copied ‘C’ to environment
[17:02:02.737] - reassign environment for ‘delay’
[17:02:02.737] - copied ‘delay’ to environment
[17:02:02.737] assign_globals() ... done
[17:02:02.737] requestCore(): workers = 2
[17:02:02.740] MulticoreFuture started
[17:02:02.741] - Launch lazy future ... done
[17:02:02.741] run() for ‘MulticoreFuture’ ... done
[17:02:02.741] - run() ... done
[17:02:02.742] - resolved() ...
[17:02:02.741] plan(): Setting new future strategy stack:
[17:02:02.742] List of future strategies:
[17:02:02.742] 1. sequential:
[17:02:02.742]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.742]    - tweaked: FALSE
[17:02:02.742]    - call: NULL
[17:02:02.743] plan(): nbrOfWorkers() = 1
[17:02:02.746] plan(): Setting new future strategy stack:
[17:02:02.746] List of future strategies:
[17:02:02.746] 1. multicore:
[17:02:02.746]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:02.746]    - tweaked: FALSE
[17:02:02.746]    - call: plan(strategy)
[17:02:02.751] plan(): nbrOfWorkers() = 2
[17:02:02.752] - resolved: TRUE
[17:02:02.753] - resolved() ... done
[17:02:02.753] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[17:02:02.753] result() for MulticoreFuture ...
[17:02:02.758] result() for MulticoreFuture ...
[17:02:02.758] result() for MulticoreFuture ... done
[17:02:02.759] signalConditions() ...
[17:02:02.759]  - include = ‘immediateCondition’
[17:02:02.759]  - exclude = 
[17:02:02.759]  - resignal = FALSE
[17:02:02.759]  - Number of conditions: 2
[17:02:02.759] signalConditions() ... done
[17:02:02.759] result() for MulticoreFuture ... done
[17:02:02.759] result() for MulticoreFuture ...
[17:02:02.759] result() for MulticoreFuture ... done
[17:02:02.760] signalConditions() ...
[17:02:02.760]  - include = ‘immediateCondition’
[17:02:02.760]  - exclude = 
[17:02:02.760]  - resignal = FALSE
[17:02:02.760]  - Number of conditions: 2
[17:02:02.760] signalConditions() ... done
[17:02:02.760] Future state: ‘finished’
[17:02:02.760] result() for MulticoreFuture ...
[17:02:02.760] result() for MulticoreFuture ... done
[17:02:02.761] signalConditions() ...
[17:02:02.761]  - include = ‘condition’
[17:02:02.761]  - exclude = ‘immediateCondition’
[17:02:02.761]  - resignal = TRUE
[17:02:02.761]  - Number of conditions: 2
[17:02:02.761]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:02:02.761]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.761] signalConditions() ... done
[17:02:02.762] resolved() for ‘Future’ ...
[17:02:02.762] - state: ‘created’
[17:02:02.762] - run: TRUE
[17:02:02.763] - run() ...
[17:02:02.763] run() for ‘Future’ ...
[17:02:02.763] - state: ‘created’
[17:02:02.763] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:02.767] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:02.767] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:02.768]   - Field: ‘label’
[17:02:02.768]   - Field: ‘local’
[17:02:02.768]   - Field: ‘owner’
[17:02:02.768]   - Field: ‘envir’
[17:02:02.768]   - Field: ‘workers’
[17:02:02.768]   - Field: ‘packages’
[17:02:02.768]   - Field: ‘gc’
[17:02:02.768]   - Field: ‘job’
[17:02:02.769]   - Field: ‘conditions’
[17:02:02.769]   - Field: ‘expr’
[17:02:02.769]   - Field: ‘uuid’
[17:02:02.769]   - Field: ‘seed’
[17:02:02.769]   - Field: ‘version’
[17:02:02.769]   - Field: ‘result’
[17:02:02.769]   - Field: ‘asynchronous’
[17:02:02.769]   - Field: ‘calls’
[17:02:02.769]   - Field: ‘globals’
[17:02:02.769]   - Field: ‘stdout’
[17:02:02.770]   - Field: ‘earlySignal’
[17:02:02.770]   - Field: ‘lazy’
[17:02:02.770]   - Field: ‘state’
[17:02:02.770] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:02.770] - Launch lazy future ...
[17:02:02.770] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.771] Packages needed by future strategies (n = 0): <none>
[17:02:02.771] {
[17:02:02.771]     {
[17:02:02.771]         {
[17:02:02.771]             ...future.startTime <- base::Sys.time()
[17:02:02.771]             {
[17:02:02.771]                 {
[17:02:02.771]                   {
[17:02:02.771]                     {
[17:02:02.771]                       {
[17:02:02.771]                         base::local({
[17:02:02.771]                           has_future <- base::requireNamespace("future", 
[17:02:02.771]                             quietly = TRUE)
[17:02:02.771]                           if (has_future) {
[17:02:02.771]                             ns <- base::getNamespace("future")
[17:02:02.771]                             version <- ns[[".package"]][["version"]]
[17:02:02.771]                             if (is.null(version)) 
[17:02:02.771]                               version <- utils::packageVersion("future")
[17:02:02.771]                           }
[17:02:02.771]                           else {
[17:02:02.771]                             version <- NULL
[17:02:02.771]                           }
[17:02:02.771]                           if (!has_future || version < "1.8.0") {
[17:02:02.771]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.771]                               "", base::R.version$version.string), 
[17:02:02.771]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:02.771]                                 base::R.version$platform, 8 * 
[17:02:02.771]                                   base::.Machine$sizeof.pointer), 
[17:02:02.771]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.771]                                 "release", "version")], collapse = " "), 
[17:02:02.771]                               hostname = base::Sys.info()[["nodename"]])
[17:02:02.771]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.771]                               info)
[17:02:02.771]                             info <- base::paste(info, collapse = "; ")
[17:02:02.771]                             if (!has_future) {
[17:02:02.771]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.771]                                 info)
[17:02:02.771]                             }
[17:02:02.771]                             else {
[17:02:02.771]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.771]                                 info, version)
[17:02:02.771]                             }
[17:02:02.771]                             base::stop(msg)
[17:02:02.771]                           }
[17:02:02.771]                         })
[17:02:02.771]                       }
[17:02:02.771]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:02.771]                       base::options(mc.cores = 1L)
[17:02:02.771]                     }
[17:02:02.771]                     base::local({
[17:02:02.771]                       for (pkg in "future") {
[17:02:02.771]                         base::loadNamespace(pkg)
[17:02:02.771]                         base::library(pkg, character.only = TRUE)
[17:02:02.771]                       }
[17:02:02.771]                     })
[17:02:02.771]                   }
[17:02:02.771]                   ...future.strategy.old <- future::plan("list")
[17:02:02.771]                   options(future.plan = NULL)
[17:02:02.771]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.771]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.771]                 }
[17:02:02.771]                 ...future.workdir <- getwd()
[17:02:02.771]             }
[17:02:02.771]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.771]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.771]         }
[17:02:02.771]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.771]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.771]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.771]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.771]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.771]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.771]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.771]             base::names(...future.oldOptions))
[17:02:02.771]     }
[17:02:02.771]     if (FALSE) {
[17:02:02.771]     }
[17:02:02.771]     else {
[17:02:02.771]         if (TRUE) {
[17:02:02.771]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.771]                 open = "w")
[17:02:02.771]         }
[17:02:02.771]         else {
[17:02:02.771]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.771]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.771]         }
[17:02:02.771]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.771]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.771]             base::sink(type = "output", split = FALSE)
[17:02:02.771]             base::close(...future.stdout)
[17:02:02.771]         }, add = TRUE)
[17:02:02.771]     }
[17:02:02.771]     ...future.frame <- base::sys.nframe()
[17:02:02.771]     ...future.conditions <- base::list()
[17:02:02.771]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.771]     if (FALSE) {
[17:02:02.771]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.771]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.771]     }
[17:02:02.771]     ...future.result <- base::tryCatch({
[17:02:02.771]         base::withCallingHandlers({
[17:02:02.771]             ...future.value <- base::withVisible(base::local({
[17:02:02.771]                 withCallingHandlers({
[17:02:02.771]                   {
[17:02:02.771]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.771]                       ii, n), appendLF = FALSE)
[17:02:02.771]                     fit <- mandelbrot(C)
[17:02:02.771]                     delay(fit)
[17:02:02.771]                     message(" done")
[17:02:02.771]                     fit
[17:02:02.771]                   }
[17:02:02.771]                 }, immediateCondition = function(cond) {
[17:02:02.771]                   save_rds <- function (object, pathname, ...) 
[17:02:02.771]                   {
[17:02:02.771]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:02.771]                     if (file_test("-f", pathname_tmp)) {
[17:02:02.771]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.771]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:02.771]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.771]                         fi_tmp[["mtime"]])
[17:02:02.771]                     }
[17:02:02.771]                     tryCatch({
[17:02:02.771]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:02.771]                     }, error = function(ex) {
[17:02:02.771]                       msg <- conditionMessage(ex)
[17:02:02.771]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.771]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:02.771]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.771]                         fi_tmp[["mtime"]], msg)
[17:02:02.771]                       ex$message <- msg
[17:02:02.771]                       stop(ex)
[17:02:02.771]                     })
[17:02:02.771]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:02.771]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:02.771]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:02.771]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.771]                       fi <- file.info(pathname)
[17:02:02.771]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:02.771]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.771]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:02.771]                         fi[["size"]], fi[["mtime"]])
[17:02:02.771]                       stop(msg)
[17:02:02.771]                     }
[17:02:02.771]                     invisible(pathname)
[17:02:02.771]                   }
[17:02:02.771]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:02.771]                     rootPath = tempdir()) 
[17:02:02.771]                   {
[17:02:02.771]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:02.771]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:02.771]                       tmpdir = path, fileext = ".rds")
[17:02:02.771]                     save_rds(obj, file)
[17:02:02.771]                   }
[17:02:02.771]                   saveImmediateCondition(cond, path = "/tmp/RtmpEpMItl/.future/immediateConditions")
[17:02:02.771]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.771]                   {
[17:02:02.771]                     inherits <- base::inherits
[17:02:02.771]                     invokeRestart <- base::invokeRestart
[17:02:02.771]                     is.null <- base::is.null
[17:02:02.771]                     muffled <- FALSE
[17:02:02.771]                     if (inherits(cond, "message")) {
[17:02:02.771]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:02.771]                       if (muffled) 
[17:02:02.771]                         invokeRestart("muffleMessage")
[17:02:02.771]                     }
[17:02:02.771]                     else if (inherits(cond, "warning")) {
[17:02:02.771]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:02.771]                       if (muffled) 
[17:02:02.771]                         invokeRestart("muffleWarning")
[17:02:02.771]                     }
[17:02:02.771]                     else if (inherits(cond, "condition")) {
[17:02:02.771]                       if (!is.null(pattern)) {
[17:02:02.771]                         computeRestarts <- base::computeRestarts
[17:02:02.771]                         grepl <- base::grepl
[17:02:02.771]                         restarts <- computeRestarts(cond)
[17:02:02.771]                         for (restart in restarts) {
[17:02:02.771]                           name <- restart$name
[17:02:02.771]                           if (is.null(name)) 
[17:02:02.771]                             next
[17:02:02.771]                           if (!grepl(pattern, name)) 
[17:02:02.771]                             next
[17:02:02.771]                           invokeRestart(restart)
[17:02:02.771]                           muffled <- TRUE
[17:02:02.771]                           break
[17:02:02.771]                         }
[17:02:02.771]                       }
[17:02:02.771]                     }
[17:02:02.771]                     invisible(muffled)
[17:02:02.771]                   }
[17:02:02.771]                   muffleCondition(cond)
[17:02:02.771]                 })
[17:02:02.771]             }))
[17:02:02.771]             future::FutureResult(value = ...future.value$value, 
[17:02:02.771]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.771]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.771]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.771]                     ...future.globalenv.names))
[17:02:02.771]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.771]         }, condition = base::local({
[17:02:02.771]             c <- base::c
[17:02:02.771]             inherits <- base::inherits
[17:02:02.771]             invokeRestart <- base::invokeRestart
[17:02:02.771]             length <- base::length
[17:02:02.771]             list <- base::list
[17:02:02.771]             seq.int <- base::seq.int
[17:02:02.771]             signalCondition <- base::signalCondition
[17:02:02.771]             sys.calls <- base::sys.calls
[17:02:02.771]             `[[` <- base::`[[`
[17:02:02.771]             `+` <- base::`+`
[17:02:02.771]             `<<-` <- base::`<<-`
[17:02:02.771]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.771]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.771]                   3L)]
[17:02:02.771]             }
[17:02:02.771]             function(cond) {
[17:02:02.771]                 is_error <- inherits(cond, "error")
[17:02:02.771]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.771]                   NULL)
[17:02:02.771]                 if (is_error) {
[17:02:02.771]                   sessionInformation <- function() {
[17:02:02.771]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.771]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.771]                       search = base::search(), system = base::Sys.info())
[17:02:02.771]                   }
[17:02:02.771]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.771]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.771]                     cond$call), session = sessionInformation(), 
[17:02:02.771]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.771]                   signalCondition(cond)
[17:02:02.771]                 }
[17:02:02.771]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.771]                 "immediateCondition"))) {
[17:02:02.771]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.771]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.771]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.771]                   if (TRUE && !signal) {
[17:02:02.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.771]                     {
[17:02:02.771]                       inherits <- base::inherits
[17:02:02.771]                       invokeRestart <- base::invokeRestart
[17:02:02.771]                       is.null <- base::is.null
[17:02:02.771]                       muffled <- FALSE
[17:02:02.771]                       if (inherits(cond, "message")) {
[17:02:02.771]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.771]                         if (muffled) 
[17:02:02.771]                           invokeRestart("muffleMessage")
[17:02:02.771]                       }
[17:02:02.771]                       else if (inherits(cond, "warning")) {
[17:02:02.771]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.771]                         if (muffled) 
[17:02:02.771]                           invokeRestart("muffleWarning")
[17:02:02.771]                       }
[17:02:02.771]                       else if (inherits(cond, "condition")) {
[17:02:02.771]                         if (!is.null(pattern)) {
[17:02:02.771]                           computeRestarts <- base::computeRestarts
[17:02:02.771]                           grepl <- base::grepl
[17:02:02.771]                           restarts <- computeRestarts(cond)
[17:02:02.771]                           for (restart in restarts) {
[17:02:02.771]                             name <- restart$name
[17:02:02.771]                             if (is.null(name)) 
[17:02:02.771]                               next
[17:02:02.771]                             if (!grepl(pattern, name)) 
[17:02:02.771]                               next
[17:02:02.771]                             invokeRestart(restart)
[17:02:02.771]                             muffled <- TRUE
[17:02:02.771]                             break
[17:02:02.771]                           }
[17:02:02.771]                         }
[17:02:02.771]                       }
[17:02:02.771]                       invisible(muffled)
[17:02:02.771]                     }
[17:02:02.771]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.771]                   }
[17:02:02.771]                 }
[17:02:02.771]                 else {
[17:02:02.771]                   if (TRUE) {
[17:02:02.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.771]                     {
[17:02:02.771]                       inherits <- base::inherits
[17:02:02.771]                       invokeRestart <- base::invokeRestart
[17:02:02.771]                       is.null <- base::is.null
[17:02:02.771]                       muffled <- FALSE
[17:02:02.771]                       if (inherits(cond, "message")) {
[17:02:02.771]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.771]                         if (muffled) 
[17:02:02.771]                           invokeRestart("muffleMessage")
[17:02:02.771]                       }
[17:02:02.771]                       else if (inherits(cond, "warning")) {
[17:02:02.771]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.771]                         if (muffled) 
[17:02:02.771]                           invokeRestart("muffleWarning")
[17:02:02.771]                       }
[17:02:02.771]                       else if (inherits(cond, "condition")) {
[17:02:02.771]                         if (!is.null(pattern)) {
[17:02:02.771]                           computeRestarts <- base::computeRestarts
[17:02:02.771]                           grepl <- base::grepl
[17:02:02.771]                           restarts <- computeRestarts(cond)
[17:02:02.771]                           for (restart in restarts) {
[17:02:02.771]                             name <- restart$name
[17:02:02.771]                             if (is.null(name)) 
[17:02:02.771]                               next
[17:02:02.771]                             if (!grepl(pattern, name)) 
[17:02:02.771]                               next
[17:02:02.771]                             invokeRestart(restart)
[17:02:02.771]                             muffled <- TRUE
[17:02:02.771]                             break
[17:02:02.771]                           }
[17:02:02.771]                         }
[17:02:02.771]                       }
[17:02:02.771]                       invisible(muffled)
[17:02:02.771]                     }
[17:02:02.771]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.771]                   }
[17:02:02.771]                 }
[17:02:02.771]             }
[17:02:02.771]         }))
[17:02:02.771]     }, error = function(ex) {
[17:02:02.771]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.771]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.771]                 ...future.rng), started = ...future.startTime, 
[17:02:02.771]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.771]             version = "1.8"), class = "FutureResult")
[17:02:02.771]     }, finally = {
[17:02:02.771]         if (!identical(...future.workdir, getwd())) 
[17:02:02.771]             setwd(...future.workdir)
[17:02:02.771]         {
[17:02:02.771]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.771]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.771]             }
[17:02:02.771]             base::options(...future.oldOptions)
[17:02:02.771]             if (.Platform$OS.type == "windows") {
[17:02:02.771]                 old_names <- names(...future.oldEnvVars)
[17:02:02.771]                 envs <- base::Sys.getenv()
[17:02:02.771]                 names <- names(envs)
[17:02:02.771]                 common <- intersect(names, old_names)
[17:02:02.771]                 added <- setdiff(names, old_names)
[17:02:02.771]                 removed <- setdiff(old_names, names)
[17:02:02.771]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.771]                   envs[common]]
[17:02:02.771]                 NAMES <- toupper(changed)
[17:02:02.771]                 args <- list()
[17:02:02.771]                 for (kk in seq_along(NAMES)) {
[17:02:02.771]                   name <- changed[[kk]]
[17:02:02.771]                   NAME <- NAMES[[kk]]
[17:02:02.771]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.771]                     next
[17:02:02.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.771]                 }
[17:02:02.771]                 NAMES <- toupper(added)
[17:02:02.771]                 for (kk in seq_along(NAMES)) {
[17:02:02.771]                   name <- added[[kk]]
[17:02:02.771]                   NAME <- NAMES[[kk]]
[17:02:02.771]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.771]                     next
[17:02:02.771]                   args[[name]] <- ""
[17:02:02.771]                 }
[17:02:02.771]                 NAMES <- toupper(removed)
[17:02:02.771]                 for (kk in seq_along(NAMES)) {
[17:02:02.771]                   name <- removed[[kk]]
[17:02:02.771]                   NAME <- NAMES[[kk]]
[17:02:02.771]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.771]                     next
[17:02:02.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.771]                 }
[17:02:02.771]                 if (length(args) > 0) 
[17:02:02.771]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.771]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.771]             }
[17:02:02.771]             else {
[17:02:02.771]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.771]             }
[17:02:02.771]             {
[17:02:02.771]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.771]                   0L) {
[17:02:02.771]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.771]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.771]                   base::options(opts)
[17:02:02.771]                 }
[17:02:02.771]                 {
[17:02:02.771]                   {
[17:02:02.771]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:02.771]                     NULL
[17:02:02.771]                   }
[17:02:02.771]                   options(future.plan = NULL)
[17:02:02.771]                   if (is.na(NA_character_)) 
[17:02:02.771]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.771]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.771]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.771]                     .init = FALSE)
[17:02:02.771]                 }
[17:02:02.771]             }
[17:02:02.771]         }
[17:02:02.771]     })
[17:02:02.771]     if (TRUE) {
[17:02:02.771]         base::sink(type = "output", split = FALSE)
[17:02:02.771]         if (TRUE) {
[17:02:02.771]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.771]         }
[17:02:02.771]         else {
[17:02:02.771]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.771]         }
[17:02:02.771]         base::close(...future.stdout)
[17:02:02.771]         ...future.stdout <- NULL
[17:02:02.771]     }
[17:02:02.771]     ...future.result$conditions <- ...future.conditions
[17:02:02.771]     ...future.result$finished <- base::Sys.time()
[17:02:02.771]     ...future.result
[17:02:02.771] }
[17:02:02.774] assign_globals() ...
[17:02:02.774] List of 4
[17:02:02.774]  $ ii   : int 2
[17:02:02.774]  $ n    : int 4
[17:02:02.774]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[17:02:02.774]   ..- attr(*, "region")=List of 2
[17:02:02.774]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:02:02.774]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:02:02.774]   ..- attr(*, "tile")= int [1:2] 1 2
[17:02:02.774]  $ delay:function (counts)  
[17:02:02.774]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.774]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52af57978> 
[17:02:02.774]  - attr(*, "where")=List of 4
[17:02:02.774]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.774]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.774]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.774]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.774]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.774]  - attr(*, "resolved")= logi FALSE
[17:02:02.774]  - attr(*, "total_size")= num 14584
[17:02:02.774]  - attr(*, "already-done")= logi TRUE
[17:02:02.785] - copied ‘ii’ to environment
[17:02:02.785] - copied ‘n’ to environment
[17:02:02.786] - copied ‘C’ to environment
[17:02:02.786] - reassign environment for ‘delay’
[17:02:02.786] - copied ‘delay’ to environment
[17:02:02.786] assign_globals() ... done
[17:02:02.786] requestCore(): workers = 2
[17:02:02.789] MulticoreFuture started
[17:02:02.789] - Launch lazy future ... done
[17:02:02.789] run() for ‘MulticoreFuture’ ... done
[17:02:02.789] - run() ... done
[17:02:02.790] - resolved() ...
[17:02:02.790] plan(): Setting new future strategy stack:
[17:02:02.790] List of future strategies:
[17:02:02.790] 1. sequential:
[17:02:02.790]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.790]    - tweaked: FALSE
[17:02:02.790]    - call: NULL
[17:02:02.791] plan(): nbrOfWorkers() = 1
[17:02:02.797] plan(): Setting new future strategy stack:
[17:02:02.797] List of future strategies:
[17:02:02.797] 1. multicore:
[17:02:02.797]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:02.797]    - tweaked: FALSE
[17:02:02.797]    - call: plan(strategy)
[17:02:02.800] - resolved: FALSE
[17:02:02.800] - resolved() ... done
[17:02:02.800] resolved() for ‘MulticoreFuture’ ... done
[17:02:02.801] resolved() for ‘Future’ ...
[17:02:02.801] - state: ‘created’
[17:02:02.801] - run: TRUE
[17:02:02.801] - run() ...
[17:02:02.801] run() for ‘Future’ ...
[17:02:02.801] - state: ‘created’
[17:02:02.802] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:02.802] plan(): nbrOfWorkers() = 2
[17:02:02.806] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:02.806] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:02.807]   - Field: ‘label’
[17:02:02.807]   - Field: ‘local’
[17:02:02.807]   - Field: ‘owner’
[17:02:02.807]   - Field: ‘envir’
[17:02:02.807]   - Field: ‘workers’
[17:02:02.807]   - Field: ‘packages’
[17:02:02.807]   - Field: ‘gc’
[17:02:02.808]   - Field: ‘job’
[17:02:02.808]   - Field: ‘conditions’
[17:02:02.808]   - Field: ‘expr’
[17:02:02.808]   - Field: ‘uuid’
[17:02:02.808]   - Field: ‘seed’
[17:02:02.808]   - Field: ‘version’
[17:02:02.809]   - Field: ‘result’
[17:02:02.809]   - Field: ‘asynchronous’
[17:02:02.809]   - Field: ‘calls’
[17:02:02.809]   - Field: ‘globals’
[17:02:02.809]   - Field: ‘stdout’
[17:02:02.809]   - Field: ‘earlySignal’
[17:02:02.809]   - Field: ‘lazy’
[17:02:02.809]   - Field: ‘state’
[17:02:02.810] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:02.810] - Launch lazy future ...
[17:02:02.810] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.811] Packages needed by future strategies (n = 0): <none>
[17:02:02.811] {
[17:02:02.811]     {
[17:02:02.811]         {
[17:02:02.811]             ...future.startTime <- base::Sys.time()
[17:02:02.811]             {
[17:02:02.811]                 {
[17:02:02.811]                   {
[17:02:02.811]                     {
[17:02:02.811]                       {
[17:02:02.811]                         base::local({
[17:02:02.811]                           has_future <- base::requireNamespace("future", 
[17:02:02.811]                             quietly = TRUE)
[17:02:02.811]                           if (has_future) {
[17:02:02.811]                             ns <- base::getNamespace("future")
[17:02:02.811]                             version <- ns[[".package"]][["version"]]
[17:02:02.811]                             if (is.null(version)) 
[17:02:02.811]                               version <- utils::packageVersion("future")
[17:02:02.811]                           }
[17:02:02.811]                           else {
[17:02:02.811]                             version <- NULL
[17:02:02.811]                           }
[17:02:02.811]                           if (!has_future || version < "1.8.0") {
[17:02:02.811]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.811]                               "", base::R.version$version.string), 
[17:02:02.811]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:02.811]                                 base::R.version$platform, 8 * 
[17:02:02.811]                                   base::.Machine$sizeof.pointer), 
[17:02:02.811]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.811]                                 "release", "version")], collapse = " "), 
[17:02:02.811]                               hostname = base::Sys.info()[["nodename"]])
[17:02:02.811]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.811]                               info)
[17:02:02.811]                             info <- base::paste(info, collapse = "; ")
[17:02:02.811]                             if (!has_future) {
[17:02:02.811]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.811]                                 info)
[17:02:02.811]                             }
[17:02:02.811]                             else {
[17:02:02.811]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.811]                                 info, version)
[17:02:02.811]                             }
[17:02:02.811]                             base::stop(msg)
[17:02:02.811]                           }
[17:02:02.811]                         })
[17:02:02.811]                       }
[17:02:02.811]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:02.811]                       base::options(mc.cores = 1L)
[17:02:02.811]                     }
[17:02:02.811]                     base::local({
[17:02:02.811]                       for (pkg in "future") {
[17:02:02.811]                         base::loadNamespace(pkg)
[17:02:02.811]                         base::library(pkg, character.only = TRUE)
[17:02:02.811]                       }
[17:02:02.811]                     })
[17:02:02.811]                   }
[17:02:02.811]                   ...future.strategy.old <- future::plan("list")
[17:02:02.811]                   options(future.plan = NULL)
[17:02:02.811]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.811]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.811]                 }
[17:02:02.811]                 ...future.workdir <- getwd()
[17:02:02.811]             }
[17:02:02.811]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.811]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.811]         }
[17:02:02.811]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.811]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.811]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.811]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.811]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.811]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.811]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.811]             base::names(...future.oldOptions))
[17:02:02.811]     }
[17:02:02.811]     if (FALSE) {
[17:02:02.811]     }
[17:02:02.811]     else {
[17:02:02.811]         if (TRUE) {
[17:02:02.811]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.811]                 open = "w")
[17:02:02.811]         }
[17:02:02.811]         else {
[17:02:02.811]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.811]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.811]         }
[17:02:02.811]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.811]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.811]             base::sink(type = "output", split = FALSE)
[17:02:02.811]             base::close(...future.stdout)
[17:02:02.811]         }, add = TRUE)
[17:02:02.811]     }
[17:02:02.811]     ...future.frame <- base::sys.nframe()
[17:02:02.811]     ...future.conditions <- base::list()
[17:02:02.811]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.811]     if (FALSE) {
[17:02:02.811]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.811]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.811]     }
[17:02:02.811]     ...future.result <- base::tryCatch({
[17:02:02.811]         base::withCallingHandlers({
[17:02:02.811]             ...future.value <- base::withVisible(base::local({
[17:02:02.811]                 withCallingHandlers({
[17:02:02.811]                   {
[17:02:02.811]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.811]                       ii, n), appendLF = FALSE)
[17:02:02.811]                     fit <- mandelbrot(C)
[17:02:02.811]                     delay(fit)
[17:02:02.811]                     message(" done")
[17:02:02.811]                     fit
[17:02:02.811]                   }
[17:02:02.811]                 }, immediateCondition = function(cond) {
[17:02:02.811]                   save_rds <- function (object, pathname, ...) 
[17:02:02.811]                   {
[17:02:02.811]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:02.811]                     if (file_test("-f", pathname_tmp)) {
[17:02:02.811]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.811]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:02.811]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.811]                         fi_tmp[["mtime"]])
[17:02:02.811]                     }
[17:02:02.811]                     tryCatch({
[17:02:02.811]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:02.811]                     }, error = function(ex) {
[17:02:02.811]                       msg <- conditionMessage(ex)
[17:02:02.811]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.811]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:02.811]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.811]                         fi_tmp[["mtime"]], msg)
[17:02:02.811]                       ex$message <- msg
[17:02:02.811]                       stop(ex)
[17:02:02.811]                     })
[17:02:02.811]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:02.811]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:02.811]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:02.811]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.811]                       fi <- file.info(pathname)
[17:02:02.811]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:02.811]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.811]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:02.811]                         fi[["size"]], fi[["mtime"]])
[17:02:02.811]                       stop(msg)
[17:02:02.811]                     }
[17:02:02.811]                     invisible(pathname)
[17:02:02.811]                   }
[17:02:02.811]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:02.811]                     rootPath = tempdir()) 
[17:02:02.811]                   {
[17:02:02.811]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:02.811]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:02.811]                       tmpdir = path, fileext = ".rds")
[17:02:02.811]                     save_rds(obj, file)
[17:02:02.811]                   }
[17:02:02.811]                   saveImmediateCondition(cond, path = "/tmp/RtmpEpMItl/.future/immediateConditions")
[17:02:02.811]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.811]                   {
[17:02:02.811]                     inherits <- base::inherits
[17:02:02.811]                     invokeRestart <- base::invokeRestart
[17:02:02.811]                     is.null <- base::is.null
[17:02:02.811]                     muffled <- FALSE
[17:02:02.811]                     if (inherits(cond, "message")) {
[17:02:02.811]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:02.811]                       if (muffled) 
[17:02:02.811]                         invokeRestart("muffleMessage")
[17:02:02.811]                     }
[17:02:02.811]                     else if (inherits(cond, "warning")) {
[17:02:02.811]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:02.811]                       if (muffled) 
[17:02:02.811]                         invokeRestart("muffleWarning")
[17:02:02.811]                     }
[17:02:02.811]                     else if (inherits(cond, "condition")) {
[17:02:02.811]                       if (!is.null(pattern)) {
[17:02:02.811]                         computeRestarts <- base::computeRestarts
[17:02:02.811]                         grepl <- base::grepl
[17:02:02.811]                         restarts <- computeRestarts(cond)
[17:02:02.811]                         for (restart in restarts) {
[17:02:02.811]                           name <- restart$name
[17:02:02.811]                           if (is.null(name)) 
[17:02:02.811]                             next
[17:02:02.811]                           if (!grepl(pattern, name)) 
[17:02:02.811]                             next
[17:02:02.811]                           invokeRestart(restart)
[17:02:02.811]                           muffled <- TRUE
[17:02:02.811]                           break
[17:02:02.811]                         }
[17:02:02.811]                       }
[17:02:02.811]                     }
[17:02:02.811]                     invisible(muffled)
[17:02:02.811]                   }
[17:02:02.811]                   muffleCondition(cond)
[17:02:02.811]                 })
[17:02:02.811]             }))
[17:02:02.811]             future::FutureResult(value = ...future.value$value, 
[17:02:02.811]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.811]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.811]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.811]                     ...future.globalenv.names))
[17:02:02.811]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.811]         }, condition = base::local({
[17:02:02.811]             c <- base::c
[17:02:02.811]             inherits <- base::inherits
[17:02:02.811]             invokeRestart <- base::invokeRestart
[17:02:02.811]             length <- base::length
[17:02:02.811]             list <- base::list
[17:02:02.811]             seq.int <- base::seq.int
[17:02:02.811]             signalCondition <- base::signalCondition
[17:02:02.811]             sys.calls <- base::sys.calls
[17:02:02.811]             `[[` <- base::`[[`
[17:02:02.811]             `+` <- base::`+`
[17:02:02.811]             `<<-` <- base::`<<-`
[17:02:02.811]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.811]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.811]                   3L)]
[17:02:02.811]             }
[17:02:02.811]             function(cond) {
[17:02:02.811]                 is_error <- inherits(cond, "error")
[17:02:02.811]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.811]                   NULL)
[17:02:02.811]                 if (is_error) {
[17:02:02.811]                   sessionInformation <- function() {
[17:02:02.811]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.811]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.811]                       search = base::search(), system = base::Sys.info())
[17:02:02.811]                   }
[17:02:02.811]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.811]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.811]                     cond$call), session = sessionInformation(), 
[17:02:02.811]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.811]                   signalCondition(cond)
[17:02:02.811]                 }
[17:02:02.811]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.811]                 "immediateCondition"))) {
[17:02:02.811]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.811]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.811]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.811]                   if (TRUE && !signal) {
[17:02:02.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.811]                     {
[17:02:02.811]                       inherits <- base::inherits
[17:02:02.811]                       invokeRestart <- base::invokeRestart
[17:02:02.811]                       is.null <- base::is.null
[17:02:02.811]                       muffled <- FALSE
[17:02:02.811]                       if (inherits(cond, "message")) {
[17:02:02.811]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.811]                         if (muffled) 
[17:02:02.811]                           invokeRestart("muffleMessage")
[17:02:02.811]                       }
[17:02:02.811]                       else if (inherits(cond, "warning")) {
[17:02:02.811]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.811]                         if (muffled) 
[17:02:02.811]                           invokeRestart("muffleWarning")
[17:02:02.811]                       }
[17:02:02.811]                       else if (inherits(cond, "condition")) {
[17:02:02.811]                         if (!is.null(pattern)) {
[17:02:02.811]                           computeRestarts <- base::computeRestarts
[17:02:02.811]                           grepl <- base::grepl
[17:02:02.811]                           restarts <- computeRestarts(cond)
[17:02:02.811]                           for (restart in restarts) {
[17:02:02.811]                             name <- restart$name
[17:02:02.811]                             if (is.null(name)) 
[17:02:02.811]                               next
[17:02:02.811]                             if (!grepl(pattern, name)) 
[17:02:02.811]                               next
[17:02:02.811]                             invokeRestart(restart)
[17:02:02.811]                             muffled <- TRUE
[17:02:02.811]                             break
[17:02:02.811]                           }
[17:02:02.811]                         }
[17:02:02.811]                       }
[17:02:02.811]                       invisible(muffled)
[17:02:02.811]                     }
[17:02:02.811]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.811]                   }
[17:02:02.811]                 }
[17:02:02.811]                 else {
[17:02:02.811]                   if (TRUE) {
[17:02:02.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.811]                     {
[17:02:02.811]                       inherits <- base::inherits
[17:02:02.811]                       invokeRestart <- base::invokeRestart
[17:02:02.811]                       is.null <- base::is.null
[17:02:02.811]                       muffled <- FALSE
[17:02:02.811]                       if (inherits(cond, "message")) {
[17:02:02.811]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.811]                         if (muffled) 
[17:02:02.811]                           invokeRestart("muffleMessage")
[17:02:02.811]                       }
[17:02:02.811]                       else if (inherits(cond, "warning")) {
[17:02:02.811]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.811]                         if (muffled) 
[17:02:02.811]                           invokeRestart("muffleWarning")
[17:02:02.811]                       }
[17:02:02.811]                       else if (inherits(cond, "condition")) {
[17:02:02.811]                         if (!is.null(pattern)) {
[17:02:02.811]                           computeRestarts <- base::computeRestarts
[17:02:02.811]                           grepl <- base::grepl
[17:02:02.811]                           restarts <- computeRestarts(cond)
[17:02:02.811]                           for (restart in restarts) {
[17:02:02.811]                             name <- restart$name
[17:02:02.811]                             if (is.null(name)) 
[17:02:02.811]                               next
[17:02:02.811]                             if (!grepl(pattern, name)) 
[17:02:02.811]                               next
[17:02:02.811]                             invokeRestart(restart)
[17:02:02.811]                             muffled <- TRUE
[17:02:02.811]                             break
[17:02:02.811]                           }
[17:02:02.811]                         }
[17:02:02.811]                       }
[17:02:02.811]                       invisible(muffled)
[17:02:02.811]                     }
[17:02:02.811]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.811]                   }
[17:02:02.811]                 }
[17:02:02.811]             }
[17:02:02.811]         }))
[17:02:02.811]     }, error = function(ex) {
[17:02:02.811]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.811]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.811]                 ...future.rng), started = ...future.startTime, 
[17:02:02.811]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.811]             version = "1.8"), class = "FutureResult")
[17:02:02.811]     }, finally = {
[17:02:02.811]         if (!identical(...future.workdir, getwd())) 
[17:02:02.811]             setwd(...future.workdir)
[17:02:02.811]         {
[17:02:02.811]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.811]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.811]             }
[17:02:02.811]             base::options(...future.oldOptions)
[17:02:02.811]             if (.Platform$OS.type == "windows") {
[17:02:02.811]                 old_names <- names(...future.oldEnvVars)
[17:02:02.811]                 envs <- base::Sys.getenv()
[17:02:02.811]                 names <- names(envs)
[17:02:02.811]                 common <- intersect(names, old_names)
[17:02:02.811]                 added <- setdiff(names, old_names)
[17:02:02.811]                 removed <- setdiff(old_names, names)
[17:02:02.811]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.811]                   envs[common]]
[17:02:02.811]                 NAMES <- toupper(changed)
[17:02:02.811]                 args <- list()
[17:02:02.811]                 for (kk in seq_along(NAMES)) {
[17:02:02.811]                   name <- changed[[kk]]
[17:02:02.811]                   NAME <- NAMES[[kk]]
[17:02:02.811]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.811]                     next
[17:02:02.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.811]                 }
[17:02:02.811]                 NAMES <- toupper(added)
[17:02:02.811]                 for (kk in seq_along(NAMES)) {
[17:02:02.811]                   name <- added[[kk]]
[17:02:02.811]                   NAME <- NAMES[[kk]]
[17:02:02.811]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.811]                     next
[17:02:02.811]                   args[[name]] <- ""
[17:02:02.811]                 }
[17:02:02.811]                 NAMES <- toupper(removed)
[17:02:02.811]                 for (kk in seq_along(NAMES)) {
[17:02:02.811]                   name <- removed[[kk]]
[17:02:02.811]                   NAME <- NAMES[[kk]]
[17:02:02.811]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.811]                     next
[17:02:02.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.811]                 }
[17:02:02.811]                 if (length(args) > 0) 
[17:02:02.811]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.811]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.811]             }
[17:02:02.811]             else {
[17:02:02.811]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.811]             }
[17:02:02.811]             {
[17:02:02.811]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.811]                   0L) {
[17:02:02.811]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.811]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.811]                   base::options(opts)
[17:02:02.811]                 }
[17:02:02.811]                 {
[17:02:02.811]                   {
[17:02:02.811]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:02.811]                     NULL
[17:02:02.811]                   }
[17:02:02.811]                   options(future.plan = NULL)
[17:02:02.811]                   if (is.na(NA_character_)) 
[17:02:02.811]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.811]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.811]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.811]                     .init = FALSE)
[17:02:02.811]                 }
[17:02:02.811]             }
[17:02:02.811]         }
[17:02:02.811]     })
[17:02:02.811]     if (TRUE) {
[17:02:02.811]         base::sink(type = "output", split = FALSE)
[17:02:02.811]         if (TRUE) {
[17:02:02.811]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.811]         }
[17:02:02.811]         else {
[17:02:02.811]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.811]         }
[17:02:02.811]         base::close(...future.stdout)
[17:02:02.811]         ...future.stdout <- NULL
[17:02:02.811]     }
[17:02:02.811]     ...future.result$conditions <- ...future.conditions
[17:02:02.811]     ...future.result$finished <- base::Sys.time()
[17:02:02.811]     ...future.result
[17:02:02.811] }
[17:02:02.815] assign_globals() ...
[17:02:02.815] List of 4
[17:02:02.815]  $ ii   : int 3
[17:02:02.815]  $ n    : int 4
[17:02:02.815]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[17:02:02.815]   ..- attr(*, "region")=List of 2
[17:02:02.815]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:02:02.815]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:02:02.815]   ..- attr(*, "tile")= int [1:2] 2 1
[17:02:02.815]  $ delay:function (counts)  
[17:02:02.815]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.815]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52af57978> 
[17:02:02.815]  - attr(*, "where")=List of 4
[17:02:02.815]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.815]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.815]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.815]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.815]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.815]  - attr(*, "resolved")= logi FALSE
[17:02:02.815]  - attr(*, "total_size")= num 14584
[17:02:02.815]  - attr(*, "already-done")= logi TRUE
[17:02:02.826] - copied ‘ii’ to environment
[17:02:02.826] - copied ‘n’ to environment
[17:02:02.826] - copied ‘C’ to environment
[17:02:02.826] - reassign environment for ‘delay’
[17:02:02.827] - copied ‘delay’ to environment
[17:02:02.827] assign_globals() ... done
[17:02:02.827] requestCore(): workers = 2
[17:02:02.830] MulticoreFuture started
[17:02:02.830] - Launch lazy future ... done
[17:02:02.830] run() for ‘MulticoreFuture’ ... done
[17:02:02.831] - run() ... done
[17:02:02.831] - resolved() ...
[17:02:02.831] plan(): Setting new future strategy stack:
[17:02:02.832] List of future strategies:
[17:02:02.832] 1. sequential:
[17:02:02.832]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.832]    - tweaked: FALSE
[17:02:02.832]    - call: NULL
[17:02:02.833] plan(): nbrOfWorkers() = 1
[17:02:02.837] plan(): Setting new future strategy stack:
[17:02:02.837] List of future strategies:
[17:02:02.837] 1. multicore:
[17:02:02.837]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:02.837]    - tweaked: FALSE
[17:02:02.837]    - call: plan(strategy)
[17:02:02.841] - resolved: FALSE
[17:02:02.842] - resolved() ... done
[17:02:02.842] resolved() for ‘MulticoreFuture’ ... done
[17:02:02.842] resolved() for ‘Future’ ...
[17:02:02.842] plan(): nbrOfWorkers() = 2
[17:02:02.842] - state: ‘created’
[17:02:02.842] - run: TRUE
[17:02:02.842] - run() ...
[17:02:02.843] run() for ‘Future’ ...
[17:02:02.843] - state: ‘created’
[17:02:02.843] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:02.848] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:02.849] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:02.849]   - Field: ‘label’
[17:02:02.849]   - Field: ‘local’
[17:02:02.849]   - Field: ‘owner’
[17:02:02.849]   - Field: ‘envir’
[17:02:02.850]   - Field: ‘workers’
[17:02:02.850]   - Field: ‘packages’
[17:02:02.850]   - Field: ‘gc’
[17:02:02.850]   - Field: ‘job’
[17:02:02.850]   - Field: ‘conditions’
[17:02:02.850]   - Field: ‘expr’
[17:02:02.850]   - Field: ‘uuid’
[17:02:02.851]   - Field: ‘seed’
[17:02:02.851]   - Field: ‘version’
[17:02:02.851]   - Field: ‘result’
[17:02:02.851]   - Field: ‘asynchronous’
[17:02:02.851]   - Field: ‘calls’
[17:02:02.851]   - Field: ‘globals’
[17:02:02.851]   - Field: ‘stdout’
[17:02:02.852]   - Field: ‘earlySignal’
[17:02:02.852]   - Field: ‘lazy’
[17:02:02.852]   - Field: ‘state’
[17:02:02.852] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:02.852] - Launch lazy future ...
[17:02:02.853] Packages needed by the future expression (n = 1): ‘future’
[17:02:02.853] Packages needed by future strategies (n = 0): <none>
[17:02:02.854] {
[17:02:02.854]     {
[17:02:02.854]         {
[17:02:02.854]             ...future.startTime <- base::Sys.time()
[17:02:02.854]             {
[17:02:02.854]                 {
[17:02:02.854]                   {
[17:02:02.854]                     {
[17:02:02.854]                       {
[17:02:02.854]                         base::local({
[17:02:02.854]                           has_future <- base::requireNamespace("future", 
[17:02:02.854]                             quietly = TRUE)
[17:02:02.854]                           if (has_future) {
[17:02:02.854]                             ns <- base::getNamespace("future")
[17:02:02.854]                             version <- ns[[".package"]][["version"]]
[17:02:02.854]                             if (is.null(version)) 
[17:02:02.854]                               version <- utils::packageVersion("future")
[17:02:02.854]                           }
[17:02:02.854]                           else {
[17:02:02.854]                             version <- NULL
[17:02:02.854]                           }
[17:02:02.854]                           if (!has_future || version < "1.8.0") {
[17:02:02.854]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:02.854]                               "", base::R.version$version.string), 
[17:02:02.854]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:02.854]                                 base::R.version$platform, 8 * 
[17:02:02.854]                                   base::.Machine$sizeof.pointer), 
[17:02:02.854]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:02.854]                                 "release", "version")], collapse = " "), 
[17:02:02.854]                               hostname = base::Sys.info()[["nodename"]])
[17:02:02.854]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:02.854]                               info)
[17:02:02.854]                             info <- base::paste(info, collapse = "; ")
[17:02:02.854]                             if (!has_future) {
[17:02:02.854]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:02.854]                                 info)
[17:02:02.854]                             }
[17:02:02.854]                             else {
[17:02:02.854]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:02.854]                                 info, version)
[17:02:02.854]                             }
[17:02:02.854]                             base::stop(msg)
[17:02:02.854]                           }
[17:02:02.854]                         })
[17:02:02.854]                       }
[17:02:02.854]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:02.854]                       base::options(mc.cores = 1L)
[17:02:02.854]                     }
[17:02:02.854]                     base::local({
[17:02:02.854]                       for (pkg in "future") {
[17:02:02.854]                         base::loadNamespace(pkg)
[17:02:02.854]                         base::library(pkg, character.only = TRUE)
[17:02:02.854]                       }
[17:02:02.854]                     })
[17:02:02.854]                   }
[17:02:02.854]                   ...future.strategy.old <- future::plan("list")
[17:02:02.854]                   options(future.plan = NULL)
[17:02:02.854]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.854]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:02.854]                 }
[17:02:02.854]                 ...future.workdir <- getwd()
[17:02:02.854]             }
[17:02:02.854]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:02.854]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:02.854]         }
[17:02:02.854]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:02.854]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:02.854]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:02.854]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:02.854]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:02.854]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:02.854]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:02.854]             base::names(...future.oldOptions))
[17:02:02.854]     }
[17:02:02.854]     if (FALSE) {
[17:02:02.854]     }
[17:02:02.854]     else {
[17:02:02.854]         if (TRUE) {
[17:02:02.854]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:02.854]                 open = "w")
[17:02:02.854]         }
[17:02:02.854]         else {
[17:02:02.854]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:02.854]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:02.854]         }
[17:02:02.854]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:02.854]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:02.854]             base::sink(type = "output", split = FALSE)
[17:02:02.854]             base::close(...future.stdout)
[17:02:02.854]         }, add = TRUE)
[17:02:02.854]     }
[17:02:02.854]     ...future.frame <- base::sys.nframe()
[17:02:02.854]     ...future.conditions <- base::list()
[17:02:02.854]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:02.854]     if (FALSE) {
[17:02:02.854]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:02.854]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:02.854]     }
[17:02:02.854]     ...future.result <- base::tryCatch({
[17:02:02.854]         base::withCallingHandlers({
[17:02:02.854]             ...future.value <- base::withVisible(base::local({
[17:02:02.854]                 withCallingHandlers({
[17:02:02.854]                   {
[17:02:02.854]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:02.854]                       ii, n), appendLF = FALSE)
[17:02:02.854]                     fit <- mandelbrot(C)
[17:02:02.854]                     delay(fit)
[17:02:02.854]                     message(" done")
[17:02:02.854]                     fit
[17:02:02.854]                   }
[17:02:02.854]                 }, immediateCondition = function(cond) {
[17:02:02.854]                   save_rds <- function (object, pathname, ...) 
[17:02:02.854]                   {
[17:02:02.854]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:02.854]                     if (file_test("-f", pathname_tmp)) {
[17:02:02.854]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.854]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:02.854]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.854]                         fi_tmp[["mtime"]])
[17:02:02.854]                     }
[17:02:02.854]                     tryCatch({
[17:02:02.854]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:02.854]                     }, error = function(ex) {
[17:02:02.854]                       msg <- conditionMessage(ex)
[17:02:02.854]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.854]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:02.854]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.854]                         fi_tmp[["mtime"]], msg)
[17:02:02.854]                       ex$message <- msg
[17:02:02.854]                       stop(ex)
[17:02:02.854]                     })
[17:02:02.854]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:02.854]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:02.854]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:02.854]                       fi_tmp <- file.info(pathname_tmp)
[17:02:02.854]                       fi <- file.info(pathname)
[17:02:02.854]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:02.854]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:02.854]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:02.854]                         fi[["size"]], fi[["mtime"]])
[17:02:02.854]                       stop(msg)
[17:02:02.854]                     }
[17:02:02.854]                     invisible(pathname)
[17:02:02.854]                   }
[17:02:02.854]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:02.854]                     rootPath = tempdir()) 
[17:02:02.854]                   {
[17:02:02.854]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:02.854]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:02.854]                       tmpdir = path, fileext = ".rds")
[17:02:02.854]                     save_rds(obj, file)
[17:02:02.854]                   }
[17:02:02.854]                   saveImmediateCondition(cond, path = "/tmp/RtmpEpMItl/.future/immediateConditions")
[17:02:02.854]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.854]                   {
[17:02:02.854]                     inherits <- base::inherits
[17:02:02.854]                     invokeRestart <- base::invokeRestart
[17:02:02.854]                     is.null <- base::is.null
[17:02:02.854]                     muffled <- FALSE
[17:02:02.854]                     if (inherits(cond, "message")) {
[17:02:02.854]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:02.854]                       if (muffled) 
[17:02:02.854]                         invokeRestart("muffleMessage")
[17:02:02.854]                     }
[17:02:02.854]                     else if (inherits(cond, "warning")) {
[17:02:02.854]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:02.854]                       if (muffled) 
[17:02:02.854]                         invokeRestart("muffleWarning")
[17:02:02.854]                     }
[17:02:02.854]                     else if (inherits(cond, "condition")) {
[17:02:02.854]                       if (!is.null(pattern)) {
[17:02:02.854]                         computeRestarts <- base::computeRestarts
[17:02:02.854]                         grepl <- base::grepl
[17:02:02.854]                         restarts <- computeRestarts(cond)
[17:02:02.854]                         for (restart in restarts) {
[17:02:02.854]                           name <- restart$name
[17:02:02.854]                           if (is.null(name)) 
[17:02:02.854]                             next
[17:02:02.854]                           if (!grepl(pattern, name)) 
[17:02:02.854]                             next
[17:02:02.854]                           invokeRestart(restart)
[17:02:02.854]                           muffled <- TRUE
[17:02:02.854]                           break
[17:02:02.854]                         }
[17:02:02.854]                       }
[17:02:02.854]                     }
[17:02:02.854]                     invisible(muffled)
[17:02:02.854]                   }
[17:02:02.854]                   muffleCondition(cond)
[17:02:02.854]                 })
[17:02:02.854]             }))
[17:02:02.854]             future::FutureResult(value = ...future.value$value, 
[17:02:02.854]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.854]                   ...future.rng), globalenv = if (FALSE) 
[17:02:02.854]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:02.854]                     ...future.globalenv.names))
[17:02:02.854]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:02.854]         }, condition = base::local({
[17:02:02.854]             c <- base::c
[17:02:02.854]             inherits <- base::inherits
[17:02:02.854]             invokeRestart <- base::invokeRestart
[17:02:02.854]             length <- base::length
[17:02:02.854]             list <- base::list
[17:02:02.854]             seq.int <- base::seq.int
[17:02:02.854]             signalCondition <- base::signalCondition
[17:02:02.854]             sys.calls <- base::sys.calls
[17:02:02.854]             `[[` <- base::`[[`
[17:02:02.854]             `+` <- base::`+`
[17:02:02.854]             `<<-` <- base::`<<-`
[17:02:02.854]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:02.854]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:02.854]                   3L)]
[17:02:02.854]             }
[17:02:02.854]             function(cond) {
[17:02:02.854]                 is_error <- inherits(cond, "error")
[17:02:02.854]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:02.854]                   NULL)
[17:02:02.854]                 if (is_error) {
[17:02:02.854]                   sessionInformation <- function() {
[17:02:02.854]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:02.854]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:02.854]                       search = base::search(), system = base::Sys.info())
[17:02:02.854]                   }
[17:02:02.854]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.854]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:02.854]                     cond$call), session = sessionInformation(), 
[17:02:02.854]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:02.854]                   signalCondition(cond)
[17:02:02.854]                 }
[17:02:02.854]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:02.854]                 "immediateCondition"))) {
[17:02:02.854]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:02.854]                   ...future.conditions[[length(...future.conditions) + 
[17:02:02.854]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:02.854]                   if (TRUE && !signal) {
[17:02:02.854]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.854]                     {
[17:02:02.854]                       inherits <- base::inherits
[17:02:02.854]                       invokeRestart <- base::invokeRestart
[17:02:02.854]                       is.null <- base::is.null
[17:02:02.854]                       muffled <- FALSE
[17:02:02.854]                       if (inherits(cond, "message")) {
[17:02:02.854]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.854]                         if (muffled) 
[17:02:02.854]                           invokeRestart("muffleMessage")
[17:02:02.854]                       }
[17:02:02.854]                       else if (inherits(cond, "warning")) {
[17:02:02.854]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.854]                         if (muffled) 
[17:02:02.854]                           invokeRestart("muffleWarning")
[17:02:02.854]                       }
[17:02:02.854]                       else if (inherits(cond, "condition")) {
[17:02:02.854]                         if (!is.null(pattern)) {
[17:02:02.854]                           computeRestarts <- base::computeRestarts
[17:02:02.854]                           grepl <- base::grepl
[17:02:02.854]                           restarts <- computeRestarts(cond)
[17:02:02.854]                           for (restart in restarts) {
[17:02:02.854]                             name <- restart$name
[17:02:02.854]                             if (is.null(name)) 
[17:02:02.854]                               next
[17:02:02.854]                             if (!grepl(pattern, name)) 
[17:02:02.854]                               next
[17:02:02.854]                             invokeRestart(restart)
[17:02:02.854]                             muffled <- TRUE
[17:02:02.854]                             break
[17:02:02.854]                           }
[17:02:02.854]                         }
[17:02:02.854]                       }
[17:02:02.854]                       invisible(muffled)
[17:02:02.854]                     }
[17:02:02.854]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.854]                   }
[17:02:02.854]                 }
[17:02:02.854]                 else {
[17:02:02.854]                   if (TRUE) {
[17:02:02.854]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:02.854]                     {
[17:02:02.854]                       inherits <- base::inherits
[17:02:02.854]                       invokeRestart <- base::invokeRestart
[17:02:02.854]                       is.null <- base::is.null
[17:02:02.854]                       muffled <- FALSE
[17:02:02.854]                       if (inherits(cond, "message")) {
[17:02:02.854]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:02.854]                         if (muffled) 
[17:02:02.854]                           invokeRestart("muffleMessage")
[17:02:02.854]                       }
[17:02:02.854]                       else if (inherits(cond, "warning")) {
[17:02:02.854]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:02.854]                         if (muffled) 
[17:02:02.854]                           invokeRestart("muffleWarning")
[17:02:02.854]                       }
[17:02:02.854]                       else if (inherits(cond, "condition")) {
[17:02:02.854]                         if (!is.null(pattern)) {
[17:02:02.854]                           computeRestarts <- base::computeRestarts
[17:02:02.854]                           grepl <- base::grepl
[17:02:02.854]                           restarts <- computeRestarts(cond)
[17:02:02.854]                           for (restart in restarts) {
[17:02:02.854]                             name <- restart$name
[17:02:02.854]                             if (is.null(name)) 
[17:02:02.854]                               next
[17:02:02.854]                             if (!grepl(pattern, name)) 
[17:02:02.854]                               next
[17:02:02.854]                             invokeRestart(restart)
[17:02:02.854]                             muffled <- TRUE
[17:02:02.854]                             break
[17:02:02.854]                           }
[17:02:02.854]                         }
[17:02:02.854]                       }
[17:02:02.854]                       invisible(muffled)
[17:02:02.854]                     }
[17:02:02.854]                     muffleCondition(cond, pattern = "^muffle")
[17:02:02.854]                   }
[17:02:02.854]                 }
[17:02:02.854]             }
[17:02:02.854]         }))
[17:02:02.854]     }, error = function(ex) {
[17:02:02.854]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:02.854]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:02.854]                 ...future.rng), started = ...future.startTime, 
[17:02:02.854]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:02.854]             version = "1.8"), class = "FutureResult")
[17:02:02.854]     }, finally = {
[17:02:02.854]         if (!identical(...future.workdir, getwd())) 
[17:02:02.854]             setwd(...future.workdir)
[17:02:02.854]         {
[17:02:02.854]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:02.854]                 ...future.oldOptions$nwarnings <- NULL
[17:02:02.854]             }
[17:02:02.854]             base::options(...future.oldOptions)
[17:02:02.854]             if (.Platform$OS.type == "windows") {
[17:02:02.854]                 old_names <- names(...future.oldEnvVars)
[17:02:02.854]                 envs <- base::Sys.getenv()
[17:02:02.854]                 names <- names(envs)
[17:02:02.854]                 common <- intersect(names, old_names)
[17:02:02.854]                 added <- setdiff(names, old_names)
[17:02:02.854]                 removed <- setdiff(old_names, names)
[17:02:02.854]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:02.854]                   envs[common]]
[17:02:02.854]                 NAMES <- toupper(changed)
[17:02:02.854]                 args <- list()
[17:02:02.854]                 for (kk in seq_along(NAMES)) {
[17:02:02.854]                   name <- changed[[kk]]
[17:02:02.854]                   NAME <- NAMES[[kk]]
[17:02:02.854]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.854]                     next
[17:02:02.854]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.854]                 }
[17:02:02.854]                 NAMES <- toupper(added)
[17:02:02.854]                 for (kk in seq_along(NAMES)) {
[17:02:02.854]                   name <- added[[kk]]
[17:02:02.854]                   NAME <- NAMES[[kk]]
[17:02:02.854]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.854]                     next
[17:02:02.854]                   args[[name]] <- ""
[17:02:02.854]                 }
[17:02:02.854]                 NAMES <- toupper(removed)
[17:02:02.854]                 for (kk in seq_along(NAMES)) {
[17:02:02.854]                   name <- removed[[kk]]
[17:02:02.854]                   NAME <- NAMES[[kk]]
[17:02:02.854]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:02.854]                     next
[17:02:02.854]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:02.854]                 }
[17:02:02.854]                 if (length(args) > 0) 
[17:02:02.854]                   base::do.call(base::Sys.setenv, args = args)
[17:02:02.854]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:02.854]             }
[17:02:02.854]             else {
[17:02:02.854]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:02.854]             }
[17:02:02.854]             {
[17:02:02.854]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:02.854]                   0L) {
[17:02:02.854]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:02.854]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:02.854]                   base::options(opts)
[17:02:02.854]                 }
[17:02:02.854]                 {
[17:02:02.854]                   {
[17:02:02.854]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:02.854]                     NULL
[17:02:02.854]                   }
[17:02:02.854]                   options(future.plan = NULL)
[17:02:02.854]                   if (is.na(NA_character_)) 
[17:02:02.854]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:02.854]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:02.854]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:02.854]                     .init = FALSE)
[17:02:02.854]                 }
[17:02:02.854]             }
[17:02:02.854]         }
[17:02:02.854]     })
[17:02:02.854]     if (TRUE) {
[17:02:02.854]         base::sink(type = "output", split = FALSE)
[17:02:02.854]         if (TRUE) {
[17:02:02.854]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:02.854]         }
[17:02:02.854]         else {
[17:02:02.854]             ...future.result["stdout"] <- base::list(NULL)
[17:02:02.854]         }
[17:02:02.854]         base::close(...future.stdout)
[17:02:02.854]         ...future.stdout <- NULL
[17:02:02.854]     }
[17:02:02.854]     ...future.result$conditions <- ...future.conditions
[17:02:02.854]     ...future.result$finished <- base::Sys.time()
[17:02:02.854]     ...future.result
[17:02:02.854] }
[17:02:02.857] assign_globals() ...
[17:02:02.858] List of 4
[17:02:02.858]  $ ii   : int 4
[17:02:02.858]  $ n    : int 4
[17:02:02.858]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[17:02:02.858]   ..- attr(*, "region")=List of 2
[17:02:02.858]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:02:02.858]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:02:02.858]   ..- attr(*, "tile")= int [1:2] 2 2
[17:02:02.858]  $ delay:function (counts)  
[17:02:02.858]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:02:02.858]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55e52af57978> 
[17:02:02.858]  - attr(*, "where")=List of 4
[17:02:02.858]   ..$ ii   :<environment: R_EmptyEnv> 
[17:02:02.858]   ..$ n    :<environment: R_EmptyEnv> 
[17:02:02.858]   ..$ C    :<environment: R_EmptyEnv> 
[17:02:02.858]   ..$ delay:<environment: R_EmptyEnv> 
[17:02:02.858]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:02.858]  - attr(*, "resolved")= logi FALSE
[17:02:02.858]  - attr(*, "total_size")= num 14584
[17:02:02.858]  - attr(*, "already-done")= logi TRUE
[17:02:02.867] - copied ‘ii’ to environment
[17:02:02.868] - copied ‘n’ to environment
[17:02:02.868] - copied ‘C’ to environment
[17:02:02.868] - reassign environment for ‘delay’
[17:02:02.868] - copied ‘delay’ to environment
[17:02:02.868] assign_globals() ... done
[17:02:02.868] requestCore(): workers = 2
[17:02:02.869] Poll #1 (0): usedCores() = 2, workers = 2
[17:02:02.879] result() for MulticoreFuture ...
[17:02:02.881] result() for MulticoreFuture ...
[17:02:02.881] result() for MulticoreFuture ... done
[17:02:02.881] signalConditions() ...
[17:02:02.881]  - include = ‘immediateCondition’
[17:02:02.881]  - exclude = 
[17:02:02.881]  - resignal = FALSE
[17:02:02.881]  - Number of conditions: 2
[17:02:02.881] signalConditions() ... done
[17:02:02.882] result() for MulticoreFuture ... done
[17:02:02.882] result() for MulticoreFuture ...
[17:02:02.882] result() for MulticoreFuture ... done
[17:02:02.882] signalConditions() ...
[17:02:02.882]  - include = ‘immediateCondition’
[17:02:02.882]  - exclude = 
[17:02:02.882]  - resignal = FALSE
[17:02:02.882]  - Number of conditions: 2
[17:02:02.883] signalConditions() ... done
[17:02:02.886] MulticoreFuture started
[17:02:02.886] - Launch lazy future ... done
[17:02:02.886] run() for ‘MulticoreFuture’ ... done
[17:02:02.886] - run() ... done
[17:02:02.887] - resolved() ...
[17:02:02.887] plan(): Setting new future strategy stack:
[17:02:02.887] List of future strategies:
[17:02:02.887] 1. sequential:
[17:02:02.887]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:02.887]    - tweaked: FALSE
[17:02:02.887]    - call: NULL
[17:02:02.888] plan(): nbrOfWorkers() = 1
[17:02:02.893] plan(): Setting new future strategy stack:
[17:02:02.893] List of future strategies:
[17:02:02.893] 1. multicore:
[17:02:02.893]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:02.893]    - tweaked: FALSE
[17:02:02.893]    - call: plan(strategy)
[17:02:02.897] - resolved: FALSE
[17:02:02.897] - resolved() ... done
[17:02:02.897] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[17:02:02.898] result() for MulticoreFuture ...
[17:02:02.898] result() for MulticoreFuture ... done
[17:02:02.898] plan(): nbrOfWorkers() = 2
[17:02:02.898] result() for MulticoreFuture ...
[17:02:02.898] result() for MulticoreFuture ... done
[17:02:02.899] signalConditions() ...
[17:02:02.899]  - include = ‘immediateCondition’
[17:02:02.899]  - exclude = 
[17:02:02.899]  - resignal = FALSE
[17:02:02.899]  - Number of conditions: 2
[17:02:02.899] signalConditions() ... done
[17:02:02.899] Future state: ‘finished’
[17:02:02.900] result() for MulticoreFuture ...
[17:02:02.900] result() for MulticoreFuture ... done
[17:02:02.900] signalConditions() ...
[17:02:02.900]  - include = ‘condition’
[17:02:02.900]  - exclude = ‘immediateCondition’
[17:02:02.900]  - resignal = TRUE
[17:02:02.900]  - Number of conditions: 2
[17:02:02.900]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:02:02.901]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.901] signalConditions() ... done
Plotting tile #3 of 4 ...
[17:02:02.902] result() for MulticoreFuture ...
[17:02:02.904] result() for MulticoreFuture ...
[17:02:02.904] result() for MulticoreFuture ... done
[17:02:02.904] signalConditions() ...
[17:02:02.904]  - include = ‘immediateCondition’
[17:02:02.904]  - exclude = 
[17:02:02.904]  - resignal = FALSE
[17:02:02.904]  - Number of conditions: 2
[17:02:02.904] signalConditions() ... done
[17:02:02.905] result() for MulticoreFuture ... done
[17:02:02.905] result() for MulticoreFuture ...
[17:02:02.905] result() for MulticoreFuture ... done
[17:02:02.905] signalConditions() ...
[17:02:02.905]  - include = ‘immediateCondition’
[17:02:02.905]  - exclude = 
[17:02:02.905]  - resignal = FALSE
[17:02:02.905]  - Number of conditions: 2
[17:02:02.906] signalConditions() ... done
[17:02:02.906] Future state: ‘finished’
[17:02:02.906] result() for MulticoreFuture ...
[17:02:02.906] result() for MulticoreFuture ... done
[17:02:02.906] signalConditions() ...
[17:02:02.906]  - include = ‘condition’
[17:02:02.906]  - exclude = ‘immediateCondition’
[17:02:02.906]  - resignal = TRUE
[17:02:02.907]  - Number of conditions: 2
[17:02:02.907]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:02:02.907]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.907] signalConditions() ... done
Plotting tile #4 of 4 ...
[17:02:02.908] result() for MulticoreFuture ...
[17:02:02.909] result() for MulticoreFuture ...
[17:02:02.909] result() for MulticoreFuture ... done
[17:02:02.909] signalConditions() ...
[17:02:02.909]  - include = ‘immediateCondition’
[17:02:02.910]  - exclude = 
[17:02:02.910]  - resignal = FALSE
[17:02:02.910]  - Number of conditions: 2
[17:02:02.910] signalConditions() ... done
[17:02:02.910] result() for MulticoreFuture ... done
[17:02:02.910] result() for MulticoreFuture ...
[17:02:02.910] result() for MulticoreFuture ... done
[17:02:02.910] signalConditions() ...
[17:02:02.911]  - include = ‘immediateCondition’
[17:02:02.911]  - exclude = 
[17:02:02.911]  - resignal = FALSE
[17:02:02.911]  - Number of conditions: 2
[17:02:02.911] signalConditions() ... done
[17:02:02.911] Future state: ‘finished’
[17:02:02.911] result() for MulticoreFuture ...
[17:02:02.911] result() for MulticoreFuture ... done
[17:02:02.912] signalConditions() ...
[17:02:02.912]  - include = ‘condition’
[17:02:02.912]  - exclude = ‘immediateCondition’
[17:02:02.912]  - resignal = TRUE
[17:02:02.912]  - Number of conditions: 2
[17:02:02.912]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:02:02.912]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:02.912] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[17:02:02.914] plan(): Setting new future strategy stack:
[17:02:02.914] List of future strategies:
[17:02:02.914] 1. multisession:
[17:02:02.914]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:02.914]    - tweaked: FALSE
[17:02:02.914]    - call: plan(strategy)
[17:02:02.915] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:02.915] multisession:
[17:02:02.915] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:02.915] - tweaked: FALSE
[17:02:02.915] - call: plan(strategy)
[17:02:02.922] getGlobalsAndPackages() ...
[17:02:02.922] Not searching for globals
[17:02:02.922] - globals: [0] <none>
[17:02:02.922] getGlobalsAndPackages() ... DONE
[17:02:02.923] [local output] makeClusterPSOCK() ...
[17:02:02.988] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:02.989] [local output] Base port: 11322
[17:02:02.989] [local output] Getting setup options for 2 cluster nodes ...
[17:02:02.989] [local output]  - Node 1 of 2 ...
[17:02:02.990] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:02.990] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEpMItl/worker.rank=1.parallelly.parent=39976.9c28672c6949.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpEpMItl/worker.rank=1.parallelly.parent=39976.9c28672c6949.pid")'’
[17:02:03.182] - Possible to infer worker's PID: TRUE
[17:02:03.182] [local output] Rscript port: 11322

[17:02:03.182] [local output]  - Node 2 of 2 ...
[17:02:03.183] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:03.183] [local output] Rscript port: 11322

[17:02:03.184] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:03.184] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:03.184] [local output] Setting up PSOCK nodes in parallel
[17:02:03.184] List of 36
[17:02:03.184]  $ worker          : chr "localhost"
[17:02:03.184]   ..- attr(*, "localhost")= logi TRUE
[17:02:03.184]  $ master          : chr "localhost"
[17:02:03.184]  $ port            : int 11322
[17:02:03.184]  $ connectTimeout  : num 120
[17:02:03.184]  $ timeout         : num 2592000
[17:02:03.184]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:03.184]  $ homogeneous     : logi TRUE
[17:02:03.184]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:03.184]  $ rscript_envs    : NULL
[17:02:03.184]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:03.184]  $ rscript_startup : NULL
[17:02:03.184]  $ rscript_sh      : chr "sh"
[17:02:03.184]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:03.184]  $ methods         : logi TRUE
[17:02:03.184]  $ socketOptions   : chr "no-delay"
[17:02:03.184]  $ useXDR          : logi FALSE
[17:02:03.184]  $ outfile         : chr "/dev/null"
[17:02:03.184]  $ renice          : int NA
[17:02:03.184]  $ rshcmd          : NULL
[17:02:03.184]  $ user            : chr(0) 
[17:02:03.184]  $ revtunnel       : logi FALSE
[17:02:03.184]  $ rshlogfile      : NULL
[17:02:03.184]  $ rshopts         : chr(0) 
[17:02:03.184]  $ rank            : int 1
[17:02:03.184]  $ manual          : logi FALSE
[17:02:03.184]  $ dryrun          : logi FALSE
[17:02:03.184]  $ quiet           : logi FALSE
[17:02:03.184]  $ setup_strategy  : chr "parallel"
[17:02:03.184]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:03.184]  $ pidfile         : chr "/tmp/RtmpEpMItl/worker.rank=1.parallelly.parent=39976.9c28672c6949.pid"
[17:02:03.184]  $ rshcmd_label    : NULL
[17:02:03.184]  $ rsh_call        : NULL
[17:02:03.184]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:03.184]  $ localMachine    : logi TRUE
[17:02:03.184]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:03.184]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:03.184]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:03.184]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:03.184]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:03.184]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:03.184]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:03.184]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:03.184]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:03.184]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:03.184]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:03.184]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:03.184]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:03.184]  $ arguments       :List of 28
[17:02:03.184]   ..$ worker          : chr "localhost"
[17:02:03.184]   ..$ master          : NULL
[17:02:03.184]   ..$ port            : int 11322
[17:02:03.184]   ..$ connectTimeout  : num 120
[17:02:03.184]   ..$ timeout         : num 2592000
[17:02:03.184]   ..$ rscript         : NULL
[17:02:03.184]   ..$ homogeneous     : NULL
[17:02:03.184]   ..$ rscript_args    : NULL
[17:02:03.184]   ..$ rscript_envs    : NULL
[17:02:03.184]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:03.184]   ..$ rscript_startup : NULL
[17:02:03.184]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:03.184]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:03.184]   ..$ methods         : logi TRUE
[17:02:03.184]   ..$ socketOptions   : chr "no-delay"
[17:02:03.184]   ..$ useXDR          : logi FALSE
[17:02:03.184]   ..$ outfile         : chr "/dev/null"
[17:02:03.184]   ..$ renice          : int NA
[17:02:03.184]   ..$ rshcmd          : NULL
[17:02:03.184]   ..$ user            : NULL
[17:02:03.184]   ..$ revtunnel       : logi NA
[17:02:03.184]   ..$ rshlogfile      : NULL
[17:02:03.184]   ..$ rshopts         : NULL
[17:02:03.184]   ..$ rank            : int 1
[17:02:03.184]   ..$ manual          : logi FALSE
[17:02:03.184]   ..$ dryrun          : logi FALSE
[17:02:03.184]   ..$ quiet           : logi FALSE
[17:02:03.184]   ..$ setup_strategy  : chr "parallel"
[17:02:03.184]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:03.201] [local output] System call to launch all workers:
[17:02:03.201] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEpMItl/worker.rank=1.parallelly.parent=39976.9c28672c6949.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11322 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:03.201] [local output] Starting PSOCK main server
[17:02:03.207] [local output] Workers launched
[17:02:03.207] [local output] Waiting for workers to connect back
[17:02:03.208]  - [local output] 0 workers out of 2 ready
[17:02:03.452]  - [local output] 0 workers out of 2 ready
[17:02:03.453]  - [local output] 1 workers out of 2 ready
[17:02:03.453]  - [local output] 2 workers out of 2 ready
[17:02:03.453] [local output] Launching of workers completed
[17:02:03.453] [local output] Collecting session information from workers
[17:02:03.454] [local output]  - Worker #1 of 2
[17:02:03.454] [local output]  - Worker #2 of 2
[17:02:03.454] [local output] makeClusterPSOCK() ... done
[17:02:03.465] Packages needed by the future expression (n = 0): <none>
[17:02:03.465] Packages needed by future strategies (n = 0): <none>
[17:02:03.466] {
[17:02:03.466]     {
[17:02:03.466]         {
[17:02:03.466]             ...future.startTime <- base::Sys.time()
[17:02:03.466]             {
[17:02:03.466]                 {
[17:02:03.466]                   {
[17:02:03.466]                     {
[17:02:03.466]                       base::local({
[17:02:03.466]                         has_future <- base::requireNamespace("future", 
[17:02:03.466]                           quietly = TRUE)
[17:02:03.466]                         if (has_future) {
[17:02:03.466]                           ns <- base::getNamespace("future")
[17:02:03.466]                           version <- ns[[".package"]][["version"]]
[17:02:03.466]                           if (is.null(version)) 
[17:02:03.466]                             version <- utils::packageVersion("future")
[17:02:03.466]                         }
[17:02:03.466]                         else {
[17:02:03.466]                           version <- NULL
[17:02:03.466]                         }
[17:02:03.466]                         if (!has_future || version < "1.8.0") {
[17:02:03.466]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:03.466]                             "", base::R.version$version.string), 
[17:02:03.466]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:03.466]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:03.466]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:03.466]                               "release", "version")], collapse = " "), 
[17:02:03.466]                             hostname = base::Sys.info()[["nodename"]])
[17:02:03.466]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:03.466]                             info)
[17:02:03.466]                           info <- base::paste(info, collapse = "; ")
[17:02:03.466]                           if (!has_future) {
[17:02:03.466]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:03.466]                               info)
[17:02:03.466]                           }
[17:02:03.466]                           else {
[17:02:03.466]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:03.466]                               info, version)
[17:02:03.466]                           }
[17:02:03.466]                           base::stop(msg)
[17:02:03.466]                         }
[17:02:03.466]                       })
[17:02:03.466]                     }
[17:02:03.466]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:03.466]                     base::options(mc.cores = 1L)
[17:02:03.466]                   }
[17:02:03.466]                   ...future.strategy.old <- future::plan("list")
[17:02:03.466]                   options(future.plan = NULL)
[17:02:03.466]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.466]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:03.466]                 }
[17:02:03.466]                 ...future.workdir <- getwd()
[17:02:03.466]             }
[17:02:03.466]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:03.466]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:03.466]         }
[17:02:03.466]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:03.466]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:03.466]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:03.466]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:03.466]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:03.466]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:03.466]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:03.466]             base::names(...future.oldOptions))
[17:02:03.466]     }
[17:02:03.466]     if (FALSE) {
[17:02:03.466]     }
[17:02:03.466]     else {
[17:02:03.466]         if (TRUE) {
[17:02:03.466]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:03.466]                 open = "w")
[17:02:03.466]         }
[17:02:03.466]         else {
[17:02:03.466]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:03.466]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:03.466]         }
[17:02:03.466]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:03.466]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:03.466]             base::sink(type = "output", split = FALSE)
[17:02:03.466]             base::close(...future.stdout)
[17:02:03.466]         }, add = TRUE)
[17:02:03.466]     }
[17:02:03.466]     ...future.frame <- base::sys.nframe()
[17:02:03.466]     ...future.conditions <- base::list()
[17:02:03.466]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:03.466]     if (FALSE) {
[17:02:03.466]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:03.466]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:03.466]     }
[17:02:03.466]     ...future.result <- base::tryCatch({
[17:02:03.466]         base::withCallingHandlers({
[17:02:03.466]             ...future.value <- base::withVisible(base::local({
[17:02:03.466]                 ...future.makeSendCondition <- base::local({
[17:02:03.466]                   sendCondition <- NULL
[17:02:03.466]                   function(frame = 1L) {
[17:02:03.466]                     if (is.function(sendCondition)) 
[17:02:03.466]                       return(sendCondition)
[17:02:03.466]                     ns <- getNamespace("parallel")
[17:02:03.466]                     if (exists("sendData", mode = "function", 
[17:02:03.466]                       envir = ns)) {
[17:02:03.466]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:03.466]                         envir = ns)
[17:02:03.466]                       envir <- sys.frame(frame)
[17:02:03.466]                       master <- NULL
[17:02:03.466]                       while (!identical(envir, .GlobalEnv) && 
[17:02:03.466]                         !identical(envir, emptyenv())) {
[17:02:03.466]                         if (exists("master", mode = "list", envir = envir, 
[17:02:03.466]                           inherits = FALSE)) {
[17:02:03.466]                           master <- get("master", mode = "list", 
[17:02:03.466]                             envir = envir, inherits = FALSE)
[17:02:03.466]                           if (inherits(master, c("SOCKnode", 
[17:02:03.466]                             "SOCK0node"))) {
[17:02:03.466]                             sendCondition <<- function(cond) {
[17:02:03.466]                               data <- list(type = "VALUE", value = cond, 
[17:02:03.466]                                 success = TRUE)
[17:02:03.466]                               parallel_sendData(master, data)
[17:02:03.466]                             }
[17:02:03.466]                             return(sendCondition)
[17:02:03.466]                           }
[17:02:03.466]                         }
[17:02:03.466]                         frame <- frame + 1L
[17:02:03.466]                         envir <- sys.frame(frame)
[17:02:03.466]                       }
[17:02:03.466]                     }
[17:02:03.466]                     sendCondition <<- function(cond) NULL
[17:02:03.466]                   }
[17:02:03.466]                 })
[17:02:03.466]                 withCallingHandlers({
[17:02:03.466]                   NA
[17:02:03.466]                 }, immediateCondition = function(cond) {
[17:02:03.466]                   sendCondition <- ...future.makeSendCondition()
[17:02:03.466]                   sendCondition(cond)
[17:02:03.466]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.466]                   {
[17:02:03.466]                     inherits <- base::inherits
[17:02:03.466]                     invokeRestart <- base::invokeRestart
[17:02:03.466]                     is.null <- base::is.null
[17:02:03.466]                     muffled <- FALSE
[17:02:03.466]                     if (inherits(cond, "message")) {
[17:02:03.466]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:03.466]                       if (muffled) 
[17:02:03.466]                         invokeRestart("muffleMessage")
[17:02:03.466]                     }
[17:02:03.466]                     else if (inherits(cond, "warning")) {
[17:02:03.466]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:03.466]                       if (muffled) 
[17:02:03.466]                         invokeRestart("muffleWarning")
[17:02:03.466]                     }
[17:02:03.466]                     else if (inherits(cond, "condition")) {
[17:02:03.466]                       if (!is.null(pattern)) {
[17:02:03.466]                         computeRestarts <- base::computeRestarts
[17:02:03.466]                         grepl <- base::grepl
[17:02:03.466]                         restarts <- computeRestarts(cond)
[17:02:03.466]                         for (restart in restarts) {
[17:02:03.466]                           name <- restart$name
[17:02:03.466]                           if (is.null(name)) 
[17:02:03.466]                             next
[17:02:03.466]                           if (!grepl(pattern, name)) 
[17:02:03.466]                             next
[17:02:03.466]                           invokeRestart(restart)
[17:02:03.466]                           muffled <- TRUE
[17:02:03.466]                           break
[17:02:03.466]                         }
[17:02:03.466]                       }
[17:02:03.466]                     }
[17:02:03.466]                     invisible(muffled)
[17:02:03.466]                   }
[17:02:03.466]                   muffleCondition(cond)
[17:02:03.466]                 })
[17:02:03.466]             }))
[17:02:03.466]             future::FutureResult(value = ...future.value$value, 
[17:02:03.466]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.466]                   ...future.rng), globalenv = if (FALSE) 
[17:02:03.466]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:03.466]                     ...future.globalenv.names))
[17:02:03.466]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:03.466]         }, condition = base::local({
[17:02:03.466]             c <- base::c
[17:02:03.466]             inherits <- base::inherits
[17:02:03.466]             invokeRestart <- base::invokeRestart
[17:02:03.466]             length <- base::length
[17:02:03.466]             list <- base::list
[17:02:03.466]             seq.int <- base::seq.int
[17:02:03.466]             signalCondition <- base::signalCondition
[17:02:03.466]             sys.calls <- base::sys.calls
[17:02:03.466]             `[[` <- base::`[[`
[17:02:03.466]             `+` <- base::`+`
[17:02:03.466]             `<<-` <- base::`<<-`
[17:02:03.466]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:03.466]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:03.466]                   3L)]
[17:02:03.466]             }
[17:02:03.466]             function(cond) {
[17:02:03.466]                 is_error <- inherits(cond, "error")
[17:02:03.466]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:03.466]                   NULL)
[17:02:03.466]                 if (is_error) {
[17:02:03.466]                   sessionInformation <- function() {
[17:02:03.466]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:03.466]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:03.466]                       search = base::search(), system = base::Sys.info())
[17:02:03.466]                   }
[17:02:03.466]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.466]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:03.466]                     cond$call), session = sessionInformation(), 
[17:02:03.466]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:03.466]                   signalCondition(cond)
[17:02:03.466]                 }
[17:02:03.466]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:03.466]                 "immediateCondition"))) {
[17:02:03.466]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:03.466]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.466]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:03.466]                   if (TRUE && !signal) {
[17:02:03.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.466]                     {
[17:02:03.466]                       inherits <- base::inherits
[17:02:03.466]                       invokeRestart <- base::invokeRestart
[17:02:03.466]                       is.null <- base::is.null
[17:02:03.466]                       muffled <- FALSE
[17:02:03.466]                       if (inherits(cond, "message")) {
[17:02:03.466]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.466]                         if (muffled) 
[17:02:03.466]                           invokeRestart("muffleMessage")
[17:02:03.466]                       }
[17:02:03.466]                       else if (inherits(cond, "warning")) {
[17:02:03.466]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.466]                         if (muffled) 
[17:02:03.466]                           invokeRestart("muffleWarning")
[17:02:03.466]                       }
[17:02:03.466]                       else if (inherits(cond, "condition")) {
[17:02:03.466]                         if (!is.null(pattern)) {
[17:02:03.466]                           computeRestarts <- base::computeRestarts
[17:02:03.466]                           grepl <- base::grepl
[17:02:03.466]                           restarts <- computeRestarts(cond)
[17:02:03.466]                           for (restart in restarts) {
[17:02:03.466]                             name <- restart$name
[17:02:03.466]                             if (is.null(name)) 
[17:02:03.466]                               next
[17:02:03.466]                             if (!grepl(pattern, name)) 
[17:02:03.466]                               next
[17:02:03.466]                             invokeRestart(restart)
[17:02:03.466]                             muffled <- TRUE
[17:02:03.466]                             break
[17:02:03.466]                           }
[17:02:03.466]                         }
[17:02:03.466]                       }
[17:02:03.466]                       invisible(muffled)
[17:02:03.466]                     }
[17:02:03.466]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.466]                   }
[17:02:03.466]                 }
[17:02:03.466]                 else {
[17:02:03.466]                   if (TRUE) {
[17:02:03.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.466]                     {
[17:02:03.466]                       inherits <- base::inherits
[17:02:03.466]                       invokeRestart <- base::invokeRestart
[17:02:03.466]                       is.null <- base::is.null
[17:02:03.466]                       muffled <- FALSE
[17:02:03.466]                       if (inherits(cond, "message")) {
[17:02:03.466]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.466]                         if (muffled) 
[17:02:03.466]                           invokeRestart("muffleMessage")
[17:02:03.466]                       }
[17:02:03.466]                       else if (inherits(cond, "warning")) {
[17:02:03.466]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.466]                         if (muffled) 
[17:02:03.466]                           invokeRestart("muffleWarning")
[17:02:03.466]                       }
[17:02:03.466]                       else if (inherits(cond, "condition")) {
[17:02:03.466]                         if (!is.null(pattern)) {
[17:02:03.466]                           computeRestarts <- base::computeRestarts
[17:02:03.466]                           grepl <- base::grepl
[17:02:03.466]                           restarts <- computeRestarts(cond)
[17:02:03.466]                           for (restart in restarts) {
[17:02:03.466]                             name <- restart$name
[17:02:03.466]                             if (is.null(name)) 
[17:02:03.466]                               next
[17:02:03.466]                             if (!grepl(pattern, name)) 
[17:02:03.466]                               next
[17:02:03.466]                             invokeRestart(restart)
[17:02:03.466]                             muffled <- TRUE
[17:02:03.466]                             break
[17:02:03.466]                           }
[17:02:03.466]                         }
[17:02:03.466]                       }
[17:02:03.466]                       invisible(muffled)
[17:02:03.466]                     }
[17:02:03.466]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.466]                   }
[17:02:03.466]                 }
[17:02:03.466]             }
[17:02:03.466]         }))
[17:02:03.466]     }, error = function(ex) {
[17:02:03.466]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:03.466]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.466]                 ...future.rng), started = ...future.startTime, 
[17:02:03.466]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:03.466]             version = "1.8"), class = "FutureResult")
[17:02:03.466]     }, finally = {
[17:02:03.466]         if (!identical(...future.workdir, getwd())) 
[17:02:03.466]             setwd(...future.workdir)
[17:02:03.466]         {
[17:02:03.466]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:03.466]                 ...future.oldOptions$nwarnings <- NULL
[17:02:03.466]             }
[17:02:03.466]             base::options(...future.oldOptions)
[17:02:03.466]             if (.Platform$OS.type == "windows") {
[17:02:03.466]                 old_names <- names(...future.oldEnvVars)
[17:02:03.466]                 envs <- base::Sys.getenv()
[17:02:03.466]                 names <- names(envs)
[17:02:03.466]                 common <- intersect(names, old_names)
[17:02:03.466]                 added <- setdiff(names, old_names)
[17:02:03.466]                 removed <- setdiff(old_names, names)
[17:02:03.466]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:03.466]                   envs[common]]
[17:02:03.466]                 NAMES <- toupper(changed)
[17:02:03.466]                 args <- list()
[17:02:03.466]                 for (kk in seq_along(NAMES)) {
[17:02:03.466]                   name <- changed[[kk]]
[17:02:03.466]                   NAME <- NAMES[[kk]]
[17:02:03.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.466]                     next
[17:02:03.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.466]                 }
[17:02:03.466]                 NAMES <- toupper(added)
[17:02:03.466]                 for (kk in seq_along(NAMES)) {
[17:02:03.466]                   name <- added[[kk]]
[17:02:03.466]                   NAME <- NAMES[[kk]]
[17:02:03.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.466]                     next
[17:02:03.466]                   args[[name]] <- ""
[17:02:03.466]                 }
[17:02:03.466]                 NAMES <- toupper(removed)
[17:02:03.466]                 for (kk in seq_along(NAMES)) {
[17:02:03.466]                   name <- removed[[kk]]
[17:02:03.466]                   NAME <- NAMES[[kk]]
[17:02:03.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.466]                     next
[17:02:03.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.466]                 }
[17:02:03.466]                 if (length(args) > 0) 
[17:02:03.466]                   base::do.call(base::Sys.setenv, args = args)
[17:02:03.466]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:03.466]             }
[17:02:03.466]             else {
[17:02:03.466]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:03.466]             }
[17:02:03.466]             {
[17:02:03.466]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:03.466]                   0L) {
[17:02:03.466]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:03.466]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:03.466]                   base::options(opts)
[17:02:03.466]                 }
[17:02:03.466]                 {
[17:02:03.466]                   {
[17:02:03.466]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:03.466]                     NULL
[17:02:03.466]                   }
[17:02:03.466]                   options(future.plan = NULL)
[17:02:03.466]                   if (is.na(NA_character_)) 
[17:02:03.466]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.466]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:03.466]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:03.466]                     .init = FALSE)
[17:02:03.466]                 }
[17:02:03.466]             }
[17:02:03.466]         }
[17:02:03.466]     })
[17:02:03.466]     if (TRUE) {
[17:02:03.466]         base::sink(type = "output", split = FALSE)
[17:02:03.466]         if (TRUE) {
[17:02:03.466]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:03.466]         }
[17:02:03.466]         else {
[17:02:03.466]             ...future.result["stdout"] <- base::list(NULL)
[17:02:03.466]         }
[17:02:03.466]         base::close(...future.stdout)
[17:02:03.466]         ...future.stdout <- NULL
[17:02:03.466]     }
[17:02:03.466]     ...future.result$conditions <- ...future.conditions
[17:02:03.466]     ...future.result$finished <- base::Sys.time()
[17:02:03.466]     ...future.result
[17:02:03.466] }
[17:02:03.520] MultisessionFuture started
[17:02:03.520] result() for ClusterFuture ...
[17:02:03.521] receiveMessageFromWorker() for ClusterFuture ...
[17:02:03.521] - Validating connection of MultisessionFuture
[17:02:03.553] - received message: FutureResult
[17:02:03.553] - Received FutureResult
[17:02:03.554] - Erased future from FutureRegistry
[17:02:03.554] result() for ClusterFuture ...
[17:02:03.554] - result already collected: FutureResult
[17:02:03.554] result() for ClusterFuture ... done
[17:02:03.554] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:03.554] result() for ClusterFuture ... done
[17:02:03.554] result() for ClusterFuture ...
[17:02:03.554] - result already collected: FutureResult
[17:02:03.554] result() for ClusterFuture ... done
[17:02:03.554] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:03.558] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:02:03.562] getGlobalsAndPackages() ...
[17:02:03.562] Searching for globals...
[17:02:03.565] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:03.566] Searching for globals ... DONE
[17:02:03.566] Resolving globals: FALSE
[17:02:03.566] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:03.567] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:03.567] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:03.567] - packages: [1] ‘future’
[17:02:03.567] getGlobalsAndPackages() ... DONE
 2[17:02:03.571] getGlobalsAndPackages() ...
[17:02:03.571] Searching for globals...
[17:02:03.574] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:03.574] Searching for globals ... DONE
[17:02:03.574] Resolving globals: FALSE
[17:02:03.575] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:03.575] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:03.575] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:03.576] - packages: [1] ‘future’
[17:02:03.576] getGlobalsAndPackages() ... DONE
 3[17:02:03.576] getGlobalsAndPackages() ...
[17:02:03.576] Searching for globals...
[17:02:03.579] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:03.579] Searching for globals ... DONE
[17:02:03.580] Resolving globals: FALSE
[17:02:03.580] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:03.580] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:03.581] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:03.581] - packages: [1] ‘future’
[17:02:03.581] getGlobalsAndPackages() ... DONE
 4[17:02:03.581] getGlobalsAndPackages() ...
[17:02:03.581] Searching for globals...
[17:02:03.584] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:02:03.585] Searching for globals ... DONE
[17:02:03.585] Resolving globals: FALSE
[17:02:03.585] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:02:03.586] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:02:03.586] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:02:03.586] - packages: [1] ‘future’
[17:02:03.586] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:02:03.597] resolved() for ‘Future’ ...
[17:02:03.597] - state: ‘created’
[17:02:03.597] - run: TRUE
[17:02:03.597] - run() ...
[17:02:03.597] run() for ‘Future’ ...
[17:02:03.597] - state: ‘created’
[17:02:03.597] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:03.611] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:03.611] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:03.611]   - Field: ‘node’
[17:02:03.612]   - Field: ‘label’
[17:02:03.612]   - Field: ‘local’
[17:02:03.612]   - Field: ‘owner’
[17:02:03.612]   - Field: ‘envir’
[17:02:03.612]   - Field: ‘workers’
[17:02:03.612]   - Field: ‘packages’
[17:02:03.612]   - Field: ‘gc’
[17:02:03.612]   - Field: ‘conditions’
[17:02:03.612]   - Field: ‘persistent’
[17:02:03.612]   - Field: ‘expr’
[17:02:03.612]   - Field: ‘uuid’
[17:02:03.613]   - Field: ‘seed’
[17:02:03.613]   - Field: ‘version’
[17:02:03.613]   - Field: ‘result’
[17:02:03.613]   - Field: ‘asynchronous’
[17:02:03.613]   - Field: ‘calls’
[17:02:03.613]   - Field: ‘globals’
[17:02:03.613]   - Field: ‘stdout’
[17:02:03.613]   - Field: ‘earlySignal’
[17:02:03.613]   - Field: ‘lazy’
[17:02:03.613]   - Field: ‘state’
[17:02:03.613] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:03.614] - Launch lazy future ...
[17:02:03.614] Packages needed by the future expression (n = 1): ‘future’
[17:02:03.614] Packages needed by future strategies (n = 0): <none>
[17:02:03.614] {
[17:02:03.614]     {
[17:02:03.614]         {
[17:02:03.614]             ...future.startTime <- base::Sys.time()
[17:02:03.614]             {
[17:02:03.614]                 {
[17:02:03.614]                   {
[17:02:03.614]                     {
[17:02:03.614]                       {
[17:02:03.614]                         base::local({
[17:02:03.614]                           has_future <- base::requireNamespace("future", 
[17:02:03.614]                             quietly = TRUE)
[17:02:03.614]                           if (has_future) {
[17:02:03.614]                             ns <- base::getNamespace("future")
[17:02:03.614]                             version <- ns[[".package"]][["version"]]
[17:02:03.614]                             if (is.null(version)) 
[17:02:03.614]                               version <- utils::packageVersion("future")
[17:02:03.614]                           }
[17:02:03.614]                           else {
[17:02:03.614]                             version <- NULL
[17:02:03.614]                           }
[17:02:03.614]                           if (!has_future || version < "1.8.0") {
[17:02:03.614]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:03.614]                               "", base::R.version$version.string), 
[17:02:03.614]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:03.614]                                 base::R.version$platform, 8 * 
[17:02:03.614]                                   base::.Machine$sizeof.pointer), 
[17:02:03.614]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:03.614]                                 "release", "version")], collapse = " "), 
[17:02:03.614]                               hostname = base::Sys.info()[["nodename"]])
[17:02:03.614]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:03.614]                               info)
[17:02:03.614]                             info <- base::paste(info, collapse = "; ")
[17:02:03.614]                             if (!has_future) {
[17:02:03.614]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:03.614]                                 info)
[17:02:03.614]                             }
[17:02:03.614]                             else {
[17:02:03.614]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:03.614]                                 info, version)
[17:02:03.614]                             }
[17:02:03.614]                             base::stop(msg)
[17:02:03.614]                           }
[17:02:03.614]                         })
[17:02:03.614]                       }
[17:02:03.614]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:03.614]                       base::options(mc.cores = 1L)
[17:02:03.614]                     }
[17:02:03.614]                     base::local({
[17:02:03.614]                       for (pkg in "future") {
[17:02:03.614]                         base::loadNamespace(pkg)
[17:02:03.614]                         base::library(pkg, character.only = TRUE)
[17:02:03.614]                       }
[17:02:03.614]                     })
[17:02:03.614]                   }
[17:02:03.614]                   ...future.strategy.old <- future::plan("list")
[17:02:03.614]                   options(future.plan = NULL)
[17:02:03.614]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.614]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:03.614]                 }
[17:02:03.614]                 ...future.workdir <- getwd()
[17:02:03.614]             }
[17:02:03.614]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:03.614]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:03.614]         }
[17:02:03.614]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:03.614]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:03.614]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:03.614]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:03.614]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:03.614]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:03.614]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:03.614]             base::names(...future.oldOptions))
[17:02:03.614]     }
[17:02:03.614]     if (FALSE) {
[17:02:03.614]     }
[17:02:03.614]     else {
[17:02:03.614]         if (TRUE) {
[17:02:03.614]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:03.614]                 open = "w")
[17:02:03.614]         }
[17:02:03.614]         else {
[17:02:03.614]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:03.614]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:03.614]         }
[17:02:03.614]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:03.614]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:03.614]             base::sink(type = "output", split = FALSE)
[17:02:03.614]             base::close(...future.stdout)
[17:02:03.614]         }, add = TRUE)
[17:02:03.614]     }
[17:02:03.614]     ...future.frame <- base::sys.nframe()
[17:02:03.614]     ...future.conditions <- base::list()
[17:02:03.614]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:03.614]     if (FALSE) {
[17:02:03.614]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:03.614]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:03.614]     }
[17:02:03.614]     ...future.result <- base::tryCatch({
[17:02:03.614]         base::withCallingHandlers({
[17:02:03.614]             ...future.value <- base::withVisible(base::local({
[17:02:03.614]                 ...future.makeSendCondition <- base::local({
[17:02:03.614]                   sendCondition <- NULL
[17:02:03.614]                   function(frame = 1L) {
[17:02:03.614]                     if (is.function(sendCondition)) 
[17:02:03.614]                       return(sendCondition)
[17:02:03.614]                     ns <- getNamespace("parallel")
[17:02:03.614]                     if (exists("sendData", mode = "function", 
[17:02:03.614]                       envir = ns)) {
[17:02:03.614]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:03.614]                         envir = ns)
[17:02:03.614]                       envir <- sys.frame(frame)
[17:02:03.614]                       master <- NULL
[17:02:03.614]                       while (!identical(envir, .GlobalEnv) && 
[17:02:03.614]                         !identical(envir, emptyenv())) {
[17:02:03.614]                         if (exists("master", mode = "list", envir = envir, 
[17:02:03.614]                           inherits = FALSE)) {
[17:02:03.614]                           master <- get("master", mode = "list", 
[17:02:03.614]                             envir = envir, inherits = FALSE)
[17:02:03.614]                           if (inherits(master, c("SOCKnode", 
[17:02:03.614]                             "SOCK0node"))) {
[17:02:03.614]                             sendCondition <<- function(cond) {
[17:02:03.614]                               data <- list(type = "VALUE", value = cond, 
[17:02:03.614]                                 success = TRUE)
[17:02:03.614]                               parallel_sendData(master, data)
[17:02:03.614]                             }
[17:02:03.614]                             return(sendCondition)
[17:02:03.614]                           }
[17:02:03.614]                         }
[17:02:03.614]                         frame <- frame + 1L
[17:02:03.614]                         envir <- sys.frame(frame)
[17:02:03.614]                       }
[17:02:03.614]                     }
[17:02:03.614]                     sendCondition <<- function(cond) NULL
[17:02:03.614]                   }
[17:02:03.614]                 })
[17:02:03.614]                 withCallingHandlers({
[17:02:03.614]                   {
[17:02:03.614]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:03.614]                       ii, n), appendLF = FALSE)
[17:02:03.614]                     fit <- mandelbrot(C)
[17:02:03.614]                     delay(fit)
[17:02:03.614]                     message(" done")
[17:02:03.614]                     fit
[17:02:03.614]                   }
[17:02:03.614]                 }, immediateCondition = function(cond) {
[17:02:03.614]                   sendCondition <- ...future.makeSendCondition()
[17:02:03.614]                   sendCondition(cond)
[17:02:03.614]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.614]                   {
[17:02:03.614]                     inherits <- base::inherits
[17:02:03.614]                     invokeRestart <- base::invokeRestart
[17:02:03.614]                     is.null <- base::is.null
[17:02:03.614]                     muffled <- FALSE
[17:02:03.614]                     if (inherits(cond, "message")) {
[17:02:03.614]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:03.614]                       if (muffled) 
[17:02:03.614]                         invokeRestart("muffleMessage")
[17:02:03.614]                     }
[17:02:03.614]                     else if (inherits(cond, "warning")) {
[17:02:03.614]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:03.614]                       if (muffled) 
[17:02:03.614]                         invokeRestart("muffleWarning")
[17:02:03.614]                     }
[17:02:03.614]                     else if (inherits(cond, "condition")) {
[17:02:03.614]                       if (!is.null(pattern)) {
[17:02:03.614]                         computeRestarts <- base::computeRestarts
[17:02:03.614]                         grepl <- base::grepl
[17:02:03.614]                         restarts <- computeRestarts(cond)
[17:02:03.614]                         for (restart in restarts) {
[17:02:03.614]                           name <- restart$name
[17:02:03.614]                           if (is.null(name)) 
[17:02:03.614]                             next
[17:02:03.614]                           if (!grepl(pattern, name)) 
[17:02:03.614]                             next
[17:02:03.614]                           invokeRestart(restart)
[17:02:03.614]                           muffled <- TRUE
[17:02:03.614]                           break
[17:02:03.614]                         }
[17:02:03.614]                       }
[17:02:03.614]                     }
[17:02:03.614]                     invisible(muffled)
[17:02:03.614]                   }
[17:02:03.614]                   muffleCondition(cond)
[17:02:03.614]                 })
[17:02:03.614]             }))
[17:02:03.614]             future::FutureResult(value = ...future.value$value, 
[17:02:03.614]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.614]                   ...future.rng), globalenv = if (FALSE) 
[17:02:03.614]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:03.614]                     ...future.globalenv.names))
[17:02:03.614]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:03.614]         }, condition = base::local({
[17:02:03.614]             c <- base::c
[17:02:03.614]             inherits <- base::inherits
[17:02:03.614]             invokeRestart <- base::invokeRestart
[17:02:03.614]             length <- base::length
[17:02:03.614]             list <- base::list
[17:02:03.614]             seq.int <- base::seq.int
[17:02:03.614]             signalCondition <- base::signalCondition
[17:02:03.614]             sys.calls <- base::sys.calls
[17:02:03.614]             `[[` <- base::`[[`
[17:02:03.614]             `+` <- base::`+`
[17:02:03.614]             `<<-` <- base::`<<-`
[17:02:03.614]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:03.614]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:03.614]                   3L)]
[17:02:03.614]             }
[17:02:03.614]             function(cond) {
[17:02:03.614]                 is_error <- inherits(cond, "error")
[17:02:03.614]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:03.614]                   NULL)
[17:02:03.614]                 if (is_error) {
[17:02:03.614]                   sessionInformation <- function() {
[17:02:03.614]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:03.614]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:03.614]                       search = base::search(), system = base::Sys.info())
[17:02:03.614]                   }
[17:02:03.614]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.614]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:03.614]                     cond$call), session = sessionInformation(), 
[17:02:03.614]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:03.614]                   signalCondition(cond)
[17:02:03.614]                 }
[17:02:03.614]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:03.614]                 "immediateCondition"))) {
[17:02:03.614]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:03.614]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.614]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:03.614]                   if (TRUE && !signal) {
[17:02:03.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.614]                     {
[17:02:03.614]                       inherits <- base::inherits
[17:02:03.614]                       invokeRestart <- base::invokeRestart
[17:02:03.614]                       is.null <- base::is.null
[17:02:03.614]                       muffled <- FALSE
[17:02:03.614]                       if (inherits(cond, "message")) {
[17:02:03.614]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.614]                         if (muffled) 
[17:02:03.614]                           invokeRestart("muffleMessage")
[17:02:03.614]                       }
[17:02:03.614]                       else if (inherits(cond, "warning")) {
[17:02:03.614]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.614]                         if (muffled) 
[17:02:03.614]                           invokeRestart("muffleWarning")
[17:02:03.614]                       }
[17:02:03.614]                       else if (inherits(cond, "condition")) {
[17:02:03.614]                         if (!is.null(pattern)) {
[17:02:03.614]                           computeRestarts <- base::computeRestarts
[17:02:03.614]                           grepl <- base::grepl
[17:02:03.614]                           restarts <- computeRestarts(cond)
[17:02:03.614]                           for (restart in restarts) {
[17:02:03.614]                             name <- restart$name
[17:02:03.614]                             if (is.null(name)) 
[17:02:03.614]                               next
[17:02:03.614]                             if (!grepl(pattern, name)) 
[17:02:03.614]                               next
[17:02:03.614]                             invokeRestart(restart)
[17:02:03.614]                             muffled <- TRUE
[17:02:03.614]                             break
[17:02:03.614]                           }
[17:02:03.614]                         }
[17:02:03.614]                       }
[17:02:03.614]                       invisible(muffled)
[17:02:03.614]                     }
[17:02:03.614]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.614]                   }
[17:02:03.614]                 }
[17:02:03.614]                 else {
[17:02:03.614]                   if (TRUE) {
[17:02:03.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.614]                     {
[17:02:03.614]                       inherits <- base::inherits
[17:02:03.614]                       invokeRestart <- base::invokeRestart
[17:02:03.614]                       is.null <- base::is.null
[17:02:03.614]                       muffled <- FALSE
[17:02:03.614]                       if (inherits(cond, "message")) {
[17:02:03.614]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.614]                         if (muffled) 
[17:02:03.614]                           invokeRestart("muffleMessage")
[17:02:03.614]                       }
[17:02:03.614]                       else if (inherits(cond, "warning")) {
[17:02:03.614]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.614]                         if (muffled) 
[17:02:03.614]                           invokeRestart("muffleWarning")
[17:02:03.614]                       }
[17:02:03.614]                       else if (inherits(cond, "condition")) {
[17:02:03.614]                         if (!is.null(pattern)) {
[17:02:03.614]                           computeRestarts <- base::computeRestarts
[17:02:03.614]                           grepl <- base::grepl
[17:02:03.614]                           restarts <- computeRestarts(cond)
[17:02:03.614]                           for (restart in restarts) {
[17:02:03.614]                             name <- restart$name
[17:02:03.614]                             if (is.null(name)) 
[17:02:03.614]                               next
[17:02:03.614]                             if (!grepl(pattern, name)) 
[17:02:03.614]                               next
[17:02:03.614]                             invokeRestart(restart)
[17:02:03.614]                             muffled <- TRUE
[17:02:03.614]                             break
[17:02:03.614]                           }
[17:02:03.614]                         }
[17:02:03.614]                       }
[17:02:03.614]                       invisible(muffled)
[17:02:03.614]                     }
[17:02:03.614]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.614]                   }
[17:02:03.614]                 }
[17:02:03.614]             }
[17:02:03.614]         }))
[17:02:03.614]     }, error = function(ex) {
[17:02:03.614]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:03.614]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.614]                 ...future.rng), started = ...future.startTime, 
[17:02:03.614]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:03.614]             version = "1.8"), class = "FutureResult")
[17:02:03.614]     }, finally = {
[17:02:03.614]         if (!identical(...future.workdir, getwd())) 
[17:02:03.614]             setwd(...future.workdir)
[17:02:03.614]         {
[17:02:03.614]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:03.614]                 ...future.oldOptions$nwarnings <- NULL
[17:02:03.614]             }
[17:02:03.614]             base::options(...future.oldOptions)
[17:02:03.614]             if (.Platform$OS.type == "windows") {
[17:02:03.614]                 old_names <- names(...future.oldEnvVars)
[17:02:03.614]                 envs <- base::Sys.getenv()
[17:02:03.614]                 names <- names(envs)
[17:02:03.614]                 common <- intersect(names, old_names)
[17:02:03.614]                 added <- setdiff(names, old_names)
[17:02:03.614]                 removed <- setdiff(old_names, names)
[17:02:03.614]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:03.614]                   envs[common]]
[17:02:03.614]                 NAMES <- toupper(changed)
[17:02:03.614]                 args <- list()
[17:02:03.614]                 for (kk in seq_along(NAMES)) {
[17:02:03.614]                   name <- changed[[kk]]
[17:02:03.614]                   NAME <- NAMES[[kk]]
[17:02:03.614]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.614]                     next
[17:02:03.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.614]                 }
[17:02:03.614]                 NAMES <- toupper(added)
[17:02:03.614]                 for (kk in seq_along(NAMES)) {
[17:02:03.614]                   name <- added[[kk]]
[17:02:03.614]                   NAME <- NAMES[[kk]]
[17:02:03.614]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.614]                     next
[17:02:03.614]                   args[[name]] <- ""
[17:02:03.614]                 }
[17:02:03.614]                 NAMES <- toupper(removed)
[17:02:03.614]                 for (kk in seq_along(NAMES)) {
[17:02:03.614]                   name <- removed[[kk]]
[17:02:03.614]                   NAME <- NAMES[[kk]]
[17:02:03.614]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.614]                     next
[17:02:03.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.614]                 }
[17:02:03.614]                 if (length(args) > 0) 
[17:02:03.614]                   base::do.call(base::Sys.setenv, args = args)
[17:02:03.614]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:03.614]             }
[17:02:03.614]             else {
[17:02:03.614]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:03.614]             }
[17:02:03.614]             {
[17:02:03.614]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:03.614]                   0L) {
[17:02:03.614]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:03.614]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:03.614]                   base::options(opts)
[17:02:03.614]                 }
[17:02:03.614]                 {
[17:02:03.614]                   {
[17:02:03.614]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:03.614]                     NULL
[17:02:03.614]                   }
[17:02:03.614]                   options(future.plan = NULL)
[17:02:03.614]                   if (is.na(NA_character_)) 
[17:02:03.614]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.614]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:03.614]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:03.614]                     .init = FALSE)
[17:02:03.614]                 }
[17:02:03.614]             }
[17:02:03.614]         }
[17:02:03.614]     })
[17:02:03.614]     if (TRUE) {
[17:02:03.614]         base::sink(type = "output", split = FALSE)
[17:02:03.614]         if (TRUE) {
[17:02:03.614]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:03.614]         }
[17:02:03.614]         else {
[17:02:03.614]             ...future.result["stdout"] <- base::list(NULL)
[17:02:03.614]         }
[17:02:03.614]         base::close(...future.stdout)
[17:02:03.614]         ...future.stdout <- NULL
[17:02:03.614]     }
[17:02:03.614]     ...future.result$conditions <- ...future.conditions
[17:02:03.614]     ...future.result$finished <- base::Sys.time()
[17:02:03.614]     ...future.result
[17:02:03.614] }
[17:02:03.617] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[17:02:03.618] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:02:03.618] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:02:03.618] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[17:02:03.618] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[17:02:03.618] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[17:02:03.660] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[17:02:03.660] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[17:02:03.704] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[17:02:03.704] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[17:02:03.705] MultisessionFuture started
[17:02:03.705] - Launch lazy future ... done
[17:02:03.705] run() for ‘MultisessionFuture’ ... done
[17:02:03.705] - run() ... done
[17:02:03.705] - resolved() ...
[17:02:03.716] - resolved: FALSE
[17:02:03.716] - resolved() ... done
[17:02:03.716] resolved() for ‘MultisessionFuture’ ... done
[17:02:03.717] resolved() for ‘Future’ ...
[17:02:03.717] - state: ‘created’
[17:02:03.717] - run: TRUE
[17:02:03.717] - run() ...
[17:02:03.717] run() for ‘Future’ ...
[17:02:03.717] - state: ‘created’
[17:02:03.717] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:03.731] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:03.731] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:03.732]   - Field: ‘node’
[17:02:03.732]   - Field: ‘label’
[17:02:03.732]   - Field: ‘local’
[17:02:03.732]   - Field: ‘owner’
[17:02:03.732]   - Field: ‘envir’
[17:02:03.732]   - Field: ‘workers’
[17:02:03.732]   - Field: ‘packages’
[17:02:03.732]   - Field: ‘gc’
[17:02:03.732]   - Field: ‘conditions’
[17:02:03.732]   - Field: ‘persistent’
[17:02:03.732]   - Field: ‘expr’
[17:02:03.733]   - Field: ‘uuid’
[17:02:03.733]   - Field: ‘seed’
[17:02:03.733]   - Field: ‘version’
[17:02:03.733]   - Field: ‘result’
[17:02:03.733]   - Field: ‘asynchronous’
[17:02:03.733]   - Field: ‘calls’
[17:02:03.733]   - Field: ‘globals’
[17:02:03.733]   - Field: ‘stdout’
[17:02:03.733]   - Field: ‘earlySignal’
[17:02:03.733]   - Field: ‘lazy’
[17:02:03.733]   - Field: ‘state’
[17:02:03.733] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:03.734] - Launch lazy future ...
[17:02:03.734] Packages needed by the future expression (n = 1): ‘future’
[17:02:03.734] Packages needed by future strategies (n = 0): <none>
[17:02:03.735] {
[17:02:03.735]     {
[17:02:03.735]         {
[17:02:03.735]             ...future.startTime <- base::Sys.time()
[17:02:03.735]             {
[17:02:03.735]                 {
[17:02:03.735]                   {
[17:02:03.735]                     {
[17:02:03.735]                       {
[17:02:03.735]                         base::local({
[17:02:03.735]                           has_future <- base::requireNamespace("future", 
[17:02:03.735]                             quietly = TRUE)
[17:02:03.735]                           if (has_future) {
[17:02:03.735]                             ns <- base::getNamespace("future")
[17:02:03.735]                             version <- ns[[".package"]][["version"]]
[17:02:03.735]                             if (is.null(version)) 
[17:02:03.735]                               version <- utils::packageVersion("future")
[17:02:03.735]                           }
[17:02:03.735]                           else {
[17:02:03.735]                             version <- NULL
[17:02:03.735]                           }
[17:02:03.735]                           if (!has_future || version < "1.8.0") {
[17:02:03.735]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:03.735]                               "", base::R.version$version.string), 
[17:02:03.735]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:03.735]                                 base::R.version$platform, 8 * 
[17:02:03.735]                                   base::.Machine$sizeof.pointer), 
[17:02:03.735]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:03.735]                                 "release", "version")], collapse = " "), 
[17:02:03.735]                               hostname = base::Sys.info()[["nodename"]])
[17:02:03.735]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:03.735]                               info)
[17:02:03.735]                             info <- base::paste(info, collapse = "; ")
[17:02:03.735]                             if (!has_future) {
[17:02:03.735]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:03.735]                                 info)
[17:02:03.735]                             }
[17:02:03.735]                             else {
[17:02:03.735]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:03.735]                                 info, version)
[17:02:03.735]                             }
[17:02:03.735]                             base::stop(msg)
[17:02:03.735]                           }
[17:02:03.735]                         })
[17:02:03.735]                       }
[17:02:03.735]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:03.735]                       base::options(mc.cores = 1L)
[17:02:03.735]                     }
[17:02:03.735]                     base::local({
[17:02:03.735]                       for (pkg in "future") {
[17:02:03.735]                         base::loadNamespace(pkg)
[17:02:03.735]                         base::library(pkg, character.only = TRUE)
[17:02:03.735]                       }
[17:02:03.735]                     })
[17:02:03.735]                   }
[17:02:03.735]                   ...future.strategy.old <- future::plan("list")
[17:02:03.735]                   options(future.plan = NULL)
[17:02:03.735]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.735]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:03.735]                 }
[17:02:03.735]                 ...future.workdir <- getwd()
[17:02:03.735]             }
[17:02:03.735]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:03.735]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:03.735]         }
[17:02:03.735]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:03.735]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:03.735]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:03.735]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:03.735]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:03.735]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:03.735]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:03.735]             base::names(...future.oldOptions))
[17:02:03.735]     }
[17:02:03.735]     if (FALSE) {
[17:02:03.735]     }
[17:02:03.735]     else {
[17:02:03.735]         if (TRUE) {
[17:02:03.735]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:03.735]                 open = "w")
[17:02:03.735]         }
[17:02:03.735]         else {
[17:02:03.735]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:03.735]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:03.735]         }
[17:02:03.735]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:03.735]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:03.735]             base::sink(type = "output", split = FALSE)
[17:02:03.735]             base::close(...future.stdout)
[17:02:03.735]         }, add = TRUE)
[17:02:03.735]     }
[17:02:03.735]     ...future.frame <- base::sys.nframe()
[17:02:03.735]     ...future.conditions <- base::list()
[17:02:03.735]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:03.735]     if (FALSE) {
[17:02:03.735]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:03.735]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:03.735]     }
[17:02:03.735]     ...future.result <- base::tryCatch({
[17:02:03.735]         base::withCallingHandlers({
[17:02:03.735]             ...future.value <- base::withVisible(base::local({
[17:02:03.735]                 ...future.makeSendCondition <- base::local({
[17:02:03.735]                   sendCondition <- NULL
[17:02:03.735]                   function(frame = 1L) {
[17:02:03.735]                     if (is.function(sendCondition)) 
[17:02:03.735]                       return(sendCondition)
[17:02:03.735]                     ns <- getNamespace("parallel")
[17:02:03.735]                     if (exists("sendData", mode = "function", 
[17:02:03.735]                       envir = ns)) {
[17:02:03.735]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:03.735]                         envir = ns)
[17:02:03.735]                       envir <- sys.frame(frame)
[17:02:03.735]                       master <- NULL
[17:02:03.735]                       while (!identical(envir, .GlobalEnv) && 
[17:02:03.735]                         !identical(envir, emptyenv())) {
[17:02:03.735]                         if (exists("master", mode = "list", envir = envir, 
[17:02:03.735]                           inherits = FALSE)) {
[17:02:03.735]                           master <- get("master", mode = "list", 
[17:02:03.735]                             envir = envir, inherits = FALSE)
[17:02:03.735]                           if (inherits(master, c("SOCKnode", 
[17:02:03.735]                             "SOCK0node"))) {
[17:02:03.735]                             sendCondition <<- function(cond) {
[17:02:03.735]                               data <- list(type = "VALUE", value = cond, 
[17:02:03.735]                                 success = TRUE)
[17:02:03.735]                               parallel_sendData(master, data)
[17:02:03.735]                             }
[17:02:03.735]                             return(sendCondition)
[17:02:03.735]                           }
[17:02:03.735]                         }
[17:02:03.735]                         frame <- frame + 1L
[17:02:03.735]                         envir <- sys.frame(frame)
[17:02:03.735]                       }
[17:02:03.735]                     }
[17:02:03.735]                     sendCondition <<- function(cond) NULL
[17:02:03.735]                   }
[17:02:03.735]                 })
[17:02:03.735]                 withCallingHandlers({
[17:02:03.735]                   {
[17:02:03.735]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:03.735]                       ii, n), appendLF = FALSE)
[17:02:03.735]                     fit <- mandelbrot(C)
[17:02:03.735]                     delay(fit)
[17:02:03.735]                     message(" done")
[17:02:03.735]                     fit
[17:02:03.735]                   }
[17:02:03.735]                 }, immediateCondition = function(cond) {
[17:02:03.735]                   sendCondition <- ...future.makeSendCondition()
[17:02:03.735]                   sendCondition(cond)
[17:02:03.735]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.735]                   {
[17:02:03.735]                     inherits <- base::inherits
[17:02:03.735]                     invokeRestart <- base::invokeRestart
[17:02:03.735]                     is.null <- base::is.null
[17:02:03.735]                     muffled <- FALSE
[17:02:03.735]                     if (inherits(cond, "message")) {
[17:02:03.735]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:03.735]                       if (muffled) 
[17:02:03.735]                         invokeRestart("muffleMessage")
[17:02:03.735]                     }
[17:02:03.735]                     else if (inherits(cond, "warning")) {
[17:02:03.735]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:03.735]                       if (muffled) 
[17:02:03.735]                         invokeRestart("muffleWarning")
[17:02:03.735]                     }
[17:02:03.735]                     else if (inherits(cond, "condition")) {
[17:02:03.735]                       if (!is.null(pattern)) {
[17:02:03.735]                         computeRestarts <- base::computeRestarts
[17:02:03.735]                         grepl <- base::grepl
[17:02:03.735]                         restarts <- computeRestarts(cond)
[17:02:03.735]                         for (restart in restarts) {
[17:02:03.735]                           name <- restart$name
[17:02:03.735]                           if (is.null(name)) 
[17:02:03.735]                             next
[17:02:03.735]                           if (!grepl(pattern, name)) 
[17:02:03.735]                             next
[17:02:03.735]                           invokeRestart(restart)
[17:02:03.735]                           muffled <- TRUE
[17:02:03.735]                           break
[17:02:03.735]                         }
[17:02:03.735]                       }
[17:02:03.735]                     }
[17:02:03.735]                     invisible(muffled)
[17:02:03.735]                   }
[17:02:03.735]                   muffleCondition(cond)
[17:02:03.735]                 })
[17:02:03.735]             }))
[17:02:03.735]             future::FutureResult(value = ...future.value$value, 
[17:02:03.735]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.735]                   ...future.rng), globalenv = if (FALSE) 
[17:02:03.735]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:03.735]                     ...future.globalenv.names))
[17:02:03.735]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:03.735]         }, condition = base::local({
[17:02:03.735]             c <- base::c
[17:02:03.735]             inherits <- base::inherits
[17:02:03.735]             invokeRestart <- base::invokeRestart
[17:02:03.735]             length <- base::length
[17:02:03.735]             list <- base::list
[17:02:03.735]             seq.int <- base::seq.int
[17:02:03.735]             signalCondition <- base::signalCondition
[17:02:03.735]             sys.calls <- base::sys.calls
[17:02:03.735]             `[[` <- base::`[[`
[17:02:03.735]             `+` <- base::`+`
[17:02:03.735]             `<<-` <- base::`<<-`
[17:02:03.735]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:03.735]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:03.735]                   3L)]
[17:02:03.735]             }
[17:02:03.735]             function(cond) {
[17:02:03.735]                 is_error <- inherits(cond, "error")
[17:02:03.735]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:03.735]                   NULL)
[17:02:03.735]                 if (is_error) {
[17:02:03.735]                   sessionInformation <- function() {
[17:02:03.735]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:03.735]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:03.735]                       search = base::search(), system = base::Sys.info())
[17:02:03.735]                   }
[17:02:03.735]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.735]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:03.735]                     cond$call), session = sessionInformation(), 
[17:02:03.735]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:03.735]                   signalCondition(cond)
[17:02:03.735]                 }
[17:02:03.735]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:03.735]                 "immediateCondition"))) {
[17:02:03.735]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:03.735]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.735]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:03.735]                   if (TRUE && !signal) {
[17:02:03.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.735]                     {
[17:02:03.735]                       inherits <- base::inherits
[17:02:03.735]                       invokeRestart <- base::invokeRestart
[17:02:03.735]                       is.null <- base::is.null
[17:02:03.735]                       muffled <- FALSE
[17:02:03.735]                       if (inherits(cond, "message")) {
[17:02:03.735]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.735]                         if (muffled) 
[17:02:03.735]                           invokeRestart("muffleMessage")
[17:02:03.735]                       }
[17:02:03.735]                       else if (inherits(cond, "warning")) {
[17:02:03.735]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.735]                         if (muffled) 
[17:02:03.735]                           invokeRestart("muffleWarning")
[17:02:03.735]                       }
[17:02:03.735]                       else if (inherits(cond, "condition")) {
[17:02:03.735]                         if (!is.null(pattern)) {
[17:02:03.735]                           computeRestarts <- base::computeRestarts
[17:02:03.735]                           grepl <- base::grepl
[17:02:03.735]                           restarts <- computeRestarts(cond)
[17:02:03.735]                           for (restart in restarts) {
[17:02:03.735]                             name <- restart$name
[17:02:03.735]                             if (is.null(name)) 
[17:02:03.735]                               next
[17:02:03.735]                             if (!grepl(pattern, name)) 
[17:02:03.735]                               next
[17:02:03.735]                             invokeRestart(restart)
[17:02:03.735]                             muffled <- TRUE
[17:02:03.735]                             break
[17:02:03.735]                           }
[17:02:03.735]                         }
[17:02:03.735]                       }
[17:02:03.735]                       invisible(muffled)
[17:02:03.735]                     }
[17:02:03.735]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.735]                   }
[17:02:03.735]                 }
[17:02:03.735]                 else {
[17:02:03.735]                   if (TRUE) {
[17:02:03.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.735]                     {
[17:02:03.735]                       inherits <- base::inherits
[17:02:03.735]                       invokeRestart <- base::invokeRestart
[17:02:03.735]                       is.null <- base::is.null
[17:02:03.735]                       muffled <- FALSE
[17:02:03.735]                       if (inherits(cond, "message")) {
[17:02:03.735]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.735]                         if (muffled) 
[17:02:03.735]                           invokeRestart("muffleMessage")
[17:02:03.735]                       }
[17:02:03.735]                       else if (inherits(cond, "warning")) {
[17:02:03.735]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.735]                         if (muffled) 
[17:02:03.735]                           invokeRestart("muffleWarning")
[17:02:03.735]                       }
[17:02:03.735]                       else if (inherits(cond, "condition")) {
[17:02:03.735]                         if (!is.null(pattern)) {
[17:02:03.735]                           computeRestarts <- base::computeRestarts
[17:02:03.735]                           grepl <- base::grepl
[17:02:03.735]                           restarts <- computeRestarts(cond)
[17:02:03.735]                           for (restart in restarts) {
[17:02:03.735]                             name <- restart$name
[17:02:03.735]                             if (is.null(name)) 
[17:02:03.735]                               next
[17:02:03.735]                             if (!grepl(pattern, name)) 
[17:02:03.735]                               next
[17:02:03.735]                             invokeRestart(restart)
[17:02:03.735]                             muffled <- TRUE
[17:02:03.735]                             break
[17:02:03.735]                           }
[17:02:03.735]                         }
[17:02:03.735]                       }
[17:02:03.735]                       invisible(muffled)
[17:02:03.735]                     }
[17:02:03.735]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.735]                   }
[17:02:03.735]                 }
[17:02:03.735]             }
[17:02:03.735]         }))
[17:02:03.735]     }, error = function(ex) {
[17:02:03.735]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:03.735]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.735]                 ...future.rng), started = ...future.startTime, 
[17:02:03.735]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:03.735]             version = "1.8"), class = "FutureResult")
[17:02:03.735]     }, finally = {
[17:02:03.735]         if (!identical(...future.workdir, getwd())) 
[17:02:03.735]             setwd(...future.workdir)
[17:02:03.735]         {
[17:02:03.735]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:03.735]                 ...future.oldOptions$nwarnings <- NULL
[17:02:03.735]             }
[17:02:03.735]             base::options(...future.oldOptions)
[17:02:03.735]             if (.Platform$OS.type == "windows") {
[17:02:03.735]                 old_names <- names(...future.oldEnvVars)
[17:02:03.735]                 envs <- base::Sys.getenv()
[17:02:03.735]                 names <- names(envs)
[17:02:03.735]                 common <- intersect(names, old_names)
[17:02:03.735]                 added <- setdiff(names, old_names)
[17:02:03.735]                 removed <- setdiff(old_names, names)
[17:02:03.735]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:03.735]                   envs[common]]
[17:02:03.735]                 NAMES <- toupper(changed)
[17:02:03.735]                 args <- list()
[17:02:03.735]                 for (kk in seq_along(NAMES)) {
[17:02:03.735]                   name <- changed[[kk]]
[17:02:03.735]                   NAME <- NAMES[[kk]]
[17:02:03.735]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.735]                     next
[17:02:03.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.735]                 }
[17:02:03.735]                 NAMES <- toupper(added)
[17:02:03.735]                 for (kk in seq_along(NAMES)) {
[17:02:03.735]                   name <- added[[kk]]
[17:02:03.735]                   NAME <- NAMES[[kk]]
[17:02:03.735]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.735]                     next
[17:02:03.735]                   args[[name]] <- ""
[17:02:03.735]                 }
[17:02:03.735]                 NAMES <- toupper(removed)
[17:02:03.735]                 for (kk in seq_along(NAMES)) {
[17:02:03.735]                   name <- removed[[kk]]
[17:02:03.735]                   NAME <- NAMES[[kk]]
[17:02:03.735]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.735]                     next
[17:02:03.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.735]                 }
[17:02:03.735]                 if (length(args) > 0) 
[17:02:03.735]                   base::do.call(base::Sys.setenv, args = args)
[17:02:03.735]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:03.735]             }
[17:02:03.735]             else {
[17:02:03.735]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:03.735]             }
[17:02:03.735]             {
[17:02:03.735]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:03.735]                   0L) {
[17:02:03.735]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:03.735]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:03.735]                   base::options(opts)
[17:02:03.735]                 }
[17:02:03.735]                 {
[17:02:03.735]                   {
[17:02:03.735]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:03.735]                     NULL
[17:02:03.735]                   }
[17:02:03.735]                   options(future.plan = NULL)
[17:02:03.735]                   if (is.na(NA_character_)) 
[17:02:03.735]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.735]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:03.735]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:03.735]                     .init = FALSE)
[17:02:03.735]                 }
[17:02:03.735]             }
[17:02:03.735]         }
[17:02:03.735]     })
[17:02:03.735]     if (TRUE) {
[17:02:03.735]         base::sink(type = "output", split = FALSE)
[17:02:03.735]         if (TRUE) {
[17:02:03.735]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:03.735]         }
[17:02:03.735]         else {
[17:02:03.735]             ...future.result["stdout"] <- base::list(NULL)
[17:02:03.735]         }
[17:02:03.735]         base::close(...future.stdout)
[17:02:03.735]         ...future.stdout <- NULL
[17:02:03.735]     }
[17:02:03.735]     ...future.result$conditions <- ...future.conditions
[17:02:03.735]     ...future.result$finished <- base::Sys.time()
[17:02:03.735]     ...future.result
[17:02:03.735] }
[17:02:03.788] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[17:02:03.788] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:02:03.788] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:02:03.788] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[17:02:03.789] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[17:02:03.789] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[17:02:03.832] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[17:02:03.832] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[17:02:03.876] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[17:02:03.876] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[17:02:03.877] MultisessionFuture started
[17:02:03.877] - Launch lazy future ... done
[17:02:03.877] run() for ‘MultisessionFuture’ ... done
[17:02:03.877] - run() ... done
[17:02:03.877] - resolved() ...
[17:02:03.888] - resolved: FALSE
[17:02:03.888] - resolved() ... done
[17:02:03.888] resolved() for ‘MultisessionFuture’ ... done
[17:02:03.888] resolved() for ‘Future’ ...
[17:02:03.888] - state: ‘created’
[17:02:03.889] - run: TRUE
[17:02:03.889] - run() ...
[17:02:03.889] run() for ‘Future’ ...
[17:02:03.889] - state: ‘created’
[17:02:03.889] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:03.903] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:03.903] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:03.904]   - Field: ‘node’
[17:02:03.904]   - Field: ‘label’
[17:02:03.904]   - Field: ‘local’
[17:02:03.904]   - Field: ‘owner’
[17:02:03.904]   - Field: ‘envir’
[17:02:03.904]   - Field: ‘workers’
[17:02:03.904]   - Field: ‘packages’
[17:02:03.904]   - Field: ‘gc’
[17:02:03.904]   - Field: ‘conditions’
[17:02:03.904]   - Field: ‘persistent’
[17:02:03.904]   - Field: ‘expr’
[17:02:03.904]   - Field: ‘uuid’
[17:02:03.905]   - Field: ‘seed’
[17:02:03.905]   - Field: ‘version’
[17:02:03.905]   - Field: ‘result’
[17:02:03.905]   - Field: ‘asynchronous’
[17:02:03.905]   - Field: ‘calls’
[17:02:03.905]   - Field: ‘globals’
[17:02:03.905]   - Field: ‘stdout’
[17:02:03.905]   - Field: ‘earlySignal’
[17:02:03.905]   - Field: ‘lazy’
[17:02:03.905]   - Field: ‘state’
[17:02:03.905] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:03.906] - Launch lazy future ...
[17:02:03.906] Packages needed by the future expression (n = 1): ‘future’
[17:02:03.906] Packages needed by future strategies (n = 0): <none>
[17:02:03.906] {
[17:02:03.906]     {
[17:02:03.906]         {
[17:02:03.906]             ...future.startTime <- base::Sys.time()
[17:02:03.906]             {
[17:02:03.906]                 {
[17:02:03.906]                   {
[17:02:03.906]                     {
[17:02:03.906]                       {
[17:02:03.906]                         base::local({
[17:02:03.906]                           has_future <- base::requireNamespace("future", 
[17:02:03.906]                             quietly = TRUE)
[17:02:03.906]                           if (has_future) {
[17:02:03.906]                             ns <- base::getNamespace("future")
[17:02:03.906]                             version <- ns[[".package"]][["version"]]
[17:02:03.906]                             if (is.null(version)) 
[17:02:03.906]                               version <- utils::packageVersion("future")
[17:02:03.906]                           }
[17:02:03.906]                           else {
[17:02:03.906]                             version <- NULL
[17:02:03.906]                           }
[17:02:03.906]                           if (!has_future || version < "1.8.0") {
[17:02:03.906]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:03.906]                               "", base::R.version$version.string), 
[17:02:03.906]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:03.906]                                 base::R.version$platform, 8 * 
[17:02:03.906]                                   base::.Machine$sizeof.pointer), 
[17:02:03.906]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:03.906]                                 "release", "version")], collapse = " "), 
[17:02:03.906]                               hostname = base::Sys.info()[["nodename"]])
[17:02:03.906]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:03.906]                               info)
[17:02:03.906]                             info <- base::paste(info, collapse = "; ")
[17:02:03.906]                             if (!has_future) {
[17:02:03.906]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:03.906]                                 info)
[17:02:03.906]                             }
[17:02:03.906]                             else {
[17:02:03.906]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:03.906]                                 info, version)
[17:02:03.906]                             }
[17:02:03.906]                             base::stop(msg)
[17:02:03.906]                           }
[17:02:03.906]                         })
[17:02:03.906]                       }
[17:02:03.906]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:03.906]                       base::options(mc.cores = 1L)
[17:02:03.906]                     }
[17:02:03.906]                     base::local({
[17:02:03.906]                       for (pkg in "future") {
[17:02:03.906]                         base::loadNamespace(pkg)
[17:02:03.906]                         base::library(pkg, character.only = TRUE)
[17:02:03.906]                       }
[17:02:03.906]                     })
[17:02:03.906]                   }
[17:02:03.906]                   ...future.strategy.old <- future::plan("list")
[17:02:03.906]                   options(future.plan = NULL)
[17:02:03.906]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.906]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:03.906]                 }
[17:02:03.906]                 ...future.workdir <- getwd()
[17:02:03.906]             }
[17:02:03.906]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:03.906]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:03.906]         }
[17:02:03.906]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:03.906]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:03.906]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:03.906]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:03.906]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:03.906]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:03.906]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:03.906]             base::names(...future.oldOptions))
[17:02:03.906]     }
[17:02:03.906]     if (FALSE) {
[17:02:03.906]     }
[17:02:03.906]     else {
[17:02:03.906]         if (TRUE) {
[17:02:03.906]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:03.906]                 open = "w")
[17:02:03.906]         }
[17:02:03.906]         else {
[17:02:03.906]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:03.906]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:03.906]         }
[17:02:03.906]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:03.906]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:03.906]             base::sink(type = "output", split = FALSE)
[17:02:03.906]             base::close(...future.stdout)
[17:02:03.906]         }, add = TRUE)
[17:02:03.906]     }
[17:02:03.906]     ...future.frame <- base::sys.nframe()
[17:02:03.906]     ...future.conditions <- base::list()
[17:02:03.906]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:03.906]     if (FALSE) {
[17:02:03.906]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:03.906]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:03.906]     }
[17:02:03.906]     ...future.result <- base::tryCatch({
[17:02:03.906]         base::withCallingHandlers({
[17:02:03.906]             ...future.value <- base::withVisible(base::local({
[17:02:03.906]                 ...future.makeSendCondition <- base::local({
[17:02:03.906]                   sendCondition <- NULL
[17:02:03.906]                   function(frame = 1L) {
[17:02:03.906]                     if (is.function(sendCondition)) 
[17:02:03.906]                       return(sendCondition)
[17:02:03.906]                     ns <- getNamespace("parallel")
[17:02:03.906]                     if (exists("sendData", mode = "function", 
[17:02:03.906]                       envir = ns)) {
[17:02:03.906]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:03.906]                         envir = ns)
[17:02:03.906]                       envir <- sys.frame(frame)
[17:02:03.906]                       master <- NULL
[17:02:03.906]                       while (!identical(envir, .GlobalEnv) && 
[17:02:03.906]                         !identical(envir, emptyenv())) {
[17:02:03.906]                         if (exists("master", mode = "list", envir = envir, 
[17:02:03.906]                           inherits = FALSE)) {
[17:02:03.906]                           master <- get("master", mode = "list", 
[17:02:03.906]                             envir = envir, inherits = FALSE)
[17:02:03.906]                           if (inherits(master, c("SOCKnode", 
[17:02:03.906]                             "SOCK0node"))) {
[17:02:03.906]                             sendCondition <<- function(cond) {
[17:02:03.906]                               data <- list(type = "VALUE", value = cond, 
[17:02:03.906]                                 success = TRUE)
[17:02:03.906]                               parallel_sendData(master, data)
[17:02:03.906]                             }
[17:02:03.906]                             return(sendCondition)
[17:02:03.906]                           }
[17:02:03.906]                         }
[17:02:03.906]                         frame <- frame + 1L
[17:02:03.906]                         envir <- sys.frame(frame)
[17:02:03.906]                       }
[17:02:03.906]                     }
[17:02:03.906]                     sendCondition <<- function(cond) NULL
[17:02:03.906]                   }
[17:02:03.906]                 })
[17:02:03.906]                 withCallingHandlers({
[17:02:03.906]                   {
[17:02:03.906]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:03.906]                       ii, n), appendLF = FALSE)
[17:02:03.906]                     fit <- mandelbrot(C)
[17:02:03.906]                     delay(fit)
[17:02:03.906]                     message(" done")
[17:02:03.906]                     fit
[17:02:03.906]                   }
[17:02:03.906]                 }, immediateCondition = function(cond) {
[17:02:03.906]                   sendCondition <- ...future.makeSendCondition()
[17:02:03.906]                   sendCondition(cond)
[17:02:03.906]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.906]                   {
[17:02:03.906]                     inherits <- base::inherits
[17:02:03.906]                     invokeRestart <- base::invokeRestart
[17:02:03.906]                     is.null <- base::is.null
[17:02:03.906]                     muffled <- FALSE
[17:02:03.906]                     if (inherits(cond, "message")) {
[17:02:03.906]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:03.906]                       if (muffled) 
[17:02:03.906]                         invokeRestart("muffleMessage")
[17:02:03.906]                     }
[17:02:03.906]                     else if (inherits(cond, "warning")) {
[17:02:03.906]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:03.906]                       if (muffled) 
[17:02:03.906]                         invokeRestart("muffleWarning")
[17:02:03.906]                     }
[17:02:03.906]                     else if (inherits(cond, "condition")) {
[17:02:03.906]                       if (!is.null(pattern)) {
[17:02:03.906]                         computeRestarts <- base::computeRestarts
[17:02:03.906]                         grepl <- base::grepl
[17:02:03.906]                         restarts <- computeRestarts(cond)
[17:02:03.906]                         for (restart in restarts) {
[17:02:03.906]                           name <- restart$name
[17:02:03.906]                           if (is.null(name)) 
[17:02:03.906]                             next
[17:02:03.906]                           if (!grepl(pattern, name)) 
[17:02:03.906]                             next
[17:02:03.906]                           invokeRestart(restart)
[17:02:03.906]                           muffled <- TRUE
[17:02:03.906]                           break
[17:02:03.906]                         }
[17:02:03.906]                       }
[17:02:03.906]                     }
[17:02:03.906]                     invisible(muffled)
[17:02:03.906]                   }
[17:02:03.906]                   muffleCondition(cond)
[17:02:03.906]                 })
[17:02:03.906]             }))
[17:02:03.906]             future::FutureResult(value = ...future.value$value, 
[17:02:03.906]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.906]                   ...future.rng), globalenv = if (FALSE) 
[17:02:03.906]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:03.906]                     ...future.globalenv.names))
[17:02:03.906]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:03.906]         }, condition = base::local({
[17:02:03.906]             c <- base::c
[17:02:03.906]             inherits <- base::inherits
[17:02:03.906]             invokeRestart <- base::invokeRestart
[17:02:03.906]             length <- base::length
[17:02:03.906]             list <- base::list
[17:02:03.906]             seq.int <- base::seq.int
[17:02:03.906]             signalCondition <- base::signalCondition
[17:02:03.906]             sys.calls <- base::sys.calls
[17:02:03.906]             `[[` <- base::`[[`
[17:02:03.906]             `+` <- base::`+`
[17:02:03.906]             `<<-` <- base::`<<-`
[17:02:03.906]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:03.906]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:03.906]                   3L)]
[17:02:03.906]             }
[17:02:03.906]             function(cond) {
[17:02:03.906]                 is_error <- inherits(cond, "error")
[17:02:03.906]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:03.906]                   NULL)
[17:02:03.906]                 if (is_error) {
[17:02:03.906]                   sessionInformation <- function() {
[17:02:03.906]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:03.906]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:03.906]                       search = base::search(), system = base::Sys.info())
[17:02:03.906]                   }
[17:02:03.906]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.906]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:03.906]                     cond$call), session = sessionInformation(), 
[17:02:03.906]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:03.906]                   signalCondition(cond)
[17:02:03.906]                 }
[17:02:03.906]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:03.906]                 "immediateCondition"))) {
[17:02:03.906]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:03.906]                   ...future.conditions[[length(...future.conditions) + 
[17:02:03.906]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:03.906]                   if (TRUE && !signal) {
[17:02:03.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.906]                     {
[17:02:03.906]                       inherits <- base::inherits
[17:02:03.906]                       invokeRestart <- base::invokeRestart
[17:02:03.906]                       is.null <- base::is.null
[17:02:03.906]                       muffled <- FALSE
[17:02:03.906]                       if (inherits(cond, "message")) {
[17:02:03.906]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.906]                         if (muffled) 
[17:02:03.906]                           invokeRestart("muffleMessage")
[17:02:03.906]                       }
[17:02:03.906]                       else if (inherits(cond, "warning")) {
[17:02:03.906]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.906]                         if (muffled) 
[17:02:03.906]                           invokeRestart("muffleWarning")
[17:02:03.906]                       }
[17:02:03.906]                       else if (inherits(cond, "condition")) {
[17:02:03.906]                         if (!is.null(pattern)) {
[17:02:03.906]                           computeRestarts <- base::computeRestarts
[17:02:03.906]                           grepl <- base::grepl
[17:02:03.906]                           restarts <- computeRestarts(cond)
[17:02:03.906]                           for (restart in restarts) {
[17:02:03.906]                             name <- restart$name
[17:02:03.906]                             if (is.null(name)) 
[17:02:03.906]                               next
[17:02:03.906]                             if (!grepl(pattern, name)) 
[17:02:03.906]                               next
[17:02:03.906]                             invokeRestart(restart)
[17:02:03.906]                             muffled <- TRUE
[17:02:03.906]                             break
[17:02:03.906]                           }
[17:02:03.906]                         }
[17:02:03.906]                       }
[17:02:03.906]                       invisible(muffled)
[17:02:03.906]                     }
[17:02:03.906]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.906]                   }
[17:02:03.906]                 }
[17:02:03.906]                 else {
[17:02:03.906]                   if (TRUE) {
[17:02:03.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:03.906]                     {
[17:02:03.906]                       inherits <- base::inherits
[17:02:03.906]                       invokeRestart <- base::invokeRestart
[17:02:03.906]                       is.null <- base::is.null
[17:02:03.906]                       muffled <- FALSE
[17:02:03.906]                       if (inherits(cond, "message")) {
[17:02:03.906]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:03.906]                         if (muffled) 
[17:02:03.906]                           invokeRestart("muffleMessage")
[17:02:03.906]                       }
[17:02:03.906]                       else if (inherits(cond, "warning")) {
[17:02:03.906]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:03.906]                         if (muffled) 
[17:02:03.906]                           invokeRestart("muffleWarning")
[17:02:03.906]                       }
[17:02:03.906]                       else if (inherits(cond, "condition")) {
[17:02:03.906]                         if (!is.null(pattern)) {
[17:02:03.906]                           computeRestarts <- base::computeRestarts
[17:02:03.906]                           grepl <- base::grepl
[17:02:03.906]                           restarts <- computeRestarts(cond)
[17:02:03.906]                           for (restart in restarts) {
[17:02:03.906]                             name <- restart$name
[17:02:03.906]                             if (is.null(name)) 
[17:02:03.906]                               next
[17:02:03.906]                             if (!grepl(pattern, name)) 
[17:02:03.906]                               next
[17:02:03.906]                             invokeRestart(restart)
[17:02:03.906]                             muffled <- TRUE
[17:02:03.906]                             break
[17:02:03.906]                           }
[17:02:03.906]                         }
[17:02:03.906]                       }
[17:02:03.906]                       invisible(muffled)
[17:02:03.906]                     }
[17:02:03.906]                     muffleCondition(cond, pattern = "^muffle")
[17:02:03.906]                   }
[17:02:03.906]                 }
[17:02:03.906]             }
[17:02:03.906]         }))
[17:02:03.906]     }, error = function(ex) {
[17:02:03.906]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:03.906]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:03.906]                 ...future.rng), started = ...future.startTime, 
[17:02:03.906]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:03.906]             version = "1.8"), class = "FutureResult")
[17:02:03.906]     }, finally = {
[17:02:03.906]         if (!identical(...future.workdir, getwd())) 
[17:02:03.906]             setwd(...future.workdir)
[17:02:03.906]         {
[17:02:03.906]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:03.906]                 ...future.oldOptions$nwarnings <- NULL
[17:02:03.906]             }
[17:02:03.906]             base::options(...future.oldOptions)
[17:02:03.906]             if (.Platform$OS.type == "windows") {
[17:02:03.906]                 old_names <- names(...future.oldEnvVars)
[17:02:03.906]                 envs <- base::Sys.getenv()
[17:02:03.906]                 names <- names(envs)
[17:02:03.906]                 common <- intersect(names, old_names)
[17:02:03.906]                 added <- setdiff(names, old_names)
[17:02:03.906]                 removed <- setdiff(old_names, names)
[17:02:03.906]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:03.906]                   envs[common]]
[17:02:03.906]                 NAMES <- toupper(changed)
[17:02:03.906]                 args <- list()
[17:02:03.906]                 for (kk in seq_along(NAMES)) {
[17:02:03.906]                   name <- changed[[kk]]
[17:02:03.906]                   NAME <- NAMES[[kk]]
[17:02:03.906]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.906]                     next
[17:02:03.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.906]                 }
[17:02:03.906]                 NAMES <- toupper(added)
[17:02:03.906]                 for (kk in seq_along(NAMES)) {
[17:02:03.906]                   name <- added[[kk]]
[17:02:03.906]                   NAME <- NAMES[[kk]]
[17:02:03.906]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.906]                     next
[17:02:03.906]                   args[[name]] <- ""
[17:02:03.906]                 }
[17:02:03.906]                 NAMES <- toupper(removed)
[17:02:03.906]                 for (kk in seq_along(NAMES)) {
[17:02:03.906]                   name <- removed[[kk]]
[17:02:03.906]                   NAME <- NAMES[[kk]]
[17:02:03.906]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:03.906]                     next
[17:02:03.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:03.906]                 }
[17:02:03.906]                 if (length(args) > 0) 
[17:02:03.906]                   base::do.call(base::Sys.setenv, args = args)
[17:02:03.906]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:03.906]             }
[17:02:03.906]             else {
[17:02:03.906]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:03.906]             }
[17:02:03.906]             {
[17:02:03.906]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:03.906]                   0L) {
[17:02:03.906]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:03.906]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:03.906]                   base::options(opts)
[17:02:03.906]                 }
[17:02:03.906]                 {
[17:02:03.906]                   {
[17:02:03.906]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:03.906]                     NULL
[17:02:03.906]                   }
[17:02:03.906]                   options(future.plan = NULL)
[17:02:03.906]                   if (is.na(NA_character_)) 
[17:02:03.906]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:03.906]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:03.906]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:03.906]                     .init = FALSE)
[17:02:03.906]                 }
[17:02:03.906]             }
[17:02:03.906]         }
[17:02:03.906]     })
[17:02:03.906]     if (TRUE) {
[17:02:03.906]         base::sink(type = "output", split = FALSE)
[17:02:03.906]         if (TRUE) {
[17:02:03.906]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:03.906]         }
[17:02:03.906]         else {
[17:02:03.906]             ...future.result["stdout"] <- base::list(NULL)
[17:02:03.906]         }
[17:02:03.906]         base::close(...future.stdout)
[17:02:03.906]         ...future.stdout <- NULL
[17:02:03.906]     }
[17:02:03.906]     ...future.result$conditions <- ...future.conditions
[17:02:03.906]     ...future.result$finished <- base::Sys.time()
[17:02:03.906]     ...future.result
[17:02:03.906] }
[17:02:03.909] Poll #1 (0): usedNodes() = 2, workers = 2
[17:02:03.928] receiveMessageFromWorker() for ClusterFuture ...
[17:02:03.928] - Validating connection of MultisessionFuture
[17:02:03.928] - received message: FutureResult
[17:02:03.928] - Received FutureResult
[17:02:03.928] - Erased future from FutureRegistry
[17:02:03.929] result() for ClusterFuture ...
[17:02:03.929] - result already collected: FutureResult
[17:02:03.929] result() for ClusterFuture ... done
[17:02:03.929] signalConditions() ...
[17:02:03.929]  - include = ‘immediateCondition’
[17:02:03.929]  - exclude = 
[17:02:03.929]  - resignal = FALSE
[17:02:03.929]  - Number of conditions: 2
[17:02:03.929] signalConditions() ... done
[17:02:03.929] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:03.929] result() for ClusterFuture ...
[17:02:03.929] - result already collected: FutureResult
[17:02:03.930] result() for ClusterFuture ... done
[17:02:03.930] result() for ClusterFuture ...
[17:02:03.930] - result already collected: FutureResult
[17:02:03.930] result() for ClusterFuture ... done
[17:02:03.930] signalConditions() ...
[17:02:03.930]  - include = ‘immediateCondition’
[17:02:03.930]  - exclude = 
[17:02:03.930]  - resignal = FALSE
[17:02:03.930]  - Number of conditions: 2
[17:02:03.930] signalConditions() ... done
[17:02:03.931] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[17:02:03.931] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:02:03.932] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:02:03.932] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[17:02:03.932] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[17:02:03.932] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[17:02:03.976] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[17:02:03.976] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[17:02:04.020] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[17:02:04.020] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[17:02:04.021] MultisessionFuture started
[17:02:04.021] - Launch lazy future ... done
[17:02:04.021] run() for ‘MultisessionFuture’ ... done
[17:02:04.021] - run() ... done
[17:02:04.021] - resolved() ...
[17:02:04.032] - resolved: FALSE
[17:02:04.032] - resolved() ... done
[17:02:04.032] resolved() for ‘MultisessionFuture’ ... done
[17:02:04.032] resolved() for ‘Future’ ...
[17:02:04.033] - state: ‘created’
[17:02:04.033] - run: TRUE
[17:02:04.033] - run() ...
[17:02:04.033] run() for ‘Future’ ...
[17:02:04.033] - state: ‘created’
[17:02:04.033] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.048] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.048] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:04.048]   - Field: ‘node’
[17:02:04.048]   - Field: ‘label’
[17:02:04.048]   - Field: ‘local’
[17:02:04.049]   - Field: ‘owner’
[17:02:04.049]   - Field: ‘envir’
[17:02:04.049]   - Field: ‘workers’
[17:02:04.049]   - Field: ‘packages’
[17:02:04.049]   - Field: ‘gc’
[17:02:04.049]   - Field: ‘conditions’
[17:02:04.049]   - Field: ‘persistent’
[17:02:04.049]   - Field: ‘expr’
[17:02:04.049]   - Field: ‘uuid’
[17:02:04.049]   - Field: ‘seed’
[17:02:04.049]   - Field: ‘version’
[17:02:04.050]   - Field: ‘result’
[17:02:04.050]   - Field: ‘asynchronous’
[17:02:04.050]   - Field: ‘calls’
[17:02:04.050]   - Field: ‘globals’
[17:02:04.050]   - Field: ‘stdout’
[17:02:04.050]   - Field: ‘earlySignal’
[17:02:04.050]   - Field: ‘lazy’
[17:02:04.050]   - Field: ‘state’
[17:02:04.050] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:04.050] - Launch lazy future ...
[17:02:04.051] Packages needed by the future expression (n = 1): ‘future’
[17:02:04.051] Packages needed by future strategies (n = 0): <none>
[17:02:04.051] {
[17:02:04.051]     {
[17:02:04.051]         {
[17:02:04.051]             ...future.startTime <- base::Sys.time()
[17:02:04.051]             {
[17:02:04.051]                 {
[17:02:04.051]                   {
[17:02:04.051]                     {
[17:02:04.051]                       {
[17:02:04.051]                         base::local({
[17:02:04.051]                           has_future <- base::requireNamespace("future", 
[17:02:04.051]                             quietly = TRUE)
[17:02:04.051]                           if (has_future) {
[17:02:04.051]                             ns <- base::getNamespace("future")
[17:02:04.051]                             version <- ns[[".package"]][["version"]]
[17:02:04.051]                             if (is.null(version)) 
[17:02:04.051]                               version <- utils::packageVersion("future")
[17:02:04.051]                           }
[17:02:04.051]                           else {
[17:02:04.051]                             version <- NULL
[17:02:04.051]                           }
[17:02:04.051]                           if (!has_future || version < "1.8.0") {
[17:02:04.051]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.051]                               "", base::R.version$version.string), 
[17:02:04.051]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:04.051]                                 base::R.version$platform, 8 * 
[17:02:04.051]                                   base::.Machine$sizeof.pointer), 
[17:02:04.051]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.051]                                 "release", "version")], collapse = " "), 
[17:02:04.051]                               hostname = base::Sys.info()[["nodename"]])
[17:02:04.051]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.051]                               info)
[17:02:04.051]                             info <- base::paste(info, collapse = "; ")
[17:02:04.051]                             if (!has_future) {
[17:02:04.051]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.051]                                 info)
[17:02:04.051]                             }
[17:02:04.051]                             else {
[17:02:04.051]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.051]                                 info, version)
[17:02:04.051]                             }
[17:02:04.051]                             base::stop(msg)
[17:02:04.051]                           }
[17:02:04.051]                         })
[17:02:04.051]                       }
[17:02:04.051]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.051]                       base::options(mc.cores = 1L)
[17:02:04.051]                     }
[17:02:04.051]                     base::local({
[17:02:04.051]                       for (pkg in "future") {
[17:02:04.051]                         base::loadNamespace(pkg)
[17:02:04.051]                         base::library(pkg, character.only = TRUE)
[17:02:04.051]                       }
[17:02:04.051]                     })
[17:02:04.051]                   }
[17:02:04.051]                   ...future.strategy.old <- future::plan("list")
[17:02:04.051]                   options(future.plan = NULL)
[17:02:04.051]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.051]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.051]                 }
[17:02:04.051]                 ...future.workdir <- getwd()
[17:02:04.051]             }
[17:02:04.051]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.051]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.051]         }
[17:02:04.051]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.051]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.051]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.051]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.051]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.051]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.051]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.051]             base::names(...future.oldOptions))
[17:02:04.051]     }
[17:02:04.051]     if (FALSE) {
[17:02:04.051]     }
[17:02:04.051]     else {
[17:02:04.051]         if (TRUE) {
[17:02:04.051]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.051]                 open = "w")
[17:02:04.051]         }
[17:02:04.051]         else {
[17:02:04.051]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.051]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.051]         }
[17:02:04.051]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.051]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.051]             base::sink(type = "output", split = FALSE)
[17:02:04.051]             base::close(...future.stdout)
[17:02:04.051]         }, add = TRUE)
[17:02:04.051]     }
[17:02:04.051]     ...future.frame <- base::sys.nframe()
[17:02:04.051]     ...future.conditions <- base::list()
[17:02:04.051]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.051]     if (FALSE) {
[17:02:04.051]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.051]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.051]     }
[17:02:04.051]     ...future.result <- base::tryCatch({
[17:02:04.051]         base::withCallingHandlers({
[17:02:04.051]             ...future.value <- base::withVisible(base::local({
[17:02:04.051]                 ...future.makeSendCondition <- base::local({
[17:02:04.051]                   sendCondition <- NULL
[17:02:04.051]                   function(frame = 1L) {
[17:02:04.051]                     if (is.function(sendCondition)) 
[17:02:04.051]                       return(sendCondition)
[17:02:04.051]                     ns <- getNamespace("parallel")
[17:02:04.051]                     if (exists("sendData", mode = "function", 
[17:02:04.051]                       envir = ns)) {
[17:02:04.051]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:04.051]                         envir = ns)
[17:02:04.051]                       envir <- sys.frame(frame)
[17:02:04.051]                       master <- NULL
[17:02:04.051]                       while (!identical(envir, .GlobalEnv) && 
[17:02:04.051]                         !identical(envir, emptyenv())) {
[17:02:04.051]                         if (exists("master", mode = "list", envir = envir, 
[17:02:04.051]                           inherits = FALSE)) {
[17:02:04.051]                           master <- get("master", mode = "list", 
[17:02:04.051]                             envir = envir, inherits = FALSE)
[17:02:04.051]                           if (inherits(master, c("SOCKnode", 
[17:02:04.051]                             "SOCK0node"))) {
[17:02:04.051]                             sendCondition <<- function(cond) {
[17:02:04.051]                               data <- list(type = "VALUE", value = cond, 
[17:02:04.051]                                 success = TRUE)
[17:02:04.051]                               parallel_sendData(master, data)
[17:02:04.051]                             }
[17:02:04.051]                             return(sendCondition)
[17:02:04.051]                           }
[17:02:04.051]                         }
[17:02:04.051]                         frame <- frame + 1L
[17:02:04.051]                         envir <- sys.frame(frame)
[17:02:04.051]                       }
[17:02:04.051]                     }
[17:02:04.051]                     sendCondition <<- function(cond) NULL
[17:02:04.051]                   }
[17:02:04.051]                 })
[17:02:04.051]                 withCallingHandlers({
[17:02:04.051]                   {
[17:02:04.051]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:02:04.051]                       ii, n), appendLF = FALSE)
[17:02:04.051]                     fit <- mandelbrot(C)
[17:02:04.051]                     delay(fit)
[17:02:04.051]                     message(" done")
[17:02:04.051]                     fit
[17:02:04.051]                   }
[17:02:04.051]                 }, immediateCondition = function(cond) {
[17:02:04.051]                   sendCondition <- ...future.makeSendCondition()
[17:02:04.051]                   sendCondition(cond)
[17:02:04.051]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.051]                   {
[17:02:04.051]                     inherits <- base::inherits
[17:02:04.051]                     invokeRestart <- base::invokeRestart
[17:02:04.051]                     is.null <- base::is.null
[17:02:04.051]                     muffled <- FALSE
[17:02:04.051]                     if (inherits(cond, "message")) {
[17:02:04.051]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.051]                       if (muffled) 
[17:02:04.051]                         invokeRestart("muffleMessage")
[17:02:04.051]                     }
[17:02:04.051]                     else if (inherits(cond, "warning")) {
[17:02:04.051]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.051]                       if (muffled) 
[17:02:04.051]                         invokeRestart("muffleWarning")
[17:02:04.051]                     }
[17:02:04.051]                     else if (inherits(cond, "condition")) {
[17:02:04.051]                       if (!is.null(pattern)) {
[17:02:04.051]                         computeRestarts <- base::computeRestarts
[17:02:04.051]                         grepl <- base::grepl
[17:02:04.051]                         restarts <- computeRestarts(cond)
[17:02:04.051]                         for (restart in restarts) {
[17:02:04.051]                           name <- restart$name
[17:02:04.051]                           if (is.null(name)) 
[17:02:04.051]                             next
[17:02:04.051]                           if (!grepl(pattern, name)) 
[17:02:04.051]                             next
[17:02:04.051]                           invokeRestart(restart)
[17:02:04.051]                           muffled <- TRUE
[17:02:04.051]                           break
[17:02:04.051]                         }
[17:02:04.051]                       }
[17:02:04.051]                     }
[17:02:04.051]                     invisible(muffled)
[17:02:04.051]                   }
[17:02:04.051]                   muffleCondition(cond)
[17:02:04.051]                 })
[17:02:04.051]             }))
[17:02:04.051]             future::FutureResult(value = ...future.value$value, 
[17:02:04.051]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.051]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.051]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.051]                     ...future.globalenv.names))
[17:02:04.051]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.051]         }, condition = base::local({
[17:02:04.051]             c <- base::c
[17:02:04.051]             inherits <- base::inherits
[17:02:04.051]             invokeRestart <- base::invokeRestart
[17:02:04.051]             length <- base::length
[17:02:04.051]             list <- base::list
[17:02:04.051]             seq.int <- base::seq.int
[17:02:04.051]             signalCondition <- base::signalCondition
[17:02:04.051]             sys.calls <- base::sys.calls
[17:02:04.051]             `[[` <- base::`[[`
[17:02:04.051]             `+` <- base::`+`
[17:02:04.051]             `<<-` <- base::`<<-`
[17:02:04.051]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.051]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.051]                   3L)]
[17:02:04.051]             }
[17:02:04.051]             function(cond) {
[17:02:04.051]                 is_error <- inherits(cond, "error")
[17:02:04.051]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.051]                   NULL)
[17:02:04.051]                 if (is_error) {
[17:02:04.051]                   sessionInformation <- function() {
[17:02:04.051]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.051]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.051]                       search = base::search(), system = base::Sys.info())
[17:02:04.051]                   }
[17:02:04.051]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.051]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.051]                     cond$call), session = sessionInformation(), 
[17:02:04.051]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.051]                   signalCondition(cond)
[17:02:04.051]                 }
[17:02:04.051]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.051]                 "immediateCondition"))) {
[17:02:04.051]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.051]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.051]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.051]                   if (TRUE && !signal) {
[17:02:04.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.051]                     {
[17:02:04.051]                       inherits <- base::inherits
[17:02:04.051]                       invokeRestart <- base::invokeRestart
[17:02:04.051]                       is.null <- base::is.null
[17:02:04.051]                       muffled <- FALSE
[17:02:04.051]                       if (inherits(cond, "message")) {
[17:02:04.051]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.051]                         if (muffled) 
[17:02:04.051]                           invokeRestart("muffleMessage")
[17:02:04.051]                       }
[17:02:04.051]                       else if (inherits(cond, "warning")) {
[17:02:04.051]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.051]                         if (muffled) 
[17:02:04.051]                           invokeRestart("muffleWarning")
[17:02:04.051]                       }
[17:02:04.051]                       else if (inherits(cond, "condition")) {
[17:02:04.051]                         if (!is.null(pattern)) {
[17:02:04.051]                           computeRestarts <- base::computeRestarts
[17:02:04.051]                           grepl <- base::grepl
[17:02:04.051]                           restarts <- computeRestarts(cond)
[17:02:04.051]                           for (restart in restarts) {
[17:02:04.051]                             name <- restart$name
[17:02:04.051]                             if (is.null(name)) 
[17:02:04.051]                               next
[17:02:04.051]                             if (!grepl(pattern, name)) 
[17:02:04.051]                               next
[17:02:04.051]                             invokeRestart(restart)
[17:02:04.051]                             muffled <- TRUE
[17:02:04.051]                             break
[17:02:04.051]                           }
[17:02:04.051]                         }
[17:02:04.051]                       }
[17:02:04.051]                       invisible(muffled)
[17:02:04.051]                     }
[17:02:04.051]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.051]                   }
[17:02:04.051]                 }
[17:02:04.051]                 else {
[17:02:04.051]                   if (TRUE) {
[17:02:04.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.051]                     {
[17:02:04.051]                       inherits <- base::inherits
[17:02:04.051]                       invokeRestart <- base::invokeRestart
[17:02:04.051]                       is.null <- base::is.null
[17:02:04.051]                       muffled <- FALSE
[17:02:04.051]                       if (inherits(cond, "message")) {
[17:02:04.051]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.051]                         if (muffled) 
[17:02:04.051]                           invokeRestart("muffleMessage")
[17:02:04.051]                       }
[17:02:04.051]                       else if (inherits(cond, "warning")) {
[17:02:04.051]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.051]                         if (muffled) 
[17:02:04.051]                           invokeRestart("muffleWarning")
[17:02:04.051]                       }
[17:02:04.051]                       else if (inherits(cond, "condition")) {
[17:02:04.051]                         if (!is.null(pattern)) {
[17:02:04.051]                           computeRestarts <- base::computeRestarts
[17:02:04.051]                           grepl <- base::grepl
[17:02:04.051]                           restarts <- computeRestarts(cond)
[17:02:04.051]                           for (restart in restarts) {
[17:02:04.051]                             name <- restart$name
[17:02:04.051]                             if (is.null(name)) 
[17:02:04.051]                               next
[17:02:04.051]                             if (!grepl(pattern, name)) 
[17:02:04.051]                               next
[17:02:04.051]                             invokeRestart(restart)
[17:02:04.051]                             muffled <- TRUE
[17:02:04.051]                             break
[17:02:04.051]                           }
[17:02:04.051]                         }
[17:02:04.051]                       }
[17:02:04.051]                       invisible(muffled)
[17:02:04.051]                     }
[17:02:04.051]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.051]                   }
[17:02:04.051]                 }
[17:02:04.051]             }
[17:02:04.051]         }))
[17:02:04.051]     }, error = function(ex) {
[17:02:04.051]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.051]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.051]                 ...future.rng), started = ...future.startTime, 
[17:02:04.051]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.051]             version = "1.8"), class = "FutureResult")
[17:02:04.051]     }, finally = {
[17:02:04.051]         if (!identical(...future.workdir, getwd())) 
[17:02:04.051]             setwd(...future.workdir)
[17:02:04.051]         {
[17:02:04.051]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.051]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.051]             }
[17:02:04.051]             base::options(...future.oldOptions)
[17:02:04.051]             if (.Platform$OS.type == "windows") {
[17:02:04.051]                 old_names <- names(...future.oldEnvVars)
[17:02:04.051]                 envs <- base::Sys.getenv()
[17:02:04.051]                 names <- names(envs)
[17:02:04.051]                 common <- intersect(names, old_names)
[17:02:04.051]                 added <- setdiff(names, old_names)
[17:02:04.051]                 removed <- setdiff(old_names, names)
[17:02:04.051]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.051]                   envs[common]]
[17:02:04.051]                 NAMES <- toupper(changed)
[17:02:04.051]                 args <- list()
[17:02:04.051]                 for (kk in seq_along(NAMES)) {
[17:02:04.051]                   name <- changed[[kk]]
[17:02:04.051]                   NAME <- NAMES[[kk]]
[17:02:04.051]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.051]                     next
[17:02:04.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.051]                 }
[17:02:04.051]                 NAMES <- toupper(added)
[17:02:04.051]                 for (kk in seq_along(NAMES)) {
[17:02:04.051]                   name <- added[[kk]]
[17:02:04.051]                   NAME <- NAMES[[kk]]
[17:02:04.051]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.051]                     next
[17:02:04.051]                   args[[name]] <- ""
[17:02:04.051]                 }
[17:02:04.051]                 NAMES <- toupper(removed)
[17:02:04.051]                 for (kk in seq_along(NAMES)) {
[17:02:04.051]                   name <- removed[[kk]]
[17:02:04.051]                   NAME <- NAMES[[kk]]
[17:02:04.051]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.051]                     next
[17:02:04.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.051]                 }
[17:02:04.051]                 if (length(args) > 0) 
[17:02:04.051]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.051]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.051]             }
[17:02:04.051]             else {
[17:02:04.051]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.051]             }
[17:02:04.051]             {
[17:02:04.051]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.051]                   0L) {
[17:02:04.051]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.051]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.051]                   base::options(opts)
[17:02:04.051]                 }
[17:02:04.051]                 {
[17:02:04.051]                   {
[17:02:04.051]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.051]                     NULL
[17:02:04.051]                   }
[17:02:04.051]                   options(future.plan = NULL)
[17:02:04.051]                   if (is.na(NA_character_)) 
[17:02:04.051]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.051]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.051]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.051]                     .init = FALSE)
[17:02:04.051]                 }
[17:02:04.051]             }
[17:02:04.051]         }
[17:02:04.051]     })
[17:02:04.051]     if (TRUE) {
[17:02:04.051]         base::sink(type = "output", split = FALSE)
[17:02:04.051]         if (TRUE) {
[17:02:04.051]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.051]         }
[17:02:04.051]         else {
[17:02:04.051]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.051]         }
[17:02:04.051]         base::close(...future.stdout)
[17:02:04.051]         ...future.stdout <- NULL
[17:02:04.051]     }
[17:02:04.051]     ...future.result$conditions <- ...future.conditions
[17:02:04.051]     ...future.result$finished <- base::Sys.time()
[17:02:04.051]     ...future.result
[17:02:04.051] }
[17:02:04.053] Poll #1 (0): usedNodes() = 2, workers = 2
[17:02:04.064] receiveMessageFromWorker() for ClusterFuture ...
[17:02:04.064] - Validating connection of MultisessionFuture
[17:02:04.065] - received message: FutureResult
[17:02:04.065] - Received FutureResult
[17:02:04.065] - Erased future from FutureRegistry
[17:02:04.065] result() for ClusterFuture ...
[17:02:04.065] - result already collected: FutureResult
[17:02:04.065] result() for ClusterFuture ... done
[17:02:04.066] signalConditions() ...
[17:02:04.066]  - include = ‘immediateCondition’
[17:02:04.066]  - exclude = 
[17:02:04.066]  - resignal = FALSE
[17:02:04.066]  - Number of conditions: 2
[17:02:04.066] signalConditions() ... done
[17:02:04.066] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:04.066] result() for ClusterFuture ...
[17:02:04.066] - result already collected: FutureResult
[17:02:04.066] result() for ClusterFuture ... done
[17:02:04.066] result() for ClusterFuture ...
[17:02:04.066] - result already collected: FutureResult
[17:02:04.067] result() for ClusterFuture ... done
[17:02:04.067] signalConditions() ...
[17:02:04.067]  - include = ‘immediateCondition’
[17:02:04.067]  - exclude = 
[17:02:04.067]  - resignal = FALSE
[17:02:04.067]  - Number of conditions: 2
[17:02:04.067] signalConditions() ... done
[17:02:04.068] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[17:02:04.068] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:02:04.068] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:02:04.069] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[17:02:04.069] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[17:02:04.069] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[17:02:04.112] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[17:02:04.112] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[17:02:04.156] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[17:02:04.156] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[17:02:04.157] MultisessionFuture started
[17:02:04.157] - Launch lazy future ... done
[17:02:04.157] run() for ‘MultisessionFuture’ ... done
[17:02:04.157] - run() ... done
[17:02:04.157] - resolved() ...
[17:02:04.168] - resolved: FALSE
[17:02:04.168] - resolved() ... done
[17:02:04.168] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[17:02:04.168] result() for ClusterFuture ...
[17:02:04.168] - result already collected: FutureResult
[17:02:04.169] result() for ClusterFuture ... done
[17:02:04.169] result() for ClusterFuture ...
[17:02:04.169] - result already collected: FutureResult
[17:02:04.169] result() for ClusterFuture ... done
[17:02:04.169] signalConditions() ...
[17:02:04.169]  - include = ‘immediateCondition’
[17:02:04.169]  - exclude = 
[17:02:04.169]  - resignal = FALSE
[17:02:04.169]  - Number of conditions: 2
[17:02:04.169] signalConditions() ... done
[17:02:04.169] Future state: ‘finished’
[17:02:04.170] result() for ClusterFuture ...
[17:02:04.170] - result already collected: FutureResult
[17:02:04.170] result() for ClusterFuture ... done
[17:02:04.170] signalConditions() ...
[17:02:04.170]  - include = ‘condition’
[17:02:04.170]  - exclude = ‘immediateCondition’
[17:02:04.170]  - resignal = TRUE
[17:02:04.170]  - Number of conditions: 2
[17:02:04.170]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:02:04.170]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:04.171] signalConditions() ... done
Plotting tile #2 of 4 ...
[17:02:04.171] result() for ClusterFuture ...
[17:02:04.171] - result already collected: FutureResult
[17:02:04.172] result() for ClusterFuture ... done
[17:02:04.172] result() for ClusterFuture ...
[17:02:04.172] - result already collected: FutureResult
[17:02:04.172] result() for ClusterFuture ... done
[17:02:04.172] signalConditions() ...
[17:02:04.172]  - include = ‘immediateCondition’
[17:02:04.172]  - exclude = 
[17:02:04.172]  - resignal = FALSE
[17:02:04.172]  - Number of conditions: 2
[17:02:04.172] signalConditions() ... done
[17:02:04.172] Future state: ‘finished’
[17:02:04.173] result() for ClusterFuture ...
[17:02:04.173] - result already collected: FutureResult
[17:02:04.173] result() for ClusterFuture ... done
[17:02:04.173] signalConditions() ...
[17:02:04.173]  - include = ‘condition’
[17:02:04.173]  - exclude = ‘immediateCondition’
[17:02:04.173]  - resignal = TRUE
[17:02:04.173]  - Number of conditions: 2
[17:02:04.173]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:02:04.173]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:04.174] signalConditions() ... done
[17:02:04.174] receiveMessageFromWorker() for ClusterFuture ...
[17:02:04.175] - Validating connection of MultisessionFuture
[17:02:04.175] - received message: FutureResult
[17:02:04.175] - Received FutureResult
[17:02:04.175] - Erased future from FutureRegistry
[17:02:04.175] result() for ClusterFuture ...
[17:02:04.176] - result already collected: FutureResult
[17:02:04.176] result() for ClusterFuture ... done
[17:02:04.176] signalConditions() ...
[17:02:04.176]  - include = ‘immediateCondition’
[17:02:04.176]  - exclude = 
[17:02:04.176]  - resignal = FALSE
[17:02:04.176]  - Number of conditions: 2
[17:02:04.176] signalConditions() ... done
[17:02:04.176] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[17:02:04.176] result() for ClusterFuture ...
[17:02:04.176] - result already collected: FutureResult
[17:02:04.177] result() for ClusterFuture ... done
[17:02:04.177] result() for ClusterFuture ...
[17:02:04.177] - result already collected: FutureResult
[17:02:04.177] result() for ClusterFuture ... done
[17:02:04.177] signalConditions() ...
[17:02:04.177]  - include = ‘immediateCondition’
[17:02:04.177]  - exclude = 
[17:02:04.177]  - resignal = FALSE
[17:02:04.179]  - Number of conditions: 2
[17:02:04.179] signalConditions() ... done
[17:02:04.180] Future state: ‘finished’
[17:02:04.180] result() for ClusterFuture ...
[17:02:04.180] - result already collected: FutureResult
[17:02:04.180] result() for ClusterFuture ... done
[17:02:04.180] signalConditions() ...
[17:02:04.180]  - include = ‘condition’
[17:02:04.180]  - exclude = ‘immediateCondition’
[17:02:04.180]  - resignal = TRUE
[17:02:04.180]  - Number of conditions: 2
[17:02:04.180]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:02:04.180]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:04.181] signalConditions() ... done
[17:02:04.217] receiveMessageFromWorker() for ClusterFuture ...
[17:02:04.217] - Validating connection of MultisessionFuture
[17:02:04.218] - received message: FutureResult
[17:02:04.218] - Received FutureResult
[17:02:04.218] - Erased future from FutureRegistry
[17:02:04.218] result() for ClusterFuture ...
[17:02:04.218] - result already collected: FutureResult
[17:02:04.218] result() for ClusterFuture ... done
[17:02:04.218] signalConditions() ...
[17:02:04.218]  - include = ‘immediateCondition’
[17:02:04.219]  - exclude = 
[17:02:04.219]  - resignal = FALSE
[17:02:04.219]  - Number of conditions: 2
[17:02:04.219] signalConditions() ... done
[17:02:04.219] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[17:02:04.219] result() for ClusterFuture ...
[17:02:04.219] - result already collected: FutureResult
[17:02:04.219] result() for ClusterFuture ... done
[17:02:04.219] result() for ClusterFuture ...
[17:02:04.219] - result already collected: FutureResult
[17:02:04.220] result() for ClusterFuture ... done
[17:02:04.220] signalConditions() ...
[17:02:04.220]  - include = ‘immediateCondition’
[17:02:04.220]  - exclude = 
[17:02:04.220]  - resignal = FALSE
[17:02:04.220]  - Number of conditions: 2
[17:02:04.220] signalConditions() ... done
[17:02:04.220] Future state: ‘finished’
[17:02:04.220] result() for ClusterFuture ...
[17:02:04.220] - result already collected: FutureResult
[17:02:04.220] result() for ClusterFuture ... done
[17:02:04.221] signalConditions() ...
[17:02:04.221]  - include = ‘condition’
[17:02:04.221]  - exclude = ‘immediateCondition’
[17:02:04.221]  - resignal = TRUE
[17:02:04.221]  - Number of conditions: 2
[17:02:04.221]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:02:04.221]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:02:04.221] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[17:02:04.223] plan(): Setting new future strategy stack:
[17:02:04.223] List of future strategies:
[17:02:04.223] 1. sequential:
[17:02:04.223]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.223]    - tweaked: FALSE
[17:02:04.223]    - call: future::plan("sequential")
[17:02:04.224] plan(): nbrOfWorkers() = 1
> 
