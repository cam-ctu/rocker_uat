
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:27.961] plan(): Setting new future strategy stack:
[17:02:27.962] List of future strategies:
[17:02:27.962] 1. sequential:
[17:02:27.962]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:27.962]    - tweaked: FALSE
[17:02:27.962]    - call: future::plan("sequential")
[17:02:27.973] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'list') ...
list()
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'add') ...
[17:02:28.009] getGlobalsAndPackages() ...
[17:02:28.010] Searching for globals...
[17:02:28.015] - globals found: [1] ‘{’
[17:02:28.015] Searching for globals ... DONE
[17:02:28.015] Resolving globals: FALSE
[17:02:28.015] 
[17:02:28.015] 
[17:02:28.016] getGlobalsAndPackages() ... DONE
[17:02:28.016] run() for ‘Future’ ...
[17:02:28.016] - state: ‘created’
[17:02:28.017] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.017] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.017] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.017]   - Field: ‘label’
[17:02:28.017]   - Field: ‘local’
[17:02:28.017]   - Field: ‘owner’
[17:02:28.017]   - Field: ‘envir’
[17:02:28.017]   - Field: ‘packages’
[17:02:28.018]   - Field: ‘gc’
[17:02:28.018]   - Field: ‘conditions’
[17:02:28.018]   - Field: ‘expr’
[17:02:28.018]   - Field: ‘uuid’
[17:02:28.018]   - Field: ‘seed’
[17:02:28.018]   - Field: ‘version’
[17:02:28.018]   - Field: ‘result’
[17:02:28.018]   - Field: ‘asynchronous’
[17:02:28.018]   - Field: ‘calls’
[17:02:28.018]   - Field: ‘globals’
[17:02:28.018]   - Field: ‘stdout’
[17:02:28.019]   - Field: ‘earlySignal’
[17:02:28.019]   - Field: ‘lazy’
[17:02:28.019]   - Field: ‘state’
[17:02:28.019] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.019] - Launch lazy future ...
[17:02:28.020] Packages needed by the future expression (n = 0): <none>
[17:02:28.020] Packages needed by future strategies (n = 0): <none>
[17:02:28.021] {
[17:02:28.021]     {
[17:02:28.021]         {
[17:02:28.021]             ...future.startTime <- base::Sys.time()
[17:02:28.021]             {
[17:02:28.021]                 {
[17:02:28.021]                   {
[17:02:28.021]                     base::local({
[17:02:28.021]                       has_future <- base::requireNamespace("future", 
[17:02:28.021]                         quietly = TRUE)
[17:02:28.021]                       if (has_future) {
[17:02:28.021]                         ns <- base::getNamespace("future")
[17:02:28.021]                         version <- ns[[".package"]][["version"]]
[17:02:28.021]                         if (is.null(version)) 
[17:02:28.021]                           version <- utils::packageVersion("future")
[17:02:28.021]                       }
[17:02:28.021]                       else {
[17:02:28.021]                         version <- NULL
[17:02:28.021]                       }
[17:02:28.021]                       if (!has_future || version < "1.8.0") {
[17:02:28.021]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.021]                           "", base::R.version$version.string), 
[17:02:28.021]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.021]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.021]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.021]                             "release", "version")], collapse = " "), 
[17:02:28.021]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.021]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.021]                           info)
[17:02:28.021]                         info <- base::paste(info, collapse = "; ")
[17:02:28.021]                         if (!has_future) {
[17:02:28.021]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.021]                             info)
[17:02:28.021]                         }
[17:02:28.021]                         else {
[17:02:28.021]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.021]                             info, version)
[17:02:28.021]                         }
[17:02:28.021]                         base::stop(msg)
[17:02:28.021]                       }
[17:02:28.021]                     })
[17:02:28.021]                   }
[17:02:28.021]                   ...future.strategy.old <- future::plan("list")
[17:02:28.021]                   options(future.plan = NULL)
[17:02:28.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.021]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.021]                 }
[17:02:28.021]                 ...future.workdir <- getwd()
[17:02:28.021]             }
[17:02:28.021]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.021]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.021]         }
[17:02:28.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.021]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.021]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.021]             base::names(...future.oldOptions))
[17:02:28.021]     }
[17:02:28.021]     if (FALSE) {
[17:02:28.021]     }
[17:02:28.021]     else {
[17:02:28.021]         if (TRUE) {
[17:02:28.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.021]                 open = "w")
[17:02:28.021]         }
[17:02:28.021]         else {
[17:02:28.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.021]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.021]         }
[17:02:28.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.021]             base::sink(type = "output", split = FALSE)
[17:02:28.021]             base::close(...future.stdout)
[17:02:28.021]         }, add = TRUE)
[17:02:28.021]     }
[17:02:28.021]     ...future.frame <- base::sys.nframe()
[17:02:28.021]     ...future.conditions <- base::list()
[17:02:28.021]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.021]     if (FALSE) {
[17:02:28.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.021]     }
[17:02:28.021]     ...future.result <- base::tryCatch({
[17:02:28.021]         base::withCallingHandlers({
[17:02:28.021]             ...future.value <- base::withVisible(base::local({
[17:02:28.021]                 1
[17:02:28.021]             }))
[17:02:28.021]             future::FutureResult(value = ...future.value$value, 
[17:02:28.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.021]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.021]                     ...future.globalenv.names))
[17:02:28.021]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.021]         }, condition = base::local({
[17:02:28.021]             c <- base::c
[17:02:28.021]             inherits <- base::inherits
[17:02:28.021]             invokeRestart <- base::invokeRestart
[17:02:28.021]             length <- base::length
[17:02:28.021]             list <- base::list
[17:02:28.021]             seq.int <- base::seq.int
[17:02:28.021]             signalCondition <- base::signalCondition
[17:02:28.021]             sys.calls <- base::sys.calls
[17:02:28.021]             `[[` <- base::`[[`
[17:02:28.021]             `+` <- base::`+`
[17:02:28.021]             `<<-` <- base::`<<-`
[17:02:28.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.021]                   3L)]
[17:02:28.021]             }
[17:02:28.021]             function(cond) {
[17:02:28.021]                 is_error <- inherits(cond, "error")
[17:02:28.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.021]                   NULL)
[17:02:28.021]                 if (is_error) {
[17:02:28.021]                   sessionInformation <- function() {
[17:02:28.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.021]                       search = base::search(), system = base::Sys.info())
[17:02:28.021]                   }
[17:02:28.021]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.021]                     cond$call), session = sessionInformation(), 
[17:02:28.021]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.021]                   signalCondition(cond)
[17:02:28.021]                 }
[17:02:28.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.021]                 "immediateCondition"))) {
[17:02:28.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.021]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.021]                   if (TRUE && !signal) {
[17:02:28.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.021]                     {
[17:02:28.021]                       inherits <- base::inherits
[17:02:28.021]                       invokeRestart <- base::invokeRestart
[17:02:28.021]                       is.null <- base::is.null
[17:02:28.021]                       muffled <- FALSE
[17:02:28.021]                       if (inherits(cond, "message")) {
[17:02:28.021]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.021]                         if (muffled) 
[17:02:28.021]                           invokeRestart("muffleMessage")
[17:02:28.021]                       }
[17:02:28.021]                       else if (inherits(cond, "warning")) {
[17:02:28.021]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.021]                         if (muffled) 
[17:02:28.021]                           invokeRestart("muffleWarning")
[17:02:28.021]                       }
[17:02:28.021]                       else if (inherits(cond, "condition")) {
[17:02:28.021]                         if (!is.null(pattern)) {
[17:02:28.021]                           computeRestarts <- base::computeRestarts
[17:02:28.021]                           grepl <- base::grepl
[17:02:28.021]                           restarts <- computeRestarts(cond)
[17:02:28.021]                           for (restart in restarts) {
[17:02:28.021]                             name <- restart$name
[17:02:28.021]                             if (is.null(name)) 
[17:02:28.021]                               next
[17:02:28.021]                             if (!grepl(pattern, name)) 
[17:02:28.021]                               next
[17:02:28.021]                             invokeRestart(restart)
[17:02:28.021]                             muffled <- TRUE
[17:02:28.021]                             break
[17:02:28.021]                           }
[17:02:28.021]                         }
[17:02:28.021]                       }
[17:02:28.021]                       invisible(muffled)
[17:02:28.021]                     }
[17:02:28.021]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.021]                   }
[17:02:28.021]                 }
[17:02:28.021]                 else {
[17:02:28.021]                   if (TRUE) {
[17:02:28.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.021]                     {
[17:02:28.021]                       inherits <- base::inherits
[17:02:28.021]                       invokeRestart <- base::invokeRestart
[17:02:28.021]                       is.null <- base::is.null
[17:02:28.021]                       muffled <- FALSE
[17:02:28.021]                       if (inherits(cond, "message")) {
[17:02:28.021]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.021]                         if (muffled) 
[17:02:28.021]                           invokeRestart("muffleMessage")
[17:02:28.021]                       }
[17:02:28.021]                       else if (inherits(cond, "warning")) {
[17:02:28.021]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.021]                         if (muffled) 
[17:02:28.021]                           invokeRestart("muffleWarning")
[17:02:28.021]                       }
[17:02:28.021]                       else if (inherits(cond, "condition")) {
[17:02:28.021]                         if (!is.null(pattern)) {
[17:02:28.021]                           computeRestarts <- base::computeRestarts
[17:02:28.021]                           grepl <- base::grepl
[17:02:28.021]                           restarts <- computeRestarts(cond)
[17:02:28.021]                           for (restart in restarts) {
[17:02:28.021]                             name <- restart$name
[17:02:28.021]                             if (is.null(name)) 
[17:02:28.021]                               next
[17:02:28.021]                             if (!grepl(pattern, name)) 
[17:02:28.021]                               next
[17:02:28.021]                             invokeRestart(restart)
[17:02:28.021]                             muffled <- TRUE
[17:02:28.021]                             break
[17:02:28.021]                           }
[17:02:28.021]                         }
[17:02:28.021]                       }
[17:02:28.021]                       invisible(muffled)
[17:02:28.021]                     }
[17:02:28.021]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.021]                   }
[17:02:28.021]                 }
[17:02:28.021]             }
[17:02:28.021]         }))
[17:02:28.021]     }, error = function(ex) {
[17:02:28.021]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.021]                 ...future.rng), started = ...future.startTime, 
[17:02:28.021]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.021]             version = "1.8"), class = "FutureResult")
[17:02:28.021]     }, finally = {
[17:02:28.021]         if (!identical(...future.workdir, getwd())) 
[17:02:28.021]             setwd(...future.workdir)
[17:02:28.021]         {
[17:02:28.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.021]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.021]             }
[17:02:28.021]             base::options(...future.oldOptions)
[17:02:28.021]             if (.Platform$OS.type == "windows") {
[17:02:28.021]                 old_names <- names(...future.oldEnvVars)
[17:02:28.021]                 envs <- base::Sys.getenv()
[17:02:28.021]                 names <- names(envs)
[17:02:28.021]                 common <- intersect(names, old_names)
[17:02:28.021]                 added <- setdiff(names, old_names)
[17:02:28.021]                 removed <- setdiff(old_names, names)
[17:02:28.021]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.021]                   envs[common]]
[17:02:28.021]                 NAMES <- toupper(changed)
[17:02:28.021]                 args <- list()
[17:02:28.021]                 for (kk in seq_along(NAMES)) {
[17:02:28.021]                   name <- changed[[kk]]
[17:02:28.021]                   NAME <- NAMES[[kk]]
[17:02:28.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.021]                     next
[17:02:28.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.021]                 }
[17:02:28.021]                 NAMES <- toupper(added)
[17:02:28.021]                 for (kk in seq_along(NAMES)) {
[17:02:28.021]                   name <- added[[kk]]
[17:02:28.021]                   NAME <- NAMES[[kk]]
[17:02:28.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.021]                     next
[17:02:28.021]                   args[[name]] <- ""
[17:02:28.021]                 }
[17:02:28.021]                 NAMES <- toupper(removed)
[17:02:28.021]                 for (kk in seq_along(NAMES)) {
[17:02:28.021]                   name <- removed[[kk]]
[17:02:28.021]                   NAME <- NAMES[[kk]]
[17:02:28.021]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.021]                     next
[17:02:28.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.021]                 }
[17:02:28.021]                 if (length(args) > 0) 
[17:02:28.021]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.021]             }
[17:02:28.021]             else {
[17:02:28.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.021]             }
[17:02:28.021]             {
[17:02:28.021]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.021]                   0L) {
[17:02:28.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.021]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.021]                   base::options(opts)
[17:02:28.021]                 }
[17:02:28.021]                 {
[17:02:28.021]                   {
[17:02:28.021]                     NULL
[17:02:28.021]                     RNGkind("Mersenne-Twister")
[17:02:28.021]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.021]                       inherits = FALSE)
[17:02:28.021]                   }
[17:02:28.021]                   options(future.plan = NULL)
[17:02:28.021]                   if (is.na(NA_character_)) 
[17:02:28.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.021]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.021]                     .init = FALSE)
[17:02:28.021]                 }
[17:02:28.021]             }
[17:02:28.021]         }
[17:02:28.021]     })
[17:02:28.021]     if (TRUE) {
[17:02:28.021]         base::sink(type = "output", split = FALSE)
[17:02:28.021]         if (TRUE) {
[17:02:28.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.021]         }
[17:02:28.021]         else {
[17:02:28.021]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.021]         }
[17:02:28.021]         base::close(...future.stdout)
[17:02:28.021]         ...future.stdout <- NULL
[17:02:28.021]     }
[17:02:28.021]     ...future.result$conditions <- ...future.conditions
[17:02:28.021]     ...future.result$finished <- base::Sys.time()
[17:02:28.021]     ...future.result
[17:02:28.021] }
[17:02:28.023] plan(): Setting new future strategy stack:
[17:02:28.023] List of future strategies:
[17:02:28.023] 1. sequential:
[17:02:28.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.023]    - tweaked: FALSE
[17:02:28.023]    - call: NULL
[17:02:28.023] plan(): nbrOfWorkers() = 1
[17:02:28.024] plan(): Setting new future strategy stack:
[17:02:28.024] List of future strategies:
[17:02:28.024] 1. sequential:
[17:02:28.024]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.024]    - tweaked: FALSE
[17:02:28.024]    - call: future::plan("sequential")
[17:02:28.025] plan(): nbrOfWorkers() = 1
[17:02:28.025] SequentialFuture started (and completed)
[17:02:28.026] - Launch lazy future ... done
[17:02:28.026] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'remove') ...
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'list') ...
list()
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'add') ...
[17:02:28.030] getGlobalsAndPackages() ...
[17:02:28.030] Searching for globals...
[17:02:28.030] - globals found: [1] ‘{’
[17:02:28.030] Searching for globals ... DONE
[17:02:28.030] Resolving globals: FALSE
[17:02:28.031] 
[17:02:28.031] 
[17:02:28.031] getGlobalsAndPackages() ... DONE
[17:02:28.031] run() for ‘Future’ ...
[17:02:28.031] - state: ‘created’
[17:02:28.031] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.032] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.032] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.032]   - Field: ‘label’
[17:02:28.032]   - Field: ‘local’
[17:02:28.032]   - Field: ‘owner’
[17:02:28.032]   - Field: ‘envir’
[17:02:28.032]   - Field: ‘packages’
[17:02:28.032]   - Field: ‘gc’
[17:02:28.032]   - Field: ‘conditions’
[17:02:28.032]   - Field: ‘expr’
[17:02:28.033]   - Field: ‘uuid’
[17:02:28.033]   - Field: ‘seed’
[17:02:28.033]   - Field: ‘version’
[17:02:28.033]   - Field: ‘result’
[17:02:28.033]   - Field: ‘asynchronous’
[17:02:28.033]   - Field: ‘calls’
[17:02:28.033]   - Field: ‘globals’
[17:02:28.033]   - Field: ‘stdout’
[17:02:28.033]   - Field: ‘earlySignal’
[17:02:28.033]   - Field: ‘lazy’
[17:02:28.033]   - Field: ‘state’
[17:02:28.034] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.034] - Launch lazy future ...
[17:02:28.034] Packages needed by the future expression (n = 0): <none>
[17:02:28.034] Packages needed by future strategies (n = 0): <none>
[17:02:28.034] {
[17:02:28.034]     {
[17:02:28.034]         {
[17:02:28.034]             ...future.startTime <- base::Sys.time()
[17:02:28.034]             {
[17:02:28.034]                 {
[17:02:28.034]                   {
[17:02:28.034]                     base::local({
[17:02:28.034]                       has_future <- base::requireNamespace("future", 
[17:02:28.034]                         quietly = TRUE)
[17:02:28.034]                       if (has_future) {
[17:02:28.034]                         ns <- base::getNamespace("future")
[17:02:28.034]                         version <- ns[[".package"]][["version"]]
[17:02:28.034]                         if (is.null(version)) 
[17:02:28.034]                           version <- utils::packageVersion("future")
[17:02:28.034]                       }
[17:02:28.034]                       else {
[17:02:28.034]                         version <- NULL
[17:02:28.034]                       }
[17:02:28.034]                       if (!has_future || version < "1.8.0") {
[17:02:28.034]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.034]                           "", base::R.version$version.string), 
[17:02:28.034]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.034]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.034]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.034]                             "release", "version")], collapse = " "), 
[17:02:28.034]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.034]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.034]                           info)
[17:02:28.034]                         info <- base::paste(info, collapse = "; ")
[17:02:28.034]                         if (!has_future) {
[17:02:28.034]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.034]                             info)
[17:02:28.034]                         }
[17:02:28.034]                         else {
[17:02:28.034]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.034]                             info, version)
[17:02:28.034]                         }
[17:02:28.034]                         base::stop(msg)
[17:02:28.034]                       }
[17:02:28.034]                     })
[17:02:28.034]                   }
[17:02:28.034]                   ...future.strategy.old <- future::plan("list")
[17:02:28.034]                   options(future.plan = NULL)
[17:02:28.034]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.034]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.034]                 }
[17:02:28.034]                 ...future.workdir <- getwd()
[17:02:28.034]             }
[17:02:28.034]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.034]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.034]         }
[17:02:28.034]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.034]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.034]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.034]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.034]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.034]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.034]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.034]             base::names(...future.oldOptions))
[17:02:28.034]     }
[17:02:28.034]     if (FALSE) {
[17:02:28.034]     }
[17:02:28.034]     else {
[17:02:28.034]         if (TRUE) {
[17:02:28.034]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.034]                 open = "w")
[17:02:28.034]         }
[17:02:28.034]         else {
[17:02:28.034]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.034]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.034]         }
[17:02:28.034]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.034]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.034]             base::sink(type = "output", split = FALSE)
[17:02:28.034]             base::close(...future.stdout)
[17:02:28.034]         }, add = TRUE)
[17:02:28.034]     }
[17:02:28.034]     ...future.frame <- base::sys.nframe()
[17:02:28.034]     ...future.conditions <- base::list()
[17:02:28.034]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.034]     if (FALSE) {
[17:02:28.034]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.034]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.034]     }
[17:02:28.034]     ...future.result <- base::tryCatch({
[17:02:28.034]         base::withCallingHandlers({
[17:02:28.034]             ...future.value <- base::withVisible(base::local({
[17:02:28.034]                 2
[17:02:28.034]             }))
[17:02:28.034]             future::FutureResult(value = ...future.value$value, 
[17:02:28.034]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.034]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.034]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.034]                     ...future.globalenv.names))
[17:02:28.034]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.034]         }, condition = base::local({
[17:02:28.034]             c <- base::c
[17:02:28.034]             inherits <- base::inherits
[17:02:28.034]             invokeRestart <- base::invokeRestart
[17:02:28.034]             length <- base::length
[17:02:28.034]             list <- base::list
[17:02:28.034]             seq.int <- base::seq.int
[17:02:28.034]             signalCondition <- base::signalCondition
[17:02:28.034]             sys.calls <- base::sys.calls
[17:02:28.034]             `[[` <- base::`[[`
[17:02:28.034]             `+` <- base::`+`
[17:02:28.034]             `<<-` <- base::`<<-`
[17:02:28.034]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.034]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.034]                   3L)]
[17:02:28.034]             }
[17:02:28.034]             function(cond) {
[17:02:28.034]                 is_error <- inherits(cond, "error")
[17:02:28.034]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.034]                   NULL)
[17:02:28.034]                 if (is_error) {
[17:02:28.034]                   sessionInformation <- function() {
[17:02:28.034]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.034]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.034]                       search = base::search(), system = base::Sys.info())
[17:02:28.034]                   }
[17:02:28.034]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.034]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.034]                     cond$call), session = sessionInformation(), 
[17:02:28.034]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.034]                   signalCondition(cond)
[17:02:28.034]                 }
[17:02:28.034]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.034]                 "immediateCondition"))) {
[17:02:28.034]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.034]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.034]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.034]                   if (TRUE && !signal) {
[17:02:28.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.034]                     {
[17:02:28.034]                       inherits <- base::inherits
[17:02:28.034]                       invokeRestart <- base::invokeRestart
[17:02:28.034]                       is.null <- base::is.null
[17:02:28.034]                       muffled <- FALSE
[17:02:28.034]                       if (inherits(cond, "message")) {
[17:02:28.034]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.034]                         if (muffled) 
[17:02:28.034]                           invokeRestart("muffleMessage")
[17:02:28.034]                       }
[17:02:28.034]                       else if (inherits(cond, "warning")) {
[17:02:28.034]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.034]                         if (muffled) 
[17:02:28.034]                           invokeRestart("muffleWarning")
[17:02:28.034]                       }
[17:02:28.034]                       else if (inherits(cond, "condition")) {
[17:02:28.034]                         if (!is.null(pattern)) {
[17:02:28.034]                           computeRestarts <- base::computeRestarts
[17:02:28.034]                           grepl <- base::grepl
[17:02:28.034]                           restarts <- computeRestarts(cond)
[17:02:28.034]                           for (restart in restarts) {
[17:02:28.034]                             name <- restart$name
[17:02:28.034]                             if (is.null(name)) 
[17:02:28.034]                               next
[17:02:28.034]                             if (!grepl(pattern, name)) 
[17:02:28.034]                               next
[17:02:28.034]                             invokeRestart(restart)
[17:02:28.034]                             muffled <- TRUE
[17:02:28.034]                             break
[17:02:28.034]                           }
[17:02:28.034]                         }
[17:02:28.034]                       }
[17:02:28.034]                       invisible(muffled)
[17:02:28.034]                     }
[17:02:28.034]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.034]                   }
[17:02:28.034]                 }
[17:02:28.034]                 else {
[17:02:28.034]                   if (TRUE) {
[17:02:28.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.034]                     {
[17:02:28.034]                       inherits <- base::inherits
[17:02:28.034]                       invokeRestart <- base::invokeRestart
[17:02:28.034]                       is.null <- base::is.null
[17:02:28.034]                       muffled <- FALSE
[17:02:28.034]                       if (inherits(cond, "message")) {
[17:02:28.034]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.034]                         if (muffled) 
[17:02:28.034]                           invokeRestart("muffleMessage")
[17:02:28.034]                       }
[17:02:28.034]                       else if (inherits(cond, "warning")) {
[17:02:28.034]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.034]                         if (muffled) 
[17:02:28.034]                           invokeRestart("muffleWarning")
[17:02:28.034]                       }
[17:02:28.034]                       else if (inherits(cond, "condition")) {
[17:02:28.034]                         if (!is.null(pattern)) {
[17:02:28.034]                           computeRestarts <- base::computeRestarts
[17:02:28.034]                           grepl <- base::grepl
[17:02:28.034]                           restarts <- computeRestarts(cond)
[17:02:28.034]                           for (restart in restarts) {
[17:02:28.034]                             name <- restart$name
[17:02:28.034]                             if (is.null(name)) 
[17:02:28.034]                               next
[17:02:28.034]                             if (!grepl(pattern, name)) 
[17:02:28.034]                               next
[17:02:28.034]                             invokeRestart(restart)
[17:02:28.034]                             muffled <- TRUE
[17:02:28.034]                             break
[17:02:28.034]                           }
[17:02:28.034]                         }
[17:02:28.034]                       }
[17:02:28.034]                       invisible(muffled)
[17:02:28.034]                     }
[17:02:28.034]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.034]                   }
[17:02:28.034]                 }
[17:02:28.034]             }
[17:02:28.034]         }))
[17:02:28.034]     }, error = function(ex) {
[17:02:28.034]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.034]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.034]                 ...future.rng), started = ...future.startTime, 
[17:02:28.034]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.034]             version = "1.8"), class = "FutureResult")
[17:02:28.034]     }, finally = {
[17:02:28.034]         if (!identical(...future.workdir, getwd())) 
[17:02:28.034]             setwd(...future.workdir)
[17:02:28.034]         {
[17:02:28.034]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.034]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.034]             }
[17:02:28.034]             base::options(...future.oldOptions)
[17:02:28.034]             if (.Platform$OS.type == "windows") {
[17:02:28.034]                 old_names <- names(...future.oldEnvVars)
[17:02:28.034]                 envs <- base::Sys.getenv()
[17:02:28.034]                 names <- names(envs)
[17:02:28.034]                 common <- intersect(names, old_names)
[17:02:28.034]                 added <- setdiff(names, old_names)
[17:02:28.034]                 removed <- setdiff(old_names, names)
[17:02:28.034]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.034]                   envs[common]]
[17:02:28.034]                 NAMES <- toupper(changed)
[17:02:28.034]                 args <- list()
[17:02:28.034]                 for (kk in seq_along(NAMES)) {
[17:02:28.034]                   name <- changed[[kk]]
[17:02:28.034]                   NAME <- NAMES[[kk]]
[17:02:28.034]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.034]                     next
[17:02:28.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.034]                 }
[17:02:28.034]                 NAMES <- toupper(added)
[17:02:28.034]                 for (kk in seq_along(NAMES)) {
[17:02:28.034]                   name <- added[[kk]]
[17:02:28.034]                   NAME <- NAMES[[kk]]
[17:02:28.034]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.034]                     next
[17:02:28.034]                   args[[name]] <- ""
[17:02:28.034]                 }
[17:02:28.034]                 NAMES <- toupper(removed)
[17:02:28.034]                 for (kk in seq_along(NAMES)) {
[17:02:28.034]                   name <- removed[[kk]]
[17:02:28.034]                   NAME <- NAMES[[kk]]
[17:02:28.034]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.034]                     next
[17:02:28.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.034]                 }
[17:02:28.034]                 if (length(args) > 0) 
[17:02:28.034]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.034]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.034]             }
[17:02:28.034]             else {
[17:02:28.034]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.034]             }
[17:02:28.034]             {
[17:02:28.034]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.034]                   0L) {
[17:02:28.034]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.034]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.034]                   base::options(opts)
[17:02:28.034]                 }
[17:02:28.034]                 {
[17:02:28.034]                   {
[17:02:28.034]                     NULL
[17:02:28.034]                     RNGkind("Mersenne-Twister")
[17:02:28.034]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.034]                       inherits = FALSE)
[17:02:28.034]                   }
[17:02:28.034]                   options(future.plan = NULL)
[17:02:28.034]                   if (is.na(NA_character_)) 
[17:02:28.034]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.034]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.034]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.034]                     .init = FALSE)
[17:02:28.034]                 }
[17:02:28.034]             }
[17:02:28.034]         }
[17:02:28.034]     })
[17:02:28.034]     if (TRUE) {
[17:02:28.034]         base::sink(type = "output", split = FALSE)
[17:02:28.034]         if (TRUE) {
[17:02:28.034]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.034]         }
[17:02:28.034]         else {
[17:02:28.034]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.034]         }
[17:02:28.034]         base::close(...future.stdout)
[17:02:28.034]         ...future.stdout <- NULL
[17:02:28.034]     }
[17:02:28.034]     ...future.result$conditions <- ...future.conditions
[17:02:28.034]     ...future.result$finished <- base::Sys.time()
[17:02:28.034]     ...future.result
[17:02:28.034] }
[17:02:28.036] plan(): Setting new future strategy stack:
[17:02:28.036] List of future strategies:
[17:02:28.036] 1. sequential:
[17:02:28.036]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.036]    - tweaked: FALSE
[17:02:28.036]    - call: NULL
[17:02:28.037] plan(): nbrOfWorkers() = 1
[17:02:28.037] plan(): Setting new future strategy stack:
[17:02:28.037] List of future strategies:
[17:02:28.037] 1. sequential:
[17:02:28.037]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.037]    - tweaked: FALSE
[17:02:28.037]    - call: future::plan("sequential")
[17:02:28.038] plan(): nbrOfWorkers() = 1
[17:02:28.038] SequentialFuture started (and completed)
[17:02:28.038] - Launch lazy future ... done
[17:02:28.038] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'collect-first') ...
[17:02:28.039] resolved() for ‘SequentialFuture’ ...
[17:02:28.039] - state: ‘finished’
[17:02:28.039] - run: FALSE
[17:02:28.040] - result: ‘FutureResult’
[17:02:28.040] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'add') ...
[17:02:28.040] getGlobalsAndPackages() ...
[17:02:28.040] Searching for globals...
[17:02:28.041] - globals found: [1] ‘{’
[17:02:28.041] Searching for globals ... DONE
[17:02:28.041] Resolving globals: FALSE
[17:02:28.041] 
[17:02:28.041] 
[17:02:28.041] getGlobalsAndPackages() ... DONE
[17:02:28.042] run() for ‘Future’ ...
[17:02:28.042] - state: ‘created’
[17:02:28.042] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.042] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.042] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.042]   - Field: ‘label’
[17:02:28.042]   - Field: ‘local’
[17:02:28.042]   - Field: ‘owner’
[17:02:28.043]   - Field: ‘envir’
[17:02:28.043]   - Field: ‘packages’
[17:02:28.043]   - Field: ‘gc’
[17:02:28.043]   - Field: ‘conditions’
[17:02:28.043]   - Field: ‘expr’
[17:02:28.043]   - Field: ‘uuid’
[17:02:28.043]   - Field: ‘seed’
[17:02:28.043]   - Field: ‘version’
[17:02:28.043]   - Field: ‘result’
[17:02:28.043]   - Field: ‘asynchronous’
[17:02:28.043]   - Field: ‘calls’
[17:02:28.044]   - Field: ‘globals’
[17:02:28.044]   - Field: ‘stdout’
[17:02:28.044]   - Field: ‘earlySignal’
[17:02:28.044]   - Field: ‘lazy’
[17:02:28.044]   - Field: ‘state’
[17:02:28.044] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.044] - Launch lazy future ...
[17:02:28.044] Packages needed by the future expression (n = 0): <none>
[17:02:28.044] Packages needed by future strategies (n = 0): <none>
[17:02:28.045] {
[17:02:28.045]     {
[17:02:28.045]         {
[17:02:28.045]             ...future.startTime <- base::Sys.time()
[17:02:28.045]             {
[17:02:28.045]                 {
[17:02:28.045]                   {
[17:02:28.045]                     base::local({
[17:02:28.045]                       has_future <- base::requireNamespace("future", 
[17:02:28.045]                         quietly = TRUE)
[17:02:28.045]                       if (has_future) {
[17:02:28.045]                         ns <- base::getNamespace("future")
[17:02:28.045]                         version <- ns[[".package"]][["version"]]
[17:02:28.045]                         if (is.null(version)) 
[17:02:28.045]                           version <- utils::packageVersion("future")
[17:02:28.045]                       }
[17:02:28.045]                       else {
[17:02:28.045]                         version <- NULL
[17:02:28.045]                       }
[17:02:28.045]                       if (!has_future || version < "1.8.0") {
[17:02:28.045]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.045]                           "", base::R.version$version.string), 
[17:02:28.045]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.045]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.045]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.045]                             "release", "version")], collapse = " "), 
[17:02:28.045]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.045]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.045]                           info)
[17:02:28.045]                         info <- base::paste(info, collapse = "; ")
[17:02:28.045]                         if (!has_future) {
[17:02:28.045]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.045]                             info)
[17:02:28.045]                         }
[17:02:28.045]                         else {
[17:02:28.045]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.045]                             info, version)
[17:02:28.045]                         }
[17:02:28.045]                         base::stop(msg)
[17:02:28.045]                       }
[17:02:28.045]                     })
[17:02:28.045]                   }
[17:02:28.045]                   ...future.strategy.old <- future::plan("list")
[17:02:28.045]                   options(future.plan = NULL)
[17:02:28.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.045]                 }
[17:02:28.045]                 ...future.workdir <- getwd()
[17:02:28.045]             }
[17:02:28.045]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.045]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.045]         }
[17:02:28.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.045]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.045]             base::names(...future.oldOptions))
[17:02:28.045]     }
[17:02:28.045]     if (FALSE) {
[17:02:28.045]     }
[17:02:28.045]     else {
[17:02:28.045]         if (TRUE) {
[17:02:28.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.045]                 open = "w")
[17:02:28.045]         }
[17:02:28.045]         else {
[17:02:28.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.045]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.045]         }
[17:02:28.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.045]             base::sink(type = "output", split = FALSE)
[17:02:28.045]             base::close(...future.stdout)
[17:02:28.045]         }, add = TRUE)
[17:02:28.045]     }
[17:02:28.045]     ...future.frame <- base::sys.nframe()
[17:02:28.045]     ...future.conditions <- base::list()
[17:02:28.045]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.045]     if (FALSE) {
[17:02:28.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.045]     }
[17:02:28.045]     ...future.result <- base::tryCatch({
[17:02:28.045]         base::withCallingHandlers({
[17:02:28.045]             ...future.value <- base::withVisible(base::local({
[17:02:28.045]                 2
[17:02:28.045]             }))
[17:02:28.045]             future::FutureResult(value = ...future.value$value, 
[17:02:28.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.045]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.045]                     ...future.globalenv.names))
[17:02:28.045]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.045]         }, condition = base::local({
[17:02:28.045]             c <- base::c
[17:02:28.045]             inherits <- base::inherits
[17:02:28.045]             invokeRestart <- base::invokeRestart
[17:02:28.045]             length <- base::length
[17:02:28.045]             list <- base::list
[17:02:28.045]             seq.int <- base::seq.int
[17:02:28.045]             signalCondition <- base::signalCondition
[17:02:28.045]             sys.calls <- base::sys.calls
[17:02:28.045]             `[[` <- base::`[[`
[17:02:28.045]             `+` <- base::`+`
[17:02:28.045]             `<<-` <- base::`<<-`
[17:02:28.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.045]                   3L)]
[17:02:28.045]             }
[17:02:28.045]             function(cond) {
[17:02:28.045]                 is_error <- inherits(cond, "error")
[17:02:28.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.045]                   NULL)
[17:02:28.045]                 if (is_error) {
[17:02:28.045]                   sessionInformation <- function() {
[17:02:28.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.045]                       search = base::search(), system = base::Sys.info())
[17:02:28.045]                   }
[17:02:28.045]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.045]                     cond$call), session = sessionInformation(), 
[17:02:28.045]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.045]                   signalCondition(cond)
[17:02:28.045]                 }
[17:02:28.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.045]                 "immediateCondition"))) {
[17:02:28.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.045]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.045]                   if (TRUE && !signal) {
[17:02:28.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.045]                     {
[17:02:28.045]                       inherits <- base::inherits
[17:02:28.045]                       invokeRestart <- base::invokeRestart
[17:02:28.045]                       is.null <- base::is.null
[17:02:28.045]                       muffled <- FALSE
[17:02:28.045]                       if (inherits(cond, "message")) {
[17:02:28.045]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.045]                         if (muffled) 
[17:02:28.045]                           invokeRestart("muffleMessage")
[17:02:28.045]                       }
[17:02:28.045]                       else if (inherits(cond, "warning")) {
[17:02:28.045]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.045]                         if (muffled) 
[17:02:28.045]                           invokeRestart("muffleWarning")
[17:02:28.045]                       }
[17:02:28.045]                       else if (inherits(cond, "condition")) {
[17:02:28.045]                         if (!is.null(pattern)) {
[17:02:28.045]                           computeRestarts <- base::computeRestarts
[17:02:28.045]                           grepl <- base::grepl
[17:02:28.045]                           restarts <- computeRestarts(cond)
[17:02:28.045]                           for (restart in restarts) {
[17:02:28.045]                             name <- restart$name
[17:02:28.045]                             if (is.null(name)) 
[17:02:28.045]                               next
[17:02:28.045]                             if (!grepl(pattern, name)) 
[17:02:28.045]                               next
[17:02:28.045]                             invokeRestart(restart)
[17:02:28.045]                             muffled <- TRUE
[17:02:28.045]                             break
[17:02:28.045]                           }
[17:02:28.045]                         }
[17:02:28.045]                       }
[17:02:28.045]                       invisible(muffled)
[17:02:28.045]                     }
[17:02:28.045]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.045]                   }
[17:02:28.045]                 }
[17:02:28.045]                 else {
[17:02:28.045]                   if (TRUE) {
[17:02:28.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.045]                     {
[17:02:28.045]                       inherits <- base::inherits
[17:02:28.045]                       invokeRestart <- base::invokeRestart
[17:02:28.045]                       is.null <- base::is.null
[17:02:28.045]                       muffled <- FALSE
[17:02:28.045]                       if (inherits(cond, "message")) {
[17:02:28.045]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.045]                         if (muffled) 
[17:02:28.045]                           invokeRestart("muffleMessage")
[17:02:28.045]                       }
[17:02:28.045]                       else if (inherits(cond, "warning")) {
[17:02:28.045]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.045]                         if (muffled) 
[17:02:28.045]                           invokeRestart("muffleWarning")
[17:02:28.045]                       }
[17:02:28.045]                       else if (inherits(cond, "condition")) {
[17:02:28.045]                         if (!is.null(pattern)) {
[17:02:28.045]                           computeRestarts <- base::computeRestarts
[17:02:28.045]                           grepl <- base::grepl
[17:02:28.045]                           restarts <- computeRestarts(cond)
[17:02:28.045]                           for (restart in restarts) {
[17:02:28.045]                             name <- restart$name
[17:02:28.045]                             if (is.null(name)) 
[17:02:28.045]                               next
[17:02:28.045]                             if (!grepl(pattern, name)) 
[17:02:28.045]                               next
[17:02:28.045]                             invokeRestart(restart)
[17:02:28.045]                             muffled <- TRUE
[17:02:28.045]                             break
[17:02:28.045]                           }
[17:02:28.045]                         }
[17:02:28.045]                       }
[17:02:28.045]                       invisible(muffled)
[17:02:28.045]                     }
[17:02:28.045]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.045]                   }
[17:02:28.045]                 }
[17:02:28.045]             }
[17:02:28.045]         }))
[17:02:28.045]     }, error = function(ex) {
[17:02:28.045]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.045]                 ...future.rng), started = ...future.startTime, 
[17:02:28.045]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.045]             version = "1.8"), class = "FutureResult")
[17:02:28.045]     }, finally = {
[17:02:28.045]         if (!identical(...future.workdir, getwd())) 
[17:02:28.045]             setwd(...future.workdir)
[17:02:28.045]         {
[17:02:28.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.045]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.045]             }
[17:02:28.045]             base::options(...future.oldOptions)
[17:02:28.045]             if (.Platform$OS.type == "windows") {
[17:02:28.045]                 old_names <- names(...future.oldEnvVars)
[17:02:28.045]                 envs <- base::Sys.getenv()
[17:02:28.045]                 names <- names(envs)
[17:02:28.045]                 common <- intersect(names, old_names)
[17:02:28.045]                 added <- setdiff(names, old_names)
[17:02:28.045]                 removed <- setdiff(old_names, names)
[17:02:28.045]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.045]                   envs[common]]
[17:02:28.045]                 NAMES <- toupper(changed)
[17:02:28.045]                 args <- list()
[17:02:28.045]                 for (kk in seq_along(NAMES)) {
[17:02:28.045]                   name <- changed[[kk]]
[17:02:28.045]                   NAME <- NAMES[[kk]]
[17:02:28.045]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.045]                     next
[17:02:28.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.045]                 }
[17:02:28.045]                 NAMES <- toupper(added)
[17:02:28.045]                 for (kk in seq_along(NAMES)) {
[17:02:28.045]                   name <- added[[kk]]
[17:02:28.045]                   NAME <- NAMES[[kk]]
[17:02:28.045]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.045]                     next
[17:02:28.045]                   args[[name]] <- ""
[17:02:28.045]                 }
[17:02:28.045]                 NAMES <- toupper(removed)
[17:02:28.045]                 for (kk in seq_along(NAMES)) {
[17:02:28.045]                   name <- removed[[kk]]
[17:02:28.045]                   NAME <- NAMES[[kk]]
[17:02:28.045]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.045]                     next
[17:02:28.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.045]                 }
[17:02:28.045]                 if (length(args) > 0) 
[17:02:28.045]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.045]             }
[17:02:28.045]             else {
[17:02:28.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.045]             }
[17:02:28.045]             {
[17:02:28.045]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.045]                   0L) {
[17:02:28.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.045]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.045]                   base::options(opts)
[17:02:28.045]                 }
[17:02:28.045]                 {
[17:02:28.045]                   {
[17:02:28.045]                     NULL
[17:02:28.045]                     RNGkind("Mersenne-Twister")
[17:02:28.045]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.045]                       inherits = FALSE)
[17:02:28.045]                   }
[17:02:28.045]                   options(future.plan = NULL)
[17:02:28.045]                   if (is.na(NA_character_)) 
[17:02:28.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.045]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.045]                     .init = FALSE)
[17:02:28.045]                 }
[17:02:28.045]             }
[17:02:28.045]         }
[17:02:28.045]     })
[17:02:28.045]     if (TRUE) {
[17:02:28.045]         base::sink(type = "output", split = FALSE)
[17:02:28.045]         if (TRUE) {
[17:02:28.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.045]         }
[17:02:28.045]         else {
[17:02:28.045]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.045]         }
[17:02:28.045]         base::close(...future.stdout)
[17:02:28.045]         ...future.stdout <- NULL
[17:02:28.045]     }
[17:02:28.045]     ...future.result$conditions <- ...future.conditions
[17:02:28.045]     ...future.result$finished <- base::Sys.time()
[17:02:28.045]     ...future.result
[17:02:28.045] }
[17:02:28.046] plan(): Setting new future strategy stack:
[17:02:28.047] List of future strategies:
[17:02:28.047] 1. sequential:
[17:02:28.047]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.047]    - tweaked: FALSE
[17:02:28.047]    - call: NULL
[17:02:28.047] plan(): nbrOfWorkers() = 1
[17:02:28.048] plan(): Setting new future strategy stack:
[17:02:28.048] List of future strategies:
[17:02:28.048] 1. sequential:
[17:02:28.048]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.048]    - tweaked: FALSE
[17:02:28.048]    - call: future::plan("sequential")
[17:02:28.048] plan(): nbrOfWorkers() = 1
[17:02:28.048] SequentialFuture started (and completed)
[17:02:28.048] - Launch lazy future ... done
[17:02:28.049] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'reset') ...
*** FutureRegistry('multicore-1264d8fb-510d-306c-fb6b-678195ff3f31', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:02:28.049] getGlobalsAndPackages() ...
[17:02:28.049] Searching for globals...
[17:02:28.050] - globals found: [1] ‘{’
[17:02:28.050] Searching for globals ... DONE
[17:02:28.050] Resolving globals: FALSE
[17:02:28.050] 
[17:02:28.051] 
[17:02:28.051] getGlobalsAndPackages() ... DONE
[17:02:28.051] run() for ‘Future’ ...
[17:02:28.051] - state: ‘created’
[17:02:28.051] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.053] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.053] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.053]   - Field: ‘label’
[17:02:28.053]   - Field: ‘local’
[17:02:28.054]   - Field: ‘owner’
[17:02:28.054]   - Field: ‘envir’
[17:02:28.054]   - Field: ‘packages’
[17:02:28.054]   - Field: ‘gc’
[17:02:28.054]   - Field: ‘conditions’
[17:02:28.054]   - Field: ‘expr’
[17:02:28.054]   - Field: ‘uuid’
[17:02:28.054]   - Field: ‘seed’
[17:02:28.054]   - Field: ‘version’
[17:02:28.054]   - Field: ‘result’
[17:02:28.054]   - Field: ‘asynchronous’
[17:02:28.055]   - Field: ‘calls’
[17:02:28.055]   - Field: ‘globals’
[17:02:28.055]   - Field: ‘stdout’
[17:02:28.055]   - Field: ‘earlySignal’
[17:02:28.055]   - Field: ‘lazy’
[17:02:28.055]   - Field: ‘state’
[17:02:28.055] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.055] - Launch lazy future ...
[17:02:28.055] Packages needed by the future expression (n = 0): <none>
[17:02:28.055] Packages needed by future strategies (n = 0): <none>
[17:02:28.056] {
[17:02:28.056]     {
[17:02:28.056]         {
[17:02:28.056]             ...future.startTime <- base::Sys.time()
[17:02:28.056]             {
[17:02:28.056]                 {
[17:02:28.056]                   {
[17:02:28.056]                     base::local({
[17:02:28.056]                       has_future <- base::requireNamespace("future", 
[17:02:28.056]                         quietly = TRUE)
[17:02:28.056]                       if (has_future) {
[17:02:28.056]                         ns <- base::getNamespace("future")
[17:02:28.056]                         version <- ns[[".package"]][["version"]]
[17:02:28.056]                         if (is.null(version)) 
[17:02:28.056]                           version <- utils::packageVersion("future")
[17:02:28.056]                       }
[17:02:28.056]                       else {
[17:02:28.056]                         version <- NULL
[17:02:28.056]                       }
[17:02:28.056]                       if (!has_future || version < "1.8.0") {
[17:02:28.056]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.056]                           "", base::R.version$version.string), 
[17:02:28.056]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.056]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.056]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.056]                             "release", "version")], collapse = " "), 
[17:02:28.056]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.056]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.056]                           info)
[17:02:28.056]                         info <- base::paste(info, collapse = "; ")
[17:02:28.056]                         if (!has_future) {
[17:02:28.056]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.056]                             info)
[17:02:28.056]                         }
[17:02:28.056]                         else {
[17:02:28.056]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.056]                             info, version)
[17:02:28.056]                         }
[17:02:28.056]                         base::stop(msg)
[17:02:28.056]                       }
[17:02:28.056]                     })
[17:02:28.056]                   }
[17:02:28.056]                   ...future.strategy.old <- future::plan("list")
[17:02:28.056]                   options(future.plan = NULL)
[17:02:28.056]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.056]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.056]                 }
[17:02:28.056]                 ...future.workdir <- getwd()
[17:02:28.056]             }
[17:02:28.056]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.056]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.056]         }
[17:02:28.056]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.056]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.056]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.056]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.056]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.056]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.056]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.056]             base::names(...future.oldOptions))
[17:02:28.056]     }
[17:02:28.056]     if (FALSE) {
[17:02:28.056]     }
[17:02:28.056]     else {
[17:02:28.056]         if (TRUE) {
[17:02:28.056]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.056]                 open = "w")
[17:02:28.056]         }
[17:02:28.056]         else {
[17:02:28.056]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.056]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.056]         }
[17:02:28.056]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.056]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.056]             base::sink(type = "output", split = FALSE)
[17:02:28.056]             base::close(...future.stdout)
[17:02:28.056]         }, add = TRUE)
[17:02:28.056]     }
[17:02:28.056]     ...future.frame <- base::sys.nframe()
[17:02:28.056]     ...future.conditions <- base::list()
[17:02:28.056]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.056]     if (FALSE) {
[17:02:28.056]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.056]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.056]     }
[17:02:28.056]     ...future.result <- base::tryCatch({
[17:02:28.056]         base::withCallingHandlers({
[17:02:28.056]             ...future.value <- base::withVisible(base::local({
[17:02:28.056]                 1
[17:02:28.056]             }))
[17:02:28.056]             future::FutureResult(value = ...future.value$value, 
[17:02:28.056]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.056]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.056]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.056]                     ...future.globalenv.names))
[17:02:28.056]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.056]         }, condition = base::local({
[17:02:28.056]             c <- base::c
[17:02:28.056]             inherits <- base::inherits
[17:02:28.056]             invokeRestart <- base::invokeRestart
[17:02:28.056]             length <- base::length
[17:02:28.056]             list <- base::list
[17:02:28.056]             seq.int <- base::seq.int
[17:02:28.056]             signalCondition <- base::signalCondition
[17:02:28.056]             sys.calls <- base::sys.calls
[17:02:28.056]             `[[` <- base::`[[`
[17:02:28.056]             `+` <- base::`+`
[17:02:28.056]             `<<-` <- base::`<<-`
[17:02:28.056]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.056]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.056]                   3L)]
[17:02:28.056]             }
[17:02:28.056]             function(cond) {
[17:02:28.056]                 is_error <- inherits(cond, "error")
[17:02:28.056]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.056]                   NULL)
[17:02:28.056]                 if (is_error) {
[17:02:28.056]                   sessionInformation <- function() {
[17:02:28.056]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.056]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.056]                       search = base::search(), system = base::Sys.info())
[17:02:28.056]                   }
[17:02:28.056]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.056]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.056]                     cond$call), session = sessionInformation(), 
[17:02:28.056]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.056]                   signalCondition(cond)
[17:02:28.056]                 }
[17:02:28.056]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.056]                 "immediateCondition"))) {
[17:02:28.056]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.056]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.056]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.056]                   if (TRUE && !signal) {
[17:02:28.056]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.056]                     {
[17:02:28.056]                       inherits <- base::inherits
[17:02:28.056]                       invokeRestart <- base::invokeRestart
[17:02:28.056]                       is.null <- base::is.null
[17:02:28.056]                       muffled <- FALSE
[17:02:28.056]                       if (inherits(cond, "message")) {
[17:02:28.056]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.056]                         if (muffled) 
[17:02:28.056]                           invokeRestart("muffleMessage")
[17:02:28.056]                       }
[17:02:28.056]                       else if (inherits(cond, "warning")) {
[17:02:28.056]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.056]                         if (muffled) 
[17:02:28.056]                           invokeRestart("muffleWarning")
[17:02:28.056]                       }
[17:02:28.056]                       else if (inherits(cond, "condition")) {
[17:02:28.056]                         if (!is.null(pattern)) {
[17:02:28.056]                           computeRestarts <- base::computeRestarts
[17:02:28.056]                           grepl <- base::grepl
[17:02:28.056]                           restarts <- computeRestarts(cond)
[17:02:28.056]                           for (restart in restarts) {
[17:02:28.056]                             name <- restart$name
[17:02:28.056]                             if (is.null(name)) 
[17:02:28.056]                               next
[17:02:28.056]                             if (!grepl(pattern, name)) 
[17:02:28.056]                               next
[17:02:28.056]                             invokeRestart(restart)
[17:02:28.056]                             muffled <- TRUE
[17:02:28.056]                             break
[17:02:28.056]                           }
[17:02:28.056]                         }
[17:02:28.056]                       }
[17:02:28.056]                       invisible(muffled)
[17:02:28.056]                     }
[17:02:28.056]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.056]                   }
[17:02:28.056]                 }
[17:02:28.056]                 else {
[17:02:28.056]                   if (TRUE) {
[17:02:28.056]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.056]                     {
[17:02:28.056]                       inherits <- base::inherits
[17:02:28.056]                       invokeRestart <- base::invokeRestart
[17:02:28.056]                       is.null <- base::is.null
[17:02:28.056]                       muffled <- FALSE
[17:02:28.056]                       if (inherits(cond, "message")) {
[17:02:28.056]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.056]                         if (muffled) 
[17:02:28.056]                           invokeRestart("muffleMessage")
[17:02:28.056]                       }
[17:02:28.056]                       else if (inherits(cond, "warning")) {
[17:02:28.056]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.056]                         if (muffled) 
[17:02:28.056]                           invokeRestart("muffleWarning")
[17:02:28.056]                       }
[17:02:28.056]                       else if (inherits(cond, "condition")) {
[17:02:28.056]                         if (!is.null(pattern)) {
[17:02:28.056]                           computeRestarts <- base::computeRestarts
[17:02:28.056]                           grepl <- base::grepl
[17:02:28.056]                           restarts <- computeRestarts(cond)
[17:02:28.056]                           for (restart in restarts) {
[17:02:28.056]                             name <- restart$name
[17:02:28.056]                             if (is.null(name)) 
[17:02:28.056]                               next
[17:02:28.056]                             if (!grepl(pattern, name)) 
[17:02:28.056]                               next
[17:02:28.056]                             invokeRestart(restart)
[17:02:28.056]                             muffled <- TRUE
[17:02:28.056]                             break
[17:02:28.056]                           }
[17:02:28.056]                         }
[17:02:28.056]                       }
[17:02:28.056]                       invisible(muffled)
[17:02:28.056]                     }
[17:02:28.056]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.056]                   }
[17:02:28.056]                 }
[17:02:28.056]             }
[17:02:28.056]         }))
[17:02:28.056]     }, error = function(ex) {
[17:02:28.056]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.056]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.056]                 ...future.rng), started = ...future.startTime, 
[17:02:28.056]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.056]             version = "1.8"), class = "FutureResult")
[17:02:28.056]     }, finally = {
[17:02:28.056]         if (!identical(...future.workdir, getwd())) 
[17:02:28.056]             setwd(...future.workdir)
[17:02:28.056]         {
[17:02:28.056]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.056]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.056]             }
[17:02:28.056]             base::options(...future.oldOptions)
[17:02:28.056]             if (.Platform$OS.type == "windows") {
[17:02:28.056]                 old_names <- names(...future.oldEnvVars)
[17:02:28.056]                 envs <- base::Sys.getenv()
[17:02:28.056]                 names <- names(envs)
[17:02:28.056]                 common <- intersect(names, old_names)
[17:02:28.056]                 added <- setdiff(names, old_names)
[17:02:28.056]                 removed <- setdiff(old_names, names)
[17:02:28.056]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.056]                   envs[common]]
[17:02:28.056]                 NAMES <- toupper(changed)
[17:02:28.056]                 args <- list()
[17:02:28.056]                 for (kk in seq_along(NAMES)) {
[17:02:28.056]                   name <- changed[[kk]]
[17:02:28.056]                   NAME <- NAMES[[kk]]
[17:02:28.056]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.056]                     next
[17:02:28.056]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.056]                 }
[17:02:28.056]                 NAMES <- toupper(added)
[17:02:28.056]                 for (kk in seq_along(NAMES)) {
[17:02:28.056]                   name <- added[[kk]]
[17:02:28.056]                   NAME <- NAMES[[kk]]
[17:02:28.056]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.056]                     next
[17:02:28.056]                   args[[name]] <- ""
[17:02:28.056]                 }
[17:02:28.056]                 NAMES <- toupper(removed)
[17:02:28.056]                 for (kk in seq_along(NAMES)) {
[17:02:28.056]                   name <- removed[[kk]]
[17:02:28.056]                   NAME <- NAMES[[kk]]
[17:02:28.056]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.056]                     next
[17:02:28.056]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.056]                 }
[17:02:28.056]                 if (length(args) > 0) 
[17:02:28.056]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.056]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.056]             }
[17:02:28.056]             else {
[17:02:28.056]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.056]             }
[17:02:28.056]             {
[17:02:28.056]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.056]                   0L) {
[17:02:28.056]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.056]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.056]                   base::options(opts)
[17:02:28.056]                 }
[17:02:28.056]                 {
[17:02:28.056]                   {
[17:02:28.056]                     NULL
[17:02:28.056]                     RNGkind("Mersenne-Twister")
[17:02:28.056]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.056]                       inherits = FALSE)
[17:02:28.056]                   }
[17:02:28.056]                   options(future.plan = NULL)
[17:02:28.056]                   if (is.na(NA_character_)) 
[17:02:28.056]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.056]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.056]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.056]                     .init = FALSE)
[17:02:28.056]                 }
[17:02:28.056]             }
[17:02:28.056]         }
[17:02:28.056]     })
[17:02:28.056]     if (TRUE) {
[17:02:28.056]         base::sink(type = "output", split = FALSE)
[17:02:28.056]         if (TRUE) {
[17:02:28.056]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.056]         }
[17:02:28.056]         else {
[17:02:28.056]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.056]         }
[17:02:28.056]         base::close(...future.stdout)
[17:02:28.056]         ...future.stdout <- NULL
[17:02:28.056]     }
[17:02:28.056]     ...future.result$conditions <- ...future.conditions
[17:02:28.056]     ...future.result$finished <- base::Sys.time()
[17:02:28.056]     ...future.result
[17:02:28.056] }
[17:02:28.058] plan(): Setting new future strategy stack:
[17:02:28.058] List of future strategies:
[17:02:28.058] 1. sequential:
[17:02:28.058]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.058]    - tweaked: FALSE
[17:02:28.058]    - call: NULL
[17:02:28.058] plan(): nbrOfWorkers() = 1
[17:02:28.059] plan(): Setting new future strategy stack:
[17:02:28.059] List of future strategies:
[17:02:28.059] 1. sequential:
[17:02:28.059]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.059]    - tweaked: FALSE
[17:02:28.059]    - call: future::plan("sequential")
[17:02:28.059] plan(): nbrOfWorkers() = 1
[17:02:28.059] SequentialFuture started (and completed)
[17:02:28.060] - Launch lazy future ... done
[17:02:28.060] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:02:28.061] getGlobalsAndPackages() ...
[17:02:28.061] Searching for globals...
[17:02:28.061] - globals found: [1] ‘{’
[17:02:28.061] Searching for globals ... DONE
[17:02:28.062] Resolving globals: FALSE
[17:02:28.062] 
[17:02:28.062] 
[17:02:28.062] getGlobalsAndPackages() ... DONE
[17:02:28.062] run() for ‘Future’ ...
[17:02:28.062] - state: ‘created’
[17:02:28.062] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.063] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.063] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.063]   - Field: ‘label’
[17:02:28.063]   - Field: ‘local’
[17:02:28.063]   - Field: ‘owner’
[17:02:28.063]   - Field: ‘envir’
[17:02:28.063]   - Field: ‘packages’
[17:02:28.063]   - Field: ‘gc’
[17:02:28.063]   - Field: ‘conditions’
[17:02:28.064]   - Field: ‘expr’
[17:02:28.064]   - Field: ‘uuid’
[17:02:28.064]   - Field: ‘seed’
[17:02:28.064]   - Field: ‘version’
[17:02:28.064]   - Field: ‘result’
[17:02:28.064]   - Field: ‘asynchronous’
[17:02:28.064]   - Field: ‘calls’
[17:02:28.064]   - Field: ‘globals’
[17:02:28.064]   - Field: ‘stdout’
[17:02:28.064]   - Field: ‘earlySignal’
[17:02:28.064]   - Field: ‘lazy’
[17:02:28.065]   - Field: ‘state’
[17:02:28.065] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.065] - Launch lazy future ...
[17:02:28.065] Packages needed by the future expression (n = 0): <none>
[17:02:28.065] Packages needed by future strategies (n = 0): <none>
[17:02:28.065] {
[17:02:28.065]     {
[17:02:28.065]         {
[17:02:28.065]             ...future.startTime <- base::Sys.time()
[17:02:28.065]             {
[17:02:28.065]                 {
[17:02:28.065]                   {
[17:02:28.065]                     base::local({
[17:02:28.065]                       has_future <- base::requireNamespace("future", 
[17:02:28.065]                         quietly = TRUE)
[17:02:28.065]                       if (has_future) {
[17:02:28.065]                         ns <- base::getNamespace("future")
[17:02:28.065]                         version <- ns[[".package"]][["version"]]
[17:02:28.065]                         if (is.null(version)) 
[17:02:28.065]                           version <- utils::packageVersion("future")
[17:02:28.065]                       }
[17:02:28.065]                       else {
[17:02:28.065]                         version <- NULL
[17:02:28.065]                       }
[17:02:28.065]                       if (!has_future || version < "1.8.0") {
[17:02:28.065]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.065]                           "", base::R.version$version.string), 
[17:02:28.065]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.065]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.065]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.065]                             "release", "version")], collapse = " "), 
[17:02:28.065]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.065]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.065]                           info)
[17:02:28.065]                         info <- base::paste(info, collapse = "; ")
[17:02:28.065]                         if (!has_future) {
[17:02:28.065]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.065]                             info)
[17:02:28.065]                         }
[17:02:28.065]                         else {
[17:02:28.065]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.065]                             info, version)
[17:02:28.065]                         }
[17:02:28.065]                         base::stop(msg)
[17:02:28.065]                       }
[17:02:28.065]                     })
[17:02:28.065]                   }
[17:02:28.065]                   ...future.strategy.old <- future::plan("list")
[17:02:28.065]                   options(future.plan = NULL)
[17:02:28.065]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.065]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.065]                 }
[17:02:28.065]                 ...future.workdir <- getwd()
[17:02:28.065]             }
[17:02:28.065]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.065]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.065]         }
[17:02:28.065]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.065]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.065]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.065]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.065]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.065]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.065]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.065]             base::names(...future.oldOptions))
[17:02:28.065]     }
[17:02:28.065]     if (FALSE) {
[17:02:28.065]     }
[17:02:28.065]     else {
[17:02:28.065]         if (TRUE) {
[17:02:28.065]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.065]                 open = "w")
[17:02:28.065]         }
[17:02:28.065]         else {
[17:02:28.065]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.065]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.065]         }
[17:02:28.065]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.065]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.065]             base::sink(type = "output", split = FALSE)
[17:02:28.065]             base::close(...future.stdout)
[17:02:28.065]         }, add = TRUE)
[17:02:28.065]     }
[17:02:28.065]     ...future.frame <- base::sys.nframe()
[17:02:28.065]     ...future.conditions <- base::list()
[17:02:28.065]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.065]     if (FALSE) {
[17:02:28.065]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.065]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.065]     }
[17:02:28.065]     ...future.result <- base::tryCatch({
[17:02:28.065]         base::withCallingHandlers({
[17:02:28.065]             ...future.value <- base::withVisible(base::local({
[17:02:28.065]                 2
[17:02:28.065]             }))
[17:02:28.065]             future::FutureResult(value = ...future.value$value, 
[17:02:28.065]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.065]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.065]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.065]                     ...future.globalenv.names))
[17:02:28.065]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.065]         }, condition = base::local({
[17:02:28.065]             c <- base::c
[17:02:28.065]             inherits <- base::inherits
[17:02:28.065]             invokeRestart <- base::invokeRestart
[17:02:28.065]             length <- base::length
[17:02:28.065]             list <- base::list
[17:02:28.065]             seq.int <- base::seq.int
[17:02:28.065]             signalCondition <- base::signalCondition
[17:02:28.065]             sys.calls <- base::sys.calls
[17:02:28.065]             `[[` <- base::`[[`
[17:02:28.065]             `+` <- base::`+`
[17:02:28.065]             `<<-` <- base::`<<-`
[17:02:28.065]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.065]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.065]                   3L)]
[17:02:28.065]             }
[17:02:28.065]             function(cond) {
[17:02:28.065]                 is_error <- inherits(cond, "error")
[17:02:28.065]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.065]                   NULL)
[17:02:28.065]                 if (is_error) {
[17:02:28.065]                   sessionInformation <- function() {
[17:02:28.065]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.065]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.065]                       search = base::search(), system = base::Sys.info())
[17:02:28.065]                   }
[17:02:28.065]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.065]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.065]                     cond$call), session = sessionInformation(), 
[17:02:28.065]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.065]                   signalCondition(cond)
[17:02:28.065]                 }
[17:02:28.065]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.065]                 "immediateCondition"))) {
[17:02:28.065]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.065]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.065]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.065]                   if (TRUE && !signal) {
[17:02:28.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.065]                     {
[17:02:28.065]                       inherits <- base::inherits
[17:02:28.065]                       invokeRestart <- base::invokeRestart
[17:02:28.065]                       is.null <- base::is.null
[17:02:28.065]                       muffled <- FALSE
[17:02:28.065]                       if (inherits(cond, "message")) {
[17:02:28.065]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.065]                         if (muffled) 
[17:02:28.065]                           invokeRestart("muffleMessage")
[17:02:28.065]                       }
[17:02:28.065]                       else if (inherits(cond, "warning")) {
[17:02:28.065]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.065]                         if (muffled) 
[17:02:28.065]                           invokeRestart("muffleWarning")
[17:02:28.065]                       }
[17:02:28.065]                       else if (inherits(cond, "condition")) {
[17:02:28.065]                         if (!is.null(pattern)) {
[17:02:28.065]                           computeRestarts <- base::computeRestarts
[17:02:28.065]                           grepl <- base::grepl
[17:02:28.065]                           restarts <- computeRestarts(cond)
[17:02:28.065]                           for (restart in restarts) {
[17:02:28.065]                             name <- restart$name
[17:02:28.065]                             if (is.null(name)) 
[17:02:28.065]                               next
[17:02:28.065]                             if (!grepl(pattern, name)) 
[17:02:28.065]                               next
[17:02:28.065]                             invokeRestart(restart)
[17:02:28.065]                             muffled <- TRUE
[17:02:28.065]                             break
[17:02:28.065]                           }
[17:02:28.065]                         }
[17:02:28.065]                       }
[17:02:28.065]                       invisible(muffled)
[17:02:28.065]                     }
[17:02:28.065]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.065]                   }
[17:02:28.065]                 }
[17:02:28.065]                 else {
[17:02:28.065]                   if (TRUE) {
[17:02:28.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.065]                     {
[17:02:28.065]                       inherits <- base::inherits
[17:02:28.065]                       invokeRestart <- base::invokeRestart
[17:02:28.065]                       is.null <- base::is.null
[17:02:28.065]                       muffled <- FALSE
[17:02:28.065]                       if (inherits(cond, "message")) {
[17:02:28.065]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.065]                         if (muffled) 
[17:02:28.065]                           invokeRestart("muffleMessage")
[17:02:28.065]                       }
[17:02:28.065]                       else if (inherits(cond, "warning")) {
[17:02:28.065]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.065]                         if (muffled) 
[17:02:28.065]                           invokeRestart("muffleWarning")
[17:02:28.065]                       }
[17:02:28.065]                       else if (inherits(cond, "condition")) {
[17:02:28.065]                         if (!is.null(pattern)) {
[17:02:28.065]                           computeRestarts <- base::computeRestarts
[17:02:28.065]                           grepl <- base::grepl
[17:02:28.065]                           restarts <- computeRestarts(cond)
[17:02:28.065]                           for (restart in restarts) {
[17:02:28.065]                             name <- restart$name
[17:02:28.065]                             if (is.null(name)) 
[17:02:28.065]                               next
[17:02:28.065]                             if (!grepl(pattern, name)) 
[17:02:28.065]                               next
[17:02:28.065]                             invokeRestart(restart)
[17:02:28.065]                             muffled <- TRUE
[17:02:28.065]                             break
[17:02:28.065]                           }
[17:02:28.065]                         }
[17:02:28.065]                       }
[17:02:28.065]                       invisible(muffled)
[17:02:28.065]                     }
[17:02:28.065]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.065]                   }
[17:02:28.065]                 }
[17:02:28.065]             }
[17:02:28.065]         }))
[17:02:28.065]     }, error = function(ex) {
[17:02:28.065]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.065]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.065]                 ...future.rng), started = ...future.startTime, 
[17:02:28.065]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.065]             version = "1.8"), class = "FutureResult")
[17:02:28.065]     }, finally = {
[17:02:28.065]         if (!identical(...future.workdir, getwd())) 
[17:02:28.065]             setwd(...future.workdir)
[17:02:28.065]         {
[17:02:28.065]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.065]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.065]             }
[17:02:28.065]             base::options(...future.oldOptions)
[17:02:28.065]             if (.Platform$OS.type == "windows") {
[17:02:28.065]                 old_names <- names(...future.oldEnvVars)
[17:02:28.065]                 envs <- base::Sys.getenv()
[17:02:28.065]                 names <- names(envs)
[17:02:28.065]                 common <- intersect(names, old_names)
[17:02:28.065]                 added <- setdiff(names, old_names)
[17:02:28.065]                 removed <- setdiff(old_names, names)
[17:02:28.065]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.065]                   envs[common]]
[17:02:28.065]                 NAMES <- toupper(changed)
[17:02:28.065]                 args <- list()
[17:02:28.065]                 for (kk in seq_along(NAMES)) {
[17:02:28.065]                   name <- changed[[kk]]
[17:02:28.065]                   NAME <- NAMES[[kk]]
[17:02:28.065]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.065]                     next
[17:02:28.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.065]                 }
[17:02:28.065]                 NAMES <- toupper(added)
[17:02:28.065]                 for (kk in seq_along(NAMES)) {
[17:02:28.065]                   name <- added[[kk]]
[17:02:28.065]                   NAME <- NAMES[[kk]]
[17:02:28.065]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.065]                     next
[17:02:28.065]                   args[[name]] <- ""
[17:02:28.065]                 }
[17:02:28.065]                 NAMES <- toupper(removed)
[17:02:28.065]                 for (kk in seq_along(NAMES)) {
[17:02:28.065]                   name <- removed[[kk]]
[17:02:28.065]                   NAME <- NAMES[[kk]]
[17:02:28.065]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.065]                     next
[17:02:28.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.065]                 }
[17:02:28.065]                 if (length(args) > 0) 
[17:02:28.065]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.065]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.065]             }
[17:02:28.065]             else {
[17:02:28.065]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.065]             }
[17:02:28.065]             {
[17:02:28.065]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.065]                   0L) {
[17:02:28.065]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.065]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.065]                   base::options(opts)
[17:02:28.065]                 }
[17:02:28.065]                 {
[17:02:28.065]                   {
[17:02:28.065]                     NULL
[17:02:28.065]                     RNGkind("Mersenne-Twister")
[17:02:28.065]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.065]                       inherits = FALSE)
[17:02:28.065]                   }
[17:02:28.065]                   options(future.plan = NULL)
[17:02:28.065]                   if (is.na(NA_character_)) 
[17:02:28.065]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.065]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.065]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.065]                     .init = FALSE)
[17:02:28.065]                 }
[17:02:28.065]             }
[17:02:28.065]         }
[17:02:28.065]     })
[17:02:28.065]     if (TRUE) {
[17:02:28.065]         base::sink(type = "output", split = FALSE)
[17:02:28.065]         if (TRUE) {
[17:02:28.065]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.065]         }
[17:02:28.065]         else {
[17:02:28.065]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.065]         }
[17:02:28.065]         base::close(...future.stdout)
[17:02:28.065]         ...future.stdout <- NULL
[17:02:28.065]     }
[17:02:28.065]     ...future.result$conditions <- ...future.conditions
[17:02:28.065]     ...future.result$finished <- base::Sys.time()
[17:02:28.065]     ...future.result
[17:02:28.065] }
[17:02:28.067] plan(): Setting new future strategy stack:
[17:02:28.067] List of future strategies:
[17:02:28.067] 1. sequential:
[17:02:28.067]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.067]    - tweaked: FALSE
[17:02:28.067]    - call: NULL
[17:02:28.068] plan(): nbrOfWorkers() = 1
[17:02:28.068] plan(): Setting new future strategy stack:
[17:02:28.068] List of future strategies:
[17:02:28.068] 1. sequential:
[17:02:28.068]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.068]    - tweaked: FALSE
[17:02:28.068]    - call: future::plan("sequential")
[17:02:28.069] plan(): nbrOfWorkers() = 1
[17:02:28.069] SequentialFuture started (and completed)
[17:02:28.069] - Launch lazy future ... done
[17:02:28.069] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[17:02:28.078] resolved() for ‘SequentialFuture’ ...
[17:02:28.078] - state: ‘finished’
[17:02:28.078] - run: FALSE
[17:02:28.078] - result: ‘FutureResult’
[17:02:28.078] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[17:02:28.079] getGlobalsAndPackages() ...
[17:02:28.079] Searching for globals...
[17:02:28.079] - globals found: [1] ‘{’
[17:02:28.079] Searching for globals ... DONE
[17:02:28.079] Resolving globals: FALSE
[17:02:28.080] 
[17:02:28.080] 
[17:02:28.080] getGlobalsAndPackages() ... DONE
[17:02:28.080] run() for ‘Future’ ...
[17:02:28.080] - state: ‘created’
[17:02:28.080] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.081] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.081] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.081]   - Field: ‘label’
[17:02:28.081]   - Field: ‘local’
[17:02:28.081]   - Field: ‘owner’
[17:02:28.081]   - Field: ‘envir’
[17:02:28.081]   - Field: ‘packages’
[17:02:28.081]   - Field: ‘gc’
[17:02:28.081]   - Field: ‘conditions’
[17:02:28.081]   - Field: ‘expr’
[17:02:28.082]   - Field: ‘uuid’
[17:02:28.082]   - Field: ‘seed’
[17:02:28.082]   - Field: ‘version’
[17:02:28.082]   - Field: ‘result’
[17:02:28.082]   - Field: ‘asynchronous’
[17:02:28.082]   - Field: ‘calls’
[17:02:28.082]   - Field: ‘globals’
[17:02:28.082]   - Field: ‘stdout’
[17:02:28.082]   - Field: ‘earlySignal’
[17:02:28.084]   - Field: ‘lazy’
[17:02:28.084]   - Field: ‘state’
[17:02:28.084] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.084] - Launch lazy future ...
[17:02:28.084] Packages needed by the future expression (n = 0): <none>
[17:02:28.084] Packages needed by future strategies (n = 0): <none>
[17:02:28.085] {
[17:02:28.085]     {
[17:02:28.085]         {
[17:02:28.085]             ...future.startTime <- base::Sys.time()
[17:02:28.085]             {
[17:02:28.085]                 {
[17:02:28.085]                   {
[17:02:28.085]                     base::local({
[17:02:28.085]                       has_future <- base::requireNamespace("future", 
[17:02:28.085]                         quietly = TRUE)
[17:02:28.085]                       if (has_future) {
[17:02:28.085]                         ns <- base::getNamespace("future")
[17:02:28.085]                         version <- ns[[".package"]][["version"]]
[17:02:28.085]                         if (is.null(version)) 
[17:02:28.085]                           version <- utils::packageVersion("future")
[17:02:28.085]                       }
[17:02:28.085]                       else {
[17:02:28.085]                         version <- NULL
[17:02:28.085]                       }
[17:02:28.085]                       if (!has_future || version < "1.8.0") {
[17:02:28.085]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.085]                           "", base::R.version$version.string), 
[17:02:28.085]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.085]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.085]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.085]                             "release", "version")], collapse = " "), 
[17:02:28.085]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.085]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.085]                           info)
[17:02:28.085]                         info <- base::paste(info, collapse = "; ")
[17:02:28.085]                         if (!has_future) {
[17:02:28.085]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.085]                             info)
[17:02:28.085]                         }
[17:02:28.085]                         else {
[17:02:28.085]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.085]                             info, version)
[17:02:28.085]                         }
[17:02:28.085]                         base::stop(msg)
[17:02:28.085]                       }
[17:02:28.085]                     })
[17:02:28.085]                   }
[17:02:28.085]                   ...future.strategy.old <- future::plan("list")
[17:02:28.085]                   options(future.plan = NULL)
[17:02:28.085]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.085]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.085]                 }
[17:02:28.085]                 ...future.workdir <- getwd()
[17:02:28.085]             }
[17:02:28.085]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.085]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.085]         }
[17:02:28.085]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.085]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.085]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.085]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.085]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.085]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.085]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.085]             base::names(...future.oldOptions))
[17:02:28.085]     }
[17:02:28.085]     if (FALSE) {
[17:02:28.085]     }
[17:02:28.085]     else {
[17:02:28.085]         if (TRUE) {
[17:02:28.085]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.085]                 open = "w")
[17:02:28.085]         }
[17:02:28.085]         else {
[17:02:28.085]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.085]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.085]         }
[17:02:28.085]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.085]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.085]             base::sink(type = "output", split = FALSE)
[17:02:28.085]             base::close(...future.stdout)
[17:02:28.085]         }, add = TRUE)
[17:02:28.085]     }
[17:02:28.085]     ...future.frame <- base::sys.nframe()
[17:02:28.085]     ...future.conditions <- base::list()
[17:02:28.085]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.085]     if (FALSE) {
[17:02:28.085]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.085]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.085]     }
[17:02:28.085]     ...future.result <- base::tryCatch({
[17:02:28.085]         base::withCallingHandlers({
[17:02:28.085]             ...future.value <- base::withVisible(base::local({
[17:02:28.085]                 2
[17:02:28.085]             }))
[17:02:28.085]             future::FutureResult(value = ...future.value$value, 
[17:02:28.085]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.085]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.085]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.085]                     ...future.globalenv.names))
[17:02:28.085]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.085]         }, condition = base::local({
[17:02:28.085]             c <- base::c
[17:02:28.085]             inherits <- base::inherits
[17:02:28.085]             invokeRestart <- base::invokeRestart
[17:02:28.085]             length <- base::length
[17:02:28.085]             list <- base::list
[17:02:28.085]             seq.int <- base::seq.int
[17:02:28.085]             signalCondition <- base::signalCondition
[17:02:28.085]             sys.calls <- base::sys.calls
[17:02:28.085]             `[[` <- base::`[[`
[17:02:28.085]             `+` <- base::`+`
[17:02:28.085]             `<<-` <- base::`<<-`
[17:02:28.085]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.085]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.085]                   3L)]
[17:02:28.085]             }
[17:02:28.085]             function(cond) {
[17:02:28.085]                 is_error <- inherits(cond, "error")
[17:02:28.085]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.085]                   NULL)
[17:02:28.085]                 if (is_error) {
[17:02:28.085]                   sessionInformation <- function() {
[17:02:28.085]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.085]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.085]                       search = base::search(), system = base::Sys.info())
[17:02:28.085]                   }
[17:02:28.085]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.085]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.085]                     cond$call), session = sessionInformation(), 
[17:02:28.085]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.085]                   signalCondition(cond)
[17:02:28.085]                 }
[17:02:28.085]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.085]                 "immediateCondition"))) {
[17:02:28.085]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.085]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.085]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.085]                   if (TRUE && !signal) {
[17:02:28.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.085]                     {
[17:02:28.085]                       inherits <- base::inherits
[17:02:28.085]                       invokeRestart <- base::invokeRestart
[17:02:28.085]                       is.null <- base::is.null
[17:02:28.085]                       muffled <- FALSE
[17:02:28.085]                       if (inherits(cond, "message")) {
[17:02:28.085]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.085]                         if (muffled) 
[17:02:28.085]                           invokeRestart("muffleMessage")
[17:02:28.085]                       }
[17:02:28.085]                       else if (inherits(cond, "warning")) {
[17:02:28.085]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.085]                         if (muffled) 
[17:02:28.085]                           invokeRestart("muffleWarning")
[17:02:28.085]                       }
[17:02:28.085]                       else if (inherits(cond, "condition")) {
[17:02:28.085]                         if (!is.null(pattern)) {
[17:02:28.085]                           computeRestarts <- base::computeRestarts
[17:02:28.085]                           grepl <- base::grepl
[17:02:28.085]                           restarts <- computeRestarts(cond)
[17:02:28.085]                           for (restart in restarts) {
[17:02:28.085]                             name <- restart$name
[17:02:28.085]                             if (is.null(name)) 
[17:02:28.085]                               next
[17:02:28.085]                             if (!grepl(pattern, name)) 
[17:02:28.085]                               next
[17:02:28.085]                             invokeRestart(restart)
[17:02:28.085]                             muffled <- TRUE
[17:02:28.085]                             break
[17:02:28.085]                           }
[17:02:28.085]                         }
[17:02:28.085]                       }
[17:02:28.085]                       invisible(muffled)
[17:02:28.085]                     }
[17:02:28.085]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.085]                   }
[17:02:28.085]                 }
[17:02:28.085]                 else {
[17:02:28.085]                   if (TRUE) {
[17:02:28.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.085]                     {
[17:02:28.085]                       inherits <- base::inherits
[17:02:28.085]                       invokeRestart <- base::invokeRestart
[17:02:28.085]                       is.null <- base::is.null
[17:02:28.085]                       muffled <- FALSE
[17:02:28.085]                       if (inherits(cond, "message")) {
[17:02:28.085]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.085]                         if (muffled) 
[17:02:28.085]                           invokeRestart("muffleMessage")
[17:02:28.085]                       }
[17:02:28.085]                       else if (inherits(cond, "warning")) {
[17:02:28.085]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.085]                         if (muffled) 
[17:02:28.085]                           invokeRestart("muffleWarning")
[17:02:28.085]                       }
[17:02:28.085]                       else if (inherits(cond, "condition")) {
[17:02:28.085]                         if (!is.null(pattern)) {
[17:02:28.085]                           computeRestarts <- base::computeRestarts
[17:02:28.085]                           grepl <- base::grepl
[17:02:28.085]                           restarts <- computeRestarts(cond)
[17:02:28.085]                           for (restart in restarts) {
[17:02:28.085]                             name <- restart$name
[17:02:28.085]                             if (is.null(name)) 
[17:02:28.085]                               next
[17:02:28.085]                             if (!grepl(pattern, name)) 
[17:02:28.085]                               next
[17:02:28.085]                             invokeRestart(restart)
[17:02:28.085]                             muffled <- TRUE
[17:02:28.085]                             break
[17:02:28.085]                           }
[17:02:28.085]                         }
[17:02:28.085]                       }
[17:02:28.085]                       invisible(muffled)
[17:02:28.085]                     }
[17:02:28.085]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.085]                   }
[17:02:28.085]                 }
[17:02:28.085]             }
[17:02:28.085]         }))
[17:02:28.085]     }, error = function(ex) {
[17:02:28.085]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.085]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.085]                 ...future.rng), started = ...future.startTime, 
[17:02:28.085]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.085]             version = "1.8"), class = "FutureResult")
[17:02:28.085]     }, finally = {
[17:02:28.085]         if (!identical(...future.workdir, getwd())) 
[17:02:28.085]             setwd(...future.workdir)
[17:02:28.085]         {
[17:02:28.085]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.085]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.085]             }
[17:02:28.085]             base::options(...future.oldOptions)
[17:02:28.085]             if (.Platform$OS.type == "windows") {
[17:02:28.085]                 old_names <- names(...future.oldEnvVars)
[17:02:28.085]                 envs <- base::Sys.getenv()
[17:02:28.085]                 names <- names(envs)
[17:02:28.085]                 common <- intersect(names, old_names)
[17:02:28.085]                 added <- setdiff(names, old_names)
[17:02:28.085]                 removed <- setdiff(old_names, names)
[17:02:28.085]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.085]                   envs[common]]
[17:02:28.085]                 NAMES <- toupper(changed)
[17:02:28.085]                 args <- list()
[17:02:28.085]                 for (kk in seq_along(NAMES)) {
[17:02:28.085]                   name <- changed[[kk]]
[17:02:28.085]                   NAME <- NAMES[[kk]]
[17:02:28.085]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.085]                     next
[17:02:28.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.085]                 }
[17:02:28.085]                 NAMES <- toupper(added)
[17:02:28.085]                 for (kk in seq_along(NAMES)) {
[17:02:28.085]                   name <- added[[kk]]
[17:02:28.085]                   NAME <- NAMES[[kk]]
[17:02:28.085]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.085]                     next
[17:02:28.085]                   args[[name]] <- ""
[17:02:28.085]                 }
[17:02:28.085]                 NAMES <- toupper(removed)
[17:02:28.085]                 for (kk in seq_along(NAMES)) {
[17:02:28.085]                   name <- removed[[kk]]
[17:02:28.085]                   NAME <- NAMES[[kk]]
[17:02:28.085]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.085]                     next
[17:02:28.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.085]                 }
[17:02:28.085]                 if (length(args) > 0) 
[17:02:28.085]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.085]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.085]             }
[17:02:28.085]             else {
[17:02:28.085]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.085]             }
[17:02:28.085]             {
[17:02:28.085]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.085]                   0L) {
[17:02:28.085]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.085]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.085]                   base::options(opts)
[17:02:28.085]                 }
[17:02:28.085]                 {
[17:02:28.085]                   {
[17:02:28.085]                     NULL
[17:02:28.085]                     RNGkind("Mersenne-Twister")
[17:02:28.085]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.085]                       inherits = FALSE)
[17:02:28.085]                   }
[17:02:28.085]                   options(future.plan = NULL)
[17:02:28.085]                   if (is.na(NA_character_)) 
[17:02:28.085]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.085]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.085]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.085]                     .init = FALSE)
[17:02:28.085]                 }
[17:02:28.085]             }
[17:02:28.085]         }
[17:02:28.085]     })
[17:02:28.085]     if (TRUE) {
[17:02:28.085]         base::sink(type = "output", split = FALSE)
[17:02:28.085]         if (TRUE) {
[17:02:28.085]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.085]         }
[17:02:28.085]         else {
[17:02:28.085]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.085]         }
[17:02:28.085]         base::close(...future.stdout)
[17:02:28.085]         ...future.stdout <- NULL
[17:02:28.085]     }
[17:02:28.085]     ...future.result$conditions <- ...future.conditions
[17:02:28.085]     ...future.result$finished <- base::Sys.time()
[17:02:28.085]     ...future.result
[17:02:28.085] }
[17:02:28.086] plan(): Setting new future strategy stack:
[17:02:28.086] List of future strategies:
[17:02:28.086] 1. sequential:
[17:02:28.086]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.086]    - tweaked: FALSE
[17:02:28.086]    - call: NULL
[17:02:28.087] plan(): nbrOfWorkers() = 1
[17:02:28.088] plan(): Setting new future strategy stack:
[17:02:28.088] List of future strategies:
[17:02:28.088] 1. sequential:
[17:02:28.088]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.088]    - tweaked: FALSE
[17:02:28.088]    - call: future::plan("sequential")
[17:02:28.088] plan(): nbrOfWorkers() = 1
[17:02:28.088] SequentialFuture started (and completed)
[17:02:28.088] - Launch lazy future ... done
[17:02:28.088] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[17:02:28.089] getGlobalsAndPackages() ...
[17:02:28.089] Searching for globals...
[17:02:28.090] 
[17:02:28.090] Searching for globals ... DONE
[17:02:28.090] - globals: [0] <none>
[17:02:28.090] getGlobalsAndPackages() ... DONE
[17:02:28.090] run() for ‘Future’ ...
[17:02:28.090] - state: ‘created’
[17:02:28.090] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:28.091] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:28.091] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:28.091]   - Field: ‘label’
[17:02:28.091]   - Field: ‘local’
[17:02:28.091]   - Field: ‘owner’
[17:02:28.091]   - Field: ‘envir’
[17:02:28.091]   - Field: ‘packages’
[17:02:28.091]   - Field: ‘gc’
[17:02:28.091]   - Field: ‘conditions’
[17:02:28.092]   - Field: ‘expr’
[17:02:28.092]   - Field: ‘uuid’
[17:02:28.092]   - Field: ‘seed’
[17:02:28.092]   - Field: ‘version’
[17:02:28.092]   - Field: ‘result’
[17:02:28.092]   - Field: ‘asynchronous’
[17:02:28.092]   - Field: ‘calls’
[17:02:28.092]   - Field: ‘globals’
[17:02:28.092]   - Field: ‘stdout’
[17:02:28.092]   - Field: ‘earlySignal’
[17:02:28.092]   - Field: ‘lazy’
[17:02:28.093]   - Field: ‘state’
[17:02:28.093] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:28.093] - Launch lazy future ...
[17:02:28.093] Packages needed by the future expression (n = 0): <none>
[17:02:28.093] Packages needed by future strategies (n = 0): <none>
[17:02:28.093] {
[17:02:28.093]     {
[17:02:28.093]         {
[17:02:28.093]             ...future.startTime <- base::Sys.time()
[17:02:28.093]             {
[17:02:28.093]                 {
[17:02:28.093]                   {
[17:02:28.093]                     base::local({
[17:02:28.093]                       has_future <- base::requireNamespace("future", 
[17:02:28.093]                         quietly = TRUE)
[17:02:28.093]                       if (has_future) {
[17:02:28.093]                         ns <- base::getNamespace("future")
[17:02:28.093]                         version <- ns[[".package"]][["version"]]
[17:02:28.093]                         if (is.null(version)) 
[17:02:28.093]                           version <- utils::packageVersion("future")
[17:02:28.093]                       }
[17:02:28.093]                       else {
[17:02:28.093]                         version <- NULL
[17:02:28.093]                       }
[17:02:28.093]                       if (!has_future || version < "1.8.0") {
[17:02:28.093]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:28.093]                           "", base::R.version$version.string), 
[17:02:28.093]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:28.093]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:28.093]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:28.093]                             "release", "version")], collapse = " "), 
[17:02:28.093]                           hostname = base::Sys.info()[["nodename"]])
[17:02:28.093]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:28.093]                           info)
[17:02:28.093]                         info <- base::paste(info, collapse = "; ")
[17:02:28.093]                         if (!has_future) {
[17:02:28.093]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:28.093]                             info)
[17:02:28.093]                         }
[17:02:28.093]                         else {
[17:02:28.093]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:28.093]                             info, version)
[17:02:28.093]                         }
[17:02:28.093]                         base::stop(msg)
[17:02:28.093]                       }
[17:02:28.093]                     })
[17:02:28.093]                   }
[17:02:28.093]                   ...future.strategy.old <- future::plan("list")
[17:02:28.093]                   options(future.plan = NULL)
[17:02:28.093]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.093]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:28.093]                 }
[17:02:28.093]                 ...future.workdir <- getwd()
[17:02:28.093]             }
[17:02:28.093]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:28.093]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:28.093]         }
[17:02:28.093]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:28.093]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:28.093]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:28.093]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:28.093]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:28.093]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:28.093]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:28.093]             base::names(...future.oldOptions))
[17:02:28.093]     }
[17:02:28.093]     if (FALSE) {
[17:02:28.093]     }
[17:02:28.093]     else {
[17:02:28.093]         if (TRUE) {
[17:02:28.093]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:28.093]                 open = "w")
[17:02:28.093]         }
[17:02:28.093]         else {
[17:02:28.093]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:28.093]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:28.093]         }
[17:02:28.093]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:28.093]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:28.093]             base::sink(type = "output", split = FALSE)
[17:02:28.093]             base::close(...future.stdout)
[17:02:28.093]         }, add = TRUE)
[17:02:28.093]     }
[17:02:28.093]     ...future.frame <- base::sys.nframe()
[17:02:28.093]     ...future.conditions <- base::list()
[17:02:28.093]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:28.093]     if (FALSE) {
[17:02:28.093]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:28.093]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:28.093]     }
[17:02:28.093]     ...future.result <- base::tryCatch({
[17:02:28.093]         base::withCallingHandlers({
[17:02:28.093]             ...future.value <- base::withVisible(base::local(1))
[17:02:28.093]             future::FutureResult(value = ...future.value$value, 
[17:02:28.093]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.093]                   ...future.rng), globalenv = if (FALSE) 
[17:02:28.093]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:28.093]                     ...future.globalenv.names))
[17:02:28.093]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:28.093]         }, condition = base::local({
[17:02:28.093]             c <- base::c
[17:02:28.093]             inherits <- base::inherits
[17:02:28.093]             invokeRestart <- base::invokeRestart
[17:02:28.093]             length <- base::length
[17:02:28.093]             list <- base::list
[17:02:28.093]             seq.int <- base::seq.int
[17:02:28.093]             signalCondition <- base::signalCondition
[17:02:28.093]             sys.calls <- base::sys.calls
[17:02:28.093]             `[[` <- base::`[[`
[17:02:28.093]             `+` <- base::`+`
[17:02:28.093]             `<<-` <- base::`<<-`
[17:02:28.093]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:28.093]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:28.093]                   3L)]
[17:02:28.093]             }
[17:02:28.093]             function(cond) {
[17:02:28.093]                 is_error <- inherits(cond, "error")
[17:02:28.093]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:28.093]                   NULL)
[17:02:28.093]                 if (is_error) {
[17:02:28.093]                   sessionInformation <- function() {
[17:02:28.093]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:28.093]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:28.093]                       search = base::search(), system = base::Sys.info())
[17:02:28.093]                   }
[17:02:28.093]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.093]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:28.093]                     cond$call), session = sessionInformation(), 
[17:02:28.093]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:28.093]                   signalCondition(cond)
[17:02:28.093]                 }
[17:02:28.093]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:28.093]                 "immediateCondition"))) {
[17:02:28.093]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:28.093]                   ...future.conditions[[length(...future.conditions) + 
[17:02:28.093]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:28.093]                   if (TRUE && !signal) {
[17:02:28.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.093]                     {
[17:02:28.093]                       inherits <- base::inherits
[17:02:28.093]                       invokeRestart <- base::invokeRestart
[17:02:28.093]                       is.null <- base::is.null
[17:02:28.093]                       muffled <- FALSE
[17:02:28.093]                       if (inherits(cond, "message")) {
[17:02:28.093]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.093]                         if (muffled) 
[17:02:28.093]                           invokeRestart("muffleMessage")
[17:02:28.093]                       }
[17:02:28.093]                       else if (inherits(cond, "warning")) {
[17:02:28.093]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.093]                         if (muffled) 
[17:02:28.093]                           invokeRestart("muffleWarning")
[17:02:28.093]                       }
[17:02:28.093]                       else if (inherits(cond, "condition")) {
[17:02:28.093]                         if (!is.null(pattern)) {
[17:02:28.093]                           computeRestarts <- base::computeRestarts
[17:02:28.093]                           grepl <- base::grepl
[17:02:28.093]                           restarts <- computeRestarts(cond)
[17:02:28.093]                           for (restart in restarts) {
[17:02:28.093]                             name <- restart$name
[17:02:28.093]                             if (is.null(name)) 
[17:02:28.093]                               next
[17:02:28.093]                             if (!grepl(pattern, name)) 
[17:02:28.093]                               next
[17:02:28.093]                             invokeRestart(restart)
[17:02:28.093]                             muffled <- TRUE
[17:02:28.093]                             break
[17:02:28.093]                           }
[17:02:28.093]                         }
[17:02:28.093]                       }
[17:02:28.093]                       invisible(muffled)
[17:02:28.093]                     }
[17:02:28.093]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.093]                   }
[17:02:28.093]                 }
[17:02:28.093]                 else {
[17:02:28.093]                   if (TRUE) {
[17:02:28.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:28.093]                     {
[17:02:28.093]                       inherits <- base::inherits
[17:02:28.093]                       invokeRestart <- base::invokeRestart
[17:02:28.093]                       is.null <- base::is.null
[17:02:28.093]                       muffled <- FALSE
[17:02:28.093]                       if (inherits(cond, "message")) {
[17:02:28.093]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:28.093]                         if (muffled) 
[17:02:28.093]                           invokeRestart("muffleMessage")
[17:02:28.093]                       }
[17:02:28.093]                       else if (inherits(cond, "warning")) {
[17:02:28.093]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:28.093]                         if (muffled) 
[17:02:28.093]                           invokeRestart("muffleWarning")
[17:02:28.093]                       }
[17:02:28.093]                       else if (inherits(cond, "condition")) {
[17:02:28.093]                         if (!is.null(pattern)) {
[17:02:28.093]                           computeRestarts <- base::computeRestarts
[17:02:28.093]                           grepl <- base::grepl
[17:02:28.093]                           restarts <- computeRestarts(cond)
[17:02:28.093]                           for (restart in restarts) {
[17:02:28.093]                             name <- restart$name
[17:02:28.093]                             if (is.null(name)) 
[17:02:28.093]                               next
[17:02:28.093]                             if (!grepl(pattern, name)) 
[17:02:28.093]                               next
[17:02:28.093]                             invokeRestart(restart)
[17:02:28.093]                             muffled <- TRUE
[17:02:28.093]                             break
[17:02:28.093]                           }
[17:02:28.093]                         }
[17:02:28.093]                       }
[17:02:28.093]                       invisible(muffled)
[17:02:28.093]                     }
[17:02:28.093]                     muffleCondition(cond, pattern = "^muffle")
[17:02:28.093]                   }
[17:02:28.093]                 }
[17:02:28.093]             }
[17:02:28.093]         }))
[17:02:28.093]     }, error = function(ex) {
[17:02:28.093]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:28.093]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:28.093]                 ...future.rng), started = ...future.startTime, 
[17:02:28.093]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:28.093]             version = "1.8"), class = "FutureResult")
[17:02:28.093]     }, finally = {
[17:02:28.093]         if (!identical(...future.workdir, getwd())) 
[17:02:28.093]             setwd(...future.workdir)
[17:02:28.093]         {
[17:02:28.093]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:28.093]                 ...future.oldOptions$nwarnings <- NULL
[17:02:28.093]             }
[17:02:28.093]             base::options(...future.oldOptions)
[17:02:28.093]             if (.Platform$OS.type == "windows") {
[17:02:28.093]                 old_names <- names(...future.oldEnvVars)
[17:02:28.093]                 envs <- base::Sys.getenv()
[17:02:28.093]                 names <- names(envs)
[17:02:28.093]                 common <- intersect(names, old_names)
[17:02:28.093]                 added <- setdiff(names, old_names)
[17:02:28.093]                 removed <- setdiff(old_names, names)
[17:02:28.093]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:28.093]                   envs[common]]
[17:02:28.093]                 NAMES <- toupper(changed)
[17:02:28.093]                 args <- list()
[17:02:28.093]                 for (kk in seq_along(NAMES)) {
[17:02:28.093]                   name <- changed[[kk]]
[17:02:28.093]                   NAME <- NAMES[[kk]]
[17:02:28.093]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.093]                     next
[17:02:28.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.093]                 }
[17:02:28.093]                 NAMES <- toupper(added)
[17:02:28.093]                 for (kk in seq_along(NAMES)) {
[17:02:28.093]                   name <- added[[kk]]
[17:02:28.093]                   NAME <- NAMES[[kk]]
[17:02:28.093]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.093]                     next
[17:02:28.093]                   args[[name]] <- ""
[17:02:28.093]                 }
[17:02:28.093]                 NAMES <- toupper(removed)
[17:02:28.093]                 for (kk in seq_along(NAMES)) {
[17:02:28.093]                   name <- removed[[kk]]
[17:02:28.093]                   NAME <- NAMES[[kk]]
[17:02:28.093]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:28.093]                     next
[17:02:28.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:28.093]                 }
[17:02:28.093]                 if (length(args) > 0) 
[17:02:28.093]                   base::do.call(base::Sys.setenv, args = args)
[17:02:28.093]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:28.093]             }
[17:02:28.093]             else {
[17:02:28.093]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:28.093]             }
[17:02:28.093]             {
[17:02:28.093]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:28.093]                   0L) {
[17:02:28.093]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:28.093]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:28.093]                   base::options(opts)
[17:02:28.093]                 }
[17:02:28.093]                 {
[17:02:28.093]                   {
[17:02:28.093]                     NULL
[17:02:28.093]                     RNGkind("Mersenne-Twister")
[17:02:28.093]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:28.093]                       inherits = FALSE)
[17:02:28.093]                   }
[17:02:28.093]                   options(future.plan = NULL)
[17:02:28.093]                   if (is.na(NA_character_)) 
[17:02:28.093]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:28.093]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:28.093]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:28.093]                     .init = FALSE)
[17:02:28.093]                 }
[17:02:28.093]             }
[17:02:28.093]         }
[17:02:28.093]     })
[17:02:28.093]     if (TRUE) {
[17:02:28.093]         base::sink(type = "output", split = FALSE)
[17:02:28.093]         if (TRUE) {
[17:02:28.093]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:28.093]         }
[17:02:28.093]         else {
[17:02:28.093]             ...future.result["stdout"] <- base::list(NULL)
[17:02:28.093]         }
[17:02:28.093]         base::close(...future.stdout)
[17:02:28.093]         ...future.stdout <- NULL
[17:02:28.093]     }
[17:02:28.093]     ...future.result$conditions <- ...future.conditions
[17:02:28.093]     ...future.result$finished <- base::Sys.time()
[17:02:28.093]     ...future.result
[17:02:28.093] }
[17:02:28.095] plan(): Setting new future strategy stack:
[17:02:28.095] List of future strategies:
[17:02:28.095] 1. sequential:
[17:02:28.095]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.095]    - tweaked: FALSE
[17:02:28.095]    - call: NULL
[17:02:28.096] plan(): nbrOfWorkers() = 1
[17:02:28.096] plan(): Setting new future strategy stack:
[17:02:28.096] List of future strategies:
[17:02:28.096] 1. sequential:
[17:02:28.096]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.096]    - tweaked: FALSE
[17:02:28.096]    - call: future::plan("sequential")
[17:02:28.097] plan(): nbrOfWorkers() = 1
[17:02:28.097] SequentialFuture started (and completed)
[17:02:28.097] - Launch lazy future ... done
[17:02:28.097] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 1264d8fb-510d-306c-fb6b-678195ff3f31
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[17:02:28.098] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[17:02:28.098] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[17:02:28.099] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[17:02:28.099] plan(): Setting new future strategy stack:
[17:02:28.099] List of future strategies:
[17:02:28.099] 1. FutureStrategy:
[17:02:28.099]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:28.099]    - tweaked: FALSE
[17:02:28.099]    - call: future::plan(oplan)
[17:02:28.110] plan(): nbrOfWorkers() = 1
> 
