
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:03.895] plan(): Setting new future strategy stack:
[17:46:03.895] List of future strategies:
[17:46:03.895] 1. sequential:
[17:46:03.895]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:03.895]    - tweaked: FALSE
[17:46:03.895]    - call: future::plan("sequential")
[17:46:03.906] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[17:46:03.921] plan(): Setting new future strategy stack:
[17:46:03.921] List of future strategies:
[17:46:03.921] 1. multisession:
[17:46:03.921]    - args: function (..., workers = 2, envir = parent.frame())
[17:46:03.921]    - tweaked: TRUE
[17:46:03.921]    - call: plan(multisession, workers = 2)
[17:46:03.932] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:46:03.932] multisession:
[17:46:03.932] - args: function (..., workers = 2, envir = parent.frame())
[17:46:03.932] - tweaked: TRUE
[17:46:03.932] - call: plan(multisession, workers = 2)
[17:46:03.933] getGlobalsAndPackages() ...
[17:46:03.933] Not searching for globals
[17:46:03.933] - globals: [0] <none>
[17:46:03.934] getGlobalsAndPackages() ... DONE
[17:46:03.934] [local output] makeClusterPSOCK() ...
[17:46:03.964] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:03.965] [local output] Base port: 11576
[17:46:03.965] [local output] Getting setup options for 2 cluster nodes ...
[17:46:03.966] [local output]  - Node 1 of 2 ...
[17:46:03.966] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:03.967] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP8Y7gD/worker.rank=1.parallelly.parent=38979.984370c20336.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpP8Y7gD/worker.rank=1.parallelly.parent=38979.984370c20336.pid")'’
[17:46:04.154] - Possible to infer worker's PID: TRUE
[17:46:04.154] [local output] Rscript port: 11576

[17:46:04.155] [local output]  - Node 2 of 2 ...
[17:46:04.155] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:04.156] [local output] Rscript port: 11576

[17:46:04.156] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:04.156] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:04.157] [local output] Setting up PSOCK nodes in parallel
[17:46:04.157] List of 36
[17:46:04.157]  $ worker          : chr "localhost"
[17:46:04.157]   ..- attr(*, "localhost")= logi TRUE
[17:46:04.157]  $ master          : chr "localhost"
[17:46:04.157]  $ port            : int 11576
[17:46:04.157]  $ connectTimeout  : num 120
[17:46:04.157]  $ timeout         : num 2592000
[17:46:04.157]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:04.157]  $ homogeneous     : logi TRUE
[17:46:04.157]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:04.157]  $ rscript_envs    : NULL
[17:46:04.157]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:04.157]  $ rscript_startup : NULL
[17:46:04.157]  $ rscript_sh      : chr "sh"
[17:46:04.157]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:04.157]  $ methods         : logi TRUE
[17:46:04.157]  $ socketOptions   : chr "no-delay"
[17:46:04.157]  $ useXDR          : logi FALSE
[17:46:04.157]  $ outfile         : chr "/dev/null"
[17:46:04.157]  $ renice          : int NA
[17:46:04.157]  $ rshcmd          : NULL
[17:46:04.157]  $ user            : chr(0) 
[17:46:04.157]  $ revtunnel       : logi FALSE
[17:46:04.157]  $ rshlogfile      : NULL
[17:46:04.157]  $ rshopts         : chr(0) 
[17:46:04.157]  $ rank            : int 1
[17:46:04.157]  $ manual          : logi FALSE
[17:46:04.157]  $ dryrun          : logi FALSE
[17:46:04.157]  $ quiet           : logi FALSE
[17:46:04.157]  $ setup_strategy  : chr "parallel"
[17:46:04.157]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:04.157]  $ pidfile         : chr "/tmp/RtmpP8Y7gD/worker.rank=1.parallelly.parent=38979.984370c20336.pid"
[17:46:04.157]  $ rshcmd_label    : NULL
[17:46:04.157]  $ rsh_call        : NULL
[17:46:04.157]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:04.157]  $ localMachine    : logi TRUE
[17:46:04.157]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:04.157]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:04.157]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:04.157]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:04.157]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:04.157]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:04.157]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:04.157]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:04.157]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:04.157]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:04.157]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:04.157]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:04.157]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:04.157]  $ arguments       :List of 28
[17:46:04.157]   ..$ worker          : chr "localhost"
[17:46:04.157]   ..$ master          : NULL
[17:46:04.157]   ..$ port            : int 11576
[17:46:04.157]   ..$ connectTimeout  : num 120
[17:46:04.157]   ..$ timeout         : num 2592000
[17:46:04.157]   ..$ rscript         : NULL
[17:46:04.157]   ..$ homogeneous     : NULL
[17:46:04.157]   ..$ rscript_args    : NULL
[17:46:04.157]   ..$ rscript_envs    : NULL
[17:46:04.157]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:04.157]   ..$ rscript_startup : NULL
[17:46:04.157]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:04.157]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:04.157]   ..$ methods         : logi TRUE
[17:46:04.157]   ..$ socketOptions   : chr "no-delay"
[17:46:04.157]   ..$ useXDR          : logi FALSE
[17:46:04.157]   ..$ outfile         : chr "/dev/null"
[17:46:04.157]   ..$ renice          : int NA
[17:46:04.157]   ..$ rshcmd          : NULL
[17:46:04.157]   ..$ user            : NULL
[17:46:04.157]   ..$ revtunnel       : logi NA
[17:46:04.157]   ..$ rshlogfile      : NULL
[17:46:04.157]   ..$ rshopts         : NULL
[17:46:04.157]   ..$ rank            : int 1
[17:46:04.157]   ..$ manual          : logi FALSE
[17:46:04.157]   ..$ dryrun          : logi FALSE
[17:46:04.157]   ..$ quiet           : logi FALSE
[17:46:04.157]   ..$ setup_strategy  : chr "parallel"
[17:46:04.157]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:04.175] [local output] System call to launch all workers:
[17:46:04.175] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP8Y7gD/worker.rank=1.parallelly.parent=38979.984370c20336.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11576 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:04.175] [local output] Starting PSOCK main server
[17:46:04.181] [local output] Workers launched
[17:46:04.181] [local output] Waiting for workers to connect back
[17:46:04.181]  - [local output] 0 workers out of 2 ready
[17:46:04.431]  - [local output] 0 workers out of 2 ready
[17:46:04.432]  - [local output] 1 workers out of 2 ready
[17:46:04.432]  - [local output] 2 workers out of 2 ready
[17:46:04.432] [local output] Launching of workers completed
[17:46:04.433] [local output] Collecting session information from workers
[17:46:04.433] [local output]  - Worker #1 of 2
[17:46:04.434] [local output]  - Worker #2 of 2
[17:46:04.434] [local output] makeClusterPSOCK() ... done
[17:46:04.446] Packages needed by the future expression (n = 0): <none>
[17:46:04.446] Packages needed by future strategies (n = 0): <none>
[17:46:04.447] {
[17:46:04.447]     {
[17:46:04.447]         {
[17:46:04.447]             ...future.startTime <- base::Sys.time()
[17:46:04.447]             {
[17:46:04.447]                 {
[17:46:04.447]                   {
[17:46:04.447]                     {
[17:46:04.447]                       base::local({
[17:46:04.447]                         has_future <- base::requireNamespace("future", 
[17:46:04.447]                           quietly = TRUE)
[17:46:04.447]                         if (has_future) {
[17:46:04.447]                           ns <- base::getNamespace("future")
[17:46:04.447]                           version <- ns[[".package"]][["version"]]
[17:46:04.447]                           if (is.null(version)) 
[17:46:04.447]                             version <- utils::packageVersion("future")
[17:46:04.447]                         }
[17:46:04.447]                         else {
[17:46:04.447]                           version <- NULL
[17:46:04.447]                         }
[17:46:04.447]                         if (!has_future || version < "1.8.0") {
[17:46:04.447]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:04.447]                             "", base::R.version$version.string), 
[17:46:04.447]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:04.447]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:04.447]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:04.447]                               "release", "version")], collapse = " "), 
[17:46:04.447]                             hostname = base::Sys.info()[["nodename"]])
[17:46:04.447]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:04.447]                             info)
[17:46:04.447]                           info <- base::paste(info, collapse = "; ")
[17:46:04.447]                           if (!has_future) {
[17:46:04.447]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:04.447]                               info)
[17:46:04.447]                           }
[17:46:04.447]                           else {
[17:46:04.447]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:04.447]                               info, version)
[17:46:04.447]                           }
[17:46:04.447]                           base::stop(msg)
[17:46:04.447]                         }
[17:46:04.447]                       })
[17:46:04.447]                     }
[17:46:04.447]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:04.447]                     base::options(mc.cores = 1L)
[17:46:04.447]                   }
[17:46:04.447]                   ...future.strategy.old <- future::plan("list")
[17:46:04.447]                   options(future.plan = NULL)
[17:46:04.447]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.447]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:04.447]                 }
[17:46:04.447]                 ...future.workdir <- getwd()
[17:46:04.447]             }
[17:46:04.447]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:04.447]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:04.447]         }
[17:46:04.447]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:04.447]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:04.447]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:04.447]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:04.447]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:04.447]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:04.447]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:04.447]             base::names(...future.oldOptions))
[17:46:04.447]     }
[17:46:04.447]     if (FALSE) {
[17:46:04.447]     }
[17:46:04.447]     else {
[17:46:04.447]         if (TRUE) {
[17:46:04.447]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:04.447]                 open = "w")
[17:46:04.447]         }
[17:46:04.447]         else {
[17:46:04.447]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:04.447]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:04.447]         }
[17:46:04.447]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:04.447]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:04.447]             base::sink(type = "output", split = FALSE)
[17:46:04.447]             base::close(...future.stdout)
[17:46:04.447]         }, add = TRUE)
[17:46:04.447]     }
[17:46:04.447]     ...future.frame <- base::sys.nframe()
[17:46:04.447]     ...future.conditions <- base::list()
[17:46:04.447]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:04.447]     if (FALSE) {
[17:46:04.447]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:04.447]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:04.447]     }
[17:46:04.447]     ...future.result <- base::tryCatch({
[17:46:04.447]         base::withCallingHandlers({
[17:46:04.447]             ...future.value <- base::withVisible(base::local({
[17:46:04.447]                 ...future.makeSendCondition <- base::local({
[17:46:04.447]                   sendCondition <- NULL
[17:46:04.447]                   function(frame = 1L) {
[17:46:04.447]                     if (is.function(sendCondition)) 
[17:46:04.447]                       return(sendCondition)
[17:46:04.447]                     ns <- getNamespace("parallel")
[17:46:04.447]                     if (exists("sendData", mode = "function", 
[17:46:04.447]                       envir = ns)) {
[17:46:04.447]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:04.447]                         envir = ns)
[17:46:04.447]                       envir <- sys.frame(frame)
[17:46:04.447]                       master <- NULL
[17:46:04.447]                       while (!identical(envir, .GlobalEnv) && 
[17:46:04.447]                         !identical(envir, emptyenv())) {
[17:46:04.447]                         if (exists("master", mode = "list", envir = envir, 
[17:46:04.447]                           inherits = FALSE)) {
[17:46:04.447]                           master <- get("master", mode = "list", 
[17:46:04.447]                             envir = envir, inherits = FALSE)
[17:46:04.447]                           if (inherits(master, c("SOCKnode", 
[17:46:04.447]                             "SOCK0node"))) {
[17:46:04.447]                             sendCondition <<- function(cond) {
[17:46:04.447]                               data <- list(type = "VALUE", value = cond, 
[17:46:04.447]                                 success = TRUE)
[17:46:04.447]                               parallel_sendData(master, data)
[17:46:04.447]                             }
[17:46:04.447]                             return(sendCondition)
[17:46:04.447]                           }
[17:46:04.447]                         }
[17:46:04.447]                         frame <- frame + 1L
[17:46:04.447]                         envir <- sys.frame(frame)
[17:46:04.447]                       }
[17:46:04.447]                     }
[17:46:04.447]                     sendCondition <<- function(cond) NULL
[17:46:04.447]                   }
[17:46:04.447]                 })
[17:46:04.447]                 withCallingHandlers({
[17:46:04.447]                   NA
[17:46:04.447]                 }, immediateCondition = function(cond) {
[17:46:04.447]                   sendCondition <- ...future.makeSendCondition()
[17:46:04.447]                   sendCondition(cond)
[17:46:04.447]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.447]                   {
[17:46:04.447]                     inherits <- base::inherits
[17:46:04.447]                     invokeRestart <- base::invokeRestart
[17:46:04.447]                     is.null <- base::is.null
[17:46:04.447]                     muffled <- FALSE
[17:46:04.447]                     if (inherits(cond, "message")) {
[17:46:04.447]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:04.447]                       if (muffled) 
[17:46:04.447]                         invokeRestart("muffleMessage")
[17:46:04.447]                     }
[17:46:04.447]                     else if (inherits(cond, "warning")) {
[17:46:04.447]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:04.447]                       if (muffled) 
[17:46:04.447]                         invokeRestart("muffleWarning")
[17:46:04.447]                     }
[17:46:04.447]                     else if (inherits(cond, "condition")) {
[17:46:04.447]                       if (!is.null(pattern)) {
[17:46:04.447]                         computeRestarts <- base::computeRestarts
[17:46:04.447]                         grepl <- base::grepl
[17:46:04.447]                         restarts <- computeRestarts(cond)
[17:46:04.447]                         for (restart in restarts) {
[17:46:04.447]                           name <- restart$name
[17:46:04.447]                           if (is.null(name)) 
[17:46:04.447]                             next
[17:46:04.447]                           if (!grepl(pattern, name)) 
[17:46:04.447]                             next
[17:46:04.447]                           invokeRestart(restart)
[17:46:04.447]                           muffled <- TRUE
[17:46:04.447]                           break
[17:46:04.447]                         }
[17:46:04.447]                       }
[17:46:04.447]                     }
[17:46:04.447]                     invisible(muffled)
[17:46:04.447]                   }
[17:46:04.447]                   muffleCondition(cond)
[17:46:04.447]                 })
[17:46:04.447]             }))
[17:46:04.447]             future::FutureResult(value = ...future.value$value, 
[17:46:04.447]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.447]                   ...future.rng), globalenv = if (FALSE) 
[17:46:04.447]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:04.447]                     ...future.globalenv.names))
[17:46:04.447]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:04.447]         }, condition = base::local({
[17:46:04.447]             c <- base::c
[17:46:04.447]             inherits <- base::inherits
[17:46:04.447]             invokeRestart <- base::invokeRestart
[17:46:04.447]             length <- base::length
[17:46:04.447]             list <- base::list
[17:46:04.447]             seq.int <- base::seq.int
[17:46:04.447]             signalCondition <- base::signalCondition
[17:46:04.447]             sys.calls <- base::sys.calls
[17:46:04.447]             `[[` <- base::`[[`
[17:46:04.447]             `+` <- base::`+`
[17:46:04.447]             `<<-` <- base::`<<-`
[17:46:04.447]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:04.447]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:04.447]                   3L)]
[17:46:04.447]             }
[17:46:04.447]             function(cond) {
[17:46:04.447]                 is_error <- inherits(cond, "error")
[17:46:04.447]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:04.447]                   NULL)
[17:46:04.447]                 if (is_error) {
[17:46:04.447]                   sessionInformation <- function() {
[17:46:04.447]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:04.447]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:04.447]                       search = base::search(), system = base::Sys.info())
[17:46:04.447]                   }
[17:46:04.447]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.447]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:04.447]                     cond$call), session = sessionInformation(), 
[17:46:04.447]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:04.447]                   signalCondition(cond)
[17:46:04.447]                 }
[17:46:04.447]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:04.447]                 "immediateCondition"))) {
[17:46:04.447]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:04.447]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.447]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:04.447]                   if (TRUE && !signal) {
[17:46:04.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.447]                     {
[17:46:04.447]                       inherits <- base::inherits
[17:46:04.447]                       invokeRestart <- base::invokeRestart
[17:46:04.447]                       is.null <- base::is.null
[17:46:04.447]                       muffled <- FALSE
[17:46:04.447]                       if (inherits(cond, "message")) {
[17:46:04.447]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.447]                         if (muffled) 
[17:46:04.447]                           invokeRestart("muffleMessage")
[17:46:04.447]                       }
[17:46:04.447]                       else if (inherits(cond, "warning")) {
[17:46:04.447]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.447]                         if (muffled) 
[17:46:04.447]                           invokeRestart("muffleWarning")
[17:46:04.447]                       }
[17:46:04.447]                       else if (inherits(cond, "condition")) {
[17:46:04.447]                         if (!is.null(pattern)) {
[17:46:04.447]                           computeRestarts <- base::computeRestarts
[17:46:04.447]                           grepl <- base::grepl
[17:46:04.447]                           restarts <- computeRestarts(cond)
[17:46:04.447]                           for (restart in restarts) {
[17:46:04.447]                             name <- restart$name
[17:46:04.447]                             if (is.null(name)) 
[17:46:04.447]                               next
[17:46:04.447]                             if (!grepl(pattern, name)) 
[17:46:04.447]                               next
[17:46:04.447]                             invokeRestart(restart)
[17:46:04.447]                             muffled <- TRUE
[17:46:04.447]                             break
[17:46:04.447]                           }
[17:46:04.447]                         }
[17:46:04.447]                       }
[17:46:04.447]                       invisible(muffled)
[17:46:04.447]                     }
[17:46:04.447]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.447]                   }
[17:46:04.447]                 }
[17:46:04.447]                 else {
[17:46:04.447]                   if (TRUE) {
[17:46:04.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.447]                     {
[17:46:04.447]                       inherits <- base::inherits
[17:46:04.447]                       invokeRestart <- base::invokeRestart
[17:46:04.447]                       is.null <- base::is.null
[17:46:04.447]                       muffled <- FALSE
[17:46:04.447]                       if (inherits(cond, "message")) {
[17:46:04.447]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.447]                         if (muffled) 
[17:46:04.447]                           invokeRestart("muffleMessage")
[17:46:04.447]                       }
[17:46:04.447]                       else if (inherits(cond, "warning")) {
[17:46:04.447]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.447]                         if (muffled) 
[17:46:04.447]                           invokeRestart("muffleWarning")
[17:46:04.447]                       }
[17:46:04.447]                       else if (inherits(cond, "condition")) {
[17:46:04.447]                         if (!is.null(pattern)) {
[17:46:04.447]                           computeRestarts <- base::computeRestarts
[17:46:04.447]                           grepl <- base::grepl
[17:46:04.447]                           restarts <- computeRestarts(cond)
[17:46:04.447]                           for (restart in restarts) {
[17:46:04.447]                             name <- restart$name
[17:46:04.447]                             if (is.null(name)) 
[17:46:04.447]                               next
[17:46:04.447]                             if (!grepl(pattern, name)) 
[17:46:04.447]                               next
[17:46:04.447]                             invokeRestart(restart)
[17:46:04.447]                             muffled <- TRUE
[17:46:04.447]                             break
[17:46:04.447]                           }
[17:46:04.447]                         }
[17:46:04.447]                       }
[17:46:04.447]                       invisible(muffled)
[17:46:04.447]                     }
[17:46:04.447]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.447]                   }
[17:46:04.447]                 }
[17:46:04.447]             }
[17:46:04.447]         }))
[17:46:04.447]     }, error = function(ex) {
[17:46:04.447]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:04.447]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.447]                 ...future.rng), started = ...future.startTime, 
[17:46:04.447]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:04.447]             version = "1.8"), class = "FutureResult")
[17:46:04.447]     }, finally = {
[17:46:04.447]         if (!identical(...future.workdir, getwd())) 
[17:46:04.447]             setwd(...future.workdir)
[17:46:04.447]         {
[17:46:04.447]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:04.447]                 ...future.oldOptions$nwarnings <- NULL
[17:46:04.447]             }
[17:46:04.447]             base::options(...future.oldOptions)
[17:46:04.447]             if (.Platform$OS.type == "windows") {
[17:46:04.447]                 old_names <- names(...future.oldEnvVars)
[17:46:04.447]                 envs <- base::Sys.getenv()
[17:46:04.447]                 names <- names(envs)
[17:46:04.447]                 common <- intersect(names, old_names)
[17:46:04.447]                 added <- setdiff(names, old_names)
[17:46:04.447]                 removed <- setdiff(old_names, names)
[17:46:04.447]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:04.447]                   envs[common]]
[17:46:04.447]                 NAMES <- toupper(changed)
[17:46:04.447]                 args <- list()
[17:46:04.447]                 for (kk in seq_along(NAMES)) {
[17:46:04.447]                   name <- changed[[kk]]
[17:46:04.447]                   NAME <- NAMES[[kk]]
[17:46:04.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.447]                     next
[17:46:04.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.447]                 }
[17:46:04.447]                 NAMES <- toupper(added)
[17:46:04.447]                 for (kk in seq_along(NAMES)) {
[17:46:04.447]                   name <- added[[kk]]
[17:46:04.447]                   NAME <- NAMES[[kk]]
[17:46:04.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.447]                     next
[17:46:04.447]                   args[[name]] <- ""
[17:46:04.447]                 }
[17:46:04.447]                 NAMES <- toupper(removed)
[17:46:04.447]                 for (kk in seq_along(NAMES)) {
[17:46:04.447]                   name <- removed[[kk]]
[17:46:04.447]                   NAME <- NAMES[[kk]]
[17:46:04.447]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.447]                     next
[17:46:04.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.447]                 }
[17:46:04.447]                 if (length(args) > 0) 
[17:46:04.447]                   base::do.call(base::Sys.setenv, args = args)
[17:46:04.447]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:04.447]             }
[17:46:04.447]             else {
[17:46:04.447]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:04.447]             }
[17:46:04.447]             {
[17:46:04.447]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:04.447]                   0L) {
[17:46:04.447]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:04.447]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:04.447]                   base::options(opts)
[17:46:04.447]                 }
[17:46:04.447]                 {
[17:46:04.447]                   {
[17:46:04.447]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:04.447]                     NULL
[17:46:04.447]                   }
[17:46:04.447]                   options(future.plan = NULL)
[17:46:04.447]                   if (is.na(NA_character_)) 
[17:46:04.447]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.447]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:04.447]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:04.447]                     .init = FALSE)
[17:46:04.447]                 }
[17:46:04.447]             }
[17:46:04.447]         }
[17:46:04.447]     })
[17:46:04.447]     if (TRUE) {
[17:46:04.447]         base::sink(type = "output", split = FALSE)
[17:46:04.447]         if (TRUE) {
[17:46:04.447]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:04.447]         }
[17:46:04.447]         else {
[17:46:04.447]             ...future.result["stdout"] <- base::list(NULL)
[17:46:04.447]         }
[17:46:04.447]         base::close(...future.stdout)
[17:46:04.447]         ...future.stdout <- NULL
[17:46:04.447]     }
[17:46:04.447]     ...future.result$conditions <- ...future.conditions
[17:46:04.447]     ...future.result$finished <- base::Sys.time()
[17:46:04.447]     ...future.result
[17:46:04.447] }
[17:46:04.500] MultisessionFuture started
[17:46:04.500] result() for ClusterFuture ...
[17:46:04.501] receiveMessageFromWorker() for ClusterFuture ...
[17:46:04.501] - Validating connection of MultisessionFuture
[17:46:04.532] - received message: FutureResult
[17:46:04.532] - Received FutureResult
[17:46:04.535] - Erased future from FutureRegistry
[17:46:04.535] result() for ClusterFuture ...
[17:46:04.535] - result already collected: FutureResult
[17:46:04.535] result() for ClusterFuture ... done
[17:46:04.535] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:04.535] result() for ClusterFuture ... done
[17:46:04.536] result() for ClusterFuture ...
[17:46:04.536] - result already collected: FutureResult
[17:46:04.536] result() for ClusterFuture ... done
[17:46:04.536] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:46:04.536] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[17:46:04.537] getGlobalsAndPackages() ...
[17:46:04.537] Searching for globals...
[17:46:04.543] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:46:04.543] Searching for globals ... DONE
[17:46:04.543] Resolving globals: FALSE
[17:46:04.545] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:46:04.545] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:46:04.545] - globals: [2] ‘slow_fcn’, ‘x’
[17:46:04.545] 
[17:46:04.546] getGlobalsAndPackages() ... DONE
[17:46:04.547] run() for ‘Future’ ...
[17:46:04.547] - state: ‘created’
[17:46:04.548] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:04.559] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:04.559] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:04.559]   - Field: ‘node’
[17:46:04.559]   - Field: ‘label’
[17:46:04.559]   - Field: ‘local’
[17:46:04.559]   - Field: ‘owner’
[17:46:04.559]   - Field: ‘envir’
[17:46:04.559]   - Field: ‘workers’
[17:46:04.559]   - Field: ‘packages’
[17:46:04.559]   - Field: ‘gc’
[17:46:04.560]   - Field: ‘conditions’
[17:46:04.560]   - Field: ‘persistent’
[17:46:04.560]   - Field: ‘expr’
[17:46:04.560]   - Field: ‘uuid’
[17:46:04.560]   - Field: ‘seed’
[17:46:04.560]   - Field: ‘version’
[17:46:04.560]   - Field: ‘result’
[17:46:04.560]   - Field: ‘asynchronous’
[17:46:04.561]   - Field: ‘calls’
[17:46:04.561]   - Field: ‘globals’
[17:46:04.561]   - Field: ‘stdout’
[17:46:04.561]   - Field: ‘earlySignal’
[17:46:04.561]   - Field: ‘lazy’
[17:46:04.561]   - Field: ‘state’
[17:46:04.561] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:04.561] - Launch lazy future ...
[17:46:04.562] Packages needed by the future expression (n = 0): <none>
[17:46:04.562] Packages needed by future strategies (n = 0): <none>
[17:46:04.562] {
[17:46:04.562]     {
[17:46:04.562]         {
[17:46:04.562]             ...future.startTime <- base::Sys.time()
[17:46:04.562]             {
[17:46:04.562]                 {
[17:46:04.562]                   {
[17:46:04.562]                     {
[17:46:04.562]                       base::local({
[17:46:04.562]                         has_future <- base::requireNamespace("future", 
[17:46:04.562]                           quietly = TRUE)
[17:46:04.562]                         if (has_future) {
[17:46:04.562]                           ns <- base::getNamespace("future")
[17:46:04.562]                           version <- ns[[".package"]][["version"]]
[17:46:04.562]                           if (is.null(version)) 
[17:46:04.562]                             version <- utils::packageVersion("future")
[17:46:04.562]                         }
[17:46:04.562]                         else {
[17:46:04.562]                           version <- NULL
[17:46:04.562]                         }
[17:46:04.562]                         if (!has_future || version < "1.8.0") {
[17:46:04.562]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:04.562]                             "", base::R.version$version.string), 
[17:46:04.562]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:04.562]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:04.562]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:04.562]                               "release", "version")], collapse = " "), 
[17:46:04.562]                             hostname = base::Sys.info()[["nodename"]])
[17:46:04.562]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:04.562]                             info)
[17:46:04.562]                           info <- base::paste(info, collapse = "; ")
[17:46:04.562]                           if (!has_future) {
[17:46:04.562]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:04.562]                               info)
[17:46:04.562]                           }
[17:46:04.562]                           else {
[17:46:04.562]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:04.562]                               info, version)
[17:46:04.562]                           }
[17:46:04.562]                           base::stop(msg)
[17:46:04.562]                         }
[17:46:04.562]                       })
[17:46:04.562]                     }
[17:46:04.562]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:04.562]                     base::options(mc.cores = 1L)
[17:46:04.562]                   }
[17:46:04.562]                   ...future.strategy.old <- future::plan("list")
[17:46:04.562]                   options(future.plan = NULL)
[17:46:04.562]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.562]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:04.562]                 }
[17:46:04.562]                 ...future.workdir <- getwd()
[17:46:04.562]             }
[17:46:04.562]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:04.562]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:04.562]         }
[17:46:04.562]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:04.562]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:04.562]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:04.562]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:04.562]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:04.562]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:04.562]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:04.562]             base::names(...future.oldOptions))
[17:46:04.562]     }
[17:46:04.562]     if (FALSE) {
[17:46:04.562]     }
[17:46:04.562]     else {
[17:46:04.562]         if (TRUE) {
[17:46:04.562]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:04.562]                 open = "w")
[17:46:04.562]         }
[17:46:04.562]         else {
[17:46:04.562]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:04.562]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:04.562]         }
[17:46:04.562]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:04.562]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:04.562]             base::sink(type = "output", split = FALSE)
[17:46:04.562]             base::close(...future.stdout)
[17:46:04.562]         }, add = TRUE)
[17:46:04.562]     }
[17:46:04.562]     ...future.frame <- base::sys.nframe()
[17:46:04.562]     ...future.conditions <- base::list()
[17:46:04.562]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:04.562]     if (FALSE) {
[17:46:04.562]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:04.562]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:04.562]     }
[17:46:04.562]     ...future.result <- base::tryCatch({
[17:46:04.562]         base::withCallingHandlers({
[17:46:04.562]             ...future.value <- base::withVisible(base::local({
[17:46:04.562]                 ...future.makeSendCondition <- base::local({
[17:46:04.562]                   sendCondition <- NULL
[17:46:04.562]                   function(frame = 1L) {
[17:46:04.562]                     if (is.function(sendCondition)) 
[17:46:04.562]                       return(sendCondition)
[17:46:04.562]                     ns <- getNamespace("parallel")
[17:46:04.562]                     if (exists("sendData", mode = "function", 
[17:46:04.562]                       envir = ns)) {
[17:46:04.562]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:04.562]                         envir = ns)
[17:46:04.562]                       envir <- sys.frame(frame)
[17:46:04.562]                       master <- NULL
[17:46:04.562]                       while (!identical(envir, .GlobalEnv) && 
[17:46:04.562]                         !identical(envir, emptyenv())) {
[17:46:04.562]                         if (exists("master", mode = "list", envir = envir, 
[17:46:04.562]                           inherits = FALSE)) {
[17:46:04.562]                           master <- get("master", mode = "list", 
[17:46:04.562]                             envir = envir, inherits = FALSE)
[17:46:04.562]                           if (inherits(master, c("SOCKnode", 
[17:46:04.562]                             "SOCK0node"))) {
[17:46:04.562]                             sendCondition <<- function(cond) {
[17:46:04.562]                               data <- list(type = "VALUE", value = cond, 
[17:46:04.562]                                 success = TRUE)
[17:46:04.562]                               parallel_sendData(master, data)
[17:46:04.562]                             }
[17:46:04.562]                             return(sendCondition)
[17:46:04.562]                           }
[17:46:04.562]                         }
[17:46:04.562]                         frame <- frame + 1L
[17:46:04.562]                         envir <- sys.frame(frame)
[17:46:04.562]                       }
[17:46:04.562]                     }
[17:46:04.562]                     sendCondition <<- function(cond) NULL
[17:46:04.562]                   }
[17:46:04.562]                 })
[17:46:04.562]                 withCallingHandlers({
[17:46:04.562]                   slow_fcn(x)
[17:46:04.562]                 }, immediateCondition = function(cond) {
[17:46:04.562]                   sendCondition <- ...future.makeSendCondition()
[17:46:04.562]                   sendCondition(cond)
[17:46:04.562]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.562]                   {
[17:46:04.562]                     inherits <- base::inherits
[17:46:04.562]                     invokeRestart <- base::invokeRestart
[17:46:04.562]                     is.null <- base::is.null
[17:46:04.562]                     muffled <- FALSE
[17:46:04.562]                     if (inherits(cond, "message")) {
[17:46:04.562]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:04.562]                       if (muffled) 
[17:46:04.562]                         invokeRestart("muffleMessage")
[17:46:04.562]                     }
[17:46:04.562]                     else if (inherits(cond, "warning")) {
[17:46:04.562]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:04.562]                       if (muffled) 
[17:46:04.562]                         invokeRestart("muffleWarning")
[17:46:04.562]                     }
[17:46:04.562]                     else if (inherits(cond, "condition")) {
[17:46:04.562]                       if (!is.null(pattern)) {
[17:46:04.562]                         computeRestarts <- base::computeRestarts
[17:46:04.562]                         grepl <- base::grepl
[17:46:04.562]                         restarts <- computeRestarts(cond)
[17:46:04.562]                         for (restart in restarts) {
[17:46:04.562]                           name <- restart$name
[17:46:04.562]                           if (is.null(name)) 
[17:46:04.562]                             next
[17:46:04.562]                           if (!grepl(pattern, name)) 
[17:46:04.562]                             next
[17:46:04.562]                           invokeRestart(restart)
[17:46:04.562]                           muffled <- TRUE
[17:46:04.562]                           break
[17:46:04.562]                         }
[17:46:04.562]                       }
[17:46:04.562]                     }
[17:46:04.562]                     invisible(muffled)
[17:46:04.562]                   }
[17:46:04.562]                   muffleCondition(cond)
[17:46:04.562]                 })
[17:46:04.562]             }))
[17:46:04.562]             future::FutureResult(value = ...future.value$value, 
[17:46:04.562]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.562]                   ...future.rng), globalenv = if (FALSE) 
[17:46:04.562]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:04.562]                     ...future.globalenv.names))
[17:46:04.562]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:04.562]         }, condition = base::local({
[17:46:04.562]             c <- base::c
[17:46:04.562]             inherits <- base::inherits
[17:46:04.562]             invokeRestart <- base::invokeRestart
[17:46:04.562]             length <- base::length
[17:46:04.562]             list <- base::list
[17:46:04.562]             seq.int <- base::seq.int
[17:46:04.562]             signalCondition <- base::signalCondition
[17:46:04.562]             sys.calls <- base::sys.calls
[17:46:04.562]             `[[` <- base::`[[`
[17:46:04.562]             `+` <- base::`+`
[17:46:04.562]             `<<-` <- base::`<<-`
[17:46:04.562]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:04.562]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:04.562]                   3L)]
[17:46:04.562]             }
[17:46:04.562]             function(cond) {
[17:46:04.562]                 is_error <- inherits(cond, "error")
[17:46:04.562]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:04.562]                   NULL)
[17:46:04.562]                 if (is_error) {
[17:46:04.562]                   sessionInformation <- function() {
[17:46:04.562]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:04.562]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:04.562]                       search = base::search(), system = base::Sys.info())
[17:46:04.562]                   }
[17:46:04.562]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.562]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:04.562]                     cond$call), session = sessionInformation(), 
[17:46:04.562]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:04.562]                   signalCondition(cond)
[17:46:04.562]                 }
[17:46:04.562]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:04.562]                 "immediateCondition"))) {
[17:46:04.562]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:04.562]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.562]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:04.562]                   if (TRUE && !signal) {
[17:46:04.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.562]                     {
[17:46:04.562]                       inherits <- base::inherits
[17:46:04.562]                       invokeRestart <- base::invokeRestart
[17:46:04.562]                       is.null <- base::is.null
[17:46:04.562]                       muffled <- FALSE
[17:46:04.562]                       if (inherits(cond, "message")) {
[17:46:04.562]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.562]                         if (muffled) 
[17:46:04.562]                           invokeRestart("muffleMessage")
[17:46:04.562]                       }
[17:46:04.562]                       else if (inherits(cond, "warning")) {
[17:46:04.562]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.562]                         if (muffled) 
[17:46:04.562]                           invokeRestart("muffleWarning")
[17:46:04.562]                       }
[17:46:04.562]                       else if (inherits(cond, "condition")) {
[17:46:04.562]                         if (!is.null(pattern)) {
[17:46:04.562]                           computeRestarts <- base::computeRestarts
[17:46:04.562]                           grepl <- base::grepl
[17:46:04.562]                           restarts <- computeRestarts(cond)
[17:46:04.562]                           for (restart in restarts) {
[17:46:04.562]                             name <- restart$name
[17:46:04.562]                             if (is.null(name)) 
[17:46:04.562]                               next
[17:46:04.562]                             if (!grepl(pattern, name)) 
[17:46:04.562]                               next
[17:46:04.562]                             invokeRestart(restart)
[17:46:04.562]                             muffled <- TRUE
[17:46:04.562]                             break
[17:46:04.562]                           }
[17:46:04.562]                         }
[17:46:04.562]                       }
[17:46:04.562]                       invisible(muffled)
[17:46:04.562]                     }
[17:46:04.562]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.562]                   }
[17:46:04.562]                 }
[17:46:04.562]                 else {
[17:46:04.562]                   if (TRUE) {
[17:46:04.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.562]                     {
[17:46:04.562]                       inherits <- base::inherits
[17:46:04.562]                       invokeRestart <- base::invokeRestart
[17:46:04.562]                       is.null <- base::is.null
[17:46:04.562]                       muffled <- FALSE
[17:46:04.562]                       if (inherits(cond, "message")) {
[17:46:04.562]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.562]                         if (muffled) 
[17:46:04.562]                           invokeRestart("muffleMessage")
[17:46:04.562]                       }
[17:46:04.562]                       else if (inherits(cond, "warning")) {
[17:46:04.562]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.562]                         if (muffled) 
[17:46:04.562]                           invokeRestart("muffleWarning")
[17:46:04.562]                       }
[17:46:04.562]                       else if (inherits(cond, "condition")) {
[17:46:04.562]                         if (!is.null(pattern)) {
[17:46:04.562]                           computeRestarts <- base::computeRestarts
[17:46:04.562]                           grepl <- base::grepl
[17:46:04.562]                           restarts <- computeRestarts(cond)
[17:46:04.562]                           for (restart in restarts) {
[17:46:04.562]                             name <- restart$name
[17:46:04.562]                             if (is.null(name)) 
[17:46:04.562]                               next
[17:46:04.562]                             if (!grepl(pattern, name)) 
[17:46:04.562]                               next
[17:46:04.562]                             invokeRestart(restart)
[17:46:04.562]                             muffled <- TRUE
[17:46:04.562]                             break
[17:46:04.562]                           }
[17:46:04.562]                         }
[17:46:04.562]                       }
[17:46:04.562]                       invisible(muffled)
[17:46:04.562]                     }
[17:46:04.562]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.562]                   }
[17:46:04.562]                 }
[17:46:04.562]             }
[17:46:04.562]         }))
[17:46:04.562]     }, error = function(ex) {
[17:46:04.562]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:04.562]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.562]                 ...future.rng), started = ...future.startTime, 
[17:46:04.562]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:04.562]             version = "1.8"), class = "FutureResult")
[17:46:04.562]     }, finally = {
[17:46:04.562]         if (!identical(...future.workdir, getwd())) 
[17:46:04.562]             setwd(...future.workdir)
[17:46:04.562]         {
[17:46:04.562]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:04.562]                 ...future.oldOptions$nwarnings <- NULL
[17:46:04.562]             }
[17:46:04.562]             base::options(...future.oldOptions)
[17:46:04.562]             if (.Platform$OS.type == "windows") {
[17:46:04.562]                 old_names <- names(...future.oldEnvVars)
[17:46:04.562]                 envs <- base::Sys.getenv()
[17:46:04.562]                 names <- names(envs)
[17:46:04.562]                 common <- intersect(names, old_names)
[17:46:04.562]                 added <- setdiff(names, old_names)
[17:46:04.562]                 removed <- setdiff(old_names, names)
[17:46:04.562]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:04.562]                   envs[common]]
[17:46:04.562]                 NAMES <- toupper(changed)
[17:46:04.562]                 args <- list()
[17:46:04.562]                 for (kk in seq_along(NAMES)) {
[17:46:04.562]                   name <- changed[[kk]]
[17:46:04.562]                   NAME <- NAMES[[kk]]
[17:46:04.562]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.562]                     next
[17:46:04.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.562]                 }
[17:46:04.562]                 NAMES <- toupper(added)
[17:46:04.562]                 for (kk in seq_along(NAMES)) {
[17:46:04.562]                   name <- added[[kk]]
[17:46:04.562]                   NAME <- NAMES[[kk]]
[17:46:04.562]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.562]                     next
[17:46:04.562]                   args[[name]] <- ""
[17:46:04.562]                 }
[17:46:04.562]                 NAMES <- toupper(removed)
[17:46:04.562]                 for (kk in seq_along(NAMES)) {
[17:46:04.562]                   name <- removed[[kk]]
[17:46:04.562]                   NAME <- NAMES[[kk]]
[17:46:04.562]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.562]                     next
[17:46:04.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.562]                 }
[17:46:04.562]                 if (length(args) > 0) 
[17:46:04.562]                   base::do.call(base::Sys.setenv, args = args)
[17:46:04.562]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:04.562]             }
[17:46:04.562]             else {
[17:46:04.562]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:04.562]             }
[17:46:04.562]             {
[17:46:04.562]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:04.562]                   0L) {
[17:46:04.562]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:04.562]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:04.562]                   base::options(opts)
[17:46:04.562]                 }
[17:46:04.562]                 {
[17:46:04.562]                   {
[17:46:04.562]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:04.562]                     NULL
[17:46:04.562]                   }
[17:46:04.562]                   options(future.plan = NULL)
[17:46:04.562]                   if (is.na(NA_character_)) 
[17:46:04.562]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.562]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:04.562]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:04.562]                     .init = FALSE)
[17:46:04.562]                 }
[17:46:04.562]             }
[17:46:04.562]         }
[17:46:04.562]     })
[17:46:04.562]     if (TRUE) {
[17:46:04.562]         base::sink(type = "output", split = FALSE)
[17:46:04.562]         if (TRUE) {
[17:46:04.562]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:04.562]         }
[17:46:04.562]         else {
[17:46:04.562]             ...future.result["stdout"] <- base::list(NULL)
[17:46:04.562]         }
[17:46:04.562]         base::close(...future.stdout)
[17:46:04.562]         ...future.stdout <- NULL
[17:46:04.562]     }
[17:46:04.562]     ...future.result$conditions <- ...future.conditions
[17:46:04.562]     ...future.result$finished <- base::Sys.time()
[17:46:04.562]     ...future.result
[17:46:04.562] }
[17:46:04.568] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[17:46:04.568] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[17:46:04.569] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[17:46:04.569] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:46:04.569] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:46:04.569] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[17:46:04.571] MultisessionFuture started
[17:46:04.571] - Launch lazy future ... done
[17:46:04.572] run() for ‘MultisessionFuture’ ... done
[17:46:04.573] getGlobalsAndPackages() ...
[17:46:04.573] Searching for globals...
[17:46:04.577] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:46:04.578] Searching for globals ... DONE
[17:46:04.578] Resolving globals: FALSE
[17:46:04.578] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:46:04.579] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:46:04.579] - globals: [2] ‘slow_fcn’, ‘x’
[17:46:04.579] 
[17:46:04.579] getGlobalsAndPackages() ... DONE
[17:46:04.579] run() for ‘Future’ ...
[17:46:04.579] - state: ‘created’
[17:46:04.580] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:04.590] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:04.590] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:04.590]   - Field: ‘node’
[17:46:04.590]   - Field: ‘label’
[17:46:04.590]   - Field: ‘local’
[17:46:04.590]   - Field: ‘owner’
[17:46:04.590]   - Field: ‘envir’
[17:46:04.590]   - Field: ‘workers’
[17:46:04.590]   - Field: ‘packages’
[17:46:04.591]   - Field: ‘gc’
[17:46:04.591]   - Field: ‘conditions’
[17:46:04.591]   - Field: ‘persistent’
[17:46:04.591]   - Field: ‘expr’
[17:46:04.591]   - Field: ‘uuid’
[17:46:04.591]   - Field: ‘seed’
[17:46:04.591]   - Field: ‘version’
[17:46:04.591]   - Field: ‘result’
[17:46:04.591]   - Field: ‘asynchronous’
[17:46:04.591]   - Field: ‘calls’
[17:46:04.591]   - Field: ‘globals’
[17:46:04.591]   - Field: ‘stdout’
[17:46:04.592]   - Field: ‘earlySignal’
[17:46:04.592]   - Field: ‘lazy’
[17:46:04.592]   - Field: ‘state’
[17:46:04.592] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:04.592] - Launch lazy future ...
[17:46:04.592] Packages needed by the future expression (n = 0): <none>
[17:46:04.592] Packages needed by future strategies (n = 0): <none>
[17:46:04.593] {
[17:46:04.593]     {
[17:46:04.593]         {
[17:46:04.593]             ...future.startTime <- base::Sys.time()
[17:46:04.593]             {
[17:46:04.593]                 {
[17:46:04.593]                   {
[17:46:04.593]                     {
[17:46:04.593]                       base::local({
[17:46:04.593]                         has_future <- base::requireNamespace("future", 
[17:46:04.593]                           quietly = TRUE)
[17:46:04.593]                         if (has_future) {
[17:46:04.593]                           ns <- base::getNamespace("future")
[17:46:04.593]                           version <- ns[[".package"]][["version"]]
[17:46:04.593]                           if (is.null(version)) 
[17:46:04.593]                             version <- utils::packageVersion("future")
[17:46:04.593]                         }
[17:46:04.593]                         else {
[17:46:04.593]                           version <- NULL
[17:46:04.593]                         }
[17:46:04.593]                         if (!has_future || version < "1.8.0") {
[17:46:04.593]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:04.593]                             "", base::R.version$version.string), 
[17:46:04.593]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:04.593]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:04.593]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:04.593]                               "release", "version")], collapse = " "), 
[17:46:04.593]                             hostname = base::Sys.info()[["nodename"]])
[17:46:04.593]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:04.593]                             info)
[17:46:04.593]                           info <- base::paste(info, collapse = "; ")
[17:46:04.593]                           if (!has_future) {
[17:46:04.593]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:04.593]                               info)
[17:46:04.593]                           }
[17:46:04.593]                           else {
[17:46:04.593]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:04.593]                               info, version)
[17:46:04.593]                           }
[17:46:04.593]                           base::stop(msg)
[17:46:04.593]                         }
[17:46:04.593]                       })
[17:46:04.593]                     }
[17:46:04.593]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:04.593]                     base::options(mc.cores = 1L)
[17:46:04.593]                   }
[17:46:04.593]                   ...future.strategy.old <- future::plan("list")
[17:46:04.593]                   options(future.plan = NULL)
[17:46:04.593]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.593]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:04.593]                 }
[17:46:04.593]                 ...future.workdir <- getwd()
[17:46:04.593]             }
[17:46:04.593]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:04.593]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:04.593]         }
[17:46:04.593]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:04.593]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:04.593]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:04.593]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:04.593]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:04.593]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:04.593]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:04.593]             base::names(...future.oldOptions))
[17:46:04.593]     }
[17:46:04.593]     if (FALSE) {
[17:46:04.593]     }
[17:46:04.593]     else {
[17:46:04.593]         if (TRUE) {
[17:46:04.593]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:04.593]                 open = "w")
[17:46:04.593]         }
[17:46:04.593]         else {
[17:46:04.593]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:04.593]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:04.593]         }
[17:46:04.593]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:04.593]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:04.593]             base::sink(type = "output", split = FALSE)
[17:46:04.593]             base::close(...future.stdout)
[17:46:04.593]         }, add = TRUE)
[17:46:04.593]     }
[17:46:04.593]     ...future.frame <- base::sys.nframe()
[17:46:04.593]     ...future.conditions <- base::list()
[17:46:04.593]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:04.593]     if (FALSE) {
[17:46:04.593]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:04.593]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:04.593]     }
[17:46:04.593]     ...future.result <- base::tryCatch({
[17:46:04.593]         base::withCallingHandlers({
[17:46:04.593]             ...future.value <- base::withVisible(base::local({
[17:46:04.593]                 ...future.makeSendCondition <- base::local({
[17:46:04.593]                   sendCondition <- NULL
[17:46:04.593]                   function(frame = 1L) {
[17:46:04.593]                     if (is.function(sendCondition)) 
[17:46:04.593]                       return(sendCondition)
[17:46:04.593]                     ns <- getNamespace("parallel")
[17:46:04.593]                     if (exists("sendData", mode = "function", 
[17:46:04.593]                       envir = ns)) {
[17:46:04.593]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:04.593]                         envir = ns)
[17:46:04.593]                       envir <- sys.frame(frame)
[17:46:04.593]                       master <- NULL
[17:46:04.593]                       while (!identical(envir, .GlobalEnv) && 
[17:46:04.593]                         !identical(envir, emptyenv())) {
[17:46:04.593]                         if (exists("master", mode = "list", envir = envir, 
[17:46:04.593]                           inherits = FALSE)) {
[17:46:04.593]                           master <- get("master", mode = "list", 
[17:46:04.593]                             envir = envir, inherits = FALSE)
[17:46:04.593]                           if (inherits(master, c("SOCKnode", 
[17:46:04.593]                             "SOCK0node"))) {
[17:46:04.593]                             sendCondition <<- function(cond) {
[17:46:04.593]                               data <- list(type = "VALUE", value = cond, 
[17:46:04.593]                                 success = TRUE)
[17:46:04.593]                               parallel_sendData(master, data)
[17:46:04.593]                             }
[17:46:04.593]                             return(sendCondition)
[17:46:04.593]                           }
[17:46:04.593]                         }
[17:46:04.593]                         frame <- frame + 1L
[17:46:04.593]                         envir <- sys.frame(frame)
[17:46:04.593]                       }
[17:46:04.593]                     }
[17:46:04.593]                     sendCondition <<- function(cond) NULL
[17:46:04.593]                   }
[17:46:04.593]                 })
[17:46:04.593]                 withCallingHandlers({
[17:46:04.593]                   slow_fcn(x)
[17:46:04.593]                 }, immediateCondition = function(cond) {
[17:46:04.593]                   sendCondition <- ...future.makeSendCondition()
[17:46:04.593]                   sendCondition(cond)
[17:46:04.593]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.593]                   {
[17:46:04.593]                     inherits <- base::inherits
[17:46:04.593]                     invokeRestart <- base::invokeRestart
[17:46:04.593]                     is.null <- base::is.null
[17:46:04.593]                     muffled <- FALSE
[17:46:04.593]                     if (inherits(cond, "message")) {
[17:46:04.593]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:04.593]                       if (muffled) 
[17:46:04.593]                         invokeRestart("muffleMessage")
[17:46:04.593]                     }
[17:46:04.593]                     else if (inherits(cond, "warning")) {
[17:46:04.593]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:04.593]                       if (muffled) 
[17:46:04.593]                         invokeRestart("muffleWarning")
[17:46:04.593]                     }
[17:46:04.593]                     else if (inherits(cond, "condition")) {
[17:46:04.593]                       if (!is.null(pattern)) {
[17:46:04.593]                         computeRestarts <- base::computeRestarts
[17:46:04.593]                         grepl <- base::grepl
[17:46:04.593]                         restarts <- computeRestarts(cond)
[17:46:04.593]                         for (restart in restarts) {
[17:46:04.593]                           name <- restart$name
[17:46:04.593]                           if (is.null(name)) 
[17:46:04.593]                             next
[17:46:04.593]                           if (!grepl(pattern, name)) 
[17:46:04.593]                             next
[17:46:04.593]                           invokeRestart(restart)
[17:46:04.593]                           muffled <- TRUE
[17:46:04.593]                           break
[17:46:04.593]                         }
[17:46:04.593]                       }
[17:46:04.593]                     }
[17:46:04.593]                     invisible(muffled)
[17:46:04.593]                   }
[17:46:04.593]                   muffleCondition(cond)
[17:46:04.593]                 })
[17:46:04.593]             }))
[17:46:04.593]             future::FutureResult(value = ...future.value$value, 
[17:46:04.593]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.593]                   ...future.rng), globalenv = if (FALSE) 
[17:46:04.593]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:04.593]                     ...future.globalenv.names))
[17:46:04.593]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:04.593]         }, condition = base::local({
[17:46:04.593]             c <- base::c
[17:46:04.593]             inherits <- base::inherits
[17:46:04.593]             invokeRestart <- base::invokeRestart
[17:46:04.593]             length <- base::length
[17:46:04.593]             list <- base::list
[17:46:04.593]             seq.int <- base::seq.int
[17:46:04.593]             signalCondition <- base::signalCondition
[17:46:04.593]             sys.calls <- base::sys.calls
[17:46:04.593]             `[[` <- base::`[[`
[17:46:04.593]             `+` <- base::`+`
[17:46:04.593]             `<<-` <- base::`<<-`
[17:46:04.593]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:04.593]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:04.593]                   3L)]
[17:46:04.593]             }
[17:46:04.593]             function(cond) {
[17:46:04.593]                 is_error <- inherits(cond, "error")
[17:46:04.593]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:04.593]                   NULL)
[17:46:04.593]                 if (is_error) {
[17:46:04.593]                   sessionInformation <- function() {
[17:46:04.593]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:04.593]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:04.593]                       search = base::search(), system = base::Sys.info())
[17:46:04.593]                   }
[17:46:04.593]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.593]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:04.593]                     cond$call), session = sessionInformation(), 
[17:46:04.593]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:04.593]                   signalCondition(cond)
[17:46:04.593]                 }
[17:46:04.593]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:04.593]                 "immediateCondition"))) {
[17:46:04.593]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:04.593]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.593]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:04.593]                   if (TRUE && !signal) {
[17:46:04.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.593]                     {
[17:46:04.593]                       inherits <- base::inherits
[17:46:04.593]                       invokeRestart <- base::invokeRestart
[17:46:04.593]                       is.null <- base::is.null
[17:46:04.593]                       muffled <- FALSE
[17:46:04.593]                       if (inherits(cond, "message")) {
[17:46:04.593]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.593]                         if (muffled) 
[17:46:04.593]                           invokeRestart("muffleMessage")
[17:46:04.593]                       }
[17:46:04.593]                       else if (inherits(cond, "warning")) {
[17:46:04.593]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.593]                         if (muffled) 
[17:46:04.593]                           invokeRestart("muffleWarning")
[17:46:04.593]                       }
[17:46:04.593]                       else if (inherits(cond, "condition")) {
[17:46:04.593]                         if (!is.null(pattern)) {
[17:46:04.593]                           computeRestarts <- base::computeRestarts
[17:46:04.593]                           grepl <- base::grepl
[17:46:04.593]                           restarts <- computeRestarts(cond)
[17:46:04.593]                           for (restart in restarts) {
[17:46:04.593]                             name <- restart$name
[17:46:04.593]                             if (is.null(name)) 
[17:46:04.593]                               next
[17:46:04.593]                             if (!grepl(pattern, name)) 
[17:46:04.593]                               next
[17:46:04.593]                             invokeRestart(restart)
[17:46:04.593]                             muffled <- TRUE
[17:46:04.593]                             break
[17:46:04.593]                           }
[17:46:04.593]                         }
[17:46:04.593]                       }
[17:46:04.593]                       invisible(muffled)
[17:46:04.593]                     }
[17:46:04.593]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.593]                   }
[17:46:04.593]                 }
[17:46:04.593]                 else {
[17:46:04.593]                   if (TRUE) {
[17:46:04.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.593]                     {
[17:46:04.593]                       inherits <- base::inherits
[17:46:04.593]                       invokeRestart <- base::invokeRestart
[17:46:04.593]                       is.null <- base::is.null
[17:46:04.593]                       muffled <- FALSE
[17:46:04.593]                       if (inherits(cond, "message")) {
[17:46:04.593]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.593]                         if (muffled) 
[17:46:04.593]                           invokeRestart("muffleMessage")
[17:46:04.593]                       }
[17:46:04.593]                       else if (inherits(cond, "warning")) {
[17:46:04.593]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.593]                         if (muffled) 
[17:46:04.593]                           invokeRestart("muffleWarning")
[17:46:04.593]                       }
[17:46:04.593]                       else if (inherits(cond, "condition")) {
[17:46:04.593]                         if (!is.null(pattern)) {
[17:46:04.593]                           computeRestarts <- base::computeRestarts
[17:46:04.593]                           grepl <- base::grepl
[17:46:04.593]                           restarts <- computeRestarts(cond)
[17:46:04.593]                           for (restart in restarts) {
[17:46:04.593]                             name <- restart$name
[17:46:04.593]                             if (is.null(name)) 
[17:46:04.593]                               next
[17:46:04.593]                             if (!grepl(pattern, name)) 
[17:46:04.593]                               next
[17:46:04.593]                             invokeRestart(restart)
[17:46:04.593]                             muffled <- TRUE
[17:46:04.593]                             break
[17:46:04.593]                           }
[17:46:04.593]                         }
[17:46:04.593]                       }
[17:46:04.593]                       invisible(muffled)
[17:46:04.593]                     }
[17:46:04.593]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.593]                   }
[17:46:04.593]                 }
[17:46:04.593]             }
[17:46:04.593]         }))
[17:46:04.593]     }, error = function(ex) {
[17:46:04.593]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:04.593]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.593]                 ...future.rng), started = ...future.startTime, 
[17:46:04.593]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:04.593]             version = "1.8"), class = "FutureResult")
[17:46:04.593]     }, finally = {
[17:46:04.593]         if (!identical(...future.workdir, getwd())) 
[17:46:04.593]             setwd(...future.workdir)
[17:46:04.593]         {
[17:46:04.593]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:04.593]                 ...future.oldOptions$nwarnings <- NULL
[17:46:04.593]             }
[17:46:04.593]             base::options(...future.oldOptions)
[17:46:04.593]             if (.Platform$OS.type == "windows") {
[17:46:04.593]                 old_names <- names(...future.oldEnvVars)
[17:46:04.593]                 envs <- base::Sys.getenv()
[17:46:04.593]                 names <- names(envs)
[17:46:04.593]                 common <- intersect(names, old_names)
[17:46:04.593]                 added <- setdiff(names, old_names)
[17:46:04.593]                 removed <- setdiff(old_names, names)
[17:46:04.593]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:04.593]                   envs[common]]
[17:46:04.593]                 NAMES <- toupper(changed)
[17:46:04.593]                 args <- list()
[17:46:04.593]                 for (kk in seq_along(NAMES)) {
[17:46:04.593]                   name <- changed[[kk]]
[17:46:04.593]                   NAME <- NAMES[[kk]]
[17:46:04.593]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.593]                     next
[17:46:04.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.593]                 }
[17:46:04.593]                 NAMES <- toupper(added)
[17:46:04.593]                 for (kk in seq_along(NAMES)) {
[17:46:04.593]                   name <- added[[kk]]
[17:46:04.593]                   NAME <- NAMES[[kk]]
[17:46:04.593]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.593]                     next
[17:46:04.593]                   args[[name]] <- ""
[17:46:04.593]                 }
[17:46:04.593]                 NAMES <- toupper(removed)
[17:46:04.593]                 for (kk in seq_along(NAMES)) {
[17:46:04.593]                   name <- removed[[kk]]
[17:46:04.593]                   NAME <- NAMES[[kk]]
[17:46:04.593]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.593]                     next
[17:46:04.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.593]                 }
[17:46:04.593]                 if (length(args) > 0) 
[17:46:04.593]                   base::do.call(base::Sys.setenv, args = args)
[17:46:04.593]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:04.593]             }
[17:46:04.593]             else {
[17:46:04.593]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:04.593]             }
[17:46:04.593]             {
[17:46:04.593]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:04.593]                   0L) {
[17:46:04.593]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:04.593]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:04.593]                   base::options(opts)
[17:46:04.593]                 }
[17:46:04.593]                 {
[17:46:04.593]                   {
[17:46:04.593]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:04.593]                     NULL
[17:46:04.593]                   }
[17:46:04.593]                   options(future.plan = NULL)
[17:46:04.593]                   if (is.na(NA_character_)) 
[17:46:04.593]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.593]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:04.593]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:04.593]                     .init = FALSE)
[17:46:04.593]                 }
[17:46:04.593]             }
[17:46:04.593]         }
[17:46:04.593]     })
[17:46:04.593]     if (TRUE) {
[17:46:04.593]         base::sink(type = "output", split = FALSE)
[17:46:04.593]         if (TRUE) {
[17:46:04.593]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:04.593]         }
[17:46:04.593]         else {
[17:46:04.593]             ...future.result["stdout"] <- base::list(NULL)
[17:46:04.593]         }
[17:46:04.593]         base::close(...future.stdout)
[17:46:04.593]         ...future.stdout <- NULL
[17:46:04.593]     }
[17:46:04.593]     ...future.result$conditions <- ...future.conditions
[17:46:04.593]     ...future.result$finished <- base::Sys.time()
[17:46:04.593]     ...future.result
[17:46:04.593] }
[17:46:04.645] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[17:46:04.645] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[17:46:04.646] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[17:46:04.646] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:46:04.646] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:46:04.647] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[17:46:04.648] MultisessionFuture started
[17:46:04.649] - Launch lazy future ... done
[17:46:04.649] run() for ‘MultisessionFuture’ ... done
[17:46:04.649] getGlobalsAndPackages() ...
[17:46:04.649] Searching for globals...
[17:46:04.651] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:46:04.652] Searching for globals ... DONE
[17:46:04.652] Resolving globals: FALSE
[17:46:04.653] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:46:04.653] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:46:04.653] - globals: [2] ‘slow_fcn’, ‘x’
[17:46:04.654] 
[17:46:04.654] getGlobalsAndPackages() ... DONE
[17:46:04.654] run() for ‘Future’ ...
[17:46:04.655] - state: ‘created’
[17:46:04.655] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:04.667] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:04.667] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:04.668]   - Field: ‘node’
[17:46:04.668]   - Field: ‘label’
[17:46:04.668]   - Field: ‘local’
[17:46:04.668]   - Field: ‘owner’
[17:46:04.668]   - Field: ‘envir’
[17:46:04.668]   - Field: ‘workers’
[17:46:04.668]   - Field: ‘packages’
[17:46:04.668]   - Field: ‘gc’
[17:46:04.668]   - Field: ‘conditions’
[17:46:04.668]   - Field: ‘persistent’
[17:46:04.668]   - Field: ‘expr’
[17:46:04.669]   - Field: ‘uuid’
[17:46:04.669]   - Field: ‘seed’
[17:46:04.669]   - Field: ‘version’
[17:46:04.669]   - Field: ‘result’
[17:46:04.669]   - Field: ‘asynchronous’
[17:46:04.669]   - Field: ‘calls’
[17:46:04.669]   - Field: ‘globals’
[17:46:04.669]   - Field: ‘stdout’
[17:46:04.669]   - Field: ‘earlySignal’
[17:46:04.669]   - Field: ‘lazy’
[17:46:04.669]   - Field: ‘state’
[17:46:04.669] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:04.670] - Launch lazy future ...
[17:46:04.670] Packages needed by the future expression (n = 0): <none>
[17:46:04.670] Packages needed by future strategies (n = 0): <none>
[17:46:04.670] {
[17:46:04.670]     {
[17:46:04.670]         {
[17:46:04.670]             ...future.startTime <- base::Sys.time()
[17:46:04.670]             {
[17:46:04.670]                 {
[17:46:04.670]                   {
[17:46:04.670]                     {
[17:46:04.670]                       base::local({
[17:46:04.670]                         has_future <- base::requireNamespace("future", 
[17:46:04.670]                           quietly = TRUE)
[17:46:04.670]                         if (has_future) {
[17:46:04.670]                           ns <- base::getNamespace("future")
[17:46:04.670]                           version <- ns[[".package"]][["version"]]
[17:46:04.670]                           if (is.null(version)) 
[17:46:04.670]                             version <- utils::packageVersion("future")
[17:46:04.670]                         }
[17:46:04.670]                         else {
[17:46:04.670]                           version <- NULL
[17:46:04.670]                         }
[17:46:04.670]                         if (!has_future || version < "1.8.0") {
[17:46:04.670]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:04.670]                             "", base::R.version$version.string), 
[17:46:04.670]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:04.670]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:04.670]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:04.670]                               "release", "version")], collapse = " "), 
[17:46:04.670]                             hostname = base::Sys.info()[["nodename"]])
[17:46:04.670]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:04.670]                             info)
[17:46:04.670]                           info <- base::paste(info, collapse = "; ")
[17:46:04.670]                           if (!has_future) {
[17:46:04.670]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:04.670]                               info)
[17:46:04.670]                           }
[17:46:04.670]                           else {
[17:46:04.670]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:04.670]                               info, version)
[17:46:04.670]                           }
[17:46:04.670]                           base::stop(msg)
[17:46:04.670]                         }
[17:46:04.670]                       })
[17:46:04.670]                     }
[17:46:04.670]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:04.670]                     base::options(mc.cores = 1L)
[17:46:04.670]                   }
[17:46:04.670]                   ...future.strategy.old <- future::plan("list")
[17:46:04.670]                   options(future.plan = NULL)
[17:46:04.670]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.670]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:04.670]                 }
[17:46:04.670]                 ...future.workdir <- getwd()
[17:46:04.670]             }
[17:46:04.670]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:04.670]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:04.670]         }
[17:46:04.670]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:04.670]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:04.670]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:04.670]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:04.670]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:04.670]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:04.670]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:04.670]             base::names(...future.oldOptions))
[17:46:04.670]     }
[17:46:04.670]     if (FALSE) {
[17:46:04.670]     }
[17:46:04.670]     else {
[17:46:04.670]         if (TRUE) {
[17:46:04.670]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:04.670]                 open = "w")
[17:46:04.670]         }
[17:46:04.670]         else {
[17:46:04.670]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:04.670]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:04.670]         }
[17:46:04.670]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:04.670]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:04.670]             base::sink(type = "output", split = FALSE)
[17:46:04.670]             base::close(...future.stdout)
[17:46:04.670]         }, add = TRUE)
[17:46:04.670]     }
[17:46:04.670]     ...future.frame <- base::sys.nframe()
[17:46:04.670]     ...future.conditions <- base::list()
[17:46:04.670]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:04.670]     if (FALSE) {
[17:46:04.670]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:04.670]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:04.670]     }
[17:46:04.670]     ...future.result <- base::tryCatch({
[17:46:04.670]         base::withCallingHandlers({
[17:46:04.670]             ...future.value <- base::withVisible(base::local({
[17:46:04.670]                 ...future.makeSendCondition <- base::local({
[17:46:04.670]                   sendCondition <- NULL
[17:46:04.670]                   function(frame = 1L) {
[17:46:04.670]                     if (is.function(sendCondition)) 
[17:46:04.670]                       return(sendCondition)
[17:46:04.670]                     ns <- getNamespace("parallel")
[17:46:04.670]                     if (exists("sendData", mode = "function", 
[17:46:04.670]                       envir = ns)) {
[17:46:04.670]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:04.670]                         envir = ns)
[17:46:04.670]                       envir <- sys.frame(frame)
[17:46:04.670]                       master <- NULL
[17:46:04.670]                       while (!identical(envir, .GlobalEnv) && 
[17:46:04.670]                         !identical(envir, emptyenv())) {
[17:46:04.670]                         if (exists("master", mode = "list", envir = envir, 
[17:46:04.670]                           inherits = FALSE)) {
[17:46:04.670]                           master <- get("master", mode = "list", 
[17:46:04.670]                             envir = envir, inherits = FALSE)
[17:46:04.670]                           if (inherits(master, c("SOCKnode", 
[17:46:04.670]                             "SOCK0node"))) {
[17:46:04.670]                             sendCondition <<- function(cond) {
[17:46:04.670]                               data <- list(type = "VALUE", value = cond, 
[17:46:04.670]                                 success = TRUE)
[17:46:04.670]                               parallel_sendData(master, data)
[17:46:04.670]                             }
[17:46:04.670]                             return(sendCondition)
[17:46:04.670]                           }
[17:46:04.670]                         }
[17:46:04.670]                         frame <- frame + 1L
[17:46:04.670]                         envir <- sys.frame(frame)
[17:46:04.670]                       }
[17:46:04.670]                     }
[17:46:04.670]                     sendCondition <<- function(cond) NULL
[17:46:04.670]                   }
[17:46:04.670]                 })
[17:46:04.670]                 withCallingHandlers({
[17:46:04.670]                   slow_fcn(x)
[17:46:04.670]                 }, immediateCondition = function(cond) {
[17:46:04.670]                   sendCondition <- ...future.makeSendCondition()
[17:46:04.670]                   sendCondition(cond)
[17:46:04.670]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.670]                   {
[17:46:04.670]                     inherits <- base::inherits
[17:46:04.670]                     invokeRestart <- base::invokeRestart
[17:46:04.670]                     is.null <- base::is.null
[17:46:04.670]                     muffled <- FALSE
[17:46:04.670]                     if (inherits(cond, "message")) {
[17:46:04.670]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:04.670]                       if (muffled) 
[17:46:04.670]                         invokeRestart("muffleMessage")
[17:46:04.670]                     }
[17:46:04.670]                     else if (inherits(cond, "warning")) {
[17:46:04.670]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:04.670]                       if (muffled) 
[17:46:04.670]                         invokeRestart("muffleWarning")
[17:46:04.670]                     }
[17:46:04.670]                     else if (inherits(cond, "condition")) {
[17:46:04.670]                       if (!is.null(pattern)) {
[17:46:04.670]                         computeRestarts <- base::computeRestarts
[17:46:04.670]                         grepl <- base::grepl
[17:46:04.670]                         restarts <- computeRestarts(cond)
[17:46:04.670]                         for (restart in restarts) {
[17:46:04.670]                           name <- restart$name
[17:46:04.670]                           if (is.null(name)) 
[17:46:04.670]                             next
[17:46:04.670]                           if (!grepl(pattern, name)) 
[17:46:04.670]                             next
[17:46:04.670]                           invokeRestart(restart)
[17:46:04.670]                           muffled <- TRUE
[17:46:04.670]                           break
[17:46:04.670]                         }
[17:46:04.670]                       }
[17:46:04.670]                     }
[17:46:04.670]                     invisible(muffled)
[17:46:04.670]                   }
[17:46:04.670]                   muffleCondition(cond)
[17:46:04.670]                 })
[17:46:04.670]             }))
[17:46:04.670]             future::FutureResult(value = ...future.value$value, 
[17:46:04.670]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.670]                   ...future.rng), globalenv = if (FALSE) 
[17:46:04.670]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:04.670]                     ...future.globalenv.names))
[17:46:04.670]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:04.670]         }, condition = base::local({
[17:46:04.670]             c <- base::c
[17:46:04.670]             inherits <- base::inherits
[17:46:04.670]             invokeRestart <- base::invokeRestart
[17:46:04.670]             length <- base::length
[17:46:04.670]             list <- base::list
[17:46:04.670]             seq.int <- base::seq.int
[17:46:04.670]             signalCondition <- base::signalCondition
[17:46:04.670]             sys.calls <- base::sys.calls
[17:46:04.670]             `[[` <- base::`[[`
[17:46:04.670]             `+` <- base::`+`
[17:46:04.670]             `<<-` <- base::`<<-`
[17:46:04.670]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:04.670]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:04.670]                   3L)]
[17:46:04.670]             }
[17:46:04.670]             function(cond) {
[17:46:04.670]                 is_error <- inherits(cond, "error")
[17:46:04.670]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:04.670]                   NULL)
[17:46:04.670]                 if (is_error) {
[17:46:04.670]                   sessionInformation <- function() {
[17:46:04.670]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:04.670]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:04.670]                       search = base::search(), system = base::Sys.info())
[17:46:04.670]                   }
[17:46:04.670]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.670]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:04.670]                     cond$call), session = sessionInformation(), 
[17:46:04.670]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:04.670]                   signalCondition(cond)
[17:46:04.670]                 }
[17:46:04.670]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:04.670]                 "immediateCondition"))) {
[17:46:04.670]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:04.670]                   ...future.conditions[[length(...future.conditions) + 
[17:46:04.670]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:04.670]                   if (TRUE && !signal) {
[17:46:04.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.670]                     {
[17:46:04.670]                       inherits <- base::inherits
[17:46:04.670]                       invokeRestart <- base::invokeRestart
[17:46:04.670]                       is.null <- base::is.null
[17:46:04.670]                       muffled <- FALSE
[17:46:04.670]                       if (inherits(cond, "message")) {
[17:46:04.670]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.670]                         if (muffled) 
[17:46:04.670]                           invokeRestart("muffleMessage")
[17:46:04.670]                       }
[17:46:04.670]                       else if (inherits(cond, "warning")) {
[17:46:04.670]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.670]                         if (muffled) 
[17:46:04.670]                           invokeRestart("muffleWarning")
[17:46:04.670]                       }
[17:46:04.670]                       else if (inherits(cond, "condition")) {
[17:46:04.670]                         if (!is.null(pattern)) {
[17:46:04.670]                           computeRestarts <- base::computeRestarts
[17:46:04.670]                           grepl <- base::grepl
[17:46:04.670]                           restarts <- computeRestarts(cond)
[17:46:04.670]                           for (restart in restarts) {
[17:46:04.670]                             name <- restart$name
[17:46:04.670]                             if (is.null(name)) 
[17:46:04.670]                               next
[17:46:04.670]                             if (!grepl(pattern, name)) 
[17:46:04.670]                               next
[17:46:04.670]                             invokeRestart(restart)
[17:46:04.670]                             muffled <- TRUE
[17:46:04.670]                             break
[17:46:04.670]                           }
[17:46:04.670]                         }
[17:46:04.670]                       }
[17:46:04.670]                       invisible(muffled)
[17:46:04.670]                     }
[17:46:04.670]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.670]                   }
[17:46:04.670]                 }
[17:46:04.670]                 else {
[17:46:04.670]                   if (TRUE) {
[17:46:04.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:04.670]                     {
[17:46:04.670]                       inherits <- base::inherits
[17:46:04.670]                       invokeRestart <- base::invokeRestart
[17:46:04.670]                       is.null <- base::is.null
[17:46:04.670]                       muffled <- FALSE
[17:46:04.670]                       if (inherits(cond, "message")) {
[17:46:04.670]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:04.670]                         if (muffled) 
[17:46:04.670]                           invokeRestart("muffleMessage")
[17:46:04.670]                       }
[17:46:04.670]                       else if (inherits(cond, "warning")) {
[17:46:04.670]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:04.670]                         if (muffled) 
[17:46:04.670]                           invokeRestart("muffleWarning")
[17:46:04.670]                       }
[17:46:04.670]                       else if (inherits(cond, "condition")) {
[17:46:04.670]                         if (!is.null(pattern)) {
[17:46:04.670]                           computeRestarts <- base::computeRestarts
[17:46:04.670]                           grepl <- base::grepl
[17:46:04.670]                           restarts <- computeRestarts(cond)
[17:46:04.670]                           for (restart in restarts) {
[17:46:04.670]                             name <- restart$name
[17:46:04.670]                             if (is.null(name)) 
[17:46:04.670]                               next
[17:46:04.670]                             if (!grepl(pattern, name)) 
[17:46:04.670]                               next
[17:46:04.670]                             invokeRestart(restart)
[17:46:04.670]                             muffled <- TRUE
[17:46:04.670]                             break
[17:46:04.670]                           }
[17:46:04.670]                         }
[17:46:04.670]                       }
[17:46:04.670]                       invisible(muffled)
[17:46:04.670]                     }
[17:46:04.670]                     muffleCondition(cond, pattern = "^muffle")
[17:46:04.670]                   }
[17:46:04.670]                 }
[17:46:04.670]             }
[17:46:04.670]         }))
[17:46:04.670]     }, error = function(ex) {
[17:46:04.670]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:04.670]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:04.670]                 ...future.rng), started = ...future.startTime, 
[17:46:04.670]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:04.670]             version = "1.8"), class = "FutureResult")
[17:46:04.670]     }, finally = {
[17:46:04.670]         if (!identical(...future.workdir, getwd())) 
[17:46:04.670]             setwd(...future.workdir)
[17:46:04.670]         {
[17:46:04.670]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:04.670]                 ...future.oldOptions$nwarnings <- NULL
[17:46:04.670]             }
[17:46:04.670]             base::options(...future.oldOptions)
[17:46:04.670]             if (.Platform$OS.type == "windows") {
[17:46:04.670]                 old_names <- names(...future.oldEnvVars)
[17:46:04.670]                 envs <- base::Sys.getenv()
[17:46:04.670]                 names <- names(envs)
[17:46:04.670]                 common <- intersect(names, old_names)
[17:46:04.670]                 added <- setdiff(names, old_names)
[17:46:04.670]                 removed <- setdiff(old_names, names)
[17:46:04.670]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:04.670]                   envs[common]]
[17:46:04.670]                 NAMES <- toupper(changed)
[17:46:04.670]                 args <- list()
[17:46:04.670]                 for (kk in seq_along(NAMES)) {
[17:46:04.670]                   name <- changed[[kk]]
[17:46:04.670]                   NAME <- NAMES[[kk]]
[17:46:04.670]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.670]                     next
[17:46:04.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.670]                 }
[17:46:04.670]                 NAMES <- toupper(added)
[17:46:04.670]                 for (kk in seq_along(NAMES)) {
[17:46:04.670]                   name <- added[[kk]]
[17:46:04.670]                   NAME <- NAMES[[kk]]
[17:46:04.670]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.670]                     next
[17:46:04.670]                   args[[name]] <- ""
[17:46:04.670]                 }
[17:46:04.670]                 NAMES <- toupper(removed)
[17:46:04.670]                 for (kk in seq_along(NAMES)) {
[17:46:04.670]                   name <- removed[[kk]]
[17:46:04.670]                   NAME <- NAMES[[kk]]
[17:46:04.670]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:04.670]                     next
[17:46:04.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:04.670]                 }
[17:46:04.670]                 if (length(args) > 0) 
[17:46:04.670]                   base::do.call(base::Sys.setenv, args = args)
[17:46:04.670]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:04.670]             }
[17:46:04.670]             else {
[17:46:04.670]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:04.670]             }
[17:46:04.670]             {
[17:46:04.670]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:04.670]                   0L) {
[17:46:04.670]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:04.670]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:04.670]                   base::options(opts)
[17:46:04.670]                 }
[17:46:04.670]                 {
[17:46:04.670]                   {
[17:46:04.670]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:04.670]                     NULL
[17:46:04.670]                   }
[17:46:04.670]                   options(future.plan = NULL)
[17:46:04.670]                   if (is.na(NA_character_)) 
[17:46:04.670]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:04.670]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:04.670]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:04.670]                     .init = FALSE)
[17:46:04.670]                 }
[17:46:04.670]             }
[17:46:04.670]         }
[17:46:04.670]     })
[17:46:04.670]     if (TRUE) {
[17:46:04.670]         base::sink(type = "output", split = FALSE)
[17:46:04.670]         if (TRUE) {
[17:46:04.670]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:04.670]         }
[17:46:04.670]         else {
[17:46:04.670]             ...future.result["stdout"] <- base::list(NULL)
[17:46:04.670]         }
[17:46:04.670]         base::close(...future.stdout)
[17:46:04.670]         ...future.stdout <- NULL
[17:46:04.670]     }
[17:46:04.670]     ...future.result$conditions <- ...future.conditions
[17:46:04.670]     ...future.result$finished <- base::Sys.time()
[17:46:04.670]     ...future.result
[17:46:04.670] }
[17:46:04.672] Poll #1 (0): usedNodes() = 2, workers = 2
[17:46:04.704] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[17:46:04.744] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[17:46:04.776] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[17:46:04.807] Poll #5 (0.13 secs): usedNodes() = 2, workers = 2
[17:46:04.839] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[17:46:04.871] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[17:46:04.903] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[17:46:04.935] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[17:46:04.967] Poll #10 (0.29 secs): usedNodes() = 2, workers = 2
[17:46:05.000] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[17:46:05.033] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[17:46:05.065] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[17:46:05.098] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[17:46:05.132] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[17:46:05.165] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[17:46:05.198] Poll #17 (0.53 secs): usedNodes() = 2, workers = 2
[17:46:05.232] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[17:46:05.265] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[17:46:05.299] Poll #20 (0.63 secs): usedNodes() = 2, workers = 2
[17:46:05.333] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[17:46:05.367] Poll #22 (0.69 secs): usedNodes() = 2, workers = 2
[17:46:05.401] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[17:46:05.414] receiveMessageFromWorker() for ClusterFuture ...
[17:46:05.414] - Validating connection of MultisessionFuture
[17:46:05.414] - received message: FutureResult
[17:46:05.415] - Received FutureResult
[17:46:05.415] - Erased future from FutureRegistry
[17:46:05.415] result() for ClusterFuture ...
[17:46:05.416] - result already collected: FutureResult
[17:46:05.416] result() for ClusterFuture ... done
[17:46:05.420] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:05.421] result() for ClusterFuture ...
[17:46:05.421] - result already collected: FutureResult
[17:46:05.421] result() for ClusterFuture ... done
[17:46:05.421] result() for ClusterFuture ...
[17:46:05.421] - result already collected: FutureResult
[17:46:05.421] result() for ClusterFuture ... done
[17:46:05.423] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[17:46:05.423] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[17:46:05.424] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[17:46:05.424] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:46:05.424] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:46:05.424] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[17:46:05.425] MultisessionFuture started
[17:46:05.426] - Launch lazy future ... done
[17:46:05.426] run() for ‘MultisessionFuture’ ... done
[17:46:05.426] resolve() on list ...
[17:46:05.427]  recursive: 0
[17:46:05.427]  length: 3
[17:46:05.427] 
[17:46:05.427] Future #1
[17:46:05.427] result() for ClusterFuture ...
[17:46:05.427] - result already collected: FutureResult
[17:46:05.427] result() for ClusterFuture ... done
[17:46:05.427] result() for ClusterFuture ...
[17:46:05.427] - result already collected: FutureResult
[17:46:05.428] result() for ClusterFuture ... done
[17:46:05.428] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:46:05.428] - nx: 3
[17:46:05.428] - relay: TRUE
[17:46:05.428] - stdout: TRUE
[17:46:05.428] - signal: TRUE
[17:46:05.428] - resignal: FALSE
[17:46:05.428] - force: TRUE
[17:46:05.428] - relayed: [n=3] FALSE, FALSE, FALSE
[17:46:05.428] - queued futures: [n=3] FALSE, FALSE, FALSE
[17:46:05.428]  - until=1
[17:46:05.429]  - relaying element #1
[17:46:05.429] result() for ClusterFuture ...
[17:46:05.429] - result already collected: FutureResult
[17:46:05.429] result() for ClusterFuture ... done
[17:46:05.429] result() for ClusterFuture ...
[17:46:05.429] - result already collected: FutureResult
[17:46:05.429] result() for ClusterFuture ... done
[17:46:05.429] result() for ClusterFuture ...
[17:46:05.429] - result already collected: FutureResult
[17:46:05.429] result() for ClusterFuture ... done
[17:46:05.429] result() for ClusterFuture ...
[17:46:05.429] - result already collected: FutureResult
[17:46:05.430] result() for ClusterFuture ... done
[17:46:05.430] - relayed: [n=3] TRUE, FALSE, FALSE
[17:46:05.430] - queued futures: [n=3] TRUE, FALSE, FALSE
[17:46:05.430] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:46:05.430]  length: 2 (resolved future 1)
[17:46:05.689] receiveMessageFromWorker() for ClusterFuture ...
[17:46:05.689] - Validating connection of MultisessionFuture
[17:46:05.689] - received message: FutureResult
[17:46:05.690] - Received FutureResult
[17:46:05.690] - Erased future from FutureRegistry
[17:46:05.690] result() for ClusterFuture ...
[17:46:05.690] - result already collected: FutureResult
[17:46:05.690] result() for ClusterFuture ... done
[17:46:05.692] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:05.692] Future #2
[17:46:05.692] result() for ClusterFuture ...
[17:46:05.692] - result already collected: FutureResult
[17:46:05.692] result() for ClusterFuture ... done
[17:46:05.692] result() for ClusterFuture ...
[17:46:05.693] - result already collected: FutureResult
[17:46:05.693] result() for ClusterFuture ... done
[17:46:05.693] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:46:05.693] - nx: 3
[17:46:05.693] - relay: TRUE
[17:46:05.693] - stdout: TRUE
[17:46:05.693] - signal: TRUE
[17:46:05.693] - resignal: FALSE
[17:46:05.693] - force: TRUE
[17:46:05.693] - relayed: [n=3] TRUE, FALSE, FALSE
[17:46:05.693] - queued futures: [n=3] TRUE, FALSE, FALSE
[17:46:05.694]  - until=2
[17:46:05.694]  - relaying element #2
[17:46:05.694] result() for ClusterFuture ...
[17:46:05.694] - result already collected: FutureResult
[17:46:05.694] result() for ClusterFuture ... done
[17:46:05.694] result() for ClusterFuture ...
[17:46:05.694] - result already collected: FutureResult
[17:46:05.694] result() for ClusterFuture ... done
[17:46:05.694] result() for ClusterFuture ...
[17:46:05.694] - result already collected: FutureResult
[17:46:05.694] result() for ClusterFuture ... done
[17:46:05.695] result() for ClusterFuture ...
[17:46:05.695] - result already collected: FutureResult
[17:46:05.695] result() for ClusterFuture ... done
[17:46:05.695] - relayed: [n=3] TRUE, TRUE, FALSE
[17:46:05.695] - queued futures: [n=3] TRUE, TRUE, FALSE
[17:46:05.695] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:46:05.695]  length: 1 (resolved future 2)
[17:46:06.936] receiveMessageFromWorker() for ClusterFuture ...
[17:46:06.936] - Validating connection of MultisessionFuture
[17:46:06.936] - received message: FutureResult
[17:46:06.937] - Received FutureResult
[17:46:06.937] - Erased future from FutureRegistry
[17:46:06.937] result() for ClusterFuture ...
[17:46:06.937] - result already collected: FutureResult
[17:46:06.937] result() for ClusterFuture ... done
[17:46:06.939] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:06.939] Future #3
[17:46:06.939] result() for ClusterFuture ...
[17:46:06.939] - result already collected: FutureResult
[17:46:06.939] result() for ClusterFuture ... done
[17:46:06.940] result() for ClusterFuture ...
[17:46:06.940] - result already collected: FutureResult
[17:46:06.940] result() for ClusterFuture ... done
[17:46:06.940] signalConditionsASAP(MultisessionFuture, pos=3) ...
[17:46:06.940] - nx: 3
[17:46:06.940] - relay: TRUE
[17:46:06.940] - stdout: TRUE
[17:46:06.940] - signal: TRUE
[17:46:06.940] - resignal: FALSE
[17:46:06.940] - force: TRUE
[17:46:06.940] - relayed: [n=3] TRUE, TRUE, FALSE
[17:46:06.940] - queued futures: [n=3] TRUE, TRUE, FALSE
[17:46:06.941]  - until=3
[17:46:06.941]  - relaying element #3
[17:46:06.941] result() for ClusterFuture ...
[17:46:06.941] - result already collected: FutureResult
[17:46:06.941] result() for ClusterFuture ... done
[17:46:06.941] result() for ClusterFuture ...
[17:46:06.941] - result already collected: FutureResult
[17:46:06.941] result() for ClusterFuture ... done
[17:46:06.941] result() for ClusterFuture ...
[17:46:06.941] - result already collected: FutureResult
[17:46:06.941] result() for ClusterFuture ... done
[17:46:06.942] result() for ClusterFuture ...
[17:46:06.942] - result already collected: FutureResult
[17:46:06.942] result() for ClusterFuture ... done
[17:46:06.942] - relayed: [n=3] TRUE, TRUE, TRUE
[17:46:06.942] - queued futures: [n=3] TRUE, TRUE, TRUE
[17:46:06.942] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[17:46:06.942]  length: 0 (resolved future 3)
[17:46:06.942] Relaying remaining futures
[17:46:06.942] signalConditionsASAP(NULL, pos=0) ...
[17:46:06.942] - nx: 3
[17:46:06.942] - relay: TRUE
[17:46:06.942] - stdout: TRUE
[17:46:06.943] - signal: TRUE
[17:46:06.943] - resignal: FALSE
[17:46:06.943] - force: TRUE
[17:46:06.943] - relayed: [n=3] TRUE, TRUE, TRUE
[17:46:06.943] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[17:46:06.943] - relayed: [n=3] TRUE, TRUE, TRUE
[17:46:06.943] - queued futures: [n=3] TRUE, TRUE, TRUE
[17:46:06.943] signalConditionsASAP(NULL, pos=0) ... done
[17:46:06.943] resolve() on list ... DONE
[17:46:06.943] result() for ClusterFuture ...
[17:46:06.943] - result already collected: FutureResult
[17:46:06.944] result() for ClusterFuture ... done
[17:46:06.944] result() for ClusterFuture ...
[17:46:06.944] - result already collected: FutureResult
[17:46:06.944] result() for ClusterFuture ... done
[17:46:06.944] result() for ClusterFuture ...
[17:46:06.944] - result already collected: FutureResult
[17:46:06.944] result() for ClusterFuture ... done
[17:46:06.944] result() for ClusterFuture ...
[17:46:06.944] - result already collected: FutureResult
[17:46:06.944] result() for ClusterFuture ... done
[17:46:06.945] result() for ClusterFuture ...
[17:46:06.945] - result already collected: FutureResult
[17:46:06.945] result() for ClusterFuture ... done
[17:46:06.945] result() for ClusterFuture ...
[17:46:06.945] - result already collected: FutureResult
[17:46:06.945] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-22 17:46:04 0.00000000 secs
6         launch   overhead   <NA> 2024-11-22 17:46:04 0.02490664 secs
2      getWorker   overhead launch 2024-11-22 17:46:04 0.02811718 secs
3    eraseWorker   overhead launch 2024-11-22 17:46:04 0.02971673 secs
4 attachPackages   overhead launch 2024-11-22 17:46:04 0.03096104 secs
5  exportGlobals   overhead launch 2024-11-22 17:46:04 0.03164124 secs
9       evaluate evaluation   <NA> 2024-11-22 17:46:04 0.03448319 secs
7  receiveResult   overhead gather 2024-11-22 17:46:05 0.87788486 secs
8         gather   overhead   <NA> 2024-11-22 17:46:05 0.87898135 secs
           duration future_label                          future_uuid
1 0.0094873905 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
6 0.0093336105 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
2 0.0002322197 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
3 0.0004129410 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
4 0.0000410080 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
5 0.0013933182 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
9 0.8356957436 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
7 0.0002031326 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
8 0.0002686977 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
                          session_uuid
1 a66aab71-e117-b872-8398-e6c912eb25a5
6 a66aab71-e117-b872-8398-e6c912eb25a5
2 a66aab71-e117-b872-8398-e6c912eb25a5
3 a66aab71-e117-b872-8398-e6c912eb25a5
4 a66aab71-e117-b872-8398-e6c912eb25a5
5 a66aab71-e117-b872-8398-e6c912eb25a5
9 8002c30f-3723-4f6c-d976-7c4ee3b3a34a
7 a66aab71-e117-b872-8398-e6c912eb25a5
8 a66aab71-e117-b872-8398-e6c912eb25a5

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-22 17:46:04 0.00000000 secs
6         launch   overhead   <NA> 2024-11-22 17:46:04 0.01909184 secs
2      getWorker   overhead launch 2024-11-22 17:46:04 0.02167654 secs
3    eraseWorker   overhead launch 2024-11-22 17:46:04 0.02228785 secs
4 attachPackages   overhead launch 2024-11-22 17:46:04 0.07176995 secs
5  exportGlobals   overhead launch 2024-11-22 17:46:04 0.07230949 secs
9       evaluate evaluation   <NA> 2024-11-22 17:46:04 0.07521939 secs
7  receiveResult   overhead gather 2024-11-22 17:46:05 1.11599159 secs
8         gather   overhead   <NA> 2024-11-22 17:46:05 1.11707282 secs
           duration future_label                          future_uuid
1 6.114483e-03 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
6 5.583572e-02 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
2 1.165867e-04 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
3 4.882026e-02 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
4 4.410744e-05 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
5 1.450062e-03 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
9 1.040273e+00 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
7 2.095699e-04 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
8 2.748966e-04 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
                          session_uuid
1 a66aab71-e117-b872-8398-e6c912eb25a5
6 a66aab71-e117-b872-8398-e6c912eb25a5
2 a66aab71-e117-b872-8398-e6c912eb25a5
3 a66aab71-e117-b872-8398-e6c912eb25a5
4 a66aab71-e117-b872-8398-e6c912eb25a5
5 a66aab71-e117-b872-8398-e6c912eb25a5
9 8093c3cc-fab5-1a24-194f-500fb5e546a0
7 a66aab71-e117-b872-8398-e6c912eb25a5
8 a66aab71-e117-b872-8398-e6c912eb25a5

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-22 17:46:04 0.00000000 secs
6         launch   overhead   <NA> 2024-11-22 17:46:04 0.02062440 secs
2      getWorker   overhead launch 2024-11-22 17:46:04 0.02339649 secs
3    eraseWorker   overhead launch 2024-11-22 17:46:05 0.77270412 secs
4 attachPackages   overhead launch 2024-11-22 17:46:05 0.77359939 secs
5  exportGlobals   overhead launch 2024-11-22 17:46:05 0.77409673 secs
9       evaluate evaluation   <NA> 2024-11-22 17:46:05 0.77676177 secs
7  receiveResult   overhead gather 2024-11-22 17:46:06 2.28690362 secs
8         gather   overhead   <NA> 2024-11-22 17:46:06 2.28796506 secs
           duration future_label                          future_uuid
1 4.985809e-03 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
6 7.558055e-01 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
2 7.488260e-01 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
3 4.065037e-04 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
4 3.457069e-05 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
5 1.354694e-03 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
9 1.506344e+00 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
7 2.229214e-04 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
8 2.698898e-04 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
                          session_uuid
1 a66aab71-e117-b872-8398-e6c912eb25a5
6 a66aab71-e117-b872-8398-e6c912eb25a5
2 a66aab71-e117-b872-8398-e6c912eb25a5
3 a66aab71-e117-b872-8398-e6c912eb25a5
4 a66aab71-e117-b872-8398-e6c912eb25a5
5 a66aab71-e117-b872-8398-e6c912eb25a5
9 8002c30f-3723-4f6c-d976-7c4ee3b3a34a
7 a66aab71-e117-b872-8398-e6c912eb25a5
8 a66aab71-e117-b872-8398-e6c912eb25a5

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[17:46:06.952] plan(): Setting new future strategy stack:
[17:46:06.952] List of future strategies:
[17:46:06.952] 1. sequential:
[17:46:06.952]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:06.952]    - tweaked: FALSE
[17:46:06.952]    - call: plan(sequential)
[17:46:06.953] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2024-11-22 17:46:04 0.00000000 secs
6          launch   overhead   <NA> 2024-11-22 17:46:04 0.02490664 secs
2       getWorker   overhead launch 2024-11-22 17:46:04 0.02811718 secs
3     eraseWorker   overhead launch 2024-11-22 17:46:04 0.02971673 secs
4  attachPackages   overhead launch 2024-11-22 17:46:04 0.03096104 secs
5   exportGlobals   overhead launch 2024-11-22 17:46:04 0.03164124 secs
9        evaluate evaluation   <NA> 2024-11-22 17:46:04 0.03448319 secs
7   receiveResult   overhead gather 2024-11-22 17:46:05 0.87788486 secs
8          gather   overhead   <NA> 2024-11-22 17:46:05 0.87898135 secs
11         create   overhead   <NA> 2024-11-22 17:46:04 0.00000000 secs
61         launch   overhead   <NA> 2024-11-22 17:46:04 0.01909184 secs
21      getWorker   overhead launch 2024-11-22 17:46:04 0.02167654 secs
31    eraseWorker   overhead launch 2024-11-22 17:46:04 0.02228785 secs
41 attachPackages   overhead launch 2024-11-22 17:46:04 0.07176995 secs
51  exportGlobals   overhead launch 2024-11-22 17:46:04 0.07230949 secs
91       evaluate evaluation   <NA> 2024-11-22 17:46:04 0.07521939 secs
71  receiveResult   overhead gather 2024-11-22 17:46:05 1.11599159 secs
81         gather   overhead   <NA> 2024-11-22 17:46:05 1.11707282 secs
12         create   overhead   <NA> 2024-11-22 17:46:04 0.00000000 secs
62         launch   overhead   <NA> 2024-11-22 17:46:04 0.02062440 secs
22      getWorker   overhead launch 2024-11-22 17:46:04 0.02339649 secs
32    eraseWorker   overhead launch 2024-11-22 17:46:05 0.77270412 secs
42 attachPackages   overhead launch 2024-11-22 17:46:05 0.77359939 secs
52  exportGlobals   overhead launch 2024-11-22 17:46:05 0.77409673 secs
92       evaluate evaluation   <NA> 2024-11-22 17:46:05 0.77676177 secs
72  receiveResult   overhead gather 2024-11-22 17:46:06 2.28690362 secs
82         gather   overhead   <NA> 2024-11-22 17:46:06 2.28796506 secs
            duration future_label                          future_uuid
1  9.487391e-03 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
6  9.333611e-03 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
2  2.322197e-04 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
3  4.129410e-04 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
4  4.100800e-05 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
5  1.393318e-03 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
9  8.356957e-01 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
7  2.031326e-04 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
8  2.686977e-04 secs         <NA> aebf1a50-bb36-631f-26dd-874d4bcb67e4
11 6.114483e-03 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
61 5.583572e-02 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
21 1.165867e-04 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
31 4.882026e-02 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
41 4.410744e-05 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
51 1.450062e-03 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
91 1.040273e+00 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
71 2.095699e-04 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
81 2.748966e-04 secs         <NA> c7425807-1cd4-347c-f853-556de17a891f
12 4.985809e-03 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
62 7.558055e-01 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
22 7.488260e-01 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
32 4.065037e-04 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
42 3.457069e-05 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
52 1.354694e-03 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
92 1.506344e+00 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
72 2.229214e-04 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
82 2.698898e-04 secs         <NA> 4cfd4c4a-6fd6-cda9-d049-834facc0502b
                           session_uuid
1  a66aab71-e117-b872-8398-e6c912eb25a5
6  a66aab71-e117-b872-8398-e6c912eb25a5
2  a66aab71-e117-b872-8398-e6c912eb25a5
3  a66aab71-e117-b872-8398-e6c912eb25a5
4  a66aab71-e117-b872-8398-e6c912eb25a5
5  a66aab71-e117-b872-8398-e6c912eb25a5
9  8002c30f-3723-4f6c-d976-7c4ee3b3a34a
7  a66aab71-e117-b872-8398-e6c912eb25a5
8  a66aab71-e117-b872-8398-e6c912eb25a5
11 a66aab71-e117-b872-8398-e6c912eb25a5
61 a66aab71-e117-b872-8398-e6c912eb25a5
21 a66aab71-e117-b872-8398-e6c912eb25a5
31 a66aab71-e117-b872-8398-e6c912eb25a5
41 a66aab71-e117-b872-8398-e6c912eb25a5
51 a66aab71-e117-b872-8398-e6c912eb25a5
91 8093c3cc-fab5-1a24-194f-500fb5e546a0
71 a66aab71-e117-b872-8398-e6c912eb25a5
81 a66aab71-e117-b872-8398-e6c912eb25a5
12 a66aab71-e117-b872-8398-e6c912eb25a5
62 a66aab71-e117-b872-8398-e6c912eb25a5
22 a66aab71-e117-b872-8398-e6c912eb25a5
32 a66aab71-e117-b872-8398-e6c912eb25a5
42 a66aab71-e117-b872-8398-e6c912eb25a5
52 a66aab71-e117-b872-8398-e6c912eb25a5
92 8002c30f-3723-4f6c-d976-7c4ee3b3a34a
72 a66aab71-e117-b872-8398-e6c912eb25a5
82 a66aab71-e117-b872-8398-e6c912eb25a5
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio       overhead overhead_ratio
1     min 0.8356957 secs      0.9504643 0.0190897 secs     0.02171134
2    mean 1.1274378 secs      0.7893689 0.2807920 secs     0.19659484
3  median 1.0402734 secs      0.9310203 0.0622251 secs     0.05569001
4     max 1.5063443 secs      0.6582997 0.7610612 secs     0.33259749
5   total 3.3823135 secs      0.7893689 0.8423760 secs     0.19659484
       duration      walltime
1 0.879250 secs 0.879250 secs
2 1.428278 secs 1.428278 secs
3 1.117348 secs 1.117348 secs
4 2.288235 secs 2.288235 secs
5 4.284833 secs 4.284833 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
