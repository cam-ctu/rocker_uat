
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:09.976] plan(): Setting new future strategy stack:
[18:03:09.977] List of future strategies:
[18:03:09.977] 1. sequential:
[18:03:09.977]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:09.977]    - tweaked: FALSE
[18:03:09.977]    - call: future::plan("sequential")
[18:03:10.001] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[18:03:10.028] plan(): Setting new future strategy stack:
[18:03:10.029] List of future strategies:
[18:03:10.029] 1. multisession:
[18:03:10.029]    - args: function (..., workers = 2, envir = parent.frame())
[18:03:10.029]    - tweaked: TRUE
[18:03:10.029]    - call: plan(multisession, workers = 2)
[18:03:10.053] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:03:10.053] multisession:
[18:03:10.053] - args: function (..., workers = 2, envir = parent.frame())
[18:03:10.053] - tweaked: TRUE
[18:03:10.053] - call: plan(multisession, workers = 2)
[18:03:10.055] getGlobalsAndPackages() ...
[18:03:10.056] Not searching for globals
[18:03:10.056] - globals: [0] <none>
[18:03:10.056] getGlobalsAndPackages() ... DONE
[18:03:10.057] [local output] makeClusterPSOCK() ...
[18:03:10.110] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:03:10.112] [local output] Base port: 11236
[18:03:10.112] [local output] Getting setup options for 2 cluster nodes ...
[18:03:10.112] [local output]  - Node 1 of 2 ...
[18:03:10.113] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:10.115] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZEMYNq/worker.rank=1.parallelly.parent=319066.4de5a638a550d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZEMYNq/worker.rank=1.parallelly.parent=319066.4de5a638a550d.pid")'’
[18:03:10.460] - Possible to infer worker's PID: TRUE
[18:03:10.460] [local output] Rscript port: 11236

[18:03:10.461] [local output]  - Node 2 of 2 ...
[18:03:10.462] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:10.463] [local output] Rscript port: 11236

[18:03:10.463] [local output] Getting setup options for 2 cluster nodes ... done
[18:03:10.463] [local output]  - Parallel setup requested for some PSOCK nodes
[18:03:10.464] [local output] Setting up PSOCK nodes in parallel
[18:03:10.465] List of 36
[18:03:10.465]  $ worker          : chr "localhost"
[18:03:10.465]   ..- attr(*, "localhost")= logi TRUE
[18:03:10.465]  $ master          : chr "localhost"
[18:03:10.465]  $ port            : int 11236
[18:03:10.465]  $ connectTimeout  : num 120
[18:03:10.465]  $ timeout         : num 2592000
[18:03:10.465]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:03:10.465]  $ homogeneous     : logi TRUE
[18:03:10.465]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:03:10.465]  $ rscript_envs    : NULL
[18:03:10.465]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:10.465]  $ rscript_startup : NULL
[18:03:10.465]  $ rscript_sh      : chr "sh"
[18:03:10.465]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:10.465]  $ methods         : logi TRUE
[18:03:10.465]  $ socketOptions   : chr "no-delay"
[18:03:10.465]  $ useXDR          : logi FALSE
[18:03:10.465]  $ outfile         : chr "/dev/null"
[18:03:10.465]  $ renice          : int NA
[18:03:10.465]  $ rshcmd          : NULL
[18:03:10.465]  $ user            : chr(0) 
[18:03:10.465]  $ revtunnel       : logi FALSE
[18:03:10.465]  $ rshlogfile      : NULL
[18:03:10.465]  $ rshopts         : chr(0) 
[18:03:10.465]  $ rank            : int 1
[18:03:10.465]  $ manual          : logi FALSE
[18:03:10.465]  $ dryrun          : logi FALSE
[18:03:10.465]  $ quiet           : logi FALSE
[18:03:10.465]  $ setup_strategy  : chr "parallel"
[18:03:10.465]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:10.465]  $ pidfile         : chr "/tmp/RtmpZEMYNq/worker.rank=1.parallelly.parent=319066.4de5a638a550d.pid"
[18:03:10.465]  $ rshcmd_label    : NULL
[18:03:10.465]  $ rsh_call        : NULL
[18:03:10.465]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:10.465]  $ localMachine    : logi TRUE
[18:03:10.465]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:03:10.465]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:03:10.465]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:03:10.465]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:03:10.465]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:03:10.465]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:03:10.465]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:03:10.465]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:03:10.465]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:03:10.465]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:03:10.465]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:03:10.465]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:03:10.465]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:03:10.465]  $ arguments       :List of 28
[18:03:10.465]   ..$ worker          : chr "localhost"
[18:03:10.465]   ..$ master          : NULL
[18:03:10.465]   ..$ port            : int 11236
[18:03:10.465]   ..$ connectTimeout  : num 120
[18:03:10.465]   ..$ timeout         : num 2592000
[18:03:10.465]   ..$ rscript         : NULL
[18:03:10.465]   ..$ homogeneous     : NULL
[18:03:10.465]   ..$ rscript_args    : NULL
[18:03:10.465]   ..$ rscript_envs    : NULL
[18:03:10.465]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:10.465]   ..$ rscript_startup : NULL
[18:03:10.465]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:03:10.465]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:10.465]   ..$ methods         : logi TRUE
[18:03:10.465]   ..$ socketOptions   : chr "no-delay"
[18:03:10.465]   ..$ useXDR          : logi FALSE
[18:03:10.465]   ..$ outfile         : chr "/dev/null"
[18:03:10.465]   ..$ renice          : int NA
[18:03:10.465]   ..$ rshcmd          : NULL
[18:03:10.465]   ..$ user            : NULL
[18:03:10.465]   ..$ revtunnel       : logi NA
[18:03:10.465]   ..$ rshlogfile      : NULL
[18:03:10.465]   ..$ rshopts         : NULL
[18:03:10.465]   ..$ rank            : int 1
[18:03:10.465]   ..$ manual          : logi FALSE
[18:03:10.465]   ..$ dryrun          : logi FALSE
[18:03:10.465]   ..$ quiet           : logi FALSE
[18:03:10.465]   ..$ setup_strategy  : chr "parallel"
[18:03:10.465]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:03:10.503] [local output] System call to launch all workers:
[18:03:10.504] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZEMYNq/worker.rank=1.parallelly.parent=319066.4de5a638a550d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11236 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:03:10.504] [local output] Starting PSOCK main server
[18:03:10.512] [local output] Workers launched
[18:03:10.512] [local output] Waiting for workers to connect back
[18:03:10.513]  - [local output] 0 workers out of 2 ready
[18:03:11.094]  - [local output] 0 workers out of 2 ready
[18:03:11.096]  - [local output] 1 workers out of 2 ready
[18:03:11.139]  - [local output] 1 workers out of 2 ready
[18:03:11.141]  - [local output] 2 workers out of 2 ready
[18:03:11.141] [local output] Launching of workers completed
[18:03:11.141] [local output] Collecting session information from workers
[18:03:11.143] [local output]  - Worker #1 of 2
[18:03:11.145] [local output]  - Worker #2 of 2
[18:03:11.145] [local output] makeClusterPSOCK() ... done
[18:03:11.165] Packages needed by the future expression (n = 0): <none>
[18:03:11.165] Packages needed by future strategies (n = 0): <none>
[18:03:11.167] {
[18:03:11.167]     {
[18:03:11.167]         {
[18:03:11.167]             ...future.startTime <- base::Sys.time()
[18:03:11.167]             {
[18:03:11.167]                 {
[18:03:11.167]                   {
[18:03:11.167]                     {
[18:03:11.167]                       base::local({
[18:03:11.167]                         has_future <- base::requireNamespace("future", 
[18:03:11.167]                           quietly = TRUE)
[18:03:11.167]                         if (has_future) {
[18:03:11.167]                           ns <- base::getNamespace("future")
[18:03:11.167]                           version <- ns[[".package"]][["version"]]
[18:03:11.167]                           if (is.null(version)) 
[18:03:11.167]                             version <- utils::packageVersion("future")
[18:03:11.167]                         }
[18:03:11.167]                         else {
[18:03:11.167]                           version <- NULL
[18:03:11.167]                         }
[18:03:11.167]                         if (!has_future || version < "1.8.0") {
[18:03:11.167]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:11.167]                             "", base::R.version$version.string), 
[18:03:11.167]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:11.167]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:11.167]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:11.167]                               "release", "version")], collapse = " "), 
[18:03:11.167]                             hostname = base::Sys.info()[["nodename"]])
[18:03:11.167]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:11.167]                             info)
[18:03:11.167]                           info <- base::paste(info, collapse = "; ")
[18:03:11.167]                           if (!has_future) {
[18:03:11.167]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:11.167]                               info)
[18:03:11.167]                           }
[18:03:11.167]                           else {
[18:03:11.167]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:11.167]                               info, version)
[18:03:11.167]                           }
[18:03:11.167]                           base::stop(msg)
[18:03:11.167]                         }
[18:03:11.167]                       })
[18:03:11.167]                     }
[18:03:11.167]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:11.167]                     base::options(mc.cores = 1L)
[18:03:11.167]                   }
[18:03:11.167]                   ...future.strategy.old <- future::plan("list")
[18:03:11.167]                   options(future.plan = NULL)
[18:03:11.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:11.167]                 }
[18:03:11.167]                 ...future.workdir <- getwd()
[18:03:11.167]             }
[18:03:11.167]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:11.167]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:11.167]         }
[18:03:11.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:11.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:11.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:11.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:11.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:11.167]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:11.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:11.167]             base::names(...future.oldOptions))
[18:03:11.167]     }
[18:03:11.167]     if (FALSE) {
[18:03:11.167]     }
[18:03:11.167]     else {
[18:03:11.167]         if (TRUE) {
[18:03:11.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:11.167]                 open = "w")
[18:03:11.167]         }
[18:03:11.167]         else {
[18:03:11.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:11.167]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:11.167]         }
[18:03:11.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:11.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:11.167]             base::sink(type = "output", split = FALSE)
[18:03:11.167]             base::close(...future.stdout)
[18:03:11.167]         }, add = TRUE)
[18:03:11.167]     }
[18:03:11.167]     ...future.frame <- base::sys.nframe()
[18:03:11.167]     ...future.conditions <- base::list()
[18:03:11.167]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:11.167]     if (FALSE) {
[18:03:11.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:11.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:11.167]     }
[18:03:11.167]     ...future.result <- base::tryCatch({
[18:03:11.167]         base::withCallingHandlers({
[18:03:11.167]             ...future.value <- base::withVisible(base::local({
[18:03:11.167]                 ...future.makeSendCondition <- base::local({
[18:03:11.167]                   sendCondition <- NULL
[18:03:11.167]                   function(frame = 1L) {
[18:03:11.167]                     if (is.function(sendCondition)) 
[18:03:11.167]                       return(sendCondition)
[18:03:11.167]                     ns <- getNamespace("parallel")
[18:03:11.167]                     if (exists("sendData", mode = "function", 
[18:03:11.167]                       envir = ns)) {
[18:03:11.167]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:11.167]                         envir = ns)
[18:03:11.167]                       envir <- sys.frame(frame)
[18:03:11.167]                       master <- NULL
[18:03:11.167]                       while (!identical(envir, .GlobalEnv) && 
[18:03:11.167]                         !identical(envir, emptyenv())) {
[18:03:11.167]                         if (exists("master", mode = "list", envir = envir, 
[18:03:11.167]                           inherits = FALSE)) {
[18:03:11.167]                           master <- get("master", mode = "list", 
[18:03:11.167]                             envir = envir, inherits = FALSE)
[18:03:11.167]                           if (inherits(master, c("SOCKnode", 
[18:03:11.167]                             "SOCK0node"))) {
[18:03:11.167]                             sendCondition <<- function(cond) {
[18:03:11.167]                               data <- list(type = "VALUE", value = cond, 
[18:03:11.167]                                 success = TRUE)
[18:03:11.167]                               parallel_sendData(master, data)
[18:03:11.167]                             }
[18:03:11.167]                             return(sendCondition)
[18:03:11.167]                           }
[18:03:11.167]                         }
[18:03:11.167]                         frame <- frame + 1L
[18:03:11.167]                         envir <- sys.frame(frame)
[18:03:11.167]                       }
[18:03:11.167]                     }
[18:03:11.167]                     sendCondition <<- function(cond) NULL
[18:03:11.167]                   }
[18:03:11.167]                 })
[18:03:11.167]                 withCallingHandlers({
[18:03:11.167]                   NA
[18:03:11.167]                 }, immediateCondition = function(cond) {
[18:03:11.167]                   sendCondition <- ...future.makeSendCondition()
[18:03:11.167]                   sendCondition(cond)
[18:03:11.167]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.167]                   {
[18:03:11.167]                     inherits <- base::inherits
[18:03:11.167]                     invokeRestart <- base::invokeRestart
[18:03:11.167]                     is.null <- base::is.null
[18:03:11.167]                     muffled <- FALSE
[18:03:11.167]                     if (inherits(cond, "message")) {
[18:03:11.167]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:11.167]                       if (muffled) 
[18:03:11.167]                         invokeRestart("muffleMessage")
[18:03:11.167]                     }
[18:03:11.167]                     else if (inherits(cond, "warning")) {
[18:03:11.167]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:11.167]                       if (muffled) 
[18:03:11.167]                         invokeRestart("muffleWarning")
[18:03:11.167]                     }
[18:03:11.167]                     else if (inherits(cond, "condition")) {
[18:03:11.167]                       if (!is.null(pattern)) {
[18:03:11.167]                         computeRestarts <- base::computeRestarts
[18:03:11.167]                         grepl <- base::grepl
[18:03:11.167]                         restarts <- computeRestarts(cond)
[18:03:11.167]                         for (restart in restarts) {
[18:03:11.167]                           name <- restart$name
[18:03:11.167]                           if (is.null(name)) 
[18:03:11.167]                             next
[18:03:11.167]                           if (!grepl(pattern, name)) 
[18:03:11.167]                             next
[18:03:11.167]                           invokeRestart(restart)
[18:03:11.167]                           muffled <- TRUE
[18:03:11.167]                           break
[18:03:11.167]                         }
[18:03:11.167]                       }
[18:03:11.167]                     }
[18:03:11.167]                     invisible(muffled)
[18:03:11.167]                   }
[18:03:11.167]                   muffleCondition(cond)
[18:03:11.167]                 })
[18:03:11.167]             }))
[18:03:11.167]             future::FutureResult(value = ...future.value$value, 
[18:03:11.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.167]                   ...future.rng), globalenv = if (FALSE) 
[18:03:11.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:11.167]                     ...future.globalenv.names))
[18:03:11.167]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:11.167]         }, condition = base::local({
[18:03:11.167]             c <- base::c
[18:03:11.167]             inherits <- base::inherits
[18:03:11.167]             invokeRestart <- base::invokeRestart
[18:03:11.167]             length <- base::length
[18:03:11.167]             list <- base::list
[18:03:11.167]             seq.int <- base::seq.int
[18:03:11.167]             signalCondition <- base::signalCondition
[18:03:11.167]             sys.calls <- base::sys.calls
[18:03:11.167]             `[[` <- base::`[[`
[18:03:11.167]             `+` <- base::`+`
[18:03:11.167]             `<<-` <- base::`<<-`
[18:03:11.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:11.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:11.167]                   3L)]
[18:03:11.167]             }
[18:03:11.167]             function(cond) {
[18:03:11.167]                 is_error <- inherits(cond, "error")
[18:03:11.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:11.167]                   NULL)
[18:03:11.167]                 if (is_error) {
[18:03:11.167]                   sessionInformation <- function() {
[18:03:11.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:11.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:11.167]                       search = base::search(), system = base::Sys.info())
[18:03:11.167]                   }
[18:03:11.167]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:11.167]                     cond$call), session = sessionInformation(), 
[18:03:11.167]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:11.167]                   signalCondition(cond)
[18:03:11.167]                 }
[18:03:11.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:11.167]                 "immediateCondition"))) {
[18:03:11.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:11.167]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:11.167]                   if (TRUE && !signal) {
[18:03:11.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.167]                     {
[18:03:11.167]                       inherits <- base::inherits
[18:03:11.167]                       invokeRestart <- base::invokeRestart
[18:03:11.167]                       is.null <- base::is.null
[18:03:11.167]                       muffled <- FALSE
[18:03:11.167]                       if (inherits(cond, "message")) {
[18:03:11.167]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.167]                         if (muffled) 
[18:03:11.167]                           invokeRestart("muffleMessage")
[18:03:11.167]                       }
[18:03:11.167]                       else if (inherits(cond, "warning")) {
[18:03:11.167]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.167]                         if (muffled) 
[18:03:11.167]                           invokeRestart("muffleWarning")
[18:03:11.167]                       }
[18:03:11.167]                       else if (inherits(cond, "condition")) {
[18:03:11.167]                         if (!is.null(pattern)) {
[18:03:11.167]                           computeRestarts <- base::computeRestarts
[18:03:11.167]                           grepl <- base::grepl
[18:03:11.167]                           restarts <- computeRestarts(cond)
[18:03:11.167]                           for (restart in restarts) {
[18:03:11.167]                             name <- restart$name
[18:03:11.167]                             if (is.null(name)) 
[18:03:11.167]                               next
[18:03:11.167]                             if (!grepl(pattern, name)) 
[18:03:11.167]                               next
[18:03:11.167]                             invokeRestart(restart)
[18:03:11.167]                             muffled <- TRUE
[18:03:11.167]                             break
[18:03:11.167]                           }
[18:03:11.167]                         }
[18:03:11.167]                       }
[18:03:11.167]                       invisible(muffled)
[18:03:11.167]                     }
[18:03:11.167]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.167]                   }
[18:03:11.167]                 }
[18:03:11.167]                 else {
[18:03:11.167]                   if (TRUE) {
[18:03:11.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.167]                     {
[18:03:11.167]                       inherits <- base::inherits
[18:03:11.167]                       invokeRestart <- base::invokeRestart
[18:03:11.167]                       is.null <- base::is.null
[18:03:11.167]                       muffled <- FALSE
[18:03:11.167]                       if (inherits(cond, "message")) {
[18:03:11.167]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.167]                         if (muffled) 
[18:03:11.167]                           invokeRestart("muffleMessage")
[18:03:11.167]                       }
[18:03:11.167]                       else if (inherits(cond, "warning")) {
[18:03:11.167]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.167]                         if (muffled) 
[18:03:11.167]                           invokeRestart("muffleWarning")
[18:03:11.167]                       }
[18:03:11.167]                       else if (inherits(cond, "condition")) {
[18:03:11.167]                         if (!is.null(pattern)) {
[18:03:11.167]                           computeRestarts <- base::computeRestarts
[18:03:11.167]                           grepl <- base::grepl
[18:03:11.167]                           restarts <- computeRestarts(cond)
[18:03:11.167]                           for (restart in restarts) {
[18:03:11.167]                             name <- restart$name
[18:03:11.167]                             if (is.null(name)) 
[18:03:11.167]                               next
[18:03:11.167]                             if (!grepl(pattern, name)) 
[18:03:11.167]                               next
[18:03:11.167]                             invokeRestart(restart)
[18:03:11.167]                             muffled <- TRUE
[18:03:11.167]                             break
[18:03:11.167]                           }
[18:03:11.167]                         }
[18:03:11.167]                       }
[18:03:11.167]                       invisible(muffled)
[18:03:11.167]                     }
[18:03:11.167]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.167]                   }
[18:03:11.167]                 }
[18:03:11.167]             }
[18:03:11.167]         }))
[18:03:11.167]     }, error = function(ex) {
[18:03:11.167]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:11.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.167]                 ...future.rng), started = ...future.startTime, 
[18:03:11.167]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:11.167]             version = "1.8"), class = "FutureResult")
[18:03:11.167]     }, finally = {
[18:03:11.167]         if (!identical(...future.workdir, getwd())) 
[18:03:11.167]             setwd(...future.workdir)
[18:03:11.167]         {
[18:03:11.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:11.167]                 ...future.oldOptions$nwarnings <- NULL
[18:03:11.167]             }
[18:03:11.167]             base::options(...future.oldOptions)
[18:03:11.167]             if (.Platform$OS.type == "windows") {
[18:03:11.167]                 old_names <- names(...future.oldEnvVars)
[18:03:11.167]                 envs <- base::Sys.getenv()
[18:03:11.167]                 names <- names(envs)
[18:03:11.167]                 common <- intersect(names, old_names)
[18:03:11.167]                 added <- setdiff(names, old_names)
[18:03:11.167]                 removed <- setdiff(old_names, names)
[18:03:11.167]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:11.167]                   envs[common]]
[18:03:11.167]                 NAMES <- toupper(changed)
[18:03:11.167]                 args <- list()
[18:03:11.167]                 for (kk in seq_along(NAMES)) {
[18:03:11.167]                   name <- changed[[kk]]
[18:03:11.167]                   NAME <- NAMES[[kk]]
[18:03:11.167]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.167]                     next
[18:03:11.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.167]                 }
[18:03:11.167]                 NAMES <- toupper(added)
[18:03:11.167]                 for (kk in seq_along(NAMES)) {
[18:03:11.167]                   name <- added[[kk]]
[18:03:11.167]                   NAME <- NAMES[[kk]]
[18:03:11.167]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.167]                     next
[18:03:11.167]                   args[[name]] <- ""
[18:03:11.167]                 }
[18:03:11.167]                 NAMES <- toupper(removed)
[18:03:11.167]                 for (kk in seq_along(NAMES)) {
[18:03:11.167]                   name <- removed[[kk]]
[18:03:11.167]                   NAME <- NAMES[[kk]]
[18:03:11.167]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.167]                     next
[18:03:11.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.167]                 }
[18:03:11.167]                 if (length(args) > 0) 
[18:03:11.167]                   base::do.call(base::Sys.setenv, args = args)
[18:03:11.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:11.167]             }
[18:03:11.167]             else {
[18:03:11.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:11.167]             }
[18:03:11.167]             {
[18:03:11.167]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:11.167]                   0L) {
[18:03:11.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:11.167]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:11.167]                   base::options(opts)
[18:03:11.167]                 }
[18:03:11.167]                 {
[18:03:11.167]                   {
[18:03:11.167]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:11.167]                     NULL
[18:03:11.167]                   }
[18:03:11.167]                   options(future.plan = NULL)
[18:03:11.167]                   if (is.na(NA_character_)) 
[18:03:11.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:11.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:11.167]                     .init = FALSE)
[18:03:11.167]                 }
[18:03:11.167]             }
[18:03:11.167]         }
[18:03:11.167]     })
[18:03:11.167]     if (TRUE) {
[18:03:11.167]         base::sink(type = "output", split = FALSE)
[18:03:11.167]         if (TRUE) {
[18:03:11.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:11.167]         }
[18:03:11.167]         else {
[18:03:11.167]             ...future.result["stdout"] <- base::list(NULL)
[18:03:11.167]         }
[18:03:11.167]         base::close(...future.stdout)
[18:03:11.167]         ...future.stdout <- NULL
[18:03:11.167]     }
[18:03:11.167]     ...future.result$conditions <- ...future.conditions
[18:03:11.167]     ...future.result$finished <- base::Sys.time()
[18:03:11.167]     ...future.result
[18:03:11.167] }
[18:03:11.270] MultisessionFuture started
[18:03:11.271] result() for ClusterFuture ...
[18:03:11.271] receiveMessageFromWorker() for ClusterFuture ...
[18:03:11.272] - Validating connection of MultisessionFuture
[18:03:11.344] - received message: FutureResult
[18:03:11.344] - Received FutureResult
[18:03:11.349] - Erased future from FutureRegistry
[18:03:11.350] result() for ClusterFuture ...
[18:03:11.350] - result already collected: FutureResult
[18:03:11.350] result() for ClusterFuture ... done
[18:03:11.350] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:11.350] result() for ClusterFuture ... done
[18:03:11.351] result() for ClusterFuture ...
[18:03:11.351] - result already collected: FutureResult
[18:03:11.351] result() for ClusterFuture ... done
[18:03:11.351] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:03:11.352] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[18:03:11.352] getGlobalsAndPackages() ...
[18:03:11.353] Searching for globals...
[18:03:11.370] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[18:03:11.370] Searching for globals ... DONE
[18:03:11.373] Resolving globals: FALSE
[18:03:11.376] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[18:03:11.379] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[18:03:11.379] - globals: [2] ‘slow_fcn’, ‘x’
[18:03:11.380] 
[18:03:11.382] getGlobalsAndPackages() ... DONE
[18:03:11.388] run() for ‘Future’ ...
[18:03:11.390] - state: ‘created’
[18:03:11.390] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:11.438] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:11.438] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:11.439]   - Field: ‘node’
[18:03:11.439]   - Field: ‘label’
[18:03:11.439]   - Field: ‘local’
[18:03:11.439]   - Field: ‘owner’
[18:03:11.440]   - Field: ‘envir’
[18:03:11.442]   - Field: ‘workers’
[18:03:11.442]   - Field: ‘packages’
[18:03:11.443]   - Field: ‘gc’
[18:03:11.443]   - Field: ‘conditions’
[18:03:11.443]   - Field: ‘persistent’
[18:03:11.443]   - Field: ‘expr’
[18:03:11.444]   - Field: ‘uuid’
[18:03:11.444]   - Field: ‘seed’
[18:03:11.444]   - Field: ‘version’
[18:03:11.444]   - Field: ‘result’
[18:03:11.445]   - Field: ‘asynchronous’
[18:03:11.445]   - Field: ‘calls’
[18:03:11.445]   - Field: ‘globals’
[18:03:11.445]   - Field: ‘stdout’
[18:03:11.446]   - Field: ‘earlySignal’
[18:03:11.447]   - Field: ‘lazy’
[18:03:11.447]   - Field: ‘state’
[18:03:11.447] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:11.447] - Launch lazy future ...
[18:03:11.448] Packages needed by the future expression (n = 0): <none>
[18:03:11.448] Packages needed by future strategies (n = 0): <none>
[18:03:11.451] {
[18:03:11.451]     {
[18:03:11.451]         {
[18:03:11.451]             ...future.startTime <- base::Sys.time()
[18:03:11.451]             {
[18:03:11.451]                 {
[18:03:11.451]                   {
[18:03:11.451]                     {
[18:03:11.451]                       base::local({
[18:03:11.451]                         has_future <- base::requireNamespace("future", 
[18:03:11.451]                           quietly = TRUE)
[18:03:11.451]                         if (has_future) {
[18:03:11.451]                           ns <- base::getNamespace("future")
[18:03:11.451]                           version <- ns[[".package"]][["version"]]
[18:03:11.451]                           if (is.null(version)) 
[18:03:11.451]                             version <- utils::packageVersion("future")
[18:03:11.451]                         }
[18:03:11.451]                         else {
[18:03:11.451]                           version <- NULL
[18:03:11.451]                         }
[18:03:11.451]                         if (!has_future || version < "1.8.0") {
[18:03:11.451]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:11.451]                             "", base::R.version$version.string), 
[18:03:11.451]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:11.451]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:11.451]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:11.451]                               "release", "version")], collapse = " "), 
[18:03:11.451]                             hostname = base::Sys.info()[["nodename"]])
[18:03:11.451]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:11.451]                             info)
[18:03:11.451]                           info <- base::paste(info, collapse = "; ")
[18:03:11.451]                           if (!has_future) {
[18:03:11.451]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:11.451]                               info)
[18:03:11.451]                           }
[18:03:11.451]                           else {
[18:03:11.451]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:11.451]                               info, version)
[18:03:11.451]                           }
[18:03:11.451]                           base::stop(msg)
[18:03:11.451]                         }
[18:03:11.451]                       })
[18:03:11.451]                     }
[18:03:11.451]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:11.451]                     base::options(mc.cores = 1L)
[18:03:11.451]                   }
[18:03:11.451]                   ...future.strategy.old <- future::plan("list")
[18:03:11.451]                   options(future.plan = NULL)
[18:03:11.451]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.451]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:11.451]                 }
[18:03:11.451]                 ...future.workdir <- getwd()
[18:03:11.451]             }
[18:03:11.451]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:11.451]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:11.451]         }
[18:03:11.451]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:11.451]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:11.451]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:11.451]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:11.451]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:11.451]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:11.451]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:11.451]             base::names(...future.oldOptions))
[18:03:11.451]     }
[18:03:11.451]     if (FALSE) {
[18:03:11.451]     }
[18:03:11.451]     else {
[18:03:11.451]         if (TRUE) {
[18:03:11.451]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:11.451]                 open = "w")
[18:03:11.451]         }
[18:03:11.451]         else {
[18:03:11.451]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:11.451]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:11.451]         }
[18:03:11.451]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:11.451]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:11.451]             base::sink(type = "output", split = FALSE)
[18:03:11.451]             base::close(...future.stdout)
[18:03:11.451]         }, add = TRUE)
[18:03:11.451]     }
[18:03:11.451]     ...future.frame <- base::sys.nframe()
[18:03:11.451]     ...future.conditions <- base::list()
[18:03:11.451]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:11.451]     if (FALSE) {
[18:03:11.451]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:11.451]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:11.451]     }
[18:03:11.451]     ...future.result <- base::tryCatch({
[18:03:11.451]         base::withCallingHandlers({
[18:03:11.451]             ...future.value <- base::withVisible(base::local({
[18:03:11.451]                 ...future.makeSendCondition <- base::local({
[18:03:11.451]                   sendCondition <- NULL
[18:03:11.451]                   function(frame = 1L) {
[18:03:11.451]                     if (is.function(sendCondition)) 
[18:03:11.451]                       return(sendCondition)
[18:03:11.451]                     ns <- getNamespace("parallel")
[18:03:11.451]                     if (exists("sendData", mode = "function", 
[18:03:11.451]                       envir = ns)) {
[18:03:11.451]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:11.451]                         envir = ns)
[18:03:11.451]                       envir <- sys.frame(frame)
[18:03:11.451]                       master <- NULL
[18:03:11.451]                       while (!identical(envir, .GlobalEnv) && 
[18:03:11.451]                         !identical(envir, emptyenv())) {
[18:03:11.451]                         if (exists("master", mode = "list", envir = envir, 
[18:03:11.451]                           inherits = FALSE)) {
[18:03:11.451]                           master <- get("master", mode = "list", 
[18:03:11.451]                             envir = envir, inherits = FALSE)
[18:03:11.451]                           if (inherits(master, c("SOCKnode", 
[18:03:11.451]                             "SOCK0node"))) {
[18:03:11.451]                             sendCondition <<- function(cond) {
[18:03:11.451]                               data <- list(type = "VALUE", value = cond, 
[18:03:11.451]                                 success = TRUE)
[18:03:11.451]                               parallel_sendData(master, data)
[18:03:11.451]                             }
[18:03:11.451]                             return(sendCondition)
[18:03:11.451]                           }
[18:03:11.451]                         }
[18:03:11.451]                         frame <- frame + 1L
[18:03:11.451]                         envir <- sys.frame(frame)
[18:03:11.451]                       }
[18:03:11.451]                     }
[18:03:11.451]                     sendCondition <<- function(cond) NULL
[18:03:11.451]                   }
[18:03:11.451]                 })
[18:03:11.451]                 withCallingHandlers({
[18:03:11.451]                   slow_fcn(x)
[18:03:11.451]                 }, immediateCondition = function(cond) {
[18:03:11.451]                   sendCondition <- ...future.makeSendCondition()
[18:03:11.451]                   sendCondition(cond)
[18:03:11.451]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.451]                   {
[18:03:11.451]                     inherits <- base::inherits
[18:03:11.451]                     invokeRestart <- base::invokeRestart
[18:03:11.451]                     is.null <- base::is.null
[18:03:11.451]                     muffled <- FALSE
[18:03:11.451]                     if (inherits(cond, "message")) {
[18:03:11.451]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:11.451]                       if (muffled) 
[18:03:11.451]                         invokeRestart("muffleMessage")
[18:03:11.451]                     }
[18:03:11.451]                     else if (inherits(cond, "warning")) {
[18:03:11.451]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:11.451]                       if (muffled) 
[18:03:11.451]                         invokeRestart("muffleWarning")
[18:03:11.451]                     }
[18:03:11.451]                     else if (inherits(cond, "condition")) {
[18:03:11.451]                       if (!is.null(pattern)) {
[18:03:11.451]                         computeRestarts <- base::computeRestarts
[18:03:11.451]                         grepl <- base::grepl
[18:03:11.451]                         restarts <- computeRestarts(cond)
[18:03:11.451]                         for (restart in restarts) {
[18:03:11.451]                           name <- restart$name
[18:03:11.451]                           if (is.null(name)) 
[18:03:11.451]                             next
[18:03:11.451]                           if (!grepl(pattern, name)) 
[18:03:11.451]                             next
[18:03:11.451]                           invokeRestart(restart)
[18:03:11.451]                           muffled <- TRUE
[18:03:11.451]                           break
[18:03:11.451]                         }
[18:03:11.451]                       }
[18:03:11.451]                     }
[18:03:11.451]                     invisible(muffled)
[18:03:11.451]                   }
[18:03:11.451]                   muffleCondition(cond)
[18:03:11.451]                 })
[18:03:11.451]             }))
[18:03:11.451]             future::FutureResult(value = ...future.value$value, 
[18:03:11.451]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.451]                   ...future.rng), globalenv = if (FALSE) 
[18:03:11.451]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:11.451]                     ...future.globalenv.names))
[18:03:11.451]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:11.451]         }, condition = base::local({
[18:03:11.451]             c <- base::c
[18:03:11.451]             inherits <- base::inherits
[18:03:11.451]             invokeRestart <- base::invokeRestart
[18:03:11.451]             length <- base::length
[18:03:11.451]             list <- base::list
[18:03:11.451]             seq.int <- base::seq.int
[18:03:11.451]             signalCondition <- base::signalCondition
[18:03:11.451]             sys.calls <- base::sys.calls
[18:03:11.451]             `[[` <- base::`[[`
[18:03:11.451]             `+` <- base::`+`
[18:03:11.451]             `<<-` <- base::`<<-`
[18:03:11.451]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:11.451]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:11.451]                   3L)]
[18:03:11.451]             }
[18:03:11.451]             function(cond) {
[18:03:11.451]                 is_error <- inherits(cond, "error")
[18:03:11.451]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:11.451]                   NULL)
[18:03:11.451]                 if (is_error) {
[18:03:11.451]                   sessionInformation <- function() {
[18:03:11.451]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:11.451]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:11.451]                       search = base::search(), system = base::Sys.info())
[18:03:11.451]                   }
[18:03:11.451]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.451]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:11.451]                     cond$call), session = sessionInformation(), 
[18:03:11.451]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:11.451]                   signalCondition(cond)
[18:03:11.451]                 }
[18:03:11.451]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:11.451]                 "immediateCondition"))) {
[18:03:11.451]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:11.451]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.451]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:11.451]                   if (TRUE && !signal) {
[18:03:11.451]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.451]                     {
[18:03:11.451]                       inherits <- base::inherits
[18:03:11.451]                       invokeRestart <- base::invokeRestart
[18:03:11.451]                       is.null <- base::is.null
[18:03:11.451]                       muffled <- FALSE
[18:03:11.451]                       if (inherits(cond, "message")) {
[18:03:11.451]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.451]                         if (muffled) 
[18:03:11.451]                           invokeRestart("muffleMessage")
[18:03:11.451]                       }
[18:03:11.451]                       else if (inherits(cond, "warning")) {
[18:03:11.451]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.451]                         if (muffled) 
[18:03:11.451]                           invokeRestart("muffleWarning")
[18:03:11.451]                       }
[18:03:11.451]                       else if (inherits(cond, "condition")) {
[18:03:11.451]                         if (!is.null(pattern)) {
[18:03:11.451]                           computeRestarts <- base::computeRestarts
[18:03:11.451]                           grepl <- base::grepl
[18:03:11.451]                           restarts <- computeRestarts(cond)
[18:03:11.451]                           for (restart in restarts) {
[18:03:11.451]                             name <- restart$name
[18:03:11.451]                             if (is.null(name)) 
[18:03:11.451]                               next
[18:03:11.451]                             if (!grepl(pattern, name)) 
[18:03:11.451]                               next
[18:03:11.451]                             invokeRestart(restart)
[18:03:11.451]                             muffled <- TRUE
[18:03:11.451]                             break
[18:03:11.451]                           }
[18:03:11.451]                         }
[18:03:11.451]                       }
[18:03:11.451]                       invisible(muffled)
[18:03:11.451]                     }
[18:03:11.451]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.451]                   }
[18:03:11.451]                 }
[18:03:11.451]                 else {
[18:03:11.451]                   if (TRUE) {
[18:03:11.451]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.451]                     {
[18:03:11.451]                       inherits <- base::inherits
[18:03:11.451]                       invokeRestart <- base::invokeRestart
[18:03:11.451]                       is.null <- base::is.null
[18:03:11.451]                       muffled <- FALSE
[18:03:11.451]                       if (inherits(cond, "message")) {
[18:03:11.451]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.451]                         if (muffled) 
[18:03:11.451]                           invokeRestart("muffleMessage")
[18:03:11.451]                       }
[18:03:11.451]                       else if (inherits(cond, "warning")) {
[18:03:11.451]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.451]                         if (muffled) 
[18:03:11.451]                           invokeRestart("muffleWarning")
[18:03:11.451]                       }
[18:03:11.451]                       else if (inherits(cond, "condition")) {
[18:03:11.451]                         if (!is.null(pattern)) {
[18:03:11.451]                           computeRestarts <- base::computeRestarts
[18:03:11.451]                           grepl <- base::grepl
[18:03:11.451]                           restarts <- computeRestarts(cond)
[18:03:11.451]                           for (restart in restarts) {
[18:03:11.451]                             name <- restart$name
[18:03:11.451]                             if (is.null(name)) 
[18:03:11.451]                               next
[18:03:11.451]                             if (!grepl(pattern, name)) 
[18:03:11.451]                               next
[18:03:11.451]                             invokeRestart(restart)
[18:03:11.451]                             muffled <- TRUE
[18:03:11.451]                             break
[18:03:11.451]                           }
[18:03:11.451]                         }
[18:03:11.451]                       }
[18:03:11.451]                       invisible(muffled)
[18:03:11.451]                     }
[18:03:11.451]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.451]                   }
[18:03:11.451]                 }
[18:03:11.451]             }
[18:03:11.451]         }))
[18:03:11.451]     }, error = function(ex) {
[18:03:11.451]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:11.451]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.451]                 ...future.rng), started = ...future.startTime, 
[18:03:11.451]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:11.451]             version = "1.8"), class = "FutureResult")
[18:03:11.451]     }, finally = {
[18:03:11.451]         if (!identical(...future.workdir, getwd())) 
[18:03:11.451]             setwd(...future.workdir)
[18:03:11.451]         {
[18:03:11.451]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:11.451]                 ...future.oldOptions$nwarnings <- NULL
[18:03:11.451]             }
[18:03:11.451]             base::options(...future.oldOptions)
[18:03:11.451]             if (.Platform$OS.type == "windows") {
[18:03:11.451]                 old_names <- names(...future.oldEnvVars)
[18:03:11.451]                 envs <- base::Sys.getenv()
[18:03:11.451]                 names <- names(envs)
[18:03:11.451]                 common <- intersect(names, old_names)
[18:03:11.451]                 added <- setdiff(names, old_names)
[18:03:11.451]                 removed <- setdiff(old_names, names)
[18:03:11.451]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:11.451]                   envs[common]]
[18:03:11.451]                 NAMES <- toupper(changed)
[18:03:11.451]                 args <- list()
[18:03:11.451]                 for (kk in seq_along(NAMES)) {
[18:03:11.451]                   name <- changed[[kk]]
[18:03:11.451]                   NAME <- NAMES[[kk]]
[18:03:11.451]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.451]                     next
[18:03:11.451]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.451]                 }
[18:03:11.451]                 NAMES <- toupper(added)
[18:03:11.451]                 for (kk in seq_along(NAMES)) {
[18:03:11.451]                   name <- added[[kk]]
[18:03:11.451]                   NAME <- NAMES[[kk]]
[18:03:11.451]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.451]                     next
[18:03:11.451]                   args[[name]] <- ""
[18:03:11.451]                 }
[18:03:11.451]                 NAMES <- toupper(removed)
[18:03:11.451]                 for (kk in seq_along(NAMES)) {
[18:03:11.451]                   name <- removed[[kk]]
[18:03:11.451]                   NAME <- NAMES[[kk]]
[18:03:11.451]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.451]                     next
[18:03:11.451]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.451]                 }
[18:03:11.451]                 if (length(args) > 0) 
[18:03:11.451]                   base::do.call(base::Sys.setenv, args = args)
[18:03:11.451]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:11.451]             }
[18:03:11.451]             else {
[18:03:11.451]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:11.451]             }
[18:03:11.451]             {
[18:03:11.451]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:11.451]                   0L) {
[18:03:11.451]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:11.451]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:11.451]                   base::options(opts)
[18:03:11.451]                 }
[18:03:11.451]                 {
[18:03:11.451]                   {
[18:03:11.451]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:11.451]                     NULL
[18:03:11.451]                   }
[18:03:11.451]                   options(future.plan = NULL)
[18:03:11.451]                   if (is.na(NA_character_)) 
[18:03:11.451]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.451]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:11.451]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:11.451]                     .init = FALSE)
[18:03:11.451]                 }
[18:03:11.451]             }
[18:03:11.451]         }
[18:03:11.451]     })
[18:03:11.451]     if (TRUE) {
[18:03:11.451]         base::sink(type = "output", split = FALSE)
[18:03:11.451]         if (TRUE) {
[18:03:11.451]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:11.451]         }
[18:03:11.451]         else {
[18:03:11.451]             ...future.result["stdout"] <- base::list(NULL)
[18:03:11.451]         }
[18:03:11.451]         base::close(...future.stdout)
[18:03:11.451]         ...future.stdout <- NULL
[18:03:11.451]     }
[18:03:11.451]     ...future.result$conditions <- ...future.conditions
[18:03:11.451]     ...future.result$finished <- base::Sys.time()
[18:03:11.451]     ...future.result
[18:03:11.451] }
[18:03:11.472] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[18:03:11.472] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[18:03:11.473] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[18:03:11.474] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:11.475] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:11.475] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[18:03:11.481] MultisessionFuture started
[18:03:11.483] - Launch lazy future ... done
[18:03:11.484] run() for ‘MultisessionFuture’ ... done
[18:03:11.487] getGlobalsAndPackages() ...
[18:03:11.487] Searching for globals...
[18:03:11.498] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[18:03:11.498] Searching for globals ... DONE
[18:03:11.498] Resolving globals: FALSE
[18:03:11.499] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[18:03:11.500] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[18:03:11.500] - globals: [2] ‘slow_fcn’, ‘x’
[18:03:11.501] 
[18:03:11.501] getGlobalsAndPackages() ... DONE
[18:03:11.502] run() for ‘Future’ ...
[18:03:11.502] - state: ‘created’
[18:03:11.502] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:11.520] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:11.521] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:11.521]   - Field: ‘node’
[18:03:11.521]   - Field: ‘label’
[18:03:11.521]   - Field: ‘local’
[18:03:11.521]   - Field: ‘owner’
[18:03:11.522]   - Field: ‘envir’
[18:03:11.522]   - Field: ‘workers’
[18:03:11.522]   - Field: ‘packages’
[18:03:11.522]   - Field: ‘gc’
[18:03:11.523]   - Field: ‘conditions’
[18:03:11.524]   - Field: ‘persistent’
[18:03:11.525]   - Field: ‘expr’
[18:03:11.525]   - Field: ‘uuid’
[18:03:11.525]   - Field: ‘seed’
[18:03:11.525]   - Field: ‘version’
[18:03:11.526]   - Field: ‘result’
[18:03:11.526]   - Field: ‘asynchronous’
[18:03:11.526]   - Field: ‘calls’
[18:03:11.527]   - Field: ‘globals’
[18:03:11.527]   - Field: ‘stdout’
[18:03:11.527]   - Field: ‘earlySignal’
[18:03:11.527]   - Field: ‘lazy’
[18:03:11.528]   - Field: ‘state’
[18:03:11.528] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:11.528] - Launch lazy future ...
[18:03:11.529] Packages needed by the future expression (n = 0): <none>
[18:03:11.529] Packages needed by future strategies (n = 0): <none>
[18:03:11.530] {
[18:03:11.530]     {
[18:03:11.530]         {
[18:03:11.530]             ...future.startTime <- base::Sys.time()
[18:03:11.530]             {
[18:03:11.530]                 {
[18:03:11.530]                   {
[18:03:11.530]                     {
[18:03:11.530]                       base::local({
[18:03:11.530]                         has_future <- base::requireNamespace("future", 
[18:03:11.530]                           quietly = TRUE)
[18:03:11.530]                         if (has_future) {
[18:03:11.530]                           ns <- base::getNamespace("future")
[18:03:11.530]                           version <- ns[[".package"]][["version"]]
[18:03:11.530]                           if (is.null(version)) 
[18:03:11.530]                             version <- utils::packageVersion("future")
[18:03:11.530]                         }
[18:03:11.530]                         else {
[18:03:11.530]                           version <- NULL
[18:03:11.530]                         }
[18:03:11.530]                         if (!has_future || version < "1.8.0") {
[18:03:11.530]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:11.530]                             "", base::R.version$version.string), 
[18:03:11.530]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:11.530]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:11.530]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:11.530]                               "release", "version")], collapse = " "), 
[18:03:11.530]                             hostname = base::Sys.info()[["nodename"]])
[18:03:11.530]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:11.530]                             info)
[18:03:11.530]                           info <- base::paste(info, collapse = "; ")
[18:03:11.530]                           if (!has_future) {
[18:03:11.530]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:11.530]                               info)
[18:03:11.530]                           }
[18:03:11.530]                           else {
[18:03:11.530]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:11.530]                               info, version)
[18:03:11.530]                           }
[18:03:11.530]                           base::stop(msg)
[18:03:11.530]                         }
[18:03:11.530]                       })
[18:03:11.530]                     }
[18:03:11.530]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:11.530]                     base::options(mc.cores = 1L)
[18:03:11.530]                   }
[18:03:11.530]                   ...future.strategy.old <- future::plan("list")
[18:03:11.530]                   options(future.plan = NULL)
[18:03:11.530]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.530]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:11.530]                 }
[18:03:11.530]                 ...future.workdir <- getwd()
[18:03:11.530]             }
[18:03:11.530]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:11.530]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:11.530]         }
[18:03:11.530]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:11.530]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:11.530]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:11.530]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:11.530]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:11.530]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:11.530]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:11.530]             base::names(...future.oldOptions))
[18:03:11.530]     }
[18:03:11.530]     if (FALSE) {
[18:03:11.530]     }
[18:03:11.530]     else {
[18:03:11.530]         if (TRUE) {
[18:03:11.530]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:11.530]                 open = "w")
[18:03:11.530]         }
[18:03:11.530]         else {
[18:03:11.530]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:11.530]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:11.530]         }
[18:03:11.530]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:11.530]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:11.530]             base::sink(type = "output", split = FALSE)
[18:03:11.530]             base::close(...future.stdout)
[18:03:11.530]         }, add = TRUE)
[18:03:11.530]     }
[18:03:11.530]     ...future.frame <- base::sys.nframe()
[18:03:11.530]     ...future.conditions <- base::list()
[18:03:11.530]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:11.530]     if (FALSE) {
[18:03:11.530]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:11.530]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:11.530]     }
[18:03:11.530]     ...future.result <- base::tryCatch({
[18:03:11.530]         base::withCallingHandlers({
[18:03:11.530]             ...future.value <- base::withVisible(base::local({
[18:03:11.530]                 ...future.makeSendCondition <- base::local({
[18:03:11.530]                   sendCondition <- NULL
[18:03:11.530]                   function(frame = 1L) {
[18:03:11.530]                     if (is.function(sendCondition)) 
[18:03:11.530]                       return(sendCondition)
[18:03:11.530]                     ns <- getNamespace("parallel")
[18:03:11.530]                     if (exists("sendData", mode = "function", 
[18:03:11.530]                       envir = ns)) {
[18:03:11.530]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:11.530]                         envir = ns)
[18:03:11.530]                       envir <- sys.frame(frame)
[18:03:11.530]                       master <- NULL
[18:03:11.530]                       while (!identical(envir, .GlobalEnv) && 
[18:03:11.530]                         !identical(envir, emptyenv())) {
[18:03:11.530]                         if (exists("master", mode = "list", envir = envir, 
[18:03:11.530]                           inherits = FALSE)) {
[18:03:11.530]                           master <- get("master", mode = "list", 
[18:03:11.530]                             envir = envir, inherits = FALSE)
[18:03:11.530]                           if (inherits(master, c("SOCKnode", 
[18:03:11.530]                             "SOCK0node"))) {
[18:03:11.530]                             sendCondition <<- function(cond) {
[18:03:11.530]                               data <- list(type = "VALUE", value = cond, 
[18:03:11.530]                                 success = TRUE)
[18:03:11.530]                               parallel_sendData(master, data)
[18:03:11.530]                             }
[18:03:11.530]                             return(sendCondition)
[18:03:11.530]                           }
[18:03:11.530]                         }
[18:03:11.530]                         frame <- frame + 1L
[18:03:11.530]                         envir <- sys.frame(frame)
[18:03:11.530]                       }
[18:03:11.530]                     }
[18:03:11.530]                     sendCondition <<- function(cond) NULL
[18:03:11.530]                   }
[18:03:11.530]                 })
[18:03:11.530]                 withCallingHandlers({
[18:03:11.530]                   slow_fcn(x)
[18:03:11.530]                 }, immediateCondition = function(cond) {
[18:03:11.530]                   sendCondition <- ...future.makeSendCondition()
[18:03:11.530]                   sendCondition(cond)
[18:03:11.530]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.530]                   {
[18:03:11.530]                     inherits <- base::inherits
[18:03:11.530]                     invokeRestart <- base::invokeRestart
[18:03:11.530]                     is.null <- base::is.null
[18:03:11.530]                     muffled <- FALSE
[18:03:11.530]                     if (inherits(cond, "message")) {
[18:03:11.530]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:11.530]                       if (muffled) 
[18:03:11.530]                         invokeRestart("muffleMessage")
[18:03:11.530]                     }
[18:03:11.530]                     else if (inherits(cond, "warning")) {
[18:03:11.530]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:11.530]                       if (muffled) 
[18:03:11.530]                         invokeRestart("muffleWarning")
[18:03:11.530]                     }
[18:03:11.530]                     else if (inherits(cond, "condition")) {
[18:03:11.530]                       if (!is.null(pattern)) {
[18:03:11.530]                         computeRestarts <- base::computeRestarts
[18:03:11.530]                         grepl <- base::grepl
[18:03:11.530]                         restarts <- computeRestarts(cond)
[18:03:11.530]                         for (restart in restarts) {
[18:03:11.530]                           name <- restart$name
[18:03:11.530]                           if (is.null(name)) 
[18:03:11.530]                             next
[18:03:11.530]                           if (!grepl(pattern, name)) 
[18:03:11.530]                             next
[18:03:11.530]                           invokeRestart(restart)
[18:03:11.530]                           muffled <- TRUE
[18:03:11.530]                           break
[18:03:11.530]                         }
[18:03:11.530]                       }
[18:03:11.530]                     }
[18:03:11.530]                     invisible(muffled)
[18:03:11.530]                   }
[18:03:11.530]                   muffleCondition(cond)
[18:03:11.530]                 })
[18:03:11.530]             }))
[18:03:11.530]             future::FutureResult(value = ...future.value$value, 
[18:03:11.530]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.530]                   ...future.rng), globalenv = if (FALSE) 
[18:03:11.530]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:11.530]                     ...future.globalenv.names))
[18:03:11.530]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:11.530]         }, condition = base::local({
[18:03:11.530]             c <- base::c
[18:03:11.530]             inherits <- base::inherits
[18:03:11.530]             invokeRestart <- base::invokeRestart
[18:03:11.530]             length <- base::length
[18:03:11.530]             list <- base::list
[18:03:11.530]             seq.int <- base::seq.int
[18:03:11.530]             signalCondition <- base::signalCondition
[18:03:11.530]             sys.calls <- base::sys.calls
[18:03:11.530]             `[[` <- base::`[[`
[18:03:11.530]             `+` <- base::`+`
[18:03:11.530]             `<<-` <- base::`<<-`
[18:03:11.530]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:11.530]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:11.530]                   3L)]
[18:03:11.530]             }
[18:03:11.530]             function(cond) {
[18:03:11.530]                 is_error <- inherits(cond, "error")
[18:03:11.530]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:11.530]                   NULL)
[18:03:11.530]                 if (is_error) {
[18:03:11.530]                   sessionInformation <- function() {
[18:03:11.530]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:11.530]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:11.530]                       search = base::search(), system = base::Sys.info())
[18:03:11.530]                   }
[18:03:11.530]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.530]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:11.530]                     cond$call), session = sessionInformation(), 
[18:03:11.530]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:11.530]                   signalCondition(cond)
[18:03:11.530]                 }
[18:03:11.530]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:11.530]                 "immediateCondition"))) {
[18:03:11.530]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:11.530]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.530]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:11.530]                   if (TRUE && !signal) {
[18:03:11.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.530]                     {
[18:03:11.530]                       inherits <- base::inherits
[18:03:11.530]                       invokeRestart <- base::invokeRestart
[18:03:11.530]                       is.null <- base::is.null
[18:03:11.530]                       muffled <- FALSE
[18:03:11.530]                       if (inherits(cond, "message")) {
[18:03:11.530]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.530]                         if (muffled) 
[18:03:11.530]                           invokeRestart("muffleMessage")
[18:03:11.530]                       }
[18:03:11.530]                       else if (inherits(cond, "warning")) {
[18:03:11.530]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.530]                         if (muffled) 
[18:03:11.530]                           invokeRestart("muffleWarning")
[18:03:11.530]                       }
[18:03:11.530]                       else if (inherits(cond, "condition")) {
[18:03:11.530]                         if (!is.null(pattern)) {
[18:03:11.530]                           computeRestarts <- base::computeRestarts
[18:03:11.530]                           grepl <- base::grepl
[18:03:11.530]                           restarts <- computeRestarts(cond)
[18:03:11.530]                           for (restart in restarts) {
[18:03:11.530]                             name <- restart$name
[18:03:11.530]                             if (is.null(name)) 
[18:03:11.530]                               next
[18:03:11.530]                             if (!grepl(pattern, name)) 
[18:03:11.530]                               next
[18:03:11.530]                             invokeRestart(restart)
[18:03:11.530]                             muffled <- TRUE
[18:03:11.530]                             break
[18:03:11.530]                           }
[18:03:11.530]                         }
[18:03:11.530]                       }
[18:03:11.530]                       invisible(muffled)
[18:03:11.530]                     }
[18:03:11.530]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.530]                   }
[18:03:11.530]                 }
[18:03:11.530]                 else {
[18:03:11.530]                   if (TRUE) {
[18:03:11.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.530]                     {
[18:03:11.530]                       inherits <- base::inherits
[18:03:11.530]                       invokeRestart <- base::invokeRestart
[18:03:11.530]                       is.null <- base::is.null
[18:03:11.530]                       muffled <- FALSE
[18:03:11.530]                       if (inherits(cond, "message")) {
[18:03:11.530]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.530]                         if (muffled) 
[18:03:11.530]                           invokeRestart("muffleMessage")
[18:03:11.530]                       }
[18:03:11.530]                       else if (inherits(cond, "warning")) {
[18:03:11.530]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.530]                         if (muffled) 
[18:03:11.530]                           invokeRestart("muffleWarning")
[18:03:11.530]                       }
[18:03:11.530]                       else if (inherits(cond, "condition")) {
[18:03:11.530]                         if (!is.null(pattern)) {
[18:03:11.530]                           computeRestarts <- base::computeRestarts
[18:03:11.530]                           grepl <- base::grepl
[18:03:11.530]                           restarts <- computeRestarts(cond)
[18:03:11.530]                           for (restart in restarts) {
[18:03:11.530]                             name <- restart$name
[18:03:11.530]                             if (is.null(name)) 
[18:03:11.530]                               next
[18:03:11.530]                             if (!grepl(pattern, name)) 
[18:03:11.530]                               next
[18:03:11.530]                             invokeRestart(restart)
[18:03:11.530]                             muffled <- TRUE
[18:03:11.530]                             break
[18:03:11.530]                           }
[18:03:11.530]                         }
[18:03:11.530]                       }
[18:03:11.530]                       invisible(muffled)
[18:03:11.530]                     }
[18:03:11.530]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.530]                   }
[18:03:11.530]                 }
[18:03:11.530]             }
[18:03:11.530]         }))
[18:03:11.530]     }, error = function(ex) {
[18:03:11.530]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:11.530]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.530]                 ...future.rng), started = ...future.startTime, 
[18:03:11.530]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:11.530]             version = "1.8"), class = "FutureResult")
[18:03:11.530]     }, finally = {
[18:03:11.530]         if (!identical(...future.workdir, getwd())) 
[18:03:11.530]             setwd(...future.workdir)
[18:03:11.530]         {
[18:03:11.530]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:11.530]                 ...future.oldOptions$nwarnings <- NULL
[18:03:11.530]             }
[18:03:11.530]             base::options(...future.oldOptions)
[18:03:11.530]             if (.Platform$OS.type == "windows") {
[18:03:11.530]                 old_names <- names(...future.oldEnvVars)
[18:03:11.530]                 envs <- base::Sys.getenv()
[18:03:11.530]                 names <- names(envs)
[18:03:11.530]                 common <- intersect(names, old_names)
[18:03:11.530]                 added <- setdiff(names, old_names)
[18:03:11.530]                 removed <- setdiff(old_names, names)
[18:03:11.530]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:11.530]                   envs[common]]
[18:03:11.530]                 NAMES <- toupper(changed)
[18:03:11.530]                 args <- list()
[18:03:11.530]                 for (kk in seq_along(NAMES)) {
[18:03:11.530]                   name <- changed[[kk]]
[18:03:11.530]                   NAME <- NAMES[[kk]]
[18:03:11.530]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.530]                     next
[18:03:11.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.530]                 }
[18:03:11.530]                 NAMES <- toupper(added)
[18:03:11.530]                 for (kk in seq_along(NAMES)) {
[18:03:11.530]                   name <- added[[kk]]
[18:03:11.530]                   NAME <- NAMES[[kk]]
[18:03:11.530]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.530]                     next
[18:03:11.530]                   args[[name]] <- ""
[18:03:11.530]                 }
[18:03:11.530]                 NAMES <- toupper(removed)
[18:03:11.530]                 for (kk in seq_along(NAMES)) {
[18:03:11.530]                   name <- removed[[kk]]
[18:03:11.530]                   NAME <- NAMES[[kk]]
[18:03:11.530]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.530]                     next
[18:03:11.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.530]                 }
[18:03:11.530]                 if (length(args) > 0) 
[18:03:11.530]                   base::do.call(base::Sys.setenv, args = args)
[18:03:11.530]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:11.530]             }
[18:03:11.530]             else {
[18:03:11.530]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:11.530]             }
[18:03:11.530]             {
[18:03:11.530]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:11.530]                   0L) {
[18:03:11.530]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:11.530]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:11.530]                   base::options(opts)
[18:03:11.530]                 }
[18:03:11.530]                 {
[18:03:11.530]                   {
[18:03:11.530]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:11.530]                     NULL
[18:03:11.530]                   }
[18:03:11.530]                   options(future.plan = NULL)
[18:03:11.530]                   if (is.na(NA_character_)) 
[18:03:11.530]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.530]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:11.530]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:11.530]                     .init = FALSE)
[18:03:11.530]                 }
[18:03:11.530]             }
[18:03:11.530]         }
[18:03:11.530]     })
[18:03:11.530]     if (TRUE) {
[18:03:11.530]         base::sink(type = "output", split = FALSE)
[18:03:11.530]         if (TRUE) {
[18:03:11.530]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:11.530]         }
[18:03:11.530]         else {
[18:03:11.530]             ...future.result["stdout"] <- base::list(NULL)
[18:03:11.530]         }
[18:03:11.530]         base::close(...future.stdout)
[18:03:11.530]         ...future.stdout <- NULL
[18:03:11.530]     }
[18:03:11.530]     ...future.result$conditions <- ...future.conditions
[18:03:11.530]     ...future.result$finished <- base::Sys.time()
[18:03:11.530]     ...future.result
[18:03:11.530] }
[18:03:11.713] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[18:03:11.713] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[18:03:11.716] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[18:03:11.717] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[18:03:11.720] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[18:03:11.720] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[18:03:11.724] MultisessionFuture started
[18:03:11.726] - Launch lazy future ... done
[18:03:11.727] run() for ‘MultisessionFuture’ ... done
[18:03:11.730] getGlobalsAndPackages() ...
[18:03:11.730] Searching for globals...
[18:03:11.736] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[18:03:11.738] Searching for globals ... DONE
[18:03:11.739] Resolving globals: FALSE
[18:03:11.740] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[18:03:11.741] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[18:03:11.741] - globals: [2] ‘slow_fcn’, ‘x’
[18:03:11.741] 
[18:03:11.741] getGlobalsAndPackages() ... DONE
[18:03:11.743] run() for ‘Future’ ...
[18:03:11.743] - state: ‘created’
[18:03:11.743] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:11.762] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:11.762] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:11.762]   - Field: ‘node’
[18:03:11.763]   - Field: ‘label’
[18:03:11.763]   - Field: ‘local’
[18:03:11.763]   - Field: ‘owner’
[18:03:11.763]   - Field: ‘envir’
[18:03:11.763]   - Field: ‘workers’
[18:03:11.764]   - Field: ‘packages’
[18:03:11.764]   - Field: ‘gc’
[18:03:11.764]   - Field: ‘conditions’
[18:03:11.764]   - Field: ‘persistent’
[18:03:11.764]   - Field: ‘expr’
[18:03:11.765]   - Field: ‘uuid’
[18:03:11.767]   - Field: ‘seed’
[18:03:11.767]   - Field: ‘version’
[18:03:11.767]   - Field: ‘result’
[18:03:11.768]   - Field: ‘asynchronous’
[18:03:11.770]   - Field: ‘calls’
[18:03:11.770]   - Field: ‘globals’
[18:03:11.771]   - Field: ‘stdout’
[18:03:11.771]   - Field: ‘earlySignal’
[18:03:11.771]   - Field: ‘lazy’
[18:03:11.771]   - Field: ‘state’
[18:03:11.772] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:11.776] - Launch lazy future ...
[18:03:11.776] Packages needed by the future expression (n = 0): <none>
[18:03:11.776] Packages needed by future strategies (n = 0): <none>
[18:03:11.780] {
[18:03:11.780]     {
[18:03:11.780]         {
[18:03:11.780]             ...future.startTime <- base::Sys.time()
[18:03:11.780]             {
[18:03:11.780]                 {
[18:03:11.780]                   {
[18:03:11.780]                     {
[18:03:11.780]                       base::local({
[18:03:11.780]                         has_future <- base::requireNamespace("future", 
[18:03:11.780]                           quietly = TRUE)
[18:03:11.780]                         if (has_future) {
[18:03:11.780]                           ns <- base::getNamespace("future")
[18:03:11.780]                           version <- ns[[".package"]][["version"]]
[18:03:11.780]                           if (is.null(version)) 
[18:03:11.780]                             version <- utils::packageVersion("future")
[18:03:11.780]                         }
[18:03:11.780]                         else {
[18:03:11.780]                           version <- NULL
[18:03:11.780]                         }
[18:03:11.780]                         if (!has_future || version < "1.8.0") {
[18:03:11.780]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:11.780]                             "", base::R.version$version.string), 
[18:03:11.780]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:11.780]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:11.780]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:11.780]                               "release", "version")], collapse = " "), 
[18:03:11.780]                             hostname = base::Sys.info()[["nodename"]])
[18:03:11.780]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:11.780]                             info)
[18:03:11.780]                           info <- base::paste(info, collapse = "; ")
[18:03:11.780]                           if (!has_future) {
[18:03:11.780]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:11.780]                               info)
[18:03:11.780]                           }
[18:03:11.780]                           else {
[18:03:11.780]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:11.780]                               info, version)
[18:03:11.780]                           }
[18:03:11.780]                           base::stop(msg)
[18:03:11.780]                         }
[18:03:11.780]                       })
[18:03:11.780]                     }
[18:03:11.780]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:11.780]                     base::options(mc.cores = 1L)
[18:03:11.780]                   }
[18:03:11.780]                   ...future.strategy.old <- future::plan("list")
[18:03:11.780]                   options(future.plan = NULL)
[18:03:11.780]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.780]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:11.780]                 }
[18:03:11.780]                 ...future.workdir <- getwd()
[18:03:11.780]             }
[18:03:11.780]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:11.780]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:11.780]         }
[18:03:11.780]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:11.780]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:11.780]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:11.780]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:11.780]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:11.780]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:11.780]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:11.780]             base::names(...future.oldOptions))
[18:03:11.780]     }
[18:03:11.780]     if (FALSE) {
[18:03:11.780]     }
[18:03:11.780]     else {
[18:03:11.780]         if (TRUE) {
[18:03:11.780]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:11.780]                 open = "w")
[18:03:11.780]         }
[18:03:11.780]         else {
[18:03:11.780]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:11.780]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:11.780]         }
[18:03:11.780]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:11.780]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:11.780]             base::sink(type = "output", split = FALSE)
[18:03:11.780]             base::close(...future.stdout)
[18:03:11.780]         }, add = TRUE)
[18:03:11.780]     }
[18:03:11.780]     ...future.frame <- base::sys.nframe()
[18:03:11.780]     ...future.conditions <- base::list()
[18:03:11.780]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:11.780]     if (FALSE) {
[18:03:11.780]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:11.780]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:11.780]     }
[18:03:11.780]     ...future.result <- base::tryCatch({
[18:03:11.780]         base::withCallingHandlers({
[18:03:11.780]             ...future.value <- base::withVisible(base::local({
[18:03:11.780]                 ...future.makeSendCondition <- base::local({
[18:03:11.780]                   sendCondition <- NULL
[18:03:11.780]                   function(frame = 1L) {
[18:03:11.780]                     if (is.function(sendCondition)) 
[18:03:11.780]                       return(sendCondition)
[18:03:11.780]                     ns <- getNamespace("parallel")
[18:03:11.780]                     if (exists("sendData", mode = "function", 
[18:03:11.780]                       envir = ns)) {
[18:03:11.780]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:11.780]                         envir = ns)
[18:03:11.780]                       envir <- sys.frame(frame)
[18:03:11.780]                       master <- NULL
[18:03:11.780]                       while (!identical(envir, .GlobalEnv) && 
[18:03:11.780]                         !identical(envir, emptyenv())) {
[18:03:11.780]                         if (exists("master", mode = "list", envir = envir, 
[18:03:11.780]                           inherits = FALSE)) {
[18:03:11.780]                           master <- get("master", mode = "list", 
[18:03:11.780]                             envir = envir, inherits = FALSE)
[18:03:11.780]                           if (inherits(master, c("SOCKnode", 
[18:03:11.780]                             "SOCK0node"))) {
[18:03:11.780]                             sendCondition <<- function(cond) {
[18:03:11.780]                               data <- list(type = "VALUE", value = cond, 
[18:03:11.780]                                 success = TRUE)
[18:03:11.780]                               parallel_sendData(master, data)
[18:03:11.780]                             }
[18:03:11.780]                             return(sendCondition)
[18:03:11.780]                           }
[18:03:11.780]                         }
[18:03:11.780]                         frame <- frame + 1L
[18:03:11.780]                         envir <- sys.frame(frame)
[18:03:11.780]                       }
[18:03:11.780]                     }
[18:03:11.780]                     sendCondition <<- function(cond) NULL
[18:03:11.780]                   }
[18:03:11.780]                 })
[18:03:11.780]                 withCallingHandlers({
[18:03:11.780]                   slow_fcn(x)
[18:03:11.780]                 }, immediateCondition = function(cond) {
[18:03:11.780]                   sendCondition <- ...future.makeSendCondition()
[18:03:11.780]                   sendCondition(cond)
[18:03:11.780]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.780]                   {
[18:03:11.780]                     inherits <- base::inherits
[18:03:11.780]                     invokeRestart <- base::invokeRestart
[18:03:11.780]                     is.null <- base::is.null
[18:03:11.780]                     muffled <- FALSE
[18:03:11.780]                     if (inherits(cond, "message")) {
[18:03:11.780]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:11.780]                       if (muffled) 
[18:03:11.780]                         invokeRestart("muffleMessage")
[18:03:11.780]                     }
[18:03:11.780]                     else if (inherits(cond, "warning")) {
[18:03:11.780]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:11.780]                       if (muffled) 
[18:03:11.780]                         invokeRestart("muffleWarning")
[18:03:11.780]                     }
[18:03:11.780]                     else if (inherits(cond, "condition")) {
[18:03:11.780]                       if (!is.null(pattern)) {
[18:03:11.780]                         computeRestarts <- base::computeRestarts
[18:03:11.780]                         grepl <- base::grepl
[18:03:11.780]                         restarts <- computeRestarts(cond)
[18:03:11.780]                         for (restart in restarts) {
[18:03:11.780]                           name <- restart$name
[18:03:11.780]                           if (is.null(name)) 
[18:03:11.780]                             next
[18:03:11.780]                           if (!grepl(pattern, name)) 
[18:03:11.780]                             next
[18:03:11.780]                           invokeRestart(restart)
[18:03:11.780]                           muffled <- TRUE
[18:03:11.780]                           break
[18:03:11.780]                         }
[18:03:11.780]                       }
[18:03:11.780]                     }
[18:03:11.780]                     invisible(muffled)
[18:03:11.780]                   }
[18:03:11.780]                   muffleCondition(cond)
[18:03:11.780]                 })
[18:03:11.780]             }))
[18:03:11.780]             future::FutureResult(value = ...future.value$value, 
[18:03:11.780]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.780]                   ...future.rng), globalenv = if (FALSE) 
[18:03:11.780]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:11.780]                     ...future.globalenv.names))
[18:03:11.780]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:11.780]         }, condition = base::local({
[18:03:11.780]             c <- base::c
[18:03:11.780]             inherits <- base::inherits
[18:03:11.780]             invokeRestart <- base::invokeRestart
[18:03:11.780]             length <- base::length
[18:03:11.780]             list <- base::list
[18:03:11.780]             seq.int <- base::seq.int
[18:03:11.780]             signalCondition <- base::signalCondition
[18:03:11.780]             sys.calls <- base::sys.calls
[18:03:11.780]             `[[` <- base::`[[`
[18:03:11.780]             `+` <- base::`+`
[18:03:11.780]             `<<-` <- base::`<<-`
[18:03:11.780]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:11.780]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:11.780]                   3L)]
[18:03:11.780]             }
[18:03:11.780]             function(cond) {
[18:03:11.780]                 is_error <- inherits(cond, "error")
[18:03:11.780]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:11.780]                   NULL)
[18:03:11.780]                 if (is_error) {
[18:03:11.780]                   sessionInformation <- function() {
[18:03:11.780]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:11.780]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:11.780]                       search = base::search(), system = base::Sys.info())
[18:03:11.780]                   }
[18:03:11.780]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.780]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:11.780]                     cond$call), session = sessionInformation(), 
[18:03:11.780]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:11.780]                   signalCondition(cond)
[18:03:11.780]                 }
[18:03:11.780]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:11.780]                 "immediateCondition"))) {
[18:03:11.780]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:11.780]                   ...future.conditions[[length(...future.conditions) + 
[18:03:11.780]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:11.780]                   if (TRUE && !signal) {
[18:03:11.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.780]                     {
[18:03:11.780]                       inherits <- base::inherits
[18:03:11.780]                       invokeRestart <- base::invokeRestart
[18:03:11.780]                       is.null <- base::is.null
[18:03:11.780]                       muffled <- FALSE
[18:03:11.780]                       if (inherits(cond, "message")) {
[18:03:11.780]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.780]                         if (muffled) 
[18:03:11.780]                           invokeRestart("muffleMessage")
[18:03:11.780]                       }
[18:03:11.780]                       else if (inherits(cond, "warning")) {
[18:03:11.780]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.780]                         if (muffled) 
[18:03:11.780]                           invokeRestart("muffleWarning")
[18:03:11.780]                       }
[18:03:11.780]                       else if (inherits(cond, "condition")) {
[18:03:11.780]                         if (!is.null(pattern)) {
[18:03:11.780]                           computeRestarts <- base::computeRestarts
[18:03:11.780]                           grepl <- base::grepl
[18:03:11.780]                           restarts <- computeRestarts(cond)
[18:03:11.780]                           for (restart in restarts) {
[18:03:11.780]                             name <- restart$name
[18:03:11.780]                             if (is.null(name)) 
[18:03:11.780]                               next
[18:03:11.780]                             if (!grepl(pattern, name)) 
[18:03:11.780]                               next
[18:03:11.780]                             invokeRestart(restart)
[18:03:11.780]                             muffled <- TRUE
[18:03:11.780]                             break
[18:03:11.780]                           }
[18:03:11.780]                         }
[18:03:11.780]                       }
[18:03:11.780]                       invisible(muffled)
[18:03:11.780]                     }
[18:03:11.780]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.780]                   }
[18:03:11.780]                 }
[18:03:11.780]                 else {
[18:03:11.780]                   if (TRUE) {
[18:03:11.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:11.780]                     {
[18:03:11.780]                       inherits <- base::inherits
[18:03:11.780]                       invokeRestart <- base::invokeRestart
[18:03:11.780]                       is.null <- base::is.null
[18:03:11.780]                       muffled <- FALSE
[18:03:11.780]                       if (inherits(cond, "message")) {
[18:03:11.780]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:11.780]                         if (muffled) 
[18:03:11.780]                           invokeRestart("muffleMessage")
[18:03:11.780]                       }
[18:03:11.780]                       else if (inherits(cond, "warning")) {
[18:03:11.780]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:11.780]                         if (muffled) 
[18:03:11.780]                           invokeRestart("muffleWarning")
[18:03:11.780]                       }
[18:03:11.780]                       else if (inherits(cond, "condition")) {
[18:03:11.780]                         if (!is.null(pattern)) {
[18:03:11.780]                           computeRestarts <- base::computeRestarts
[18:03:11.780]                           grepl <- base::grepl
[18:03:11.780]                           restarts <- computeRestarts(cond)
[18:03:11.780]                           for (restart in restarts) {
[18:03:11.780]                             name <- restart$name
[18:03:11.780]                             if (is.null(name)) 
[18:03:11.780]                               next
[18:03:11.780]                             if (!grepl(pattern, name)) 
[18:03:11.780]                               next
[18:03:11.780]                             invokeRestart(restart)
[18:03:11.780]                             muffled <- TRUE
[18:03:11.780]                             break
[18:03:11.780]                           }
[18:03:11.780]                         }
[18:03:11.780]                       }
[18:03:11.780]                       invisible(muffled)
[18:03:11.780]                     }
[18:03:11.780]                     muffleCondition(cond, pattern = "^muffle")
[18:03:11.780]                   }
[18:03:11.780]                 }
[18:03:11.780]             }
[18:03:11.780]         }))
[18:03:11.780]     }, error = function(ex) {
[18:03:11.780]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:11.780]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:11.780]                 ...future.rng), started = ...future.startTime, 
[18:03:11.780]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:11.780]             version = "1.8"), class = "FutureResult")
[18:03:11.780]     }, finally = {
[18:03:11.780]         if (!identical(...future.workdir, getwd())) 
[18:03:11.780]             setwd(...future.workdir)
[18:03:11.780]         {
[18:03:11.780]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:11.780]                 ...future.oldOptions$nwarnings <- NULL
[18:03:11.780]             }
[18:03:11.780]             base::options(...future.oldOptions)
[18:03:11.780]             if (.Platform$OS.type == "windows") {
[18:03:11.780]                 old_names <- names(...future.oldEnvVars)
[18:03:11.780]                 envs <- base::Sys.getenv()
[18:03:11.780]                 names <- names(envs)
[18:03:11.780]                 common <- intersect(names, old_names)
[18:03:11.780]                 added <- setdiff(names, old_names)
[18:03:11.780]                 removed <- setdiff(old_names, names)
[18:03:11.780]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:11.780]                   envs[common]]
[18:03:11.780]                 NAMES <- toupper(changed)
[18:03:11.780]                 args <- list()
[18:03:11.780]                 for (kk in seq_along(NAMES)) {
[18:03:11.780]                   name <- changed[[kk]]
[18:03:11.780]                   NAME <- NAMES[[kk]]
[18:03:11.780]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.780]                     next
[18:03:11.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.780]                 }
[18:03:11.780]                 NAMES <- toupper(added)
[18:03:11.780]                 for (kk in seq_along(NAMES)) {
[18:03:11.780]                   name <- added[[kk]]
[18:03:11.780]                   NAME <- NAMES[[kk]]
[18:03:11.780]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.780]                     next
[18:03:11.780]                   args[[name]] <- ""
[18:03:11.780]                 }
[18:03:11.780]                 NAMES <- toupper(removed)
[18:03:11.780]                 for (kk in seq_along(NAMES)) {
[18:03:11.780]                   name <- removed[[kk]]
[18:03:11.780]                   NAME <- NAMES[[kk]]
[18:03:11.780]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:11.780]                     next
[18:03:11.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:11.780]                 }
[18:03:11.780]                 if (length(args) > 0) 
[18:03:11.780]                   base::do.call(base::Sys.setenv, args = args)
[18:03:11.780]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:11.780]             }
[18:03:11.780]             else {
[18:03:11.780]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:11.780]             }
[18:03:11.780]             {
[18:03:11.780]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:11.780]                   0L) {
[18:03:11.780]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:11.780]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:11.780]                   base::options(opts)
[18:03:11.780]                 }
[18:03:11.780]                 {
[18:03:11.780]                   {
[18:03:11.780]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:11.780]                     NULL
[18:03:11.780]                   }
[18:03:11.780]                   options(future.plan = NULL)
[18:03:11.780]                   if (is.na(NA_character_)) 
[18:03:11.780]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:11.780]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:11.780]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:11.780]                     .init = FALSE)
[18:03:11.780]                 }
[18:03:11.780]             }
[18:03:11.780]         }
[18:03:11.780]     })
[18:03:11.780]     if (TRUE) {
[18:03:11.780]         base::sink(type = "output", split = FALSE)
[18:03:11.780]         if (TRUE) {
[18:03:11.780]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:11.780]         }
[18:03:11.780]         else {
[18:03:11.780]             ...future.result["stdout"] <- base::list(NULL)
[18:03:11.780]         }
[18:03:11.780]         base::close(...future.stdout)
[18:03:11.780]         ...future.stdout <- NULL
[18:03:11.780]     }
[18:03:11.780]     ...future.result$conditions <- ...future.conditions
[18:03:11.780]     ...future.result$finished <- base::Sys.time()
[18:03:11.780]     ...future.result
[18:03:11.780] }
[18:03:11.794] Poll #1 (0): usedNodes() = 2, workers = 2
[18:03:11.831] Poll #2 (0.04 secs): usedNodes() = 2, workers = 2
[18:03:11.882] Poll #3 (0.09 secs): usedNodes() = 2, workers = 2
[18:03:11.915] Poll #4 (0.12 secs): usedNodes() = 2, workers = 2
[18:03:11.948] Poll #5 (0.15 secs): usedNodes() = 2, workers = 2
[18:03:11.983] Poll #6 (0.19 secs): usedNodes() = 2, workers = 2
[18:03:12.017] Poll #7 (0.22 secs): usedNodes() = 2, workers = 2
[18:03:12.050] Poll #8 (0.26 secs): usedNodes() = 2, workers = 2
[18:03:12.084] Poll #9 (0.29 secs): usedNodes() = 2, workers = 2
[18:03:12.118] Poll #10 (0.32 secs): usedNodes() = 2, workers = 2
[18:03:12.152] Poll #11 (0.36 secs): usedNodes() = 2, workers = 2
[18:03:12.188] Poll #12 (0.39 secs): usedNodes() = 2, workers = 2
[18:03:12.227] Poll #13 (0.43 secs): usedNodes() = 2, workers = 2
[18:03:12.262] Poll #14 (0.47 secs): usedNodes() = 2, workers = 2
[18:03:12.299] Poll #15 (0.5 secs): usedNodes() = 2, workers = 2
[18:03:12.334] Poll #16 (0.54 secs): usedNodes() = 2, workers = 2
[18:03:12.369] Poll #17 (0.57 secs): usedNodes() = 2, workers = 2
[18:03:12.383] receiveMessageFromWorker() for ClusterFuture ...
[18:03:12.383] - Validating connection of MultisessionFuture
[18:03:12.384] - received message: FutureResult
[18:03:12.385] - Received FutureResult
[18:03:12.386] - Erased future from FutureRegistry
[18:03:12.386] result() for ClusterFuture ...
[18:03:12.386] - result already collected: FutureResult
[18:03:12.386] result() for ClusterFuture ... done
[18:03:12.392] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:12.392] result() for ClusterFuture ...
[18:03:12.392] - result already collected: FutureResult
[18:03:12.393] result() for ClusterFuture ... done
[18:03:12.393] result() for ClusterFuture ...
[18:03:12.393] - result already collected: FutureResult
[18:03:12.393] result() for ClusterFuture ... done
[18:03:12.398] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[18:03:12.398] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[18:03:12.402] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[18:03:12.402] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:12.403] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:12.403] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[18:03:12.405] MultisessionFuture started
[18:03:12.407] - Launch lazy future ... done
[18:03:12.407] run() for ‘MultisessionFuture’ ... done
[18:03:12.408] resolve() on list ...
[18:03:12.408]  recursive: 0
[18:03:12.409]  length: 3
[18:03:12.409] 
[18:03:12.409] Future #1
[18:03:12.409] result() for ClusterFuture ...
[18:03:12.409] - result already collected: FutureResult
[18:03:12.410] result() for ClusterFuture ... done
[18:03:12.410] result() for ClusterFuture ...
[18:03:12.410] - result already collected: FutureResult
[18:03:12.410] result() for ClusterFuture ... done
[18:03:12.410] signalConditionsASAP(MultisessionFuture, pos=1) ...
[18:03:12.411] - nx: 3
[18:03:12.411] - relay: TRUE
[18:03:12.411] - stdout: TRUE
[18:03:12.411] - signal: TRUE
[18:03:12.411] - resignal: FALSE
[18:03:12.411] - force: TRUE
[18:03:12.412] - relayed: [n=3] FALSE, FALSE, FALSE
[18:03:12.412] - queued futures: [n=3] FALSE, FALSE, FALSE
[18:03:12.412]  - until=1
[18:03:12.412]  - relaying element #1
[18:03:12.412] result() for ClusterFuture ...
[18:03:12.413] - result already collected: FutureResult
[18:03:12.413] result() for ClusterFuture ... done
[18:03:12.413] result() for ClusterFuture ...
[18:03:12.413] - result already collected: FutureResult
[18:03:12.413] result() for ClusterFuture ... done
[18:03:12.414] result() for ClusterFuture ...
[18:03:12.414] - result already collected: FutureResult
[18:03:12.414] result() for ClusterFuture ... done
[18:03:12.414] result() for ClusterFuture ...
[18:03:12.414] - result already collected: FutureResult
[18:03:12.414] result() for ClusterFuture ... done
[18:03:12.415] - relayed: [n=3] TRUE, FALSE, FALSE
[18:03:12.415] - queued futures: [n=3] TRUE, FALSE, FALSE
[18:03:12.415] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[18:03:12.415]  length: 2 (resolved future 1)
[18:03:12.871] receiveMessageFromWorker() for ClusterFuture ...
[18:03:12.872] - Validating connection of MultisessionFuture
[18:03:12.872] - received message: FutureResult
[18:03:12.874] - Received FutureResult
[18:03:12.874] - Erased future from FutureRegistry
[18:03:12.874] result() for ClusterFuture ...
[18:03:12.875] - result already collected: FutureResult
[18:03:12.875] result() for ClusterFuture ... done
[18:03:12.880] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:12.880] Future #2
[18:03:12.880] result() for ClusterFuture ...
[18:03:12.880] - result already collected: FutureResult
[18:03:12.881] result() for ClusterFuture ... done
[18:03:12.881] result() for ClusterFuture ...
[18:03:12.881] - result already collected: FutureResult
[18:03:12.881] result() for ClusterFuture ... done
[18:03:12.882] signalConditionsASAP(MultisessionFuture, pos=2) ...
[18:03:12.882] - nx: 3
[18:03:12.882] - relay: TRUE
[18:03:12.882] - stdout: TRUE
[18:03:12.883] - signal: TRUE
[18:03:12.883] - resignal: FALSE
[18:03:12.883] - force: TRUE
[18:03:12.883] - relayed: [n=3] TRUE, FALSE, FALSE
[18:03:12.883] - queued futures: [n=3] TRUE, FALSE, FALSE
[18:03:12.884]  - until=2
[18:03:12.884]  - relaying element #2
[18:03:12.884] result() for ClusterFuture ...
[18:03:12.884] - result already collected: FutureResult
[18:03:12.885] result() for ClusterFuture ... done
[18:03:12.885] result() for ClusterFuture ...
[18:03:12.885] - result already collected: FutureResult
[18:03:12.885] result() for ClusterFuture ... done
[18:03:12.886] result() for ClusterFuture ...
[18:03:12.886] - result already collected: FutureResult
[18:03:12.886] result() for ClusterFuture ... done
[18:03:12.887] result() for ClusterFuture ...
[18:03:12.887] - result already collected: FutureResult
[18:03:12.887] result() for ClusterFuture ... done
[18:03:12.887] - relayed: [n=3] TRUE, TRUE, FALSE
[18:03:12.888] - queued futures: [n=3] TRUE, TRUE, FALSE
[18:03:12.888] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[18:03:12.888]  length: 1 (resolved future 2)
[18:03:13.958] receiveMessageFromWorker() for ClusterFuture ...
[18:03:13.958] - Validating connection of MultisessionFuture
[18:03:13.959] - received message: FutureResult
[18:03:13.961] - Received FutureResult
[18:03:13.961] - Erased future from FutureRegistry
[18:03:13.961] result() for ClusterFuture ...
[18:03:13.962] - result already collected: FutureResult
[18:03:13.962] result() for ClusterFuture ... done
[18:03:13.967] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:13.967] Future #3
[18:03:13.968] result() for ClusterFuture ...
[18:03:13.968] - result already collected: FutureResult
[18:03:13.968] result() for ClusterFuture ... done
[18:03:13.968] result() for ClusterFuture ...
[18:03:13.969] - result already collected: FutureResult
[18:03:13.969] result() for ClusterFuture ... done
[18:03:13.969] signalConditionsASAP(MultisessionFuture, pos=3) ...
[18:03:13.969] - nx: 3
[18:03:13.970] - relay: TRUE
[18:03:13.970] - stdout: TRUE
[18:03:13.970] - signal: TRUE
[18:03:13.971] - resignal: FALSE
[18:03:13.971] - force: TRUE
[18:03:13.971] - relayed: [n=3] TRUE, TRUE, FALSE
[18:03:13.971] - queued futures: [n=3] TRUE, TRUE, FALSE
[18:03:13.972]  - until=3
[18:03:13.972]  - relaying element #3
[18:03:13.972] result() for ClusterFuture ...
[18:03:13.973] - result already collected: FutureResult
[18:03:13.973] result() for ClusterFuture ... done
[18:03:13.973] result() for ClusterFuture ...
[18:03:13.974] - result already collected: FutureResult
[18:03:13.974] result() for ClusterFuture ... done
[18:03:13.974] result() for ClusterFuture ...
[18:03:13.975] - result already collected: FutureResult
[18:03:13.975] result() for ClusterFuture ... done
[18:03:13.975] result() for ClusterFuture ...
[18:03:13.976] - result already collected: FutureResult
[18:03:13.976] result() for ClusterFuture ... done
[18:03:13.976] - relayed: [n=3] TRUE, TRUE, TRUE
[18:03:13.977] - queued futures: [n=3] TRUE, TRUE, TRUE
[18:03:13.977] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[18:03:13.977]  length: 0 (resolved future 3)
[18:03:13.978] Relaying remaining futures
[18:03:13.978] signalConditionsASAP(NULL, pos=0) ...
[18:03:13.978] - nx: 3
[18:03:13.978] - relay: TRUE
[18:03:13.979] - stdout: TRUE
[18:03:13.979] - signal: TRUE
[18:03:13.979] - resignal: FALSE
[18:03:13.980] - force: TRUE
[18:03:13.980] - relayed: [n=3] TRUE, TRUE, TRUE
[18:03:13.980] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[18:03:13.981] - relayed: [n=3] TRUE, TRUE, TRUE
[18:03:13.981] - queued futures: [n=3] TRUE, TRUE, TRUE
[18:03:13.981] signalConditionsASAP(NULL, pos=0) ... done
[18:03:13.982] resolve() on list ... DONE
[18:03:13.982] result() for ClusterFuture ...
[18:03:13.982] - result already collected: FutureResult
[18:03:13.982] result() for ClusterFuture ... done
[18:03:13.983] result() for ClusterFuture ...
[18:03:13.983] - result already collected: FutureResult
[18:03:13.983] result() for ClusterFuture ... done
[18:03:13.984] result() for ClusterFuture ...
[18:03:13.984] - result already collected: FutureResult
[18:03:13.984] result() for ClusterFuture ... done
[18:03:13.985] result() for ClusterFuture ...
[18:03:13.985] - result already collected: FutureResult
[18:03:13.985] result() for ClusterFuture ... done
[18:03:13.986] result() for ClusterFuture ...
[18:03:13.986] - result already collected: FutureResult
[18:03:13.986] result() for ClusterFuture ... done
[18:03:13.987] result() for ClusterFuture ...
[18:03:13.987] - result already collected: FutureResult
[18:03:13.987] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-21 18:03:11 0.00000000 secs
6         launch   overhead   <NA> 2024-11-21 18:03:11 0.09536052 secs
2      getWorker   overhead launch 2024-11-21 18:03:11 0.10767269 secs
3    eraseWorker   overhead launch 2024-11-21 18:03:11 0.11254382 secs
4 attachPackages   overhead launch 2024-11-21 18:03:11 0.11583996 secs
5  exportGlobals   overhead launch 2024-11-21 18:03:11 0.11950731 secs
9       evaluate evaluation   <NA> 2024-11-21 18:03:11 0.17057920 secs
7  receiveResult   overhead gather 2024-11-21 18:03:12 1.03136659 secs
8         gather   overhead   <NA> 2024-11-21 18:03:12 1.03338528 secs
           duration future_label                          future_uuid
1 3.066087e-02 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
6 3.404808e-02 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
2 4.835129e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
3 7.843971e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
4 9.894371e-05 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
5 3.596544e-03 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
9 8.362854e-01 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
7 3.616810e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
8 6.034374e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
                          session_uuid
1 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
6 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
2 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
3 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
4 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
5 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
9 e7e69be0-9cf3-9d9a-58a2-096c8d5cb8a0
7 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
8 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-21 18:03:11 0.00000000 secs
6         launch   overhead   <NA> 2024-11-21 18:03:11 0.04131866 secs
2      getWorker   overhead launch 2024-11-21 18:03:11 0.04675221 secs
3    eraseWorker   overhead launch 2024-11-21 18:03:11 0.04817224 secs
4 attachPackages   overhead launch 2024-11-21 18:03:11 0.22233248 secs
5  exportGlobals   overhead launch 2024-11-21 18:03:11 0.22573972 secs
9       evaluate evaluation   <NA> 2024-11-21 18:03:11 0.27787757 secs
7  receiveResult   overhead gather 2024-11-21 18:03:12 1.38486028 secs
8         gather   overhead   <NA> 2024-11-21 18:03:12 1.38736129 secs
           duration future_label                          future_uuid
1 1.413345e-02 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
6 1.963520e-01 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
2 2.553463e-04 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
3 1.729188e-01 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
4 7.486343e-05 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
5 7.688761e-03 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
9 1.100822e+00 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
7 4.088879e-04 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
8 7.050037e-04 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
                          session_uuid
1 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
6 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
2 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
3 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
4 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
5 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
9 a9620d45-7f75-3139-683d-61cdd2d7d85f
7 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
8 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-21 18:03:11 0.00000000 secs
6         launch   overhead   <NA> 2024-11-21 18:03:11 0.04581904 secs
2      getWorker   overhead launch 2024-11-21 18:03:11 0.06364942 secs
3    eraseWorker   overhead launch 2024-11-21 18:03:12 0.66480875 secs
4 attachPackages   overhead launch 2024-11-21 18:03:12 0.66676950 secs
5  exportGlobals   overhead launch 2024-11-21 18:03:12 0.66790128 secs
9       evaluate evaluation   <NA> 2024-11-21 18:03:12 0.71595550 secs
7  receiveResult   overhead gather 2024-11-21 18:03:13 2.22865129 secs
8         gather   overhead   <NA> 2024-11-21 18:03:13 2.23135686 secs
           duration future_label                          future_uuid
1 1.189995e-02 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
6 6.298792e-01 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
2 6.000247e-01 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
3 7.653236e-04 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
4 6.484985e-05 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
5 5.603313e-03 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
9 1.509822e+00 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
7 4.584789e-04 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
8 7.450581e-04 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
                          session_uuid
1 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
6 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
2 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
3 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
4 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
5 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
9 e7e69be0-9cf3-9d9a-58a2-096c8d5cb8a0
7 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
8 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[18:03:14.003] plan(): Setting new future strategy stack:
[18:03:14.003] List of future strategies:
[18:03:14.003] 1. sequential:
[18:03:14.003]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:14.003]    - tweaked: FALSE
[18:03:14.003]    - call: plan(sequential)
[18:03:14.005] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2024-11-21 18:03:11 0.00000000 secs
6          launch   overhead   <NA> 2024-11-21 18:03:11 0.09536052 secs
2       getWorker   overhead launch 2024-11-21 18:03:11 0.10767269 secs
3     eraseWorker   overhead launch 2024-11-21 18:03:11 0.11254382 secs
4  attachPackages   overhead launch 2024-11-21 18:03:11 0.11583996 secs
5   exportGlobals   overhead launch 2024-11-21 18:03:11 0.11950731 secs
9        evaluate evaluation   <NA> 2024-11-21 18:03:11 0.17057920 secs
7   receiveResult   overhead gather 2024-11-21 18:03:12 1.03136659 secs
8          gather   overhead   <NA> 2024-11-21 18:03:12 1.03338528 secs
11         create   overhead   <NA> 2024-11-21 18:03:11 0.00000000 secs
61         launch   overhead   <NA> 2024-11-21 18:03:11 0.04131866 secs
21      getWorker   overhead launch 2024-11-21 18:03:11 0.04675221 secs
31    eraseWorker   overhead launch 2024-11-21 18:03:11 0.04817224 secs
41 attachPackages   overhead launch 2024-11-21 18:03:11 0.22233248 secs
51  exportGlobals   overhead launch 2024-11-21 18:03:11 0.22573972 secs
91       evaluate evaluation   <NA> 2024-11-21 18:03:11 0.27787757 secs
71  receiveResult   overhead gather 2024-11-21 18:03:12 1.38486028 secs
81         gather   overhead   <NA> 2024-11-21 18:03:12 1.38736129 secs
12         create   overhead   <NA> 2024-11-21 18:03:11 0.00000000 secs
62         launch   overhead   <NA> 2024-11-21 18:03:11 0.04581904 secs
22      getWorker   overhead launch 2024-11-21 18:03:11 0.06364942 secs
32    eraseWorker   overhead launch 2024-11-21 18:03:12 0.66480875 secs
42 attachPackages   overhead launch 2024-11-21 18:03:12 0.66676950 secs
52  exportGlobals   overhead launch 2024-11-21 18:03:12 0.66790128 secs
92       evaluate evaluation   <NA> 2024-11-21 18:03:12 0.71595550 secs
72  receiveResult   overhead gather 2024-11-21 18:03:13 2.22865129 secs
82         gather   overhead   <NA> 2024-11-21 18:03:13 2.23135686 secs
            duration future_label                          future_uuid
1  3.066087e-02 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
6  3.404808e-02 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
2  4.835129e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
3  7.843971e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
4  9.894371e-05 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
5  3.596544e-03 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
9  8.362854e-01 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
7  3.616810e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
8  6.034374e-04 secs         <NA> 905e17ab-936f-f476-d098-3997ecc81e59
11 1.413345e-02 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
61 1.963520e-01 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
21 2.553463e-04 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
31 1.729188e-01 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
41 7.486343e-05 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
51 7.688761e-03 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
91 1.100822e+00 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
71 4.088879e-04 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
81 7.050037e-04 secs         <NA> 5561ef6e-b345-0933-dbc5-ee57b6ec71c6
12 1.189995e-02 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
62 6.298792e-01 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
22 6.000247e-01 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
32 7.653236e-04 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
42 6.484985e-05 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
52 5.603313e-03 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
92 1.509822e+00 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
72 4.584789e-04 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
82 7.450581e-04 secs         <NA> cf5a175b-09c7-7436-68c1-28821d4d0fb9
                           session_uuid
1  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
6  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
2  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
3  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
4  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
5  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
9  e7e69be0-9cf3-9d9a-58a2-096c8d5cb8a0
7  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
8  09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
11 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
61 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
21 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
31 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
41 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
51 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
91 a9620d45-7f75-3139-683d-61cdd2d7d85f
71 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
81 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
12 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
62 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
22 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
32 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
42 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
52 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
92 e7e69be0-9cf3-9d9a-58a2-096c8d5cb8a0
72 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
82 09122b7f-3a8e-6bf8-ed5a-a3dfd9b09435
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8362854 secs      0.8087954 0.06531239 secs     0.06316547
2    mean 1.1489764 secs      0.7406130 0.30634236 secs     0.19746371
3  median 1.1008220 secs      0.7930615 0.21119046 secs     0.15214724
4     max 1.5098219 secs      0.6764126 0.64252424 secs     0.28785614
5   total 3.4469292 secs      0.7406130 0.91902709 secs     0.19746371
       duration      walltime
1 1.033989 secs 1.033989 secs
2 1.551386 secs 1.551386 secs
3 1.388066 secs 1.388066 secs
4 2.232102 secs 2.232102 secs
5 4.654157 secs 4.654157 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
