
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:04:42.773] plan(): Setting new future strategy stack:
[18:04:42.774] List of future strategies:
[18:04:42.774] 1. sequential:
[18:04:42.774]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:42.774]    - tweaked: FALSE
[18:04:42.774]    - call: future::plan("sequential")
[18:04:42.797] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[18:04:42.826] plan(): Setting new future strategy stack:
[18:04:42.826] List of future strategies:
[18:04:42.826] 1. multisession:
[18:04:42.826]    - args: function (..., workers = 2L, envir = parent.frame())
[18:04:42.826]    - tweaked: TRUE
[18:04:42.826]    - call: plan(multisession, workers = 2L)
[18:04:42.850] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:04:42.850] multisession:
[18:04:42.850] - args: function (..., workers = 2L, envir = parent.frame())
[18:04:42.850] - tweaked: TRUE
[18:04:42.850] - call: plan(multisession, workers = 2L)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[18:04:42.853] getGlobalsAndPackages() ...
[18:04:42.853] Not searching for globals
[18:04:42.854] - globals: [0] <none>
[18:04:42.854] getGlobalsAndPackages() ... DONE
[18:04:42.855] [local output] makeClusterPSOCK() ...
[18:04:42.902] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:04:42.905] [local output] Base port: 11383
[18:04:42.905] [local output] Getting setup options for 2 cluster nodes ...
[18:04:42.905] [local output]  - Node 1 of 2 ...
[18:04:42.906] [local output] localMachine=TRUE => revtunnel=FALSE

[18:04:42.908] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2mjN8i/worker.rank=1.parallelly.parent=324247.4f2971fa3583e.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp2mjN8i/worker.rank=1.parallelly.parent=324247.4f2971fa3583e.pid")'’
[18:04:43.169] - Possible to infer worker's PID: TRUE
[18:04:43.170] [local output] Rscript port: 11383

[18:04:43.170] [local output]  - Node 2 of 2 ...
[18:04:43.171] [local output] localMachine=TRUE => revtunnel=FALSE

[18:04:43.172] [local output] Rscript port: 11383

[18:04:43.173] [local output] Getting setup options for 2 cluster nodes ... done
[18:04:43.173] [local output]  - Parallel setup requested for some PSOCK nodes
[18:04:43.174] [local output] Setting up PSOCK nodes in parallel
[18:04:43.174] List of 36
[18:04:43.174]  $ worker          : chr "localhost"
[18:04:43.174]   ..- attr(*, "localhost")= logi TRUE
[18:04:43.174]  $ master          : chr "localhost"
[18:04:43.174]  $ port            : int 11383
[18:04:43.174]  $ connectTimeout  : num 120
[18:04:43.174]  $ timeout         : num 2592000
[18:04:43.174]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:04:43.174]  $ homogeneous     : logi TRUE
[18:04:43.174]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:04:43.174]  $ rscript_envs    : NULL
[18:04:43.174]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:04:43.174]  $ rscript_startup : NULL
[18:04:43.174]  $ rscript_sh      : chr "sh"
[18:04:43.174]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:04:43.174]  $ methods         : logi TRUE
[18:04:43.174]  $ socketOptions   : chr "no-delay"
[18:04:43.174]  $ useXDR          : logi FALSE
[18:04:43.174]  $ outfile         : chr "/dev/null"
[18:04:43.174]  $ renice          : int NA
[18:04:43.174]  $ rshcmd          : NULL
[18:04:43.174]  $ user            : chr(0) 
[18:04:43.174]  $ revtunnel       : logi FALSE
[18:04:43.174]  $ rshlogfile      : NULL
[18:04:43.174]  $ rshopts         : chr(0) 
[18:04:43.174]  $ rank            : int 1
[18:04:43.174]  $ manual          : logi FALSE
[18:04:43.174]  $ dryrun          : logi FALSE
[18:04:43.174]  $ quiet           : logi FALSE
[18:04:43.174]  $ setup_strategy  : chr "parallel"
[18:04:43.174]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:04:43.174]  $ pidfile         : chr "/tmp/Rtmp2mjN8i/worker.rank=1.parallelly.parent=324247.4f2971fa3583e.pid"
[18:04:43.174]  $ rshcmd_label    : NULL
[18:04:43.174]  $ rsh_call        : NULL
[18:04:43.174]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:04:43.174]  $ localMachine    : logi TRUE
[18:04:43.174]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:04:43.174]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:04:43.174]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:04:43.174]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:04:43.174]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:04:43.174]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:04:43.174]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:04:43.174]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:04:43.174]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:04:43.174]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:04:43.174]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:04:43.174]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:04:43.174]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:04:43.174]  $ arguments       :List of 28
[18:04:43.174]   ..$ worker          : chr "localhost"
[18:04:43.174]   ..$ master          : NULL
[18:04:43.174]   ..$ port            : int 11383
[18:04:43.174]   ..$ connectTimeout  : num 120
[18:04:43.174]   ..$ timeout         : num 2592000
[18:04:43.174]   ..$ rscript         : NULL
[18:04:43.174]   ..$ homogeneous     : NULL
[18:04:43.174]   ..$ rscript_args    : NULL
[18:04:43.174]   ..$ rscript_envs    : NULL
[18:04:43.174]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:04:43.174]   ..$ rscript_startup : NULL
[18:04:43.174]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:04:43.174]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:04:43.174]   ..$ methods         : logi TRUE
[18:04:43.174]   ..$ socketOptions   : chr "no-delay"
[18:04:43.174]   ..$ useXDR          : logi FALSE
[18:04:43.174]   ..$ outfile         : chr "/dev/null"
[18:04:43.174]   ..$ renice          : int NA
[18:04:43.174]   ..$ rshcmd          : NULL
[18:04:43.174]   ..$ user            : NULL
[18:04:43.174]   ..$ revtunnel       : logi NA
[18:04:43.174]   ..$ rshlogfile      : NULL
[18:04:43.174]   ..$ rshopts         : NULL
[18:04:43.174]   ..$ rank            : int 1
[18:04:43.174]   ..$ manual          : logi FALSE
[18:04:43.174]   ..$ dryrun          : logi FALSE
[18:04:43.174]   ..$ quiet           : logi FALSE
[18:04:43.174]   ..$ setup_strategy  : chr "parallel"
[18:04:43.174]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:04:43.212] [local output] System call to launch all workers:
[18:04:43.213] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2mjN8i/worker.rank=1.parallelly.parent=324247.4f2971fa3583e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11383 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:04:43.213] [local output] Starting PSOCK main server
[18:04:43.222] [local output] Workers launched
[18:04:43.222] [local output] Waiting for workers to connect back
[18:04:43.223]  - [local output] 0 workers out of 2 ready
[18:04:43.592]  - [local output] 0 workers out of 2 ready
[18:04:43.594]  - [local output] 1 workers out of 2 ready
[18:04:43.610]  - [local output] 1 workers out of 2 ready
[18:04:43.610]  - [local output] 2 workers out of 2 ready
[18:04:43.611] [local output] Launching of workers completed
[18:04:43.611] [local output] Collecting session information from workers
[18:04:43.612] [local output]  - Worker #1 of 2
[18:04:43.614] [local output]  - Worker #2 of 2
[18:04:43.614] [local output] makeClusterPSOCK() ... done
[18:04:43.633] Packages needed by the future expression (n = 0): <none>
[18:04:43.634] Packages needed by future strategies (n = 0): <none>
[18:04:43.635] {
[18:04:43.635]     {
[18:04:43.635]         {
[18:04:43.635]             ...future.startTime <- base::Sys.time()
[18:04:43.635]             {
[18:04:43.635]                 {
[18:04:43.635]                   {
[18:04:43.635]                     {
[18:04:43.635]                       base::local({
[18:04:43.635]                         has_future <- base::requireNamespace("future", 
[18:04:43.635]                           quietly = TRUE)
[18:04:43.635]                         if (has_future) {
[18:04:43.635]                           ns <- base::getNamespace("future")
[18:04:43.635]                           version <- ns[[".package"]][["version"]]
[18:04:43.635]                           if (is.null(version)) 
[18:04:43.635]                             version <- utils::packageVersion("future")
[18:04:43.635]                         }
[18:04:43.635]                         else {
[18:04:43.635]                           version <- NULL
[18:04:43.635]                         }
[18:04:43.635]                         if (!has_future || version < "1.8.0") {
[18:04:43.635]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:43.635]                             "", base::R.version$version.string), 
[18:04:43.635]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:43.635]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:43.635]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:43.635]                               "release", "version")], collapse = " "), 
[18:04:43.635]                             hostname = base::Sys.info()[["nodename"]])
[18:04:43.635]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:43.635]                             info)
[18:04:43.635]                           info <- base::paste(info, collapse = "; ")
[18:04:43.635]                           if (!has_future) {
[18:04:43.635]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:43.635]                               info)
[18:04:43.635]                           }
[18:04:43.635]                           else {
[18:04:43.635]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:43.635]                               info, version)
[18:04:43.635]                           }
[18:04:43.635]                           base::stop(msg)
[18:04:43.635]                         }
[18:04:43.635]                       })
[18:04:43.635]                     }
[18:04:43.635]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:43.635]                     base::options(mc.cores = 1L)
[18:04:43.635]                   }
[18:04:43.635]                   ...future.strategy.old <- future::plan("list")
[18:04:43.635]                   options(future.plan = NULL)
[18:04:43.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:43.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:43.635]                 }
[18:04:43.635]                 ...future.workdir <- getwd()
[18:04:43.635]             }
[18:04:43.635]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:43.635]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:43.635]         }
[18:04:43.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:43.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:43.635]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:43.635]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[18:04:43.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:43.635]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:43.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:43.635]             base::names(...future.oldOptions))
[18:04:43.635]     }
[18:04:43.635]     if (FALSE) {
[18:04:43.635]     }
[18:04:43.635]     else {
[18:04:43.635]         if (TRUE) {
[18:04:43.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:43.635]                 open = "w")
[18:04:43.635]         }
[18:04:43.635]         else {
[18:04:43.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:43.635]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:43.635]         }
[18:04:43.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:43.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:43.635]             base::sink(type = "output", split = FALSE)
[18:04:43.635]             base::close(...future.stdout)
[18:04:43.635]         }, add = TRUE)
[18:04:43.635]     }
[18:04:43.635]     ...future.frame <- base::sys.nframe()
[18:04:43.635]     ...future.conditions <- base::list()
[18:04:43.635]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:43.635]     if (FALSE) {
[18:04:43.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:43.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:43.635]     }
[18:04:43.635]     ...future.result <- base::tryCatch({
[18:04:43.635]         base::withCallingHandlers({
[18:04:43.635]             ...future.value <- base::withVisible(base::local({
[18:04:43.635]                 ...future.makeSendCondition <- base::local({
[18:04:43.635]                   sendCondition <- NULL
[18:04:43.635]                   function(frame = 1L) {
[18:04:43.635]                     if (is.function(sendCondition)) 
[18:04:43.635]                       return(sendCondition)
[18:04:43.635]                     ns <- getNamespace("parallel")
[18:04:43.635]                     if (exists("sendData", mode = "function", 
[18:04:43.635]                       envir = ns)) {
[18:04:43.635]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:43.635]                         envir = ns)
[18:04:43.635]                       envir <- sys.frame(frame)
[18:04:43.635]                       master <- NULL
[18:04:43.635]                       while (!identical(envir, .GlobalEnv) && 
[18:04:43.635]                         !identical(envir, emptyenv())) {
[18:04:43.635]                         if (exists("master", mode = "list", envir = envir, 
[18:04:43.635]                           inherits = FALSE)) {
[18:04:43.635]                           master <- get("master", mode = "list", 
[18:04:43.635]                             envir = envir, inherits = FALSE)
[18:04:43.635]                           if (inherits(master, c("SOCKnode", 
[18:04:43.635]                             "SOCK0node"))) {
[18:04:43.635]                             sendCondition <<- function(cond) {
[18:04:43.635]                               data <- list(type = "VALUE", value = cond, 
[18:04:43.635]                                 success = TRUE)
[18:04:43.635]                               parallel_sendData(master, data)
[18:04:43.635]                             }
[18:04:43.635]                             return(sendCondition)
[18:04:43.635]                           }
[18:04:43.635]                         }
[18:04:43.635]                         frame <- frame + 1L
[18:04:43.635]                         envir <- sys.frame(frame)
[18:04:43.635]                       }
[18:04:43.635]                     }
[18:04:43.635]                     sendCondition <<- function(cond) NULL
[18:04:43.635]                   }
[18:04:43.635]                 })
[18:04:43.635]                 withCallingHandlers({
[18:04:43.635]                   NA
[18:04:43.635]                 }, immediateCondition = function(cond) {
[18:04:43.635]                   sendCondition <- ...future.makeSendCondition()
[18:04:43.635]                   sendCondition(cond)
[18:04:43.635]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.635]                   {
[18:04:43.635]                     inherits <- base::inherits
[18:04:43.635]                     invokeRestart <- base::invokeRestart
[18:04:43.635]                     is.null <- base::is.null
[18:04:43.635]                     muffled <- FALSE
[18:04:43.635]                     if (inherits(cond, "message")) {
[18:04:43.635]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:43.635]                       if (muffled) 
[18:04:43.635]                         invokeRestart("muffleMessage")
[18:04:43.635]                     }
[18:04:43.635]                     else if (inherits(cond, "warning")) {
[18:04:43.635]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:43.635]                       if (muffled) 
[18:04:43.635]                         invokeRestart("muffleWarning")
[18:04:43.635]                     }
[18:04:43.635]                     else if (inherits(cond, "condition")) {
[18:04:43.635]                       if (!is.null(pattern)) {
[18:04:43.635]                         computeRestarts <- base::computeRestarts
[18:04:43.635]                         grepl <- base::grepl
[18:04:43.635]                         restarts <- computeRestarts(cond)
[18:04:43.635]                         for (restart in restarts) {
[18:04:43.635]                           name <- restart$name
[18:04:43.635]                           if (is.null(name)) 
[18:04:43.635]                             next
[18:04:43.635]                           if (!grepl(pattern, name)) 
[18:04:43.635]                             next
[18:04:43.635]                           invokeRestart(restart)
[18:04:43.635]                           muffled <- TRUE
[18:04:43.635]                           break
[18:04:43.635]                         }
[18:04:43.635]                       }
[18:04:43.635]                     }
[18:04:43.635]                     invisible(muffled)
[18:04:43.635]                   }
[18:04:43.635]                   muffleCondition(cond)
[18:04:43.635]                 })
[18:04:43.635]             }))
[18:04:43.635]             future::FutureResult(value = ...future.value$value, 
[18:04:43.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:43.635]                   ...future.rng), globalenv = if (FALSE) 
[18:04:43.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:43.635]                     ...future.globalenv.names))
[18:04:43.635]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:43.635]         }, condition = base::local({
[18:04:43.635]             c <- base::c
[18:04:43.635]             inherits <- base::inherits
[18:04:43.635]             invokeRestart <- base::invokeRestart
[18:04:43.635]             length <- base::length
[18:04:43.635]             list <- base::list
[18:04:43.635]             seq.int <- base::seq.int
[18:04:43.635]             signalCondition <- base::signalCondition
[18:04:43.635]             sys.calls <- base::sys.calls
[18:04:43.635]             `[[` <- base::`[[`
[18:04:43.635]             `+` <- base::`+`
[18:04:43.635]             `<<-` <- base::`<<-`
[18:04:43.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:43.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:43.635]                   3L)]
[18:04:43.635]             }
[18:04:43.635]             function(cond) {
[18:04:43.635]                 is_error <- inherits(cond, "error")
[18:04:43.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:43.635]                   NULL)
[18:04:43.635]                 if (is_error) {
[18:04:43.635]                   sessionInformation <- function() {
[18:04:43.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:43.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:43.635]                       search = base::search(), system = base::Sys.info())
[18:04:43.635]                   }
[18:04:43.635]                   ...future.conditions[[length(...future.conditions) + 
[18:04:43.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:43.635]                     cond$call), session = sessionInformation(), 
[18:04:43.635]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:43.635]                   signalCondition(cond)
[18:04:43.635]                 }
[18:04:43.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:43.635]                 "immediateCondition"))) {
[18:04:43.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:43.635]                   ...future.conditions[[length(...future.conditions) + 
[18:04:43.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:43.635]                   if (TRUE && !signal) {
[18:04:43.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.635]                     {
[18:04:43.635]                       inherits <- base::inherits
[18:04:43.635]                       invokeRestart <- base::invokeRestart
[18:04:43.635]                       is.null <- base::is.null
[18:04:43.635]                       muffled <- FALSE
[18:04:43.635]                       if (inherits(cond, "message")) {
[18:04:43.635]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:43.635]                         if (muffled) 
[18:04:43.635]                           invokeRestart("muffleMessage")
[18:04:43.635]                       }
[18:04:43.635]                       else if (inherits(cond, "warning")) {
[18:04:43.635]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:43.635]                         if (muffled) 
[18:04:43.635]                           invokeRestart("muffleWarning")
[18:04:43.635]                       }
[18:04:43.635]                       else if (inherits(cond, "condition")) {
[18:04:43.635]                         if (!is.null(pattern)) {
[18:04:43.635]                           computeRestarts <- base::computeRestarts
[18:04:43.635]                           grepl <- base::grepl
[18:04:43.635]                           restarts <- computeRestarts(cond)
[18:04:43.635]                           for (restart in restarts) {
[18:04:43.635]                             name <- restart$name
[18:04:43.635]                             if (is.null(name)) 
[18:04:43.635]                               next
[18:04:43.635]                             if (!grepl(pattern, name)) 
[18:04:43.635]                               next
[18:04:43.635]                             invokeRestart(restart)
[18:04:43.635]                             muffled <- TRUE
[18:04:43.635]                             break
[18:04:43.635]                           }
[18:04:43.635]                         }
[18:04:43.635]                       }
[18:04:43.635]                       invisible(muffled)
[18:04:43.635]                     }
[18:04:43.635]                     muffleCondition(cond, pattern = "^muffle")
[18:04:43.635]                   }
[18:04:43.635]                 }
[18:04:43.635]                 else {
[18:04:43.635]                   if (TRUE) {
[18:04:43.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.635]                     {
[18:04:43.635]                       inherits <- base::inherits
[18:04:43.635]                       invokeRestart <- base::invokeRestart
[18:04:43.635]                       is.null <- base::is.null
[18:04:43.635]                       muffled <- FALSE
[18:04:43.635]                       if (inherits(cond, "message")) {
[18:04:43.635]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:43.635]                         if (muffled) 
[18:04:43.635]                           invokeRestart("muffleMessage")
[18:04:43.635]                       }
[18:04:43.635]                       else if (inherits(cond, "warning")) {
[18:04:43.635]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:43.635]                         if (muffled) 
[18:04:43.635]                           invokeRestart("muffleWarning")
[18:04:43.635]                       }
[18:04:43.635]                       else if (inherits(cond, "condition")) {
[18:04:43.635]                         if (!is.null(pattern)) {
[18:04:43.635]                           computeRestarts <- base::computeRestarts
[18:04:43.635]                           grepl <- base::grepl
[18:04:43.635]                           restarts <- computeRestarts(cond)
[18:04:43.635]                           for (restart in restarts) {
[18:04:43.635]                             name <- restart$name
[18:04:43.635]                             if (is.null(name)) 
[18:04:43.635]                               next
[18:04:43.635]                             if (!grepl(pattern, name)) 
[18:04:43.635]                               next
[18:04:43.635]                             invokeRestart(restart)
[18:04:43.635]                             muffled <- TRUE
[18:04:43.635]                             break
[18:04:43.635]                           }
[18:04:43.635]                         }
[18:04:43.635]                       }
[18:04:43.635]                       invisible(muffled)
[18:04:43.635]                     }
[18:04:43.635]                     muffleCondition(cond, pattern = "^muffle")
[18:04:43.635]                   }
[18:04:43.635]                 }
[18:04:43.635]             }
[18:04:43.635]         }))
[18:04:43.635]     }, error = function(ex) {
[18:04:43.635]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:43.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:43.635]                 ...future.rng), started = ...future.startTime, 
[18:04:43.635]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:43.635]             version = "1.8"), class = "FutureResult")
[18:04:43.635]     }, finally = {
[18:04:43.635]         if (!identical(...future.workdir, getwd())) 
[18:04:43.635]             setwd(...future.workdir)
[18:04:43.635]         {
[18:04:43.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:43.635]                 ...future.oldOptions$nwarnings <- NULL
[18:04:43.635]             }
[18:04:43.635]             base::options(...future.oldOptions)
[18:04:43.635]             if (.Platform$OS.type == "windows") {
[18:04:43.635]                 old_names <- names(...future.oldEnvVars)
[18:04:43.635]                 envs <- base::Sys.getenv()
[18:04:43.635]                 names <- names(envs)
[18:04:43.635]                 common <- intersect(names, old_names)
[18:04:43.635]                 added <- setdiff(names, old_names)
[18:04:43.635]                 removed <- setdiff(old_names, names)
[18:04:43.635]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:43.635]                   envs[common]]
[18:04:43.635]                 NAMES <- toupper(changed)
[18:04:43.635]                 args <- list()
[18:04:43.635]                 for (kk in seq_along(NAMES)) {
[18:04:43.635]                   name <- changed[[kk]]
[18:04:43.635]                   NAME <- NAMES[[kk]]
[18:04:43.635]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.635]                     next
[18:04:43.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:43.635]                 }
[18:04:43.635]                 NAMES <- toupper(added)
[18:04:43.635]                 for (kk in seq_along(NAMES)) {
[18:04:43.635]                   name <- added[[kk]]
[18:04:43.635]                   NAME <- NAMES[[kk]]
[18:04:43.635]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.635]                     next
[18:04:43.635]                   args[[name]] <- ""
[18:04:43.635]                 }
[18:04:43.635]                 NAMES <- toupper(removed)
[18:04:43.635]                 for (kk in seq_along(NAMES)) {
[18:04:43.635]                   name <- removed[[kk]]
[18:04:43.635]                   NAME <- NAMES[[kk]]
[18:04:43.635]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.635]                     next
[18:04:43.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:43.635]                 }
[18:04:43.635]                 if (length(args) > 0) 
[18:04:43.635]                   base::do.call(base::Sys.setenv, args = args)
[18:04:43.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:43.635]             }
[18:04:43.635]             else {
[18:04:43.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:43.635]             }
[18:04:43.635]             {
[18:04:43.635]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:43.635]                   0L) {
[18:04:43.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:43.635]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:43.635]                   base::options(opts)
[18:04:43.635]                 }
[18:04:43.635]                 {
[18:04:43.635]                   {
[18:04:43.635]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:43.635]                     NULL
[18:04:43.635]                   }
[18:04:43.635]                   options(future.plan = NULL)
[18:04:43.635]                   if (is.na(NA_character_)) 
[18:04:43.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:43.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:43.635]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:43.635]                     .init = FALSE)
[18:04:43.635]                 }
[18:04:43.635]             }
[18:04:43.635]         }
[18:04:43.635]     })
[18:04:43.635]     if (TRUE) {
[18:04:43.635]         base::sink(type = "output", split = FALSE)
[18:04:43.635]         if (TRUE) {
[18:04:43.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:43.635]         }
[18:04:43.635]         else {
[18:04:43.635]             ...future.result["stdout"] <- base::list(NULL)
[18:04:43.635]         }
[18:04:43.635]         base::close(...future.stdout)
[18:04:43.635]         ...future.stdout <- NULL
[18:04:43.635]     }
[18:04:43.635]     ...future.result$conditions <- ...future.conditions
[18:04:43.635]     ...future.result$finished <- base::Sys.time()
[18:04:43.635]     ...future.result
[18:04:43.635] }
[18:04:43.733] MultisessionFuture started
[18:04:43.736] result() for ClusterFuture ...
[18:04:43.737] receiveMessageFromWorker() for ClusterFuture ...
[18:04:43.737] - Validating connection of MultisessionFuture
[18:04:43.801] - received message: FutureResult
[18:04:43.801] - Received FutureResult
[18:04:43.808] - Erased future from FutureRegistry
[18:04:43.809] result() for ClusterFuture ...
[18:04:43.809] - result already collected: FutureResult
[18:04:43.809] result() for ClusterFuture ... done
[18:04:43.810] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:43.810] result() for ClusterFuture ... done
[18:04:43.810] result() for ClusterFuture ...
[18:04:43.811] - result already collected: FutureResult
[18:04:43.811] result() for ClusterFuture ... done
[18:04:43.811] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:04:43.812] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[18:04:43.815] getGlobalsAndPackages() ...
[18:04:43.816] Searching for globals...
[18:04:43.824] - globals found: [1] ‘{’
[18:04:43.824] Searching for globals ... DONE
[18:04:43.825] Resolving globals: TRUE
[18:04:43.825] Resolving any globals that are futures ...
[18:04:43.826] - globals: [1] ‘{’
[18:04:43.826] Resolving any globals that are futures ... DONE
[18:04:43.827] 
[18:04:43.828] 
[18:04:43.828] getGlobalsAndPackages() ... DONE
[18:04:43.829] run() for ‘Future’ ...
[18:04:43.829] - state: ‘created’
[18:04:43.830] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:43.855] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:43.856] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:43.856]   - Field: ‘node’
[18:04:43.856]   - Field: ‘label’
[18:04:43.857]   - Field: ‘local’
[18:04:43.857]   - Field: ‘owner’
[18:04:43.857]   - Field: ‘envir’
[18:04:43.857]   - Field: ‘workers’
[18:04:43.857]   - Field: ‘packages’
[18:04:43.858]   - Field: ‘gc’
[18:04:43.858]   - Field: ‘conditions’
[18:04:43.858]   - Field: ‘persistent’
[18:04:43.859]   - Field: ‘expr’
[18:04:43.859]   - Field: ‘uuid’
[18:04:43.859]   - Field: ‘seed’
[18:04:43.860]   - Field: ‘version’
[18:04:43.860]   - Field: ‘result’
[18:04:43.860]   - Field: ‘asynchronous’
[18:04:43.860]   - Field: ‘calls’
[18:04:43.861]   - Field: ‘globals’
[18:04:43.861]   - Field: ‘stdout’
[18:04:43.861]   - Field: ‘earlySignal’
[18:04:43.862]   - Field: ‘lazy’
[18:04:43.862]   - Field: ‘state’
[18:04:43.862] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:43.862] - Launch lazy future ...
[18:04:43.863] Packages needed by the future expression (n = 0): <none>
[18:04:43.863] Packages needed by future strategies (n = 0): <none>
[18:04:43.865] {
[18:04:43.865]     {
[18:04:43.865]         {
[18:04:43.865]             ...future.startTime <- base::Sys.time()
[18:04:43.865]             {
[18:04:43.865]                 {
[18:04:43.865]                   {
[18:04:43.865]                     {
[18:04:43.865]                       base::local({
[18:04:43.865]                         has_future <- base::requireNamespace("future", 
[18:04:43.865]                           quietly = TRUE)
[18:04:43.865]                         if (has_future) {
[18:04:43.865]                           ns <- base::getNamespace("future")
[18:04:43.865]                           version <- ns[[".package"]][["version"]]
[18:04:43.865]                           if (is.null(version)) 
[18:04:43.865]                             version <- utils::packageVersion("future")
[18:04:43.865]                         }
[18:04:43.865]                         else {
[18:04:43.865]                           version <- NULL
[18:04:43.865]                         }
[18:04:43.865]                         if (!has_future || version < "1.8.0") {
[18:04:43.865]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:43.865]                             "", base::R.version$version.string), 
[18:04:43.865]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:43.865]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:43.865]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:43.865]                               "release", "version")], collapse = " "), 
[18:04:43.865]                             hostname = base::Sys.info()[["nodename"]])
[18:04:43.865]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:43.865]                             info)
[18:04:43.865]                           info <- base::paste(info, collapse = "; ")
[18:04:43.865]                           if (!has_future) {
[18:04:43.865]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:43.865]                               info)
[18:04:43.865]                           }
[18:04:43.865]                           else {
[18:04:43.865]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:43.865]                               info, version)
[18:04:43.865]                           }
[18:04:43.865]                           base::stop(msg)
[18:04:43.865]                         }
[18:04:43.865]                       })
[18:04:43.865]                     }
[18:04:43.865]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:43.865]                     base::options(mc.cores = 1L)
[18:04:43.865]                   }
[18:04:43.865]                   ...future.strategy.old <- future::plan("list")
[18:04:43.865]                   options(future.plan = NULL)
[18:04:43.865]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:43.865]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:43.865]                 }
[18:04:43.865]                 ...future.workdir <- getwd()
[18:04:43.865]             }
[18:04:43.865]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:43.865]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:43.865]         }
[18:04:43.865]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:43.865]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:43.865]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:43.865]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[18:04:43.865]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:43.865]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:43.865]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:43.865]             base::names(...future.oldOptions))
[18:04:43.865]     }
[18:04:43.865]     if (FALSE) {
[18:04:43.865]     }
[18:04:43.865]     else {
[18:04:43.865]         if (TRUE) {
[18:04:43.865]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:43.865]                 open = "w")
[18:04:43.865]         }
[18:04:43.865]         else {
[18:04:43.865]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:43.865]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:43.865]         }
[18:04:43.865]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:43.865]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:43.865]             base::sink(type = "output", split = FALSE)
[18:04:43.865]             base::close(...future.stdout)
[18:04:43.865]         }, add = TRUE)
[18:04:43.865]     }
[18:04:43.865]     ...future.frame <- base::sys.nframe()
[18:04:43.865]     ...future.conditions <- base::list()
[18:04:43.865]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:43.865]     if (FALSE) {
[18:04:43.865]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:43.865]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:43.865]     }
[18:04:43.865]     ...future.result <- base::tryCatch({
[18:04:43.865]         base::withCallingHandlers({
[18:04:43.865]             ...future.value <- base::withVisible(base::local({
[18:04:43.865]                 ...future.makeSendCondition <- base::local({
[18:04:43.865]                   sendCondition <- NULL
[18:04:43.865]                   function(frame = 1L) {
[18:04:43.865]                     if (is.function(sendCondition)) 
[18:04:43.865]                       return(sendCondition)
[18:04:43.865]                     ns <- getNamespace("parallel")
[18:04:43.865]                     if (exists("sendData", mode = "function", 
[18:04:43.865]                       envir = ns)) {
[18:04:43.865]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:43.865]                         envir = ns)
[18:04:43.865]                       envir <- sys.frame(frame)
[18:04:43.865]                       master <- NULL
[18:04:43.865]                       while (!identical(envir, .GlobalEnv) && 
[18:04:43.865]                         !identical(envir, emptyenv())) {
[18:04:43.865]                         if (exists("master", mode = "list", envir = envir, 
[18:04:43.865]                           inherits = FALSE)) {
[18:04:43.865]                           master <- get("master", mode = "list", 
[18:04:43.865]                             envir = envir, inherits = FALSE)
[18:04:43.865]                           if (inherits(master, c("SOCKnode", 
[18:04:43.865]                             "SOCK0node"))) {
[18:04:43.865]                             sendCondition <<- function(cond) {
[18:04:43.865]                               data <- list(type = "VALUE", value = cond, 
[18:04:43.865]                                 success = TRUE)
[18:04:43.865]                               parallel_sendData(master, data)
[18:04:43.865]                             }
[18:04:43.865]                             return(sendCondition)
[18:04:43.865]                           }
[18:04:43.865]                         }
[18:04:43.865]                         frame <- frame + 1L
[18:04:43.865]                         envir <- sys.frame(frame)
[18:04:43.865]                       }
[18:04:43.865]                     }
[18:04:43.865]                     sendCondition <<- function(cond) NULL
[18:04:43.865]                   }
[18:04:43.865]                 })
[18:04:43.865]                 withCallingHandlers({
[18:04:43.865]                   {
[18:04:43.865]                     5
[18:04:43.865]                   }
[18:04:43.865]                 }, immediateCondition = function(cond) {
[18:04:43.865]                   sendCondition <- ...future.makeSendCondition()
[18:04:43.865]                   sendCondition(cond)
[18:04:43.865]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.865]                   {
[18:04:43.865]                     inherits <- base::inherits
[18:04:43.865]                     invokeRestart <- base::invokeRestart
[18:04:43.865]                     is.null <- base::is.null
[18:04:43.865]                     muffled <- FALSE
[18:04:43.865]                     if (inherits(cond, "message")) {
[18:04:43.865]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:43.865]                       if (muffled) 
[18:04:43.865]                         invokeRestart("muffleMessage")
[18:04:43.865]                     }
[18:04:43.865]                     else if (inherits(cond, "warning")) {
[18:04:43.865]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:43.865]                       if (muffled) 
[18:04:43.865]                         invokeRestart("muffleWarning")
[18:04:43.865]                     }
[18:04:43.865]                     else if (inherits(cond, "condition")) {
[18:04:43.865]                       if (!is.null(pattern)) {
[18:04:43.865]                         computeRestarts <- base::computeRestarts
[18:04:43.865]                         grepl <- base::grepl
[18:04:43.865]                         restarts <- computeRestarts(cond)
[18:04:43.865]                         for (restart in restarts) {
[18:04:43.865]                           name <- restart$name
[18:04:43.865]                           if (is.null(name)) 
[18:04:43.865]                             next
[18:04:43.865]                           if (!grepl(pattern, name)) 
[18:04:43.865]                             next
[18:04:43.865]                           invokeRestart(restart)
[18:04:43.865]                           muffled <- TRUE
[18:04:43.865]                           break
[18:04:43.865]                         }
[18:04:43.865]                       }
[18:04:43.865]                     }
[18:04:43.865]                     invisible(muffled)
[18:04:43.865]                   }
[18:04:43.865]                   muffleCondition(cond)
[18:04:43.865]                 })
[18:04:43.865]             }))
[18:04:43.865]             future::FutureResult(value = ...future.value$value, 
[18:04:43.865]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:43.865]                   ...future.rng), globalenv = if (FALSE) 
[18:04:43.865]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:43.865]                     ...future.globalenv.names))
[18:04:43.865]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:43.865]         }, condition = base::local({
[18:04:43.865]             c <- base::c
[18:04:43.865]             inherits <- base::inherits
[18:04:43.865]             invokeRestart <- base::invokeRestart
[18:04:43.865]             length <- base::length
[18:04:43.865]             list <- base::list
[18:04:43.865]             seq.int <- base::seq.int
[18:04:43.865]             signalCondition <- base::signalCondition
[18:04:43.865]             sys.calls <- base::sys.calls
[18:04:43.865]             `[[` <- base::`[[`
[18:04:43.865]             `+` <- base::`+`
[18:04:43.865]             `<<-` <- base::`<<-`
[18:04:43.865]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:43.865]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:43.865]                   3L)]
[18:04:43.865]             }
[18:04:43.865]             function(cond) {
[18:04:43.865]                 is_error <- inherits(cond, "error")
[18:04:43.865]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:43.865]                   NULL)
[18:04:43.865]                 if (is_error) {
[18:04:43.865]                   sessionInformation <- function() {
[18:04:43.865]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:43.865]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:43.865]                       search = base::search(), system = base::Sys.info())
[18:04:43.865]                   }
[18:04:43.865]                   ...future.conditions[[length(...future.conditions) + 
[18:04:43.865]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:43.865]                     cond$call), session = sessionInformation(), 
[18:04:43.865]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:43.865]                   signalCondition(cond)
[18:04:43.865]                 }
[18:04:43.865]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:43.865]                 "immediateCondition"))) {
[18:04:43.865]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:43.865]                   ...future.conditions[[length(...future.conditions) + 
[18:04:43.865]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:43.865]                   if (TRUE && !signal) {
[18:04:43.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.865]                     {
[18:04:43.865]                       inherits <- base::inherits
[18:04:43.865]                       invokeRestart <- base::invokeRestart
[18:04:43.865]                       is.null <- base::is.null
[18:04:43.865]                       muffled <- FALSE
[18:04:43.865]                       if (inherits(cond, "message")) {
[18:04:43.865]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:43.865]                         if (muffled) 
[18:04:43.865]                           invokeRestart("muffleMessage")
[18:04:43.865]                       }
[18:04:43.865]                       else if (inherits(cond, "warning")) {
[18:04:43.865]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:43.865]                         if (muffled) 
[18:04:43.865]                           invokeRestart("muffleWarning")
[18:04:43.865]                       }
[18:04:43.865]                       else if (inherits(cond, "condition")) {
[18:04:43.865]                         if (!is.null(pattern)) {
[18:04:43.865]                           computeRestarts <- base::computeRestarts
[18:04:43.865]                           grepl <- base::grepl
[18:04:43.865]                           restarts <- computeRestarts(cond)
[18:04:43.865]                           for (restart in restarts) {
[18:04:43.865]                             name <- restart$name
[18:04:43.865]                             if (is.null(name)) 
[18:04:43.865]                               next
[18:04:43.865]                             if (!grepl(pattern, name)) 
[18:04:43.865]                               next
[18:04:43.865]                             invokeRestart(restart)
[18:04:43.865]                             muffled <- TRUE
[18:04:43.865]                             break
[18:04:43.865]                           }
[18:04:43.865]                         }
[18:04:43.865]                       }
[18:04:43.865]                       invisible(muffled)
[18:04:43.865]                     }
[18:04:43.865]                     muffleCondition(cond, pattern = "^muffle")
[18:04:43.865]                   }
[18:04:43.865]                 }
[18:04:43.865]                 else {
[18:04:43.865]                   if (TRUE) {
[18:04:43.865]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.865]                     {
[18:04:43.865]                       inherits <- base::inherits
[18:04:43.865]                       invokeRestart <- base::invokeRestart
[18:04:43.865]                       is.null <- base::is.null
[18:04:43.865]                       muffled <- FALSE
[18:04:43.865]                       if (inherits(cond, "message")) {
[18:04:43.865]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:43.865]                         if (muffled) 
[18:04:43.865]                           invokeRestart("muffleMessage")
[18:04:43.865]                       }
[18:04:43.865]                       else if (inherits(cond, "warning")) {
[18:04:43.865]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:43.865]                         if (muffled) 
[18:04:43.865]                           invokeRestart("muffleWarning")
[18:04:43.865]                       }
[18:04:43.865]                       else if (inherits(cond, "condition")) {
[18:04:43.865]                         if (!is.null(pattern)) {
[18:04:43.865]                           computeRestarts <- base::computeRestarts
[18:04:43.865]                           grepl <- base::grepl
[18:04:43.865]                           restarts <- computeRestarts(cond)
[18:04:43.865]                           for (restart in restarts) {
[18:04:43.865]                             name <- restart$name
[18:04:43.865]                             if (is.null(name)) 
[18:04:43.865]                               next
[18:04:43.865]                             if (!grepl(pattern, name)) 
[18:04:43.865]                               next
[18:04:43.865]                             invokeRestart(restart)
[18:04:43.865]                             muffled <- TRUE
[18:04:43.865]                             break
[18:04:43.865]                           }
[18:04:43.865]                         }
[18:04:43.865]                       }
[18:04:43.865]                       invisible(muffled)
[18:04:43.865]                     }
[18:04:43.865]                     muffleCondition(cond, pattern = "^muffle")
[18:04:43.865]                   }
[18:04:43.865]                 }
[18:04:43.865]             }
[18:04:43.865]         }))
[18:04:43.865]     }, error = function(ex) {
[18:04:43.865]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:43.865]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:43.865]                 ...future.rng), started = ...future.startTime, 
[18:04:43.865]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:43.865]             version = "1.8"), class = "FutureResult")
[18:04:43.865]     }, finally = {
[18:04:43.865]         if (!identical(...future.workdir, getwd())) 
[18:04:43.865]             setwd(...future.workdir)
[18:04:43.865]         {
[18:04:43.865]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:43.865]                 ...future.oldOptions$nwarnings <- NULL
[18:04:43.865]             }
[18:04:43.865]             base::options(...future.oldOptions)
[18:04:43.865]             if (.Platform$OS.type == "windows") {
[18:04:43.865]                 old_names <- names(...future.oldEnvVars)
[18:04:43.865]                 envs <- base::Sys.getenv()
[18:04:43.865]                 names <- names(envs)
[18:04:43.865]                 common <- intersect(names, old_names)
[18:04:43.865]                 added <- setdiff(names, old_names)
[18:04:43.865]                 removed <- setdiff(old_names, names)
[18:04:43.865]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:43.865]                   envs[common]]
[18:04:43.865]                 NAMES <- toupper(changed)
[18:04:43.865]                 args <- list()
[18:04:43.865]                 for (kk in seq_along(NAMES)) {
[18:04:43.865]                   name <- changed[[kk]]
[18:04:43.865]                   NAME <- NAMES[[kk]]
[18:04:43.865]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.865]                     next
[18:04:43.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:43.865]                 }
[18:04:43.865]                 NAMES <- toupper(added)
[18:04:43.865]                 for (kk in seq_along(NAMES)) {
[18:04:43.865]                   name <- added[[kk]]
[18:04:43.865]                   NAME <- NAMES[[kk]]
[18:04:43.865]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.865]                     next
[18:04:43.865]                   args[[name]] <- ""
[18:04:43.865]                 }
[18:04:43.865]                 NAMES <- toupper(removed)
[18:04:43.865]                 for (kk in seq_along(NAMES)) {
[18:04:43.865]                   name <- removed[[kk]]
[18:04:43.865]                   NAME <- NAMES[[kk]]
[18:04:43.865]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.865]                     next
[18:04:43.865]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:43.865]                 }
[18:04:43.865]                 if (length(args) > 0) 
[18:04:43.865]                   base::do.call(base::Sys.setenv, args = args)
[18:04:43.865]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:43.865]             }
[18:04:43.865]             else {
[18:04:43.865]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:43.865]             }
[18:04:43.865]             {
[18:04:43.865]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:43.865]                   0L) {
[18:04:43.865]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:43.865]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:43.865]                   base::options(opts)
[18:04:43.865]                 }
[18:04:43.865]                 {
[18:04:43.865]                   {
[18:04:43.865]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:43.865]                     NULL
[18:04:43.865]                   }
[18:04:43.865]                   options(future.plan = NULL)
[18:04:43.865]                   if (is.na(NA_character_)) 
[18:04:43.865]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:43.865]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:43.865]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:43.865]                     .init = FALSE)
[18:04:43.865]                 }
[18:04:43.865]             }
[18:04:43.865]         }
[18:04:43.865]     })
[18:04:43.865]     if (TRUE) {
[18:04:43.865]         base::sink(type = "output", split = FALSE)
[18:04:43.865]         if (TRUE) {
[18:04:43.865]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:43.865]         }
[18:04:43.865]         else {
[18:04:43.865]             ...future.result["stdout"] <- base::list(NULL)
[18:04:43.865]         }
[18:04:43.865]         base::close(...future.stdout)
[18:04:43.865]         ...future.stdout <- NULL
[18:04:43.865]     }
[18:04:43.865]     ...future.result$conditions <- ...future.conditions
[18:04:43.865]     ...future.result$finished <- base::Sys.time()
[18:04:43.865]     ...future.result
[18:04:43.865] }
[18:04:43.872] MultisessionFuture started
[18:04:43.872] - Launch lazy future ... done
[18:04:43.872] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[18:04:43.873] getGlobalsAndPackages() ...
[18:04:43.874] Searching for globals...
[18:04:43.875] - globals found: [1] ‘{’
[18:04:43.876] Searching for globals ... DONE
[18:04:43.876] Resolving globals: TRUE
[18:04:43.876] Resolving any globals that are futures ...
[18:04:43.877] - globals: [1] ‘{’
[18:04:43.877] Resolving any globals that are futures ... DONE
[18:04:43.878] 
[18:04:43.878] 
[18:04:43.878] getGlobalsAndPackages() ... DONE
[18:04:43.879] run() for ‘Future’ ...
[18:04:43.879] - state: ‘created’
[18:04:43.879] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:43.902] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:43.902] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:43.902]   - Field: ‘node’
[18:04:43.902]   - Field: ‘label’
[18:04:43.903]   - Field: ‘local’
[18:04:43.903]   - Field: ‘owner’
[18:04:43.904]   - Field: ‘envir’
[18:04:43.904]   - Field: ‘workers’
[18:04:43.904]   - Field: ‘packages’
[18:04:43.904]   - Field: ‘gc’
[18:04:43.904]   - Field: ‘conditions’
[18:04:43.905]   - Field: ‘persistent’
[18:04:43.905]   - Field: ‘expr’
[18:04:43.905]   - Field: ‘uuid’
[18:04:43.905]   - Field: ‘seed’
[18:04:43.906]   - Field: ‘version’
[18:04:43.906]   - Field: ‘result’
[18:04:43.906]   - Field: ‘asynchronous’
[18:04:43.906]   - Field: ‘calls’
[18:04:43.907]   - Field: ‘globals’
[18:04:43.907]   - Field: ‘stdout’
[18:04:43.907]   - Field: ‘earlySignal’
[18:04:43.907]   - Field: ‘lazy’
[18:04:43.908]   - Field: ‘state’
[18:04:43.908] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:43.908] - Launch lazy future ...
[18:04:43.909] Packages needed by the future expression (n = 0): <none>
[18:04:43.909] Packages needed by future strategies (n = 0): <none>
[18:04:43.910] {
[18:04:43.910]     {
[18:04:43.910]         {
[18:04:43.910]             ...future.startTime <- base::Sys.time()
[18:04:43.910]             {
[18:04:43.910]                 {
[18:04:43.910]                   {
[18:04:43.910]                     {
[18:04:43.910]                       base::local({
[18:04:43.910]                         has_future <- base::requireNamespace("future", 
[18:04:43.910]                           quietly = TRUE)
[18:04:43.910]                         if (has_future) {
[18:04:43.910]                           ns <- base::getNamespace("future")
[18:04:43.910]                           version <- ns[[".package"]][["version"]]
[18:04:43.910]                           if (is.null(version)) 
[18:04:43.910]                             version <- utils::packageVersion("future")
[18:04:43.910]                         }
[18:04:43.910]                         else {
[18:04:43.910]                           version <- NULL
[18:04:43.910]                         }
[18:04:43.910]                         if (!has_future || version < "1.8.0") {
[18:04:43.910]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:43.910]                             "", base::R.version$version.string), 
[18:04:43.910]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:43.910]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:43.910]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:43.910]                               "release", "version")], collapse = " "), 
[18:04:43.910]                             hostname = base::Sys.info()[["nodename"]])
[18:04:43.910]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:43.910]                             info)
[18:04:43.910]                           info <- base::paste(info, collapse = "; ")
[18:04:43.910]                           if (!has_future) {
[18:04:43.910]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:43.910]                               info)
[18:04:43.910]                           }
[18:04:43.910]                           else {
[18:04:43.910]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:43.910]                               info, version)
[18:04:43.910]                           }
[18:04:43.910]                           base::stop(msg)
[18:04:43.910]                         }
[18:04:43.910]                       })
[18:04:43.910]                     }
[18:04:43.910]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:43.910]                     base::options(mc.cores = 1L)
[18:04:43.910]                   }
[18:04:43.910]                   ...future.strategy.old <- future::plan("list")
[18:04:43.910]                   options(future.plan = NULL)
[18:04:43.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:43.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:43.910]                 }
[18:04:43.910]                 ...future.workdir <- getwd()
[18:04:43.910]             }
[18:04:43.910]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:43.910]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:43.910]         }
[18:04:43.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:43.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:43.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:43.910]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[18:04:43.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:43.910]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:43.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:43.910]             base::names(...future.oldOptions))
[18:04:43.910]     }
[18:04:43.910]     if (FALSE) {
[18:04:43.910]     }
[18:04:43.910]     else {
[18:04:43.910]         if (TRUE) {
[18:04:43.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:43.910]                 open = "w")
[18:04:43.910]         }
[18:04:43.910]         else {
[18:04:43.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:43.910]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:43.910]         }
[18:04:43.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:43.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:43.910]             base::sink(type = "output", split = FALSE)
[18:04:43.910]             base::close(...future.stdout)
[18:04:43.910]         }, add = TRUE)
[18:04:43.910]     }
[18:04:43.910]     ...future.frame <- base::sys.nframe()
[18:04:43.910]     ...future.conditions <- base::list()
[18:04:43.910]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:43.910]     if (FALSE) {
[18:04:43.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:43.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:43.910]     }
[18:04:43.910]     ...future.result <- base::tryCatch({
[18:04:43.910]         base::withCallingHandlers({
[18:04:43.910]             ...future.value <- base::withVisible(base::local({
[18:04:43.910]                 ...future.makeSendCondition <- base::local({
[18:04:43.910]                   sendCondition <- NULL
[18:04:43.910]                   function(frame = 1L) {
[18:04:43.910]                     if (is.function(sendCondition)) 
[18:04:43.910]                       return(sendCondition)
[18:04:43.910]                     ns <- getNamespace("parallel")
[18:04:43.910]                     if (exists("sendData", mode = "function", 
[18:04:43.910]                       envir = ns)) {
[18:04:43.910]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:43.910]                         envir = ns)
[18:04:43.910]                       envir <- sys.frame(frame)
[18:04:43.910]                       master <- NULL
[18:04:43.910]                       while (!identical(envir, .GlobalEnv) && 
[18:04:43.910]                         !identical(envir, emptyenv())) {
[18:04:43.910]                         if (exists("master", mode = "list", envir = envir, 
[18:04:43.910]                           inherits = FALSE)) {
[18:04:43.910]                           master <- get("master", mode = "list", 
[18:04:43.910]                             envir = envir, inherits = FALSE)
[18:04:43.910]                           if (inherits(master, c("SOCKnode", 
[18:04:43.910]                             "SOCK0node"))) {
[18:04:43.910]                             sendCondition <<- function(cond) {
[18:04:43.910]                               data <- list(type = "VALUE", value = cond, 
[18:04:43.910]                                 success = TRUE)
[18:04:43.910]                               parallel_sendData(master, data)
[18:04:43.910]                             }
[18:04:43.910]                             return(sendCondition)
[18:04:43.910]                           }
[18:04:43.910]                         }
[18:04:43.910]                         frame <- frame + 1L
[18:04:43.910]                         envir <- sys.frame(frame)
[18:04:43.910]                       }
[18:04:43.910]                     }
[18:04:43.910]                     sendCondition <<- function(cond) NULL
[18:04:43.910]                   }
[18:04:43.910]                 })
[18:04:43.910]                 withCallingHandlers({
[18:04:43.910]                   {
[18:04:43.910]                     "a"
[18:04:43.910]                   }
[18:04:43.910]                 }, immediateCondition = function(cond) {
[18:04:43.910]                   sendCondition <- ...future.makeSendCondition()
[18:04:43.910]                   sendCondition(cond)
[18:04:43.910]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.910]                   {
[18:04:43.910]                     inherits <- base::inherits
[18:04:43.910]                     invokeRestart <- base::invokeRestart
[18:04:43.910]                     is.null <- base::is.null
[18:04:43.910]                     muffled <- FALSE
[18:04:43.910]                     if (inherits(cond, "message")) {
[18:04:43.910]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:43.910]                       if (muffled) 
[18:04:43.910]                         invokeRestart("muffleMessage")
[18:04:43.910]                     }
[18:04:43.910]                     else if (inherits(cond, "warning")) {
[18:04:43.910]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:43.910]                       if (muffled) 
[18:04:43.910]                         invokeRestart("muffleWarning")
[18:04:43.910]                     }
[18:04:43.910]                     else if (inherits(cond, "condition")) {
[18:04:43.910]                       if (!is.null(pattern)) {
[18:04:43.910]                         computeRestarts <- base::computeRestarts
[18:04:43.910]                         grepl <- base::grepl
[18:04:43.910]                         restarts <- computeRestarts(cond)
[18:04:43.910]                         for (restart in restarts) {
[18:04:43.910]                           name <- restart$name
[18:04:43.910]                           if (is.null(name)) 
[18:04:43.910]                             next
[18:04:43.910]                           if (!grepl(pattern, name)) 
[18:04:43.910]                             next
[18:04:43.910]                           invokeRestart(restart)
[18:04:43.910]                           muffled <- TRUE
[18:04:43.910]                           break
[18:04:43.910]                         }
[18:04:43.910]                       }
[18:04:43.910]                     }
[18:04:43.910]                     invisible(muffled)
[18:04:43.910]                   }
[18:04:43.910]                   muffleCondition(cond)
[18:04:43.910]                 })
[18:04:43.910]             }))
[18:04:43.910]             future::FutureResult(value = ...future.value$value, 
[18:04:43.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:43.910]                   ...future.rng), globalenv = if (FALSE) 
[18:04:43.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:43.910]                     ...future.globalenv.names))
[18:04:43.910]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:43.910]         }, condition = base::local({
[18:04:43.910]             c <- base::c
[18:04:43.910]             inherits <- base::inherits
[18:04:43.910]             invokeRestart <- base::invokeRestart
[18:04:43.910]             length <- base::length
[18:04:43.910]             list <- base::list
[18:04:43.910]             seq.int <- base::seq.int
[18:04:43.910]             signalCondition <- base::signalCondition
[18:04:43.910]             sys.calls <- base::sys.calls
[18:04:43.910]             `[[` <- base::`[[`
[18:04:43.910]             `+` <- base::`+`
[18:04:43.910]             `<<-` <- base::`<<-`
[18:04:43.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:43.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:43.910]                   3L)]
[18:04:43.910]             }
[18:04:43.910]             function(cond) {
[18:04:43.910]                 is_error <- inherits(cond, "error")
[18:04:43.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:43.910]                   NULL)
[18:04:43.910]                 if (is_error) {
[18:04:43.910]                   sessionInformation <- function() {
[18:04:43.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:43.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:43.910]                       search = base::search(), system = base::Sys.info())
[18:04:43.910]                   }
[18:04:43.910]                   ...future.conditions[[length(...future.conditions) + 
[18:04:43.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:43.910]                     cond$call), session = sessionInformation(), 
[18:04:43.910]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:43.910]                   signalCondition(cond)
[18:04:43.910]                 }
[18:04:43.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:43.910]                 "immediateCondition"))) {
[18:04:43.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:43.910]                   ...future.conditions[[length(...future.conditions) + 
[18:04:43.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:43.910]                   if (TRUE && !signal) {
[18:04:43.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.910]                     {
[18:04:43.910]                       inherits <- base::inherits
[18:04:43.910]                       invokeRestart <- base::invokeRestart
[18:04:43.910]                       is.null <- base::is.null
[18:04:43.910]                       muffled <- FALSE
[18:04:43.910]                       if (inherits(cond, "message")) {
[18:04:43.910]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:43.910]                         if (muffled) 
[18:04:43.910]                           invokeRestart("muffleMessage")
[18:04:43.910]                       }
[18:04:43.910]                       else if (inherits(cond, "warning")) {
[18:04:43.910]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:43.910]                         if (muffled) 
[18:04:43.910]                           invokeRestart("muffleWarning")
[18:04:43.910]                       }
[18:04:43.910]                       else if (inherits(cond, "condition")) {
[18:04:43.910]                         if (!is.null(pattern)) {
[18:04:43.910]                           computeRestarts <- base::computeRestarts
[18:04:43.910]                           grepl <- base::grepl
[18:04:43.910]                           restarts <- computeRestarts(cond)
[18:04:43.910]                           for (restart in restarts) {
[18:04:43.910]                             name <- restart$name
[18:04:43.910]                             if (is.null(name)) 
[18:04:43.910]                               next
[18:04:43.910]                             if (!grepl(pattern, name)) 
[18:04:43.910]                               next
[18:04:43.910]                             invokeRestart(restart)
[18:04:43.910]                             muffled <- TRUE
[18:04:43.910]                             break
[18:04:43.910]                           }
[18:04:43.910]                         }
[18:04:43.910]                       }
[18:04:43.910]                       invisible(muffled)
[18:04:43.910]                     }
[18:04:43.910]                     muffleCondition(cond, pattern = "^muffle")
[18:04:43.910]                   }
[18:04:43.910]                 }
[18:04:43.910]                 else {
[18:04:43.910]                   if (TRUE) {
[18:04:43.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:43.910]                     {
[18:04:43.910]                       inherits <- base::inherits
[18:04:43.910]                       invokeRestart <- base::invokeRestart
[18:04:43.910]                       is.null <- base::is.null
[18:04:43.910]                       muffled <- FALSE
[18:04:43.910]                       if (inherits(cond, "message")) {
[18:04:43.910]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:43.910]                         if (muffled) 
[18:04:43.910]                           invokeRestart("muffleMessage")
[18:04:43.910]                       }
[18:04:43.910]                       else if (inherits(cond, "warning")) {
[18:04:43.910]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:43.910]                         if (muffled) 
[18:04:43.910]                           invokeRestart("muffleWarning")
[18:04:43.910]                       }
[18:04:43.910]                       else if (inherits(cond, "condition")) {
[18:04:43.910]                         if (!is.null(pattern)) {
[18:04:43.910]                           computeRestarts <- base::computeRestarts
[18:04:43.910]                           grepl <- base::grepl
[18:04:43.910]                           restarts <- computeRestarts(cond)
[18:04:43.910]                           for (restart in restarts) {
[18:04:43.910]                             name <- restart$name
[18:04:43.910]                             if (is.null(name)) 
[18:04:43.910]                               next
[18:04:43.910]                             if (!grepl(pattern, name)) 
[18:04:43.910]                               next
[18:04:43.910]                             invokeRestart(restart)
[18:04:43.910]                             muffled <- TRUE
[18:04:43.910]                             break
[18:04:43.910]                           }
[18:04:43.910]                         }
[18:04:43.910]                       }
[18:04:43.910]                       invisible(muffled)
[18:04:43.910]                     }
[18:04:43.910]                     muffleCondition(cond, pattern = "^muffle")
[18:04:43.910]                   }
[18:04:43.910]                 }
[18:04:43.910]             }
[18:04:43.910]         }))
[18:04:43.910]     }, error = function(ex) {
[18:04:43.910]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:43.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:43.910]                 ...future.rng), started = ...future.startTime, 
[18:04:43.910]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:43.910]             version = "1.8"), class = "FutureResult")
[18:04:43.910]     }, finally = {
[18:04:43.910]         if (!identical(...future.workdir, getwd())) 
[18:04:43.910]             setwd(...future.workdir)
[18:04:43.910]         {
[18:04:43.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:43.910]                 ...future.oldOptions$nwarnings <- NULL
[18:04:43.910]             }
[18:04:43.910]             base::options(...future.oldOptions)
[18:04:43.910]             if (.Platform$OS.type == "windows") {
[18:04:43.910]                 old_names <- names(...future.oldEnvVars)
[18:04:43.910]                 envs <- base::Sys.getenv()
[18:04:43.910]                 names <- names(envs)
[18:04:43.910]                 common <- intersect(names, old_names)
[18:04:43.910]                 added <- setdiff(names, old_names)
[18:04:43.910]                 removed <- setdiff(old_names, names)
[18:04:43.910]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:43.910]                   envs[common]]
[18:04:43.910]                 NAMES <- toupper(changed)
[18:04:43.910]                 args <- list()
[18:04:43.910]                 for (kk in seq_along(NAMES)) {
[18:04:43.910]                   name <- changed[[kk]]
[18:04:43.910]                   NAME <- NAMES[[kk]]
[18:04:43.910]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.910]                     next
[18:04:43.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:43.910]                 }
[18:04:43.910]                 NAMES <- toupper(added)
[18:04:43.910]                 for (kk in seq_along(NAMES)) {
[18:04:43.910]                   name <- added[[kk]]
[18:04:43.910]                   NAME <- NAMES[[kk]]
[18:04:43.910]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.910]                     next
[18:04:43.910]                   args[[name]] <- ""
[18:04:43.910]                 }
[18:04:43.910]                 NAMES <- toupper(removed)
[18:04:43.910]                 for (kk in seq_along(NAMES)) {
[18:04:43.910]                   name <- removed[[kk]]
[18:04:43.910]                   NAME <- NAMES[[kk]]
[18:04:43.910]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:43.910]                     next
[18:04:43.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:43.910]                 }
[18:04:43.910]                 if (length(args) > 0) 
[18:04:43.910]                   base::do.call(base::Sys.setenv, args = args)
[18:04:43.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:43.910]             }
[18:04:43.910]             else {
[18:04:43.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:43.910]             }
[18:04:43.910]             {
[18:04:43.910]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:43.910]                   0L) {
[18:04:43.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:43.910]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:43.910]                   base::options(opts)
[18:04:43.910]                 }
[18:04:43.910]                 {
[18:04:43.910]                   {
[18:04:43.910]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:43.910]                     NULL
[18:04:43.910]                   }
[18:04:43.910]                   options(future.plan = NULL)
[18:04:43.910]                   if (is.na(NA_character_)) 
[18:04:43.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:43.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:43.910]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:43.910]                     .init = FALSE)
[18:04:43.910]                 }
[18:04:43.910]             }
[18:04:43.910]         }
[18:04:43.910]     })
[18:04:43.910]     if (TRUE) {
[18:04:43.910]         base::sink(type = "output", split = FALSE)
[18:04:43.910]         if (TRUE) {
[18:04:43.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:43.910]         }
[18:04:43.910]         else {
[18:04:43.910]             ...future.result["stdout"] <- base::list(NULL)
[18:04:43.910]         }
[18:04:43.910]         base::close(...future.stdout)
[18:04:43.910]         ...future.stdout <- NULL
[18:04:43.910]     }
[18:04:43.910]     ...future.result$conditions <- ...future.conditions
[18:04:43.910]     ...future.result$finished <- base::Sys.time()
[18:04:43.910]     ...future.result
[18:04:43.910] }
[18:04:44.009] MultisessionFuture started
[18:04:44.010] - Launch lazy future ... done
[18:04:44.010] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[18:04:44.011] result() for ClusterFuture ...
[18:04:44.011] receiveMessageFromWorker() for ClusterFuture ...
[18:04:44.011] - Validating connection of MultisessionFuture
[18:04:44.076] - received message: FutureResult
[18:04:44.077] - Received FutureResult
[18:04:44.077] - Erased future from FutureRegistry
[18:04:44.077] result() for ClusterFuture ...
[18:04:44.078] - result already collected: FutureResult
[18:04:44.078] result() for ClusterFuture ... done
[18:04:44.078] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:44.078] result() for ClusterFuture ... done
[18:04:44.079] result() for ClusterFuture ...
[18:04:44.083] - result already collected: FutureResult
[18:04:44.084] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[18:04:44.085] getGlobalsAndPackages() ...
[18:04:44.085] Searching for globals...
[18:04:44.094] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[18:04:44.095] Searching for globals ... DONE
[18:04:44.095] Resolving globals: TRUE
[18:04:44.095] Resolving any globals that are futures ...
[18:04:44.096] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[18:04:44.096] Resolving any globals that are futures ... DONE
[18:04:44.097] Resolving futures part of globals (recursively) ...
[18:04:44.098] resolve() on list ...
[18:04:44.098]  recursive: 99
[18:04:44.099]  length: 2
[18:04:44.099]  elements: ‘env’, ‘b’
[18:04:44.100] resolve() on environment ...
[18:04:44.100]  recursive: 98
[18:04:44.101]  elements: [1] ‘.future_a’, ‘a’
[18:04:44.103] receiveMessageFromWorker() for ClusterFuture ...
[18:04:44.103] - Validating connection of MultisessionFuture
[18:04:44.103] - received message: FutureResult
[18:04:44.104] - Received FutureResult
[18:04:44.104] - Erased future from FutureRegistry
[18:04:44.104] result() for ClusterFuture ...
[18:04:44.104] - result already collected: FutureResult
[18:04:44.105] result() for ClusterFuture ... done
[18:04:44.105] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:44.105] Future #1
[18:04:44.106] result() for ClusterFuture ...
[18:04:44.106] - result already collected: FutureResult
[18:04:44.106] result() for ClusterFuture ... done
[18:04:44.106] result() for ClusterFuture ...
[18:04:44.106] - result already collected: FutureResult
[18:04:44.107] result() for ClusterFuture ... done
[18:04:44.107] A MultisessionFuture was resolved
[18:04:44.107]  length: 0 (resolved future 1)
[18:04:44.108] resolve() on environment ... DONE
[18:04:44.108]  length: 1 (resolved future 1)
[18:04:44.108]  length: 0 (resolved future 2)
[18:04:44.108] resolve() on list ... DONE
[18:04:44.109] - globals: [2] ‘env’, ‘b’
[18:04:44.109] Resolving futures part of globals (recursively) ... DONE
[18:04:44.111] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[18:04:44.112] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[18:04:44.112] - globals: [2] ‘env’, ‘b’
[18:04:44.112] 
[18:04:44.113] getGlobalsAndPackages() ... DONE
[18:04:44.113] run() for ‘Future’ ...
[18:04:44.113] - state: ‘created’
[18:04:44.114] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:44.134] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:44.134] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:44.135]   - Field: ‘node’
[18:04:44.135]   - Field: ‘label’
[18:04:44.135]   - Field: ‘local’
[18:04:44.135]   - Field: ‘owner’
[18:04:44.136]   - Field: ‘envir’
[18:04:44.136]   - Field: ‘workers’
[18:04:44.136]   - Field: ‘packages’
[18:04:44.137]   - Field: ‘gc’
[18:04:44.137]   - Field: ‘conditions’
[18:04:44.137]   - Field: ‘persistent’
[18:04:44.137]   - Field: ‘expr’
[18:04:44.138]   - Field: ‘uuid’
[18:04:44.138]   - Field: ‘seed’
[18:04:44.138]   - Field: ‘version’
[18:04:44.138]   - Field: ‘result’
[18:04:44.139]   - Field: ‘asynchronous’
[18:04:44.139]   - Field: ‘calls’
[18:04:44.139]   - Field: ‘globals’
[18:04:44.139]   - Field: ‘stdout’
[18:04:44.139]   - Field: ‘earlySignal’
[18:04:44.140]   - Field: ‘lazy’
[18:04:44.140]   - Field: ‘state’
[18:04:44.140] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:44.140] - Launch lazy future ...
[18:04:44.141] Packages needed by the future expression (n = 0): <none>
[18:04:44.141] Packages needed by future strategies (n = 0): <none>
[18:04:44.142] {
[18:04:44.142]     {
[18:04:44.142]         {
[18:04:44.142]             ...future.startTime <- base::Sys.time()
[18:04:44.142]             {
[18:04:44.142]                 {
[18:04:44.142]                   {
[18:04:44.142]                     {
[18:04:44.142]                       base::local({
[18:04:44.142]                         has_future <- base::requireNamespace("future", 
[18:04:44.142]                           quietly = TRUE)
[18:04:44.142]                         if (has_future) {
[18:04:44.142]                           ns <- base::getNamespace("future")
[18:04:44.142]                           version <- ns[[".package"]][["version"]]
[18:04:44.142]                           if (is.null(version)) 
[18:04:44.142]                             version <- utils::packageVersion("future")
[18:04:44.142]                         }
[18:04:44.142]                         else {
[18:04:44.142]                           version <- NULL
[18:04:44.142]                         }
[18:04:44.142]                         if (!has_future || version < "1.8.0") {
[18:04:44.142]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:44.142]                             "", base::R.version$version.string), 
[18:04:44.142]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:44.142]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:44.142]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:44.142]                               "release", "version")], collapse = " "), 
[18:04:44.142]                             hostname = base::Sys.info()[["nodename"]])
[18:04:44.142]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:44.142]                             info)
[18:04:44.142]                           info <- base::paste(info, collapse = "; ")
[18:04:44.142]                           if (!has_future) {
[18:04:44.142]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:44.142]                               info)
[18:04:44.142]                           }
[18:04:44.142]                           else {
[18:04:44.142]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:44.142]                               info, version)
[18:04:44.142]                           }
[18:04:44.142]                           base::stop(msg)
[18:04:44.142]                         }
[18:04:44.142]                       })
[18:04:44.142]                     }
[18:04:44.142]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:44.142]                     base::options(mc.cores = 1L)
[18:04:44.142]                   }
[18:04:44.142]                   ...future.strategy.old <- future::plan("list")
[18:04:44.142]                   options(future.plan = NULL)
[18:04:44.142]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.142]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:44.142]                 }
[18:04:44.142]                 ...future.workdir <- getwd()
[18:04:44.142]             }
[18:04:44.142]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:44.142]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:44.142]         }
[18:04:44.142]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:44.142]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:44.142]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:44.142]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[18:04:44.142]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:44.142]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:44.142]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:44.142]             base::names(...future.oldOptions))
[18:04:44.142]     }
[18:04:44.142]     if (FALSE) {
[18:04:44.142]     }
[18:04:44.142]     else {
[18:04:44.142]         if (TRUE) {
[18:04:44.142]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:44.142]                 open = "w")
[18:04:44.142]         }
[18:04:44.142]         else {
[18:04:44.142]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:44.142]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:44.142]         }
[18:04:44.142]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:44.142]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:44.142]             base::sink(type = "output", split = FALSE)
[18:04:44.142]             base::close(...future.stdout)
[18:04:44.142]         }, add = TRUE)
[18:04:44.142]     }
[18:04:44.142]     ...future.frame <- base::sys.nframe()
[18:04:44.142]     ...future.conditions <- base::list()
[18:04:44.142]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:44.142]     if (FALSE) {
[18:04:44.142]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:44.142]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:44.142]     }
[18:04:44.142]     ...future.result <- base::tryCatch({
[18:04:44.142]         base::withCallingHandlers({
[18:04:44.142]             ...future.value <- base::withVisible(base::local({
[18:04:44.142]                 ...future.makeSendCondition <- base::local({
[18:04:44.142]                   sendCondition <- NULL
[18:04:44.142]                   function(frame = 1L) {
[18:04:44.142]                     if (is.function(sendCondition)) 
[18:04:44.142]                       return(sendCondition)
[18:04:44.142]                     ns <- getNamespace("parallel")
[18:04:44.142]                     if (exists("sendData", mode = "function", 
[18:04:44.142]                       envir = ns)) {
[18:04:44.142]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:44.142]                         envir = ns)
[18:04:44.142]                       envir <- sys.frame(frame)
[18:04:44.142]                       master <- NULL
[18:04:44.142]                       while (!identical(envir, .GlobalEnv) && 
[18:04:44.142]                         !identical(envir, emptyenv())) {
[18:04:44.142]                         if (exists("master", mode = "list", envir = envir, 
[18:04:44.142]                           inherits = FALSE)) {
[18:04:44.142]                           master <- get("master", mode = "list", 
[18:04:44.142]                             envir = envir, inherits = FALSE)
[18:04:44.142]                           if (inherits(master, c("SOCKnode", 
[18:04:44.142]                             "SOCK0node"))) {
[18:04:44.142]                             sendCondition <<- function(cond) {
[18:04:44.142]                               data <- list(type = "VALUE", value = cond, 
[18:04:44.142]                                 success = TRUE)
[18:04:44.142]                               parallel_sendData(master, data)
[18:04:44.142]                             }
[18:04:44.142]                             return(sendCondition)
[18:04:44.142]                           }
[18:04:44.142]                         }
[18:04:44.142]                         frame <- frame + 1L
[18:04:44.142]                         envir <- sys.frame(frame)
[18:04:44.142]                       }
[18:04:44.142]                     }
[18:04:44.142]                     sendCondition <<- function(cond) NULL
[18:04:44.142]                   }
[18:04:44.142]                 })
[18:04:44.142]                 withCallingHandlers({
[18:04:44.142]                   {
[18:04:44.142]                     env[[b]]
[18:04:44.142]                   }
[18:04:44.142]                 }, immediateCondition = function(cond) {
[18:04:44.142]                   sendCondition <- ...future.makeSendCondition()
[18:04:44.142]                   sendCondition(cond)
[18:04:44.142]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.142]                   {
[18:04:44.142]                     inherits <- base::inherits
[18:04:44.142]                     invokeRestart <- base::invokeRestart
[18:04:44.142]                     is.null <- base::is.null
[18:04:44.142]                     muffled <- FALSE
[18:04:44.142]                     if (inherits(cond, "message")) {
[18:04:44.142]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:44.142]                       if (muffled) 
[18:04:44.142]                         invokeRestart("muffleMessage")
[18:04:44.142]                     }
[18:04:44.142]                     else if (inherits(cond, "warning")) {
[18:04:44.142]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:44.142]                       if (muffled) 
[18:04:44.142]                         invokeRestart("muffleWarning")
[18:04:44.142]                     }
[18:04:44.142]                     else if (inherits(cond, "condition")) {
[18:04:44.142]                       if (!is.null(pattern)) {
[18:04:44.142]                         computeRestarts <- base::computeRestarts
[18:04:44.142]                         grepl <- base::grepl
[18:04:44.142]                         restarts <- computeRestarts(cond)
[18:04:44.142]                         for (restart in restarts) {
[18:04:44.142]                           name <- restart$name
[18:04:44.142]                           if (is.null(name)) 
[18:04:44.142]                             next
[18:04:44.142]                           if (!grepl(pattern, name)) 
[18:04:44.142]                             next
[18:04:44.142]                           invokeRestart(restart)
[18:04:44.142]                           muffled <- TRUE
[18:04:44.142]                           break
[18:04:44.142]                         }
[18:04:44.142]                       }
[18:04:44.142]                     }
[18:04:44.142]                     invisible(muffled)
[18:04:44.142]                   }
[18:04:44.142]                   muffleCondition(cond)
[18:04:44.142]                 })
[18:04:44.142]             }))
[18:04:44.142]             future::FutureResult(value = ...future.value$value, 
[18:04:44.142]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.142]                   ...future.rng), globalenv = if (FALSE) 
[18:04:44.142]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:44.142]                     ...future.globalenv.names))
[18:04:44.142]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:44.142]         }, condition = base::local({
[18:04:44.142]             c <- base::c
[18:04:44.142]             inherits <- base::inherits
[18:04:44.142]             invokeRestart <- base::invokeRestart
[18:04:44.142]             length <- base::length
[18:04:44.142]             list <- base::list
[18:04:44.142]             seq.int <- base::seq.int
[18:04:44.142]             signalCondition <- base::signalCondition
[18:04:44.142]             sys.calls <- base::sys.calls
[18:04:44.142]             `[[` <- base::`[[`
[18:04:44.142]             `+` <- base::`+`
[18:04:44.142]             `<<-` <- base::`<<-`
[18:04:44.142]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:44.142]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:44.142]                   3L)]
[18:04:44.142]             }
[18:04:44.142]             function(cond) {
[18:04:44.142]                 is_error <- inherits(cond, "error")
[18:04:44.142]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:44.142]                   NULL)
[18:04:44.142]                 if (is_error) {
[18:04:44.142]                   sessionInformation <- function() {
[18:04:44.142]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:44.142]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:44.142]                       search = base::search(), system = base::Sys.info())
[18:04:44.142]                   }
[18:04:44.142]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.142]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:44.142]                     cond$call), session = sessionInformation(), 
[18:04:44.142]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:44.142]                   signalCondition(cond)
[18:04:44.142]                 }
[18:04:44.142]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:44.142]                 "immediateCondition"))) {
[18:04:44.142]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:44.142]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.142]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:44.142]                   if (TRUE && !signal) {
[18:04:44.142]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.142]                     {
[18:04:44.142]                       inherits <- base::inherits
[18:04:44.142]                       invokeRestart <- base::invokeRestart
[18:04:44.142]                       is.null <- base::is.null
[18:04:44.142]                       muffled <- FALSE
[18:04:44.142]                       if (inherits(cond, "message")) {
[18:04:44.142]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.142]                         if (muffled) 
[18:04:44.142]                           invokeRestart("muffleMessage")
[18:04:44.142]                       }
[18:04:44.142]                       else if (inherits(cond, "warning")) {
[18:04:44.142]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.142]                         if (muffled) 
[18:04:44.142]                           invokeRestart("muffleWarning")
[18:04:44.142]                       }
[18:04:44.142]                       else if (inherits(cond, "condition")) {
[18:04:44.142]                         if (!is.null(pattern)) {
[18:04:44.142]                           computeRestarts <- base::computeRestarts
[18:04:44.142]                           grepl <- base::grepl
[18:04:44.142]                           restarts <- computeRestarts(cond)
[18:04:44.142]                           for (restart in restarts) {
[18:04:44.142]                             name <- restart$name
[18:04:44.142]                             if (is.null(name)) 
[18:04:44.142]                               next
[18:04:44.142]                             if (!grepl(pattern, name)) 
[18:04:44.142]                               next
[18:04:44.142]                             invokeRestart(restart)
[18:04:44.142]                             muffled <- TRUE
[18:04:44.142]                             break
[18:04:44.142]                           }
[18:04:44.142]                         }
[18:04:44.142]                       }
[18:04:44.142]                       invisible(muffled)
[18:04:44.142]                     }
[18:04:44.142]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.142]                   }
[18:04:44.142]                 }
[18:04:44.142]                 else {
[18:04:44.142]                   if (TRUE) {
[18:04:44.142]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.142]                     {
[18:04:44.142]                       inherits <- base::inherits
[18:04:44.142]                       invokeRestart <- base::invokeRestart
[18:04:44.142]                       is.null <- base::is.null
[18:04:44.142]                       muffled <- FALSE
[18:04:44.142]                       if (inherits(cond, "message")) {
[18:04:44.142]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.142]                         if (muffled) 
[18:04:44.142]                           invokeRestart("muffleMessage")
[18:04:44.142]                       }
[18:04:44.142]                       else if (inherits(cond, "warning")) {
[18:04:44.142]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.142]                         if (muffled) 
[18:04:44.142]                           invokeRestart("muffleWarning")
[18:04:44.142]                       }
[18:04:44.142]                       else if (inherits(cond, "condition")) {
[18:04:44.142]                         if (!is.null(pattern)) {
[18:04:44.142]                           computeRestarts <- base::computeRestarts
[18:04:44.142]                           grepl <- base::grepl
[18:04:44.142]                           restarts <- computeRestarts(cond)
[18:04:44.142]                           for (restart in restarts) {
[18:04:44.142]                             name <- restart$name
[18:04:44.142]                             if (is.null(name)) 
[18:04:44.142]                               next
[18:04:44.142]                             if (!grepl(pattern, name)) 
[18:04:44.142]                               next
[18:04:44.142]                             invokeRestart(restart)
[18:04:44.142]                             muffled <- TRUE
[18:04:44.142]                             break
[18:04:44.142]                           }
[18:04:44.142]                         }
[18:04:44.142]                       }
[18:04:44.142]                       invisible(muffled)
[18:04:44.142]                     }
[18:04:44.142]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.142]                   }
[18:04:44.142]                 }
[18:04:44.142]             }
[18:04:44.142]         }))
[18:04:44.142]     }, error = function(ex) {
[18:04:44.142]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:44.142]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.142]                 ...future.rng), started = ...future.startTime, 
[18:04:44.142]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:44.142]             version = "1.8"), class = "FutureResult")
[18:04:44.142]     }, finally = {
[18:04:44.142]         if (!identical(...future.workdir, getwd())) 
[18:04:44.142]             setwd(...future.workdir)
[18:04:44.142]         {
[18:04:44.142]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:44.142]                 ...future.oldOptions$nwarnings <- NULL
[18:04:44.142]             }
[18:04:44.142]             base::options(...future.oldOptions)
[18:04:44.142]             if (.Platform$OS.type == "windows") {
[18:04:44.142]                 old_names <- names(...future.oldEnvVars)
[18:04:44.142]                 envs <- base::Sys.getenv()
[18:04:44.142]                 names <- names(envs)
[18:04:44.142]                 common <- intersect(names, old_names)
[18:04:44.142]                 added <- setdiff(names, old_names)
[18:04:44.142]                 removed <- setdiff(old_names, names)
[18:04:44.142]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:44.142]                   envs[common]]
[18:04:44.142]                 NAMES <- toupper(changed)
[18:04:44.142]                 args <- list()
[18:04:44.142]                 for (kk in seq_along(NAMES)) {
[18:04:44.142]                   name <- changed[[kk]]
[18:04:44.142]                   NAME <- NAMES[[kk]]
[18:04:44.142]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.142]                     next
[18:04:44.142]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.142]                 }
[18:04:44.142]                 NAMES <- toupper(added)
[18:04:44.142]                 for (kk in seq_along(NAMES)) {
[18:04:44.142]                   name <- added[[kk]]
[18:04:44.142]                   NAME <- NAMES[[kk]]
[18:04:44.142]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.142]                     next
[18:04:44.142]                   args[[name]] <- ""
[18:04:44.142]                 }
[18:04:44.142]                 NAMES <- toupper(removed)
[18:04:44.142]                 for (kk in seq_along(NAMES)) {
[18:04:44.142]                   name <- removed[[kk]]
[18:04:44.142]                   NAME <- NAMES[[kk]]
[18:04:44.142]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.142]                     next
[18:04:44.142]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.142]                 }
[18:04:44.142]                 if (length(args) > 0) 
[18:04:44.142]                   base::do.call(base::Sys.setenv, args = args)
[18:04:44.142]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:44.142]             }
[18:04:44.142]             else {
[18:04:44.142]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:44.142]             }
[18:04:44.142]             {
[18:04:44.142]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:44.142]                   0L) {
[18:04:44.142]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:44.142]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:44.142]                   base::options(opts)
[18:04:44.142]                 }
[18:04:44.142]                 {
[18:04:44.142]                   {
[18:04:44.142]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:44.142]                     NULL
[18:04:44.142]                   }
[18:04:44.142]                   options(future.plan = NULL)
[18:04:44.142]                   if (is.na(NA_character_)) 
[18:04:44.142]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.142]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:44.142]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:44.142]                     .init = FALSE)
[18:04:44.142]                 }
[18:04:44.142]             }
[18:04:44.142]         }
[18:04:44.142]     })
[18:04:44.142]     if (TRUE) {
[18:04:44.142]         base::sink(type = "output", split = FALSE)
[18:04:44.142]         if (TRUE) {
[18:04:44.142]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:44.142]         }
[18:04:44.142]         else {
[18:04:44.142]             ...future.result["stdout"] <- base::list(NULL)
[18:04:44.142]         }
[18:04:44.142]         base::close(...future.stdout)
[18:04:44.142]         ...future.stdout <- NULL
[18:04:44.142]     }
[18:04:44.142]     ...future.result$conditions <- ...future.conditions
[18:04:44.142]     ...future.result$finished <- base::Sys.time()
[18:04:44.142]     ...future.result
[18:04:44.142] }
[18:04:44.148] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[18:04:44.149] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[18:04:44.168] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[18:04:44.169] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[18:04:44.170] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[18:04:44.170] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[18:04:44.171] MultisessionFuture started
[18:04:44.171] - Launch lazy future ... done
[18:04:44.171] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[18:04:44.172] result() for ClusterFuture ...
[18:04:44.172] receiveMessageFromWorker() for ClusterFuture ...
[18:04:44.172] - Validating connection of MultisessionFuture
[18:04:44.217] - received message: FutureResult
[18:04:44.218] - Received FutureResult
[18:04:44.218] - Erased future from FutureRegistry
[18:04:44.218] result() for ClusterFuture ...
[18:04:44.218] - result already collected: FutureResult
[18:04:44.219] result() for ClusterFuture ... done
[18:04:44.219] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:44.219] result() for ClusterFuture ... done
[18:04:44.219] result() for ClusterFuture ...
[18:04:44.220] - result already collected: FutureResult
[18:04:44.220] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[18:04:44.220] result() for ClusterFuture ...
[18:04:44.221] - result already collected: FutureResult
[18:04:44.221] result() for ClusterFuture ... done
[18:04:44.221] result() for ClusterFuture ...
[18:04:44.221] - result already collected: FutureResult
[18:04:44.222] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[18:04:44.224] getGlobalsAndPackages() ...
[18:04:44.224] Searching for globals...
[18:04:44.226] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[18:04:44.227] Searching for globals ... DONE
[18:04:44.227] Resolving globals: TRUE
[18:04:44.227] Resolving any globals that are futures ...
[18:04:44.227] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[18:04:44.228] Resolving any globals that are futures ... DONE
[18:04:44.229] Resolving futures part of globals (recursively) ...
[18:04:44.229] resolve() on list ...
[18:04:44.229]  recursive: 99
[18:04:44.230]  length: 2
[18:04:44.230]  elements: ‘env’, ‘b’
[18:04:44.230] resolve() on environment ...
[18:04:44.230]  recursive: 98
[18:04:44.231]  elements: [1] ‘a’
[18:04:44.232]  length: 0 (resolved future 1)
[18:04:44.232] resolve() on environment ... DONE
[18:04:44.232]  length: 1 (resolved future 1)
[18:04:44.232]  length: 0 (resolved future 2)
[18:04:44.232] resolve() on list ... DONE
[18:04:44.233] - globals: [2] ‘env’, ‘b’
[18:04:44.233] Resolving futures part of globals (recursively) ... DONE
[18:04:44.233] The total size of the 2 globals is 168 bytes (168 bytes)
[18:04:44.234] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[18:04:44.235] - globals: [2] ‘env’, ‘b’
[18:04:44.235] 
[18:04:44.235] getGlobalsAndPackages() ... DONE
[18:04:44.236] run() for ‘Future’ ...
[18:04:44.236] - state: ‘created’
[18:04:44.236] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:44.257] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:44.257] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:44.258]   - Field: ‘node’
[18:04:44.258]   - Field: ‘label’
[18:04:44.258]   - Field: ‘local’
[18:04:44.258]   - Field: ‘owner’
[18:04:44.259]   - Field: ‘envir’
[18:04:44.259]   - Field: ‘workers’
[18:04:44.259]   - Field: ‘packages’
[18:04:44.259]   - Field: ‘gc’
[18:04:44.259]   - Field: ‘conditions’
[18:04:44.260]   - Field: ‘persistent’
[18:04:44.260]   - Field: ‘expr’
[18:04:44.260]   - Field: ‘uuid’
[18:04:44.260]   - Field: ‘seed’
[18:04:44.261]   - Field: ‘version’
[18:04:44.261]   - Field: ‘result’
[18:04:44.261]   - Field: ‘asynchronous’
[18:04:44.261]   - Field: ‘calls’
[18:04:44.261]   - Field: ‘globals’
[18:04:44.262]   - Field: ‘stdout’
[18:04:44.262]   - Field: ‘earlySignal’
[18:04:44.262]   - Field: ‘lazy’
[18:04:44.262]   - Field: ‘state’
[18:04:44.263] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:44.263] - Launch lazy future ...
[18:04:44.263] Packages needed by the future expression (n = 0): <none>
[18:04:44.264] Packages needed by future strategies (n = 0): <none>
[18:04:44.265] {
[18:04:44.265]     {
[18:04:44.265]         {
[18:04:44.265]             ...future.startTime <- base::Sys.time()
[18:04:44.265]             {
[18:04:44.265]                 {
[18:04:44.265]                   {
[18:04:44.265]                     {
[18:04:44.265]                       base::local({
[18:04:44.265]                         has_future <- base::requireNamespace("future", 
[18:04:44.265]                           quietly = TRUE)
[18:04:44.265]                         if (has_future) {
[18:04:44.265]                           ns <- base::getNamespace("future")
[18:04:44.265]                           version <- ns[[".package"]][["version"]]
[18:04:44.265]                           if (is.null(version)) 
[18:04:44.265]                             version <- utils::packageVersion("future")
[18:04:44.265]                         }
[18:04:44.265]                         else {
[18:04:44.265]                           version <- NULL
[18:04:44.265]                         }
[18:04:44.265]                         if (!has_future || version < "1.8.0") {
[18:04:44.265]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:44.265]                             "", base::R.version$version.string), 
[18:04:44.265]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:44.265]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:44.265]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:44.265]                               "release", "version")], collapse = " "), 
[18:04:44.265]                             hostname = base::Sys.info()[["nodename"]])
[18:04:44.265]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:44.265]                             info)
[18:04:44.265]                           info <- base::paste(info, collapse = "; ")
[18:04:44.265]                           if (!has_future) {
[18:04:44.265]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:44.265]                               info)
[18:04:44.265]                           }
[18:04:44.265]                           else {
[18:04:44.265]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:44.265]                               info, version)
[18:04:44.265]                           }
[18:04:44.265]                           base::stop(msg)
[18:04:44.265]                         }
[18:04:44.265]                       })
[18:04:44.265]                     }
[18:04:44.265]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:44.265]                     base::options(mc.cores = 1L)
[18:04:44.265]                   }
[18:04:44.265]                   ...future.strategy.old <- future::plan("list")
[18:04:44.265]                   options(future.plan = NULL)
[18:04:44.265]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.265]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:44.265]                 }
[18:04:44.265]                 ...future.workdir <- getwd()
[18:04:44.265]             }
[18:04:44.265]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:44.265]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:44.265]         }
[18:04:44.265]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:44.265]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:44.265]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:44.265]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[18:04:44.265]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:44.265]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:44.265]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:44.265]             base::names(...future.oldOptions))
[18:04:44.265]     }
[18:04:44.265]     if (FALSE) {
[18:04:44.265]     }
[18:04:44.265]     else {
[18:04:44.265]         if (TRUE) {
[18:04:44.265]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:44.265]                 open = "w")
[18:04:44.265]         }
[18:04:44.265]         else {
[18:04:44.265]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:44.265]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:44.265]         }
[18:04:44.265]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:44.265]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:44.265]             base::sink(type = "output", split = FALSE)
[18:04:44.265]             base::close(...future.stdout)
[18:04:44.265]         }, add = TRUE)
[18:04:44.265]     }
[18:04:44.265]     ...future.frame <- base::sys.nframe()
[18:04:44.265]     ...future.conditions <- base::list()
[18:04:44.265]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:44.265]     if (FALSE) {
[18:04:44.265]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:44.265]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:44.265]     }
[18:04:44.265]     ...future.result <- base::tryCatch({
[18:04:44.265]         base::withCallingHandlers({
[18:04:44.265]             ...future.value <- base::withVisible(base::local({
[18:04:44.265]                 ...future.makeSendCondition <- base::local({
[18:04:44.265]                   sendCondition <- NULL
[18:04:44.265]                   function(frame = 1L) {
[18:04:44.265]                     if (is.function(sendCondition)) 
[18:04:44.265]                       return(sendCondition)
[18:04:44.265]                     ns <- getNamespace("parallel")
[18:04:44.265]                     if (exists("sendData", mode = "function", 
[18:04:44.265]                       envir = ns)) {
[18:04:44.265]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:44.265]                         envir = ns)
[18:04:44.265]                       envir <- sys.frame(frame)
[18:04:44.265]                       master <- NULL
[18:04:44.265]                       while (!identical(envir, .GlobalEnv) && 
[18:04:44.265]                         !identical(envir, emptyenv())) {
[18:04:44.265]                         if (exists("master", mode = "list", envir = envir, 
[18:04:44.265]                           inherits = FALSE)) {
[18:04:44.265]                           master <- get("master", mode = "list", 
[18:04:44.265]                             envir = envir, inherits = FALSE)
[18:04:44.265]                           if (inherits(master, c("SOCKnode", 
[18:04:44.265]                             "SOCK0node"))) {
[18:04:44.265]                             sendCondition <<- function(cond) {
[18:04:44.265]                               data <- list(type = "VALUE", value = cond, 
[18:04:44.265]                                 success = TRUE)
[18:04:44.265]                               parallel_sendData(master, data)
[18:04:44.265]                             }
[18:04:44.265]                             return(sendCondition)
[18:04:44.265]                           }
[18:04:44.265]                         }
[18:04:44.265]                         frame <- frame + 1L
[18:04:44.265]                         envir <- sys.frame(frame)
[18:04:44.265]                       }
[18:04:44.265]                     }
[18:04:44.265]                     sendCondition <<- function(cond) NULL
[18:04:44.265]                   }
[18:04:44.265]                 })
[18:04:44.265]                 withCallingHandlers({
[18:04:44.265]                   {
[18:04:44.265]                     env[[b]]
[18:04:44.265]                   }
[18:04:44.265]                 }, immediateCondition = function(cond) {
[18:04:44.265]                   sendCondition <- ...future.makeSendCondition()
[18:04:44.265]                   sendCondition(cond)
[18:04:44.265]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.265]                   {
[18:04:44.265]                     inherits <- base::inherits
[18:04:44.265]                     invokeRestart <- base::invokeRestart
[18:04:44.265]                     is.null <- base::is.null
[18:04:44.265]                     muffled <- FALSE
[18:04:44.265]                     if (inherits(cond, "message")) {
[18:04:44.265]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:44.265]                       if (muffled) 
[18:04:44.265]                         invokeRestart("muffleMessage")
[18:04:44.265]                     }
[18:04:44.265]                     else if (inherits(cond, "warning")) {
[18:04:44.265]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:44.265]                       if (muffled) 
[18:04:44.265]                         invokeRestart("muffleWarning")
[18:04:44.265]                     }
[18:04:44.265]                     else if (inherits(cond, "condition")) {
[18:04:44.265]                       if (!is.null(pattern)) {
[18:04:44.265]                         computeRestarts <- base::computeRestarts
[18:04:44.265]                         grepl <- base::grepl
[18:04:44.265]                         restarts <- computeRestarts(cond)
[18:04:44.265]                         for (restart in restarts) {
[18:04:44.265]                           name <- restart$name
[18:04:44.265]                           if (is.null(name)) 
[18:04:44.265]                             next
[18:04:44.265]                           if (!grepl(pattern, name)) 
[18:04:44.265]                             next
[18:04:44.265]                           invokeRestart(restart)
[18:04:44.265]                           muffled <- TRUE
[18:04:44.265]                           break
[18:04:44.265]                         }
[18:04:44.265]                       }
[18:04:44.265]                     }
[18:04:44.265]                     invisible(muffled)
[18:04:44.265]                   }
[18:04:44.265]                   muffleCondition(cond)
[18:04:44.265]                 })
[18:04:44.265]             }))
[18:04:44.265]             future::FutureResult(value = ...future.value$value, 
[18:04:44.265]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.265]                   ...future.rng), globalenv = if (FALSE) 
[18:04:44.265]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:44.265]                     ...future.globalenv.names))
[18:04:44.265]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:44.265]         }, condition = base::local({
[18:04:44.265]             c <- base::c
[18:04:44.265]             inherits <- base::inherits
[18:04:44.265]             invokeRestart <- base::invokeRestart
[18:04:44.265]             length <- base::length
[18:04:44.265]             list <- base::list
[18:04:44.265]             seq.int <- base::seq.int
[18:04:44.265]             signalCondition <- base::signalCondition
[18:04:44.265]             sys.calls <- base::sys.calls
[18:04:44.265]             `[[` <- base::`[[`
[18:04:44.265]             `+` <- base::`+`
[18:04:44.265]             `<<-` <- base::`<<-`
[18:04:44.265]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:44.265]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:44.265]                   3L)]
[18:04:44.265]             }
[18:04:44.265]             function(cond) {
[18:04:44.265]                 is_error <- inherits(cond, "error")
[18:04:44.265]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:44.265]                   NULL)
[18:04:44.265]                 if (is_error) {
[18:04:44.265]                   sessionInformation <- function() {
[18:04:44.265]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:44.265]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:44.265]                       search = base::search(), system = base::Sys.info())
[18:04:44.265]                   }
[18:04:44.265]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.265]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:44.265]                     cond$call), session = sessionInformation(), 
[18:04:44.265]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:44.265]                   signalCondition(cond)
[18:04:44.265]                 }
[18:04:44.265]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:44.265]                 "immediateCondition"))) {
[18:04:44.265]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:44.265]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.265]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:44.265]                   if (TRUE && !signal) {
[18:04:44.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.265]                     {
[18:04:44.265]                       inherits <- base::inherits
[18:04:44.265]                       invokeRestart <- base::invokeRestart
[18:04:44.265]                       is.null <- base::is.null
[18:04:44.265]                       muffled <- FALSE
[18:04:44.265]                       if (inherits(cond, "message")) {
[18:04:44.265]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.265]                         if (muffled) 
[18:04:44.265]                           invokeRestart("muffleMessage")
[18:04:44.265]                       }
[18:04:44.265]                       else if (inherits(cond, "warning")) {
[18:04:44.265]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.265]                         if (muffled) 
[18:04:44.265]                           invokeRestart("muffleWarning")
[18:04:44.265]                       }
[18:04:44.265]                       else if (inherits(cond, "condition")) {
[18:04:44.265]                         if (!is.null(pattern)) {
[18:04:44.265]                           computeRestarts <- base::computeRestarts
[18:04:44.265]                           grepl <- base::grepl
[18:04:44.265]                           restarts <- computeRestarts(cond)
[18:04:44.265]                           for (restart in restarts) {
[18:04:44.265]                             name <- restart$name
[18:04:44.265]                             if (is.null(name)) 
[18:04:44.265]                               next
[18:04:44.265]                             if (!grepl(pattern, name)) 
[18:04:44.265]                               next
[18:04:44.265]                             invokeRestart(restart)
[18:04:44.265]                             muffled <- TRUE
[18:04:44.265]                             break
[18:04:44.265]                           }
[18:04:44.265]                         }
[18:04:44.265]                       }
[18:04:44.265]                       invisible(muffled)
[18:04:44.265]                     }
[18:04:44.265]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.265]                   }
[18:04:44.265]                 }
[18:04:44.265]                 else {
[18:04:44.265]                   if (TRUE) {
[18:04:44.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.265]                     {
[18:04:44.265]                       inherits <- base::inherits
[18:04:44.265]                       invokeRestart <- base::invokeRestart
[18:04:44.265]                       is.null <- base::is.null
[18:04:44.265]                       muffled <- FALSE
[18:04:44.265]                       if (inherits(cond, "message")) {
[18:04:44.265]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.265]                         if (muffled) 
[18:04:44.265]                           invokeRestart("muffleMessage")
[18:04:44.265]                       }
[18:04:44.265]                       else if (inherits(cond, "warning")) {
[18:04:44.265]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.265]                         if (muffled) 
[18:04:44.265]                           invokeRestart("muffleWarning")
[18:04:44.265]                       }
[18:04:44.265]                       else if (inherits(cond, "condition")) {
[18:04:44.265]                         if (!is.null(pattern)) {
[18:04:44.265]                           computeRestarts <- base::computeRestarts
[18:04:44.265]                           grepl <- base::grepl
[18:04:44.265]                           restarts <- computeRestarts(cond)
[18:04:44.265]                           for (restart in restarts) {
[18:04:44.265]                             name <- restart$name
[18:04:44.265]                             if (is.null(name)) 
[18:04:44.265]                               next
[18:04:44.265]                             if (!grepl(pattern, name)) 
[18:04:44.265]                               next
[18:04:44.265]                             invokeRestart(restart)
[18:04:44.265]                             muffled <- TRUE
[18:04:44.265]                             break
[18:04:44.265]                           }
[18:04:44.265]                         }
[18:04:44.265]                       }
[18:04:44.265]                       invisible(muffled)
[18:04:44.265]                     }
[18:04:44.265]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.265]                   }
[18:04:44.265]                 }
[18:04:44.265]             }
[18:04:44.265]         }))
[18:04:44.265]     }, error = function(ex) {
[18:04:44.265]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:44.265]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.265]                 ...future.rng), started = ...future.startTime, 
[18:04:44.265]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:44.265]             version = "1.8"), class = "FutureResult")
[18:04:44.265]     }, finally = {
[18:04:44.265]         if (!identical(...future.workdir, getwd())) 
[18:04:44.265]             setwd(...future.workdir)
[18:04:44.265]         {
[18:04:44.265]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:44.265]                 ...future.oldOptions$nwarnings <- NULL
[18:04:44.265]             }
[18:04:44.265]             base::options(...future.oldOptions)
[18:04:44.265]             if (.Platform$OS.type == "windows") {
[18:04:44.265]                 old_names <- names(...future.oldEnvVars)
[18:04:44.265]                 envs <- base::Sys.getenv()
[18:04:44.265]                 names <- names(envs)
[18:04:44.265]                 common <- intersect(names, old_names)
[18:04:44.265]                 added <- setdiff(names, old_names)
[18:04:44.265]                 removed <- setdiff(old_names, names)
[18:04:44.265]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:44.265]                   envs[common]]
[18:04:44.265]                 NAMES <- toupper(changed)
[18:04:44.265]                 args <- list()
[18:04:44.265]                 for (kk in seq_along(NAMES)) {
[18:04:44.265]                   name <- changed[[kk]]
[18:04:44.265]                   NAME <- NAMES[[kk]]
[18:04:44.265]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.265]                     next
[18:04:44.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.265]                 }
[18:04:44.265]                 NAMES <- toupper(added)
[18:04:44.265]                 for (kk in seq_along(NAMES)) {
[18:04:44.265]                   name <- added[[kk]]
[18:04:44.265]                   NAME <- NAMES[[kk]]
[18:04:44.265]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.265]                     next
[18:04:44.265]                   args[[name]] <- ""
[18:04:44.265]                 }
[18:04:44.265]                 NAMES <- toupper(removed)
[18:04:44.265]                 for (kk in seq_along(NAMES)) {
[18:04:44.265]                   name <- removed[[kk]]
[18:04:44.265]                   NAME <- NAMES[[kk]]
[18:04:44.265]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.265]                     next
[18:04:44.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.265]                 }
[18:04:44.265]                 if (length(args) > 0) 
[18:04:44.265]                   base::do.call(base::Sys.setenv, args = args)
[18:04:44.265]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:44.265]             }
[18:04:44.265]             else {
[18:04:44.265]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:44.265]             }
[18:04:44.265]             {
[18:04:44.265]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:44.265]                   0L) {
[18:04:44.265]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:44.265]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:44.265]                   base::options(opts)
[18:04:44.265]                 }
[18:04:44.265]                 {
[18:04:44.265]                   {
[18:04:44.265]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:44.265]                     NULL
[18:04:44.265]                   }
[18:04:44.265]                   options(future.plan = NULL)
[18:04:44.265]                   if (is.na(NA_character_)) 
[18:04:44.265]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.265]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:44.265]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:44.265]                     .init = FALSE)
[18:04:44.265]                 }
[18:04:44.265]             }
[18:04:44.265]         }
[18:04:44.265]     })
[18:04:44.265]     if (TRUE) {
[18:04:44.265]         base::sink(type = "output", split = FALSE)
[18:04:44.265]         if (TRUE) {
[18:04:44.265]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:44.265]         }
[18:04:44.265]         else {
[18:04:44.265]             ...future.result["stdout"] <- base::list(NULL)
[18:04:44.265]         }
[18:04:44.265]         base::close(...future.stdout)
[18:04:44.265]         ...future.stdout <- NULL
[18:04:44.265]     }
[18:04:44.265]     ...future.result$conditions <- ...future.conditions
[18:04:44.265]     ...future.result$finished <- base::Sys.time()
[18:04:44.265]     ...future.result
[18:04:44.265] }
[18:04:44.270] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[18:04:44.270] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[18:04:44.271] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[18:04:44.272] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[18:04:44.272] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[18:04:44.273] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[18:04:44.274] MultisessionFuture started
[18:04:44.274] - Launch lazy future ... done
[18:04:44.274] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[18:04:44.275] result() for ClusterFuture ...
[18:04:44.275] receiveMessageFromWorker() for ClusterFuture ...
[18:04:44.275] - Validating connection of MultisessionFuture
[18:04:44.318] - received message: FutureResult
[18:04:44.318] - Received FutureResult
[18:04:44.318] - Erased future from FutureRegistry
[18:04:44.319] result() for ClusterFuture ...
[18:04:44.319] - result already collected: FutureResult
[18:04:44.319] result() for ClusterFuture ... done
[18:04:44.319] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:44.319] result() for ClusterFuture ... done
[18:04:44.320] result() for ClusterFuture ...
[18:04:44.320] - result already collected: FutureResult
[18:04:44.320] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[18:04:44.322] plan(): Setting new future strategy stack:
[18:04:44.322] List of future strategies:
[18:04:44.322] 1. FutureStrategy:
[18:04:44.322]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.322]    - tweaked: FALSE
[18:04:44.322]    - call: future::plan(oplan)
[18:04:44.324] plan(): nbrOfWorkers() = 1
> 
