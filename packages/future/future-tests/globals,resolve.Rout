
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:59.685] plan(): Setting new future strategy stack:
[17:46:59.686] List of future strategies:
[17:46:59.686] 1. sequential:
[17:46:59.686]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:59.686]    - tweaked: FALSE
[17:46:59.686]    - call: future::plan("sequential")
[17:46:59.698] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> oopts <- c(oopts, options(future.globals.resolve = TRUE))
> setTimeLimit(cpu = 10, elapsed = 10, transient = TRUE)
> 
> message("*** Tricky use cases related to globals (part 2) ...")
*** Tricky use cases related to globals (part 2) ...
> 
> ## Allow for two background processes
> plan(multisession, workers = 2L)
[17:46:59.718] plan(): Setting new future strategy stack:
[17:46:59.718] List of future strategies:
[17:46:59.718] 1. multisession:
[17:46:59.718]    - args: function (..., workers = 2L, envir = parent.frame())
[17:46:59.718]    - tweaked: TRUE
[17:46:59.718]    - call: plan(multisession, workers = 2L)
[17:46:59.729] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:46:59.730] multisession:
[17:46:59.730] - args: function (..., workers = 2L, envir = parent.frame())
[17:46:59.730] - tweaked: TRUE
[17:46:59.730] - call: plan(multisession, workers = 2L)
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:46:59.731] getGlobalsAndPackages() ...
[17:46:59.731] Not searching for globals
[17:46:59.732] - globals: [0] <none>
[17:46:59.732] getGlobalsAndPackages() ... DONE
[17:46:59.733] [local output] makeClusterPSOCK() ...
[17:46:59.769] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:59.770] [local output] Base port: 11446
[17:46:59.770] [local output] Getting setup options for 2 cluster nodes ...
[17:46:59.770] [local output]  - Node 1 of 2 ...
[17:46:59.770] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:59.771] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphgyyZf/worker.rank=1.parallelly.parent=43862.ab5674b9e61b.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmphgyyZf/worker.rank=1.parallelly.parent=43862.ab5674b9e61b.pid")'’
[17:46:59.958] - Possible to infer worker's PID: TRUE
[17:46:59.958] [local output] Rscript port: 11446

[17:46:59.959] [local output]  - Node 2 of 2 ...
[17:46:59.959] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:59.960] [local output] Rscript port: 11446

[17:46:59.960] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:59.960] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:59.961] [local output] Setting up PSOCK nodes in parallel
[17:46:59.961] List of 36
[17:46:59.961]  $ worker          : chr "localhost"
[17:46:59.961]   ..- attr(*, "localhost")= logi TRUE
[17:46:59.961]  $ master          : chr "localhost"
[17:46:59.961]  $ port            : int 11446
[17:46:59.961]  $ connectTimeout  : num 120
[17:46:59.961]  $ timeout         : num 2592000
[17:46:59.961]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:59.961]  $ homogeneous     : logi TRUE
[17:46:59.961]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:59.961]  $ rscript_envs    : NULL
[17:46:59.961]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:59.961]  $ rscript_startup : NULL
[17:46:59.961]  $ rscript_sh      : chr "sh"
[17:46:59.961]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:59.961]  $ methods         : logi TRUE
[17:46:59.961]  $ socketOptions   : chr "no-delay"
[17:46:59.961]  $ useXDR          : logi FALSE
[17:46:59.961]  $ outfile         : chr "/dev/null"
[17:46:59.961]  $ renice          : int NA
[17:46:59.961]  $ rshcmd          : NULL
[17:46:59.961]  $ user            : chr(0) 
[17:46:59.961]  $ revtunnel       : logi FALSE
[17:46:59.961]  $ rshlogfile      : NULL
[17:46:59.961]  $ rshopts         : chr(0) 
[17:46:59.961]  $ rank            : int 1
[17:46:59.961]  $ manual          : logi FALSE
[17:46:59.961]  $ dryrun          : logi FALSE
[17:46:59.961]  $ quiet           : logi FALSE
[17:46:59.961]  $ setup_strategy  : chr "parallel"
[17:46:59.961]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:59.961]  $ pidfile         : chr "/tmp/RtmphgyyZf/worker.rank=1.parallelly.parent=43862.ab5674b9e61b.pid"
[17:46:59.961]  $ rshcmd_label    : NULL
[17:46:59.961]  $ rsh_call        : NULL
[17:46:59.961]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:59.961]  $ localMachine    : logi TRUE
[17:46:59.961]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:59.961]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:59.961]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:59.961]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:59.961]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:59.961]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:59.961]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:59.961]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:59.961]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:59.961]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:59.961]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:59.961]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:59.961]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:59.961]  $ arguments       :List of 28
[17:46:59.961]   ..$ worker          : chr "localhost"
[17:46:59.961]   ..$ master          : NULL
[17:46:59.961]   ..$ port            : int 11446
[17:46:59.961]   ..$ connectTimeout  : num 120
[17:46:59.961]   ..$ timeout         : num 2592000
[17:46:59.961]   ..$ rscript         : NULL
[17:46:59.961]   ..$ homogeneous     : NULL
[17:46:59.961]   ..$ rscript_args    : NULL
[17:46:59.961]   ..$ rscript_envs    : NULL
[17:46:59.961]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:59.961]   ..$ rscript_startup : NULL
[17:46:59.961]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:59.961]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:59.961]   ..$ methods         : logi TRUE
[17:46:59.961]   ..$ socketOptions   : chr "no-delay"
[17:46:59.961]   ..$ useXDR          : logi FALSE
[17:46:59.961]   ..$ outfile         : chr "/dev/null"
[17:46:59.961]   ..$ renice          : int NA
[17:46:59.961]   ..$ rshcmd          : NULL
[17:46:59.961]   ..$ user            : NULL
[17:46:59.961]   ..$ revtunnel       : logi NA
[17:46:59.961]   ..$ rshlogfile      : NULL
[17:46:59.961]   ..$ rshopts         : NULL
[17:46:59.961]   ..$ rank            : int 1
[17:46:59.961]   ..$ manual          : logi FALSE
[17:46:59.961]   ..$ dryrun          : logi FALSE
[17:46:59.961]   ..$ quiet           : logi FALSE
[17:46:59.961]   ..$ setup_strategy  : chr "parallel"
[17:46:59.961]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:59.979] [local output] System call to launch all workers:
[17:46:59.979] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphgyyZf/worker.rank=1.parallelly.parent=43862.ab5674b9e61b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11446 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:59.979] [local output] Starting PSOCK main server
[17:46:59.985] [local output] Workers launched
[17:46:59.985] [local output] Waiting for workers to connect back
[17:46:59.985]  - [local output] 0 workers out of 2 ready
[17:47:00.229]  - [local output] 0 workers out of 2 ready
[17:47:00.230]  - [local output] 1 workers out of 2 ready
[17:47:00.233]  - [local output] 1 workers out of 2 ready
[17:47:00.234]  - [local output] 2 workers out of 2 ready
[17:47:00.234] [local output] Launching of workers completed
[17:47:00.234] [local output] Collecting session information from workers
[17:47:00.235] [local output]  - Worker #1 of 2
[17:47:00.235] [local output]  - Worker #2 of 2
[17:47:00.236] [local output] makeClusterPSOCK() ... done
[17:47:00.248] Packages needed by the future expression (n = 0): <none>
[17:47:00.249] Packages needed by future strategies (n = 0): <none>
[17:47:00.249] {
[17:47:00.249]     {
[17:47:00.249]         {
[17:47:00.249]             ...future.startTime <- base::Sys.time()
[17:47:00.249]             {
[17:47:00.249]                 {
[17:47:00.249]                   {
[17:47:00.249]                     {
[17:47:00.249]                       base::local({
[17:47:00.249]                         has_future <- base::requireNamespace("future", 
[17:47:00.249]                           quietly = TRUE)
[17:47:00.249]                         if (has_future) {
[17:47:00.249]                           ns <- base::getNamespace("future")
[17:47:00.249]                           version <- ns[[".package"]][["version"]]
[17:47:00.249]                           if (is.null(version)) 
[17:47:00.249]                             version <- utils::packageVersion("future")
[17:47:00.249]                         }
[17:47:00.249]                         else {
[17:47:00.249]                           version <- NULL
[17:47:00.249]                         }
[17:47:00.249]                         if (!has_future || version < "1.8.0") {
[17:47:00.249]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:00.249]                             "", base::R.version$version.string), 
[17:47:00.249]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:00.249]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:00.249]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:00.249]                               "release", "version")], collapse = " "), 
[17:47:00.249]                             hostname = base::Sys.info()[["nodename"]])
[17:47:00.249]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:00.249]                             info)
[17:47:00.249]                           info <- base::paste(info, collapse = "; ")
[17:47:00.249]                           if (!has_future) {
[17:47:00.249]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:00.249]                               info)
[17:47:00.249]                           }
[17:47:00.249]                           else {
[17:47:00.249]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:00.249]                               info, version)
[17:47:00.249]                           }
[17:47:00.249]                           base::stop(msg)
[17:47:00.249]                         }
[17:47:00.249]                       })
[17:47:00.249]                     }
[17:47:00.249]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:00.249]                     base::options(mc.cores = 1L)
[17:47:00.249]                   }
[17:47:00.249]                   ...future.strategy.old <- future::plan("list")
[17:47:00.249]                   options(future.plan = NULL)
[17:47:00.249]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.249]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:00.249]                 }
[17:47:00.249]                 ...future.workdir <- getwd()
[17:47:00.249]             }
[17:47:00.249]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:00.249]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:00.249]         }
[17:47:00.249]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:00.249]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:00.249]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:00.249]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:47:00.249]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:00.249]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:00.249]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:00.249]             base::names(...future.oldOptions))
[17:47:00.249]     }
[17:47:00.249]     if (FALSE) {
[17:47:00.249]     }
[17:47:00.249]     else {
[17:47:00.249]         if (TRUE) {
[17:47:00.249]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:00.249]                 open = "w")
[17:47:00.249]         }
[17:47:00.249]         else {
[17:47:00.249]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:00.249]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:00.249]         }
[17:47:00.249]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:00.249]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:00.249]             base::sink(type = "output", split = FALSE)
[17:47:00.249]             base::close(...future.stdout)
[17:47:00.249]         }, add = TRUE)
[17:47:00.249]     }
[17:47:00.249]     ...future.frame <- base::sys.nframe()
[17:47:00.249]     ...future.conditions <- base::list()
[17:47:00.249]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:00.249]     if (FALSE) {
[17:47:00.249]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:00.249]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:00.249]     }
[17:47:00.249]     ...future.result <- base::tryCatch({
[17:47:00.249]         base::withCallingHandlers({
[17:47:00.249]             ...future.value <- base::withVisible(base::local({
[17:47:00.249]                 ...future.makeSendCondition <- base::local({
[17:47:00.249]                   sendCondition <- NULL
[17:47:00.249]                   function(frame = 1L) {
[17:47:00.249]                     if (is.function(sendCondition)) 
[17:47:00.249]                       return(sendCondition)
[17:47:00.249]                     ns <- getNamespace("parallel")
[17:47:00.249]                     if (exists("sendData", mode = "function", 
[17:47:00.249]                       envir = ns)) {
[17:47:00.249]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:00.249]                         envir = ns)
[17:47:00.249]                       envir <- sys.frame(frame)
[17:47:00.249]                       master <- NULL
[17:47:00.249]                       while (!identical(envir, .GlobalEnv) && 
[17:47:00.249]                         !identical(envir, emptyenv())) {
[17:47:00.249]                         if (exists("master", mode = "list", envir = envir, 
[17:47:00.249]                           inherits = FALSE)) {
[17:47:00.249]                           master <- get("master", mode = "list", 
[17:47:00.249]                             envir = envir, inherits = FALSE)
[17:47:00.249]                           if (inherits(master, c("SOCKnode", 
[17:47:00.249]                             "SOCK0node"))) {
[17:47:00.249]                             sendCondition <<- function(cond) {
[17:47:00.249]                               data <- list(type = "VALUE", value = cond, 
[17:47:00.249]                                 success = TRUE)
[17:47:00.249]                               parallel_sendData(master, data)
[17:47:00.249]                             }
[17:47:00.249]                             return(sendCondition)
[17:47:00.249]                           }
[17:47:00.249]                         }
[17:47:00.249]                         frame <- frame + 1L
[17:47:00.249]                         envir <- sys.frame(frame)
[17:47:00.249]                       }
[17:47:00.249]                     }
[17:47:00.249]                     sendCondition <<- function(cond) NULL
[17:47:00.249]                   }
[17:47:00.249]                 })
[17:47:00.249]                 withCallingHandlers({
[17:47:00.249]                   NA
[17:47:00.249]                 }, immediateCondition = function(cond) {
[17:47:00.249]                   sendCondition <- ...future.makeSendCondition()
[17:47:00.249]                   sendCondition(cond)
[17:47:00.249]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.249]                   {
[17:47:00.249]                     inherits <- base::inherits
[17:47:00.249]                     invokeRestart <- base::invokeRestart
[17:47:00.249]                     is.null <- base::is.null
[17:47:00.249]                     muffled <- FALSE
[17:47:00.249]                     if (inherits(cond, "message")) {
[17:47:00.249]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:00.249]                       if (muffled) 
[17:47:00.249]                         invokeRestart("muffleMessage")
[17:47:00.249]                     }
[17:47:00.249]                     else if (inherits(cond, "warning")) {
[17:47:00.249]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:00.249]                       if (muffled) 
[17:47:00.249]                         invokeRestart("muffleWarning")
[17:47:00.249]                     }
[17:47:00.249]                     else if (inherits(cond, "condition")) {
[17:47:00.249]                       if (!is.null(pattern)) {
[17:47:00.249]                         computeRestarts <- base::computeRestarts
[17:47:00.249]                         grepl <- base::grepl
[17:47:00.249]                         restarts <- computeRestarts(cond)
[17:47:00.249]                         for (restart in restarts) {
[17:47:00.249]                           name <- restart$name
[17:47:00.249]                           if (is.null(name)) 
[17:47:00.249]                             next
[17:47:00.249]                           if (!grepl(pattern, name)) 
[17:47:00.249]                             next
[17:47:00.249]                           invokeRestart(restart)
[17:47:00.249]                           muffled <- TRUE
[17:47:00.249]                           break
[17:47:00.249]                         }
[17:47:00.249]                       }
[17:47:00.249]                     }
[17:47:00.249]                     invisible(muffled)
[17:47:00.249]                   }
[17:47:00.249]                   muffleCondition(cond)
[17:47:00.249]                 })
[17:47:00.249]             }))
[17:47:00.249]             future::FutureResult(value = ...future.value$value, 
[17:47:00.249]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.249]                   ...future.rng), globalenv = if (FALSE) 
[17:47:00.249]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:00.249]                     ...future.globalenv.names))
[17:47:00.249]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:00.249]         }, condition = base::local({
[17:47:00.249]             c <- base::c
[17:47:00.249]             inherits <- base::inherits
[17:47:00.249]             invokeRestart <- base::invokeRestart
[17:47:00.249]             length <- base::length
[17:47:00.249]             list <- base::list
[17:47:00.249]             seq.int <- base::seq.int
[17:47:00.249]             signalCondition <- base::signalCondition
[17:47:00.249]             sys.calls <- base::sys.calls
[17:47:00.249]             `[[` <- base::`[[`
[17:47:00.249]             `+` <- base::`+`
[17:47:00.249]             `<<-` <- base::`<<-`
[17:47:00.249]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:00.249]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:00.249]                   3L)]
[17:47:00.249]             }
[17:47:00.249]             function(cond) {
[17:47:00.249]                 is_error <- inherits(cond, "error")
[17:47:00.249]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:00.249]                   NULL)
[17:47:00.249]                 if (is_error) {
[17:47:00.249]                   sessionInformation <- function() {
[17:47:00.249]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:00.249]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:00.249]                       search = base::search(), system = base::Sys.info())
[17:47:00.249]                   }
[17:47:00.249]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.249]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:00.249]                     cond$call), session = sessionInformation(), 
[17:47:00.249]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:00.249]                   signalCondition(cond)
[17:47:00.249]                 }
[17:47:00.249]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:00.249]                 "immediateCondition"))) {
[17:47:00.249]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:00.249]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.249]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:00.249]                   if (TRUE && !signal) {
[17:47:00.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.249]                     {
[17:47:00.249]                       inherits <- base::inherits
[17:47:00.249]                       invokeRestart <- base::invokeRestart
[17:47:00.249]                       is.null <- base::is.null
[17:47:00.249]                       muffled <- FALSE
[17:47:00.249]                       if (inherits(cond, "message")) {
[17:47:00.249]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.249]                         if (muffled) 
[17:47:00.249]                           invokeRestart("muffleMessage")
[17:47:00.249]                       }
[17:47:00.249]                       else if (inherits(cond, "warning")) {
[17:47:00.249]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.249]                         if (muffled) 
[17:47:00.249]                           invokeRestart("muffleWarning")
[17:47:00.249]                       }
[17:47:00.249]                       else if (inherits(cond, "condition")) {
[17:47:00.249]                         if (!is.null(pattern)) {
[17:47:00.249]                           computeRestarts <- base::computeRestarts
[17:47:00.249]                           grepl <- base::grepl
[17:47:00.249]                           restarts <- computeRestarts(cond)
[17:47:00.249]                           for (restart in restarts) {
[17:47:00.249]                             name <- restart$name
[17:47:00.249]                             if (is.null(name)) 
[17:47:00.249]                               next
[17:47:00.249]                             if (!grepl(pattern, name)) 
[17:47:00.249]                               next
[17:47:00.249]                             invokeRestart(restart)
[17:47:00.249]                             muffled <- TRUE
[17:47:00.249]                             break
[17:47:00.249]                           }
[17:47:00.249]                         }
[17:47:00.249]                       }
[17:47:00.249]                       invisible(muffled)
[17:47:00.249]                     }
[17:47:00.249]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.249]                   }
[17:47:00.249]                 }
[17:47:00.249]                 else {
[17:47:00.249]                   if (TRUE) {
[17:47:00.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.249]                     {
[17:47:00.249]                       inherits <- base::inherits
[17:47:00.249]                       invokeRestart <- base::invokeRestart
[17:47:00.249]                       is.null <- base::is.null
[17:47:00.249]                       muffled <- FALSE
[17:47:00.249]                       if (inherits(cond, "message")) {
[17:47:00.249]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.249]                         if (muffled) 
[17:47:00.249]                           invokeRestart("muffleMessage")
[17:47:00.249]                       }
[17:47:00.249]                       else if (inherits(cond, "warning")) {
[17:47:00.249]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.249]                         if (muffled) 
[17:47:00.249]                           invokeRestart("muffleWarning")
[17:47:00.249]                       }
[17:47:00.249]                       else if (inherits(cond, "condition")) {
[17:47:00.249]                         if (!is.null(pattern)) {
[17:47:00.249]                           computeRestarts <- base::computeRestarts
[17:47:00.249]                           grepl <- base::grepl
[17:47:00.249]                           restarts <- computeRestarts(cond)
[17:47:00.249]                           for (restart in restarts) {
[17:47:00.249]                             name <- restart$name
[17:47:00.249]                             if (is.null(name)) 
[17:47:00.249]                               next
[17:47:00.249]                             if (!grepl(pattern, name)) 
[17:47:00.249]                               next
[17:47:00.249]                             invokeRestart(restart)
[17:47:00.249]                             muffled <- TRUE
[17:47:00.249]                             break
[17:47:00.249]                           }
[17:47:00.249]                         }
[17:47:00.249]                       }
[17:47:00.249]                       invisible(muffled)
[17:47:00.249]                     }
[17:47:00.249]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.249]                   }
[17:47:00.249]                 }
[17:47:00.249]             }
[17:47:00.249]         }))
[17:47:00.249]     }, error = function(ex) {
[17:47:00.249]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:00.249]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.249]                 ...future.rng), started = ...future.startTime, 
[17:47:00.249]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:00.249]             version = "1.8"), class = "FutureResult")
[17:47:00.249]     }, finally = {
[17:47:00.249]         if (!identical(...future.workdir, getwd())) 
[17:47:00.249]             setwd(...future.workdir)
[17:47:00.249]         {
[17:47:00.249]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:00.249]                 ...future.oldOptions$nwarnings <- NULL
[17:47:00.249]             }
[17:47:00.249]             base::options(...future.oldOptions)
[17:47:00.249]             if (.Platform$OS.type == "windows") {
[17:47:00.249]                 old_names <- names(...future.oldEnvVars)
[17:47:00.249]                 envs <- base::Sys.getenv()
[17:47:00.249]                 names <- names(envs)
[17:47:00.249]                 common <- intersect(names, old_names)
[17:47:00.249]                 added <- setdiff(names, old_names)
[17:47:00.249]                 removed <- setdiff(old_names, names)
[17:47:00.249]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:00.249]                   envs[common]]
[17:47:00.249]                 NAMES <- toupper(changed)
[17:47:00.249]                 args <- list()
[17:47:00.249]                 for (kk in seq_along(NAMES)) {
[17:47:00.249]                   name <- changed[[kk]]
[17:47:00.249]                   NAME <- NAMES[[kk]]
[17:47:00.249]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.249]                     next
[17:47:00.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.249]                 }
[17:47:00.249]                 NAMES <- toupper(added)
[17:47:00.249]                 for (kk in seq_along(NAMES)) {
[17:47:00.249]                   name <- added[[kk]]
[17:47:00.249]                   NAME <- NAMES[[kk]]
[17:47:00.249]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.249]                     next
[17:47:00.249]                   args[[name]] <- ""
[17:47:00.249]                 }
[17:47:00.249]                 NAMES <- toupper(removed)
[17:47:00.249]                 for (kk in seq_along(NAMES)) {
[17:47:00.249]                   name <- removed[[kk]]
[17:47:00.249]                   NAME <- NAMES[[kk]]
[17:47:00.249]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.249]                     next
[17:47:00.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.249]                 }
[17:47:00.249]                 if (length(args) > 0) 
[17:47:00.249]                   base::do.call(base::Sys.setenv, args = args)
[17:47:00.249]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:00.249]             }
[17:47:00.249]             else {
[17:47:00.249]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:00.249]             }
[17:47:00.249]             {
[17:47:00.249]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:00.249]                   0L) {
[17:47:00.249]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:00.249]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:00.249]                   base::options(opts)
[17:47:00.249]                 }
[17:47:00.249]                 {
[17:47:00.249]                   {
[17:47:00.249]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:00.249]                     NULL
[17:47:00.249]                   }
[17:47:00.249]                   options(future.plan = NULL)
[17:47:00.249]                   if (is.na(NA_character_)) 
[17:47:00.249]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.249]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:00.249]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:00.249]                     .init = FALSE)
[17:47:00.249]                 }
[17:47:00.249]             }
[17:47:00.249]         }
[17:47:00.249]     })
[17:47:00.249]     if (TRUE) {
[17:47:00.249]         base::sink(type = "output", split = FALSE)
[17:47:00.249]         if (TRUE) {
[17:47:00.249]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:00.249]         }
[17:47:00.249]         else {
[17:47:00.249]             ...future.result["stdout"] <- base::list(NULL)
[17:47:00.249]         }
[17:47:00.249]         base::close(...future.stdout)
[17:47:00.249]         ...future.stdout <- NULL
[17:47:00.249]     }
[17:47:00.249]     ...future.result$conditions <- ...future.conditions
[17:47:00.249]     ...future.result$finished <- base::Sys.time()
[17:47:00.249]     ...future.result
[17:47:00.249] }
[17:47:00.303] MultisessionFuture started
[17:47:00.304] result() for ClusterFuture ...
[17:47:00.304] receiveMessageFromWorker() for ClusterFuture ...
[17:47:00.304] - Validating connection of MultisessionFuture
[17:47:00.337] - received message: FutureResult
[17:47:00.337] - Received FutureResult
[17:47:00.339] - Erased future from FutureRegistry
[17:47:00.340] result() for ClusterFuture ...
[17:47:00.340] - result already collected: FutureResult
[17:47:00.340] result() for ClusterFuture ... done
[17:47:00.340] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:00.340] result() for ClusterFuture ... done
[17:47:00.341] result() for ClusterFuture ...
[17:47:00.341] - result already collected: FutureResult
[17:47:00.341] result() for ClusterFuture ... done
[17:47:00.341] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:00.341] plan(): nbrOfWorkers() = 2
> 
> env <- new.env()
> 
> ## Create future #1 (consumes background process #1)
> env$a %<-% { 5 }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:47:00.343] getGlobalsAndPackages() ...
[17:47:00.343] Searching for globals...
[17:47:00.347] - globals found: [1] ‘{’
[17:47:00.347] Searching for globals ... DONE
[17:47:00.347] Resolving globals: TRUE
[17:47:00.347] Resolving any globals that are futures ...
[17:47:00.347] - globals: [1] ‘{’
[17:47:00.348] Resolving any globals that are futures ... DONE
[17:47:00.348] 
[17:47:00.348] 
[17:47:00.348] getGlobalsAndPackages() ... DONE
[17:47:00.349] run() for ‘Future’ ...
[17:47:00.349] - state: ‘created’
[17:47:00.349] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:00.360] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:00.361] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:00.361]   - Field: ‘node’
[17:47:00.361]   - Field: ‘label’
[17:47:00.361]   - Field: ‘local’
[17:47:00.361]   - Field: ‘owner’
[17:47:00.361]   - Field: ‘envir’
[17:47:00.361]   - Field: ‘workers’
[17:47:00.361]   - Field: ‘packages’
[17:47:00.361]   - Field: ‘gc’
[17:47:00.362]   - Field: ‘conditions’
[17:47:00.362]   - Field: ‘persistent’
[17:47:00.362]   - Field: ‘expr’
[17:47:00.362]   - Field: ‘uuid’
[17:47:00.362]   - Field: ‘seed’
[17:47:00.362]   - Field: ‘version’
[17:47:00.362]   - Field: ‘result’
[17:47:00.362]   - Field: ‘asynchronous’
[17:47:00.362]   - Field: ‘calls’
[17:47:00.363]   - Field: ‘globals’
[17:47:00.363]   - Field: ‘stdout’
[17:47:00.363]   - Field: ‘earlySignal’
[17:47:00.363]   - Field: ‘lazy’
[17:47:00.363]   - Field: ‘state’
[17:47:00.363] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:00.363] - Launch lazy future ...
[17:47:00.364] Packages needed by the future expression (n = 0): <none>
[17:47:00.364] Packages needed by future strategies (n = 0): <none>
[17:47:00.364] {
[17:47:00.364]     {
[17:47:00.364]         {
[17:47:00.364]             ...future.startTime <- base::Sys.time()
[17:47:00.364]             {
[17:47:00.364]                 {
[17:47:00.364]                   {
[17:47:00.364]                     {
[17:47:00.364]                       base::local({
[17:47:00.364]                         has_future <- base::requireNamespace("future", 
[17:47:00.364]                           quietly = TRUE)
[17:47:00.364]                         if (has_future) {
[17:47:00.364]                           ns <- base::getNamespace("future")
[17:47:00.364]                           version <- ns[[".package"]][["version"]]
[17:47:00.364]                           if (is.null(version)) 
[17:47:00.364]                             version <- utils::packageVersion("future")
[17:47:00.364]                         }
[17:47:00.364]                         else {
[17:47:00.364]                           version <- NULL
[17:47:00.364]                         }
[17:47:00.364]                         if (!has_future || version < "1.8.0") {
[17:47:00.364]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:00.364]                             "", base::R.version$version.string), 
[17:47:00.364]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:00.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:00.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:00.364]                               "release", "version")], collapse = " "), 
[17:47:00.364]                             hostname = base::Sys.info()[["nodename"]])
[17:47:00.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:00.364]                             info)
[17:47:00.364]                           info <- base::paste(info, collapse = "; ")
[17:47:00.364]                           if (!has_future) {
[17:47:00.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:00.364]                               info)
[17:47:00.364]                           }
[17:47:00.364]                           else {
[17:47:00.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:00.364]                               info, version)
[17:47:00.364]                           }
[17:47:00.364]                           base::stop(msg)
[17:47:00.364]                         }
[17:47:00.364]                       })
[17:47:00.364]                     }
[17:47:00.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:00.364]                     base::options(mc.cores = 1L)
[17:47:00.364]                   }
[17:47:00.364]                   ...future.strategy.old <- future::plan("list")
[17:47:00.364]                   options(future.plan = NULL)
[17:47:00.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:00.364]                 }
[17:47:00.364]                 ...future.workdir <- getwd()
[17:47:00.364]             }
[17:47:00.364]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:00.364]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:00.364]         }
[17:47:00.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:00.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:00.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:00.364]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:47:00.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:00.364]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:00.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:00.364]             base::names(...future.oldOptions))
[17:47:00.364]     }
[17:47:00.364]     if (FALSE) {
[17:47:00.364]     }
[17:47:00.364]     else {
[17:47:00.364]         if (TRUE) {
[17:47:00.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:00.364]                 open = "w")
[17:47:00.364]         }
[17:47:00.364]         else {
[17:47:00.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:00.364]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:00.364]         }
[17:47:00.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:00.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:00.364]             base::sink(type = "output", split = FALSE)
[17:47:00.364]             base::close(...future.stdout)
[17:47:00.364]         }, add = TRUE)
[17:47:00.364]     }
[17:47:00.364]     ...future.frame <- base::sys.nframe()
[17:47:00.364]     ...future.conditions <- base::list()
[17:47:00.364]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:00.364]     if (FALSE) {
[17:47:00.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:00.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:00.364]     }
[17:47:00.364]     ...future.result <- base::tryCatch({
[17:47:00.364]         base::withCallingHandlers({
[17:47:00.364]             ...future.value <- base::withVisible(base::local({
[17:47:00.364]                 ...future.makeSendCondition <- base::local({
[17:47:00.364]                   sendCondition <- NULL
[17:47:00.364]                   function(frame = 1L) {
[17:47:00.364]                     if (is.function(sendCondition)) 
[17:47:00.364]                       return(sendCondition)
[17:47:00.364]                     ns <- getNamespace("parallel")
[17:47:00.364]                     if (exists("sendData", mode = "function", 
[17:47:00.364]                       envir = ns)) {
[17:47:00.364]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:00.364]                         envir = ns)
[17:47:00.364]                       envir <- sys.frame(frame)
[17:47:00.364]                       master <- NULL
[17:47:00.364]                       while (!identical(envir, .GlobalEnv) && 
[17:47:00.364]                         !identical(envir, emptyenv())) {
[17:47:00.364]                         if (exists("master", mode = "list", envir = envir, 
[17:47:00.364]                           inherits = FALSE)) {
[17:47:00.364]                           master <- get("master", mode = "list", 
[17:47:00.364]                             envir = envir, inherits = FALSE)
[17:47:00.364]                           if (inherits(master, c("SOCKnode", 
[17:47:00.364]                             "SOCK0node"))) {
[17:47:00.364]                             sendCondition <<- function(cond) {
[17:47:00.364]                               data <- list(type = "VALUE", value = cond, 
[17:47:00.364]                                 success = TRUE)
[17:47:00.364]                               parallel_sendData(master, data)
[17:47:00.364]                             }
[17:47:00.364]                             return(sendCondition)
[17:47:00.364]                           }
[17:47:00.364]                         }
[17:47:00.364]                         frame <- frame + 1L
[17:47:00.364]                         envir <- sys.frame(frame)
[17:47:00.364]                       }
[17:47:00.364]                     }
[17:47:00.364]                     sendCondition <<- function(cond) NULL
[17:47:00.364]                   }
[17:47:00.364]                 })
[17:47:00.364]                 withCallingHandlers({
[17:47:00.364]                   {
[17:47:00.364]                     5
[17:47:00.364]                   }
[17:47:00.364]                 }, immediateCondition = function(cond) {
[17:47:00.364]                   sendCondition <- ...future.makeSendCondition()
[17:47:00.364]                   sendCondition(cond)
[17:47:00.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.364]                   {
[17:47:00.364]                     inherits <- base::inherits
[17:47:00.364]                     invokeRestart <- base::invokeRestart
[17:47:00.364]                     is.null <- base::is.null
[17:47:00.364]                     muffled <- FALSE
[17:47:00.364]                     if (inherits(cond, "message")) {
[17:47:00.364]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:00.364]                       if (muffled) 
[17:47:00.364]                         invokeRestart("muffleMessage")
[17:47:00.364]                     }
[17:47:00.364]                     else if (inherits(cond, "warning")) {
[17:47:00.364]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:00.364]                       if (muffled) 
[17:47:00.364]                         invokeRestart("muffleWarning")
[17:47:00.364]                     }
[17:47:00.364]                     else if (inherits(cond, "condition")) {
[17:47:00.364]                       if (!is.null(pattern)) {
[17:47:00.364]                         computeRestarts <- base::computeRestarts
[17:47:00.364]                         grepl <- base::grepl
[17:47:00.364]                         restarts <- computeRestarts(cond)
[17:47:00.364]                         for (restart in restarts) {
[17:47:00.364]                           name <- restart$name
[17:47:00.364]                           if (is.null(name)) 
[17:47:00.364]                             next
[17:47:00.364]                           if (!grepl(pattern, name)) 
[17:47:00.364]                             next
[17:47:00.364]                           invokeRestart(restart)
[17:47:00.364]                           muffled <- TRUE
[17:47:00.364]                           break
[17:47:00.364]                         }
[17:47:00.364]                       }
[17:47:00.364]                     }
[17:47:00.364]                     invisible(muffled)
[17:47:00.364]                   }
[17:47:00.364]                   muffleCondition(cond)
[17:47:00.364]                 })
[17:47:00.364]             }))
[17:47:00.364]             future::FutureResult(value = ...future.value$value, 
[17:47:00.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.364]                   ...future.rng), globalenv = if (FALSE) 
[17:47:00.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:00.364]                     ...future.globalenv.names))
[17:47:00.364]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:00.364]         }, condition = base::local({
[17:47:00.364]             c <- base::c
[17:47:00.364]             inherits <- base::inherits
[17:47:00.364]             invokeRestart <- base::invokeRestart
[17:47:00.364]             length <- base::length
[17:47:00.364]             list <- base::list
[17:47:00.364]             seq.int <- base::seq.int
[17:47:00.364]             signalCondition <- base::signalCondition
[17:47:00.364]             sys.calls <- base::sys.calls
[17:47:00.364]             `[[` <- base::`[[`
[17:47:00.364]             `+` <- base::`+`
[17:47:00.364]             `<<-` <- base::`<<-`
[17:47:00.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:00.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:00.364]                   3L)]
[17:47:00.364]             }
[17:47:00.364]             function(cond) {
[17:47:00.364]                 is_error <- inherits(cond, "error")
[17:47:00.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:00.364]                   NULL)
[17:47:00.364]                 if (is_error) {
[17:47:00.364]                   sessionInformation <- function() {
[17:47:00.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:00.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:00.364]                       search = base::search(), system = base::Sys.info())
[17:47:00.364]                   }
[17:47:00.364]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:00.364]                     cond$call), session = sessionInformation(), 
[17:47:00.364]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:00.364]                   signalCondition(cond)
[17:47:00.364]                 }
[17:47:00.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:00.364]                 "immediateCondition"))) {
[17:47:00.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:00.364]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:00.364]                   if (TRUE && !signal) {
[17:47:00.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.364]                     {
[17:47:00.364]                       inherits <- base::inherits
[17:47:00.364]                       invokeRestart <- base::invokeRestart
[17:47:00.364]                       is.null <- base::is.null
[17:47:00.364]                       muffled <- FALSE
[17:47:00.364]                       if (inherits(cond, "message")) {
[17:47:00.364]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.364]                         if (muffled) 
[17:47:00.364]                           invokeRestart("muffleMessage")
[17:47:00.364]                       }
[17:47:00.364]                       else if (inherits(cond, "warning")) {
[17:47:00.364]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.364]                         if (muffled) 
[17:47:00.364]                           invokeRestart("muffleWarning")
[17:47:00.364]                       }
[17:47:00.364]                       else if (inherits(cond, "condition")) {
[17:47:00.364]                         if (!is.null(pattern)) {
[17:47:00.364]                           computeRestarts <- base::computeRestarts
[17:47:00.364]                           grepl <- base::grepl
[17:47:00.364]                           restarts <- computeRestarts(cond)
[17:47:00.364]                           for (restart in restarts) {
[17:47:00.364]                             name <- restart$name
[17:47:00.364]                             if (is.null(name)) 
[17:47:00.364]                               next
[17:47:00.364]                             if (!grepl(pattern, name)) 
[17:47:00.364]                               next
[17:47:00.364]                             invokeRestart(restart)
[17:47:00.364]                             muffled <- TRUE
[17:47:00.364]                             break
[17:47:00.364]                           }
[17:47:00.364]                         }
[17:47:00.364]                       }
[17:47:00.364]                       invisible(muffled)
[17:47:00.364]                     }
[17:47:00.364]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.364]                   }
[17:47:00.364]                 }
[17:47:00.364]                 else {
[17:47:00.364]                   if (TRUE) {
[17:47:00.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.364]                     {
[17:47:00.364]                       inherits <- base::inherits
[17:47:00.364]                       invokeRestart <- base::invokeRestart
[17:47:00.364]                       is.null <- base::is.null
[17:47:00.364]                       muffled <- FALSE
[17:47:00.364]                       if (inherits(cond, "message")) {
[17:47:00.364]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.364]                         if (muffled) 
[17:47:00.364]                           invokeRestart("muffleMessage")
[17:47:00.364]                       }
[17:47:00.364]                       else if (inherits(cond, "warning")) {
[17:47:00.364]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.364]                         if (muffled) 
[17:47:00.364]                           invokeRestart("muffleWarning")
[17:47:00.364]                       }
[17:47:00.364]                       else if (inherits(cond, "condition")) {
[17:47:00.364]                         if (!is.null(pattern)) {
[17:47:00.364]                           computeRestarts <- base::computeRestarts
[17:47:00.364]                           grepl <- base::grepl
[17:47:00.364]                           restarts <- computeRestarts(cond)
[17:47:00.364]                           for (restart in restarts) {
[17:47:00.364]                             name <- restart$name
[17:47:00.364]                             if (is.null(name)) 
[17:47:00.364]                               next
[17:47:00.364]                             if (!grepl(pattern, name)) 
[17:47:00.364]                               next
[17:47:00.364]                             invokeRestart(restart)
[17:47:00.364]                             muffled <- TRUE
[17:47:00.364]                             break
[17:47:00.364]                           }
[17:47:00.364]                         }
[17:47:00.364]                       }
[17:47:00.364]                       invisible(muffled)
[17:47:00.364]                     }
[17:47:00.364]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.364]                   }
[17:47:00.364]                 }
[17:47:00.364]             }
[17:47:00.364]         }))
[17:47:00.364]     }, error = function(ex) {
[17:47:00.364]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:00.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.364]                 ...future.rng), started = ...future.startTime, 
[17:47:00.364]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:00.364]             version = "1.8"), class = "FutureResult")
[17:47:00.364]     }, finally = {
[17:47:00.364]         if (!identical(...future.workdir, getwd())) 
[17:47:00.364]             setwd(...future.workdir)
[17:47:00.364]         {
[17:47:00.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:00.364]                 ...future.oldOptions$nwarnings <- NULL
[17:47:00.364]             }
[17:47:00.364]             base::options(...future.oldOptions)
[17:47:00.364]             if (.Platform$OS.type == "windows") {
[17:47:00.364]                 old_names <- names(...future.oldEnvVars)
[17:47:00.364]                 envs <- base::Sys.getenv()
[17:47:00.364]                 names <- names(envs)
[17:47:00.364]                 common <- intersect(names, old_names)
[17:47:00.364]                 added <- setdiff(names, old_names)
[17:47:00.364]                 removed <- setdiff(old_names, names)
[17:47:00.364]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:00.364]                   envs[common]]
[17:47:00.364]                 NAMES <- toupper(changed)
[17:47:00.364]                 args <- list()
[17:47:00.364]                 for (kk in seq_along(NAMES)) {
[17:47:00.364]                   name <- changed[[kk]]
[17:47:00.364]                   NAME <- NAMES[[kk]]
[17:47:00.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.364]                     next
[17:47:00.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.364]                 }
[17:47:00.364]                 NAMES <- toupper(added)
[17:47:00.364]                 for (kk in seq_along(NAMES)) {
[17:47:00.364]                   name <- added[[kk]]
[17:47:00.364]                   NAME <- NAMES[[kk]]
[17:47:00.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.364]                     next
[17:47:00.364]                   args[[name]] <- ""
[17:47:00.364]                 }
[17:47:00.364]                 NAMES <- toupper(removed)
[17:47:00.364]                 for (kk in seq_along(NAMES)) {
[17:47:00.364]                   name <- removed[[kk]]
[17:47:00.364]                   NAME <- NAMES[[kk]]
[17:47:00.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.364]                     next
[17:47:00.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.364]                 }
[17:47:00.364]                 if (length(args) > 0) 
[17:47:00.364]                   base::do.call(base::Sys.setenv, args = args)
[17:47:00.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:00.364]             }
[17:47:00.364]             else {
[17:47:00.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:00.364]             }
[17:47:00.364]             {
[17:47:00.364]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:00.364]                   0L) {
[17:47:00.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:00.364]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:00.364]                   base::options(opts)
[17:47:00.364]                 }
[17:47:00.364]                 {
[17:47:00.364]                   {
[17:47:00.364]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:00.364]                     NULL
[17:47:00.364]                   }
[17:47:00.364]                   options(future.plan = NULL)
[17:47:00.364]                   if (is.na(NA_character_)) 
[17:47:00.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:00.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:00.364]                     .init = FALSE)
[17:47:00.364]                 }
[17:47:00.364]             }
[17:47:00.364]         }
[17:47:00.364]     })
[17:47:00.364]     if (TRUE) {
[17:47:00.364]         base::sink(type = "output", split = FALSE)
[17:47:00.364]         if (TRUE) {
[17:47:00.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:00.364]         }
[17:47:00.364]         else {
[17:47:00.364]             ...future.result["stdout"] <- base::list(NULL)
[17:47:00.364]         }
[17:47:00.364]         base::close(...future.stdout)
[17:47:00.364]         ...future.stdout <- NULL
[17:47:00.364]     }
[17:47:00.364]     ...future.result$conditions <- ...future.conditions
[17:47:00.364]     ...future.result$finished <- base::Sys.time()
[17:47:00.364]     ...future.result
[17:47:00.364] }
[17:47:00.368] MultisessionFuture started
[17:47:00.368] - Launch lazy future ... done
[17:47:00.368] run() for ‘MultisessionFuture’ ... done
> 
> ## Create future #2 (consumes background process #2)
> b %<-% { "a" }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:47:00.369] getGlobalsAndPackages() ...
[17:47:00.369] Searching for globals...
[17:47:00.371] - globals found: [1] ‘{’
[17:47:00.371] Searching for globals ... DONE
[17:47:00.371] Resolving globals: TRUE
[17:47:00.371] Resolving any globals that are futures ...
[17:47:00.371] - globals: [1] ‘{’
[17:47:00.371] Resolving any globals that are futures ... DONE
[17:47:00.372] 
[17:47:00.372] 
[17:47:00.372] getGlobalsAndPackages() ... DONE
[17:47:00.372] run() for ‘Future’ ...
[17:47:00.372] - state: ‘created’
[17:47:00.373] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:00.384] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:00.384] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:00.384]   - Field: ‘node’
[17:47:00.384]   - Field: ‘label’
[17:47:00.384]   - Field: ‘local’
[17:47:00.385]   - Field: ‘owner’
[17:47:00.385]   - Field: ‘envir’
[17:47:00.385]   - Field: ‘workers’
[17:47:00.385]   - Field: ‘packages’
[17:47:00.385]   - Field: ‘gc’
[17:47:00.385]   - Field: ‘conditions’
[17:47:00.385]   - Field: ‘persistent’
[17:47:00.385]   - Field: ‘expr’
[17:47:00.385]   - Field: ‘uuid’
[17:47:00.385]   - Field: ‘seed’
[17:47:00.386]   - Field: ‘version’
[17:47:00.386]   - Field: ‘result’
[17:47:00.386]   - Field: ‘asynchronous’
[17:47:00.386]   - Field: ‘calls’
[17:47:00.386]   - Field: ‘globals’
[17:47:00.386]   - Field: ‘stdout’
[17:47:00.386]   - Field: ‘earlySignal’
[17:47:00.386]   - Field: ‘lazy’
[17:47:00.387]   - Field: ‘state’
[17:47:00.387] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:00.387] - Launch lazy future ...
[17:47:00.387] Packages needed by the future expression (n = 0): <none>
[17:47:00.387] Packages needed by future strategies (n = 0): <none>
[17:47:00.388] {
[17:47:00.388]     {
[17:47:00.388]         {
[17:47:00.388]             ...future.startTime <- base::Sys.time()
[17:47:00.388]             {
[17:47:00.388]                 {
[17:47:00.388]                   {
[17:47:00.388]                     {
[17:47:00.388]                       base::local({
[17:47:00.388]                         has_future <- base::requireNamespace("future", 
[17:47:00.388]                           quietly = TRUE)
[17:47:00.388]                         if (has_future) {
[17:47:00.388]                           ns <- base::getNamespace("future")
[17:47:00.388]                           version <- ns[[".package"]][["version"]]
[17:47:00.388]                           if (is.null(version)) 
[17:47:00.388]                             version <- utils::packageVersion("future")
[17:47:00.388]                         }
[17:47:00.388]                         else {
[17:47:00.388]                           version <- NULL
[17:47:00.388]                         }
[17:47:00.388]                         if (!has_future || version < "1.8.0") {
[17:47:00.388]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:00.388]                             "", base::R.version$version.string), 
[17:47:00.388]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:00.388]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:00.388]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:00.388]                               "release", "version")], collapse = " "), 
[17:47:00.388]                             hostname = base::Sys.info()[["nodename"]])
[17:47:00.388]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:00.388]                             info)
[17:47:00.388]                           info <- base::paste(info, collapse = "; ")
[17:47:00.388]                           if (!has_future) {
[17:47:00.388]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:00.388]                               info)
[17:47:00.388]                           }
[17:47:00.388]                           else {
[17:47:00.388]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:00.388]                               info, version)
[17:47:00.388]                           }
[17:47:00.388]                           base::stop(msg)
[17:47:00.388]                         }
[17:47:00.388]                       })
[17:47:00.388]                     }
[17:47:00.388]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:00.388]                     base::options(mc.cores = 1L)
[17:47:00.388]                   }
[17:47:00.388]                   ...future.strategy.old <- future::plan("list")
[17:47:00.388]                   options(future.plan = NULL)
[17:47:00.388]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.388]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:00.388]                 }
[17:47:00.388]                 ...future.workdir <- getwd()
[17:47:00.388]             }
[17:47:00.388]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:00.388]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:00.388]         }
[17:47:00.388]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:00.388]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:00.388]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:00.388]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:47:00.388]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:00.388]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:00.388]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:00.388]             base::names(...future.oldOptions))
[17:47:00.388]     }
[17:47:00.388]     if (FALSE) {
[17:47:00.388]     }
[17:47:00.388]     else {
[17:47:00.388]         if (TRUE) {
[17:47:00.388]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:00.388]                 open = "w")
[17:47:00.388]         }
[17:47:00.388]         else {
[17:47:00.388]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:00.388]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:00.388]         }
[17:47:00.388]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:00.388]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:00.388]             base::sink(type = "output", split = FALSE)
[17:47:00.388]             base::close(...future.stdout)
[17:47:00.388]         }, add = TRUE)
[17:47:00.388]     }
[17:47:00.388]     ...future.frame <- base::sys.nframe()
[17:47:00.388]     ...future.conditions <- base::list()
[17:47:00.388]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:00.388]     if (FALSE) {
[17:47:00.388]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:00.388]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:00.388]     }
[17:47:00.388]     ...future.result <- base::tryCatch({
[17:47:00.388]         base::withCallingHandlers({
[17:47:00.388]             ...future.value <- base::withVisible(base::local({
[17:47:00.388]                 ...future.makeSendCondition <- base::local({
[17:47:00.388]                   sendCondition <- NULL
[17:47:00.388]                   function(frame = 1L) {
[17:47:00.388]                     if (is.function(sendCondition)) 
[17:47:00.388]                       return(sendCondition)
[17:47:00.388]                     ns <- getNamespace("parallel")
[17:47:00.388]                     if (exists("sendData", mode = "function", 
[17:47:00.388]                       envir = ns)) {
[17:47:00.388]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:00.388]                         envir = ns)
[17:47:00.388]                       envir <- sys.frame(frame)
[17:47:00.388]                       master <- NULL
[17:47:00.388]                       while (!identical(envir, .GlobalEnv) && 
[17:47:00.388]                         !identical(envir, emptyenv())) {
[17:47:00.388]                         if (exists("master", mode = "list", envir = envir, 
[17:47:00.388]                           inherits = FALSE)) {
[17:47:00.388]                           master <- get("master", mode = "list", 
[17:47:00.388]                             envir = envir, inherits = FALSE)
[17:47:00.388]                           if (inherits(master, c("SOCKnode", 
[17:47:00.388]                             "SOCK0node"))) {
[17:47:00.388]                             sendCondition <<- function(cond) {
[17:47:00.388]                               data <- list(type = "VALUE", value = cond, 
[17:47:00.388]                                 success = TRUE)
[17:47:00.388]                               parallel_sendData(master, data)
[17:47:00.388]                             }
[17:47:00.388]                             return(sendCondition)
[17:47:00.388]                           }
[17:47:00.388]                         }
[17:47:00.388]                         frame <- frame + 1L
[17:47:00.388]                         envir <- sys.frame(frame)
[17:47:00.388]                       }
[17:47:00.388]                     }
[17:47:00.388]                     sendCondition <<- function(cond) NULL
[17:47:00.388]                   }
[17:47:00.388]                 })
[17:47:00.388]                 withCallingHandlers({
[17:47:00.388]                   {
[17:47:00.388]                     "a"
[17:47:00.388]                   }
[17:47:00.388]                 }, immediateCondition = function(cond) {
[17:47:00.388]                   sendCondition <- ...future.makeSendCondition()
[17:47:00.388]                   sendCondition(cond)
[17:47:00.388]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.388]                   {
[17:47:00.388]                     inherits <- base::inherits
[17:47:00.388]                     invokeRestart <- base::invokeRestart
[17:47:00.388]                     is.null <- base::is.null
[17:47:00.388]                     muffled <- FALSE
[17:47:00.388]                     if (inherits(cond, "message")) {
[17:47:00.388]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:00.388]                       if (muffled) 
[17:47:00.388]                         invokeRestart("muffleMessage")
[17:47:00.388]                     }
[17:47:00.388]                     else if (inherits(cond, "warning")) {
[17:47:00.388]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:00.388]                       if (muffled) 
[17:47:00.388]                         invokeRestart("muffleWarning")
[17:47:00.388]                     }
[17:47:00.388]                     else if (inherits(cond, "condition")) {
[17:47:00.388]                       if (!is.null(pattern)) {
[17:47:00.388]                         computeRestarts <- base::computeRestarts
[17:47:00.388]                         grepl <- base::grepl
[17:47:00.388]                         restarts <- computeRestarts(cond)
[17:47:00.388]                         for (restart in restarts) {
[17:47:00.388]                           name <- restart$name
[17:47:00.388]                           if (is.null(name)) 
[17:47:00.388]                             next
[17:47:00.388]                           if (!grepl(pattern, name)) 
[17:47:00.388]                             next
[17:47:00.388]                           invokeRestart(restart)
[17:47:00.388]                           muffled <- TRUE
[17:47:00.388]                           break
[17:47:00.388]                         }
[17:47:00.388]                       }
[17:47:00.388]                     }
[17:47:00.388]                     invisible(muffled)
[17:47:00.388]                   }
[17:47:00.388]                   muffleCondition(cond)
[17:47:00.388]                 })
[17:47:00.388]             }))
[17:47:00.388]             future::FutureResult(value = ...future.value$value, 
[17:47:00.388]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.388]                   ...future.rng), globalenv = if (FALSE) 
[17:47:00.388]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:00.388]                     ...future.globalenv.names))
[17:47:00.388]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:00.388]         }, condition = base::local({
[17:47:00.388]             c <- base::c
[17:47:00.388]             inherits <- base::inherits
[17:47:00.388]             invokeRestart <- base::invokeRestart
[17:47:00.388]             length <- base::length
[17:47:00.388]             list <- base::list
[17:47:00.388]             seq.int <- base::seq.int
[17:47:00.388]             signalCondition <- base::signalCondition
[17:47:00.388]             sys.calls <- base::sys.calls
[17:47:00.388]             `[[` <- base::`[[`
[17:47:00.388]             `+` <- base::`+`
[17:47:00.388]             `<<-` <- base::`<<-`
[17:47:00.388]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:00.388]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:00.388]                   3L)]
[17:47:00.388]             }
[17:47:00.388]             function(cond) {
[17:47:00.388]                 is_error <- inherits(cond, "error")
[17:47:00.388]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:00.388]                   NULL)
[17:47:00.388]                 if (is_error) {
[17:47:00.388]                   sessionInformation <- function() {
[17:47:00.388]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:00.388]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:00.388]                       search = base::search(), system = base::Sys.info())
[17:47:00.388]                   }
[17:47:00.388]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.388]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:00.388]                     cond$call), session = sessionInformation(), 
[17:47:00.388]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:00.388]                   signalCondition(cond)
[17:47:00.388]                 }
[17:47:00.388]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:00.388]                 "immediateCondition"))) {
[17:47:00.388]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:00.388]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.388]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:00.388]                   if (TRUE && !signal) {
[17:47:00.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.388]                     {
[17:47:00.388]                       inherits <- base::inherits
[17:47:00.388]                       invokeRestart <- base::invokeRestart
[17:47:00.388]                       is.null <- base::is.null
[17:47:00.388]                       muffled <- FALSE
[17:47:00.388]                       if (inherits(cond, "message")) {
[17:47:00.388]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.388]                         if (muffled) 
[17:47:00.388]                           invokeRestart("muffleMessage")
[17:47:00.388]                       }
[17:47:00.388]                       else if (inherits(cond, "warning")) {
[17:47:00.388]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.388]                         if (muffled) 
[17:47:00.388]                           invokeRestart("muffleWarning")
[17:47:00.388]                       }
[17:47:00.388]                       else if (inherits(cond, "condition")) {
[17:47:00.388]                         if (!is.null(pattern)) {
[17:47:00.388]                           computeRestarts <- base::computeRestarts
[17:47:00.388]                           grepl <- base::grepl
[17:47:00.388]                           restarts <- computeRestarts(cond)
[17:47:00.388]                           for (restart in restarts) {
[17:47:00.388]                             name <- restart$name
[17:47:00.388]                             if (is.null(name)) 
[17:47:00.388]                               next
[17:47:00.388]                             if (!grepl(pattern, name)) 
[17:47:00.388]                               next
[17:47:00.388]                             invokeRestart(restart)
[17:47:00.388]                             muffled <- TRUE
[17:47:00.388]                             break
[17:47:00.388]                           }
[17:47:00.388]                         }
[17:47:00.388]                       }
[17:47:00.388]                       invisible(muffled)
[17:47:00.388]                     }
[17:47:00.388]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.388]                   }
[17:47:00.388]                 }
[17:47:00.388]                 else {
[17:47:00.388]                   if (TRUE) {
[17:47:00.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.388]                     {
[17:47:00.388]                       inherits <- base::inherits
[17:47:00.388]                       invokeRestart <- base::invokeRestart
[17:47:00.388]                       is.null <- base::is.null
[17:47:00.388]                       muffled <- FALSE
[17:47:00.388]                       if (inherits(cond, "message")) {
[17:47:00.388]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.388]                         if (muffled) 
[17:47:00.388]                           invokeRestart("muffleMessage")
[17:47:00.388]                       }
[17:47:00.388]                       else if (inherits(cond, "warning")) {
[17:47:00.388]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.388]                         if (muffled) 
[17:47:00.388]                           invokeRestart("muffleWarning")
[17:47:00.388]                       }
[17:47:00.388]                       else if (inherits(cond, "condition")) {
[17:47:00.388]                         if (!is.null(pattern)) {
[17:47:00.388]                           computeRestarts <- base::computeRestarts
[17:47:00.388]                           grepl <- base::grepl
[17:47:00.388]                           restarts <- computeRestarts(cond)
[17:47:00.388]                           for (restart in restarts) {
[17:47:00.388]                             name <- restart$name
[17:47:00.388]                             if (is.null(name)) 
[17:47:00.388]                               next
[17:47:00.388]                             if (!grepl(pattern, name)) 
[17:47:00.388]                               next
[17:47:00.388]                             invokeRestart(restart)
[17:47:00.388]                             muffled <- TRUE
[17:47:00.388]                             break
[17:47:00.388]                           }
[17:47:00.388]                         }
[17:47:00.388]                       }
[17:47:00.388]                       invisible(muffled)
[17:47:00.388]                     }
[17:47:00.388]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.388]                   }
[17:47:00.388]                 }
[17:47:00.388]             }
[17:47:00.388]         }))
[17:47:00.388]     }, error = function(ex) {
[17:47:00.388]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:00.388]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.388]                 ...future.rng), started = ...future.startTime, 
[17:47:00.388]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:00.388]             version = "1.8"), class = "FutureResult")
[17:47:00.388]     }, finally = {
[17:47:00.388]         if (!identical(...future.workdir, getwd())) 
[17:47:00.388]             setwd(...future.workdir)
[17:47:00.388]         {
[17:47:00.388]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:00.388]                 ...future.oldOptions$nwarnings <- NULL
[17:47:00.388]             }
[17:47:00.388]             base::options(...future.oldOptions)
[17:47:00.388]             if (.Platform$OS.type == "windows") {
[17:47:00.388]                 old_names <- names(...future.oldEnvVars)
[17:47:00.388]                 envs <- base::Sys.getenv()
[17:47:00.388]                 names <- names(envs)
[17:47:00.388]                 common <- intersect(names, old_names)
[17:47:00.388]                 added <- setdiff(names, old_names)
[17:47:00.388]                 removed <- setdiff(old_names, names)
[17:47:00.388]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:00.388]                   envs[common]]
[17:47:00.388]                 NAMES <- toupper(changed)
[17:47:00.388]                 args <- list()
[17:47:00.388]                 for (kk in seq_along(NAMES)) {
[17:47:00.388]                   name <- changed[[kk]]
[17:47:00.388]                   NAME <- NAMES[[kk]]
[17:47:00.388]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.388]                     next
[17:47:00.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.388]                 }
[17:47:00.388]                 NAMES <- toupper(added)
[17:47:00.388]                 for (kk in seq_along(NAMES)) {
[17:47:00.388]                   name <- added[[kk]]
[17:47:00.388]                   NAME <- NAMES[[kk]]
[17:47:00.388]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.388]                     next
[17:47:00.388]                   args[[name]] <- ""
[17:47:00.388]                 }
[17:47:00.388]                 NAMES <- toupper(removed)
[17:47:00.388]                 for (kk in seq_along(NAMES)) {
[17:47:00.388]                   name <- removed[[kk]]
[17:47:00.388]                   NAME <- NAMES[[kk]]
[17:47:00.388]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.388]                     next
[17:47:00.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.388]                 }
[17:47:00.388]                 if (length(args) > 0) 
[17:47:00.388]                   base::do.call(base::Sys.setenv, args = args)
[17:47:00.388]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:00.388]             }
[17:47:00.388]             else {
[17:47:00.388]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:00.388]             }
[17:47:00.388]             {
[17:47:00.388]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:00.388]                   0L) {
[17:47:00.388]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:00.388]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:00.388]                   base::options(opts)
[17:47:00.388]                 }
[17:47:00.388]                 {
[17:47:00.388]                   {
[17:47:00.388]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:00.388]                     NULL
[17:47:00.388]                   }
[17:47:00.388]                   options(future.plan = NULL)
[17:47:00.388]                   if (is.na(NA_character_)) 
[17:47:00.388]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.388]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:00.388]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:00.388]                     .init = FALSE)
[17:47:00.388]                 }
[17:47:00.388]             }
[17:47:00.388]         }
[17:47:00.388]     })
[17:47:00.388]     if (TRUE) {
[17:47:00.388]         base::sink(type = "output", split = FALSE)
[17:47:00.388]         if (TRUE) {
[17:47:00.388]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:00.388]         }
[17:47:00.388]         else {
[17:47:00.388]             ...future.result["stdout"] <- base::list(NULL)
[17:47:00.388]         }
[17:47:00.388]         base::close(...future.stdout)
[17:47:00.388]         ...future.stdout <- NULL
[17:47:00.388]     }
[17:47:00.388]     ...future.result$conditions <- ...future.conditions
[17:47:00.388]     ...future.result$finished <- base::Sys.time()
[17:47:00.388]     ...future.result
[17:47:00.388] }
[17:47:00.442] MultisessionFuture started
[17:47:00.443] - Launch lazy future ... done
[17:47:00.443] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #2 (frees up background process #2)
> message(sprintf("b = %s\n", sQuote(b)))
[17:47:00.443] result() for ClusterFuture ...
[17:47:00.443] receiveMessageFromWorker() for ClusterFuture ...
[17:47:00.443] - Validating connection of MultisessionFuture
[17:47:00.476] - received message: FutureResult
[17:47:00.476] - Received FutureResult
[17:47:00.476] - Erased future from FutureRegistry
[17:47:00.476] result() for ClusterFuture ...
[17:47:00.477] - result already collected: FutureResult
[17:47:00.477] result() for ClusterFuture ... done
[17:47:00.477] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:00.477] result() for ClusterFuture ... done
[17:47:00.477] result() for ClusterFuture ...
[17:47:00.480] - result already collected: FutureResult
[17:47:00.481] result() for ClusterFuture ... done
b = ‘a’

> 
> ## Create future #3 (consumes background process #2)
> ## THIS IS THE TRICKY PART:
> ## Two globals are identified `env` and `b` and both are resolved.
> ## However, object `env[[b]]` (here element `a` of environment `env`)
> ## is not touched and therefore not resolved (since it is a future)
> ## unless environment `env` is resolved recursively. (Issue #49)
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:47:00.481] getGlobalsAndPackages() ...
[17:47:00.481] Searching for globals...
[17:47:00.485] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:47:00.486] Searching for globals ... DONE
[17:47:00.486] Resolving globals: TRUE
[17:47:00.486] Resolving any globals that are futures ...
[17:47:00.486] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:47:00.486] Resolving any globals that are futures ... DONE
[17:47:00.486] Resolving futures part of globals (recursively) ...
[17:47:00.487] resolve() on list ...
[17:47:00.487]  recursive: 99
[17:47:00.487]  length: 2
[17:47:00.488]  elements: ‘env’, ‘b’
[17:47:00.488] resolve() on environment ...
[17:47:00.488]  recursive: 98
[17:47:00.488]  elements: [1] ‘.future_a’, ‘a’
[17:47:00.489] receiveMessageFromWorker() for ClusterFuture ...
[17:47:00.489] - Validating connection of MultisessionFuture
[17:47:00.489] - received message: FutureResult
[17:47:00.490] - Received FutureResult
[17:47:00.490] - Erased future from FutureRegistry
[17:47:00.490] result() for ClusterFuture ...
[17:47:00.490] - result already collected: FutureResult
[17:47:00.490] result() for ClusterFuture ... done
[17:47:00.490] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:00.490] Future #1
[17:47:00.490] result() for ClusterFuture ...
[17:47:00.490] - result already collected: FutureResult
[17:47:00.490] result() for ClusterFuture ... done
[17:47:00.491] result() for ClusterFuture ...
[17:47:00.491] - result already collected: FutureResult
[17:47:00.491] result() for ClusterFuture ... done
[17:47:00.491] A MultisessionFuture was resolved
[17:47:00.491]  length: 0 (resolved future 1)
[17:47:00.491] resolve() on environment ... DONE
[17:47:00.491]  length: 1 (resolved future 1)
[17:47:00.491]  length: 0 (resolved future 2)
[17:47:00.491] resolve() on list ... DONE
[17:47:00.492] - globals: [2] ‘env’, ‘b’
[17:47:00.492] Resolving futures part of globals (recursively) ... DONE
[17:47:00.492] The total size of the 2 globals is 4.29 KiB (4392 bytes)
[17:47:00.493] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 4.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘env’ (4.18 KiB of class ‘environment’) and ‘b’ (112 bytes of class ‘character’)
[17:47:00.493] - globals: [2] ‘env’, ‘b’
[17:47:00.493] 
[17:47:00.493] getGlobalsAndPackages() ... DONE
[17:47:00.494] run() for ‘Future’ ...
[17:47:00.494] - state: ‘created’
[17:47:00.494] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:00.504] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:00.504] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:00.504]   - Field: ‘node’
[17:47:00.505]   - Field: ‘label’
[17:47:00.505]   - Field: ‘local’
[17:47:00.505]   - Field: ‘owner’
[17:47:00.505]   - Field: ‘envir’
[17:47:00.505]   - Field: ‘workers’
[17:47:00.505]   - Field: ‘packages’
[17:47:00.505]   - Field: ‘gc’
[17:47:00.505]   - Field: ‘conditions’
[17:47:00.505]   - Field: ‘persistent’
[17:47:00.505]   - Field: ‘expr’
[17:47:00.505]   - Field: ‘uuid’
[17:47:00.506]   - Field: ‘seed’
[17:47:00.506]   - Field: ‘version’
[17:47:00.506]   - Field: ‘result’
[17:47:00.506]   - Field: ‘asynchronous’
[17:47:00.506]   - Field: ‘calls’
[17:47:00.506]   - Field: ‘globals’
[17:47:00.506]   - Field: ‘stdout’
[17:47:00.506]   - Field: ‘earlySignal’
[17:47:00.506]   - Field: ‘lazy’
[17:47:00.506]   - Field: ‘state’
[17:47:00.506] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:00.507] - Launch lazy future ...
[17:47:00.507] Packages needed by the future expression (n = 0): <none>
[17:47:00.507] Packages needed by future strategies (n = 0): <none>
[17:47:00.507] {
[17:47:00.507]     {
[17:47:00.507]         {
[17:47:00.507]             ...future.startTime <- base::Sys.time()
[17:47:00.507]             {
[17:47:00.507]                 {
[17:47:00.507]                   {
[17:47:00.507]                     {
[17:47:00.507]                       base::local({
[17:47:00.507]                         has_future <- base::requireNamespace("future", 
[17:47:00.507]                           quietly = TRUE)
[17:47:00.507]                         if (has_future) {
[17:47:00.507]                           ns <- base::getNamespace("future")
[17:47:00.507]                           version <- ns[[".package"]][["version"]]
[17:47:00.507]                           if (is.null(version)) 
[17:47:00.507]                             version <- utils::packageVersion("future")
[17:47:00.507]                         }
[17:47:00.507]                         else {
[17:47:00.507]                           version <- NULL
[17:47:00.507]                         }
[17:47:00.507]                         if (!has_future || version < "1.8.0") {
[17:47:00.507]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:00.507]                             "", base::R.version$version.string), 
[17:47:00.507]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:00.507]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:00.507]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:00.507]                               "release", "version")], collapse = " "), 
[17:47:00.507]                             hostname = base::Sys.info()[["nodename"]])
[17:47:00.507]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:00.507]                             info)
[17:47:00.507]                           info <- base::paste(info, collapse = "; ")
[17:47:00.507]                           if (!has_future) {
[17:47:00.507]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:00.507]                               info)
[17:47:00.507]                           }
[17:47:00.507]                           else {
[17:47:00.507]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:00.507]                               info, version)
[17:47:00.507]                           }
[17:47:00.507]                           base::stop(msg)
[17:47:00.507]                         }
[17:47:00.507]                       })
[17:47:00.507]                     }
[17:47:00.507]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:00.507]                     base::options(mc.cores = 1L)
[17:47:00.507]                   }
[17:47:00.507]                   ...future.strategy.old <- future::plan("list")
[17:47:00.507]                   options(future.plan = NULL)
[17:47:00.507]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.507]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:00.507]                 }
[17:47:00.507]                 ...future.workdir <- getwd()
[17:47:00.507]             }
[17:47:00.507]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:00.507]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:00.507]         }
[17:47:00.507]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:00.507]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:00.507]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:00.507]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:47:00.507]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:00.507]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:00.507]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:00.507]             base::names(...future.oldOptions))
[17:47:00.507]     }
[17:47:00.507]     if (FALSE) {
[17:47:00.507]     }
[17:47:00.507]     else {
[17:47:00.507]         if (TRUE) {
[17:47:00.507]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:00.507]                 open = "w")
[17:47:00.507]         }
[17:47:00.507]         else {
[17:47:00.507]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:00.507]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:00.507]         }
[17:47:00.507]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:00.507]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:00.507]             base::sink(type = "output", split = FALSE)
[17:47:00.507]             base::close(...future.stdout)
[17:47:00.507]         }, add = TRUE)
[17:47:00.507]     }
[17:47:00.507]     ...future.frame <- base::sys.nframe()
[17:47:00.507]     ...future.conditions <- base::list()
[17:47:00.507]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:00.507]     if (FALSE) {
[17:47:00.507]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:00.507]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:00.507]     }
[17:47:00.507]     ...future.result <- base::tryCatch({
[17:47:00.507]         base::withCallingHandlers({
[17:47:00.507]             ...future.value <- base::withVisible(base::local({
[17:47:00.507]                 ...future.makeSendCondition <- base::local({
[17:47:00.507]                   sendCondition <- NULL
[17:47:00.507]                   function(frame = 1L) {
[17:47:00.507]                     if (is.function(sendCondition)) 
[17:47:00.507]                       return(sendCondition)
[17:47:00.507]                     ns <- getNamespace("parallel")
[17:47:00.507]                     if (exists("sendData", mode = "function", 
[17:47:00.507]                       envir = ns)) {
[17:47:00.507]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:00.507]                         envir = ns)
[17:47:00.507]                       envir <- sys.frame(frame)
[17:47:00.507]                       master <- NULL
[17:47:00.507]                       while (!identical(envir, .GlobalEnv) && 
[17:47:00.507]                         !identical(envir, emptyenv())) {
[17:47:00.507]                         if (exists("master", mode = "list", envir = envir, 
[17:47:00.507]                           inherits = FALSE)) {
[17:47:00.507]                           master <- get("master", mode = "list", 
[17:47:00.507]                             envir = envir, inherits = FALSE)
[17:47:00.507]                           if (inherits(master, c("SOCKnode", 
[17:47:00.507]                             "SOCK0node"))) {
[17:47:00.507]                             sendCondition <<- function(cond) {
[17:47:00.507]                               data <- list(type = "VALUE", value = cond, 
[17:47:00.507]                                 success = TRUE)
[17:47:00.507]                               parallel_sendData(master, data)
[17:47:00.507]                             }
[17:47:00.507]                             return(sendCondition)
[17:47:00.507]                           }
[17:47:00.507]                         }
[17:47:00.507]                         frame <- frame + 1L
[17:47:00.507]                         envir <- sys.frame(frame)
[17:47:00.507]                       }
[17:47:00.507]                     }
[17:47:00.507]                     sendCondition <<- function(cond) NULL
[17:47:00.507]                   }
[17:47:00.507]                 })
[17:47:00.507]                 withCallingHandlers({
[17:47:00.507]                   {
[17:47:00.507]                     env[[b]]
[17:47:00.507]                   }
[17:47:00.507]                 }, immediateCondition = function(cond) {
[17:47:00.507]                   sendCondition <- ...future.makeSendCondition()
[17:47:00.507]                   sendCondition(cond)
[17:47:00.507]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.507]                   {
[17:47:00.507]                     inherits <- base::inherits
[17:47:00.507]                     invokeRestart <- base::invokeRestart
[17:47:00.507]                     is.null <- base::is.null
[17:47:00.507]                     muffled <- FALSE
[17:47:00.507]                     if (inherits(cond, "message")) {
[17:47:00.507]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:00.507]                       if (muffled) 
[17:47:00.507]                         invokeRestart("muffleMessage")
[17:47:00.507]                     }
[17:47:00.507]                     else if (inherits(cond, "warning")) {
[17:47:00.507]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:00.507]                       if (muffled) 
[17:47:00.507]                         invokeRestart("muffleWarning")
[17:47:00.507]                     }
[17:47:00.507]                     else if (inherits(cond, "condition")) {
[17:47:00.507]                       if (!is.null(pattern)) {
[17:47:00.507]                         computeRestarts <- base::computeRestarts
[17:47:00.507]                         grepl <- base::grepl
[17:47:00.507]                         restarts <- computeRestarts(cond)
[17:47:00.507]                         for (restart in restarts) {
[17:47:00.507]                           name <- restart$name
[17:47:00.507]                           if (is.null(name)) 
[17:47:00.507]                             next
[17:47:00.507]                           if (!grepl(pattern, name)) 
[17:47:00.507]                             next
[17:47:00.507]                           invokeRestart(restart)
[17:47:00.507]                           muffled <- TRUE
[17:47:00.507]                           break
[17:47:00.507]                         }
[17:47:00.507]                       }
[17:47:00.507]                     }
[17:47:00.507]                     invisible(muffled)
[17:47:00.507]                   }
[17:47:00.507]                   muffleCondition(cond)
[17:47:00.507]                 })
[17:47:00.507]             }))
[17:47:00.507]             future::FutureResult(value = ...future.value$value, 
[17:47:00.507]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.507]                   ...future.rng), globalenv = if (FALSE) 
[17:47:00.507]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:00.507]                     ...future.globalenv.names))
[17:47:00.507]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:00.507]         }, condition = base::local({
[17:47:00.507]             c <- base::c
[17:47:00.507]             inherits <- base::inherits
[17:47:00.507]             invokeRestart <- base::invokeRestart
[17:47:00.507]             length <- base::length
[17:47:00.507]             list <- base::list
[17:47:00.507]             seq.int <- base::seq.int
[17:47:00.507]             signalCondition <- base::signalCondition
[17:47:00.507]             sys.calls <- base::sys.calls
[17:47:00.507]             `[[` <- base::`[[`
[17:47:00.507]             `+` <- base::`+`
[17:47:00.507]             `<<-` <- base::`<<-`
[17:47:00.507]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:00.507]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:00.507]                   3L)]
[17:47:00.507]             }
[17:47:00.507]             function(cond) {
[17:47:00.507]                 is_error <- inherits(cond, "error")
[17:47:00.507]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:00.507]                   NULL)
[17:47:00.507]                 if (is_error) {
[17:47:00.507]                   sessionInformation <- function() {
[17:47:00.507]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:00.507]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:00.507]                       search = base::search(), system = base::Sys.info())
[17:47:00.507]                   }
[17:47:00.507]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.507]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:00.507]                     cond$call), session = sessionInformation(), 
[17:47:00.507]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:00.507]                   signalCondition(cond)
[17:47:00.507]                 }
[17:47:00.507]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:00.507]                 "immediateCondition"))) {
[17:47:00.507]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:00.507]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.507]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:00.507]                   if (TRUE && !signal) {
[17:47:00.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.507]                     {
[17:47:00.507]                       inherits <- base::inherits
[17:47:00.507]                       invokeRestart <- base::invokeRestart
[17:47:00.507]                       is.null <- base::is.null
[17:47:00.507]                       muffled <- FALSE
[17:47:00.507]                       if (inherits(cond, "message")) {
[17:47:00.507]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.507]                         if (muffled) 
[17:47:00.507]                           invokeRestart("muffleMessage")
[17:47:00.507]                       }
[17:47:00.507]                       else if (inherits(cond, "warning")) {
[17:47:00.507]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.507]                         if (muffled) 
[17:47:00.507]                           invokeRestart("muffleWarning")
[17:47:00.507]                       }
[17:47:00.507]                       else if (inherits(cond, "condition")) {
[17:47:00.507]                         if (!is.null(pattern)) {
[17:47:00.507]                           computeRestarts <- base::computeRestarts
[17:47:00.507]                           grepl <- base::grepl
[17:47:00.507]                           restarts <- computeRestarts(cond)
[17:47:00.507]                           for (restart in restarts) {
[17:47:00.507]                             name <- restart$name
[17:47:00.507]                             if (is.null(name)) 
[17:47:00.507]                               next
[17:47:00.507]                             if (!grepl(pattern, name)) 
[17:47:00.507]                               next
[17:47:00.507]                             invokeRestart(restart)
[17:47:00.507]                             muffled <- TRUE
[17:47:00.507]                             break
[17:47:00.507]                           }
[17:47:00.507]                         }
[17:47:00.507]                       }
[17:47:00.507]                       invisible(muffled)
[17:47:00.507]                     }
[17:47:00.507]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.507]                   }
[17:47:00.507]                 }
[17:47:00.507]                 else {
[17:47:00.507]                   if (TRUE) {
[17:47:00.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.507]                     {
[17:47:00.507]                       inherits <- base::inherits
[17:47:00.507]                       invokeRestart <- base::invokeRestart
[17:47:00.507]                       is.null <- base::is.null
[17:47:00.507]                       muffled <- FALSE
[17:47:00.507]                       if (inherits(cond, "message")) {
[17:47:00.507]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.507]                         if (muffled) 
[17:47:00.507]                           invokeRestart("muffleMessage")
[17:47:00.507]                       }
[17:47:00.507]                       else if (inherits(cond, "warning")) {
[17:47:00.507]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.507]                         if (muffled) 
[17:47:00.507]                           invokeRestart("muffleWarning")
[17:47:00.507]                       }
[17:47:00.507]                       else if (inherits(cond, "condition")) {
[17:47:00.507]                         if (!is.null(pattern)) {
[17:47:00.507]                           computeRestarts <- base::computeRestarts
[17:47:00.507]                           grepl <- base::grepl
[17:47:00.507]                           restarts <- computeRestarts(cond)
[17:47:00.507]                           for (restart in restarts) {
[17:47:00.507]                             name <- restart$name
[17:47:00.507]                             if (is.null(name)) 
[17:47:00.507]                               next
[17:47:00.507]                             if (!grepl(pattern, name)) 
[17:47:00.507]                               next
[17:47:00.507]                             invokeRestart(restart)
[17:47:00.507]                             muffled <- TRUE
[17:47:00.507]                             break
[17:47:00.507]                           }
[17:47:00.507]                         }
[17:47:00.507]                       }
[17:47:00.507]                       invisible(muffled)
[17:47:00.507]                     }
[17:47:00.507]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.507]                   }
[17:47:00.507]                 }
[17:47:00.507]             }
[17:47:00.507]         }))
[17:47:00.507]     }, error = function(ex) {
[17:47:00.507]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:00.507]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.507]                 ...future.rng), started = ...future.startTime, 
[17:47:00.507]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:00.507]             version = "1.8"), class = "FutureResult")
[17:47:00.507]     }, finally = {
[17:47:00.507]         if (!identical(...future.workdir, getwd())) 
[17:47:00.507]             setwd(...future.workdir)
[17:47:00.507]         {
[17:47:00.507]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:00.507]                 ...future.oldOptions$nwarnings <- NULL
[17:47:00.507]             }
[17:47:00.507]             base::options(...future.oldOptions)
[17:47:00.507]             if (.Platform$OS.type == "windows") {
[17:47:00.507]                 old_names <- names(...future.oldEnvVars)
[17:47:00.507]                 envs <- base::Sys.getenv()
[17:47:00.507]                 names <- names(envs)
[17:47:00.507]                 common <- intersect(names, old_names)
[17:47:00.507]                 added <- setdiff(names, old_names)
[17:47:00.507]                 removed <- setdiff(old_names, names)
[17:47:00.507]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:00.507]                   envs[common]]
[17:47:00.507]                 NAMES <- toupper(changed)
[17:47:00.507]                 args <- list()
[17:47:00.507]                 for (kk in seq_along(NAMES)) {
[17:47:00.507]                   name <- changed[[kk]]
[17:47:00.507]                   NAME <- NAMES[[kk]]
[17:47:00.507]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.507]                     next
[17:47:00.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.507]                 }
[17:47:00.507]                 NAMES <- toupper(added)
[17:47:00.507]                 for (kk in seq_along(NAMES)) {
[17:47:00.507]                   name <- added[[kk]]
[17:47:00.507]                   NAME <- NAMES[[kk]]
[17:47:00.507]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.507]                     next
[17:47:00.507]                   args[[name]] <- ""
[17:47:00.507]                 }
[17:47:00.507]                 NAMES <- toupper(removed)
[17:47:00.507]                 for (kk in seq_along(NAMES)) {
[17:47:00.507]                   name <- removed[[kk]]
[17:47:00.507]                   NAME <- NAMES[[kk]]
[17:47:00.507]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.507]                     next
[17:47:00.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.507]                 }
[17:47:00.507]                 if (length(args) > 0) 
[17:47:00.507]                   base::do.call(base::Sys.setenv, args = args)
[17:47:00.507]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:00.507]             }
[17:47:00.507]             else {
[17:47:00.507]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:00.507]             }
[17:47:00.507]             {
[17:47:00.507]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:00.507]                   0L) {
[17:47:00.507]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:00.507]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:00.507]                   base::options(opts)
[17:47:00.507]                 }
[17:47:00.507]                 {
[17:47:00.507]                   {
[17:47:00.507]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:00.507]                     NULL
[17:47:00.507]                   }
[17:47:00.507]                   options(future.plan = NULL)
[17:47:00.507]                   if (is.na(NA_character_)) 
[17:47:00.507]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.507]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:00.507]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:00.507]                     .init = FALSE)
[17:47:00.507]                 }
[17:47:00.507]             }
[17:47:00.507]         }
[17:47:00.507]     })
[17:47:00.507]     if (TRUE) {
[17:47:00.507]         base::sink(type = "output", split = FALSE)
[17:47:00.507]         if (TRUE) {
[17:47:00.507]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:00.507]         }
[17:47:00.507]         else {
[17:47:00.507]             ...future.result["stdout"] <- base::list(NULL)
[17:47:00.507]         }
[17:47:00.507]         base::close(...future.stdout)
[17:47:00.507]         ...future.stdout <- NULL
[17:47:00.507]     }
[17:47:00.507]     ...future.result$conditions <- ...future.conditions
[17:47:00.507]     ...future.result$finished <- base::Sys.time()
[17:47:00.507]     ...future.result
[17:47:00.507] }
[17:47:00.510] Exporting 2 global objects (4.29 KiB) to cluster node #1 ...
[17:47:00.511] Exporting ‘env’ (4.18 KiB) to cluster node #1 ...
[17:47:00.522] Exporting ‘env’ (4.18 KiB) to cluster node #1 ... DONE
[17:47:00.523] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[17:47:00.523] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[17:47:00.523] Exporting 2 global objects (4.29 KiB) to cluster node #1 ... DONE
[17:47:00.524] MultisessionFuture started
[17:47:00.524] - Launch lazy future ... done
[17:47:00.524] run() for ‘MultisessionFuture’ ... done
> 
> ## Resolve future #3
> message(sprintf("y = %s\n", y))
[17:47:00.524] result() for ClusterFuture ...
[17:47:00.524] receiveMessageFromWorker() for ClusterFuture ...
[17:47:00.525] - Validating connection of MultisessionFuture
[17:47:00.570] - received message: FutureResult
[17:47:00.571] - Received FutureResult
[17:47:00.571] - Erased future from FutureRegistry
[17:47:00.571] result() for ClusterFuture ...
[17:47:00.571] - result already collected: FutureResult
[17:47:00.571] result() for ClusterFuture ... done
[17:47:00.571] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:00.571] result() for ClusterFuture ... done
[17:47:00.571] result() for ClusterFuture ...
[17:47:00.571] - result already collected: FutureResult
[17:47:00.572] result() for ClusterFuture ... done
y = 5

> 
> ## Resolve future #1 if not already done
> str(as.list(env))
[17:47:00.572] result() for ClusterFuture ...
[17:47:00.572] - result already collected: FutureResult
[17:47:00.572] result() for ClusterFuture ... done
[17:47:00.572] result() for ClusterFuture ...
[17:47:00.572] - result already collected: FutureResult
[17:47:00.572] result() for ClusterFuture ... done
List of 1
 $ a: num 5
> 
> ## Create future #4
> ## Since future #1 is resolved it will work at this point
> y %<-% { env[[b]] }
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[17:47:00.573] getGlobalsAndPackages() ...
[17:47:00.574] Searching for globals...
[17:47:00.574] - globals found: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:47:00.575] Searching for globals ... DONE
[17:47:00.575] Resolving globals: TRUE
[17:47:00.575] Resolving any globals that are futures ...
[17:47:00.575] - globals: [4] ‘{’, ‘[[’, ‘env’, ‘b’
[17:47:00.575] Resolving any globals that are futures ... DONE
[17:47:00.575] Resolving futures part of globals (recursively) ...
[17:47:00.576] resolve() on list ...
[17:47:00.576]  recursive: 99
[17:47:00.576]  length: 2
[17:47:00.576]  elements: ‘env’, ‘b’
[17:47:00.576] resolve() on environment ...
[17:47:00.576]  recursive: 98
[17:47:00.576]  elements: [1] ‘a’
[17:47:00.577]  length: 0 (resolved future 1)
[17:47:00.577] resolve() on environment ... DONE
[17:47:00.577]  length: 1 (resolved future 1)
[17:47:00.577]  length: 0 (resolved future 2)
[17:47:00.577] resolve() on list ... DONE
[17:47:00.577] - globals: [2] ‘env’, ‘b’
[17:47:00.577] Resolving futures part of globals (recursively) ... DONE
[17:47:00.577] The total size of the 2 globals is 168 bytes (168 bytes)
[17:47:00.578] The total size of the 2 globals exported for future expression (‘{; env[[b]]; }’) is 168 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘b’ (112 bytes of class ‘character’) and ‘env’ (56 bytes of class ‘environment’)
[17:47:00.578] - globals: [2] ‘env’, ‘b’
[17:47:00.578] 
[17:47:00.578] getGlobalsAndPackages() ... DONE
[17:47:00.578] run() for ‘Future’ ...
[17:47:00.578] - state: ‘created’
[17:47:00.579] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:00.590] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:00.590] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:00.591]   - Field: ‘node’
[17:47:00.591]   - Field: ‘label’
[17:47:00.591]   - Field: ‘local’
[17:47:00.591]   - Field: ‘owner’
[17:47:00.591]   - Field: ‘envir’
[17:47:00.591]   - Field: ‘workers’
[17:47:00.591]   - Field: ‘packages’
[17:47:00.591]   - Field: ‘gc’
[17:47:00.591]   - Field: ‘conditions’
[17:47:00.591]   - Field: ‘persistent’
[17:47:00.592]   - Field: ‘expr’
[17:47:00.592]   - Field: ‘uuid’
[17:47:00.592]   - Field: ‘seed’
[17:47:00.592]   - Field: ‘version’
[17:47:00.592]   - Field: ‘result’
[17:47:00.592]   - Field: ‘asynchronous’
[17:47:00.592]   - Field: ‘calls’
[17:47:00.592]   - Field: ‘globals’
[17:47:00.592]   - Field: ‘stdout’
[17:47:00.592]   - Field: ‘earlySignal’
[17:47:00.592]   - Field: ‘lazy’
[17:47:00.593]   - Field: ‘state’
[17:47:00.593] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:00.593] - Launch lazy future ...
[17:47:00.593] Packages needed by the future expression (n = 0): <none>
[17:47:00.593] Packages needed by future strategies (n = 0): <none>
[17:47:00.594] {
[17:47:00.594]     {
[17:47:00.594]         {
[17:47:00.594]             ...future.startTime <- base::Sys.time()
[17:47:00.594]             {
[17:47:00.594]                 {
[17:47:00.594]                   {
[17:47:00.594]                     {
[17:47:00.594]                       base::local({
[17:47:00.594]                         has_future <- base::requireNamespace("future", 
[17:47:00.594]                           quietly = TRUE)
[17:47:00.594]                         if (has_future) {
[17:47:00.594]                           ns <- base::getNamespace("future")
[17:47:00.594]                           version <- ns[[".package"]][["version"]]
[17:47:00.594]                           if (is.null(version)) 
[17:47:00.594]                             version <- utils::packageVersion("future")
[17:47:00.594]                         }
[17:47:00.594]                         else {
[17:47:00.594]                           version <- NULL
[17:47:00.594]                         }
[17:47:00.594]                         if (!has_future || version < "1.8.0") {
[17:47:00.594]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:00.594]                             "", base::R.version$version.string), 
[17:47:00.594]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:00.594]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:00.594]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:00.594]                               "release", "version")], collapse = " "), 
[17:47:00.594]                             hostname = base::Sys.info()[["nodename"]])
[17:47:00.594]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:00.594]                             info)
[17:47:00.594]                           info <- base::paste(info, collapse = "; ")
[17:47:00.594]                           if (!has_future) {
[17:47:00.594]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:00.594]                               info)
[17:47:00.594]                           }
[17:47:00.594]                           else {
[17:47:00.594]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:00.594]                               info, version)
[17:47:00.594]                           }
[17:47:00.594]                           base::stop(msg)
[17:47:00.594]                         }
[17:47:00.594]                       })
[17:47:00.594]                     }
[17:47:00.594]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:00.594]                     base::options(mc.cores = 1L)
[17:47:00.594]                   }
[17:47:00.594]                   ...future.strategy.old <- future::plan("list")
[17:47:00.594]                   options(future.plan = NULL)
[17:47:00.594]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.594]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:00.594]                 }
[17:47:00.594]                 ...future.workdir <- getwd()
[17:47:00.594]             }
[17:47:00.594]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:00.594]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:00.594]         }
[17:47:00.594]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:00.594]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:00.594]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:00.594]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[17:47:00.594]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:00.594]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:00.594]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:00.594]             base::names(...future.oldOptions))
[17:47:00.594]     }
[17:47:00.594]     if (FALSE) {
[17:47:00.594]     }
[17:47:00.594]     else {
[17:47:00.594]         if (TRUE) {
[17:47:00.594]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:00.594]                 open = "w")
[17:47:00.594]         }
[17:47:00.594]         else {
[17:47:00.594]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:00.594]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:00.594]         }
[17:47:00.594]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:00.594]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:00.594]             base::sink(type = "output", split = FALSE)
[17:47:00.594]             base::close(...future.stdout)
[17:47:00.594]         }, add = TRUE)
[17:47:00.594]     }
[17:47:00.594]     ...future.frame <- base::sys.nframe()
[17:47:00.594]     ...future.conditions <- base::list()
[17:47:00.594]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:00.594]     if (FALSE) {
[17:47:00.594]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:00.594]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:00.594]     }
[17:47:00.594]     ...future.result <- base::tryCatch({
[17:47:00.594]         base::withCallingHandlers({
[17:47:00.594]             ...future.value <- base::withVisible(base::local({
[17:47:00.594]                 ...future.makeSendCondition <- base::local({
[17:47:00.594]                   sendCondition <- NULL
[17:47:00.594]                   function(frame = 1L) {
[17:47:00.594]                     if (is.function(sendCondition)) 
[17:47:00.594]                       return(sendCondition)
[17:47:00.594]                     ns <- getNamespace("parallel")
[17:47:00.594]                     if (exists("sendData", mode = "function", 
[17:47:00.594]                       envir = ns)) {
[17:47:00.594]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:00.594]                         envir = ns)
[17:47:00.594]                       envir <- sys.frame(frame)
[17:47:00.594]                       master <- NULL
[17:47:00.594]                       while (!identical(envir, .GlobalEnv) && 
[17:47:00.594]                         !identical(envir, emptyenv())) {
[17:47:00.594]                         if (exists("master", mode = "list", envir = envir, 
[17:47:00.594]                           inherits = FALSE)) {
[17:47:00.594]                           master <- get("master", mode = "list", 
[17:47:00.594]                             envir = envir, inherits = FALSE)
[17:47:00.594]                           if (inherits(master, c("SOCKnode", 
[17:47:00.594]                             "SOCK0node"))) {
[17:47:00.594]                             sendCondition <<- function(cond) {
[17:47:00.594]                               data <- list(type = "VALUE", value = cond, 
[17:47:00.594]                                 success = TRUE)
[17:47:00.594]                               parallel_sendData(master, data)
[17:47:00.594]                             }
[17:47:00.594]                             return(sendCondition)
[17:47:00.594]                           }
[17:47:00.594]                         }
[17:47:00.594]                         frame <- frame + 1L
[17:47:00.594]                         envir <- sys.frame(frame)
[17:47:00.594]                       }
[17:47:00.594]                     }
[17:47:00.594]                     sendCondition <<- function(cond) NULL
[17:47:00.594]                   }
[17:47:00.594]                 })
[17:47:00.594]                 withCallingHandlers({
[17:47:00.594]                   {
[17:47:00.594]                     env[[b]]
[17:47:00.594]                   }
[17:47:00.594]                 }, immediateCondition = function(cond) {
[17:47:00.594]                   sendCondition <- ...future.makeSendCondition()
[17:47:00.594]                   sendCondition(cond)
[17:47:00.594]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.594]                   {
[17:47:00.594]                     inherits <- base::inherits
[17:47:00.594]                     invokeRestart <- base::invokeRestart
[17:47:00.594]                     is.null <- base::is.null
[17:47:00.594]                     muffled <- FALSE
[17:47:00.594]                     if (inherits(cond, "message")) {
[17:47:00.594]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:00.594]                       if (muffled) 
[17:47:00.594]                         invokeRestart("muffleMessage")
[17:47:00.594]                     }
[17:47:00.594]                     else if (inherits(cond, "warning")) {
[17:47:00.594]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:00.594]                       if (muffled) 
[17:47:00.594]                         invokeRestart("muffleWarning")
[17:47:00.594]                     }
[17:47:00.594]                     else if (inherits(cond, "condition")) {
[17:47:00.594]                       if (!is.null(pattern)) {
[17:47:00.594]                         computeRestarts <- base::computeRestarts
[17:47:00.594]                         grepl <- base::grepl
[17:47:00.594]                         restarts <- computeRestarts(cond)
[17:47:00.594]                         for (restart in restarts) {
[17:47:00.594]                           name <- restart$name
[17:47:00.594]                           if (is.null(name)) 
[17:47:00.594]                             next
[17:47:00.594]                           if (!grepl(pattern, name)) 
[17:47:00.594]                             next
[17:47:00.594]                           invokeRestart(restart)
[17:47:00.594]                           muffled <- TRUE
[17:47:00.594]                           break
[17:47:00.594]                         }
[17:47:00.594]                       }
[17:47:00.594]                     }
[17:47:00.594]                     invisible(muffled)
[17:47:00.594]                   }
[17:47:00.594]                   muffleCondition(cond)
[17:47:00.594]                 })
[17:47:00.594]             }))
[17:47:00.594]             future::FutureResult(value = ...future.value$value, 
[17:47:00.594]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.594]                   ...future.rng), globalenv = if (FALSE) 
[17:47:00.594]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:00.594]                     ...future.globalenv.names))
[17:47:00.594]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:00.594]         }, condition = base::local({
[17:47:00.594]             c <- base::c
[17:47:00.594]             inherits <- base::inherits
[17:47:00.594]             invokeRestart <- base::invokeRestart
[17:47:00.594]             length <- base::length
[17:47:00.594]             list <- base::list
[17:47:00.594]             seq.int <- base::seq.int
[17:47:00.594]             signalCondition <- base::signalCondition
[17:47:00.594]             sys.calls <- base::sys.calls
[17:47:00.594]             `[[` <- base::`[[`
[17:47:00.594]             `+` <- base::`+`
[17:47:00.594]             `<<-` <- base::`<<-`
[17:47:00.594]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:00.594]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:00.594]                   3L)]
[17:47:00.594]             }
[17:47:00.594]             function(cond) {
[17:47:00.594]                 is_error <- inherits(cond, "error")
[17:47:00.594]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:00.594]                   NULL)
[17:47:00.594]                 if (is_error) {
[17:47:00.594]                   sessionInformation <- function() {
[17:47:00.594]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:00.594]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:00.594]                       search = base::search(), system = base::Sys.info())
[17:47:00.594]                   }
[17:47:00.594]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.594]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:00.594]                     cond$call), session = sessionInformation(), 
[17:47:00.594]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:00.594]                   signalCondition(cond)
[17:47:00.594]                 }
[17:47:00.594]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:00.594]                 "immediateCondition"))) {
[17:47:00.594]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:00.594]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.594]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:00.594]                   if (TRUE && !signal) {
[17:47:00.594]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.594]                     {
[17:47:00.594]                       inherits <- base::inherits
[17:47:00.594]                       invokeRestart <- base::invokeRestart
[17:47:00.594]                       is.null <- base::is.null
[17:47:00.594]                       muffled <- FALSE
[17:47:00.594]                       if (inherits(cond, "message")) {
[17:47:00.594]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.594]                         if (muffled) 
[17:47:00.594]                           invokeRestart("muffleMessage")
[17:47:00.594]                       }
[17:47:00.594]                       else if (inherits(cond, "warning")) {
[17:47:00.594]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.594]                         if (muffled) 
[17:47:00.594]                           invokeRestart("muffleWarning")
[17:47:00.594]                       }
[17:47:00.594]                       else if (inherits(cond, "condition")) {
[17:47:00.594]                         if (!is.null(pattern)) {
[17:47:00.594]                           computeRestarts <- base::computeRestarts
[17:47:00.594]                           grepl <- base::grepl
[17:47:00.594]                           restarts <- computeRestarts(cond)
[17:47:00.594]                           for (restart in restarts) {
[17:47:00.594]                             name <- restart$name
[17:47:00.594]                             if (is.null(name)) 
[17:47:00.594]                               next
[17:47:00.594]                             if (!grepl(pattern, name)) 
[17:47:00.594]                               next
[17:47:00.594]                             invokeRestart(restart)
[17:47:00.594]                             muffled <- TRUE
[17:47:00.594]                             break
[17:47:00.594]                           }
[17:47:00.594]                         }
[17:47:00.594]                       }
[17:47:00.594]                       invisible(muffled)
[17:47:00.594]                     }
[17:47:00.594]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.594]                   }
[17:47:00.594]                 }
[17:47:00.594]                 else {
[17:47:00.594]                   if (TRUE) {
[17:47:00.594]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.594]                     {
[17:47:00.594]                       inherits <- base::inherits
[17:47:00.594]                       invokeRestart <- base::invokeRestart
[17:47:00.594]                       is.null <- base::is.null
[17:47:00.594]                       muffled <- FALSE
[17:47:00.594]                       if (inherits(cond, "message")) {
[17:47:00.594]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.594]                         if (muffled) 
[17:47:00.594]                           invokeRestart("muffleMessage")
[17:47:00.594]                       }
[17:47:00.594]                       else if (inherits(cond, "warning")) {
[17:47:00.594]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.594]                         if (muffled) 
[17:47:00.594]                           invokeRestart("muffleWarning")
[17:47:00.594]                       }
[17:47:00.594]                       else if (inherits(cond, "condition")) {
[17:47:00.594]                         if (!is.null(pattern)) {
[17:47:00.594]                           computeRestarts <- base::computeRestarts
[17:47:00.594]                           grepl <- base::grepl
[17:47:00.594]                           restarts <- computeRestarts(cond)
[17:47:00.594]                           for (restart in restarts) {
[17:47:00.594]                             name <- restart$name
[17:47:00.594]                             if (is.null(name)) 
[17:47:00.594]                               next
[17:47:00.594]                             if (!grepl(pattern, name)) 
[17:47:00.594]                               next
[17:47:00.594]                             invokeRestart(restart)
[17:47:00.594]                             muffled <- TRUE
[17:47:00.594]                             break
[17:47:00.594]                           }
[17:47:00.594]                         }
[17:47:00.594]                       }
[17:47:00.594]                       invisible(muffled)
[17:47:00.594]                     }
[17:47:00.594]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.594]                   }
[17:47:00.594]                 }
[17:47:00.594]             }
[17:47:00.594]         }))
[17:47:00.594]     }, error = function(ex) {
[17:47:00.594]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:00.594]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.594]                 ...future.rng), started = ...future.startTime, 
[17:47:00.594]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:00.594]             version = "1.8"), class = "FutureResult")
[17:47:00.594]     }, finally = {
[17:47:00.594]         if (!identical(...future.workdir, getwd())) 
[17:47:00.594]             setwd(...future.workdir)
[17:47:00.594]         {
[17:47:00.594]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:00.594]                 ...future.oldOptions$nwarnings <- NULL
[17:47:00.594]             }
[17:47:00.594]             base::options(...future.oldOptions)
[17:47:00.594]             if (.Platform$OS.type == "windows") {
[17:47:00.594]                 old_names <- names(...future.oldEnvVars)
[17:47:00.594]                 envs <- base::Sys.getenv()
[17:47:00.594]                 names <- names(envs)
[17:47:00.594]                 common <- intersect(names, old_names)
[17:47:00.594]                 added <- setdiff(names, old_names)
[17:47:00.594]                 removed <- setdiff(old_names, names)
[17:47:00.594]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:00.594]                   envs[common]]
[17:47:00.594]                 NAMES <- toupper(changed)
[17:47:00.594]                 args <- list()
[17:47:00.594]                 for (kk in seq_along(NAMES)) {
[17:47:00.594]                   name <- changed[[kk]]
[17:47:00.594]                   NAME <- NAMES[[kk]]
[17:47:00.594]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.594]                     next
[17:47:00.594]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.594]                 }
[17:47:00.594]                 NAMES <- toupper(added)
[17:47:00.594]                 for (kk in seq_along(NAMES)) {
[17:47:00.594]                   name <- added[[kk]]
[17:47:00.594]                   NAME <- NAMES[[kk]]
[17:47:00.594]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.594]                     next
[17:47:00.594]                   args[[name]] <- ""
[17:47:00.594]                 }
[17:47:00.594]                 NAMES <- toupper(removed)
[17:47:00.594]                 for (kk in seq_along(NAMES)) {
[17:47:00.594]                   name <- removed[[kk]]
[17:47:00.594]                   NAME <- NAMES[[kk]]
[17:47:00.594]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.594]                     next
[17:47:00.594]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.594]                 }
[17:47:00.594]                 if (length(args) > 0) 
[17:47:00.594]                   base::do.call(base::Sys.setenv, args = args)
[17:47:00.594]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:00.594]             }
[17:47:00.594]             else {
[17:47:00.594]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:00.594]             }
[17:47:00.594]             {
[17:47:00.594]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:00.594]                   0L) {
[17:47:00.594]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:00.594]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:00.594]                   base::options(opts)
[17:47:00.594]                 }
[17:47:00.594]                 {
[17:47:00.594]                   {
[17:47:00.594]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:00.594]                     NULL
[17:47:00.594]                   }
[17:47:00.594]                   options(future.plan = NULL)
[17:47:00.594]                   if (is.na(NA_character_)) 
[17:47:00.594]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.594]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:00.594]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:00.594]                     .init = FALSE)
[17:47:00.594]                 }
[17:47:00.594]             }
[17:47:00.594]         }
[17:47:00.594]     })
[17:47:00.594]     if (TRUE) {
[17:47:00.594]         base::sink(type = "output", split = FALSE)
[17:47:00.594]         if (TRUE) {
[17:47:00.594]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:00.594]         }
[17:47:00.594]         else {
[17:47:00.594]             ...future.result["stdout"] <- base::list(NULL)
[17:47:00.594]         }
[17:47:00.594]         base::close(...future.stdout)
[17:47:00.594]         ...future.stdout <- NULL
[17:47:00.594]     }
[17:47:00.594]     ...future.result$conditions <- ...future.conditions
[17:47:00.594]     ...future.result$finished <- base::Sys.time()
[17:47:00.594]     ...future.result
[17:47:00.594] }
[17:47:00.596] Exporting 2 global objects (168 bytes) to cluster node #1 ...
[17:47:00.597] Exporting ‘env’ (56 bytes) to cluster node #1 ...
[17:47:00.597] Exporting ‘env’ (56 bytes) to cluster node #1 ... DONE
[17:47:00.597] Exporting ‘b’ (112 bytes) to cluster node #1 ...
[17:47:00.597] Exporting ‘b’ (112 bytes) to cluster node #1 ... DONE
[17:47:00.598] Exporting 2 global objects (168 bytes) to cluster node #1 ... DONE
[17:47:00.598] MultisessionFuture started
[17:47:00.598] - Launch lazy future ... done
[17:47:00.598] run() for ‘MultisessionFuture’ ... done
> ## Resolve future #4
> message(sprintf("y = %s\n", y))
[17:47:00.599] result() for ClusterFuture ...
[17:47:00.599] receiveMessageFromWorker() for ClusterFuture ...
[17:47:00.599] - Validating connection of MultisessionFuture
[17:47:00.641] - received message: FutureResult
[17:47:00.642] - Received FutureResult
[17:47:00.642] - Erased future from FutureRegistry
[17:47:00.642] result() for ClusterFuture ...
[17:47:00.642] - result already collected: FutureResult
[17:47:00.642] result() for ClusterFuture ... done
[17:47:00.642] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:00.642] result() for ClusterFuture ... done
[17:47:00.642] result() for ClusterFuture ...
[17:47:00.643] - result already collected: FutureResult
[17:47:00.643] result() for ClusterFuture ... done
y = 5

> 
> message("*** Tricky use cases related to globals (part 2) ... DONE")
*** Tricky use cases related to globals (part 2) ... DONE
> 
> ## Cleanup
> setTimeLimit()
> source("incl/end.R")
[17:47:00.644] plan(): Setting new future strategy stack:
[17:47:00.644] List of future strategies:
[17:47:00.644] 1. FutureStrategy:
[17:47:00.644]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:00.644]    - tweaked: FALSE
[17:47:00.644]    - call: future::plan(oplan)
[17:47:00.645] plan(): nbrOfWorkers() = 1
> 
