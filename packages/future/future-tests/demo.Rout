
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:28.295] plan(): Setting new future strategy stack:
[18:03:28.296] List of future strategies:
[18:03:28.296] 1. sequential:
[18:03:28.296]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:28.296]    - tweaked: FALSE
[18:03:28.296]    - call: future::plan("sequential")
[18:03:28.319] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[18:03:28.358] plan(): Setting new future strategy stack:
[18:03:28.358] List of future strategies:
[18:03:28.358] 1. sequential:
[18:03:28.358]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:28.358]    - tweaked: FALSE
[18:03:28.358]    - call: plan(sequential)
[18:03:28.383] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[18:03:28.396] getGlobalsAndPackages() ...
[18:03:28.397] Searching for globals...
[18:03:28.410] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.410] Searching for globals ... DONE
[18:03:28.410] Resolving globals: FALSE
[18:03:28.416] The total size of the 2 globals is 224 bytes (224 bytes)
[18:03:28.417] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.417] - globals: [2] ‘x’, ‘i’
[18:03:28.417] 
[18:03:28.418] getGlobalsAndPackages() ... DONE
[18:03:28.419] getGlobalsAndPackages() ...
[18:03:28.419] Searching for globals...
[18:03:28.423] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.423] Searching for globals ... DONE
[18:03:28.423] Resolving globals: FALSE
[18:03:28.425] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[18:03:28.425] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.426] - globals: [2] ‘x’, ‘i’
[18:03:28.426] 
[18:03:28.426] getGlobalsAndPackages() ... DONE
[18:03:28.427] getGlobalsAndPackages() ...
[18:03:28.427] Searching for globals...
[18:03:28.431] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.431] Searching for globals ... DONE
[18:03:28.431] Resolving globals: FALSE
[18:03:28.433] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[18:03:28.434] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.434] - globals: [2] ‘x’, ‘i’
[18:03:28.435] 
[18:03:28.435] getGlobalsAndPackages() ... DONE
[18:03:28.436] getGlobalsAndPackages() ...
[18:03:28.436] Searching for globals...
[18:03:28.439] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.440] Searching for globals ... DONE
[18:03:28.440] Resolving globals: FALSE
[18:03:28.442] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[18:03:28.443] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.444] - globals: [2] ‘x’, ‘i’
[18:03:28.444] 
[18:03:28.444] getGlobalsAndPackages() ... DONE
[18:03:28.445] getGlobalsAndPackages() ...
[18:03:28.445] Searching for globals...
[18:03:28.448] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.449] Searching for globals ... DONE
[18:03:28.449] Resolving globals: FALSE
[18:03:28.452] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[18:03:28.453] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.453] - globals: [2] ‘x’, ‘i’
[18:03:28.454] 
[18:03:28.454] getGlobalsAndPackages() ... DONE
[18:03:28.455] getGlobalsAndPackages() ...
[18:03:28.455] Searching for globals...
[18:03:28.458] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.458] Searching for globals ... DONE
[18:03:28.459] Resolving globals: FALSE
[18:03:28.463] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[18:03:28.463] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.464] - globals: [2] ‘x’, ‘i’
[18:03:28.464] 
[18:03:28.464] getGlobalsAndPackages() ... DONE
[18:03:28.465] getGlobalsAndPackages() ...
[18:03:28.465] Searching for globals...
[18:03:28.471] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.471] Searching for globals ... DONE
[18:03:28.471] Resolving globals: FALSE
[18:03:28.476] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[18:03:28.476] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.477] - globals: [2] ‘x’, ‘i’
[18:03:28.477] 
[18:03:28.477] getGlobalsAndPackages() ... DONE
[18:03:28.478] getGlobalsAndPackages() ...
[18:03:28.478] Searching for globals...
[18:03:28.482] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.482] Searching for globals ... DONE
[18:03:28.482] Resolving globals: FALSE
[18:03:28.487] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[18:03:28.488] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.488] - globals: [2] ‘x’, ‘i’
[18:03:28.489] 
[18:03:28.489] getGlobalsAndPackages() ... DONE
[18:03:28.490] getGlobalsAndPackages() ...
[18:03:28.490] Searching for globals...
[18:03:28.493] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.494] Searching for globals ... DONE
[18:03:28.494] Resolving globals: FALSE
[18:03:28.499] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[18:03:28.500] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.501] - globals: [2] ‘x’, ‘i’
[18:03:28.501] 
[18:03:28.501] getGlobalsAndPackages() ... DONE
[18:03:28.502] getGlobalsAndPackages() ...
[18:03:28.502] Searching for globals...
[18:03:28.506] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.506] Searching for globals ... DONE
[18:03:28.506] Resolving globals: FALSE
[18:03:28.512] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[18:03:28.513] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.513] - globals: [2] ‘x’, ‘i’
[18:03:28.514] 
[18:03:28.514] getGlobalsAndPackages() ... DONE
[18:03:28.515] getGlobalsAndPackages() ...
[18:03:28.515] Searching for globals...
[18:03:28.520] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.521] Searching for globals ... DONE
[18:03:28.521] Resolving globals: FALSE
[18:03:28.527] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[18:03:28.528] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.529] - globals: [2] ‘x’, ‘i’
[18:03:28.529] 
[18:03:28.529] getGlobalsAndPackages() ... DONE
[18:03:28.530] getGlobalsAndPackages() ...
[18:03:28.530] Searching for globals...
[18:03:28.534] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.534] Searching for globals ... DONE
[18:03:28.534] Resolving globals: FALSE
[18:03:28.542] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[18:03:28.543] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.543] - globals: [2] ‘x’, ‘i’
[18:03:28.543] 
[18:03:28.544] getGlobalsAndPackages() ... DONE
[18:03:28.545] getGlobalsAndPackages() ...
[18:03:28.545] Searching for globals...
[18:03:28.549] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.549] Searching for globals ... DONE
[18:03:28.549] Resolving globals: FALSE
[18:03:28.557] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[18:03:28.558] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.559] - globals: [2] ‘x’, ‘i’
[18:03:28.559] 
[18:03:28.559] getGlobalsAndPackages() ... DONE
[18:03:28.560] getGlobalsAndPackages() ...
[18:03:28.560] Searching for globals...
[18:03:28.564] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.564] Searching for globals ... DONE
[18:03:28.564] Resolving globals: FALSE
[18:03:28.575] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[18:03:28.576] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.576] - globals: [2] ‘x’, ‘i’
[18:03:28.577] 
[18:03:28.577] getGlobalsAndPackages() ... DONE
[18:03:28.578] getGlobalsAndPackages() ...
[18:03:28.578] Searching for globals...
[18:03:28.582] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.582] Searching for globals ... DONE
[18:03:28.582] Resolving globals: FALSE
[18:03:28.592] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[18:03:28.593] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.593] - globals: [2] ‘x’, ‘i’
[18:03:28.593] 
[18:03:28.594] getGlobalsAndPackages() ... DONE
[18:03:28.595] getGlobalsAndPackages() ...
[18:03:28.595] Searching for globals...
[18:03:28.599] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.599] Searching for globals ... DONE
[18:03:28.599] Resolving globals: FALSE
[18:03:28.609] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[18:03:28.610] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.610] - globals: [2] ‘x’, ‘i’
[18:03:28.610] 
[18:03:28.610] getGlobalsAndPackages() ... DONE
[18:03:28.612] getGlobalsAndPackages() ...
[18:03:28.612] Searching for globals...
[18:03:28.617] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.617] Searching for globals ... DONE
[18:03:28.618] Resolving globals: FALSE
[18:03:28.628] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[18:03:28.629] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.629] - globals: [2] ‘x’, ‘i’
[18:03:28.629] 
[18:03:28.629] getGlobalsAndPackages() ... DONE
[18:03:28.630] getGlobalsAndPackages() ...
[18:03:28.631] Searching for globals...
[18:03:28.634] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.634] Searching for globals ... DONE
[18:03:28.634] Resolving globals: FALSE
[18:03:28.645] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[18:03:28.646] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.646] - globals: [2] ‘x’, ‘i’
[18:03:28.647] 
[18:03:28.647] getGlobalsAndPackages() ... DONE
[18:03:28.648] getGlobalsAndPackages() ...
[18:03:28.648] Searching for globals...
[18:03:28.651] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.652] Searching for globals ... DONE
[18:03:28.652] Resolving globals: FALSE
[18:03:28.666] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[18:03:28.667] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.667] - globals: [2] ‘x’, ‘i’
[18:03:28.668] 
[18:03:28.668] getGlobalsAndPackages() ... DONE
[18:03:28.669] getGlobalsAndPackages() ...
[18:03:28.669] Searching for globals...
[18:03:28.672] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.673] Searching for globals ... DONE
[18:03:28.673] Resolving globals: FALSE
[18:03:28.685] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[18:03:28.686] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.686] - globals: [2] ‘x’, ‘i’
[18:03:28.686] 
[18:03:28.686] getGlobalsAndPackages() ... DONE
[18:03:28.687] getGlobalsAndPackages() ...
[18:03:28.688] Searching for globals...
[18:03:28.691] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.691] Searching for globals ... DONE
[18:03:28.691] Resolving globals: FALSE
[18:03:28.706] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[18:03:28.707] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.707] - globals: [2] ‘x’, ‘i’
[18:03:28.707] 
[18:03:28.708] getGlobalsAndPackages() ... DONE
[18:03:28.709] getGlobalsAndPackages() ...
[18:03:28.709] Searching for globals...
[18:03:28.712] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.712] Searching for globals ... DONE
[18:03:28.713] Resolving globals: FALSE
[18:03:28.726] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[18:03:28.727] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.727] - globals: [2] ‘x’, ‘i’
[18:03:28.727] 
[18:03:28.727] getGlobalsAndPackages() ... DONE
[18:03:28.729] getGlobalsAndPackages() ...
[18:03:28.729] Searching for globals...
[18:03:28.732] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.732] Searching for globals ... DONE
[18:03:28.733] Resolving globals: FALSE
[18:03:28.748] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[18:03:28.749] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.749] - globals: [2] ‘x’, ‘i’
[18:03:28.750] 
[18:03:28.750] getGlobalsAndPackages() ... DONE
[18:03:28.751] getGlobalsAndPackages() ...
[18:03:28.751] Searching for globals...
[18:03:28.754] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.755] Searching for globals ... DONE
[18:03:28.755] Resolving globals: FALSE
[18:03:28.769] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[18:03:28.770] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.770] - globals: [2] ‘x’, ‘i’
[18:03:28.771] 
[18:03:28.771] getGlobalsAndPackages() ... DONE
[18:03:28.772] getGlobalsAndPackages() ...
[18:03:28.772] Searching for globals...
[18:03:28.775] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.776] Searching for globals ... DONE
[18:03:28.776] Resolving globals: FALSE
[18:03:28.793] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[18:03:28.794] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.794] - globals: [2] ‘x’, ‘i’
[18:03:28.794] 
[18:03:28.795] getGlobalsAndPackages() ... DONE
[18:03:28.796] getGlobalsAndPackages() ...
[18:03:28.796] Searching for globals...
[18:03:28.799] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.799] Searching for globals ... DONE
[18:03:28.800] Resolving globals: FALSE
[18:03:28.816] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[18:03:28.817] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.818] - globals: [2] ‘x’, ‘i’
[18:03:28.818] 
[18:03:28.818] getGlobalsAndPackages() ... DONE
[18:03:28.819] getGlobalsAndPackages() ...
[18:03:28.819] Searching for globals...
[18:03:28.822] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.823] Searching for globals ... DONE
[18:03:28.823] Resolving globals: FALSE
[18:03:28.842] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[18:03:28.843] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.843] - globals: [2] ‘x’, ‘i’
[18:03:28.843] 
[18:03:28.843] getGlobalsAndPackages() ... DONE
[18:03:28.844] getGlobalsAndPackages() ...
[18:03:28.845] Searching for globals...
[18:03:28.848] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.848] Searching for globals ... DONE
[18:03:28.848] Resolving globals: FALSE
[18:03:28.866] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[18:03:28.867] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.867] - globals: [2] ‘x’, ‘i’
[18:03:28.868] 
[18:03:28.868] getGlobalsAndPackages() ... DONE
[18:03:28.869] getGlobalsAndPackages() ...
[18:03:28.869] Searching for globals...
[18:03:28.873] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.873] Searching for globals ... DONE
[18:03:28.873] Resolving globals: FALSE
[18:03:28.893] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[18:03:28.894] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.894] - globals: [2] ‘x’, ‘i’
[18:03:28.895] 
[18:03:28.895] getGlobalsAndPackages() ... DONE
[18:03:28.896] getGlobalsAndPackages() ...
[18:03:28.896] Searching for globals...
[18:03:28.899] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.900] Searching for globals ... DONE
[18:03:28.900] Resolving globals: FALSE
[18:03:28.920] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[18:03:28.921] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.921] - globals: [2] ‘x’, ‘i’
[18:03:28.922] 
[18:03:28.922] getGlobalsAndPackages() ... DONE
[18:03:28.923] getGlobalsAndPackages() ...
[18:03:28.923] Searching for globals...
[18:03:28.926] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.927] Searching for globals ... DONE
[18:03:28.927] Resolving globals: FALSE
[18:03:28.946] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[18:03:28.947] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.947] - globals: [2] ‘x’, ‘i’
[18:03:28.947] 
[18:03:28.947] getGlobalsAndPackages() ... DONE
[18:03:28.948] getGlobalsAndPackages() ...
[18:03:28.948] Searching for globals...
[18:03:28.952] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.952] Searching for globals ... DONE
[18:03:28.952] Resolving globals: FALSE
[18:03:28.974] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[18:03:28.974] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:28.975] - globals: [2] ‘x’, ‘i’
[18:03:28.975] 
[18:03:28.975] getGlobalsAndPackages() ... DONE
[18:03:28.976] getGlobalsAndPackages() ...
[18:03:28.976] Searching for globals...
[18:03:28.980] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:28.980] Searching for globals ... DONE
[18:03:28.980] Resolving globals: FALSE
[18:03:29.002] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[18:03:29.003] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.003] - globals: [2] ‘x’, ‘i’
[18:03:29.004] 
[18:03:29.004] getGlobalsAndPackages() ... DONE
[18:03:29.005] getGlobalsAndPackages() ...
[18:03:29.005] Searching for globals...
[18:03:29.008] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.008] Searching for globals ... DONE
[18:03:29.009] Resolving globals: FALSE
[18:03:29.030] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[18:03:29.031] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.031] - globals: [2] ‘x’, ‘i’
[18:03:29.031] 
[18:03:29.031] getGlobalsAndPackages() ... DONE
[18:03:29.032] getGlobalsAndPackages() ...
[18:03:29.033] Searching for globals...
[18:03:29.036] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.036] Searching for globals ... DONE
[18:03:29.036] Resolving globals: FALSE
[18:03:29.059] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[18:03:29.060] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.061] - globals: [2] ‘x’, ‘i’
[18:03:29.061] 
[18:03:29.061] getGlobalsAndPackages() ... DONE
[18:03:29.062] getGlobalsAndPackages() ...
[18:03:29.062] Searching for globals...
[18:03:29.066] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.066] Searching for globals ... DONE
[18:03:29.066] Resolving globals: FALSE
[18:03:29.091] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[18:03:29.092] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.092] - globals: [2] ‘x’, ‘i’
[18:03:29.092] 
[18:03:29.093] getGlobalsAndPackages() ... DONE
[18:03:29.094] getGlobalsAndPackages() ...
[18:03:29.094] Searching for globals...
[18:03:29.097] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.098] Searching for globals ... DONE
[18:03:29.098] Resolving globals: FALSE
[18:03:29.123] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[18:03:29.125] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.125] - globals: [2] ‘x’, ‘i’
[18:03:29.125] 
[18:03:29.125] getGlobalsAndPackages() ... DONE
[18:03:29.126] getGlobalsAndPackages() ...
[18:03:29.127] Searching for globals...
[18:03:29.130] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.130] Searching for globals ... DONE
[18:03:29.130] Resolving globals: FALSE
[18:03:29.153] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[18:03:29.154] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.155] - globals: [2] ‘x’, ‘i’
[18:03:29.155] 
[18:03:29.155] getGlobalsAndPackages() ... DONE
[18:03:29.156] getGlobalsAndPackages() ...
[18:03:29.156] Searching for globals...
[18:03:29.162] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.162] Searching for globals ... DONE
[18:03:29.162] Resolving globals: FALSE
[18:03:29.186] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[18:03:29.187] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.187] - globals: [2] ‘x’, ‘i’
[18:03:29.187] 
[18:03:29.187] getGlobalsAndPackages() ... DONE
[18:03:29.188] getGlobalsAndPackages() ...
[18:03:29.189] Searching for globals...
[18:03:29.192] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.192] Searching for globals ... DONE
[18:03:29.192] Resolving globals: FALSE
[18:03:29.246] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[18:03:29.247] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.247] - globals: [2] ‘x’, ‘i’
[18:03:29.248] 
[18:03:29.248] getGlobalsAndPackages() ... DONE
[18:03:29.249] getGlobalsAndPackages() ...
[18:03:29.249] Searching for globals...
[18:03:29.252] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.253] Searching for globals ... DONE
[18:03:29.253] Resolving globals: FALSE
[18:03:29.280] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[18:03:29.281] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.281] - globals: [2] ‘x’, ‘i’
[18:03:29.281] 
[18:03:29.281] getGlobalsAndPackages() ... DONE
[18:03:29.283] getGlobalsAndPackages() ...
[18:03:29.283] Searching for globals...
[18:03:29.286] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.286] Searching for globals ... DONE
[18:03:29.287] Resolving globals: FALSE
[18:03:29.314] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[18:03:29.315] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.315] - globals: [2] ‘x’, ‘i’
[18:03:29.316] 
[18:03:29.316] getGlobalsAndPackages() ... DONE
[18:03:29.317] getGlobalsAndPackages() ...
[18:03:29.317] Searching for globals...
[18:03:29.320] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.321] Searching for globals ... DONE
[18:03:29.321] Resolving globals: FALSE
[18:03:29.351] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[18:03:29.352] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.352] - globals: [2] ‘x’, ‘i’
[18:03:29.353] 
[18:03:29.353] getGlobalsAndPackages() ... DONE
[18:03:29.354] getGlobalsAndPackages() ...
[18:03:29.354] Searching for globals...
[18:03:29.357] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.358] Searching for globals ... DONE
[18:03:29.358] Resolving globals: FALSE
[18:03:29.386] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[18:03:29.387] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.387] - globals: [2] ‘x’, ‘i’
[18:03:29.387] 
[18:03:29.387] getGlobalsAndPackages() ... DONE
[18:03:29.389] getGlobalsAndPackages() ...
[18:03:29.391] Searching for globals...
[18:03:29.395] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.395] Searching for globals ... DONE
[18:03:29.395] Resolving globals: FALSE
[18:03:29.423] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[18:03:29.424] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.424] - globals: [2] ‘x’, ‘i’
[18:03:29.425] 
[18:03:29.425] getGlobalsAndPackages() ... DONE
[18:03:29.426] getGlobalsAndPackages() ...
[18:03:29.426] Searching for globals...
[18:03:29.429] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.430] Searching for globals ... DONE
[18:03:29.430] Resolving globals: FALSE
[18:03:29.460] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[18:03:29.461] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.461] - globals: [2] ‘x’, ‘i’
[18:03:29.462] 
[18:03:29.462] getGlobalsAndPackages() ... DONE
[18:03:29.463] getGlobalsAndPackages() ...
[18:03:29.463] Searching for globals...
[18:03:29.466] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.467] Searching for globals ... DONE
[18:03:29.467] Resolving globals: FALSE
[18:03:29.498] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[18:03:29.499] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.499] - globals: [2] ‘x’, ‘i’
[18:03:29.499] 
[18:03:29.500] getGlobalsAndPackages() ... DONE
[18:03:29.501] getGlobalsAndPackages() ...
[18:03:29.501] Searching for globals...
[18:03:29.504] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.504] Searching for globals ... DONE
[18:03:29.505] Resolving globals: FALSE
[18:03:29.537] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[18:03:29.537] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.538] - globals: [2] ‘x’, ‘i’
[18:03:29.538] 
[18:03:29.538] getGlobalsAndPackages() ... DONE
[18:03:29.539] getGlobalsAndPackages() ...
[18:03:29.539] Searching for globals...
[18:03:29.543] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.543] Searching for globals ... DONE
[18:03:29.543] Resolving globals: FALSE
[18:03:29.575] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[18:03:29.576] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.577] - globals: [2] ‘x’, ‘i’
[18:03:29.577] 
[18:03:29.577] getGlobalsAndPackages() ... DONE
[18:03:29.578] getGlobalsAndPackages() ...
[18:03:29.578] Searching for globals...
[18:03:29.582] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.582] Searching for globals ... DONE
[18:03:29.582] Resolving globals: FALSE
[18:03:29.616] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[18:03:29.616] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.617] - globals: [2] ‘x’, ‘i’
[18:03:29.617] 
[18:03:29.617] getGlobalsAndPackages() ... DONE
[18:03:29.618] getGlobalsAndPackages() ...
[18:03:29.619] Searching for globals...
[18:03:29.622] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.622] Searching for globals ... DONE
[18:03:29.623] Resolving globals: FALSE
[18:03:29.658] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[18:03:29.659] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.659] - globals: [2] ‘x’, ‘i’
[18:03:29.659] 
[18:03:29.659] getGlobalsAndPackages() ... DONE
[18:03:29.660] getGlobalsAndPackages() ...
[18:03:29.661] Searching for globals...
[18:03:29.664] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.664] Searching for globals ... DONE
[18:03:29.664] Resolving globals: FALSE
[18:03:29.698] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[18:03:29.699] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.700] - globals: [2] ‘x’, ‘i’
[18:03:29.700] 
[18:03:29.700] getGlobalsAndPackages() ... DONE
[18:03:29.701] getGlobalsAndPackages() ...
[18:03:29.701] Searching for globals...
[18:03:29.705] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.705] Searching for globals ... DONE
[18:03:29.705] Resolving globals: FALSE
[18:03:29.740] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[18:03:29.741] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.741] - globals: [2] ‘x’, ‘i’
[18:03:29.741] 
[18:03:29.741] getGlobalsAndPackages() ... DONE
[18:03:29.743] getGlobalsAndPackages() ...
[18:03:29.743] Searching for globals...
[18:03:29.748] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.748] Searching for globals ... DONE
[18:03:29.749] Resolving globals: FALSE
[18:03:29.784] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[18:03:29.785] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.785] - globals: [2] ‘x’, ‘i’
[18:03:29.785] 
[18:03:29.786] getGlobalsAndPackages() ... DONE
[18:03:29.787] getGlobalsAndPackages() ...
[18:03:29.787] Searching for globals...
[18:03:29.790] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.790] Searching for globals ... DONE
[18:03:29.791] Resolving globals: FALSE
[18:03:29.827] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[18:03:29.828] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.828] - globals: [2] ‘x’, ‘i’
[18:03:29.828] 
[18:03:29.829] getGlobalsAndPackages() ... DONE
[18:03:29.830] getGlobalsAndPackages() ...
[18:03:29.830] Searching for globals...
[18:03:29.833] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.833] Searching for globals ... DONE
[18:03:29.834] Resolving globals: FALSE
[18:03:29.871] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[18:03:29.872] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.872] - globals: [2] ‘x’, ‘i’
[18:03:29.872] 
[18:03:29.872] getGlobalsAndPackages() ... DONE
[18:03:29.873] getGlobalsAndPackages() ...
[18:03:29.874] Searching for globals...
[18:03:29.877] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.877] Searching for globals ... DONE
[18:03:29.877] Resolving globals: FALSE
[18:03:29.916] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[18:03:29.917] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.917] - globals: [2] ‘x’, ‘i’
[18:03:29.918] 
[18:03:29.918] getGlobalsAndPackages() ... DONE
[18:03:29.919] getGlobalsAndPackages() ...
[18:03:29.919] Searching for globals...
[18:03:29.923] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.923] Searching for globals ... DONE
[18:03:29.923] Resolving globals: FALSE
[18:03:29.961] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[18:03:29.962] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:29.963] - globals: [2] ‘x’, ‘i’
[18:03:29.963] 
[18:03:29.963] getGlobalsAndPackages() ... DONE
[18:03:29.964] getGlobalsAndPackages() ...
[18:03:29.964] Searching for globals...
[18:03:29.968] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:29.968] Searching for globals ... DONE
[18:03:29.968] Resolving globals: FALSE
[18:03:30.008] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[18:03:30.011] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.011] - globals: [2] ‘x’, ‘i’
[18:03:30.011] 
[18:03:30.011] getGlobalsAndPackages() ... DONE
[18:03:30.013] getGlobalsAndPackages() ...
[18:03:30.013] Searching for globals...
[18:03:30.016] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.016] Searching for globals ... DONE
[18:03:30.017] Resolving globals: FALSE
[18:03:30.058] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[18:03:30.059] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.059] - globals: [2] ‘x’, ‘i’
[18:03:30.059] 
[18:03:30.060] getGlobalsAndPackages() ... DONE
[18:03:30.061] getGlobalsAndPackages() ...
[18:03:30.061] Searching for globals...
[18:03:30.065] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.065] Searching for globals ... DONE
[18:03:30.065] Resolving globals: FALSE
[18:03:30.106] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[18:03:30.107] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.107] - globals: [2] ‘x’, ‘i’
[18:03:30.107] 
[18:03:30.108] getGlobalsAndPackages() ... DONE
[18:03:30.109] getGlobalsAndPackages() ...
[18:03:30.109] Searching for globals...
[18:03:30.113] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.113] Searching for globals ... DONE
[18:03:30.113] Resolving globals: FALSE
[18:03:30.155] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[18:03:30.156] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.156] - globals: [2] ‘x’, ‘i’
[18:03:30.156] 
[18:03:30.156] getGlobalsAndPackages() ... DONE
[18:03:30.158] getGlobalsAndPackages() ...
[18:03:30.158] Searching for globals...
[18:03:30.161] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.161] Searching for globals ... DONE
[18:03:30.162] Resolving globals: FALSE
[18:03:30.207] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[18:03:30.208] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.208] - globals: [2] ‘x’, ‘i’
[18:03:30.208] 
[18:03:30.209] getGlobalsAndPackages() ... DONE
[18:03:30.210] getGlobalsAndPackages() ...
[18:03:30.210] Searching for globals...
[18:03:30.213] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.213] Searching for globals ... DONE
[18:03:30.214] Resolving globals: FALSE
[18:03:30.256] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[18:03:30.257] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.257] - globals: [2] ‘x’, ‘i’
[18:03:30.257] 
[18:03:30.258] getGlobalsAndPackages() ... DONE
[18:03:30.259] getGlobalsAndPackages() ...
[18:03:30.259] Searching for globals...
[18:03:30.262] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.262] Searching for globals ... DONE
[18:03:30.263] Resolving globals: FALSE
[18:03:30.306] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[18:03:30.307] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.307] - globals: [2] ‘x’, ‘i’
[18:03:30.307] 
[18:03:30.307] getGlobalsAndPackages() ... DONE
[18:03:30.308] getGlobalsAndPackages() ...
[18:03:30.309] Searching for globals...
[18:03:30.312] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.312] Searching for globals ... DONE
[18:03:30.313] Resolving globals: FALSE
[18:03:30.359] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[18:03:30.360] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.360] - globals: [2] ‘x’, ‘i’
[18:03:30.361] 
[18:03:30.361] getGlobalsAndPackages() ... DONE
[18:03:30.362] getGlobalsAndPackages() ...
[18:03:30.362] Searching for globals...
[18:03:30.365] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.366] Searching for globals ... DONE
[18:03:30.366] Resolving globals: FALSE
[18:03:30.411] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[18:03:30.412] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.412] - globals: [2] ‘x’, ‘i’
[18:03:30.413] 
[18:03:30.413] getGlobalsAndPackages() ... DONE
[18:03:30.414] getGlobalsAndPackages() ...
[18:03:30.414] Searching for globals...
[18:03:30.418] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.418] Searching for globals ... DONE
[18:03:30.418] Resolving globals: FALSE
[18:03:30.465] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[18:03:30.466] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.466] - globals: [2] ‘x’, ‘i’
[18:03:30.466] 
[18:03:30.466] getGlobalsAndPackages() ... DONE
[18:03:30.467] getGlobalsAndPackages() ...
[18:03:30.467] Searching for globals...
[18:03:30.473] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.473] Searching for globals ... DONE
[18:03:30.474] Resolving globals: FALSE
[18:03:30.519] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[18:03:30.520] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.520] - globals: [2] ‘x’, ‘i’
[18:03:30.521] 
[18:03:30.521] getGlobalsAndPackages() ... DONE
[18:03:30.522] getGlobalsAndPackages() ...
[18:03:30.522] Searching for globals...
[18:03:30.525] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.526] Searching for globals ... DONE
[18:03:30.526] Resolving globals: FALSE
[18:03:30.572] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[18:03:30.573] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.574] - globals: [2] ‘x’, ‘i’
[18:03:30.574] 
[18:03:30.574] getGlobalsAndPackages() ... DONE
[18:03:30.575] getGlobalsAndPackages() ...
[18:03:30.575] Searching for globals...
[18:03:30.580] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.581] Searching for globals ... DONE
[18:03:30.581] Resolving globals: FALSE
[18:03:30.629] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[18:03:30.629] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.630] - globals: [2] ‘x’, ‘i’
[18:03:30.630] 
[18:03:30.630] getGlobalsAndPackages() ... DONE
[18:03:30.631] getGlobalsAndPackages() ...
[18:03:30.631] Searching for globals...
[18:03:30.635] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.635] Searching for globals ... DONE
[18:03:30.635] Resolving globals: FALSE
[18:03:30.684] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[18:03:30.685] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.685] - globals: [2] ‘x’, ‘i’
[18:03:30.685] 
[18:03:30.685] getGlobalsAndPackages() ... DONE
[18:03:30.686] getGlobalsAndPackages() ...
[18:03:30.687] Searching for globals...
[18:03:30.692] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.692] Searching for globals ... DONE
[18:03:30.693] Resolving globals: FALSE
[18:03:30.743] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[18:03:30.744] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.744] - globals: [2] ‘x’, ‘i’
[18:03:30.744] 
[18:03:30.744] getGlobalsAndPackages() ... DONE
[18:03:30.746] getGlobalsAndPackages() ...
[18:03:30.746] Searching for globals...
[18:03:30.749] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.749] Searching for globals ... DONE
[18:03:30.750] Resolving globals: FALSE
[18:03:30.801] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[18:03:30.802] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.802] - globals: [2] ‘x’, ‘i’
[18:03:30.803] 
[18:03:30.803] getGlobalsAndPackages() ... DONE
[18:03:30.804] getGlobalsAndPackages() ...
[18:03:30.804] Searching for globals...
[18:03:30.807] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.808] Searching for globals ... DONE
[18:03:30.808] Resolving globals: FALSE
[18:03:30.860] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[18:03:30.861] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.863] - globals: [2] ‘x’, ‘i’
[18:03:30.863] 
[18:03:30.863] getGlobalsAndPackages() ... DONE
[18:03:30.864] getGlobalsAndPackages() ...
[18:03:30.865] Searching for globals...
[18:03:30.868] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.868] Searching for globals ... DONE
[18:03:30.868] Resolving globals: FALSE
[18:03:30.923] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[18:03:30.924] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.924] - globals: [2] ‘x’, ‘i’
[18:03:30.924] 
[18:03:30.924] getGlobalsAndPackages() ... DONE
[18:03:30.925] getGlobalsAndPackages() ...
[18:03:30.926] Searching for globals...
[18:03:30.929] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.929] Searching for globals ... DONE
[18:03:30.930] Resolving globals: FALSE
[18:03:30.982] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[18:03:30.983] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:30.984] - globals: [2] ‘x’, ‘i’
[18:03:30.984] 
[18:03:30.984] getGlobalsAndPackages() ... DONE
[18:03:30.985] getGlobalsAndPackages() ...
[18:03:30.985] Searching for globals...
[18:03:30.991] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:30.991] Searching for globals ... DONE
[18:03:30.991] Resolving globals: FALSE
[18:03:31.045] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[18:03:31.046] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.046] - globals: [2] ‘x’, ‘i’
[18:03:31.046] 
[18:03:31.047] getGlobalsAndPackages() ... DONE
[18:03:31.048] getGlobalsAndPackages() ...
[18:03:31.048] Searching for globals...
[18:03:31.051] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.051] Searching for globals ... DONE
[18:03:31.052] Resolving globals: FALSE
[18:03:31.107] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[18:03:31.108] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.108] - globals: [2] ‘x’, ‘i’
[18:03:31.108] 
[18:03:31.109] getGlobalsAndPackages() ... DONE
[18:03:31.110] getGlobalsAndPackages() ...
[18:03:31.110] Searching for globals...
[18:03:31.113] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.114] Searching for globals ... DONE
[18:03:31.114] Resolving globals: FALSE
[18:03:31.170] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[18:03:31.171] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.171] - globals: [2] ‘x’, ‘i’
[18:03:31.172] 
[18:03:31.172] getGlobalsAndPackages() ... DONE
[18:03:31.173] getGlobalsAndPackages() ...
[18:03:31.173] Searching for globals...
[18:03:31.177] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.177] Searching for globals ... DONE
[18:03:31.177] Resolving globals: FALSE
[18:03:31.233] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[18:03:31.234] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.234] - globals: [2] ‘x’, ‘i’
[18:03:31.234] 
[18:03:31.234] getGlobalsAndPackages() ... DONE
[18:03:31.236] getGlobalsAndPackages() ...
[18:03:31.236] Searching for globals...
[18:03:31.240] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.240] Searching for globals ... DONE
[18:03:31.240] Resolving globals: FALSE
[18:03:31.298] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[18:03:31.299] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.300] - globals: [2] ‘x’, ‘i’
[18:03:31.300] 
[18:03:31.300] getGlobalsAndPackages() ... DONE
[18:03:31.301] getGlobalsAndPackages() ...
[18:03:31.301] Searching for globals...
[18:03:31.305] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.305] Searching for globals ... DONE
[18:03:31.305] Resolving globals: FALSE
[18:03:31.364] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[18:03:31.365] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.365] - globals: [2] ‘x’, ‘i’
[18:03:31.365] 
[18:03:31.365] getGlobalsAndPackages() ... DONE
[18:03:31.366] getGlobalsAndPackages() ...
[18:03:31.367] Searching for globals...
[18:03:31.370] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.371] Searching for globals ... DONE
[18:03:31.371] Resolving globals: FALSE
[18:03:31.431] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[18:03:31.431] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.432] - globals: [2] ‘x’, ‘i’
[18:03:31.432] 
[18:03:31.432] getGlobalsAndPackages() ... DONE
[18:03:31.433] getGlobalsAndPackages() ...
[18:03:31.433] Searching for globals...
[18:03:31.437] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.437] Searching for globals ... DONE
[18:03:31.437] Resolving globals: FALSE
[18:03:31.499] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[18:03:31.500] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.500] - globals: [2] ‘x’, ‘i’
[18:03:31.500] 
[18:03:31.501] getGlobalsAndPackages() ... DONE
[18:03:31.502] getGlobalsAndPackages() ...
[18:03:31.502] Searching for globals...
[18:03:31.505] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.505] Searching for globals ... DONE
[18:03:31.506] Resolving globals: FALSE
[18:03:31.566] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[18:03:31.567] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.567] - globals: [2] ‘x’, ‘i’
[18:03:31.568] 
[18:03:31.568] getGlobalsAndPackages() ... DONE
[18:03:31.569] getGlobalsAndPackages() ...
[18:03:31.569] Searching for globals...
[18:03:31.573] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.573] Searching for globals ... DONE
[18:03:31.573] Resolving globals: FALSE
[18:03:31.634] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[18:03:31.635] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.635] - globals: [2] ‘x’, ‘i’
[18:03:31.636] 
[18:03:31.636] getGlobalsAndPackages() ... DONE
[18:03:31.637] getGlobalsAndPackages() ...
[18:03:31.637] Searching for globals...
[18:03:31.643] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.643] Searching for globals ... DONE
[18:03:31.643] Resolving globals: FALSE
[18:03:31.704] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[18:03:31.705] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.706] - globals: [2] ‘x’, ‘i’
[18:03:31.706] 
[18:03:31.706] getGlobalsAndPackages() ... DONE
[18:03:31.707] getGlobalsAndPackages() ...
[18:03:31.707] Searching for globals...
[18:03:31.711] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.711] Searching for globals ... DONE
[18:03:31.711] Resolving globals: FALSE
[18:03:31.776] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[18:03:31.777] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.777] - globals: [2] ‘x’, ‘i’
[18:03:31.777] 
[18:03:31.778] getGlobalsAndPackages() ... DONE
[18:03:31.779] getGlobalsAndPackages() ...
[18:03:31.779] Searching for globals...
[18:03:31.782] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.783] Searching for globals ... DONE
[18:03:31.783] Resolving globals: FALSE
[18:03:31.847] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[18:03:31.847] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.848] - globals: [2] ‘x’, ‘i’
[18:03:31.848] 
[18:03:31.848] getGlobalsAndPackages() ... DONE
[18:03:31.849] getGlobalsAndPackages() ...
[18:03:31.849] Searching for globals...
[18:03:31.853] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.853] Searching for globals ... DONE
[18:03:31.853] Resolving globals: FALSE
[18:03:31.918] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[18:03:31.919] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.919] - globals: [2] ‘x’, ‘i’
[18:03:31.919] 
[18:03:31.920] getGlobalsAndPackages() ... DONE
[18:03:31.921] getGlobalsAndPackages() ...
[18:03:31.921] Searching for globals...
[18:03:31.924] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.925] Searching for globals ... DONE
[18:03:31.925] Resolving globals: FALSE
[18:03:31.992] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[18:03:31.993] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:31.993] - globals: [2] ‘x’, ‘i’
[18:03:31.994] 
[18:03:31.994] getGlobalsAndPackages() ... DONE
[18:03:31.995] getGlobalsAndPackages() ...
[18:03:31.995] Searching for globals...
[18:03:31.999] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:31.999] Searching for globals ... DONE
[18:03:31.999] Resolving globals: FALSE
[18:03:32.065] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[18:03:32.066] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:32.066] - globals: [2] ‘x’, ‘i’
[18:03:32.066] 
[18:03:32.067] getGlobalsAndPackages() ... DONE
[18:03:32.068] getGlobalsAndPackages() ...
[18:03:32.068] Searching for globals...
[18:03:32.073] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:32.074] Searching for globals ... DONE
[18:03:32.074] Resolving globals: FALSE
[18:03:32.141] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[18:03:32.141] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:32.142] - globals: [2] ‘x’, ‘i’
[18:03:32.142] 
[18:03:32.142] getGlobalsAndPackages() ... DONE
[18:03:32.143] getGlobalsAndPackages() ...
[18:03:32.144] Searching for globals...
[18:03:32.147] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:32.147] Searching for globals ... DONE
[18:03:32.147] Resolving globals: FALSE
[18:03:32.215] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[18:03:32.216] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:32.217] - globals: [2] ‘x’, ‘i’
[18:03:32.217] 
[18:03:32.217] getGlobalsAndPackages() ... DONE
[18:03:32.218] getGlobalsAndPackages() ...
[18:03:32.218] Searching for globals...
[18:03:32.222] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:32.222] Searching for globals ... DONE
[18:03:32.222] Resolving globals: FALSE
[18:03:32.292] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[18:03:32.293] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:32.293] - globals: [2] ‘x’, ‘i’
[18:03:32.294] 
[18:03:32.294] getGlobalsAndPackages() ... DONE
[18:03:32.295] getGlobalsAndPackages() ...
[18:03:32.295] Searching for globals...
[18:03:32.298] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:32.299] Searching for globals ... DONE
[18:03:32.299] Resolving globals: FALSE
[18:03:32.369] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[18:03:32.370] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:32.370] - globals: [2] ‘x’, ‘i’
[18:03:32.371] 
[18:03:32.371] getGlobalsAndPackages() ... DONE
[18:03:32.372] getGlobalsAndPackages() ...
[18:03:32.372] Searching for globals...
[18:03:32.376] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[18:03:32.376] Searching for globals ... DONE
[18:03:32.376] Resolving globals: FALSE
[18:03:32.447] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[18:03:32.447] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[18:03:32.448] - globals: [2] ‘x’, ‘i’
[18:03:32.448] 
[18:03:32.448] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[18:03:32.450] run() for ‘Future’ ...
[18:03:32.450] - state: ‘created’
[18:03:32.451] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:32.452] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:32.452] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:32.452]   - Field: ‘label’
[18:03:32.452]   - Field: ‘local’
[18:03:32.453]   - Field: ‘owner’
[18:03:32.453]   - Field: ‘envir’
[18:03:32.453]   - Field: ‘packages’
[18:03:32.453]   - Field: ‘gc’
[18:03:32.453]   - Field: ‘conditions’
[18:03:32.454]   - Field: ‘expr’
[18:03:32.454]   - Field: ‘uuid’
[18:03:32.454]   - Field: ‘seed’
[18:03:32.454]   - Field: ‘version’
[18:03:32.454]   - Field: ‘result’
[18:03:32.455]   - Field: ‘asynchronous’
[18:03:32.455]   - Field: ‘calls’
[18:03:32.455]   - Field: ‘globals’
[18:03:32.455]   - Field: ‘stdout’
[18:03:32.455]   - Field: ‘earlySignal’
[18:03:32.456]   - Field: ‘lazy’
[18:03:32.456]   - Field: ‘state’
[18:03:32.456] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:32.456] - Launch lazy future ...
[18:03:32.458] Packages needed by the future expression (n = 0): <none>
[18:03:32.458] Packages needed by future strategies (n = 0): <none>
[18:03:32.460] {
[18:03:32.460]     {
[18:03:32.460]         {
[18:03:32.460]             ...future.startTime <- base::Sys.time()
[18:03:32.460]             {
[18:03:32.460]                 {
[18:03:32.460]                   {
[18:03:32.460]                     base::local({
[18:03:32.460]                       has_future <- base::requireNamespace("future", 
[18:03:32.460]                         quietly = TRUE)
[18:03:32.460]                       if (has_future) {
[18:03:32.460]                         ns <- base::getNamespace("future")
[18:03:32.460]                         version <- ns[[".package"]][["version"]]
[18:03:32.460]                         if (is.null(version)) 
[18:03:32.460]                           version <- utils::packageVersion("future")
[18:03:32.460]                       }
[18:03:32.460]                       else {
[18:03:32.460]                         version <- NULL
[18:03:32.460]                       }
[18:03:32.460]                       if (!has_future || version < "1.8.0") {
[18:03:32.460]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:32.460]                           "", base::R.version$version.string), 
[18:03:32.460]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:32.460]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:32.460]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:32.460]                             "release", "version")], collapse = " "), 
[18:03:32.460]                           hostname = base::Sys.info()[["nodename"]])
[18:03:32.460]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:32.460]                           info)
[18:03:32.460]                         info <- base::paste(info, collapse = "; ")
[18:03:32.460]                         if (!has_future) {
[18:03:32.460]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:32.460]                             info)
[18:03:32.460]                         }
[18:03:32.460]                         else {
[18:03:32.460]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:32.460]                             info, version)
[18:03:32.460]                         }
[18:03:32.460]                         base::stop(msg)
[18:03:32.460]                       }
[18:03:32.460]                     })
[18:03:32.460]                   }
[18:03:32.460]                   ...future.strategy.old <- future::plan("list")
[18:03:32.460]                   options(future.plan = NULL)
[18:03:32.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:32.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:32.460]                 }
[18:03:32.460]                 ...future.workdir <- getwd()
[18:03:32.460]             }
[18:03:32.460]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:32.460]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:32.460]         }
[18:03:32.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:32.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:32.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:32.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:32.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:32.460]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:32.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:32.460]             base::names(...future.oldOptions))
[18:03:32.460]     }
[18:03:32.460]     if (TRUE) {
[18:03:32.460]     }
[18:03:32.460]     else {
[18:03:32.460]         if (NA) {
[18:03:32.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:32.460]                 open = "w")
[18:03:32.460]         }
[18:03:32.460]         else {
[18:03:32.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:32.460]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:32.460]         }
[18:03:32.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:32.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:32.460]             base::sink(type = "output", split = FALSE)
[18:03:32.460]             base::close(...future.stdout)
[18:03:32.460]         }, add = TRUE)
[18:03:32.460]     }
[18:03:32.460]     ...future.frame <- base::sys.nframe()
[18:03:32.460]     ...future.conditions <- base::list()
[18:03:32.460]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:32.460]     if (FALSE) {
[18:03:32.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:32.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:32.460]     }
[18:03:32.460]     ...future.result <- base::tryCatch({
[18:03:32.460]         base::withCallingHandlers({
[18:03:32.460]             ...future.value <- base::withVisible(base::local({
[18:03:32.460]                 x[[i - 2]] + x[[i - 1]]
[18:03:32.460]             }))
[18:03:32.460]             future::FutureResult(value = ...future.value$value, 
[18:03:32.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:32.460]                   ...future.rng), globalenv = if (FALSE) 
[18:03:32.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:32.460]                     ...future.globalenv.names))
[18:03:32.460]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:32.460]         }, condition = base::local({
[18:03:32.460]             c <- base::c
[18:03:32.460]             inherits <- base::inherits
[18:03:32.460]             invokeRestart <- base::invokeRestart
[18:03:32.460]             length <- base::length
[18:03:32.460]             list <- base::list
[18:03:32.460]             seq.int <- base::seq.int
[18:03:32.460]             signalCondition <- base::signalCondition
[18:03:32.460]             sys.calls <- base::sys.calls
[18:03:32.460]             `[[` <- base::`[[`
[18:03:32.460]             `+` <- base::`+`
[18:03:32.460]             `<<-` <- base::`<<-`
[18:03:32.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:32.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:32.460]                   3L)]
[18:03:32.460]             }
[18:03:32.460]             function(cond) {
[18:03:32.460]                 is_error <- inherits(cond, "error")
[18:03:32.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:32.460]                   NULL)
[18:03:32.460]                 if (is_error) {
[18:03:32.460]                   sessionInformation <- function() {
[18:03:32.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:32.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:32.460]                       search = base::search(), system = base::Sys.info())
[18:03:32.460]                   }
[18:03:32.460]                   ...future.conditions[[length(...future.conditions) + 
[18:03:32.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:32.460]                     cond$call), session = sessionInformation(), 
[18:03:32.460]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:32.460]                   signalCondition(cond)
[18:03:32.460]                 }
[18:03:32.460]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[18:03:32.460]                 "immediateCondition"))) {
[18:03:32.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:32.460]                   ...future.conditions[[length(...future.conditions) + 
[18:03:32.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:32.460]                   if (TRUE && !signal) {
[18:03:32.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:32.460]                     {
[18:03:32.460]                       inherits <- base::inherits
[18:03:32.460]                       invokeRestart <- base::invokeRestart
[18:03:32.460]                       is.null <- base::is.null
[18:03:32.460]                       muffled <- FALSE
[18:03:32.460]                       if (inherits(cond, "message")) {
[18:03:32.460]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:32.460]                         if (muffled) 
[18:03:32.460]                           invokeRestart("muffleMessage")
[18:03:32.460]                       }
[18:03:32.460]                       else if (inherits(cond, "warning")) {
[18:03:32.460]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:32.460]                         if (muffled) 
[18:03:32.460]                           invokeRestart("muffleWarning")
[18:03:32.460]                       }
[18:03:32.460]                       else if (inherits(cond, "condition")) {
[18:03:32.460]                         if (!is.null(pattern)) {
[18:03:32.460]                           computeRestarts <- base::computeRestarts
[18:03:32.460]                           grepl <- base::grepl
[18:03:32.460]                           restarts <- computeRestarts(cond)
[18:03:32.460]                           for (restart in restarts) {
[18:03:32.460]                             name <- restart$name
[18:03:32.460]                             if (is.null(name)) 
[18:03:32.460]                               next
[18:03:32.460]                             if (!grepl(pattern, name)) 
[18:03:32.460]                               next
[18:03:32.460]                             invokeRestart(restart)
[18:03:32.460]                             muffled <- TRUE
[18:03:32.460]                             break
[18:03:32.460]                           }
[18:03:32.460]                         }
[18:03:32.460]                       }
[18:03:32.460]                       invisible(muffled)
[18:03:32.460]                     }
[18:03:32.460]                     muffleCondition(cond, pattern = "^muffle")
[18:03:32.460]                   }
[18:03:32.460]                 }
[18:03:32.460]                 else {
[18:03:32.460]                   if (TRUE) {
[18:03:32.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:32.460]                     {
[18:03:32.460]                       inherits <- base::inherits
[18:03:32.460]                       invokeRestart <- base::invokeRestart
[18:03:32.460]                       is.null <- base::is.null
[18:03:32.460]                       muffled <- FALSE
[18:03:32.460]                       if (inherits(cond, "message")) {
[18:03:32.460]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:32.460]                         if (muffled) 
[18:03:32.460]                           invokeRestart("muffleMessage")
[18:03:32.460]                       }
[18:03:32.460]                       else if (inherits(cond, "warning")) {
[18:03:32.460]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:32.460]                         if (muffled) 
[18:03:32.460]                           invokeRestart("muffleWarning")
[18:03:32.460]                       }
[18:03:32.460]                       else if (inherits(cond, "condition")) {
[18:03:32.460]                         if (!is.null(pattern)) {
[18:03:32.460]                           computeRestarts <- base::computeRestarts
[18:03:32.460]                           grepl <- base::grepl
[18:03:32.460]                           restarts <- computeRestarts(cond)
[18:03:32.460]                           for (restart in restarts) {
[18:03:32.460]                             name <- restart$name
[18:03:32.460]                             if (is.null(name)) 
[18:03:32.460]                               next
[18:03:32.460]                             if (!grepl(pattern, name)) 
[18:03:32.460]                               next
[18:03:32.460]                             invokeRestart(restart)
[18:03:32.460]                             muffled <- TRUE
[18:03:32.460]                             break
[18:03:32.460]                           }
[18:03:32.460]                         }
[18:03:32.460]                       }
[18:03:32.460]                       invisible(muffled)
[18:03:32.460]                     }
[18:03:32.460]                     muffleCondition(cond, pattern = "^muffle")
[18:03:32.460]                   }
[18:03:32.460]                 }
[18:03:32.460]             }
[18:03:32.460]         }))
[18:03:32.460]     }, error = function(ex) {
[18:03:32.460]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:32.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:32.460]                 ...future.rng), started = ...future.startTime, 
[18:03:32.460]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:32.460]             version = "1.8"), class = "FutureResult")
[18:03:32.460]     }, finally = {
[18:03:32.460]         if (!identical(...future.workdir, getwd())) 
[18:03:32.460]             setwd(...future.workdir)
[18:03:32.460]         {
[18:03:32.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:32.460]                 ...future.oldOptions$nwarnings <- NULL
[18:03:32.460]             }
[18:03:32.460]             base::options(...future.oldOptions)
[18:03:32.460]             if (.Platform$OS.type == "windows") {
[18:03:32.460]                 old_names <- names(...future.oldEnvVars)
[18:03:32.460]                 envs <- base::Sys.getenv()
[18:03:32.460]                 names <- names(envs)
[18:03:32.460]                 common <- intersect(names, old_names)
[18:03:32.460]                 added <- setdiff(names, old_names)
[18:03:32.460]                 removed <- setdiff(old_names, names)
[18:03:32.460]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:32.460]                   envs[common]]
[18:03:32.460]                 NAMES <- toupper(changed)
[18:03:32.460]                 args <- list()
[18:03:32.460]                 for (kk in seq_along(NAMES)) {
[18:03:32.460]                   name <- changed[[kk]]
[18:03:32.460]                   NAME <- NAMES[[kk]]
[18:03:32.460]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:32.460]                     next
[18:03:32.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:32.460]                 }
[18:03:32.460]                 NAMES <- toupper(added)
[18:03:32.460]                 for (kk in seq_along(NAMES)) {
[18:03:32.460]                   name <- added[[kk]]
[18:03:32.460]                   NAME <- NAMES[[kk]]
[18:03:32.460]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:32.460]                     next
[18:03:32.460]                   args[[name]] <- ""
[18:03:32.460]                 }
[18:03:32.460]                 NAMES <- toupper(removed)
[18:03:32.460]                 for (kk in seq_along(NAMES)) {
[18:03:32.460]                   name <- removed[[kk]]
[18:03:32.460]                   NAME <- NAMES[[kk]]
[18:03:32.460]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:32.460]                     next
[18:03:32.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:32.460]                 }
[18:03:32.460]                 if (length(args) > 0) 
[18:03:32.460]                   base::do.call(base::Sys.setenv, args = args)
[18:03:32.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:32.460]             }
[18:03:32.460]             else {
[18:03:32.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:32.460]             }
[18:03:32.460]             {
[18:03:32.460]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:32.460]                   0L) {
[18:03:32.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:32.460]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:32.460]                   base::options(opts)
[18:03:32.460]                 }
[18:03:32.460]                 {
[18:03:32.460]                   {
[18:03:32.460]                     NULL
[18:03:32.460]                     RNGkind("Mersenne-Twister")
[18:03:32.460]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:32.460]                       inherits = FALSE)
[18:03:32.460]                   }
[18:03:32.460]                   options(future.plan = NULL)
[18:03:32.460]                   if (is.na(NA_character_)) 
[18:03:32.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:32.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:32.460]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:32.460]                     .init = FALSE)
[18:03:32.460]                 }
[18:03:32.460]             }
[18:03:32.460]         }
[18:03:32.460]     })
[18:03:32.460]     if (FALSE) {
[18:03:32.460]         base::sink(type = "output", split = FALSE)
[18:03:32.460]         if (NA) {
[18:03:32.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:32.460]         }
[18:03:32.460]         else {
[18:03:32.460]             ...future.result["stdout"] <- base::list(NULL)
[18:03:32.460]         }
[18:03:32.460]         base::close(...future.stdout)
[18:03:32.460]         ...future.stdout <- NULL
[18:03:32.460]     }
[18:03:32.460]     ...future.result$conditions <- ...future.conditions
[18:03:32.460]     ...future.result$finished <- base::Sys.time()
[18:03:32.460]     ...future.result
[18:03:32.460] }
[18:03:32.466] assign_globals() ...
[18:03:32.466] List of 2
[18:03:32.466]  $ x:Classes 'listenv', 'environment' <environment: 0x64cfccc4e1f8> 
[18:03:32.466]  $ i: int 7
[18:03:32.466]  - attr(*, "where")=List of 2
[18:03:32.466]   ..$ x:<environment: R_EmptyEnv> 
[18:03:32.466]   ..$ i:<environment: R_EmptyEnv> 
[18:03:32.466]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:32.466]  - attr(*, "resolved")= logi FALSE
[18:03:32.466]  - attr(*, "total_size")= num 34264
[18:03:32.466]  - attr(*, "already-done")= logi TRUE
[18:03:32.479] - copied ‘x’ to environment
[18:03:32.479] - copied ‘i’ to environment
[18:03:32.479] assign_globals() ... done
[18:03:32.480] plan(): Setting new future strategy stack:
[18:03:32.480] List of future strategies:
[18:03:32.480] 1. sequential:
[18:03:32.480]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:32.480]    - tweaked: FALSE
[18:03:32.480]    - call: NULL
[18:03:32.481] plan(): nbrOfWorkers() = 1
[18:03:32.643] plan(): Setting new future strategy stack:
[18:03:32.644] List of future strategies:
[18:03:32.644] 1. sequential:
[18:03:32.644]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:32.644]    - tweaked: FALSE
[18:03:32.644]    - call: plan(sequential)
[18:03:32.645] plan(): nbrOfWorkers() = 1
[18:03:32.645] SequentialFuture started (and completed)
[18:03:32.645] - Launch lazy future ... done
[18:03:32.645] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[18:03:32.646] run() for ‘Future’ ...
[18:03:32.646] - state: ‘created’
[18:03:32.646] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:32.647] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:32.647] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:32.647]   - Field: ‘label’
[18:03:32.648]   - Field: ‘local’
[18:03:32.648]   - Field: ‘owner’
[18:03:32.648]   - Field: ‘envir’
[18:03:32.648]   - Field: ‘packages’
[18:03:32.648]   - Field: ‘gc’
[18:03:32.649]   - Field: ‘conditions’
[18:03:32.649]   - Field: ‘expr’
[18:03:32.649]   - Field: ‘uuid’
[18:03:32.649]   - Field: ‘seed’
[18:03:32.649]   - Field: ‘version’
[18:03:32.650]   - Field: ‘result’
[18:03:32.650]   - Field: ‘asynchronous’
[18:03:32.650]   - Field: ‘calls’
[18:03:32.650]   - Field: ‘globals’
[18:03:32.650]   - Field: ‘stdout’
[18:03:32.651]   - Field: ‘earlySignal’
[18:03:32.651]   - Field: ‘lazy’
[18:03:32.651]   - Field: ‘state’
[18:03:32.651] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:32.651] - Launch lazy future ...
[18:03:32.652] Packages needed by the future expression (n = 0): <none>
[18:03:32.652] Packages needed by future strategies (n = 0): <none>
[18:03:32.653] {
[18:03:32.653]     {
[18:03:32.653]         {
[18:03:32.653]             ...future.startTime <- base::Sys.time()
[18:03:32.653]             {
[18:03:32.653]                 {
[18:03:32.653]                   {
[18:03:32.653]                     base::local({
[18:03:32.653]                       has_future <- base::requireNamespace("future", 
[18:03:32.653]                         quietly = TRUE)
[18:03:32.653]                       if (has_future) {
[18:03:32.653]                         ns <- base::getNamespace("future")
[18:03:32.653]                         version <- ns[[".package"]][["version"]]
[18:03:32.653]                         if (is.null(version)) 
[18:03:32.653]                           version <- utils::packageVersion("future")
[18:03:32.653]                       }
[18:03:32.653]                       else {
[18:03:32.653]                         version <- NULL
[18:03:32.653]                       }
[18:03:32.653]                       if (!has_future || version < "1.8.0") {
[18:03:32.653]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:32.653]                           "", base::R.version$version.string), 
[18:03:32.653]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:32.653]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:32.653]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:32.653]                             "release", "version")], collapse = " "), 
[18:03:32.653]                           hostname = base::Sys.info()[["nodename"]])
[18:03:32.653]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:32.653]                           info)
[18:03:32.653]                         info <- base::paste(info, collapse = "; ")
[18:03:32.653]                         if (!has_future) {
[18:03:32.653]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:32.653]                             info)
[18:03:32.653]                         }
[18:03:32.653]                         else {
[18:03:32.653]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:32.653]                             info, version)
[18:03:32.653]                         }
[18:03:32.653]                         base::stop(msg)
[18:03:32.653]                       }
[18:03:32.653]                     })
[18:03:32.653]                   }
[18:03:32.653]                   ...future.strategy.old <- future::plan("list")
[18:03:32.653]                   options(future.plan = NULL)
[18:03:32.653]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:32.653]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:32.653]                 }
[18:03:32.653]                 ...future.workdir <- getwd()
[18:03:32.653]             }
[18:03:32.653]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:32.653]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:32.653]         }
[18:03:32.653]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:32.653]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:32.653]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:32.653]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:32.653]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:32.653]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:32.653]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:32.653]             base::names(...future.oldOptions))
[18:03:32.653]     }
[18:03:32.653]     if (TRUE) {
[18:03:32.653]     }
[18:03:32.653]     else {
[18:03:32.653]         if (NA) {
[18:03:32.653]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:32.653]                 open = "w")
[18:03:32.653]         }
[18:03:32.653]         else {
[18:03:32.653]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:32.653]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:32.653]         }
[18:03:32.653]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:32.653]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:32.653]             base::sink(type = "output", split = FALSE)
[18:03:32.653]             base::close(...future.stdout)
[18:03:32.653]         }, add = TRUE)
[18:03:32.653]     }
[18:03:32.653]     ...future.frame <- base::sys.nframe()
[18:03:32.653]     ...future.conditions <- base::list()
[18:03:32.653]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:32.653]     if (FALSE) {
[18:03:32.653]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:32.653]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:32.653]     }
[18:03:32.653]     ...future.result <- base::tryCatch({
[18:03:32.653]         base::withCallingHandlers({
[18:03:32.653]             ...future.value <- base::withVisible(base::local({
[18:03:32.653]                 x[[i - 2]] + x[[i - 1]]
[18:03:32.653]             }))
[18:03:32.653]             future::FutureResult(value = ...future.value$value, 
[18:03:32.653]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:32.653]                   ...future.rng), globalenv = if (FALSE) 
[18:03:32.653]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:32.653]                     ...future.globalenv.names))
[18:03:32.653]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:32.653]         }, condition = base::local({
[18:03:32.653]             c <- base::c
[18:03:32.653]             inherits <- base::inherits
[18:03:32.653]             invokeRestart <- base::invokeRestart
[18:03:32.653]             length <- base::length
[18:03:32.653]             list <- base::list
[18:03:32.653]             seq.int <- base::seq.int
[18:03:32.653]             signalCondition <- base::signalCondition
[18:03:32.653]             sys.calls <- base::sys.calls
[18:03:32.653]             `[[` <- base::`[[`
[18:03:32.653]             `+` <- base::`+`
[18:03:32.653]             `<<-` <- base::`<<-`
[18:03:32.653]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:32.653]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:32.653]                   3L)]
[18:03:32.653]             }
[18:03:32.653]             function(cond) {
[18:03:32.653]                 is_error <- inherits(cond, "error")
[18:03:32.653]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:32.653]                   NULL)
[18:03:32.653]                 if (is_error) {
[18:03:32.653]                   sessionInformation <- function() {
[18:03:32.653]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:32.653]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:32.653]                       search = base::search(), system = base::Sys.info())
[18:03:32.653]                   }
[18:03:32.653]                   ...future.conditions[[length(...future.conditions) + 
[18:03:32.653]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:32.653]                     cond$call), session = sessionInformation(), 
[18:03:32.653]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:32.653]                   signalCondition(cond)
[18:03:32.653]                 }
[18:03:32.653]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[18:03:32.653]                 "immediateCondition"))) {
[18:03:32.653]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:32.653]                   ...future.conditions[[length(...future.conditions) + 
[18:03:32.653]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:32.653]                   if (TRUE && !signal) {
[18:03:32.653]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:32.653]                     {
[18:03:32.653]                       inherits <- base::inherits
[18:03:32.653]                       invokeRestart <- base::invokeRestart
[18:03:32.653]                       is.null <- base::is.null
[18:03:32.653]                       muffled <- FALSE
[18:03:32.653]                       if (inherits(cond, "message")) {
[18:03:32.653]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:32.653]                         if (muffled) 
[18:03:32.653]                           invokeRestart("muffleMessage")
[18:03:32.653]                       }
[18:03:32.653]                       else if (inherits(cond, "warning")) {
[18:03:32.653]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:32.653]                         if (muffled) 
[18:03:32.653]                           invokeRestart("muffleWarning")
[18:03:32.653]                       }
[18:03:32.653]                       else if (inherits(cond, "condition")) {
[18:03:32.653]                         if (!is.null(pattern)) {
[18:03:32.653]                           computeRestarts <- base::computeRestarts
[18:03:32.653]                           grepl <- base::grepl
[18:03:32.653]                           restarts <- computeRestarts(cond)
[18:03:32.653]                           for (restart in restarts) {
[18:03:32.653]                             name <- restart$name
[18:03:32.653]                             if (is.null(name)) 
[18:03:32.653]                               next
[18:03:32.653]                             if (!grepl(pattern, name)) 
[18:03:32.653]                               next
[18:03:32.653]                             invokeRestart(restart)
[18:03:32.653]                             muffled <- TRUE
[18:03:32.653]                             break
[18:03:32.653]                           }
[18:03:32.653]                         }
[18:03:32.653]                       }
[18:03:32.653]                       invisible(muffled)
[18:03:32.653]                     }
[18:03:32.653]                     muffleCondition(cond, pattern = "^muffle")
[18:03:32.653]                   }
[18:03:32.653]                 }
[18:03:32.653]                 else {
[18:03:32.653]                   if (TRUE) {
[18:03:32.653]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:32.653]                     {
[18:03:32.653]                       inherits <- base::inherits
[18:03:32.653]                       invokeRestart <- base::invokeRestart
[18:03:32.653]                       is.null <- base::is.null
[18:03:32.653]                       muffled <- FALSE
[18:03:32.653]                       if (inherits(cond, "message")) {
[18:03:32.653]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:32.653]                         if (muffled) 
[18:03:32.653]                           invokeRestart("muffleMessage")
[18:03:32.653]                       }
[18:03:32.653]                       else if (inherits(cond, "warning")) {
[18:03:32.653]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:32.653]                         if (muffled) 
[18:03:32.653]                           invokeRestart("muffleWarning")
[18:03:32.653]                       }
[18:03:32.653]                       else if (inherits(cond, "condition")) {
[18:03:32.653]                         if (!is.null(pattern)) {
[18:03:32.653]                           computeRestarts <- base::computeRestarts
[18:03:32.653]                           grepl <- base::grepl
[18:03:32.653]                           restarts <- computeRestarts(cond)
[18:03:32.653]                           for (restart in restarts) {
[18:03:32.653]                             name <- restart$name
[18:03:32.653]                             if (is.null(name)) 
[18:03:32.653]                               next
[18:03:32.653]                             if (!grepl(pattern, name)) 
[18:03:32.653]                               next
[18:03:32.653]                             invokeRestart(restart)
[18:03:32.653]                             muffled <- TRUE
[18:03:32.653]                             break
[18:03:32.653]                           }
[18:03:32.653]                         }
[18:03:32.653]                       }
[18:03:32.653]                       invisible(muffled)
[18:03:32.653]                     }
[18:03:32.653]                     muffleCondition(cond, pattern = "^muffle")
[18:03:32.653]                   }
[18:03:32.653]                 }
[18:03:32.653]             }
[18:03:32.653]         }))
[18:03:32.653]     }, error = function(ex) {
[18:03:32.653]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:32.653]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:32.653]                 ...future.rng), started = ...future.startTime, 
[18:03:32.653]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:32.653]             version = "1.8"), class = "FutureResult")
[18:03:32.653]     }, finally = {
[18:03:32.653]         if (!identical(...future.workdir, getwd())) 
[18:03:32.653]             setwd(...future.workdir)
[18:03:32.653]         {
[18:03:32.653]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:32.653]                 ...future.oldOptions$nwarnings <- NULL
[18:03:32.653]             }
[18:03:32.653]             base::options(...future.oldOptions)
[18:03:32.653]             if (.Platform$OS.type == "windows") {
[18:03:32.653]                 old_names <- names(...future.oldEnvVars)
[18:03:32.653]                 envs <- base::Sys.getenv()
[18:03:32.653]                 names <- names(envs)
[18:03:32.653]                 common <- intersect(names, old_names)
[18:03:32.653]                 added <- setdiff(names, old_names)
[18:03:32.653]                 removed <- setdiff(old_names, names)
[18:03:32.653]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:32.653]                   envs[common]]
[18:03:32.653]                 NAMES <- toupper(changed)
[18:03:32.653]                 args <- list()
[18:03:32.653]                 for (kk in seq_along(NAMES)) {
[18:03:32.653]                   name <- changed[[kk]]
[18:03:32.653]                   NAME <- NAMES[[kk]]
[18:03:32.653]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:32.653]                     next
[18:03:32.653]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:32.653]                 }
[18:03:32.653]                 NAMES <- toupper(added)
[18:03:32.653]                 for (kk in seq_along(NAMES)) {
[18:03:32.653]                   name <- added[[kk]]
[18:03:32.653]                   NAME <- NAMES[[kk]]
[18:03:32.653]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:32.653]                     next
[18:03:32.653]                   args[[name]] <- ""
[18:03:32.653]                 }
[18:03:32.653]                 NAMES <- toupper(removed)
[18:03:32.653]                 for (kk in seq_along(NAMES)) {
[18:03:32.653]                   name <- removed[[kk]]
[18:03:32.653]                   NAME <- NAMES[[kk]]
[18:03:32.653]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:32.653]                     next
[18:03:32.653]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:32.653]                 }
[18:03:32.653]                 if (length(args) > 0) 
[18:03:32.653]                   base::do.call(base::Sys.setenv, args = args)
[18:03:32.653]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:32.653]             }
[18:03:32.653]             else {
[18:03:32.653]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:32.653]             }
[18:03:32.653]             {
[18:03:32.653]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:32.653]                   0L) {
[18:03:32.653]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:32.653]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:32.653]                   base::options(opts)
[18:03:32.653]                 }
[18:03:32.653]                 {
[18:03:32.653]                   {
[18:03:32.653]                     NULL
[18:03:32.653]                     RNGkind("Mersenne-Twister")
[18:03:32.653]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:32.653]                       inherits = FALSE)
[18:03:32.653]                   }
[18:03:32.653]                   options(future.plan = NULL)
[18:03:32.653]                   if (is.na(NA_character_)) 
[18:03:32.653]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:32.653]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:32.653]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:32.653]                     .init = FALSE)
[18:03:32.653]                 }
[18:03:32.653]             }
[18:03:32.653]         }
[18:03:32.653]     })
[18:03:32.653]     if (FALSE) {
[18:03:32.653]         base::sink(type = "output", split = FALSE)
[18:03:32.653]         if (NA) {
[18:03:32.653]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:32.653]         }
[18:03:32.653]         else {
[18:03:32.653]             ...future.result["stdout"] <- base::list(NULL)
[18:03:32.653]         }
[18:03:32.653]         base::close(...future.stdout)
[18:03:32.653]         ...future.stdout <- NULL
[18:03:32.653]     }
[18:03:32.653]     ...future.result$conditions <- ...future.conditions
[18:03:32.653]     ...future.result$finished <- base::Sys.time()
[18:03:32.653]     ...future.result
[18:03:32.653] }
[18:03:32.656] assign_globals() ...
[18:03:32.656] List of 2
[18:03:32.656]  $ x:Classes 'listenv', 'environment' <environment: 0x64cfccc4e1f8> 
[18:03:32.656]  $ i: int 50
[18:03:32.656]  - attr(*, "where")=List of 2
[18:03:32.656]   ..$ x:<environment: R_EmptyEnv> 
[18:03:32.656]   ..$ i:<environment: R_EmptyEnv> 
[18:03:32.656]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:32.656]  - attr(*, "resolved")= logi FALSE
[18:03:32.656]  - attr(*, "total_size")= num 402000
[18:03:32.656]  - attr(*, "already-done")= logi TRUE
[18:03:32.662] - copied ‘x’ to environment
[18:03:32.662] - copied ‘i’ to environment
[18:03:32.663] assign_globals() ... done
[18:03:32.663] plan(): Setting new future strategy stack:
[18:03:32.663] List of future strategies:
[18:03:32.663] 1. sequential:
[18:03:32.663]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:32.663]    - tweaked: FALSE
[18:03:32.663]    - call: NULL
[18:03:32.664] plan(): nbrOfWorkers() = 1
[18:03:34.433] plan(): Setting new future strategy stack:
[18:03:34.433] List of future strategies:
[18:03:34.433] 1. sequential:
[18:03:34.433]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.433]    - tweaked: FALSE
[18:03:34.433]    - call: plan(sequential)
[18:03:34.434] plan(): nbrOfWorkers() = 1
[18:03:34.434] SequentialFuture started (and completed)
[18:03:34.435] - Launch lazy future ... done
[18:03:34.435] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[18:03:34.436] plan(): Setting new future strategy stack:
[18:03:34.436] List of future strategies:
[18:03:34.436] 1. sequential:
[18:03:34.436]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.436]    - tweaked: FALSE
[18:03:34.436]    - call: future::plan("sequential")
[18:03:34.437] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[18:03:34.453] plan(): Setting new future strategy stack:
[18:03:34.453] List of future strategies:
[18:03:34.453] 1. sequential:
[18:03:34.453]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.453]    - tweaked: FALSE
[18:03:34.453]    - call: plan(strategy)
[18:03:34.454] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[18:03:34.514] getGlobalsAndPackages() ...
[18:03:34.514] Searching for globals...
[18:03:34.523] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.523] Searching for globals ... DONE
[18:03:34.523] Resolving globals: FALSE
[18:03:34.525] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.526] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.526] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.526] - packages: [1] ‘future’
[18:03:34.527] getGlobalsAndPackages() ... DONE
 2[18:03:34.535] getGlobalsAndPackages() ...
[18:03:34.535] Searching for globals...
[18:03:34.543] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.543] Searching for globals ... DONE
[18:03:34.544] Resolving globals: FALSE
[18:03:34.545] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.546] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.546] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.546] - packages: [1] ‘future’
[18:03:34.547] getGlobalsAndPackages() ... DONE
 3[18:03:34.547] getGlobalsAndPackages() ...
[18:03:34.548] Searching for globals...
[18:03:34.555] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.556] Searching for globals ... DONE
[18:03:34.556] Resolving globals: FALSE
[18:03:34.557] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.558] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.558] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.559] - packages: [1] ‘future’
[18:03:34.559] getGlobalsAndPackages() ... DONE
 4[18:03:34.560] getGlobalsAndPackages() ...
[18:03:34.560] Searching for globals...
[18:03:34.568] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.568] Searching for globals ... DONE
[18:03:34.568] Resolving globals: FALSE
[18:03:34.569] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.570] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.571] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.571] - packages: [1] ‘future’
[18:03:34.572] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[18:03:34.591] resolved() for ‘Future’ ...
[18:03:34.591] - state: ‘created’
[18:03:34.591] - run: TRUE
[18:03:34.592] - run() ...
[18:03:34.592] run() for ‘Future’ ...
[18:03:34.592] - state: ‘created’
[18:03:34.592] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:34.593] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:34.593] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:34.593]   - Field: ‘label’
[18:03:34.594]   - Field: ‘local’
[18:03:34.594]   - Field: ‘owner’
[18:03:34.594]   - Field: ‘envir’
[18:03:34.594]   - Field: ‘packages’
[18:03:34.594]   - Field: ‘gc’
[18:03:34.595]   - Field: ‘conditions’
[18:03:34.595]   - Field: ‘expr’
[18:03:34.595]   - Field: ‘uuid’
[18:03:34.595]   - Field: ‘seed’
[18:03:34.595]   - Field: ‘version’
[18:03:34.596]   - Field: ‘result’
[18:03:34.596]   - Field: ‘asynchronous’
[18:03:34.596]   - Field: ‘calls’
[18:03:34.596]   - Field: ‘globals’
[18:03:34.596]   - Field: ‘stdout’
[18:03:34.597]   - Field: ‘earlySignal’
[18:03:34.597]   - Field: ‘lazy’
[18:03:34.597]   - Field: ‘state’
[18:03:34.597] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:34.597] - Launch lazy future ...
[18:03:34.598] Packages needed by the future expression (n = 1): ‘future’
[18:03:34.598] Packages needed by future strategies (n = 0): <none>
[18:03:34.599] {
[18:03:34.599]     {
[18:03:34.599]         {
[18:03:34.599]             ...future.startTime <- base::Sys.time()
[18:03:34.599]             {
[18:03:34.599]                 {
[18:03:34.599]                   {
[18:03:34.599]                     {
[18:03:34.599]                       base::local({
[18:03:34.599]                         has_future <- base::requireNamespace("future", 
[18:03:34.599]                           quietly = TRUE)
[18:03:34.599]                         if (has_future) {
[18:03:34.599]                           ns <- base::getNamespace("future")
[18:03:34.599]                           version <- ns[[".package"]][["version"]]
[18:03:34.599]                           if (is.null(version)) 
[18:03:34.599]                             version <- utils::packageVersion("future")
[18:03:34.599]                         }
[18:03:34.599]                         else {
[18:03:34.599]                           version <- NULL
[18:03:34.599]                         }
[18:03:34.599]                         if (!has_future || version < "1.8.0") {
[18:03:34.599]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:34.599]                             "", base::R.version$version.string), 
[18:03:34.599]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:34.599]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:34.599]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:34.599]                               "release", "version")], collapse = " "), 
[18:03:34.599]                             hostname = base::Sys.info()[["nodename"]])
[18:03:34.599]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:34.599]                             info)
[18:03:34.599]                           info <- base::paste(info, collapse = "; ")
[18:03:34.599]                           if (!has_future) {
[18:03:34.599]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:34.599]                               info)
[18:03:34.599]                           }
[18:03:34.599]                           else {
[18:03:34.599]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:34.599]                               info, version)
[18:03:34.599]                           }
[18:03:34.599]                           base::stop(msg)
[18:03:34.599]                         }
[18:03:34.599]                       })
[18:03:34.599]                     }
[18:03:34.599]                     base::local({
[18:03:34.599]                       for (pkg in "future") {
[18:03:34.599]                         base::loadNamespace(pkg)
[18:03:34.599]                         base::library(pkg, character.only = TRUE)
[18:03:34.599]                       }
[18:03:34.599]                     })
[18:03:34.599]                   }
[18:03:34.599]                   ...future.strategy.old <- future::plan("list")
[18:03:34.599]                   options(future.plan = NULL)
[18:03:34.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:34.599]                 }
[18:03:34.599]                 ...future.workdir <- getwd()
[18:03:34.599]             }
[18:03:34.599]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:34.599]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:34.599]         }
[18:03:34.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:34.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:34.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:34.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:34.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:34.599]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:34.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:34.599]             base::names(...future.oldOptions))
[18:03:34.599]     }
[18:03:34.599]     if (FALSE) {
[18:03:34.599]     }
[18:03:34.599]     else {
[18:03:34.599]         if (TRUE) {
[18:03:34.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:34.599]                 open = "w")
[18:03:34.599]         }
[18:03:34.599]         else {
[18:03:34.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:34.599]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:34.599]         }
[18:03:34.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:34.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:34.599]             base::sink(type = "output", split = FALSE)
[18:03:34.599]             base::close(...future.stdout)
[18:03:34.599]         }, add = TRUE)
[18:03:34.599]     }
[18:03:34.599]     ...future.frame <- base::sys.nframe()
[18:03:34.599]     ...future.conditions <- base::list()
[18:03:34.599]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:34.599]     if (FALSE) {
[18:03:34.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:34.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:34.599]     }
[18:03:34.599]     ...future.result <- base::tryCatch({
[18:03:34.599]         base::withCallingHandlers({
[18:03:34.599]             ...future.value <- base::withVisible(base::local({
[18:03:34.599]                 message(sprintf("Calculating tile #%d of %d ...", 
[18:03:34.599]                   ii, n), appendLF = FALSE)
[18:03:34.599]                 fit <- mandelbrot(C)
[18:03:34.599]                 delay(fit)
[18:03:34.599]                 message(" done")
[18:03:34.599]                 fit
[18:03:34.599]             }))
[18:03:34.599]             future::FutureResult(value = ...future.value$value, 
[18:03:34.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.599]                   ...future.rng), globalenv = if (FALSE) 
[18:03:34.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:34.599]                     ...future.globalenv.names))
[18:03:34.599]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:34.599]         }, condition = base::local({
[18:03:34.599]             c <- base::c
[18:03:34.599]             inherits <- base::inherits
[18:03:34.599]             invokeRestart <- base::invokeRestart
[18:03:34.599]             length <- base::length
[18:03:34.599]             list <- base::list
[18:03:34.599]             seq.int <- base::seq.int
[18:03:34.599]             signalCondition <- base::signalCondition
[18:03:34.599]             sys.calls <- base::sys.calls
[18:03:34.599]             `[[` <- base::`[[`
[18:03:34.599]             `+` <- base::`+`
[18:03:34.599]             `<<-` <- base::`<<-`
[18:03:34.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:34.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:34.599]                   3L)]
[18:03:34.599]             }
[18:03:34.599]             function(cond) {
[18:03:34.599]                 is_error <- inherits(cond, "error")
[18:03:34.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:34.599]                   NULL)
[18:03:34.599]                 if (is_error) {
[18:03:34.599]                   sessionInformation <- function() {
[18:03:34.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:34.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:34.599]                       search = base::search(), system = base::Sys.info())
[18:03:34.599]                   }
[18:03:34.599]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:34.599]                     cond$call), session = sessionInformation(), 
[18:03:34.599]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:34.599]                   signalCondition(cond)
[18:03:34.599]                 }
[18:03:34.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:34.599]                 "immediateCondition"))) {
[18:03:34.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:34.599]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:34.599]                   if (TRUE && !signal) {
[18:03:34.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.599]                     {
[18:03:34.599]                       inherits <- base::inherits
[18:03:34.599]                       invokeRestart <- base::invokeRestart
[18:03:34.599]                       is.null <- base::is.null
[18:03:34.599]                       muffled <- FALSE
[18:03:34.599]                       if (inherits(cond, "message")) {
[18:03:34.599]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.599]                         if (muffled) 
[18:03:34.599]                           invokeRestart("muffleMessage")
[18:03:34.599]                       }
[18:03:34.599]                       else if (inherits(cond, "warning")) {
[18:03:34.599]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.599]                         if (muffled) 
[18:03:34.599]                           invokeRestart("muffleWarning")
[18:03:34.599]                       }
[18:03:34.599]                       else if (inherits(cond, "condition")) {
[18:03:34.599]                         if (!is.null(pattern)) {
[18:03:34.599]                           computeRestarts <- base::computeRestarts
[18:03:34.599]                           grepl <- base::grepl
[18:03:34.599]                           restarts <- computeRestarts(cond)
[18:03:34.599]                           for (restart in restarts) {
[18:03:34.599]                             name <- restart$name
[18:03:34.599]                             if (is.null(name)) 
[18:03:34.599]                               next
[18:03:34.599]                             if (!grepl(pattern, name)) 
[18:03:34.599]                               next
[18:03:34.599]                             invokeRestart(restart)
[18:03:34.599]                             muffled <- TRUE
[18:03:34.599]                             break
[18:03:34.599]                           }
[18:03:34.599]                         }
[18:03:34.599]                       }
[18:03:34.599]                       invisible(muffled)
[18:03:34.599]                     }
[18:03:34.599]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.599]                   }
[18:03:34.599]                 }
[18:03:34.599]                 else {
[18:03:34.599]                   if (TRUE) {
[18:03:34.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.599]                     {
[18:03:34.599]                       inherits <- base::inherits
[18:03:34.599]                       invokeRestart <- base::invokeRestart
[18:03:34.599]                       is.null <- base::is.null
[18:03:34.599]                       muffled <- FALSE
[18:03:34.599]                       if (inherits(cond, "message")) {
[18:03:34.599]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.599]                         if (muffled) 
[18:03:34.599]                           invokeRestart("muffleMessage")
[18:03:34.599]                       }
[18:03:34.599]                       else if (inherits(cond, "warning")) {
[18:03:34.599]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.599]                         if (muffled) 
[18:03:34.599]                           invokeRestart("muffleWarning")
[18:03:34.599]                       }
[18:03:34.599]                       else if (inherits(cond, "condition")) {
[18:03:34.599]                         if (!is.null(pattern)) {
[18:03:34.599]                           computeRestarts <- base::computeRestarts
[18:03:34.599]                           grepl <- base::grepl
[18:03:34.599]                           restarts <- computeRestarts(cond)
[18:03:34.599]                           for (restart in restarts) {
[18:03:34.599]                             name <- restart$name
[18:03:34.599]                             if (is.null(name)) 
[18:03:34.599]                               next
[18:03:34.599]                             if (!grepl(pattern, name)) 
[18:03:34.599]                               next
[18:03:34.599]                             invokeRestart(restart)
[18:03:34.599]                             muffled <- TRUE
[18:03:34.599]                             break
[18:03:34.599]                           }
[18:03:34.599]                         }
[18:03:34.599]                       }
[18:03:34.599]                       invisible(muffled)
[18:03:34.599]                     }
[18:03:34.599]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.599]                   }
[18:03:34.599]                 }
[18:03:34.599]             }
[18:03:34.599]         }))
[18:03:34.599]     }, error = function(ex) {
[18:03:34.599]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:34.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.599]                 ...future.rng), started = ...future.startTime, 
[18:03:34.599]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:34.599]             version = "1.8"), class = "FutureResult")
[18:03:34.599]     }, finally = {
[18:03:34.599]         if (!identical(...future.workdir, getwd())) 
[18:03:34.599]             setwd(...future.workdir)
[18:03:34.599]         {
[18:03:34.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:34.599]                 ...future.oldOptions$nwarnings <- NULL
[18:03:34.599]             }
[18:03:34.599]             base::options(...future.oldOptions)
[18:03:34.599]             if (.Platform$OS.type == "windows") {
[18:03:34.599]                 old_names <- names(...future.oldEnvVars)
[18:03:34.599]                 envs <- base::Sys.getenv()
[18:03:34.599]                 names <- names(envs)
[18:03:34.599]                 common <- intersect(names, old_names)
[18:03:34.599]                 added <- setdiff(names, old_names)
[18:03:34.599]                 removed <- setdiff(old_names, names)
[18:03:34.599]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:34.599]                   envs[common]]
[18:03:34.599]                 NAMES <- toupper(changed)
[18:03:34.599]                 args <- list()
[18:03:34.599]                 for (kk in seq_along(NAMES)) {
[18:03:34.599]                   name <- changed[[kk]]
[18:03:34.599]                   NAME <- NAMES[[kk]]
[18:03:34.599]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.599]                     next
[18:03:34.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.599]                 }
[18:03:34.599]                 NAMES <- toupper(added)
[18:03:34.599]                 for (kk in seq_along(NAMES)) {
[18:03:34.599]                   name <- added[[kk]]
[18:03:34.599]                   NAME <- NAMES[[kk]]
[18:03:34.599]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.599]                     next
[18:03:34.599]                   args[[name]] <- ""
[18:03:34.599]                 }
[18:03:34.599]                 NAMES <- toupper(removed)
[18:03:34.599]                 for (kk in seq_along(NAMES)) {
[18:03:34.599]                   name <- removed[[kk]]
[18:03:34.599]                   NAME <- NAMES[[kk]]
[18:03:34.599]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.599]                     next
[18:03:34.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.599]                 }
[18:03:34.599]                 if (length(args) > 0) 
[18:03:34.599]                   base::do.call(base::Sys.setenv, args = args)
[18:03:34.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:34.599]             }
[18:03:34.599]             else {
[18:03:34.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:34.599]             }
[18:03:34.599]             {
[18:03:34.599]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:34.599]                   0L) {
[18:03:34.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:34.599]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:34.599]                   base::options(opts)
[18:03:34.599]                 }
[18:03:34.599]                 {
[18:03:34.599]                   {
[18:03:34.599]                     NULL
[18:03:34.599]                     RNGkind("Mersenne-Twister")
[18:03:34.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:34.599]                       inherits = FALSE)
[18:03:34.599]                   }
[18:03:34.599]                   options(future.plan = NULL)
[18:03:34.599]                   if (is.na(NA_character_)) 
[18:03:34.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:34.599]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:34.599]                     .init = FALSE)
[18:03:34.599]                 }
[18:03:34.599]             }
[18:03:34.599]         }
[18:03:34.599]     })
[18:03:34.599]     if (TRUE) {
[18:03:34.599]         base::sink(type = "output", split = FALSE)
[18:03:34.599]         if (TRUE) {
[18:03:34.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:34.599]         }
[18:03:34.599]         else {
[18:03:34.599]             ...future.result["stdout"] <- base::list(NULL)
[18:03:34.599]         }
[18:03:34.599]         base::close(...future.stdout)
[18:03:34.599]         ...future.stdout <- NULL
[18:03:34.599]     }
[18:03:34.599]     ...future.result$conditions <- ...future.conditions
[18:03:34.599]     ...future.result$finished <- base::Sys.time()
[18:03:34.599]     ...future.result
[18:03:34.599] }
[18:03:34.602] assign_globals() ...
[18:03:34.602] List of 4
[18:03:34.602]  $ ii   : int 1
[18:03:34.602]  $ n    : int 4
[18:03:34.602]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[18:03:34.602]   ..- attr(*, "region")=List of 2
[18:03:34.602]   .. ..$ xrange: num [1:2] -2.25 -0.781
[18:03:34.602]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[18:03:34.602]   ..- attr(*, "tile")= int [1:2] 1 1
[18:03:34.602]  $ delay:function (counts)  
[18:03:34.602]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:34.602]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcd602bf0> 
[18:03:34.602]  - attr(*, "where")=List of 4
[18:03:34.602]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:34.602]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:34.602]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:34.602]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:34.602]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:34.602]  - attr(*, "resolved")= logi FALSE
[18:03:34.602]  - attr(*, "total_size")= num 14584
[18:03:34.602]  - attr(*, "already-done")= logi TRUE
[18:03:34.615] - copied ‘ii’ to environment
[18:03:34.615] - copied ‘n’ to environment
[18:03:34.615] - copied ‘C’ to environment
[18:03:34.616] - reassign environment for ‘delay’
[18:03:34.616] - copied ‘delay’ to environment
[18:03:34.616] assign_globals() ... done
[18:03:34.617] plan(): Setting new future strategy stack:
[18:03:34.617] List of future strategies:
[18:03:34.617] 1. sequential:
[18:03:34.617]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.617]    - tweaked: FALSE
[18:03:34.617]    - call: NULL
[18:03:34.618] plan(): nbrOfWorkers() = 1
[18:03:34.653] plan(): Setting new future strategy stack:
[18:03:34.654] List of future strategies:
[18:03:34.654] 1. sequential:
[18:03:34.654]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.654]    - tweaked: FALSE
[18:03:34.654]    - call: plan(strategy)
[18:03:34.655] plan(): nbrOfWorkers() = 1
[18:03:34.655] SequentialFuture started (and completed)
[18:03:34.655] signalConditions() ...
[18:03:34.655]  - include = ‘immediateCondition’
[18:03:34.656]  - exclude = 
[18:03:34.656]  - resignal = FALSE
[18:03:34.656]  - Number of conditions: 2
[18:03:34.656] signalConditions() ... done
[18:03:34.656] - Launch lazy future ... done
[18:03:34.657] run() for ‘SequentialFuture’ ... done
[18:03:34.657] - run() ... done
[18:03:34.657] - resolved() ...
[18:03:34.657] resolved() for ‘SequentialFuture’ ...
[18:03:34.657] - state: ‘finished’
[18:03:34.658] - run: TRUE
[18:03:34.658] - result: ‘FutureResult’
[18:03:34.658] resolved() for ‘SequentialFuture’ ... done
[18:03:34.658] - resolved: TRUE
[18:03:34.658] - resolved() ... done
[18:03:34.659] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[18:03:34.659] signalConditions() ...
[18:03:34.659]  - include = ‘immediateCondition’
[18:03:34.659]  - exclude = 
[18:03:34.659]  - resignal = FALSE
[18:03:34.660]  - Number of conditions: 2
[18:03:34.660] signalConditions() ... done
[18:03:34.660] Future state: ‘finished’
[18:03:34.660] signalConditions() ...
[18:03:34.660]  - include = ‘condition’
[18:03:34.661]  - exclude = ‘immediateCondition’
[18:03:34.661]  - resignal = TRUE
[18:03:34.661]  - Number of conditions: 2
[18:03:34.661]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[18:03:34.661]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:34.662] signalConditions() ... done
[18:03:34.664] resolved() for ‘Future’ ...
[18:03:34.665] - state: ‘created’
[18:03:34.665] - run: TRUE
[18:03:34.665] - run() ...
[18:03:34.665] run() for ‘Future’ ...
[18:03:34.666] - state: ‘created’
[18:03:34.666] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:34.667] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:34.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:34.667]   - Field: ‘label’
[18:03:34.667]   - Field: ‘local’
[18:03:34.668]   - Field: ‘owner’
[18:03:34.668]   - Field: ‘envir’
[18:03:34.668]   - Field: ‘packages’
[18:03:34.668]   - Field: ‘gc’
[18:03:34.668]   - Field: ‘conditions’
[18:03:34.669]   - Field: ‘expr’
[18:03:34.669]   - Field: ‘uuid’
[18:03:34.669]   - Field: ‘seed’
[18:03:34.669]   - Field: ‘version’
[18:03:34.669]   - Field: ‘result’
[18:03:34.670]   - Field: ‘asynchronous’
[18:03:34.670]   - Field: ‘calls’
[18:03:34.670]   - Field: ‘globals’
[18:03:34.670]   - Field: ‘stdout’
[18:03:34.670]   - Field: ‘earlySignal’
[18:03:34.671]   - Field: ‘lazy’
[18:03:34.671]   - Field: ‘state’
[18:03:34.671] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:34.671] - Launch lazy future ...
[18:03:34.671] Packages needed by the future expression (n = 1): ‘future’
[18:03:34.672] Packages needed by future strategies (n = 0): <none>
[18:03:34.673] {
[18:03:34.673]     {
[18:03:34.673]         {
[18:03:34.673]             ...future.startTime <- base::Sys.time()
[18:03:34.673]             {
[18:03:34.673]                 {
[18:03:34.673]                   {
[18:03:34.673]                     {
[18:03:34.673]                       base::local({
[18:03:34.673]                         has_future <- base::requireNamespace("future", 
[18:03:34.673]                           quietly = TRUE)
[18:03:34.673]                         if (has_future) {
[18:03:34.673]                           ns <- base::getNamespace("future")
[18:03:34.673]                           version <- ns[[".package"]][["version"]]
[18:03:34.673]                           if (is.null(version)) 
[18:03:34.673]                             version <- utils::packageVersion("future")
[18:03:34.673]                         }
[18:03:34.673]                         else {
[18:03:34.673]                           version <- NULL
[18:03:34.673]                         }
[18:03:34.673]                         if (!has_future || version < "1.8.0") {
[18:03:34.673]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:34.673]                             "", base::R.version$version.string), 
[18:03:34.673]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:34.673]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:34.673]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:34.673]                               "release", "version")], collapse = " "), 
[18:03:34.673]                             hostname = base::Sys.info()[["nodename"]])
[18:03:34.673]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:34.673]                             info)
[18:03:34.673]                           info <- base::paste(info, collapse = "; ")
[18:03:34.673]                           if (!has_future) {
[18:03:34.673]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:34.673]                               info)
[18:03:34.673]                           }
[18:03:34.673]                           else {
[18:03:34.673]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:34.673]                               info, version)
[18:03:34.673]                           }
[18:03:34.673]                           base::stop(msg)
[18:03:34.673]                         }
[18:03:34.673]                       })
[18:03:34.673]                     }
[18:03:34.673]                     base::local({
[18:03:34.673]                       for (pkg in "future") {
[18:03:34.673]                         base::loadNamespace(pkg)
[18:03:34.673]                         base::library(pkg, character.only = TRUE)
[18:03:34.673]                       }
[18:03:34.673]                     })
[18:03:34.673]                   }
[18:03:34.673]                   ...future.strategy.old <- future::plan("list")
[18:03:34.673]                   options(future.plan = NULL)
[18:03:34.673]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.673]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:34.673]                 }
[18:03:34.673]                 ...future.workdir <- getwd()
[18:03:34.673]             }
[18:03:34.673]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:34.673]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:34.673]         }
[18:03:34.673]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:34.673]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:34.673]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:34.673]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:34.673]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:34.673]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:34.673]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:34.673]             base::names(...future.oldOptions))
[18:03:34.673]     }
[18:03:34.673]     if (FALSE) {
[18:03:34.673]     }
[18:03:34.673]     else {
[18:03:34.673]         if (TRUE) {
[18:03:34.673]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:34.673]                 open = "w")
[18:03:34.673]         }
[18:03:34.673]         else {
[18:03:34.673]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:34.673]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:34.673]         }
[18:03:34.673]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:34.673]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:34.673]             base::sink(type = "output", split = FALSE)
[18:03:34.673]             base::close(...future.stdout)
[18:03:34.673]         }, add = TRUE)
[18:03:34.673]     }
[18:03:34.673]     ...future.frame <- base::sys.nframe()
[18:03:34.673]     ...future.conditions <- base::list()
[18:03:34.673]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:34.673]     if (FALSE) {
[18:03:34.673]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:34.673]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:34.673]     }
[18:03:34.673]     ...future.result <- base::tryCatch({
[18:03:34.673]         base::withCallingHandlers({
[18:03:34.673]             ...future.value <- base::withVisible(base::local({
[18:03:34.673]                 message(sprintf("Calculating tile #%d of %d ...", 
[18:03:34.673]                   ii, n), appendLF = FALSE)
[18:03:34.673]                 fit <- mandelbrot(C)
[18:03:34.673]                 delay(fit)
[18:03:34.673]                 message(" done")
[18:03:34.673]                 fit
[18:03:34.673]             }))
[18:03:34.673]             future::FutureResult(value = ...future.value$value, 
[18:03:34.673]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.673]                   ...future.rng), globalenv = if (FALSE) 
[18:03:34.673]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:34.673]                     ...future.globalenv.names))
[18:03:34.673]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:34.673]         }, condition = base::local({
[18:03:34.673]             c <- base::c
[18:03:34.673]             inherits <- base::inherits
[18:03:34.673]             invokeRestart <- base::invokeRestart
[18:03:34.673]             length <- base::length
[18:03:34.673]             list <- base::list
[18:03:34.673]             seq.int <- base::seq.int
[18:03:34.673]             signalCondition <- base::signalCondition
[18:03:34.673]             sys.calls <- base::sys.calls
[18:03:34.673]             `[[` <- base::`[[`
[18:03:34.673]             `+` <- base::`+`
[18:03:34.673]             `<<-` <- base::`<<-`
[18:03:34.673]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:34.673]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:34.673]                   3L)]
[18:03:34.673]             }
[18:03:34.673]             function(cond) {
[18:03:34.673]                 is_error <- inherits(cond, "error")
[18:03:34.673]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:34.673]                   NULL)
[18:03:34.673]                 if (is_error) {
[18:03:34.673]                   sessionInformation <- function() {
[18:03:34.673]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:34.673]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:34.673]                       search = base::search(), system = base::Sys.info())
[18:03:34.673]                   }
[18:03:34.673]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.673]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:34.673]                     cond$call), session = sessionInformation(), 
[18:03:34.673]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:34.673]                   signalCondition(cond)
[18:03:34.673]                 }
[18:03:34.673]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:34.673]                 "immediateCondition"))) {
[18:03:34.673]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:34.673]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.673]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:34.673]                   if (TRUE && !signal) {
[18:03:34.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.673]                     {
[18:03:34.673]                       inherits <- base::inherits
[18:03:34.673]                       invokeRestart <- base::invokeRestart
[18:03:34.673]                       is.null <- base::is.null
[18:03:34.673]                       muffled <- FALSE
[18:03:34.673]                       if (inherits(cond, "message")) {
[18:03:34.673]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.673]                         if (muffled) 
[18:03:34.673]                           invokeRestart("muffleMessage")
[18:03:34.673]                       }
[18:03:34.673]                       else if (inherits(cond, "warning")) {
[18:03:34.673]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.673]                         if (muffled) 
[18:03:34.673]                           invokeRestart("muffleWarning")
[18:03:34.673]                       }
[18:03:34.673]                       else if (inherits(cond, "condition")) {
[18:03:34.673]                         if (!is.null(pattern)) {
[18:03:34.673]                           computeRestarts <- base::computeRestarts
[18:03:34.673]                           grepl <- base::grepl
[18:03:34.673]                           restarts <- computeRestarts(cond)
[18:03:34.673]                           for (restart in restarts) {
[18:03:34.673]                             name <- restart$name
[18:03:34.673]                             if (is.null(name)) 
[18:03:34.673]                               next
[18:03:34.673]                             if (!grepl(pattern, name)) 
[18:03:34.673]                               next
[18:03:34.673]                             invokeRestart(restart)
[18:03:34.673]                             muffled <- TRUE
[18:03:34.673]                             break
[18:03:34.673]                           }
[18:03:34.673]                         }
[18:03:34.673]                       }
[18:03:34.673]                       invisible(muffled)
[18:03:34.673]                     }
[18:03:34.673]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.673]                   }
[18:03:34.673]                 }
[18:03:34.673]                 else {
[18:03:34.673]                   if (TRUE) {
[18:03:34.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.673]                     {
[18:03:34.673]                       inherits <- base::inherits
[18:03:34.673]                       invokeRestart <- base::invokeRestart
[18:03:34.673]                       is.null <- base::is.null
[18:03:34.673]                       muffled <- FALSE
[18:03:34.673]                       if (inherits(cond, "message")) {
[18:03:34.673]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.673]                         if (muffled) 
[18:03:34.673]                           invokeRestart("muffleMessage")
[18:03:34.673]                       }
[18:03:34.673]                       else if (inherits(cond, "warning")) {
[18:03:34.673]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.673]                         if (muffled) 
[18:03:34.673]                           invokeRestart("muffleWarning")
[18:03:34.673]                       }
[18:03:34.673]                       else if (inherits(cond, "condition")) {
[18:03:34.673]                         if (!is.null(pattern)) {
[18:03:34.673]                           computeRestarts <- base::computeRestarts
[18:03:34.673]                           grepl <- base::grepl
[18:03:34.673]                           restarts <- computeRestarts(cond)
[18:03:34.673]                           for (restart in restarts) {
[18:03:34.673]                             name <- restart$name
[18:03:34.673]                             if (is.null(name)) 
[18:03:34.673]                               next
[18:03:34.673]                             if (!grepl(pattern, name)) 
[18:03:34.673]                               next
[18:03:34.673]                             invokeRestart(restart)
[18:03:34.673]                             muffled <- TRUE
[18:03:34.673]                             break
[18:03:34.673]                           }
[18:03:34.673]                         }
[18:03:34.673]                       }
[18:03:34.673]                       invisible(muffled)
[18:03:34.673]                     }
[18:03:34.673]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.673]                   }
[18:03:34.673]                 }
[18:03:34.673]             }
[18:03:34.673]         }))
[18:03:34.673]     }, error = function(ex) {
[18:03:34.673]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:34.673]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.673]                 ...future.rng), started = ...future.startTime, 
[18:03:34.673]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:34.673]             version = "1.8"), class = "FutureResult")
[18:03:34.673]     }, finally = {
[18:03:34.673]         if (!identical(...future.workdir, getwd())) 
[18:03:34.673]             setwd(...future.workdir)
[18:03:34.673]         {
[18:03:34.673]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:34.673]                 ...future.oldOptions$nwarnings <- NULL
[18:03:34.673]             }
[18:03:34.673]             base::options(...future.oldOptions)
[18:03:34.673]             if (.Platform$OS.type == "windows") {
[18:03:34.673]                 old_names <- names(...future.oldEnvVars)
[18:03:34.673]                 envs <- base::Sys.getenv()
[18:03:34.673]                 names <- names(envs)
[18:03:34.673]                 common <- intersect(names, old_names)
[18:03:34.673]                 added <- setdiff(names, old_names)
[18:03:34.673]                 removed <- setdiff(old_names, names)
[18:03:34.673]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:34.673]                   envs[common]]
[18:03:34.673]                 NAMES <- toupper(changed)
[18:03:34.673]                 args <- list()
[18:03:34.673]                 for (kk in seq_along(NAMES)) {
[18:03:34.673]                   name <- changed[[kk]]
[18:03:34.673]                   NAME <- NAMES[[kk]]
[18:03:34.673]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.673]                     next
[18:03:34.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.673]                 }
[18:03:34.673]                 NAMES <- toupper(added)
[18:03:34.673]                 for (kk in seq_along(NAMES)) {
[18:03:34.673]                   name <- added[[kk]]
[18:03:34.673]                   NAME <- NAMES[[kk]]
[18:03:34.673]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.673]                     next
[18:03:34.673]                   args[[name]] <- ""
[18:03:34.673]                 }
[18:03:34.673]                 NAMES <- toupper(removed)
[18:03:34.673]                 for (kk in seq_along(NAMES)) {
[18:03:34.673]                   name <- removed[[kk]]
[18:03:34.673]                   NAME <- NAMES[[kk]]
[18:03:34.673]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.673]                     next
[18:03:34.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.673]                 }
[18:03:34.673]                 if (length(args) > 0) 
[18:03:34.673]                   base::do.call(base::Sys.setenv, args = args)
[18:03:34.673]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:34.673]             }
[18:03:34.673]             else {
[18:03:34.673]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:34.673]             }
[18:03:34.673]             {
[18:03:34.673]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:34.673]                   0L) {
[18:03:34.673]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:34.673]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:34.673]                   base::options(opts)
[18:03:34.673]                 }
[18:03:34.673]                 {
[18:03:34.673]                   {
[18:03:34.673]                     NULL
[18:03:34.673]                     RNGkind("Mersenne-Twister")
[18:03:34.673]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:34.673]                       inherits = FALSE)
[18:03:34.673]                   }
[18:03:34.673]                   options(future.plan = NULL)
[18:03:34.673]                   if (is.na(NA_character_)) 
[18:03:34.673]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.673]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:34.673]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:34.673]                     .init = FALSE)
[18:03:34.673]                 }
[18:03:34.673]             }
[18:03:34.673]         }
[18:03:34.673]     })
[18:03:34.673]     if (TRUE) {
[18:03:34.673]         base::sink(type = "output", split = FALSE)
[18:03:34.673]         if (TRUE) {
[18:03:34.673]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:34.673]         }
[18:03:34.673]         else {
[18:03:34.673]             ...future.result["stdout"] <- base::list(NULL)
[18:03:34.673]         }
[18:03:34.673]         base::close(...future.stdout)
[18:03:34.673]         ...future.stdout <- NULL
[18:03:34.673]     }
[18:03:34.673]     ...future.result$conditions <- ...future.conditions
[18:03:34.673]     ...future.result$finished <- base::Sys.time()
[18:03:34.673]     ...future.result
[18:03:34.673] }
[18:03:34.676] assign_globals() ...
[18:03:34.676] List of 4
[18:03:34.676]  $ ii   : int 2
[18:03:34.676]  $ n    : int 4
[18:03:34.676]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[18:03:34.676]   ..- attr(*, "region")=List of 2
[18:03:34.676]   .. ..$ xrange: num [1:2] -0.719 0.75
[18:03:34.676]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[18:03:34.676]   ..- attr(*, "tile")= int [1:2] 1 2
[18:03:34.676]  $ delay:function (counts)  
[18:03:34.676]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:34.676]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcd602bf0> 
[18:03:34.676]  - attr(*, "where")=List of 4
[18:03:34.676]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:34.676]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:34.676]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:34.676]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:34.676]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:34.676]  - attr(*, "resolved")= logi FALSE
[18:03:34.676]  - attr(*, "total_size")= num 14584
[18:03:34.676]  - attr(*, "already-done")= logi TRUE
[18:03:34.688] - copied ‘ii’ to environment
[18:03:34.688] - copied ‘n’ to environment
[18:03:34.689] - copied ‘C’ to environment
[18:03:34.689] - reassign environment for ‘delay’
[18:03:34.689] - copied ‘delay’ to environment
[18:03:34.690] assign_globals() ... done
[18:03:34.690] plan(): Setting new future strategy stack:
[18:03:34.690] List of future strategies:
[18:03:34.690] 1. sequential:
[18:03:34.690]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.690]    - tweaked: FALSE
[18:03:34.690]    - call: NULL
[18:03:34.691] plan(): nbrOfWorkers() = 1
[18:03:34.723] plan(): Setting new future strategy stack:
[18:03:34.724] List of future strategies:
[18:03:34.724] 1. sequential:
[18:03:34.724]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.724]    - tweaked: FALSE
[18:03:34.724]    - call: plan(strategy)
[18:03:34.725] plan(): nbrOfWorkers() = 1
[18:03:34.725] SequentialFuture started (and completed)
[18:03:34.725] signalConditions() ...
[18:03:34.725]  - include = ‘immediateCondition’
[18:03:34.726]  - exclude = 
[18:03:34.726]  - resignal = FALSE
[18:03:34.726]  - Number of conditions: 2
[18:03:34.726] signalConditions() ... done
[18:03:34.726] - Launch lazy future ... done
[18:03:34.727] run() for ‘SequentialFuture’ ... done
[18:03:34.727] - run() ... done
[18:03:34.727] - resolved() ...
[18:03:34.727] resolved() for ‘SequentialFuture’ ...
[18:03:34.727] - state: ‘finished’
[18:03:34.728] - run: TRUE
[18:03:34.728] - result: ‘FutureResult’
[18:03:34.728] resolved() for ‘SequentialFuture’ ... done
[18:03:34.728] - resolved: TRUE
[18:03:34.728] - resolved() ... done
[18:03:34.728] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[18:03:34.729] signalConditions() ...
[18:03:34.729]  - include = ‘immediateCondition’
[18:03:34.729]  - exclude = 
[18:03:34.729]  - resignal = FALSE
[18:03:34.730]  - Number of conditions: 2
[18:03:34.730] signalConditions() ... done
[18:03:34.730] Future state: ‘finished’
[18:03:34.730] signalConditions() ...
[18:03:34.730]  - include = ‘condition’
[18:03:34.731]  - exclude = ‘immediateCondition’
[18:03:34.731]  - resignal = TRUE
[18:03:34.731]  - Number of conditions: 2
[18:03:34.731]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[18:03:34.731]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:34.732] signalConditions() ... done
[18:03:34.733] resolved() for ‘Future’ ...
[18:03:34.733] - state: ‘created’
[18:03:34.733] - run: TRUE
[18:03:34.733] - run() ...
[18:03:34.734] run() for ‘Future’ ...
[18:03:34.734] - state: ‘created’
[18:03:34.734] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:34.735] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:34.735] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:34.735]   - Field: ‘label’
[18:03:34.735]   - Field: ‘local’
[18:03:34.736]   - Field: ‘owner’
[18:03:34.736]   - Field: ‘envir’
[18:03:34.736]   - Field: ‘packages’
[18:03:34.736]   - Field: ‘gc’
[18:03:34.736]   - Field: ‘conditions’
[18:03:34.737]   - Field: ‘expr’
[18:03:34.737]   - Field: ‘uuid’
[18:03:34.737]   - Field: ‘seed’
[18:03:34.737]   - Field: ‘version’
[18:03:34.737]   - Field: ‘result’
[18:03:34.738]   - Field: ‘asynchronous’
[18:03:34.738]   - Field: ‘calls’
[18:03:34.738]   - Field: ‘globals’
[18:03:34.738]   - Field: ‘stdout’
[18:03:34.738]   - Field: ‘earlySignal’
[18:03:34.738]   - Field: ‘lazy’
[18:03:34.739]   - Field: ‘state’
[18:03:34.739] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:34.739] - Launch lazy future ...
[18:03:34.739] Packages needed by the future expression (n = 1): ‘future’
[18:03:34.740] Packages needed by future strategies (n = 0): <none>
[18:03:34.741] {
[18:03:34.741]     {
[18:03:34.741]         {
[18:03:34.741]             ...future.startTime <- base::Sys.time()
[18:03:34.741]             {
[18:03:34.741]                 {
[18:03:34.741]                   {
[18:03:34.741]                     {
[18:03:34.741]                       base::local({
[18:03:34.741]                         has_future <- base::requireNamespace("future", 
[18:03:34.741]                           quietly = TRUE)
[18:03:34.741]                         if (has_future) {
[18:03:34.741]                           ns <- base::getNamespace("future")
[18:03:34.741]                           version <- ns[[".package"]][["version"]]
[18:03:34.741]                           if (is.null(version)) 
[18:03:34.741]                             version <- utils::packageVersion("future")
[18:03:34.741]                         }
[18:03:34.741]                         else {
[18:03:34.741]                           version <- NULL
[18:03:34.741]                         }
[18:03:34.741]                         if (!has_future || version < "1.8.0") {
[18:03:34.741]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:34.741]                             "", base::R.version$version.string), 
[18:03:34.741]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:34.741]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:34.741]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:34.741]                               "release", "version")], collapse = " "), 
[18:03:34.741]                             hostname = base::Sys.info()[["nodename"]])
[18:03:34.741]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:34.741]                             info)
[18:03:34.741]                           info <- base::paste(info, collapse = "; ")
[18:03:34.741]                           if (!has_future) {
[18:03:34.741]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:34.741]                               info)
[18:03:34.741]                           }
[18:03:34.741]                           else {
[18:03:34.741]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:34.741]                               info, version)
[18:03:34.741]                           }
[18:03:34.741]                           base::stop(msg)
[18:03:34.741]                         }
[18:03:34.741]                       })
[18:03:34.741]                     }
[18:03:34.741]                     base::local({
[18:03:34.741]                       for (pkg in "future") {
[18:03:34.741]                         base::loadNamespace(pkg)
[18:03:34.741]                         base::library(pkg, character.only = TRUE)
[18:03:34.741]                       }
[18:03:34.741]                     })
[18:03:34.741]                   }
[18:03:34.741]                   ...future.strategy.old <- future::plan("list")
[18:03:34.741]                   options(future.plan = NULL)
[18:03:34.741]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.741]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:34.741]                 }
[18:03:34.741]                 ...future.workdir <- getwd()
[18:03:34.741]             }
[18:03:34.741]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:34.741]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:34.741]         }
[18:03:34.741]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:34.741]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:34.741]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:34.741]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:34.741]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:34.741]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:34.741]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:34.741]             base::names(...future.oldOptions))
[18:03:34.741]     }
[18:03:34.741]     if (FALSE) {
[18:03:34.741]     }
[18:03:34.741]     else {
[18:03:34.741]         if (TRUE) {
[18:03:34.741]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:34.741]                 open = "w")
[18:03:34.741]         }
[18:03:34.741]         else {
[18:03:34.741]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:34.741]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:34.741]         }
[18:03:34.741]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:34.741]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:34.741]             base::sink(type = "output", split = FALSE)
[18:03:34.741]             base::close(...future.stdout)
[18:03:34.741]         }, add = TRUE)
[18:03:34.741]     }
[18:03:34.741]     ...future.frame <- base::sys.nframe()
[18:03:34.741]     ...future.conditions <- base::list()
[18:03:34.741]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:34.741]     if (FALSE) {
[18:03:34.741]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:34.741]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:34.741]     }
[18:03:34.741]     ...future.result <- base::tryCatch({
[18:03:34.741]         base::withCallingHandlers({
[18:03:34.741]             ...future.value <- base::withVisible(base::local({
[18:03:34.741]                 message(sprintf("Calculating tile #%d of %d ...", 
[18:03:34.741]                   ii, n), appendLF = FALSE)
[18:03:34.741]                 fit <- mandelbrot(C)
[18:03:34.741]                 delay(fit)
[18:03:34.741]                 message(" done")
[18:03:34.741]                 fit
[18:03:34.741]             }))
[18:03:34.741]             future::FutureResult(value = ...future.value$value, 
[18:03:34.741]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.741]                   ...future.rng), globalenv = if (FALSE) 
[18:03:34.741]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:34.741]                     ...future.globalenv.names))
[18:03:34.741]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:34.741]         }, condition = base::local({
[18:03:34.741]             c <- base::c
[18:03:34.741]             inherits <- base::inherits
[18:03:34.741]             invokeRestart <- base::invokeRestart
[18:03:34.741]             length <- base::length
[18:03:34.741]             list <- base::list
[18:03:34.741]             seq.int <- base::seq.int
[18:03:34.741]             signalCondition <- base::signalCondition
[18:03:34.741]             sys.calls <- base::sys.calls
[18:03:34.741]             `[[` <- base::`[[`
[18:03:34.741]             `+` <- base::`+`
[18:03:34.741]             `<<-` <- base::`<<-`
[18:03:34.741]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:34.741]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:34.741]                   3L)]
[18:03:34.741]             }
[18:03:34.741]             function(cond) {
[18:03:34.741]                 is_error <- inherits(cond, "error")
[18:03:34.741]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:34.741]                   NULL)
[18:03:34.741]                 if (is_error) {
[18:03:34.741]                   sessionInformation <- function() {
[18:03:34.741]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:34.741]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:34.741]                       search = base::search(), system = base::Sys.info())
[18:03:34.741]                   }
[18:03:34.741]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.741]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:34.741]                     cond$call), session = sessionInformation(), 
[18:03:34.741]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:34.741]                   signalCondition(cond)
[18:03:34.741]                 }
[18:03:34.741]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:34.741]                 "immediateCondition"))) {
[18:03:34.741]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:34.741]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.741]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:34.741]                   if (TRUE && !signal) {
[18:03:34.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.741]                     {
[18:03:34.741]                       inherits <- base::inherits
[18:03:34.741]                       invokeRestart <- base::invokeRestart
[18:03:34.741]                       is.null <- base::is.null
[18:03:34.741]                       muffled <- FALSE
[18:03:34.741]                       if (inherits(cond, "message")) {
[18:03:34.741]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.741]                         if (muffled) 
[18:03:34.741]                           invokeRestart("muffleMessage")
[18:03:34.741]                       }
[18:03:34.741]                       else if (inherits(cond, "warning")) {
[18:03:34.741]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.741]                         if (muffled) 
[18:03:34.741]                           invokeRestart("muffleWarning")
[18:03:34.741]                       }
[18:03:34.741]                       else if (inherits(cond, "condition")) {
[18:03:34.741]                         if (!is.null(pattern)) {
[18:03:34.741]                           computeRestarts <- base::computeRestarts
[18:03:34.741]                           grepl <- base::grepl
[18:03:34.741]                           restarts <- computeRestarts(cond)
[18:03:34.741]                           for (restart in restarts) {
[18:03:34.741]                             name <- restart$name
[18:03:34.741]                             if (is.null(name)) 
[18:03:34.741]                               next
[18:03:34.741]                             if (!grepl(pattern, name)) 
[18:03:34.741]                               next
[18:03:34.741]                             invokeRestart(restart)
[18:03:34.741]                             muffled <- TRUE
[18:03:34.741]                             break
[18:03:34.741]                           }
[18:03:34.741]                         }
[18:03:34.741]                       }
[18:03:34.741]                       invisible(muffled)
[18:03:34.741]                     }
[18:03:34.741]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.741]                   }
[18:03:34.741]                 }
[18:03:34.741]                 else {
[18:03:34.741]                   if (TRUE) {
[18:03:34.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.741]                     {
[18:03:34.741]                       inherits <- base::inherits
[18:03:34.741]                       invokeRestart <- base::invokeRestart
[18:03:34.741]                       is.null <- base::is.null
[18:03:34.741]                       muffled <- FALSE
[18:03:34.741]                       if (inherits(cond, "message")) {
[18:03:34.741]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.741]                         if (muffled) 
[18:03:34.741]                           invokeRestart("muffleMessage")
[18:03:34.741]                       }
[18:03:34.741]                       else if (inherits(cond, "warning")) {
[18:03:34.741]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.741]                         if (muffled) 
[18:03:34.741]                           invokeRestart("muffleWarning")
[18:03:34.741]                       }
[18:03:34.741]                       else if (inherits(cond, "condition")) {
[18:03:34.741]                         if (!is.null(pattern)) {
[18:03:34.741]                           computeRestarts <- base::computeRestarts
[18:03:34.741]                           grepl <- base::grepl
[18:03:34.741]                           restarts <- computeRestarts(cond)
[18:03:34.741]                           for (restart in restarts) {
[18:03:34.741]                             name <- restart$name
[18:03:34.741]                             if (is.null(name)) 
[18:03:34.741]                               next
[18:03:34.741]                             if (!grepl(pattern, name)) 
[18:03:34.741]                               next
[18:03:34.741]                             invokeRestart(restart)
[18:03:34.741]                             muffled <- TRUE
[18:03:34.741]                             break
[18:03:34.741]                           }
[18:03:34.741]                         }
[18:03:34.741]                       }
[18:03:34.741]                       invisible(muffled)
[18:03:34.741]                     }
[18:03:34.741]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.741]                   }
[18:03:34.741]                 }
[18:03:34.741]             }
[18:03:34.741]         }))
[18:03:34.741]     }, error = function(ex) {
[18:03:34.741]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:34.741]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.741]                 ...future.rng), started = ...future.startTime, 
[18:03:34.741]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:34.741]             version = "1.8"), class = "FutureResult")
[18:03:34.741]     }, finally = {
[18:03:34.741]         if (!identical(...future.workdir, getwd())) 
[18:03:34.741]             setwd(...future.workdir)
[18:03:34.741]         {
[18:03:34.741]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:34.741]                 ...future.oldOptions$nwarnings <- NULL
[18:03:34.741]             }
[18:03:34.741]             base::options(...future.oldOptions)
[18:03:34.741]             if (.Platform$OS.type == "windows") {
[18:03:34.741]                 old_names <- names(...future.oldEnvVars)
[18:03:34.741]                 envs <- base::Sys.getenv()
[18:03:34.741]                 names <- names(envs)
[18:03:34.741]                 common <- intersect(names, old_names)
[18:03:34.741]                 added <- setdiff(names, old_names)
[18:03:34.741]                 removed <- setdiff(old_names, names)
[18:03:34.741]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:34.741]                   envs[common]]
[18:03:34.741]                 NAMES <- toupper(changed)
[18:03:34.741]                 args <- list()
[18:03:34.741]                 for (kk in seq_along(NAMES)) {
[18:03:34.741]                   name <- changed[[kk]]
[18:03:34.741]                   NAME <- NAMES[[kk]]
[18:03:34.741]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.741]                     next
[18:03:34.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.741]                 }
[18:03:34.741]                 NAMES <- toupper(added)
[18:03:34.741]                 for (kk in seq_along(NAMES)) {
[18:03:34.741]                   name <- added[[kk]]
[18:03:34.741]                   NAME <- NAMES[[kk]]
[18:03:34.741]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.741]                     next
[18:03:34.741]                   args[[name]] <- ""
[18:03:34.741]                 }
[18:03:34.741]                 NAMES <- toupper(removed)
[18:03:34.741]                 for (kk in seq_along(NAMES)) {
[18:03:34.741]                   name <- removed[[kk]]
[18:03:34.741]                   NAME <- NAMES[[kk]]
[18:03:34.741]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.741]                     next
[18:03:34.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.741]                 }
[18:03:34.741]                 if (length(args) > 0) 
[18:03:34.741]                   base::do.call(base::Sys.setenv, args = args)
[18:03:34.741]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:34.741]             }
[18:03:34.741]             else {
[18:03:34.741]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:34.741]             }
[18:03:34.741]             {
[18:03:34.741]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:34.741]                   0L) {
[18:03:34.741]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:34.741]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:34.741]                   base::options(opts)
[18:03:34.741]                 }
[18:03:34.741]                 {
[18:03:34.741]                   {
[18:03:34.741]                     NULL
[18:03:34.741]                     RNGkind("Mersenne-Twister")
[18:03:34.741]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:34.741]                       inherits = FALSE)
[18:03:34.741]                   }
[18:03:34.741]                   options(future.plan = NULL)
[18:03:34.741]                   if (is.na(NA_character_)) 
[18:03:34.741]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.741]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:34.741]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:34.741]                     .init = FALSE)
[18:03:34.741]                 }
[18:03:34.741]             }
[18:03:34.741]         }
[18:03:34.741]     })
[18:03:34.741]     if (TRUE) {
[18:03:34.741]         base::sink(type = "output", split = FALSE)
[18:03:34.741]         if (TRUE) {
[18:03:34.741]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:34.741]         }
[18:03:34.741]         else {
[18:03:34.741]             ...future.result["stdout"] <- base::list(NULL)
[18:03:34.741]         }
[18:03:34.741]         base::close(...future.stdout)
[18:03:34.741]         ...future.stdout <- NULL
[18:03:34.741]     }
[18:03:34.741]     ...future.result$conditions <- ...future.conditions
[18:03:34.741]     ...future.result$finished <- base::Sys.time()
[18:03:34.741]     ...future.result
[18:03:34.741] }
[18:03:34.744] assign_globals() ...
[18:03:34.745] List of 4
[18:03:34.745]  $ ii   : int 3
[18:03:34.745]  $ n    : int 4
[18:03:34.745]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[18:03:34.745]   ..- attr(*, "region")=List of 2
[18:03:34.745]   .. ..$ xrange: num [1:2] -2.25 -0.781
[18:03:34.745]   .. ..$ yrange: num [1:2] 0.0306 1.5
[18:03:34.745]   ..- attr(*, "tile")= int [1:2] 2 1
[18:03:34.745]  $ delay:function (counts)  
[18:03:34.745]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:34.745]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcd602bf0> 
[18:03:34.745]  - attr(*, "where")=List of 4
[18:03:34.745]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:34.745]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:34.745]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:34.745]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:34.745]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:34.745]  - attr(*, "resolved")= logi FALSE
[18:03:34.745]  - attr(*, "total_size")= num 14584
[18:03:34.745]  - attr(*, "already-done")= logi TRUE
[18:03:34.757] - copied ‘ii’ to environment
[18:03:34.757] - copied ‘n’ to environment
[18:03:34.757] - copied ‘C’ to environment
[18:03:34.757] - reassign environment for ‘delay’
[18:03:34.758] - copied ‘delay’ to environment
[18:03:34.758] assign_globals() ... done
[18:03:34.759] plan(): Setting new future strategy stack:
[18:03:34.759] List of future strategies:
[18:03:34.759] 1. sequential:
[18:03:34.759]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.759]    - tweaked: FALSE
[18:03:34.759]    - call: NULL
[18:03:34.760] plan(): nbrOfWorkers() = 1
[18:03:34.793] plan(): Setting new future strategy stack:
[18:03:34.794] List of future strategies:
[18:03:34.794] 1. sequential:
[18:03:34.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.794]    - tweaked: FALSE
[18:03:34.794]    - call: plan(strategy)
[18:03:34.795] plan(): nbrOfWorkers() = 1
[18:03:34.795] SequentialFuture started (and completed)
[18:03:34.795] signalConditions() ...
[18:03:34.795]  - include = ‘immediateCondition’
[18:03:34.796]  - exclude = 
[18:03:34.796]  - resignal = FALSE
[18:03:34.796]  - Number of conditions: 2
[18:03:34.796] signalConditions() ... done
[18:03:34.796] - Launch lazy future ... done
[18:03:34.797] run() for ‘SequentialFuture’ ... done
[18:03:34.797] - run() ... done
[18:03:34.797] - resolved() ...
[18:03:34.797] resolved() for ‘SequentialFuture’ ...
[18:03:34.797] - state: ‘finished’
[18:03:34.798] - run: TRUE
[18:03:34.798] - result: ‘FutureResult’
[18:03:34.798] resolved() for ‘SequentialFuture’ ... done
[18:03:34.798] - resolved: TRUE
[18:03:34.798] - resolved() ... done
[18:03:34.798] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[18:03:34.799] signalConditions() ...
[18:03:34.799]  - include = ‘immediateCondition’
[18:03:34.799]  - exclude = 
[18:03:34.799]  - resignal = FALSE
[18:03:34.799]  - Number of conditions: 2
[18:03:34.800] signalConditions() ... done
[18:03:34.800] Future state: ‘finished’
[18:03:34.800] signalConditions() ...
[18:03:34.800]  - include = ‘condition’
[18:03:34.801]  - exclude = ‘immediateCondition’
[18:03:34.801]  - resignal = TRUE
[18:03:34.801]  - Number of conditions: 2
[18:03:34.801]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[18:03:34.801]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:34.802] signalConditions() ... done
[18:03:34.803] resolved() for ‘Future’ ...
[18:03:34.803] - state: ‘created’
[18:03:34.803] - run: TRUE
[18:03:34.803] - run() ...
[18:03:34.804] run() for ‘Future’ ...
[18:03:34.804] - state: ‘created’
[18:03:34.804] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:34.805] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:34.805] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:34.805]   - Field: ‘label’
[18:03:34.805]   - Field: ‘local’
[18:03:34.805]   - Field: ‘owner’
[18:03:34.806]   - Field: ‘envir’
[18:03:34.806]   - Field: ‘packages’
[18:03:34.806]   - Field: ‘gc’
[18:03:34.806]   - Field: ‘conditions’
[18:03:34.806]   - Field: ‘expr’
[18:03:34.807]   - Field: ‘uuid’
[18:03:34.807]   - Field: ‘seed’
[18:03:34.807]   - Field: ‘version’
[18:03:34.807]   - Field: ‘result’
[18:03:34.807]   - Field: ‘asynchronous’
[18:03:34.808]   - Field: ‘calls’
[18:03:34.808]   - Field: ‘globals’
[18:03:34.808]   - Field: ‘stdout’
[18:03:34.808]   - Field: ‘earlySignal’
[18:03:34.808]   - Field: ‘lazy’
[18:03:34.809]   - Field: ‘state’
[18:03:34.809] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:34.809] - Launch lazy future ...
[18:03:34.809] Packages needed by the future expression (n = 1): ‘future’
[18:03:34.810] Packages needed by future strategies (n = 0): <none>
[18:03:34.811] {
[18:03:34.811]     {
[18:03:34.811]         {
[18:03:34.811]             ...future.startTime <- base::Sys.time()
[18:03:34.811]             {
[18:03:34.811]                 {
[18:03:34.811]                   {
[18:03:34.811]                     {
[18:03:34.811]                       base::local({
[18:03:34.811]                         has_future <- base::requireNamespace("future", 
[18:03:34.811]                           quietly = TRUE)
[18:03:34.811]                         if (has_future) {
[18:03:34.811]                           ns <- base::getNamespace("future")
[18:03:34.811]                           version <- ns[[".package"]][["version"]]
[18:03:34.811]                           if (is.null(version)) 
[18:03:34.811]                             version <- utils::packageVersion("future")
[18:03:34.811]                         }
[18:03:34.811]                         else {
[18:03:34.811]                           version <- NULL
[18:03:34.811]                         }
[18:03:34.811]                         if (!has_future || version < "1.8.0") {
[18:03:34.811]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:34.811]                             "", base::R.version$version.string), 
[18:03:34.811]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:34.811]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:34.811]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:34.811]                               "release", "version")], collapse = " "), 
[18:03:34.811]                             hostname = base::Sys.info()[["nodename"]])
[18:03:34.811]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:34.811]                             info)
[18:03:34.811]                           info <- base::paste(info, collapse = "; ")
[18:03:34.811]                           if (!has_future) {
[18:03:34.811]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:34.811]                               info)
[18:03:34.811]                           }
[18:03:34.811]                           else {
[18:03:34.811]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:34.811]                               info, version)
[18:03:34.811]                           }
[18:03:34.811]                           base::stop(msg)
[18:03:34.811]                         }
[18:03:34.811]                       })
[18:03:34.811]                     }
[18:03:34.811]                     base::local({
[18:03:34.811]                       for (pkg in "future") {
[18:03:34.811]                         base::loadNamespace(pkg)
[18:03:34.811]                         base::library(pkg, character.only = TRUE)
[18:03:34.811]                       }
[18:03:34.811]                     })
[18:03:34.811]                   }
[18:03:34.811]                   ...future.strategy.old <- future::plan("list")
[18:03:34.811]                   options(future.plan = NULL)
[18:03:34.811]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.811]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:34.811]                 }
[18:03:34.811]                 ...future.workdir <- getwd()
[18:03:34.811]             }
[18:03:34.811]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:34.811]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:34.811]         }
[18:03:34.811]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:34.811]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:34.811]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:34.811]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:34.811]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:34.811]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:34.811]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:34.811]             base::names(...future.oldOptions))
[18:03:34.811]     }
[18:03:34.811]     if (FALSE) {
[18:03:34.811]     }
[18:03:34.811]     else {
[18:03:34.811]         if (TRUE) {
[18:03:34.811]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:34.811]                 open = "w")
[18:03:34.811]         }
[18:03:34.811]         else {
[18:03:34.811]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:34.811]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:34.811]         }
[18:03:34.811]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:34.811]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:34.811]             base::sink(type = "output", split = FALSE)
[18:03:34.811]             base::close(...future.stdout)
[18:03:34.811]         }, add = TRUE)
[18:03:34.811]     }
[18:03:34.811]     ...future.frame <- base::sys.nframe()
[18:03:34.811]     ...future.conditions <- base::list()
[18:03:34.811]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:34.811]     if (FALSE) {
[18:03:34.811]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:34.811]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:34.811]     }
[18:03:34.811]     ...future.result <- base::tryCatch({
[18:03:34.811]         base::withCallingHandlers({
[18:03:34.811]             ...future.value <- base::withVisible(base::local({
[18:03:34.811]                 message(sprintf("Calculating tile #%d of %d ...", 
[18:03:34.811]                   ii, n), appendLF = FALSE)
[18:03:34.811]                 fit <- mandelbrot(C)
[18:03:34.811]                 delay(fit)
[18:03:34.811]                 message(" done")
[18:03:34.811]                 fit
[18:03:34.811]             }))
[18:03:34.811]             future::FutureResult(value = ...future.value$value, 
[18:03:34.811]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.811]                   ...future.rng), globalenv = if (FALSE) 
[18:03:34.811]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:34.811]                     ...future.globalenv.names))
[18:03:34.811]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:34.811]         }, condition = base::local({
[18:03:34.811]             c <- base::c
[18:03:34.811]             inherits <- base::inherits
[18:03:34.811]             invokeRestart <- base::invokeRestart
[18:03:34.811]             length <- base::length
[18:03:34.811]             list <- base::list
[18:03:34.811]             seq.int <- base::seq.int
[18:03:34.811]             signalCondition <- base::signalCondition
[18:03:34.811]             sys.calls <- base::sys.calls
[18:03:34.811]             `[[` <- base::`[[`
[18:03:34.811]             `+` <- base::`+`
[18:03:34.811]             `<<-` <- base::`<<-`
[18:03:34.811]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:34.811]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:34.811]                   3L)]
[18:03:34.811]             }
[18:03:34.811]             function(cond) {
[18:03:34.811]                 is_error <- inherits(cond, "error")
[18:03:34.811]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:34.811]                   NULL)
[18:03:34.811]                 if (is_error) {
[18:03:34.811]                   sessionInformation <- function() {
[18:03:34.811]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:34.811]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:34.811]                       search = base::search(), system = base::Sys.info())
[18:03:34.811]                   }
[18:03:34.811]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.811]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:34.811]                     cond$call), session = sessionInformation(), 
[18:03:34.811]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:34.811]                   signalCondition(cond)
[18:03:34.811]                 }
[18:03:34.811]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:34.811]                 "immediateCondition"))) {
[18:03:34.811]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:34.811]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.811]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:34.811]                   if (TRUE && !signal) {
[18:03:34.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.811]                     {
[18:03:34.811]                       inherits <- base::inherits
[18:03:34.811]                       invokeRestart <- base::invokeRestart
[18:03:34.811]                       is.null <- base::is.null
[18:03:34.811]                       muffled <- FALSE
[18:03:34.811]                       if (inherits(cond, "message")) {
[18:03:34.811]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.811]                         if (muffled) 
[18:03:34.811]                           invokeRestart("muffleMessage")
[18:03:34.811]                       }
[18:03:34.811]                       else if (inherits(cond, "warning")) {
[18:03:34.811]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.811]                         if (muffled) 
[18:03:34.811]                           invokeRestart("muffleWarning")
[18:03:34.811]                       }
[18:03:34.811]                       else if (inherits(cond, "condition")) {
[18:03:34.811]                         if (!is.null(pattern)) {
[18:03:34.811]                           computeRestarts <- base::computeRestarts
[18:03:34.811]                           grepl <- base::grepl
[18:03:34.811]                           restarts <- computeRestarts(cond)
[18:03:34.811]                           for (restart in restarts) {
[18:03:34.811]                             name <- restart$name
[18:03:34.811]                             if (is.null(name)) 
[18:03:34.811]                               next
[18:03:34.811]                             if (!grepl(pattern, name)) 
[18:03:34.811]                               next
[18:03:34.811]                             invokeRestart(restart)
[18:03:34.811]                             muffled <- TRUE
[18:03:34.811]                             break
[18:03:34.811]                           }
[18:03:34.811]                         }
[18:03:34.811]                       }
[18:03:34.811]                       invisible(muffled)
[18:03:34.811]                     }
[18:03:34.811]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.811]                   }
[18:03:34.811]                 }
[18:03:34.811]                 else {
[18:03:34.811]                   if (TRUE) {
[18:03:34.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.811]                     {
[18:03:34.811]                       inherits <- base::inherits
[18:03:34.811]                       invokeRestart <- base::invokeRestart
[18:03:34.811]                       is.null <- base::is.null
[18:03:34.811]                       muffled <- FALSE
[18:03:34.811]                       if (inherits(cond, "message")) {
[18:03:34.811]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.811]                         if (muffled) 
[18:03:34.811]                           invokeRestart("muffleMessage")
[18:03:34.811]                       }
[18:03:34.811]                       else if (inherits(cond, "warning")) {
[18:03:34.811]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.811]                         if (muffled) 
[18:03:34.811]                           invokeRestart("muffleWarning")
[18:03:34.811]                       }
[18:03:34.811]                       else if (inherits(cond, "condition")) {
[18:03:34.811]                         if (!is.null(pattern)) {
[18:03:34.811]                           computeRestarts <- base::computeRestarts
[18:03:34.811]                           grepl <- base::grepl
[18:03:34.811]                           restarts <- computeRestarts(cond)
[18:03:34.811]                           for (restart in restarts) {
[18:03:34.811]                             name <- restart$name
[18:03:34.811]                             if (is.null(name)) 
[18:03:34.811]                               next
[18:03:34.811]                             if (!grepl(pattern, name)) 
[18:03:34.811]                               next
[18:03:34.811]                             invokeRestart(restart)
[18:03:34.811]                             muffled <- TRUE
[18:03:34.811]                             break
[18:03:34.811]                           }
[18:03:34.811]                         }
[18:03:34.811]                       }
[18:03:34.811]                       invisible(muffled)
[18:03:34.811]                     }
[18:03:34.811]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.811]                   }
[18:03:34.811]                 }
[18:03:34.811]             }
[18:03:34.811]         }))
[18:03:34.811]     }, error = function(ex) {
[18:03:34.811]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:34.811]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.811]                 ...future.rng), started = ...future.startTime, 
[18:03:34.811]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:34.811]             version = "1.8"), class = "FutureResult")
[18:03:34.811]     }, finally = {
[18:03:34.811]         if (!identical(...future.workdir, getwd())) 
[18:03:34.811]             setwd(...future.workdir)
[18:03:34.811]         {
[18:03:34.811]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:34.811]                 ...future.oldOptions$nwarnings <- NULL
[18:03:34.811]             }
[18:03:34.811]             base::options(...future.oldOptions)
[18:03:34.811]             if (.Platform$OS.type == "windows") {
[18:03:34.811]                 old_names <- names(...future.oldEnvVars)
[18:03:34.811]                 envs <- base::Sys.getenv()
[18:03:34.811]                 names <- names(envs)
[18:03:34.811]                 common <- intersect(names, old_names)
[18:03:34.811]                 added <- setdiff(names, old_names)
[18:03:34.811]                 removed <- setdiff(old_names, names)
[18:03:34.811]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:34.811]                   envs[common]]
[18:03:34.811]                 NAMES <- toupper(changed)
[18:03:34.811]                 args <- list()
[18:03:34.811]                 for (kk in seq_along(NAMES)) {
[18:03:34.811]                   name <- changed[[kk]]
[18:03:34.811]                   NAME <- NAMES[[kk]]
[18:03:34.811]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.811]                     next
[18:03:34.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.811]                 }
[18:03:34.811]                 NAMES <- toupper(added)
[18:03:34.811]                 for (kk in seq_along(NAMES)) {
[18:03:34.811]                   name <- added[[kk]]
[18:03:34.811]                   NAME <- NAMES[[kk]]
[18:03:34.811]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.811]                     next
[18:03:34.811]                   args[[name]] <- ""
[18:03:34.811]                 }
[18:03:34.811]                 NAMES <- toupper(removed)
[18:03:34.811]                 for (kk in seq_along(NAMES)) {
[18:03:34.811]                   name <- removed[[kk]]
[18:03:34.811]                   NAME <- NAMES[[kk]]
[18:03:34.811]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.811]                     next
[18:03:34.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.811]                 }
[18:03:34.811]                 if (length(args) > 0) 
[18:03:34.811]                   base::do.call(base::Sys.setenv, args = args)
[18:03:34.811]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:34.811]             }
[18:03:34.811]             else {
[18:03:34.811]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:34.811]             }
[18:03:34.811]             {
[18:03:34.811]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:34.811]                   0L) {
[18:03:34.811]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:34.811]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:34.811]                   base::options(opts)
[18:03:34.811]                 }
[18:03:34.811]                 {
[18:03:34.811]                   {
[18:03:34.811]                     NULL
[18:03:34.811]                     RNGkind("Mersenne-Twister")
[18:03:34.811]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:34.811]                       inherits = FALSE)
[18:03:34.811]                   }
[18:03:34.811]                   options(future.plan = NULL)
[18:03:34.811]                   if (is.na(NA_character_)) 
[18:03:34.811]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.811]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:34.811]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:34.811]                     .init = FALSE)
[18:03:34.811]                 }
[18:03:34.811]             }
[18:03:34.811]         }
[18:03:34.811]     })
[18:03:34.811]     if (TRUE) {
[18:03:34.811]         base::sink(type = "output", split = FALSE)
[18:03:34.811]         if (TRUE) {
[18:03:34.811]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:34.811]         }
[18:03:34.811]         else {
[18:03:34.811]             ...future.result["stdout"] <- base::list(NULL)
[18:03:34.811]         }
[18:03:34.811]         base::close(...future.stdout)
[18:03:34.811]         ...future.stdout <- NULL
[18:03:34.811]     }
[18:03:34.811]     ...future.result$conditions <- ...future.conditions
[18:03:34.811]     ...future.result$finished <- base::Sys.time()
[18:03:34.811]     ...future.result
[18:03:34.811] }
[18:03:34.814] assign_globals() ...
[18:03:34.814] List of 4
[18:03:34.814]  $ ii   : int 4
[18:03:34.814]  $ n    : int 4
[18:03:34.814]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[18:03:34.814]   ..- attr(*, "region")=List of 2
[18:03:34.814]   .. ..$ xrange: num [1:2] -0.719 0.75
[18:03:34.814]   .. ..$ yrange: num [1:2] 0.0306 1.5
[18:03:34.814]   ..- attr(*, "tile")= int [1:2] 2 2
[18:03:34.814]  $ delay:function (counts)  
[18:03:34.814]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:34.814]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcd602bf0> 
[18:03:34.814]  - attr(*, "where")=List of 4
[18:03:34.814]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:34.814]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:34.814]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:34.814]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:34.814]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:34.814]  - attr(*, "resolved")= logi FALSE
[18:03:34.814]  - attr(*, "total_size")= num 14584
[18:03:34.814]  - attr(*, "already-done")= logi TRUE
[18:03:34.826] - copied ‘ii’ to environment
[18:03:34.826] - copied ‘n’ to environment
[18:03:34.826] - copied ‘C’ to environment
[18:03:34.827] - reassign environment for ‘delay’
[18:03:34.827] - copied ‘delay’ to environment
[18:03:34.827] assign_globals() ... done
[18:03:34.828] plan(): Setting new future strategy stack:
[18:03:34.828] List of future strategies:
[18:03:34.828] 1. sequential:
[18:03:34.828]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.828]    - tweaked: FALSE
[18:03:34.828]    - call: NULL
[18:03:34.829] plan(): nbrOfWorkers() = 1
[18:03:34.862] plan(): Setting new future strategy stack:
[18:03:34.862] List of future strategies:
[18:03:34.862] 1. sequential:
[18:03:34.862]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:34.862]    - tweaked: FALSE
[18:03:34.862]    - call: plan(strategy)
[18:03:34.863] plan(): nbrOfWorkers() = 1
[18:03:34.863] SequentialFuture started (and completed)
[18:03:34.864] signalConditions() ...
[18:03:34.864]  - include = ‘immediateCondition’
[18:03:34.864]  - exclude = 
[18:03:34.864]  - resignal = FALSE
[18:03:34.864]  - Number of conditions: 2
[18:03:34.865] signalConditions() ... done
[18:03:34.865] - Launch lazy future ... done
[18:03:34.865] run() for ‘SequentialFuture’ ... done
[18:03:34.865] - run() ... done
[18:03:34.865] - resolved() ...
[18:03:34.866] resolved() for ‘SequentialFuture’ ...
[18:03:34.866] - state: ‘finished’
[18:03:34.866] - run: TRUE
[18:03:34.866] - result: ‘FutureResult’
[18:03:34.866] resolved() for ‘SequentialFuture’ ... done
[18:03:34.867] - resolved: TRUE
[18:03:34.867] - resolved() ... done
[18:03:34.867] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[18:03:34.867] signalConditions() ...
[18:03:34.868]  - include = ‘immediateCondition’
[18:03:34.868]  - exclude = 
[18:03:34.868]  - resignal = FALSE
[18:03:34.868]  - Number of conditions: 2
[18:03:34.868] signalConditions() ... done
[18:03:34.869] Future state: ‘finished’
[18:03:34.869] signalConditions() ...
[18:03:34.869]  - include = ‘condition’
[18:03:34.869]  - exclude = ‘immediateCondition’
[18:03:34.870]  - resignal = TRUE
[18:03:34.870]  - Number of conditions: 2
[18:03:34.870]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[18:03:34.870]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:34.871] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[18:03:34.884] plan(): Setting new future strategy stack:
[18:03:34.884] List of future strategies:
[18:03:34.884] 1. multicore:
[18:03:34.884]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:34.884]    - tweaked: FALSE
[18:03:34.884]    - call: plan(strategy)
[18:03:34.891] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[18:03:34.898] getGlobalsAndPackages() ...
[18:03:34.898] Searching for globals...
[18:03:34.908] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.908] Searching for globals ... DONE
[18:03:34.908] Resolving globals: FALSE
[18:03:34.910] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.910] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.911] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.911] - packages: [1] ‘future’
[18:03:34.911] getGlobalsAndPackages() ... DONE
 2[18:03:34.919] getGlobalsAndPackages() ...
[18:03:34.920] Searching for globals...
[18:03:34.927] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.927] Searching for globals ... DONE
[18:03:34.927] Resolving globals: FALSE
[18:03:34.928] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.929] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.929] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.930] - packages: [1] ‘future’
[18:03:34.930] getGlobalsAndPackages() ... DONE
 3[18:03:34.930] getGlobalsAndPackages() ...
[18:03:34.931] Searching for globals...
[18:03:34.938] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.938] Searching for globals ... DONE
[18:03:34.938] Resolving globals: FALSE
[18:03:34.939] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.940] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.940] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.941] - packages: [1] ‘future’
[18:03:34.941] getGlobalsAndPackages() ... DONE
 4[18:03:34.942] getGlobalsAndPackages() ...
[18:03:34.942] Searching for globals...
[18:03:34.949] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:34.949] Searching for globals ... DONE
[18:03:34.950] Resolving globals: FALSE
[18:03:34.951] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:34.952] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:34.952] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:34.952] - packages: [1] ‘future’
[18:03:34.952] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[18:03:34.971] resolved() for ‘Future’ ...
[18:03:34.971] - state: ‘created’
[18:03:34.971] - run: TRUE
[18:03:34.971] - run() ...
[18:03:34.972] run() for ‘Future’ ...
[18:03:34.972] - state: ‘created’
[18:03:34.972] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:34.979] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:34.979] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:34.979]   - Field: ‘label’
[18:03:34.979]   - Field: ‘local’
[18:03:34.980]   - Field: ‘owner’
[18:03:34.980]   - Field: ‘envir’
[18:03:34.980]   - Field: ‘workers’
[18:03:34.980]   - Field: ‘packages’
[18:03:34.980]   - Field: ‘gc’
[18:03:34.981]   - Field: ‘job’
[18:03:34.981]   - Field: ‘conditions’
[18:03:34.981]   - Field: ‘expr’
[18:03:34.981]   - Field: ‘uuid’
[18:03:34.981]   - Field: ‘seed’
[18:03:34.982]   - Field: ‘version’
[18:03:34.982]   - Field: ‘result’
[18:03:34.982]   - Field: ‘asynchronous’
[18:03:34.982]   - Field: ‘calls’
[18:03:34.982]   - Field: ‘globals’
[18:03:34.983]   - Field: ‘stdout’
[18:03:34.983]   - Field: ‘earlySignal’
[18:03:34.983]   - Field: ‘lazy’
[18:03:34.983]   - Field: ‘state’
[18:03:34.983] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:34.984] - Launch lazy future ...
[18:03:34.985] Packages needed by the future expression (n = 1): ‘future’
[18:03:34.985] Packages needed by future strategies (n = 0): <none>
[18:03:34.987] {
[18:03:34.987]     {
[18:03:34.987]         {
[18:03:34.987]             ...future.startTime <- base::Sys.time()
[18:03:34.987]             {
[18:03:34.987]                 {
[18:03:34.987]                   {
[18:03:34.987]                     {
[18:03:34.987]                       {
[18:03:34.987]                         base::local({
[18:03:34.987]                           has_future <- base::requireNamespace("future", 
[18:03:34.987]                             quietly = TRUE)
[18:03:34.987]                           if (has_future) {
[18:03:34.987]                             ns <- base::getNamespace("future")
[18:03:34.987]                             version <- ns[[".package"]][["version"]]
[18:03:34.987]                             if (is.null(version)) 
[18:03:34.987]                               version <- utils::packageVersion("future")
[18:03:34.987]                           }
[18:03:34.987]                           else {
[18:03:34.987]                             version <- NULL
[18:03:34.987]                           }
[18:03:34.987]                           if (!has_future || version < "1.8.0") {
[18:03:34.987]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:34.987]                               "", base::R.version$version.string), 
[18:03:34.987]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:34.987]                                 base::R.version$platform, 8 * 
[18:03:34.987]                                   base::.Machine$sizeof.pointer), 
[18:03:34.987]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:34.987]                                 "release", "version")], collapse = " "), 
[18:03:34.987]                               hostname = base::Sys.info()[["nodename"]])
[18:03:34.987]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:34.987]                               info)
[18:03:34.987]                             info <- base::paste(info, collapse = "; ")
[18:03:34.987]                             if (!has_future) {
[18:03:34.987]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:34.987]                                 info)
[18:03:34.987]                             }
[18:03:34.987]                             else {
[18:03:34.987]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:34.987]                                 info, version)
[18:03:34.987]                             }
[18:03:34.987]                             base::stop(msg)
[18:03:34.987]                           }
[18:03:34.987]                         })
[18:03:34.987]                       }
[18:03:34.987]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:34.987]                       base::options(mc.cores = 1L)
[18:03:34.987]                     }
[18:03:34.987]                     base::local({
[18:03:34.987]                       for (pkg in "future") {
[18:03:34.987]                         base::loadNamespace(pkg)
[18:03:34.987]                         base::library(pkg, character.only = TRUE)
[18:03:34.987]                       }
[18:03:34.987]                     })
[18:03:34.987]                   }
[18:03:34.987]                   ...future.strategy.old <- future::plan("list")
[18:03:34.987]                   options(future.plan = NULL)
[18:03:34.987]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.987]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:34.987]                 }
[18:03:34.987]                 ...future.workdir <- getwd()
[18:03:34.987]             }
[18:03:34.987]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:34.987]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:34.987]         }
[18:03:34.987]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:34.987]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:34.987]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:34.987]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:34.987]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:34.987]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:34.987]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:34.987]             base::names(...future.oldOptions))
[18:03:34.987]     }
[18:03:34.987]     if (FALSE) {
[18:03:34.987]     }
[18:03:34.987]     else {
[18:03:34.987]         if (TRUE) {
[18:03:34.987]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:34.987]                 open = "w")
[18:03:34.987]         }
[18:03:34.987]         else {
[18:03:34.987]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:34.987]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:34.987]         }
[18:03:34.987]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:34.987]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:34.987]             base::sink(type = "output", split = FALSE)
[18:03:34.987]             base::close(...future.stdout)
[18:03:34.987]         }, add = TRUE)
[18:03:34.987]     }
[18:03:34.987]     ...future.frame <- base::sys.nframe()
[18:03:34.987]     ...future.conditions <- base::list()
[18:03:34.987]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:34.987]     if (FALSE) {
[18:03:34.987]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:34.987]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:34.987]     }
[18:03:34.987]     ...future.result <- base::tryCatch({
[18:03:34.987]         base::withCallingHandlers({
[18:03:34.987]             ...future.value <- base::withVisible(base::local({
[18:03:34.987]                 withCallingHandlers({
[18:03:34.987]                   {
[18:03:34.987]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:34.987]                       ii, n), appendLF = FALSE)
[18:03:34.987]                     fit <- mandelbrot(C)
[18:03:34.987]                     delay(fit)
[18:03:34.987]                     message(" done")
[18:03:34.987]                     fit
[18:03:34.987]                   }
[18:03:34.987]                 }, immediateCondition = function(cond) {
[18:03:34.987]                   save_rds <- function (object, pathname, ...) 
[18:03:34.987]                   {
[18:03:34.987]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:34.987]                     if (file_test("-f", pathname_tmp)) {
[18:03:34.987]                       fi_tmp <- file.info(pathname_tmp)
[18:03:34.987]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:34.987]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:34.987]                         fi_tmp[["mtime"]])
[18:03:34.987]                     }
[18:03:34.987]                     tryCatch({
[18:03:34.987]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:34.987]                     }, error = function(ex) {
[18:03:34.987]                       msg <- conditionMessage(ex)
[18:03:34.987]                       fi_tmp <- file.info(pathname_tmp)
[18:03:34.987]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:34.987]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:34.987]                         fi_tmp[["mtime"]], msg)
[18:03:34.987]                       ex$message <- msg
[18:03:34.987]                       stop(ex)
[18:03:34.987]                     })
[18:03:34.987]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:34.987]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:34.987]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:34.987]                       fi_tmp <- file.info(pathname_tmp)
[18:03:34.987]                       fi <- file.info(pathname)
[18:03:34.987]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:34.987]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:34.987]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:34.987]                         fi[["size"]], fi[["mtime"]])
[18:03:34.987]                       stop(msg)
[18:03:34.987]                     }
[18:03:34.987]                     invisible(pathname)
[18:03:34.987]                   }
[18:03:34.987]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:34.987]                     rootPath = tempdir()) 
[18:03:34.987]                   {
[18:03:34.987]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:34.987]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:34.987]                       tmpdir = path, fileext = ".rds")
[18:03:34.987]                     save_rds(obj, file)
[18:03:34.987]                   }
[18:03:34.987]                   saveImmediateCondition(cond, path = "/tmp/RtmpHLw6Ay/.future/immediateConditions")
[18:03:34.987]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.987]                   {
[18:03:34.987]                     inherits <- base::inherits
[18:03:34.987]                     invokeRestart <- base::invokeRestart
[18:03:34.987]                     is.null <- base::is.null
[18:03:34.987]                     muffled <- FALSE
[18:03:34.987]                     if (inherits(cond, "message")) {
[18:03:34.987]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:34.987]                       if (muffled) 
[18:03:34.987]                         invokeRestart("muffleMessage")
[18:03:34.987]                     }
[18:03:34.987]                     else if (inherits(cond, "warning")) {
[18:03:34.987]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:34.987]                       if (muffled) 
[18:03:34.987]                         invokeRestart("muffleWarning")
[18:03:34.987]                     }
[18:03:34.987]                     else if (inherits(cond, "condition")) {
[18:03:34.987]                       if (!is.null(pattern)) {
[18:03:34.987]                         computeRestarts <- base::computeRestarts
[18:03:34.987]                         grepl <- base::grepl
[18:03:34.987]                         restarts <- computeRestarts(cond)
[18:03:34.987]                         for (restart in restarts) {
[18:03:34.987]                           name <- restart$name
[18:03:34.987]                           if (is.null(name)) 
[18:03:34.987]                             next
[18:03:34.987]                           if (!grepl(pattern, name)) 
[18:03:34.987]                             next
[18:03:34.987]                           invokeRestart(restart)
[18:03:34.987]                           muffled <- TRUE
[18:03:34.987]                           break
[18:03:34.987]                         }
[18:03:34.987]                       }
[18:03:34.987]                     }
[18:03:34.987]                     invisible(muffled)
[18:03:34.987]                   }
[18:03:34.987]                   muffleCondition(cond)
[18:03:34.987]                 })
[18:03:34.987]             }))
[18:03:34.987]             future::FutureResult(value = ...future.value$value, 
[18:03:34.987]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.987]                   ...future.rng), globalenv = if (FALSE) 
[18:03:34.987]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:34.987]                     ...future.globalenv.names))
[18:03:34.987]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:34.987]         }, condition = base::local({
[18:03:34.987]             c <- base::c
[18:03:34.987]             inherits <- base::inherits
[18:03:34.987]             invokeRestart <- base::invokeRestart
[18:03:34.987]             length <- base::length
[18:03:34.987]             list <- base::list
[18:03:34.987]             seq.int <- base::seq.int
[18:03:34.987]             signalCondition <- base::signalCondition
[18:03:34.987]             sys.calls <- base::sys.calls
[18:03:34.987]             `[[` <- base::`[[`
[18:03:34.987]             `+` <- base::`+`
[18:03:34.987]             `<<-` <- base::`<<-`
[18:03:34.987]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:34.987]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:34.987]                   3L)]
[18:03:34.987]             }
[18:03:34.987]             function(cond) {
[18:03:34.987]                 is_error <- inherits(cond, "error")
[18:03:34.987]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:34.987]                   NULL)
[18:03:34.987]                 if (is_error) {
[18:03:34.987]                   sessionInformation <- function() {
[18:03:34.987]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:34.987]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:34.987]                       search = base::search(), system = base::Sys.info())
[18:03:34.987]                   }
[18:03:34.987]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.987]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:34.987]                     cond$call), session = sessionInformation(), 
[18:03:34.987]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:34.987]                   signalCondition(cond)
[18:03:34.987]                 }
[18:03:34.987]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:34.987]                 "immediateCondition"))) {
[18:03:34.987]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:34.987]                   ...future.conditions[[length(...future.conditions) + 
[18:03:34.987]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:34.987]                   if (TRUE && !signal) {
[18:03:34.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.987]                     {
[18:03:34.987]                       inherits <- base::inherits
[18:03:34.987]                       invokeRestart <- base::invokeRestart
[18:03:34.987]                       is.null <- base::is.null
[18:03:34.987]                       muffled <- FALSE
[18:03:34.987]                       if (inherits(cond, "message")) {
[18:03:34.987]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.987]                         if (muffled) 
[18:03:34.987]                           invokeRestart("muffleMessage")
[18:03:34.987]                       }
[18:03:34.987]                       else if (inherits(cond, "warning")) {
[18:03:34.987]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.987]                         if (muffled) 
[18:03:34.987]                           invokeRestart("muffleWarning")
[18:03:34.987]                       }
[18:03:34.987]                       else if (inherits(cond, "condition")) {
[18:03:34.987]                         if (!is.null(pattern)) {
[18:03:34.987]                           computeRestarts <- base::computeRestarts
[18:03:34.987]                           grepl <- base::grepl
[18:03:34.987]                           restarts <- computeRestarts(cond)
[18:03:34.987]                           for (restart in restarts) {
[18:03:34.987]                             name <- restart$name
[18:03:34.987]                             if (is.null(name)) 
[18:03:34.987]                               next
[18:03:34.987]                             if (!grepl(pattern, name)) 
[18:03:34.987]                               next
[18:03:34.987]                             invokeRestart(restart)
[18:03:34.987]                             muffled <- TRUE
[18:03:34.987]                             break
[18:03:34.987]                           }
[18:03:34.987]                         }
[18:03:34.987]                       }
[18:03:34.987]                       invisible(muffled)
[18:03:34.987]                     }
[18:03:34.987]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.987]                   }
[18:03:34.987]                 }
[18:03:34.987]                 else {
[18:03:34.987]                   if (TRUE) {
[18:03:34.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:34.987]                     {
[18:03:34.987]                       inherits <- base::inherits
[18:03:34.987]                       invokeRestart <- base::invokeRestart
[18:03:34.987]                       is.null <- base::is.null
[18:03:34.987]                       muffled <- FALSE
[18:03:34.987]                       if (inherits(cond, "message")) {
[18:03:34.987]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:34.987]                         if (muffled) 
[18:03:34.987]                           invokeRestart("muffleMessage")
[18:03:34.987]                       }
[18:03:34.987]                       else if (inherits(cond, "warning")) {
[18:03:34.987]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:34.987]                         if (muffled) 
[18:03:34.987]                           invokeRestart("muffleWarning")
[18:03:34.987]                       }
[18:03:34.987]                       else if (inherits(cond, "condition")) {
[18:03:34.987]                         if (!is.null(pattern)) {
[18:03:34.987]                           computeRestarts <- base::computeRestarts
[18:03:34.987]                           grepl <- base::grepl
[18:03:34.987]                           restarts <- computeRestarts(cond)
[18:03:34.987]                           for (restart in restarts) {
[18:03:34.987]                             name <- restart$name
[18:03:34.987]                             if (is.null(name)) 
[18:03:34.987]                               next
[18:03:34.987]                             if (!grepl(pattern, name)) 
[18:03:34.987]                               next
[18:03:34.987]                             invokeRestart(restart)
[18:03:34.987]                             muffled <- TRUE
[18:03:34.987]                             break
[18:03:34.987]                           }
[18:03:34.987]                         }
[18:03:34.987]                       }
[18:03:34.987]                       invisible(muffled)
[18:03:34.987]                     }
[18:03:34.987]                     muffleCondition(cond, pattern = "^muffle")
[18:03:34.987]                   }
[18:03:34.987]                 }
[18:03:34.987]             }
[18:03:34.987]         }))
[18:03:34.987]     }, error = function(ex) {
[18:03:34.987]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:34.987]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:34.987]                 ...future.rng), started = ...future.startTime, 
[18:03:34.987]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:34.987]             version = "1.8"), class = "FutureResult")
[18:03:34.987]     }, finally = {
[18:03:34.987]         if (!identical(...future.workdir, getwd())) 
[18:03:34.987]             setwd(...future.workdir)
[18:03:34.987]         {
[18:03:34.987]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:34.987]                 ...future.oldOptions$nwarnings <- NULL
[18:03:34.987]             }
[18:03:34.987]             base::options(...future.oldOptions)
[18:03:34.987]             if (.Platform$OS.type == "windows") {
[18:03:34.987]                 old_names <- names(...future.oldEnvVars)
[18:03:34.987]                 envs <- base::Sys.getenv()
[18:03:34.987]                 names <- names(envs)
[18:03:34.987]                 common <- intersect(names, old_names)
[18:03:34.987]                 added <- setdiff(names, old_names)
[18:03:34.987]                 removed <- setdiff(old_names, names)
[18:03:34.987]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:34.987]                   envs[common]]
[18:03:34.987]                 NAMES <- toupper(changed)
[18:03:34.987]                 args <- list()
[18:03:34.987]                 for (kk in seq_along(NAMES)) {
[18:03:34.987]                   name <- changed[[kk]]
[18:03:34.987]                   NAME <- NAMES[[kk]]
[18:03:34.987]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.987]                     next
[18:03:34.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.987]                 }
[18:03:34.987]                 NAMES <- toupper(added)
[18:03:34.987]                 for (kk in seq_along(NAMES)) {
[18:03:34.987]                   name <- added[[kk]]
[18:03:34.987]                   NAME <- NAMES[[kk]]
[18:03:34.987]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.987]                     next
[18:03:34.987]                   args[[name]] <- ""
[18:03:34.987]                 }
[18:03:34.987]                 NAMES <- toupper(removed)
[18:03:34.987]                 for (kk in seq_along(NAMES)) {
[18:03:34.987]                   name <- removed[[kk]]
[18:03:34.987]                   NAME <- NAMES[[kk]]
[18:03:34.987]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:34.987]                     next
[18:03:34.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:34.987]                 }
[18:03:34.987]                 if (length(args) > 0) 
[18:03:34.987]                   base::do.call(base::Sys.setenv, args = args)
[18:03:34.987]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:34.987]             }
[18:03:34.987]             else {
[18:03:34.987]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:34.987]             }
[18:03:34.987]             {
[18:03:34.987]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:34.987]                   0L) {
[18:03:34.987]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:34.987]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:34.987]                   base::options(opts)
[18:03:34.987]                 }
[18:03:34.987]                 {
[18:03:34.987]                   {
[18:03:34.987]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:34.987]                     NULL
[18:03:34.987]                   }
[18:03:34.987]                   options(future.plan = NULL)
[18:03:34.987]                   if (is.na(NA_character_)) 
[18:03:34.987]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:34.987]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:34.987]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:34.987]                     .init = FALSE)
[18:03:34.987]                 }
[18:03:34.987]             }
[18:03:34.987]         }
[18:03:34.987]     })
[18:03:34.987]     if (TRUE) {
[18:03:34.987]         base::sink(type = "output", split = FALSE)
[18:03:34.987]         if (TRUE) {
[18:03:34.987]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:34.987]         }
[18:03:34.987]         else {
[18:03:34.987]             ...future.result["stdout"] <- base::list(NULL)
[18:03:34.987]         }
[18:03:34.987]         base::close(...future.stdout)
[18:03:34.987]         ...future.stdout <- NULL
[18:03:34.987]     }
[18:03:34.987]     ...future.result$conditions <- ...future.conditions
[18:03:34.987]     ...future.result$finished <- base::Sys.time()
[18:03:34.987]     ...future.result
[18:03:34.987] }
[18:03:34.991] assign_globals() ...
[18:03:34.991] List of 4
[18:03:34.991]  $ ii   : int 1
[18:03:34.991]  $ n    : int 4
[18:03:34.991]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[18:03:34.991]   ..- attr(*, "region")=List of 2
[18:03:34.991]   .. ..$ xrange: num [1:2] -2.25 -0.781
[18:03:34.991]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[18:03:34.991]   ..- attr(*, "tile")= int [1:2] 1 1
[18:03:34.991]  $ delay:function (counts)  
[18:03:34.991]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:34.991]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcee7a4c0> 
[18:03:34.991]  - attr(*, "where")=List of 4
[18:03:34.991]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:34.991]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:34.991]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:34.991]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:34.991]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:34.991]  - attr(*, "resolved")= logi FALSE
[18:03:34.991]  - attr(*, "total_size")= num 14584
[18:03:34.991]  - attr(*, "already-done")= logi TRUE
[18:03:35.003] - copied ‘ii’ to environment
[18:03:35.003] - copied ‘n’ to environment
[18:03:35.004] - copied ‘C’ to environment
[18:03:35.004] - reassign environment for ‘delay’
[18:03:35.004] - copied ‘delay’ to environment
[18:03:35.004] assign_globals() ... done
[18:03:35.004] requestCore(): workers = 2
[18:03:35.009] MulticoreFuture started
[18:03:35.010] - Launch lazy future ... done
[18:03:35.011] run() for ‘MulticoreFuture’ ... done
[18:03:35.011] - run() ... done
[18:03:35.011] - resolved() ...
[18:03:35.012] plan(): Setting new future strategy stack:
[18:03:35.012] List of future strategies:
[18:03:35.012] 1. sequential:
[18:03:35.012]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:35.012]    - tweaked: FALSE
[18:03:35.012]    - call: NULL
[18:03:35.014] plan(): nbrOfWorkers() = 1
[18:03:35.022] plan(): Setting new future strategy stack:
[18:03:35.023] List of future strategies:
[18:03:35.023] 1. multicore:
[18:03:35.023]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:35.023]    - tweaked: FALSE
[18:03:35.023]    - call: plan(strategy)
[18:03:35.025] - resolved: FALSE
[18:03:35.025] - resolved() ... done
[18:03:35.025] resolved() for ‘MulticoreFuture’ ... done
[18:03:35.026] resolved() for ‘Future’ ...
[18:03:35.026] - state: ‘created’
[18:03:35.026] - run: TRUE
[18:03:35.026] - run() ...
[18:03:35.027] run() for ‘Future’ ...
[18:03:35.027] - state: ‘created’
[18:03:35.027] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:35.032] plan(): nbrOfWorkers() = 2
[18:03:35.035] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:35.036] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:35.036]   - Field: ‘label’
[18:03:35.036]   - Field: ‘local’
[18:03:35.037]   - Field: ‘owner’
[18:03:35.037]   - Field: ‘envir’
[18:03:35.037]   - Field: ‘workers’
[18:03:35.038]   - Field: ‘packages’
[18:03:35.038]   - Field: ‘gc’
[18:03:35.038]   - Field: ‘job’
[18:03:35.039]   - Field: ‘conditions’
[18:03:35.039]   - Field: ‘expr’
[18:03:35.039]   - Field: ‘uuid’
[18:03:35.039]   - Field: ‘seed’
[18:03:35.040]   - Field: ‘version’
[18:03:35.040]   - Field: ‘result’
[18:03:35.040]   - Field: ‘asynchronous’
[18:03:35.041]   - Field: ‘calls’
[18:03:35.041]   - Field: ‘globals’
[18:03:35.041]   - Field: ‘stdout’
[18:03:35.041]   - Field: ‘earlySignal’
[18:03:35.042]   - Field: ‘lazy’
[18:03:35.042]   - Field: ‘state’
[18:03:35.042] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:35.043] - Launch lazy future ...
[18:03:35.043] Packages needed by the future expression (n = 1): ‘future’
[18:03:35.044] Packages needed by future strategies (n = 0): <none>
[18:03:35.045] {
[18:03:35.045]     {
[18:03:35.045]         {
[18:03:35.045]             ...future.startTime <- base::Sys.time()
[18:03:35.045]             {
[18:03:35.045]                 {
[18:03:35.045]                   {
[18:03:35.045]                     {
[18:03:35.045]                       {
[18:03:35.045]                         base::local({
[18:03:35.045]                           has_future <- base::requireNamespace("future", 
[18:03:35.045]                             quietly = TRUE)
[18:03:35.045]                           if (has_future) {
[18:03:35.045]                             ns <- base::getNamespace("future")
[18:03:35.045]                             version <- ns[[".package"]][["version"]]
[18:03:35.045]                             if (is.null(version)) 
[18:03:35.045]                               version <- utils::packageVersion("future")
[18:03:35.045]                           }
[18:03:35.045]                           else {
[18:03:35.045]                             version <- NULL
[18:03:35.045]                           }
[18:03:35.045]                           if (!has_future || version < "1.8.0") {
[18:03:35.045]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:35.045]                               "", base::R.version$version.string), 
[18:03:35.045]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:35.045]                                 base::R.version$platform, 8 * 
[18:03:35.045]                                   base::.Machine$sizeof.pointer), 
[18:03:35.045]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:35.045]                                 "release", "version")], collapse = " "), 
[18:03:35.045]                               hostname = base::Sys.info()[["nodename"]])
[18:03:35.045]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:35.045]                               info)
[18:03:35.045]                             info <- base::paste(info, collapse = "; ")
[18:03:35.045]                             if (!has_future) {
[18:03:35.045]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:35.045]                                 info)
[18:03:35.045]                             }
[18:03:35.045]                             else {
[18:03:35.045]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:35.045]                                 info, version)
[18:03:35.045]                             }
[18:03:35.045]                             base::stop(msg)
[18:03:35.045]                           }
[18:03:35.045]                         })
[18:03:35.045]                       }
[18:03:35.045]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:35.045]                       base::options(mc.cores = 1L)
[18:03:35.045]                     }
[18:03:35.045]                     base::local({
[18:03:35.045]                       for (pkg in "future") {
[18:03:35.045]                         base::loadNamespace(pkg)
[18:03:35.045]                         base::library(pkg, character.only = TRUE)
[18:03:35.045]                       }
[18:03:35.045]                     })
[18:03:35.045]                   }
[18:03:35.045]                   ...future.strategy.old <- future::plan("list")
[18:03:35.045]                   options(future.plan = NULL)
[18:03:35.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:35.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:35.045]                 }
[18:03:35.045]                 ...future.workdir <- getwd()
[18:03:35.045]             }
[18:03:35.045]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:35.045]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:35.045]         }
[18:03:35.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:35.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:35.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:35.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:35.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:35.045]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:35.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:35.045]             base::names(...future.oldOptions))
[18:03:35.045]     }
[18:03:35.045]     if (FALSE) {
[18:03:35.045]     }
[18:03:35.045]     else {
[18:03:35.045]         if (TRUE) {
[18:03:35.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:35.045]                 open = "w")
[18:03:35.045]         }
[18:03:35.045]         else {
[18:03:35.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:35.045]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:35.045]         }
[18:03:35.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:35.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:35.045]             base::sink(type = "output", split = FALSE)
[18:03:35.045]             base::close(...future.stdout)
[18:03:35.045]         }, add = TRUE)
[18:03:35.045]     }
[18:03:35.045]     ...future.frame <- base::sys.nframe()
[18:03:35.045]     ...future.conditions <- base::list()
[18:03:35.045]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:35.045]     if (FALSE) {
[18:03:35.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:35.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:35.045]     }
[18:03:35.045]     ...future.result <- base::tryCatch({
[18:03:35.045]         base::withCallingHandlers({
[18:03:35.045]             ...future.value <- base::withVisible(base::local({
[18:03:35.045]                 withCallingHandlers({
[18:03:35.045]                   {
[18:03:35.045]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:35.045]                       ii, n), appendLF = FALSE)
[18:03:35.045]                     fit <- mandelbrot(C)
[18:03:35.045]                     delay(fit)
[18:03:35.045]                     message(" done")
[18:03:35.045]                     fit
[18:03:35.045]                   }
[18:03:35.045]                 }, immediateCondition = function(cond) {
[18:03:35.045]                   save_rds <- function (object, pathname, ...) 
[18:03:35.045]                   {
[18:03:35.045]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:35.045]                     if (file_test("-f", pathname_tmp)) {
[18:03:35.045]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.045]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:35.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.045]                         fi_tmp[["mtime"]])
[18:03:35.045]                     }
[18:03:35.045]                     tryCatch({
[18:03:35.045]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:35.045]                     }, error = function(ex) {
[18:03:35.045]                       msg <- conditionMessage(ex)
[18:03:35.045]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.045]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:35.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.045]                         fi_tmp[["mtime"]], msg)
[18:03:35.045]                       ex$message <- msg
[18:03:35.045]                       stop(ex)
[18:03:35.045]                     })
[18:03:35.045]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:35.045]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:35.045]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:35.045]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.045]                       fi <- file.info(pathname)
[18:03:35.045]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:35.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.045]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:35.045]                         fi[["size"]], fi[["mtime"]])
[18:03:35.045]                       stop(msg)
[18:03:35.045]                     }
[18:03:35.045]                     invisible(pathname)
[18:03:35.045]                   }
[18:03:35.045]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:35.045]                     rootPath = tempdir()) 
[18:03:35.045]                   {
[18:03:35.045]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:35.045]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:35.045]                       tmpdir = path, fileext = ".rds")
[18:03:35.045]                     save_rds(obj, file)
[18:03:35.045]                   }
[18:03:35.045]                   saveImmediateCondition(cond, path = "/tmp/RtmpHLw6Ay/.future/immediateConditions")
[18:03:35.045]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.045]                   {
[18:03:35.045]                     inherits <- base::inherits
[18:03:35.045]                     invokeRestart <- base::invokeRestart
[18:03:35.045]                     is.null <- base::is.null
[18:03:35.045]                     muffled <- FALSE
[18:03:35.045]                     if (inherits(cond, "message")) {
[18:03:35.045]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:35.045]                       if (muffled) 
[18:03:35.045]                         invokeRestart("muffleMessage")
[18:03:35.045]                     }
[18:03:35.045]                     else if (inherits(cond, "warning")) {
[18:03:35.045]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:35.045]                       if (muffled) 
[18:03:35.045]                         invokeRestart("muffleWarning")
[18:03:35.045]                     }
[18:03:35.045]                     else if (inherits(cond, "condition")) {
[18:03:35.045]                       if (!is.null(pattern)) {
[18:03:35.045]                         computeRestarts <- base::computeRestarts
[18:03:35.045]                         grepl <- base::grepl
[18:03:35.045]                         restarts <- computeRestarts(cond)
[18:03:35.045]                         for (restart in restarts) {
[18:03:35.045]                           name <- restart$name
[18:03:35.045]                           if (is.null(name)) 
[18:03:35.045]                             next
[18:03:35.045]                           if (!grepl(pattern, name)) 
[18:03:35.045]                             next
[18:03:35.045]                           invokeRestart(restart)
[18:03:35.045]                           muffled <- TRUE
[18:03:35.045]                           break
[18:03:35.045]                         }
[18:03:35.045]                       }
[18:03:35.045]                     }
[18:03:35.045]                     invisible(muffled)
[18:03:35.045]                   }
[18:03:35.045]                   muffleCondition(cond)
[18:03:35.045]                 })
[18:03:35.045]             }))
[18:03:35.045]             future::FutureResult(value = ...future.value$value, 
[18:03:35.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:35.045]                   ...future.rng), globalenv = if (FALSE) 
[18:03:35.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:35.045]                     ...future.globalenv.names))
[18:03:35.045]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:35.045]         }, condition = base::local({
[18:03:35.045]             c <- base::c
[18:03:35.045]             inherits <- base::inherits
[18:03:35.045]             invokeRestart <- base::invokeRestart
[18:03:35.045]             length <- base::length
[18:03:35.045]             list <- base::list
[18:03:35.045]             seq.int <- base::seq.int
[18:03:35.045]             signalCondition <- base::signalCondition
[18:03:35.045]             sys.calls <- base::sys.calls
[18:03:35.045]             `[[` <- base::`[[`
[18:03:35.045]             `+` <- base::`+`
[18:03:35.045]             `<<-` <- base::`<<-`
[18:03:35.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:35.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:35.045]                   3L)]
[18:03:35.045]             }
[18:03:35.045]             function(cond) {
[18:03:35.045]                 is_error <- inherits(cond, "error")
[18:03:35.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:35.045]                   NULL)
[18:03:35.045]                 if (is_error) {
[18:03:35.045]                   sessionInformation <- function() {
[18:03:35.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:35.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:35.045]                       search = base::search(), system = base::Sys.info())
[18:03:35.045]                   }
[18:03:35.045]                   ...future.conditions[[length(...future.conditions) + 
[18:03:35.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:35.045]                     cond$call), session = sessionInformation(), 
[18:03:35.045]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:35.045]                   signalCondition(cond)
[18:03:35.045]                 }
[18:03:35.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:35.045]                 "immediateCondition"))) {
[18:03:35.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:35.045]                   ...future.conditions[[length(...future.conditions) + 
[18:03:35.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:35.045]                   if (TRUE && !signal) {
[18:03:35.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.045]                     {
[18:03:35.045]                       inherits <- base::inherits
[18:03:35.045]                       invokeRestart <- base::invokeRestart
[18:03:35.045]                       is.null <- base::is.null
[18:03:35.045]                       muffled <- FALSE
[18:03:35.045]                       if (inherits(cond, "message")) {
[18:03:35.045]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:35.045]                         if (muffled) 
[18:03:35.045]                           invokeRestart("muffleMessage")
[18:03:35.045]                       }
[18:03:35.045]                       else if (inherits(cond, "warning")) {
[18:03:35.045]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:35.045]                         if (muffled) 
[18:03:35.045]                           invokeRestart("muffleWarning")
[18:03:35.045]                       }
[18:03:35.045]                       else if (inherits(cond, "condition")) {
[18:03:35.045]                         if (!is.null(pattern)) {
[18:03:35.045]                           computeRestarts <- base::computeRestarts
[18:03:35.045]                           grepl <- base::grepl
[18:03:35.045]                           restarts <- computeRestarts(cond)
[18:03:35.045]                           for (restart in restarts) {
[18:03:35.045]                             name <- restart$name
[18:03:35.045]                             if (is.null(name)) 
[18:03:35.045]                               next
[18:03:35.045]                             if (!grepl(pattern, name)) 
[18:03:35.045]                               next
[18:03:35.045]                             invokeRestart(restart)
[18:03:35.045]                             muffled <- TRUE
[18:03:35.045]                             break
[18:03:35.045]                           }
[18:03:35.045]                         }
[18:03:35.045]                       }
[18:03:35.045]                       invisible(muffled)
[18:03:35.045]                     }
[18:03:35.045]                     muffleCondition(cond, pattern = "^muffle")
[18:03:35.045]                   }
[18:03:35.045]                 }
[18:03:35.045]                 else {
[18:03:35.045]                   if (TRUE) {
[18:03:35.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.045]                     {
[18:03:35.045]                       inherits <- base::inherits
[18:03:35.045]                       invokeRestart <- base::invokeRestart
[18:03:35.045]                       is.null <- base::is.null
[18:03:35.045]                       muffled <- FALSE
[18:03:35.045]                       if (inherits(cond, "message")) {
[18:03:35.045]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:35.045]                         if (muffled) 
[18:03:35.045]                           invokeRestart("muffleMessage")
[18:03:35.045]                       }
[18:03:35.045]                       else if (inherits(cond, "warning")) {
[18:03:35.045]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:35.045]                         if (muffled) 
[18:03:35.045]                           invokeRestart("muffleWarning")
[18:03:35.045]                       }
[18:03:35.045]                       else if (inherits(cond, "condition")) {
[18:03:35.045]                         if (!is.null(pattern)) {
[18:03:35.045]                           computeRestarts <- base::computeRestarts
[18:03:35.045]                           grepl <- base::grepl
[18:03:35.045]                           restarts <- computeRestarts(cond)
[18:03:35.045]                           for (restart in restarts) {
[18:03:35.045]                             name <- restart$name
[18:03:35.045]                             if (is.null(name)) 
[18:03:35.045]                               next
[18:03:35.045]                             if (!grepl(pattern, name)) 
[18:03:35.045]                               next
[18:03:35.045]                             invokeRestart(restart)
[18:03:35.045]                             muffled <- TRUE
[18:03:35.045]                             break
[18:03:35.045]                           }
[18:03:35.045]                         }
[18:03:35.045]                       }
[18:03:35.045]                       invisible(muffled)
[18:03:35.045]                     }
[18:03:35.045]                     muffleCondition(cond, pattern = "^muffle")
[18:03:35.045]                   }
[18:03:35.045]                 }
[18:03:35.045]             }
[18:03:35.045]         }))
[18:03:35.045]     }, error = function(ex) {
[18:03:35.045]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:35.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:35.045]                 ...future.rng), started = ...future.startTime, 
[18:03:35.045]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:35.045]             version = "1.8"), class = "FutureResult")
[18:03:35.045]     }, finally = {
[18:03:35.045]         if (!identical(...future.workdir, getwd())) 
[18:03:35.045]             setwd(...future.workdir)
[18:03:35.045]         {
[18:03:35.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:35.045]                 ...future.oldOptions$nwarnings <- NULL
[18:03:35.045]             }
[18:03:35.045]             base::options(...future.oldOptions)
[18:03:35.045]             if (.Platform$OS.type == "windows") {
[18:03:35.045]                 old_names <- names(...future.oldEnvVars)
[18:03:35.045]                 envs <- base::Sys.getenv()
[18:03:35.045]                 names <- names(envs)
[18:03:35.045]                 common <- intersect(names, old_names)
[18:03:35.045]                 added <- setdiff(names, old_names)
[18:03:35.045]                 removed <- setdiff(old_names, names)
[18:03:35.045]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:35.045]                   envs[common]]
[18:03:35.045]                 NAMES <- toupper(changed)
[18:03:35.045]                 args <- list()
[18:03:35.045]                 for (kk in seq_along(NAMES)) {
[18:03:35.045]                   name <- changed[[kk]]
[18:03:35.045]                   NAME <- NAMES[[kk]]
[18:03:35.045]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.045]                     next
[18:03:35.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:35.045]                 }
[18:03:35.045]                 NAMES <- toupper(added)
[18:03:35.045]                 for (kk in seq_along(NAMES)) {
[18:03:35.045]                   name <- added[[kk]]
[18:03:35.045]                   NAME <- NAMES[[kk]]
[18:03:35.045]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.045]                     next
[18:03:35.045]                   args[[name]] <- ""
[18:03:35.045]                 }
[18:03:35.045]                 NAMES <- toupper(removed)
[18:03:35.045]                 for (kk in seq_along(NAMES)) {
[18:03:35.045]                   name <- removed[[kk]]
[18:03:35.045]                   NAME <- NAMES[[kk]]
[18:03:35.045]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.045]                     next
[18:03:35.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:35.045]                 }
[18:03:35.045]                 if (length(args) > 0) 
[18:03:35.045]                   base::do.call(base::Sys.setenv, args = args)
[18:03:35.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:35.045]             }
[18:03:35.045]             else {
[18:03:35.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:35.045]             }
[18:03:35.045]             {
[18:03:35.045]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:35.045]                   0L) {
[18:03:35.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:35.045]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:35.045]                   base::options(opts)
[18:03:35.045]                 }
[18:03:35.045]                 {
[18:03:35.045]                   {
[18:03:35.045]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:35.045]                     NULL
[18:03:35.045]                   }
[18:03:35.045]                   options(future.plan = NULL)
[18:03:35.045]                   if (is.na(NA_character_)) 
[18:03:35.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:35.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:35.045]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:35.045]                     .init = FALSE)
[18:03:35.045]                 }
[18:03:35.045]             }
[18:03:35.045]         }
[18:03:35.045]     })
[18:03:35.045]     if (TRUE) {
[18:03:35.045]         base::sink(type = "output", split = FALSE)
[18:03:35.045]         if (TRUE) {
[18:03:35.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:35.045]         }
[18:03:35.045]         else {
[18:03:35.045]             ...future.result["stdout"] <- base::list(NULL)
[18:03:35.045]         }
[18:03:35.045]         base::close(...future.stdout)
[18:03:35.045]         ...future.stdout <- NULL
[18:03:35.045]     }
[18:03:35.045]     ...future.result$conditions <- ...future.conditions
[18:03:35.045]     ...future.result$finished <- base::Sys.time()
[18:03:35.045]     ...future.result
[18:03:35.045] }
[18:03:35.051] assign_globals() ...
[18:03:35.052] List of 4
[18:03:35.052]  $ ii   : int 2
[18:03:35.052]  $ n    : int 4
[18:03:35.052]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[18:03:35.052]   ..- attr(*, "region")=List of 2
[18:03:35.052]   .. ..$ xrange: num [1:2] -0.719 0.75
[18:03:35.052]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[18:03:35.052]   ..- attr(*, "tile")= int [1:2] 1 2
[18:03:35.052]  $ delay:function (counts)  
[18:03:35.052]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:35.052]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcee7a4c0> 
[18:03:35.052]  - attr(*, "where")=List of 4
[18:03:35.052]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:35.052]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:35.052]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:35.052]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:35.052]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:35.052]  - attr(*, "resolved")= logi FALSE
[18:03:35.052]  - attr(*, "total_size")= num 14584
[18:03:35.052]  - attr(*, "already-done")= logi TRUE
[18:03:35.071] - copied ‘ii’ to environment
[18:03:35.071] - copied ‘n’ to environment
[18:03:35.072] - copied ‘C’ to environment
[18:03:35.072] - reassign environment for ‘delay’
[18:03:35.079] - copied ‘delay’ to environment
[18:03:35.079] assign_globals() ... done
[18:03:35.079] requestCore(): workers = 2
[18:03:35.092] MulticoreFuture started
[18:03:35.093] - Launch lazy future ... done
[18:03:35.094] run() for ‘MulticoreFuture’ ... done
[18:03:35.094] - run() ... done
[18:03:35.094] - resolved() ...
[18:03:35.097] plan(): Setting new future strategy stack:
[18:03:35.098] List of future strategies:
[18:03:35.098] 1. sequential:
[18:03:35.098]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:35.098]    - tweaked: FALSE
[18:03:35.098]    - call: NULL
[18:03:35.100] plan(): nbrOfWorkers() = 1
[18:03:35.106] - resolved: FALSE
[18:03:35.106] - resolved() ... done
[18:03:35.107] resolved() for ‘MulticoreFuture’ ... done
[18:03:35.107] resolved() for ‘Future’ ...
[18:03:35.107] - state: ‘created’
[18:03:35.110] - run: TRUE
[18:03:35.110] - run() ...
[18:03:35.111] run() for ‘Future’ ...
[18:03:35.111] - state: ‘created’
[18:03:35.112] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:35.118] plan(): Setting new future strategy stack:
[18:03:35.119] List of future strategies:
[18:03:35.119] 1. multicore:
[18:03:35.119]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:35.119]    - tweaked: FALSE
[18:03:35.119]    - call: plan(strategy)
[18:03:35.133] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:35.133] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:35.131] plan(): nbrOfWorkers() = 2
[18:03:35.135]   - Field: ‘label’
[18:03:35.135]   - Field: ‘local’
[18:03:35.136]   - Field: ‘owner’
[18:03:35.136]   - Field: ‘envir’
[18:03:35.136]   - Field: ‘workers’
[18:03:35.137]   - Field: ‘packages’
[18:03:35.137]   - Field: ‘gc’
[18:03:35.138]   - Field: ‘job’
[18:03:35.138]   - Field: ‘conditions’
[18:03:35.138]   - Field: ‘expr’
[18:03:35.139]   - Field: ‘uuid’
[18:03:35.139]   - Field: ‘seed’
[18:03:35.140]   - Field: ‘version’
[18:03:35.140]   - Field: ‘result’
[18:03:35.140]   - Field: ‘asynchronous’
[18:03:35.141]   - Field: ‘calls’
[18:03:35.141]   - Field: ‘globals’
[18:03:35.141]   - Field: ‘stdout’
[18:03:35.142]   - Field: ‘earlySignal’
[18:03:35.142]   - Field: ‘lazy’
[18:03:35.143]   - Field: ‘state’
[18:03:35.143] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:35.143] - Launch lazy future ...
[18:03:35.144] Packages needed by the future expression (n = 1): ‘future’
[18:03:35.145] Packages needed by future strategies (n = 0): <none>
[18:03:35.147] {
[18:03:35.147]     {
[18:03:35.147]         {
[18:03:35.147]             ...future.startTime <- base::Sys.time()
[18:03:35.147]             {
[18:03:35.147]                 {
[18:03:35.147]                   {
[18:03:35.147]                     {
[18:03:35.147]                       {
[18:03:35.147]                         base::local({
[18:03:35.147]                           has_future <- base::requireNamespace("future", 
[18:03:35.147]                             quietly = TRUE)
[18:03:35.147]                           if (has_future) {
[18:03:35.147]                             ns <- base::getNamespace("future")
[18:03:35.147]                             version <- ns[[".package"]][["version"]]
[18:03:35.147]                             if (is.null(version)) 
[18:03:35.147]                               version <- utils::packageVersion("future")
[18:03:35.147]                           }
[18:03:35.147]                           else {
[18:03:35.147]                             version <- NULL
[18:03:35.147]                           }
[18:03:35.147]                           if (!has_future || version < "1.8.0") {
[18:03:35.147]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:35.147]                               "", base::R.version$version.string), 
[18:03:35.147]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:35.147]                                 base::R.version$platform, 8 * 
[18:03:35.147]                                   base::.Machine$sizeof.pointer), 
[18:03:35.147]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:35.147]                                 "release", "version")], collapse = " "), 
[18:03:35.147]                               hostname = base::Sys.info()[["nodename"]])
[18:03:35.147]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:35.147]                               info)
[18:03:35.147]                             info <- base::paste(info, collapse = "; ")
[18:03:35.147]                             if (!has_future) {
[18:03:35.147]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:35.147]                                 info)
[18:03:35.147]                             }
[18:03:35.147]                             else {
[18:03:35.147]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:35.147]                                 info, version)
[18:03:35.147]                             }
[18:03:35.147]                             base::stop(msg)
[18:03:35.147]                           }
[18:03:35.147]                         })
[18:03:35.147]                       }
[18:03:35.147]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:35.147]                       base::options(mc.cores = 1L)
[18:03:35.147]                     }
[18:03:35.147]                     base::local({
[18:03:35.147]                       for (pkg in "future") {
[18:03:35.147]                         base::loadNamespace(pkg)
[18:03:35.147]                         base::library(pkg, character.only = TRUE)
[18:03:35.147]                       }
[18:03:35.147]                     })
[18:03:35.147]                   }
[18:03:35.147]                   ...future.strategy.old <- future::plan("list")
[18:03:35.147]                   options(future.plan = NULL)
[18:03:35.147]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:35.147]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:35.147]                 }
[18:03:35.147]                 ...future.workdir <- getwd()
[18:03:35.147]             }
[18:03:35.147]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:35.147]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:35.147]         }
[18:03:35.147]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:35.147]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:35.147]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:35.147]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:35.147]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:35.147]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:35.147]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:35.147]             base::names(...future.oldOptions))
[18:03:35.147]     }
[18:03:35.147]     if (FALSE) {
[18:03:35.147]     }
[18:03:35.147]     else {
[18:03:35.147]         if (TRUE) {
[18:03:35.147]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:35.147]                 open = "w")
[18:03:35.147]         }
[18:03:35.147]         else {
[18:03:35.147]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:35.147]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:35.147]         }
[18:03:35.147]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:35.147]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:35.147]             base::sink(type = "output", split = FALSE)
[18:03:35.147]             base::close(...future.stdout)
[18:03:35.147]         }, add = TRUE)
[18:03:35.147]     }
[18:03:35.147]     ...future.frame <- base::sys.nframe()
[18:03:35.147]     ...future.conditions <- base::list()
[18:03:35.147]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:35.147]     if (FALSE) {
[18:03:35.147]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:35.147]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:35.147]     }
[18:03:35.147]     ...future.result <- base::tryCatch({
[18:03:35.147]         base::withCallingHandlers({
[18:03:35.147]             ...future.value <- base::withVisible(base::local({
[18:03:35.147]                 withCallingHandlers({
[18:03:35.147]                   {
[18:03:35.147]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:35.147]                       ii, n), appendLF = FALSE)
[18:03:35.147]                     fit <- mandelbrot(C)
[18:03:35.147]                     delay(fit)
[18:03:35.147]                     message(" done")
[18:03:35.147]                     fit
[18:03:35.147]                   }
[18:03:35.147]                 }, immediateCondition = function(cond) {
[18:03:35.147]                   save_rds <- function (object, pathname, ...) 
[18:03:35.147]                   {
[18:03:35.147]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:35.147]                     if (file_test("-f", pathname_tmp)) {
[18:03:35.147]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.147]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:35.147]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.147]                         fi_tmp[["mtime"]])
[18:03:35.147]                     }
[18:03:35.147]                     tryCatch({
[18:03:35.147]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:35.147]                     }, error = function(ex) {
[18:03:35.147]                       msg <- conditionMessage(ex)
[18:03:35.147]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.147]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:35.147]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.147]                         fi_tmp[["mtime"]], msg)
[18:03:35.147]                       ex$message <- msg
[18:03:35.147]                       stop(ex)
[18:03:35.147]                     })
[18:03:35.147]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:35.147]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:35.147]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:35.147]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.147]                       fi <- file.info(pathname)
[18:03:35.147]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:35.147]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.147]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:35.147]                         fi[["size"]], fi[["mtime"]])
[18:03:35.147]                       stop(msg)
[18:03:35.147]                     }
[18:03:35.147]                     invisible(pathname)
[18:03:35.147]                   }
[18:03:35.147]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:35.147]                     rootPath = tempdir()) 
[18:03:35.147]                   {
[18:03:35.147]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:35.147]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:35.147]                       tmpdir = path, fileext = ".rds")
[18:03:35.147]                     save_rds(obj, file)
[18:03:35.147]                   }
[18:03:35.147]                   saveImmediateCondition(cond, path = "/tmp/RtmpHLw6Ay/.future/immediateConditions")
[18:03:35.147]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.147]                   {
[18:03:35.147]                     inherits <- base::inherits
[18:03:35.147]                     invokeRestart <- base::invokeRestart
[18:03:35.147]                     is.null <- base::is.null
[18:03:35.147]                     muffled <- FALSE
[18:03:35.147]                     if (inherits(cond, "message")) {
[18:03:35.147]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:35.147]                       if (muffled) 
[18:03:35.147]                         invokeRestart("muffleMessage")
[18:03:35.147]                     }
[18:03:35.147]                     else if (inherits(cond, "warning")) {
[18:03:35.147]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:35.147]                       if (muffled) 
[18:03:35.147]                         invokeRestart("muffleWarning")
[18:03:35.147]                     }
[18:03:35.147]                     else if (inherits(cond, "condition")) {
[18:03:35.147]                       if (!is.null(pattern)) {
[18:03:35.147]                         computeRestarts <- base::computeRestarts
[18:03:35.147]                         grepl <- base::grepl
[18:03:35.147]                         restarts <- computeRestarts(cond)
[18:03:35.147]                         for (restart in restarts) {
[18:03:35.147]                           name <- restart$name
[18:03:35.147]                           if (is.null(name)) 
[18:03:35.147]                             next
[18:03:35.147]                           if (!grepl(pattern, name)) 
[18:03:35.147]                             next
[18:03:35.147]                           invokeRestart(restart)
[18:03:35.147]                           muffled <- TRUE
[18:03:35.147]                           break
[18:03:35.147]                         }
[18:03:35.147]                       }
[18:03:35.147]                     }
[18:03:35.147]                     invisible(muffled)
[18:03:35.147]                   }
[18:03:35.147]                   muffleCondition(cond)
[18:03:35.147]                 })
[18:03:35.147]             }))
[18:03:35.147]             future::FutureResult(value = ...future.value$value, 
[18:03:35.147]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:35.147]                   ...future.rng), globalenv = if (FALSE) 
[18:03:35.147]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:35.147]                     ...future.globalenv.names))
[18:03:35.147]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:35.147]         }, condition = base::local({
[18:03:35.147]             c <- base::c
[18:03:35.147]             inherits <- base::inherits
[18:03:35.147]             invokeRestart <- base::invokeRestart
[18:03:35.147]             length <- base::length
[18:03:35.147]             list <- base::list
[18:03:35.147]             seq.int <- base::seq.int
[18:03:35.147]             signalCondition <- base::signalCondition
[18:03:35.147]             sys.calls <- base::sys.calls
[18:03:35.147]             `[[` <- base::`[[`
[18:03:35.147]             `+` <- base::`+`
[18:03:35.147]             `<<-` <- base::`<<-`
[18:03:35.147]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:35.147]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:35.147]                   3L)]
[18:03:35.147]             }
[18:03:35.147]             function(cond) {
[18:03:35.147]                 is_error <- inherits(cond, "error")
[18:03:35.147]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:35.147]                   NULL)
[18:03:35.147]                 if (is_error) {
[18:03:35.147]                   sessionInformation <- function() {
[18:03:35.147]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:35.147]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:35.147]                       search = base::search(), system = base::Sys.info())
[18:03:35.147]                   }
[18:03:35.147]                   ...future.conditions[[length(...future.conditions) + 
[18:03:35.147]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:35.147]                     cond$call), session = sessionInformation(), 
[18:03:35.147]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:35.147]                   signalCondition(cond)
[18:03:35.147]                 }
[18:03:35.147]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:35.147]                 "immediateCondition"))) {
[18:03:35.147]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:35.147]                   ...future.conditions[[length(...future.conditions) + 
[18:03:35.147]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:35.147]                   if (TRUE && !signal) {
[18:03:35.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.147]                     {
[18:03:35.147]                       inherits <- base::inherits
[18:03:35.147]                       invokeRestart <- base::invokeRestart
[18:03:35.147]                       is.null <- base::is.null
[18:03:35.147]                       muffled <- FALSE
[18:03:35.147]                       if (inherits(cond, "message")) {
[18:03:35.147]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:35.147]                         if (muffled) 
[18:03:35.147]                           invokeRestart("muffleMessage")
[18:03:35.147]                       }
[18:03:35.147]                       else if (inherits(cond, "warning")) {
[18:03:35.147]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:35.147]                         if (muffled) 
[18:03:35.147]                           invokeRestart("muffleWarning")
[18:03:35.147]                       }
[18:03:35.147]                       else if (inherits(cond, "condition")) {
[18:03:35.147]                         if (!is.null(pattern)) {
[18:03:35.147]                           computeRestarts <- base::computeRestarts
[18:03:35.147]                           grepl <- base::grepl
[18:03:35.147]                           restarts <- computeRestarts(cond)
[18:03:35.147]                           for (restart in restarts) {
[18:03:35.147]                             name <- restart$name
[18:03:35.147]                             if (is.null(name)) 
[18:03:35.147]                               next
[18:03:35.147]                             if (!grepl(pattern, name)) 
[18:03:35.147]                               next
[18:03:35.147]                             invokeRestart(restart)
[18:03:35.147]                             muffled <- TRUE
[18:03:35.147]                             break
[18:03:35.147]                           }
[18:03:35.147]                         }
[18:03:35.147]                       }
[18:03:35.147]                       invisible(muffled)
[18:03:35.147]                     }
[18:03:35.147]                     muffleCondition(cond, pattern = "^muffle")
[18:03:35.147]                   }
[18:03:35.147]                 }
[18:03:35.147]                 else {
[18:03:35.147]                   if (TRUE) {
[18:03:35.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.147]                     {
[18:03:35.147]                       inherits <- base::inherits
[18:03:35.147]                       invokeRestart <- base::invokeRestart
[18:03:35.147]                       is.null <- base::is.null
[18:03:35.147]                       muffled <- FALSE
[18:03:35.147]                       if (inherits(cond, "message")) {
[18:03:35.147]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:35.147]                         if (muffled) 
[18:03:35.147]                           invokeRestart("muffleMessage")
[18:03:35.147]                       }
[18:03:35.147]                       else if (inherits(cond, "warning")) {
[18:03:35.147]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:35.147]                         if (muffled) 
[18:03:35.147]                           invokeRestart("muffleWarning")
[18:03:35.147]                       }
[18:03:35.147]                       else if (inherits(cond, "condition")) {
[18:03:35.147]                         if (!is.null(pattern)) {
[18:03:35.147]                           computeRestarts <- base::computeRestarts
[18:03:35.147]                           grepl <- base::grepl
[18:03:35.147]                           restarts <- computeRestarts(cond)
[18:03:35.147]                           for (restart in restarts) {
[18:03:35.147]                             name <- restart$name
[18:03:35.147]                             if (is.null(name)) 
[18:03:35.147]                               next
[18:03:35.147]                             if (!grepl(pattern, name)) 
[18:03:35.147]                               next
[18:03:35.147]                             invokeRestart(restart)
[18:03:35.147]                             muffled <- TRUE
[18:03:35.147]                             break
[18:03:35.147]                           }
[18:03:35.147]                         }
[18:03:35.147]                       }
[18:03:35.147]                       invisible(muffled)
[18:03:35.147]                     }
[18:03:35.147]                     muffleCondition(cond, pattern = "^muffle")
[18:03:35.147]                   }
[18:03:35.147]                 }
[18:03:35.147]             }
[18:03:35.147]         }))
[18:03:35.147]     }, error = function(ex) {
[18:03:35.147]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:35.147]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:35.147]                 ...future.rng), started = ...future.startTime, 
[18:03:35.147]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:35.147]             version = "1.8"), class = "FutureResult")
[18:03:35.147]     }, finally = {
[18:03:35.147]         if (!identical(...future.workdir, getwd())) 
[18:03:35.147]             setwd(...future.workdir)
[18:03:35.147]         {
[18:03:35.147]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:35.147]                 ...future.oldOptions$nwarnings <- NULL
[18:03:35.147]             }
[18:03:35.147]             base::options(...future.oldOptions)
[18:03:35.147]             if (.Platform$OS.type == "windows") {
[18:03:35.147]                 old_names <- names(...future.oldEnvVars)
[18:03:35.147]                 envs <- base::Sys.getenv()
[18:03:35.147]                 names <- names(envs)
[18:03:35.147]                 common <- intersect(names, old_names)
[18:03:35.147]                 added <- setdiff(names, old_names)
[18:03:35.147]                 removed <- setdiff(old_names, names)
[18:03:35.147]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:35.147]                   envs[common]]
[18:03:35.147]                 NAMES <- toupper(changed)
[18:03:35.147]                 args <- list()
[18:03:35.147]                 for (kk in seq_along(NAMES)) {
[18:03:35.147]                   name <- changed[[kk]]
[18:03:35.147]                   NAME <- NAMES[[kk]]
[18:03:35.147]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.147]                     next
[18:03:35.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:35.147]                 }
[18:03:35.147]                 NAMES <- toupper(added)
[18:03:35.147]                 for (kk in seq_along(NAMES)) {
[18:03:35.147]                   name <- added[[kk]]
[18:03:35.147]                   NAME <- NAMES[[kk]]
[18:03:35.147]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.147]                     next
[18:03:35.147]                   args[[name]] <- ""
[18:03:35.147]                 }
[18:03:35.147]                 NAMES <- toupper(removed)
[18:03:35.147]                 for (kk in seq_along(NAMES)) {
[18:03:35.147]                   name <- removed[[kk]]
[18:03:35.147]                   NAME <- NAMES[[kk]]
[18:03:35.147]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.147]                     next
[18:03:35.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:35.147]                 }
[18:03:35.147]                 if (length(args) > 0) 
[18:03:35.147]                   base::do.call(base::Sys.setenv, args = args)
[18:03:35.147]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:35.147]             }
[18:03:35.147]             else {
[18:03:35.147]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:35.147]             }
[18:03:35.147]             {
[18:03:35.147]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:35.147]                   0L) {
[18:03:35.147]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:35.147]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:35.147]                   base::options(opts)
[18:03:35.147]                 }
[18:03:35.147]                 {
[18:03:35.147]                   {
[18:03:35.147]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:35.147]                     NULL
[18:03:35.147]                   }
[18:03:35.147]                   options(future.plan = NULL)
[18:03:35.147]                   if (is.na(NA_character_)) 
[18:03:35.147]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:35.147]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:35.147]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:35.147]                     .init = FALSE)
[18:03:35.147]                 }
[18:03:35.147]             }
[18:03:35.147]         }
[18:03:35.147]     })
[18:03:35.147]     if (TRUE) {
[18:03:35.147]         base::sink(type = "output", split = FALSE)
[18:03:35.147]         if (TRUE) {
[18:03:35.147]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:35.147]         }
[18:03:35.147]         else {
[18:03:35.147]             ...future.result["stdout"] <- base::list(NULL)
[18:03:35.147]         }
[18:03:35.147]         base::close(...future.stdout)
[18:03:35.147]         ...future.stdout <- NULL
[18:03:35.147]     }
[18:03:35.147]     ...future.result$conditions <- ...future.conditions
[18:03:35.147]     ...future.result$finished <- base::Sys.time()
[18:03:35.147]     ...future.result
[18:03:35.147] }
[18:03:35.153] assign_globals() ...
[18:03:35.154] List of 4
[18:03:35.154]  $ ii   : int 3
[18:03:35.154]  $ n    : int 4
[18:03:35.154]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[18:03:35.154]   ..- attr(*, "region")=List of 2
[18:03:35.154]   .. ..$ xrange: num [1:2] -2.25 -0.781
[18:03:35.154]   .. ..$ yrange: num [1:2] 0.0306 1.5
[18:03:35.154]   ..- attr(*, "tile")= int [1:2] 2 1
[18:03:35.154]  $ delay:function (counts)  
[18:03:35.154]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:35.154]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcee7a4c0> 
[18:03:35.154]  - attr(*, "where")=List of 4
[18:03:35.154]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:35.154]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:35.154]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:35.154]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:35.154]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:35.154]  - attr(*, "resolved")= logi FALSE
[18:03:35.154]  - attr(*, "total_size")= num 14584
[18:03:35.154]  - attr(*, "already-done")= logi TRUE
[18:03:35.176] - copied ‘ii’ to environment
[18:03:35.176] - copied ‘n’ to environment
[18:03:35.177] - copied ‘C’ to environment
[18:03:35.177] - reassign environment for ‘delay’
[18:03:35.177] - copied ‘delay’ to environment
[18:03:35.178] assign_globals() ... done
[18:03:35.178] requestCore(): workers = 2
[18:03:35.179] Poll #1 (0): usedCores() = 2, workers = 2
[18:03:35.191] result() for MulticoreFuture ...
[18:03:35.198] result() for MulticoreFuture ...
[18:03:35.198] result() for MulticoreFuture ... done
[18:03:35.199] signalConditions() ...
[18:03:35.201]  - include = ‘immediateCondition’
[18:03:35.201]  - exclude = 
[18:03:35.202]  - resignal = FALSE
[18:03:35.202]  - Number of conditions: 2
[18:03:35.203] signalConditions() ... done
[18:03:35.203] result() for MulticoreFuture ... done
[18:03:35.204] result() for MulticoreFuture ...
[18:03:35.204] result() for MulticoreFuture ... done
[18:03:35.204] signalConditions() ...
[18:03:35.205]  - include = ‘immediateCondition’
[18:03:35.205]  - exclude = 
[18:03:35.205]  - resignal = FALSE
[18:03:35.206]  - Number of conditions: 2
[18:03:35.206] signalConditions() ... done
[18:03:35.212] MulticoreFuture started
[18:03:35.213] - Launch lazy future ... done
[18:03:35.215] run() for ‘MulticoreFuture’ ... done
[18:03:35.216] - run() ... done
[18:03:35.216] - resolved() ...
[18:03:35.218] plan(): Setting new future strategy stack:
[18:03:35.219] List of future strategies:
[18:03:35.219] 1. sequential:
[18:03:35.219]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:35.219]    - tweaked: FALSE
[18:03:35.219]    - call: NULL
[18:03:35.221] plan(): nbrOfWorkers() = 1
[18:03:35.229] plan(): Setting new future strategy stack:
[18:03:35.229] - resolved: FALSE
[18:03:35.230] - resolved() ... done
[18:03:35.229] List of future strategies:
[18:03:35.229] 1. multicore:
[18:03:35.229]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:35.229]    - tweaked: FALSE
[18:03:35.229]    - call: plan(strategy)
[18:03:35.230] resolved() for ‘MulticoreFuture’ ... done
[18:03:35.230] resolved() for ‘Future’ ...
[18:03:35.231] - state: ‘created’
[18:03:35.231] - run: TRUE
[18:03:35.232] - run() ...
[18:03:35.232] run() for ‘Future’ ...
[18:03:35.232] - state: ‘created’
[18:03:35.233] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:35.239] plan(): nbrOfWorkers() = 2
[18:03:35.241] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:35.242] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:35.242]   - Field: ‘label’
[18:03:35.243]   - Field: ‘local’
[18:03:35.243]   - Field: ‘owner’
[18:03:35.243]   - Field: ‘envir’
[18:03:35.244]   - Field: ‘workers’
[18:03:35.244]   - Field: ‘packages’
[18:03:35.244]   - Field: ‘gc’
[18:03:35.244]   - Field: ‘job’
[18:03:35.245]   - Field: ‘conditions’
[18:03:35.245]   - Field: ‘expr’
[18:03:35.245]   - Field: ‘uuid’
[18:03:35.246]   - Field: ‘seed’
[18:03:35.246]   - Field: ‘version’
[18:03:35.246]   - Field: ‘result’
[18:03:35.247]   - Field: ‘asynchronous’
[18:03:35.247]   - Field: ‘calls’
[18:03:35.247]   - Field: ‘globals’
[18:03:35.248]   - Field: ‘stdout’
[18:03:35.248]   - Field: ‘earlySignal’
[18:03:35.248]   - Field: ‘lazy’
[18:03:35.249]   - Field: ‘state’
[18:03:35.249] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:35.249] - Launch lazy future ...
[18:03:35.250] Packages needed by the future expression (n = 1): ‘future’
[18:03:35.251] Packages needed by future strategies (n = 0): <none>
[18:03:35.253] {
[18:03:35.253]     {
[18:03:35.253]         {
[18:03:35.253]             ...future.startTime <- base::Sys.time()
[18:03:35.253]             {
[18:03:35.253]                 {
[18:03:35.253]                   {
[18:03:35.253]                     {
[18:03:35.253]                       {
[18:03:35.253]                         base::local({
[18:03:35.253]                           has_future <- base::requireNamespace("future", 
[18:03:35.253]                             quietly = TRUE)
[18:03:35.253]                           if (has_future) {
[18:03:35.253]                             ns <- base::getNamespace("future")
[18:03:35.253]                             version <- ns[[".package"]][["version"]]
[18:03:35.253]                             if (is.null(version)) 
[18:03:35.253]                               version <- utils::packageVersion("future")
[18:03:35.253]                           }
[18:03:35.253]                           else {
[18:03:35.253]                             version <- NULL
[18:03:35.253]                           }
[18:03:35.253]                           if (!has_future || version < "1.8.0") {
[18:03:35.253]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:35.253]                               "", base::R.version$version.string), 
[18:03:35.253]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:35.253]                                 base::R.version$platform, 8 * 
[18:03:35.253]                                   base::.Machine$sizeof.pointer), 
[18:03:35.253]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:35.253]                                 "release", "version")], collapse = " "), 
[18:03:35.253]                               hostname = base::Sys.info()[["nodename"]])
[18:03:35.253]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:35.253]                               info)
[18:03:35.253]                             info <- base::paste(info, collapse = "; ")
[18:03:35.253]                             if (!has_future) {
[18:03:35.253]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:35.253]                                 info)
[18:03:35.253]                             }
[18:03:35.253]                             else {
[18:03:35.253]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:35.253]                                 info, version)
[18:03:35.253]                             }
[18:03:35.253]                             base::stop(msg)
[18:03:35.253]                           }
[18:03:35.253]                         })
[18:03:35.253]                       }
[18:03:35.253]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:35.253]                       base::options(mc.cores = 1L)
[18:03:35.253]                     }
[18:03:35.253]                     base::local({
[18:03:35.253]                       for (pkg in "future") {
[18:03:35.253]                         base::loadNamespace(pkg)
[18:03:35.253]                         base::library(pkg, character.only = TRUE)
[18:03:35.253]                       }
[18:03:35.253]                     })
[18:03:35.253]                   }
[18:03:35.253]                   ...future.strategy.old <- future::plan("list")
[18:03:35.253]                   options(future.plan = NULL)
[18:03:35.253]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:35.253]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:35.253]                 }
[18:03:35.253]                 ...future.workdir <- getwd()
[18:03:35.253]             }
[18:03:35.253]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:35.253]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:35.253]         }
[18:03:35.253]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:35.253]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:35.253]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:35.253]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:35.253]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:35.253]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:35.253]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:35.253]             base::names(...future.oldOptions))
[18:03:35.253]     }
[18:03:35.253]     if (FALSE) {
[18:03:35.253]     }
[18:03:35.253]     else {
[18:03:35.253]         if (TRUE) {
[18:03:35.253]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:35.253]                 open = "w")
[18:03:35.253]         }
[18:03:35.253]         else {
[18:03:35.253]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:35.253]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:35.253]         }
[18:03:35.253]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:35.253]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:35.253]             base::sink(type = "output", split = FALSE)
[18:03:35.253]             base::close(...future.stdout)
[18:03:35.253]         }, add = TRUE)
[18:03:35.253]     }
[18:03:35.253]     ...future.frame <- base::sys.nframe()
[18:03:35.253]     ...future.conditions <- base::list()
[18:03:35.253]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:35.253]     if (FALSE) {
[18:03:35.253]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:35.253]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:35.253]     }
[18:03:35.253]     ...future.result <- base::tryCatch({
[18:03:35.253]         base::withCallingHandlers({
[18:03:35.253]             ...future.value <- base::withVisible(base::local({
[18:03:35.253]                 withCallingHandlers({
[18:03:35.253]                   {
[18:03:35.253]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:35.253]                       ii, n), appendLF = FALSE)
[18:03:35.253]                     fit <- mandelbrot(C)
[18:03:35.253]                     delay(fit)
[18:03:35.253]                     message(" done")
[18:03:35.253]                     fit
[18:03:35.253]                   }
[18:03:35.253]                 }, immediateCondition = function(cond) {
[18:03:35.253]                   save_rds <- function (object, pathname, ...) 
[18:03:35.253]                   {
[18:03:35.253]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:35.253]                     if (file_test("-f", pathname_tmp)) {
[18:03:35.253]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.253]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:35.253]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.253]                         fi_tmp[["mtime"]])
[18:03:35.253]                     }
[18:03:35.253]                     tryCatch({
[18:03:35.253]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:35.253]                     }, error = function(ex) {
[18:03:35.253]                       msg <- conditionMessage(ex)
[18:03:35.253]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.253]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:35.253]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.253]                         fi_tmp[["mtime"]], msg)
[18:03:35.253]                       ex$message <- msg
[18:03:35.253]                       stop(ex)
[18:03:35.253]                     })
[18:03:35.253]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:35.253]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:35.253]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:35.253]                       fi_tmp <- file.info(pathname_tmp)
[18:03:35.253]                       fi <- file.info(pathname)
[18:03:35.253]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:35.253]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:35.253]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:35.253]                         fi[["size"]], fi[["mtime"]])
[18:03:35.253]                       stop(msg)
[18:03:35.253]                     }
[18:03:35.253]                     invisible(pathname)
[18:03:35.253]                   }
[18:03:35.253]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:35.253]                     rootPath = tempdir()) 
[18:03:35.253]                   {
[18:03:35.253]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:35.253]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:35.253]                       tmpdir = path, fileext = ".rds")
[18:03:35.253]                     save_rds(obj, file)
[18:03:35.253]                   }
[18:03:35.253]                   saveImmediateCondition(cond, path = "/tmp/RtmpHLw6Ay/.future/immediateConditions")
[18:03:35.253]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.253]                   {
[18:03:35.253]                     inherits <- base::inherits
[18:03:35.253]                     invokeRestart <- base::invokeRestart
[18:03:35.253]                     is.null <- base::is.null
[18:03:35.253]                     muffled <- FALSE
[18:03:35.253]                     if (inherits(cond, "message")) {
[18:03:35.253]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:35.253]                       if (muffled) 
[18:03:35.253]                         invokeRestart("muffleMessage")
[18:03:35.253]                     }
[18:03:35.253]                     else if (inherits(cond, "warning")) {
[18:03:35.253]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:35.253]                       if (muffled) 
[18:03:35.253]                         invokeRestart("muffleWarning")
[18:03:35.253]                     }
[18:03:35.253]                     else if (inherits(cond, "condition")) {
[18:03:35.253]                       if (!is.null(pattern)) {
[18:03:35.253]                         computeRestarts <- base::computeRestarts
[18:03:35.253]                         grepl <- base::grepl
[18:03:35.253]                         restarts <- computeRestarts(cond)
[18:03:35.253]                         for (restart in restarts) {
[18:03:35.253]                           name <- restart$name
[18:03:35.253]                           if (is.null(name)) 
[18:03:35.253]                             next
[18:03:35.253]                           if (!grepl(pattern, name)) 
[18:03:35.253]                             next
[18:03:35.253]                           invokeRestart(restart)
[18:03:35.253]                           muffled <- TRUE
[18:03:35.253]                           break
[18:03:35.253]                         }
[18:03:35.253]                       }
[18:03:35.253]                     }
[18:03:35.253]                     invisible(muffled)
[18:03:35.253]                   }
[18:03:35.253]                   muffleCondition(cond)
[18:03:35.253]                 })
[18:03:35.253]             }))
[18:03:35.253]             future::FutureResult(value = ...future.value$value, 
[18:03:35.253]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:35.253]                   ...future.rng), globalenv = if (FALSE) 
[18:03:35.253]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:35.253]                     ...future.globalenv.names))
[18:03:35.253]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:35.253]         }, condition = base::local({
[18:03:35.253]             c <- base::c
[18:03:35.253]             inherits <- base::inherits
[18:03:35.253]             invokeRestart <- base::invokeRestart
[18:03:35.253]             length <- base::length
[18:03:35.253]             list <- base::list
[18:03:35.253]             seq.int <- base::seq.int
[18:03:35.253]             signalCondition <- base::signalCondition
[18:03:35.253]             sys.calls <- base::sys.calls
[18:03:35.253]             `[[` <- base::`[[`
[18:03:35.253]             `+` <- base::`+`
[18:03:35.253]             `<<-` <- base::`<<-`
[18:03:35.253]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:35.253]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:35.253]                   3L)]
[18:03:35.253]             }
[18:03:35.253]             function(cond) {
[18:03:35.253]                 is_error <- inherits(cond, "error")
[18:03:35.253]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:35.253]                   NULL)
[18:03:35.253]                 if (is_error) {
[18:03:35.253]                   sessionInformation <- function() {
[18:03:35.253]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:35.253]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:35.253]                       search = base::search(), system = base::Sys.info())
[18:03:35.253]                   }
[18:03:35.253]                   ...future.conditions[[length(...future.conditions) + 
[18:03:35.253]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:35.253]                     cond$call), session = sessionInformation(), 
[18:03:35.253]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:35.253]                   signalCondition(cond)
[18:03:35.253]                 }
[18:03:35.253]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:35.253]                 "immediateCondition"))) {
[18:03:35.253]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:35.253]                   ...future.conditions[[length(...future.conditions) + 
[18:03:35.253]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:35.253]                   if (TRUE && !signal) {
[18:03:35.253]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.253]                     {
[18:03:35.253]                       inherits <- base::inherits
[18:03:35.253]                       invokeRestart <- base::invokeRestart
[18:03:35.253]                       is.null <- base::is.null
[18:03:35.253]                       muffled <- FALSE
[18:03:35.253]                       if (inherits(cond, "message")) {
[18:03:35.253]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:35.253]                         if (muffled) 
[18:03:35.253]                           invokeRestart("muffleMessage")
[18:03:35.253]                       }
[18:03:35.253]                       else if (inherits(cond, "warning")) {
[18:03:35.253]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:35.253]                         if (muffled) 
[18:03:35.253]                           invokeRestart("muffleWarning")
[18:03:35.253]                       }
[18:03:35.253]                       else if (inherits(cond, "condition")) {
[18:03:35.253]                         if (!is.null(pattern)) {
[18:03:35.253]                           computeRestarts <- base::computeRestarts
[18:03:35.253]                           grepl <- base::grepl
[18:03:35.253]                           restarts <- computeRestarts(cond)
[18:03:35.253]                           for (restart in restarts) {
[18:03:35.253]                             name <- restart$name
[18:03:35.253]                             if (is.null(name)) 
[18:03:35.253]                               next
[18:03:35.253]                             if (!grepl(pattern, name)) 
[18:03:35.253]                               next
[18:03:35.253]                             invokeRestart(restart)
[18:03:35.253]                             muffled <- TRUE
[18:03:35.253]                             break
[18:03:35.253]                           }
[18:03:35.253]                         }
[18:03:35.253]                       }
[18:03:35.253]                       invisible(muffled)
[18:03:35.253]                     }
[18:03:35.253]                     muffleCondition(cond, pattern = "^muffle")
[18:03:35.253]                   }
[18:03:35.253]                 }
[18:03:35.253]                 else {
[18:03:35.253]                   if (TRUE) {
[18:03:35.253]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:35.253]                     {
[18:03:35.253]                       inherits <- base::inherits
[18:03:35.253]                       invokeRestart <- base::invokeRestart
[18:03:35.253]                       is.null <- base::is.null
[18:03:35.253]                       muffled <- FALSE
[18:03:35.253]                       if (inherits(cond, "message")) {
[18:03:35.253]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:35.253]                         if (muffled) 
[18:03:35.253]                           invokeRestart("muffleMessage")
[18:03:35.253]                       }
[18:03:35.253]                       else if (inherits(cond, "warning")) {
[18:03:35.253]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:35.253]                         if (muffled) 
[18:03:35.253]                           invokeRestart("muffleWarning")
[18:03:35.253]                       }
[18:03:35.253]                       else if (inherits(cond, "condition")) {
[18:03:35.253]                         if (!is.null(pattern)) {
[18:03:35.253]                           computeRestarts <- base::computeRestarts
[18:03:35.253]                           grepl <- base::grepl
[18:03:35.253]                           restarts <- computeRestarts(cond)
[18:03:35.253]                           for (restart in restarts) {
[18:03:35.253]                             name <- restart$name
[18:03:35.253]                             if (is.null(name)) 
[18:03:35.253]                               next
[18:03:35.253]                             if (!grepl(pattern, name)) 
[18:03:35.253]                               next
[18:03:35.253]                             invokeRestart(restart)
[18:03:35.253]                             muffled <- TRUE
[18:03:35.253]                             break
[18:03:35.253]                           }
[18:03:35.253]                         }
[18:03:35.253]                       }
[18:03:35.253]                       invisible(muffled)
[18:03:35.253]                     }
[18:03:35.253]                     muffleCondition(cond, pattern = "^muffle")
[18:03:35.253]                   }
[18:03:35.253]                 }
[18:03:35.253]             }
[18:03:35.253]         }))
[18:03:35.253]     }, error = function(ex) {
[18:03:35.253]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:35.253]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:35.253]                 ...future.rng), started = ...future.startTime, 
[18:03:35.253]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:35.253]             version = "1.8"), class = "FutureResult")
[18:03:35.253]     }, finally = {
[18:03:35.253]         if (!identical(...future.workdir, getwd())) 
[18:03:35.253]             setwd(...future.workdir)
[18:03:35.253]         {
[18:03:35.253]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:35.253]                 ...future.oldOptions$nwarnings <- NULL
[18:03:35.253]             }
[18:03:35.253]             base::options(...future.oldOptions)
[18:03:35.253]             if (.Platform$OS.type == "windows") {
[18:03:35.253]                 old_names <- names(...future.oldEnvVars)
[18:03:35.253]                 envs <- base::Sys.getenv()
[18:03:35.253]                 names <- names(envs)
[18:03:35.253]                 common <- intersect(names, old_names)
[18:03:35.253]                 added <- setdiff(names, old_names)
[18:03:35.253]                 removed <- setdiff(old_names, names)
[18:03:35.253]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:35.253]                   envs[common]]
[18:03:35.253]                 NAMES <- toupper(changed)
[18:03:35.253]                 args <- list()
[18:03:35.253]                 for (kk in seq_along(NAMES)) {
[18:03:35.253]                   name <- changed[[kk]]
[18:03:35.253]                   NAME <- NAMES[[kk]]
[18:03:35.253]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.253]                     next
[18:03:35.253]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:35.253]                 }
[18:03:35.253]                 NAMES <- toupper(added)
[18:03:35.253]                 for (kk in seq_along(NAMES)) {
[18:03:35.253]                   name <- added[[kk]]
[18:03:35.253]                   NAME <- NAMES[[kk]]
[18:03:35.253]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.253]                     next
[18:03:35.253]                   args[[name]] <- ""
[18:03:35.253]                 }
[18:03:35.253]                 NAMES <- toupper(removed)
[18:03:35.253]                 for (kk in seq_along(NAMES)) {
[18:03:35.253]                   name <- removed[[kk]]
[18:03:35.253]                   NAME <- NAMES[[kk]]
[18:03:35.253]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:35.253]                     next
[18:03:35.253]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:35.253]                 }
[18:03:35.253]                 if (length(args) > 0) 
[18:03:35.253]                   base::do.call(base::Sys.setenv, args = args)
[18:03:35.253]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:35.253]             }
[18:03:35.253]             else {
[18:03:35.253]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:35.253]             }
[18:03:35.253]             {
[18:03:35.253]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:35.253]                   0L) {
[18:03:35.253]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:35.253]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:35.253]                   base::options(opts)
[18:03:35.253]                 }
[18:03:35.253]                 {
[18:03:35.253]                   {
[18:03:35.253]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:35.253]                     NULL
[18:03:35.253]                   }
[18:03:35.253]                   options(future.plan = NULL)
[18:03:35.253]                   if (is.na(NA_character_)) 
[18:03:35.253]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:35.253]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:35.253]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:35.253]                     .init = FALSE)
[18:03:35.253]                 }
[18:03:35.253]             }
[18:03:35.253]         }
[18:03:35.253]     })
[18:03:35.253]     if (TRUE) {
[18:03:35.253]         base::sink(type = "output", split = FALSE)
[18:03:35.253]         if (TRUE) {
[18:03:35.253]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:35.253]         }
[18:03:35.253]         else {
[18:03:35.253]             ...future.result["stdout"] <- base::list(NULL)
[18:03:35.253]         }
[18:03:35.253]         base::close(...future.stdout)
[18:03:35.253]         ...future.stdout <- NULL
[18:03:35.253]     }
[18:03:35.253]     ...future.result$conditions <- ...future.conditions
[18:03:35.253]     ...future.result$finished <- base::Sys.time()
[18:03:35.253]     ...future.result
[18:03:35.253] }
[18:03:35.259] assign_globals() ...
[18:03:35.259] List of 4
[18:03:35.259]  $ ii   : int 4
[18:03:35.259]  $ n    : int 4
[18:03:35.259]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[18:03:35.259]   ..- attr(*, "region")=List of 2
[18:03:35.259]   .. ..$ xrange: num [1:2] -0.719 0.75
[18:03:35.259]   .. ..$ yrange: num [1:2] 0.0306 1.5
[18:03:35.259]   ..- attr(*, "tile")= int [1:2] 2 2
[18:03:35.259]  $ delay:function (counts)  
[18:03:35.259]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[18:03:35.259]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x64cfcee7a4c0> 
[18:03:35.259]  - attr(*, "where")=List of 4
[18:03:35.259]   ..$ ii   :<environment: R_EmptyEnv> 
[18:03:35.259]   ..$ n    :<environment: R_EmptyEnv> 
[18:03:35.259]   ..$ C    :<environment: R_EmptyEnv> 
[18:03:35.259]   ..$ delay:<environment: R_EmptyEnv> 
[18:03:35.259]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:35.259]  - attr(*, "resolved")= logi FALSE
[18:03:35.259]  - attr(*, "total_size")= num 14584
[18:03:35.259]  - attr(*, "already-done")= logi TRUE
[18:03:35.279] - copied ‘ii’ to environment
[18:03:35.279] - copied ‘n’ to environment
[18:03:35.280] - copied ‘C’ to environment
[18:03:35.280] - reassign environment for ‘delay’
[18:03:35.280] - copied ‘delay’ to environment
[18:03:35.281] assign_globals() ... done
[18:03:35.281] requestCore(): workers = 2
[18:03:35.282] Poll #1 (0): usedCores() = 2, workers = 2
[18:03:35.319] result() for MulticoreFuture ...
[18:03:35.321] result() for MulticoreFuture ...
[18:03:35.321] result() for MulticoreFuture ... done
[18:03:35.321] signalConditions() ...
[18:03:35.322]  - include = ‘immediateCondition’
[18:03:35.322]  - exclude = 
[18:03:35.322]  - resignal = FALSE
[18:03:35.322]  - Number of conditions: 2
[18:03:35.323] signalConditions() ... done
[18:03:35.323] result() for MulticoreFuture ... done
[18:03:35.323] result() for MulticoreFuture ...
[18:03:35.324] result() for MulticoreFuture ... done
[18:03:35.324] signalConditions() ...
[18:03:35.324]  - include = ‘immediateCondition’
[18:03:35.324]  - exclude = 
[18:03:35.325]  - resignal = FALSE
[18:03:35.325]  - Number of conditions: 2
[18:03:35.325] signalConditions() ... done
[18:03:35.330] MulticoreFuture started
[18:03:35.331] - Launch lazy future ... done
[18:03:35.331] run() for ‘MulticoreFuture’ ... done
[18:03:35.332] - run() ... done
[18:03:35.332] - resolved() ...
[18:03:35.333] plan(): Setting new future strategy stack:
[18:03:35.333] List of future strategies:
[18:03:35.333] 1. sequential:
[18:03:35.333]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:35.333]    - tweaked: FALSE
[18:03:35.333]    - call: NULL
[18:03:35.336] plan(): nbrOfWorkers() = 1
[18:03:35.343] - resolved: FALSE
[18:03:35.343] - resolved() ... done
[18:03:35.344] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[18:03:35.345] result() for MulticoreFuture ...
[18:03:35.345] result() for MulticoreFuture ... done
[18:03:35.345] result() for MulticoreFuture ...
[18:03:35.346] result() for MulticoreFuture ... done
[18:03:35.346] signalConditions() ...
[18:03:35.346]  - include = ‘immediateCondition’
[18:03:35.347]  - exclude = 
[18:03:35.347]  - resignal = FALSE
[18:03:35.347]  - Number of conditions: 2
[18:03:35.348] signalConditions() ... done
[18:03:35.348] Future state: ‘finished’
[18:03:35.348] result() for MulticoreFuture ...
[18:03:35.349] result() for MulticoreFuture ... done
[18:03:35.349] signalConditions() ...
[18:03:35.349]  - include = ‘condition’
[18:03:35.350]  - exclude = ‘immediateCondition’
[18:03:35.350]  - resignal = TRUE
[18:03:35.350]  - Number of conditions: 2
[18:03:35.350] plan(): Setting new future strategy stack:
[18:03:35.350] List of future strategies:
[18:03:35.350] 1. multicore:
[18:03:35.350]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:35.350]    - tweaked: FALSE
[18:03:35.350]    - call: plan(strategy)
[18:03:35.350]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[18:03:35.352]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:35.353] signalConditions() ... done
Plotting tile #2 of 4 ...
[18:03:35.355] result() for MulticoreFuture ...
[18:03:35.356] result() for MulticoreFuture ... done
[18:03:35.356] result() for MulticoreFuture ...
[18:03:35.356] result() for MulticoreFuture ... done
[18:03:35.357] signalConditions() ...
[18:03:35.358]  - include = ‘immediateCondition’
[18:03:35.358]  - exclude = 
[18:03:35.359]  - resignal = FALSE
[18:03:35.360] plan(): nbrOfWorkers() = 2
[18:03:35.360]  - Number of conditions: 2
[18:03:35.360] signalConditions() ... done
[18:03:35.360] Future state: ‘finished’
[18:03:35.361] result() for MulticoreFuture ...
[18:03:35.361] result() for MulticoreFuture ... done
[18:03:35.361] signalConditions() ...
[18:03:35.362]  - include = ‘condition’
[18:03:35.362]  - exclude = ‘immediateCondition’
[18:03:35.362]  - resignal = TRUE
[18:03:35.363]  - Number of conditions: 2
[18:03:35.363]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[18:03:35.363]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:35.364] signalConditions() ... done
Plotting tile #3 of 4 ...
[18:03:35.366] result() for MulticoreFuture ...
[18:03:35.368] result() for MulticoreFuture ...
[18:03:35.369] result() for MulticoreFuture ... done
[18:03:35.369] signalConditions() ...
[18:03:35.369]  - include = ‘immediateCondition’
[18:03:35.370]  - exclude = 
[18:03:35.370]  - resignal = FALSE
[18:03:35.370]  - Number of conditions: 2
[18:03:35.371] signalConditions() ... done
[18:03:35.371] result() for MulticoreFuture ... done
[18:03:35.371] result() for MulticoreFuture ...
[18:03:35.371] result() for MulticoreFuture ... done
[18:03:35.372] signalConditions() ...
[18:03:35.372]  - include = ‘immediateCondition’
[18:03:35.372]  - exclude = 
[18:03:35.372]  - resignal = FALSE
[18:03:35.373]  - Number of conditions: 2
[18:03:35.373] signalConditions() ... done
[18:03:35.376] Future state: ‘finished’
[18:03:35.377] result() for MulticoreFuture ...
[18:03:35.377] result() for MulticoreFuture ... done
[18:03:35.378] signalConditions() ...
[18:03:35.378]  - include = ‘condition’
[18:03:35.378]  - exclude = ‘immediateCondition’
[18:03:35.378]  - resignal = TRUE
[18:03:35.379]  - Number of conditions: 2
[18:03:35.379]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[18:03:35.379]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:35.380] signalConditions() ... done
Plotting tile #4 of 4 ...
[18:03:35.382] result() for MulticoreFuture ...
[18:03:35.384] result() for MulticoreFuture ...
[18:03:35.385] result() for MulticoreFuture ... done
[18:03:35.385] signalConditions() ...
[18:03:35.385]  - include = ‘immediateCondition’
[18:03:35.385]  - exclude = 
[18:03:35.386]  - resignal = FALSE
[18:03:35.386]  - Number of conditions: 2
[18:03:35.386] signalConditions() ... done
[18:03:35.386] result() for MulticoreFuture ... done
[18:03:35.387] result() for MulticoreFuture ...
[18:03:35.387] result() for MulticoreFuture ... done
[18:03:35.387] signalConditions() ...
[18:03:35.387]  - include = ‘immediateCondition’
[18:03:35.388]  - exclude = 
[18:03:35.388]  - resignal = FALSE
[18:03:35.388]  - Number of conditions: 2
[18:03:35.388] signalConditions() ... done
[18:03:35.389] Future state: ‘finished’
[18:03:35.389] result() for MulticoreFuture ...
[18:03:35.389] result() for MulticoreFuture ... done
[18:03:35.389] signalConditions() ...
[18:03:35.389]  - include = ‘condition’
[18:03:35.390]  - exclude = ‘immediateCondition’
[18:03:35.390]  - resignal = TRUE
[18:03:35.390]  - Number of conditions: 2
[18:03:35.390]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[18:03:35.391]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:35.391] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[18:03:35.394] plan(): Setting new future strategy stack:
[18:03:35.395] List of future strategies:
[18:03:35.395] 1. multisession:
[18:03:35.395]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:03:35.395]    - tweaked: FALSE
[18:03:35.395]    - call: plan(strategy)
[18:03:35.395] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:03:35.396] multisession:
[18:03:35.396] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:03:35.396] - tweaked: FALSE
[18:03:35.396] - call: plan(strategy)
[18:03:35.407] getGlobalsAndPackages() ...
[18:03:35.407] Not searching for globals
[18:03:35.408] - globals: [0] <none>
[18:03:35.408] getGlobalsAndPackages() ... DONE
[18:03:35.409] [local output] makeClusterPSOCK() ...
[18:03:35.500] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:03:35.502] [local output] Base port: 11623
[18:03:35.502] [local output] Getting setup options for 2 cluster nodes ...
[18:03:35.502] [local output]  - Node 1 of 2 ...
[18:03:35.503] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:35.504] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpHLw6Ay/worker.rank=1.parallelly.parent=320104.4e2684175d447.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpHLw6Ay/worker.rank=1.parallelly.parent=320104.4e2684175d447.pid")'’
[18:03:35.763] - Possible to infer worker's PID: TRUE
[18:03:35.763] [local output] Rscript port: 11623

[18:03:35.764] [local output]  - Node 2 of 2 ...
[18:03:35.765] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:35.766] [local output] Rscript port: 11623

[18:03:35.766] [local output] Getting setup options for 2 cluster nodes ... done
[18:03:35.767] [local output]  - Parallel setup requested for some PSOCK nodes
[18:03:35.768] [local output] Setting up PSOCK nodes in parallel
[18:03:35.768] List of 36
[18:03:35.768]  $ worker          : chr "localhost"
[18:03:35.768]   ..- attr(*, "localhost")= logi TRUE
[18:03:35.768]  $ master          : chr "localhost"
[18:03:35.768]  $ port            : int 11623
[18:03:35.768]  $ connectTimeout  : num 120
[18:03:35.768]  $ timeout         : num 2592000
[18:03:35.768]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:03:35.768]  $ homogeneous     : logi TRUE
[18:03:35.768]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:03:35.768]  $ rscript_envs    : NULL
[18:03:35.768]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:35.768]  $ rscript_startup : NULL
[18:03:35.768]  $ rscript_sh      : chr "sh"
[18:03:35.768]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:35.768]  $ methods         : logi TRUE
[18:03:35.768]  $ socketOptions   : chr "no-delay"
[18:03:35.768]  $ useXDR          : logi FALSE
[18:03:35.768]  $ outfile         : chr "/dev/null"
[18:03:35.768]  $ renice          : int NA
[18:03:35.768]  $ rshcmd          : NULL
[18:03:35.768]  $ user            : chr(0) 
[18:03:35.768]  $ revtunnel       : logi FALSE
[18:03:35.768]  $ rshlogfile      : NULL
[18:03:35.768]  $ rshopts         : chr(0) 
[18:03:35.768]  $ rank            : int 1
[18:03:35.768]  $ manual          : logi FALSE
[18:03:35.768]  $ dryrun          : logi FALSE
[18:03:35.768]  $ quiet           : logi FALSE
[18:03:35.768]  $ setup_strategy  : chr "parallel"
[18:03:35.768]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:35.768]  $ pidfile         : chr "/tmp/RtmpHLw6Ay/worker.rank=1.parallelly.parent=320104.4e2684175d447.pid"
[18:03:35.768]  $ rshcmd_label    : NULL
[18:03:35.768]  $ rsh_call        : NULL
[18:03:35.768]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:35.768]  $ localMachine    : logi TRUE
[18:03:35.768]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:03:35.768]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:03:35.768]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:03:35.768]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:03:35.768]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:03:35.768]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:03:35.768]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:03:35.768]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:03:35.768]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:03:35.768]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:03:35.768]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:03:35.768]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:03:35.768]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:03:35.768]  $ arguments       :List of 28
[18:03:35.768]   ..$ worker          : chr "localhost"
[18:03:35.768]   ..$ master          : NULL
[18:03:35.768]   ..$ port            : int 11623
[18:03:35.768]   ..$ connectTimeout  : num 120
[18:03:35.768]   ..$ timeout         : num 2592000
[18:03:35.768]   ..$ rscript         : NULL
[18:03:35.768]   ..$ homogeneous     : NULL
[18:03:35.768]   ..$ rscript_args    : NULL
[18:03:35.768]   ..$ rscript_envs    : NULL
[18:03:35.768]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:35.768]   ..$ rscript_startup : NULL
[18:03:35.768]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:03:35.768]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:35.768]   ..$ methods         : logi TRUE
[18:03:35.768]   ..$ socketOptions   : chr "no-delay"
[18:03:35.768]   ..$ useXDR          : logi FALSE
[18:03:35.768]   ..$ outfile         : chr "/dev/null"
[18:03:35.768]   ..$ renice          : int NA
[18:03:35.768]   ..$ rshcmd          : NULL
[18:03:35.768]   ..$ user            : NULL
[18:03:35.768]   ..$ revtunnel       : logi NA
[18:03:35.768]   ..$ rshlogfile      : NULL
[18:03:35.768]   ..$ rshopts         : NULL
[18:03:35.768]   ..$ rank            : int 1
[18:03:35.768]   ..$ manual          : logi FALSE
[18:03:35.768]   ..$ dryrun          : logi FALSE
[18:03:35.768]   ..$ quiet           : logi FALSE
[18:03:35.768]   ..$ setup_strategy  : chr "parallel"
[18:03:35.768]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:03:35.802] [local output] System call to launch all workers:
[18:03:35.802] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpHLw6Ay/worker.rank=1.parallelly.parent=320104.4e2684175d447.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11623 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:03:35.802] [local output] Starting PSOCK main server
[18:03:35.810] [local output] Workers launched
[18:03:35.811] [local output] Waiting for workers to connect back
[18:03:35.811]  - [local output] 0 workers out of 2 ready
[18:03:36.166]  - [local output] 0 workers out of 2 ready
[18:03:36.167]  - [local output] 1 workers out of 2 ready
[18:03:36.176]  - [local output] 1 workers out of 2 ready
[18:03:36.177]  - [local output] 2 workers out of 2 ready
[18:03:36.177] [local output] Launching of workers completed
[18:03:36.177] [local output] Collecting session information from workers
[18:03:36.179] [local output]  - Worker #1 of 2
[18:03:36.180] [local output]  - Worker #2 of 2
[18:03:36.180] [local output] makeClusterPSOCK() ... done
[18:03:36.198] Packages needed by the future expression (n = 0): <none>
[18:03:36.198] Packages needed by future strategies (n = 0): <none>
[18:03:36.199] {
[18:03:36.199]     {
[18:03:36.199]         {
[18:03:36.199]             ...future.startTime <- base::Sys.time()
[18:03:36.199]             {
[18:03:36.199]                 {
[18:03:36.199]                   {
[18:03:36.199]                     {
[18:03:36.199]                       base::local({
[18:03:36.199]                         has_future <- base::requireNamespace("future", 
[18:03:36.199]                           quietly = TRUE)
[18:03:36.199]                         if (has_future) {
[18:03:36.199]                           ns <- base::getNamespace("future")
[18:03:36.199]                           version <- ns[[".package"]][["version"]]
[18:03:36.199]                           if (is.null(version)) 
[18:03:36.199]                             version <- utils::packageVersion("future")
[18:03:36.199]                         }
[18:03:36.199]                         else {
[18:03:36.199]                           version <- NULL
[18:03:36.199]                         }
[18:03:36.199]                         if (!has_future || version < "1.8.0") {
[18:03:36.199]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:36.199]                             "", base::R.version$version.string), 
[18:03:36.199]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:36.199]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:36.199]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:36.199]                               "release", "version")], collapse = " "), 
[18:03:36.199]                             hostname = base::Sys.info()[["nodename"]])
[18:03:36.199]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:36.199]                             info)
[18:03:36.199]                           info <- base::paste(info, collapse = "; ")
[18:03:36.199]                           if (!has_future) {
[18:03:36.199]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:36.199]                               info)
[18:03:36.199]                           }
[18:03:36.199]                           else {
[18:03:36.199]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:36.199]                               info, version)
[18:03:36.199]                           }
[18:03:36.199]                           base::stop(msg)
[18:03:36.199]                         }
[18:03:36.199]                       })
[18:03:36.199]                     }
[18:03:36.199]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:36.199]                     base::options(mc.cores = 1L)
[18:03:36.199]                   }
[18:03:36.199]                   ...future.strategy.old <- future::plan("list")
[18:03:36.199]                   options(future.plan = NULL)
[18:03:36.199]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.199]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:36.199]                 }
[18:03:36.199]                 ...future.workdir <- getwd()
[18:03:36.199]             }
[18:03:36.199]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:36.199]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:36.199]         }
[18:03:36.199]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:36.199]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:36.199]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:36.199]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:36.199]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:36.199]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:36.199]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:36.199]             base::names(...future.oldOptions))
[18:03:36.199]     }
[18:03:36.199]     if (FALSE) {
[18:03:36.199]     }
[18:03:36.199]     else {
[18:03:36.199]         if (TRUE) {
[18:03:36.199]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:36.199]                 open = "w")
[18:03:36.199]         }
[18:03:36.199]         else {
[18:03:36.199]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:36.199]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:36.199]         }
[18:03:36.199]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:36.199]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:36.199]             base::sink(type = "output", split = FALSE)
[18:03:36.199]             base::close(...future.stdout)
[18:03:36.199]         }, add = TRUE)
[18:03:36.199]     }
[18:03:36.199]     ...future.frame <- base::sys.nframe()
[18:03:36.199]     ...future.conditions <- base::list()
[18:03:36.199]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:36.199]     if (FALSE) {
[18:03:36.199]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:36.199]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:36.199]     }
[18:03:36.199]     ...future.result <- base::tryCatch({
[18:03:36.199]         base::withCallingHandlers({
[18:03:36.199]             ...future.value <- base::withVisible(base::local({
[18:03:36.199]                 ...future.makeSendCondition <- base::local({
[18:03:36.199]                   sendCondition <- NULL
[18:03:36.199]                   function(frame = 1L) {
[18:03:36.199]                     if (is.function(sendCondition)) 
[18:03:36.199]                       return(sendCondition)
[18:03:36.199]                     ns <- getNamespace("parallel")
[18:03:36.199]                     if (exists("sendData", mode = "function", 
[18:03:36.199]                       envir = ns)) {
[18:03:36.199]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:36.199]                         envir = ns)
[18:03:36.199]                       envir <- sys.frame(frame)
[18:03:36.199]                       master <- NULL
[18:03:36.199]                       while (!identical(envir, .GlobalEnv) && 
[18:03:36.199]                         !identical(envir, emptyenv())) {
[18:03:36.199]                         if (exists("master", mode = "list", envir = envir, 
[18:03:36.199]                           inherits = FALSE)) {
[18:03:36.199]                           master <- get("master", mode = "list", 
[18:03:36.199]                             envir = envir, inherits = FALSE)
[18:03:36.199]                           if (inherits(master, c("SOCKnode", 
[18:03:36.199]                             "SOCK0node"))) {
[18:03:36.199]                             sendCondition <<- function(cond) {
[18:03:36.199]                               data <- list(type = "VALUE", value = cond, 
[18:03:36.199]                                 success = TRUE)
[18:03:36.199]                               parallel_sendData(master, data)
[18:03:36.199]                             }
[18:03:36.199]                             return(sendCondition)
[18:03:36.199]                           }
[18:03:36.199]                         }
[18:03:36.199]                         frame <- frame + 1L
[18:03:36.199]                         envir <- sys.frame(frame)
[18:03:36.199]                       }
[18:03:36.199]                     }
[18:03:36.199]                     sendCondition <<- function(cond) NULL
[18:03:36.199]                   }
[18:03:36.199]                 })
[18:03:36.199]                 withCallingHandlers({
[18:03:36.199]                   NA
[18:03:36.199]                 }, immediateCondition = function(cond) {
[18:03:36.199]                   sendCondition <- ...future.makeSendCondition()
[18:03:36.199]                   sendCondition(cond)
[18:03:36.199]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.199]                   {
[18:03:36.199]                     inherits <- base::inherits
[18:03:36.199]                     invokeRestart <- base::invokeRestart
[18:03:36.199]                     is.null <- base::is.null
[18:03:36.199]                     muffled <- FALSE
[18:03:36.199]                     if (inherits(cond, "message")) {
[18:03:36.199]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:36.199]                       if (muffled) 
[18:03:36.199]                         invokeRestart("muffleMessage")
[18:03:36.199]                     }
[18:03:36.199]                     else if (inherits(cond, "warning")) {
[18:03:36.199]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:36.199]                       if (muffled) 
[18:03:36.199]                         invokeRestart("muffleWarning")
[18:03:36.199]                     }
[18:03:36.199]                     else if (inherits(cond, "condition")) {
[18:03:36.199]                       if (!is.null(pattern)) {
[18:03:36.199]                         computeRestarts <- base::computeRestarts
[18:03:36.199]                         grepl <- base::grepl
[18:03:36.199]                         restarts <- computeRestarts(cond)
[18:03:36.199]                         for (restart in restarts) {
[18:03:36.199]                           name <- restart$name
[18:03:36.199]                           if (is.null(name)) 
[18:03:36.199]                             next
[18:03:36.199]                           if (!grepl(pattern, name)) 
[18:03:36.199]                             next
[18:03:36.199]                           invokeRestart(restart)
[18:03:36.199]                           muffled <- TRUE
[18:03:36.199]                           break
[18:03:36.199]                         }
[18:03:36.199]                       }
[18:03:36.199]                     }
[18:03:36.199]                     invisible(muffled)
[18:03:36.199]                   }
[18:03:36.199]                   muffleCondition(cond)
[18:03:36.199]                 })
[18:03:36.199]             }))
[18:03:36.199]             future::FutureResult(value = ...future.value$value, 
[18:03:36.199]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.199]                   ...future.rng), globalenv = if (FALSE) 
[18:03:36.199]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:36.199]                     ...future.globalenv.names))
[18:03:36.199]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:36.199]         }, condition = base::local({
[18:03:36.199]             c <- base::c
[18:03:36.199]             inherits <- base::inherits
[18:03:36.199]             invokeRestart <- base::invokeRestart
[18:03:36.199]             length <- base::length
[18:03:36.199]             list <- base::list
[18:03:36.199]             seq.int <- base::seq.int
[18:03:36.199]             signalCondition <- base::signalCondition
[18:03:36.199]             sys.calls <- base::sys.calls
[18:03:36.199]             `[[` <- base::`[[`
[18:03:36.199]             `+` <- base::`+`
[18:03:36.199]             `<<-` <- base::`<<-`
[18:03:36.199]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:36.199]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:36.199]                   3L)]
[18:03:36.199]             }
[18:03:36.199]             function(cond) {
[18:03:36.199]                 is_error <- inherits(cond, "error")
[18:03:36.199]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:36.199]                   NULL)
[18:03:36.199]                 if (is_error) {
[18:03:36.199]                   sessionInformation <- function() {
[18:03:36.199]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:36.199]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:36.199]                       search = base::search(), system = base::Sys.info())
[18:03:36.199]                   }
[18:03:36.199]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.199]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:36.199]                     cond$call), session = sessionInformation(), 
[18:03:36.199]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:36.199]                   signalCondition(cond)
[18:03:36.199]                 }
[18:03:36.199]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:36.199]                 "immediateCondition"))) {
[18:03:36.199]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:36.199]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.199]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:36.199]                   if (TRUE && !signal) {
[18:03:36.199]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.199]                     {
[18:03:36.199]                       inherits <- base::inherits
[18:03:36.199]                       invokeRestart <- base::invokeRestart
[18:03:36.199]                       is.null <- base::is.null
[18:03:36.199]                       muffled <- FALSE
[18:03:36.199]                       if (inherits(cond, "message")) {
[18:03:36.199]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.199]                         if (muffled) 
[18:03:36.199]                           invokeRestart("muffleMessage")
[18:03:36.199]                       }
[18:03:36.199]                       else if (inherits(cond, "warning")) {
[18:03:36.199]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.199]                         if (muffled) 
[18:03:36.199]                           invokeRestart("muffleWarning")
[18:03:36.199]                       }
[18:03:36.199]                       else if (inherits(cond, "condition")) {
[18:03:36.199]                         if (!is.null(pattern)) {
[18:03:36.199]                           computeRestarts <- base::computeRestarts
[18:03:36.199]                           grepl <- base::grepl
[18:03:36.199]                           restarts <- computeRestarts(cond)
[18:03:36.199]                           for (restart in restarts) {
[18:03:36.199]                             name <- restart$name
[18:03:36.199]                             if (is.null(name)) 
[18:03:36.199]                               next
[18:03:36.199]                             if (!grepl(pattern, name)) 
[18:03:36.199]                               next
[18:03:36.199]                             invokeRestart(restart)
[18:03:36.199]                             muffled <- TRUE
[18:03:36.199]                             break
[18:03:36.199]                           }
[18:03:36.199]                         }
[18:03:36.199]                       }
[18:03:36.199]                       invisible(muffled)
[18:03:36.199]                     }
[18:03:36.199]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.199]                   }
[18:03:36.199]                 }
[18:03:36.199]                 else {
[18:03:36.199]                   if (TRUE) {
[18:03:36.199]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.199]                     {
[18:03:36.199]                       inherits <- base::inherits
[18:03:36.199]                       invokeRestart <- base::invokeRestart
[18:03:36.199]                       is.null <- base::is.null
[18:03:36.199]                       muffled <- FALSE
[18:03:36.199]                       if (inherits(cond, "message")) {
[18:03:36.199]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.199]                         if (muffled) 
[18:03:36.199]                           invokeRestart("muffleMessage")
[18:03:36.199]                       }
[18:03:36.199]                       else if (inherits(cond, "warning")) {
[18:03:36.199]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.199]                         if (muffled) 
[18:03:36.199]                           invokeRestart("muffleWarning")
[18:03:36.199]                       }
[18:03:36.199]                       else if (inherits(cond, "condition")) {
[18:03:36.199]                         if (!is.null(pattern)) {
[18:03:36.199]                           computeRestarts <- base::computeRestarts
[18:03:36.199]                           grepl <- base::grepl
[18:03:36.199]                           restarts <- computeRestarts(cond)
[18:03:36.199]                           for (restart in restarts) {
[18:03:36.199]                             name <- restart$name
[18:03:36.199]                             if (is.null(name)) 
[18:03:36.199]                               next
[18:03:36.199]                             if (!grepl(pattern, name)) 
[18:03:36.199]                               next
[18:03:36.199]                             invokeRestart(restart)
[18:03:36.199]                             muffled <- TRUE
[18:03:36.199]                             break
[18:03:36.199]                           }
[18:03:36.199]                         }
[18:03:36.199]                       }
[18:03:36.199]                       invisible(muffled)
[18:03:36.199]                     }
[18:03:36.199]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.199]                   }
[18:03:36.199]                 }
[18:03:36.199]             }
[18:03:36.199]         }))
[18:03:36.199]     }, error = function(ex) {
[18:03:36.199]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:36.199]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.199]                 ...future.rng), started = ...future.startTime, 
[18:03:36.199]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:36.199]             version = "1.8"), class = "FutureResult")
[18:03:36.199]     }, finally = {
[18:03:36.199]         if (!identical(...future.workdir, getwd())) 
[18:03:36.199]             setwd(...future.workdir)
[18:03:36.199]         {
[18:03:36.199]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:36.199]                 ...future.oldOptions$nwarnings <- NULL
[18:03:36.199]             }
[18:03:36.199]             base::options(...future.oldOptions)
[18:03:36.199]             if (.Platform$OS.type == "windows") {
[18:03:36.199]                 old_names <- names(...future.oldEnvVars)
[18:03:36.199]                 envs <- base::Sys.getenv()
[18:03:36.199]                 names <- names(envs)
[18:03:36.199]                 common <- intersect(names, old_names)
[18:03:36.199]                 added <- setdiff(names, old_names)
[18:03:36.199]                 removed <- setdiff(old_names, names)
[18:03:36.199]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:36.199]                   envs[common]]
[18:03:36.199]                 NAMES <- toupper(changed)
[18:03:36.199]                 args <- list()
[18:03:36.199]                 for (kk in seq_along(NAMES)) {
[18:03:36.199]                   name <- changed[[kk]]
[18:03:36.199]                   NAME <- NAMES[[kk]]
[18:03:36.199]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.199]                     next
[18:03:36.199]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.199]                 }
[18:03:36.199]                 NAMES <- toupper(added)
[18:03:36.199]                 for (kk in seq_along(NAMES)) {
[18:03:36.199]                   name <- added[[kk]]
[18:03:36.199]                   NAME <- NAMES[[kk]]
[18:03:36.199]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.199]                     next
[18:03:36.199]                   args[[name]] <- ""
[18:03:36.199]                 }
[18:03:36.199]                 NAMES <- toupper(removed)
[18:03:36.199]                 for (kk in seq_along(NAMES)) {
[18:03:36.199]                   name <- removed[[kk]]
[18:03:36.199]                   NAME <- NAMES[[kk]]
[18:03:36.199]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.199]                     next
[18:03:36.199]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.199]                 }
[18:03:36.199]                 if (length(args) > 0) 
[18:03:36.199]                   base::do.call(base::Sys.setenv, args = args)
[18:03:36.199]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:36.199]             }
[18:03:36.199]             else {
[18:03:36.199]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:36.199]             }
[18:03:36.199]             {
[18:03:36.199]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:36.199]                   0L) {
[18:03:36.199]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:36.199]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:36.199]                   base::options(opts)
[18:03:36.199]                 }
[18:03:36.199]                 {
[18:03:36.199]                   {
[18:03:36.199]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:36.199]                     NULL
[18:03:36.199]                   }
[18:03:36.199]                   options(future.plan = NULL)
[18:03:36.199]                   if (is.na(NA_character_)) 
[18:03:36.199]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.199]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:36.199]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:36.199]                     .init = FALSE)
[18:03:36.199]                 }
[18:03:36.199]             }
[18:03:36.199]         }
[18:03:36.199]     })
[18:03:36.199]     if (TRUE) {
[18:03:36.199]         base::sink(type = "output", split = FALSE)
[18:03:36.199]         if (TRUE) {
[18:03:36.199]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:36.199]         }
[18:03:36.199]         else {
[18:03:36.199]             ...future.result["stdout"] <- base::list(NULL)
[18:03:36.199]         }
[18:03:36.199]         base::close(...future.stdout)
[18:03:36.199]         ...future.stdout <- NULL
[18:03:36.199]     }
[18:03:36.199]     ...future.result$conditions <- ...future.conditions
[18:03:36.199]     ...future.result$finished <- base::Sys.time()
[18:03:36.199]     ...future.result
[18:03:36.199] }
[18:03:36.299] MultisessionFuture started
[18:03:36.300] result() for ClusterFuture ...
[18:03:36.301] receiveMessageFromWorker() for ClusterFuture ...
[18:03:36.301] - Validating connection of MultisessionFuture
[18:03:36.365] - received message: FutureResult
[18:03:36.366] - Received FutureResult
[18:03:36.366] - Erased future from FutureRegistry
[18:03:36.366] result() for ClusterFuture ...
[18:03:36.366] - result already collected: FutureResult
[18:03:36.367] result() for ClusterFuture ... done
[18:03:36.367] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:36.367] result() for ClusterFuture ... done
[18:03:36.367] result() for ClusterFuture ...
[18:03:36.367] - result already collected: FutureResult
[18:03:36.368] result() for ClusterFuture ... done
[18:03:36.368] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:03:36.374] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[18:03:36.382] getGlobalsAndPackages() ...
[18:03:36.382] Searching for globals...
[18:03:36.389] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:36.389] Searching for globals ... DONE
[18:03:36.390] Resolving globals: FALSE
[18:03:36.391] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:36.391] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:36.392] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:36.392] - packages: [1] ‘future’
[18:03:36.392] getGlobalsAndPackages() ... DONE
 2[18:03:36.400] getGlobalsAndPackages() ...
[18:03:36.400] Searching for globals...
[18:03:36.408] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:36.408] Searching for globals ... DONE
[18:03:36.408] Resolving globals: FALSE
[18:03:36.409] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:36.410] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:36.410] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:36.411] - packages: [1] ‘future’
[18:03:36.411] getGlobalsAndPackages() ... DONE
 3[18:03:36.411] getGlobalsAndPackages() ...
[18:03:36.412] Searching for globals...
[18:03:36.419] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:36.419] Searching for globals ... DONE
[18:03:36.419] Resolving globals: FALSE
[18:03:36.420] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:36.421] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:36.421] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:36.421] - packages: [1] ‘future’
[18:03:36.422] getGlobalsAndPackages() ... DONE
 4[18:03:36.422] getGlobalsAndPackages() ...
[18:03:36.423] Searching for globals...
[18:03:36.429] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[18:03:36.430] Searching for globals ... DONE
[18:03:36.430] Resolving globals: FALSE
[18:03:36.431] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[18:03:36.432] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[18:03:36.432] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[18:03:36.432] - packages: [1] ‘future’
[18:03:36.433] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[18:03:36.454] resolved() for ‘Future’ ...
[18:03:36.454] - state: ‘created’
[18:03:36.454] - run: TRUE
[18:03:36.454] - run() ...
[18:03:36.454] run() for ‘Future’ ...
[18:03:36.455] - state: ‘created’
[18:03:36.455] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:36.478] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:36.478] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:36.478]   - Field: ‘node’
[18:03:36.478]   - Field: ‘label’
[18:03:36.479]   - Field: ‘local’
[18:03:36.479]   - Field: ‘owner’
[18:03:36.479]   - Field: ‘envir’
[18:03:36.479]   - Field: ‘workers’
[18:03:36.479]   - Field: ‘packages’
[18:03:36.480]   - Field: ‘gc’
[18:03:36.480]   - Field: ‘conditions’
[18:03:36.480]   - Field: ‘persistent’
[18:03:36.480]   - Field: ‘expr’
[18:03:36.480]   - Field: ‘uuid’
[18:03:36.480]   - Field: ‘seed’
[18:03:36.481]   - Field: ‘version’
[18:03:36.481]   - Field: ‘result’
[18:03:36.481]   - Field: ‘asynchronous’
[18:03:36.481]   - Field: ‘calls’
[18:03:36.481]   - Field: ‘globals’
[18:03:36.482]   - Field: ‘stdout’
[18:03:36.482]   - Field: ‘earlySignal’
[18:03:36.482]   - Field: ‘lazy’
[18:03:36.482]   - Field: ‘state’
[18:03:36.482] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:36.483] - Launch lazy future ...
[18:03:36.483] Packages needed by the future expression (n = 1): ‘future’
[18:03:36.483] Packages needed by future strategies (n = 0): <none>
[18:03:36.484] {
[18:03:36.484]     {
[18:03:36.484]         {
[18:03:36.484]             ...future.startTime <- base::Sys.time()
[18:03:36.484]             {
[18:03:36.484]                 {
[18:03:36.484]                   {
[18:03:36.484]                     {
[18:03:36.484]                       {
[18:03:36.484]                         base::local({
[18:03:36.484]                           has_future <- base::requireNamespace("future", 
[18:03:36.484]                             quietly = TRUE)
[18:03:36.484]                           if (has_future) {
[18:03:36.484]                             ns <- base::getNamespace("future")
[18:03:36.484]                             version <- ns[[".package"]][["version"]]
[18:03:36.484]                             if (is.null(version)) 
[18:03:36.484]                               version <- utils::packageVersion("future")
[18:03:36.484]                           }
[18:03:36.484]                           else {
[18:03:36.484]                             version <- NULL
[18:03:36.484]                           }
[18:03:36.484]                           if (!has_future || version < "1.8.0") {
[18:03:36.484]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:36.484]                               "", base::R.version$version.string), 
[18:03:36.484]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:36.484]                                 base::R.version$platform, 8 * 
[18:03:36.484]                                   base::.Machine$sizeof.pointer), 
[18:03:36.484]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:36.484]                                 "release", "version")], collapse = " "), 
[18:03:36.484]                               hostname = base::Sys.info()[["nodename"]])
[18:03:36.484]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:36.484]                               info)
[18:03:36.484]                             info <- base::paste(info, collapse = "; ")
[18:03:36.484]                             if (!has_future) {
[18:03:36.484]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:36.484]                                 info)
[18:03:36.484]                             }
[18:03:36.484]                             else {
[18:03:36.484]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:36.484]                                 info, version)
[18:03:36.484]                             }
[18:03:36.484]                             base::stop(msg)
[18:03:36.484]                           }
[18:03:36.484]                         })
[18:03:36.484]                       }
[18:03:36.484]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:36.484]                       base::options(mc.cores = 1L)
[18:03:36.484]                     }
[18:03:36.484]                     base::local({
[18:03:36.484]                       for (pkg in "future") {
[18:03:36.484]                         base::loadNamespace(pkg)
[18:03:36.484]                         base::library(pkg, character.only = TRUE)
[18:03:36.484]                       }
[18:03:36.484]                     })
[18:03:36.484]                   }
[18:03:36.484]                   ...future.strategy.old <- future::plan("list")
[18:03:36.484]                   options(future.plan = NULL)
[18:03:36.484]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.484]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:36.484]                 }
[18:03:36.484]                 ...future.workdir <- getwd()
[18:03:36.484]             }
[18:03:36.484]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:36.484]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:36.484]         }
[18:03:36.484]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:36.484]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:36.484]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:36.484]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:36.484]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:36.484]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:36.484]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:36.484]             base::names(...future.oldOptions))
[18:03:36.484]     }
[18:03:36.484]     if (FALSE) {
[18:03:36.484]     }
[18:03:36.484]     else {
[18:03:36.484]         if (TRUE) {
[18:03:36.484]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:36.484]                 open = "w")
[18:03:36.484]         }
[18:03:36.484]         else {
[18:03:36.484]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:36.484]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:36.484]         }
[18:03:36.484]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:36.484]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:36.484]             base::sink(type = "output", split = FALSE)
[18:03:36.484]             base::close(...future.stdout)
[18:03:36.484]         }, add = TRUE)
[18:03:36.484]     }
[18:03:36.484]     ...future.frame <- base::sys.nframe()
[18:03:36.484]     ...future.conditions <- base::list()
[18:03:36.484]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:36.484]     if (FALSE) {
[18:03:36.484]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:36.484]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:36.484]     }
[18:03:36.484]     ...future.result <- base::tryCatch({
[18:03:36.484]         base::withCallingHandlers({
[18:03:36.484]             ...future.value <- base::withVisible(base::local({
[18:03:36.484]                 ...future.makeSendCondition <- base::local({
[18:03:36.484]                   sendCondition <- NULL
[18:03:36.484]                   function(frame = 1L) {
[18:03:36.484]                     if (is.function(sendCondition)) 
[18:03:36.484]                       return(sendCondition)
[18:03:36.484]                     ns <- getNamespace("parallel")
[18:03:36.484]                     if (exists("sendData", mode = "function", 
[18:03:36.484]                       envir = ns)) {
[18:03:36.484]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:36.484]                         envir = ns)
[18:03:36.484]                       envir <- sys.frame(frame)
[18:03:36.484]                       master <- NULL
[18:03:36.484]                       while (!identical(envir, .GlobalEnv) && 
[18:03:36.484]                         !identical(envir, emptyenv())) {
[18:03:36.484]                         if (exists("master", mode = "list", envir = envir, 
[18:03:36.484]                           inherits = FALSE)) {
[18:03:36.484]                           master <- get("master", mode = "list", 
[18:03:36.484]                             envir = envir, inherits = FALSE)
[18:03:36.484]                           if (inherits(master, c("SOCKnode", 
[18:03:36.484]                             "SOCK0node"))) {
[18:03:36.484]                             sendCondition <<- function(cond) {
[18:03:36.484]                               data <- list(type = "VALUE", value = cond, 
[18:03:36.484]                                 success = TRUE)
[18:03:36.484]                               parallel_sendData(master, data)
[18:03:36.484]                             }
[18:03:36.484]                             return(sendCondition)
[18:03:36.484]                           }
[18:03:36.484]                         }
[18:03:36.484]                         frame <- frame + 1L
[18:03:36.484]                         envir <- sys.frame(frame)
[18:03:36.484]                       }
[18:03:36.484]                     }
[18:03:36.484]                     sendCondition <<- function(cond) NULL
[18:03:36.484]                   }
[18:03:36.484]                 })
[18:03:36.484]                 withCallingHandlers({
[18:03:36.484]                   {
[18:03:36.484]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:36.484]                       ii, n), appendLF = FALSE)
[18:03:36.484]                     fit <- mandelbrot(C)
[18:03:36.484]                     delay(fit)
[18:03:36.484]                     message(" done")
[18:03:36.484]                     fit
[18:03:36.484]                   }
[18:03:36.484]                 }, immediateCondition = function(cond) {
[18:03:36.484]                   sendCondition <- ...future.makeSendCondition()
[18:03:36.484]                   sendCondition(cond)
[18:03:36.484]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.484]                   {
[18:03:36.484]                     inherits <- base::inherits
[18:03:36.484]                     invokeRestart <- base::invokeRestart
[18:03:36.484]                     is.null <- base::is.null
[18:03:36.484]                     muffled <- FALSE
[18:03:36.484]                     if (inherits(cond, "message")) {
[18:03:36.484]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:36.484]                       if (muffled) 
[18:03:36.484]                         invokeRestart("muffleMessage")
[18:03:36.484]                     }
[18:03:36.484]                     else if (inherits(cond, "warning")) {
[18:03:36.484]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:36.484]                       if (muffled) 
[18:03:36.484]                         invokeRestart("muffleWarning")
[18:03:36.484]                     }
[18:03:36.484]                     else if (inherits(cond, "condition")) {
[18:03:36.484]                       if (!is.null(pattern)) {
[18:03:36.484]                         computeRestarts <- base::computeRestarts
[18:03:36.484]                         grepl <- base::grepl
[18:03:36.484]                         restarts <- computeRestarts(cond)
[18:03:36.484]                         for (restart in restarts) {
[18:03:36.484]                           name <- restart$name
[18:03:36.484]                           if (is.null(name)) 
[18:03:36.484]                             next
[18:03:36.484]                           if (!grepl(pattern, name)) 
[18:03:36.484]                             next
[18:03:36.484]                           invokeRestart(restart)
[18:03:36.484]                           muffled <- TRUE
[18:03:36.484]                           break
[18:03:36.484]                         }
[18:03:36.484]                       }
[18:03:36.484]                     }
[18:03:36.484]                     invisible(muffled)
[18:03:36.484]                   }
[18:03:36.484]                   muffleCondition(cond)
[18:03:36.484]                 })
[18:03:36.484]             }))
[18:03:36.484]             future::FutureResult(value = ...future.value$value, 
[18:03:36.484]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.484]                   ...future.rng), globalenv = if (FALSE) 
[18:03:36.484]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:36.484]                     ...future.globalenv.names))
[18:03:36.484]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:36.484]         }, condition = base::local({
[18:03:36.484]             c <- base::c
[18:03:36.484]             inherits <- base::inherits
[18:03:36.484]             invokeRestart <- base::invokeRestart
[18:03:36.484]             length <- base::length
[18:03:36.484]             list <- base::list
[18:03:36.484]             seq.int <- base::seq.int
[18:03:36.484]             signalCondition <- base::signalCondition
[18:03:36.484]             sys.calls <- base::sys.calls
[18:03:36.484]             `[[` <- base::`[[`
[18:03:36.484]             `+` <- base::`+`
[18:03:36.484]             `<<-` <- base::`<<-`
[18:03:36.484]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:36.484]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:36.484]                   3L)]
[18:03:36.484]             }
[18:03:36.484]             function(cond) {
[18:03:36.484]                 is_error <- inherits(cond, "error")
[18:03:36.484]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:36.484]                   NULL)
[18:03:36.484]                 if (is_error) {
[18:03:36.484]                   sessionInformation <- function() {
[18:03:36.484]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:36.484]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:36.484]                       search = base::search(), system = base::Sys.info())
[18:03:36.484]                   }
[18:03:36.484]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.484]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:36.484]                     cond$call), session = sessionInformation(), 
[18:03:36.484]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:36.484]                   signalCondition(cond)
[18:03:36.484]                 }
[18:03:36.484]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:36.484]                 "immediateCondition"))) {
[18:03:36.484]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:36.484]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.484]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:36.484]                   if (TRUE && !signal) {
[18:03:36.484]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.484]                     {
[18:03:36.484]                       inherits <- base::inherits
[18:03:36.484]                       invokeRestart <- base::invokeRestart
[18:03:36.484]                       is.null <- base::is.null
[18:03:36.484]                       muffled <- FALSE
[18:03:36.484]                       if (inherits(cond, "message")) {
[18:03:36.484]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.484]                         if (muffled) 
[18:03:36.484]                           invokeRestart("muffleMessage")
[18:03:36.484]                       }
[18:03:36.484]                       else if (inherits(cond, "warning")) {
[18:03:36.484]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.484]                         if (muffled) 
[18:03:36.484]                           invokeRestart("muffleWarning")
[18:03:36.484]                       }
[18:03:36.484]                       else if (inherits(cond, "condition")) {
[18:03:36.484]                         if (!is.null(pattern)) {
[18:03:36.484]                           computeRestarts <- base::computeRestarts
[18:03:36.484]                           grepl <- base::grepl
[18:03:36.484]                           restarts <- computeRestarts(cond)
[18:03:36.484]                           for (restart in restarts) {
[18:03:36.484]                             name <- restart$name
[18:03:36.484]                             if (is.null(name)) 
[18:03:36.484]                               next
[18:03:36.484]                             if (!grepl(pattern, name)) 
[18:03:36.484]                               next
[18:03:36.484]                             invokeRestart(restart)
[18:03:36.484]                             muffled <- TRUE
[18:03:36.484]                             break
[18:03:36.484]                           }
[18:03:36.484]                         }
[18:03:36.484]                       }
[18:03:36.484]                       invisible(muffled)
[18:03:36.484]                     }
[18:03:36.484]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.484]                   }
[18:03:36.484]                 }
[18:03:36.484]                 else {
[18:03:36.484]                   if (TRUE) {
[18:03:36.484]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.484]                     {
[18:03:36.484]                       inherits <- base::inherits
[18:03:36.484]                       invokeRestart <- base::invokeRestart
[18:03:36.484]                       is.null <- base::is.null
[18:03:36.484]                       muffled <- FALSE
[18:03:36.484]                       if (inherits(cond, "message")) {
[18:03:36.484]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.484]                         if (muffled) 
[18:03:36.484]                           invokeRestart("muffleMessage")
[18:03:36.484]                       }
[18:03:36.484]                       else if (inherits(cond, "warning")) {
[18:03:36.484]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.484]                         if (muffled) 
[18:03:36.484]                           invokeRestart("muffleWarning")
[18:03:36.484]                       }
[18:03:36.484]                       else if (inherits(cond, "condition")) {
[18:03:36.484]                         if (!is.null(pattern)) {
[18:03:36.484]                           computeRestarts <- base::computeRestarts
[18:03:36.484]                           grepl <- base::grepl
[18:03:36.484]                           restarts <- computeRestarts(cond)
[18:03:36.484]                           for (restart in restarts) {
[18:03:36.484]                             name <- restart$name
[18:03:36.484]                             if (is.null(name)) 
[18:03:36.484]                               next
[18:03:36.484]                             if (!grepl(pattern, name)) 
[18:03:36.484]                               next
[18:03:36.484]                             invokeRestart(restart)
[18:03:36.484]                             muffled <- TRUE
[18:03:36.484]                             break
[18:03:36.484]                           }
[18:03:36.484]                         }
[18:03:36.484]                       }
[18:03:36.484]                       invisible(muffled)
[18:03:36.484]                     }
[18:03:36.484]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.484]                   }
[18:03:36.484]                 }
[18:03:36.484]             }
[18:03:36.484]         }))
[18:03:36.484]     }, error = function(ex) {
[18:03:36.484]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:36.484]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.484]                 ...future.rng), started = ...future.startTime, 
[18:03:36.484]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:36.484]             version = "1.8"), class = "FutureResult")
[18:03:36.484]     }, finally = {
[18:03:36.484]         if (!identical(...future.workdir, getwd())) 
[18:03:36.484]             setwd(...future.workdir)
[18:03:36.484]         {
[18:03:36.484]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:36.484]                 ...future.oldOptions$nwarnings <- NULL
[18:03:36.484]             }
[18:03:36.484]             base::options(...future.oldOptions)
[18:03:36.484]             if (.Platform$OS.type == "windows") {
[18:03:36.484]                 old_names <- names(...future.oldEnvVars)
[18:03:36.484]                 envs <- base::Sys.getenv()
[18:03:36.484]                 names <- names(envs)
[18:03:36.484]                 common <- intersect(names, old_names)
[18:03:36.484]                 added <- setdiff(names, old_names)
[18:03:36.484]                 removed <- setdiff(old_names, names)
[18:03:36.484]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:36.484]                   envs[common]]
[18:03:36.484]                 NAMES <- toupper(changed)
[18:03:36.484]                 args <- list()
[18:03:36.484]                 for (kk in seq_along(NAMES)) {
[18:03:36.484]                   name <- changed[[kk]]
[18:03:36.484]                   NAME <- NAMES[[kk]]
[18:03:36.484]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.484]                     next
[18:03:36.484]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.484]                 }
[18:03:36.484]                 NAMES <- toupper(added)
[18:03:36.484]                 for (kk in seq_along(NAMES)) {
[18:03:36.484]                   name <- added[[kk]]
[18:03:36.484]                   NAME <- NAMES[[kk]]
[18:03:36.484]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.484]                     next
[18:03:36.484]                   args[[name]] <- ""
[18:03:36.484]                 }
[18:03:36.484]                 NAMES <- toupper(removed)
[18:03:36.484]                 for (kk in seq_along(NAMES)) {
[18:03:36.484]                   name <- removed[[kk]]
[18:03:36.484]                   NAME <- NAMES[[kk]]
[18:03:36.484]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.484]                     next
[18:03:36.484]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.484]                 }
[18:03:36.484]                 if (length(args) > 0) 
[18:03:36.484]                   base::do.call(base::Sys.setenv, args = args)
[18:03:36.484]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:36.484]             }
[18:03:36.484]             else {
[18:03:36.484]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:36.484]             }
[18:03:36.484]             {
[18:03:36.484]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:36.484]                   0L) {
[18:03:36.484]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:36.484]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:36.484]                   base::options(opts)
[18:03:36.484]                 }
[18:03:36.484]                 {
[18:03:36.484]                   {
[18:03:36.484]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:36.484]                     NULL
[18:03:36.484]                   }
[18:03:36.484]                   options(future.plan = NULL)
[18:03:36.484]                   if (is.na(NA_character_)) 
[18:03:36.484]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.484]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:36.484]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:36.484]                     .init = FALSE)
[18:03:36.484]                 }
[18:03:36.484]             }
[18:03:36.484]         }
[18:03:36.484]     })
[18:03:36.484]     if (TRUE) {
[18:03:36.484]         base::sink(type = "output", split = FALSE)
[18:03:36.484]         if (TRUE) {
[18:03:36.484]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:36.484]         }
[18:03:36.484]         else {
[18:03:36.484]             ...future.result["stdout"] <- base::list(NULL)
[18:03:36.484]         }
[18:03:36.484]         base::close(...future.stdout)
[18:03:36.484]         ...future.stdout <- NULL
[18:03:36.484]     }
[18:03:36.484]     ...future.result$conditions <- ...future.conditions
[18:03:36.484]     ...future.result$finished <- base::Sys.time()
[18:03:36.484]     ...future.result
[18:03:36.484] }
[18:03:36.489] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[18:03:36.490] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[18:03:36.490] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[18:03:36.491] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[18:03:36.491] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[18:03:36.492] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[18:03:36.533] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[18:03:36.534] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[18:03:36.576] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[18:03:36.576] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[18:03:36.577] MultisessionFuture started
[18:03:36.577] - Launch lazy future ... done
[18:03:36.578] run() for ‘MultisessionFuture’ ... done
[18:03:36.578] - run() ... done
[18:03:36.578] - resolved() ...
[18:03:36.590] - resolved: FALSE
[18:03:36.590] - resolved() ... done
[18:03:36.590] resolved() for ‘MultisessionFuture’ ... done
[18:03:36.591] resolved() for ‘Future’ ...
[18:03:36.591] - state: ‘created’
[18:03:36.591] - run: TRUE
[18:03:36.591] - run() ...
[18:03:36.592] run() for ‘Future’ ...
[18:03:36.592] - state: ‘created’
[18:03:36.592] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:36.619] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:36.619] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:36.619]   - Field: ‘node’
[18:03:36.620]   - Field: ‘label’
[18:03:36.620]   - Field: ‘local’
[18:03:36.620]   - Field: ‘owner’
[18:03:36.620]   - Field: ‘envir’
[18:03:36.621]   - Field: ‘workers’
[18:03:36.621]   - Field: ‘packages’
[18:03:36.621]   - Field: ‘gc’
[18:03:36.621]   - Field: ‘conditions’
[18:03:36.622]   - Field: ‘persistent’
[18:03:36.622]   - Field: ‘expr’
[18:03:36.622]   - Field: ‘uuid’
[18:03:36.622]   - Field: ‘seed’
[18:03:36.623]   - Field: ‘version’
[18:03:36.623]   - Field: ‘result’
[18:03:36.623]   - Field: ‘asynchronous’
[18:03:36.623]   - Field: ‘calls’
[18:03:36.624]   - Field: ‘globals’
[18:03:36.624]   - Field: ‘stdout’
[18:03:36.624]   - Field: ‘earlySignal’
[18:03:36.624]   - Field: ‘lazy’
[18:03:36.625]   - Field: ‘state’
[18:03:36.625] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:36.625] - Launch lazy future ...
[18:03:36.626] Packages needed by the future expression (n = 1): ‘future’
[18:03:36.626] Packages needed by future strategies (n = 0): <none>
[18:03:36.627] {
[18:03:36.627]     {
[18:03:36.627]         {
[18:03:36.627]             ...future.startTime <- base::Sys.time()
[18:03:36.627]             {
[18:03:36.627]                 {
[18:03:36.627]                   {
[18:03:36.627]                     {
[18:03:36.627]                       {
[18:03:36.627]                         base::local({
[18:03:36.627]                           has_future <- base::requireNamespace("future", 
[18:03:36.627]                             quietly = TRUE)
[18:03:36.627]                           if (has_future) {
[18:03:36.627]                             ns <- base::getNamespace("future")
[18:03:36.627]                             version <- ns[[".package"]][["version"]]
[18:03:36.627]                             if (is.null(version)) 
[18:03:36.627]                               version <- utils::packageVersion("future")
[18:03:36.627]                           }
[18:03:36.627]                           else {
[18:03:36.627]                             version <- NULL
[18:03:36.627]                           }
[18:03:36.627]                           if (!has_future || version < "1.8.0") {
[18:03:36.627]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:36.627]                               "", base::R.version$version.string), 
[18:03:36.627]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:36.627]                                 base::R.version$platform, 8 * 
[18:03:36.627]                                   base::.Machine$sizeof.pointer), 
[18:03:36.627]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:36.627]                                 "release", "version")], collapse = " "), 
[18:03:36.627]                               hostname = base::Sys.info()[["nodename"]])
[18:03:36.627]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:36.627]                               info)
[18:03:36.627]                             info <- base::paste(info, collapse = "; ")
[18:03:36.627]                             if (!has_future) {
[18:03:36.627]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:36.627]                                 info)
[18:03:36.627]                             }
[18:03:36.627]                             else {
[18:03:36.627]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:36.627]                                 info, version)
[18:03:36.627]                             }
[18:03:36.627]                             base::stop(msg)
[18:03:36.627]                           }
[18:03:36.627]                         })
[18:03:36.627]                       }
[18:03:36.627]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:36.627]                       base::options(mc.cores = 1L)
[18:03:36.627]                     }
[18:03:36.627]                     base::local({
[18:03:36.627]                       for (pkg in "future") {
[18:03:36.627]                         base::loadNamespace(pkg)
[18:03:36.627]                         base::library(pkg, character.only = TRUE)
[18:03:36.627]                       }
[18:03:36.627]                     })
[18:03:36.627]                   }
[18:03:36.627]                   ...future.strategy.old <- future::plan("list")
[18:03:36.627]                   options(future.plan = NULL)
[18:03:36.627]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.627]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:36.627]                 }
[18:03:36.627]                 ...future.workdir <- getwd()
[18:03:36.627]             }
[18:03:36.627]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:36.627]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:36.627]         }
[18:03:36.627]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:36.627]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:36.627]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:36.627]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:36.627]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:36.627]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:36.627]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:36.627]             base::names(...future.oldOptions))
[18:03:36.627]     }
[18:03:36.627]     if (FALSE) {
[18:03:36.627]     }
[18:03:36.627]     else {
[18:03:36.627]         if (TRUE) {
[18:03:36.627]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:36.627]                 open = "w")
[18:03:36.627]         }
[18:03:36.627]         else {
[18:03:36.627]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:36.627]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:36.627]         }
[18:03:36.627]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:36.627]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:36.627]             base::sink(type = "output", split = FALSE)
[18:03:36.627]             base::close(...future.stdout)
[18:03:36.627]         }, add = TRUE)
[18:03:36.627]     }
[18:03:36.627]     ...future.frame <- base::sys.nframe()
[18:03:36.627]     ...future.conditions <- base::list()
[18:03:36.627]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:36.627]     if (FALSE) {
[18:03:36.627]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:36.627]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:36.627]     }
[18:03:36.627]     ...future.result <- base::tryCatch({
[18:03:36.627]         base::withCallingHandlers({
[18:03:36.627]             ...future.value <- base::withVisible(base::local({
[18:03:36.627]                 ...future.makeSendCondition <- base::local({
[18:03:36.627]                   sendCondition <- NULL
[18:03:36.627]                   function(frame = 1L) {
[18:03:36.627]                     if (is.function(sendCondition)) 
[18:03:36.627]                       return(sendCondition)
[18:03:36.627]                     ns <- getNamespace("parallel")
[18:03:36.627]                     if (exists("sendData", mode = "function", 
[18:03:36.627]                       envir = ns)) {
[18:03:36.627]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:36.627]                         envir = ns)
[18:03:36.627]                       envir <- sys.frame(frame)
[18:03:36.627]                       master <- NULL
[18:03:36.627]                       while (!identical(envir, .GlobalEnv) && 
[18:03:36.627]                         !identical(envir, emptyenv())) {
[18:03:36.627]                         if (exists("master", mode = "list", envir = envir, 
[18:03:36.627]                           inherits = FALSE)) {
[18:03:36.627]                           master <- get("master", mode = "list", 
[18:03:36.627]                             envir = envir, inherits = FALSE)
[18:03:36.627]                           if (inherits(master, c("SOCKnode", 
[18:03:36.627]                             "SOCK0node"))) {
[18:03:36.627]                             sendCondition <<- function(cond) {
[18:03:36.627]                               data <- list(type = "VALUE", value = cond, 
[18:03:36.627]                                 success = TRUE)
[18:03:36.627]                               parallel_sendData(master, data)
[18:03:36.627]                             }
[18:03:36.627]                             return(sendCondition)
[18:03:36.627]                           }
[18:03:36.627]                         }
[18:03:36.627]                         frame <- frame + 1L
[18:03:36.627]                         envir <- sys.frame(frame)
[18:03:36.627]                       }
[18:03:36.627]                     }
[18:03:36.627]                     sendCondition <<- function(cond) NULL
[18:03:36.627]                   }
[18:03:36.627]                 })
[18:03:36.627]                 withCallingHandlers({
[18:03:36.627]                   {
[18:03:36.627]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:36.627]                       ii, n), appendLF = FALSE)
[18:03:36.627]                     fit <- mandelbrot(C)
[18:03:36.627]                     delay(fit)
[18:03:36.627]                     message(" done")
[18:03:36.627]                     fit
[18:03:36.627]                   }
[18:03:36.627]                 }, immediateCondition = function(cond) {
[18:03:36.627]                   sendCondition <- ...future.makeSendCondition()
[18:03:36.627]                   sendCondition(cond)
[18:03:36.627]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.627]                   {
[18:03:36.627]                     inherits <- base::inherits
[18:03:36.627]                     invokeRestart <- base::invokeRestart
[18:03:36.627]                     is.null <- base::is.null
[18:03:36.627]                     muffled <- FALSE
[18:03:36.627]                     if (inherits(cond, "message")) {
[18:03:36.627]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:36.627]                       if (muffled) 
[18:03:36.627]                         invokeRestart("muffleMessage")
[18:03:36.627]                     }
[18:03:36.627]                     else if (inherits(cond, "warning")) {
[18:03:36.627]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:36.627]                       if (muffled) 
[18:03:36.627]                         invokeRestart("muffleWarning")
[18:03:36.627]                     }
[18:03:36.627]                     else if (inherits(cond, "condition")) {
[18:03:36.627]                       if (!is.null(pattern)) {
[18:03:36.627]                         computeRestarts <- base::computeRestarts
[18:03:36.627]                         grepl <- base::grepl
[18:03:36.627]                         restarts <- computeRestarts(cond)
[18:03:36.627]                         for (restart in restarts) {
[18:03:36.627]                           name <- restart$name
[18:03:36.627]                           if (is.null(name)) 
[18:03:36.627]                             next
[18:03:36.627]                           if (!grepl(pattern, name)) 
[18:03:36.627]                             next
[18:03:36.627]                           invokeRestart(restart)
[18:03:36.627]                           muffled <- TRUE
[18:03:36.627]                           break
[18:03:36.627]                         }
[18:03:36.627]                       }
[18:03:36.627]                     }
[18:03:36.627]                     invisible(muffled)
[18:03:36.627]                   }
[18:03:36.627]                   muffleCondition(cond)
[18:03:36.627]                 })
[18:03:36.627]             }))
[18:03:36.627]             future::FutureResult(value = ...future.value$value, 
[18:03:36.627]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.627]                   ...future.rng), globalenv = if (FALSE) 
[18:03:36.627]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:36.627]                     ...future.globalenv.names))
[18:03:36.627]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:36.627]         }, condition = base::local({
[18:03:36.627]             c <- base::c
[18:03:36.627]             inherits <- base::inherits
[18:03:36.627]             invokeRestart <- base::invokeRestart
[18:03:36.627]             length <- base::length
[18:03:36.627]             list <- base::list
[18:03:36.627]             seq.int <- base::seq.int
[18:03:36.627]             signalCondition <- base::signalCondition
[18:03:36.627]             sys.calls <- base::sys.calls
[18:03:36.627]             `[[` <- base::`[[`
[18:03:36.627]             `+` <- base::`+`
[18:03:36.627]             `<<-` <- base::`<<-`
[18:03:36.627]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:36.627]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:36.627]                   3L)]
[18:03:36.627]             }
[18:03:36.627]             function(cond) {
[18:03:36.627]                 is_error <- inherits(cond, "error")
[18:03:36.627]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:36.627]                   NULL)
[18:03:36.627]                 if (is_error) {
[18:03:36.627]                   sessionInformation <- function() {
[18:03:36.627]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:36.627]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:36.627]                       search = base::search(), system = base::Sys.info())
[18:03:36.627]                   }
[18:03:36.627]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.627]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:36.627]                     cond$call), session = sessionInformation(), 
[18:03:36.627]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:36.627]                   signalCondition(cond)
[18:03:36.627]                 }
[18:03:36.627]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:36.627]                 "immediateCondition"))) {
[18:03:36.627]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:36.627]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.627]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:36.627]                   if (TRUE && !signal) {
[18:03:36.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.627]                     {
[18:03:36.627]                       inherits <- base::inherits
[18:03:36.627]                       invokeRestart <- base::invokeRestart
[18:03:36.627]                       is.null <- base::is.null
[18:03:36.627]                       muffled <- FALSE
[18:03:36.627]                       if (inherits(cond, "message")) {
[18:03:36.627]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.627]                         if (muffled) 
[18:03:36.627]                           invokeRestart("muffleMessage")
[18:03:36.627]                       }
[18:03:36.627]                       else if (inherits(cond, "warning")) {
[18:03:36.627]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.627]                         if (muffled) 
[18:03:36.627]                           invokeRestart("muffleWarning")
[18:03:36.627]                       }
[18:03:36.627]                       else if (inherits(cond, "condition")) {
[18:03:36.627]                         if (!is.null(pattern)) {
[18:03:36.627]                           computeRestarts <- base::computeRestarts
[18:03:36.627]                           grepl <- base::grepl
[18:03:36.627]                           restarts <- computeRestarts(cond)
[18:03:36.627]                           for (restart in restarts) {
[18:03:36.627]                             name <- restart$name
[18:03:36.627]                             if (is.null(name)) 
[18:03:36.627]                               next
[18:03:36.627]                             if (!grepl(pattern, name)) 
[18:03:36.627]                               next
[18:03:36.627]                             invokeRestart(restart)
[18:03:36.627]                             muffled <- TRUE
[18:03:36.627]                             break
[18:03:36.627]                           }
[18:03:36.627]                         }
[18:03:36.627]                       }
[18:03:36.627]                       invisible(muffled)
[18:03:36.627]                     }
[18:03:36.627]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.627]                   }
[18:03:36.627]                 }
[18:03:36.627]                 else {
[18:03:36.627]                   if (TRUE) {
[18:03:36.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.627]                     {
[18:03:36.627]                       inherits <- base::inherits
[18:03:36.627]                       invokeRestart <- base::invokeRestart
[18:03:36.627]                       is.null <- base::is.null
[18:03:36.627]                       muffled <- FALSE
[18:03:36.627]                       if (inherits(cond, "message")) {
[18:03:36.627]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.627]                         if (muffled) 
[18:03:36.627]                           invokeRestart("muffleMessage")
[18:03:36.627]                       }
[18:03:36.627]                       else if (inherits(cond, "warning")) {
[18:03:36.627]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.627]                         if (muffled) 
[18:03:36.627]                           invokeRestart("muffleWarning")
[18:03:36.627]                       }
[18:03:36.627]                       else if (inherits(cond, "condition")) {
[18:03:36.627]                         if (!is.null(pattern)) {
[18:03:36.627]                           computeRestarts <- base::computeRestarts
[18:03:36.627]                           grepl <- base::grepl
[18:03:36.627]                           restarts <- computeRestarts(cond)
[18:03:36.627]                           for (restart in restarts) {
[18:03:36.627]                             name <- restart$name
[18:03:36.627]                             if (is.null(name)) 
[18:03:36.627]                               next
[18:03:36.627]                             if (!grepl(pattern, name)) 
[18:03:36.627]                               next
[18:03:36.627]                             invokeRestart(restart)
[18:03:36.627]                             muffled <- TRUE
[18:03:36.627]                             break
[18:03:36.627]                           }
[18:03:36.627]                         }
[18:03:36.627]                       }
[18:03:36.627]                       invisible(muffled)
[18:03:36.627]                     }
[18:03:36.627]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.627]                   }
[18:03:36.627]                 }
[18:03:36.627]             }
[18:03:36.627]         }))
[18:03:36.627]     }, error = function(ex) {
[18:03:36.627]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:36.627]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.627]                 ...future.rng), started = ...future.startTime, 
[18:03:36.627]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:36.627]             version = "1.8"), class = "FutureResult")
[18:03:36.627]     }, finally = {
[18:03:36.627]         if (!identical(...future.workdir, getwd())) 
[18:03:36.627]             setwd(...future.workdir)
[18:03:36.627]         {
[18:03:36.627]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:36.627]                 ...future.oldOptions$nwarnings <- NULL
[18:03:36.627]             }
[18:03:36.627]             base::options(...future.oldOptions)
[18:03:36.627]             if (.Platform$OS.type == "windows") {
[18:03:36.627]                 old_names <- names(...future.oldEnvVars)
[18:03:36.627]                 envs <- base::Sys.getenv()
[18:03:36.627]                 names <- names(envs)
[18:03:36.627]                 common <- intersect(names, old_names)
[18:03:36.627]                 added <- setdiff(names, old_names)
[18:03:36.627]                 removed <- setdiff(old_names, names)
[18:03:36.627]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:36.627]                   envs[common]]
[18:03:36.627]                 NAMES <- toupper(changed)
[18:03:36.627]                 args <- list()
[18:03:36.627]                 for (kk in seq_along(NAMES)) {
[18:03:36.627]                   name <- changed[[kk]]
[18:03:36.627]                   NAME <- NAMES[[kk]]
[18:03:36.627]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.627]                     next
[18:03:36.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.627]                 }
[18:03:36.627]                 NAMES <- toupper(added)
[18:03:36.627]                 for (kk in seq_along(NAMES)) {
[18:03:36.627]                   name <- added[[kk]]
[18:03:36.627]                   NAME <- NAMES[[kk]]
[18:03:36.627]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.627]                     next
[18:03:36.627]                   args[[name]] <- ""
[18:03:36.627]                 }
[18:03:36.627]                 NAMES <- toupper(removed)
[18:03:36.627]                 for (kk in seq_along(NAMES)) {
[18:03:36.627]                   name <- removed[[kk]]
[18:03:36.627]                   NAME <- NAMES[[kk]]
[18:03:36.627]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.627]                     next
[18:03:36.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.627]                 }
[18:03:36.627]                 if (length(args) > 0) 
[18:03:36.627]                   base::do.call(base::Sys.setenv, args = args)
[18:03:36.627]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:36.627]             }
[18:03:36.627]             else {
[18:03:36.627]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:36.627]             }
[18:03:36.627]             {
[18:03:36.627]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:36.627]                   0L) {
[18:03:36.627]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:36.627]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:36.627]                   base::options(opts)
[18:03:36.627]                 }
[18:03:36.627]                 {
[18:03:36.627]                   {
[18:03:36.627]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:36.627]                     NULL
[18:03:36.627]                   }
[18:03:36.627]                   options(future.plan = NULL)
[18:03:36.627]                   if (is.na(NA_character_)) 
[18:03:36.627]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.627]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:36.627]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:36.627]                     .init = FALSE)
[18:03:36.627]                 }
[18:03:36.627]             }
[18:03:36.627]         }
[18:03:36.627]     })
[18:03:36.627]     if (TRUE) {
[18:03:36.627]         base::sink(type = "output", split = FALSE)
[18:03:36.627]         if (TRUE) {
[18:03:36.627]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:36.627]         }
[18:03:36.627]         else {
[18:03:36.627]             ...future.result["stdout"] <- base::list(NULL)
[18:03:36.627]         }
[18:03:36.627]         base::close(...future.stdout)
[18:03:36.627]         ...future.stdout <- NULL
[18:03:36.627]     }
[18:03:36.627]     ...future.result$conditions <- ...future.conditions
[18:03:36.627]     ...future.result$finished <- base::Sys.time()
[18:03:36.627]     ...future.result
[18:03:36.627] }
[18:03:36.727] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[18:03:36.728] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[18:03:36.729] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[18:03:36.729] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[18:03:36.730] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[18:03:36.730] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[18:03:36.771] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[18:03:36.772] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[18:03:36.814] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[18:03:36.814] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[18:03:36.815] MultisessionFuture started
[18:03:36.816] - Launch lazy future ... done
[18:03:36.818] run() for ‘MultisessionFuture’ ... done
[18:03:36.818] - run() ... done
[18:03:36.818] - resolved() ...
[18:03:36.830] - resolved: FALSE
[18:03:36.830] - resolved() ... done
[18:03:36.830] resolved() for ‘MultisessionFuture’ ... done
[18:03:36.830] resolved() for ‘Future’ ...
[18:03:36.830] - state: ‘created’
[18:03:36.831] - run: TRUE
[18:03:36.831] - run() ...
[18:03:36.831] run() for ‘Future’ ...
[18:03:36.831] - state: ‘created’
[18:03:36.832] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:36.854] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:36.854] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:36.855]   - Field: ‘node’
[18:03:36.855]   - Field: ‘label’
[18:03:36.855]   - Field: ‘local’
[18:03:36.855]   - Field: ‘owner’
[18:03:36.855]   - Field: ‘envir’
[18:03:36.856]   - Field: ‘workers’
[18:03:36.856]   - Field: ‘packages’
[18:03:36.856]   - Field: ‘gc’
[18:03:36.856]   - Field: ‘conditions’
[18:03:36.856]   - Field: ‘persistent’
[18:03:36.857]   - Field: ‘expr’
[18:03:36.857]   - Field: ‘uuid’
[18:03:36.857]   - Field: ‘seed’
[18:03:36.857]   - Field: ‘version’
[18:03:36.857]   - Field: ‘result’
[18:03:36.858]   - Field: ‘asynchronous’
[18:03:36.858]   - Field: ‘calls’
[18:03:36.858]   - Field: ‘globals’
[18:03:36.858]   - Field: ‘stdout’
[18:03:36.858]   - Field: ‘earlySignal’
[18:03:36.859]   - Field: ‘lazy’
[18:03:36.859]   - Field: ‘state’
[18:03:36.859] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:36.859] - Launch lazy future ...
[18:03:36.860] Packages needed by the future expression (n = 1): ‘future’
[18:03:36.860] Packages needed by future strategies (n = 0): <none>
[18:03:36.861] {
[18:03:36.861]     {
[18:03:36.861]         {
[18:03:36.861]             ...future.startTime <- base::Sys.time()
[18:03:36.861]             {
[18:03:36.861]                 {
[18:03:36.861]                   {
[18:03:36.861]                     {
[18:03:36.861]                       {
[18:03:36.861]                         base::local({
[18:03:36.861]                           has_future <- base::requireNamespace("future", 
[18:03:36.861]                             quietly = TRUE)
[18:03:36.861]                           if (has_future) {
[18:03:36.861]                             ns <- base::getNamespace("future")
[18:03:36.861]                             version <- ns[[".package"]][["version"]]
[18:03:36.861]                             if (is.null(version)) 
[18:03:36.861]                               version <- utils::packageVersion("future")
[18:03:36.861]                           }
[18:03:36.861]                           else {
[18:03:36.861]                             version <- NULL
[18:03:36.861]                           }
[18:03:36.861]                           if (!has_future || version < "1.8.0") {
[18:03:36.861]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:36.861]                               "", base::R.version$version.string), 
[18:03:36.861]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:36.861]                                 base::R.version$platform, 8 * 
[18:03:36.861]                                   base::.Machine$sizeof.pointer), 
[18:03:36.861]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:36.861]                                 "release", "version")], collapse = " "), 
[18:03:36.861]                               hostname = base::Sys.info()[["nodename"]])
[18:03:36.861]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:36.861]                               info)
[18:03:36.861]                             info <- base::paste(info, collapse = "; ")
[18:03:36.861]                             if (!has_future) {
[18:03:36.861]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:36.861]                                 info)
[18:03:36.861]                             }
[18:03:36.861]                             else {
[18:03:36.861]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:36.861]                                 info, version)
[18:03:36.861]                             }
[18:03:36.861]                             base::stop(msg)
[18:03:36.861]                           }
[18:03:36.861]                         })
[18:03:36.861]                       }
[18:03:36.861]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:36.861]                       base::options(mc.cores = 1L)
[18:03:36.861]                     }
[18:03:36.861]                     base::local({
[18:03:36.861]                       for (pkg in "future") {
[18:03:36.861]                         base::loadNamespace(pkg)
[18:03:36.861]                         base::library(pkg, character.only = TRUE)
[18:03:36.861]                       }
[18:03:36.861]                     })
[18:03:36.861]                   }
[18:03:36.861]                   ...future.strategy.old <- future::plan("list")
[18:03:36.861]                   options(future.plan = NULL)
[18:03:36.861]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.861]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:36.861]                 }
[18:03:36.861]                 ...future.workdir <- getwd()
[18:03:36.861]             }
[18:03:36.861]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:36.861]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:36.861]         }
[18:03:36.861]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:36.861]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:36.861]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:36.861]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:36.861]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:36.861]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:36.861]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:36.861]             base::names(...future.oldOptions))
[18:03:36.861]     }
[18:03:36.861]     if (FALSE) {
[18:03:36.861]     }
[18:03:36.861]     else {
[18:03:36.861]         if (TRUE) {
[18:03:36.861]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:36.861]                 open = "w")
[18:03:36.861]         }
[18:03:36.861]         else {
[18:03:36.861]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:36.861]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:36.861]         }
[18:03:36.861]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:36.861]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:36.861]             base::sink(type = "output", split = FALSE)
[18:03:36.861]             base::close(...future.stdout)
[18:03:36.861]         }, add = TRUE)
[18:03:36.861]     }
[18:03:36.861]     ...future.frame <- base::sys.nframe()
[18:03:36.861]     ...future.conditions <- base::list()
[18:03:36.861]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:36.861]     if (FALSE) {
[18:03:36.861]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:36.861]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:36.861]     }
[18:03:36.861]     ...future.result <- base::tryCatch({
[18:03:36.861]         base::withCallingHandlers({
[18:03:36.861]             ...future.value <- base::withVisible(base::local({
[18:03:36.861]                 ...future.makeSendCondition <- base::local({
[18:03:36.861]                   sendCondition <- NULL
[18:03:36.861]                   function(frame = 1L) {
[18:03:36.861]                     if (is.function(sendCondition)) 
[18:03:36.861]                       return(sendCondition)
[18:03:36.861]                     ns <- getNamespace("parallel")
[18:03:36.861]                     if (exists("sendData", mode = "function", 
[18:03:36.861]                       envir = ns)) {
[18:03:36.861]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:36.861]                         envir = ns)
[18:03:36.861]                       envir <- sys.frame(frame)
[18:03:36.861]                       master <- NULL
[18:03:36.861]                       while (!identical(envir, .GlobalEnv) && 
[18:03:36.861]                         !identical(envir, emptyenv())) {
[18:03:36.861]                         if (exists("master", mode = "list", envir = envir, 
[18:03:36.861]                           inherits = FALSE)) {
[18:03:36.861]                           master <- get("master", mode = "list", 
[18:03:36.861]                             envir = envir, inherits = FALSE)
[18:03:36.861]                           if (inherits(master, c("SOCKnode", 
[18:03:36.861]                             "SOCK0node"))) {
[18:03:36.861]                             sendCondition <<- function(cond) {
[18:03:36.861]                               data <- list(type = "VALUE", value = cond, 
[18:03:36.861]                                 success = TRUE)
[18:03:36.861]                               parallel_sendData(master, data)
[18:03:36.861]                             }
[18:03:36.861]                             return(sendCondition)
[18:03:36.861]                           }
[18:03:36.861]                         }
[18:03:36.861]                         frame <- frame + 1L
[18:03:36.861]                         envir <- sys.frame(frame)
[18:03:36.861]                       }
[18:03:36.861]                     }
[18:03:36.861]                     sendCondition <<- function(cond) NULL
[18:03:36.861]                   }
[18:03:36.861]                 })
[18:03:36.861]                 withCallingHandlers({
[18:03:36.861]                   {
[18:03:36.861]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:36.861]                       ii, n), appendLF = FALSE)
[18:03:36.861]                     fit <- mandelbrot(C)
[18:03:36.861]                     delay(fit)
[18:03:36.861]                     message(" done")
[18:03:36.861]                     fit
[18:03:36.861]                   }
[18:03:36.861]                 }, immediateCondition = function(cond) {
[18:03:36.861]                   sendCondition <- ...future.makeSendCondition()
[18:03:36.861]                   sendCondition(cond)
[18:03:36.861]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.861]                   {
[18:03:36.861]                     inherits <- base::inherits
[18:03:36.861]                     invokeRestart <- base::invokeRestart
[18:03:36.861]                     is.null <- base::is.null
[18:03:36.861]                     muffled <- FALSE
[18:03:36.861]                     if (inherits(cond, "message")) {
[18:03:36.861]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:36.861]                       if (muffled) 
[18:03:36.861]                         invokeRestart("muffleMessage")
[18:03:36.861]                     }
[18:03:36.861]                     else if (inherits(cond, "warning")) {
[18:03:36.861]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:36.861]                       if (muffled) 
[18:03:36.861]                         invokeRestart("muffleWarning")
[18:03:36.861]                     }
[18:03:36.861]                     else if (inherits(cond, "condition")) {
[18:03:36.861]                       if (!is.null(pattern)) {
[18:03:36.861]                         computeRestarts <- base::computeRestarts
[18:03:36.861]                         grepl <- base::grepl
[18:03:36.861]                         restarts <- computeRestarts(cond)
[18:03:36.861]                         for (restart in restarts) {
[18:03:36.861]                           name <- restart$name
[18:03:36.861]                           if (is.null(name)) 
[18:03:36.861]                             next
[18:03:36.861]                           if (!grepl(pattern, name)) 
[18:03:36.861]                             next
[18:03:36.861]                           invokeRestart(restart)
[18:03:36.861]                           muffled <- TRUE
[18:03:36.861]                           break
[18:03:36.861]                         }
[18:03:36.861]                       }
[18:03:36.861]                     }
[18:03:36.861]                     invisible(muffled)
[18:03:36.861]                   }
[18:03:36.861]                   muffleCondition(cond)
[18:03:36.861]                 })
[18:03:36.861]             }))
[18:03:36.861]             future::FutureResult(value = ...future.value$value, 
[18:03:36.861]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.861]                   ...future.rng), globalenv = if (FALSE) 
[18:03:36.861]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:36.861]                     ...future.globalenv.names))
[18:03:36.861]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:36.861]         }, condition = base::local({
[18:03:36.861]             c <- base::c
[18:03:36.861]             inherits <- base::inherits
[18:03:36.861]             invokeRestart <- base::invokeRestart
[18:03:36.861]             length <- base::length
[18:03:36.861]             list <- base::list
[18:03:36.861]             seq.int <- base::seq.int
[18:03:36.861]             signalCondition <- base::signalCondition
[18:03:36.861]             sys.calls <- base::sys.calls
[18:03:36.861]             `[[` <- base::`[[`
[18:03:36.861]             `+` <- base::`+`
[18:03:36.861]             `<<-` <- base::`<<-`
[18:03:36.861]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:36.861]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:36.861]                   3L)]
[18:03:36.861]             }
[18:03:36.861]             function(cond) {
[18:03:36.861]                 is_error <- inherits(cond, "error")
[18:03:36.861]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:36.861]                   NULL)
[18:03:36.861]                 if (is_error) {
[18:03:36.861]                   sessionInformation <- function() {
[18:03:36.861]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:36.861]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:36.861]                       search = base::search(), system = base::Sys.info())
[18:03:36.861]                   }
[18:03:36.861]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.861]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:36.861]                     cond$call), session = sessionInformation(), 
[18:03:36.861]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:36.861]                   signalCondition(cond)
[18:03:36.861]                 }
[18:03:36.861]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:36.861]                 "immediateCondition"))) {
[18:03:36.861]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:36.861]                   ...future.conditions[[length(...future.conditions) + 
[18:03:36.861]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:36.861]                   if (TRUE && !signal) {
[18:03:36.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.861]                     {
[18:03:36.861]                       inherits <- base::inherits
[18:03:36.861]                       invokeRestart <- base::invokeRestart
[18:03:36.861]                       is.null <- base::is.null
[18:03:36.861]                       muffled <- FALSE
[18:03:36.861]                       if (inherits(cond, "message")) {
[18:03:36.861]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.861]                         if (muffled) 
[18:03:36.861]                           invokeRestart("muffleMessage")
[18:03:36.861]                       }
[18:03:36.861]                       else if (inherits(cond, "warning")) {
[18:03:36.861]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.861]                         if (muffled) 
[18:03:36.861]                           invokeRestart("muffleWarning")
[18:03:36.861]                       }
[18:03:36.861]                       else if (inherits(cond, "condition")) {
[18:03:36.861]                         if (!is.null(pattern)) {
[18:03:36.861]                           computeRestarts <- base::computeRestarts
[18:03:36.861]                           grepl <- base::grepl
[18:03:36.861]                           restarts <- computeRestarts(cond)
[18:03:36.861]                           for (restart in restarts) {
[18:03:36.861]                             name <- restart$name
[18:03:36.861]                             if (is.null(name)) 
[18:03:36.861]                               next
[18:03:36.861]                             if (!grepl(pattern, name)) 
[18:03:36.861]                               next
[18:03:36.861]                             invokeRestart(restart)
[18:03:36.861]                             muffled <- TRUE
[18:03:36.861]                             break
[18:03:36.861]                           }
[18:03:36.861]                         }
[18:03:36.861]                       }
[18:03:36.861]                       invisible(muffled)
[18:03:36.861]                     }
[18:03:36.861]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.861]                   }
[18:03:36.861]                 }
[18:03:36.861]                 else {
[18:03:36.861]                   if (TRUE) {
[18:03:36.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:36.861]                     {
[18:03:36.861]                       inherits <- base::inherits
[18:03:36.861]                       invokeRestart <- base::invokeRestart
[18:03:36.861]                       is.null <- base::is.null
[18:03:36.861]                       muffled <- FALSE
[18:03:36.861]                       if (inherits(cond, "message")) {
[18:03:36.861]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:36.861]                         if (muffled) 
[18:03:36.861]                           invokeRestart("muffleMessage")
[18:03:36.861]                       }
[18:03:36.861]                       else if (inherits(cond, "warning")) {
[18:03:36.861]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:36.861]                         if (muffled) 
[18:03:36.861]                           invokeRestart("muffleWarning")
[18:03:36.861]                       }
[18:03:36.861]                       else if (inherits(cond, "condition")) {
[18:03:36.861]                         if (!is.null(pattern)) {
[18:03:36.861]                           computeRestarts <- base::computeRestarts
[18:03:36.861]                           grepl <- base::grepl
[18:03:36.861]                           restarts <- computeRestarts(cond)
[18:03:36.861]                           for (restart in restarts) {
[18:03:36.861]                             name <- restart$name
[18:03:36.861]                             if (is.null(name)) 
[18:03:36.861]                               next
[18:03:36.861]                             if (!grepl(pattern, name)) 
[18:03:36.861]                               next
[18:03:36.861]                             invokeRestart(restart)
[18:03:36.861]                             muffled <- TRUE
[18:03:36.861]                             break
[18:03:36.861]                           }
[18:03:36.861]                         }
[18:03:36.861]                       }
[18:03:36.861]                       invisible(muffled)
[18:03:36.861]                     }
[18:03:36.861]                     muffleCondition(cond, pattern = "^muffle")
[18:03:36.861]                   }
[18:03:36.861]                 }
[18:03:36.861]             }
[18:03:36.861]         }))
[18:03:36.861]     }, error = function(ex) {
[18:03:36.861]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:36.861]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:36.861]                 ...future.rng), started = ...future.startTime, 
[18:03:36.861]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:36.861]             version = "1.8"), class = "FutureResult")
[18:03:36.861]     }, finally = {
[18:03:36.861]         if (!identical(...future.workdir, getwd())) 
[18:03:36.861]             setwd(...future.workdir)
[18:03:36.861]         {
[18:03:36.861]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:36.861]                 ...future.oldOptions$nwarnings <- NULL
[18:03:36.861]             }
[18:03:36.861]             base::options(...future.oldOptions)
[18:03:36.861]             if (.Platform$OS.type == "windows") {
[18:03:36.861]                 old_names <- names(...future.oldEnvVars)
[18:03:36.861]                 envs <- base::Sys.getenv()
[18:03:36.861]                 names <- names(envs)
[18:03:36.861]                 common <- intersect(names, old_names)
[18:03:36.861]                 added <- setdiff(names, old_names)
[18:03:36.861]                 removed <- setdiff(old_names, names)
[18:03:36.861]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:36.861]                   envs[common]]
[18:03:36.861]                 NAMES <- toupper(changed)
[18:03:36.861]                 args <- list()
[18:03:36.861]                 for (kk in seq_along(NAMES)) {
[18:03:36.861]                   name <- changed[[kk]]
[18:03:36.861]                   NAME <- NAMES[[kk]]
[18:03:36.861]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.861]                     next
[18:03:36.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.861]                 }
[18:03:36.861]                 NAMES <- toupper(added)
[18:03:36.861]                 for (kk in seq_along(NAMES)) {
[18:03:36.861]                   name <- added[[kk]]
[18:03:36.861]                   NAME <- NAMES[[kk]]
[18:03:36.861]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.861]                     next
[18:03:36.861]                   args[[name]] <- ""
[18:03:36.861]                 }
[18:03:36.861]                 NAMES <- toupper(removed)
[18:03:36.861]                 for (kk in seq_along(NAMES)) {
[18:03:36.861]                   name <- removed[[kk]]
[18:03:36.861]                   NAME <- NAMES[[kk]]
[18:03:36.861]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:36.861]                     next
[18:03:36.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:36.861]                 }
[18:03:36.861]                 if (length(args) > 0) 
[18:03:36.861]                   base::do.call(base::Sys.setenv, args = args)
[18:03:36.861]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:36.861]             }
[18:03:36.861]             else {
[18:03:36.861]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:36.861]             }
[18:03:36.861]             {
[18:03:36.861]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:36.861]                   0L) {
[18:03:36.861]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:36.861]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:36.861]                   base::options(opts)
[18:03:36.861]                 }
[18:03:36.861]                 {
[18:03:36.861]                   {
[18:03:36.861]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:36.861]                     NULL
[18:03:36.861]                   }
[18:03:36.861]                   options(future.plan = NULL)
[18:03:36.861]                   if (is.na(NA_character_)) 
[18:03:36.861]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:36.861]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:36.861]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:36.861]                     .init = FALSE)
[18:03:36.861]                 }
[18:03:36.861]             }
[18:03:36.861]         }
[18:03:36.861]     })
[18:03:36.861]     if (TRUE) {
[18:03:36.861]         base::sink(type = "output", split = FALSE)
[18:03:36.861]         if (TRUE) {
[18:03:36.861]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:36.861]         }
[18:03:36.861]         else {
[18:03:36.861]             ...future.result["stdout"] <- base::list(NULL)
[18:03:36.861]         }
[18:03:36.861]         base::close(...future.stdout)
[18:03:36.861]         ...future.stdout <- NULL
[18:03:36.861]     }
[18:03:36.861]     ...future.result$conditions <- ...future.conditions
[18:03:36.861]     ...future.result$finished <- base::Sys.time()
[18:03:36.861]     ...future.result
[18:03:36.861] }
[18:03:36.865] Poll #1 (0): usedNodes() = 2, workers = 2
[18:03:36.876] receiveMessageFromWorker() for ClusterFuture ...
[18:03:36.877] - Validating connection of MultisessionFuture
[18:03:36.878] - received message: FutureResult
[18:03:36.878] - Received FutureResult
[18:03:36.878] - Erased future from FutureRegistry
[18:03:36.878] result() for ClusterFuture ...
[18:03:36.879] - result already collected: FutureResult
[18:03:36.879] result() for ClusterFuture ... done
[18:03:36.879] signalConditions() ...
[18:03:36.879]  - include = ‘immediateCondition’
[18:03:36.880]  - exclude = 
[18:03:36.880]  - resignal = FALSE
[18:03:36.880]  - Number of conditions: 2
[18:03:36.880] signalConditions() ... done
[18:03:36.880] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:36.881] result() for ClusterFuture ...
[18:03:36.881] - result already collected: FutureResult
[18:03:36.881] result() for ClusterFuture ... done
[18:03:36.881] result() for ClusterFuture ...
[18:03:36.881] - result already collected: FutureResult
[18:03:36.881] result() for ClusterFuture ... done
[18:03:36.882] signalConditions() ...
[18:03:36.882]  - include = ‘immediateCondition’
[18:03:36.882]  - exclude = 
[18:03:36.882]  - resignal = FALSE
[18:03:36.882]  - Number of conditions: 2
[18:03:36.883] signalConditions() ... done
[18:03:36.884] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[18:03:36.884] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[18:03:36.885] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[18:03:36.885] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[18:03:36.886] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[18:03:36.886] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[18:03:36.927] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[18:03:36.928] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[18:03:36.970] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[18:03:36.970] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[18:03:36.972] MultisessionFuture started
[18:03:36.972] - Launch lazy future ... done
[18:03:36.972] run() for ‘MultisessionFuture’ ... done
[18:03:36.973] - run() ... done
[18:03:36.973] - resolved() ...
[18:03:36.984] - resolved: FALSE
[18:03:36.985] - resolved() ... done
[18:03:36.985] resolved() for ‘MultisessionFuture’ ... done
[18:03:36.985] resolved() for ‘Future’ ...
[18:03:36.986] - state: ‘created’
[18:03:36.986] - run: TRUE
[18:03:36.986] - run() ...
[18:03:36.987] run() for ‘Future’ ...
[18:03:36.987] - state: ‘created’
[18:03:36.987] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:37.017] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:37.017] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:37.018]   - Field: ‘node’
[18:03:37.018]   - Field: ‘label’
[18:03:37.018]   - Field: ‘local’
[18:03:37.018]   - Field: ‘owner’
[18:03:37.019]   - Field: ‘envir’
[18:03:37.019]   - Field: ‘workers’
[18:03:37.019]   - Field: ‘packages’
[18:03:37.019]   - Field: ‘gc’
[18:03:37.020]   - Field: ‘conditions’
[18:03:37.020]   - Field: ‘persistent’
[18:03:37.020]   - Field: ‘expr’
[18:03:37.020]   - Field: ‘uuid’
[18:03:37.021]   - Field: ‘seed’
[18:03:37.021]   - Field: ‘version’
[18:03:37.021]   - Field: ‘result’
[18:03:37.021]   - Field: ‘asynchronous’
[18:03:37.022]   - Field: ‘calls’
[18:03:37.022]   - Field: ‘globals’
[18:03:37.022]   - Field: ‘stdout’
[18:03:37.022]   - Field: ‘earlySignal’
[18:03:37.023]   - Field: ‘lazy’
[18:03:37.023]   - Field: ‘state’
[18:03:37.023] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:37.023] - Launch lazy future ...
[18:03:37.024] Packages needed by the future expression (n = 1): ‘future’
[18:03:37.024] Packages needed by future strategies (n = 0): <none>
[18:03:37.025] {
[18:03:37.025]     {
[18:03:37.025]         {
[18:03:37.025]             ...future.startTime <- base::Sys.time()
[18:03:37.025]             {
[18:03:37.025]                 {
[18:03:37.025]                   {
[18:03:37.025]                     {
[18:03:37.025]                       {
[18:03:37.025]                         base::local({
[18:03:37.025]                           has_future <- base::requireNamespace("future", 
[18:03:37.025]                             quietly = TRUE)
[18:03:37.025]                           if (has_future) {
[18:03:37.025]                             ns <- base::getNamespace("future")
[18:03:37.025]                             version <- ns[[".package"]][["version"]]
[18:03:37.025]                             if (is.null(version)) 
[18:03:37.025]                               version <- utils::packageVersion("future")
[18:03:37.025]                           }
[18:03:37.025]                           else {
[18:03:37.025]                             version <- NULL
[18:03:37.025]                           }
[18:03:37.025]                           if (!has_future || version < "1.8.0") {
[18:03:37.025]                             info <- base::c(r_version = base::gsub("R version ", 
[18:03:37.025]                               "", base::R.version$version.string), 
[18:03:37.025]                               platform = base::sprintf("%s (%s-bit)", 
[18:03:37.025]                                 base::R.version$platform, 8 * 
[18:03:37.025]                                   base::.Machine$sizeof.pointer), 
[18:03:37.025]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:37.025]                                 "release", "version")], collapse = " "), 
[18:03:37.025]                               hostname = base::Sys.info()[["nodename"]])
[18:03:37.025]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:03:37.025]                               info)
[18:03:37.025]                             info <- base::paste(info, collapse = "; ")
[18:03:37.025]                             if (!has_future) {
[18:03:37.025]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:37.025]                                 info)
[18:03:37.025]                             }
[18:03:37.025]                             else {
[18:03:37.025]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:37.025]                                 info, version)
[18:03:37.025]                             }
[18:03:37.025]                             base::stop(msg)
[18:03:37.025]                           }
[18:03:37.025]                         })
[18:03:37.025]                       }
[18:03:37.025]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:37.025]                       base::options(mc.cores = 1L)
[18:03:37.025]                     }
[18:03:37.025]                     base::local({
[18:03:37.025]                       for (pkg in "future") {
[18:03:37.025]                         base::loadNamespace(pkg)
[18:03:37.025]                         base::library(pkg, character.only = TRUE)
[18:03:37.025]                       }
[18:03:37.025]                     })
[18:03:37.025]                   }
[18:03:37.025]                   ...future.strategy.old <- future::plan("list")
[18:03:37.025]                   options(future.plan = NULL)
[18:03:37.025]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.025]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:37.025]                 }
[18:03:37.025]                 ...future.workdir <- getwd()
[18:03:37.025]             }
[18:03:37.025]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:37.025]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:37.025]         }
[18:03:37.025]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:37.025]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:37.025]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:37.025]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:37.025]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:37.025]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:37.025]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:37.025]             base::names(...future.oldOptions))
[18:03:37.025]     }
[18:03:37.025]     if (FALSE) {
[18:03:37.025]     }
[18:03:37.025]     else {
[18:03:37.025]         if (TRUE) {
[18:03:37.025]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:37.025]                 open = "w")
[18:03:37.025]         }
[18:03:37.025]         else {
[18:03:37.025]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:37.025]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:37.025]         }
[18:03:37.025]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:37.025]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:37.025]             base::sink(type = "output", split = FALSE)
[18:03:37.025]             base::close(...future.stdout)
[18:03:37.025]         }, add = TRUE)
[18:03:37.025]     }
[18:03:37.025]     ...future.frame <- base::sys.nframe()
[18:03:37.025]     ...future.conditions <- base::list()
[18:03:37.025]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:37.025]     if (FALSE) {
[18:03:37.025]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:37.025]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:37.025]     }
[18:03:37.025]     ...future.result <- base::tryCatch({
[18:03:37.025]         base::withCallingHandlers({
[18:03:37.025]             ...future.value <- base::withVisible(base::local({
[18:03:37.025]                 ...future.makeSendCondition <- base::local({
[18:03:37.025]                   sendCondition <- NULL
[18:03:37.025]                   function(frame = 1L) {
[18:03:37.025]                     if (is.function(sendCondition)) 
[18:03:37.025]                       return(sendCondition)
[18:03:37.025]                     ns <- getNamespace("parallel")
[18:03:37.025]                     if (exists("sendData", mode = "function", 
[18:03:37.025]                       envir = ns)) {
[18:03:37.025]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:37.025]                         envir = ns)
[18:03:37.025]                       envir <- sys.frame(frame)
[18:03:37.025]                       master <- NULL
[18:03:37.025]                       while (!identical(envir, .GlobalEnv) && 
[18:03:37.025]                         !identical(envir, emptyenv())) {
[18:03:37.025]                         if (exists("master", mode = "list", envir = envir, 
[18:03:37.025]                           inherits = FALSE)) {
[18:03:37.025]                           master <- get("master", mode = "list", 
[18:03:37.025]                             envir = envir, inherits = FALSE)
[18:03:37.025]                           if (inherits(master, c("SOCKnode", 
[18:03:37.025]                             "SOCK0node"))) {
[18:03:37.025]                             sendCondition <<- function(cond) {
[18:03:37.025]                               data <- list(type = "VALUE", value = cond, 
[18:03:37.025]                                 success = TRUE)
[18:03:37.025]                               parallel_sendData(master, data)
[18:03:37.025]                             }
[18:03:37.025]                             return(sendCondition)
[18:03:37.025]                           }
[18:03:37.025]                         }
[18:03:37.025]                         frame <- frame + 1L
[18:03:37.025]                         envir <- sys.frame(frame)
[18:03:37.025]                       }
[18:03:37.025]                     }
[18:03:37.025]                     sendCondition <<- function(cond) NULL
[18:03:37.025]                   }
[18:03:37.025]                 })
[18:03:37.025]                 withCallingHandlers({
[18:03:37.025]                   {
[18:03:37.025]                     message(sprintf("Calculating tile #%d of %d ...", 
[18:03:37.025]                       ii, n), appendLF = FALSE)
[18:03:37.025]                     fit <- mandelbrot(C)
[18:03:37.025]                     delay(fit)
[18:03:37.025]                     message(" done")
[18:03:37.025]                     fit
[18:03:37.025]                   }
[18:03:37.025]                 }, immediateCondition = function(cond) {
[18:03:37.025]                   sendCondition <- ...future.makeSendCondition()
[18:03:37.025]                   sendCondition(cond)
[18:03:37.025]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.025]                   {
[18:03:37.025]                     inherits <- base::inherits
[18:03:37.025]                     invokeRestart <- base::invokeRestart
[18:03:37.025]                     is.null <- base::is.null
[18:03:37.025]                     muffled <- FALSE
[18:03:37.025]                     if (inherits(cond, "message")) {
[18:03:37.025]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:37.025]                       if (muffled) 
[18:03:37.025]                         invokeRestart("muffleMessage")
[18:03:37.025]                     }
[18:03:37.025]                     else if (inherits(cond, "warning")) {
[18:03:37.025]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:37.025]                       if (muffled) 
[18:03:37.025]                         invokeRestart("muffleWarning")
[18:03:37.025]                     }
[18:03:37.025]                     else if (inherits(cond, "condition")) {
[18:03:37.025]                       if (!is.null(pattern)) {
[18:03:37.025]                         computeRestarts <- base::computeRestarts
[18:03:37.025]                         grepl <- base::grepl
[18:03:37.025]                         restarts <- computeRestarts(cond)
[18:03:37.025]                         for (restart in restarts) {
[18:03:37.025]                           name <- restart$name
[18:03:37.025]                           if (is.null(name)) 
[18:03:37.025]                             next
[18:03:37.025]                           if (!grepl(pattern, name)) 
[18:03:37.025]                             next
[18:03:37.025]                           invokeRestart(restart)
[18:03:37.025]                           muffled <- TRUE
[18:03:37.025]                           break
[18:03:37.025]                         }
[18:03:37.025]                       }
[18:03:37.025]                     }
[18:03:37.025]                     invisible(muffled)
[18:03:37.025]                   }
[18:03:37.025]                   muffleCondition(cond)
[18:03:37.025]                 })
[18:03:37.025]             }))
[18:03:37.025]             future::FutureResult(value = ...future.value$value, 
[18:03:37.025]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.025]                   ...future.rng), globalenv = if (FALSE) 
[18:03:37.025]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:37.025]                     ...future.globalenv.names))
[18:03:37.025]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:37.025]         }, condition = base::local({
[18:03:37.025]             c <- base::c
[18:03:37.025]             inherits <- base::inherits
[18:03:37.025]             invokeRestart <- base::invokeRestart
[18:03:37.025]             length <- base::length
[18:03:37.025]             list <- base::list
[18:03:37.025]             seq.int <- base::seq.int
[18:03:37.025]             signalCondition <- base::signalCondition
[18:03:37.025]             sys.calls <- base::sys.calls
[18:03:37.025]             `[[` <- base::`[[`
[18:03:37.025]             `+` <- base::`+`
[18:03:37.025]             `<<-` <- base::`<<-`
[18:03:37.025]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:37.025]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:37.025]                   3L)]
[18:03:37.025]             }
[18:03:37.025]             function(cond) {
[18:03:37.025]                 is_error <- inherits(cond, "error")
[18:03:37.025]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:37.025]                   NULL)
[18:03:37.025]                 if (is_error) {
[18:03:37.025]                   sessionInformation <- function() {
[18:03:37.025]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:37.025]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:37.025]                       search = base::search(), system = base::Sys.info())
[18:03:37.025]                   }
[18:03:37.025]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.025]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:37.025]                     cond$call), session = sessionInformation(), 
[18:03:37.025]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:37.025]                   signalCondition(cond)
[18:03:37.025]                 }
[18:03:37.025]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:37.025]                 "immediateCondition"))) {
[18:03:37.025]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:37.025]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.025]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:37.025]                   if (TRUE && !signal) {
[18:03:37.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.025]                     {
[18:03:37.025]                       inherits <- base::inherits
[18:03:37.025]                       invokeRestart <- base::invokeRestart
[18:03:37.025]                       is.null <- base::is.null
[18:03:37.025]                       muffled <- FALSE
[18:03:37.025]                       if (inherits(cond, "message")) {
[18:03:37.025]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.025]                         if (muffled) 
[18:03:37.025]                           invokeRestart("muffleMessage")
[18:03:37.025]                       }
[18:03:37.025]                       else if (inherits(cond, "warning")) {
[18:03:37.025]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.025]                         if (muffled) 
[18:03:37.025]                           invokeRestart("muffleWarning")
[18:03:37.025]                       }
[18:03:37.025]                       else if (inherits(cond, "condition")) {
[18:03:37.025]                         if (!is.null(pattern)) {
[18:03:37.025]                           computeRestarts <- base::computeRestarts
[18:03:37.025]                           grepl <- base::grepl
[18:03:37.025]                           restarts <- computeRestarts(cond)
[18:03:37.025]                           for (restart in restarts) {
[18:03:37.025]                             name <- restart$name
[18:03:37.025]                             if (is.null(name)) 
[18:03:37.025]                               next
[18:03:37.025]                             if (!grepl(pattern, name)) 
[18:03:37.025]                               next
[18:03:37.025]                             invokeRestart(restart)
[18:03:37.025]                             muffled <- TRUE
[18:03:37.025]                             break
[18:03:37.025]                           }
[18:03:37.025]                         }
[18:03:37.025]                       }
[18:03:37.025]                       invisible(muffled)
[18:03:37.025]                     }
[18:03:37.025]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.025]                   }
[18:03:37.025]                 }
[18:03:37.025]                 else {
[18:03:37.025]                   if (TRUE) {
[18:03:37.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.025]                     {
[18:03:37.025]                       inherits <- base::inherits
[18:03:37.025]                       invokeRestart <- base::invokeRestart
[18:03:37.025]                       is.null <- base::is.null
[18:03:37.025]                       muffled <- FALSE
[18:03:37.025]                       if (inherits(cond, "message")) {
[18:03:37.025]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.025]                         if (muffled) 
[18:03:37.025]                           invokeRestart("muffleMessage")
[18:03:37.025]                       }
[18:03:37.025]                       else if (inherits(cond, "warning")) {
[18:03:37.025]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.025]                         if (muffled) 
[18:03:37.025]                           invokeRestart("muffleWarning")
[18:03:37.025]                       }
[18:03:37.025]                       else if (inherits(cond, "condition")) {
[18:03:37.025]                         if (!is.null(pattern)) {
[18:03:37.025]                           computeRestarts <- base::computeRestarts
[18:03:37.025]                           grepl <- base::grepl
[18:03:37.025]                           restarts <- computeRestarts(cond)
[18:03:37.025]                           for (restart in restarts) {
[18:03:37.025]                             name <- restart$name
[18:03:37.025]                             if (is.null(name)) 
[18:03:37.025]                               next
[18:03:37.025]                             if (!grepl(pattern, name)) 
[18:03:37.025]                               next
[18:03:37.025]                             invokeRestart(restart)
[18:03:37.025]                             muffled <- TRUE
[18:03:37.025]                             break
[18:03:37.025]                           }
[18:03:37.025]                         }
[18:03:37.025]                       }
[18:03:37.025]                       invisible(muffled)
[18:03:37.025]                     }
[18:03:37.025]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.025]                   }
[18:03:37.025]                 }
[18:03:37.025]             }
[18:03:37.025]         }))
[18:03:37.025]     }, error = function(ex) {
[18:03:37.025]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:37.025]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.025]                 ...future.rng), started = ...future.startTime, 
[18:03:37.025]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:37.025]             version = "1.8"), class = "FutureResult")
[18:03:37.025]     }, finally = {
[18:03:37.025]         if (!identical(...future.workdir, getwd())) 
[18:03:37.025]             setwd(...future.workdir)
[18:03:37.025]         {
[18:03:37.025]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:37.025]                 ...future.oldOptions$nwarnings <- NULL
[18:03:37.025]             }
[18:03:37.025]             base::options(...future.oldOptions)
[18:03:37.025]             if (.Platform$OS.type == "windows") {
[18:03:37.025]                 old_names <- names(...future.oldEnvVars)
[18:03:37.025]                 envs <- base::Sys.getenv()
[18:03:37.025]                 names <- names(envs)
[18:03:37.025]                 common <- intersect(names, old_names)
[18:03:37.025]                 added <- setdiff(names, old_names)
[18:03:37.025]                 removed <- setdiff(old_names, names)
[18:03:37.025]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:37.025]                   envs[common]]
[18:03:37.025]                 NAMES <- toupper(changed)
[18:03:37.025]                 args <- list()
[18:03:37.025]                 for (kk in seq_along(NAMES)) {
[18:03:37.025]                   name <- changed[[kk]]
[18:03:37.025]                   NAME <- NAMES[[kk]]
[18:03:37.025]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.025]                     next
[18:03:37.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.025]                 }
[18:03:37.025]                 NAMES <- toupper(added)
[18:03:37.025]                 for (kk in seq_along(NAMES)) {
[18:03:37.025]                   name <- added[[kk]]
[18:03:37.025]                   NAME <- NAMES[[kk]]
[18:03:37.025]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.025]                     next
[18:03:37.025]                   args[[name]] <- ""
[18:03:37.025]                 }
[18:03:37.025]                 NAMES <- toupper(removed)
[18:03:37.025]                 for (kk in seq_along(NAMES)) {
[18:03:37.025]                   name <- removed[[kk]]
[18:03:37.025]                   NAME <- NAMES[[kk]]
[18:03:37.025]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.025]                     next
[18:03:37.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.025]                 }
[18:03:37.025]                 if (length(args) > 0) 
[18:03:37.025]                   base::do.call(base::Sys.setenv, args = args)
[18:03:37.025]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:37.025]             }
[18:03:37.025]             else {
[18:03:37.025]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:37.025]             }
[18:03:37.025]             {
[18:03:37.025]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:37.025]                   0L) {
[18:03:37.025]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:37.025]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:37.025]                   base::options(opts)
[18:03:37.025]                 }
[18:03:37.025]                 {
[18:03:37.025]                   {
[18:03:37.025]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:37.025]                     NULL
[18:03:37.025]                   }
[18:03:37.025]                   options(future.plan = NULL)
[18:03:37.025]                   if (is.na(NA_character_)) 
[18:03:37.025]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.025]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:37.025]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:37.025]                     .init = FALSE)
[18:03:37.025]                 }
[18:03:37.025]             }
[18:03:37.025]         }
[18:03:37.025]     })
[18:03:37.025]     if (TRUE) {
[18:03:37.025]         base::sink(type = "output", split = FALSE)
[18:03:37.025]         if (TRUE) {
[18:03:37.025]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:37.025]         }
[18:03:37.025]         else {
[18:03:37.025]             ...future.result["stdout"] <- base::list(NULL)
[18:03:37.025]         }
[18:03:37.025]         base::close(...future.stdout)
[18:03:37.025]         ...future.stdout <- NULL
[18:03:37.025]     }
[18:03:37.025]     ...future.result$conditions <- ...future.conditions
[18:03:37.025]     ...future.result$finished <- base::Sys.time()
[18:03:37.025]     ...future.result
[18:03:37.025] }
[18:03:37.030] Poll #1 (0): usedNodes() = 2, workers = 2
[18:03:37.042] receiveMessageFromWorker() for ClusterFuture ...
[18:03:37.042] - Validating connection of MultisessionFuture
[18:03:37.045] - received message: FutureResult
[18:03:37.045] - Received FutureResult
[18:03:37.045] - Erased future from FutureRegistry
[18:03:37.046] result() for ClusterFuture ...
[18:03:37.046] - result already collected: FutureResult
[18:03:37.046] result() for ClusterFuture ... done
[18:03:37.046] signalConditions() ...
[18:03:37.046]  - include = ‘immediateCondition’
[18:03:37.047]  - exclude = 
[18:03:37.049]  - resignal = FALSE
[18:03:37.049]  - Number of conditions: 2
[18:03:37.049] signalConditions() ... done
[18:03:37.050] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:37.050] result() for ClusterFuture ...
[18:03:37.050] - result already collected: FutureResult
[18:03:37.050] result() for ClusterFuture ... done
[18:03:37.050] result() for ClusterFuture ...
[18:03:37.051] - result already collected: FutureResult
[18:03:37.053] result() for ClusterFuture ... done
[18:03:37.053] signalConditions() ...
[18:03:37.053]  - include = ‘immediateCondition’
[18:03:37.053]  - exclude = 
[18:03:37.054]  - resignal = FALSE
[18:03:37.054]  - Number of conditions: 2
[18:03:37.054] signalConditions() ... done
[18:03:37.055] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[18:03:37.056] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[18:03:37.057] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[18:03:37.057] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[18:03:37.058] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[18:03:37.058] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[18:03:37.099] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[18:03:37.100] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[18:03:37.142] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[18:03:37.142] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[18:03:37.144] MultisessionFuture started
[18:03:37.144] - Launch lazy future ... done
[18:03:37.145] run() for ‘MultisessionFuture’ ... done
[18:03:37.145] - run() ... done
[18:03:37.145] - resolved() ...
[18:03:37.157] - resolved: FALSE
[18:03:37.157] - resolved() ... done
[18:03:37.157] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[18:03:37.158] result() for ClusterFuture ...
[18:03:37.158] - result already collected: FutureResult
[18:03:37.158] result() for ClusterFuture ... done
[18:03:37.159] result() for ClusterFuture ...
[18:03:37.159] - result already collected: FutureResult
[18:03:37.159] result() for ClusterFuture ... done
[18:03:37.159] signalConditions() ...
[18:03:37.160]  - include = ‘immediateCondition’
[18:03:37.160]  - exclude = 
[18:03:37.160]  - resignal = FALSE
[18:03:37.160]  - Number of conditions: 2
[18:03:37.161] signalConditions() ... done
[18:03:37.161] Future state: ‘finished’
[18:03:37.161] result() for ClusterFuture ...
[18:03:37.161] - result already collected: FutureResult
[18:03:37.162] result() for ClusterFuture ... done
[18:03:37.162] signalConditions() ...
[18:03:37.162]  - include = ‘condition’
[18:03:37.162]  - exclude = ‘immediateCondition’
[18:03:37.163]  - resignal = TRUE
[18:03:37.163]  - Number of conditions: 2
[18:03:37.163]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[18:03:37.164]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:37.164] signalConditions() ... done
Plotting tile #2 of 4 ...
[18:03:37.166] result() for ClusterFuture ...
[18:03:37.166] - result already collected: FutureResult
[18:03:37.166] result() for ClusterFuture ... done
[18:03:37.167] result() for ClusterFuture ...
[18:03:37.167] - result already collected: FutureResult
[18:03:37.167] result() for ClusterFuture ... done
[18:03:37.167] signalConditions() ...
[18:03:37.168]  - include = ‘immediateCondition’
[18:03:37.168]  - exclude = 
[18:03:37.168]  - resignal = FALSE
[18:03:37.168]  - Number of conditions: 2
[18:03:37.169] signalConditions() ... done
[18:03:37.169] Future state: ‘finished’
[18:03:37.169] result() for ClusterFuture ...
[18:03:37.170] - result already collected: FutureResult
[18:03:37.170] result() for ClusterFuture ... done
[18:03:37.170] signalConditions() ...
[18:03:37.170]  - include = ‘condition’
[18:03:37.171]  - exclude = ‘immediateCondition’
[18:03:37.171]  - resignal = TRUE
[18:03:37.171]  - Number of conditions: 2
[18:03:37.171]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[18:03:37.172]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:37.172] signalConditions() ... done
[18:03:37.175] receiveMessageFromWorker() for ClusterFuture ...
[18:03:37.175] - Validating connection of MultisessionFuture
[18:03:37.177] - received message: FutureResult
[18:03:37.177] - Received FutureResult
[18:03:37.177] - Erased future from FutureRegistry
[18:03:37.178] result() for ClusterFuture ...
[18:03:37.178] - result already collected: FutureResult
[18:03:37.178] result() for ClusterFuture ... done
[18:03:37.178] signalConditions() ...
[18:03:37.178]  - include = ‘immediateCondition’
[18:03:37.179]  - exclude = 
[18:03:37.179]  - resignal = FALSE
[18:03:37.179]  - Number of conditions: 2
[18:03:37.180] signalConditions() ... done
[18:03:37.180] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[18:03:37.180] result() for ClusterFuture ...
[18:03:37.180] - result already collected: FutureResult
[18:03:37.181] result() for ClusterFuture ... done
[18:03:37.181] result() for ClusterFuture ...
[18:03:37.181] - result already collected: FutureResult
[18:03:37.181] result() for ClusterFuture ... done
[18:03:37.182] signalConditions() ...
[18:03:37.182]  - include = ‘immediateCondition’
[18:03:37.182]  - exclude = 
[18:03:37.182]  - resignal = FALSE
[18:03:37.183]  - Number of conditions: 2
[18:03:37.183] signalConditions() ... done
[18:03:37.183] Future state: ‘finished’
[18:03:37.184] result() for ClusterFuture ...
[18:03:37.184] - result already collected: FutureResult
[18:03:37.184] result() for ClusterFuture ... done
[18:03:37.184] signalConditions() ...
[18:03:37.185]  - include = ‘condition’
[18:03:37.185]  - exclude = ‘immediateCondition’
[18:03:37.185]  - resignal = TRUE
[18:03:37.185]  - Number of conditions: 2
[18:03:37.186]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[18:03:37.186]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:37.187] signalConditions() ... done
[18:03:37.238] receiveMessageFromWorker() for ClusterFuture ...
[18:03:37.239] - Validating connection of MultisessionFuture
[18:03:37.240] - received message: FutureResult
[18:03:37.241] - Received FutureResult
[18:03:37.241] - Erased future from FutureRegistry
[18:03:37.241] result() for ClusterFuture ...
[18:03:37.242] - result already collected: FutureResult
[18:03:37.242] result() for ClusterFuture ... done
[18:03:37.242] signalConditions() ...
[18:03:37.243]  - include = ‘immediateCondition’
[18:03:37.243]  - exclude = 
[18:03:37.243]  - resignal = FALSE
[18:03:37.243]  - Number of conditions: 2
[18:03:37.244] signalConditions() ... done
[18:03:37.244] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[18:03:37.245] result() for ClusterFuture ...
[18:03:37.245] - result already collected: FutureResult
[18:03:37.245] result() for ClusterFuture ... done
[18:03:37.246] result() for ClusterFuture ...
[18:03:37.246] - result already collected: FutureResult
[18:03:37.246] result() for ClusterFuture ... done
[18:03:37.247] signalConditions() ...
[18:03:37.247]  - include = ‘immediateCondition’
[18:03:37.247]  - exclude = 
[18:03:37.247]  - resignal = FALSE
[18:03:37.248]  - Number of conditions: 2
[18:03:37.248] signalConditions() ... done
[18:03:37.249] Future state: ‘finished’
[18:03:37.249] result() for ClusterFuture ...
[18:03:37.249] - result already collected: FutureResult
[18:03:37.250] result() for ClusterFuture ... done
[18:03:37.250] signalConditions() ...
[18:03:37.250]  - include = ‘condition’
[18:03:37.250]  - exclude = ‘immediateCondition’
[18:03:37.251]  - resignal = TRUE
[18:03:37.251]  - Number of conditions: 2
[18:03:37.251]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[18:03:37.252]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[18:03:37.252] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[18:03:37.258] plan(): Setting new future strategy stack:
[18:03:37.259] List of future strategies:
[18:03:37.259] 1. sequential:
[18:03:37.259]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.259]    - tweaked: FALSE
[18:03:37.259]    - call: future::plan("sequential")
[18:03:37.261] plan(): nbrOfWorkers() = 1
> 
