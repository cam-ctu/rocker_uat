
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:16.244] plan(): Setting new future strategy stack:
[17:46:16.245] List of future strategies:
[17:46:16.245] 1. sequential:
[17:46:16.245]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:16.245]    - tweaked: FALSE
[17:46:16.245]    - call: future::plan("sequential")
[17:46:16.256] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[17:46:16.273] plan(): Setting new future strategy stack:
[17:46:16.273] List of future strategies:
[17:46:16.273] 1. sequential:
[17:46:16.273]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:16.273]    - tweaked: FALSE
[17:46:16.273]    - call: plan(sequential)
[17:46:16.284] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[17:46:16.290] getGlobalsAndPackages() ...
[17:46:16.290] Searching for globals...
[17:46:16.297] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.297] Searching for globals ... DONE
[17:46:16.297] Resolving globals: FALSE
[17:46:16.300] The total size of the 2 globals is 224 bytes (224 bytes)
[17:46:16.301] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.301] - globals: [2] ‘x’, ‘i’
[17:46:16.301] 
[17:46:16.301] getGlobalsAndPackages() ... DONE
[17:46:16.302] getGlobalsAndPackages() ...
[17:46:16.302] Searching for globals...
[17:46:16.303] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.303] Searching for globals ... DONE
[17:46:16.304] Resolving globals: FALSE
[17:46:16.304] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[17:46:16.305] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.305] - globals: [2] ‘x’, ‘i’
[17:46:16.305] 
[17:46:16.305] getGlobalsAndPackages() ... DONE
[17:46:16.305] getGlobalsAndPackages() ...
[17:46:16.305] Searching for globals...
[17:46:16.307] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.307] Searching for globals ... DONE
[17:46:16.307] Resolving globals: FALSE
[17:46:16.308] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[17:46:16.308] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.309] - globals: [2] ‘x’, ‘i’
[17:46:16.309] 
[17:46:16.309] getGlobalsAndPackages() ... DONE
[17:46:16.309] getGlobalsAndPackages() ...
[17:46:16.309] Searching for globals...
[17:46:16.311] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.311] Searching for globals ... DONE
[17:46:16.311] Resolving globals: FALSE
[17:46:16.312] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[17:46:16.312] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.313] - globals: [2] ‘x’, ‘i’
[17:46:16.313] 
[17:46:16.313] getGlobalsAndPackages() ... DONE
[17:46:16.313] getGlobalsAndPackages() ...
[17:46:16.313] Searching for globals...
[17:46:16.315] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.315] Searching for globals ... DONE
[17:46:16.315] Resolving globals: FALSE
[17:46:16.316] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[17:46:16.317] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.317] - globals: [2] ‘x’, ‘i’
[17:46:16.317] 
[17:46:16.317] getGlobalsAndPackages() ... DONE
[17:46:16.318] getGlobalsAndPackages() ...
[17:46:16.318] Searching for globals...
[17:46:16.319] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.319] Searching for globals ... DONE
[17:46:16.319] Resolving globals: FALSE
[17:46:16.321] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[17:46:16.321] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.321] - globals: [2] ‘x’, ‘i’
[17:46:16.321] 
[17:46:16.322] getGlobalsAndPackages() ... DONE
[17:46:16.322] getGlobalsAndPackages() ...
[17:46:16.322] Searching for globals...
[17:46:16.324] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.325] Searching for globals ... DONE
[17:46:16.325] Resolving globals: FALSE
[17:46:16.327] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[17:46:16.327] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.327] - globals: [2] ‘x’, ‘i’
[17:46:16.327] 
[17:46:16.327] getGlobalsAndPackages() ... DONE
[17:46:16.328] getGlobalsAndPackages() ...
[17:46:16.328] Searching for globals...
[17:46:16.329] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.329] Searching for globals ... DONE
[17:46:16.329] Resolving globals: FALSE
[17:46:16.332] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[17:46:16.332] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.332] - globals: [2] ‘x’, ‘i’
[17:46:16.332] 
[17:46:16.332] getGlobalsAndPackages() ... DONE
[17:46:16.333] getGlobalsAndPackages() ...
[17:46:16.333] Searching for globals...
[17:46:16.334] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.334] Searching for globals ... DONE
[17:46:16.334] Resolving globals: FALSE
[17:46:16.337] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[17:46:16.337] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.337] - globals: [2] ‘x’, ‘i’
[17:46:16.337] 
[17:46:16.337] getGlobalsAndPackages() ... DONE
[17:46:16.338] getGlobalsAndPackages() ...
[17:46:16.338] Searching for globals...
[17:46:16.339] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.339] Searching for globals ... DONE
[17:46:16.340] Resolving globals: FALSE
[17:46:16.342] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[17:46:16.342] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.343] - globals: [2] ‘x’, ‘i’
[17:46:16.343] 
[17:46:16.343] getGlobalsAndPackages() ... DONE
[17:46:16.343] getGlobalsAndPackages() ...
[17:46:16.343] Searching for globals...
[17:46:16.346] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.346] Searching for globals ... DONE
[17:46:16.346] Resolving globals: FALSE
[17:46:16.349] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[17:46:16.349] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.349] - globals: [2] ‘x’, ‘i’
[17:46:16.349] 
[17:46:16.349] getGlobalsAndPackages() ... DONE
[17:46:16.350] getGlobalsAndPackages() ...
[17:46:16.350] Searching for globals...
[17:46:16.351] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.351] Searching for globals ... DONE
[17:46:16.352] Resolving globals: FALSE
[17:46:16.355] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[17:46:16.355] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.355] - globals: [2] ‘x’, ‘i’
[17:46:16.355] 
[17:46:16.355] getGlobalsAndPackages() ... DONE
[17:46:16.356] getGlobalsAndPackages() ...
[17:46:16.356] Searching for globals...
[17:46:16.357] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.357] Searching for globals ... DONE
[17:46:16.357] Resolving globals: FALSE
[17:46:16.361] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[17:46:16.361] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.361] - globals: [2] ‘x’, ‘i’
[17:46:16.361] 
[17:46:16.361] getGlobalsAndPackages() ... DONE
[17:46:16.362] getGlobalsAndPackages() ...
[17:46:16.362] Searching for globals...
[17:46:16.363] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.363] Searching for globals ... DONE
[17:46:16.364] Resolving globals: FALSE
[17:46:16.368] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[17:46:16.368] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.368] - globals: [2] ‘x’, ‘i’
[17:46:16.369] 
[17:46:16.369] getGlobalsAndPackages() ... DONE
[17:46:16.369] getGlobalsAndPackages() ...
[17:46:16.369] Searching for globals...
[17:46:16.371] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.371] Searching for globals ... DONE
[17:46:16.371] Resolving globals: FALSE
[17:46:16.375] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[17:46:16.375] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.375] - globals: [2] ‘x’, ‘i’
[17:46:16.375] 
[17:46:16.375] getGlobalsAndPackages() ... DONE
[17:46:16.376] getGlobalsAndPackages() ...
[17:46:16.376] Searching for globals...
[17:46:16.377] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.377] Searching for globals ... DONE
[17:46:16.377] Resolving globals: FALSE
[17:46:16.381] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[17:46:16.382] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.382] - globals: [2] ‘x’, ‘i’
[17:46:16.382] 
[17:46:16.382] getGlobalsAndPackages() ... DONE
[17:46:16.382] getGlobalsAndPackages() ...
[17:46:16.383] Searching for globals...
[17:46:16.385] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.385] Searching for globals ... DONE
[17:46:16.385] Resolving globals: FALSE
[17:46:16.389] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[17:46:16.390] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.390] - globals: [2] ‘x’, ‘i’
[17:46:16.390] 
[17:46:16.390] getGlobalsAndPackages() ... DONE
[17:46:16.391] getGlobalsAndPackages() ...
[17:46:16.391] Searching for globals...
[17:46:16.392] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.392] Searching for globals ... DONE
[17:46:16.392] Resolving globals: FALSE
[17:46:16.397] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[17:46:16.397] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.397] - globals: [2] ‘x’, ‘i’
[17:46:16.397] 
[17:46:16.397] getGlobalsAndPackages() ... DONE
[17:46:16.398] getGlobalsAndPackages() ...
[17:46:16.398] Searching for globals...
[17:46:16.399] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.400] Searching for globals ... DONE
[17:46:16.400] Resolving globals: FALSE
[17:46:16.405] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[17:46:16.406] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.406] - globals: [2] ‘x’, ‘i’
[17:46:16.406] 
[17:46:16.406] getGlobalsAndPackages() ... DONE
[17:46:16.406] getGlobalsAndPackages() ...
[17:46:16.406] Searching for globals...
[17:46:16.408] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.408] Searching for globals ... DONE
[17:46:16.408] Resolving globals: FALSE
[17:46:16.413] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[17:46:16.413] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.413] - globals: [2] ‘x’, ‘i’
[17:46:16.414] 
[17:46:16.414] getGlobalsAndPackages() ... DONE
[17:46:16.414] getGlobalsAndPackages() ...
[17:46:16.414] Searching for globals...
[17:46:16.416] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.416] Searching for globals ... DONE
[17:46:16.416] Resolving globals: FALSE
[17:46:16.422] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[17:46:16.422] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.422] - globals: [2] ‘x’, ‘i’
[17:46:16.422] 
[17:46:16.422] getGlobalsAndPackages() ... DONE
[17:46:16.423] getGlobalsAndPackages() ...
[17:46:16.423] Searching for globals...
[17:46:16.424] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.425] Searching for globals ... DONE
[17:46:16.425] Resolving globals: FALSE
[17:46:16.430] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[17:46:16.430] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.430] - globals: [2] ‘x’, ‘i’
[17:46:16.431] 
[17:46:16.431] getGlobalsAndPackages() ... DONE
[17:46:16.431] getGlobalsAndPackages() ...
[17:46:16.431] Searching for globals...
[17:46:16.433] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.433] Searching for globals ... DONE
[17:46:16.433] Resolving globals: FALSE
[17:46:16.439] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[17:46:16.440] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.440] - globals: [2] ‘x’, ‘i’
[17:46:16.440] 
[17:46:16.440] getGlobalsAndPackages() ... DONE
[17:46:16.440] getGlobalsAndPackages() ...
[17:46:16.440] Searching for globals...
[17:46:16.442] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.442] Searching for globals ... DONE
[17:46:16.442] Resolving globals: FALSE
[17:46:16.448] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[17:46:16.448] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.448] - globals: [2] ‘x’, ‘i’
[17:46:16.448] 
[17:46:16.449] getGlobalsAndPackages() ... DONE
[17:46:16.449] getGlobalsAndPackages() ...
[17:46:16.449] Searching for globals...
[17:46:16.450] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.451] Searching for globals ... DONE
[17:46:16.451] Resolving globals: FALSE
[17:46:16.458] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[17:46:16.458] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.458] - globals: [2] ‘x’, ‘i’
[17:46:16.458] 
[17:46:16.458] getGlobalsAndPackages() ... DONE
[17:46:16.459] getGlobalsAndPackages() ...
[17:46:16.459] Searching for globals...
[17:46:16.460] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.460] Searching for globals ... DONE
[17:46:16.460] Resolving globals: FALSE
[17:46:16.467] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[17:46:16.467] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.467] - globals: [2] ‘x’, ‘i’
[17:46:16.467] 
[17:46:16.467] getGlobalsAndPackages() ... DONE
[17:46:16.468] getGlobalsAndPackages() ...
[17:46:16.468] Searching for globals...
[17:46:16.469] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.469] Searching for globals ... DONE
[17:46:16.469] Resolving globals: FALSE
[17:46:16.477] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[17:46:16.477] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.477] - globals: [2] ‘x’, ‘i’
[17:46:16.477] 
[17:46:16.477] getGlobalsAndPackages() ... DONE
[17:46:16.478] getGlobalsAndPackages() ...
[17:46:16.478] Searching for globals...
[17:46:16.479] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.480] Searching for globals ... DONE
[17:46:16.480] Resolving globals: FALSE
[17:46:16.486] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[17:46:16.487] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.487] - globals: [2] ‘x’, ‘i’
[17:46:16.487] 
[17:46:16.487] getGlobalsAndPackages() ... DONE
[17:46:16.487] getGlobalsAndPackages() ...
[17:46:16.488] Searching for globals...
[17:46:16.489] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.489] Searching for globals ... DONE
[17:46:16.489] Resolving globals: FALSE
[17:46:16.497] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[17:46:16.497] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.497] - globals: [2] ‘x’, ‘i’
[17:46:16.497] 
[17:46:16.498] getGlobalsAndPackages() ... DONE
[17:46:16.498] getGlobalsAndPackages() ...
[17:46:16.498] Searching for globals...
[17:46:16.499] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.500] Searching for globals ... DONE
[17:46:16.500] Resolving globals: FALSE
[17:46:16.508] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[17:46:16.508] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.508] - globals: [2] ‘x’, ‘i’
[17:46:16.508] 
[17:46:16.508] getGlobalsAndPackages() ... DONE
[17:46:16.509] getGlobalsAndPackages() ...
[17:46:16.509] Searching for globals...
[17:46:16.510] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.510] Searching for globals ... DONE
[17:46:16.510] Resolving globals: FALSE
[17:46:16.518] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[17:46:16.518] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.518] - globals: [2] ‘x’, ‘i’
[17:46:16.518] 
[17:46:16.519] getGlobalsAndPackages() ... DONE
[17:46:16.519] getGlobalsAndPackages() ...
[17:46:16.519] Searching for globals...
[17:46:16.520] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.521] Searching for globals ... DONE
[17:46:16.521] Resolving globals: FALSE
[17:46:16.529] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[17:46:16.530] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.530] - globals: [2] ‘x’, ‘i’
[17:46:16.530] 
[17:46:16.530] getGlobalsAndPackages() ... DONE
[17:46:16.531] getGlobalsAndPackages() ...
[17:46:16.531] Searching for globals...
[17:46:16.532] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.532] Searching for globals ... DONE
[17:46:16.532] Resolving globals: FALSE
[17:46:16.541] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[17:46:16.541] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.542] - globals: [2] ‘x’, ‘i’
[17:46:16.542] 
[17:46:16.542] getGlobalsAndPackages() ... DONE
[17:46:16.542] getGlobalsAndPackages() ...
[17:46:16.542] Searching for globals...
[17:46:16.544] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.544] Searching for globals ... DONE
[17:46:16.544] Resolving globals: FALSE
[17:46:16.552] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[17:46:16.552] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.553] - globals: [2] ‘x’, ‘i’
[17:46:16.553] 
[17:46:16.553] getGlobalsAndPackages() ... DONE
[17:46:16.553] getGlobalsAndPackages() ...
[17:46:16.553] Searching for globals...
[17:46:16.555] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.555] Searching for globals ... DONE
[17:46:16.555] Resolving globals: FALSE
[17:46:16.564] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[17:46:16.565] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.565] - globals: [2] ‘x’, ‘i’
[17:46:16.565] 
[17:46:16.565] getGlobalsAndPackages() ... DONE
[17:46:16.565] getGlobalsAndPackages() ...
[17:46:16.566] Searching for globals...
[17:46:16.567] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.567] Searching for globals ... DONE
[17:46:16.567] Resolving globals: FALSE
[17:46:16.577] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[17:46:16.577] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.577] - globals: [2] ‘x’, ‘i’
[17:46:16.577] 
[17:46:16.577] getGlobalsAndPackages() ... DONE
[17:46:16.578] getGlobalsAndPackages() ...
[17:46:16.578] Searching for globals...
[17:46:16.579] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.579] Searching for globals ... DONE
[17:46:16.580] Resolving globals: FALSE
[17:46:16.589] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[17:46:16.590] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.590] - globals: [2] ‘x’, ‘i’
[17:46:16.590] 
[17:46:16.590] getGlobalsAndPackages() ... DONE
[17:46:16.590] getGlobalsAndPackages() ...
[17:46:16.591] Searching for globals...
[17:46:16.592] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.592] Searching for globals ... DONE
[17:46:16.592] Resolving globals: FALSE
[17:46:16.601] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[17:46:16.602] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.602] - globals: [2] ‘x’, ‘i’
[17:46:16.602] 
[17:46:16.602] getGlobalsAndPackages() ... DONE
[17:46:16.603] getGlobalsAndPackages() ...
[17:46:16.603] Searching for globals...
[17:46:16.605] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.605] Searching for globals ... DONE
[17:46:16.605] Resolving globals: FALSE
[17:46:16.615] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[17:46:16.615] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.615] - globals: [2] ‘x’, ‘i’
[17:46:16.615] 
[17:46:16.615] getGlobalsAndPackages() ... DONE
[17:46:16.616] getGlobalsAndPackages() ...
[17:46:16.616] Searching for globals...
[17:46:16.617] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.617] Searching for globals ... DONE
[17:46:16.617] Resolving globals: FALSE
[17:46:16.649] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[17:46:16.649] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.649] - globals: [2] ‘x’, ‘i’
[17:46:16.649] 
[17:46:16.649] getGlobalsAndPackages() ... DONE
[17:46:16.650] getGlobalsAndPackages() ...
[17:46:16.650] Searching for globals...
[17:46:16.651] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.652] Searching for globals ... DONE
[17:46:16.652] Resolving globals: FALSE
[17:46:16.663] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[17:46:16.663] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.663] - globals: [2] ‘x’, ‘i’
[17:46:16.663] 
[17:46:16.663] getGlobalsAndPackages() ... DONE
[17:46:16.664] getGlobalsAndPackages() ...
[17:46:16.664] Searching for globals...
[17:46:16.665] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.666] Searching for globals ... DONE
[17:46:16.666] Resolving globals: FALSE
[17:46:16.677] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[17:46:16.678] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.678] - globals: [2] ‘x’, ‘i’
[17:46:16.678] 
[17:46:16.678] getGlobalsAndPackages() ... DONE
[17:46:16.678] getGlobalsAndPackages() ...
[17:46:16.678] Searching for globals...
[17:46:16.680] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.680] Searching for globals ... DONE
[17:46:16.680] Resolving globals: FALSE
[17:46:16.692] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[17:46:16.692] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.692] - globals: [2] ‘x’, ‘i’
[17:46:16.692] 
[17:46:16.692] getGlobalsAndPackages() ... DONE
[17:46:16.693] getGlobalsAndPackages() ...
[17:46:16.693] Searching for globals...
[17:46:16.694] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.694] Searching for globals ... DONE
[17:46:16.694] Resolving globals: FALSE
[17:46:16.705] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[17:46:16.706] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.706] - globals: [2] ‘x’, ‘i’
[17:46:16.706] 
[17:46:16.706] getGlobalsAndPackages() ... DONE
[17:46:16.707] getGlobalsAndPackages() ...
[17:46:16.707] Searching for globals...
[17:46:16.709] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.709] Searching for globals ... DONE
[17:46:16.709] Resolving globals: FALSE
[17:46:16.720] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[17:46:16.720] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.721] - globals: [2] ‘x’, ‘i’
[17:46:16.721] 
[17:46:16.721] getGlobalsAndPackages() ... DONE
[17:46:16.721] getGlobalsAndPackages() ...
[17:46:16.721] Searching for globals...
[17:46:16.723] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.723] Searching for globals ... DONE
[17:46:16.723] Resolving globals: FALSE
[17:46:16.735] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[17:46:16.736] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.736] - globals: [2] ‘x’, ‘i’
[17:46:16.736] 
[17:46:16.736] getGlobalsAndPackages() ... DONE
[17:46:16.736] getGlobalsAndPackages() ...
[17:46:16.737] Searching for globals...
[17:46:16.738] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.738] Searching for globals ... DONE
[17:46:16.738] Resolving globals: FALSE
[17:46:16.751] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[17:46:16.751] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.751] - globals: [2] ‘x’, ‘i’
[17:46:16.751] 
[17:46:16.751] getGlobalsAndPackages() ... DONE
[17:46:16.752] getGlobalsAndPackages() ...
[17:46:16.752] Searching for globals...
[17:46:16.753] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.754] Searching for globals ... DONE
[17:46:16.754] Resolving globals: FALSE
[17:46:16.766] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[17:46:16.767] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.767] - globals: [2] ‘x’, ‘i’
[17:46:16.767] 
[17:46:16.767] getGlobalsAndPackages() ... DONE
[17:46:16.767] getGlobalsAndPackages() ...
[17:46:16.768] Searching for globals...
[17:46:16.769] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.769] Searching for globals ... DONE
[17:46:16.769] Resolving globals: FALSE
[17:46:16.782] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[17:46:16.782] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.783] - globals: [2] ‘x’, ‘i’
[17:46:16.783] 
[17:46:16.783] getGlobalsAndPackages() ... DONE
[17:46:16.783] getGlobalsAndPackages() ...
[17:46:16.783] Searching for globals...
[17:46:16.785] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.785] Searching for globals ... DONE
[17:46:16.785] Resolving globals: FALSE
[17:46:16.798] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[17:46:16.799] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.799] - globals: [2] ‘x’, ‘i’
[17:46:16.799] 
[17:46:16.799] getGlobalsAndPackages() ... DONE
[17:46:16.800] getGlobalsAndPackages() ...
[17:46:16.800] Searching for globals...
[17:46:16.801] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.801] Searching for globals ... DONE
[17:46:16.801] Resolving globals: FALSE
[17:46:16.815] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[17:46:16.815] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.815] - globals: [2] ‘x’, ‘i’
[17:46:16.815] 
[17:46:16.815] getGlobalsAndPackages() ... DONE
[17:46:16.816] getGlobalsAndPackages() ...
[17:46:16.816] Searching for globals...
[17:46:16.817] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.818] Searching for globals ... DONE
[17:46:16.818] Resolving globals: FALSE
[17:46:16.831] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[17:46:16.831] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.832] - globals: [2] ‘x’, ‘i’
[17:46:16.832] 
[17:46:16.832] getGlobalsAndPackages() ... DONE
[17:46:16.832] getGlobalsAndPackages() ...
[17:46:16.832] Searching for globals...
[17:46:16.834] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.834] Searching for globals ... DONE
[17:46:16.834] Resolving globals: FALSE
[17:46:16.848] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[17:46:16.848] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.848] - globals: [2] ‘x’, ‘i’
[17:46:16.849] 
[17:46:16.849] getGlobalsAndPackages() ... DONE
[17:46:16.849] getGlobalsAndPackages() ...
[17:46:16.849] Searching for globals...
[17:46:16.851] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.852] Searching for globals ... DONE
[17:46:16.852] Resolving globals: FALSE
[17:46:16.866] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[17:46:16.866] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.866] - globals: [2] ‘x’, ‘i’
[17:46:16.866] 
[17:46:16.867] getGlobalsAndPackages() ... DONE
[17:46:16.867] getGlobalsAndPackages() ...
[17:46:16.867] Searching for globals...
[17:46:16.868] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.869] Searching for globals ... DONE
[17:46:16.869] Resolving globals: FALSE
[17:46:16.884] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[17:46:16.884] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.884] - globals: [2] ‘x’, ‘i’
[17:46:16.884] 
[17:46:16.884] getGlobalsAndPackages() ... DONE
[17:46:16.885] getGlobalsAndPackages() ...
[17:46:16.885] Searching for globals...
[17:46:16.886] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.887] Searching for globals ... DONE
[17:46:16.887] Resolving globals: FALSE
[17:46:16.902] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[17:46:16.902] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.902] - globals: [2] ‘x’, ‘i’
[17:46:16.902] 
[17:46:16.902] getGlobalsAndPackages() ... DONE
[17:46:16.903] getGlobalsAndPackages() ...
[17:46:16.903] Searching for globals...
[17:46:16.905] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.905] Searching for globals ... DONE
[17:46:16.905] Resolving globals: FALSE
[17:46:16.920] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[17:46:16.920] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.920] - globals: [2] ‘x’, ‘i’
[17:46:16.921] 
[17:46:16.921] getGlobalsAndPackages() ... DONE
[17:46:16.921] getGlobalsAndPackages() ...
[17:46:16.921] Searching for globals...
[17:46:16.923] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.923] Searching for globals ... DONE
[17:46:16.923] Resolving globals: FALSE
[17:46:16.938] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[17:46:16.939] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.939] - globals: [2] ‘x’, ‘i’
[17:46:16.939] 
[17:46:16.939] getGlobalsAndPackages() ... DONE
[17:46:16.939] getGlobalsAndPackages() ...
[17:46:16.939] Searching for globals...
[17:46:16.941] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.941] Searching for globals ... DONE
[17:46:16.941] Resolving globals: FALSE
[17:46:16.957] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[17:46:16.958] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.958] - globals: [2] ‘x’, ‘i’
[17:46:16.958] 
[17:46:16.958] getGlobalsAndPackages() ... DONE
[17:46:16.959] getGlobalsAndPackages() ...
[17:46:16.959] Searching for globals...
[17:46:16.960] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.960] Searching for globals ... DONE
[17:46:16.960] Resolving globals: FALSE
[17:46:16.977] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[17:46:16.978] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.978] - globals: [2] ‘x’, ‘i’
[17:46:16.978] 
[17:46:16.978] getGlobalsAndPackages() ... DONE
[17:46:16.978] getGlobalsAndPackages() ...
[17:46:16.979] Searching for globals...
[17:46:16.980] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.980] Searching for globals ... DONE
[17:46:16.980] Resolving globals: FALSE
[17:46:16.996] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[17:46:16.997] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:16.997] - globals: [2] ‘x’, ‘i’
[17:46:16.997] 
[17:46:16.997] getGlobalsAndPackages() ... DONE
[17:46:16.998] getGlobalsAndPackages() ...
[17:46:16.998] Searching for globals...
[17:46:16.999] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:16.999] Searching for globals ... DONE
[17:46:16.999] Resolving globals: FALSE
[17:46:17.016] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[17:46:17.016] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.016] - globals: [2] ‘x’, ‘i’
[17:46:17.016] 
[17:46:17.016] getGlobalsAndPackages() ... DONE
[17:46:17.017] getGlobalsAndPackages() ...
[17:46:17.017] Searching for globals...
[17:46:17.018] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.018] Searching for globals ... DONE
[17:46:17.018] Resolving globals: FALSE
[17:46:17.036] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[17:46:17.036] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.036] - globals: [2] ‘x’, ‘i’
[17:46:17.036] 
[17:46:17.036] getGlobalsAndPackages() ... DONE
[17:46:17.037] getGlobalsAndPackages() ...
[17:46:17.037] Searching for globals...
[17:46:17.038] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.038] Searching for globals ... DONE
[17:46:17.039] Resolving globals: FALSE
[17:46:17.056] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[17:46:17.056] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.057] - globals: [2] ‘x’, ‘i’
[17:46:17.057] 
[17:46:17.057] getGlobalsAndPackages() ... DONE
[17:46:17.057] getGlobalsAndPackages() ...
[17:46:17.057] Searching for globals...
[17:46:17.059] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.059] Searching for globals ... DONE
[17:46:17.059] Resolving globals: FALSE
[17:46:17.078] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[17:46:17.078] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.078] - globals: [2] ‘x’, ‘i’
[17:46:17.078] 
[17:46:17.078] getGlobalsAndPackages() ... DONE
[17:46:17.079] getGlobalsAndPackages() ...
[17:46:17.079] Searching for globals...
[17:46:17.081] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.081] Searching for globals ... DONE
[17:46:17.081] Resolving globals: FALSE
[17:46:17.099] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[17:46:17.100] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.100] - globals: [2] ‘x’, ‘i’
[17:46:17.100] 
[17:46:17.100] getGlobalsAndPackages() ... DONE
[17:46:17.101] getGlobalsAndPackages() ...
[17:46:17.101] Searching for globals...
[17:46:17.102] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.102] Searching for globals ... DONE
[17:46:17.102] Resolving globals: FALSE
[17:46:17.120] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[17:46:17.121] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.121] - globals: [2] ‘x’, ‘i’
[17:46:17.121] 
[17:46:17.121] getGlobalsAndPackages() ... DONE
[17:46:17.121] getGlobalsAndPackages() ...
[17:46:17.121] Searching for globals...
[17:46:17.123] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.123] Searching for globals ... DONE
[17:46:17.123] Resolving globals: FALSE
[17:46:17.141] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[17:46:17.142] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.142] - globals: [2] ‘x’, ‘i’
[17:46:17.142] 
[17:46:17.142] getGlobalsAndPackages() ... DONE
[17:46:17.142] getGlobalsAndPackages() ...
[17:46:17.143] Searching for globals...
[17:46:17.145] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.145] Searching for globals ... DONE
[17:46:17.145] Resolving globals: FALSE
[17:46:17.164] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[17:46:17.164] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.164] - globals: [2] ‘x’, ‘i’
[17:46:17.164] 
[17:46:17.164] getGlobalsAndPackages() ... DONE
[17:46:17.165] getGlobalsAndPackages() ...
[17:46:17.165] Searching for globals...
[17:46:17.166] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.166] Searching for globals ... DONE
[17:46:17.167] Resolving globals: FALSE
[17:46:17.185] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[17:46:17.186] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.186] - globals: [2] ‘x’, ‘i’
[17:46:17.186] 
[17:46:17.186] getGlobalsAndPackages() ... DONE
[17:46:17.186] getGlobalsAndPackages() ...
[17:46:17.186] Searching for globals...
[17:46:17.189] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.189] Searching for globals ... DONE
[17:46:17.189] Resolving globals: FALSE
[17:46:17.208] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[17:46:17.209] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.209] - globals: [2] ‘x’, ‘i’
[17:46:17.209] 
[17:46:17.209] getGlobalsAndPackages() ... DONE
[17:46:17.209] getGlobalsAndPackages() ...
[17:46:17.209] Searching for globals...
[17:46:17.211] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.211] Searching for globals ... DONE
[17:46:17.211] Resolving globals: FALSE
[17:46:17.231] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[17:46:17.231] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.231] - globals: [2] ‘x’, ‘i’
[17:46:17.231] 
[17:46:17.231] getGlobalsAndPackages() ... DONE
[17:46:17.232] getGlobalsAndPackages() ...
[17:46:17.232] Searching for globals...
[17:46:17.234] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.234] Searching for globals ... DONE
[17:46:17.235] Resolving globals: FALSE
[17:46:17.254] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[17:46:17.254] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.254] - globals: [2] ‘x’, ‘i’
[17:46:17.255] 
[17:46:17.255] getGlobalsAndPackages() ... DONE
[17:46:17.255] getGlobalsAndPackages() ...
[17:46:17.255] Searching for globals...
[17:46:17.257] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.257] Searching for globals ... DONE
[17:46:17.257] Resolving globals: FALSE
[17:46:17.277] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[17:46:17.278] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.278] - globals: [2] ‘x’, ‘i’
[17:46:17.278] 
[17:46:17.278] getGlobalsAndPackages() ... DONE
[17:46:17.279] getGlobalsAndPackages() ...
[17:46:17.279] Searching for globals...
[17:46:17.280] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.280] Searching for globals ... DONE
[17:46:17.280] Resolving globals: FALSE
[17:46:17.302] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[17:46:17.302] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.302] - globals: [2] ‘x’, ‘i’
[17:46:17.302] 
[17:46:17.302] getGlobalsAndPackages() ... DONE
[17:46:17.303] getGlobalsAndPackages() ...
[17:46:17.303] Searching for globals...
[17:46:17.304] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.304] Searching for globals ... DONE
[17:46:17.305] Resolving globals: FALSE
[17:46:17.327] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[17:46:17.327] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.327] - globals: [2] ‘x’, ‘i’
[17:46:17.328] 
[17:46:17.328] getGlobalsAndPackages() ... DONE
[17:46:17.328] getGlobalsAndPackages() ...
[17:46:17.328] Searching for globals...
[17:46:17.330] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.330] Searching for globals ... DONE
[17:46:17.330] Resolving globals: FALSE
[17:46:17.352] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[17:46:17.352] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.352] - globals: [2] ‘x’, ‘i’
[17:46:17.352] 
[17:46:17.352] getGlobalsAndPackages() ... DONE
[17:46:17.354] getGlobalsAndPackages() ...
[17:46:17.354] Searching for globals...
[17:46:17.355] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.355] Searching for globals ... DONE
[17:46:17.356] Resolving globals: FALSE
[17:46:17.377] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[17:46:17.377] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.377] - globals: [2] ‘x’, ‘i’
[17:46:17.377] 
[17:46:17.377] getGlobalsAndPackages() ... DONE
[17:46:17.378] getGlobalsAndPackages() ...
[17:46:17.378] Searching for globals...
[17:46:17.379] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.380] Searching for globals ... DONE
[17:46:17.380] Resolving globals: FALSE
[17:46:17.402] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[17:46:17.403] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.403] - globals: [2] ‘x’, ‘i’
[17:46:17.403] 
[17:46:17.403] getGlobalsAndPackages() ... DONE
[17:46:17.403] getGlobalsAndPackages() ...
[17:46:17.403] Searching for globals...
[17:46:17.405] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.405] Searching for globals ... DONE
[17:46:17.405] Resolving globals: FALSE
[17:46:17.428] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[17:46:17.428] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.428] - globals: [2] ‘x’, ‘i’
[17:46:17.428] 
[17:46:17.429] getGlobalsAndPackages() ... DONE
[17:46:17.429] getGlobalsAndPackages() ...
[17:46:17.429] Searching for globals...
[17:46:17.431] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.431] Searching for globals ... DONE
[17:46:17.431] Resolving globals: FALSE
[17:46:17.453] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[17:46:17.453] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.453] - globals: [2] ‘x’, ‘i’
[17:46:17.453] 
[17:46:17.453] getGlobalsAndPackages() ... DONE
[17:46:17.454] getGlobalsAndPackages() ...
[17:46:17.454] Searching for globals...
[17:46:17.456] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.456] Searching for globals ... DONE
[17:46:17.456] Resolving globals: FALSE
[17:46:17.479] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[17:46:17.480] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.480] - globals: [2] ‘x’, ‘i’
[17:46:17.480] 
[17:46:17.480] getGlobalsAndPackages() ... DONE
[17:46:17.480] getGlobalsAndPackages() ...
[17:46:17.481] Searching for globals...
[17:46:17.482] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.482] Searching for globals ... DONE
[17:46:17.482] Resolving globals: FALSE
[17:46:17.506] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[17:46:17.507] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.507] - globals: [2] ‘x’, ‘i’
[17:46:17.507] 
[17:46:17.507] getGlobalsAndPackages() ... DONE
[17:46:17.507] getGlobalsAndPackages() ...
[17:46:17.508] Searching for globals...
[17:46:17.509] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.509] Searching for globals ... DONE
[17:46:17.509] Resolving globals: FALSE
[17:46:17.533] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[17:46:17.534] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.534] - globals: [2] ‘x’, ‘i’
[17:46:17.534] 
[17:46:17.534] getGlobalsAndPackages() ... DONE
[17:46:17.535] getGlobalsAndPackages() ...
[17:46:17.535] Searching for globals...
[17:46:17.536] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.536] Searching for globals ... DONE
[17:46:17.536] Resolving globals: FALSE
[17:46:17.561] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[17:46:17.561] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.561] - globals: [2] ‘x’, ‘i’
[17:46:17.561] 
[17:46:17.561] getGlobalsAndPackages() ... DONE
[17:46:17.562] getGlobalsAndPackages() ...
[17:46:17.562] Searching for globals...
[17:46:17.564] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.564] Searching for globals ... DONE
[17:46:17.564] Resolving globals: FALSE
[17:46:17.587] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[17:46:17.588] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.588] - globals: [2] ‘x’, ‘i’
[17:46:17.588] 
[17:46:17.589] getGlobalsAndPackages() ... DONE
[17:46:17.589] getGlobalsAndPackages() ...
[17:46:17.589] Searching for globals...
[17:46:17.591] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.591] Searching for globals ... DONE
[17:46:17.591] Resolving globals: FALSE
[17:46:17.616] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[17:46:17.617] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.617] - globals: [2] ‘x’, ‘i’
[17:46:17.617] 
[17:46:17.617] getGlobalsAndPackages() ... DONE
[17:46:17.617] getGlobalsAndPackages() ...
[17:46:17.618] Searching for globals...
[17:46:17.620] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.620] Searching for globals ... DONE
[17:46:17.620] Resolving globals: FALSE
[17:46:17.645] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[17:46:17.646] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.646] - globals: [2] ‘x’, ‘i’
[17:46:17.646] 
[17:46:17.646] getGlobalsAndPackages() ... DONE
[17:46:17.646] getGlobalsAndPackages() ...
[17:46:17.646] Searching for globals...
[17:46:17.648] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.648] Searching for globals ... DONE
[17:46:17.648] Resolving globals: FALSE
[17:46:17.674] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[17:46:17.674] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.674] - globals: [2] ‘x’, ‘i’
[17:46:17.674] 
[17:46:17.674] getGlobalsAndPackages() ... DONE
[17:46:17.675] getGlobalsAndPackages() ...
[17:46:17.675] Searching for globals...
[17:46:17.676] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.677] Searching for globals ... DONE
[17:46:17.677] Resolving globals: FALSE
[17:46:17.702] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[17:46:17.702] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.703] - globals: [2] ‘x’, ‘i’
[17:46:17.703] 
[17:46:17.703] getGlobalsAndPackages() ... DONE
[17:46:17.703] getGlobalsAndPackages() ...
[17:46:17.703] Searching for globals...
[17:46:17.705] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.705] Searching for globals ... DONE
[17:46:17.705] Resolving globals: FALSE
[17:46:17.731] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[17:46:17.731] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.731] - globals: [2] ‘x’, ‘i’
[17:46:17.732] 
[17:46:17.732] getGlobalsAndPackages() ... DONE
[17:46:17.732] getGlobalsAndPackages() ...
[17:46:17.732] Searching for globals...
[17:46:17.734] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.734] Searching for globals ... DONE
[17:46:17.734] Resolving globals: FALSE
[17:46:17.760] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[17:46:17.761] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.761] - globals: [2] ‘x’, ‘i’
[17:46:17.761] 
[17:46:17.761] getGlobalsAndPackages() ... DONE
[17:46:17.762] getGlobalsAndPackages() ...
[17:46:17.762] Searching for globals...
[17:46:17.763] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.763] Searching for globals ... DONE
[17:46:17.763] Resolving globals: FALSE
[17:46:17.791] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[17:46:17.791] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.791] - globals: [2] ‘x’, ‘i’
[17:46:17.792] 
[17:46:17.792] getGlobalsAndPackages() ... DONE
[17:46:17.792] getGlobalsAndPackages() ...
[17:46:17.792] Searching for globals...
[17:46:17.795] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.795] Searching for globals ... DONE
[17:46:17.795] Resolving globals: FALSE
[17:46:17.822] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[17:46:17.823] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.823] - globals: [2] ‘x’, ‘i’
[17:46:17.823] 
[17:46:17.823] getGlobalsAndPackages() ... DONE
[17:46:17.824] getGlobalsAndPackages() ...
[17:46:17.824] Searching for globals...
[17:46:17.825] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.825] Searching for globals ... DONE
[17:46:17.826] Resolving globals: FALSE
[17:46:17.853] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[17:46:17.853] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.853] - globals: [2] ‘x’, ‘i’
[17:46:17.853] 
[17:46:17.853] getGlobalsAndPackages() ... DONE
[17:46:17.854] getGlobalsAndPackages() ...
[17:46:17.854] Searching for globals...
[17:46:17.855] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.856] Searching for globals ... DONE
[17:46:17.856] Resolving globals: FALSE
[17:46:17.883] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[17:46:17.883] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.883] - globals: [2] ‘x’, ‘i’
[17:46:17.883] 
[17:46:17.884] getGlobalsAndPackages() ... DONE
[17:46:17.884] getGlobalsAndPackages() ...
[17:46:17.884] Searching for globals...
[17:46:17.886] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.886] Searching for globals ... DONE
[17:46:17.886] Resolving globals: FALSE
[17:46:17.913] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[17:46:17.914] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.914] - globals: [2] ‘x’, ‘i’
[17:46:17.914] 
[17:46:17.914] getGlobalsAndPackages() ... DONE
[17:46:17.915] getGlobalsAndPackages() ...
[17:46:17.915] Searching for globals...
[17:46:17.916] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[17:46:17.916] Searching for globals ... DONE
[17:46:17.916] Resolving globals: FALSE
[17:46:17.946] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[17:46:17.947] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[17:46:17.947] - globals: [2] ‘x’, ‘i’
[17:46:17.947] 
[17:46:17.947] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[17:46:17.948] run() for ‘Future’ ...
[17:46:17.949] - state: ‘created’
[17:46:17.949] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:17.949] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:17.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:17.949]   - Field: ‘label’
[17:46:17.949]   - Field: ‘local’
[17:46:17.950]   - Field: ‘owner’
[17:46:17.950]   - Field: ‘envir’
[17:46:17.950]   - Field: ‘packages’
[17:46:17.950]   - Field: ‘gc’
[17:46:17.950]   - Field: ‘conditions’
[17:46:17.950]   - Field: ‘expr’
[17:46:17.950]   - Field: ‘uuid’
[17:46:17.950]   - Field: ‘seed’
[17:46:17.950]   - Field: ‘version’
[17:46:17.950]   - Field: ‘result’
[17:46:17.950]   - Field: ‘asynchronous’
[17:46:17.951]   - Field: ‘calls’
[17:46:17.951]   - Field: ‘globals’
[17:46:17.951]   - Field: ‘stdout’
[17:46:17.951]   - Field: ‘earlySignal’
[17:46:17.951]   - Field: ‘lazy’
[17:46:17.951]   - Field: ‘state’
[17:46:17.951] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:17.951] - Launch lazy future ...
[17:46:17.952] Packages needed by the future expression (n = 0): <none>
[17:46:17.952] Packages needed by future strategies (n = 0): <none>
[17:46:17.953] {
[17:46:17.953]     {
[17:46:17.953]         {
[17:46:17.953]             ...future.startTime <- base::Sys.time()
[17:46:17.953]             {
[17:46:17.953]                 {
[17:46:17.953]                   {
[17:46:17.953]                     base::local({
[17:46:17.953]                       has_future <- base::requireNamespace("future", 
[17:46:17.953]                         quietly = TRUE)
[17:46:17.953]                       if (has_future) {
[17:46:17.953]                         ns <- base::getNamespace("future")
[17:46:17.953]                         version <- ns[[".package"]][["version"]]
[17:46:17.953]                         if (is.null(version)) 
[17:46:17.953]                           version <- utils::packageVersion("future")
[17:46:17.953]                       }
[17:46:17.953]                       else {
[17:46:17.953]                         version <- NULL
[17:46:17.953]                       }
[17:46:17.953]                       if (!has_future || version < "1.8.0") {
[17:46:17.953]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:17.953]                           "", base::R.version$version.string), 
[17:46:17.953]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:17.953]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:17.953]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:17.953]                             "release", "version")], collapse = " "), 
[17:46:17.953]                           hostname = base::Sys.info()[["nodename"]])
[17:46:17.953]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:17.953]                           info)
[17:46:17.953]                         info <- base::paste(info, collapse = "; ")
[17:46:17.953]                         if (!has_future) {
[17:46:17.953]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:17.953]                             info)
[17:46:17.953]                         }
[17:46:17.953]                         else {
[17:46:17.953]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:17.953]                             info, version)
[17:46:17.953]                         }
[17:46:17.953]                         base::stop(msg)
[17:46:17.953]                       }
[17:46:17.953]                     })
[17:46:17.953]                   }
[17:46:17.953]                   ...future.strategy.old <- future::plan("list")
[17:46:17.953]                   options(future.plan = NULL)
[17:46:17.953]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:17.953]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:17.953]                 }
[17:46:17.953]                 ...future.workdir <- getwd()
[17:46:17.953]             }
[17:46:17.953]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:17.953]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:17.953]         }
[17:46:17.953]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:17.953]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:17.953]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:17.953]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:17.953]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:17.953]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:17.953]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:17.953]             base::names(...future.oldOptions))
[17:46:17.953]     }
[17:46:17.953]     if (TRUE) {
[17:46:17.953]     }
[17:46:17.953]     else {
[17:46:17.953]         if (NA) {
[17:46:17.953]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:17.953]                 open = "w")
[17:46:17.953]         }
[17:46:17.953]         else {
[17:46:17.953]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:17.953]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:17.953]         }
[17:46:17.953]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:17.953]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:17.953]             base::sink(type = "output", split = FALSE)
[17:46:17.953]             base::close(...future.stdout)
[17:46:17.953]         }, add = TRUE)
[17:46:17.953]     }
[17:46:17.953]     ...future.frame <- base::sys.nframe()
[17:46:17.953]     ...future.conditions <- base::list()
[17:46:17.953]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:17.953]     if (FALSE) {
[17:46:17.953]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:17.953]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:17.953]     }
[17:46:17.953]     ...future.result <- base::tryCatch({
[17:46:17.953]         base::withCallingHandlers({
[17:46:17.953]             ...future.value <- base::withVisible(base::local({
[17:46:17.953]                 x[[i - 2]] + x[[i - 1]]
[17:46:17.953]             }))
[17:46:17.953]             future::FutureResult(value = ...future.value$value, 
[17:46:17.953]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:17.953]                   ...future.rng), globalenv = if (FALSE) 
[17:46:17.953]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:17.953]                     ...future.globalenv.names))
[17:46:17.953]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:17.953]         }, condition = base::local({
[17:46:17.953]             c <- base::c
[17:46:17.953]             inherits <- base::inherits
[17:46:17.953]             invokeRestart <- base::invokeRestart
[17:46:17.953]             length <- base::length
[17:46:17.953]             list <- base::list
[17:46:17.953]             seq.int <- base::seq.int
[17:46:17.953]             signalCondition <- base::signalCondition
[17:46:17.953]             sys.calls <- base::sys.calls
[17:46:17.953]             `[[` <- base::`[[`
[17:46:17.953]             `+` <- base::`+`
[17:46:17.953]             `<<-` <- base::`<<-`
[17:46:17.953]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:17.953]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:17.953]                   3L)]
[17:46:17.953]             }
[17:46:17.953]             function(cond) {
[17:46:17.953]                 is_error <- inherits(cond, "error")
[17:46:17.953]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:17.953]                   NULL)
[17:46:17.953]                 if (is_error) {
[17:46:17.953]                   sessionInformation <- function() {
[17:46:17.953]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:17.953]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:17.953]                       search = base::search(), system = base::Sys.info())
[17:46:17.953]                   }
[17:46:17.953]                   ...future.conditions[[length(...future.conditions) + 
[17:46:17.953]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:17.953]                     cond$call), session = sessionInformation(), 
[17:46:17.953]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:17.953]                   signalCondition(cond)
[17:46:17.953]                 }
[17:46:17.953]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[17:46:17.953]                 "immediateCondition"))) {
[17:46:17.953]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:17.953]                   ...future.conditions[[length(...future.conditions) + 
[17:46:17.953]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:17.953]                   if (TRUE && !signal) {
[17:46:17.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:17.953]                     {
[17:46:17.953]                       inherits <- base::inherits
[17:46:17.953]                       invokeRestart <- base::invokeRestart
[17:46:17.953]                       is.null <- base::is.null
[17:46:17.953]                       muffled <- FALSE
[17:46:17.953]                       if (inherits(cond, "message")) {
[17:46:17.953]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:17.953]                         if (muffled) 
[17:46:17.953]                           invokeRestart("muffleMessage")
[17:46:17.953]                       }
[17:46:17.953]                       else if (inherits(cond, "warning")) {
[17:46:17.953]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:17.953]                         if (muffled) 
[17:46:17.953]                           invokeRestart("muffleWarning")
[17:46:17.953]                       }
[17:46:17.953]                       else if (inherits(cond, "condition")) {
[17:46:17.953]                         if (!is.null(pattern)) {
[17:46:17.953]                           computeRestarts <- base::computeRestarts
[17:46:17.953]                           grepl <- base::grepl
[17:46:17.953]                           restarts <- computeRestarts(cond)
[17:46:17.953]                           for (restart in restarts) {
[17:46:17.953]                             name <- restart$name
[17:46:17.953]                             if (is.null(name)) 
[17:46:17.953]                               next
[17:46:17.953]                             if (!grepl(pattern, name)) 
[17:46:17.953]                               next
[17:46:17.953]                             invokeRestart(restart)
[17:46:17.953]                             muffled <- TRUE
[17:46:17.953]                             break
[17:46:17.953]                           }
[17:46:17.953]                         }
[17:46:17.953]                       }
[17:46:17.953]                       invisible(muffled)
[17:46:17.953]                     }
[17:46:17.953]                     muffleCondition(cond, pattern = "^muffle")
[17:46:17.953]                   }
[17:46:17.953]                 }
[17:46:17.953]                 else {
[17:46:17.953]                   if (TRUE) {
[17:46:17.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:17.953]                     {
[17:46:17.953]                       inherits <- base::inherits
[17:46:17.953]                       invokeRestart <- base::invokeRestart
[17:46:17.953]                       is.null <- base::is.null
[17:46:17.953]                       muffled <- FALSE
[17:46:17.953]                       if (inherits(cond, "message")) {
[17:46:17.953]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:17.953]                         if (muffled) 
[17:46:17.953]                           invokeRestart("muffleMessage")
[17:46:17.953]                       }
[17:46:17.953]                       else if (inherits(cond, "warning")) {
[17:46:17.953]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:17.953]                         if (muffled) 
[17:46:17.953]                           invokeRestart("muffleWarning")
[17:46:17.953]                       }
[17:46:17.953]                       else if (inherits(cond, "condition")) {
[17:46:17.953]                         if (!is.null(pattern)) {
[17:46:17.953]                           computeRestarts <- base::computeRestarts
[17:46:17.953]                           grepl <- base::grepl
[17:46:17.953]                           restarts <- computeRestarts(cond)
[17:46:17.953]                           for (restart in restarts) {
[17:46:17.953]                             name <- restart$name
[17:46:17.953]                             if (is.null(name)) 
[17:46:17.953]                               next
[17:46:17.953]                             if (!grepl(pattern, name)) 
[17:46:17.953]                               next
[17:46:17.953]                             invokeRestart(restart)
[17:46:17.953]                             muffled <- TRUE
[17:46:17.953]                             break
[17:46:17.953]                           }
[17:46:17.953]                         }
[17:46:17.953]                       }
[17:46:17.953]                       invisible(muffled)
[17:46:17.953]                     }
[17:46:17.953]                     muffleCondition(cond, pattern = "^muffle")
[17:46:17.953]                   }
[17:46:17.953]                 }
[17:46:17.953]             }
[17:46:17.953]         }))
[17:46:17.953]     }, error = function(ex) {
[17:46:17.953]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:17.953]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:17.953]                 ...future.rng), started = ...future.startTime, 
[17:46:17.953]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:17.953]             version = "1.8"), class = "FutureResult")
[17:46:17.953]     }, finally = {
[17:46:17.953]         if (!identical(...future.workdir, getwd())) 
[17:46:17.953]             setwd(...future.workdir)
[17:46:17.953]         {
[17:46:17.953]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:17.953]                 ...future.oldOptions$nwarnings <- NULL
[17:46:17.953]             }
[17:46:17.953]             base::options(...future.oldOptions)
[17:46:17.953]             if (.Platform$OS.type == "windows") {
[17:46:17.953]                 old_names <- names(...future.oldEnvVars)
[17:46:17.953]                 envs <- base::Sys.getenv()
[17:46:17.953]                 names <- names(envs)
[17:46:17.953]                 common <- intersect(names, old_names)
[17:46:17.953]                 added <- setdiff(names, old_names)
[17:46:17.953]                 removed <- setdiff(old_names, names)
[17:46:17.953]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:17.953]                   envs[common]]
[17:46:17.953]                 NAMES <- toupper(changed)
[17:46:17.953]                 args <- list()
[17:46:17.953]                 for (kk in seq_along(NAMES)) {
[17:46:17.953]                   name <- changed[[kk]]
[17:46:17.953]                   NAME <- NAMES[[kk]]
[17:46:17.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:17.953]                     next
[17:46:17.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:17.953]                 }
[17:46:17.953]                 NAMES <- toupper(added)
[17:46:17.953]                 for (kk in seq_along(NAMES)) {
[17:46:17.953]                   name <- added[[kk]]
[17:46:17.953]                   NAME <- NAMES[[kk]]
[17:46:17.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:17.953]                     next
[17:46:17.953]                   args[[name]] <- ""
[17:46:17.953]                 }
[17:46:17.953]                 NAMES <- toupper(removed)
[17:46:17.953]                 for (kk in seq_along(NAMES)) {
[17:46:17.953]                   name <- removed[[kk]]
[17:46:17.953]                   NAME <- NAMES[[kk]]
[17:46:17.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:17.953]                     next
[17:46:17.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:17.953]                 }
[17:46:17.953]                 if (length(args) > 0) 
[17:46:17.953]                   base::do.call(base::Sys.setenv, args = args)
[17:46:17.953]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:17.953]             }
[17:46:17.953]             else {
[17:46:17.953]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:17.953]             }
[17:46:17.953]             {
[17:46:17.953]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:17.953]                   0L) {
[17:46:17.953]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:17.953]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:17.953]                   base::options(opts)
[17:46:17.953]                 }
[17:46:17.953]                 {
[17:46:17.953]                   {
[17:46:17.953]                     NULL
[17:46:17.953]                     RNGkind("Mersenne-Twister")
[17:46:17.953]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:17.953]                       inherits = FALSE)
[17:46:17.953]                   }
[17:46:17.953]                   options(future.plan = NULL)
[17:46:17.953]                   if (is.na(NA_character_)) 
[17:46:17.953]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:17.953]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:17.953]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:17.953]                     .init = FALSE)
[17:46:17.953]                 }
[17:46:17.953]             }
[17:46:17.953]         }
[17:46:17.953]     })
[17:46:17.953]     if (FALSE) {
[17:46:17.953]         base::sink(type = "output", split = FALSE)
[17:46:17.953]         if (NA) {
[17:46:17.953]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:17.953]         }
[17:46:17.953]         else {
[17:46:17.953]             ...future.result["stdout"] <- base::list(NULL)
[17:46:17.953]         }
[17:46:17.953]         base::close(...future.stdout)
[17:46:17.953]         ...future.stdout <- NULL
[17:46:17.953]     }
[17:46:17.953]     ...future.result$conditions <- ...future.conditions
[17:46:17.953]     ...future.result$finished <- base::Sys.time()
[17:46:17.953]     ...future.result
[17:46:17.953] }
[17:46:17.955] assign_globals() ...
[17:46:17.955] List of 2
[17:46:17.955]  $ x:Classes 'listenv', 'environment' <environment: 0x560ab3f96238> 
[17:46:17.955]  $ i: int 7
[17:46:17.955]  - attr(*, "where")=List of 2
[17:46:17.955]   ..$ x:<environment: R_EmptyEnv> 
[17:46:17.955]   ..$ i:<environment: R_EmptyEnv> 
[17:46:17.955]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:17.955]  - attr(*, "resolved")= logi FALSE
[17:46:17.955]  - attr(*, "total_size")= num 34264
[17:46:17.955]  - attr(*, "already-done")= logi TRUE
[17:46:17.962] - copied ‘x’ to environment
[17:46:17.962] - copied ‘i’ to environment
[17:46:17.962] assign_globals() ... done
[17:46:17.963] plan(): Setting new future strategy stack:
[17:46:17.963] List of future strategies:
[17:46:17.963] 1. sequential:
[17:46:17.963]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:17.963]    - tweaked: FALSE
[17:46:17.963]    - call: NULL
[17:46:17.963] plan(): nbrOfWorkers() = 1
[17:46:18.038] plan(): Setting new future strategy stack:
[17:46:18.038] List of future strategies:
[17:46:18.038] 1. sequential:
[17:46:18.038]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:18.038]    - tweaked: FALSE
[17:46:18.038]    - call: plan(sequential)
[17:46:18.039] plan(): nbrOfWorkers() = 1
[17:46:18.039] SequentialFuture started (and completed)
[17:46:18.039] - Launch lazy future ... done
[17:46:18.039] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[17:46:18.039] run() for ‘Future’ ...
[17:46:18.040] - state: ‘created’
[17:46:18.040] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:18.040] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:18.040] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:18.040]   - Field: ‘label’
[17:46:18.040]   - Field: ‘local’
[17:46:18.040]   - Field: ‘owner’
[17:46:18.040]   - Field: ‘envir’
[17:46:18.040]   - Field: ‘packages’
[17:46:18.041]   - Field: ‘gc’
[17:46:18.041]   - Field: ‘conditions’
[17:46:18.041]   - Field: ‘expr’
[17:46:18.041]   - Field: ‘uuid’
[17:46:18.041]   - Field: ‘seed’
[17:46:18.041]   - Field: ‘version’
[17:46:18.041]   - Field: ‘result’
[17:46:18.041]   - Field: ‘asynchronous’
[17:46:18.041]   - Field: ‘calls’
[17:46:18.041]   - Field: ‘globals’
[17:46:18.041]   - Field: ‘stdout’
[17:46:18.042]   - Field: ‘earlySignal’
[17:46:18.042]   - Field: ‘lazy’
[17:46:18.042]   - Field: ‘state’
[17:46:18.042] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:18.042] - Launch lazy future ...
[17:46:18.042] Packages needed by the future expression (n = 0): <none>
[17:46:18.042] Packages needed by future strategies (n = 0): <none>
[17:46:18.043] {
[17:46:18.043]     {
[17:46:18.043]         {
[17:46:18.043]             ...future.startTime <- base::Sys.time()
[17:46:18.043]             {
[17:46:18.043]                 {
[17:46:18.043]                   {
[17:46:18.043]                     base::local({
[17:46:18.043]                       has_future <- base::requireNamespace("future", 
[17:46:18.043]                         quietly = TRUE)
[17:46:18.043]                       if (has_future) {
[17:46:18.043]                         ns <- base::getNamespace("future")
[17:46:18.043]                         version <- ns[[".package"]][["version"]]
[17:46:18.043]                         if (is.null(version)) 
[17:46:18.043]                           version <- utils::packageVersion("future")
[17:46:18.043]                       }
[17:46:18.043]                       else {
[17:46:18.043]                         version <- NULL
[17:46:18.043]                       }
[17:46:18.043]                       if (!has_future || version < "1.8.0") {
[17:46:18.043]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:18.043]                           "", base::R.version$version.string), 
[17:46:18.043]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:18.043]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:18.043]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:18.043]                             "release", "version")], collapse = " "), 
[17:46:18.043]                           hostname = base::Sys.info()[["nodename"]])
[17:46:18.043]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:18.043]                           info)
[17:46:18.043]                         info <- base::paste(info, collapse = "; ")
[17:46:18.043]                         if (!has_future) {
[17:46:18.043]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:18.043]                             info)
[17:46:18.043]                         }
[17:46:18.043]                         else {
[17:46:18.043]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:18.043]                             info, version)
[17:46:18.043]                         }
[17:46:18.043]                         base::stop(msg)
[17:46:18.043]                       }
[17:46:18.043]                     })
[17:46:18.043]                   }
[17:46:18.043]                   ...future.strategy.old <- future::plan("list")
[17:46:18.043]                   options(future.plan = NULL)
[17:46:18.043]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:18.043]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:18.043]                 }
[17:46:18.043]                 ...future.workdir <- getwd()
[17:46:18.043]             }
[17:46:18.043]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:18.043]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:18.043]         }
[17:46:18.043]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:18.043]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:18.043]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:18.043]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:18.043]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:18.043]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:18.043]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:18.043]             base::names(...future.oldOptions))
[17:46:18.043]     }
[17:46:18.043]     if (TRUE) {
[17:46:18.043]     }
[17:46:18.043]     else {
[17:46:18.043]         if (NA) {
[17:46:18.043]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:18.043]                 open = "w")
[17:46:18.043]         }
[17:46:18.043]         else {
[17:46:18.043]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:18.043]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:18.043]         }
[17:46:18.043]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:18.043]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:18.043]             base::sink(type = "output", split = FALSE)
[17:46:18.043]             base::close(...future.stdout)
[17:46:18.043]         }, add = TRUE)
[17:46:18.043]     }
[17:46:18.043]     ...future.frame <- base::sys.nframe()
[17:46:18.043]     ...future.conditions <- base::list()
[17:46:18.043]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:18.043]     if (FALSE) {
[17:46:18.043]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:18.043]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:18.043]     }
[17:46:18.043]     ...future.result <- base::tryCatch({
[17:46:18.043]         base::withCallingHandlers({
[17:46:18.043]             ...future.value <- base::withVisible(base::local({
[17:46:18.043]                 x[[i - 2]] + x[[i - 1]]
[17:46:18.043]             }))
[17:46:18.043]             future::FutureResult(value = ...future.value$value, 
[17:46:18.043]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:18.043]                   ...future.rng), globalenv = if (FALSE) 
[17:46:18.043]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:18.043]                     ...future.globalenv.names))
[17:46:18.043]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:18.043]         }, condition = base::local({
[17:46:18.043]             c <- base::c
[17:46:18.043]             inherits <- base::inherits
[17:46:18.043]             invokeRestart <- base::invokeRestart
[17:46:18.043]             length <- base::length
[17:46:18.043]             list <- base::list
[17:46:18.043]             seq.int <- base::seq.int
[17:46:18.043]             signalCondition <- base::signalCondition
[17:46:18.043]             sys.calls <- base::sys.calls
[17:46:18.043]             `[[` <- base::`[[`
[17:46:18.043]             `+` <- base::`+`
[17:46:18.043]             `<<-` <- base::`<<-`
[17:46:18.043]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:18.043]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:18.043]                   3L)]
[17:46:18.043]             }
[17:46:18.043]             function(cond) {
[17:46:18.043]                 is_error <- inherits(cond, "error")
[17:46:18.043]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:18.043]                   NULL)
[17:46:18.043]                 if (is_error) {
[17:46:18.043]                   sessionInformation <- function() {
[17:46:18.043]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:18.043]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:18.043]                       search = base::search(), system = base::Sys.info())
[17:46:18.043]                   }
[17:46:18.043]                   ...future.conditions[[length(...future.conditions) + 
[17:46:18.043]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:18.043]                     cond$call), session = sessionInformation(), 
[17:46:18.043]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:18.043]                   signalCondition(cond)
[17:46:18.043]                 }
[17:46:18.043]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[17:46:18.043]                 "immediateCondition"))) {
[17:46:18.043]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:18.043]                   ...future.conditions[[length(...future.conditions) + 
[17:46:18.043]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:18.043]                   if (TRUE && !signal) {
[17:46:18.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:18.043]                     {
[17:46:18.043]                       inherits <- base::inherits
[17:46:18.043]                       invokeRestart <- base::invokeRestart
[17:46:18.043]                       is.null <- base::is.null
[17:46:18.043]                       muffled <- FALSE
[17:46:18.043]                       if (inherits(cond, "message")) {
[17:46:18.043]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:18.043]                         if (muffled) 
[17:46:18.043]                           invokeRestart("muffleMessage")
[17:46:18.043]                       }
[17:46:18.043]                       else if (inherits(cond, "warning")) {
[17:46:18.043]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:18.043]                         if (muffled) 
[17:46:18.043]                           invokeRestart("muffleWarning")
[17:46:18.043]                       }
[17:46:18.043]                       else if (inherits(cond, "condition")) {
[17:46:18.043]                         if (!is.null(pattern)) {
[17:46:18.043]                           computeRestarts <- base::computeRestarts
[17:46:18.043]                           grepl <- base::grepl
[17:46:18.043]                           restarts <- computeRestarts(cond)
[17:46:18.043]                           for (restart in restarts) {
[17:46:18.043]                             name <- restart$name
[17:46:18.043]                             if (is.null(name)) 
[17:46:18.043]                               next
[17:46:18.043]                             if (!grepl(pattern, name)) 
[17:46:18.043]                               next
[17:46:18.043]                             invokeRestart(restart)
[17:46:18.043]                             muffled <- TRUE
[17:46:18.043]                             break
[17:46:18.043]                           }
[17:46:18.043]                         }
[17:46:18.043]                       }
[17:46:18.043]                       invisible(muffled)
[17:46:18.043]                     }
[17:46:18.043]                     muffleCondition(cond, pattern = "^muffle")
[17:46:18.043]                   }
[17:46:18.043]                 }
[17:46:18.043]                 else {
[17:46:18.043]                   if (TRUE) {
[17:46:18.043]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:18.043]                     {
[17:46:18.043]                       inherits <- base::inherits
[17:46:18.043]                       invokeRestart <- base::invokeRestart
[17:46:18.043]                       is.null <- base::is.null
[17:46:18.043]                       muffled <- FALSE
[17:46:18.043]                       if (inherits(cond, "message")) {
[17:46:18.043]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:18.043]                         if (muffled) 
[17:46:18.043]                           invokeRestart("muffleMessage")
[17:46:18.043]                       }
[17:46:18.043]                       else if (inherits(cond, "warning")) {
[17:46:18.043]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:18.043]                         if (muffled) 
[17:46:18.043]                           invokeRestart("muffleWarning")
[17:46:18.043]                       }
[17:46:18.043]                       else if (inherits(cond, "condition")) {
[17:46:18.043]                         if (!is.null(pattern)) {
[17:46:18.043]                           computeRestarts <- base::computeRestarts
[17:46:18.043]                           grepl <- base::grepl
[17:46:18.043]                           restarts <- computeRestarts(cond)
[17:46:18.043]                           for (restart in restarts) {
[17:46:18.043]                             name <- restart$name
[17:46:18.043]                             if (is.null(name)) 
[17:46:18.043]                               next
[17:46:18.043]                             if (!grepl(pattern, name)) 
[17:46:18.043]                               next
[17:46:18.043]                             invokeRestart(restart)
[17:46:18.043]                             muffled <- TRUE
[17:46:18.043]                             break
[17:46:18.043]                           }
[17:46:18.043]                         }
[17:46:18.043]                       }
[17:46:18.043]                       invisible(muffled)
[17:46:18.043]                     }
[17:46:18.043]                     muffleCondition(cond, pattern = "^muffle")
[17:46:18.043]                   }
[17:46:18.043]                 }
[17:46:18.043]             }
[17:46:18.043]         }))
[17:46:18.043]     }, error = function(ex) {
[17:46:18.043]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:18.043]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:18.043]                 ...future.rng), started = ...future.startTime, 
[17:46:18.043]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:18.043]             version = "1.8"), class = "FutureResult")
[17:46:18.043]     }, finally = {
[17:46:18.043]         if (!identical(...future.workdir, getwd())) 
[17:46:18.043]             setwd(...future.workdir)
[17:46:18.043]         {
[17:46:18.043]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:18.043]                 ...future.oldOptions$nwarnings <- NULL
[17:46:18.043]             }
[17:46:18.043]             base::options(...future.oldOptions)
[17:46:18.043]             if (.Platform$OS.type == "windows") {
[17:46:18.043]                 old_names <- names(...future.oldEnvVars)
[17:46:18.043]                 envs <- base::Sys.getenv()
[17:46:18.043]                 names <- names(envs)
[17:46:18.043]                 common <- intersect(names, old_names)
[17:46:18.043]                 added <- setdiff(names, old_names)
[17:46:18.043]                 removed <- setdiff(old_names, names)
[17:46:18.043]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:18.043]                   envs[common]]
[17:46:18.043]                 NAMES <- toupper(changed)
[17:46:18.043]                 args <- list()
[17:46:18.043]                 for (kk in seq_along(NAMES)) {
[17:46:18.043]                   name <- changed[[kk]]
[17:46:18.043]                   NAME <- NAMES[[kk]]
[17:46:18.043]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:18.043]                     next
[17:46:18.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:18.043]                 }
[17:46:18.043]                 NAMES <- toupper(added)
[17:46:18.043]                 for (kk in seq_along(NAMES)) {
[17:46:18.043]                   name <- added[[kk]]
[17:46:18.043]                   NAME <- NAMES[[kk]]
[17:46:18.043]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:18.043]                     next
[17:46:18.043]                   args[[name]] <- ""
[17:46:18.043]                 }
[17:46:18.043]                 NAMES <- toupper(removed)
[17:46:18.043]                 for (kk in seq_along(NAMES)) {
[17:46:18.043]                   name <- removed[[kk]]
[17:46:18.043]                   NAME <- NAMES[[kk]]
[17:46:18.043]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:18.043]                     next
[17:46:18.043]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:18.043]                 }
[17:46:18.043]                 if (length(args) > 0) 
[17:46:18.043]                   base::do.call(base::Sys.setenv, args = args)
[17:46:18.043]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:18.043]             }
[17:46:18.043]             else {
[17:46:18.043]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:18.043]             }
[17:46:18.043]             {
[17:46:18.043]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:18.043]                   0L) {
[17:46:18.043]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:18.043]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:18.043]                   base::options(opts)
[17:46:18.043]                 }
[17:46:18.043]                 {
[17:46:18.043]                   {
[17:46:18.043]                     NULL
[17:46:18.043]                     RNGkind("Mersenne-Twister")
[17:46:18.043]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:18.043]                       inherits = FALSE)
[17:46:18.043]                   }
[17:46:18.043]                   options(future.plan = NULL)
[17:46:18.043]                   if (is.na(NA_character_)) 
[17:46:18.043]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:18.043]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:18.043]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:18.043]                     .init = FALSE)
[17:46:18.043]                 }
[17:46:18.043]             }
[17:46:18.043]         }
[17:46:18.043]     })
[17:46:18.043]     if (FALSE) {
[17:46:18.043]         base::sink(type = "output", split = FALSE)
[17:46:18.043]         if (NA) {
[17:46:18.043]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:18.043]         }
[17:46:18.043]         else {
[17:46:18.043]             ...future.result["stdout"] <- base::list(NULL)
[17:46:18.043]         }
[17:46:18.043]         base::close(...future.stdout)
[17:46:18.043]         ...future.stdout <- NULL
[17:46:18.043]     }
[17:46:18.043]     ...future.result$conditions <- ...future.conditions
[17:46:18.043]     ...future.result$finished <- base::Sys.time()
[17:46:18.043]     ...future.result
[17:46:18.043] }
[17:46:18.044] assign_globals() ...
[17:46:18.044] List of 2
[17:46:18.044]  $ x:Classes 'listenv', 'environment' <environment: 0x560ab3f96238> 
[17:46:18.044]  $ i: int 50
[17:46:18.044]  - attr(*, "where")=List of 2
[17:46:18.044]   ..$ x:<environment: R_EmptyEnv> 
[17:46:18.044]   ..$ i:<environment: R_EmptyEnv> 
[17:46:18.044]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:18.044]  - attr(*, "resolved")= logi FALSE
[17:46:18.044]  - attr(*, "total_size")= num 402000
[17:46:18.044]  - attr(*, "already-done")= logi TRUE
[17:46:18.047] - copied ‘x’ to environment
[17:46:18.047] - copied ‘i’ to environment
[17:46:18.047] assign_globals() ... done
[17:46:18.047] plan(): Setting new future strategy stack:
[17:46:18.047] List of future strategies:
[17:46:18.047] 1. sequential:
[17:46:18.047]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:18.047]    - tweaked: FALSE
[17:46:18.047]    - call: NULL
[17:46:18.048] plan(): nbrOfWorkers() = 1
[17:46:18.903] plan(): Setting new future strategy stack:
[17:46:18.903] List of future strategies:
[17:46:18.903] 1. sequential:
[17:46:18.903]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:18.903]    - tweaked: FALSE
[17:46:18.903]    - call: plan(sequential)
[17:46:18.904] plan(): nbrOfWorkers() = 1
[17:46:18.904] SequentialFuture started (and completed)
[17:46:18.904] - Launch lazy future ... done
[17:46:18.904] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[17:46:18.905] plan(): Setting new future strategy stack:
[17:46:18.905] List of future strategies:
[17:46:18.905] 1. sequential:
[17:46:18.905]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:18.905]    - tweaked: FALSE
[17:46:18.905]    - call: future::plan("sequential")
[17:46:18.905] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[17:46:18.914] plan(): Setting new future strategy stack:
[17:46:18.914] List of future strategies:
[17:46:18.914] 1. sequential:
[17:46:18.914]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:18.914]    - tweaked: FALSE
[17:46:18.914]    - call: plan(strategy)
[17:46:18.914] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:46:18.945] getGlobalsAndPackages() ...
[17:46:18.945] Searching for globals...
[17:46:18.948] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:18.948] Searching for globals ... DONE
[17:46:18.949] Resolving globals: FALSE
[17:46:18.949] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:18.950] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:18.950] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:18.950] - packages: [1] ‘future’
[17:46:18.950] getGlobalsAndPackages() ... DONE
 2[17:46:18.954] getGlobalsAndPackages() ...
[17:46:18.954] Searching for globals...
[17:46:18.957] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:18.957] Searching for globals ... DONE
[17:46:18.957] Resolving globals: FALSE
[17:46:18.958] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:18.958] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:18.958] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:18.958] - packages: [1] ‘future’
[17:46:18.959] getGlobalsAndPackages() ... DONE
 3[17:46:18.959] getGlobalsAndPackages() ...
[17:46:18.959] Searching for globals...
[17:46:18.962] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:18.962] Searching for globals ... DONE
[17:46:18.962] Resolving globals: FALSE
[17:46:18.963] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:18.963] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:18.963] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:18.964] - packages: [1] ‘future’
[17:46:18.964] getGlobalsAndPackages() ... DONE
 4[17:46:18.964] getGlobalsAndPackages() ...
[17:46:18.964] Searching for globals...
[17:46:18.967] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:18.967] Searching for globals ... DONE
[17:46:18.967] Resolving globals: FALSE
[17:46:18.968] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:18.968] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:18.969] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:18.969] - packages: [1] ‘future’
[17:46:18.969] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:46:18.978] resolved() for ‘Future’ ...
[17:46:18.978] - state: ‘created’
[17:46:18.978] - run: TRUE
[17:46:18.978] - run() ...
[17:46:18.978] run() for ‘Future’ ...
[17:46:18.978] - state: ‘created’
[17:46:18.978] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:18.979] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:18.979] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:18.979]   - Field: ‘label’
[17:46:18.979]   - Field: ‘local’
[17:46:18.979]   - Field: ‘owner’
[17:46:18.979]   - Field: ‘envir’
[17:46:18.979]   - Field: ‘packages’
[17:46:18.979]   - Field: ‘gc’
[17:46:18.979]   - Field: ‘conditions’
[17:46:18.979]   - Field: ‘expr’
[17:46:18.980]   - Field: ‘uuid’
[17:46:18.980]   - Field: ‘seed’
[17:46:18.980]   - Field: ‘version’
[17:46:18.980]   - Field: ‘result’
[17:46:18.980]   - Field: ‘asynchronous’
[17:46:18.980]   - Field: ‘calls’
[17:46:18.980]   - Field: ‘globals’
[17:46:18.980]   - Field: ‘stdout’
[17:46:18.980]   - Field: ‘earlySignal’
[17:46:18.980]   - Field: ‘lazy’
[17:46:18.980]   - Field: ‘state’
[17:46:18.981] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:18.981] - Launch lazy future ...
[17:46:18.981] Packages needed by the future expression (n = 1): ‘future’
[17:46:18.981] Packages needed by future strategies (n = 0): <none>
[17:46:18.981] {
[17:46:18.981]     {
[17:46:18.981]         {
[17:46:18.981]             ...future.startTime <- base::Sys.time()
[17:46:18.981]             {
[17:46:18.981]                 {
[17:46:18.981]                   {
[17:46:18.981]                     {
[17:46:18.981]                       base::local({
[17:46:18.981]                         has_future <- base::requireNamespace("future", 
[17:46:18.981]                           quietly = TRUE)
[17:46:18.981]                         if (has_future) {
[17:46:18.981]                           ns <- base::getNamespace("future")
[17:46:18.981]                           version <- ns[[".package"]][["version"]]
[17:46:18.981]                           if (is.null(version)) 
[17:46:18.981]                             version <- utils::packageVersion("future")
[17:46:18.981]                         }
[17:46:18.981]                         else {
[17:46:18.981]                           version <- NULL
[17:46:18.981]                         }
[17:46:18.981]                         if (!has_future || version < "1.8.0") {
[17:46:18.981]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:18.981]                             "", base::R.version$version.string), 
[17:46:18.981]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:18.981]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:18.981]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:18.981]                               "release", "version")], collapse = " "), 
[17:46:18.981]                             hostname = base::Sys.info()[["nodename"]])
[17:46:18.981]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:18.981]                             info)
[17:46:18.981]                           info <- base::paste(info, collapse = "; ")
[17:46:18.981]                           if (!has_future) {
[17:46:18.981]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:18.981]                               info)
[17:46:18.981]                           }
[17:46:18.981]                           else {
[17:46:18.981]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:18.981]                               info, version)
[17:46:18.981]                           }
[17:46:18.981]                           base::stop(msg)
[17:46:18.981]                         }
[17:46:18.981]                       })
[17:46:18.981]                     }
[17:46:18.981]                     base::local({
[17:46:18.981]                       for (pkg in "future") {
[17:46:18.981]                         base::loadNamespace(pkg)
[17:46:18.981]                         base::library(pkg, character.only = TRUE)
[17:46:18.981]                       }
[17:46:18.981]                     })
[17:46:18.981]                   }
[17:46:18.981]                   ...future.strategy.old <- future::plan("list")
[17:46:18.981]                   options(future.plan = NULL)
[17:46:18.981]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:18.981]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:18.981]                 }
[17:46:18.981]                 ...future.workdir <- getwd()
[17:46:18.981]             }
[17:46:18.981]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:18.981]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:18.981]         }
[17:46:18.981]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:18.981]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:18.981]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:18.981]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:18.981]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:18.981]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:18.981]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:18.981]             base::names(...future.oldOptions))
[17:46:18.981]     }
[17:46:18.981]     if (FALSE) {
[17:46:18.981]     }
[17:46:18.981]     else {
[17:46:18.981]         if (TRUE) {
[17:46:18.981]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:18.981]                 open = "w")
[17:46:18.981]         }
[17:46:18.981]         else {
[17:46:18.981]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:18.981]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:18.981]         }
[17:46:18.981]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:18.981]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:18.981]             base::sink(type = "output", split = FALSE)
[17:46:18.981]             base::close(...future.stdout)
[17:46:18.981]         }, add = TRUE)
[17:46:18.981]     }
[17:46:18.981]     ...future.frame <- base::sys.nframe()
[17:46:18.981]     ...future.conditions <- base::list()
[17:46:18.981]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:18.981]     if (FALSE) {
[17:46:18.981]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:18.981]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:18.981]     }
[17:46:18.981]     ...future.result <- base::tryCatch({
[17:46:18.981]         base::withCallingHandlers({
[17:46:18.981]             ...future.value <- base::withVisible(base::local({
[17:46:18.981]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:46:18.981]                   ii, n), appendLF = FALSE)
[17:46:18.981]                 fit <- mandelbrot(C)
[17:46:18.981]                 delay(fit)
[17:46:18.981]                 message(" done")
[17:46:18.981]                 fit
[17:46:18.981]             }))
[17:46:18.981]             future::FutureResult(value = ...future.value$value, 
[17:46:18.981]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:18.981]                   ...future.rng), globalenv = if (FALSE) 
[17:46:18.981]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:18.981]                     ...future.globalenv.names))
[17:46:18.981]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:18.981]         }, condition = base::local({
[17:46:18.981]             c <- base::c
[17:46:18.981]             inherits <- base::inherits
[17:46:18.981]             invokeRestart <- base::invokeRestart
[17:46:18.981]             length <- base::length
[17:46:18.981]             list <- base::list
[17:46:18.981]             seq.int <- base::seq.int
[17:46:18.981]             signalCondition <- base::signalCondition
[17:46:18.981]             sys.calls <- base::sys.calls
[17:46:18.981]             `[[` <- base::`[[`
[17:46:18.981]             `+` <- base::`+`
[17:46:18.981]             `<<-` <- base::`<<-`
[17:46:18.981]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:18.981]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:18.981]                   3L)]
[17:46:18.981]             }
[17:46:18.981]             function(cond) {
[17:46:18.981]                 is_error <- inherits(cond, "error")
[17:46:18.981]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:18.981]                   NULL)
[17:46:18.981]                 if (is_error) {
[17:46:18.981]                   sessionInformation <- function() {
[17:46:18.981]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:18.981]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:18.981]                       search = base::search(), system = base::Sys.info())
[17:46:18.981]                   }
[17:46:18.981]                   ...future.conditions[[length(...future.conditions) + 
[17:46:18.981]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:18.981]                     cond$call), session = sessionInformation(), 
[17:46:18.981]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:18.981]                   signalCondition(cond)
[17:46:18.981]                 }
[17:46:18.981]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:18.981]                 "immediateCondition"))) {
[17:46:18.981]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:18.981]                   ...future.conditions[[length(...future.conditions) + 
[17:46:18.981]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:18.981]                   if (TRUE && !signal) {
[17:46:18.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:18.981]                     {
[17:46:18.981]                       inherits <- base::inherits
[17:46:18.981]                       invokeRestart <- base::invokeRestart
[17:46:18.981]                       is.null <- base::is.null
[17:46:18.981]                       muffled <- FALSE
[17:46:18.981]                       if (inherits(cond, "message")) {
[17:46:18.981]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:18.981]                         if (muffled) 
[17:46:18.981]                           invokeRestart("muffleMessage")
[17:46:18.981]                       }
[17:46:18.981]                       else if (inherits(cond, "warning")) {
[17:46:18.981]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:18.981]                         if (muffled) 
[17:46:18.981]                           invokeRestart("muffleWarning")
[17:46:18.981]                       }
[17:46:18.981]                       else if (inherits(cond, "condition")) {
[17:46:18.981]                         if (!is.null(pattern)) {
[17:46:18.981]                           computeRestarts <- base::computeRestarts
[17:46:18.981]                           grepl <- base::grepl
[17:46:18.981]                           restarts <- computeRestarts(cond)
[17:46:18.981]                           for (restart in restarts) {
[17:46:18.981]                             name <- restart$name
[17:46:18.981]                             if (is.null(name)) 
[17:46:18.981]                               next
[17:46:18.981]                             if (!grepl(pattern, name)) 
[17:46:18.981]                               next
[17:46:18.981]                             invokeRestart(restart)
[17:46:18.981]                             muffled <- TRUE
[17:46:18.981]                             break
[17:46:18.981]                           }
[17:46:18.981]                         }
[17:46:18.981]                       }
[17:46:18.981]                       invisible(muffled)
[17:46:18.981]                     }
[17:46:18.981]                     muffleCondition(cond, pattern = "^muffle")
[17:46:18.981]                   }
[17:46:18.981]                 }
[17:46:18.981]                 else {
[17:46:18.981]                   if (TRUE) {
[17:46:18.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:18.981]                     {
[17:46:18.981]                       inherits <- base::inherits
[17:46:18.981]                       invokeRestart <- base::invokeRestart
[17:46:18.981]                       is.null <- base::is.null
[17:46:18.981]                       muffled <- FALSE
[17:46:18.981]                       if (inherits(cond, "message")) {
[17:46:18.981]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:18.981]                         if (muffled) 
[17:46:18.981]                           invokeRestart("muffleMessage")
[17:46:18.981]                       }
[17:46:18.981]                       else if (inherits(cond, "warning")) {
[17:46:18.981]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:18.981]                         if (muffled) 
[17:46:18.981]                           invokeRestart("muffleWarning")
[17:46:18.981]                       }
[17:46:18.981]                       else if (inherits(cond, "condition")) {
[17:46:18.981]                         if (!is.null(pattern)) {
[17:46:18.981]                           computeRestarts <- base::computeRestarts
[17:46:18.981]                           grepl <- base::grepl
[17:46:18.981]                           restarts <- computeRestarts(cond)
[17:46:18.981]                           for (restart in restarts) {
[17:46:18.981]                             name <- restart$name
[17:46:18.981]                             if (is.null(name)) 
[17:46:18.981]                               next
[17:46:18.981]                             if (!grepl(pattern, name)) 
[17:46:18.981]                               next
[17:46:18.981]                             invokeRestart(restart)
[17:46:18.981]                             muffled <- TRUE
[17:46:18.981]                             break
[17:46:18.981]                           }
[17:46:18.981]                         }
[17:46:18.981]                       }
[17:46:18.981]                       invisible(muffled)
[17:46:18.981]                     }
[17:46:18.981]                     muffleCondition(cond, pattern = "^muffle")
[17:46:18.981]                   }
[17:46:18.981]                 }
[17:46:18.981]             }
[17:46:18.981]         }))
[17:46:18.981]     }, error = function(ex) {
[17:46:18.981]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:18.981]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:18.981]                 ...future.rng), started = ...future.startTime, 
[17:46:18.981]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:18.981]             version = "1.8"), class = "FutureResult")
[17:46:18.981]     }, finally = {
[17:46:18.981]         if (!identical(...future.workdir, getwd())) 
[17:46:18.981]             setwd(...future.workdir)
[17:46:18.981]         {
[17:46:18.981]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:18.981]                 ...future.oldOptions$nwarnings <- NULL
[17:46:18.981]             }
[17:46:18.981]             base::options(...future.oldOptions)
[17:46:18.981]             if (.Platform$OS.type == "windows") {
[17:46:18.981]                 old_names <- names(...future.oldEnvVars)
[17:46:18.981]                 envs <- base::Sys.getenv()
[17:46:18.981]                 names <- names(envs)
[17:46:18.981]                 common <- intersect(names, old_names)
[17:46:18.981]                 added <- setdiff(names, old_names)
[17:46:18.981]                 removed <- setdiff(old_names, names)
[17:46:18.981]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:18.981]                   envs[common]]
[17:46:18.981]                 NAMES <- toupper(changed)
[17:46:18.981]                 args <- list()
[17:46:18.981]                 for (kk in seq_along(NAMES)) {
[17:46:18.981]                   name <- changed[[kk]]
[17:46:18.981]                   NAME <- NAMES[[kk]]
[17:46:18.981]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:18.981]                     next
[17:46:18.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:18.981]                 }
[17:46:18.981]                 NAMES <- toupper(added)
[17:46:18.981]                 for (kk in seq_along(NAMES)) {
[17:46:18.981]                   name <- added[[kk]]
[17:46:18.981]                   NAME <- NAMES[[kk]]
[17:46:18.981]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:18.981]                     next
[17:46:18.981]                   args[[name]] <- ""
[17:46:18.981]                 }
[17:46:18.981]                 NAMES <- toupper(removed)
[17:46:18.981]                 for (kk in seq_along(NAMES)) {
[17:46:18.981]                   name <- removed[[kk]]
[17:46:18.981]                   NAME <- NAMES[[kk]]
[17:46:18.981]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:18.981]                     next
[17:46:18.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:18.981]                 }
[17:46:18.981]                 if (length(args) > 0) 
[17:46:18.981]                   base::do.call(base::Sys.setenv, args = args)
[17:46:18.981]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:18.981]             }
[17:46:18.981]             else {
[17:46:18.981]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:18.981]             }
[17:46:18.981]             {
[17:46:18.981]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:18.981]                   0L) {
[17:46:18.981]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:18.981]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:18.981]                   base::options(opts)
[17:46:18.981]                 }
[17:46:18.981]                 {
[17:46:18.981]                   {
[17:46:18.981]                     NULL
[17:46:18.981]                     RNGkind("Mersenne-Twister")
[17:46:18.981]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:18.981]                       inherits = FALSE)
[17:46:18.981]                   }
[17:46:18.981]                   options(future.plan = NULL)
[17:46:18.981]                   if (is.na(NA_character_)) 
[17:46:18.981]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:18.981]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:18.981]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:18.981]                     .init = FALSE)
[17:46:18.981]                 }
[17:46:18.981]             }
[17:46:18.981]         }
[17:46:18.981]     })
[17:46:18.981]     if (TRUE) {
[17:46:18.981]         base::sink(type = "output", split = FALSE)
[17:46:18.981]         if (TRUE) {
[17:46:18.981]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:18.981]         }
[17:46:18.981]         else {
[17:46:18.981]             ...future.result["stdout"] <- base::list(NULL)
[17:46:18.981]         }
[17:46:18.981]         base::close(...future.stdout)
[17:46:18.981]         ...future.stdout <- NULL
[17:46:18.981]     }
[17:46:18.981]     ...future.result$conditions <- ...future.conditions
[17:46:18.981]     ...future.result$finished <- base::Sys.time()
[17:46:18.981]     ...future.result
[17:46:18.981] }
[17:46:18.983] assign_globals() ...
[17:46:18.983] List of 4
[17:46:18.983]  $ ii   : int 1
[17:46:18.983]  $ n    : int 4
[17:46:18.983]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[17:46:18.983]   ..- attr(*, "region")=List of 2
[17:46:18.983]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:46:18.983]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:46:18.983]   ..- attr(*, "tile")= int [1:2] 1 1
[17:46:18.983]  $ delay:function (counts)  
[17:46:18.983]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:18.983]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab495d190> 
[17:46:18.983]  - attr(*, "where")=List of 4
[17:46:18.983]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:18.983]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:18.983]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:18.983]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:18.983]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:18.983]  - attr(*, "resolved")= logi FALSE
[17:46:18.983]  - attr(*, "total_size")= num 14584
[17:46:18.983]  - attr(*, "already-done")= logi TRUE
[17:46:18.989] - copied ‘ii’ to environment
[17:46:18.989] - copied ‘n’ to environment
[17:46:18.989] - copied ‘C’ to environment
[17:46:18.990] - reassign environment for ‘delay’
[17:46:18.990] - copied ‘delay’ to environment
[17:46:18.990] assign_globals() ... done
[17:46:18.990] plan(): Setting new future strategy stack:
[17:46:18.990] List of future strategies:
[17:46:18.990] 1. sequential:
[17:46:18.990]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:18.990]    - tweaked: FALSE
[17:46:18.990]    - call: NULL
[17:46:18.991] plan(): nbrOfWorkers() = 1
[17:46:19.008] plan(): Setting new future strategy stack:
[17:46:19.008] List of future strategies:
[17:46:19.008] 1. sequential:
[17:46:19.008]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.008]    - tweaked: FALSE
[17:46:19.008]    - call: plan(strategy)
[17:46:19.008] plan(): nbrOfWorkers() = 1
[17:46:19.008] SequentialFuture started (and completed)
[17:46:19.008] signalConditions() ...
[17:46:19.009]  - include = ‘immediateCondition’
[17:46:19.009]  - exclude = 
[17:46:19.009]  - resignal = FALSE
[17:46:19.009]  - Number of conditions: 2
[17:46:19.009] signalConditions() ... done
[17:46:19.009] - Launch lazy future ... done
[17:46:19.009] run() for ‘SequentialFuture’ ... done
[17:46:19.009] - run() ... done
[17:46:19.009] - resolved() ...
[17:46:19.009] resolved() for ‘SequentialFuture’ ...
[17:46:19.009] - state: ‘finished’
[17:46:19.009] - run: TRUE
[17:46:19.010] - result: ‘FutureResult’
[17:46:19.010] resolved() for ‘SequentialFuture’ ... done
[17:46:19.010] - resolved: TRUE
[17:46:19.010] - resolved() ... done
[17:46:19.010] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[17:46:19.010] signalConditions() ...
[17:46:19.010]  - include = ‘immediateCondition’
[17:46:19.010]  - exclude = 
[17:46:19.010]  - resignal = FALSE
[17:46:19.010]  - Number of conditions: 2
[17:46:19.011] signalConditions() ... done
[17:46:19.011] Future state: ‘finished’
[17:46:19.011] signalConditions() ...
[17:46:19.011]  - include = ‘condition’
[17:46:19.011]  - exclude = ‘immediateCondition’
[17:46:19.011]  - resignal = TRUE
[17:46:19.011]  - Number of conditions: 2
[17:46:19.011]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:46:19.011]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.011] signalConditions() ... done
[17:46:19.013] resolved() for ‘Future’ ...
[17:46:19.013] - state: ‘created’
[17:46:19.013] - run: TRUE
[17:46:19.013] - run() ...
[17:46:19.013] run() for ‘Future’ ...
[17:46:19.013] - state: ‘created’
[17:46:19.013] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:19.014] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:19.014] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:19.014]   - Field: ‘label’
[17:46:19.014]   - Field: ‘local’
[17:46:19.014]   - Field: ‘owner’
[17:46:19.014]   - Field: ‘envir’
[17:46:19.014]   - Field: ‘packages’
[17:46:19.014]   - Field: ‘gc’
[17:46:19.015]   - Field: ‘conditions’
[17:46:19.015]   - Field: ‘expr’
[17:46:19.015]   - Field: ‘uuid’
[17:46:19.015]   - Field: ‘seed’
[17:46:19.015]   - Field: ‘version’
[17:46:19.015]   - Field: ‘result’
[17:46:19.015]   - Field: ‘asynchronous’
[17:46:19.015]   - Field: ‘calls’
[17:46:19.015]   - Field: ‘globals’
[17:46:19.015]   - Field: ‘stdout’
[17:46:19.015]   - Field: ‘earlySignal’
[17:46:19.016]   - Field: ‘lazy’
[17:46:19.016]   - Field: ‘state’
[17:46:19.016] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:19.016] - Launch lazy future ...
[17:46:19.016] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.016] Packages needed by future strategies (n = 0): <none>
[17:46:19.017] {
[17:46:19.017]     {
[17:46:19.017]         {
[17:46:19.017]             ...future.startTime <- base::Sys.time()
[17:46:19.017]             {
[17:46:19.017]                 {
[17:46:19.017]                   {
[17:46:19.017]                     {
[17:46:19.017]                       base::local({
[17:46:19.017]                         has_future <- base::requireNamespace("future", 
[17:46:19.017]                           quietly = TRUE)
[17:46:19.017]                         if (has_future) {
[17:46:19.017]                           ns <- base::getNamespace("future")
[17:46:19.017]                           version <- ns[[".package"]][["version"]]
[17:46:19.017]                           if (is.null(version)) 
[17:46:19.017]                             version <- utils::packageVersion("future")
[17:46:19.017]                         }
[17:46:19.017]                         else {
[17:46:19.017]                           version <- NULL
[17:46:19.017]                         }
[17:46:19.017]                         if (!has_future || version < "1.8.0") {
[17:46:19.017]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.017]                             "", base::R.version$version.string), 
[17:46:19.017]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:19.017]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:19.017]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.017]                               "release", "version")], collapse = " "), 
[17:46:19.017]                             hostname = base::Sys.info()[["nodename"]])
[17:46:19.017]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.017]                             info)
[17:46:19.017]                           info <- base::paste(info, collapse = "; ")
[17:46:19.017]                           if (!has_future) {
[17:46:19.017]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.017]                               info)
[17:46:19.017]                           }
[17:46:19.017]                           else {
[17:46:19.017]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.017]                               info, version)
[17:46:19.017]                           }
[17:46:19.017]                           base::stop(msg)
[17:46:19.017]                         }
[17:46:19.017]                       })
[17:46:19.017]                     }
[17:46:19.017]                     base::local({
[17:46:19.017]                       for (pkg in "future") {
[17:46:19.017]                         base::loadNamespace(pkg)
[17:46:19.017]                         base::library(pkg, character.only = TRUE)
[17:46:19.017]                       }
[17:46:19.017]                     })
[17:46:19.017]                   }
[17:46:19.017]                   ...future.strategy.old <- future::plan("list")
[17:46:19.017]                   options(future.plan = NULL)
[17:46:19.017]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.017]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.017]                 }
[17:46:19.017]                 ...future.workdir <- getwd()
[17:46:19.017]             }
[17:46:19.017]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.017]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.017]         }
[17:46:19.017]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.017]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.017]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.017]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.017]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.017]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.017]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.017]             base::names(...future.oldOptions))
[17:46:19.017]     }
[17:46:19.017]     if (FALSE) {
[17:46:19.017]     }
[17:46:19.017]     else {
[17:46:19.017]         if (TRUE) {
[17:46:19.017]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.017]                 open = "w")
[17:46:19.017]         }
[17:46:19.017]         else {
[17:46:19.017]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.017]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.017]         }
[17:46:19.017]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.017]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.017]             base::sink(type = "output", split = FALSE)
[17:46:19.017]             base::close(...future.stdout)
[17:46:19.017]         }, add = TRUE)
[17:46:19.017]     }
[17:46:19.017]     ...future.frame <- base::sys.nframe()
[17:46:19.017]     ...future.conditions <- base::list()
[17:46:19.017]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.017]     if (FALSE) {
[17:46:19.017]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.017]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.017]     }
[17:46:19.017]     ...future.result <- base::tryCatch({
[17:46:19.017]         base::withCallingHandlers({
[17:46:19.017]             ...future.value <- base::withVisible(base::local({
[17:46:19.017]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.017]                   ii, n), appendLF = FALSE)
[17:46:19.017]                 fit <- mandelbrot(C)
[17:46:19.017]                 delay(fit)
[17:46:19.017]                 message(" done")
[17:46:19.017]                 fit
[17:46:19.017]             }))
[17:46:19.017]             future::FutureResult(value = ...future.value$value, 
[17:46:19.017]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.017]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.017]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.017]                     ...future.globalenv.names))
[17:46:19.017]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.017]         }, condition = base::local({
[17:46:19.017]             c <- base::c
[17:46:19.017]             inherits <- base::inherits
[17:46:19.017]             invokeRestart <- base::invokeRestart
[17:46:19.017]             length <- base::length
[17:46:19.017]             list <- base::list
[17:46:19.017]             seq.int <- base::seq.int
[17:46:19.017]             signalCondition <- base::signalCondition
[17:46:19.017]             sys.calls <- base::sys.calls
[17:46:19.017]             `[[` <- base::`[[`
[17:46:19.017]             `+` <- base::`+`
[17:46:19.017]             `<<-` <- base::`<<-`
[17:46:19.017]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.017]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.017]                   3L)]
[17:46:19.017]             }
[17:46:19.017]             function(cond) {
[17:46:19.017]                 is_error <- inherits(cond, "error")
[17:46:19.017]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.017]                   NULL)
[17:46:19.017]                 if (is_error) {
[17:46:19.017]                   sessionInformation <- function() {
[17:46:19.017]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.017]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.017]                       search = base::search(), system = base::Sys.info())
[17:46:19.017]                   }
[17:46:19.017]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.017]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.017]                     cond$call), session = sessionInformation(), 
[17:46:19.017]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.017]                   signalCondition(cond)
[17:46:19.017]                 }
[17:46:19.017]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.017]                 "immediateCondition"))) {
[17:46:19.017]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.017]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.017]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.017]                   if (TRUE && !signal) {
[17:46:19.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.017]                     {
[17:46:19.017]                       inherits <- base::inherits
[17:46:19.017]                       invokeRestart <- base::invokeRestart
[17:46:19.017]                       is.null <- base::is.null
[17:46:19.017]                       muffled <- FALSE
[17:46:19.017]                       if (inherits(cond, "message")) {
[17:46:19.017]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.017]                         if (muffled) 
[17:46:19.017]                           invokeRestart("muffleMessage")
[17:46:19.017]                       }
[17:46:19.017]                       else if (inherits(cond, "warning")) {
[17:46:19.017]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.017]                         if (muffled) 
[17:46:19.017]                           invokeRestart("muffleWarning")
[17:46:19.017]                       }
[17:46:19.017]                       else if (inherits(cond, "condition")) {
[17:46:19.017]                         if (!is.null(pattern)) {
[17:46:19.017]                           computeRestarts <- base::computeRestarts
[17:46:19.017]                           grepl <- base::grepl
[17:46:19.017]                           restarts <- computeRestarts(cond)
[17:46:19.017]                           for (restart in restarts) {
[17:46:19.017]                             name <- restart$name
[17:46:19.017]                             if (is.null(name)) 
[17:46:19.017]                               next
[17:46:19.017]                             if (!grepl(pattern, name)) 
[17:46:19.017]                               next
[17:46:19.017]                             invokeRestart(restart)
[17:46:19.017]                             muffled <- TRUE
[17:46:19.017]                             break
[17:46:19.017]                           }
[17:46:19.017]                         }
[17:46:19.017]                       }
[17:46:19.017]                       invisible(muffled)
[17:46:19.017]                     }
[17:46:19.017]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.017]                   }
[17:46:19.017]                 }
[17:46:19.017]                 else {
[17:46:19.017]                   if (TRUE) {
[17:46:19.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.017]                     {
[17:46:19.017]                       inherits <- base::inherits
[17:46:19.017]                       invokeRestart <- base::invokeRestart
[17:46:19.017]                       is.null <- base::is.null
[17:46:19.017]                       muffled <- FALSE
[17:46:19.017]                       if (inherits(cond, "message")) {
[17:46:19.017]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.017]                         if (muffled) 
[17:46:19.017]                           invokeRestart("muffleMessage")
[17:46:19.017]                       }
[17:46:19.017]                       else if (inherits(cond, "warning")) {
[17:46:19.017]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.017]                         if (muffled) 
[17:46:19.017]                           invokeRestart("muffleWarning")
[17:46:19.017]                       }
[17:46:19.017]                       else if (inherits(cond, "condition")) {
[17:46:19.017]                         if (!is.null(pattern)) {
[17:46:19.017]                           computeRestarts <- base::computeRestarts
[17:46:19.017]                           grepl <- base::grepl
[17:46:19.017]                           restarts <- computeRestarts(cond)
[17:46:19.017]                           for (restart in restarts) {
[17:46:19.017]                             name <- restart$name
[17:46:19.017]                             if (is.null(name)) 
[17:46:19.017]                               next
[17:46:19.017]                             if (!grepl(pattern, name)) 
[17:46:19.017]                               next
[17:46:19.017]                             invokeRestart(restart)
[17:46:19.017]                             muffled <- TRUE
[17:46:19.017]                             break
[17:46:19.017]                           }
[17:46:19.017]                         }
[17:46:19.017]                       }
[17:46:19.017]                       invisible(muffled)
[17:46:19.017]                     }
[17:46:19.017]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.017]                   }
[17:46:19.017]                 }
[17:46:19.017]             }
[17:46:19.017]         }))
[17:46:19.017]     }, error = function(ex) {
[17:46:19.017]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.017]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.017]                 ...future.rng), started = ...future.startTime, 
[17:46:19.017]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.017]             version = "1.8"), class = "FutureResult")
[17:46:19.017]     }, finally = {
[17:46:19.017]         if (!identical(...future.workdir, getwd())) 
[17:46:19.017]             setwd(...future.workdir)
[17:46:19.017]         {
[17:46:19.017]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.017]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.017]             }
[17:46:19.017]             base::options(...future.oldOptions)
[17:46:19.017]             if (.Platform$OS.type == "windows") {
[17:46:19.017]                 old_names <- names(...future.oldEnvVars)
[17:46:19.017]                 envs <- base::Sys.getenv()
[17:46:19.017]                 names <- names(envs)
[17:46:19.017]                 common <- intersect(names, old_names)
[17:46:19.017]                 added <- setdiff(names, old_names)
[17:46:19.017]                 removed <- setdiff(old_names, names)
[17:46:19.017]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.017]                   envs[common]]
[17:46:19.017]                 NAMES <- toupper(changed)
[17:46:19.017]                 args <- list()
[17:46:19.017]                 for (kk in seq_along(NAMES)) {
[17:46:19.017]                   name <- changed[[kk]]
[17:46:19.017]                   NAME <- NAMES[[kk]]
[17:46:19.017]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.017]                     next
[17:46:19.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.017]                 }
[17:46:19.017]                 NAMES <- toupper(added)
[17:46:19.017]                 for (kk in seq_along(NAMES)) {
[17:46:19.017]                   name <- added[[kk]]
[17:46:19.017]                   NAME <- NAMES[[kk]]
[17:46:19.017]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.017]                     next
[17:46:19.017]                   args[[name]] <- ""
[17:46:19.017]                 }
[17:46:19.017]                 NAMES <- toupper(removed)
[17:46:19.017]                 for (kk in seq_along(NAMES)) {
[17:46:19.017]                   name <- removed[[kk]]
[17:46:19.017]                   NAME <- NAMES[[kk]]
[17:46:19.017]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.017]                     next
[17:46:19.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.017]                 }
[17:46:19.017]                 if (length(args) > 0) 
[17:46:19.017]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.017]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.017]             }
[17:46:19.017]             else {
[17:46:19.017]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.017]             }
[17:46:19.017]             {
[17:46:19.017]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.017]                   0L) {
[17:46:19.017]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.017]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.017]                   base::options(opts)
[17:46:19.017]                 }
[17:46:19.017]                 {
[17:46:19.017]                   {
[17:46:19.017]                     NULL
[17:46:19.017]                     RNGkind("Mersenne-Twister")
[17:46:19.017]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:19.017]                       inherits = FALSE)
[17:46:19.017]                   }
[17:46:19.017]                   options(future.plan = NULL)
[17:46:19.017]                   if (is.na(NA_character_)) 
[17:46:19.017]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.017]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.017]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.017]                     .init = FALSE)
[17:46:19.017]                 }
[17:46:19.017]             }
[17:46:19.017]         }
[17:46:19.017]     })
[17:46:19.017]     if (TRUE) {
[17:46:19.017]         base::sink(type = "output", split = FALSE)
[17:46:19.017]         if (TRUE) {
[17:46:19.017]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.017]         }
[17:46:19.017]         else {
[17:46:19.017]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.017]         }
[17:46:19.017]         base::close(...future.stdout)
[17:46:19.017]         ...future.stdout <- NULL
[17:46:19.017]     }
[17:46:19.017]     ...future.result$conditions <- ...future.conditions
[17:46:19.017]     ...future.result$finished <- base::Sys.time()
[17:46:19.017]     ...future.result
[17:46:19.017] }
[17:46:19.018] assign_globals() ...
[17:46:19.018] List of 4
[17:46:19.018]  $ ii   : int 2
[17:46:19.018]  $ n    : int 4
[17:46:19.018]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[17:46:19.018]   ..- attr(*, "region")=List of 2
[17:46:19.018]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:46:19.018]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:46:19.018]   ..- attr(*, "tile")= int [1:2] 1 2
[17:46:19.018]  $ delay:function (counts)  
[17:46:19.018]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.018]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab495d190> 
[17:46:19.018]  - attr(*, "where")=List of 4
[17:46:19.018]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.018]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.018]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.018]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.018]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.018]  - attr(*, "resolved")= logi FALSE
[17:46:19.018]  - attr(*, "total_size")= num 14584
[17:46:19.018]  - attr(*, "already-done")= logi TRUE
[17:46:19.024] - copied ‘ii’ to environment
[17:46:19.024] - copied ‘n’ to environment
[17:46:19.024] - copied ‘C’ to environment
[17:46:19.024] - reassign environment for ‘delay’
[17:46:19.025] - copied ‘delay’ to environment
[17:46:19.025] assign_globals() ... done
[17:46:19.025] plan(): Setting new future strategy stack:
[17:46:19.025] List of future strategies:
[17:46:19.025] 1. sequential:
[17:46:19.025]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.025]    - tweaked: FALSE
[17:46:19.025]    - call: NULL
[17:46:19.026] plan(): nbrOfWorkers() = 1
[17:46:19.040] plan(): Setting new future strategy stack:
[17:46:19.040] List of future strategies:
[17:46:19.040] 1. sequential:
[17:46:19.040]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.040]    - tweaked: FALSE
[17:46:19.040]    - call: plan(strategy)
[17:46:19.041] plan(): nbrOfWorkers() = 1
[17:46:19.041] SequentialFuture started (and completed)
[17:46:19.041] signalConditions() ...
[17:46:19.041]  - include = ‘immediateCondition’
[17:46:19.041]  - exclude = 
[17:46:19.041]  - resignal = FALSE
[17:46:19.041]  - Number of conditions: 2
[17:46:19.041] signalConditions() ... done
[17:46:19.042] - Launch lazy future ... done
[17:46:19.042] run() for ‘SequentialFuture’ ... done
[17:46:19.042] - run() ... done
[17:46:19.042] - resolved() ...
[17:46:19.042] resolved() for ‘SequentialFuture’ ...
[17:46:19.042] - state: ‘finished’
[17:46:19.042] - run: TRUE
[17:46:19.042] - result: ‘FutureResult’
[17:46:19.042] resolved() for ‘SequentialFuture’ ... done
[17:46:19.042] - resolved: TRUE
[17:46:19.042] - resolved() ... done
[17:46:19.042] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[17:46:19.043] signalConditions() ...
[17:46:19.043]  - include = ‘immediateCondition’
[17:46:19.043]  - exclude = 
[17:46:19.043]  - resignal = FALSE
[17:46:19.043]  - Number of conditions: 2
[17:46:19.043] signalConditions() ... done
[17:46:19.043] Future state: ‘finished’
[17:46:19.043] signalConditions() ...
[17:46:19.043]  - include = ‘condition’
[17:46:19.043]  - exclude = ‘immediateCondition’
[17:46:19.044]  - resignal = TRUE
[17:46:19.044]  - Number of conditions: 2
[17:46:19.044]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:46:19.044]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.044] signalConditions() ... done
[17:46:19.045] resolved() for ‘Future’ ...
[17:46:19.045] - state: ‘created’
[17:46:19.045] - run: TRUE
[17:46:19.045] - run() ...
[17:46:19.045] run() for ‘Future’ ...
[17:46:19.045] - state: ‘created’
[17:46:19.045] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:19.045] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:19.046] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:19.046]   - Field: ‘label’
[17:46:19.046]   - Field: ‘local’
[17:46:19.046]   - Field: ‘owner’
[17:46:19.046]   - Field: ‘envir’
[17:46:19.046]   - Field: ‘packages’
[17:46:19.046]   - Field: ‘gc’
[17:46:19.046]   - Field: ‘conditions’
[17:46:19.046]   - Field: ‘expr’
[17:46:19.046]   - Field: ‘uuid’
[17:46:19.046]   - Field: ‘seed’
[17:46:19.047]   - Field: ‘version’
[17:46:19.047]   - Field: ‘result’
[17:46:19.047]   - Field: ‘asynchronous’
[17:46:19.047]   - Field: ‘calls’
[17:46:19.047]   - Field: ‘globals’
[17:46:19.047]   - Field: ‘stdout’
[17:46:19.047]   - Field: ‘earlySignal’
[17:46:19.047]   - Field: ‘lazy’
[17:46:19.047]   - Field: ‘state’
[17:46:19.047] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:19.047] - Launch lazy future ...
[17:46:19.048] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.048] Packages needed by future strategies (n = 0): <none>
[17:46:19.048] {
[17:46:19.048]     {
[17:46:19.048]         {
[17:46:19.048]             ...future.startTime <- base::Sys.time()
[17:46:19.048]             {
[17:46:19.048]                 {
[17:46:19.048]                   {
[17:46:19.048]                     {
[17:46:19.048]                       base::local({
[17:46:19.048]                         has_future <- base::requireNamespace("future", 
[17:46:19.048]                           quietly = TRUE)
[17:46:19.048]                         if (has_future) {
[17:46:19.048]                           ns <- base::getNamespace("future")
[17:46:19.048]                           version <- ns[[".package"]][["version"]]
[17:46:19.048]                           if (is.null(version)) 
[17:46:19.048]                             version <- utils::packageVersion("future")
[17:46:19.048]                         }
[17:46:19.048]                         else {
[17:46:19.048]                           version <- NULL
[17:46:19.048]                         }
[17:46:19.048]                         if (!has_future || version < "1.8.0") {
[17:46:19.048]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.048]                             "", base::R.version$version.string), 
[17:46:19.048]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:19.048]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:19.048]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.048]                               "release", "version")], collapse = " "), 
[17:46:19.048]                             hostname = base::Sys.info()[["nodename"]])
[17:46:19.048]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.048]                             info)
[17:46:19.048]                           info <- base::paste(info, collapse = "; ")
[17:46:19.048]                           if (!has_future) {
[17:46:19.048]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.048]                               info)
[17:46:19.048]                           }
[17:46:19.048]                           else {
[17:46:19.048]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.048]                               info, version)
[17:46:19.048]                           }
[17:46:19.048]                           base::stop(msg)
[17:46:19.048]                         }
[17:46:19.048]                       })
[17:46:19.048]                     }
[17:46:19.048]                     base::local({
[17:46:19.048]                       for (pkg in "future") {
[17:46:19.048]                         base::loadNamespace(pkg)
[17:46:19.048]                         base::library(pkg, character.only = TRUE)
[17:46:19.048]                       }
[17:46:19.048]                     })
[17:46:19.048]                   }
[17:46:19.048]                   ...future.strategy.old <- future::plan("list")
[17:46:19.048]                   options(future.plan = NULL)
[17:46:19.048]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.048]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.048]                 }
[17:46:19.048]                 ...future.workdir <- getwd()
[17:46:19.048]             }
[17:46:19.048]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.048]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.048]         }
[17:46:19.048]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.048]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.048]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.048]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.048]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.048]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.048]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.048]             base::names(...future.oldOptions))
[17:46:19.048]     }
[17:46:19.048]     if (FALSE) {
[17:46:19.048]     }
[17:46:19.048]     else {
[17:46:19.048]         if (TRUE) {
[17:46:19.048]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.048]                 open = "w")
[17:46:19.048]         }
[17:46:19.048]         else {
[17:46:19.048]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.048]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.048]         }
[17:46:19.048]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.048]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.048]             base::sink(type = "output", split = FALSE)
[17:46:19.048]             base::close(...future.stdout)
[17:46:19.048]         }, add = TRUE)
[17:46:19.048]     }
[17:46:19.048]     ...future.frame <- base::sys.nframe()
[17:46:19.048]     ...future.conditions <- base::list()
[17:46:19.048]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.048]     if (FALSE) {
[17:46:19.048]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.048]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.048]     }
[17:46:19.048]     ...future.result <- base::tryCatch({
[17:46:19.048]         base::withCallingHandlers({
[17:46:19.048]             ...future.value <- base::withVisible(base::local({
[17:46:19.048]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.048]                   ii, n), appendLF = FALSE)
[17:46:19.048]                 fit <- mandelbrot(C)
[17:46:19.048]                 delay(fit)
[17:46:19.048]                 message(" done")
[17:46:19.048]                 fit
[17:46:19.048]             }))
[17:46:19.048]             future::FutureResult(value = ...future.value$value, 
[17:46:19.048]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.048]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.048]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.048]                     ...future.globalenv.names))
[17:46:19.048]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.048]         }, condition = base::local({
[17:46:19.048]             c <- base::c
[17:46:19.048]             inherits <- base::inherits
[17:46:19.048]             invokeRestart <- base::invokeRestart
[17:46:19.048]             length <- base::length
[17:46:19.048]             list <- base::list
[17:46:19.048]             seq.int <- base::seq.int
[17:46:19.048]             signalCondition <- base::signalCondition
[17:46:19.048]             sys.calls <- base::sys.calls
[17:46:19.048]             `[[` <- base::`[[`
[17:46:19.048]             `+` <- base::`+`
[17:46:19.048]             `<<-` <- base::`<<-`
[17:46:19.048]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.048]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.048]                   3L)]
[17:46:19.048]             }
[17:46:19.048]             function(cond) {
[17:46:19.048]                 is_error <- inherits(cond, "error")
[17:46:19.048]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.048]                   NULL)
[17:46:19.048]                 if (is_error) {
[17:46:19.048]                   sessionInformation <- function() {
[17:46:19.048]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.048]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.048]                       search = base::search(), system = base::Sys.info())
[17:46:19.048]                   }
[17:46:19.048]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.048]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.048]                     cond$call), session = sessionInformation(), 
[17:46:19.048]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.048]                   signalCondition(cond)
[17:46:19.048]                 }
[17:46:19.048]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.048]                 "immediateCondition"))) {
[17:46:19.048]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.048]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.048]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.048]                   if (TRUE && !signal) {
[17:46:19.048]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.048]                     {
[17:46:19.048]                       inherits <- base::inherits
[17:46:19.048]                       invokeRestart <- base::invokeRestart
[17:46:19.048]                       is.null <- base::is.null
[17:46:19.048]                       muffled <- FALSE
[17:46:19.048]                       if (inherits(cond, "message")) {
[17:46:19.048]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.048]                         if (muffled) 
[17:46:19.048]                           invokeRestart("muffleMessage")
[17:46:19.048]                       }
[17:46:19.048]                       else if (inherits(cond, "warning")) {
[17:46:19.048]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.048]                         if (muffled) 
[17:46:19.048]                           invokeRestart("muffleWarning")
[17:46:19.048]                       }
[17:46:19.048]                       else if (inherits(cond, "condition")) {
[17:46:19.048]                         if (!is.null(pattern)) {
[17:46:19.048]                           computeRestarts <- base::computeRestarts
[17:46:19.048]                           grepl <- base::grepl
[17:46:19.048]                           restarts <- computeRestarts(cond)
[17:46:19.048]                           for (restart in restarts) {
[17:46:19.048]                             name <- restart$name
[17:46:19.048]                             if (is.null(name)) 
[17:46:19.048]                               next
[17:46:19.048]                             if (!grepl(pattern, name)) 
[17:46:19.048]                               next
[17:46:19.048]                             invokeRestart(restart)
[17:46:19.048]                             muffled <- TRUE
[17:46:19.048]                             break
[17:46:19.048]                           }
[17:46:19.048]                         }
[17:46:19.048]                       }
[17:46:19.048]                       invisible(muffled)
[17:46:19.048]                     }
[17:46:19.048]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.048]                   }
[17:46:19.048]                 }
[17:46:19.048]                 else {
[17:46:19.048]                   if (TRUE) {
[17:46:19.048]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.048]                     {
[17:46:19.048]                       inherits <- base::inherits
[17:46:19.048]                       invokeRestart <- base::invokeRestart
[17:46:19.048]                       is.null <- base::is.null
[17:46:19.048]                       muffled <- FALSE
[17:46:19.048]                       if (inherits(cond, "message")) {
[17:46:19.048]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.048]                         if (muffled) 
[17:46:19.048]                           invokeRestart("muffleMessage")
[17:46:19.048]                       }
[17:46:19.048]                       else if (inherits(cond, "warning")) {
[17:46:19.048]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.048]                         if (muffled) 
[17:46:19.048]                           invokeRestart("muffleWarning")
[17:46:19.048]                       }
[17:46:19.048]                       else if (inherits(cond, "condition")) {
[17:46:19.048]                         if (!is.null(pattern)) {
[17:46:19.048]                           computeRestarts <- base::computeRestarts
[17:46:19.048]                           grepl <- base::grepl
[17:46:19.048]                           restarts <- computeRestarts(cond)
[17:46:19.048]                           for (restart in restarts) {
[17:46:19.048]                             name <- restart$name
[17:46:19.048]                             if (is.null(name)) 
[17:46:19.048]                               next
[17:46:19.048]                             if (!grepl(pattern, name)) 
[17:46:19.048]                               next
[17:46:19.048]                             invokeRestart(restart)
[17:46:19.048]                             muffled <- TRUE
[17:46:19.048]                             break
[17:46:19.048]                           }
[17:46:19.048]                         }
[17:46:19.048]                       }
[17:46:19.048]                       invisible(muffled)
[17:46:19.048]                     }
[17:46:19.048]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.048]                   }
[17:46:19.048]                 }
[17:46:19.048]             }
[17:46:19.048]         }))
[17:46:19.048]     }, error = function(ex) {
[17:46:19.048]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.048]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.048]                 ...future.rng), started = ...future.startTime, 
[17:46:19.048]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.048]             version = "1.8"), class = "FutureResult")
[17:46:19.048]     }, finally = {
[17:46:19.048]         if (!identical(...future.workdir, getwd())) 
[17:46:19.048]             setwd(...future.workdir)
[17:46:19.048]         {
[17:46:19.048]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.048]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.048]             }
[17:46:19.048]             base::options(...future.oldOptions)
[17:46:19.048]             if (.Platform$OS.type == "windows") {
[17:46:19.048]                 old_names <- names(...future.oldEnvVars)
[17:46:19.048]                 envs <- base::Sys.getenv()
[17:46:19.048]                 names <- names(envs)
[17:46:19.048]                 common <- intersect(names, old_names)
[17:46:19.048]                 added <- setdiff(names, old_names)
[17:46:19.048]                 removed <- setdiff(old_names, names)
[17:46:19.048]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.048]                   envs[common]]
[17:46:19.048]                 NAMES <- toupper(changed)
[17:46:19.048]                 args <- list()
[17:46:19.048]                 for (kk in seq_along(NAMES)) {
[17:46:19.048]                   name <- changed[[kk]]
[17:46:19.048]                   NAME <- NAMES[[kk]]
[17:46:19.048]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.048]                     next
[17:46:19.048]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.048]                 }
[17:46:19.048]                 NAMES <- toupper(added)
[17:46:19.048]                 for (kk in seq_along(NAMES)) {
[17:46:19.048]                   name <- added[[kk]]
[17:46:19.048]                   NAME <- NAMES[[kk]]
[17:46:19.048]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.048]                     next
[17:46:19.048]                   args[[name]] <- ""
[17:46:19.048]                 }
[17:46:19.048]                 NAMES <- toupper(removed)
[17:46:19.048]                 for (kk in seq_along(NAMES)) {
[17:46:19.048]                   name <- removed[[kk]]
[17:46:19.048]                   NAME <- NAMES[[kk]]
[17:46:19.048]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.048]                     next
[17:46:19.048]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.048]                 }
[17:46:19.048]                 if (length(args) > 0) 
[17:46:19.048]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.048]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.048]             }
[17:46:19.048]             else {
[17:46:19.048]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.048]             }
[17:46:19.048]             {
[17:46:19.048]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.048]                   0L) {
[17:46:19.048]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.048]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.048]                   base::options(opts)
[17:46:19.048]                 }
[17:46:19.048]                 {
[17:46:19.048]                   {
[17:46:19.048]                     NULL
[17:46:19.048]                     RNGkind("Mersenne-Twister")
[17:46:19.048]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:19.048]                       inherits = FALSE)
[17:46:19.048]                   }
[17:46:19.048]                   options(future.plan = NULL)
[17:46:19.048]                   if (is.na(NA_character_)) 
[17:46:19.048]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.048]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.048]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.048]                     .init = FALSE)
[17:46:19.048]                 }
[17:46:19.048]             }
[17:46:19.048]         }
[17:46:19.048]     })
[17:46:19.048]     if (TRUE) {
[17:46:19.048]         base::sink(type = "output", split = FALSE)
[17:46:19.048]         if (TRUE) {
[17:46:19.048]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.048]         }
[17:46:19.048]         else {
[17:46:19.048]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.048]         }
[17:46:19.048]         base::close(...future.stdout)
[17:46:19.048]         ...future.stdout <- NULL
[17:46:19.048]     }
[17:46:19.048]     ...future.result$conditions <- ...future.conditions
[17:46:19.048]     ...future.result$finished <- base::Sys.time()
[17:46:19.048]     ...future.result
[17:46:19.048] }
[17:46:19.050] assign_globals() ...
[17:46:19.050] List of 4
[17:46:19.050]  $ ii   : int 3
[17:46:19.050]  $ n    : int 4
[17:46:19.050]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[17:46:19.050]   ..- attr(*, "region")=List of 2
[17:46:19.050]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:46:19.050]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:46:19.050]   ..- attr(*, "tile")= int [1:2] 2 1
[17:46:19.050]  $ delay:function (counts)  
[17:46:19.050]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.050]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab495d190> 
[17:46:19.050]  - attr(*, "where")=List of 4
[17:46:19.050]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.050]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.050]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.050]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.050]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.050]  - attr(*, "resolved")= logi FALSE
[17:46:19.050]  - attr(*, "total_size")= num 14584
[17:46:19.050]  - attr(*, "already-done")= logi TRUE
[17:46:19.056] - copied ‘ii’ to environment
[17:46:19.056] - copied ‘n’ to environment
[17:46:19.056] - copied ‘C’ to environment
[17:46:19.056] - reassign environment for ‘delay’
[17:46:19.056] - copied ‘delay’ to environment
[17:46:19.056] assign_globals() ... done
[17:46:19.057] plan(): Setting new future strategy stack:
[17:46:19.057] List of future strategies:
[17:46:19.057] 1. sequential:
[17:46:19.057]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.057]    - tweaked: FALSE
[17:46:19.057]    - call: NULL
[17:46:19.057] plan(): nbrOfWorkers() = 1
[17:46:19.074] plan(): Setting new future strategy stack:
[17:46:19.074] List of future strategies:
[17:46:19.074] 1. sequential:
[17:46:19.074]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.074]    - tweaked: FALSE
[17:46:19.074]    - call: plan(strategy)
[17:46:19.075] plan(): nbrOfWorkers() = 1
[17:46:19.075] SequentialFuture started (and completed)
[17:46:19.075] signalConditions() ...
[17:46:19.075]  - include = ‘immediateCondition’
[17:46:19.075]  - exclude = 
[17:46:19.075]  - resignal = FALSE
[17:46:19.075]  - Number of conditions: 2
[17:46:19.075] signalConditions() ... done
[17:46:19.076] - Launch lazy future ... done
[17:46:19.076] run() for ‘SequentialFuture’ ... done
[17:46:19.076] - run() ... done
[17:46:19.076] - resolved() ...
[17:46:19.076] resolved() for ‘SequentialFuture’ ...
[17:46:19.076] - state: ‘finished’
[17:46:19.076] - run: TRUE
[17:46:19.076] - result: ‘FutureResult’
[17:46:19.076] resolved() for ‘SequentialFuture’ ... done
[17:46:19.076] - resolved: TRUE
[17:46:19.076] - resolved() ... done
[17:46:19.076] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[17:46:19.077] signalConditions() ...
[17:46:19.077]  - include = ‘immediateCondition’
[17:46:19.077]  - exclude = 
[17:46:19.077]  - resignal = FALSE
[17:46:19.077]  - Number of conditions: 2
[17:46:19.077] signalConditions() ... done
[17:46:19.077] Future state: ‘finished’
[17:46:19.077] signalConditions() ...
[17:46:19.077]  - include = ‘condition’
[17:46:19.078]  - exclude = ‘immediateCondition’
[17:46:19.078]  - resignal = TRUE
[17:46:19.078]  - Number of conditions: 2
[17:46:19.078]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:46:19.078]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.078] signalConditions() ... done
[17:46:19.079] resolved() for ‘Future’ ...
[17:46:19.079] - state: ‘created’
[17:46:19.079] - run: TRUE
[17:46:19.079] - run() ...
[17:46:19.079] run() for ‘Future’ ...
[17:46:19.079] - state: ‘created’
[17:46:19.079] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:19.080] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:19.080] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:19.080]   - Field: ‘label’
[17:46:19.080]   - Field: ‘local’
[17:46:19.080]   - Field: ‘owner’
[17:46:19.080]   - Field: ‘envir’
[17:46:19.080]   - Field: ‘packages’
[17:46:19.080]   - Field: ‘gc’
[17:46:19.080]   - Field: ‘conditions’
[17:46:19.080]   - Field: ‘expr’
[17:46:19.081]   - Field: ‘uuid’
[17:46:19.081]   - Field: ‘seed’
[17:46:19.081]   - Field: ‘version’
[17:46:19.081]   - Field: ‘result’
[17:46:19.081]   - Field: ‘asynchronous’
[17:46:19.081]   - Field: ‘calls’
[17:46:19.081]   - Field: ‘globals’
[17:46:19.081]   - Field: ‘stdout’
[17:46:19.081]   - Field: ‘earlySignal’
[17:46:19.081]   - Field: ‘lazy’
[17:46:19.081]   - Field: ‘state’
[17:46:19.082] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:19.082] - Launch lazy future ...
[17:46:19.082] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.082] Packages needed by future strategies (n = 0): <none>
[17:46:19.082] {
[17:46:19.082]     {
[17:46:19.082]         {
[17:46:19.082]             ...future.startTime <- base::Sys.time()
[17:46:19.082]             {
[17:46:19.082]                 {
[17:46:19.082]                   {
[17:46:19.082]                     {
[17:46:19.082]                       base::local({
[17:46:19.082]                         has_future <- base::requireNamespace("future", 
[17:46:19.082]                           quietly = TRUE)
[17:46:19.082]                         if (has_future) {
[17:46:19.082]                           ns <- base::getNamespace("future")
[17:46:19.082]                           version <- ns[[".package"]][["version"]]
[17:46:19.082]                           if (is.null(version)) 
[17:46:19.082]                             version <- utils::packageVersion("future")
[17:46:19.082]                         }
[17:46:19.082]                         else {
[17:46:19.082]                           version <- NULL
[17:46:19.082]                         }
[17:46:19.082]                         if (!has_future || version < "1.8.0") {
[17:46:19.082]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.082]                             "", base::R.version$version.string), 
[17:46:19.082]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:19.082]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:19.082]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.082]                               "release", "version")], collapse = " "), 
[17:46:19.082]                             hostname = base::Sys.info()[["nodename"]])
[17:46:19.082]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.082]                             info)
[17:46:19.082]                           info <- base::paste(info, collapse = "; ")
[17:46:19.082]                           if (!has_future) {
[17:46:19.082]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.082]                               info)
[17:46:19.082]                           }
[17:46:19.082]                           else {
[17:46:19.082]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.082]                               info, version)
[17:46:19.082]                           }
[17:46:19.082]                           base::stop(msg)
[17:46:19.082]                         }
[17:46:19.082]                       })
[17:46:19.082]                     }
[17:46:19.082]                     base::local({
[17:46:19.082]                       for (pkg in "future") {
[17:46:19.082]                         base::loadNamespace(pkg)
[17:46:19.082]                         base::library(pkg, character.only = TRUE)
[17:46:19.082]                       }
[17:46:19.082]                     })
[17:46:19.082]                   }
[17:46:19.082]                   ...future.strategy.old <- future::plan("list")
[17:46:19.082]                   options(future.plan = NULL)
[17:46:19.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.082]                 }
[17:46:19.082]                 ...future.workdir <- getwd()
[17:46:19.082]             }
[17:46:19.082]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.082]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.082]         }
[17:46:19.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.082]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.082]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.082]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.082]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.082]             base::names(...future.oldOptions))
[17:46:19.082]     }
[17:46:19.082]     if (FALSE) {
[17:46:19.082]     }
[17:46:19.082]     else {
[17:46:19.082]         if (TRUE) {
[17:46:19.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.082]                 open = "w")
[17:46:19.082]         }
[17:46:19.082]         else {
[17:46:19.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.082]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.082]         }
[17:46:19.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.082]             base::sink(type = "output", split = FALSE)
[17:46:19.082]             base::close(...future.stdout)
[17:46:19.082]         }, add = TRUE)
[17:46:19.082]     }
[17:46:19.082]     ...future.frame <- base::sys.nframe()
[17:46:19.082]     ...future.conditions <- base::list()
[17:46:19.082]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.082]     if (FALSE) {
[17:46:19.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.082]     }
[17:46:19.082]     ...future.result <- base::tryCatch({
[17:46:19.082]         base::withCallingHandlers({
[17:46:19.082]             ...future.value <- base::withVisible(base::local({
[17:46:19.082]                 message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.082]                   ii, n), appendLF = FALSE)
[17:46:19.082]                 fit <- mandelbrot(C)
[17:46:19.082]                 delay(fit)
[17:46:19.082]                 message(" done")
[17:46:19.082]                 fit
[17:46:19.082]             }))
[17:46:19.082]             future::FutureResult(value = ...future.value$value, 
[17:46:19.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.082]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.082]                     ...future.globalenv.names))
[17:46:19.082]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.082]         }, condition = base::local({
[17:46:19.082]             c <- base::c
[17:46:19.082]             inherits <- base::inherits
[17:46:19.082]             invokeRestart <- base::invokeRestart
[17:46:19.082]             length <- base::length
[17:46:19.082]             list <- base::list
[17:46:19.082]             seq.int <- base::seq.int
[17:46:19.082]             signalCondition <- base::signalCondition
[17:46:19.082]             sys.calls <- base::sys.calls
[17:46:19.082]             `[[` <- base::`[[`
[17:46:19.082]             `+` <- base::`+`
[17:46:19.082]             `<<-` <- base::`<<-`
[17:46:19.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.082]                   3L)]
[17:46:19.082]             }
[17:46:19.082]             function(cond) {
[17:46:19.082]                 is_error <- inherits(cond, "error")
[17:46:19.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.082]                   NULL)
[17:46:19.082]                 if (is_error) {
[17:46:19.082]                   sessionInformation <- function() {
[17:46:19.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.082]                       search = base::search(), system = base::Sys.info())
[17:46:19.082]                   }
[17:46:19.082]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.082]                     cond$call), session = sessionInformation(), 
[17:46:19.082]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.082]                   signalCondition(cond)
[17:46:19.082]                 }
[17:46:19.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.082]                 "immediateCondition"))) {
[17:46:19.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.082]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.082]                   if (TRUE && !signal) {
[17:46:19.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.082]                     {
[17:46:19.082]                       inherits <- base::inherits
[17:46:19.082]                       invokeRestart <- base::invokeRestart
[17:46:19.082]                       is.null <- base::is.null
[17:46:19.082]                       muffled <- FALSE
[17:46:19.082]                       if (inherits(cond, "message")) {
[17:46:19.082]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.082]                         if (muffled) 
[17:46:19.082]                           invokeRestart("muffleMessage")
[17:46:19.082]                       }
[17:46:19.082]                       else if (inherits(cond, "warning")) {
[17:46:19.082]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.082]                         if (muffled) 
[17:46:19.082]                           invokeRestart("muffleWarning")
[17:46:19.082]                       }
[17:46:19.082]                       else if (inherits(cond, "condition")) {
[17:46:19.082]                         if (!is.null(pattern)) {
[17:46:19.082]                           computeRestarts <- base::computeRestarts
[17:46:19.082]                           grepl <- base::grepl
[17:46:19.082]                           restarts <- computeRestarts(cond)
[17:46:19.082]                           for (restart in restarts) {
[17:46:19.082]                             name <- restart$name
[17:46:19.082]                             if (is.null(name)) 
[17:46:19.082]                               next
[17:46:19.082]                             if (!grepl(pattern, name)) 
[17:46:19.082]                               next
[17:46:19.082]                             invokeRestart(restart)
[17:46:19.082]                             muffled <- TRUE
[17:46:19.082]                             break
[17:46:19.082]                           }
[17:46:19.082]                         }
[17:46:19.082]                       }
[17:46:19.082]                       invisible(muffled)
[17:46:19.082]                     }
[17:46:19.082]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.082]                   }
[17:46:19.082]                 }
[17:46:19.082]                 else {
[17:46:19.082]                   if (TRUE) {
[17:46:19.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.082]                     {
[17:46:19.082]                       inherits <- base::inherits
[17:46:19.082]                       invokeRestart <- base::invokeRestart
[17:46:19.082]                       is.null <- base::is.null
[17:46:19.082]                       muffled <- FALSE
[17:46:19.082]                       if (inherits(cond, "message")) {
[17:46:19.082]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.082]                         if (muffled) 
[17:46:19.082]                           invokeRestart("muffleMessage")
[17:46:19.082]                       }
[17:46:19.082]                       else if (inherits(cond, "warning")) {
[17:46:19.082]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.082]                         if (muffled) 
[17:46:19.082]                           invokeRestart("muffleWarning")
[17:46:19.082]                       }
[17:46:19.082]                       else if (inherits(cond, "condition")) {
[17:46:19.082]                         if (!is.null(pattern)) {
[17:46:19.082]                           computeRestarts <- base::computeRestarts
[17:46:19.082]                           grepl <- base::grepl
[17:46:19.082]                           restarts <- computeRestarts(cond)
[17:46:19.082]                           for (restart in restarts) {
[17:46:19.082]                             name <- restart$name
[17:46:19.082]                             if (is.null(name)) 
[17:46:19.082]                               next
[17:46:19.082]                             if (!grepl(pattern, name)) 
[17:46:19.082]                               next
[17:46:19.082]                             invokeRestart(restart)
[17:46:19.082]                             muffled <- TRUE
[17:46:19.082]                             break
[17:46:19.082]                           }
[17:46:19.082]                         }
[17:46:19.082]                       }
[17:46:19.082]                       invisible(muffled)
[17:46:19.082]                     }
[17:46:19.082]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.082]                   }
[17:46:19.082]                 }
[17:46:19.082]             }
[17:46:19.082]         }))
[17:46:19.082]     }, error = function(ex) {
[17:46:19.082]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.082]                 ...future.rng), started = ...future.startTime, 
[17:46:19.082]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.082]             version = "1.8"), class = "FutureResult")
[17:46:19.082]     }, finally = {
[17:46:19.082]         if (!identical(...future.workdir, getwd())) 
[17:46:19.082]             setwd(...future.workdir)
[17:46:19.082]         {
[17:46:19.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.082]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.082]             }
[17:46:19.082]             base::options(...future.oldOptions)
[17:46:19.082]             if (.Platform$OS.type == "windows") {
[17:46:19.082]                 old_names <- names(...future.oldEnvVars)
[17:46:19.082]                 envs <- base::Sys.getenv()
[17:46:19.082]                 names <- names(envs)
[17:46:19.082]                 common <- intersect(names, old_names)
[17:46:19.082]                 added <- setdiff(names, old_names)
[17:46:19.082]                 removed <- setdiff(old_names, names)
[17:46:19.082]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.082]                   envs[common]]
[17:46:19.082]                 NAMES <- toupper(changed)
[17:46:19.082]                 args <- list()
[17:46:19.082]                 for (kk in seq_along(NAMES)) {
[17:46:19.082]                   name <- changed[[kk]]
[17:46:19.082]                   NAME <- NAMES[[kk]]
[17:46:19.082]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.082]                     next
[17:46:19.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.082]                 }
[17:46:19.082]                 NAMES <- toupper(added)
[17:46:19.082]                 for (kk in seq_along(NAMES)) {
[17:46:19.082]                   name <- added[[kk]]
[17:46:19.082]                   NAME <- NAMES[[kk]]
[17:46:19.082]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.082]                     next
[17:46:19.082]                   args[[name]] <- ""
[17:46:19.082]                 }
[17:46:19.082]                 NAMES <- toupper(removed)
[17:46:19.082]                 for (kk in seq_along(NAMES)) {
[17:46:19.082]                   name <- removed[[kk]]
[17:46:19.082]                   NAME <- NAMES[[kk]]
[17:46:19.082]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.082]                     next
[17:46:19.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.082]                 }
[17:46:19.082]                 if (length(args) > 0) 
[17:46:19.082]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.082]             }
[17:46:19.082]             else {
[17:46:19.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.082]             }
[17:46:19.082]             {
[17:46:19.082]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.082]                   0L) {
[17:46:19.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.082]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.082]                   base::options(opts)
[17:46:19.082]                 }
[17:46:19.082]                 {
[17:46:19.082]                   {
[17:46:19.082]                     NULL
[17:46:19.082]                     RNGkind("Mersenne-Twister")
[17:46:19.082]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:19.082]                       inherits = FALSE)
[17:46:19.082]                   }
[17:46:19.082]                   options(future.plan = NULL)
[17:46:19.082]                   if (is.na(NA_character_)) 
[17:46:19.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.082]                     .init = FALSE)
[17:46:19.082]                 }
[17:46:19.082]             }
[17:46:19.082]         }
[17:46:19.082]     })
[17:46:19.082]     if (TRUE) {
[17:46:19.082]         base::sink(type = "output", split = FALSE)
[17:46:19.082]         if (TRUE) {
[17:46:19.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.082]         }
[17:46:19.082]         else {
[17:46:19.082]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.082]         }
[17:46:19.082]         base::close(...future.stdout)
[17:46:19.082]         ...future.stdout <- NULL
[17:46:19.082]     }
[17:46:19.082]     ...future.result$conditions <- ...future.conditions
[17:46:19.082]     ...future.result$finished <- base::Sys.time()
[17:46:19.082]     ...future.result
[17:46:19.082] }
[17:46:19.084] assign_globals() ...
[17:46:19.084] List of 4
[17:46:19.084]  $ ii   : int 4
[17:46:19.084]  $ n    : int 4
[17:46:19.084]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[17:46:19.084]   ..- attr(*, "region")=List of 2
[17:46:19.084]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:46:19.084]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:46:19.084]   ..- attr(*, "tile")= int [1:2] 2 2
[17:46:19.084]  $ delay:function (counts)  
[17:46:19.084]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.084]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab495d190> 
[17:46:19.084]  - attr(*, "where")=List of 4
[17:46:19.084]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.084]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.084]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.084]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.084]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.084]  - attr(*, "resolved")= logi FALSE
[17:46:19.084]  - attr(*, "total_size")= num 14584
[17:46:19.084]  - attr(*, "already-done")= logi TRUE
[17:46:19.090] - copied ‘ii’ to environment
[17:46:19.090] - copied ‘n’ to environment
[17:46:19.090] - copied ‘C’ to environment
[17:46:19.090] - reassign environment for ‘delay’
[17:46:19.091] - copied ‘delay’ to environment
[17:46:19.091] assign_globals() ... done
[17:46:19.091] plan(): Setting new future strategy stack:
[17:46:19.091] List of future strategies:
[17:46:19.091] 1. sequential:
[17:46:19.091]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.091]    - tweaked: FALSE
[17:46:19.091]    - call: NULL
[17:46:19.092] plan(): nbrOfWorkers() = 1
[17:46:19.106] plan(): Setting new future strategy stack:
[17:46:19.106] List of future strategies:
[17:46:19.106] 1. sequential:
[17:46:19.106]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.106]    - tweaked: FALSE
[17:46:19.106]    - call: plan(strategy)
[17:46:19.107] plan(): nbrOfWorkers() = 1
[17:46:19.107] SequentialFuture started (and completed)
[17:46:19.107] signalConditions() ...
[17:46:19.107]  - include = ‘immediateCondition’
[17:46:19.107]  - exclude = 
[17:46:19.107]  - resignal = FALSE
[17:46:19.107]  - Number of conditions: 2
[17:46:19.108] signalConditions() ... done
[17:46:19.108] - Launch lazy future ... done
[17:46:19.108] run() for ‘SequentialFuture’ ... done
[17:46:19.108] - run() ... done
[17:46:19.108] - resolved() ...
[17:46:19.108] resolved() for ‘SequentialFuture’ ...
[17:46:19.108] - state: ‘finished’
[17:46:19.108] - run: TRUE
[17:46:19.108] - result: ‘FutureResult’
[17:46:19.108] resolved() for ‘SequentialFuture’ ... done
[17:46:19.108] - resolved: TRUE
[17:46:19.109] - resolved() ... done
[17:46:19.109] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[17:46:19.109] signalConditions() ...
[17:46:19.109]  - include = ‘immediateCondition’
[17:46:19.109]  - exclude = 
[17:46:19.109]  - resignal = FALSE
[17:46:19.109]  - Number of conditions: 2
[17:46:19.109] signalConditions() ... done
[17:46:19.109] Future state: ‘finished’
[17:46:19.109] signalConditions() ...
[17:46:19.110]  - include = ‘condition’
[17:46:19.110]  - exclude = ‘immediateCondition’
[17:46:19.110]  - resignal = TRUE
[17:46:19.110]  - Number of conditions: 2
[17:46:19.110]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:46:19.110]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.110] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[17:46:19.116] plan(): Setting new future strategy stack:
[17:46:19.116] List of future strategies:
[17:46:19.116] 1. multicore:
[17:46:19.116]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:19.116]    - tweaked: FALSE
[17:46:19.116]    - call: plan(strategy)
[17:46:19.120] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:46:19.124] getGlobalsAndPackages() ...
[17:46:19.124] Searching for globals...
[17:46:19.130] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:19.130] Searching for globals ... DONE
[17:46:19.130] Resolving globals: FALSE
[17:46:19.131] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:19.131] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:19.131] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:19.131] - packages: [1] ‘future’
[17:46:19.131] getGlobalsAndPackages() ... DONE
 2[17:46:19.135] getGlobalsAndPackages() ...
[17:46:19.135] Searching for globals...
[17:46:19.138] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:19.139] Searching for globals ... DONE
[17:46:19.139] Resolving globals: FALSE
[17:46:19.139] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:19.140] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:19.140] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:19.140] - packages: [1] ‘future’
[17:46:19.140] getGlobalsAndPackages() ... DONE
 3[17:46:19.140] getGlobalsAndPackages() ...
[17:46:19.140] Searching for globals...
[17:46:19.144] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:19.144] Searching for globals ... DONE
[17:46:19.144] Resolving globals: FALSE
[17:46:19.144] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:19.145] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:19.145] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:19.145] - packages: [1] ‘future’
[17:46:19.145] getGlobalsAndPackages() ... DONE
 4[17:46:19.145] getGlobalsAndPackages() ...
[17:46:19.146] Searching for globals...
[17:46:19.149] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:19.149] Searching for globals ... DONE
[17:46:19.149] Resolving globals: FALSE
[17:46:19.149] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:19.150] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:19.150] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:19.150] - packages: [1] ‘future’
[17:46:19.150] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:46:19.159] resolved() for ‘Future’ ...
[17:46:19.159] - state: ‘created’
[17:46:19.159] - run: TRUE
[17:46:19.159] - run() ...
[17:46:19.159] run() for ‘Future’ ...
[17:46:19.159] - state: ‘created’
[17:46:19.160] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:19.163] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:19.163] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:19.164]   - Field: ‘label’
[17:46:19.164]   - Field: ‘local’
[17:46:19.164]   - Field: ‘owner’
[17:46:19.164]   - Field: ‘envir’
[17:46:19.164]   - Field: ‘workers’
[17:46:19.164]   - Field: ‘packages’
[17:46:19.164]   - Field: ‘gc’
[17:46:19.164]   - Field: ‘job’
[17:46:19.164]   - Field: ‘conditions’
[17:46:19.164]   - Field: ‘expr’
[17:46:19.165]   - Field: ‘uuid’
[17:46:19.165]   - Field: ‘seed’
[17:46:19.165]   - Field: ‘version’
[17:46:19.165]   - Field: ‘result’
[17:46:19.165]   - Field: ‘asynchronous’
[17:46:19.165]   - Field: ‘calls’
[17:46:19.165]   - Field: ‘globals’
[17:46:19.165]   - Field: ‘stdout’
[17:46:19.165]   - Field: ‘earlySignal’
[17:46:19.165]   - Field: ‘lazy’
[17:46:19.165]   - Field: ‘state’
[17:46:19.165] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:19.166] - Launch lazy future ...
[17:46:19.167] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.167] Packages needed by future strategies (n = 0): <none>
[17:46:19.167] {
[17:46:19.167]     {
[17:46:19.167]         {
[17:46:19.167]             ...future.startTime <- base::Sys.time()
[17:46:19.167]             {
[17:46:19.167]                 {
[17:46:19.167]                   {
[17:46:19.167]                     {
[17:46:19.167]                       {
[17:46:19.167]                         base::local({
[17:46:19.167]                           has_future <- base::requireNamespace("future", 
[17:46:19.167]                             quietly = TRUE)
[17:46:19.167]                           if (has_future) {
[17:46:19.167]                             ns <- base::getNamespace("future")
[17:46:19.167]                             version <- ns[[".package"]][["version"]]
[17:46:19.167]                             if (is.null(version)) 
[17:46:19.167]                               version <- utils::packageVersion("future")
[17:46:19.167]                           }
[17:46:19.167]                           else {
[17:46:19.167]                             version <- NULL
[17:46:19.167]                           }
[17:46:19.167]                           if (!has_future || version < "1.8.0") {
[17:46:19.167]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.167]                               "", base::R.version$version.string), 
[17:46:19.167]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:19.167]                                 base::R.version$platform, 8 * 
[17:46:19.167]                                   base::.Machine$sizeof.pointer), 
[17:46:19.167]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.167]                                 "release", "version")], collapse = " "), 
[17:46:19.167]                               hostname = base::Sys.info()[["nodename"]])
[17:46:19.167]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.167]                               info)
[17:46:19.167]                             info <- base::paste(info, collapse = "; ")
[17:46:19.167]                             if (!has_future) {
[17:46:19.167]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.167]                                 info)
[17:46:19.167]                             }
[17:46:19.167]                             else {
[17:46:19.167]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.167]                                 info, version)
[17:46:19.167]                             }
[17:46:19.167]                             base::stop(msg)
[17:46:19.167]                           }
[17:46:19.167]                         })
[17:46:19.167]                       }
[17:46:19.167]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:19.167]                       base::options(mc.cores = 1L)
[17:46:19.167]                     }
[17:46:19.167]                     base::local({
[17:46:19.167]                       for (pkg in "future") {
[17:46:19.167]                         base::loadNamespace(pkg)
[17:46:19.167]                         base::library(pkg, character.only = TRUE)
[17:46:19.167]                       }
[17:46:19.167]                     })
[17:46:19.167]                   }
[17:46:19.167]                   ...future.strategy.old <- future::plan("list")
[17:46:19.167]                   options(future.plan = NULL)
[17:46:19.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.167]                 }
[17:46:19.167]                 ...future.workdir <- getwd()
[17:46:19.167]             }
[17:46:19.167]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.167]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.167]         }
[17:46:19.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.167]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.167]             base::names(...future.oldOptions))
[17:46:19.167]     }
[17:46:19.167]     if (FALSE) {
[17:46:19.167]     }
[17:46:19.167]     else {
[17:46:19.167]         if (TRUE) {
[17:46:19.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.167]                 open = "w")
[17:46:19.167]         }
[17:46:19.167]         else {
[17:46:19.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.167]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.167]         }
[17:46:19.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.167]             base::sink(type = "output", split = FALSE)
[17:46:19.167]             base::close(...future.stdout)
[17:46:19.167]         }, add = TRUE)
[17:46:19.167]     }
[17:46:19.167]     ...future.frame <- base::sys.nframe()
[17:46:19.167]     ...future.conditions <- base::list()
[17:46:19.167]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.167]     if (FALSE) {
[17:46:19.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.167]     }
[17:46:19.167]     ...future.result <- base::tryCatch({
[17:46:19.167]         base::withCallingHandlers({
[17:46:19.167]             ...future.value <- base::withVisible(base::local({
[17:46:19.167]                 withCallingHandlers({
[17:46:19.167]                   {
[17:46:19.167]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.167]                       ii, n), appendLF = FALSE)
[17:46:19.167]                     fit <- mandelbrot(C)
[17:46:19.167]                     delay(fit)
[17:46:19.167]                     message(" done")
[17:46:19.167]                     fit
[17:46:19.167]                   }
[17:46:19.167]                 }, immediateCondition = function(cond) {
[17:46:19.167]                   save_rds <- function (object, pathname, ...) 
[17:46:19.167]                   {
[17:46:19.167]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:19.167]                     if (file_test("-f", pathname_tmp)) {
[17:46:19.167]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.167]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:19.167]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.167]                         fi_tmp[["mtime"]])
[17:46:19.167]                     }
[17:46:19.167]                     tryCatch({
[17:46:19.167]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:19.167]                     }, error = function(ex) {
[17:46:19.167]                       msg <- conditionMessage(ex)
[17:46:19.167]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.167]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:19.167]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.167]                         fi_tmp[["mtime"]], msg)
[17:46:19.167]                       ex$message <- msg
[17:46:19.167]                       stop(ex)
[17:46:19.167]                     })
[17:46:19.167]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:19.167]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:19.167]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:19.167]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.167]                       fi <- file.info(pathname)
[17:46:19.167]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:19.167]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.167]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:19.167]                         fi[["size"]], fi[["mtime"]])
[17:46:19.167]                       stop(msg)
[17:46:19.167]                     }
[17:46:19.167]                     invisible(pathname)
[17:46:19.167]                   }
[17:46:19.167]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:19.167]                     rootPath = tempdir()) 
[17:46:19.167]                   {
[17:46:19.167]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:19.167]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:19.167]                       tmpdir = path, fileext = ".rds")
[17:46:19.167]                     save_rds(obj, file)
[17:46:19.167]                   }
[17:46:19.167]                   saveImmediateCondition(cond, path = "/tmp/RtmpzeTRlJ/.future/immediateConditions")
[17:46:19.167]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.167]                   {
[17:46:19.167]                     inherits <- base::inherits
[17:46:19.167]                     invokeRestart <- base::invokeRestart
[17:46:19.167]                     is.null <- base::is.null
[17:46:19.167]                     muffled <- FALSE
[17:46:19.167]                     if (inherits(cond, "message")) {
[17:46:19.167]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:19.167]                       if (muffled) 
[17:46:19.167]                         invokeRestart("muffleMessage")
[17:46:19.167]                     }
[17:46:19.167]                     else if (inherits(cond, "warning")) {
[17:46:19.167]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:19.167]                       if (muffled) 
[17:46:19.167]                         invokeRestart("muffleWarning")
[17:46:19.167]                     }
[17:46:19.167]                     else if (inherits(cond, "condition")) {
[17:46:19.167]                       if (!is.null(pattern)) {
[17:46:19.167]                         computeRestarts <- base::computeRestarts
[17:46:19.167]                         grepl <- base::grepl
[17:46:19.167]                         restarts <- computeRestarts(cond)
[17:46:19.167]                         for (restart in restarts) {
[17:46:19.167]                           name <- restart$name
[17:46:19.167]                           if (is.null(name)) 
[17:46:19.167]                             next
[17:46:19.167]                           if (!grepl(pattern, name)) 
[17:46:19.167]                             next
[17:46:19.167]                           invokeRestart(restart)
[17:46:19.167]                           muffled <- TRUE
[17:46:19.167]                           break
[17:46:19.167]                         }
[17:46:19.167]                       }
[17:46:19.167]                     }
[17:46:19.167]                     invisible(muffled)
[17:46:19.167]                   }
[17:46:19.167]                   muffleCondition(cond)
[17:46:19.167]                 })
[17:46:19.167]             }))
[17:46:19.167]             future::FutureResult(value = ...future.value$value, 
[17:46:19.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.167]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.167]                     ...future.globalenv.names))
[17:46:19.167]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.167]         }, condition = base::local({
[17:46:19.167]             c <- base::c
[17:46:19.167]             inherits <- base::inherits
[17:46:19.167]             invokeRestart <- base::invokeRestart
[17:46:19.167]             length <- base::length
[17:46:19.167]             list <- base::list
[17:46:19.167]             seq.int <- base::seq.int
[17:46:19.167]             signalCondition <- base::signalCondition
[17:46:19.167]             sys.calls <- base::sys.calls
[17:46:19.167]             `[[` <- base::`[[`
[17:46:19.167]             `+` <- base::`+`
[17:46:19.167]             `<<-` <- base::`<<-`
[17:46:19.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.167]                   3L)]
[17:46:19.167]             }
[17:46:19.167]             function(cond) {
[17:46:19.167]                 is_error <- inherits(cond, "error")
[17:46:19.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.167]                   NULL)
[17:46:19.167]                 if (is_error) {
[17:46:19.167]                   sessionInformation <- function() {
[17:46:19.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.167]                       search = base::search(), system = base::Sys.info())
[17:46:19.167]                   }
[17:46:19.167]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.167]                     cond$call), session = sessionInformation(), 
[17:46:19.167]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.167]                   signalCondition(cond)
[17:46:19.167]                 }
[17:46:19.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.167]                 "immediateCondition"))) {
[17:46:19.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.167]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.167]                   if (TRUE && !signal) {
[17:46:19.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.167]                     {
[17:46:19.167]                       inherits <- base::inherits
[17:46:19.167]                       invokeRestart <- base::invokeRestart
[17:46:19.167]                       is.null <- base::is.null
[17:46:19.167]                       muffled <- FALSE
[17:46:19.167]                       if (inherits(cond, "message")) {
[17:46:19.167]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.167]                         if (muffled) 
[17:46:19.167]                           invokeRestart("muffleMessage")
[17:46:19.167]                       }
[17:46:19.167]                       else if (inherits(cond, "warning")) {
[17:46:19.167]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.167]                         if (muffled) 
[17:46:19.167]                           invokeRestart("muffleWarning")
[17:46:19.167]                       }
[17:46:19.167]                       else if (inherits(cond, "condition")) {
[17:46:19.167]                         if (!is.null(pattern)) {
[17:46:19.167]                           computeRestarts <- base::computeRestarts
[17:46:19.167]                           grepl <- base::grepl
[17:46:19.167]                           restarts <- computeRestarts(cond)
[17:46:19.167]                           for (restart in restarts) {
[17:46:19.167]                             name <- restart$name
[17:46:19.167]                             if (is.null(name)) 
[17:46:19.167]                               next
[17:46:19.167]                             if (!grepl(pattern, name)) 
[17:46:19.167]                               next
[17:46:19.167]                             invokeRestart(restart)
[17:46:19.167]                             muffled <- TRUE
[17:46:19.167]                             break
[17:46:19.167]                           }
[17:46:19.167]                         }
[17:46:19.167]                       }
[17:46:19.167]                       invisible(muffled)
[17:46:19.167]                     }
[17:46:19.167]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.167]                   }
[17:46:19.167]                 }
[17:46:19.167]                 else {
[17:46:19.167]                   if (TRUE) {
[17:46:19.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.167]                     {
[17:46:19.167]                       inherits <- base::inherits
[17:46:19.167]                       invokeRestart <- base::invokeRestart
[17:46:19.167]                       is.null <- base::is.null
[17:46:19.167]                       muffled <- FALSE
[17:46:19.167]                       if (inherits(cond, "message")) {
[17:46:19.167]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.167]                         if (muffled) 
[17:46:19.167]                           invokeRestart("muffleMessage")
[17:46:19.167]                       }
[17:46:19.167]                       else if (inherits(cond, "warning")) {
[17:46:19.167]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.167]                         if (muffled) 
[17:46:19.167]                           invokeRestart("muffleWarning")
[17:46:19.167]                       }
[17:46:19.167]                       else if (inherits(cond, "condition")) {
[17:46:19.167]                         if (!is.null(pattern)) {
[17:46:19.167]                           computeRestarts <- base::computeRestarts
[17:46:19.167]                           grepl <- base::grepl
[17:46:19.167]                           restarts <- computeRestarts(cond)
[17:46:19.167]                           for (restart in restarts) {
[17:46:19.167]                             name <- restart$name
[17:46:19.167]                             if (is.null(name)) 
[17:46:19.167]                               next
[17:46:19.167]                             if (!grepl(pattern, name)) 
[17:46:19.167]                               next
[17:46:19.167]                             invokeRestart(restart)
[17:46:19.167]                             muffled <- TRUE
[17:46:19.167]                             break
[17:46:19.167]                           }
[17:46:19.167]                         }
[17:46:19.167]                       }
[17:46:19.167]                       invisible(muffled)
[17:46:19.167]                     }
[17:46:19.167]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.167]                   }
[17:46:19.167]                 }
[17:46:19.167]             }
[17:46:19.167]         }))
[17:46:19.167]     }, error = function(ex) {
[17:46:19.167]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.167]                 ...future.rng), started = ...future.startTime, 
[17:46:19.167]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.167]             version = "1.8"), class = "FutureResult")
[17:46:19.167]     }, finally = {
[17:46:19.167]         if (!identical(...future.workdir, getwd())) 
[17:46:19.167]             setwd(...future.workdir)
[17:46:19.167]         {
[17:46:19.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.167]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.167]             }
[17:46:19.167]             base::options(...future.oldOptions)
[17:46:19.167]             if (.Platform$OS.type == "windows") {
[17:46:19.167]                 old_names <- names(...future.oldEnvVars)
[17:46:19.167]                 envs <- base::Sys.getenv()
[17:46:19.167]                 names <- names(envs)
[17:46:19.167]                 common <- intersect(names, old_names)
[17:46:19.167]                 added <- setdiff(names, old_names)
[17:46:19.167]                 removed <- setdiff(old_names, names)
[17:46:19.167]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.167]                   envs[common]]
[17:46:19.167]                 NAMES <- toupper(changed)
[17:46:19.167]                 args <- list()
[17:46:19.167]                 for (kk in seq_along(NAMES)) {
[17:46:19.167]                   name <- changed[[kk]]
[17:46:19.167]                   NAME <- NAMES[[kk]]
[17:46:19.167]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.167]                     next
[17:46:19.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.167]                 }
[17:46:19.167]                 NAMES <- toupper(added)
[17:46:19.167]                 for (kk in seq_along(NAMES)) {
[17:46:19.167]                   name <- added[[kk]]
[17:46:19.167]                   NAME <- NAMES[[kk]]
[17:46:19.167]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.167]                     next
[17:46:19.167]                   args[[name]] <- ""
[17:46:19.167]                 }
[17:46:19.167]                 NAMES <- toupper(removed)
[17:46:19.167]                 for (kk in seq_along(NAMES)) {
[17:46:19.167]                   name <- removed[[kk]]
[17:46:19.167]                   NAME <- NAMES[[kk]]
[17:46:19.167]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.167]                     next
[17:46:19.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.167]                 }
[17:46:19.167]                 if (length(args) > 0) 
[17:46:19.167]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.167]             }
[17:46:19.167]             else {
[17:46:19.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.167]             }
[17:46:19.167]             {
[17:46:19.167]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.167]                   0L) {
[17:46:19.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.167]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.167]                   base::options(opts)
[17:46:19.167]                 }
[17:46:19.167]                 {
[17:46:19.167]                   {
[17:46:19.167]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:19.167]                     NULL
[17:46:19.167]                   }
[17:46:19.167]                   options(future.plan = NULL)
[17:46:19.167]                   if (is.na(NA_character_)) 
[17:46:19.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.167]                     .init = FALSE)
[17:46:19.167]                 }
[17:46:19.167]             }
[17:46:19.167]         }
[17:46:19.167]     })
[17:46:19.167]     if (TRUE) {
[17:46:19.167]         base::sink(type = "output", split = FALSE)
[17:46:19.167]         if (TRUE) {
[17:46:19.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.167]         }
[17:46:19.167]         else {
[17:46:19.167]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.167]         }
[17:46:19.167]         base::close(...future.stdout)
[17:46:19.167]         ...future.stdout <- NULL
[17:46:19.167]     }
[17:46:19.167]     ...future.result$conditions <- ...future.conditions
[17:46:19.167]     ...future.result$finished <- base::Sys.time()
[17:46:19.167]     ...future.result
[17:46:19.167] }
[17:46:19.170] assign_globals() ...
[17:46:19.170] List of 4
[17:46:19.170]  $ ii   : int 1
[17:46:19.170]  $ n    : int 4
[17:46:19.170]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[17:46:19.170]   ..- attr(*, "region")=List of 2
[17:46:19.170]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:46:19.170]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:46:19.170]   ..- attr(*, "tile")= int [1:2] 1 1
[17:46:19.170]  $ delay:function (counts)  
[17:46:19.170]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.170]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab61a9590> 
[17:46:19.170]  - attr(*, "where")=List of 4
[17:46:19.170]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.170]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.170]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.170]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.170]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.170]  - attr(*, "resolved")= logi FALSE
[17:46:19.170]  - attr(*, "total_size")= num 14584
[17:46:19.170]  - attr(*, "already-done")= logi TRUE
[17:46:19.176] - copied ‘ii’ to environment
[17:46:19.176] - copied ‘n’ to environment
[17:46:19.176] - copied ‘C’ to environment
[17:46:19.176] - reassign environment for ‘delay’
[17:46:19.176] - copied ‘delay’ to environment
[17:46:19.176] assign_globals() ... done
[17:46:19.176] requestCore(): workers = 2
[17:46:19.179] MulticoreFuture started
[17:46:19.180] - Launch lazy future ... done
[17:46:19.180] run() for ‘MulticoreFuture’ ... done
[17:46:19.180] - run() ... done
[17:46:19.180] - resolved() ...
[17:46:19.180] plan(): Setting new future strategy stack:
[17:46:19.181] List of future strategies:
[17:46:19.181] 1. sequential:
[17:46:19.181]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.181]    - tweaked: FALSE
[17:46:19.181]    - call: NULL
[17:46:19.182] plan(): nbrOfWorkers() = 1
[17:46:19.185] plan(): Setting new future strategy stack:
[17:46:19.185] List of future strategies:
[17:46:19.185] 1. multicore:
[17:46:19.185]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:19.185]    - tweaked: FALSE
[17:46:19.185]    - call: plan(strategy)
[17:46:19.190] plan(): nbrOfWorkers() = 2
[17:46:19.192] - resolved: TRUE
[17:46:19.192] - resolved() ... done
[17:46:19.192] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[17:46:19.193] result() for MulticoreFuture ...
[17:46:19.198] result() for MulticoreFuture ...
[17:46:19.198] result() for MulticoreFuture ... done
[17:46:19.199] signalConditions() ...
[17:46:19.199]  - include = ‘immediateCondition’
[17:46:19.199]  - exclude = 
[17:46:19.199]  - resignal = FALSE
[17:46:19.199]  - Number of conditions: 2
[17:46:19.199] signalConditions() ... done
[17:46:19.199] result() for MulticoreFuture ... done
[17:46:19.199] result() for MulticoreFuture ...
[17:46:19.200] result() for MulticoreFuture ... done
[17:46:19.200] signalConditions() ...
[17:46:19.200]  - include = ‘immediateCondition’
[17:46:19.200]  - exclude = 
[17:46:19.200]  - resignal = FALSE
[17:46:19.200]  - Number of conditions: 2
[17:46:19.200] signalConditions() ... done
[17:46:19.200] Future state: ‘finished’
[17:46:19.200] result() for MulticoreFuture ...
[17:46:19.200] result() for MulticoreFuture ... done
[17:46:19.201] signalConditions() ...
[17:46:19.201]  - include = ‘condition’
[17:46:19.201]  - exclude = ‘immediateCondition’
[17:46:19.201]  - resignal = TRUE
[17:46:19.201]  - Number of conditions: 2
[17:46:19.201]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:46:19.201]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.201] signalConditions() ... done
[17:46:19.202] resolved() for ‘Future’ ...
[17:46:19.202] - state: ‘created’
[17:46:19.202] - run: TRUE
[17:46:19.203] - run() ...
[17:46:19.203] run() for ‘Future’ ...
[17:46:19.203] - state: ‘created’
[17:46:19.203] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:19.207] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:19.207] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:19.208]   - Field: ‘label’
[17:46:19.208]   - Field: ‘local’
[17:46:19.208]   - Field: ‘owner’
[17:46:19.208]   - Field: ‘envir’
[17:46:19.208]   - Field: ‘workers’
[17:46:19.208]   - Field: ‘packages’
[17:46:19.208]   - Field: ‘gc’
[17:46:19.208]   - Field: ‘job’
[17:46:19.208]   - Field: ‘conditions’
[17:46:19.209]   - Field: ‘expr’
[17:46:19.209]   - Field: ‘uuid’
[17:46:19.209]   - Field: ‘seed’
[17:46:19.209]   - Field: ‘version’
[17:46:19.209]   - Field: ‘result’
[17:46:19.209]   - Field: ‘asynchronous’
[17:46:19.209]   - Field: ‘calls’
[17:46:19.209]   - Field: ‘globals’
[17:46:19.209]   - Field: ‘stdout’
[17:46:19.209]   - Field: ‘earlySignal’
[17:46:19.210]   - Field: ‘lazy’
[17:46:19.210]   - Field: ‘state’
[17:46:19.210] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:19.210] - Launch lazy future ...
[17:46:19.210] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.210] Packages needed by future strategies (n = 0): <none>
[17:46:19.211] {
[17:46:19.211]     {
[17:46:19.211]         {
[17:46:19.211]             ...future.startTime <- base::Sys.time()
[17:46:19.211]             {
[17:46:19.211]                 {
[17:46:19.211]                   {
[17:46:19.211]                     {
[17:46:19.211]                       {
[17:46:19.211]                         base::local({
[17:46:19.211]                           has_future <- base::requireNamespace("future", 
[17:46:19.211]                             quietly = TRUE)
[17:46:19.211]                           if (has_future) {
[17:46:19.211]                             ns <- base::getNamespace("future")
[17:46:19.211]                             version <- ns[[".package"]][["version"]]
[17:46:19.211]                             if (is.null(version)) 
[17:46:19.211]                               version <- utils::packageVersion("future")
[17:46:19.211]                           }
[17:46:19.211]                           else {
[17:46:19.211]                             version <- NULL
[17:46:19.211]                           }
[17:46:19.211]                           if (!has_future || version < "1.8.0") {
[17:46:19.211]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.211]                               "", base::R.version$version.string), 
[17:46:19.211]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:19.211]                                 base::R.version$platform, 8 * 
[17:46:19.211]                                   base::.Machine$sizeof.pointer), 
[17:46:19.211]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.211]                                 "release", "version")], collapse = " "), 
[17:46:19.211]                               hostname = base::Sys.info()[["nodename"]])
[17:46:19.211]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.211]                               info)
[17:46:19.211]                             info <- base::paste(info, collapse = "; ")
[17:46:19.211]                             if (!has_future) {
[17:46:19.211]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.211]                                 info)
[17:46:19.211]                             }
[17:46:19.211]                             else {
[17:46:19.211]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.211]                                 info, version)
[17:46:19.211]                             }
[17:46:19.211]                             base::stop(msg)
[17:46:19.211]                           }
[17:46:19.211]                         })
[17:46:19.211]                       }
[17:46:19.211]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:19.211]                       base::options(mc.cores = 1L)
[17:46:19.211]                     }
[17:46:19.211]                     base::local({
[17:46:19.211]                       for (pkg in "future") {
[17:46:19.211]                         base::loadNamespace(pkg)
[17:46:19.211]                         base::library(pkg, character.only = TRUE)
[17:46:19.211]                       }
[17:46:19.211]                     })
[17:46:19.211]                   }
[17:46:19.211]                   ...future.strategy.old <- future::plan("list")
[17:46:19.211]                   options(future.plan = NULL)
[17:46:19.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.211]                 }
[17:46:19.211]                 ...future.workdir <- getwd()
[17:46:19.211]             }
[17:46:19.211]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.211]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.211]         }
[17:46:19.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.211]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.211]             base::names(...future.oldOptions))
[17:46:19.211]     }
[17:46:19.211]     if (FALSE) {
[17:46:19.211]     }
[17:46:19.211]     else {
[17:46:19.211]         if (TRUE) {
[17:46:19.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.211]                 open = "w")
[17:46:19.211]         }
[17:46:19.211]         else {
[17:46:19.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.211]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.211]         }
[17:46:19.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.211]             base::sink(type = "output", split = FALSE)
[17:46:19.211]             base::close(...future.stdout)
[17:46:19.211]         }, add = TRUE)
[17:46:19.211]     }
[17:46:19.211]     ...future.frame <- base::sys.nframe()
[17:46:19.211]     ...future.conditions <- base::list()
[17:46:19.211]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.211]     if (FALSE) {
[17:46:19.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.211]     }
[17:46:19.211]     ...future.result <- base::tryCatch({
[17:46:19.211]         base::withCallingHandlers({
[17:46:19.211]             ...future.value <- base::withVisible(base::local({
[17:46:19.211]                 withCallingHandlers({
[17:46:19.211]                   {
[17:46:19.211]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.211]                       ii, n), appendLF = FALSE)
[17:46:19.211]                     fit <- mandelbrot(C)
[17:46:19.211]                     delay(fit)
[17:46:19.211]                     message(" done")
[17:46:19.211]                     fit
[17:46:19.211]                   }
[17:46:19.211]                 }, immediateCondition = function(cond) {
[17:46:19.211]                   save_rds <- function (object, pathname, ...) 
[17:46:19.211]                   {
[17:46:19.211]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:19.211]                     if (file_test("-f", pathname_tmp)) {
[17:46:19.211]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.211]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:19.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.211]                         fi_tmp[["mtime"]])
[17:46:19.211]                     }
[17:46:19.211]                     tryCatch({
[17:46:19.211]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:19.211]                     }, error = function(ex) {
[17:46:19.211]                       msg <- conditionMessage(ex)
[17:46:19.211]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.211]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:19.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.211]                         fi_tmp[["mtime"]], msg)
[17:46:19.211]                       ex$message <- msg
[17:46:19.211]                       stop(ex)
[17:46:19.211]                     })
[17:46:19.211]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:19.211]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:19.211]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:19.211]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.211]                       fi <- file.info(pathname)
[17:46:19.211]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:19.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.211]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:19.211]                         fi[["size"]], fi[["mtime"]])
[17:46:19.211]                       stop(msg)
[17:46:19.211]                     }
[17:46:19.211]                     invisible(pathname)
[17:46:19.211]                   }
[17:46:19.211]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:19.211]                     rootPath = tempdir()) 
[17:46:19.211]                   {
[17:46:19.211]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:19.211]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:19.211]                       tmpdir = path, fileext = ".rds")
[17:46:19.211]                     save_rds(obj, file)
[17:46:19.211]                   }
[17:46:19.211]                   saveImmediateCondition(cond, path = "/tmp/RtmpzeTRlJ/.future/immediateConditions")
[17:46:19.211]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.211]                   {
[17:46:19.211]                     inherits <- base::inherits
[17:46:19.211]                     invokeRestart <- base::invokeRestart
[17:46:19.211]                     is.null <- base::is.null
[17:46:19.211]                     muffled <- FALSE
[17:46:19.211]                     if (inherits(cond, "message")) {
[17:46:19.211]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:19.211]                       if (muffled) 
[17:46:19.211]                         invokeRestart("muffleMessage")
[17:46:19.211]                     }
[17:46:19.211]                     else if (inherits(cond, "warning")) {
[17:46:19.211]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:19.211]                       if (muffled) 
[17:46:19.211]                         invokeRestart("muffleWarning")
[17:46:19.211]                     }
[17:46:19.211]                     else if (inherits(cond, "condition")) {
[17:46:19.211]                       if (!is.null(pattern)) {
[17:46:19.211]                         computeRestarts <- base::computeRestarts
[17:46:19.211]                         grepl <- base::grepl
[17:46:19.211]                         restarts <- computeRestarts(cond)
[17:46:19.211]                         for (restart in restarts) {
[17:46:19.211]                           name <- restart$name
[17:46:19.211]                           if (is.null(name)) 
[17:46:19.211]                             next
[17:46:19.211]                           if (!grepl(pattern, name)) 
[17:46:19.211]                             next
[17:46:19.211]                           invokeRestart(restart)
[17:46:19.211]                           muffled <- TRUE
[17:46:19.211]                           break
[17:46:19.211]                         }
[17:46:19.211]                       }
[17:46:19.211]                     }
[17:46:19.211]                     invisible(muffled)
[17:46:19.211]                   }
[17:46:19.211]                   muffleCondition(cond)
[17:46:19.211]                 })
[17:46:19.211]             }))
[17:46:19.211]             future::FutureResult(value = ...future.value$value, 
[17:46:19.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.211]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.211]                     ...future.globalenv.names))
[17:46:19.211]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.211]         }, condition = base::local({
[17:46:19.211]             c <- base::c
[17:46:19.211]             inherits <- base::inherits
[17:46:19.211]             invokeRestart <- base::invokeRestart
[17:46:19.211]             length <- base::length
[17:46:19.211]             list <- base::list
[17:46:19.211]             seq.int <- base::seq.int
[17:46:19.211]             signalCondition <- base::signalCondition
[17:46:19.211]             sys.calls <- base::sys.calls
[17:46:19.211]             `[[` <- base::`[[`
[17:46:19.211]             `+` <- base::`+`
[17:46:19.211]             `<<-` <- base::`<<-`
[17:46:19.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.211]                   3L)]
[17:46:19.211]             }
[17:46:19.211]             function(cond) {
[17:46:19.211]                 is_error <- inherits(cond, "error")
[17:46:19.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.211]                   NULL)
[17:46:19.211]                 if (is_error) {
[17:46:19.211]                   sessionInformation <- function() {
[17:46:19.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.211]                       search = base::search(), system = base::Sys.info())
[17:46:19.211]                   }
[17:46:19.211]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.211]                     cond$call), session = sessionInformation(), 
[17:46:19.211]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.211]                   signalCondition(cond)
[17:46:19.211]                 }
[17:46:19.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.211]                 "immediateCondition"))) {
[17:46:19.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.211]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.211]                   if (TRUE && !signal) {
[17:46:19.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.211]                     {
[17:46:19.211]                       inherits <- base::inherits
[17:46:19.211]                       invokeRestart <- base::invokeRestart
[17:46:19.211]                       is.null <- base::is.null
[17:46:19.211]                       muffled <- FALSE
[17:46:19.211]                       if (inherits(cond, "message")) {
[17:46:19.211]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.211]                         if (muffled) 
[17:46:19.211]                           invokeRestart("muffleMessage")
[17:46:19.211]                       }
[17:46:19.211]                       else if (inherits(cond, "warning")) {
[17:46:19.211]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.211]                         if (muffled) 
[17:46:19.211]                           invokeRestart("muffleWarning")
[17:46:19.211]                       }
[17:46:19.211]                       else if (inherits(cond, "condition")) {
[17:46:19.211]                         if (!is.null(pattern)) {
[17:46:19.211]                           computeRestarts <- base::computeRestarts
[17:46:19.211]                           grepl <- base::grepl
[17:46:19.211]                           restarts <- computeRestarts(cond)
[17:46:19.211]                           for (restart in restarts) {
[17:46:19.211]                             name <- restart$name
[17:46:19.211]                             if (is.null(name)) 
[17:46:19.211]                               next
[17:46:19.211]                             if (!grepl(pattern, name)) 
[17:46:19.211]                               next
[17:46:19.211]                             invokeRestart(restart)
[17:46:19.211]                             muffled <- TRUE
[17:46:19.211]                             break
[17:46:19.211]                           }
[17:46:19.211]                         }
[17:46:19.211]                       }
[17:46:19.211]                       invisible(muffled)
[17:46:19.211]                     }
[17:46:19.211]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.211]                   }
[17:46:19.211]                 }
[17:46:19.211]                 else {
[17:46:19.211]                   if (TRUE) {
[17:46:19.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.211]                     {
[17:46:19.211]                       inherits <- base::inherits
[17:46:19.211]                       invokeRestart <- base::invokeRestart
[17:46:19.211]                       is.null <- base::is.null
[17:46:19.211]                       muffled <- FALSE
[17:46:19.211]                       if (inherits(cond, "message")) {
[17:46:19.211]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.211]                         if (muffled) 
[17:46:19.211]                           invokeRestart("muffleMessage")
[17:46:19.211]                       }
[17:46:19.211]                       else if (inherits(cond, "warning")) {
[17:46:19.211]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.211]                         if (muffled) 
[17:46:19.211]                           invokeRestart("muffleWarning")
[17:46:19.211]                       }
[17:46:19.211]                       else if (inherits(cond, "condition")) {
[17:46:19.211]                         if (!is.null(pattern)) {
[17:46:19.211]                           computeRestarts <- base::computeRestarts
[17:46:19.211]                           grepl <- base::grepl
[17:46:19.211]                           restarts <- computeRestarts(cond)
[17:46:19.211]                           for (restart in restarts) {
[17:46:19.211]                             name <- restart$name
[17:46:19.211]                             if (is.null(name)) 
[17:46:19.211]                               next
[17:46:19.211]                             if (!grepl(pattern, name)) 
[17:46:19.211]                               next
[17:46:19.211]                             invokeRestart(restart)
[17:46:19.211]                             muffled <- TRUE
[17:46:19.211]                             break
[17:46:19.211]                           }
[17:46:19.211]                         }
[17:46:19.211]                       }
[17:46:19.211]                       invisible(muffled)
[17:46:19.211]                     }
[17:46:19.211]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.211]                   }
[17:46:19.211]                 }
[17:46:19.211]             }
[17:46:19.211]         }))
[17:46:19.211]     }, error = function(ex) {
[17:46:19.211]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.211]                 ...future.rng), started = ...future.startTime, 
[17:46:19.211]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.211]             version = "1.8"), class = "FutureResult")
[17:46:19.211]     }, finally = {
[17:46:19.211]         if (!identical(...future.workdir, getwd())) 
[17:46:19.211]             setwd(...future.workdir)
[17:46:19.211]         {
[17:46:19.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.211]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.211]             }
[17:46:19.211]             base::options(...future.oldOptions)
[17:46:19.211]             if (.Platform$OS.type == "windows") {
[17:46:19.211]                 old_names <- names(...future.oldEnvVars)
[17:46:19.211]                 envs <- base::Sys.getenv()
[17:46:19.211]                 names <- names(envs)
[17:46:19.211]                 common <- intersect(names, old_names)
[17:46:19.211]                 added <- setdiff(names, old_names)
[17:46:19.211]                 removed <- setdiff(old_names, names)
[17:46:19.211]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.211]                   envs[common]]
[17:46:19.211]                 NAMES <- toupper(changed)
[17:46:19.211]                 args <- list()
[17:46:19.211]                 for (kk in seq_along(NAMES)) {
[17:46:19.211]                   name <- changed[[kk]]
[17:46:19.211]                   NAME <- NAMES[[kk]]
[17:46:19.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.211]                     next
[17:46:19.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.211]                 }
[17:46:19.211]                 NAMES <- toupper(added)
[17:46:19.211]                 for (kk in seq_along(NAMES)) {
[17:46:19.211]                   name <- added[[kk]]
[17:46:19.211]                   NAME <- NAMES[[kk]]
[17:46:19.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.211]                     next
[17:46:19.211]                   args[[name]] <- ""
[17:46:19.211]                 }
[17:46:19.211]                 NAMES <- toupper(removed)
[17:46:19.211]                 for (kk in seq_along(NAMES)) {
[17:46:19.211]                   name <- removed[[kk]]
[17:46:19.211]                   NAME <- NAMES[[kk]]
[17:46:19.211]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.211]                     next
[17:46:19.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.211]                 }
[17:46:19.211]                 if (length(args) > 0) 
[17:46:19.211]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.211]             }
[17:46:19.211]             else {
[17:46:19.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.211]             }
[17:46:19.211]             {
[17:46:19.211]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.211]                   0L) {
[17:46:19.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.211]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.211]                   base::options(opts)
[17:46:19.211]                 }
[17:46:19.211]                 {
[17:46:19.211]                   {
[17:46:19.211]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:19.211]                     NULL
[17:46:19.211]                   }
[17:46:19.211]                   options(future.plan = NULL)
[17:46:19.211]                   if (is.na(NA_character_)) 
[17:46:19.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.211]                     .init = FALSE)
[17:46:19.211]                 }
[17:46:19.211]             }
[17:46:19.211]         }
[17:46:19.211]     })
[17:46:19.211]     if (TRUE) {
[17:46:19.211]         base::sink(type = "output", split = FALSE)
[17:46:19.211]         if (TRUE) {
[17:46:19.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.211]         }
[17:46:19.211]         else {
[17:46:19.211]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.211]         }
[17:46:19.211]         base::close(...future.stdout)
[17:46:19.211]         ...future.stdout <- NULL
[17:46:19.211]     }
[17:46:19.211]     ...future.result$conditions <- ...future.conditions
[17:46:19.211]     ...future.result$finished <- base::Sys.time()
[17:46:19.211]     ...future.result
[17:46:19.211] }
[17:46:19.214] assign_globals() ...
[17:46:19.214] List of 4
[17:46:19.214]  $ ii   : int 2
[17:46:19.214]  $ n    : int 4
[17:46:19.214]  $ C    : cplx [1:25, 1:25] -0.719-1.5i -0.719-1.44i -0.719-1.38i ...
[17:46:19.214]   ..- attr(*, "region")=List of 2
[17:46:19.214]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:46:19.214]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[17:46:19.214]   ..- attr(*, "tile")= int [1:2] 1 2
[17:46:19.214]  $ delay:function (counts)  
[17:46:19.214]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.214]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab61a9590> 
[17:46:19.214]  - attr(*, "where")=List of 4
[17:46:19.214]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.214]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.214]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.214]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.214]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.214]  - attr(*, "resolved")= logi FALSE
[17:46:19.214]  - attr(*, "total_size")= num 14584
[17:46:19.214]  - attr(*, "already-done")= logi TRUE
[17:46:19.225] - copied ‘ii’ to environment
[17:46:19.225] - copied ‘n’ to environment
[17:46:19.225] - copied ‘C’ to environment
[17:46:19.225] - reassign environment for ‘delay’
[17:46:19.225] - copied ‘delay’ to environment
[17:46:19.226] assign_globals() ... done
[17:46:19.226] requestCore(): workers = 2
[17:46:19.228] MulticoreFuture started
[17:46:19.228] - Launch lazy future ... done
[17:46:19.229] run() for ‘MulticoreFuture’ ... done
[17:46:19.229] - run() ... done
[17:46:19.229] - resolved() ...
[17:46:19.230] plan(): Setting new future strategy stack:
[17:46:19.230] List of future strategies:
[17:46:19.230] 1. sequential:
[17:46:19.230]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.230]    - tweaked: FALSE
[17:46:19.230]    - call: NULL
[17:46:19.231] plan(): nbrOfWorkers() = 1
[17:46:19.236] plan(): Setting new future strategy stack:
[17:46:19.237] List of future strategies:
[17:46:19.237] 1. multicore:
[17:46:19.237]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:19.237]    - tweaked: FALSE
[17:46:19.237]    - call: plan(strategy)
[17:46:19.240] - resolved: FALSE
[17:46:19.240] - resolved() ... done
[17:46:19.240] resolved() for ‘MulticoreFuture’ ... done
[17:46:19.240] resolved() for ‘Future’ ...
[17:46:19.240] - state: ‘created’
[17:46:19.241] - run: TRUE
[17:46:19.241] - run() ...
[17:46:19.241] run() for ‘Future’ ...
[17:46:19.241] - state: ‘created’
[17:46:19.242] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:19.242] plan(): nbrOfWorkers() = 2
[17:46:19.247] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:19.247] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:19.247]   - Field: ‘label’
[17:46:19.247]   - Field: ‘local’
[17:46:19.247]   - Field: ‘owner’
[17:46:19.247]   - Field: ‘envir’
[17:46:19.247]   - Field: ‘workers’
[17:46:19.248]   - Field: ‘packages’
[17:46:19.248]   - Field: ‘gc’
[17:46:19.248]   - Field: ‘job’
[17:46:19.248]   - Field: ‘conditions’
[17:46:19.248]   - Field: ‘expr’
[17:46:19.248]   - Field: ‘uuid’
[17:46:19.249]   - Field: ‘seed’
[17:46:19.249]   - Field: ‘version’
[17:46:19.249]   - Field: ‘result’
[17:46:19.249]   - Field: ‘asynchronous’
[17:46:19.249]   - Field: ‘calls’
[17:46:19.249]   - Field: ‘globals’
[17:46:19.249]   - Field: ‘stdout’
[17:46:19.250]   - Field: ‘earlySignal’
[17:46:19.250]   - Field: ‘lazy’
[17:46:19.250]   - Field: ‘state’
[17:46:19.250] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:19.250] - Launch lazy future ...
[17:46:19.251] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.251] Packages needed by future strategies (n = 0): <none>
[17:46:19.252] {
[17:46:19.252]     {
[17:46:19.252]         {
[17:46:19.252]             ...future.startTime <- base::Sys.time()
[17:46:19.252]             {
[17:46:19.252]                 {
[17:46:19.252]                   {
[17:46:19.252]                     {
[17:46:19.252]                       {
[17:46:19.252]                         base::local({
[17:46:19.252]                           has_future <- base::requireNamespace("future", 
[17:46:19.252]                             quietly = TRUE)
[17:46:19.252]                           if (has_future) {
[17:46:19.252]                             ns <- base::getNamespace("future")
[17:46:19.252]                             version <- ns[[".package"]][["version"]]
[17:46:19.252]                             if (is.null(version)) 
[17:46:19.252]                               version <- utils::packageVersion("future")
[17:46:19.252]                           }
[17:46:19.252]                           else {
[17:46:19.252]                             version <- NULL
[17:46:19.252]                           }
[17:46:19.252]                           if (!has_future || version < "1.8.0") {
[17:46:19.252]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.252]                               "", base::R.version$version.string), 
[17:46:19.252]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:19.252]                                 base::R.version$platform, 8 * 
[17:46:19.252]                                   base::.Machine$sizeof.pointer), 
[17:46:19.252]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.252]                                 "release", "version")], collapse = " "), 
[17:46:19.252]                               hostname = base::Sys.info()[["nodename"]])
[17:46:19.252]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.252]                               info)
[17:46:19.252]                             info <- base::paste(info, collapse = "; ")
[17:46:19.252]                             if (!has_future) {
[17:46:19.252]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.252]                                 info)
[17:46:19.252]                             }
[17:46:19.252]                             else {
[17:46:19.252]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.252]                                 info, version)
[17:46:19.252]                             }
[17:46:19.252]                             base::stop(msg)
[17:46:19.252]                           }
[17:46:19.252]                         })
[17:46:19.252]                       }
[17:46:19.252]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:19.252]                       base::options(mc.cores = 1L)
[17:46:19.252]                     }
[17:46:19.252]                     base::local({
[17:46:19.252]                       for (pkg in "future") {
[17:46:19.252]                         base::loadNamespace(pkg)
[17:46:19.252]                         base::library(pkg, character.only = TRUE)
[17:46:19.252]                       }
[17:46:19.252]                     })
[17:46:19.252]                   }
[17:46:19.252]                   ...future.strategy.old <- future::plan("list")
[17:46:19.252]                   options(future.plan = NULL)
[17:46:19.252]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.252]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.252]                 }
[17:46:19.252]                 ...future.workdir <- getwd()
[17:46:19.252]             }
[17:46:19.252]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.252]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.252]         }
[17:46:19.252]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.252]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.252]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.252]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.252]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.252]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.252]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.252]             base::names(...future.oldOptions))
[17:46:19.252]     }
[17:46:19.252]     if (FALSE) {
[17:46:19.252]     }
[17:46:19.252]     else {
[17:46:19.252]         if (TRUE) {
[17:46:19.252]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.252]                 open = "w")
[17:46:19.252]         }
[17:46:19.252]         else {
[17:46:19.252]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.252]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.252]         }
[17:46:19.252]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.252]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.252]             base::sink(type = "output", split = FALSE)
[17:46:19.252]             base::close(...future.stdout)
[17:46:19.252]         }, add = TRUE)
[17:46:19.252]     }
[17:46:19.252]     ...future.frame <- base::sys.nframe()
[17:46:19.252]     ...future.conditions <- base::list()
[17:46:19.252]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.252]     if (FALSE) {
[17:46:19.252]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.252]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.252]     }
[17:46:19.252]     ...future.result <- base::tryCatch({
[17:46:19.252]         base::withCallingHandlers({
[17:46:19.252]             ...future.value <- base::withVisible(base::local({
[17:46:19.252]                 withCallingHandlers({
[17:46:19.252]                   {
[17:46:19.252]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.252]                       ii, n), appendLF = FALSE)
[17:46:19.252]                     fit <- mandelbrot(C)
[17:46:19.252]                     delay(fit)
[17:46:19.252]                     message(" done")
[17:46:19.252]                     fit
[17:46:19.252]                   }
[17:46:19.252]                 }, immediateCondition = function(cond) {
[17:46:19.252]                   save_rds <- function (object, pathname, ...) 
[17:46:19.252]                   {
[17:46:19.252]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:19.252]                     if (file_test("-f", pathname_tmp)) {
[17:46:19.252]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.252]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:19.252]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.252]                         fi_tmp[["mtime"]])
[17:46:19.252]                     }
[17:46:19.252]                     tryCatch({
[17:46:19.252]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:19.252]                     }, error = function(ex) {
[17:46:19.252]                       msg <- conditionMessage(ex)
[17:46:19.252]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.252]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:19.252]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.252]                         fi_tmp[["mtime"]], msg)
[17:46:19.252]                       ex$message <- msg
[17:46:19.252]                       stop(ex)
[17:46:19.252]                     })
[17:46:19.252]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:19.252]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:19.252]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:19.252]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.252]                       fi <- file.info(pathname)
[17:46:19.252]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:19.252]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.252]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:19.252]                         fi[["size"]], fi[["mtime"]])
[17:46:19.252]                       stop(msg)
[17:46:19.252]                     }
[17:46:19.252]                     invisible(pathname)
[17:46:19.252]                   }
[17:46:19.252]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:19.252]                     rootPath = tempdir()) 
[17:46:19.252]                   {
[17:46:19.252]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:19.252]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:19.252]                       tmpdir = path, fileext = ".rds")
[17:46:19.252]                     save_rds(obj, file)
[17:46:19.252]                   }
[17:46:19.252]                   saveImmediateCondition(cond, path = "/tmp/RtmpzeTRlJ/.future/immediateConditions")
[17:46:19.252]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.252]                   {
[17:46:19.252]                     inherits <- base::inherits
[17:46:19.252]                     invokeRestart <- base::invokeRestart
[17:46:19.252]                     is.null <- base::is.null
[17:46:19.252]                     muffled <- FALSE
[17:46:19.252]                     if (inherits(cond, "message")) {
[17:46:19.252]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:19.252]                       if (muffled) 
[17:46:19.252]                         invokeRestart("muffleMessage")
[17:46:19.252]                     }
[17:46:19.252]                     else if (inherits(cond, "warning")) {
[17:46:19.252]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:19.252]                       if (muffled) 
[17:46:19.252]                         invokeRestart("muffleWarning")
[17:46:19.252]                     }
[17:46:19.252]                     else if (inherits(cond, "condition")) {
[17:46:19.252]                       if (!is.null(pattern)) {
[17:46:19.252]                         computeRestarts <- base::computeRestarts
[17:46:19.252]                         grepl <- base::grepl
[17:46:19.252]                         restarts <- computeRestarts(cond)
[17:46:19.252]                         for (restart in restarts) {
[17:46:19.252]                           name <- restart$name
[17:46:19.252]                           if (is.null(name)) 
[17:46:19.252]                             next
[17:46:19.252]                           if (!grepl(pattern, name)) 
[17:46:19.252]                             next
[17:46:19.252]                           invokeRestart(restart)
[17:46:19.252]                           muffled <- TRUE
[17:46:19.252]                           break
[17:46:19.252]                         }
[17:46:19.252]                       }
[17:46:19.252]                     }
[17:46:19.252]                     invisible(muffled)
[17:46:19.252]                   }
[17:46:19.252]                   muffleCondition(cond)
[17:46:19.252]                 })
[17:46:19.252]             }))
[17:46:19.252]             future::FutureResult(value = ...future.value$value, 
[17:46:19.252]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.252]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.252]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.252]                     ...future.globalenv.names))
[17:46:19.252]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.252]         }, condition = base::local({
[17:46:19.252]             c <- base::c
[17:46:19.252]             inherits <- base::inherits
[17:46:19.252]             invokeRestart <- base::invokeRestart
[17:46:19.252]             length <- base::length
[17:46:19.252]             list <- base::list
[17:46:19.252]             seq.int <- base::seq.int
[17:46:19.252]             signalCondition <- base::signalCondition
[17:46:19.252]             sys.calls <- base::sys.calls
[17:46:19.252]             `[[` <- base::`[[`
[17:46:19.252]             `+` <- base::`+`
[17:46:19.252]             `<<-` <- base::`<<-`
[17:46:19.252]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.252]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.252]                   3L)]
[17:46:19.252]             }
[17:46:19.252]             function(cond) {
[17:46:19.252]                 is_error <- inherits(cond, "error")
[17:46:19.252]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.252]                   NULL)
[17:46:19.252]                 if (is_error) {
[17:46:19.252]                   sessionInformation <- function() {
[17:46:19.252]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.252]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.252]                       search = base::search(), system = base::Sys.info())
[17:46:19.252]                   }
[17:46:19.252]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.252]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.252]                     cond$call), session = sessionInformation(), 
[17:46:19.252]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.252]                   signalCondition(cond)
[17:46:19.252]                 }
[17:46:19.252]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.252]                 "immediateCondition"))) {
[17:46:19.252]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.252]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.252]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.252]                   if (TRUE && !signal) {
[17:46:19.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.252]                     {
[17:46:19.252]                       inherits <- base::inherits
[17:46:19.252]                       invokeRestart <- base::invokeRestart
[17:46:19.252]                       is.null <- base::is.null
[17:46:19.252]                       muffled <- FALSE
[17:46:19.252]                       if (inherits(cond, "message")) {
[17:46:19.252]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.252]                         if (muffled) 
[17:46:19.252]                           invokeRestart("muffleMessage")
[17:46:19.252]                       }
[17:46:19.252]                       else if (inherits(cond, "warning")) {
[17:46:19.252]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.252]                         if (muffled) 
[17:46:19.252]                           invokeRestart("muffleWarning")
[17:46:19.252]                       }
[17:46:19.252]                       else if (inherits(cond, "condition")) {
[17:46:19.252]                         if (!is.null(pattern)) {
[17:46:19.252]                           computeRestarts <- base::computeRestarts
[17:46:19.252]                           grepl <- base::grepl
[17:46:19.252]                           restarts <- computeRestarts(cond)
[17:46:19.252]                           for (restart in restarts) {
[17:46:19.252]                             name <- restart$name
[17:46:19.252]                             if (is.null(name)) 
[17:46:19.252]                               next
[17:46:19.252]                             if (!grepl(pattern, name)) 
[17:46:19.252]                               next
[17:46:19.252]                             invokeRestart(restart)
[17:46:19.252]                             muffled <- TRUE
[17:46:19.252]                             break
[17:46:19.252]                           }
[17:46:19.252]                         }
[17:46:19.252]                       }
[17:46:19.252]                       invisible(muffled)
[17:46:19.252]                     }
[17:46:19.252]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.252]                   }
[17:46:19.252]                 }
[17:46:19.252]                 else {
[17:46:19.252]                   if (TRUE) {
[17:46:19.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.252]                     {
[17:46:19.252]                       inherits <- base::inherits
[17:46:19.252]                       invokeRestart <- base::invokeRestart
[17:46:19.252]                       is.null <- base::is.null
[17:46:19.252]                       muffled <- FALSE
[17:46:19.252]                       if (inherits(cond, "message")) {
[17:46:19.252]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.252]                         if (muffled) 
[17:46:19.252]                           invokeRestart("muffleMessage")
[17:46:19.252]                       }
[17:46:19.252]                       else if (inherits(cond, "warning")) {
[17:46:19.252]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.252]                         if (muffled) 
[17:46:19.252]                           invokeRestart("muffleWarning")
[17:46:19.252]                       }
[17:46:19.252]                       else if (inherits(cond, "condition")) {
[17:46:19.252]                         if (!is.null(pattern)) {
[17:46:19.252]                           computeRestarts <- base::computeRestarts
[17:46:19.252]                           grepl <- base::grepl
[17:46:19.252]                           restarts <- computeRestarts(cond)
[17:46:19.252]                           for (restart in restarts) {
[17:46:19.252]                             name <- restart$name
[17:46:19.252]                             if (is.null(name)) 
[17:46:19.252]                               next
[17:46:19.252]                             if (!grepl(pattern, name)) 
[17:46:19.252]                               next
[17:46:19.252]                             invokeRestart(restart)
[17:46:19.252]                             muffled <- TRUE
[17:46:19.252]                             break
[17:46:19.252]                           }
[17:46:19.252]                         }
[17:46:19.252]                       }
[17:46:19.252]                       invisible(muffled)
[17:46:19.252]                     }
[17:46:19.252]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.252]                   }
[17:46:19.252]                 }
[17:46:19.252]             }
[17:46:19.252]         }))
[17:46:19.252]     }, error = function(ex) {
[17:46:19.252]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.252]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.252]                 ...future.rng), started = ...future.startTime, 
[17:46:19.252]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.252]             version = "1.8"), class = "FutureResult")
[17:46:19.252]     }, finally = {
[17:46:19.252]         if (!identical(...future.workdir, getwd())) 
[17:46:19.252]             setwd(...future.workdir)
[17:46:19.252]         {
[17:46:19.252]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.252]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.252]             }
[17:46:19.252]             base::options(...future.oldOptions)
[17:46:19.252]             if (.Platform$OS.type == "windows") {
[17:46:19.252]                 old_names <- names(...future.oldEnvVars)
[17:46:19.252]                 envs <- base::Sys.getenv()
[17:46:19.252]                 names <- names(envs)
[17:46:19.252]                 common <- intersect(names, old_names)
[17:46:19.252]                 added <- setdiff(names, old_names)
[17:46:19.252]                 removed <- setdiff(old_names, names)
[17:46:19.252]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.252]                   envs[common]]
[17:46:19.252]                 NAMES <- toupper(changed)
[17:46:19.252]                 args <- list()
[17:46:19.252]                 for (kk in seq_along(NAMES)) {
[17:46:19.252]                   name <- changed[[kk]]
[17:46:19.252]                   NAME <- NAMES[[kk]]
[17:46:19.252]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.252]                     next
[17:46:19.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.252]                 }
[17:46:19.252]                 NAMES <- toupper(added)
[17:46:19.252]                 for (kk in seq_along(NAMES)) {
[17:46:19.252]                   name <- added[[kk]]
[17:46:19.252]                   NAME <- NAMES[[kk]]
[17:46:19.252]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.252]                     next
[17:46:19.252]                   args[[name]] <- ""
[17:46:19.252]                 }
[17:46:19.252]                 NAMES <- toupper(removed)
[17:46:19.252]                 for (kk in seq_along(NAMES)) {
[17:46:19.252]                   name <- removed[[kk]]
[17:46:19.252]                   NAME <- NAMES[[kk]]
[17:46:19.252]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.252]                     next
[17:46:19.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.252]                 }
[17:46:19.252]                 if (length(args) > 0) 
[17:46:19.252]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.252]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.252]             }
[17:46:19.252]             else {
[17:46:19.252]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.252]             }
[17:46:19.252]             {
[17:46:19.252]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.252]                   0L) {
[17:46:19.252]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.252]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.252]                   base::options(opts)
[17:46:19.252]                 }
[17:46:19.252]                 {
[17:46:19.252]                   {
[17:46:19.252]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:19.252]                     NULL
[17:46:19.252]                   }
[17:46:19.252]                   options(future.plan = NULL)
[17:46:19.252]                   if (is.na(NA_character_)) 
[17:46:19.252]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.252]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.252]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.252]                     .init = FALSE)
[17:46:19.252]                 }
[17:46:19.252]             }
[17:46:19.252]         }
[17:46:19.252]     })
[17:46:19.252]     if (TRUE) {
[17:46:19.252]         base::sink(type = "output", split = FALSE)
[17:46:19.252]         if (TRUE) {
[17:46:19.252]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.252]         }
[17:46:19.252]         else {
[17:46:19.252]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.252]         }
[17:46:19.252]         base::close(...future.stdout)
[17:46:19.252]         ...future.stdout <- NULL
[17:46:19.252]     }
[17:46:19.252]     ...future.result$conditions <- ...future.conditions
[17:46:19.252]     ...future.result$finished <- base::Sys.time()
[17:46:19.252]     ...future.result
[17:46:19.252] }
[17:46:19.255] assign_globals() ...
[17:46:19.255] List of 4
[17:46:19.255]  $ ii   : int 3
[17:46:19.255]  $ n    : int 4
[17:46:19.255]  $ C    : cplx [1:25, 1:25] -2.25+0.0306i -2.25+0.0918i -2.25+0.1531i ...
[17:46:19.255]   ..- attr(*, "region")=List of 2
[17:46:19.255]   .. ..$ xrange: num [1:2] -2.25 -0.781
[17:46:19.255]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:46:19.255]   ..- attr(*, "tile")= int [1:2] 2 1
[17:46:19.255]  $ delay:function (counts)  
[17:46:19.255]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.255]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab61a9590> 
[17:46:19.255]  - attr(*, "where")=List of 4
[17:46:19.255]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.255]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.255]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.255]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.255]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.255]  - attr(*, "resolved")= logi FALSE
[17:46:19.255]  - attr(*, "total_size")= num 14584
[17:46:19.255]  - attr(*, "already-done")= logi TRUE
[17:46:19.266] - copied ‘ii’ to environment
[17:46:19.266] - copied ‘n’ to environment
[17:46:19.266] - copied ‘C’ to environment
[17:46:19.266] - reassign environment for ‘delay’
[17:46:19.267] - copied ‘delay’ to environment
[17:46:19.267] assign_globals() ... done
[17:46:19.267] requestCore(): workers = 2
[17:46:19.270] MulticoreFuture started
[17:46:19.270] - Launch lazy future ... done
[17:46:19.270] run() for ‘MulticoreFuture’ ... done
[17:46:19.270] - run() ... done
[17:46:19.271] - resolved() ...
[17:46:19.271] plan(): Setting new future strategy stack:
[17:46:19.272] List of future strategies:
[17:46:19.272] 1. sequential:
[17:46:19.272]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.272]    - tweaked: FALSE
[17:46:19.272]    - call: NULL
[17:46:19.273] plan(): nbrOfWorkers() = 1
[17:46:19.276] plan(): Setting new future strategy stack:
[17:46:19.277] List of future strategies:
[17:46:19.277] 1. multicore:
[17:46:19.277]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:19.277]    - tweaked: FALSE
[17:46:19.277]    - call: plan(strategy)
[17:46:19.281] - resolved: FALSE
[17:46:19.281] - resolved() ... done
[17:46:19.282] resolved() for ‘MulticoreFuture’ ... done
[17:46:19.282] resolved() for ‘Future’ ...
[17:46:19.282] plan(): nbrOfWorkers() = 2
[17:46:19.282] - state: ‘created’
[17:46:19.282] - run: TRUE
[17:46:19.283] - run() ...
[17:46:19.283] run() for ‘Future’ ...
[17:46:19.283] - state: ‘created’
[17:46:19.283] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:19.288] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:19.289] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:19.289]   - Field: ‘label’
[17:46:19.289]   - Field: ‘local’
[17:46:19.289]   - Field: ‘owner’
[17:46:19.289]   - Field: ‘envir’
[17:46:19.289]   - Field: ‘workers’
[17:46:19.290]   - Field: ‘packages’
[17:46:19.290]   - Field: ‘gc’
[17:46:19.290]   - Field: ‘job’
[17:46:19.290]   - Field: ‘conditions’
[17:46:19.290]   - Field: ‘expr’
[17:46:19.290]   - Field: ‘uuid’
[17:46:19.290]   - Field: ‘seed’
[17:46:19.290]   - Field: ‘version’
[17:46:19.291]   - Field: ‘result’
[17:46:19.291]   - Field: ‘asynchronous’
[17:46:19.291]   - Field: ‘calls’
[17:46:19.291]   - Field: ‘globals’
[17:46:19.291]   - Field: ‘stdout’
[17:46:19.291]   - Field: ‘earlySignal’
[17:46:19.291]   - Field: ‘lazy’
[17:46:19.292]   - Field: ‘state’
[17:46:19.292] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:19.292] - Launch lazy future ...
[17:46:19.292] Packages needed by the future expression (n = 1): ‘future’
[17:46:19.293] Packages needed by future strategies (n = 0): <none>
[17:46:19.294] {
[17:46:19.294]     {
[17:46:19.294]         {
[17:46:19.294]             ...future.startTime <- base::Sys.time()
[17:46:19.294]             {
[17:46:19.294]                 {
[17:46:19.294]                   {
[17:46:19.294]                     {
[17:46:19.294]                       {
[17:46:19.294]                         base::local({
[17:46:19.294]                           has_future <- base::requireNamespace("future", 
[17:46:19.294]                             quietly = TRUE)
[17:46:19.294]                           if (has_future) {
[17:46:19.294]                             ns <- base::getNamespace("future")
[17:46:19.294]                             version <- ns[[".package"]][["version"]]
[17:46:19.294]                             if (is.null(version)) 
[17:46:19.294]                               version <- utils::packageVersion("future")
[17:46:19.294]                           }
[17:46:19.294]                           else {
[17:46:19.294]                             version <- NULL
[17:46:19.294]                           }
[17:46:19.294]                           if (!has_future || version < "1.8.0") {
[17:46:19.294]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.294]                               "", base::R.version$version.string), 
[17:46:19.294]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:19.294]                                 base::R.version$platform, 8 * 
[17:46:19.294]                                   base::.Machine$sizeof.pointer), 
[17:46:19.294]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.294]                                 "release", "version")], collapse = " "), 
[17:46:19.294]                               hostname = base::Sys.info()[["nodename"]])
[17:46:19.294]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.294]                               info)
[17:46:19.294]                             info <- base::paste(info, collapse = "; ")
[17:46:19.294]                             if (!has_future) {
[17:46:19.294]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.294]                                 info)
[17:46:19.294]                             }
[17:46:19.294]                             else {
[17:46:19.294]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.294]                                 info, version)
[17:46:19.294]                             }
[17:46:19.294]                             base::stop(msg)
[17:46:19.294]                           }
[17:46:19.294]                         })
[17:46:19.294]                       }
[17:46:19.294]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:19.294]                       base::options(mc.cores = 1L)
[17:46:19.294]                     }
[17:46:19.294]                     base::local({
[17:46:19.294]                       for (pkg in "future") {
[17:46:19.294]                         base::loadNamespace(pkg)
[17:46:19.294]                         base::library(pkg, character.only = TRUE)
[17:46:19.294]                       }
[17:46:19.294]                     })
[17:46:19.294]                   }
[17:46:19.294]                   ...future.strategy.old <- future::plan("list")
[17:46:19.294]                   options(future.plan = NULL)
[17:46:19.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.294]                 }
[17:46:19.294]                 ...future.workdir <- getwd()
[17:46:19.294]             }
[17:46:19.294]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.294]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.294]         }
[17:46:19.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.294]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.294]             base::names(...future.oldOptions))
[17:46:19.294]     }
[17:46:19.294]     if (FALSE) {
[17:46:19.294]     }
[17:46:19.294]     else {
[17:46:19.294]         if (TRUE) {
[17:46:19.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.294]                 open = "w")
[17:46:19.294]         }
[17:46:19.294]         else {
[17:46:19.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.294]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.294]         }
[17:46:19.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.294]             base::sink(type = "output", split = FALSE)
[17:46:19.294]             base::close(...future.stdout)
[17:46:19.294]         }, add = TRUE)
[17:46:19.294]     }
[17:46:19.294]     ...future.frame <- base::sys.nframe()
[17:46:19.294]     ...future.conditions <- base::list()
[17:46:19.294]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.294]     if (FALSE) {
[17:46:19.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.294]     }
[17:46:19.294]     ...future.result <- base::tryCatch({
[17:46:19.294]         base::withCallingHandlers({
[17:46:19.294]             ...future.value <- base::withVisible(base::local({
[17:46:19.294]                 withCallingHandlers({
[17:46:19.294]                   {
[17:46:19.294]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:19.294]                       ii, n), appendLF = FALSE)
[17:46:19.294]                     fit <- mandelbrot(C)
[17:46:19.294]                     delay(fit)
[17:46:19.294]                     message(" done")
[17:46:19.294]                     fit
[17:46:19.294]                   }
[17:46:19.294]                 }, immediateCondition = function(cond) {
[17:46:19.294]                   save_rds <- function (object, pathname, ...) 
[17:46:19.294]                   {
[17:46:19.294]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:19.294]                     if (file_test("-f", pathname_tmp)) {
[17:46:19.294]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.294]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:19.294]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.294]                         fi_tmp[["mtime"]])
[17:46:19.294]                     }
[17:46:19.294]                     tryCatch({
[17:46:19.294]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:19.294]                     }, error = function(ex) {
[17:46:19.294]                       msg <- conditionMessage(ex)
[17:46:19.294]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.294]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:19.294]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.294]                         fi_tmp[["mtime"]], msg)
[17:46:19.294]                       ex$message <- msg
[17:46:19.294]                       stop(ex)
[17:46:19.294]                     })
[17:46:19.294]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:19.294]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:19.294]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:19.294]                       fi_tmp <- file.info(pathname_tmp)
[17:46:19.294]                       fi <- file.info(pathname)
[17:46:19.294]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:19.294]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:19.294]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:19.294]                         fi[["size"]], fi[["mtime"]])
[17:46:19.294]                       stop(msg)
[17:46:19.294]                     }
[17:46:19.294]                     invisible(pathname)
[17:46:19.294]                   }
[17:46:19.294]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:19.294]                     rootPath = tempdir()) 
[17:46:19.294]                   {
[17:46:19.294]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:19.294]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:19.294]                       tmpdir = path, fileext = ".rds")
[17:46:19.294]                     save_rds(obj, file)
[17:46:19.294]                   }
[17:46:19.294]                   saveImmediateCondition(cond, path = "/tmp/RtmpzeTRlJ/.future/immediateConditions")
[17:46:19.294]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.294]                   {
[17:46:19.294]                     inherits <- base::inherits
[17:46:19.294]                     invokeRestart <- base::invokeRestart
[17:46:19.294]                     is.null <- base::is.null
[17:46:19.294]                     muffled <- FALSE
[17:46:19.294]                     if (inherits(cond, "message")) {
[17:46:19.294]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:19.294]                       if (muffled) 
[17:46:19.294]                         invokeRestart("muffleMessage")
[17:46:19.294]                     }
[17:46:19.294]                     else if (inherits(cond, "warning")) {
[17:46:19.294]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:19.294]                       if (muffled) 
[17:46:19.294]                         invokeRestart("muffleWarning")
[17:46:19.294]                     }
[17:46:19.294]                     else if (inherits(cond, "condition")) {
[17:46:19.294]                       if (!is.null(pattern)) {
[17:46:19.294]                         computeRestarts <- base::computeRestarts
[17:46:19.294]                         grepl <- base::grepl
[17:46:19.294]                         restarts <- computeRestarts(cond)
[17:46:19.294]                         for (restart in restarts) {
[17:46:19.294]                           name <- restart$name
[17:46:19.294]                           if (is.null(name)) 
[17:46:19.294]                             next
[17:46:19.294]                           if (!grepl(pattern, name)) 
[17:46:19.294]                             next
[17:46:19.294]                           invokeRestart(restart)
[17:46:19.294]                           muffled <- TRUE
[17:46:19.294]                           break
[17:46:19.294]                         }
[17:46:19.294]                       }
[17:46:19.294]                     }
[17:46:19.294]                     invisible(muffled)
[17:46:19.294]                   }
[17:46:19.294]                   muffleCondition(cond)
[17:46:19.294]                 })
[17:46:19.294]             }))
[17:46:19.294]             future::FutureResult(value = ...future.value$value, 
[17:46:19.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.294]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.294]                     ...future.globalenv.names))
[17:46:19.294]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.294]         }, condition = base::local({
[17:46:19.294]             c <- base::c
[17:46:19.294]             inherits <- base::inherits
[17:46:19.294]             invokeRestart <- base::invokeRestart
[17:46:19.294]             length <- base::length
[17:46:19.294]             list <- base::list
[17:46:19.294]             seq.int <- base::seq.int
[17:46:19.294]             signalCondition <- base::signalCondition
[17:46:19.294]             sys.calls <- base::sys.calls
[17:46:19.294]             `[[` <- base::`[[`
[17:46:19.294]             `+` <- base::`+`
[17:46:19.294]             `<<-` <- base::`<<-`
[17:46:19.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.294]                   3L)]
[17:46:19.294]             }
[17:46:19.294]             function(cond) {
[17:46:19.294]                 is_error <- inherits(cond, "error")
[17:46:19.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.294]                   NULL)
[17:46:19.294]                 if (is_error) {
[17:46:19.294]                   sessionInformation <- function() {
[17:46:19.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.294]                       search = base::search(), system = base::Sys.info())
[17:46:19.294]                   }
[17:46:19.294]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.294]                     cond$call), session = sessionInformation(), 
[17:46:19.294]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.294]                   signalCondition(cond)
[17:46:19.294]                 }
[17:46:19.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.294]                 "immediateCondition"))) {
[17:46:19.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.294]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.294]                   if (TRUE && !signal) {
[17:46:19.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.294]                     {
[17:46:19.294]                       inherits <- base::inherits
[17:46:19.294]                       invokeRestart <- base::invokeRestart
[17:46:19.294]                       is.null <- base::is.null
[17:46:19.294]                       muffled <- FALSE
[17:46:19.294]                       if (inherits(cond, "message")) {
[17:46:19.294]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.294]                         if (muffled) 
[17:46:19.294]                           invokeRestart("muffleMessage")
[17:46:19.294]                       }
[17:46:19.294]                       else if (inherits(cond, "warning")) {
[17:46:19.294]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.294]                         if (muffled) 
[17:46:19.294]                           invokeRestart("muffleWarning")
[17:46:19.294]                       }
[17:46:19.294]                       else if (inherits(cond, "condition")) {
[17:46:19.294]                         if (!is.null(pattern)) {
[17:46:19.294]                           computeRestarts <- base::computeRestarts
[17:46:19.294]                           grepl <- base::grepl
[17:46:19.294]                           restarts <- computeRestarts(cond)
[17:46:19.294]                           for (restart in restarts) {
[17:46:19.294]                             name <- restart$name
[17:46:19.294]                             if (is.null(name)) 
[17:46:19.294]                               next
[17:46:19.294]                             if (!grepl(pattern, name)) 
[17:46:19.294]                               next
[17:46:19.294]                             invokeRestart(restart)
[17:46:19.294]                             muffled <- TRUE
[17:46:19.294]                             break
[17:46:19.294]                           }
[17:46:19.294]                         }
[17:46:19.294]                       }
[17:46:19.294]                       invisible(muffled)
[17:46:19.294]                     }
[17:46:19.294]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.294]                   }
[17:46:19.294]                 }
[17:46:19.294]                 else {
[17:46:19.294]                   if (TRUE) {
[17:46:19.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.294]                     {
[17:46:19.294]                       inherits <- base::inherits
[17:46:19.294]                       invokeRestart <- base::invokeRestart
[17:46:19.294]                       is.null <- base::is.null
[17:46:19.294]                       muffled <- FALSE
[17:46:19.294]                       if (inherits(cond, "message")) {
[17:46:19.294]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.294]                         if (muffled) 
[17:46:19.294]                           invokeRestart("muffleMessage")
[17:46:19.294]                       }
[17:46:19.294]                       else if (inherits(cond, "warning")) {
[17:46:19.294]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.294]                         if (muffled) 
[17:46:19.294]                           invokeRestart("muffleWarning")
[17:46:19.294]                       }
[17:46:19.294]                       else if (inherits(cond, "condition")) {
[17:46:19.294]                         if (!is.null(pattern)) {
[17:46:19.294]                           computeRestarts <- base::computeRestarts
[17:46:19.294]                           grepl <- base::grepl
[17:46:19.294]                           restarts <- computeRestarts(cond)
[17:46:19.294]                           for (restart in restarts) {
[17:46:19.294]                             name <- restart$name
[17:46:19.294]                             if (is.null(name)) 
[17:46:19.294]                               next
[17:46:19.294]                             if (!grepl(pattern, name)) 
[17:46:19.294]                               next
[17:46:19.294]                             invokeRestart(restart)
[17:46:19.294]                             muffled <- TRUE
[17:46:19.294]                             break
[17:46:19.294]                           }
[17:46:19.294]                         }
[17:46:19.294]                       }
[17:46:19.294]                       invisible(muffled)
[17:46:19.294]                     }
[17:46:19.294]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.294]                   }
[17:46:19.294]                 }
[17:46:19.294]             }
[17:46:19.294]         }))
[17:46:19.294]     }, error = function(ex) {
[17:46:19.294]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.294]                 ...future.rng), started = ...future.startTime, 
[17:46:19.294]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.294]             version = "1.8"), class = "FutureResult")
[17:46:19.294]     }, finally = {
[17:46:19.294]         if (!identical(...future.workdir, getwd())) 
[17:46:19.294]             setwd(...future.workdir)
[17:46:19.294]         {
[17:46:19.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.294]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.294]             }
[17:46:19.294]             base::options(...future.oldOptions)
[17:46:19.294]             if (.Platform$OS.type == "windows") {
[17:46:19.294]                 old_names <- names(...future.oldEnvVars)
[17:46:19.294]                 envs <- base::Sys.getenv()
[17:46:19.294]                 names <- names(envs)
[17:46:19.294]                 common <- intersect(names, old_names)
[17:46:19.294]                 added <- setdiff(names, old_names)
[17:46:19.294]                 removed <- setdiff(old_names, names)
[17:46:19.294]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.294]                   envs[common]]
[17:46:19.294]                 NAMES <- toupper(changed)
[17:46:19.294]                 args <- list()
[17:46:19.294]                 for (kk in seq_along(NAMES)) {
[17:46:19.294]                   name <- changed[[kk]]
[17:46:19.294]                   NAME <- NAMES[[kk]]
[17:46:19.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.294]                     next
[17:46:19.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.294]                 }
[17:46:19.294]                 NAMES <- toupper(added)
[17:46:19.294]                 for (kk in seq_along(NAMES)) {
[17:46:19.294]                   name <- added[[kk]]
[17:46:19.294]                   NAME <- NAMES[[kk]]
[17:46:19.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.294]                     next
[17:46:19.294]                   args[[name]] <- ""
[17:46:19.294]                 }
[17:46:19.294]                 NAMES <- toupper(removed)
[17:46:19.294]                 for (kk in seq_along(NAMES)) {
[17:46:19.294]                   name <- removed[[kk]]
[17:46:19.294]                   NAME <- NAMES[[kk]]
[17:46:19.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.294]                     next
[17:46:19.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.294]                 }
[17:46:19.294]                 if (length(args) > 0) 
[17:46:19.294]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.294]             }
[17:46:19.294]             else {
[17:46:19.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.294]             }
[17:46:19.294]             {
[17:46:19.294]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.294]                   0L) {
[17:46:19.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.294]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.294]                   base::options(opts)
[17:46:19.294]                 }
[17:46:19.294]                 {
[17:46:19.294]                   {
[17:46:19.294]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:19.294]                     NULL
[17:46:19.294]                   }
[17:46:19.294]                   options(future.plan = NULL)
[17:46:19.294]                   if (is.na(NA_character_)) 
[17:46:19.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.294]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.294]                     .init = FALSE)
[17:46:19.294]                 }
[17:46:19.294]             }
[17:46:19.294]         }
[17:46:19.294]     })
[17:46:19.294]     if (TRUE) {
[17:46:19.294]         base::sink(type = "output", split = FALSE)
[17:46:19.294]         if (TRUE) {
[17:46:19.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.294]         }
[17:46:19.294]         else {
[17:46:19.294]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.294]         }
[17:46:19.294]         base::close(...future.stdout)
[17:46:19.294]         ...future.stdout <- NULL
[17:46:19.294]     }
[17:46:19.294]     ...future.result$conditions <- ...future.conditions
[17:46:19.294]     ...future.result$finished <- base::Sys.time()
[17:46:19.294]     ...future.result
[17:46:19.294] }
[17:46:19.297] assign_globals() ...
[17:46:19.297] List of 4
[17:46:19.297]  $ ii   : int 4
[17:46:19.297]  $ n    : int 4
[17:46:19.297]  $ C    : cplx [1:25, 1:25] -0.719+0.0306i -0.719+0.0918i -0.719+0.1531i ...
[17:46:19.297]   ..- attr(*, "region")=List of 2
[17:46:19.297]   .. ..$ xrange: num [1:2] -0.719 0.75
[17:46:19.297]   .. ..$ yrange: num [1:2] 0.0306 1.5
[17:46:19.297]   ..- attr(*, "tile")= int [1:2] 2 2
[17:46:19.297]  $ delay:function (counts)  
[17:46:19.297]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[17:46:19.297]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560ab61a9590> 
[17:46:19.297]  - attr(*, "where")=List of 4
[17:46:19.297]   ..$ ii   :<environment: R_EmptyEnv> 
[17:46:19.297]   ..$ n    :<environment: R_EmptyEnv> 
[17:46:19.297]   ..$ C    :<environment: R_EmptyEnv> 
[17:46:19.297]   ..$ delay:<environment: R_EmptyEnv> 
[17:46:19.297]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:19.297]  - attr(*, "resolved")= logi FALSE
[17:46:19.297]  - attr(*, "total_size")= num 14584
[17:46:19.297]  - attr(*, "already-done")= logi TRUE
[17:46:19.307] - copied ‘ii’ to environment
[17:46:19.307] - copied ‘n’ to environment
[17:46:19.307] - copied ‘C’ to environment
[17:46:19.307] - reassign environment for ‘delay’
[17:46:19.307] - copied ‘delay’ to environment
[17:46:19.308] assign_globals() ... done
[17:46:19.308] requestCore(): workers = 2
[17:46:19.308] Poll #1 (0): usedCores() = 2, workers = 2
[17:46:19.319] result() for MulticoreFuture ...
[17:46:19.320] result() for MulticoreFuture ...
[17:46:19.320] result() for MulticoreFuture ... done
[17:46:19.320] signalConditions() ...
[17:46:19.321]  - include = ‘immediateCondition’
[17:46:19.321]  - exclude = 
[17:46:19.321]  - resignal = FALSE
[17:46:19.321]  - Number of conditions: 2
[17:46:19.321] signalConditions() ... done
[17:46:19.321] result() for MulticoreFuture ... done
[17:46:19.322] result() for MulticoreFuture ...
[17:46:19.322] result() for MulticoreFuture ... done
[17:46:19.322] signalConditions() ...
[17:46:19.322]  - include = ‘immediateCondition’
[17:46:19.322]  - exclude = 
[17:46:19.322]  - resignal = FALSE
[17:46:19.323]  - Number of conditions: 2
[17:46:19.323] signalConditions() ... done
[17:46:19.326] MulticoreFuture started
[17:46:19.327] - Launch lazy future ... done
[17:46:19.327] run() for ‘MulticoreFuture’ ... done
[17:46:19.327] - run() ... done
[17:46:19.327] - resolved() ...
[17:46:19.328] plan(): Setting new future strategy stack:
[17:46:19.328] List of future strategies:
[17:46:19.328] 1. sequential:
[17:46:19.328]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:19.328]    - tweaked: FALSE
[17:46:19.328]    - call: NULL
[17:46:19.329] plan(): nbrOfWorkers() = 1
[17:46:19.334] plan(): Setting new future strategy stack:
[17:46:19.334] List of future strategies:
[17:46:19.334] 1. multicore:
[17:46:19.334]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:19.334]    - tweaked: FALSE
[17:46:19.334]    - call: plan(strategy)
[17:46:19.338] - resolved: FALSE
[17:46:19.338] - resolved() ... done
[17:46:19.338] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[17:46:19.339] result() for MulticoreFuture ...
[17:46:19.339] plan(): nbrOfWorkers() = 2
[17:46:19.339] result() for MulticoreFuture ... done
[17:46:19.339] result() for MulticoreFuture ...
[17:46:19.339] result() for MulticoreFuture ... done
[17:46:19.339] signalConditions() ...
[17:46:19.340]  - include = ‘immediateCondition’
[17:46:19.340]  - exclude = 
[17:46:19.340]  - resignal = FALSE
[17:46:19.340]  - Number of conditions: 2
[17:46:19.340] signalConditions() ... done
[17:46:19.340] Future state: ‘finished’
[17:46:19.340] result() for MulticoreFuture ...
[17:46:19.341] result() for MulticoreFuture ... done
[17:46:19.341] signalConditions() ...
[17:46:19.341]  - include = ‘condition’
[17:46:19.341]  - exclude = ‘immediateCondition’
[17:46:19.341]  - resignal = TRUE
[17:46:19.341]  - Number of conditions: 2
[17:46:19.341]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:46:19.341]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.342] signalConditions() ... done
Plotting tile #3 of 4 ...
[17:46:19.343] result() for MulticoreFuture ...
[17:46:19.344] result() for MulticoreFuture ...
[17:46:19.345] result() for MulticoreFuture ... done
[17:46:19.345] signalConditions() ...
[17:46:19.345]  - include = ‘immediateCondition’
[17:46:19.345]  - exclude = 
[17:46:19.345]  - resignal = FALSE
[17:46:19.345]  - Number of conditions: 2
[17:46:19.345] signalConditions() ... done
[17:46:19.345] result() for MulticoreFuture ... done
[17:46:19.346] result() for MulticoreFuture ...
[17:46:19.346] result() for MulticoreFuture ... done
[17:46:19.346] signalConditions() ...
[17:46:19.346]  - include = ‘immediateCondition’
[17:46:19.346]  - exclude = 
[17:46:19.346]  - resignal = FALSE
[17:46:19.346]  - Number of conditions: 2
[17:46:19.346] signalConditions() ... done
[17:46:19.347] Future state: ‘finished’
[17:46:19.347] result() for MulticoreFuture ...
[17:46:19.347] result() for MulticoreFuture ... done
[17:46:19.347] signalConditions() ...
[17:46:19.347]  - include = ‘condition’
[17:46:19.347]  - exclude = ‘immediateCondition’
[17:46:19.347]  - resignal = TRUE
[17:46:19.348]  - Number of conditions: 2
[17:46:19.348]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:46:19.348]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.348] signalConditions() ... done
Plotting tile #4 of 4 ...
[17:46:19.349] result() for MulticoreFuture ...
[17:46:19.350] result() for MulticoreFuture ...
[17:46:19.350] result() for MulticoreFuture ... done
[17:46:19.350] signalConditions() ...
[17:46:19.350]  - include = ‘immediateCondition’
[17:46:19.351]  - exclude = 
[17:46:19.351]  - resignal = FALSE
[17:46:19.351]  - Number of conditions: 2
[17:46:19.351] signalConditions() ... done
[17:46:19.351] result() for MulticoreFuture ... done
[17:46:19.351] result() for MulticoreFuture ...
[17:46:19.351] result() for MulticoreFuture ... done
[17:46:19.352] signalConditions() ...
[17:46:19.352]  - include = ‘immediateCondition’
[17:46:19.352]  - exclude = 
[17:46:19.352]  - resignal = FALSE
[17:46:19.352]  - Number of conditions: 2
[17:46:19.352] signalConditions() ... done
[17:46:19.352] Future state: ‘finished’
[17:46:19.353] result() for MulticoreFuture ...
[17:46:19.353] result() for MulticoreFuture ... done
[17:46:19.353] signalConditions() ...
[17:46:19.353]  - include = ‘condition’
[17:46:19.353]  - exclude = ‘immediateCondition’
[17:46:19.354]  - resignal = TRUE
[17:46:19.354]  - Number of conditions: 2
[17:46:19.354]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:46:19.354]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:19.355] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[17:46:19.358] plan(): Setting new future strategy stack:
[17:46:19.358] List of future strategies:
[17:46:19.358] 1. multisession:
[17:46:19.358]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:19.358]    - tweaked: FALSE
[17:46:19.358]    - call: plan(strategy)
[17:46:19.358] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:46:19.359] multisession:
[17:46:19.359] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:19.359] - tweaked: FALSE
[17:46:19.359] - call: plan(strategy)
[17:46:19.366] getGlobalsAndPackages() ...
[17:46:19.366] Not searching for globals
[17:46:19.367] - globals: [0] <none>
[17:46:19.367] getGlobalsAndPackages() ... DONE
[17:46:19.367] [local output] makeClusterPSOCK() ...
[17:46:19.442] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:19.443] [local output] Base port: 11838
[17:46:19.443] [local output] Getting setup options for 2 cluster nodes ...
[17:46:19.444] [local output]  - Node 1 of 2 ...
[17:46:19.444] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:19.445] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpzeTRlJ/worker.rank=1.parallelly.parent=39979.9c2b6121a02a.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpzeTRlJ/worker.rank=1.parallelly.parent=39979.9c2b6121a02a.pid")'’
[17:46:19.631] - Possible to infer worker's PID: TRUE
[17:46:19.631] [local output] Rscript port: 11838

[17:46:19.631] [local output]  - Node 2 of 2 ...
[17:46:19.632] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:19.632] [local output] Rscript port: 11838

[17:46:19.633] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:19.633] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:19.633] [local output] Setting up PSOCK nodes in parallel
[17:46:19.634] List of 36
[17:46:19.634]  $ worker          : chr "localhost"
[17:46:19.634]   ..- attr(*, "localhost")= logi TRUE
[17:46:19.634]  $ master          : chr "localhost"
[17:46:19.634]  $ port            : int 11838
[17:46:19.634]  $ connectTimeout  : num 120
[17:46:19.634]  $ timeout         : num 2592000
[17:46:19.634]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:19.634]  $ homogeneous     : logi TRUE
[17:46:19.634]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:19.634]  $ rscript_envs    : NULL
[17:46:19.634]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:19.634]  $ rscript_startup : NULL
[17:46:19.634]  $ rscript_sh      : chr "sh"
[17:46:19.634]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:19.634]  $ methods         : logi TRUE
[17:46:19.634]  $ socketOptions   : chr "no-delay"
[17:46:19.634]  $ useXDR          : logi FALSE
[17:46:19.634]  $ outfile         : chr "/dev/null"
[17:46:19.634]  $ renice          : int NA
[17:46:19.634]  $ rshcmd          : NULL
[17:46:19.634]  $ user            : chr(0) 
[17:46:19.634]  $ revtunnel       : logi FALSE
[17:46:19.634]  $ rshlogfile      : NULL
[17:46:19.634]  $ rshopts         : chr(0) 
[17:46:19.634]  $ rank            : int 1
[17:46:19.634]  $ manual          : logi FALSE
[17:46:19.634]  $ dryrun          : logi FALSE
[17:46:19.634]  $ quiet           : logi FALSE
[17:46:19.634]  $ setup_strategy  : chr "parallel"
[17:46:19.634]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:19.634]  $ pidfile         : chr "/tmp/RtmpzeTRlJ/worker.rank=1.parallelly.parent=39979.9c2b6121a02a.pid"
[17:46:19.634]  $ rshcmd_label    : NULL
[17:46:19.634]  $ rsh_call        : NULL
[17:46:19.634]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:19.634]  $ localMachine    : logi TRUE
[17:46:19.634]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:19.634]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:19.634]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:19.634]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:19.634]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:19.634]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:19.634]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:19.634]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:19.634]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:19.634]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:19.634]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:19.634]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:19.634]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:19.634]  $ arguments       :List of 28
[17:46:19.634]   ..$ worker          : chr "localhost"
[17:46:19.634]   ..$ master          : NULL
[17:46:19.634]   ..$ port            : int 11838
[17:46:19.634]   ..$ connectTimeout  : num 120
[17:46:19.634]   ..$ timeout         : num 2592000
[17:46:19.634]   ..$ rscript         : NULL
[17:46:19.634]   ..$ homogeneous     : NULL
[17:46:19.634]   ..$ rscript_args    : NULL
[17:46:19.634]   ..$ rscript_envs    : NULL
[17:46:19.634]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:19.634]   ..$ rscript_startup : NULL
[17:46:19.634]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:19.634]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:19.634]   ..$ methods         : logi TRUE
[17:46:19.634]   ..$ socketOptions   : chr "no-delay"
[17:46:19.634]   ..$ useXDR          : logi FALSE
[17:46:19.634]   ..$ outfile         : chr "/dev/null"
[17:46:19.634]   ..$ renice          : int NA
[17:46:19.634]   ..$ rshcmd          : NULL
[17:46:19.634]   ..$ user            : NULL
[17:46:19.634]   ..$ revtunnel       : logi NA
[17:46:19.634]   ..$ rshlogfile      : NULL
[17:46:19.634]   ..$ rshopts         : NULL
[17:46:19.634]   ..$ rank            : int 1
[17:46:19.634]   ..$ manual          : logi FALSE
[17:46:19.634]   ..$ dryrun          : logi FALSE
[17:46:19.634]   ..$ quiet           : logi FALSE
[17:46:19.634]   ..$ setup_strategy  : chr "parallel"
[17:46:19.634]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:19.650] [local output] System call to launch all workers:
[17:46:19.650] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpzeTRlJ/worker.rank=1.parallelly.parent=39979.9c2b6121a02a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11838 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:19.650] [local output] Starting PSOCK main server
[17:46:19.656] [local output] Workers launched
[17:46:19.656] [local output] Waiting for workers to connect back
[17:46:19.657]  - [local output] 0 workers out of 2 ready
[17:46:19.897]  - [local output] 0 workers out of 2 ready
[17:46:19.898]  - [local output] 1 workers out of 2 ready
[17:46:19.900]  - [local output] 1 workers out of 2 ready
[17:46:19.901]  - [local output] 2 workers out of 2 ready
[17:46:19.901] [local output] Launching of workers completed
[17:46:19.901] [local output] Collecting session information from workers
[17:46:19.902] [local output]  - Worker #1 of 2
[17:46:19.902] [local output]  - Worker #2 of 2
[17:46:19.902] [local output] makeClusterPSOCK() ... done
[17:46:19.913] Packages needed by the future expression (n = 0): <none>
[17:46:19.913] Packages needed by future strategies (n = 0): <none>
[17:46:19.914] {
[17:46:19.914]     {
[17:46:19.914]         {
[17:46:19.914]             ...future.startTime <- base::Sys.time()
[17:46:19.914]             {
[17:46:19.914]                 {
[17:46:19.914]                   {
[17:46:19.914]                     {
[17:46:19.914]                       base::local({
[17:46:19.914]                         has_future <- base::requireNamespace("future", 
[17:46:19.914]                           quietly = TRUE)
[17:46:19.914]                         if (has_future) {
[17:46:19.914]                           ns <- base::getNamespace("future")
[17:46:19.914]                           version <- ns[[".package"]][["version"]]
[17:46:19.914]                           if (is.null(version)) 
[17:46:19.914]                             version <- utils::packageVersion("future")
[17:46:19.914]                         }
[17:46:19.914]                         else {
[17:46:19.914]                           version <- NULL
[17:46:19.914]                         }
[17:46:19.914]                         if (!has_future || version < "1.8.0") {
[17:46:19.914]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:19.914]                             "", base::R.version$version.string), 
[17:46:19.914]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:19.914]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:19.914]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:19.914]                               "release", "version")], collapse = " "), 
[17:46:19.914]                             hostname = base::Sys.info()[["nodename"]])
[17:46:19.914]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:19.914]                             info)
[17:46:19.914]                           info <- base::paste(info, collapse = "; ")
[17:46:19.914]                           if (!has_future) {
[17:46:19.914]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:19.914]                               info)
[17:46:19.914]                           }
[17:46:19.914]                           else {
[17:46:19.914]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:19.914]                               info, version)
[17:46:19.914]                           }
[17:46:19.914]                           base::stop(msg)
[17:46:19.914]                         }
[17:46:19.914]                       })
[17:46:19.914]                     }
[17:46:19.914]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:19.914]                     base::options(mc.cores = 1L)
[17:46:19.914]                   }
[17:46:19.914]                   ...future.strategy.old <- future::plan("list")
[17:46:19.914]                   options(future.plan = NULL)
[17:46:19.914]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.914]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:19.914]                 }
[17:46:19.914]                 ...future.workdir <- getwd()
[17:46:19.914]             }
[17:46:19.914]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:19.914]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:19.914]         }
[17:46:19.914]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:19.914]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:19.914]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:19.914]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:19.914]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:19.914]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:19.914]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:19.914]             base::names(...future.oldOptions))
[17:46:19.914]     }
[17:46:19.914]     if (FALSE) {
[17:46:19.914]     }
[17:46:19.914]     else {
[17:46:19.914]         if (TRUE) {
[17:46:19.914]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:19.914]                 open = "w")
[17:46:19.914]         }
[17:46:19.914]         else {
[17:46:19.914]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:19.914]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:19.914]         }
[17:46:19.914]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:19.914]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:19.914]             base::sink(type = "output", split = FALSE)
[17:46:19.914]             base::close(...future.stdout)
[17:46:19.914]         }, add = TRUE)
[17:46:19.914]     }
[17:46:19.914]     ...future.frame <- base::sys.nframe()
[17:46:19.914]     ...future.conditions <- base::list()
[17:46:19.914]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:19.914]     if (FALSE) {
[17:46:19.914]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:19.914]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:19.914]     }
[17:46:19.914]     ...future.result <- base::tryCatch({
[17:46:19.914]         base::withCallingHandlers({
[17:46:19.914]             ...future.value <- base::withVisible(base::local({
[17:46:19.914]                 ...future.makeSendCondition <- base::local({
[17:46:19.914]                   sendCondition <- NULL
[17:46:19.914]                   function(frame = 1L) {
[17:46:19.914]                     if (is.function(sendCondition)) 
[17:46:19.914]                       return(sendCondition)
[17:46:19.914]                     ns <- getNamespace("parallel")
[17:46:19.914]                     if (exists("sendData", mode = "function", 
[17:46:19.914]                       envir = ns)) {
[17:46:19.914]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:19.914]                         envir = ns)
[17:46:19.914]                       envir <- sys.frame(frame)
[17:46:19.914]                       master <- NULL
[17:46:19.914]                       while (!identical(envir, .GlobalEnv) && 
[17:46:19.914]                         !identical(envir, emptyenv())) {
[17:46:19.914]                         if (exists("master", mode = "list", envir = envir, 
[17:46:19.914]                           inherits = FALSE)) {
[17:46:19.914]                           master <- get("master", mode = "list", 
[17:46:19.914]                             envir = envir, inherits = FALSE)
[17:46:19.914]                           if (inherits(master, c("SOCKnode", 
[17:46:19.914]                             "SOCK0node"))) {
[17:46:19.914]                             sendCondition <<- function(cond) {
[17:46:19.914]                               data <- list(type = "VALUE", value = cond, 
[17:46:19.914]                                 success = TRUE)
[17:46:19.914]                               parallel_sendData(master, data)
[17:46:19.914]                             }
[17:46:19.914]                             return(sendCondition)
[17:46:19.914]                           }
[17:46:19.914]                         }
[17:46:19.914]                         frame <- frame + 1L
[17:46:19.914]                         envir <- sys.frame(frame)
[17:46:19.914]                       }
[17:46:19.914]                     }
[17:46:19.914]                     sendCondition <<- function(cond) NULL
[17:46:19.914]                   }
[17:46:19.914]                 })
[17:46:19.914]                 withCallingHandlers({
[17:46:19.914]                   NA
[17:46:19.914]                 }, immediateCondition = function(cond) {
[17:46:19.914]                   sendCondition <- ...future.makeSendCondition()
[17:46:19.914]                   sendCondition(cond)
[17:46:19.914]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.914]                   {
[17:46:19.914]                     inherits <- base::inherits
[17:46:19.914]                     invokeRestart <- base::invokeRestart
[17:46:19.914]                     is.null <- base::is.null
[17:46:19.914]                     muffled <- FALSE
[17:46:19.914]                     if (inherits(cond, "message")) {
[17:46:19.914]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:19.914]                       if (muffled) 
[17:46:19.914]                         invokeRestart("muffleMessage")
[17:46:19.914]                     }
[17:46:19.914]                     else if (inherits(cond, "warning")) {
[17:46:19.914]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:19.914]                       if (muffled) 
[17:46:19.914]                         invokeRestart("muffleWarning")
[17:46:19.914]                     }
[17:46:19.914]                     else if (inherits(cond, "condition")) {
[17:46:19.914]                       if (!is.null(pattern)) {
[17:46:19.914]                         computeRestarts <- base::computeRestarts
[17:46:19.914]                         grepl <- base::grepl
[17:46:19.914]                         restarts <- computeRestarts(cond)
[17:46:19.914]                         for (restart in restarts) {
[17:46:19.914]                           name <- restart$name
[17:46:19.914]                           if (is.null(name)) 
[17:46:19.914]                             next
[17:46:19.914]                           if (!grepl(pattern, name)) 
[17:46:19.914]                             next
[17:46:19.914]                           invokeRestart(restart)
[17:46:19.914]                           muffled <- TRUE
[17:46:19.914]                           break
[17:46:19.914]                         }
[17:46:19.914]                       }
[17:46:19.914]                     }
[17:46:19.914]                     invisible(muffled)
[17:46:19.914]                   }
[17:46:19.914]                   muffleCondition(cond)
[17:46:19.914]                 })
[17:46:19.914]             }))
[17:46:19.914]             future::FutureResult(value = ...future.value$value, 
[17:46:19.914]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.914]                   ...future.rng), globalenv = if (FALSE) 
[17:46:19.914]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:19.914]                     ...future.globalenv.names))
[17:46:19.914]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:19.914]         }, condition = base::local({
[17:46:19.914]             c <- base::c
[17:46:19.914]             inherits <- base::inherits
[17:46:19.914]             invokeRestart <- base::invokeRestart
[17:46:19.914]             length <- base::length
[17:46:19.914]             list <- base::list
[17:46:19.914]             seq.int <- base::seq.int
[17:46:19.914]             signalCondition <- base::signalCondition
[17:46:19.914]             sys.calls <- base::sys.calls
[17:46:19.914]             `[[` <- base::`[[`
[17:46:19.914]             `+` <- base::`+`
[17:46:19.914]             `<<-` <- base::`<<-`
[17:46:19.914]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:19.914]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:19.914]                   3L)]
[17:46:19.914]             }
[17:46:19.914]             function(cond) {
[17:46:19.914]                 is_error <- inherits(cond, "error")
[17:46:19.914]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:19.914]                   NULL)
[17:46:19.914]                 if (is_error) {
[17:46:19.914]                   sessionInformation <- function() {
[17:46:19.914]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:19.914]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:19.914]                       search = base::search(), system = base::Sys.info())
[17:46:19.914]                   }
[17:46:19.914]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.914]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:19.914]                     cond$call), session = sessionInformation(), 
[17:46:19.914]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:19.914]                   signalCondition(cond)
[17:46:19.914]                 }
[17:46:19.914]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:19.914]                 "immediateCondition"))) {
[17:46:19.914]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:19.914]                   ...future.conditions[[length(...future.conditions) + 
[17:46:19.914]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:19.914]                   if (TRUE && !signal) {
[17:46:19.914]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.914]                     {
[17:46:19.914]                       inherits <- base::inherits
[17:46:19.914]                       invokeRestart <- base::invokeRestart
[17:46:19.914]                       is.null <- base::is.null
[17:46:19.914]                       muffled <- FALSE
[17:46:19.914]                       if (inherits(cond, "message")) {
[17:46:19.914]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.914]                         if (muffled) 
[17:46:19.914]                           invokeRestart("muffleMessage")
[17:46:19.914]                       }
[17:46:19.914]                       else if (inherits(cond, "warning")) {
[17:46:19.914]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.914]                         if (muffled) 
[17:46:19.914]                           invokeRestart("muffleWarning")
[17:46:19.914]                       }
[17:46:19.914]                       else if (inherits(cond, "condition")) {
[17:46:19.914]                         if (!is.null(pattern)) {
[17:46:19.914]                           computeRestarts <- base::computeRestarts
[17:46:19.914]                           grepl <- base::grepl
[17:46:19.914]                           restarts <- computeRestarts(cond)
[17:46:19.914]                           for (restart in restarts) {
[17:46:19.914]                             name <- restart$name
[17:46:19.914]                             if (is.null(name)) 
[17:46:19.914]                               next
[17:46:19.914]                             if (!grepl(pattern, name)) 
[17:46:19.914]                               next
[17:46:19.914]                             invokeRestart(restart)
[17:46:19.914]                             muffled <- TRUE
[17:46:19.914]                             break
[17:46:19.914]                           }
[17:46:19.914]                         }
[17:46:19.914]                       }
[17:46:19.914]                       invisible(muffled)
[17:46:19.914]                     }
[17:46:19.914]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.914]                   }
[17:46:19.914]                 }
[17:46:19.914]                 else {
[17:46:19.914]                   if (TRUE) {
[17:46:19.914]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:19.914]                     {
[17:46:19.914]                       inherits <- base::inherits
[17:46:19.914]                       invokeRestart <- base::invokeRestart
[17:46:19.914]                       is.null <- base::is.null
[17:46:19.914]                       muffled <- FALSE
[17:46:19.914]                       if (inherits(cond, "message")) {
[17:46:19.914]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:19.914]                         if (muffled) 
[17:46:19.914]                           invokeRestart("muffleMessage")
[17:46:19.914]                       }
[17:46:19.914]                       else if (inherits(cond, "warning")) {
[17:46:19.914]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:19.914]                         if (muffled) 
[17:46:19.914]                           invokeRestart("muffleWarning")
[17:46:19.914]                       }
[17:46:19.914]                       else if (inherits(cond, "condition")) {
[17:46:19.914]                         if (!is.null(pattern)) {
[17:46:19.914]                           computeRestarts <- base::computeRestarts
[17:46:19.914]                           grepl <- base::grepl
[17:46:19.914]                           restarts <- computeRestarts(cond)
[17:46:19.914]                           for (restart in restarts) {
[17:46:19.914]                             name <- restart$name
[17:46:19.914]                             if (is.null(name)) 
[17:46:19.914]                               next
[17:46:19.914]                             if (!grepl(pattern, name)) 
[17:46:19.914]                               next
[17:46:19.914]                             invokeRestart(restart)
[17:46:19.914]                             muffled <- TRUE
[17:46:19.914]                             break
[17:46:19.914]                           }
[17:46:19.914]                         }
[17:46:19.914]                       }
[17:46:19.914]                       invisible(muffled)
[17:46:19.914]                     }
[17:46:19.914]                     muffleCondition(cond, pattern = "^muffle")
[17:46:19.914]                   }
[17:46:19.914]                 }
[17:46:19.914]             }
[17:46:19.914]         }))
[17:46:19.914]     }, error = function(ex) {
[17:46:19.914]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:19.914]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:19.914]                 ...future.rng), started = ...future.startTime, 
[17:46:19.914]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:19.914]             version = "1.8"), class = "FutureResult")
[17:46:19.914]     }, finally = {
[17:46:19.914]         if (!identical(...future.workdir, getwd())) 
[17:46:19.914]             setwd(...future.workdir)
[17:46:19.914]         {
[17:46:19.914]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:19.914]                 ...future.oldOptions$nwarnings <- NULL
[17:46:19.914]             }
[17:46:19.914]             base::options(...future.oldOptions)
[17:46:19.914]             if (.Platform$OS.type == "windows") {
[17:46:19.914]                 old_names <- names(...future.oldEnvVars)
[17:46:19.914]                 envs <- base::Sys.getenv()
[17:46:19.914]                 names <- names(envs)
[17:46:19.914]                 common <- intersect(names, old_names)
[17:46:19.914]                 added <- setdiff(names, old_names)
[17:46:19.914]                 removed <- setdiff(old_names, names)
[17:46:19.914]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:19.914]                   envs[common]]
[17:46:19.914]                 NAMES <- toupper(changed)
[17:46:19.914]                 args <- list()
[17:46:19.914]                 for (kk in seq_along(NAMES)) {
[17:46:19.914]                   name <- changed[[kk]]
[17:46:19.914]                   NAME <- NAMES[[kk]]
[17:46:19.914]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.914]                     next
[17:46:19.914]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.914]                 }
[17:46:19.914]                 NAMES <- toupper(added)
[17:46:19.914]                 for (kk in seq_along(NAMES)) {
[17:46:19.914]                   name <- added[[kk]]
[17:46:19.914]                   NAME <- NAMES[[kk]]
[17:46:19.914]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.914]                     next
[17:46:19.914]                   args[[name]] <- ""
[17:46:19.914]                 }
[17:46:19.914]                 NAMES <- toupper(removed)
[17:46:19.914]                 for (kk in seq_along(NAMES)) {
[17:46:19.914]                   name <- removed[[kk]]
[17:46:19.914]                   NAME <- NAMES[[kk]]
[17:46:19.914]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:19.914]                     next
[17:46:19.914]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:19.914]                 }
[17:46:19.914]                 if (length(args) > 0) 
[17:46:19.914]                   base::do.call(base::Sys.setenv, args = args)
[17:46:19.914]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:19.914]             }
[17:46:19.914]             else {
[17:46:19.914]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:19.914]             }
[17:46:19.914]             {
[17:46:19.914]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:19.914]                   0L) {
[17:46:19.914]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:19.914]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:19.914]                   base::options(opts)
[17:46:19.914]                 }
[17:46:19.914]                 {
[17:46:19.914]                   {
[17:46:19.914]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:19.914]                     NULL
[17:46:19.914]                   }
[17:46:19.914]                   options(future.plan = NULL)
[17:46:19.914]                   if (is.na(NA_character_)) 
[17:46:19.914]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:19.914]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:19.914]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:19.914]                     .init = FALSE)
[17:46:19.914]                 }
[17:46:19.914]             }
[17:46:19.914]         }
[17:46:19.914]     })
[17:46:19.914]     if (TRUE) {
[17:46:19.914]         base::sink(type = "output", split = FALSE)
[17:46:19.914]         if (TRUE) {
[17:46:19.914]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:19.914]         }
[17:46:19.914]         else {
[17:46:19.914]             ...future.result["stdout"] <- base::list(NULL)
[17:46:19.914]         }
[17:46:19.914]         base::close(...future.stdout)
[17:46:19.914]         ...future.stdout <- NULL
[17:46:19.914]     }
[17:46:19.914]     ...future.result$conditions <- ...future.conditions
[17:46:19.914]     ...future.result$finished <- base::Sys.time()
[17:46:19.914]     ...future.result
[17:46:19.914] }
[17:46:19.964] MultisessionFuture started
[17:46:19.964] result() for ClusterFuture ...
[17:46:19.965] receiveMessageFromWorker() for ClusterFuture ...
[17:46:19.965] - Validating connection of MultisessionFuture
[17:46:19.996] - received message: FutureResult
[17:46:19.996] - Received FutureResult
[17:46:19.997] - Erased future from FutureRegistry
[17:46:19.997] result() for ClusterFuture ...
[17:46:19.997] - result already collected: FutureResult
[17:46:19.997] result() for ClusterFuture ... done
[17:46:19.997] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:19.997] result() for ClusterFuture ... done
[17:46:19.997] result() for ClusterFuture ...
[17:46:19.997] - result already collected: FutureResult
[17:46:19.997] result() for ClusterFuture ... done
[17:46:19.997] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:46:20.001] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[17:46:20.005] getGlobalsAndPackages() ...
[17:46:20.005] Searching for globals...
[17:46:20.008] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:20.008] Searching for globals ... DONE
[17:46:20.009] Resolving globals: FALSE
[17:46:20.009] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:20.010] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:20.010] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:20.010] - packages: [1] ‘future’
[17:46:20.010] getGlobalsAndPackages() ... DONE
 2[17:46:20.014] getGlobalsAndPackages() ...
[17:46:20.014] Searching for globals...
[17:46:20.017] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:20.017] Searching for globals ... DONE
[17:46:20.017] Resolving globals: FALSE
[17:46:20.018] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:20.018] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:20.018] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:20.019] - packages: [1] ‘future’
[17:46:20.019] getGlobalsAndPackages() ... DONE
 3[17:46:20.019] getGlobalsAndPackages() ...
[17:46:20.019] Searching for globals...
[17:46:20.022] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:20.022] Searching for globals ... DONE
[17:46:20.022] Resolving globals: FALSE
[17:46:20.023] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:20.023] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:20.024] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:20.024] - packages: [1] ‘future’
[17:46:20.024] getGlobalsAndPackages() ... DONE
 4[17:46:20.024] getGlobalsAndPackages() ...
[17:46:20.024] Searching for globals...
[17:46:20.027] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[17:46:20.027] Searching for globals ... DONE
[17:46:20.028] Resolving globals: FALSE
[17:46:20.028] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[17:46:20.028] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[17:46:20.029] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[17:46:20.029] - packages: [1] ‘future’
[17:46:20.029] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[17:46:20.040] resolved() for ‘Future’ ...
[17:46:20.040] - state: ‘created’
[17:46:20.040] - run: TRUE
[17:46:20.040] - run() ...
[17:46:20.040] run() for ‘Future’ ...
[17:46:20.040] - state: ‘created’
[17:46:20.041] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:20.054] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:20.054] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:20.054]   - Field: ‘node’
[17:46:20.054]   - Field: ‘label’
[17:46:20.054]   - Field: ‘local’
[17:46:20.054]   - Field: ‘owner’
[17:46:20.055]   - Field: ‘envir’
[17:46:20.055]   - Field: ‘workers’
[17:46:20.055]   - Field: ‘packages’
[17:46:20.055]   - Field: ‘gc’
[17:46:20.055]   - Field: ‘conditions’
[17:46:20.055]   - Field: ‘persistent’
[17:46:20.055]   - Field: ‘expr’
[17:46:20.055]   - Field: ‘uuid’
[17:46:20.055]   - Field: ‘seed’
[17:46:20.055]   - Field: ‘version’
[17:46:20.055]   - Field: ‘result’
[17:46:20.055]   - Field: ‘asynchronous’
[17:46:20.056]   - Field: ‘calls’
[17:46:20.056]   - Field: ‘globals’
[17:46:20.056]   - Field: ‘stdout’
[17:46:20.056]   - Field: ‘earlySignal’
[17:46:20.056]   - Field: ‘lazy’
[17:46:20.056]   - Field: ‘state’
[17:46:20.056] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:20.056] - Launch lazy future ...
[17:46:20.056] Packages needed by the future expression (n = 1): ‘future’
[17:46:20.057] Packages needed by future strategies (n = 0): <none>
[17:46:20.057] {
[17:46:20.057]     {
[17:46:20.057]         {
[17:46:20.057]             ...future.startTime <- base::Sys.time()
[17:46:20.057]             {
[17:46:20.057]                 {
[17:46:20.057]                   {
[17:46:20.057]                     {
[17:46:20.057]                       {
[17:46:20.057]                         base::local({
[17:46:20.057]                           has_future <- base::requireNamespace("future", 
[17:46:20.057]                             quietly = TRUE)
[17:46:20.057]                           if (has_future) {
[17:46:20.057]                             ns <- base::getNamespace("future")
[17:46:20.057]                             version <- ns[[".package"]][["version"]]
[17:46:20.057]                             if (is.null(version)) 
[17:46:20.057]                               version <- utils::packageVersion("future")
[17:46:20.057]                           }
[17:46:20.057]                           else {
[17:46:20.057]                             version <- NULL
[17:46:20.057]                           }
[17:46:20.057]                           if (!has_future || version < "1.8.0") {
[17:46:20.057]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:20.057]                               "", base::R.version$version.string), 
[17:46:20.057]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:20.057]                                 base::R.version$platform, 8 * 
[17:46:20.057]                                   base::.Machine$sizeof.pointer), 
[17:46:20.057]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:20.057]                                 "release", "version")], collapse = " "), 
[17:46:20.057]                               hostname = base::Sys.info()[["nodename"]])
[17:46:20.057]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:20.057]                               info)
[17:46:20.057]                             info <- base::paste(info, collapse = "; ")
[17:46:20.057]                             if (!has_future) {
[17:46:20.057]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:20.057]                                 info)
[17:46:20.057]                             }
[17:46:20.057]                             else {
[17:46:20.057]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:20.057]                                 info, version)
[17:46:20.057]                             }
[17:46:20.057]                             base::stop(msg)
[17:46:20.057]                           }
[17:46:20.057]                         })
[17:46:20.057]                       }
[17:46:20.057]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:20.057]                       base::options(mc.cores = 1L)
[17:46:20.057]                     }
[17:46:20.057]                     base::local({
[17:46:20.057]                       for (pkg in "future") {
[17:46:20.057]                         base::loadNamespace(pkg)
[17:46:20.057]                         base::library(pkg, character.only = TRUE)
[17:46:20.057]                       }
[17:46:20.057]                     })
[17:46:20.057]                   }
[17:46:20.057]                   ...future.strategy.old <- future::plan("list")
[17:46:20.057]                   options(future.plan = NULL)
[17:46:20.057]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.057]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:20.057]                 }
[17:46:20.057]                 ...future.workdir <- getwd()
[17:46:20.057]             }
[17:46:20.057]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:20.057]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:20.057]         }
[17:46:20.057]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:20.057]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:20.057]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:20.057]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:20.057]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:20.057]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:20.057]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:20.057]             base::names(...future.oldOptions))
[17:46:20.057]     }
[17:46:20.057]     if (FALSE) {
[17:46:20.057]     }
[17:46:20.057]     else {
[17:46:20.057]         if (TRUE) {
[17:46:20.057]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:20.057]                 open = "w")
[17:46:20.057]         }
[17:46:20.057]         else {
[17:46:20.057]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:20.057]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:20.057]         }
[17:46:20.057]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:20.057]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:20.057]             base::sink(type = "output", split = FALSE)
[17:46:20.057]             base::close(...future.stdout)
[17:46:20.057]         }, add = TRUE)
[17:46:20.057]     }
[17:46:20.057]     ...future.frame <- base::sys.nframe()
[17:46:20.057]     ...future.conditions <- base::list()
[17:46:20.057]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:20.057]     if (FALSE) {
[17:46:20.057]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:20.057]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:20.057]     }
[17:46:20.057]     ...future.result <- base::tryCatch({
[17:46:20.057]         base::withCallingHandlers({
[17:46:20.057]             ...future.value <- base::withVisible(base::local({
[17:46:20.057]                 ...future.makeSendCondition <- base::local({
[17:46:20.057]                   sendCondition <- NULL
[17:46:20.057]                   function(frame = 1L) {
[17:46:20.057]                     if (is.function(sendCondition)) 
[17:46:20.057]                       return(sendCondition)
[17:46:20.057]                     ns <- getNamespace("parallel")
[17:46:20.057]                     if (exists("sendData", mode = "function", 
[17:46:20.057]                       envir = ns)) {
[17:46:20.057]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:20.057]                         envir = ns)
[17:46:20.057]                       envir <- sys.frame(frame)
[17:46:20.057]                       master <- NULL
[17:46:20.057]                       while (!identical(envir, .GlobalEnv) && 
[17:46:20.057]                         !identical(envir, emptyenv())) {
[17:46:20.057]                         if (exists("master", mode = "list", envir = envir, 
[17:46:20.057]                           inherits = FALSE)) {
[17:46:20.057]                           master <- get("master", mode = "list", 
[17:46:20.057]                             envir = envir, inherits = FALSE)
[17:46:20.057]                           if (inherits(master, c("SOCKnode", 
[17:46:20.057]                             "SOCK0node"))) {
[17:46:20.057]                             sendCondition <<- function(cond) {
[17:46:20.057]                               data <- list(type = "VALUE", value = cond, 
[17:46:20.057]                                 success = TRUE)
[17:46:20.057]                               parallel_sendData(master, data)
[17:46:20.057]                             }
[17:46:20.057]                             return(sendCondition)
[17:46:20.057]                           }
[17:46:20.057]                         }
[17:46:20.057]                         frame <- frame + 1L
[17:46:20.057]                         envir <- sys.frame(frame)
[17:46:20.057]                       }
[17:46:20.057]                     }
[17:46:20.057]                     sendCondition <<- function(cond) NULL
[17:46:20.057]                   }
[17:46:20.057]                 })
[17:46:20.057]                 withCallingHandlers({
[17:46:20.057]                   {
[17:46:20.057]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:20.057]                       ii, n), appendLF = FALSE)
[17:46:20.057]                     fit <- mandelbrot(C)
[17:46:20.057]                     delay(fit)
[17:46:20.057]                     message(" done")
[17:46:20.057]                     fit
[17:46:20.057]                   }
[17:46:20.057]                 }, immediateCondition = function(cond) {
[17:46:20.057]                   sendCondition <- ...future.makeSendCondition()
[17:46:20.057]                   sendCondition(cond)
[17:46:20.057]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.057]                   {
[17:46:20.057]                     inherits <- base::inherits
[17:46:20.057]                     invokeRestart <- base::invokeRestart
[17:46:20.057]                     is.null <- base::is.null
[17:46:20.057]                     muffled <- FALSE
[17:46:20.057]                     if (inherits(cond, "message")) {
[17:46:20.057]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:20.057]                       if (muffled) 
[17:46:20.057]                         invokeRestart("muffleMessage")
[17:46:20.057]                     }
[17:46:20.057]                     else if (inherits(cond, "warning")) {
[17:46:20.057]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:20.057]                       if (muffled) 
[17:46:20.057]                         invokeRestart("muffleWarning")
[17:46:20.057]                     }
[17:46:20.057]                     else if (inherits(cond, "condition")) {
[17:46:20.057]                       if (!is.null(pattern)) {
[17:46:20.057]                         computeRestarts <- base::computeRestarts
[17:46:20.057]                         grepl <- base::grepl
[17:46:20.057]                         restarts <- computeRestarts(cond)
[17:46:20.057]                         for (restart in restarts) {
[17:46:20.057]                           name <- restart$name
[17:46:20.057]                           if (is.null(name)) 
[17:46:20.057]                             next
[17:46:20.057]                           if (!grepl(pattern, name)) 
[17:46:20.057]                             next
[17:46:20.057]                           invokeRestart(restart)
[17:46:20.057]                           muffled <- TRUE
[17:46:20.057]                           break
[17:46:20.057]                         }
[17:46:20.057]                       }
[17:46:20.057]                     }
[17:46:20.057]                     invisible(muffled)
[17:46:20.057]                   }
[17:46:20.057]                   muffleCondition(cond)
[17:46:20.057]                 })
[17:46:20.057]             }))
[17:46:20.057]             future::FutureResult(value = ...future.value$value, 
[17:46:20.057]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.057]                   ...future.rng), globalenv = if (FALSE) 
[17:46:20.057]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:20.057]                     ...future.globalenv.names))
[17:46:20.057]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:20.057]         }, condition = base::local({
[17:46:20.057]             c <- base::c
[17:46:20.057]             inherits <- base::inherits
[17:46:20.057]             invokeRestart <- base::invokeRestart
[17:46:20.057]             length <- base::length
[17:46:20.057]             list <- base::list
[17:46:20.057]             seq.int <- base::seq.int
[17:46:20.057]             signalCondition <- base::signalCondition
[17:46:20.057]             sys.calls <- base::sys.calls
[17:46:20.057]             `[[` <- base::`[[`
[17:46:20.057]             `+` <- base::`+`
[17:46:20.057]             `<<-` <- base::`<<-`
[17:46:20.057]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:20.057]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:20.057]                   3L)]
[17:46:20.057]             }
[17:46:20.057]             function(cond) {
[17:46:20.057]                 is_error <- inherits(cond, "error")
[17:46:20.057]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:20.057]                   NULL)
[17:46:20.057]                 if (is_error) {
[17:46:20.057]                   sessionInformation <- function() {
[17:46:20.057]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:20.057]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:20.057]                       search = base::search(), system = base::Sys.info())
[17:46:20.057]                   }
[17:46:20.057]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.057]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:20.057]                     cond$call), session = sessionInformation(), 
[17:46:20.057]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:20.057]                   signalCondition(cond)
[17:46:20.057]                 }
[17:46:20.057]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:20.057]                 "immediateCondition"))) {
[17:46:20.057]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:20.057]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.057]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:20.057]                   if (TRUE && !signal) {
[17:46:20.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.057]                     {
[17:46:20.057]                       inherits <- base::inherits
[17:46:20.057]                       invokeRestart <- base::invokeRestart
[17:46:20.057]                       is.null <- base::is.null
[17:46:20.057]                       muffled <- FALSE
[17:46:20.057]                       if (inherits(cond, "message")) {
[17:46:20.057]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.057]                         if (muffled) 
[17:46:20.057]                           invokeRestart("muffleMessage")
[17:46:20.057]                       }
[17:46:20.057]                       else if (inherits(cond, "warning")) {
[17:46:20.057]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.057]                         if (muffled) 
[17:46:20.057]                           invokeRestart("muffleWarning")
[17:46:20.057]                       }
[17:46:20.057]                       else if (inherits(cond, "condition")) {
[17:46:20.057]                         if (!is.null(pattern)) {
[17:46:20.057]                           computeRestarts <- base::computeRestarts
[17:46:20.057]                           grepl <- base::grepl
[17:46:20.057]                           restarts <- computeRestarts(cond)
[17:46:20.057]                           for (restart in restarts) {
[17:46:20.057]                             name <- restart$name
[17:46:20.057]                             if (is.null(name)) 
[17:46:20.057]                               next
[17:46:20.057]                             if (!grepl(pattern, name)) 
[17:46:20.057]                               next
[17:46:20.057]                             invokeRestart(restart)
[17:46:20.057]                             muffled <- TRUE
[17:46:20.057]                             break
[17:46:20.057]                           }
[17:46:20.057]                         }
[17:46:20.057]                       }
[17:46:20.057]                       invisible(muffled)
[17:46:20.057]                     }
[17:46:20.057]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.057]                   }
[17:46:20.057]                 }
[17:46:20.057]                 else {
[17:46:20.057]                   if (TRUE) {
[17:46:20.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.057]                     {
[17:46:20.057]                       inherits <- base::inherits
[17:46:20.057]                       invokeRestart <- base::invokeRestart
[17:46:20.057]                       is.null <- base::is.null
[17:46:20.057]                       muffled <- FALSE
[17:46:20.057]                       if (inherits(cond, "message")) {
[17:46:20.057]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.057]                         if (muffled) 
[17:46:20.057]                           invokeRestart("muffleMessage")
[17:46:20.057]                       }
[17:46:20.057]                       else if (inherits(cond, "warning")) {
[17:46:20.057]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.057]                         if (muffled) 
[17:46:20.057]                           invokeRestart("muffleWarning")
[17:46:20.057]                       }
[17:46:20.057]                       else if (inherits(cond, "condition")) {
[17:46:20.057]                         if (!is.null(pattern)) {
[17:46:20.057]                           computeRestarts <- base::computeRestarts
[17:46:20.057]                           grepl <- base::grepl
[17:46:20.057]                           restarts <- computeRestarts(cond)
[17:46:20.057]                           for (restart in restarts) {
[17:46:20.057]                             name <- restart$name
[17:46:20.057]                             if (is.null(name)) 
[17:46:20.057]                               next
[17:46:20.057]                             if (!grepl(pattern, name)) 
[17:46:20.057]                               next
[17:46:20.057]                             invokeRestart(restart)
[17:46:20.057]                             muffled <- TRUE
[17:46:20.057]                             break
[17:46:20.057]                           }
[17:46:20.057]                         }
[17:46:20.057]                       }
[17:46:20.057]                       invisible(muffled)
[17:46:20.057]                     }
[17:46:20.057]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.057]                   }
[17:46:20.057]                 }
[17:46:20.057]             }
[17:46:20.057]         }))
[17:46:20.057]     }, error = function(ex) {
[17:46:20.057]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:20.057]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.057]                 ...future.rng), started = ...future.startTime, 
[17:46:20.057]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:20.057]             version = "1.8"), class = "FutureResult")
[17:46:20.057]     }, finally = {
[17:46:20.057]         if (!identical(...future.workdir, getwd())) 
[17:46:20.057]             setwd(...future.workdir)
[17:46:20.057]         {
[17:46:20.057]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:20.057]                 ...future.oldOptions$nwarnings <- NULL
[17:46:20.057]             }
[17:46:20.057]             base::options(...future.oldOptions)
[17:46:20.057]             if (.Platform$OS.type == "windows") {
[17:46:20.057]                 old_names <- names(...future.oldEnvVars)
[17:46:20.057]                 envs <- base::Sys.getenv()
[17:46:20.057]                 names <- names(envs)
[17:46:20.057]                 common <- intersect(names, old_names)
[17:46:20.057]                 added <- setdiff(names, old_names)
[17:46:20.057]                 removed <- setdiff(old_names, names)
[17:46:20.057]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:20.057]                   envs[common]]
[17:46:20.057]                 NAMES <- toupper(changed)
[17:46:20.057]                 args <- list()
[17:46:20.057]                 for (kk in seq_along(NAMES)) {
[17:46:20.057]                   name <- changed[[kk]]
[17:46:20.057]                   NAME <- NAMES[[kk]]
[17:46:20.057]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.057]                     next
[17:46:20.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.057]                 }
[17:46:20.057]                 NAMES <- toupper(added)
[17:46:20.057]                 for (kk in seq_along(NAMES)) {
[17:46:20.057]                   name <- added[[kk]]
[17:46:20.057]                   NAME <- NAMES[[kk]]
[17:46:20.057]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.057]                     next
[17:46:20.057]                   args[[name]] <- ""
[17:46:20.057]                 }
[17:46:20.057]                 NAMES <- toupper(removed)
[17:46:20.057]                 for (kk in seq_along(NAMES)) {
[17:46:20.057]                   name <- removed[[kk]]
[17:46:20.057]                   NAME <- NAMES[[kk]]
[17:46:20.057]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.057]                     next
[17:46:20.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.057]                 }
[17:46:20.057]                 if (length(args) > 0) 
[17:46:20.057]                   base::do.call(base::Sys.setenv, args = args)
[17:46:20.057]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:20.057]             }
[17:46:20.057]             else {
[17:46:20.057]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:20.057]             }
[17:46:20.057]             {
[17:46:20.057]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:20.057]                   0L) {
[17:46:20.057]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:20.057]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:20.057]                   base::options(opts)
[17:46:20.057]                 }
[17:46:20.057]                 {
[17:46:20.057]                   {
[17:46:20.057]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:20.057]                     NULL
[17:46:20.057]                   }
[17:46:20.057]                   options(future.plan = NULL)
[17:46:20.057]                   if (is.na(NA_character_)) 
[17:46:20.057]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.057]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:20.057]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:20.057]                     .init = FALSE)
[17:46:20.057]                 }
[17:46:20.057]             }
[17:46:20.057]         }
[17:46:20.057]     })
[17:46:20.057]     if (TRUE) {
[17:46:20.057]         base::sink(type = "output", split = FALSE)
[17:46:20.057]         if (TRUE) {
[17:46:20.057]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:20.057]         }
[17:46:20.057]         else {
[17:46:20.057]             ...future.result["stdout"] <- base::list(NULL)
[17:46:20.057]         }
[17:46:20.057]         base::close(...future.stdout)
[17:46:20.057]         ...future.stdout <- NULL
[17:46:20.057]     }
[17:46:20.057]     ...future.result$conditions <- ...future.conditions
[17:46:20.057]     ...future.result$finished <- base::Sys.time()
[17:46:20.057]     ...future.result
[17:46:20.057] }
[17:46:20.060] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[17:46:20.060] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:46:20.060] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:46:20.060] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[17:46:20.061] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[17:46:20.061] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[17:46:20.104] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[17:46:20.104] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[17:46:20.148] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[17:46:20.148] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[17:46:20.149] MultisessionFuture started
[17:46:20.149] - Launch lazy future ... done
[17:46:20.149] run() for ‘MultisessionFuture’ ... done
[17:46:20.149] - run() ... done
[17:46:20.149] - resolved() ...
[17:46:20.160] - resolved: FALSE
[17:46:20.160] - resolved() ... done
[17:46:20.160] resolved() for ‘MultisessionFuture’ ... done
[17:46:20.160] resolved() for ‘Future’ ...
[17:46:20.161] - state: ‘created’
[17:46:20.161] - run: TRUE
[17:46:20.161] - run() ...
[17:46:20.161] run() for ‘Future’ ...
[17:46:20.161] - state: ‘created’
[17:46:20.161] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:20.175] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:20.175] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:20.175]   - Field: ‘node’
[17:46:20.175]   - Field: ‘label’
[17:46:20.175]   - Field: ‘local’
[17:46:20.175]   - Field: ‘owner’
[17:46:20.175]   - Field: ‘envir’
[17:46:20.176]   - Field: ‘workers’
[17:46:20.176]   - Field: ‘packages’
[17:46:20.176]   - Field: ‘gc’
[17:46:20.176]   - Field: ‘conditions’
[17:46:20.176]   - Field: ‘persistent’
[17:46:20.176]   - Field: ‘expr’
[17:46:20.176]   - Field: ‘uuid’
[17:46:20.176]   - Field: ‘seed’
[17:46:20.176]   - Field: ‘version’
[17:46:20.176]   - Field: ‘result’
[17:46:20.176]   - Field: ‘asynchronous’
[17:46:20.177]   - Field: ‘calls’
[17:46:20.177]   - Field: ‘globals’
[17:46:20.177]   - Field: ‘stdout’
[17:46:20.177]   - Field: ‘earlySignal’
[17:46:20.177]   - Field: ‘lazy’
[17:46:20.177]   - Field: ‘state’
[17:46:20.177] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:20.177] - Launch lazy future ...
[17:46:20.177] Packages needed by the future expression (n = 1): ‘future’
[17:46:20.178] Packages needed by future strategies (n = 0): <none>
[17:46:20.178] {
[17:46:20.178]     {
[17:46:20.178]         {
[17:46:20.178]             ...future.startTime <- base::Sys.time()
[17:46:20.178]             {
[17:46:20.178]                 {
[17:46:20.178]                   {
[17:46:20.178]                     {
[17:46:20.178]                       {
[17:46:20.178]                         base::local({
[17:46:20.178]                           has_future <- base::requireNamespace("future", 
[17:46:20.178]                             quietly = TRUE)
[17:46:20.178]                           if (has_future) {
[17:46:20.178]                             ns <- base::getNamespace("future")
[17:46:20.178]                             version <- ns[[".package"]][["version"]]
[17:46:20.178]                             if (is.null(version)) 
[17:46:20.178]                               version <- utils::packageVersion("future")
[17:46:20.178]                           }
[17:46:20.178]                           else {
[17:46:20.178]                             version <- NULL
[17:46:20.178]                           }
[17:46:20.178]                           if (!has_future || version < "1.8.0") {
[17:46:20.178]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:20.178]                               "", base::R.version$version.string), 
[17:46:20.178]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:20.178]                                 base::R.version$platform, 8 * 
[17:46:20.178]                                   base::.Machine$sizeof.pointer), 
[17:46:20.178]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:20.178]                                 "release", "version")], collapse = " "), 
[17:46:20.178]                               hostname = base::Sys.info()[["nodename"]])
[17:46:20.178]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:20.178]                               info)
[17:46:20.178]                             info <- base::paste(info, collapse = "; ")
[17:46:20.178]                             if (!has_future) {
[17:46:20.178]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:20.178]                                 info)
[17:46:20.178]                             }
[17:46:20.178]                             else {
[17:46:20.178]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:20.178]                                 info, version)
[17:46:20.178]                             }
[17:46:20.178]                             base::stop(msg)
[17:46:20.178]                           }
[17:46:20.178]                         })
[17:46:20.178]                       }
[17:46:20.178]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:20.178]                       base::options(mc.cores = 1L)
[17:46:20.178]                     }
[17:46:20.178]                     base::local({
[17:46:20.178]                       for (pkg in "future") {
[17:46:20.178]                         base::loadNamespace(pkg)
[17:46:20.178]                         base::library(pkg, character.only = TRUE)
[17:46:20.178]                       }
[17:46:20.178]                     })
[17:46:20.178]                   }
[17:46:20.178]                   ...future.strategy.old <- future::plan("list")
[17:46:20.178]                   options(future.plan = NULL)
[17:46:20.178]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.178]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:20.178]                 }
[17:46:20.178]                 ...future.workdir <- getwd()
[17:46:20.178]             }
[17:46:20.178]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:20.178]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:20.178]         }
[17:46:20.178]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:20.178]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:20.178]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:20.178]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:20.178]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:20.178]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:20.178]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:20.178]             base::names(...future.oldOptions))
[17:46:20.178]     }
[17:46:20.178]     if (FALSE) {
[17:46:20.178]     }
[17:46:20.178]     else {
[17:46:20.178]         if (TRUE) {
[17:46:20.178]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:20.178]                 open = "w")
[17:46:20.178]         }
[17:46:20.178]         else {
[17:46:20.178]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:20.178]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:20.178]         }
[17:46:20.178]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:20.178]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:20.178]             base::sink(type = "output", split = FALSE)
[17:46:20.178]             base::close(...future.stdout)
[17:46:20.178]         }, add = TRUE)
[17:46:20.178]     }
[17:46:20.178]     ...future.frame <- base::sys.nframe()
[17:46:20.178]     ...future.conditions <- base::list()
[17:46:20.178]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:20.178]     if (FALSE) {
[17:46:20.178]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:20.178]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:20.178]     }
[17:46:20.178]     ...future.result <- base::tryCatch({
[17:46:20.178]         base::withCallingHandlers({
[17:46:20.178]             ...future.value <- base::withVisible(base::local({
[17:46:20.178]                 ...future.makeSendCondition <- base::local({
[17:46:20.178]                   sendCondition <- NULL
[17:46:20.178]                   function(frame = 1L) {
[17:46:20.178]                     if (is.function(sendCondition)) 
[17:46:20.178]                       return(sendCondition)
[17:46:20.178]                     ns <- getNamespace("parallel")
[17:46:20.178]                     if (exists("sendData", mode = "function", 
[17:46:20.178]                       envir = ns)) {
[17:46:20.178]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:20.178]                         envir = ns)
[17:46:20.178]                       envir <- sys.frame(frame)
[17:46:20.178]                       master <- NULL
[17:46:20.178]                       while (!identical(envir, .GlobalEnv) && 
[17:46:20.178]                         !identical(envir, emptyenv())) {
[17:46:20.178]                         if (exists("master", mode = "list", envir = envir, 
[17:46:20.178]                           inherits = FALSE)) {
[17:46:20.178]                           master <- get("master", mode = "list", 
[17:46:20.178]                             envir = envir, inherits = FALSE)
[17:46:20.178]                           if (inherits(master, c("SOCKnode", 
[17:46:20.178]                             "SOCK0node"))) {
[17:46:20.178]                             sendCondition <<- function(cond) {
[17:46:20.178]                               data <- list(type = "VALUE", value = cond, 
[17:46:20.178]                                 success = TRUE)
[17:46:20.178]                               parallel_sendData(master, data)
[17:46:20.178]                             }
[17:46:20.178]                             return(sendCondition)
[17:46:20.178]                           }
[17:46:20.178]                         }
[17:46:20.178]                         frame <- frame + 1L
[17:46:20.178]                         envir <- sys.frame(frame)
[17:46:20.178]                       }
[17:46:20.178]                     }
[17:46:20.178]                     sendCondition <<- function(cond) NULL
[17:46:20.178]                   }
[17:46:20.178]                 })
[17:46:20.178]                 withCallingHandlers({
[17:46:20.178]                   {
[17:46:20.178]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:20.178]                       ii, n), appendLF = FALSE)
[17:46:20.178]                     fit <- mandelbrot(C)
[17:46:20.178]                     delay(fit)
[17:46:20.178]                     message(" done")
[17:46:20.178]                     fit
[17:46:20.178]                   }
[17:46:20.178]                 }, immediateCondition = function(cond) {
[17:46:20.178]                   sendCondition <- ...future.makeSendCondition()
[17:46:20.178]                   sendCondition(cond)
[17:46:20.178]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.178]                   {
[17:46:20.178]                     inherits <- base::inherits
[17:46:20.178]                     invokeRestart <- base::invokeRestart
[17:46:20.178]                     is.null <- base::is.null
[17:46:20.178]                     muffled <- FALSE
[17:46:20.178]                     if (inherits(cond, "message")) {
[17:46:20.178]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:20.178]                       if (muffled) 
[17:46:20.178]                         invokeRestart("muffleMessage")
[17:46:20.178]                     }
[17:46:20.178]                     else if (inherits(cond, "warning")) {
[17:46:20.178]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:20.178]                       if (muffled) 
[17:46:20.178]                         invokeRestart("muffleWarning")
[17:46:20.178]                     }
[17:46:20.178]                     else if (inherits(cond, "condition")) {
[17:46:20.178]                       if (!is.null(pattern)) {
[17:46:20.178]                         computeRestarts <- base::computeRestarts
[17:46:20.178]                         grepl <- base::grepl
[17:46:20.178]                         restarts <- computeRestarts(cond)
[17:46:20.178]                         for (restart in restarts) {
[17:46:20.178]                           name <- restart$name
[17:46:20.178]                           if (is.null(name)) 
[17:46:20.178]                             next
[17:46:20.178]                           if (!grepl(pattern, name)) 
[17:46:20.178]                             next
[17:46:20.178]                           invokeRestart(restart)
[17:46:20.178]                           muffled <- TRUE
[17:46:20.178]                           break
[17:46:20.178]                         }
[17:46:20.178]                       }
[17:46:20.178]                     }
[17:46:20.178]                     invisible(muffled)
[17:46:20.178]                   }
[17:46:20.178]                   muffleCondition(cond)
[17:46:20.178]                 })
[17:46:20.178]             }))
[17:46:20.178]             future::FutureResult(value = ...future.value$value, 
[17:46:20.178]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.178]                   ...future.rng), globalenv = if (FALSE) 
[17:46:20.178]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:20.178]                     ...future.globalenv.names))
[17:46:20.178]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:20.178]         }, condition = base::local({
[17:46:20.178]             c <- base::c
[17:46:20.178]             inherits <- base::inherits
[17:46:20.178]             invokeRestart <- base::invokeRestart
[17:46:20.178]             length <- base::length
[17:46:20.178]             list <- base::list
[17:46:20.178]             seq.int <- base::seq.int
[17:46:20.178]             signalCondition <- base::signalCondition
[17:46:20.178]             sys.calls <- base::sys.calls
[17:46:20.178]             `[[` <- base::`[[`
[17:46:20.178]             `+` <- base::`+`
[17:46:20.178]             `<<-` <- base::`<<-`
[17:46:20.178]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:20.178]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:20.178]                   3L)]
[17:46:20.178]             }
[17:46:20.178]             function(cond) {
[17:46:20.178]                 is_error <- inherits(cond, "error")
[17:46:20.178]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:20.178]                   NULL)
[17:46:20.178]                 if (is_error) {
[17:46:20.178]                   sessionInformation <- function() {
[17:46:20.178]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:20.178]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:20.178]                       search = base::search(), system = base::Sys.info())
[17:46:20.178]                   }
[17:46:20.178]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.178]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:20.178]                     cond$call), session = sessionInformation(), 
[17:46:20.178]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:20.178]                   signalCondition(cond)
[17:46:20.178]                 }
[17:46:20.178]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:20.178]                 "immediateCondition"))) {
[17:46:20.178]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:20.178]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.178]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:20.178]                   if (TRUE && !signal) {
[17:46:20.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.178]                     {
[17:46:20.178]                       inherits <- base::inherits
[17:46:20.178]                       invokeRestart <- base::invokeRestart
[17:46:20.178]                       is.null <- base::is.null
[17:46:20.178]                       muffled <- FALSE
[17:46:20.178]                       if (inherits(cond, "message")) {
[17:46:20.178]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.178]                         if (muffled) 
[17:46:20.178]                           invokeRestart("muffleMessage")
[17:46:20.178]                       }
[17:46:20.178]                       else if (inherits(cond, "warning")) {
[17:46:20.178]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.178]                         if (muffled) 
[17:46:20.178]                           invokeRestart("muffleWarning")
[17:46:20.178]                       }
[17:46:20.178]                       else if (inherits(cond, "condition")) {
[17:46:20.178]                         if (!is.null(pattern)) {
[17:46:20.178]                           computeRestarts <- base::computeRestarts
[17:46:20.178]                           grepl <- base::grepl
[17:46:20.178]                           restarts <- computeRestarts(cond)
[17:46:20.178]                           for (restart in restarts) {
[17:46:20.178]                             name <- restart$name
[17:46:20.178]                             if (is.null(name)) 
[17:46:20.178]                               next
[17:46:20.178]                             if (!grepl(pattern, name)) 
[17:46:20.178]                               next
[17:46:20.178]                             invokeRestart(restart)
[17:46:20.178]                             muffled <- TRUE
[17:46:20.178]                             break
[17:46:20.178]                           }
[17:46:20.178]                         }
[17:46:20.178]                       }
[17:46:20.178]                       invisible(muffled)
[17:46:20.178]                     }
[17:46:20.178]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.178]                   }
[17:46:20.178]                 }
[17:46:20.178]                 else {
[17:46:20.178]                   if (TRUE) {
[17:46:20.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.178]                     {
[17:46:20.178]                       inherits <- base::inherits
[17:46:20.178]                       invokeRestart <- base::invokeRestart
[17:46:20.178]                       is.null <- base::is.null
[17:46:20.178]                       muffled <- FALSE
[17:46:20.178]                       if (inherits(cond, "message")) {
[17:46:20.178]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.178]                         if (muffled) 
[17:46:20.178]                           invokeRestart("muffleMessage")
[17:46:20.178]                       }
[17:46:20.178]                       else if (inherits(cond, "warning")) {
[17:46:20.178]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.178]                         if (muffled) 
[17:46:20.178]                           invokeRestart("muffleWarning")
[17:46:20.178]                       }
[17:46:20.178]                       else if (inherits(cond, "condition")) {
[17:46:20.178]                         if (!is.null(pattern)) {
[17:46:20.178]                           computeRestarts <- base::computeRestarts
[17:46:20.178]                           grepl <- base::grepl
[17:46:20.178]                           restarts <- computeRestarts(cond)
[17:46:20.178]                           for (restart in restarts) {
[17:46:20.178]                             name <- restart$name
[17:46:20.178]                             if (is.null(name)) 
[17:46:20.178]                               next
[17:46:20.178]                             if (!grepl(pattern, name)) 
[17:46:20.178]                               next
[17:46:20.178]                             invokeRestart(restart)
[17:46:20.178]                             muffled <- TRUE
[17:46:20.178]                             break
[17:46:20.178]                           }
[17:46:20.178]                         }
[17:46:20.178]                       }
[17:46:20.178]                       invisible(muffled)
[17:46:20.178]                     }
[17:46:20.178]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.178]                   }
[17:46:20.178]                 }
[17:46:20.178]             }
[17:46:20.178]         }))
[17:46:20.178]     }, error = function(ex) {
[17:46:20.178]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:20.178]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.178]                 ...future.rng), started = ...future.startTime, 
[17:46:20.178]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:20.178]             version = "1.8"), class = "FutureResult")
[17:46:20.178]     }, finally = {
[17:46:20.178]         if (!identical(...future.workdir, getwd())) 
[17:46:20.178]             setwd(...future.workdir)
[17:46:20.178]         {
[17:46:20.178]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:20.178]                 ...future.oldOptions$nwarnings <- NULL
[17:46:20.178]             }
[17:46:20.178]             base::options(...future.oldOptions)
[17:46:20.178]             if (.Platform$OS.type == "windows") {
[17:46:20.178]                 old_names <- names(...future.oldEnvVars)
[17:46:20.178]                 envs <- base::Sys.getenv()
[17:46:20.178]                 names <- names(envs)
[17:46:20.178]                 common <- intersect(names, old_names)
[17:46:20.178]                 added <- setdiff(names, old_names)
[17:46:20.178]                 removed <- setdiff(old_names, names)
[17:46:20.178]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:20.178]                   envs[common]]
[17:46:20.178]                 NAMES <- toupper(changed)
[17:46:20.178]                 args <- list()
[17:46:20.178]                 for (kk in seq_along(NAMES)) {
[17:46:20.178]                   name <- changed[[kk]]
[17:46:20.178]                   NAME <- NAMES[[kk]]
[17:46:20.178]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.178]                     next
[17:46:20.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.178]                 }
[17:46:20.178]                 NAMES <- toupper(added)
[17:46:20.178]                 for (kk in seq_along(NAMES)) {
[17:46:20.178]                   name <- added[[kk]]
[17:46:20.178]                   NAME <- NAMES[[kk]]
[17:46:20.178]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.178]                     next
[17:46:20.178]                   args[[name]] <- ""
[17:46:20.178]                 }
[17:46:20.178]                 NAMES <- toupper(removed)
[17:46:20.178]                 for (kk in seq_along(NAMES)) {
[17:46:20.178]                   name <- removed[[kk]]
[17:46:20.178]                   NAME <- NAMES[[kk]]
[17:46:20.178]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.178]                     next
[17:46:20.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.178]                 }
[17:46:20.178]                 if (length(args) > 0) 
[17:46:20.178]                   base::do.call(base::Sys.setenv, args = args)
[17:46:20.178]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:20.178]             }
[17:46:20.178]             else {
[17:46:20.178]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:20.178]             }
[17:46:20.178]             {
[17:46:20.178]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:20.178]                   0L) {
[17:46:20.178]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:20.178]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:20.178]                   base::options(opts)
[17:46:20.178]                 }
[17:46:20.178]                 {
[17:46:20.178]                   {
[17:46:20.178]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:20.178]                     NULL
[17:46:20.178]                   }
[17:46:20.178]                   options(future.plan = NULL)
[17:46:20.178]                   if (is.na(NA_character_)) 
[17:46:20.178]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.178]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:20.178]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:20.178]                     .init = FALSE)
[17:46:20.178]                 }
[17:46:20.178]             }
[17:46:20.178]         }
[17:46:20.178]     })
[17:46:20.178]     if (TRUE) {
[17:46:20.178]         base::sink(type = "output", split = FALSE)
[17:46:20.178]         if (TRUE) {
[17:46:20.178]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:20.178]         }
[17:46:20.178]         else {
[17:46:20.178]             ...future.result["stdout"] <- base::list(NULL)
[17:46:20.178]         }
[17:46:20.178]         base::close(...future.stdout)
[17:46:20.178]         ...future.stdout <- NULL
[17:46:20.178]     }
[17:46:20.178]     ...future.result$conditions <- ...future.conditions
[17:46:20.178]     ...future.result$finished <- base::Sys.time()
[17:46:20.178]     ...future.result
[17:46:20.178] }
[17:46:20.230] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[17:46:20.230] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:46:20.231] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:46:20.231] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[17:46:20.231] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[17:46:20.231] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[17:46:20.276] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[17:46:20.276] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[17:46:20.320] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[17:46:20.320] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[17:46:20.321] MultisessionFuture started
[17:46:20.321] - Launch lazy future ... done
[17:46:20.321] run() for ‘MultisessionFuture’ ... done
[17:46:20.321] - run() ... done
[17:46:20.321] - resolved() ...
[17:46:20.332] - resolved: FALSE
[17:46:20.332] - resolved() ... done
[17:46:20.332] resolved() for ‘MultisessionFuture’ ... done
[17:46:20.332] resolved() for ‘Future’ ...
[17:46:20.332] - state: ‘created’
[17:46:20.332] - run: TRUE
[17:46:20.332] - run() ...
[17:46:20.332] run() for ‘Future’ ...
[17:46:20.332] - state: ‘created’
[17:46:20.333] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:20.347] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:20.347] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:20.347]   - Field: ‘node’
[17:46:20.347]   - Field: ‘label’
[17:46:20.347]   - Field: ‘local’
[17:46:20.347]   - Field: ‘owner’
[17:46:20.347]   - Field: ‘envir’
[17:46:20.347]   - Field: ‘workers’
[17:46:20.347]   - Field: ‘packages’
[17:46:20.348]   - Field: ‘gc’
[17:46:20.348]   - Field: ‘conditions’
[17:46:20.348]   - Field: ‘persistent’
[17:46:20.348]   - Field: ‘expr’
[17:46:20.348]   - Field: ‘uuid’
[17:46:20.348]   - Field: ‘seed’
[17:46:20.348]   - Field: ‘version’
[17:46:20.348]   - Field: ‘result’
[17:46:20.348]   - Field: ‘asynchronous’
[17:46:20.348]   - Field: ‘calls’
[17:46:20.348]   - Field: ‘globals’
[17:46:20.348]   - Field: ‘stdout’
[17:46:20.349]   - Field: ‘earlySignal’
[17:46:20.349]   - Field: ‘lazy’
[17:46:20.349]   - Field: ‘state’
[17:46:20.349] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:20.349] - Launch lazy future ...
[17:46:20.349] Packages needed by the future expression (n = 1): ‘future’
[17:46:20.349] Packages needed by future strategies (n = 0): <none>
[17:46:20.350] {
[17:46:20.350]     {
[17:46:20.350]         {
[17:46:20.350]             ...future.startTime <- base::Sys.time()
[17:46:20.350]             {
[17:46:20.350]                 {
[17:46:20.350]                   {
[17:46:20.350]                     {
[17:46:20.350]                       {
[17:46:20.350]                         base::local({
[17:46:20.350]                           has_future <- base::requireNamespace("future", 
[17:46:20.350]                             quietly = TRUE)
[17:46:20.350]                           if (has_future) {
[17:46:20.350]                             ns <- base::getNamespace("future")
[17:46:20.350]                             version <- ns[[".package"]][["version"]]
[17:46:20.350]                             if (is.null(version)) 
[17:46:20.350]                               version <- utils::packageVersion("future")
[17:46:20.350]                           }
[17:46:20.350]                           else {
[17:46:20.350]                             version <- NULL
[17:46:20.350]                           }
[17:46:20.350]                           if (!has_future || version < "1.8.0") {
[17:46:20.350]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:20.350]                               "", base::R.version$version.string), 
[17:46:20.350]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:20.350]                                 base::R.version$platform, 8 * 
[17:46:20.350]                                   base::.Machine$sizeof.pointer), 
[17:46:20.350]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:20.350]                                 "release", "version")], collapse = " "), 
[17:46:20.350]                               hostname = base::Sys.info()[["nodename"]])
[17:46:20.350]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:20.350]                               info)
[17:46:20.350]                             info <- base::paste(info, collapse = "; ")
[17:46:20.350]                             if (!has_future) {
[17:46:20.350]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:20.350]                                 info)
[17:46:20.350]                             }
[17:46:20.350]                             else {
[17:46:20.350]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:20.350]                                 info, version)
[17:46:20.350]                             }
[17:46:20.350]                             base::stop(msg)
[17:46:20.350]                           }
[17:46:20.350]                         })
[17:46:20.350]                       }
[17:46:20.350]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:20.350]                       base::options(mc.cores = 1L)
[17:46:20.350]                     }
[17:46:20.350]                     base::local({
[17:46:20.350]                       for (pkg in "future") {
[17:46:20.350]                         base::loadNamespace(pkg)
[17:46:20.350]                         base::library(pkg, character.only = TRUE)
[17:46:20.350]                       }
[17:46:20.350]                     })
[17:46:20.350]                   }
[17:46:20.350]                   ...future.strategy.old <- future::plan("list")
[17:46:20.350]                   options(future.plan = NULL)
[17:46:20.350]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.350]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:20.350]                 }
[17:46:20.350]                 ...future.workdir <- getwd()
[17:46:20.350]             }
[17:46:20.350]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:20.350]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:20.350]         }
[17:46:20.350]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:20.350]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:20.350]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:20.350]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:20.350]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:20.350]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:20.350]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:20.350]             base::names(...future.oldOptions))
[17:46:20.350]     }
[17:46:20.350]     if (FALSE) {
[17:46:20.350]     }
[17:46:20.350]     else {
[17:46:20.350]         if (TRUE) {
[17:46:20.350]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:20.350]                 open = "w")
[17:46:20.350]         }
[17:46:20.350]         else {
[17:46:20.350]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:20.350]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:20.350]         }
[17:46:20.350]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:20.350]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:20.350]             base::sink(type = "output", split = FALSE)
[17:46:20.350]             base::close(...future.stdout)
[17:46:20.350]         }, add = TRUE)
[17:46:20.350]     }
[17:46:20.350]     ...future.frame <- base::sys.nframe()
[17:46:20.350]     ...future.conditions <- base::list()
[17:46:20.350]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:20.350]     if (FALSE) {
[17:46:20.350]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:20.350]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:20.350]     }
[17:46:20.350]     ...future.result <- base::tryCatch({
[17:46:20.350]         base::withCallingHandlers({
[17:46:20.350]             ...future.value <- base::withVisible(base::local({
[17:46:20.350]                 ...future.makeSendCondition <- base::local({
[17:46:20.350]                   sendCondition <- NULL
[17:46:20.350]                   function(frame = 1L) {
[17:46:20.350]                     if (is.function(sendCondition)) 
[17:46:20.350]                       return(sendCondition)
[17:46:20.350]                     ns <- getNamespace("parallel")
[17:46:20.350]                     if (exists("sendData", mode = "function", 
[17:46:20.350]                       envir = ns)) {
[17:46:20.350]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:20.350]                         envir = ns)
[17:46:20.350]                       envir <- sys.frame(frame)
[17:46:20.350]                       master <- NULL
[17:46:20.350]                       while (!identical(envir, .GlobalEnv) && 
[17:46:20.350]                         !identical(envir, emptyenv())) {
[17:46:20.350]                         if (exists("master", mode = "list", envir = envir, 
[17:46:20.350]                           inherits = FALSE)) {
[17:46:20.350]                           master <- get("master", mode = "list", 
[17:46:20.350]                             envir = envir, inherits = FALSE)
[17:46:20.350]                           if (inherits(master, c("SOCKnode", 
[17:46:20.350]                             "SOCK0node"))) {
[17:46:20.350]                             sendCondition <<- function(cond) {
[17:46:20.350]                               data <- list(type = "VALUE", value = cond, 
[17:46:20.350]                                 success = TRUE)
[17:46:20.350]                               parallel_sendData(master, data)
[17:46:20.350]                             }
[17:46:20.350]                             return(sendCondition)
[17:46:20.350]                           }
[17:46:20.350]                         }
[17:46:20.350]                         frame <- frame + 1L
[17:46:20.350]                         envir <- sys.frame(frame)
[17:46:20.350]                       }
[17:46:20.350]                     }
[17:46:20.350]                     sendCondition <<- function(cond) NULL
[17:46:20.350]                   }
[17:46:20.350]                 })
[17:46:20.350]                 withCallingHandlers({
[17:46:20.350]                   {
[17:46:20.350]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:20.350]                       ii, n), appendLF = FALSE)
[17:46:20.350]                     fit <- mandelbrot(C)
[17:46:20.350]                     delay(fit)
[17:46:20.350]                     message(" done")
[17:46:20.350]                     fit
[17:46:20.350]                   }
[17:46:20.350]                 }, immediateCondition = function(cond) {
[17:46:20.350]                   sendCondition <- ...future.makeSendCondition()
[17:46:20.350]                   sendCondition(cond)
[17:46:20.350]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.350]                   {
[17:46:20.350]                     inherits <- base::inherits
[17:46:20.350]                     invokeRestart <- base::invokeRestart
[17:46:20.350]                     is.null <- base::is.null
[17:46:20.350]                     muffled <- FALSE
[17:46:20.350]                     if (inherits(cond, "message")) {
[17:46:20.350]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:20.350]                       if (muffled) 
[17:46:20.350]                         invokeRestart("muffleMessage")
[17:46:20.350]                     }
[17:46:20.350]                     else if (inherits(cond, "warning")) {
[17:46:20.350]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:20.350]                       if (muffled) 
[17:46:20.350]                         invokeRestart("muffleWarning")
[17:46:20.350]                     }
[17:46:20.350]                     else if (inherits(cond, "condition")) {
[17:46:20.350]                       if (!is.null(pattern)) {
[17:46:20.350]                         computeRestarts <- base::computeRestarts
[17:46:20.350]                         grepl <- base::grepl
[17:46:20.350]                         restarts <- computeRestarts(cond)
[17:46:20.350]                         for (restart in restarts) {
[17:46:20.350]                           name <- restart$name
[17:46:20.350]                           if (is.null(name)) 
[17:46:20.350]                             next
[17:46:20.350]                           if (!grepl(pattern, name)) 
[17:46:20.350]                             next
[17:46:20.350]                           invokeRestart(restart)
[17:46:20.350]                           muffled <- TRUE
[17:46:20.350]                           break
[17:46:20.350]                         }
[17:46:20.350]                       }
[17:46:20.350]                     }
[17:46:20.350]                     invisible(muffled)
[17:46:20.350]                   }
[17:46:20.350]                   muffleCondition(cond)
[17:46:20.350]                 })
[17:46:20.350]             }))
[17:46:20.350]             future::FutureResult(value = ...future.value$value, 
[17:46:20.350]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.350]                   ...future.rng), globalenv = if (FALSE) 
[17:46:20.350]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:20.350]                     ...future.globalenv.names))
[17:46:20.350]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:20.350]         }, condition = base::local({
[17:46:20.350]             c <- base::c
[17:46:20.350]             inherits <- base::inherits
[17:46:20.350]             invokeRestart <- base::invokeRestart
[17:46:20.350]             length <- base::length
[17:46:20.350]             list <- base::list
[17:46:20.350]             seq.int <- base::seq.int
[17:46:20.350]             signalCondition <- base::signalCondition
[17:46:20.350]             sys.calls <- base::sys.calls
[17:46:20.350]             `[[` <- base::`[[`
[17:46:20.350]             `+` <- base::`+`
[17:46:20.350]             `<<-` <- base::`<<-`
[17:46:20.350]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:20.350]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:20.350]                   3L)]
[17:46:20.350]             }
[17:46:20.350]             function(cond) {
[17:46:20.350]                 is_error <- inherits(cond, "error")
[17:46:20.350]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:20.350]                   NULL)
[17:46:20.350]                 if (is_error) {
[17:46:20.350]                   sessionInformation <- function() {
[17:46:20.350]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:20.350]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:20.350]                       search = base::search(), system = base::Sys.info())
[17:46:20.350]                   }
[17:46:20.350]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.350]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:20.350]                     cond$call), session = sessionInformation(), 
[17:46:20.350]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:20.350]                   signalCondition(cond)
[17:46:20.350]                 }
[17:46:20.350]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:20.350]                 "immediateCondition"))) {
[17:46:20.350]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:20.350]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.350]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:20.350]                   if (TRUE && !signal) {
[17:46:20.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.350]                     {
[17:46:20.350]                       inherits <- base::inherits
[17:46:20.350]                       invokeRestart <- base::invokeRestart
[17:46:20.350]                       is.null <- base::is.null
[17:46:20.350]                       muffled <- FALSE
[17:46:20.350]                       if (inherits(cond, "message")) {
[17:46:20.350]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.350]                         if (muffled) 
[17:46:20.350]                           invokeRestart("muffleMessage")
[17:46:20.350]                       }
[17:46:20.350]                       else if (inherits(cond, "warning")) {
[17:46:20.350]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.350]                         if (muffled) 
[17:46:20.350]                           invokeRestart("muffleWarning")
[17:46:20.350]                       }
[17:46:20.350]                       else if (inherits(cond, "condition")) {
[17:46:20.350]                         if (!is.null(pattern)) {
[17:46:20.350]                           computeRestarts <- base::computeRestarts
[17:46:20.350]                           grepl <- base::grepl
[17:46:20.350]                           restarts <- computeRestarts(cond)
[17:46:20.350]                           for (restart in restarts) {
[17:46:20.350]                             name <- restart$name
[17:46:20.350]                             if (is.null(name)) 
[17:46:20.350]                               next
[17:46:20.350]                             if (!grepl(pattern, name)) 
[17:46:20.350]                               next
[17:46:20.350]                             invokeRestart(restart)
[17:46:20.350]                             muffled <- TRUE
[17:46:20.350]                             break
[17:46:20.350]                           }
[17:46:20.350]                         }
[17:46:20.350]                       }
[17:46:20.350]                       invisible(muffled)
[17:46:20.350]                     }
[17:46:20.350]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.350]                   }
[17:46:20.350]                 }
[17:46:20.350]                 else {
[17:46:20.350]                   if (TRUE) {
[17:46:20.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.350]                     {
[17:46:20.350]                       inherits <- base::inherits
[17:46:20.350]                       invokeRestart <- base::invokeRestart
[17:46:20.350]                       is.null <- base::is.null
[17:46:20.350]                       muffled <- FALSE
[17:46:20.350]                       if (inherits(cond, "message")) {
[17:46:20.350]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.350]                         if (muffled) 
[17:46:20.350]                           invokeRestart("muffleMessage")
[17:46:20.350]                       }
[17:46:20.350]                       else if (inherits(cond, "warning")) {
[17:46:20.350]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.350]                         if (muffled) 
[17:46:20.350]                           invokeRestart("muffleWarning")
[17:46:20.350]                       }
[17:46:20.350]                       else if (inherits(cond, "condition")) {
[17:46:20.350]                         if (!is.null(pattern)) {
[17:46:20.350]                           computeRestarts <- base::computeRestarts
[17:46:20.350]                           grepl <- base::grepl
[17:46:20.350]                           restarts <- computeRestarts(cond)
[17:46:20.350]                           for (restart in restarts) {
[17:46:20.350]                             name <- restart$name
[17:46:20.350]                             if (is.null(name)) 
[17:46:20.350]                               next
[17:46:20.350]                             if (!grepl(pattern, name)) 
[17:46:20.350]                               next
[17:46:20.350]                             invokeRestart(restart)
[17:46:20.350]                             muffled <- TRUE
[17:46:20.350]                             break
[17:46:20.350]                           }
[17:46:20.350]                         }
[17:46:20.350]                       }
[17:46:20.350]                       invisible(muffled)
[17:46:20.350]                     }
[17:46:20.350]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.350]                   }
[17:46:20.350]                 }
[17:46:20.350]             }
[17:46:20.350]         }))
[17:46:20.350]     }, error = function(ex) {
[17:46:20.350]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:20.350]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.350]                 ...future.rng), started = ...future.startTime, 
[17:46:20.350]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:20.350]             version = "1.8"), class = "FutureResult")
[17:46:20.350]     }, finally = {
[17:46:20.350]         if (!identical(...future.workdir, getwd())) 
[17:46:20.350]             setwd(...future.workdir)
[17:46:20.350]         {
[17:46:20.350]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:20.350]                 ...future.oldOptions$nwarnings <- NULL
[17:46:20.350]             }
[17:46:20.350]             base::options(...future.oldOptions)
[17:46:20.350]             if (.Platform$OS.type == "windows") {
[17:46:20.350]                 old_names <- names(...future.oldEnvVars)
[17:46:20.350]                 envs <- base::Sys.getenv()
[17:46:20.350]                 names <- names(envs)
[17:46:20.350]                 common <- intersect(names, old_names)
[17:46:20.350]                 added <- setdiff(names, old_names)
[17:46:20.350]                 removed <- setdiff(old_names, names)
[17:46:20.350]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:20.350]                   envs[common]]
[17:46:20.350]                 NAMES <- toupper(changed)
[17:46:20.350]                 args <- list()
[17:46:20.350]                 for (kk in seq_along(NAMES)) {
[17:46:20.350]                   name <- changed[[kk]]
[17:46:20.350]                   NAME <- NAMES[[kk]]
[17:46:20.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.350]                     next
[17:46:20.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.350]                 }
[17:46:20.350]                 NAMES <- toupper(added)
[17:46:20.350]                 for (kk in seq_along(NAMES)) {
[17:46:20.350]                   name <- added[[kk]]
[17:46:20.350]                   NAME <- NAMES[[kk]]
[17:46:20.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.350]                     next
[17:46:20.350]                   args[[name]] <- ""
[17:46:20.350]                 }
[17:46:20.350]                 NAMES <- toupper(removed)
[17:46:20.350]                 for (kk in seq_along(NAMES)) {
[17:46:20.350]                   name <- removed[[kk]]
[17:46:20.350]                   NAME <- NAMES[[kk]]
[17:46:20.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.350]                     next
[17:46:20.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.350]                 }
[17:46:20.350]                 if (length(args) > 0) 
[17:46:20.350]                   base::do.call(base::Sys.setenv, args = args)
[17:46:20.350]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:20.350]             }
[17:46:20.350]             else {
[17:46:20.350]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:20.350]             }
[17:46:20.350]             {
[17:46:20.350]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:20.350]                   0L) {
[17:46:20.350]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:20.350]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:20.350]                   base::options(opts)
[17:46:20.350]                 }
[17:46:20.350]                 {
[17:46:20.350]                   {
[17:46:20.350]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:20.350]                     NULL
[17:46:20.350]                   }
[17:46:20.350]                   options(future.plan = NULL)
[17:46:20.350]                   if (is.na(NA_character_)) 
[17:46:20.350]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.350]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:20.350]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:20.350]                     .init = FALSE)
[17:46:20.350]                 }
[17:46:20.350]             }
[17:46:20.350]         }
[17:46:20.350]     })
[17:46:20.350]     if (TRUE) {
[17:46:20.350]         base::sink(type = "output", split = FALSE)
[17:46:20.350]         if (TRUE) {
[17:46:20.350]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:20.350]         }
[17:46:20.350]         else {
[17:46:20.350]             ...future.result["stdout"] <- base::list(NULL)
[17:46:20.350]         }
[17:46:20.350]         base::close(...future.stdout)
[17:46:20.350]         ...future.stdout <- NULL
[17:46:20.350]     }
[17:46:20.350]     ...future.result$conditions <- ...future.conditions
[17:46:20.350]     ...future.result$finished <- base::Sys.time()
[17:46:20.350]     ...future.result
[17:46:20.350] }
[17:46:20.352] Poll #1 (0): usedNodes() = 2, workers = 2
[17:46:20.371] receiveMessageFromWorker() for ClusterFuture ...
[17:46:20.371] - Validating connection of MultisessionFuture
[17:46:20.372] - received message: FutureResult
[17:46:20.372] - Received FutureResult
[17:46:20.372] - Erased future from FutureRegistry
[17:46:20.372] result() for ClusterFuture ...
[17:46:20.372] - result already collected: FutureResult
[17:46:20.372] result() for ClusterFuture ... done
[17:46:20.372] signalConditions() ...
[17:46:20.372]  - include = ‘immediateCondition’
[17:46:20.372]  - exclude = 
[17:46:20.372]  - resignal = FALSE
[17:46:20.373]  - Number of conditions: 2
[17:46:20.373] signalConditions() ... done
[17:46:20.373] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:20.373] result() for ClusterFuture ...
[17:46:20.373] - result already collected: FutureResult
[17:46:20.373] result() for ClusterFuture ... done
[17:46:20.373] result() for ClusterFuture ...
[17:46:20.373] - result already collected: FutureResult
[17:46:20.373] result() for ClusterFuture ... done
[17:46:20.373] signalConditions() ...
[17:46:20.373]  - include = ‘immediateCondition’
[17:46:20.373]  - exclude = 
[17:46:20.374]  - resignal = FALSE
[17:46:20.374]  - Number of conditions: 2
[17:46:20.374] signalConditions() ... done
[17:46:20.374] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[17:46:20.375] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:46:20.375] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:46:20.375] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[17:46:20.376] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[17:46:20.376] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[17:46:20.420] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[17:46:20.420] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[17:46:20.464] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[17:46:20.464] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[17:46:20.465] MultisessionFuture started
[17:46:20.465] - Launch lazy future ... done
[17:46:20.465] run() for ‘MultisessionFuture’ ... done
[17:46:20.465] - run() ... done
[17:46:20.466] - resolved() ...
[17:46:20.476] - resolved: FALSE
[17:46:20.476] - resolved() ... done
[17:46:20.476] resolved() for ‘MultisessionFuture’ ... done
[17:46:20.477] resolved() for ‘Future’ ...
[17:46:20.477] - state: ‘created’
[17:46:20.477] - run: TRUE
[17:46:20.477] - run() ...
[17:46:20.477] run() for ‘Future’ ...
[17:46:20.477] - state: ‘created’
[17:46:20.477] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:20.492] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:20.492] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:20.493]   - Field: ‘node’
[17:46:20.493]   - Field: ‘label’
[17:46:20.493]   - Field: ‘local’
[17:46:20.493]   - Field: ‘owner’
[17:46:20.493]   - Field: ‘envir’
[17:46:20.493]   - Field: ‘workers’
[17:46:20.493]   - Field: ‘packages’
[17:46:20.493]   - Field: ‘gc’
[17:46:20.493]   - Field: ‘conditions’
[17:46:20.493]   - Field: ‘persistent’
[17:46:20.494]   - Field: ‘expr’
[17:46:20.494]   - Field: ‘uuid’
[17:46:20.494]   - Field: ‘seed’
[17:46:20.494]   - Field: ‘version’
[17:46:20.494]   - Field: ‘result’
[17:46:20.494]   - Field: ‘asynchronous’
[17:46:20.494]   - Field: ‘calls’
[17:46:20.494]   - Field: ‘globals’
[17:46:20.494]   - Field: ‘stdout’
[17:46:20.494]   - Field: ‘earlySignal’
[17:46:20.494]   - Field: ‘lazy’
[17:46:20.495]   - Field: ‘state’
[17:46:20.495] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:20.495] - Launch lazy future ...
[17:46:20.495] Packages needed by the future expression (n = 1): ‘future’
[17:46:20.495] Packages needed by future strategies (n = 0): <none>
[17:46:20.496] {
[17:46:20.496]     {
[17:46:20.496]         {
[17:46:20.496]             ...future.startTime <- base::Sys.time()
[17:46:20.496]             {
[17:46:20.496]                 {
[17:46:20.496]                   {
[17:46:20.496]                     {
[17:46:20.496]                       {
[17:46:20.496]                         base::local({
[17:46:20.496]                           has_future <- base::requireNamespace("future", 
[17:46:20.496]                             quietly = TRUE)
[17:46:20.496]                           if (has_future) {
[17:46:20.496]                             ns <- base::getNamespace("future")
[17:46:20.496]                             version <- ns[[".package"]][["version"]]
[17:46:20.496]                             if (is.null(version)) 
[17:46:20.496]                               version <- utils::packageVersion("future")
[17:46:20.496]                           }
[17:46:20.496]                           else {
[17:46:20.496]                             version <- NULL
[17:46:20.496]                           }
[17:46:20.496]                           if (!has_future || version < "1.8.0") {
[17:46:20.496]                             info <- base::c(r_version = base::gsub("R version ", 
[17:46:20.496]                               "", base::R.version$version.string), 
[17:46:20.496]                               platform = base::sprintf("%s (%s-bit)", 
[17:46:20.496]                                 base::R.version$platform, 8 * 
[17:46:20.496]                                   base::.Machine$sizeof.pointer), 
[17:46:20.496]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:20.496]                                 "release", "version")], collapse = " "), 
[17:46:20.496]                               hostname = base::Sys.info()[["nodename"]])
[17:46:20.496]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:46:20.496]                               info)
[17:46:20.496]                             info <- base::paste(info, collapse = "; ")
[17:46:20.496]                             if (!has_future) {
[17:46:20.496]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:20.496]                                 info)
[17:46:20.496]                             }
[17:46:20.496]                             else {
[17:46:20.496]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:20.496]                                 info, version)
[17:46:20.496]                             }
[17:46:20.496]                             base::stop(msg)
[17:46:20.496]                           }
[17:46:20.496]                         })
[17:46:20.496]                       }
[17:46:20.496]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:20.496]                       base::options(mc.cores = 1L)
[17:46:20.496]                     }
[17:46:20.496]                     base::local({
[17:46:20.496]                       for (pkg in "future") {
[17:46:20.496]                         base::loadNamespace(pkg)
[17:46:20.496]                         base::library(pkg, character.only = TRUE)
[17:46:20.496]                       }
[17:46:20.496]                     })
[17:46:20.496]                   }
[17:46:20.496]                   ...future.strategy.old <- future::plan("list")
[17:46:20.496]                   options(future.plan = NULL)
[17:46:20.496]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.496]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:20.496]                 }
[17:46:20.496]                 ...future.workdir <- getwd()
[17:46:20.496]             }
[17:46:20.496]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:20.496]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:20.496]         }
[17:46:20.496]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:20.496]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:20.496]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:20.496]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:20.496]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:20.496]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:20.496]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:20.496]             base::names(...future.oldOptions))
[17:46:20.496]     }
[17:46:20.496]     if (FALSE) {
[17:46:20.496]     }
[17:46:20.496]     else {
[17:46:20.496]         if (TRUE) {
[17:46:20.496]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:20.496]                 open = "w")
[17:46:20.496]         }
[17:46:20.496]         else {
[17:46:20.496]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:20.496]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:20.496]         }
[17:46:20.496]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:20.496]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:20.496]             base::sink(type = "output", split = FALSE)
[17:46:20.496]             base::close(...future.stdout)
[17:46:20.496]         }, add = TRUE)
[17:46:20.496]     }
[17:46:20.496]     ...future.frame <- base::sys.nframe()
[17:46:20.496]     ...future.conditions <- base::list()
[17:46:20.496]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:20.496]     if (FALSE) {
[17:46:20.496]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:20.496]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:20.496]     }
[17:46:20.496]     ...future.result <- base::tryCatch({
[17:46:20.496]         base::withCallingHandlers({
[17:46:20.496]             ...future.value <- base::withVisible(base::local({
[17:46:20.496]                 ...future.makeSendCondition <- base::local({
[17:46:20.496]                   sendCondition <- NULL
[17:46:20.496]                   function(frame = 1L) {
[17:46:20.496]                     if (is.function(sendCondition)) 
[17:46:20.496]                       return(sendCondition)
[17:46:20.496]                     ns <- getNamespace("parallel")
[17:46:20.496]                     if (exists("sendData", mode = "function", 
[17:46:20.496]                       envir = ns)) {
[17:46:20.496]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:20.496]                         envir = ns)
[17:46:20.496]                       envir <- sys.frame(frame)
[17:46:20.496]                       master <- NULL
[17:46:20.496]                       while (!identical(envir, .GlobalEnv) && 
[17:46:20.496]                         !identical(envir, emptyenv())) {
[17:46:20.496]                         if (exists("master", mode = "list", envir = envir, 
[17:46:20.496]                           inherits = FALSE)) {
[17:46:20.496]                           master <- get("master", mode = "list", 
[17:46:20.496]                             envir = envir, inherits = FALSE)
[17:46:20.496]                           if (inherits(master, c("SOCKnode", 
[17:46:20.496]                             "SOCK0node"))) {
[17:46:20.496]                             sendCondition <<- function(cond) {
[17:46:20.496]                               data <- list(type = "VALUE", value = cond, 
[17:46:20.496]                                 success = TRUE)
[17:46:20.496]                               parallel_sendData(master, data)
[17:46:20.496]                             }
[17:46:20.496]                             return(sendCondition)
[17:46:20.496]                           }
[17:46:20.496]                         }
[17:46:20.496]                         frame <- frame + 1L
[17:46:20.496]                         envir <- sys.frame(frame)
[17:46:20.496]                       }
[17:46:20.496]                     }
[17:46:20.496]                     sendCondition <<- function(cond) NULL
[17:46:20.496]                   }
[17:46:20.496]                 })
[17:46:20.496]                 withCallingHandlers({
[17:46:20.496]                   {
[17:46:20.496]                     message(sprintf("Calculating tile #%d of %d ...", 
[17:46:20.496]                       ii, n), appendLF = FALSE)
[17:46:20.496]                     fit <- mandelbrot(C)
[17:46:20.496]                     delay(fit)
[17:46:20.496]                     message(" done")
[17:46:20.496]                     fit
[17:46:20.496]                   }
[17:46:20.496]                 }, immediateCondition = function(cond) {
[17:46:20.496]                   sendCondition <- ...future.makeSendCondition()
[17:46:20.496]                   sendCondition(cond)
[17:46:20.496]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.496]                   {
[17:46:20.496]                     inherits <- base::inherits
[17:46:20.496]                     invokeRestart <- base::invokeRestart
[17:46:20.496]                     is.null <- base::is.null
[17:46:20.496]                     muffled <- FALSE
[17:46:20.496]                     if (inherits(cond, "message")) {
[17:46:20.496]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:20.496]                       if (muffled) 
[17:46:20.496]                         invokeRestart("muffleMessage")
[17:46:20.496]                     }
[17:46:20.496]                     else if (inherits(cond, "warning")) {
[17:46:20.496]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:20.496]                       if (muffled) 
[17:46:20.496]                         invokeRestart("muffleWarning")
[17:46:20.496]                     }
[17:46:20.496]                     else if (inherits(cond, "condition")) {
[17:46:20.496]                       if (!is.null(pattern)) {
[17:46:20.496]                         computeRestarts <- base::computeRestarts
[17:46:20.496]                         grepl <- base::grepl
[17:46:20.496]                         restarts <- computeRestarts(cond)
[17:46:20.496]                         for (restart in restarts) {
[17:46:20.496]                           name <- restart$name
[17:46:20.496]                           if (is.null(name)) 
[17:46:20.496]                             next
[17:46:20.496]                           if (!grepl(pattern, name)) 
[17:46:20.496]                             next
[17:46:20.496]                           invokeRestart(restart)
[17:46:20.496]                           muffled <- TRUE
[17:46:20.496]                           break
[17:46:20.496]                         }
[17:46:20.496]                       }
[17:46:20.496]                     }
[17:46:20.496]                     invisible(muffled)
[17:46:20.496]                   }
[17:46:20.496]                   muffleCondition(cond)
[17:46:20.496]                 })
[17:46:20.496]             }))
[17:46:20.496]             future::FutureResult(value = ...future.value$value, 
[17:46:20.496]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.496]                   ...future.rng), globalenv = if (FALSE) 
[17:46:20.496]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:20.496]                     ...future.globalenv.names))
[17:46:20.496]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:20.496]         }, condition = base::local({
[17:46:20.496]             c <- base::c
[17:46:20.496]             inherits <- base::inherits
[17:46:20.496]             invokeRestart <- base::invokeRestart
[17:46:20.496]             length <- base::length
[17:46:20.496]             list <- base::list
[17:46:20.496]             seq.int <- base::seq.int
[17:46:20.496]             signalCondition <- base::signalCondition
[17:46:20.496]             sys.calls <- base::sys.calls
[17:46:20.496]             `[[` <- base::`[[`
[17:46:20.496]             `+` <- base::`+`
[17:46:20.496]             `<<-` <- base::`<<-`
[17:46:20.496]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:20.496]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:20.496]                   3L)]
[17:46:20.496]             }
[17:46:20.496]             function(cond) {
[17:46:20.496]                 is_error <- inherits(cond, "error")
[17:46:20.496]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:20.496]                   NULL)
[17:46:20.496]                 if (is_error) {
[17:46:20.496]                   sessionInformation <- function() {
[17:46:20.496]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:20.496]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:20.496]                       search = base::search(), system = base::Sys.info())
[17:46:20.496]                   }
[17:46:20.496]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.496]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:20.496]                     cond$call), session = sessionInformation(), 
[17:46:20.496]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:20.496]                   signalCondition(cond)
[17:46:20.496]                 }
[17:46:20.496]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:20.496]                 "immediateCondition"))) {
[17:46:20.496]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:20.496]                   ...future.conditions[[length(...future.conditions) + 
[17:46:20.496]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:20.496]                   if (TRUE && !signal) {
[17:46:20.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.496]                     {
[17:46:20.496]                       inherits <- base::inherits
[17:46:20.496]                       invokeRestart <- base::invokeRestart
[17:46:20.496]                       is.null <- base::is.null
[17:46:20.496]                       muffled <- FALSE
[17:46:20.496]                       if (inherits(cond, "message")) {
[17:46:20.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.496]                         if (muffled) 
[17:46:20.496]                           invokeRestart("muffleMessage")
[17:46:20.496]                       }
[17:46:20.496]                       else if (inherits(cond, "warning")) {
[17:46:20.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.496]                         if (muffled) 
[17:46:20.496]                           invokeRestart("muffleWarning")
[17:46:20.496]                       }
[17:46:20.496]                       else if (inherits(cond, "condition")) {
[17:46:20.496]                         if (!is.null(pattern)) {
[17:46:20.496]                           computeRestarts <- base::computeRestarts
[17:46:20.496]                           grepl <- base::grepl
[17:46:20.496]                           restarts <- computeRestarts(cond)
[17:46:20.496]                           for (restart in restarts) {
[17:46:20.496]                             name <- restart$name
[17:46:20.496]                             if (is.null(name)) 
[17:46:20.496]                               next
[17:46:20.496]                             if (!grepl(pattern, name)) 
[17:46:20.496]                               next
[17:46:20.496]                             invokeRestart(restart)
[17:46:20.496]                             muffled <- TRUE
[17:46:20.496]                             break
[17:46:20.496]                           }
[17:46:20.496]                         }
[17:46:20.496]                       }
[17:46:20.496]                       invisible(muffled)
[17:46:20.496]                     }
[17:46:20.496]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.496]                   }
[17:46:20.496]                 }
[17:46:20.496]                 else {
[17:46:20.496]                   if (TRUE) {
[17:46:20.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:20.496]                     {
[17:46:20.496]                       inherits <- base::inherits
[17:46:20.496]                       invokeRestart <- base::invokeRestart
[17:46:20.496]                       is.null <- base::is.null
[17:46:20.496]                       muffled <- FALSE
[17:46:20.496]                       if (inherits(cond, "message")) {
[17:46:20.496]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:20.496]                         if (muffled) 
[17:46:20.496]                           invokeRestart("muffleMessage")
[17:46:20.496]                       }
[17:46:20.496]                       else if (inherits(cond, "warning")) {
[17:46:20.496]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:20.496]                         if (muffled) 
[17:46:20.496]                           invokeRestart("muffleWarning")
[17:46:20.496]                       }
[17:46:20.496]                       else if (inherits(cond, "condition")) {
[17:46:20.496]                         if (!is.null(pattern)) {
[17:46:20.496]                           computeRestarts <- base::computeRestarts
[17:46:20.496]                           grepl <- base::grepl
[17:46:20.496]                           restarts <- computeRestarts(cond)
[17:46:20.496]                           for (restart in restarts) {
[17:46:20.496]                             name <- restart$name
[17:46:20.496]                             if (is.null(name)) 
[17:46:20.496]                               next
[17:46:20.496]                             if (!grepl(pattern, name)) 
[17:46:20.496]                               next
[17:46:20.496]                             invokeRestart(restart)
[17:46:20.496]                             muffled <- TRUE
[17:46:20.496]                             break
[17:46:20.496]                           }
[17:46:20.496]                         }
[17:46:20.496]                       }
[17:46:20.496]                       invisible(muffled)
[17:46:20.496]                     }
[17:46:20.496]                     muffleCondition(cond, pattern = "^muffle")
[17:46:20.496]                   }
[17:46:20.496]                 }
[17:46:20.496]             }
[17:46:20.496]         }))
[17:46:20.496]     }, error = function(ex) {
[17:46:20.496]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:20.496]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:20.496]                 ...future.rng), started = ...future.startTime, 
[17:46:20.496]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:20.496]             version = "1.8"), class = "FutureResult")
[17:46:20.496]     }, finally = {
[17:46:20.496]         if (!identical(...future.workdir, getwd())) 
[17:46:20.496]             setwd(...future.workdir)
[17:46:20.496]         {
[17:46:20.496]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:20.496]                 ...future.oldOptions$nwarnings <- NULL
[17:46:20.496]             }
[17:46:20.496]             base::options(...future.oldOptions)
[17:46:20.496]             if (.Platform$OS.type == "windows") {
[17:46:20.496]                 old_names <- names(...future.oldEnvVars)
[17:46:20.496]                 envs <- base::Sys.getenv()
[17:46:20.496]                 names <- names(envs)
[17:46:20.496]                 common <- intersect(names, old_names)
[17:46:20.496]                 added <- setdiff(names, old_names)
[17:46:20.496]                 removed <- setdiff(old_names, names)
[17:46:20.496]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:20.496]                   envs[common]]
[17:46:20.496]                 NAMES <- toupper(changed)
[17:46:20.496]                 args <- list()
[17:46:20.496]                 for (kk in seq_along(NAMES)) {
[17:46:20.496]                   name <- changed[[kk]]
[17:46:20.496]                   NAME <- NAMES[[kk]]
[17:46:20.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.496]                     next
[17:46:20.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.496]                 }
[17:46:20.496]                 NAMES <- toupper(added)
[17:46:20.496]                 for (kk in seq_along(NAMES)) {
[17:46:20.496]                   name <- added[[kk]]
[17:46:20.496]                   NAME <- NAMES[[kk]]
[17:46:20.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.496]                     next
[17:46:20.496]                   args[[name]] <- ""
[17:46:20.496]                 }
[17:46:20.496]                 NAMES <- toupper(removed)
[17:46:20.496]                 for (kk in seq_along(NAMES)) {
[17:46:20.496]                   name <- removed[[kk]]
[17:46:20.496]                   NAME <- NAMES[[kk]]
[17:46:20.496]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:20.496]                     next
[17:46:20.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:20.496]                 }
[17:46:20.496]                 if (length(args) > 0) 
[17:46:20.496]                   base::do.call(base::Sys.setenv, args = args)
[17:46:20.496]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:20.496]             }
[17:46:20.496]             else {
[17:46:20.496]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:20.496]             }
[17:46:20.496]             {
[17:46:20.496]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:20.496]                   0L) {
[17:46:20.496]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:20.496]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:20.496]                   base::options(opts)
[17:46:20.496]                 }
[17:46:20.496]                 {
[17:46:20.496]                   {
[17:46:20.496]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:20.496]                     NULL
[17:46:20.496]                   }
[17:46:20.496]                   options(future.plan = NULL)
[17:46:20.496]                   if (is.na(NA_character_)) 
[17:46:20.496]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:20.496]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:20.496]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:20.496]                     .init = FALSE)
[17:46:20.496]                 }
[17:46:20.496]             }
[17:46:20.496]         }
[17:46:20.496]     })
[17:46:20.496]     if (TRUE) {
[17:46:20.496]         base::sink(type = "output", split = FALSE)
[17:46:20.496]         if (TRUE) {
[17:46:20.496]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:20.496]         }
[17:46:20.496]         else {
[17:46:20.496]             ...future.result["stdout"] <- base::list(NULL)
[17:46:20.496]         }
[17:46:20.496]         base::close(...future.stdout)
[17:46:20.496]         ...future.stdout <- NULL
[17:46:20.496]     }
[17:46:20.496]     ...future.result$conditions <- ...future.conditions
[17:46:20.496]     ...future.result$finished <- base::Sys.time()
[17:46:20.496]     ...future.result
[17:46:20.496] }
[17:46:20.498] Poll #1 (0): usedNodes() = 2, workers = 2
[17:46:20.509] receiveMessageFromWorker() for ClusterFuture ...
[17:46:20.509] - Validating connection of MultisessionFuture
[17:46:20.509] - received message: FutureResult
[17:46:20.509] - Received FutureResult
[17:46:20.509] - Erased future from FutureRegistry
[17:46:20.510] result() for ClusterFuture ...
[17:46:20.510] - result already collected: FutureResult
[17:46:20.510] result() for ClusterFuture ... done
[17:46:20.510] signalConditions() ...
[17:46:20.510]  - include = ‘immediateCondition’
[17:46:20.510]  - exclude = 
[17:46:20.510]  - resignal = FALSE
[17:46:20.510]  - Number of conditions: 2
[17:46:20.510] signalConditions() ... done
[17:46:20.510] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:20.510] result() for ClusterFuture ...
[17:46:20.511] - result already collected: FutureResult
[17:46:20.511] result() for ClusterFuture ... done
[17:46:20.511] result() for ClusterFuture ...
[17:46:20.511] - result already collected: FutureResult
[17:46:20.511] result() for ClusterFuture ... done
[17:46:20.511] signalConditions() ...
[17:46:20.511]  - include = ‘immediateCondition’
[17:46:20.511]  - exclude = 
[17:46:20.511]  - resignal = FALSE
[17:46:20.511]  - Number of conditions: 2
[17:46:20.511] signalConditions() ... done
[17:46:20.512] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[17:46:20.513] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:46:20.513] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:46:20.513] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[17:46:20.514] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[17:46:20.514] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[17:46:20.556] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[17:46:20.556] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[17:46:20.600] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[17:46:20.600] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[17:46:20.601] MultisessionFuture started
[17:46:20.601] - Launch lazy future ... done
[17:46:20.601] run() for ‘MultisessionFuture’ ... done
[17:46:20.601] - run() ... done
[17:46:20.601] - resolved() ...
[17:46:20.612] - resolved: FALSE
[17:46:20.612] - resolved() ... done
[17:46:20.612] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[17:46:20.612] result() for ClusterFuture ...
[17:46:20.612] - result already collected: FutureResult
[17:46:20.612] result() for ClusterFuture ... done
[17:46:20.613] result() for ClusterFuture ...
[17:46:20.613] - result already collected: FutureResult
[17:46:20.613] result() for ClusterFuture ... done
[17:46:20.613] signalConditions() ...
[17:46:20.613]  - include = ‘immediateCondition’
[17:46:20.613]  - exclude = 
[17:46:20.613]  - resignal = FALSE
[17:46:20.613]  - Number of conditions: 2
[17:46:20.613] signalConditions() ... done
[17:46:20.614] Future state: ‘finished’
[17:46:20.614] result() for ClusterFuture ...
[17:46:20.614] - result already collected: FutureResult
[17:46:20.614] result() for ClusterFuture ... done
[17:46:20.614] signalConditions() ...
[17:46:20.614]  - include = ‘condition’
[17:46:20.614]  - exclude = ‘immediateCondition’
[17:46:20.614]  - resignal = TRUE
[17:46:20.614]  - Number of conditions: 2
[17:46:20.614]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[17:46:20.614]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:20.615] signalConditions() ... done
Plotting tile #2 of 4 ...
[17:46:20.615] result() for ClusterFuture ...
[17:46:20.615] - result already collected: FutureResult
[17:46:20.616] result() for ClusterFuture ... done
[17:46:20.616] result() for ClusterFuture ...
[17:46:20.616] - result already collected: FutureResult
[17:46:20.616] result() for ClusterFuture ... done
[17:46:20.616] signalConditions() ...
[17:46:20.616]  - include = ‘immediateCondition’
[17:46:20.616]  - exclude = 
[17:46:20.616]  - resignal = FALSE
[17:46:20.616]  - Number of conditions: 2
[17:46:20.616] signalConditions() ... done
[17:46:20.616] Future state: ‘finished’
[17:46:20.617] result() for ClusterFuture ...
[17:46:20.617] - result already collected: FutureResult
[17:46:20.617] result() for ClusterFuture ... done
[17:46:20.617] signalConditions() ...
[17:46:20.617]  - include = ‘condition’
[17:46:20.617]  - exclude = ‘immediateCondition’
[17:46:20.617]  - resignal = TRUE
[17:46:20.617]  - Number of conditions: 2
[17:46:20.617]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[17:46:20.617]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:20.618] signalConditions() ... done
[17:46:20.619] receiveMessageFromWorker() for ClusterFuture ...
[17:46:20.619] - Validating connection of MultisessionFuture
[17:46:20.619] - received message: FutureResult
[17:46:20.619] - Received FutureResult
[17:46:20.619] - Erased future from FutureRegistry
[17:46:20.619] result() for ClusterFuture ...
[17:46:20.620] - result already collected: FutureResult
[17:46:20.620] result() for ClusterFuture ... done
[17:46:20.620] signalConditions() ...
[17:46:20.620]  - include = ‘immediateCondition’
[17:46:20.620]  - exclude = 
[17:46:20.620]  - resignal = FALSE
[17:46:20.620]  - Number of conditions: 2
[17:46:20.620] signalConditions() ... done
[17:46:20.620] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[17:46:20.620] result() for ClusterFuture ...
[17:46:20.620] - result already collected: FutureResult
[17:46:20.621] result() for ClusterFuture ... done
[17:46:20.621] result() for ClusterFuture ...
[17:46:20.621] - result already collected: FutureResult
[17:46:20.621] result() for ClusterFuture ... done
[17:46:20.623] signalConditions() ...
[17:46:20.623]  - include = ‘immediateCondition’
[17:46:20.623]  - exclude = 
[17:46:20.624]  - resignal = FALSE
[17:46:20.624]  - Number of conditions: 2
[17:46:20.624] signalConditions() ... done
[17:46:20.624] Future state: ‘finished’
[17:46:20.624] result() for ClusterFuture ...
[17:46:20.624] - result already collected: FutureResult
[17:46:20.624] result() for ClusterFuture ... done
[17:46:20.624] signalConditions() ...
[17:46:20.624]  - include = ‘condition’
[17:46:20.624]  - exclude = ‘immediateCondition’
[17:46:20.624]  - resignal = TRUE
[17:46:20.625]  - Number of conditions: 2
[17:46:20.625]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[17:46:20.625]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:20.625] signalConditions() ... done
[17:46:20.660] receiveMessageFromWorker() for ClusterFuture ...
[17:46:20.660] - Validating connection of MultisessionFuture
[17:46:20.661] - received message: FutureResult
[17:46:20.661] - Received FutureResult
[17:46:20.661] - Erased future from FutureRegistry
[17:46:20.661] result() for ClusterFuture ...
[17:46:20.661] - result already collected: FutureResult
[17:46:20.661] result() for ClusterFuture ... done
[17:46:20.662] signalConditions() ...
[17:46:20.662]  - include = ‘immediateCondition’
[17:46:20.662]  - exclude = 
[17:46:20.662]  - resignal = FALSE
[17:46:20.662]  - Number of conditions: 2
[17:46:20.662] signalConditions() ... done
[17:46:20.662] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[17:46:20.662] result() for ClusterFuture ...
[17:46:20.662] - result already collected: FutureResult
[17:46:20.662] result() for ClusterFuture ... done
[17:46:20.662] result() for ClusterFuture ...
[17:46:20.663] - result already collected: FutureResult
[17:46:20.663] result() for ClusterFuture ... done
[17:46:20.663] signalConditions() ...
[17:46:20.663]  - include = ‘immediateCondition’
[17:46:20.663]  - exclude = 
[17:46:20.663]  - resignal = FALSE
[17:46:20.663]  - Number of conditions: 2
[17:46:20.663] signalConditions() ... done
[17:46:20.663] Future state: ‘finished’
[17:46:20.663] result() for ClusterFuture ...
[17:46:20.663] - result already collected: FutureResult
[17:46:20.664] result() for ClusterFuture ... done
[17:46:20.664] signalConditions() ...
[17:46:20.664]  - include = ‘condition’
[17:46:20.664]  - exclude = ‘immediateCondition’
[17:46:20.664]  - resignal = TRUE
[17:46:20.664]  - Number of conditions: 2
[17:46:20.664]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[17:46:20.664]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[17:46:20.664] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[17:46:20.666] plan(): Setting new future strategy stack:
[17:46:20.666] List of future strategies:
[17:46:20.666] 1. sequential:
[17:46:20.666]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:20.666]    - tweaked: FALSE
[17:46:20.666]    - call: future::plan("sequential")
[17:46:20.667] plan(): nbrOfWorkers() = 1
> 
