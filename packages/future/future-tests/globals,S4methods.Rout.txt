
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:45.342] plan(): Setting new future strategy stack:
[17:02:45.343] List of future strategies:
[17:02:45.343] 1. sequential:
[17:02:45.343]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.343]    - tweaked: FALSE
[17:02:45.343]    - call: future::plan("sequential")
[17:02:45.354] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[17:02:45.389] plan(): Setting new future strategy stack:
[17:02:45.389] List of future strategies:
[17:02:45.389] 1. sequential:
[17:02:45.389]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.389]    - tweaked: FALSE
[17:02:45.389]    - call: plan(strategy)
[17:02:45.402] plan(): nbrOfWorkers() = 1
[17:02:45.403] getGlobalsAndPackages() ...
[17:02:45.403] Searching for globals...
[17:02:45.409] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:02:45.409] Searching for globals ... DONE
[17:02:45.409] Resolving globals: FALSE
[17:02:45.410] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:02:45.411] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:02:45.411] - globals: [1] ‘my_fcn’
[17:02:45.411] 
[17:02:45.411] getGlobalsAndPackages() ... DONE
[17:02:45.412] run() for ‘Future’ ...
[17:02:45.412] - state: ‘created’
[17:02:45.412] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:45.413] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:45.413] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:45.413]   - Field: ‘label’
[17:02:45.413]   - Field: ‘local’
[17:02:45.413]   - Field: ‘owner’
[17:02:45.413]   - Field: ‘envir’
[17:02:45.413]   - Field: ‘packages’
[17:02:45.413]   - Field: ‘gc’
[17:02:45.414]   - Field: ‘conditions’
[17:02:45.414]   - Field: ‘expr’
[17:02:45.414]   - Field: ‘uuid’
[17:02:45.414]   - Field: ‘seed’
[17:02:45.414]   - Field: ‘version’
[17:02:45.414]   - Field: ‘result’
[17:02:45.414]   - Field: ‘asynchronous’
[17:02:45.414]   - Field: ‘calls’
[17:02:45.414]   - Field: ‘globals’
[17:02:45.414]   - Field: ‘stdout’
[17:02:45.414]   - Field: ‘earlySignal’
[17:02:45.414]   - Field: ‘lazy’
[17:02:45.415]   - Field: ‘state’
[17:02:45.415] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:45.415] - Launch lazy future ...
[17:02:45.415] Packages needed by the future expression (n = 0): <none>
[17:02:45.416] Packages needed by future strategies (n = 0): <none>
[17:02:45.416] {
[17:02:45.416]     {
[17:02:45.416]         {
[17:02:45.416]             ...future.startTime <- base::Sys.time()
[17:02:45.416]             {
[17:02:45.416]                 {
[17:02:45.416]                   {
[17:02:45.416]                     base::local({
[17:02:45.416]                       has_future <- base::requireNamespace("future", 
[17:02:45.416]                         quietly = TRUE)
[17:02:45.416]                       if (has_future) {
[17:02:45.416]                         ns <- base::getNamespace("future")
[17:02:45.416]                         version <- ns[[".package"]][["version"]]
[17:02:45.416]                         if (is.null(version)) 
[17:02:45.416]                           version <- utils::packageVersion("future")
[17:02:45.416]                       }
[17:02:45.416]                       else {
[17:02:45.416]                         version <- NULL
[17:02:45.416]                       }
[17:02:45.416]                       if (!has_future || version < "1.8.0") {
[17:02:45.416]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:45.416]                           "", base::R.version$version.string), 
[17:02:45.416]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:45.416]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:45.416]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:45.416]                             "release", "version")], collapse = " "), 
[17:02:45.416]                           hostname = base::Sys.info()[["nodename"]])
[17:02:45.416]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:45.416]                           info)
[17:02:45.416]                         info <- base::paste(info, collapse = "; ")
[17:02:45.416]                         if (!has_future) {
[17:02:45.416]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:45.416]                             info)
[17:02:45.416]                         }
[17:02:45.416]                         else {
[17:02:45.416]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:45.416]                             info, version)
[17:02:45.416]                         }
[17:02:45.416]                         base::stop(msg)
[17:02:45.416]                       }
[17:02:45.416]                     })
[17:02:45.416]                   }
[17:02:45.416]                   ...future.strategy.old <- future::plan("list")
[17:02:45.416]                   options(future.plan = NULL)
[17:02:45.416]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.416]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:45.416]                 }
[17:02:45.416]                 ...future.workdir <- getwd()
[17:02:45.416]             }
[17:02:45.416]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:45.416]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:45.416]         }
[17:02:45.416]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:45.416]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:45.416]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:45.416]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:45.416]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:45.416]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:45.416]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:45.416]             base::names(...future.oldOptions))
[17:02:45.416]     }
[17:02:45.416]     if (FALSE) {
[17:02:45.416]     }
[17:02:45.416]     else {
[17:02:45.416]         if (TRUE) {
[17:02:45.416]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:45.416]                 open = "w")
[17:02:45.416]         }
[17:02:45.416]         else {
[17:02:45.416]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:45.416]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:45.416]         }
[17:02:45.416]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:45.416]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:45.416]             base::sink(type = "output", split = FALSE)
[17:02:45.416]             base::close(...future.stdout)
[17:02:45.416]         }, add = TRUE)
[17:02:45.416]     }
[17:02:45.416]     ...future.frame <- base::sys.nframe()
[17:02:45.416]     ...future.conditions <- base::list()
[17:02:45.416]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:45.416]     if (FALSE) {
[17:02:45.416]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:45.416]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:45.416]     }
[17:02:45.416]     ...future.result <- base::tryCatch({
[17:02:45.416]         base::withCallingHandlers({
[17:02:45.416]             ...future.value <- base::withVisible(base::local({
[17:02:45.416]                 my_fcn
[17:02:45.416]             }))
[17:02:45.416]             future::FutureResult(value = ...future.value$value, 
[17:02:45.416]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.416]                   ...future.rng), globalenv = if (FALSE) 
[17:02:45.416]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:45.416]                     ...future.globalenv.names))
[17:02:45.416]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:45.416]         }, condition = base::local({
[17:02:45.416]             c <- base::c
[17:02:45.416]             inherits <- base::inherits
[17:02:45.416]             invokeRestart <- base::invokeRestart
[17:02:45.416]             length <- base::length
[17:02:45.416]             list <- base::list
[17:02:45.416]             seq.int <- base::seq.int
[17:02:45.416]             signalCondition <- base::signalCondition
[17:02:45.416]             sys.calls <- base::sys.calls
[17:02:45.416]             `[[` <- base::`[[`
[17:02:45.416]             `+` <- base::`+`
[17:02:45.416]             `<<-` <- base::`<<-`
[17:02:45.416]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:45.416]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:45.416]                   3L)]
[17:02:45.416]             }
[17:02:45.416]             function(cond) {
[17:02:45.416]                 is_error <- inherits(cond, "error")
[17:02:45.416]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:45.416]                   NULL)
[17:02:45.416]                 if (is_error) {
[17:02:45.416]                   sessionInformation <- function() {
[17:02:45.416]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:45.416]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:45.416]                       search = base::search(), system = base::Sys.info())
[17:02:45.416]                   }
[17:02:45.416]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.416]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:45.416]                     cond$call), session = sessionInformation(), 
[17:02:45.416]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:45.416]                   signalCondition(cond)
[17:02:45.416]                 }
[17:02:45.416]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:45.416]                 "immediateCondition"))) {
[17:02:45.416]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:45.416]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.416]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:45.416]                   if (TRUE && !signal) {
[17:02:45.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.416]                     {
[17:02:45.416]                       inherits <- base::inherits
[17:02:45.416]                       invokeRestart <- base::invokeRestart
[17:02:45.416]                       is.null <- base::is.null
[17:02:45.416]                       muffled <- FALSE
[17:02:45.416]                       if (inherits(cond, "message")) {
[17:02:45.416]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.416]                         if (muffled) 
[17:02:45.416]                           invokeRestart("muffleMessage")
[17:02:45.416]                       }
[17:02:45.416]                       else if (inherits(cond, "warning")) {
[17:02:45.416]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.416]                         if (muffled) 
[17:02:45.416]                           invokeRestart("muffleWarning")
[17:02:45.416]                       }
[17:02:45.416]                       else if (inherits(cond, "condition")) {
[17:02:45.416]                         if (!is.null(pattern)) {
[17:02:45.416]                           computeRestarts <- base::computeRestarts
[17:02:45.416]                           grepl <- base::grepl
[17:02:45.416]                           restarts <- computeRestarts(cond)
[17:02:45.416]                           for (restart in restarts) {
[17:02:45.416]                             name <- restart$name
[17:02:45.416]                             if (is.null(name)) 
[17:02:45.416]                               next
[17:02:45.416]                             if (!grepl(pattern, name)) 
[17:02:45.416]                               next
[17:02:45.416]                             invokeRestart(restart)
[17:02:45.416]                             muffled <- TRUE
[17:02:45.416]                             break
[17:02:45.416]                           }
[17:02:45.416]                         }
[17:02:45.416]                       }
[17:02:45.416]                       invisible(muffled)
[17:02:45.416]                     }
[17:02:45.416]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.416]                   }
[17:02:45.416]                 }
[17:02:45.416]                 else {
[17:02:45.416]                   if (TRUE) {
[17:02:45.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.416]                     {
[17:02:45.416]                       inherits <- base::inherits
[17:02:45.416]                       invokeRestart <- base::invokeRestart
[17:02:45.416]                       is.null <- base::is.null
[17:02:45.416]                       muffled <- FALSE
[17:02:45.416]                       if (inherits(cond, "message")) {
[17:02:45.416]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.416]                         if (muffled) 
[17:02:45.416]                           invokeRestart("muffleMessage")
[17:02:45.416]                       }
[17:02:45.416]                       else if (inherits(cond, "warning")) {
[17:02:45.416]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.416]                         if (muffled) 
[17:02:45.416]                           invokeRestart("muffleWarning")
[17:02:45.416]                       }
[17:02:45.416]                       else if (inherits(cond, "condition")) {
[17:02:45.416]                         if (!is.null(pattern)) {
[17:02:45.416]                           computeRestarts <- base::computeRestarts
[17:02:45.416]                           grepl <- base::grepl
[17:02:45.416]                           restarts <- computeRestarts(cond)
[17:02:45.416]                           for (restart in restarts) {
[17:02:45.416]                             name <- restart$name
[17:02:45.416]                             if (is.null(name)) 
[17:02:45.416]                               next
[17:02:45.416]                             if (!grepl(pattern, name)) 
[17:02:45.416]                               next
[17:02:45.416]                             invokeRestart(restart)
[17:02:45.416]                             muffled <- TRUE
[17:02:45.416]                             break
[17:02:45.416]                           }
[17:02:45.416]                         }
[17:02:45.416]                       }
[17:02:45.416]                       invisible(muffled)
[17:02:45.416]                     }
[17:02:45.416]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.416]                   }
[17:02:45.416]                 }
[17:02:45.416]             }
[17:02:45.416]         }))
[17:02:45.416]     }, error = function(ex) {
[17:02:45.416]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:45.416]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.416]                 ...future.rng), started = ...future.startTime, 
[17:02:45.416]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:45.416]             version = "1.8"), class = "FutureResult")
[17:02:45.416]     }, finally = {
[17:02:45.416]         if (!identical(...future.workdir, getwd())) 
[17:02:45.416]             setwd(...future.workdir)
[17:02:45.416]         {
[17:02:45.416]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:45.416]                 ...future.oldOptions$nwarnings <- NULL
[17:02:45.416]             }
[17:02:45.416]             base::options(...future.oldOptions)
[17:02:45.416]             if (.Platform$OS.type == "windows") {
[17:02:45.416]                 old_names <- names(...future.oldEnvVars)
[17:02:45.416]                 envs <- base::Sys.getenv()
[17:02:45.416]                 names <- names(envs)
[17:02:45.416]                 common <- intersect(names, old_names)
[17:02:45.416]                 added <- setdiff(names, old_names)
[17:02:45.416]                 removed <- setdiff(old_names, names)
[17:02:45.416]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:45.416]                   envs[common]]
[17:02:45.416]                 NAMES <- toupper(changed)
[17:02:45.416]                 args <- list()
[17:02:45.416]                 for (kk in seq_along(NAMES)) {
[17:02:45.416]                   name <- changed[[kk]]
[17:02:45.416]                   NAME <- NAMES[[kk]]
[17:02:45.416]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.416]                     next
[17:02:45.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.416]                 }
[17:02:45.416]                 NAMES <- toupper(added)
[17:02:45.416]                 for (kk in seq_along(NAMES)) {
[17:02:45.416]                   name <- added[[kk]]
[17:02:45.416]                   NAME <- NAMES[[kk]]
[17:02:45.416]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.416]                     next
[17:02:45.416]                   args[[name]] <- ""
[17:02:45.416]                 }
[17:02:45.416]                 NAMES <- toupper(removed)
[17:02:45.416]                 for (kk in seq_along(NAMES)) {
[17:02:45.416]                   name <- removed[[kk]]
[17:02:45.416]                   NAME <- NAMES[[kk]]
[17:02:45.416]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.416]                     next
[17:02:45.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.416]                 }
[17:02:45.416]                 if (length(args) > 0) 
[17:02:45.416]                   base::do.call(base::Sys.setenv, args = args)
[17:02:45.416]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:45.416]             }
[17:02:45.416]             else {
[17:02:45.416]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:45.416]             }
[17:02:45.416]             {
[17:02:45.416]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:45.416]                   0L) {
[17:02:45.416]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:45.416]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:45.416]                   base::options(opts)
[17:02:45.416]                 }
[17:02:45.416]                 {
[17:02:45.416]                   {
[17:02:45.416]                     NULL
[17:02:45.416]                     RNGkind("Mersenne-Twister")
[17:02:45.416]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:45.416]                       inherits = FALSE)
[17:02:45.416]                   }
[17:02:45.416]                   options(future.plan = NULL)
[17:02:45.416]                   if (is.na(NA_character_)) 
[17:02:45.416]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.416]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:45.416]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:45.416]                     .init = FALSE)
[17:02:45.416]                 }
[17:02:45.416]             }
[17:02:45.416]         }
[17:02:45.416]     })
[17:02:45.416]     if (TRUE) {
[17:02:45.416]         base::sink(type = "output", split = FALSE)
[17:02:45.416]         if (TRUE) {
[17:02:45.416]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:45.416]         }
[17:02:45.416]         else {
[17:02:45.416]             ...future.result["stdout"] <- base::list(NULL)
[17:02:45.416]         }
[17:02:45.416]         base::close(...future.stdout)
[17:02:45.416]         ...future.stdout <- NULL
[17:02:45.416]     }
[17:02:45.416]     ...future.result$conditions <- ...future.conditions
[17:02:45.416]     ...future.result$finished <- base::Sys.time()
[17:02:45.416]     ...future.result
[17:02:45.416] }
[17:02:45.418] assign_globals() ...
[17:02:45.418] List of 1
[17:02:45.418]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:02:45.418]   .. ..@ .Data     :function (x)  
[17:02:45.418]   .. ..@ generic   : chr "my_fcn"
[17:02:45.418]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:02:45.418]   .. ..@ package   : chr ".GlobalEnv"
[17:02:45.418]   .. ..@ group     : list()
[17:02:45.418]   .. ..@ valueClass: chr(0) 
[17:02:45.418]   .. ..@ signature : chr "x"
[17:02:45.418]   .. ..@ default   : NULL
[17:02:45.418]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:02:45.418]  - attr(*, "where")=List of 1
[17:02:45.418]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:02:45.418]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:45.418]  - attr(*, "resolved")= logi FALSE
[17:02:45.418]  - attr(*, "total_size")= num 3936
[17:02:45.418]  - attr(*, "already-done")= logi TRUE
[17:02:45.425] - reassign environment for ‘my_fcn’
[17:02:45.425] - copied ‘my_fcn’ to environment
[17:02:45.426] assign_globals() ... done
[17:02:45.426] plan(): Setting new future strategy stack:
[17:02:45.426] List of future strategies:
[17:02:45.426] 1. sequential:
[17:02:45.426]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.426]    - tweaked: FALSE
[17:02:45.426]    - call: NULL
[17:02:45.426] plan(): nbrOfWorkers() = 1
[17:02:45.428] plan(): Setting new future strategy stack:
[17:02:45.428] List of future strategies:
[17:02:45.428] 1. sequential:
[17:02:45.428]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.428]    - tweaked: FALSE
[17:02:45.428]    - call: plan(strategy)
[17:02:45.428] plan(): nbrOfWorkers() = 1
[17:02:45.428] SequentialFuture started (and completed)
[17:02:45.429] - Launch lazy future ... done
[17:02:45.429] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x5603a84449d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:02:45.429] getGlobalsAndPackages() ...
[17:02:45.432] Searching for globals...
[17:02:45.436] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:02:45.436] Searching for globals ... DONE
[17:02:45.436] Resolving globals: FALSE
[17:02:45.437] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:02:45.437] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:02:45.437] - globals: [1] ‘my_fcn’
[17:02:45.437] 
[17:02:45.437] getGlobalsAndPackages() ... DONE
[17:02:45.438] run() for ‘Future’ ...
[17:02:45.438] - state: ‘created’
[17:02:45.438] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:45.438] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:45.438] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:45.438]   - Field: ‘label’
[17:02:45.438]   - Field: ‘local’
[17:02:45.438]   - Field: ‘owner’
[17:02:45.439]   - Field: ‘envir’
[17:02:45.439]   - Field: ‘packages’
[17:02:45.439]   - Field: ‘gc’
[17:02:45.439]   - Field: ‘conditions’
[17:02:45.439]   - Field: ‘expr’
[17:02:45.439]   - Field: ‘uuid’
[17:02:45.439]   - Field: ‘seed’
[17:02:45.439]   - Field: ‘version’
[17:02:45.439]   - Field: ‘result’
[17:02:45.439]   - Field: ‘asynchronous’
[17:02:45.439]   - Field: ‘calls’
[17:02:45.440]   - Field: ‘globals’
[17:02:45.440]   - Field: ‘stdout’
[17:02:45.440]   - Field: ‘earlySignal’
[17:02:45.440]   - Field: ‘lazy’
[17:02:45.440]   - Field: ‘state’
[17:02:45.440] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:45.440] - Launch lazy future ...
[17:02:45.440] Packages needed by the future expression (n = 0): <none>
[17:02:45.440] Packages needed by future strategies (n = 0): <none>
[17:02:45.441] {
[17:02:45.441]     {
[17:02:45.441]         {
[17:02:45.441]             ...future.startTime <- base::Sys.time()
[17:02:45.441]             {
[17:02:45.441]                 {
[17:02:45.441]                   {
[17:02:45.441]                     base::local({
[17:02:45.441]                       has_future <- base::requireNamespace("future", 
[17:02:45.441]                         quietly = TRUE)
[17:02:45.441]                       if (has_future) {
[17:02:45.441]                         ns <- base::getNamespace("future")
[17:02:45.441]                         version <- ns[[".package"]][["version"]]
[17:02:45.441]                         if (is.null(version)) 
[17:02:45.441]                           version <- utils::packageVersion("future")
[17:02:45.441]                       }
[17:02:45.441]                       else {
[17:02:45.441]                         version <- NULL
[17:02:45.441]                       }
[17:02:45.441]                       if (!has_future || version < "1.8.0") {
[17:02:45.441]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:45.441]                           "", base::R.version$version.string), 
[17:02:45.441]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:45.441]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:45.441]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:45.441]                             "release", "version")], collapse = " "), 
[17:02:45.441]                           hostname = base::Sys.info()[["nodename"]])
[17:02:45.441]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:45.441]                           info)
[17:02:45.441]                         info <- base::paste(info, collapse = "; ")
[17:02:45.441]                         if (!has_future) {
[17:02:45.441]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:45.441]                             info)
[17:02:45.441]                         }
[17:02:45.441]                         else {
[17:02:45.441]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:45.441]                             info, version)
[17:02:45.441]                         }
[17:02:45.441]                         base::stop(msg)
[17:02:45.441]                       }
[17:02:45.441]                     })
[17:02:45.441]                   }
[17:02:45.441]                   ...future.strategy.old <- future::plan("list")
[17:02:45.441]                   options(future.plan = NULL)
[17:02:45.441]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.441]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:45.441]                 }
[17:02:45.441]                 ...future.workdir <- getwd()
[17:02:45.441]             }
[17:02:45.441]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:45.441]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:45.441]         }
[17:02:45.441]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:45.441]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:45.441]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:45.441]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:45.441]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:45.441]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:45.441]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:45.441]             base::names(...future.oldOptions))
[17:02:45.441]     }
[17:02:45.441]     if (FALSE) {
[17:02:45.441]     }
[17:02:45.441]     else {
[17:02:45.441]         if (TRUE) {
[17:02:45.441]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:45.441]                 open = "w")
[17:02:45.441]         }
[17:02:45.441]         else {
[17:02:45.441]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:45.441]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:45.441]         }
[17:02:45.441]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:45.441]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:45.441]             base::sink(type = "output", split = FALSE)
[17:02:45.441]             base::close(...future.stdout)
[17:02:45.441]         }, add = TRUE)
[17:02:45.441]     }
[17:02:45.441]     ...future.frame <- base::sys.nframe()
[17:02:45.441]     ...future.conditions <- base::list()
[17:02:45.441]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:45.441]     if (FALSE) {
[17:02:45.441]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:45.441]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:45.441]     }
[17:02:45.441]     ...future.result <- base::tryCatch({
[17:02:45.441]         base::withCallingHandlers({
[17:02:45.441]             ...future.value <- base::withVisible(base::local({
[17:02:45.441]                 my_fcn(3)
[17:02:45.441]             }))
[17:02:45.441]             future::FutureResult(value = ...future.value$value, 
[17:02:45.441]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.441]                   ...future.rng), globalenv = if (FALSE) 
[17:02:45.441]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:45.441]                     ...future.globalenv.names))
[17:02:45.441]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:45.441]         }, condition = base::local({
[17:02:45.441]             c <- base::c
[17:02:45.441]             inherits <- base::inherits
[17:02:45.441]             invokeRestart <- base::invokeRestart
[17:02:45.441]             length <- base::length
[17:02:45.441]             list <- base::list
[17:02:45.441]             seq.int <- base::seq.int
[17:02:45.441]             signalCondition <- base::signalCondition
[17:02:45.441]             sys.calls <- base::sys.calls
[17:02:45.441]             `[[` <- base::`[[`
[17:02:45.441]             `+` <- base::`+`
[17:02:45.441]             `<<-` <- base::`<<-`
[17:02:45.441]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:45.441]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:45.441]                   3L)]
[17:02:45.441]             }
[17:02:45.441]             function(cond) {
[17:02:45.441]                 is_error <- inherits(cond, "error")
[17:02:45.441]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:45.441]                   NULL)
[17:02:45.441]                 if (is_error) {
[17:02:45.441]                   sessionInformation <- function() {
[17:02:45.441]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:45.441]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:45.441]                       search = base::search(), system = base::Sys.info())
[17:02:45.441]                   }
[17:02:45.441]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.441]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:45.441]                     cond$call), session = sessionInformation(), 
[17:02:45.441]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:45.441]                   signalCondition(cond)
[17:02:45.441]                 }
[17:02:45.441]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:45.441]                 "immediateCondition"))) {
[17:02:45.441]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:45.441]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.441]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:45.441]                   if (TRUE && !signal) {
[17:02:45.441]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.441]                     {
[17:02:45.441]                       inherits <- base::inherits
[17:02:45.441]                       invokeRestart <- base::invokeRestart
[17:02:45.441]                       is.null <- base::is.null
[17:02:45.441]                       muffled <- FALSE
[17:02:45.441]                       if (inherits(cond, "message")) {
[17:02:45.441]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.441]                         if (muffled) 
[17:02:45.441]                           invokeRestart("muffleMessage")
[17:02:45.441]                       }
[17:02:45.441]                       else if (inherits(cond, "warning")) {
[17:02:45.441]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.441]                         if (muffled) 
[17:02:45.441]                           invokeRestart("muffleWarning")
[17:02:45.441]                       }
[17:02:45.441]                       else if (inherits(cond, "condition")) {
[17:02:45.441]                         if (!is.null(pattern)) {
[17:02:45.441]                           computeRestarts <- base::computeRestarts
[17:02:45.441]                           grepl <- base::grepl
[17:02:45.441]                           restarts <- computeRestarts(cond)
[17:02:45.441]                           for (restart in restarts) {
[17:02:45.441]                             name <- restart$name
[17:02:45.441]                             if (is.null(name)) 
[17:02:45.441]                               next
[17:02:45.441]                             if (!grepl(pattern, name)) 
[17:02:45.441]                               next
[17:02:45.441]                             invokeRestart(restart)
[17:02:45.441]                             muffled <- TRUE
[17:02:45.441]                             break
[17:02:45.441]                           }
[17:02:45.441]                         }
[17:02:45.441]                       }
[17:02:45.441]                       invisible(muffled)
[17:02:45.441]                     }
[17:02:45.441]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.441]                   }
[17:02:45.441]                 }
[17:02:45.441]                 else {
[17:02:45.441]                   if (TRUE) {
[17:02:45.441]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.441]                     {
[17:02:45.441]                       inherits <- base::inherits
[17:02:45.441]                       invokeRestart <- base::invokeRestart
[17:02:45.441]                       is.null <- base::is.null
[17:02:45.441]                       muffled <- FALSE
[17:02:45.441]                       if (inherits(cond, "message")) {
[17:02:45.441]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.441]                         if (muffled) 
[17:02:45.441]                           invokeRestart("muffleMessage")
[17:02:45.441]                       }
[17:02:45.441]                       else if (inherits(cond, "warning")) {
[17:02:45.441]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.441]                         if (muffled) 
[17:02:45.441]                           invokeRestart("muffleWarning")
[17:02:45.441]                       }
[17:02:45.441]                       else if (inherits(cond, "condition")) {
[17:02:45.441]                         if (!is.null(pattern)) {
[17:02:45.441]                           computeRestarts <- base::computeRestarts
[17:02:45.441]                           grepl <- base::grepl
[17:02:45.441]                           restarts <- computeRestarts(cond)
[17:02:45.441]                           for (restart in restarts) {
[17:02:45.441]                             name <- restart$name
[17:02:45.441]                             if (is.null(name)) 
[17:02:45.441]                               next
[17:02:45.441]                             if (!grepl(pattern, name)) 
[17:02:45.441]                               next
[17:02:45.441]                             invokeRestart(restart)
[17:02:45.441]                             muffled <- TRUE
[17:02:45.441]                             break
[17:02:45.441]                           }
[17:02:45.441]                         }
[17:02:45.441]                       }
[17:02:45.441]                       invisible(muffled)
[17:02:45.441]                     }
[17:02:45.441]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.441]                   }
[17:02:45.441]                 }
[17:02:45.441]             }
[17:02:45.441]         }))
[17:02:45.441]     }, error = function(ex) {
[17:02:45.441]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:45.441]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.441]                 ...future.rng), started = ...future.startTime, 
[17:02:45.441]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:45.441]             version = "1.8"), class = "FutureResult")
[17:02:45.441]     }, finally = {
[17:02:45.441]         if (!identical(...future.workdir, getwd())) 
[17:02:45.441]             setwd(...future.workdir)
[17:02:45.441]         {
[17:02:45.441]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:45.441]                 ...future.oldOptions$nwarnings <- NULL
[17:02:45.441]             }
[17:02:45.441]             base::options(...future.oldOptions)
[17:02:45.441]             if (.Platform$OS.type == "windows") {
[17:02:45.441]                 old_names <- names(...future.oldEnvVars)
[17:02:45.441]                 envs <- base::Sys.getenv()
[17:02:45.441]                 names <- names(envs)
[17:02:45.441]                 common <- intersect(names, old_names)
[17:02:45.441]                 added <- setdiff(names, old_names)
[17:02:45.441]                 removed <- setdiff(old_names, names)
[17:02:45.441]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:45.441]                   envs[common]]
[17:02:45.441]                 NAMES <- toupper(changed)
[17:02:45.441]                 args <- list()
[17:02:45.441]                 for (kk in seq_along(NAMES)) {
[17:02:45.441]                   name <- changed[[kk]]
[17:02:45.441]                   NAME <- NAMES[[kk]]
[17:02:45.441]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.441]                     next
[17:02:45.441]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.441]                 }
[17:02:45.441]                 NAMES <- toupper(added)
[17:02:45.441]                 for (kk in seq_along(NAMES)) {
[17:02:45.441]                   name <- added[[kk]]
[17:02:45.441]                   NAME <- NAMES[[kk]]
[17:02:45.441]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.441]                     next
[17:02:45.441]                   args[[name]] <- ""
[17:02:45.441]                 }
[17:02:45.441]                 NAMES <- toupper(removed)
[17:02:45.441]                 for (kk in seq_along(NAMES)) {
[17:02:45.441]                   name <- removed[[kk]]
[17:02:45.441]                   NAME <- NAMES[[kk]]
[17:02:45.441]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.441]                     next
[17:02:45.441]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.441]                 }
[17:02:45.441]                 if (length(args) > 0) 
[17:02:45.441]                   base::do.call(base::Sys.setenv, args = args)
[17:02:45.441]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:45.441]             }
[17:02:45.441]             else {
[17:02:45.441]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:45.441]             }
[17:02:45.441]             {
[17:02:45.441]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:45.441]                   0L) {
[17:02:45.441]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:45.441]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:45.441]                   base::options(opts)
[17:02:45.441]                 }
[17:02:45.441]                 {
[17:02:45.441]                   {
[17:02:45.441]                     NULL
[17:02:45.441]                     RNGkind("Mersenne-Twister")
[17:02:45.441]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:45.441]                       inherits = FALSE)
[17:02:45.441]                   }
[17:02:45.441]                   options(future.plan = NULL)
[17:02:45.441]                   if (is.na(NA_character_)) 
[17:02:45.441]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.441]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:45.441]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:45.441]                     .init = FALSE)
[17:02:45.441]                 }
[17:02:45.441]             }
[17:02:45.441]         }
[17:02:45.441]     })
[17:02:45.441]     if (TRUE) {
[17:02:45.441]         base::sink(type = "output", split = FALSE)
[17:02:45.441]         if (TRUE) {
[17:02:45.441]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:45.441]         }
[17:02:45.441]         else {
[17:02:45.441]             ...future.result["stdout"] <- base::list(NULL)
[17:02:45.441]         }
[17:02:45.441]         base::close(...future.stdout)
[17:02:45.441]         ...future.stdout <- NULL
[17:02:45.441]     }
[17:02:45.441]     ...future.result$conditions <- ...future.conditions
[17:02:45.441]     ...future.result$finished <- base::Sys.time()
[17:02:45.441]     ...future.result
[17:02:45.441] }
[17:02:45.442] assign_globals() ...
[17:02:45.442] List of 1
[17:02:45.442]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:02:45.442]   .. ..@ .Data     :function (x)  
[17:02:45.442]   .. ..@ generic   : chr "my_fcn"
[17:02:45.442]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:02:45.442]   .. ..@ package   : chr ".GlobalEnv"
[17:02:45.442]   .. ..@ group     : list()
[17:02:45.442]   .. ..@ valueClass: chr(0) 
[17:02:45.442]   .. ..@ signature : chr "x"
[17:02:45.442]   .. ..@ default   : NULL
[17:02:45.442]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:02:45.442]  - attr(*, "where")=List of 1
[17:02:45.442]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:02:45.442]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:45.442]  - attr(*, "resolved")= logi FALSE
[17:02:45.442]  - attr(*, "total_size")= num 3936
[17:02:45.442]  - attr(*, "already-done")= logi TRUE
[17:02:45.447] - reassign environment for ‘my_fcn’
[17:02:45.447] - copied ‘my_fcn’ to environment
[17:02:45.447] assign_globals() ... done
[17:02:45.447] plan(): Setting new future strategy stack:
[17:02:45.448] List of future strategies:
[17:02:45.448] 1. sequential:
[17:02:45.448]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.448]    - tweaked: FALSE
[17:02:45.448]    - call: NULL
[17:02:45.448] plan(): nbrOfWorkers() = 1
[17:02:45.450] plan(): Setting new future strategy stack:
[17:02:45.450] List of future strategies:
[17:02:45.450] 1. sequential:
[17:02:45.450]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.450]    - tweaked: FALSE
[17:02:45.450]    - call: plan(strategy)
[17:02:45.450] plan(): nbrOfWorkers() = 1
[17:02:45.450] SequentialFuture started (and completed)
[17:02:45.450] signalConditions() ...
[17:02:45.450]  - include = ‘immediateCondition’
[17:02:45.451]  - exclude = 
[17:02:45.451]  - resignal = FALSE
[17:02:45.451]  - Number of conditions: 1
[17:02:45.451] signalConditions() ... done
[17:02:45.451] - Launch lazy future ... done
[17:02:45.451] run() for ‘SequentialFuture’ ... done
[17:02:45.451] signalConditions() ...
[17:02:45.451]  - include = ‘immediateCondition’
[17:02:45.451]  - exclude = 
[17:02:45.451]  - resignal = FALSE
[17:02:45.451]  - Number of conditions: 1
[17:02:45.452] signalConditions() ... done
[17:02:45.452] Future state: ‘finished’
[17:02:45.452] signalConditions() ...
[17:02:45.452]  - include = ‘condition’
[17:02:45.452]  - exclude = ‘immediateCondition’
[17:02:45.452]  - resignal = TRUE
[17:02:45.452]  - Number of conditions: 1
[17:02:45.452]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:45.452] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[17:02:45.453] plan(): Setting new future strategy stack:
[17:02:45.453] List of future strategies:
[17:02:45.453] 1. multicore:
[17:02:45.453]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:45.453]    - tweaked: FALSE
[17:02:45.453]    - call: plan(strategy)
[17:02:45.457] plan(): nbrOfWorkers() = 2
[17:02:45.457] getGlobalsAndPackages() ...
[17:02:45.457] Searching for globals...
[17:02:45.461] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:02:45.461] Searching for globals ... DONE
[17:02:45.461] Resolving globals: FALSE
[17:02:45.461] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:02:45.462] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:02:45.462] - globals: [1] ‘my_fcn’
[17:02:45.462] 
[17:02:45.462] getGlobalsAndPackages() ... DONE
[17:02:45.462] run() for ‘Future’ ...
[17:02:45.462] - state: ‘created’
[17:02:45.462] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:45.466] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:45.466] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:45.466]   - Field: ‘label’
[17:02:45.466]   - Field: ‘local’
[17:02:45.467]   - Field: ‘owner’
[17:02:45.467]   - Field: ‘envir’
[17:02:45.467]   - Field: ‘workers’
[17:02:45.467]   - Field: ‘packages’
[17:02:45.467]   - Field: ‘gc’
[17:02:45.467]   - Field: ‘job’
[17:02:45.467]   - Field: ‘conditions’
[17:02:45.467]   - Field: ‘expr’
[17:02:45.467]   - Field: ‘uuid’
[17:02:45.467]   - Field: ‘seed’
[17:02:45.468]   - Field: ‘version’
[17:02:45.468]   - Field: ‘result’
[17:02:45.468]   - Field: ‘asynchronous’
[17:02:45.468]   - Field: ‘calls’
[17:02:45.468]   - Field: ‘globals’
[17:02:45.468]   - Field: ‘stdout’
[17:02:45.468]   - Field: ‘earlySignal’
[17:02:45.468]   - Field: ‘lazy’
[17:02:45.468]   - Field: ‘state’
[17:02:45.468] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:45.468] - Launch lazy future ...
[17:02:45.469] Packages needed by the future expression (n = 0): <none>
[17:02:45.469] Packages needed by future strategies (n = 0): <none>
[17:02:45.470] {
[17:02:45.470]     {
[17:02:45.470]         {
[17:02:45.470]             ...future.startTime <- base::Sys.time()
[17:02:45.470]             {
[17:02:45.470]                 {
[17:02:45.470]                   {
[17:02:45.470]                     {
[17:02:45.470]                       base::local({
[17:02:45.470]                         has_future <- base::requireNamespace("future", 
[17:02:45.470]                           quietly = TRUE)
[17:02:45.470]                         if (has_future) {
[17:02:45.470]                           ns <- base::getNamespace("future")
[17:02:45.470]                           version <- ns[[".package"]][["version"]]
[17:02:45.470]                           if (is.null(version)) 
[17:02:45.470]                             version <- utils::packageVersion("future")
[17:02:45.470]                         }
[17:02:45.470]                         else {
[17:02:45.470]                           version <- NULL
[17:02:45.470]                         }
[17:02:45.470]                         if (!has_future || version < "1.8.0") {
[17:02:45.470]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:45.470]                             "", base::R.version$version.string), 
[17:02:45.470]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:45.470]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:45.470]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:45.470]                               "release", "version")], collapse = " "), 
[17:02:45.470]                             hostname = base::Sys.info()[["nodename"]])
[17:02:45.470]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:45.470]                             info)
[17:02:45.470]                           info <- base::paste(info, collapse = "; ")
[17:02:45.470]                           if (!has_future) {
[17:02:45.470]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:45.470]                               info)
[17:02:45.470]                           }
[17:02:45.470]                           else {
[17:02:45.470]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:45.470]                               info, version)
[17:02:45.470]                           }
[17:02:45.470]                           base::stop(msg)
[17:02:45.470]                         }
[17:02:45.470]                       })
[17:02:45.470]                     }
[17:02:45.470]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:45.470]                     base::options(mc.cores = 1L)
[17:02:45.470]                   }
[17:02:45.470]                   ...future.strategy.old <- future::plan("list")
[17:02:45.470]                   options(future.plan = NULL)
[17:02:45.470]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.470]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:45.470]                 }
[17:02:45.470]                 ...future.workdir <- getwd()
[17:02:45.470]             }
[17:02:45.470]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:45.470]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:45.470]         }
[17:02:45.470]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:45.470]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:45.470]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:45.470]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:45.470]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:45.470]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:45.470]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:45.470]             base::names(...future.oldOptions))
[17:02:45.470]     }
[17:02:45.470]     if (FALSE) {
[17:02:45.470]     }
[17:02:45.470]     else {
[17:02:45.470]         if (TRUE) {
[17:02:45.470]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:45.470]                 open = "w")
[17:02:45.470]         }
[17:02:45.470]         else {
[17:02:45.470]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:45.470]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:45.470]         }
[17:02:45.470]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:45.470]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:45.470]             base::sink(type = "output", split = FALSE)
[17:02:45.470]             base::close(...future.stdout)
[17:02:45.470]         }, add = TRUE)
[17:02:45.470]     }
[17:02:45.470]     ...future.frame <- base::sys.nframe()
[17:02:45.470]     ...future.conditions <- base::list()
[17:02:45.470]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:45.470]     if (FALSE) {
[17:02:45.470]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:45.470]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:45.470]     }
[17:02:45.470]     ...future.result <- base::tryCatch({
[17:02:45.470]         base::withCallingHandlers({
[17:02:45.470]             ...future.value <- base::withVisible(base::local({
[17:02:45.470]                 withCallingHandlers({
[17:02:45.470]                   {
[17:02:45.470]                     my_fcn
[17:02:45.470]                   }
[17:02:45.470]                 }, immediateCondition = function(cond) {
[17:02:45.470]                   save_rds <- function (object, pathname, ...) 
[17:02:45.470]                   {
[17:02:45.470]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:45.470]                     if (file_test("-f", pathname_tmp)) {
[17:02:45.470]                       fi_tmp <- file.info(pathname_tmp)
[17:02:45.470]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:45.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:45.470]                         fi_tmp[["mtime"]])
[17:02:45.470]                     }
[17:02:45.470]                     tryCatch({
[17:02:45.470]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:45.470]                     }, error = function(ex) {
[17:02:45.470]                       msg <- conditionMessage(ex)
[17:02:45.470]                       fi_tmp <- file.info(pathname_tmp)
[17:02:45.470]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:45.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:45.470]                         fi_tmp[["mtime"]], msg)
[17:02:45.470]                       ex$message <- msg
[17:02:45.470]                       stop(ex)
[17:02:45.470]                     })
[17:02:45.470]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:45.470]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:45.470]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:45.470]                       fi_tmp <- file.info(pathname_tmp)
[17:02:45.470]                       fi <- file.info(pathname)
[17:02:45.470]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:45.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:45.470]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:45.470]                         fi[["size"]], fi[["mtime"]])
[17:02:45.470]                       stop(msg)
[17:02:45.470]                     }
[17:02:45.470]                     invisible(pathname)
[17:02:45.470]                   }
[17:02:45.470]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:45.470]                     rootPath = tempdir()) 
[17:02:45.470]                   {
[17:02:45.470]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:45.470]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:45.470]                       tmpdir = path, fileext = ".rds")
[17:02:45.470]                     save_rds(obj, file)
[17:02:45.470]                   }
[17:02:45.470]                   saveImmediateCondition(cond, path = "/tmp/RtmpRqXkMF/.future/immediateConditions")
[17:02:45.470]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.470]                   {
[17:02:45.470]                     inherits <- base::inherits
[17:02:45.470]                     invokeRestart <- base::invokeRestart
[17:02:45.470]                     is.null <- base::is.null
[17:02:45.470]                     muffled <- FALSE
[17:02:45.470]                     if (inherits(cond, "message")) {
[17:02:45.470]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:45.470]                       if (muffled) 
[17:02:45.470]                         invokeRestart("muffleMessage")
[17:02:45.470]                     }
[17:02:45.470]                     else if (inherits(cond, "warning")) {
[17:02:45.470]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:45.470]                       if (muffled) 
[17:02:45.470]                         invokeRestart("muffleWarning")
[17:02:45.470]                     }
[17:02:45.470]                     else if (inherits(cond, "condition")) {
[17:02:45.470]                       if (!is.null(pattern)) {
[17:02:45.470]                         computeRestarts <- base::computeRestarts
[17:02:45.470]                         grepl <- base::grepl
[17:02:45.470]                         restarts <- computeRestarts(cond)
[17:02:45.470]                         for (restart in restarts) {
[17:02:45.470]                           name <- restart$name
[17:02:45.470]                           if (is.null(name)) 
[17:02:45.470]                             next
[17:02:45.470]                           if (!grepl(pattern, name)) 
[17:02:45.470]                             next
[17:02:45.470]                           invokeRestart(restart)
[17:02:45.470]                           muffled <- TRUE
[17:02:45.470]                           break
[17:02:45.470]                         }
[17:02:45.470]                       }
[17:02:45.470]                     }
[17:02:45.470]                     invisible(muffled)
[17:02:45.470]                   }
[17:02:45.470]                   muffleCondition(cond)
[17:02:45.470]                 })
[17:02:45.470]             }))
[17:02:45.470]             future::FutureResult(value = ...future.value$value, 
[17:02:45.470]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.470]                   ...future.rng), globalenv = if (FALSE) 
[17:02:45.470]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:45.470]                     ...future.globalenv.names))
[17:02:45.470]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:45.470]         }, condition = base::local({
[17:02:45.470]             c <- base::c
[17:02:45.470]             inherits <- base::inherits
[17:02:45.470]             invokeRestart <- base::invokeRestart
[17:02:45.470]             length <- base::length
[17:02:45.470]             list <- base::list
[17:02:45.470]             seq.int <- base::seq.int
[17:02:45.470]             signalCondition <- base::signalCondition
[17:02:45.470]             sys.calls <- base::sys.calls
[17:02:45.470]             `[[` <- base::`[[`
[17:02:45.470]             `+` <- base::`+`
[17:02:45.470]             `<<-` <- base::`<<-`
[17:02:45.470]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:45.470]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:45.470]                   3L)]
[17:02:45.470]             }
[17:02:45.470]             function(cond) {
[17:02:45.470]                 is_error <- inherits(cond, "error")
[17:02:45.470]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:45.470]                   NULL)
[17:02:45.470]                 if (is_error) {
[17:02:45.470]                   sessionInformation <- function() {
[17:02:45.470]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:45.470]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:45.470]                       search = base::search(), system = base::Sys.info())
[17:02:45.470]                   }
[17:02:45.470]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.470]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:45.470]                     cond$call), session = sessionInformation(), 
[17:02:45.470]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:45.470]                   signalCondition(cond)
[17:02:45.470]                 }
[17:02:45.470]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:45.470]                 "immediateCondition"))) {
[17:02:45.470]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:45.470]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.470]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:45.470]                   if (TRUE && !signal) {
[17:02:45.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.470]                     {
[17:02:45.470]                       inherits <- base::inherits
[17:02:45.470]                       invokeRestart <- base::invokeRestart
[17:02:45.470]                       is.null <- base::is.null
[17:02:45.470]                       muffled <- FALSE
[17:02:45.470]                       if (inherits(cond, "message")) {
[17:02:45.470]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.470]                         if (muffled) 
[17:02:45.470]                           invokeRestart("muffleMessage")
[17:02:45.470]                       }
[17:02:45.470]                       else if (inherits(cond, "warning")) {
[17:02:45.470]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.470]                         if (muffled) 
[17:02:45.470]                           invokeRestart("muffleWarning")
[17:02:45.470]                       }
[17:02:45.470]                       else if (inherits(cond, "condition")) {
[17:02:45.470]                         if (!is.null(pattern)) {
[17:02:45.470]                           computeRestarts <- base::computeRestarts
[17:02:45.470]                           grepl <- base::grepl
[17:02:45.470]                           restarts <- computeRestarts(cond)
[17:02:45.470]                           for (restart in restarts) {
[17:02:45.470]                             name <- restart$name
[17:02:45.470]                             if (is.null(name)) 
[17:02:45.470]                               next
[17:02:45.470]                             if (!grepl(pattern, name)) 
[17:02:45.470]                               next
[17:02:45.470]                             invokeRestart(restart)
[17:02:45.470]                             muffled <- TRUE
[17:02:45.470]                             break
[17:02:45.470]                           }
[17:02:45.470]                         }
[17:02:45.470]                       }
[17:02:45.470]                       invisible(muffled)
[17:02:45.470]                     }
[17:02:45.470]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.470]                   }
[17:02:45.470]                 }
[17:02:45.470]                 else {
[17:02:45.470]                   if (TRUE) {
[17:02:45.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.470]                     {
[17:02:45.470]                       inherits <- base::inherits
[17:02:45.470]                       invokeRestart <- base::invokeRestart
[17:02:45.470]                       is.null <- base::is.null
[17:02:45.470]                       muffled <- FALSE
[17:02:45.470]                       if (inherits(cond, "message")) {
[17:02:45.470]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.470]                         if (muffled) 
[17:02:45.470]                           invokeRestart("muffleMessage")
[17:02:45.470]                       }
[17:02:45.470]                       else if (inherits(cond, "warning")) {
[17:02:45.470]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.470]                         if (muffled) 
[17:02:45.470]                           invokeRestart("muffleWarning")
[17:02:45.470]                       }
[17:02:45.470]                       else if (inherits(cond, "condition")) {
[17:02:45.470]                         if (!is.null(pattern)) {
[17:02:45.470]                           computeRestarts <- base::computeRestarts
[17:02:45.470]                           grepl <- base::grepl
[17:02:45.470]                           restarts <- computeRestarts(cond)
[17:02:45.470]                           for (restart in restarts) {
[17:02:45.470]                             name <- restart$name
[17:02:45.470]                             if (is.null(name)) 
[17:02:45.470]                               next
[17:02:45.470]                             if (!grepl(pattern, name)) 
[17:02:45.470]                               next
[17:02:45.470]                             invokeRestart(restart)
[17:02:45.470]                             muffled <- TRUE
[17:02:45.470]                             break
[17:02:45.470]                           }
[17:02:45.470]                         }
[17:02:45.470]                       }
[17:02:45.470]                       invisible(muffled)
[17:02:45.470]                     }
[17:02:45.470]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.470]                   }
[17:02:45.470]                 }
[17:02:45.470]             }
[17:02:45.470]         }))
[17:02:45.470]     }, error = function(ex) {
[17:02:45.470]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:45.470]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.470]                 ...future.rng), started = ...future.startTime, 
[17:02:45.470]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:45.470]             version = "1.8"), class = "FutureResult")
[17:02:45.470]     }, finally = {
[17:02:45.470]         if (!identical(...future.workdir, getwd())) 
[17:02:45.470]             setwd(...future.workdir)
[17:02:45.470]         {
[17:02:45.470]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:45.470]                 ...future.oldOptions$nwarnings <- NULL
[17:02:45.470]             }
[17:02:45.470]             base::options(...future.oldOptions)
[17:02:45.470]             if (.Platform$OS.type == "windows") {
[17:02:45.470]                 old_names <- names(...future.oldEnvVars)
[17:02:45.470]                 envs <- base::Sys.getenv()
[17:02:45.470]                 names <- names(envs)
[17:02:45.470]                 common <- intersect(names, old_names)
[17:02:45.470]                 added <- setdiff(names, old_names)
[17:02:45.470]                 removed <- setdiff(old_names, names)
[17:02:45.470]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:45.470]                   envs[common]]
[17:02:45.470]                 NAMES <- toupper(changed)
[17:02:45.470]                 args <- list()
[17:02:45.470]                 for (kk in seq_along(NAMES)) {
[17:02:45.470]                   name <- changed[[kk]]
[17:02:45.470]                   NAME <- NAMES[[kk]]
[17:02:45.470]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.470]                     next
[17:02:45.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.470]                 }
[17:02:45.470]                 NAMES <- toupper(added)
[17:02:45.470]                 for (kk in seq_along(NAMES)) {
[17:02:45.470]                   name <- added[[kk]]
[17:02:45.470]                   NAME <- NAMES[[kk]]
[17:02:45.470]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.470]                     next
[17:02:45.470]                   args[[name]] <- ""
[17:02:45.470]                 }
[17:02:45.470]                 NAMES <- toupper(removed)
[17:02:45.470]                 for (kk in seq_along(NAMES)) {
[17:02:45.470]                   name <- removed[[kk]]
[17:02:45.470]                   NAME <- NAMES[[kk]]
[17:02:45.470]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.470]                     next
[17:02:45.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.470]                 }
[17:02:45.470]                 if (length(args) > 0) 
[17:02:45.470]                   base::do.call(base::Sys.setenv, args = args)
[17:02:45.470]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:45.470]             }
[17:02:45.470]             else {
[17:02:45.470]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:45.470]             }
[17:02:45.470]             {
[17:02:45.470]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:45.470]                   0L) {
[17:02:45.470]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:45.470]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:45.470]                   base::options(opts)
[17:02:45.470]                 }
[17:02:45.470]                 {
[17:02:45.470]                   {
[17:02:45.470]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:45.470]                     NULL
[17:02:45.470]                   }
[17:02:45.470]                   options(future.plan = NULL)
[17:02:45.470]                   if (is.na(NA_character_)) 
[17:02:45.470]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.470]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:45.470]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:45.470]                     .init = FALSE)
[17:02:45.470]                 }
[17:02:45.470]             }
[17:02:45.470]         }
[17:02:45.470]     })
[17:02:45.470]     if (TRUE) {
[17:02:45.470]         base::sink(type = "output", split = FALSE)
[17:02:45.470]         if (TRUE) {
[17:02:45.470]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:45.470]         }
[17:02:45.470]         else {
[17:02:45.470]             ...future.result["stdout"] <- base::list(NULL)
[17:02:45.470]         }
[17:02:45.470]         base::close(...future.stdout)
[17:02:45.470]         ...future.stdout <- NULL
[17:02:45.470]     }
[17:02:45.470]     ...future.result$conditions <- ...future.conditions
[17:02:45.470]     ...future.result$finished <- base::Sys.time()
[17:02:45.470]     ...future.result
[17:02:45.470] }
[17:02:45.472] assign_globals() ...
[17:02:45.472] List of 1
[17:02:45.472]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:02:45.472]   .. ..@ .Data     :function (x)  
[17:02:45.472]   .. ..@ generic   : chr "my_fcn"
[17:02:45.472]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:02:45.472]   .. ..@ package   : chr ".GlobalEnv"
[17:02:45.472]   .. ..@ group     : list()
[17:02:45.472]   .. ..@ valueClass: chr(0) 
[17:02:45.472]   .. ..@ signature : chr "x"
[17:02:45.472]   .. ..@ default   : NULL
[17:02:45.472]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:02:45.472]  - attr(*, "where")=List of 1
[17:02:45.472]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:02:45.472]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:45.472]  - attr(*, "resolved")= logi FALSE
[17:02:45.472]  - attr(*, "total_size")= num 3936
[17:02:45.472]  - attr(*, "already-done")= logi TRUE
[17:02:45.477] - reassign environment for ‘my_fcn’
[17:02:45.477] - copied ‘my_fcn’ to environment
[17:02:45.477] assign_globals() ... done
[17:02:45.477] requestCore(): workers = 2
[17:02:45.480] MulticoreFuture started
[17:02:45.480] - Launch lazy future ... done
[17:02:45.481] plan(): Setting new future strategy stack:
[17:02:45.481] run() for ‘MulticoreFuture’ ... done
[17:02:45.481] List of future strategies:
[17:02:45.481] 1. sequential:
[17:02:45.481]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.481]    - tweaked: FALSE
[17:02:45.481]    - call: NULL
[17:02:45.482] result() for MulticoreFuture ...
[17:02:45.482] plan(): nbrOfWorkers() = 1
[17:02:45.484] plan(): Setting new future strategy stack:
[17:02:45.484] List of future strategies:
[17:02:45.484] 1. multicore:
[17:02:45.484]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:45.484]    - tweaked: FALSE
[17:02:45.484]    - call: plan(strategy)
[17:02:45.489] plan(): nbrOfWorkers() = 2
[17:02:45.495] result() for MulticoreFuture ...
[17:02:45.495] result() for MulticoreFuture ... done
[17:02:45.495] result() for MulticoreFuture ... done
[17:02:45.495] result() for MulticoreFuture ...
[17:02:45.496] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x5603a828b508>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:02:45.496] getGlobalsAndPackages() ...
[17:02:45.496] Searching for globals...
[17:02:45.499] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:02:45.499] Searching for globals ... DONE
[17:02:45.499] Resolving globals: FALSE
[17:02:45.500] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:02:45.500] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:02:45.501] - globals: [1] ‘my_fcn’
[17:02:45.501] 
[17:02:45.501] getGlobalsAndPackages() ... DONE
[17:02:45.501] run() for ‘Future’ ...
[17:02:45.501] - state: ‘created’
[17:02:45.501] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:45.505] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:45.505] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:45.506]   - Field: ‘label’
[17:02:45.508]   - Field: ‘local’
[17:02:45.508]   - Field: ‘owner’
[17:02:45.508]   - Field: ‘envir’
[17:02:45.509]   - Field: ‘workers’
[17:02:45.509]   - Field: ‘packages’
[17:02:45.509]   - Field: ‘gc’
[17:02:45.509]   - Field: ‘job’
[17:02:45.509]   - Field: ‘conditions’
[17:02:45.509]   - Field: ‘expr’
[17:02:45.509]   - Field: ‘uuid’
[17:02:45.509]   - Field: ‘seed’
[17:02:45.510]   - Field: ‘version’
[17:02:45.510]   - Field: ‘result’
[17:02:45.510]   - Field: ‘asynchronous’
[17:02:45.510]   - Field: ‘calls’
[17:02:45.510]   - Field: ‘globals’
[17:02:45.510]   - Field: ‘stdout’
[17:02:45.510]   - Field: ‘earlySignal’
[17:02:45.510]   - Field: ‘lazy’
[17:02:45.511]   - Field: ‘state’
[17:02:45.511] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:45.511] - Launch lazy future ...
[17:02:45.511] Packages needed by the future expression (n = 0): <none>
[17:02:45.511] Packages needed by future strategies (n = 0): <none>
[17:02:45.512] {
[17:02:45.512]     {
[17:02:45.512]         {
[17:02:45.512]             ...future.startTime <- base::Sys.time()
[17:02:45.512]             {
[17:02:45.512]                 {
[17:02:45.512]                   {
[17:02:45.512]                     {
[17:02:45.512]                       base::local({
[17:02:45.512]                         has_future <- base::requireNamespace("future", 
[17:02:45.512]                           quietly = TRUE)
[17:02:45.512]                         if (has_future) {
[17:02:45.512]                           ns <- base::getNamespace("future")
[17:02:45.512]                           version <- ns[[".package"]][["version"]]
[17:02:45.512]                           if (is.null(version)) 
[17:02:45.512]                             version <- utils::packageVersion("future")
[17:02:45.512]                         }
[17:02:45.512]                         else {
[17:02:45.512]                           version <- NULL
[17:02:45.512]                         }
[17:02:45.512]                         if (!has_future || version < "1.8.0") {
[17:02:45.512]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:45.512]                             "", base::R.version$version.string), 
[17:02:45.512]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:45.512]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:45.512]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:45.512]                               "release", "version")], collapse = " "), 
[17:02:45.512]                             hostname = base::Sys.info()[["nodename"]])
[17:02:45.512]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:45.512]                             info)
[17:02:45.512]                           info <- base::paste(info, collapse = "; ")
[17:02:45.512]                           if (!has_future) {
[17:02:45.512]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:45.512]                               info)
[17:02:45.512]                           }
[17:02:45.512]                           else {
[17:02:45.512]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:45.512]                               info, version)
[17:02:45.512]                           }
[17:02:45.512]                           base::stop(msg)
[17:02:45.512]                         }
[17:02:45.512]                       })
[17:02:45.512]                     }
[17:02:45.512]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:45.512]                     base::options(mc.cores = 1L)
[17:02:45.512]                   }
[17:02:45.512]                   ...future.strategy.old <- future::plan("list")
[17:02:45.512]                   options(future.plan = NULL)
[17:02:45.512]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.512]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:45.512]                 }
[17:02:45.512]                 ...future.workdir <- getwd()
[17:02:45.512]             }
[17:02:45.512]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:45.512]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:45.512]         }
[17:02:45.512]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:45.512]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:45.512]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:45.512]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:45.512]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:45.512]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:45.512]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:45.512]             base::names(...future.oldOptions))
[17:02:45.512]     }
[17:02:45.512]     if (FALSE) {
[17:02:45.512]     }
[17:02:45.512]     else {
[17:02:45.512]         if (TRUE) {
[17:02:45.512]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:45.512]                 open = "w")
[17:02:45.512]         }
[17:02:45.512]         else {
[17:02:45.512]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:45.512]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:45.512]         }
[17:02:45.512]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:45.512]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:45.512]             base::sink(type = "output", split = FALSE)
[17:02:45.512]             base::close(...future.stdout)
[17:02:45.512]         }, add = TRUE)
[17:02:45.512]     }
[17:02:45.512]     ...future.frame <- base::sys.nframe()
[17:02:45.512]     ...future.conditions <- base::list()
[17:02:45.512]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:45.512]     if (FALSE) {
[17:02:45.512]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:45.512]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:45.512]     }
[17:02:45.512]     ...future.result <- base::tryCatch({
[17:02:45.512]         base::withCallingHandlers({
[17:02:45.512]             ...future.value <- base::withVisible(base::local({
[17:02:45.512]                 withCallingHandlers({
[17:02:45.512]                   {
[17:02:45.512]                     my_fcn(3)
[17:02:45.512]                   }
[17:02:45.512]                 }, immediateCondition = function(cond) {
[17:02:45.512]                   save_rds <- function (object, pathname, ...) 
[17:02:45.512]                   {
[17:02:45.512]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:45.512]                     if (file_test("-f", pathname_tmp)) {
[17:02:45.512]                       fi_tmp <- file.info(pathname_tmp)
[17:02:45.512]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:45.512]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:45.512]                         fi_tmp[["mtime"]])
[17:02:45.512]                     }
[17:02:45.512]                     tryCatch({
[17:02:45.512]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:45.512]                     }, error = function(ex) {
[17:02:45.512]                       msg <- conditionMessage(ex)
[17:02:45.512]                       fi_tmp <- file.info(pathname_tmp)
[17:02:45.512]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:45.512]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:45.512]                         fi_tmp[["mtime"]], msg)
[17:02:45.512]                       ex$message <- msg
[17:02:45.512]                       stop(ex)
[17:02:45.512]                     })
[17:02:45.512]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:45.512]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:45.512]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:45.512]                       fi_tmp <- file.info(pathname_tmp)
[17:02:45.512]                       fi <- file.info(pathname)
[17:02:45.512]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:45.512]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:45.512]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:45.512]                         fi[["size"]], fi[["mtime"]])
[17:02:45.512]                       stop(msg)
[17:02:45.512]                     }
[17:02:45.512]                     invisible(pathname)
[17:02:45.512]                   }
[17:02:45.512]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:45.512]                     rootPath = tempdir()) 
[17:02:45.512]                   {
[17:02:45.512]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:45.512]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:45.512]                       tmpdir = path, fileext = ".rds")
[17:02:45.512]                     save_rds(obj, file)
[17:02:45.512]                   }
[17:02:45.512]                   saveImmediateCondition(cond, path = "/tmp/RtmpRqXkMF/.future/immediateConditions")
[17:02:45.512]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.512]                   {
[17:02:45.512]                     inherits <- base::inherits
[17:02:45.512]                     invokeRestart <- base::invokeRestart
[17:02:45.512]                     is.null <- base::is.null
[17:02:45.512]                     muffled <- FALSE
[17:02:45.512]                     if (inherits(cond, "message")) {
[17:02:45.512]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:45.512]                       if (muffled) 
[17:02:45.512]                         invokeRestart("muffleMessage")
[17:02:45.512]                     }
[17:02:45.512]                     else if (inherits(cond, "warning")) {
[17:02:45.512]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:45.512]                       if (muffled) 
[17:02:45.512]                         invokeRestart("muffleWarning")
[17:02:45.512]                     }
[17:02:45.512]                     else if (inherits(cond, "condition")) {
[17:02:45.512]                       if (!is.null(pattern)) {
[17:02:45.512]                         computeRestarts <- base::computeRestarts
[17:02:45.512]                         grepl <- base::grepl
[17:02:45.512]                         restarts <- computeRestarts(cond)
[17:02:45.512]                         for (restart in restarts) {
[17:02:45.512]                           name <- restart$name
[17:02:45.512]                           if (is.null(name)) 
[17:02:45.512]                             next
[17:02:45.512]                           if (!grepl(pattern, name)) 
[17:02:45.512]                             next
[17:02:45.512]                           invokeRestart(restart)
[17:02:45.512]                           muffled <- TRUE
[17:02:45.512]                           break
[17:02:45.512]                         }
[17:02:45.512]                       }
[17:02:45.512]                     }
[17:02:45.512]                     invisible(muffled)
[17:02:45.512]                   }
[17:02:45.512]                   muffleCondition(cond)
[17:02:45.512]                 })
[17:02:45.512]             }))
[17:02:45.512]             future::FutureResult(value = ...future.value$value, 
[17:02:45.512]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.512]                   ...future.rng), globalenv = if (FALSE) 
[17:02:45.512]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:45.512]                     ...future.globalenv.names))
[17:02:45.512]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:45.512]         }, condition = base::local({
[17:02:45.512]             c <- base::c
[17:02:45.512]             inherits <- base::inherits
[17:02:45.512]             invokeRestart <- base::invokeRestart
[17:02:45.512]             length <- base::length
[17:02:45.512]             list <- base::list
[17:02:45.512]             seq.int <- base::seq.int
[17:02:45.512]             signalCondition <- base::signalCondition
[17:02:45.512]             sys.calls <- base::sys.calls
[17:02:45.512]             `[[` <- base::`[[`
[17:02:45.512]             `+` <- base::`+`
[17:02:45.512]             `<<-` <- base::`<<-`
[17:02:45.512]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:45.512]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:45.512]                   3L)]
[17:02:45.512]             }
[17:02:45.512]             function(cond) {
[17:02:45.512]                 is_error <- inherits(cond, "error")
[17:02:45.512]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:45.512]                   NULL)
[17:02:45.512]                 if (is_error) {
[17:02:45.512]                   sessionInformation <- function() {
[17:02:45.512]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:45.512]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:45.512]                       search = base::search(), system = base::Sys.info())
[17:02:45.512]                   }
[17:02:45.512]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.512]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:45.512]                     cond$call), session = sessionInformation(), 
[17:02:45.512]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:45.512]                   signalCondition(cond)
[17:02:45.512]                 }
[17:02:45.512]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:45.512]                 "immediateCondition"))) {
[17:02:45.512]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:45.512]                   ...future.conditions[[length(...future.conditions) + 
[17:02:45.512]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:45.512]                   if (TRUE && !signal) {
[17:02:45.512]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.512]                     {
[17:02:45.512]                       inherits <- base::inherits
[17:02:45.512]                       invokeRestart <- base::invokeRestart
[17:02:45.512]                       is.null <- base::is.null
[17:02:45.512]                       muffled <- FALSE
[17:02:45.512]                       if (inherits(cond, "message")) {
[17:02:45.512]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.512]                         if (muffled) 
[17:02:45.512]                           invokeRestart("muffleMessage")
[17:02:45.512]                       }
[17:02:45.512]                       else if (inherits(cond, "warning")) {
[17:02:45.512]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.512]                         if (muffled) 
[17:02:45.512]                           invokeRestart("muffleWarning")
[17:02:45.512]                       }
[17:02:45.512]                       else if (inherits(cond, "condition")) {
[17:02:45.512]                         if (!is.null(pattern)) {
[17:02:45.512]                           computeRestarts <- base::computeRestarts
[17:02:45.512]                           grepl <- base::grepl
[17:02:45.512]                           restarts <- computeRestarts(cond)
[17:02:45.512]                           for (restart in restarts) {
[17:02:45.512]                             name <- restart$name
[17:02:45.512]                             if (is.null(name)) 
[17:02:45.512]                               next
[17:02:45.512]                             if (!grepl(pattern, name)) 
[17:02:45.512]                               next
[17:02:45.512]                             invokeRestart(restart)
[17:02:45.512]                             muffled <- TRUE
[17:02:45.512]                             break
[17:02:45.512]                           }
[17:02:45.512]                         }
[17:02:45.512]                       }
[17:02:45.512]                       invisible(muffled)
[17:02:45.512]                     }
[17:02:45.512]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.512]                   }
[17:02:45.512]                 }
[17:02:45.512]                 else {
[17:02:45.512]                   if (TRUE) {
[17:02:45.512]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:45.512]                     {
[17:02:45.512]                       inherits <- base::inherits
[17:02:45.512]                       invokeRestart <- base::invokeRestart
[17:02:45.512]                       is.null <- base::is.null
[17:02:45.512]                       muffled <- FALSE
[17:02:45.512]                       if (inherits(cond, "message")) {
[17:02:45.512]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:45.512]                         if (muffled) 
[17:02:45.512]                           invokeRestart("muffleMessage")
[17:02:45.512]                       }
[17:02:45.512]                       else if (inherits(cond, "warning")) {
[17:02:45.512]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:45.512]                         if (muffled) 
[17:02:45.512]                           invokeRestart("muffleWarning")
[17:02:45.512]                       }
[17:02:45.512]                       else if (inherits(cond, "condition")) {
[17:02:45.512]                         if (!is.null(pattern)) {
[17:02:45.512]                           computeRestarts <- base::computeRestarts
[17:02:45.512]                           grepl <- base::grepl
[17:02:45.512]                           restarts <- computeRestarts(cond)
[17:02:45.512]                           for (restart in restarts) {
[17:02:45.512]                             name <- restart$name
[17:02:45.512]                             if (is.null(name)) 
[17:02:45.512]                               next
[17:02:45.512]                             if (!grepl(pattern, name)) 
[17:02:45.512]                               next
[17:02:45.512]                             invokeRestart(restart)
[17:02:45.512]                             muffled <- TRUE
[17:02:45.512]                             break
[17:02:45.512]                           }
[17:02:45.512]                         }
[17:02:45.512]                       }
[17:02:45.512]                       invisible(muffled)
[17:02:45.512]                     }
[17:02:45.512]                     muffleCondition(cond, pattern = "^muffle")
[17:02:45.512]                   }
[17:02:45.512]                 }
[17:02:45.512]             }
[17:02:45.512]         }))
[17:02:45.512]     }, error = function(ex) {
[17:02:45.512]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:45.512]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:45.512]                 ...future.rng), started = ...future.startTime, 
[17:02:45.512]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:45.512]             version = "1.8"), class = "FutureResult")
[17:02:45.512]     }, finally = {
[17:02:45.512]         if (!identical(...future.workdir, getwd())) 
[17:02:45.512]             setwd(...future.workdir)
[17:02:45.512]         {
[17:02:45.512]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:45.512]                 ...future.oldOptions$nwarnings <- NULL
[17:02:45.512]             }
[17:02:45.512]             base::options(...future.oldOptions)
[17:02:45.512]             if (.Platform$OS.type == "windows") {
[17:02:45.512]                 old_names <- names(...future.oldEnvVars)
[17:02:45.512]                 envs <- base::Sys.getenv()
[17:02:45.512]                 names <- names(envs)
[17:02:45.512]                 common <- intersect(names, old_names)
[17:02:45.512]                 added <- setdiff(names, old_names)
[17:02:45.512]                 removed <- setdiff(old_names, names)
[17:02:45.512]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:45.512]                   envs[common]]
[17:02:45.512]                 NAMES <- toupper(changed)
[17:02:45.512]                 args <- list()
[17:02:45.512]                 for (kk in seq_along(NAMES)) {
[17:02:45.512]                   name <- changed[[kk]]
[17:02:45.512]                   NAME <- NAMES[[kk]]
[17:02:45.512]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.512]                     next
[17:02:45.512]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.512]                 }
[17:02:45.512]                 NAMES <- toupper(added)
[17:02:45.512]                 for (kk in seq_along(NAMES)) {
[17:02:45.512]                   name <- added[[kk]]
[17:02:45.512]                   NAME <- NAMES[[kk]]
[17:02:45.512]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.512]                     next
[17:02:45.512]                   args[[name]] <- ""
[17:02:45.512]                 }
[17:02:45.512]                 NAMES <- toupper(removed)
[17:02:45.512]                 for (kk in seq_along(NAMES)) {
[17:02:45.512]                   name <- removed[[kk]]
[17:02:45.512]                   NAME <- NAMES[[kk]]
[17:02:45.512]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:45.512]                     next
[17:02:45.512]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:45.512]                 }
[17:02:45.512]                 if (length(args) > 0) 
[17:02:45.512]                   base::do.call(base::Sys.setenv, args = args)
[17:02:45.512]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:45.512]             }
[17:02:45.512]             else {
[17:02:45.512]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:45.512]             }
[17:02:45.512]             {
[17:02:45.512]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:45.512]                   0L) {
[17:02:45.512]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:45.512]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:45.512]                   base::options(opts)
[17:02:45.512]                 }
[17:02:45.512]                 {
[17:02:45.512]                   {
[17:02:45.512]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:45.512]                     NULL
[17:02:45.512]                   }
[17:02:45.512]                   options(future.plan = NULL)
[17:02:45.512]                   if (is.na(NA_character_)) 
[17:02:45.512]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:45.512]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:45.512]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:45.512]                     .init = FALSE)
[17:02:45.512]                 }
[17:02:45.512]             }
[17:02:45.512]         }
[17:02:45.512]     })
[17:02:45.512]     if (TRUE) {
[17:02:45.512]         base::sink(type = "output", split = FALSE)
[17:02:45.512]         if (TRUE) {
[17:02:45.512]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:45.512]         }
[17:02:45.512]         else {
[17:02:45.512]             ...future.result["stdout"] <- base::list(NULL)
[17:02:45.512]         }
[17:02:45.512]         base::close(...future.stdout)
[17:02:45.512]         ...future.stdout <- NULL
[17:02:45.512]     }
[17:02:45.512]     ...future.result$conditions <- ...future.conditions
[17:02:45.512]     ...future.result$finished <- base::Sys.time()
[17:02:45.512]     ...future.result
[17:02:45.512] }
[17:02:45.514] assign_globals() ...
[17:02:45.514] List of 1
[17:02:45.514]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:02:45.514]   .. ..@ .Data     :function (x)  
[17:02:45.514]   .. ..@ generic   : chr "my_fcn"
[17:02:45.514]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:02:45.514]   .. ..@ package   : chr ".GlobalEnv"
[17:02:45.514]   .. ..@ group     : list()
[17:02:45.514]   .. ..@ valueClass: chr(0) 
[17:02:45.514]   .. ..@ signature : chr "x"
[17:02:45.514]   .. ..@ default   : NULL
[17:02:45.514]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:02:45.514]  - attr(*, "where")=List of 1
[17:02:45.514]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:02:45.514]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:45.514]  - attr(*, "resolved")= logi FALSE
[17:02:45.514]  - attr(*, "total_size")= num 3936
[17:02:45.514]  - attr(*, "already-done")= logi TRUE
[17:02:45.520] - reassign environment for ‘my_fcn’
[17:02:45.520] - copied ‘my_fcn’ to environment
[17:02:45.520] assign_globals() ... done
[17:02:45.520] requestCore(): workers = 2
[17:02:45.522] MulticoreFuture started
[17:02:45.523] - Launch lazy future ... done
[17:02:45.523] run() for ‘MulticoreFuture’ ... done
[17:02:45.523] result() for MulticoreFuture ...
[17:02:45.524] plan(): Setting new future strategy stack:
[17:02:45.524] List of future strategies:
[17:02:45.524] 1. sequential:
[17:02:45.524]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:45.524]    - tweaked: FALSE
[17:02:45.524]    - call: NULL
[17:02:45.525] plan(): nbrOfWorkers() = 1
[17:02:45.527] plan(): Setting new future strategy stack:
[17:02:45.528] List of future strategies:
[17:02:45.528] 1. multicore:
[17:02:45.528]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:45.528]    - tweaked: FALSE
[17:02:45.528]    - call: plan(strategy)
[17:02:45.533] plan(): nbrOfWorkers() = 2
[17:02:45.546] result() for MulticoreFuture ...
[17:02:45.546] result() for MulticoreFuture ... done
[17:02:45.546] signalConditions() ...
[17:02:45.547]  - include = ‘immediateCondition’
[17:02:45.547]  - exclude = 
[17:02:45.547]  - resignal = FALSE
[17:02:45.547]  - Number of conditions: 1
[17:02:45.547] signalConditions() ... done
[17:02:45.547] result() for MulticoreFuture ... done
[17:02:45.547] result() for MulticoreFuture ...
[17:02:45.547] result() for MulticoreFuture ... done
[17:02:45.548] signalConditions() ...
[17:02:45.548]  - include = ‘immediateCondition’
[17:02:45.548]  - exclude = 
[17:02:45.548]  - resignal = FALSE
[17:02:45.548]  - Number of conditions: 1
[17:02:45.548] signalConditions() ... done
[17:02:45.548] Future state: ‘finished’
[17:02:45.549] result() for MulticoreFuture ...
[17:02:45.549] result() for MulticoreFuture ... done
[17:02:45.549] signalConditions() ...
[17:02:45.549]  - include = ‘condition’
[17:02:45.549]  - exclude = ‘immediateCondition’
[17:02:45.549]  - resignal = TRUE
[17:02:45.549]  - Number of conditions: 1
[17:02:45.549]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:45.549] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[17:02:45.550] plan(): Setting new future strategy stack:
[17:02:45.550] List of future strategies:
[17:02:45.550] 1. multisession:
[17:02:45.550]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:45.550]    - tweaked: FALSE
[17:02:45.550]    - call: plan(strategy)
[17:02:45.551] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:45.551] multisession:
[17:02:45.551] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:45.551] - tweaked: FALSE
[17:02:45.551] - call: plan(strategy)
[17:02:45.557] getGlobalsAndPackages() ...
[17:02:45.557] Not searching for globals
[17:02:45.557] - globals: [0] <none>
[17:02:45.557] getGlobalsAndPackages() ... DONE
[17:02:45.558] [local output] makeClusterPSOCK() ...
[17:02:45.604] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:45.605] [local output] Base port: 11767
[17:02:45.605] [local output] Getting setup options for 2 cluster nodes ...
[17:02:45.605] [local output]  - Node 1 of 2 ...
[17:02:45.606] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:45.606] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRqXkMF/worker.rank=1.parallelly.parent=44005.abe53fd49279.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpRqXkMF/worker.rank=1.parallelly.parent=44005.abe53fd49279.pid")'’
[17:02:45.797] - Possible to infer worker's PID: TRUE
[17:02:45.798] [local output] Rscript port: 11767

[17:02:45.798] [local output]  - Node 2 of 2 ...
[17:02:45.798] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:45.799] [local output] Rscript port: 11767

[17:02:45.799] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:45.799] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:45.800] [local output] Setting up PSOCK nodes in parallel
[17:02:45.800] List of 36
[17:02:45.800]  $ worker          : chr "localhost"
[17:02:45.800]   ..- attr(*, "localhost")= logi TRUE
[17:02:45.800]  $ master          : chr "localhost"
[17:02:45.800]  $ port            : int 11767
[17:02:45.800]  $ connectTimeout  : num 120
[17:02:45.800]  $ timeout         : num 2592000
[17:02:45.800]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:45.800]  $ homogeneous     : logi TRUE
[17:02:45.800]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:45.800]  $ rscript_envs    : NULL
[17:02:45.800]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:45.800]  $ rscript_startup : NULL
[17:02:45.800]  $ rscript_sh      : chr "sh"
[17:02:45.800]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:45.800]  $ methods         : logi TRUE
[17:02:45.800]  $ socketOptions   : chr "no-delay"
[17:02:45.800]  $ useXDR          : logi FALSE
[17:02:45.800]  $ outfile         : chr "/dev/null"
[17:02:45.800]  $ renice          : int NA
[17:02:45.800]  $ rshcmd          : NULL
[17:02:45.800]  $ user            : chr(0) 
[17:02:45.800]  $ revtunnel       : logi FALSE
[17:02:45.800]  $ rshlogfile      : NULL
[17:02:45.800]  $ rshopts         : chr(0) 
[17:02:45.800]  $ rank            : int 1
[17:02:45.800]  $ manual          : logi FALSE
[17:02:45.800]  $ dryrun          : logi FALSE
[17:02:45.800]  $ quiet           : logi FALSE
[17:02:45.800]  $ setup_strategy  : chr "parallel"
[17:02:45.800]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:45.800]  $ pidfile         : chr "/tmp/RtmpRqXkMF/worker.rank=1.parallelly.parent=44005.abe53fd49279.pid"
[17:02:45.800]  $ rshcmd_label    : NULL
[17:02:45.800]  $ rsh_call        : NULL
[17:02:45.800]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:45.800]  $ localMachine    : logi TRUE
[17:02:45.800]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:45.800]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:45.800]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:45.800]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:45.800]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:45.800]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:45.800]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:45.800]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:45.800]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:45.800]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:45.800]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:45.800]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:45.800]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:45.800]  $ arguments       :List of 28
[17:02:45.800]   ..$ worker          : chr "localhost"
[17:02:45.800]   ..$ master          : NULL
[17:02:45.800]   ..$ port            : int 11767
[17:02:45.800]   ..$ connectTimeout  : num 120
[17:02:45.800]   ..$ timeout         : num 2592000
[17:02:45.800]   ..$ rscript         : NULL
[17:02:45.800]   ..$ homogeneous     : NULL
[17:02:45.800]   ..$ rscript_args    : NULL
[17:02:45.800]   ..$ rscript_envs    : NULL
[17:02:45.800]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:45.800]   ..$ rscript_startup : NULL
[17:02:45.800]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:45.800]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:45.800]   ..$ methods         : logi TRUE
[17:02:45.800]   ..$ socketOptions   : chr "no-delay"
[17:02:45.800]   ..$ useXDR          : logi FALSE
[17:02:45.800]   ..$ outfile         : chr "/dev/null"
[17:02:45.800]   ..$ renice          : int NA
[17:02:45.800]   ..$ rshcmd          : NULL
[17:02:45.800]   ..$ user            : NULL
[17:02:45.800]   ..$ revtunnel       : logi NA
[17:02:45.800]   ..$ rshlogfile      : NULL
[17:02:45.800]   ..$ rshopts         : NULL
[17:02:45.800]   ..$ rank            : int 1
[17:02:45.800]   ..$ manual          : logi FALSE
[17:02:45.800]   ..$ dryrun          : logi FALSE
[17:02:45.800]   ..$ quiet           : logi FALSE
[17:02:45.800]   ..$ setup_strategy  : chr "parallel"
[17:02:45.800]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:45.817] [local output] System call to launch all workers:
[17:02:45.817] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRqXkMF/worker.rank=1.parallelly.parent=44005.abe53fd49279.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11767 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:45.817] [local output] Starting PSOCK main server
[17:02:45.823] [local output] Workers launched
[17:02:45.823] [local output] Waiting for workers to connect back
[17:02:45.823]  - [local output] 0 workers out of 2 ready
[17:02:46.065]  - [local output] 0 workers out of 2 ready
[17:02:46.065]  - [local output] 1 workers out of 2 ready
[17:02:46.069]  - [local output] 1 workers out of 2 ready
[17:02:46.070]  - [local output] 2 workers out of 2 ready
[17:02:46.070] [local output] Launching of workers completed
[17:02:46.070] [local output] Collecting session information from workers
[17:02:46.071] [local output]  - Worker #1 of 2
[17:02:46.072] [local output]  - Worker #2 of 2
[17:02:46.072] [local output] makeClusterPSOCK() ... done
[17:02:46.083] Packages needed by the future expression (n = 0): <none>
[17:02:46.083] Packages needed by future strategies (n = 0): <none>
[17:02:46.084] {
[17:02:46.084]     {
[17:02:46.084]         {
[17:02:46.084]             ...future.startTime <- base::Sys.time()
[17:02:46.084]             {
[17:02:46.084]                 {
[17:02:46.084]                   {
[17:02:46.084]                     {
[17:02:46.084]                       base::local({
[17:02:46.084]                         has_future <- base::requireNamespace("future", 
[17:02:46.084]                           quietly = TRUE)
[17:02:46.084]                         if (has_future) {
[17:02:46.084]                           ns <- base::getNamespace("future")
[17:02:46.084]                           version <- ns[[".package"]][["version"]]
[17:02:46.084]                           if (is.null(version)) 
[17:02:46.084]                             version <- utils::packageVersion("future")
[17:02:46.084]                         }
[17:02:46.084]                         else {
[17:02:46.084]                           version <- NULL
[17:02:46.084]                         }
[17:02:46.084]                         if (!has_future || version < "1.8.0") {
[17:02:46.084]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:46.084]                             "", base::R.version$version.string), 
[17:02:46.084]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:46.084]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:46.084]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:46.084]                               "release", "version")], collapse = " "), 
[17:02:46.084]                             hostname = base::Sys.info()[["nodename"]])
[17:02:46.084]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:46.084]                             info)
[17:02:46.084]                           info <- base::paste(info, collapse = "; ")
[17:02:46.084]                           if (!has_future) {
[17:02:46.084]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:46.084]                               info)
[17:02:46.084]                           }
[17:02:46.084]                           else {
[17:02:46.084]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:46.084]                               info, version)
[17:02:46.084]                           }
[17:02:46.084]                           base::stop(msg)
[17:02:46.084]                         }
[17:02:46.084]                       })
[17:02:46.084]                     }
[17:02:46.084]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:46.084]                     base::options(mc.cores = 1L)
[17:02:46.084]                   }
[17:02:46.084]                   ...future.strategy.old <- future::plan("list")
[17:02:46.084]                   options(future.plan = NULL)
[17:02:46.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:46.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:46.084]                 }
[17:02:46.084]                 ...future.workdir <- getwd()
[17:02:46.084]             }
[17:02:46.084]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:46.084]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:46.084]         }
[17:02:46.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:46.084]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:46.084]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:46.084]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:46.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:46.084]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:46.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:46.084]             base::names(...future.oldOptions))
[17:02:46.084]     }
[17:02:46.084]     if (FALSE) {
[17:02:46.084]     }
[17:02:46.084]     else {
[17:02:46.084]         if (TRUE) {
[17:02:46.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:46.084]                 open = "w")
[17:02:46.084]         }
[17:02:46.084]         else {
[17:02:46.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:46.084]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:46.084]         }
[17:02:46.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:46.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:46.084]             base::sink(type = "output", split = FALSE)
[17:02:46.084]             base::close(...future.stdout)
[17:02:46.084]         }, add = TRUE)
[17:02:46.084]     }
[17:02:46.084]     ...future.frame <- base::sys.nframe()
[17:02:46.084]     ...future.conditions <- base::list()
[17:02:46.084]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:46.084]     if (FALSE) {
[17:02:46.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:46.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:46.084]     }
[17:02:46.084]     ...future.result <- base::tryCatch({
[17:02:46.084]         base::withCallingHandlers({
[17:02:46.084]             ...future.value <- base::withVisible(base::local({
[17:02:46.084]                 ...future.makeSendCondition <- base::local({
[17:02:46.084]                   sendCondition <- NULL
[17:02:46.084]                   function(frame = 1L) {
[17:02:46.084]                     if (is.function(sendCondition)) 
[17:02:46.084]                       return(sendCondition)
[17:02:46.084]                     ns <- getNamespace("parallel")
[17:02:46.084]                     if (exists("sendData", mode = "function", 
[17:02:46.084]                       envir = ns)) {
[17:02:46.084]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:46.084]                         envir = ns)
[17:02:46.084]                       envir <- sys.frame(frame)
[17:02:46.084]                       master <- NULL
[17:02:46.084]                       while (!identical(envir, .GlobalEnv) && 
[17:02:46.084]                         !identical(envir, emptyenv())) {
[17:02:46.084]                         if (exists("master", mode = "list", envir = envir, 
[17:02:46.084]                           inherits = FALSE)) {
[17:02:46.084]                           master <- get("master", mode = "list", 
[17:02:46.084]                             envir = envir, inherits = FALSE)
[17:02:46.084]                           if (inherits(master, c("SOCKnode", 
[17:02:46.084]                             "SOCK0node"))) {
[17:02:46.084]                             sendCondition <<- function(cond) {
[17:02:46.084]                               data <- list(type = "VALUE", value = cond, 
[17:02:46.084]                                 success = TRUE)
[17:02:46.084]                               parallel_sendData(master, data)
[17:02:46.084]                             }
[17:02:46.084]                             return(sendCondition)
[17:02:46.084]                           }
[17:02:46.084]                         }
[17:02:46.084]                         frame <- frame + 1L
[17:02:46.084]                         envir <- sys.frame(frame)
[17:02:46.084]                       }
[17:02:46.084]                     }
[17:02:46.084]                     sendCondition <<- function(cond) NULL
[17:02:46.084]                   }
[17:02:46.084]                 })
[17:02:46.084]                 withCallingHandlers({
[17:02:46.084]                   NA
[17:02:46.084]                 }, immediateCondition = function(cond) {
[17:02:46.084]                   sendCondition <- ...future.makeSendCondition()
[17:02:46.084]                   sendCondition(cond)
[17:02:46.084]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.084]                   {
[17:02:46.084]                     inherits <- base::inherits
[17:02:46.084]                     invokeRestart <- base::invokeRestart
[17:02:46.084]                     is.null <- base::is.null
[17:02:46.084]                     muffled <- FALSE
[17:02:46.084]                     if (inherits(cond, "message")) {
[17:02:46.084]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:46.084]                       if (muffled) 
[17:02:46.084]                         invokeRestart("muffleMessage")
[17:02:46.084]                     }
[17:02:46.084]                     else if (inherits(cond, "warning")) {
[17:02:46.084]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:46.084]                       if (muffled) 
[17:02:46.084]                         invokeRestart("muffleWarning")
[17:02:46.084]                     }
[17:02:46.084]                     else if (inherits(cond, "condition")) {
[17:02:46.084]                       if (!is.null(pattern)) {
[17:02:46.084]                         computeRestarts <- base::computeRestarts
[17:02:46.084]                         grepl <- base::grepl
[17:02:46.084]                         restarts <- computeRestarts(cond)
[17:02:46.084]                         for (restart in restarts) {
[17:02:46.084]                           name <- restart$name
[17:02:46.084]                           if (is.null(name)) 
[17:02:46.084]                             next
[17:02:46.084]                           if (!grepl(pattern, name)) 
[17:02:46.084]                             next
[17:02:46.084]                           invokeRestart(restart)
[17:02:46.084]                           muffled <- TRUE
[17:02:46.084]                           break
[17:02:46.084]                         }
[17:02:46.084]                       }
[17:02:46.084]                     }
[17:02:46.084]                     invisible(muffled)
[17:02:46.084]                   }
[17:02:46.084]                   muffleCondition(cond)
[17:02:46.084]                 })
[17:02:46.084]             }))
[17:02:46.084]             future::FutureResult(value = ...future.value$value, 
[17:02:46.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:46.084]                   ...future.rng), globalenv = if (FALSE) 
[17:02:46.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:46.084]                     ...future.globalenv.names))
[17:02:46.084]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:46.084]         }, condition = base::local({
[17:02:46.084]             c <- base::c
[17:02:46.084]             inherits <- base::inherits
[17:02:46.084]             invokeRestart <- base::invokeRestart
[17:02:46.084]             length <- base::length
[17:02:46.084]             list <- base::list
[17:02:46.084]             seq.int <- base::seq.int
[17:02:46.084]             signalCondition <- base::signalCondition
[17:02:46.084]             sys.calls <- base::sys.calls
[17:02:46.084]             `[[` <- base::`[[`
[17:02:46.084]             `+` <- base::`+`
[17:02:46.084]             `<<-` <- base::`<<-`
[17:02:46.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:46.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:46.084]                   3L)]
[17:02:46.084]             }
[17:02:46.084]             function(cond) {
[17:02:46.084]                 is_error <- inherits(cond, "error")
[17:02:46.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:46.084]                   NULL)
[17:02:46.084]                 if (is_error) {
[17:02:46.084]                   sessionInformation <- function() {
[17:02:46.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:46.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:46.084]                       search = base::search(), system = base::Sys.info())
[17:02:46.084]                   }
[17:02:46.084]                   ...future.conditions[[length(...future.conditions) + 
[17:02:46.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:46.084]                     cond$call), session = sessionInformation(), 
[17:02:46.084]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:46.084]                   signalCondition(cond)
[17:02:46.084]                 }
[17:02:46.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:46.084]                 "immediateCondition"))) {
[17:02:46.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:46.084]                   ...future.conditions[[length(...future.conditions) + 
[17:02:46.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:46.084]                   if (TRUE && !signal) {
[17:02:46.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.084]                     {
[17:02:46.084]                       inherits <- base::inherits
[17:02:46.084]                       invokeRestart <- base::invokeRestart
[17:02:46.084]                       is.null <- base::is.null
[17:02:46.084]                       muffled <- FALSE
[17:02:46.084]                       if (inherits(cond, "message")) {
[17:02:46.084]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:46.084]                         if (muffled) 
[17:02:46.084]                           invokeRestart("muffleMessage")
[17:02:46.084]                       }
[17:02:46.084]                       else if (inherits(cond, "warning")) {
[17:02:46.084]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:46.084]                         if (muffled) 
[17:02:46.084]                           invokeRestart("muffleWarning")
[17:02:46.084]                       }
[17:02:46.084]                       else if (inherits(cond, "condition")) {
[17:02:46.084]                         if (!is.null(pattern)) {
[17:02:46.084]                           computeRestarts <- base::computeRestarts
[17:02:46.084]                           grepl <- base::grepl
[17:02:46.084]                           restarts <- computeRestarts(cond)
[17:02:46.084]                           for (restart in restarts) {
[17:02:46.084]                             name <- restart$name
[17:02:46.084]                             if (is.null(name)) 
[17:02:46.084]                               next
[17:02:46.084]                             if (!grepl(pattern, name)) 
[17:02:46.084]                               next
[17:02:46.084]                             invokeRestart(restart)
[17:02:46.084]                             muffled <- TRUE
[17:02:46.084]                             break
[17:02:46.084]                           }
[17:02:46.084]                         }
[17:02:46.084]                       }
[17:02:46.084]                       invisible(muffled)
[17:02:46.084]                     }
[17:02:46.084]                     muffleCondition(cond, pattern = "^muffle")
[17:02:46.084]                   }
[17:02:46.084]                 }
[17:02:46.084]                 else {
[17:02:46.084]                   if (TRUE) {
[17:02:46.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.084]                     {
[17:02:46.084]                       inherits <- base::inherits
[17:02:46.084]                       invokeRestart <- base::invokeRestart
[17:02:46.084]                       is.null <- base::is.null
[17:02:46.084]                       muffled <- FALSE
[17:02:46.084]                       if (inherits(cond, "message")) {
[17:02:46.084]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:46.084]                         if (muffled) 
[17:02:46.084]                           invokeRestart("muffleMessage")
[17:02:46.084]                       }
[17:02:46.084]                       else if (inherits(cond, "warning")) {
[17:02:46.084]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:46.084]                         if (muffled) 
[17:02:46.084]                           invokeRestart("muffleWarning")
[17:02:46.084]                       }
[17:02:46.084]                       else if (inherits(cond, "condition")) {
[17:02:46.084]                         if (!is.null(pattern)) {
[17:02:46.084]                           computeRestarts <- base::computeRestarts
[17:02:46.084]                           grepl <- base::grepl
[17:02:46.084]                           restarts <- computeRestarts(cond)
[17:02:46.084]                           for (restart in restarts) {
[17:02:46.084]                             name <- restart$name
[17:02:46.084]                             if (is.null(name)) 
[17:02:46.084]                               next
[17:02:46.084]                             if (!grepl(pattern, name)) 
[17:02:46.084]                               next
[17:02:46.084]                             invokeRestart(restart)
[17:02:46.084]                             muffled <- TRUE
[17:02:46.084]                             break
[17:02:46.084]                           }
[17:02:46.084]                         }
[17:02:46.084]                       }
[17:02:46.084]                       invisible(muffled)
[17:02:46.084]                     }
[17:02:46.084]                     muffleCondition(cond, pattern = "^muffle")
[17:02:46.084]                   }
[17:02:46.084]                 }
[17:02:46.084]             }
[17:02:46.084]         }))
[17:02:46.084]     }, error = function(ex) {
[17:02:46.084]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:46.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:46.084]                 ...future.rng), started = ...future.startTime, 
[17:02:46.084]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:46.084]             version = "1.8"), class = "FutureResult")
[17:02:46.084]     }, finally = {
[17:02:46.084]         if (!identical(...future.workdir, getwd())) 
[17:02:46.084]             setwd(...future.workdir)
[17:02:46.084]         {
[17:02:46.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:46.084]                 ...future.oldOptions$nwarnings <- NULL
[17:02:46.084]             }
[17:02:46.084]             base::options(...future.oldOptions)
[17:02:46.084]             if (.Platform$OS.type == "windows") {
[17:02:46.084]                 old_names <- names(...future.oldEnvVars)
[17:02:46.084]                 envs <- base::Sys.getenv()
[17:02:46.084]                 names <- names(envs)
[17:02:46.084]                 common <- intersect(names, old_names)
[17:02:46.084]                 added <- setdiff(names, old_names)
[17:02:46.084]                 removed <- setdiff(old_names, names)
[17:02:46.084]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:46.084]                   envs[common]]
[17:02:46.084]                 NAMES <- toupper(changed)
[17:02:46.084]                 args <- list()
[17:02:46.084]                 for (kk in seq_along(NAMES)) {
[17:02:46.084]                   name <- changed[[kk]]
[17:02:46.084]                   NAME <- NAMES[[kk]]
[17:02:46.084]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.084]                     next
[17:02:46.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:46.084]                 }
[17:02:46.084]                 NAMES <- toupper(added)
[17:02:46.084]                 for (kk in seq_along(NAMES)) {
[17:02:46.084]                   name <- added[[kk]]
[17:02:46.084]                   NAME <- NAMES[[kk]]
[17:02:46.084]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.084]                     next
[17:02:46.084]                   args[[name]] <- ""
[17:02:46.084]                 }
[17:02:46.084]                 NAMES <- toupper(removed)
[17:02:46.084]                 for (kk in seq_along(NAMES)) {
[17:02:46.084]                   name <- removed[[kk]]
[17:02:46.084]                   NAME <- NAMES[[kk]]
[17:02:46.084]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.084]                     next
[17:02:46.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:46.084]                 }
[17:02:46.084]                 if (length(args) > 0) 
[17:02:46.084]                   base::do.call(base::Sys.setenv, args = args)
[17:02:46.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:46.084]             }
[17:02:46.084]             else {
[17:02:46.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:46.084]             }
[17:02:46.084]             {
[17:02:46.084]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:46.084]                   0L) {
[17:02:46.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:46.084]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:46.084]                   base::options(opts)
[17:02:46.084]                 }
[17:02:46.084]                 {
[17:02:46.084]                   {
[17:02:46.084]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:46.084]                     NULL
[17:02:46.084]                   }
[17:02:46.084]                   options(future.plan = NULL)
[17:02:46.084]                   if (is.na(NA_character_)) 
[17:02:46.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:46.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:46.084]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:46.084]                     .init = FALSE)
[17:02:46.084]                 }
[17:02:46.084]             }
[17:02:46.084]         }
[17:02:46.084]     })
[17:02:46.084]     if (TRUE) {
[17:02:46.084]         base::sink(type = "output", split = FALSE)
[17:02:46.084]         if (TRUE) {
[17:02:46.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:46.084]         }
[17:02:46.084]         else {
[17:02:46.084]             ...future.result["stdout"] <- base::list(NULL)
[17:02:46.084]         }
[17:02:46.084]         base::close(...future.stdout)
[17:02:46.084]         ...future.stdout <- NULL
[17:02:46.084]     }
[17:02:46.084]     ...future.result$conditions <- ...future.conditions
[17:02:46.084]     ...future.result$finished <- base::Sys.time()
[17:02:46.084]     ...future.result
[17:02:46.084] }
[17:02:46.136] MultisessionFuture started
[17:02:46.136] result() for ClusterFuture ...
[17:02:46.136] receiveMessageFromWorker() for ClusterFuture ...
[17:02:46.137] - Validating connection of MultisessionFuture
[17:02:46.167] - received message: FutureResult
[17:02:46.168] - Received FutureResult
[17:02:46.168] - Erased future from FutureRegistry
[17:02:46.168] result() for ClusterFuture ...
[17:02:46.168] - result already collected: FutureResult
[17:02:46.168] result() for ClusterFuture ... done
[17:02:46.168] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:46.169] result() for ClusterFuture ... done
[17:02:46.169] result() for ClusterFuture ...
[17:02:46.169] - result already collected: FutureResult
[17:02:46.169] result() for ClusterFuture ... done
[17:02:46.169] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:46.173] plan(): nbrOfWorkers() = 2
[17:02:46.173] getGlobalsAndPackages() ...
[17:02:46.173] Searching for globals...
[17:02:46.176] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:02:46.176] Searching for globals ... DONE
[17:02:46.176] Resolving globals: FALSE
[17:02:46.177] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:02:46.177] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:02:46.177] - globals: [1] ‘my_fcn’
[17:02:46.178] 
[17:02:46.178] getGlobalsAndPackages() ... DONE
[17:02:46.178] run() for ‘Future’ ...
[17:02:46.178] - state: ‘created’
[17:02:46.178] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:46.193] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:46.193] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:46.193]   - Field: ‘node’
[17:02:46.193]   - Field: ‘label’
[17:02:46.193]   - Field: ‘local’
[17:02:46.193]   - Field: ‘owner’
[17:02:46.193]   - Field: ‘envir’
[17:02:46.193]   - Field: ‘workers’
[17:02:46.193]   - Field: ‘packages’
[17:02:46.194]   - Field: ‘gc’
[17:02:46.194]   - Field: ‘conditions’
[17:02:46.194]   - Field: ‘persistent’
[17:02:46.194]   - Field: ‘expr’
[17:02:46.194]   - Field: ‘uuid’
[17:02:46.194]   - Field: ‘seed’
[17:02:46.194]   - Field: ‘version’
[17:02:46.194]   - Field: ‘result’
[17:02:46.194]   - Field: ‘asynchronous’
[17:02:46.194]   - Field: ‘calls’
[17:02:46.195]   - Field: ‘globals’
[17:02:46.195]   - Field: ‘stdout’
[17:02:46.195]   - Field: ‘earlySignal’
[17:02:46.195]   - Field: ‘lazy’
[17:02:46.195]   - Field: ‘state’
[17:02:46.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:46.195] - Launch lazy future ...
[17:02:46.196] Packages needed by the future expression (n = 0): <none>
[17:02:46.196] Packages needed by future strategies (n = 0): <none>
[17:02:46.196] {
[17:02:46.196]     {
[17:02:46.196]         {
[17:02:46.196]             ...future.startTime <- base::Sys.time()
[17:02:46.196]             {
[17:02:46.196]                 {
[17:02:46.196]                   {
[17:02:46.196]                     {
[17:02:46.196]                       base::local({
[17:02:46.196]                         has_future <- base::requireNamespace("future", 
[17:02:46.196]                           quietly = TRUE)
[17:02:46.196]                         if (has_future) {
[17:02:46.196]                           ns <- base::getNamespace("future")
[17:02:46.196]                           version <- ns[[".package"]][["version"]]
[17:02:46.196]                           if (is.null(version)) 
[17:02:46.196]                             version <- utils::packageVersion("future")
[17:02:46.196]                         }
[17:02:46.196]                         else {
[17:02:46.196]                           version <- NULL
[17:02:46.196]                         }
[17:02:46.196]                         if (!has_future || version < "1.8.0") {
[17:02:46.196]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:46.196]                             "", base::R.version$version.string), 
[17:02:46.196]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:46.196]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:46.196]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:46.196]                               "release", "version")], collapse = " "), 
[17:02:46.196]                             hostname = base::Sys.info()[["nodename"]])
[17:02:46.196]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:46.196]                             info)
[17:02:46.196]                           info <- base::paste(info, collapse = "; ")
[17:02:46.196]                           if (!has_future) {
[17:02:46.196]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:46.196]                               info)
[17:02:46.196]                           }
[17:02:46.196]                           else {
[17:02:46.196]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:46.196]                               info, version)
[17:02:46.196]                           }
[17:02:46.196]                           base::stop(msg)
[17:02:46.196]                         }
[17:02:46.196]                       })
[17:02:46.196]                     }
[17:02:46.196]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:46.196]                     base::options(mc.cores = 1L)
[17:02:46.196]                   }
[17:02:46.196]                   ...future.strategy.old <- future::plan("list")
[17:02:46.196]                   options(future.plan = NULL)
[17:02:46.196]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:46.196]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:46.196]                 }
[17:02:46.196]                 ...future.workdir <- getwd()
[17:02:46.196]             }
[17:02:46.196]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:46.196]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:46.196]         }
[17:02:46.196]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:46.196]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:46.196]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:46.196]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:46.196]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:46.196]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:46.196]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:46.196]             base::names(...future.oldOptions))
[17:02:46.196]     }
[17:02:46.196]     if (FALSE) {
[17:02:46.196]     }
[17:02:46.196]     else {
[17:02:46.196]         if (TRUE) {
[17:02:46.196]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:46.196]                 open = "w")
[17:02:46.196]         }
[17:02:46.196]         else {
[17:02:46.196]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:46.196]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:46.196]         }
[17:02:46.196]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:46.196]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:46.196]             base::sink(type = "output", split = FALSE)
[17:02:46.196]             base::close(...future.stdout)
[17:02:46.196]         }, add = TRUE)
[17:02:46.196]     }
[17:02:46.196]     ...future.frame <- base::sys.nframe()
[17:02:46.196]     ...future.conditions <- base::list()
[17:02:46.196]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:46.196]     if (FALSE) {
[17:02:46.196]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:46.196]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:46.196]     }
[17:02:46.196]     ...future.result <- base::tryCatch({
[17:02:46.196]         base::withCallingHandlers({
[17:02:46.196]             ...future.value <- base::withVisible(base::local({
[17:02:46.196]                 ...future.makeSendCondition <- base::local({
[17:02:46.196]                   sendCondition <- NULL
[17:02:46.196]                   function(frame = 1L) {
[17:02:46.196]                     if (is.function(sendCondition)) 
[17:02:46.196]                       return(sendCondition)
[17:02:46.196]                     ns <- getNamespace("parallel")
[17:02:46.196]                     if (exists("sendData", mode = "function", 
[17:02:46.196]                       envir = ns)) {
[17:02:46.196]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:46.196]                         envir = ns)
[17:02:46.196]                       envir <- sys.frame(frame)
[17:02:46.196]                       master <- NULL
[17:02:46.196]                       while (!identical(envir, .GlobalEnv) && 
[17:02:46.196]                         !identical(envir, emptyenv())) {
[17:02:46.196]                         if (exists("master", mode = "list", envir = envir, 
[17:02:46.196]                           inherits = FALSE)) {
[17:02:46.196]                           master <- get("master", mode = "list", 
[17:02:46.196]                             envir = envir, inherits = FALSE)
[17:02:46.196]                           if (inherits(master, c("SOCKnode", 
[17:02:46.196]                             "SOCK0node"))) {
[17:02:46.196]                             sendCondition <<- function(cond) {
[17:02:46.196]                               data <- list(type = "VALUE", value = cond, 
[17:02:46.196]                                 success = TRUE)
[17:02:46.196]                               parallel_sendData(master, data)
[17:02:46.196]                             }
[17:02:46.196]                             return(sendCondition)
[17:02:46.196]                           }
[17:02:46.196]                         }
[17:02:46.196]                         frame <- frame + 1L
[17:02:46.196]                         envir <- sys.frame(frame)
[17:02:46.196]                       }
[17:02:46.196]                     }
[17:02:46.196]                     sendCondition <<- function(cond) NULL
[17:02:46.196]                   }
[17:02:46.196]                 })
[17:02:46.196]                 withCallingHandlers({
[17:02:46.196]                   {
[17:02:46.196]                     my_fcn
[17:02:46.196]                   }
[17:02:46.196]                 }, immediateCondition = function(cond) {
[17:02:46.196]                   sendCondition <- ...future.makeSendCondition()
[17:02:46.196]                   sendCondition(cond)
[17:02:46.196]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.196]                   {
[17:02:46.196]                     inherits <- base::inherits
[17:02:46.196]                     invokeRestart <- base::invokeRestart
[17:02:46.196]                     is.null <- base::is.null
[17:02:46.196]                     muffled <- FALSE
[17:02:46.196]                     if (inherits(cond, "message")) {
[17:02:46.196]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:46.196]                       if (muffled) 
[17:02:46.196]                         invokeRestart("muffleMessage")
[17:02:46.196]                     }
[17:02:46.196]                     else if (inherits(cond, "warning")) {
[17:02:46.196]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:46.196]                       if (muffled) 
[17:02:46.196]                         invokeRestart("muffleWarning")
[17:02:46.196]                     }
[17:02:46.196]                     else if (inherits(cond, "condition")) {
[17:02:46.196]                       if (!is.null(pattern)) {
[17:02:46.196]                         computeRestarts <- base::computeRestarts
[17:02:46.196]                         grepl <- base::grepl
[17:02:46.196]                         restarts <- computeRestarts(cond)
[17:02:46.196]                         for (restart in restarts) {
[17:02:46.196]                           name <- restart$name
[17:02:46.196]                           if (is.null(name)) 
[17:02:46.196]                             next
[17:02:46.196]                           if (!grepl(pattern, name)) 
[17:02:46.196]                             next
[17:02:46.196]                           invokeRestart(restart)
[17:02:46.196]                           muffled <- TRUE
[17:02:46.196]                           break
[17:02:46.196]                         }
[17:02:46.196]                       }
[17:02:46.196]                     }
[17:02:46.196]                     invisible(muffled)
[17:02:46.196]                   }
[17:02:46.196]                   muffleCondition(cond)
[17:02:46.196]                 })
[17:02:46.196]             }))
[17:02:46.196]             future::FutureResult(value = ...future.value$value, 
[17:02:46.196]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:46.196]                   ...future.rng), globalenv = if (FALSE) 
[17:02:46.196]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:46.196]                     ...future.globalenv.names))
[17:02:46.196]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:46.196]         }, condition = base::local({
[17:02:46.196]             c <- base::c
[17:02:46.196]             inherits <- base::inherits
[17:02:46.196]             invokeRestart <- base::invokeRestart
[17:02:46.196]             length <- base::length
[17:02:46.196]             list <- base::list
[17:02:46.196]             seq.int <- base::seq.int
[17:02:46.196]             signalCondition <- base::signalCondition
[17:02:46.196]             sys.calls <- base::sys.calls
[17:02:46.196]             `[[` <- base::`[[`
[17:02:46.196]             `+` <- base::`+`
[17:02:46.196]             `<<-` <- base::`<<-`
[17:02:46.196]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:46.196]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:46.196]                   3L)]
[17:02:46.196]             }
[17:02:46.196]             function(cond) {
[17:02:46.196]                 is_error <- inherits(cond, "error")
[17:02:46.196]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:46.196]                   NULL)
[17:02:46.196]                 if (is_error) {
[17:02:46.196]                   sessionInformation <- function() {
[17:02:46.196]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:46.196]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:46.196]                       search = base::search(), system = base::Sys.info())
[17:02:46.196]                   }
[17:02:46.196]                   ...future.conditions[[length(...future.conditions) + 
[17:02:46.196]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:46.196]                     cond$call), session = sessionInformation(), 
[17:02:46.196]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:46.196]                   signalCondition(cond)
[17:02:46.196]                 }
[17:02:46.196]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:46.196]                 "immediateCondition"))) {
[17:02:46.196]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:46.196]                   ...future.conditions[[length(...future.conditions) + 
[17:02:46.196]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:46.196]                   if (TRUE && !signal) {
[17:02:46.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.196]                     {
[17:02:46.196]                       inherits <- base::inherits
[17:02:46.196]                       invokeRestart <- base::invokeRestart
[17:02:46.196]                       is.null <- base::is.null
[17:02:46.196]                       muffled <- FALSE
[17:02:46.196]                       if (inherits(cond, "message")) {
[17:02:46.196]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:46.196]                         if (muffled) 
[17:02:46.196]                           invokeRestart("muffleMessage")
[17:02:46.196]                       }
[17:02:46.196]                       else if (inherits(cond, "warning")) {
[17:02:46.196]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:46.196]                         if (muffled) 
[17:02:46.196]                           invokeRestart("muffleWarning")
[17:02:46.196]                       }
[17:02:46.196]                       else if (inherits(cond, "condition")) {
[17:02:46.196]                         if (!is.null(pattern)) {
[17:02:46.196]                           computeRestarts <- base::computeRestarts
[17:02:46.196]                           grepl <- base::grepl
[17:02:46.196]                           restarts <- computeRestarts(cond)
[17:02:46.196]                           for (restart in restarts) {
[17:02:46.196]                             name <- restart$name
[17:02:46.196]                             if (is.null(name)) 
[17:02:46.196]                               next
[17:02:46.196]                             if (!grepl(pattern, name)) 
[17:02:46.196]                               next
[17:02:46.196]                             invokeRestart(restart)
[17:02:46.196]                             muffled <- TRUE
[17:02:46.196]                             break
[17:02:46.196]                           }
[17:02:46.196]                         }
[17:02:46.196]                       }
[17:02:46.196]                       invisible(muffled)
[17:02:46.196]                     }
[17:02:46.196]                     muffleCondition(cond, pattern = "^muffle")
[17:02:46.196]                   }
[17:02:46.196]                 }
[17:02:46.196]                 else {
[17:02:46.196]                   if (TRUE) {
[17:02:46.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.196]                     {
[17:02:46.196]                       inherits <- base::inherits
[17:02:46.196]                       invokeRestart <- base::invokeRestart
[17:02:46.196]                       is.null <- base::is.null
[17:02:46.196]                       muffled <- FALSE
[17:02:46.196]                       if (inherits(cond, "message")) {
[17:02:46.196]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:46.196]                         if (muffled) 
[17:02:46.196]                           invokeRestart("muffleMessage")
[17:02:46.196]                       }
[17:02:46.196]                       else if (inherits(cond, "warning")) {
[17:02:46.196]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:46.196]                         if (muffled) 
[17:02:46.196]                           invokeRestart("muffleWarning")
[17:02:46.196]                       }
[17:02:46.196]                       else if (inherits(cond, "condition")) {
[17:02:46.196]                         if (!is.null(pattern)) {
[17:02:46.196]                           computeRestarts <- base::computeRestarts
[17:02:46.196]                           grepl <- base::grepl
[17:02:46.196]                           restarts <- computeRestarts(cond)
[17:02:46.196]                           for (restart in restarts) {
[17:02:46.196]                             name <- restart$name
[17:02:46.196]                             if (is.null(name)) 
[17:02:46.196]                               next
[17:02:46.196]                             if (!grepl(pattern, name)) 
[17:02:46.196]                               next
[17:02:46.196]                             invokeRestart(restart)
[17:02:46.196]                             muffled <- TRUE
[17:02:46.196]                             break
[17:02:46.196]                           }
[17:02:46.196]                         }
[17:02:46.196]                       }
[17:02:46.196]                       invisible(muffled)
[17:02:46.196]                     }
[17:02:46.196]                     muffleCondition(cond, pattern = "^muffle")
[17:02:46.196]                   }
[17:02:46.196]                 }
[17:02:46.196]             }
[17:02:46.196]         }))
[17:02:46.196]     }, error = function(ex) {
[17:02:46.196]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:46.196]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:46.196]                 ...future.rng), started = ...future.startTime, 
[17:02:46.196]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:46.196]             version = "1.8"), class = "FutureResult")
[17:02:46.196]     }, finally = {
[17:02:46.196]         if (!identical(...future.workdir, getwd())) 
[17:02:46.196]             setwd(...future.workdir)
[17:02:46.196]         {
[17:02:46.196]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:46.196]                 ...future.oldOptions$nwarnings <- NULL
[17:02:46.196]             }
[17:02:46.196]             base::options(...future.oldOptions)
[17:02:46.196]             if (.Platform$OS.type == "windows") {
[17:02:46.196]                 old_names <- names(...future.oldEnvVars)
[17:02:46.196]                 envs <- base::Sys.getenv()
[17:02:46.196]                 names <- names(envs)
[17:02:46.196]                 common <- intersect(names, old_names)
[17:02:46.196]                 added <- setdiff(names, old_names)
[17:02:46.196]                 removed <- setdiff(old_names, names)
[17:02:46.196]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:46.196]                   envs[common]]
[17:02:46.196]                 NAMES <- toupper(changed)
[17:02:46.196]                 args <- list()
[17:02:46.196]                 for (kk in seq_along(NAMES)) {
[17:02:46.196]                   name <- changed[[kk]]
[17:02:46.196]                   NAME <- NAMES[[kk]]
[17:02:46.196]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.196]                     next
[17:02:46.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:46.196]                 }
[17:02:46.196]                 NAMES <- toupper(added)
[17:02:46.196]                 for (kk in seq_along(NAMES)) {
[17:02:46.196]                   name <- added[[kk]]
[17:02:46.196]                   NAME <- NAMES[[kk]]
[17:02:46.196]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.196]                     next
[17:02:46.196]                   args[[name]] <- ""
[17:02:46.196]                 }
[17:02:46.196]                 NAMES <- toupper(removed)
[17:02:46.196]                 for (kk in seq_along(NAMES)) {
[17:02:46.196]                   name <- removed[[kk]]
[17:02:46.196]                   NAME <- NAMES[[kk]]
[17:02:46.196]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.196]                     next
[17:02:46.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:46.196]                 }
[17:02:46.196]                 if (length(args) > 0) 
[17:02:46.196]                   base::do.call(base::Sys.setenv, args = args)
[17:02:46.196]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:46.196]             }
[17:02:46.196]             else {
[17:02:46.196]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:46.196]             }
[17:02:46.196]             {
[17:02:46.196]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:46.196]                   0L) {
[17:02:46.196]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:46.196]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:46.196]                   base::options(opts)
[17:02:46.196]                 }
[17:02:46.196]                 {
[17:02:46.196]                   {
[17:02:46.196]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:46.196]                     NULL
[17:02:46.196]                   }
[17:02:46.196]                   options(future.plan = NULL)
[17:02:46.196]                   if (is.na(NA_character_)) 
[17:02:46.196]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:46.196]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:46.196]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:46.196]                     .init = FALSE)
[17:02:46.196]                 }
[17:02:46.196]             }
[17:02:46.196]         }
[17:02:46.196]     })
[17:02:46.196]     if (TRUE) {
[17:02:46.196]         base::sink(type = "output", split = FALSE)
[17:02:46.196]         if (TRUE) {
[17:02:46.196]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:46.196]         }
[17:02:46.196]         else {
[17:02:46.196]             ...future.result["stdout"] <- base::list(NULL)
[17:02:46.196]         }
[17:02:46.196]         base::close(...future.stdout)
[17:02:46.196]         ...future.stdout <- NULL
[17:02:46.196]     }
[17:02:46.196]     ...future.result$conditions <- ...future.conditions
[17:02:46.196]     ...future.result$finished <- base::Sys.time()
[17:02:46.196]     ...future.result
[17:02:46.196] }
[17:02:46.199] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:02:46.199] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:02:46.200] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:02:46.200] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:02:46.201] MultisessionFuture started
[17:02:46.201] - Launch lazy future ... done
[17:02:46.201] run() for ‘MultisessionFuture’ ... done
[17:02:46.201] result() for ClusterFuture ...
[17:02:46.201] receiveMessageFromWorker() for ClusterFuture ...
[17:02:46.202] - Validating connection of MultisessionFuture
[17:02:46.203] - received message: FutureResult
[17:02:46.203] - Received FutureResult
[17:02:46.203] - Erased future from FutureRegistry
[17:02:46.203] result() for ClusterFuture ...
[17:02:46.203] - result already collected: FutureResult
[17:02:46.203] result() for ClusterFuture ... done
[17:02:46.204] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:46.204] result() for ClusterFuture ... done
[17:02:46.204] result() for ClusterFuture ...
[17:02:46.204] - result already collected: FutureResult
[17:02:46.204] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x5603a9e64f50>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:02:46.204] getGlobalsAndPackages() ...
[17:02:46.205] Searching for globals...
[17:02:46.207] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:02:46.207] Searching for globals ... DONE
[17:02:46.208] Resolving globals: FALSE
[17:02:46.208] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:02:46.209] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:02:46.209] - globals: [1] ‘my_fcn’
[17:02:46.209] 
[17:02:46.209] getGlobalsAndPackages() ... DONE
[17:02:46.209] run() for ‘Future’ ...
[17:02:46.209] - state: ‘created’
[17:02:46.209] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:46.224] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:46.224] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:46.224]   - Field: ‘node’
[17:02:46.224]   - Field: ‘label’
[17:02:46.224]   - Field: ‘local’
[17:02:46.224]   - Field: ‘owner’
[17:02:46.224]   - Field: ‘envir’
[17:02:46.224]   - Field: ‘workers’
[17:02:46.224]   - Field: ‘packages’
[17:02:46.225]   - Field: ‘gc’
[17:02:46.225]   - Field: ‘conditions’
[17:02:46.225]   - Field: ‘persistent’
[17:02:46.225]   - Field: ‘expr’
[17:02:46.225]   - Field: ‘uuid’
[17:02:46.225]   - Field: ‘seed’
[17:02:46.225]   - Field: ‘version’
[17:02:46.225]   - Field: ‘result’
[17:02:46.225]   - Field: ‘asynchronous’
[17:02:46.226]   - Field: ‘calls’
[17:02:46.226]   - Field: ‘globals’
[17:02:46.226]   - Field: ‘stdout’
[17:02:46.226]   - Field: ‘earlySignal’
[17:02:46.226]   - Field: ‘lazy’
[17:02:46.226]   - Field: ‘state’
[17:02:46.226] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:46.226] - Launch lazy future ...
[17:02:46.227] Packages needed by the future expression (n = 0): <none>
[17:02:46.227] Packages needed by future strategies (n = 0): <none>
[17:02:46.227] {
[17:02:46.227]     {
[17:02:46.227]         {
[17:02:46.227]             ...future.startTime <- base::Sys.time()
[17:02:46.227]             {
[17:02:46.227]                 {
[17:02:46.227]                   {
[17:02:46.227]                     {
[17:02:46.227]                       base::local({
[17:02:46.227]                         has_future <- base::requireNamespace("future", 
[17:02:46.227]                           quietly = TRUE)
[17:02:46.227]                         if (has_future) {
[17:02:46.227]                           ns <- base::getNamespace("future")
[17:02:46.227]                           version <- ns[[".package"]][["version"]]
[17:02:46.227]                           if (is.null(version)) 
[17:02:46.227]                             version <- utils::packageVersion("future")
[17:02:46.227]                         }
[17:02:46.227]                         else {
[17:02:46.227]                           version <- NULL
[17:02:46.227]                         }
[17:02:46.227]                         if (!has_future || version < "1.8.0") {
[17:02:46.227]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:46.227]                             "", base::R.version$version.string), 
[17:02:46.227]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:46.227]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:46.227]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:46.227]                               "release", "version")], collapse = " "), 
[17:02:46.227]                             hostname = base::Sys.info()[["nodename"]])
[17:02:46.227]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:46.227]                             info)
[17:02:46.227]                           info <- base::paste(info, collapse = "; ")
[17:02:46.227]                           if (!has_future) {
[17:02:46.227]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:46.227]                               info)
[17:02:46.227]                           }
[17:02:46.227]                           else {
[17:02:46.227]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:46.227]                               info, version)
[17:02:46.227]                           }
[17:02:46.227]                           base::stop(msg)
[17:02:46.227]                         }
[17:02:46.227]                       })
[17:02:46.227]                     }
[17:02:46.227]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:46.227]                     base::options(mc.cores = 1L)
[17:02:46.227]                   }
[17:02:46.227]                   ...future.strategy.old <- future::plan("list")
[17:02:46.227]                   options(future.plan = NULL)
[17:02:46.227]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:46.227]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:46.227]                 }
[17:02:46.227]                 ...future.workdir <- getwd()
[17:02:46.227]             }
[17:02:46.227]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:46.227]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:46.227]         }
[17:02:46.227]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:46.227]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:46.227]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:46.227]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:46.227]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:46.227]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:46.227]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:46.227]             base::names(...future.oldOptions))
[17:02:46.227]     }
[17:02:46.227]     if (FALSE) {
[17:02:46.227]     }
[17:02:46.227]     else {
[17:02:46.227]         if (TRUE) {
[17:02:46.227]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:46.227]                 open = "w")
[17:02:46.227]         }
[17:02:46.227]         else {
[17:02:46.227]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:46.227]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:46.227]         }
[17:02:46.227]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:46.227]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:46.227]             base::sink(type = "output", split = FALSE)
[17:02:46.227]             base::close(...future.stdout)
[17:02:46.227]         }, add = TRUE)
[17:02:46.227]     }
[17:02:46.227]     ...future.frame <- base::sys.nframe()
[17:02:46.227]     ...future.conditions <- base::list()
[17:02:46.227]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:46.227]     if (FALSE) {
[17:02:46.227]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:46.227]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:46.227]     }
[17:02:46.227]     ...future.result <- base::tryCatch({
[17:02:46.227]         base::withCallingHandlers({
[17:02:46.227]             ...future.value <- base::withVisible(base::local({
[17:02:46.227]                 ...future.makeSendCondition <- base::local({
[17:02:46.227]                   sendCondition <- NULL
[17:02:46.227]                   function(frame = 1L) {
[17:02:46.227]                     if (is.function(sendCondition)) 
[17:02:46.227]                       return(sendCondition)
[17:02:46.227]                     ns <- getNamespace("parallel")
[17:02:46.227]                     if (exists("sendData", mode = "function", 
[17:02:46.227]                       envir = ns)) {
[17:02:46.227]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:46.227]                         envir = ns)
[17:02:46.227]                       envir <- sys.frame(frame)
[17:02:46.227]                       master <- NULL
[17:02:46.227]                       while (!identical(envir, .GlobalEnv) && 
[17:02:46.227]                         !identical(envir, emptyenv())) {
[17:02:46.227]                         if (exists("master", mode = "list", envir = envir, 
[17:02:46.227]                           inherits = FALSE)) {
[17:02:46.227]                           master <- get("master", mode = "list", 
[17:02:46.227]                             envir = envir, inherits = FALSE)
[17:02:46.227]                           if (inherits(master, c("SOCKnode", 
[17:02:46.227]                             "SOCK0node"))) {
[17:02:46.227]                             sendCondition <<- function(cond) {
[17:02:46.227]                               data <- list(type = "VALUE", value = cond, 
[17:02:46.227]                                 success = TRUE)
[17:02:46.227]                               parallel_sendData(master, data)
[17:02:46.227]                             }
[17:02:46.227]                             return(sendCondition)
[17:02:46.227]                           }
[17:02:46.227]                         }
[17:02:46.227]                         frame <- frame + 1L
[17:02:46.227]                         envir <- sys.frame(frame)
[17:02:46.227]                       }
[17:02:46.227]                     }
[17:02:46.227]                     sendCondition <<- function(cond) NULL
[17:02:46.227]                   }
[17:02:46.227]                 })
[17:02:46.227]                 withCallingHandlers({
[17:02:46.227]                   {
[17:02:46.227]                     my_fcn(3)
[17:02:46.227]                   }
[17:02:46.227]                 }, immediateCondition = function(cond) {
[17:02:46.227]                   sendCondition <- ...future.makeSendCondition()
[17:02:46.227]                   sendCondition(cond)
[17:02:46.227]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.227]                   {
[17:02:46.227]                     inherits <- base::inherits
[17:02:46.227]                     invokeRestart <- base::invokeRestart
[17:02:46.227]                     is.null <- base::is.null
[17:02:46.227]                     muffled <- FALSE
[17:02:46.227]                     if (inherits(cond, "message")) {
[17:02:46.227]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:46.227]                       if (muffled) 
[17:02:46.227]                         invokeRestart("muffleMessage")
[17:02:46.227]                     }
[17:02:46.227]                     else if (inherits(cond, "warning")) {
[17:02:46.227]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:46.227]                       if (muffled) 
[17:02:46.227]                         invokeRestart("muffleWarning")
[17:02:46.227]                     }
[17:02:46.227]                     else if (inherits(cond, "condition")) {
[17:02:46.227]                       if (!is.null(pattern)) {
[17:02:46.227]                         computeRestarts <- base::computeRestarts
[17:02:46.227]                         grepl <- base::grepl
[17:02:46.227]                         restarts <- computeRestarts(cond)
[17:02:46.227]                         for (restart in restarts) {
[17:02:46.227]                           name <- restart$name
[17:02:46.227]                           if (is.null(name)) 
[17:02:46.227]                             next
[17:02:46.227]                           if (!grepl(pattern, name)) 
[17:02:46.227]                             next
[17:02:46.227]                           invokeRestart(restart)
[17:02:46.227]                           muffled <- TRUE
[17:02:46.227]                           break
[17:02:46.227]                         }
[17:02:46.227]                       }
[17:02:46.227]                     }
[17:02:46.227]                     invisible(muffled)
[17:02:46.227]                   }
[17:02:46.227]                   muffleCondition(cond)
[17:02:46.227]                 })
[17:02:46.227]             }))
[17:02:46.227]             future::FutureResult(value = ...future.value$value, 
[17:02:46.227]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:46.227]                   ...future.rng), globalenv = if (FALSE) 
[17:02:46.227]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:46.227]                     ...future.globalenv.names))
[17:02:46.227]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:46.227]         }, condition = base::local({
[17:02:46.227]             c <- base::c
[17:02:46.227]             inherits <- base::inherits
[17:02:46.227]             invokeRestart <- base::invokeRestart
[17:02:46.227]             length <- base::length
[17:02:46.227]             list <- base::list
[17:02:46.227]             seq.int <- base::seq.int
[17:02:46.227]             signalCondition <- base::signalCondition
[17:02:46.227]             sys.calls <- base::sys.calls
[17:02:46.227]             `[[` <- base::`[[`
[17:02:46.227]             `+` <- base::`+`
[17:02:46.227]             `<<-` <- base::`<<-`
[17:02:46.227]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:46.227]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:46.227]                   3L)]
[17:02:46.227]             }
[17:02:46.227]             function(cond) {
[17:02:46.227]                 is_error <- inherits(cond, "error")
[17:02:46.227]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:46.227]                   NULL)
[17:02:46.227]                 if (is_error) {
[17:02:46.227]                   sessionInformation <- function() {
[17:02:46.227]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:46.227]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:46.227]                       search = base::search(), system = base::Sys.info())
[17:02:46.227]                   }
[17:02:46.227]                   ...future.conditions[[length(...future.conditions) + 
[17:02:46.227]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:46.227]                     cond$call), session = sessionInformation(), 
[17:02:46.227]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:46.227]                   signalCondition(cond)
[17:02:46.227]                 }
[17:02:46.227]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:46.227]                 "immediateCondition"))) {
[17:02:46.227]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:46.227]                   ...future.conditions[[length(...future.conditions) + 
[17:02:46.227]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:46.227]                   if (TRUE && !signal) {
[17:02:46.227]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.227]                     {
[17:02:46.227]                       inherits <- base::inherits
[17:02:46.227]                       invokeRestart <- base::invokeRestart
[17:02:46.227]                       is.null <- base::is.null
[17:02:46.227]                       muffled <- FALSE
[17:02:46.227]                       if (inherits(cond, "message")) {
[17:02:46.227]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:46.227]                         if (muffled) 
[17:02:46.227]                           invokeRestart("muffleMessage")
[17:02:46.227]                       }
[17:02:46.227]                       else if (inherits(cond, "warning")) {
[17:02:46.227]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:46.227]                         if (muffled) 
[17:02:46.227]                           invokeRestart("muffleWarning")
[17:02:46.227]                       }
[17:02:46.227]                       else if (inherits(cond, "condition")) {
[17:02:46.227]                         if (!is.null(pattern)) {
[17:02:46.227]                           computeRestarts <- base::computeRestarts
[17:02:46.227]                           grepl <- base::grepl
[17:02:46.227]                           restarts <- computeRestarts(cond)
[17:02:46.227]                           for (restart in restarts) {
[17:02:46.227]                             name <- restart$name
[17:02:46.227]                             if (is.null(name)) 
[17:02:46.227]                               next
[17:02:46.227]                             if (!grepl(pattern, name)) 
[17:02:46.227]                               next
[17:02:46.227]                             invokeRestart(restart)
[17:02:46.227]                             muffled <- TRUE
[17:02:46.227]                             break
[17:02:46.227]                           }
[17:02:46.227]                         }
[17:02:46.227]                       }
[17:02:46.227]                       invisible(muffled)
[17:02:46.227]                     }
[17:02:46.227]                     muffleCondition(cond, pattern = "^muffle")
[17:02:46.227]                   }
[17:02:46.227]                 }
[17:02:46.227]                 else {
[17:02:46.227]                   if (TRUE) {
[17:02:46.227]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:46.227]                     {
[17:02:46.227]                       inherits <- base::inherits
[17:02:46.227]                       invokeRestart <- base::invokeRestart
[17:02:46.227]                       is.null <- base::is.null
[17:02:46.227]                       muffled <- FALSE
[17:02:46.227]                       if (inherits(cond, "message")) {
[17:02:46.227]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:46.227]                         if (muffled) 
[17:02:46.227]                           invokeRestart("muffleMessage")
[17:02:46.227]                       }
[17:02:46.227]                       else if (inherits(cond, "warning")) {
[17:02:46.227]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:46.227]                         if (muffled) 
[17:02:46.227]                           invokeRestart("muffleWarning")
[17:02:46.227]                       }
[17:02:46.227]                       else if (inherits(cond, "condition")) {
[17:02:46.227]                         if (!is.null(pattern)) {
[17:02:46.227]                           computeRestarts <- base::computeRestarts
[17:02:46.227]                           grepl <- base::grepl
[17:02:46.227]                           restarts <- computeRestarts(cond)
[17:02:46.227]                           for (restart in restarts) {
[17:02:46.227]                             name <- restart$name
[17:02:46.227]                             if (is.null(name)) 
[17:02:46.227]                               next
[17:02:46.227]                             if (!grepl(pattern, name)) 
[17:02:46.227]                               next
[17:02:46.227]                             invokeRestart(restart)
[17:02:46.227]                             muffled <- TRUE
[17:02:46.227]                             break
[17:02:46.227]                           }
[17:02:46.227]                         }
[17:02:46.227]                       }
[17:02:46.227]                       invisible(muffled)
[17:02:46.227]                     }
[17:02:46.227]                     muffleCondition(cond, pattern = "^muffle")
[17:02:46.227]                   }
[17:02:46.227]                 }
[17:02:46.227]             }
[17:02:46.227]         }))
[17:02:46.227]     }, error = function(ex) {
[17:02:46.227]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:46.227]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:46.227]                 ...future.rng), started = ...future.startTime, 
[17:02:46.227]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:46.227]             version = "1.8"), class = "FutureResult")
[17:02:46.227]     }, finally = {
[17:02:46.227]         if (!identical(...future.workdir, getwd())) 
[17:02:46.227]             setwd(...future.workdir)
[17:02:46.227]         {
[17:02:46.227]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:46.227]                 ...future.oldOptions$nwarnings <- NULL
[17:02:46.227]             }
[17:02:46.227]             base::options(...future.oldOptions)
[17:02:46.227]             if (.Platform$OS.type == "windows") {
[17:02:46.227]                 old_names <- names(...future.oldEnvVars)
[17:02:46.227]                 envs <- base::Sys.getenv()
[17:02:46.227]                 names <- names(envs)
[17:02:46.227]                 common <- intersect(names, old_names)
[17:02:46.227]                 added <- setdiff(names, old_names)
[17:02:46.227]                 removed <- setdiff(old_names, names)
[17:02:46.227]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:46.227]                   envs[common]]
[17:02:46.227]                 NAMES <- toupper(changed)
[17:02:46.227]                 args <- list()
[17:02:46.227]                 for (kk in seq_along(NAMES)) {
[17:02:46.227]                   name <- changed[[kk]]
[17:02:46.227]                   NAME <- NAMES[[kk]]
[17:02:46.227]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.227]                     next
[17:02:46.227]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:46.227]                 }
[17:02:46.227]                 NAMES <- toupper(added)
[17:02:46.227]                 for (kk in seq_along(NAMES)) {
[17:02:46.227]                   name <- added[[kk]]
[17:02:46.227]                   NAME <- NAMES[[kk]]
[17:02:46.227]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.227]                     next
[17:02:46.227]                   args[[name]] <- ""
[17:02:46.227]                 }
[17:02:46.227]                 NAMES <- toupper(removed)
[17:02:46.227]                 for (kk in seq_along(NAMES)) {
[17:02:46.227]                   name <- removed[[kk]]
[17:02:46.227]                   NAME <- NAMES[[kk]]
[17:02:46.227]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:46.227]                     next
[17:02:46.227]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:46.227]                 }
[17:02:46.227]                 if (length(args) > 0) 
[17:02:46.227]                   base::do.call(base::Sys.setenv, args = args)
[17:02:46.227]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:46.227]             }
[17:02:46.227]             else {
[17:02:46.227]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:46.227]             }
[17:02:46.227]             {
[17:02:46.227]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:46.227]                   0L) {
[17:02:46.227]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:46.227]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:46.227]                   base::options(opts)
[17:02:46.227]                 }
[17:02:46.227]                 {
[17:02:46.227]                   {
[17:02:46.227]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:46.227]                     NULL
[17:02:46.227]                   }
[17:02:46.227]                   options(future.plan = NULL)
[17:02:46.227]                   if (is.na(NA_character_)) 
[17:02:46.227]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:46.227]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:46.227]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:46.227]                     .init = FALSE)
[17:02:46.227]                 }
[17:02:46.227]             }
[17:02:46.227]         }
[17:02:46.227]     })
[17:02:46.227]     if (TRUE) {
[17:02:46.227]         base::sink(type = "output", split = FALSE)
[17:02:46.227]         if (TRUE) {
[17:02:46.227]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:46.227]         }
[17:02:46.227]         else {
[17:02:46.227]             ...future.result["stdout"] <- base::list(NULL)
[17:02:46.227]         }
[17:02:46.227]         base::close(...future.stdout)
[17:02:46.227]         ...future.stdout <- NULL
[17:02:46.227]     }
[17:02:46.227]     ...future.result$conditions <- ...future.conditions
[17:02:46.227]     ...future.result$finished <- base::Sys.time()
[17:02:46.227]     ...future.result
[17:02:46.227] }
[17:02:46.230] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:02:46.230] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:02:46.231] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:02:46.231] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:02:46.232] MultisessionFuture started
[17:02:46.232] - Launch lazy future ... done
[17:02:46.232] run() for ‘MultisessionFuture’ ... done
[17:02:46.232] result() for ClusterFuture ...
[17:02:46.232] receiveMessageFromWorker() for ClusterFuture ...
[17:02:46.233] - Validating connection of MultisessionFuture
[17:02:46.238] - received message: FutureResult
[17:02:46.238] - Received FutureResult
[17:02:46.238] - Erased future from FutureRegistry
[17:02:46.239] result() for ClusterFuture ...
[17:02:46.239] - result already collected: FutureResult
[17:02:46.239] result() for ClusterFuture ... done
[17:02:46.239] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:46.239] result() for ClusterFuture ... done
[17:02:46.239] result() for ClusterFuture ...
[17:02:46.240] - result already collected: FutureResult
[17:02:46.240] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[17:02:46.241] plan(): Setting new future strategy stack:
[17:02:46.241] List of future strategies:
[17:02:46.241] 1. FutureStrategy:
[17:02:46.241]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:46.241]    - tweaked: FALSE
[17:02:46.241]    - call: future::plan(oplan)
[17:02:46.242] plan(): nbrOfWorkers() = 1
> 
