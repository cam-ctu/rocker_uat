
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:07:03.671] plan(): Setting new future strategy stack:
[18:07:03.672] List of future strategies:
[18:07:03.672] 1. sequential:
[18:07:03.672]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.672]    - tweaked: FALSE
[18:07:03.672]    - call: future::plan("sequential")
[18:07:03.695] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[18:07:03.717] plan(): Setting new future strategy stack:
[18:07:03.717] List of future strategies:
[18:07:03.717] 1. sequential:
[18:07:03.717]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.717]    - tweaked: FALSE
[18:07:03.717]    - call: NULL
[18:07:03.740] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 2) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[18:07:03.752] plan(): Setting new future strategy stack:
[18:07:03.752] List of future strategies:
[18:07:03.752] 1. sequential:
[18:07:03.752]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.752]    - tweaked: FALSE
[18:07:03.752]    - call: NULL
[18:07:03.753] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[18:07:03.755] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:03.755] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:03.756] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:03.756] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:03.756] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:03.756] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:03.756] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:03.757] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:03.757] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:03.757] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:03.757] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:03.758] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:03.758] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:03.758] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:03.758] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:03.759] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:03.759] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:03.759] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:03.759] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:03.759] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:03.760] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:03.760] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:03.760] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:03.760] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:03.761] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:03.761] R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:03.761] Coercing from character to numeric: ‘0.01’
[18:07:03.761] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[18:07:03.762] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:03.762] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:03.762] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:03.763] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:03.763] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:03.763] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:03.763] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:03.764] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:03.764] Setting plan('default')
[18:07:03.764] plan(): Setting new future strategy stack:
[18:07:03.764] List of future strategies:
[18:07:03.764] 1. sequential:
[18:07:03.764]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.764]    - tweaked: FALSE
[18:07:03.764]    - call: NULL
[18:07:03.765] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[18:07:03.766] plan(): Setting new future strategy stack:
[18:07:03.766] List of future strategies:
[18:07:03.766] 1. sequential:
[18:07:03.766]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.766]    - tweaked: FALSE
[18:07:03.766]    - call: NULL
[18:07:03.767] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[18:07:03.769] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:03.769] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:03.769] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:03.770] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:03.770] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:03.770] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:03.770] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:03.770] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:03.771] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:03.771] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:03.771] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:03.771] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:03.772] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:03.772] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:03.772] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:03.772] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:03.773] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:03.773] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:03.773] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:03.773] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:03.773] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:03.774] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:03.774] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:03.774] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:03.774] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:03.775] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:03.775] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:03.775] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:03.775] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:03.776] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:03.776] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:03.776] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:03.777] R command-line argument: -p 1
[18:07:03.777]  => options(future.plan = sequential)
[18:07:03.777] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:03.777] Setting plan('default')
[18:07:03.778] plan(): Setting new future strategy stack:
[18:07:03.778] List of future strategies:
[18:07:03.778] 1. sequential:
[18:07:03.778]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.778]    - tweaked: FALSE
[18:07:03.778]    - call: NULL
[18:07:03.781] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[18:07:03.782] plan(): Setting new future strategy stack:
[18:07:03.783] List of future strategies:
[18:07:03.783] 1. sequential:
[18:07:03.783]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.783]    - tweaked: FALSE
[18:07:03.783]    - call: NULL
[18:07:03.783] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[18:07:03.784] plan(): Setting new future strategy stack:
[18:07:03.784] List of future strategies:
[18:07:03.784] 1. sequential:
[18:07:03.784]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.784]    - tweaked: FALSE
[18:07:03.784]    - call: NULL
[18:07:03.785] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[18:07:03.786] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:03.787] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:03.787] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:03.787] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:03.787] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:03.788] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:03.788] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:03.788] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:03.788] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:03.789] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:03.789] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:03.789] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:03.789] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:03.789] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:03.790] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:03.790] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:03.790] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:03.790] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:03.791] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:03.791] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:03.791] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:03.791] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:03.791] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:03.792] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:03.792] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:03.792] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:03.792] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:03.793] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:03.793] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:03.793] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:03.793] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:03.794] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:03.794] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:03.794] Setting plan('default')
[18:07:03.794] plan(): Setting new future strategy stack:
[18:07:03.794] List of future strategies:
[18:07:03.794] 1. sequential:
[18:07:03.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.794]    - tweaked: FALSE
[18:07:03.794]    - call: NULL
[18:07:03.795] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[18:07:03.796] plan(): Setting new future strategy stack:
[18:07:03.796] List of future strategies:
[18:07:03.796] 1. sequential:
[18:07:03.796]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:03.796]    - tweaked: FALSE
[18:07:03.796]    - call: NULL
[18:07:03.797] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[18:07:03.799] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:03.799] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:03.799] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:03.800] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:03.800] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:03.800] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:03.800] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:03.801] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:03.801] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:03.801] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:03.801] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:03.801] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:03.802] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:03.802] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:03.802] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:03.802] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:03.803] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:03.803] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:03.803] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:03.803] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:03.804] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:03.804] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:03.804] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:03.804] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:03.804] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:03.805] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:03.805] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:03.805] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:03.805] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:03.806] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:03.806] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:03.806] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:03.807] R command-line argument: -p 2
[18:07:03.807]  => options(future.plan = tweak(multisession, workers = 2))
[18:07:03.811] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:03.811] Setting plan('default')
[18:07:03.811] plan(): Setting new future strategy stack:
[18:07:03.811] List of future strategies:
[18:07:03.811] 1. multisession:
[18:07:03.811]    - args: function (..., workers = 2L, envir = parent.frame())
[18:07:03.811]    - tweaked: TRUE
[18:07:03.811]    - call: NULL
[18:07:03.812] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[18:07:03.813] plan(): Setting new future strategy stack:
[18:07:03.813] List of future strategies:
[18:07:03.813] 1. multisession:
[18:07:03.813]    - args: function (..., workers = 2L, envir = parent.frame())
[18:07:03.813]    - tweaked: TRUE
[18:07:03.813]    - call: NULL
[18:07:03.814] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:03.814] multisession:
[18:07:03.814] - args: function (..., workers = 2L, envir = parent.frame())
[18:07:03.814] - tweaked: TRUE
[18:07:03.814] - call: NULL
[18:07:03.817] getGlobalsAndPackages() ...
[18:07:03.817] Not searching for globals
[18:07:03.818] - globals: [0] <none>
[18:07:03.818] getGlobalsAndPackages() ... DONE
[18:07:03.819] [local output] makeClusterPSOCK() ...
[18:07:03.868] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:07:03.870] [local output] Base port: 11083
[18:07:03.870] [local output] Getting setup options for 2 cluster nodes ...
[18:07:03.871] [local output]  - Node 1 of 2 ...
[18:07:03.871] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:03.873] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a39fa8f3a.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a39fa8f3a.pid")'’
[18:07:04.125] - Possible to infer worker's PID: TRUE
[18:07:04.126] [local output] Rscript port: 11083

[18:07:04.126] [local output]  - Node 2 of 2 ...
[18:07:04.127] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:04.128] [local output] Rscript port: 11083

[18:07:04.129] [local output] Getting setup options for 2 cluster nodes ... done
[18:07:04.129] [local output]  - Parallel setup requested for some PSOCK nodes
[18:07:04.130] [local output] Setting up PSOCK nodes in parallel
[18:07:04.130] List of 36
[18:07:04.130]  $ worker          : chr "localhost"
[18:07:04.130]   ..- attr(*, "localhost")= logi TRUE
[18:07:04.130]  $ master          : chr "localhost"
[18:07:04.130]  $ port            : int 11083
[18:07:04.130]  $ connectTimeout  : num 120
[18:07:04.130]  $ timeout         : num 2592000
[18:07:04.130]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:07:04.130]  $ homogeneous     : logi TRUE
[18:07:04.130]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:07:04.130]  $ rscript_envs    : NULL
[18:07:04.130]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:04.130]  $ rscript_startup : NULL
[18:07:04.130]  $ rscript_sh      : chr "sh"
[18:07:04.130]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:04.130]  $ methods         : logi TRUE
[18:07:04.130]  $ socketOptions   : chr "no-delay"
[18:07:04.130]  $ useXDR          : logi FALSE
[18:07:04.130]  $ outfile         : chr "/dev/null"
[18:07:04.130]  $ renice          : int NA
[18:07:04.130]  $ rshcmd          : NULL
[18:07:04.130]  $ user            : chr(0) 
[18:07:04.130]  $ revtunnel       : logi FALSE
[18:07:04.130]  $ rshlogfile      : NULL
[18:07:04.130]  $ rshopts         : chr(0) 
[18:07:04.130]  $ rank            : int 1
[18:07:04.130]  $ manual          : logi FALSE
[18:07:04.130]  $ dryrun          : logi FALSE
[18:07:04.130]  $ quiet           : logi FALSE
[18:07:04.130]  $ setup_strategy  : chr "parallel"
[18:07:04.130]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:04.130]  $ pidfile         : chr "/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a39fa8f3a.pid"
[18:07:04.130]  $ rshcmd_label    : NULL
[18:07:04.130]  $ rsh_call        : NULL
[18:07:04.130]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:04.130]  $ localMachine    : logi TRUE
[18:07:04.130]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:07:04.130]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:07:04.130]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:07:04.130]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:07:04.130]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:07:04.130]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:07:04.130]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:07:04.130]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:07:04.130]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:07:04.130]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:07:04.130]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:07:04.130]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:07:04.130]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:07:04.130]  $ arguments       :List of 28
[18:07:04.130]   ..$ worker          : chr "localhost"
[18:07:04.130]   ..$ master          : NULL
[18:07:04.130]   ..$ port            : int 11083
[18:07:04.130]   ..$ connectTimeout  : num 120
[18:07:04.130]   ..$ timeout         : num 2592000
[18:07:04.130]   ..$ rscript         : NULL
[18:07:04.130]   ..$ homogeneous     : NULL
[18:07:04.130]   ..$ rscript_args    : NULL
[18:07:04.130]   ..$ rscript_envs    : NULL
[18:07:04.130]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:04.130]   ..$ rscript_startup : NULL
[18:07:04.130]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:07:04.130]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:04.130]   ..$ methods         : logi TRUE
[18:07:04.130]   ..$ socketOptions   : chr "no-delay"
[18:07:04.130]   ..$ useXDR          : logi FALSE
[18:07:04.130]   ..$ outfile         : chr "/dev/null"
[18:07:04.130]   ..$ renice          : int NA
[18:07:04.130]   ..$ rshcmd          : NULL
[18:07:04.130]   ..$ user            : NULL
[18:07:04.130]   ..$ revtunnel       : logi NA
[18:07:04.130]   ..$ rshlogfile      : NULL
[18:07:04.130]   ..$ rshopts         : NULL
[18:07:04.130]   ..$ rank            : int 1
[18:07:04.130]   ..$ manual          : logi FALSE
[18:07:04.130]   ..$ dryrun          : logi FALSE
[18:07:04.130]   ..$ quiet           : logi FALSE
[18:07:04.130]   ..$ setup_strategy  : chr "parallel"
[18:07:04.130]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:07:04.167] [local output] System call to launch all workers:
[18:07:04.167] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a39fa8f3a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11083 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:07:04.167] [local output] Starting PSOCK main server
[18:07:04.175] [local output] Workers launched
[18:07:04.175] [local output] Waiting for workers to connect back
[18:07:04.175]  - [local output] 0 workers out of 2 ready
[18:07:04.538]  - [local output] 0 workers out of 2 ready
[18:07:04.539]  - [local output] 1 workers out of 2 ready
[18:07:04.546]  - [local output] 1 workers out of 2 ready
[18:07:04.546]  - [local output] 2 workers out of 2 ready
[18:07:04.546] [local output] Launching of workers completed
[18:07:04.547] [local output] Collecting session information from workers
[18:07:04.548] [local output]  - Worker #1 of 2
[18:07:04.549] [local output]  - Worker #2 of 2
[18:07:04.550] [local output] makeClusterPSOCK() ... done
[18:07:04.569] Packages needed by the future expression (n = 0): <none>
[18:07:04.570] Packages needed by future strategies (n = 0): <none>
[18:07:04.571] {
[18:07:04.571]     {
[18:07:04.571]         {
[18:07:04.571]             ...future.startTime <- base::Sys.time()
[18:07:04.571]             {
[18:07:04.571]                 {
[18:07:04.571]                   {
[18:07:04.571]                     {
[18:07:04.571]                       base::local({
[18:07:04.571]                         has_future <- base::requireNamespace("future", 
[18:07:04.571]                           quietly = TRUE)
[18:07:04.571]                         if (has_future) {
[18:07:04.571]                           ns <- base::getNamespace("future")
[18:07:04.571]                           version <- ns[[".package"]][["version"]]
[18:07:04.571]                           if (is.null(version)) 
[18:07:04.571]                             version <- utils::packageVersion("future")
[18:07:04.571]                         }
[18:07:04.571]                         else {
[18:07:04.571]                           version <- NULL
[18:07:04.571]                         }
[18:07:04.571]                         if (!has_future || version < "1.8.0") {
[18:07:04.571]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:04.571]                             "", base::R.version$version.string), 
[18:07:04.571]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:04.571]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:04.571]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:04.571]                               "release", "version")], collapse = " "), 
[18:07:04.571]                             hostname = base::Sys.info()[["nodename"]])
[18:07:04.571]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:04.571]                             info)
[18:07:04.571]                           info <- base::paste(info, collapse = "; ")
[18:07:04.571]                           if (!has_future) {
[18:07:04.571]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:04.571]                               info)
[18:07:04.571]                           }
[18:07:04.571]                           else {
[18:07:04.571]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:04.571]                               info, version)
[18:07:04.571]                           }
[18:07:04.571]                           base::stop(msg)
[18:07:04.571]                         }
[18:07:04.571]                       })
[18:07:04.571]                     }
[18:07:04.571]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:04.571]                     base::options(mc.cores = 1L)
[18:07:04.571]                   }
[18:07:04.571]                   ...future.strategy.old <- future::plan("list")
[18:07:04.571]                   options(future.plan = NULL)
[18:07:04.571]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:04.571]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:04.571]                 }
[18:07:04.571]                 ...future.workdir <- getwd()
[18:07:04.571]             }
[18:07:04.571]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:04.571]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:04.571]         }
[18:07:04.571]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:04.571]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:04.571]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:04.571]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:04.571]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:04.571]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:04.571]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:04.571]             base::names(...future.oldOptions))
[18:07:04.571]     }
[18:07:04.571]     if (FALSE) {
[18:07:04.571]     }
[18:07:04.571]     else {
[18:07:04.571]         if (TRUE) {
[18:07:04.571]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:04.571]                 open = "w")
[18:07:04.571]         }
[18:07:04.571]         else {
[18:07:04.571]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:04.571]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:04.571]         }
[18:07:04.571]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:04.571]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:04.571]             base::sink(type = "output", split = FALSE)
[18:07:04.571]             base::close(...future.stdout)
[18:07:04.571]         }, add = TRUE)
[18:07:04.571]     }
[18:07:04.571]     ...future.frame <- base::sys.nframe()
[18:07:04.571]     ...future.conditions <- base::list()
[18:07:04.571]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:04.571]     if (FALSE) {
[18:07:04.571]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:04.571]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:04.571]     }
[18:07:04.571]     ...future.result <- base::tryCatch({
[18:07:04.571]         base::withCallingHandlers({
[18:07:04.571]             ...future.value <- base::withVisible(base::local({
[18:07:04.571]                 ...future.makeSendCondition <- base::local({
[18:07:04.571]                   sendCondition <- NULL
[18:07:04.571]                   function(frame = 1L) {
[18:07:04.571]                     if (is.function(sendCondition)) 
[18:07:04.571]                       return(sendCondition)
[18:07:04.571]                     ns <- getNamespace("parallel")
[18:07:04.571]                     if (exists("sendData", mode = "function", 
[18:07:04.571]                       envir = ns)) {
[18:07:04.571]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:04.571]                         envir = ns)
[18:07:04.571]                       envir <- sys.frame(frame)
[18:07:04.571]                       master <- NULL
[18:07:04.571]                       while (!identical(envir, .GlobalEnv) && 
[18:07:04.571]                         !identical(envir, emptyenv())) {
[18:07:04.571]                         if (exists("master", mode = "list", envir = envir, 
[18:07:04.571]                           inherits = FALSE)) {
[18:07:04.571]                           master <- get("master", mode = "list", 
[18:07:04.571]                             envir = envir, inherits = FALSE)
[18:07:04.571]                           if (inherits(master, c("SOCKnode", 
[18:07:04.571]                             "SOCK0node"))) {
[18:07:04.571]                             sendCondition <<- function(cond) {
[18:07:04.571]                               data <- list(type = "VALUE", value = cond, 
[18:07:04.571]                                 success = TRUE)
[18:07:04.571]                               parallel_sendData(master, data)
[18:07:04.571]                             }
[18:07:04.571]                             return(sendCondition)
[18:07:04.571]                           }
[18:07:04.571]                         }
[18:07:04.571]                         frame <- frame + 1L
[18:07:04.571]                         envir <- sys.frame(frame)
[18:07:04.571]                       }
[18:07:04.571]                     }
[18:07:04.571]                     sendCondition <<- function(cond) NULL
[18:07:04.571]                   }
[18:07:04.571]                 })
[18:07:04.571]                 withCallingHandlers({
[18:07:04.571]                   NA
[18:07:04.571]                 }, immediateCondition = function(cond) {
[18:07:04.571]                   sendCondition <- ...future.makeSendCondition()
[18:07:04.571]                   sendCondition(cond)
[18:07:04.571]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:04.571]                   {
[18:07:04.571]                     inherits <- base::inherits
[18:07:04.571]                     invokeRestart <- base::invokeRestart
[18:07:04.571]                     is.null <- base::is.null
[18:07:04.571]                     muffled <- FALSE
[18:07:04.571]                     if (inherits(cond, "message")) {
[18:07:04.571]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:04.571]                       if (muffled) 
[18:07:04.571]                         invokeRestart("muffleMessage")
[18:07:04.571]                     }
[18:07:04.571]                     else if (inherits(cond, "warning")) {
[18:07:04.571]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:04.571]                       if (muffled) 
[18:07:04.571]                         invokeRestart("muffleWarning")
[18:07:04.571]                     }
[18:07:04.571]                     else if (inherits(cond, "condition")) {
[18:07:04.571]                       if (!is.null(pattern)) {
[18:07:04.571]                         computeRestarts <- base::computeRestarts
[18:07:04.571]                         grepl <- base::grepl
[18:07:04.571]                         restarts <- computeRestarts(cond)
[18:07:04.571]                         for (restart in restarts) {
[18:07:04.571]                           name <- restart$name
[18:07:04.571]                           if (is.null(name)) 
[18:07:04.571]                             next
[18:07:04.571]                           if (!grepl(pattern, name)) 
[18:07:04.571]                             next
[18:07:04.571]                           invokeRestart(restart)
[18:07:04.571]                           muffled <- TRUE
[18:07:04.571]                           break
[18:07:04.571]                         }
[18:07:04.571]                       }
[18:07:04.571]                     }
[18:07:04.571]                     invisible(muffled)
[18:07:04.571]                   }
[18:07:04.571]                   muffleCondition(cond)
[18:07:04.571]                 })
[18:07:04.571]             }))
[18:07:04.571]             future::FutureResult(value = ...future.value$value, 
[18:07:04.571]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:04.571]                   ...future.rng), globalenv = if (FALSE) 
[18:07:04.571]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:04.571]                     ...future.globalenv.names))
[18:07:04.571]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:04.571]         }, condition = base::local({
[18:07:04.571]             c <- base::c
[18:07:04.571]             inherits <- base::inherits
[18:07:04.571]             invokeRestart <- base::invokeRestart
[18:07:04.571]             length <- base::length
[18:07:04.571]             list <- base::list
[18:07:04.571]             seq.int <- base::seq.int
[18:07:04.571]             signalCondition <- base::signalCondition
[18:07:04.571]             sys.calls <- base::sys.calls
[18:07:04.571]             `[[` <- base::`[[`
[18:07:04.571]             `+` <- base::`+`
[18:07:04.571]             `<<-` <- base::`<<-`
[18:07:04.571]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:04.571]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:04.571]                   3L)]
[18:07:04.571]             }
[18:07:04.571]             function(cond) {
[18:07:04.571]                 is_error <- inherits(cond, "error")
[18:07:04.571]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:04.571]                   NULL)
[18:07:04.571]                 if (is_error) {
[18:07:04.571]                   sessionInformation <- function() {
[18:07:04.571]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:04.571]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:04.571]                       search = base::search(), system = base::Sys.info())
[18:07:04.571]                   }
[18:07:04.571]                   ...future.conditions[[length(...future.conditions) + 
[18:07:04.571]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:04.571]                     cond$call), session = sessionInformation(), 
[18:07:04.571]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:04.571]                   signalCondition(cond)
[18:07:04.571]                 }
[18:07:04.571]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:04.571]                 "immediateCondition"))) {
[18:07:04.571]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:04.571]                   ...future.conditions[[length(...future.conditions) + 
[18:07:04.571]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:04.571]                   if (TRUE && !signal) {
[18:07:04.571]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:04.571]                     {
[18:07:04.571]                       inherits <- base::inherits
[18:07:04.571]                       invokeRestart <- base::invokeRestart
[18:07:04.571]                       is.null <- base::is.null
[18:07:04.571]                       muffled <- FALSE
[18:07:04.571]                       if (inherits(cond, "message")) {
[18:07:04.571]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:04.571]                         if (muffled) 
[18:07:04.571]                           invokeRestart("muffleMessage")
[18:07:04.571]                       }
[18:07:04.571]                       else if (inherits(cond, "warning")) {
[18:07:04.571]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:04.571]                         if (muffled) 
[18:07:04.571]                           invokeRestart("muffleWarning")
[18:07:04.571]                       }
[18:07:04.571]                       else if (inherits(cond, "condition")) {
[18:07:04.571]                         if (!is.null(pattern)) {
[18:07:04.571]                           computeRestarts <- base::computeRestarts
[18:07:04.571]                           grepl <- base::grepl
[18:07:04.571]                           restarts <- computeRestarts(cond)
[18:07:04.571]                           for (restart in restarts) {
[18:07:04.571]                             name <- restart$name
[18:07:04.571]                             if (is.null(name)) 
[18:07:04.571]                               next
[18:07:04.571]                             if (!grepl(pattern, name)) 
[18:07:04.571]                               next
[18:07:04.571]                             invokeRestart(restart)
[18:07:04.571]                             muffled <- TRUE
[18:07:04.571]                             break
[18:07:04.571]                           }
[18:07:04.571]                         }
[18:07:04.571]                       }
[18:07:04.571]                       invisible(muffled)
[18:07:04.571]                     }
[18:07:04.571]                     muffleCondition(cond, pattern = "^muffle")
[18:07:04.571]                   }
[18:07:04.571]                 }
[18:07:04.571]                 else {
[18:07:04.571]                   if (TRUE) {
[18:07:04.571]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:04.571]                     {
[18:07:04.571]                       inherits <- base::inherits
[18:07:04.571]                       invokeRestart <- base::invokeRestart
[18:07:04.571]                       is.null <- base::is.null
[18:07:04.571]                       muffled <- FALSE
[18:07:04.571]                       if (inherits(cond, "message")) {
[18:07:04.571]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:04.571]                         if (muffled) 
[18:07:04.571]                           invokeRestart("muffleMessage")
[18:07:04.571]                       }
[18:07:04.571]                       else if (inherits(cond, "warning")) {
[18:07:04.571]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:04.571]                         if (muffled) 
[18:07:04.571]                           invokeRestart("muffleWarning")
[18:07:04.571]                       }
[18:07:04.571]                       else if (inherits(cond, "condition")) {
[18:07:04.571]                         if (!is.null(pattern)) {
[18:07:04.571]                           computeRestarts <- base::computeRestarts
[18:07:04.571]                           grepl <- base::grepl
[18:07:04.571]                           restarts <- computeRestarts(cond)
[18:07:04.571]                           for (restart in restarts) {
[18:07:04.571]                             name <- restart$name
[18:07:04.571]                             if (is.null(name)) 
[18:07:04.571]                               next
[18:07:04.571]                             if (!grepl(pattern, name)) 
[18:07:04.571]                               next
[18:07:04.571]                             invokeRestart(restart)
[18:07:04.571]                             muffled <- TRUE
[18:07:04.571]                             break
[18:07:04.571]                           }
[18:07:04.571]                         }
[18:07:04.571]                       }
[18:07:04.571]                       invisible(muffled)
[18:07:04.571]                     }
[18:07:04.571]                     muffleCondition(cond, pattern = "^muffle")
[18:07:04.571]                   }
[18:07:04.571]                 }
[18:07:04.571]             }
[18:07:04.571]         }))
[18:07:04.571]     }, error = function(ex) {
[18:07:04.571]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:04.571]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:04.571]                 ...future.rng), started = ...future.startTime, 
[18:07:04.571]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:04.571]             version = "1.8"), class = "FutureResult")
[18:07:04.571]     }, finally = {
[18:07:04.571]         if (!identical(...future.workdir, getwd())) 
[18:07:04.571]             setwd(...future.workdir)
[18:07:04.571]         {
[18:07:04.571]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:04.571]                 ...future.oldOptions$nwarnings <- NULL
[18:07:04.571]             }
[18:07:04.571]             base::options(...future.oldOptions)
[18:07:04.571]             if (.Platform$OS.type == "windows") {
[18:07:04.571]                 old_names <- names(...future.oldEnvVars)
[18:07:04.571]                 envs <- base::Sys.getenv()
[18:07:04.571]                 names <- names(envs)
[18:07:04.571]                 common <- intersect(names, old_names)
[18:07:04.571]                 added <- setdiff(names, old_names)
[18:07:04.571]                 removed <- setdiff(old_names, names)
[18:07:04.571]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:04.571]                   envs[common]]
[18:07:04.571]                 NAMES <- toupper(changed)
[18:07:04.571]                 args <- list()
[18:07:04.571]                 for (kk in seq_along(NAMES)) {
[18:07:04.571]                   name <- changed[[kk]]
[18:07:04.571]                   NAME <- NAMES[[kk]]
[18:07:04.571]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:04.571]                     next
[18:07:04.571]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:04.571]                 }
[18:07:04.571]                 NAMES <- toupper(added)
[18:07:04.571]                 for (kk in seq_along(NAMES)) {
[18:07:04.571]                   name <- added[[kk]]
[18:07:04.571]                   NAME <- NAMES[[kk]]
[18:07:04.571]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:04.571]                     next
[18:07:04.571]                   args[[name]] <- ""
[18:07:04.571]                 }
[18:07:04.571]                 NAMES <- toupper(removed)
[18:07:04.571]                 for (kk in seq_along(NAMES)) {
[18:07:04.571]                   name <- removed[[kk]]
[18:07:04.571]                   NAME <- NAMES[[kk]]
[18:07:04.571]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:04.571]                     next
[18:07:04.571]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:04.571]                 }
[18:07:04.571]                 if (length(args) > 0) 
[18:07:04.571]                   base::do.call(base::Sys.setenv, args = args)
[18:07:04.571]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:04.571]             }
[18:07:04.571]             else {
[18:07:04.571]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:04.571]             }
[18:07:04.571]             {
[18:07:04.571]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:04.571]                   0L) {
[18:07:04.571]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:04.571]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:04.571]                   base::options(opts)
[18:07:04.571]                 }
[18:07:04.571]                 {
[18:07:04.571]                   {
[18:07:04.571]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:04.571]                     NULL
[18:07:04.571]                   }
[18:07:04.571]                   options(future.plan = function (..., workers = 2L, 
[18:07:04.571]                     envir = parent.frame()) 
[18:07:04.571]                   strategy(..., workers = workers, envir = envir))
[18:07:04.571]                   if (is.na(NA_character_)) 
[18:07:04.571]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:04.571]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:04.571]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:04.571]                     .init = FALSE)
[18:07:04.571]                 }
[18:07:04.571]             }
[18:07:04.571]         }
[18:07:04.571]     })
[18:07:04.571]     if (TRUE) {
[18:07:04.571]         base::sink(type = "output", split = FALSE)
[18:07:04.571]         if (TRUE) {
[18:07:04.571]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:04.571]         }
[18:07:04.571]         else {
[18:07:04.571]             ...future.result["stdout"] <- base::list(NULL)
[18:07:04.571]         }
[18:07:04.571]         base::close(...future.stdout)
[18:07:04.571]         ...future.stdout <- NULL
[18:07:04.571]     }
[18:07:04.571]     ...future.result$conditions <- ...future.conditions
[18:07:04.571]     ...future.result$finished <- base::Sys.time()
[18:07:04.571]     ...future.result
[18:07:04.571] }
[18:07:04.672] MultisessionFuture started
[18:07:04.673] result() for ClusterFuture ...
[18:07:04.673] receiveMessageFromWorker() for ClusterFuture ...
[18:07:04.674] - Validating connection of MultisessionFuture
[18:07:04.736] - received message: FutureResult
[18:07:04.737] - Received FutureResult
[18:07:04.743] - Erased future from FutureRegistry
[18:07:04.744] result() for ClusterFuture ...
[18:07:04.744] - result already collected: FutureResult
[18:07:04.744] result() for ClusterFuture ... done
[18:07:04.745] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:04.745] result() for ClusterFuture ... done
[18:07:04.745] result() for ClusterFuture ...
[18:07:04.745] - result already collected: FutureResult
[18:07:04.746] result() for ClusterFuture ... done
[18:07:04.746] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:04.747] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[18:07:04.749] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:04.750] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:04.750] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:04.750] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:04.751] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:04.751] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:04.752] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:04.752] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:04.752] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:04.753] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:04.753] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:04.754] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:04.754] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:04.754] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:04.755] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:04.755] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:04.756] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:04.756] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:04.756] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:04.757] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:04.757] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:04.758] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:04.758] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:04.758] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:04.759] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:04.759] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:04.759] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:04.760] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:04.760] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:04.761] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:04.761] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:04.761] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[18:07:04.763] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:04.763] Setting plan('default')
[18:07:04.764] plan(): Setting new future strategy stack:
[18:07:04.764] List of future strategies:
[18:07:04.764] 1. sequential:
[18:07:04.764]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:04.764]    - tweaked: FALSE
[18:07:04.764]    - call: NULL
[18:07:04.766] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[18:07:04.767] plan(): Setting new future strategy stack:
[18:07:04.767] List of future strategies:
[18:07:04.767] 1. sequential:
[18:07:04.767]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:04.767]    - tweaked: FALSE
[18:07:04.767]    - call: NULL
[18:07:04.770] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[18:07:04.772] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:04.772] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:04.773] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:04.773] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:04.773] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:04.774] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:04.774] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:04.774] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:04.774] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:04.775] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:04.775] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:04.775] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:04.776] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:04.776] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:04.776] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:04.776] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:04.777] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:04.777] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:04.777] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:04.778] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:04.778] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:04.778] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:04.778] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:04.779] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:04.779] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:04.779] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:04.780] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:04.780] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:04.780] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:04.781] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:04.781] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:04.781] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[18:07:04.782] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:04.782] Setting plan('default')
[18:07:04.783] plan(): Setting new future strategy stack:
[18:07:04.783] List of future strategies:
[18:07:04.783] 1. sequential:
[18:07:04.783]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:04.783]    - tweaked: FALSE
[18:07:04.783]    - call: NULL
[18:07:04.784] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[18:07:04.785] plan(): Setting new future strategy stack:
[18:07:04.785] List of future strategies:
[18:07:04.785] 1. sequential:
[18:07:04.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:04.785]    - tweaked: FALSE
[18:07:04.785]    - call: NULL
[18:07:04.786] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[18:07:04.788] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:04.789] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:04.789] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:04.789] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:04.790] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:04.790] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:04.790] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:04.791] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:04.791] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:04.791] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:04.791] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:04.792] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:04.792] Environment variable ‘R_FUTURE_PLAN’ not set
[18:07:04.792] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:04.792] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:04.793] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:04.793] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:04.793] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:04.794] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:04.794] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:04.794] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:04.795] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:04.795] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:04.795] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:04.795] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:04.796] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:04.796] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:04.796] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:04.797] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:04.797] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:04.797] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:04.797] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[18:07:04.799] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:04.799] Setting plan('default')
[18:07:04.799] plan(): Setting new future strategy stack:
[18:07:04.799] List of future strategies:
[18:07:04.799] 1. sequential:
[18:07:04.799]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:04.799]    - tweaked: FALSE
[18:07:04.799]    - call: NULL
[18:07:04.801] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[18:07:04.802] plan(): Setting new future strategy stack:
[18:07:04.802] List of future strategies:
[18:07:04.802] 1. sequential:
[18:07:04.802]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:04.802]    - tweaked: FALSE
[18:07:04.802]    - call: NULL
[18:07:04.803] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[18:07:04.805] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:04.805] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:04.806] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:04.806] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:04.806] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:04.806] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:04.807] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:04.807] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:04.807] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:04.808] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:04.808] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:04.808] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:04.808] R_FUTURE_PLAN=‘multisession’
[18:07:04.809] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[18:07:04.809] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:04.809] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:04.810] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:04.810] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:04.810] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:04.810] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:04.811] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:04.811] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:04.811] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:04.812] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:04.812] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:04.812] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:04.812] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:04.813] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:04.813] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:04.813] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:04.813] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:04.814] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:04.814] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:04.814] Option 'future.plan' = ‘multisession’
[18:07:04.815] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:04.815] Setting plan('default')
[18:07:04.815] plan(): Setting new future strategy stack:
[18:07:04.815] List of future strategies:
[18:07:04.815] 1. multisession:
[18:07:04.815]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:04.815]    - tweaked: FALSE
[18:07:04.815]    - call: plan("default", .init = FALSE)
[18:07:04.825] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[18:07:04.826] plan(): Setting new future strategy stack:
[18:07:04.826] List of future strategies:
[18:07:04.826] 1. multisession:
[18:07:04.826]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:04.826]    - tweaked: FALSE
[18:07:04.826]    - call: plan("default")
[18:07:04.827] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:04.827] multisession:
[18:07:04.827] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:04.827] - tweaked: FALSE
[18:07:04.827] - call: plan("default")
[18:07:04.833] getGlobalsAndPackages() ...
[18:07:04.833] Not searching for globals
[18:07:04.833] - globals: [0] <none>
[18:07:04.833] getGlobalsAndPackages() ... DONE
[18:07:04.834] [local output] makeClusterPSOCK() ...
[18:07:04.839] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:07:04.840] [local output] Base port: 11515
[18:07:04.841] [local output] Getting setup options for 2 cluster nodes ...
[18:07:04.841] [local output]  - Node 1 of 2 ...
[18:07:04.842] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:04.843] [local output] Rscript port: 11515

[18:07:04.843] [local output]  - Node 2 of 2 ...
[18:07:04.844] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:04.845] [local output] Rscript port: 11515

[18:07:04.846] [local output] Getting setup options for 2 cluster nodes ... done
[18:07:04.846] [local output]  - Parallel setup requested for some PSOCK nodes
[18:07:04.846] [local output] Setting up PSOCK nodes in parallel
[18:07:04.846] List of 36
[18:07:04.846]  $ worker          : chr "localhost"
[18:07:04.846]   ..- attr(*, "localhost")= logi TRUE
[18:07:04.846]  $ master          : chr "localhost"
[18:07:04.846]  $ port            : int 11515
[18:07:04.846]  $ connectTimeout  : num 120
[18:07:04.846]  $ timeout         : num 2592000
[18:07:04.846]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:07:04.846]  $ homogeneous     : logi TRUE
[18:07:04.846]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:07:04.846]  $ rscript_envs    : NULL
[18:07:04.846]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:04.846]  $ rscript_startup : NULL
[18:07:04.846]  $ rscript_sh      : chr "sh"
[18:07:04.846]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:04.846]  $ methods         : logi TRUE
[18:07:04.846]  $ socketOptions   : chr "no-delay"
[18:07:04.846]  $ useXDR          : logi FALSE
[18:07:04.846]  $ outfile         : chr "/dev/null"
[18:07:04.846]  $ renice          : int NA
[18:07:04.846]  $ rshcmd          : NULL
[18:07:04.846]  $ user            : chr(0) 
[18:07:04.846]  $ revtunnel       : logi FALSE
[18:07:04.846]  $ rshlogfile      : NULL
[18:07:04.846]  $ rshopts         : chr(0) 
[18:07:04.846]  $ rank            : int 1
[18:07:04.846]  $ manual          : logi FALSE
[18:07:04.846]  $ dryrun          : logi FALSE
[18:07:04.846]  $ quiet           : logi FALSE
[18:07:04.846]  $ setup_strategy  : chr "parallel"
[18:07:04.846]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:04.846]  $ pidfile         : chr "/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a6d5ab1de.pid"
[18:07:04.846]  $ rshcmd_label    : NULL
[18:07:04.846]  $ rsh_call        : NULL
[18:07:04.846]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:04.846]  $ localMachine    : logi TRUE
[18:07:04.846]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:07:04.846]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:07:04.846]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:07:04.846]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:07:04.846]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:07:04.846]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:07:04.846]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:07:04.846]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:07:04.846]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:07:04.846]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:07:04.846]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:07:04.846]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:07:04.846]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:07:04.846]  $ arguments       :List of 28
[18:07:04.846]   ..$ worker          : chr "localhost"
[18:07:04.846]   ..$ master          : NULL
[18:07:04.846]   ..$ port            : int 11515
[18:07:04.846]   ..$ connectTimeout  : num 120
[18:07:04.846]   ..$ timeout         : num 2592000
[18:07:04.846]   ..$ rscript         : NULL
[18:07:04.846]   ..$ homogeneous     : NULL
[18:07:04.846]   ..$ rscript_args    : NULL
[18:07:04.846]   ..$ rscript_envs    : NULL
[18:07:04.846]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:04.846]   ..$ rscript_startup : NULL
[18:07:04.846]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:07:04.846]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:04.846]   ..$ methods         : logi TRUE
[18:07:04.846]   ..$ socketOptions   : chr "no-delay"
[18:07:04.846]   ..$ useXDR          : logi FALSE
[18:07:04.846]   ..$ outfile         : chr "/dev/null"
[18:07:04.846]   ..$ renice          : int NA
[18:07:04.846]   ..$ rshcmd          : NULL
[18:07:04.846]   ..$ user            : NULL
[18:07:04.846]   ..$ revtunnel       : logi NA
[18:07:04.846]   ..$ rshlogfile      : NULL
[18:07:04.846]   ..$ rshopts         : NULL
[18:07:04.846]   ..$ rank            : int 1
[18:07:04.846]   ..$ manual          : logi FALSE
[18:07:04.846]   ..$ dryrun          : logi FALSE
[18:07:04.846]   ..$ quiet           : logi FALSE
[18:07:04.846]   ..$ setup_strategy  : chr "parallel"
[18:07:04.846]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:07:04.881] [local output] System call to launch all workers:
[18:07:04.881] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a6d5ab1de.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11515 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:07:04.881] [local output] Starting PSOCK main server
[18:07:04.883] [local output] Workers launched
[18:07:04.883] [local output] Waiting for workers to connect back
[18:07:04.884]  - [local output] 0 workers out of 2 ready
[18:07:05.248]  - [local output] 0 workers out of 2 ready
[18:07:05.250]  - [local output] 1 workers out of 2 ready
[18:07:05.266]  - [local output] 1 workers out of 2 ready
[18:07:05.267]  - [local output] 2 workers out of 2 ready
[18:07:05.267] [local output] Launching of workers completed
[18:07:05.268] [local output] Collecting session information from workers
[18:07:05.269] [local output]  - Worker #1 of 2
[18:07:05.270] [local output]  - Worker #2 of 2
[18:07:05.270] [local output] makeClusterPSOCK() ... done
[18:07:05.288] Packages needed by the future expression (n = 0): <none>
[18:07:05.289] Packages needed by future strategies (n = 0): <none>
[18:07:05.290] {
[18:07:05.290]     {
[18:07:05.290]         {
[18:07:05.290]             ...future.startTime <- base::Sys.time()
[18:07:05.290]             {
[18:07:05.290]                 {
[18:07:05.290]                   {
[18:07:05.290]                     {
[18:07:05.290]                       base::local({
[18:07:05.290]                         has_future <- base::requireNamespace("future", 
[18:07:05.290]                           quietly = TRUE)
[18:07:05.290]                         if (has_future) {
[18:07:05.290]                           ns <- base::getNamespace("future")
[18:07:05.290]                           version <- ns[[".package"]][["version"]]
[18:07:05.290]                           if (is.null(version)) 
[18:07:05.290]                             version <- utils::packageVersion("future")
[18:07:05.290]                         }
[18:07:05.290]                         else {
[18:07:05.290]                           version <- NULL
[18:07:05.290]                         }
[18:07:05.290]                         if (!has_future || version < "1.8.0") {
[18:07:05.290]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:05.290]                             "", base::R.version$version.string), 
[18:07:05.290]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:05.290]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:05.290]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:05.290]                               "release", "version")], collapse = " "), 
[18:07:05.290]                             hostname = base::Sys.info()[["nodename"]])
[18:07:05.290]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:05.290]                             info)
[18:07:05.290]                           info <- base::paste(info, collapse = "; ")
[18:07:05.290]                           if (!has_future) {
[18:07:05.290]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:05.290]                               info)
[18:07:05.290]                           }
[18:07:05.290]                           else {
[18:07:05.290]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:05.290]                               info, version)
[18:07:05.290]                           }
[18:07:05.290]                           base::stop(msg)
[18:07:05.290]                         }
[18:07:05.290]                       })
[18:07:05.290]                     }
[18:07:05.290]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:05.290]                     base::options(mc.cores = 1L)
[18:07:05.290]                   }
[18:07:05.290]                   ...future.strategy.old <- future::plan("list")
[18:07:05.290]                   options(future.plan = NULL)
[18:07:05.290]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:05.290]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:05.290]                 }
[18:07:05.290]                 ...future.workdir <- getwd()
[18:07:05.290]             }
[18:07:05.290]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:05.290]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:05.290]         }
[18:07:05.290]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:05.290]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:05.290]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:05.290]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:05.290]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:05.290]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:05.290]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:05.290]             base::names(...future.oldOptions))
[18:07:05.290]     }
[18:07:05.290]     if (FALSE) {
[18:07:05.290]     }
[18:07:05.290]     else {
[18:07:05.290]         if (TRUE) {
[18:07:05.290]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:05.290]                 open = "w")
[18:07:05.290]         }
[18:07:05.290]         else {
[18:07:05.290]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:05.290]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:05.290]         }
[18:07:05.290]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:05.290]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:05.290]             base::sink(type = "output", split = FALSE)
[18:07:05.290]             base::close(...future.stdout)
[18:07:05.290]         }, add = TRUE)
[18:07:05.290]     }
[18:07:05.290]     ...future.frame <- base::sys.nframe()
[18:07:05.290]     ...future.conditions <- base::list()
[18:07:05.290]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:05.290]     if (FALSE) {
[18:07:05.290]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:05.290]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:05.290]     }
[18:07:05.290]     ...future.result <- base::tryCatch({
[18:07:05.290]         base::withCallingHandlers({
[18:07:05.290]             ...future.value <- base::withVisible(base::local({
[18:07:05.290]                 ...future.makeSendCondition <- base::local({
[18:07:05.290]                   sendCondition <- NULL
[18:07:05.290]                   function(frame = 1L) {
[18:07:05.290]                     if (is.function(sendCondition)) 
[18:07:05.290]                       return(sendCondition)
[18:07:05.290]                     ns <- getNamespace("parallel")
[18:07:05.290]                     if (exists("sendData", mode = "function", 
[18:07:05.290]                       envir = ns)) {
[18:07:05.290]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:05.290]                         envir = ns)
[18:07:05.290]                       envir <- sys.frame(frame)
[18:07:05.290]                       master <- NULL
[18:07:05.290]                       while (!identical(envir, .GlobalEnv) && 
[18:07:05.290]                         !identical(envir, emptyenv())) {
[18:07:05.290]                         if (exists("master", mode = "list", envir = envir, 
[18:07:05.290]                           inherits = FALSE)) {
[18:07:05.290]                           master <- get("master", mode = "list", 
[18:07:05.290]                             envir = envir, inherits = FALSE)
[18:07:05.290]                           if (inherits(master, c("SOCKnode", 
[18:07:05.290]                             "SOCK0node"))) {
[18:07:05.290]                             sendCondition <<- function(cond) {
[18:07:05.290]                               data <- list(type = "VALUE", value = cond, 
[18:07:05.290]                                 success = TRUE)
[18:07:05.290]                               parallel_sendData(master, data)
[18:07:05.290]                             }
[18:07:05.290]                             return(sendCondition)
[18:07:05.290]                           }
[18:07:05.290]                         }
[18:07:05.290]                         frame <- frame + 1L
[18:07:05.290]                         envir <- sys.frame(frame)
[18:07:05.290]                       }
[18:07:05.290]                     }
[18:07:05.290]                     sendCondition <<- function(cond) NULL
[18:07:05.290]                   }
[18:07:05.290]                 })
[18:07:05.290]                 withCallingHandlers({
[18:07:05.290]                   NA
[18:07:05.290]                 }, immediateCondition = function(cond) {
[18:07:05.290]                   sendCondition <- ...future.makeSendCondition()
[18:07:05.290]                   sendCondition(cond)
[18:07:05.290]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:05.290]                   {
[18:07:05.290]                     inherits <- base::inherits
[18:07:05.290]                     invokeRestart <- base::invokeRestart
[18:07:05.290]                     is.null <- base::is.null
[18:07:05.290]                     muffled <- FALSE
[18:07:05.290]                     if (inherits(cond, "message")) {
[18:07:05.290]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:05.290]                       if (muffled) 
[18:07:05.290]                         invokeRestart("muffleMessage")
[18:07:05.290]                     }
[18:07:05.290]                     else if (inherits(cond, "warning")) {
[18:07:05.290]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:05.290]                       if (muffled) 
[18:07:05.290]                         invokeRestart("muffleWarning")
[18:07:05.290]                     }
[18:07:05.290]                     else if (inherits(cond, "condition")) {
[18:07:05.290]                       if (!is.null(pattern)) {
[18:07:05.290]                         computeRestarts <- base::computeRestarts
[18:07:05.290]                         grepl <- base::grepl
[18:07:05.290]                         restarts <- computeRestarts(cond)
[18:07:05.290]                         for (restart in restarts) {
[18:07:05.290]                           name <- restart$name
[18:07:05.290]                           if (is.null(name)) 
[18:07:05.290]                             next
[18:07:05.290]                           if (!grepl(pattern, name)) 
[18:07:05.290]                             next
[18:07:05.290]                           invokeRestart(restart)
[18:07:05.290]                           muffled <- TRUE
[18:07:05.290]                           break
[18:07:05.290]                         }
[18:07:05.290]                       }
[18:07:05.290]                     }
[18:07:05.290]                     invisible(muffled)
[18:07:05.290]                   }
[18:07:05.290]                   muffleCondition(cond)
[18:07:05.290]                 })
[18:07:05.290]             }))
[18:07:05.290]             future::FutureResult(value = ...future.value$value, 
[18:07:05.290]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:05.290]                   ...future.rng), globalenv = if (FALSE) 
[18:07:05.290]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:05.290]                     ...future.globalenv.names))
[18:07:05.290]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:05.290]         }, condition = base::local({
[18:07:05.290]             c <- base::c
[18:07:05.290]             inherits <- base::inherits
[18:07:05.290]             invokeRestart <- base::invokeRestart
[18:07:05.290]             length <- base::length
[18:07:05.290]             list <- base::list
[18:07:05.290]             seq.int <- base::seq.int
[18:07:05.290]             signalCondition <- base::signalCondition
[18:07:05.290]             sys.calls <- base::sys.calls
[18:07:05.290]             `[[` <- base::`[[`
[18:07:05.290]             `+` <- base::`+`
[18:07:05.290]             `<<-` <- base::`<<-`
[18:07:05.290]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:05.290]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:05.290]                   3L)]
[18:07:05.290]             }
[18:07:05.290]             function(cond) {
[18:07:05.290]                 is_error <- inherits(cond, "error")
[18:07:05.290]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:05.290]                   NULL)
[18:07:05.290]                 if (is_error) {
[18:07:05.290]                   sessionInformation <- function() {
[18:07:05.290]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:05.290]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:05.290]                       search = base::search(), system = base::Sys.info())
[18:07:05.290]                   }
[18:07:05.290]                   ...future.conditions[[length(...future.conditions) + 
[18:07:05.290]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:05.290]                     cond$call), session = sessionInformation(), 
[18:07:05.290]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:05.290]                   signalCondition(cond)
[18:07:05.290]                 }
[18:07:05.290]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:05.290]                 "immediateCondition"))) {
[18:07:05.290]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:05.290]                   ...future.conditions[[length(...future.conditions) + 
[18:07:05.290]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:05.290]                   if (TRUE && !signal) {
[18:07:05.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:05.290]                     {
[18:07:05.290]                       inherits <- base::inherits
[18:07:05.290]                       invokeRestart <- base::invokeRestart
[18:07:05.290]                       is.null <- base::is.null
[18:07:05.290]                       muffled <- FALSE
[18:07:05.290]                       if (inherits(cond, "message")) {
[18:07:05.290]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:05.290]                         if (muffled) 
[18:07:05.290]                           invokeRestart("muffleMessage")
[18:07:05.290]                       }
[18:07:05.290]                       else if (inherits(cond, "warning")) {
[18:07:05.290]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:05.290]                         if (muffled) 
[18:07:05.290]                           invokeRestart("muffleWarning")
[18:07:05.290]                       }
[18:07:05.290]                       else if (inherits(cond, "condition")) {
[18:07:05.290]                         if (!is.null(pattern)) {
[18:07:05.290]                           computeRestarts <- base::computeRestarts
[18:07:05.290]                           grepl <- base::grepl
[18:07:05.290]                           restarts <- computeRestarts(cond)
[18:07:05.290]                           for (restart in restarts) {
[18:07:05.290]                             name <- restart$name
[18:07:05.290]                             if (is.null(name)) 
[18:07:05.290]                               next
[18:07:05.290]                             if (!grepl(pattern, name)) 
[18:07:05.290]                               next
[18:07:05.290]                             invokeRestart(restart)
[18:07:05.290]                             muffled <- TRUE
[18:07:05.290]                             break
[18:07:05.290]                           }
[18:07:05.290]                         }
[18:07:05.290]                       }
[18:07:05.290]                       invisible(muffled)
[18:07:05.290]                     }
[18:07:05.290]                     muffleCondition(cond, pattern = "^muffle")
[18:07:05.290]                   }
[18:07:05.290]                 }
[18:07:05.290]                 else {
[18:07:05.290]                   if (TRUE) {
[18:07:05.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:05.290]                     {
[18:07:05.290]                       inherits <- base::inherits
[18:07:05.290]                       invokeRestart <- base::invokeRestart
[18:07:05.290]                       is.null <- base::is.null
[18:07:05.290]                       muffled <- FALSE
[18:07:05.290]                       if (inherits(cond, "message")) {
[18:07:05.290]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:05.290]                         if (muffled) 
[18:07:05.290]                           invokeRestart("muffleMessage")
[18:07:05.290]                       }
[18:07:05.290]                       else if (inherits(cond, "warning")) {
[18:07:05.290]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:05.290]                         if (muffled) 
[18:07:05.290]                           invokeRestart("muffleWarning")
[18:07:05.290]                       }
[18:07:05.290]                       else if (inherits(cond, "condition")) {
[18:07:05.290]                         if (!is.null(pattern)) {
[18:07:05.290]                           computeRestarts <- base::computeRestarts
[18:07:05.290]                           grepl <- base::grepl
[18:07:05.290]                           restarts <- computeRestarts(cond)
[18:07:05.290]                           for (restart in restarts) {
[18:07:05.290]                             name <- restart$name
[18:07:05.290]                             if (is.null(name)) 
[18:07:05.290]                               next
[18:07:05.290]                             if (!grepl(pattern, name)) 
[18:07:05.290]                               next
[18:07:05.290]                             invokeRestart(restart)
[18:07:05.290]                             muffled <- TRUE
[18:07:05.290]                             break
[18:07:05.290]                           }
[18:07:05.290]                         }
[18:07:05.290]                       }
[18:07:05.290]                       invisible(muffled)
[18:07:05.290]                     }
[18:07:05.290]                     muffleCondition(cond, pattern = "^muffle")
[18:07:05.290]                   }
[18:07:05.290]                 }
[18:07:05.290]             }
[18:07:05.290]         }))
[18:07:05.290]     }, error = function(ex) {
[18:07:05.290]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:05.290]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:05.290]                 ...future.rng), started = ...future.startTime, 
[18:07:05.290]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:05.290]             version = "1.8"), class = "FutureResult")
[18:07:05.290]     }, finally = {
[18:07:05.290]         if (!identical(...future.workdir, getwd())) 
[18:07:05.290]             setwd(...future.workdir)
[18:07:05.290]         {
[18:07:05.290]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:05.290]                 ...future.oldOptions$nwarnings <- NULL
[18:07:05.290]             }
[18:07:05.290]             base::options(...future.oldOptions)
[18:07:05.290]             if (.Platform$OS.type == "windows") {
[18:07:05.290]                 old_names <- names(...future.oldEnvVars)
[18:07:05.290]                 envs <- base::Sys.getenv()
[18:07:05.290]                 names <- names(envs)
[18:07:05.290]                 common <- intersect(names, old_names)
[18:07:05.290]                 added <- setdiff(names, old_names)
[18:07:05.290]                 removed <- setdiff(old_names, names)
[18:07:05.290]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:05.290]                   envs[common]]
[18:07:05.290]                 NAMES <- toupper(changed)
[18:07:05.290]                 args <- list()
[18:07:05.290]                 for (kk in seq_along(NAMES)) {
[18:07:05.290]                   name <- changed[[kk]]
[18:07:05.290]                   NAME <- NAMES[[kk]]
[18:07:05.290]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:05.290]                     next
[18:07:05.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:05.290]                 }
[18:07:05.290]                 NAMES <- toupper(added)
[18:07:05.290]                 for (kk in seq_along(NAMES)) {
[18:07:05.290]                   name <- added[[kk]]
[18:07:05.290]                   NAME <- NAMES[[kk]]
[18:07:05.290]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:05.290]                     next
[18:07:05.290]                   args[[name]] <- ""
[18:07:05.290]                 }
[18:07:05.290]                 NAMES <- toupper(removed)
[18:07:05.290]                 for (kk in seq_along(NAMES)) {
[18:07:05.290]                   name <- removed[[kk]]
[18:07:05.290]                   NAME <- NAMES[[kk]]
[18:07:05.290]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:05.290]                     next
[18:07:05.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:05.290]                 }
[18:07:05.290]                 if (length(args) > 0) 
[18:07:05.290]                   base::do.call(base::Sys.setenv, args = args)
[18:07:05.290]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:05.290]             }
[18:07:05.290]             else {
[18:07:05.290]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:05.290]             }
[18:07:05.290]             {
[18:07:05.290]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:05.290]                   0L) {
[18:07:05.290]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:05.290]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:05.290]                   base::options(opts)
[18:07:05.290]                 }
[18:07:05.290]                 {
[18:07:05.290]                   {
[18:07:05.290]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:05.290]                     NULL
[18:07:05.290]                   }
[18:07:05.290]                   options(future.plan = "multisession")
[18:07:05.290]                   if (is.na("multisession")) 
[18:07:05.290]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:05.290]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[18:07:05.290]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:05.290]                     .init = FALSE)
[18:07:05.290]                 }
[18:07:05.290]             }
[18:07:05.290]         }
[18:07:05.290]     })
[18:07:05.290]     if (TRUE) {
[18:07:05.290]         base::sink(type = "output", split = FALSE)
[18:07:05.290]         if (TRUE) {
[18:07:05.290]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:05.290]         }
[18:07:05.290]         else {
[18:07:05.290]             ...future.result["stdout"] <- base::list(NULL)
[18:07:05.290]         }
[18:07:05.290]         base::close(...future.stdout)
[18:07:05.290]         ...future.stdout <- NULL
[18:07:05.290]     }
[18:07:05.290]     ...future.result$conditions <- ...future.conditions
[18:07:05.290]     ...future.result$finished <- base::Sys.time()
[18:07:05.290]     ...future.result
[18:07:05.290] }
[18:07:05.408] MultisessionFuture started
[18:07:05.408] result() for ClusterFuture ...
[18:07:05.408] receiveMessageFromWorker() for ClusterFuture ...
[18:07:05.409] - Validating connection of MultisessionFuture
[18:07:05.488] - received message: FutureResult
[18:07:05.488] - Received FutureResult
[18:07:05.488] - Erased future from FutureRegistry
[18:07:05.488] result() for ClusterFuture ...
[18:07:05.489] - result already collected: FutureResult
[18:07:05.489] result() for ClusterFuture ... done
[18:07:05.489] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:05.489] result() for ClusterFuture ... done
[18:07:05.489] result() for ClusterFuture ...
[18:07:05.490] - result already collected: FutureResult
[18:07:05.490] result() for ClusterFuture ... done
[18:07:05.490] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:05.496] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[18:07:05.498] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:05.498] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:05.498] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:05.498] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:05.499] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:05.499] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:05.499] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:05.499] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:05.499] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:05.500] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:05.500] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:05.500] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:05.500] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:05.501] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:05.501] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:05.501] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:05.501] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:05.502] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:05.502] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:05.502] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:05.502] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:05.502] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:05.503] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:05.503] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:05.503] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:05.503] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:05.504] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:05.504] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:05.504] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:05.504] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:05.505] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:05.505] Option 'future.plan' = ‘multisession’
[18:07:05.505] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:05.505] Setting plan('default')
[18:07:05.506] plan(): Setting new future strategy stack:
[18:07:05.506] List of future strategies:
[18:07:05.506] 1. multisession:
[18:07:05.506]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:05.506]    - tweaked: FALSE
[18:07:05.506]    - call: plan("default", .init = FALSE)
[18:07:05.519] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[18:07:05.520] plan(): Setting new future strategy stack:
[18:07:05.520] List of future strategies:
[18:07:05.520] 1. multisession:
[18:07:05.520]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:05.520]    - tweaked: FALSE
[18:07:05.520]    - call: plan("default")
[18:07:05.521] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:05.521] multisession:
[18:07:05.521] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:05.521] - tweaked: FALSE
[18:07:05.521] - call: plan("default")
[18:07:05.527] getGlobalsAndPackages() ...
[18:07:05.528] Not searching for globals
[18:07:05.528] - globals: [0] <none>
[18:07:05.528] getGlobalsAndPackages() ... DONE
[18:07:05.529] [local output] makeClusterPSOCK() ...
[18:07:05.534] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:07:05.535] [local output] Base port: 11902
[18:07:05.536] [local output] Getting setup options for 2 cluster nodes ...
[18:07:05.536] [local output]  - Node 1 of 2 ...
[18:07:05.537] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:05.538] [local output] Rscript port: 11902

[18:07:05.538] [local output]  - Node 2 of 2 ...
[18:07:05.539] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:05.540] [local output] Rscript port: 11902

[18:07:05.541] [local output] Getting setup options for 2 cluster nodes ... done
[18:07:05.541] [local output]  - Parallel setup requested for some PSOCK nodes
[18:07:05.542] [local output] Setting up PSOCK nodes in parallel
[18:07:05.542] List of 36
[18:07:05.542]  $ worker          : chr "localhost"
[18:07:05.542]   ..- attr(*, "localhost")= logi TRUE
[18:07:05.542]  $ master          : chr "localhost"
[18:07:05.542]  $ port            : int 11902
[18:07:05.542]  $ connectTimeout  : num 120
[18:07:05.542]  $ timeout         : num 2592000
[18:07:05.542]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:07:05.542]  $ homogeneous     : logi TRUE
[18:07:05.542]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:07:05.542]  $ rscript_envs    : NULL
[18:07:05.542]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:05.542]  $ rscript_startup : NULL
[18:07:05.542]  $ rscript_sh      : chr "sh"
[18:07:05.542]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:05.542]  $ methods         : logi TRUE
[18:07:05.542]  $ socketOptions   : chr "no-delay"
[18:07:05.542]  $ useXDR          : logi FALSE
[18:07:05.542]  $ outfile         : chr "/dev/null"
[18:07:05.542]  $ renice          : int NA
[18:07:05.542]  $ rshcmd          : NULL
[18:07:05.542]  $ user            : chr(0) 
[18:07:05.542]  $ revtunnel       : logi FALSE
[18:07:05.542]  $ rshlogfile      : NULL
[18:07:05.542]  $ rshopts         : chr(0) 
[18:07:05.542]  $ rank            : int 1
[18:07:05.542]  $ manual          : logi FALSE
[18:07:05.542]  $ dryrun          : logi FALSE
[18:07:05.542]  $ quiet           : logi FALSE
[18:07:05.542]  $ setup_strategy  : chr "parallel"
[18:07:05.542]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:05.542]  $ pidfile         : chr "/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a197a110f.pid"
[18:07:05.542]  $ rshcmd_label    : NULL
[18:07:05.542]  $ rsh_call        : NULL
[18:07:05.542]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:05.542]  $ localMachine    : logi TRUE
[18:07:05.542]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:07:05.542]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:07:05.542]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:07:05.542]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:07:05.542]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:07:05.542]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:07:05.542]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:07:05.542]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:07:05.542]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:07:05.542]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:07:05.542]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:07:05.542]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:07:05.542]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:07:05.542]  $ arguments       :List of 28
[18:07:05.542]   ..$ worker          : chr "localhost"
[18:07:05.542]   ..$ master          : NULL
[18:07:05.542]   ..$ port            : int 11902
[18:07:05.542]   ..$ connectTimeout  : num 120
[18:07:05.542]   ..$ timeout         : num 2592000
[18:07:05.542]   ..$ rscript         : NULL
[18:07:05.542]   ..$ homogeneous     : NULL
[18:07:05.542]   ..$ rscript_args    : NULL
[18:07:05.542]   ..$ rscript_envs    : NULL
[18:07:05.542]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:05.542]   ..$ rscript_startup : NULL
[18:07:05.542]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:07:05.542]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:05.542]   ..$ methods         : logi TRUE
[18:07:05.542]   ..$ socketOptions   : chr "no-delay"
[18:07:05.542]   ..$ useXDR          : logi FALSE
[18:07:05.542]   ..$ outfile         : chr "/dev/null"
[18:07:05.542]   ..$ renice          : int NA
[18:07:05.542]   ..$ rshcmd          : NULL
[18:07:05.542]   ..$ user            : NULL
[18:07:05.542]   ..$ revtunnel       : logi NA
[18:07:05.542]   ..$ rshlogfile      : NULL
[18:07:05.542]   ..$ rshopts         : NULL
[18:07:05.542]   ..$ rank            : int 1
[18:07:05.542]   ..$ manual          : logi FALSE
[18:07:05.542]   ..$ dryrun          : logi FALSE
[18:07:05.542]   ..$ quiet           : logi FALSE
[18:07:05.542]   ..$ setup_strategy  : chr "parallel"
[18:07:05.542]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:07:05.578] [local output] System call to launch all workers:
[18:07:05.578] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqtzRKZ/worker.rank=1.parallelly.parent=330890.50c8a197a110f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11902 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:07:05.578] [local output] Starting PSOCK main server
[18:07:05.581] [local output] Workers launched
[18:07:05.582] [local output] Waiting for workers to connect back
[18:07:05.582]  - [local output] 0 workers out of 2 ready
[18:07:05.930]  - [local output] 0 workers out of 2 ready
[18:07:05.931]  - [local output] 1 workers out of 2 ready
[18:07:05.944]  - [local output] 1 workers out of 2 ready
[18:07:05.945]  - [local output] 2 workers out of 2 ready
[18:07:05.945] [local output] Launching of workers completed
[18:07:05.945] [local output] Collecting session information from workers
[18:07:05.946] [local output]  - Worker #1 of 2
[18:07:05.948] [local output]  - Worker #2 of 2
[18:07:05.948] [local output] makeClusterPSOCK() ... done
[18:07:05.965] Packages needed by the future expression (n = 0): <none>
[18:07:05.965] Packages needed by future strategies (n = 0): <none>
[18:07:05.966] {
[18:07:05.966]     {
[18:07:05.966]         {
[18:07:05.966]             ...future.startTime <- base::Sys.time()
[18:07:05.966]             {
[18:07:05.966]                 {
[18:07:05.966]                   {
[18:07:05.966]                     {
[18:07:05.966]                       base::local({
[18:07:05.966]                         has_future <- base::requireNamespace("future", 
[18:07:05.966]                           quietly = TRUE)
[18:07:05.966]                         if (has_future) {
[18:07:05.966]                           ns <- base::getNamespace("future")
[18:07:05.966]                           version <- ns[[".package"]][["version"]]
[18:07:05.966]                           if (is.null(version)) 
[18:07:05.966]                             version <- utils::packageVersion("future")
[18:07:05.966]                         }
[18:07:05.966]                         else {
[18:07:05.966]                           version <- NULL
[18:07:05.966]                         }
[18:07:05.966]                         if (!has_future || version < "1.8.0") {
[18:07:05.966]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:05.966]                             "", base::R.version$version.string), 
[18:07:05.966]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:05.966]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:05.966]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:05.966]                               "release", "version")], collapse = " "), 
[18:07:05.966]                             hostname = base::Sys.info()[["nodename"]])
[18:07:05.966]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:05.966]                             info)
[18:07:05.966]                           info <- base::paste(info, collapse = "; ")
[18:07:05.966]                           if (!has_future) {
[18:07:05.966]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:05.966]                               info)
[18:07:05.966]                           }
[18:07:05.966]                           else {
[18:07:05.966]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:05.966]                               info, version)
[18:07:05.966]                           }
[18:07:05.966]                           base::stop(msg)
[18:07:05.966]                         }
[18:07:05.966]                       })
[18:07:05.966]                     }
[18:07:05.966]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:05.966]                     base::options(mc.cores = 1L)
[18:07:05.966]                   }
[18:07:05.966]                   ...future.strategy.old <- future::plan("list")
[18:07:05.966]                   options(future.plan = NULL)
[18:07:05.966]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:05.966]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:05.966]                 }
[18:07:05.966]                 ...future.workdir <- getwd()
[18:07:05.966]             }
[18:07:05.966]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:05.966]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:05.966]         }
[18:07:05.966]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:05.966]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:05.966]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:05.966]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:05.966]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:05.966]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:05.966]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:05.966]             base::names(...future.oldOptions))
[18:07:05.966]     }
[18:07:05.966]     if (FALSE) {
[18:07:05.966]     }
[18:07:05.966]     else {
[18:07:05.966]         if (TRUE) {
[18:07:05.966]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:05.966]                 open = "w")
[18:07:05.966]         }
[18:07:05.966]         else {
[18:07:05.966]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:05.966]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:05.966]         }
[18:07:05.966]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:05.966]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:05.966]             base::sink(type = "output", split = FALSE)
[18:07:05.966]             base::close(...future.stdout)
[18:07:05.966]         }, add = TRUE)
[18:07:05.966]     }
[18:07:05.966]     ...future.frame <- base::sys.nframe()
[18:07:05.966]     ...future.conditions <- base::list()
[18:07:05.966]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:05.966]     if (FALSE) {
[18:07:05.966]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:05.966]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:05.966]     }
[18:07:05.966]     ...future.result <- base::tryCatch({
[18:07:05.966]         base::withCallingHandlers({
[18:07:05.966]             ...future.value <- base::withVisible(base::local({
[18:07:05.966]                 ...future.makeSendCondition <- base::local({
[18:07:05.966]                   sendCondition <- NULL
[18:07:05.966]                   function(frame = 1L) {
[18:07:05.966]                     if (is.function(sendCondition)) 
[18:07:05.966]                       return(sendCondition)
[18:07:05.966]                     ns <- getNamespace("parallel")
[18:07:05.966]                     if (exists("sendData", mode = "function", 
[18:07:05.966]                       envir = ns)) {
[18:07:05.966]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:05.966]                         envir = ns)
[18:07:05.966]                       envir <- sys.frame(frame)
[18:07:05.966]                       master <- NULL
[18:07:05.966]                       while (!identical(envir, .GlobalEnv) && 
[18:07:05.966]                         !identical(envir, emptyenv())) {
[18:07:05.966]                         if (exists("master", mode = "list", envir = envir, 
[18:07:05.966]                           inherits = FALSE)) {
[18:07:05.966]                           master <- get("master", mode = "list", 
[18:07:05.966]                             envir = envir, inherits = FALSE)
[18:07:05.966]                           if (inherits(master, c("SOCKnode", 
[18:07:05.966]                             "SOCK0node"))) {
[18:07:05.966]                             sendCondition <<- function(cond) {
[18:07:05.966]                               data <- list(type = "VALUE", value = cond, 
[18:07:05.966]                                 success = TRUE)
[18:07:05.966]                               parallel_sendData(master, data)
[18:07:05.966]                             }
[18:07:05.966]                             return(sendCondition)
[18:07:05.966]                           }
[18:07:05.966]                         }
[18:07:05.966]                         frame <- frame + 1L
[18:07:05.966]                         envir <- sys.frame(frame)
[18:07:05.966]                       }
[18:07:05.966]                     }
[18:07:05.966]                     sendCondition <<- function(cond) NULL
[18:07:05.966]                   }
[18:07:05.966]                 })
[18:07:05.966]                 withCallingHandlers({
[18:07:05.966]                   NA
[18:07:05.966]                 }, immediateCondition = function(cond) {
[18:07:05.966]                   sendCondition <- ...future.makeSendCondition()
[18:07:05.966]                   sendCondition(cond)
[18:07:05.966]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:05.966]                   {
[18:07:05.966]                     inherits <- base::inherits
[18:07:05.966]                     invokeRestart <- base::invokeRestart
[18:07:05.966]                     is.null <- base::is.null
[18:07:05.966]                     muffled <- FALSE
[18:07:05.966]                     if (inherits(cond, "message")) {
[18:07:05.966]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:05.966]                       if (muffled) 
[18:07:05.966]                         invokeRestart("muffleMessage")
[18:07:05.966]                     }
[18:07:05.966]                     else if (inherits(cond, "warning")) {
[18:07:05.966]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:05.966]                       if (muffled) 
[18:07:05.966]                         invokeRestart("muffleWarning")
[18:07:05.966]                     }
[18:07:05.966]                     else if (inherits(cond, "condition")) {
[18:07:05.966]                       if (!is.null(pattern)) {
[18:07:05.966]                         computeRestarts <- base::computeRestarts
[18:07:05.966]                         grepl <- base::grepl
[18:07:05.966]                         restarts <- computeRestarts(cond)
[18:07:05.966]                         for (restart in restarts) {
[18:07:05.966]                           name <- restart$name
[18:07:05.966]                           if (is.null(name)) 
[18:07:05.966]                             next
[18:07:05.966]                           if (!grepl(pattern, name)) 
[18:07:05.966]                             next
[18:07:05.966]                           invokeRestart(restart)
[18:07:05.966]                           muffled <- TRUE
[18:07:05.966]                           break
[18:07:05.966]                         }
[18:07:05.966]                       }
[18:07:05.966]                     }
[18:07:05.966]                     invisible(muffled)
[18:07:05.966]                   }
[18:07:05.966]                   muffleCondition(cond)
[18:07:05.966]                 })
[18:07:05.966]             }))
[18:07:05.966]             future::FutureResult(value = ...future.value$value, 
[18:07:05.966]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:05.966]                   ...future.rng), globalenv = if (FALSE) 
[18:07:05.966]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:05.966]                     ...future.globalenv.names))
[18:07:05.966]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:05.966]         }, condition = base::local({
[18:07:05.966]             c <- base::c
[18:07:05.966]             inherits <- base::inherits
[18:07:05.966]             invokeRestart <- base::invokeRestart
[18:07:05.966]             length <- base::length
[18:07:05.966]             list <- base::list
[18:07:05.966]             seq.int <- base::seq.int
[18:07:05.966]             signalCondition <- base::signalCondition
[18:07:05.966]             sys.calls <- base::sys.calls
[18:07:05.966]             `[[` <- base::`[[`
[18:07:05.966]             `+` <- base::`+`
[18:07:05.966]             `<<-` <- base::`<<-`
[18:07:05.966]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:05.966]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:05.966]                   3L)]
[18:07:05.966]             }
[18:07:05.966]             function(cond) {
[18:07:05.966]                 is_error <- inherits(cond, "error")
[18:07:05.966]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:05.966]                   NULL)
[18:07:05.966]                 if (is_error) {
[18:07:05.966]                   sessionInformation <- function() {
[18:07:05.966]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:05.966]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:05.966]                       search = base::search(), system = base::Sys.info())
[18:07:05.966]                   }
[18:07:05.966]                   ...future.conditions[[length(...future.conditions) + 
[18:07:05.966]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:05.966]                     cond$call), session = sessionInformation(), 
[18:07:05.966]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:05.966]                   signalCondition(cond)
[18:07:05.966]                 }
[18:07:05.966]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:05.966]                 "immediateCondition"))) {
[18:07:05.966]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:05.966]                   ...future.conditions[[length(...future.conditions) + 
[18:07:05.966]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:05.966]                   if (TRUE && !signal) {
[18:07:05.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:05.966]                     {
[18:07:05.966]                       inherits <- base::inherits
[18:07:05.966]                       invokeRestart <- base::invokeRestart
[18:07:05.966]                       is.null <- base::is.null
[18:07:05.966]                       muffled <- FALSE
[18:07:05.966]                       if (inherits(cond, "message")) {
[18:07:05.966]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:05.966]                         if (muffled) 
[18:07:05.966]                           invokeRestart("muffleMessage")
[18:07:05.966]                       }
[18:07:05.966]                       else if (inherits(cond, "warning")) {
[18:07:05.966]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:05.966]                         if (muffled) 
[18:07:05.966]                           invokeRestart("muffleWarning")
[18:07:05.966]                       }
[18:07:05.966]                       else if (inherits(cond, "condition")) {
[18:07:05.966]                         if (!is.null(pattern)) {
[18:07:05.966]                           computeRestarts <- base::computeRestarts
[18:07:05.966]                           grepl <- base::grepl
[18:07:05.966]                           restarts <- computeRestarts(cond)
[18:07:05.966]                           for (restart in restarts) {
[18:07:05.966]                             name <- restart$name
[18:07:05.966]                             if (is.null(name)) 
[18:07:05.966]                               next
[18:07:05.966]                             if (!grepl(pattern, name)) 
[18:07:05.966]                               next
[18:07:05.966]                             invokeRestart(restart)
[18:07:05.966]                             muffled <- TRUE
[18:07:05.966]                             break
[18:07:05.966]                           }
[18:07:05.966]                         }
[18:07:05.966]                       }
[18:07:05.966]                       invisible(muffled)
[18:07:05.966]                     }
[18:07:05.966]                     muffleCondition(cond, pattern = "^muffle")
[18:07:05.966]                   }
[18:07:05.966]                 }
[18:07:05.966]                 else {
[18:07:05.966]                   if (TRUE) {
[18:07:05.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:05.966]                     {
[18:07:05.966]                       inherits <- base::inherits
[18:07:05.966]                       invokeRestart <- base::invokeRestart
[18:07:05.966]                       is.null <- base::is.null
[18:07:05.966]                       muffled <- FALSE
[18:07:05.966]                       if (inherits(cond, "message")) {
[18:07:05.966]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:05.966]                         if (muffled) 
[18:07:05.966]                           invokeRestart("muffleMessage")
[18:07:05.966]                       }
[18:07:05.966]                       else if (inherits(cond, "warning")) {
[18:07:05.966]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:05.966]                         if (muffled) 
[18:07:05.966]                           invokeRestart("muffleWarning")
[18:07:05.966]                       }
[18:07:05.966]                       else if (inherits(cond, "condition")) {
[18:07:05.966]                         if (!is.null(pattern)) {
[18:07:05.966]                           computeRestarts <- base::computeRestarts
[18:07:05.966]                           grepl <- base::grepl
[18:07:05.966]                           restarts <- computeRestarts(cond)
[18:07:05.966]                           for (restart in restarts) {
[18:07:05.966]                             name <- restart$name
[18:07:05.966]                             if (is.null(name)) 
[18:07:05.966]                               next
[18:07:05.966]                             if (!grepl(pattern, name)) 
[18:07:05.966]                               next
[18:07:05.966]                             invokeRestart(restart)
[18:07:05.966]                             muffled <- TRUE
[18:07:05.966]                             break
[18:07:05.966]                           }
[18:07:05.966]                         }
[18:07:05.966]                       }
[18:07:05.966]                       invisible(muffled)
[18:07:05.966]                     }
[18:07:05.966]                     muffleCondition(cond, pattern = "^muffle")
[18:07:05.966]                   }
[18:07:05.966]                 }
[18:07:05.966]             }
[18:07:05.966]         }))
[18:07:05.966]     }, error = function(ex) {
[18:07:05.966]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:05.966]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:05.966]                 ...future.rng), started = ...future.startTime, 
[18:07:05.966]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:05.966]             version = "1.8"), class = "FutureResult")
[18:07:05.966]     }, finally = {
[18:07:05.966]         if (!identical(...future.workdir, getwd())) 
[18:07:05.966]             setwd(...future.workdir)
[18:07:05.966]         {
[18:07:05.966]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:05.966]                 ...future.oldOptions$nwarnings <- NULL
[18:07:05.966]             }
[18:07:05.966]             base::options(...future.oldOptions)
[18:07:05.966]             if (.Platform$OS.type == "windows") {
[18:07:05.966]                 old_names <- names(...future.oldEnvVars)
[18:07:05.966]                 envs <- base::Sys.getenv()
[18:07:05.966]                 names <- names(envs)
[18:07:05.966]                 common <- intersect(names, old_names)
[18:07:05.966]                 added <- setdiff(names, old_names)
[18:07:05.966]                 removed <- setdiff(old_names, names)
[18:07:05.966]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:05.966]                   envs[common]]
[18:07:05.966]                 NAMES <- toupper(changed)
[18:07:05.966]                 args <- list()
[18:07:05.966]                 for (kk in seq_along(NAMES)) {
[18:07:05.966]                   name <- changed[[kk]]
[18:07:05.966]                   NAME <- NAMES[[kk]]
[18:07:05.966]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:05.966]                     next
[18:07:05.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:05.966]                 }
[18:07:05.966]                 NAMES <- toupper(added)
[18:07:05.966]                 for (kk in seq_along(NAMES)) {
[18:07:05.966]                   name <- added[[kk]]
[18:07:05.966]                   NAME <- NAMES[[kk]]
[18:07:05.966]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:05.966]                     next
[18:07:05.966]                   args[[name]] <- ""
[18:07:05.966]                 }
[18:07:05.966]                 NAMES <- toupper(removed)
[18:07:05.966]                 for (kk in seq_along(NAMES)) {
[18:07:05.966]                   name <- removed[[kk]]
[18:07:05.966]                   NAME <- NAMES[[kk]]
[18:07:05.966]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:05.966]                     next
[18:07:05.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:05.966]                 }
[18:07:05.966]                 if (length(args) > 0) 
[18:07:05.966]                   base::do.call(base::Sys.setenv, args = args)
[18:07:05.966]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:05.966]             }
[18:07:05.966]             else {
[18:07:05.966]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:05.966]             }
[18:07:05.966]             {
[18:07:05.966]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:05.966]                   0L) {
[18:07:05.966]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:05.966]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:05.966]                   base::options(opts)
[18:07:05.966]                 }
[18:07:05.966]                 {
[18:07:05.966]                   {
[18:07:05.966]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:05.966]                     NULL
[18:07:05.966]                   }
[18:07:05.966]                   options(future.plan = "multisession")
[18:07:05.966]                   if (is.na("")) 
[18:07:05.966]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:05.966]                   else Sys.setenv(R_FUTURE_PLAN = "")
[18:07:05.966]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:05.966]                     .init = FALSE)
[18:07:05.966]                 }
[18:07:05.966]             }
[18:07:05.966]         }
[18:07:05.966]     })
[18:07:05.966]     if (TRUE) {
[18:07:05.966]         base::sink(type = "output", split = FALSE)
[18:07:05.966]         if (TRUE) {
[18:07:05.966]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:05.966]         }
[18:07:05.966]         else {
[18:07:05.966]             ...future.result["stdout"] <- base::list(NULL)
[18:07:05.966]         }
[18:07:05.966]         base::close(...future.stdout)
[18:07:05.966]         ...future.stdout <- NULL
[18:07:05.966]     }
[18:07:05.966]     ...future.result$conditions <- ...future.conditions
[18:07:05.966]     ...future.result$finished <- base::Sys.time()
[18:07:05.966]     ...future.result
[18:07:05.966] }
[18:07:06.068] MultisessionFuture started
[18:07:06.068] result() for ClusterFuture ...
[18:07:06.068] receiveMessageFromWorker() for ClusterFuture ...
[18:07:06.069] - Validating connection of MultisessionFuture
[18:07:06.132] - received message: FutureResult
[18:07:06.132] - Received FutureResult
[18:07:06.133] - Erased future from FutureRegistry
[18:07:06.133] result() for ClusterFuture ...
[18:07:06.133] - result already collected: FutureResult
[18:07:06.134] result() for ClusterFuture ... done
[18:07:06.134] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:06.134] result() for ClusterFuture ... done
[18:07:06.135] result() for ClusterFuture ...
[18:07:06.135] - result already collected: FutureResult
[18:07:06.135] result() for ClusterFuture ... done
[18:07:06.136] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:06.143] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[18:07:06.146] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:06.146] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:06.147] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:06.147] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:06.148] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:06.148] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:06.148] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:06.149] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:06.149] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:06.149] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:06.150] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:06.150] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:06.150] R_FUTURE_PLAN=‘multisession’
[18:07:06.151] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[18:07:06.151] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:06.152] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:06.152] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:06.152] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:06.153] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:06.153] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:06.153] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:06.154] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:06.154] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:06.154] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:06.155] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:06.155] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:06.155] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:06.156] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:06.156] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:06.156] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:06.157] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:06.157] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:06.158] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:06.158] Option 'future.plan' = ‘multisession’
[18:07:06.159] R command-line argument: -p 1
[18:07:06.159]  => 'future.plan' already set.
[18:07:06.160] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:06.160] Setting plan('default')
[18:07:06.160] plan(): Setting new future strategy stack:
[18:07:06.161] List of future strategies:
[18:07:06.161] 1. multisession:
[18:07:06.161]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.161]    - tweaked: FALSE
[18:07:06.161]    - call: plan("default", .init = FALSE)
[18:07:06.171] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[18:07:06.172] plan(): Setting new future strategy stack:
[18:07:06.172] List of future strategies:
[18:07:06.172] 1. multisession:
[18:07:06.172]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.172]    - tweaked: FALSE
[18:07:06.172]    - call: plan("default")
[18:07:06.175] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:06.175] multisession:
[18:07:06.175] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.175] - tweaked: FALSE
[18:07:06.175] - call: plan("default")
[18:07:06.183] getGlobalsAndPackages() ...
[18:07:06.183] Not searching for globals
[18:07:06.184] - globals: [0] <none>
[18:07:06.184] getGlobalsAndPackages() ... DONE
[18:07:06.185] Packages needed by the future expression (n = 0): <none>
[18:07:06.185] Packages needed by future strategies (n = 0): <none>
[18:07:06.186] {
[18:07:06.186]     {
[18:07:06.186]         {
[18:07:06.186]             ...future.startTime <- base::Sys.time()
[18:07:06.186]             {
[18:07:06.186]                 {
[18:07:06.186]                   {
[18:07:06.186]                     base::local({
[18:07:06.186]                       has_future <- base::requireNamespace("future", 
[18:07:06.186]                         quietly = TRUE)
[18:07:06.186]                       if (has_future) {
[18:07:06.186]                         ns <- base::getNamespace("future")
[18:07:06.186]                         version <- ns[[".package"]][["version"]]
[18:07:06.186]                         if (is.null(version)) 
[18:07:06.186]                           version <- utils::packageVersion("future")
[18:07:06.186]                       }
[18:07:06.186]                       else {
[18:07:06.186]                         version <- NULL
[18:07:06.186]                       }
[18:07:06.186]                       if (!has_future || version < "1.8.0") {
[18:07:06.186]                         info <- base::c(r_version = base::gsub("R version ", 
[18:07:06.186]                           "", base::R.version$version.string), 
[18:07:06.186]                           platform = base::sprintf("%s (%s-bit)", 
[18:07:06.186]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:06.186]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:06.186]                             "release", "version")], collapse = " "), 
[18:07:06.186]                           hostname = base::Sys.info()[["nodename"]])
[18:07:06.186]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:07:06.186]                           info)
[18:07:06.186]                         info <- base::paste(info, collapse = "; ")
[18:07:06.186]                         if (!has_future) {
[18:07:06.186]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:06.186]                             info)
[18:07:06.186]                         }
[18:07:06.186]                         else {
[18:07:06.186]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:06.186]                             info, version)
[18:07:06.186]                         }
[18:07:06.186]                         base::stop(msg)
[18:07:06.186]                       }
[18:07:06.186]                     })
[18:07:06.186]                   }
[18:07:06.186]                   ...future.strategy.old <- future::plan("list")
[18:07:06.186]                   options(future.plan = NULL)
[18:07:06.186]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.186]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:06.186]                 }
[18:07:06.186]                 ...future.workdir <- getwd()
[18:07:06.186]             }
[18:07:06.186]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:06.186]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:06.186]         }
[18:07:06.186]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:06.186]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:06.186]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:06.186]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:06.186]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:06.186]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:06.186]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:06.186]             base::names(...future.oldOptions))
[18:07:06.186]     }
[18:07:06.186]     if (FALSE) {
[18:07:06.186]     }
[18:07:06.186]     else {
[18:07:06.186]         if (TRUE) {
[18:07:06.186]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:06.186]                 open = "w")
[18:07:06.186]         }
[18:07:06.186]         else {
[18:07:06.186]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:06.186]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:06.186]         }
[18:07:06.186]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:06.186]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:06.186]             base::sink(type = "output", split = FALSE)
[18:07:06.186]             base::close(...future.stdout)
[18:07:06.186]         }, add = TRUE)
[18:07:06.186]     }
[18:07:06.186]     ...future.frame <- base::sys.nframe()
[18:07:06.186]     ...future.conditions <- base::list()
[18:07:06.186]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:06.186]     if (FALSE) {
[18:07:06.186]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:06.186]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:06.186]     }
[18:07:06.186]     ...future.result <- base::tryCatch({
[18:07:06.186]         base::withCallingHandlers({
[18:07:06.186]             ...future.value <- base::withVisible(base::local(NA))
[18:07:06.186]             future::FutureResult(value = ...future.value$value, 
[18:07:06.186]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.186]                   ...future.rng), globalenv = if (FALSE) 
[18:07:06.186]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:06.186]                     ...future.globalenv.names))
[18:07:06.186]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:06.186]         }, condition = base::local({
[18:07:06.186]             c <- base::c
[18:07:06.186]             inherits <- base::inherits
[18:07:06.186]             invokeRestart <- base::invokeRestart
[18:07:06.186]             length <- base::length
[18:07:06.186]             list <- base::list
[18:07:06.186]             seq.int <- base::seq.int
[18:07:06.186]             signalCondition <- base::signalCondition
[18:07:06.186]             sys.calls <- base::sys.calls
[18:07:06.186]             `[[` <- base::`[[`
[18:07:06.186]             `+` <- base::`+`
[18:07:06.186]             `<<-` <- base::`<<-`
[18:07:06.186]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:06.186]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:06.186]                   3L)]
[18:07:06.186]             }
[18:07:06.186]             function(cond) {
[18:07:06.186]                 is_error <- inherits(cond, "error")
[18:07:06.186]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:06.186]                   NULL)
[18:07:06.186]                 if (is_error) {
[18:07:06.186]                   sessionInformation <- function() {
[18:07:06.186]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:06.186]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:06.186]                       search = base::search(), system = base::Sys.info())
[18:07:06.186]                   }
[18:07:06.186]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.186]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:06.186]                     cond$call), session = sessionInformation(), 
[18:07:06.186]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:06.186]                   signalCondition(cond)
[18:07:06.186]                 }
[18:07:06.186]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:06.186]                 "immediateCondition"))) {
[18:07:06.186]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:06.186]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.186]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:06.186]                   if (TRUE && !signal) {
[18:07:06.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.186]                     {
[18:07:06.186]                       inherits <- base::inherits
[18:07:06.186]                       invokeRestart <- base::invokeRestart
[18:07:06.186]                       is.null <- base::is.null
[18:07:06.186]                       muffled <- FALSE
[18:07:06.186]                       if (inherits(cond, "message")) {
[18:07:06.186]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.186]                         if (muffled) 
[18:07:06.186]                           invokeRestart("muffleMessage")
[18:07:06.186]                       }
[18:07:06.186]                       else if (inherits(cond, "warning")) {
[18:07:06.186]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.186]                         if (muffled) 
[18:07:06.186]                           invokeRestart("muffleWarning")
[18:07:06.186]                       }
[18:07:06.186]                       else if (inherits(cond, "condition")) {
[18:07:06.186]                         if (!is.null(pattern)) {
[18:07:06.186]                           computeRestarts <- base::computeRestarts
[18:07:06.186]                           grepl <- base::grepl
[18:07:06.186]                           restarts <- computeRestarts(cond)
[18:07:06.186]                           for (restart in restarts) {
[18:07:06.186]                             name <- restart$name
[18:07:06.186]                             if (is.null(name)) 
[18:07:06.186]                               next
[18:07:06.186]                             if (!grepl(pattern, name)) 
[18:07:06.186]                               next
[18:07:06.186]                             invokeRestart(restart)
[18:07:06.186]                             muffled <- TRUE
[18:07:06.186]                             break
[18:07:06.186]                           }
[18:07:06.186]                         }
[18:07:06.186]                       }
[18:07:06.186]                       invisible(muffled)
[18:07:06.186]                     }
[18:07:06.186]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.186]                   }
[18:07:06.186]                 }
[18:07:06.186]                 else {
[18:07:06.186]                   if (TRUE) {
[18:07:06.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.186]                     {
[18:07:06.186]                       inherits <- base::inherits
[18:07:06.186]                       invokeRestart <- base::invokeRestart
[18:07:06.186]                       is.null <- base::is.null
[18:07:06.186]                       muffled <- FALSE
[18:07:06.186]                       if (inherits(cond, "message")) {
[18:07:06.186]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.186]                         if (muffled) 
[18:07:06.186]                           invokeRestart("muffleMessage")
[18:07:06.186]                       }
[18:07:06.186]                       else if (inherits(cond, "warning")) {
[18:07:06.186]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.186]                         if (muffled) 
[18:07:06.186]                           invokeRestart("muffleWarning")
[18:07:06.186]                       }
[18:07:06.186]                       else if (inherits(cond, "condition")) {
[18:07:06.186]                         if (!is.null(pattern)) {
[18:07:06.186]                           computeRestarts <- base::computeRestarts
[18:07:06.186]                           grepl <- base::grepl
[18:07:06.186]                           restarts <- computeRestarts(cond)
[18:07:06.186]                           for (restart in restarts) {
[18:07:06.186]                             name <- restart$name
[18:07:06.186]                             if (is.null(name)) 
[18:07:06.186]                               next
[18:07:06.186]                             if (!grepl(pattern, name)) 
[18:07:06.186]                               next
[18:07:06.186]                             invokeRestart(restart)
[18:07:06.186]                             muffled <- TRUE
[18:07:06.186]                             break
[18:07:06.186]                           }
[18:07:06.186]                         }
[18:07:06.186]                       }
[18:07:06.186]                       invisible(muffled)
[18:07:06.186]                     }
[18:07:06.186]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.186]                   }
[18:07:06.186]                 }
[18:07:06.186]             }
[18:07:06.186]         }))
[18:07:06.186]     }, error = function(ex) {
[18:07:06.186]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:06.186]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.186]                 ...future.rng), started = ...future.startTime, 
[18:07:06.186]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:06.186]             version = "1.8"), class = "FutureResult")
[18:07:06.186]     }, finally = {
[18:07:06.186]         if (!identical(...future.workdir, getwd())) 
[18:07:06.186]             setwd(...future.workdir)
[18:07:06.186]         {
[18:07:06.186]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:06.186]                 ...future.oldOptions$nwarnings <- NULL
[18:07:06.186]             }
[18:07:06.186]             base::options(...future.oldOptions)
[18:07:06.186]             if (.Platform$OS.type == "windows") {
[18:07:06.186]                 old_names <- names(...future.oldEnvVars)
[18:07:06.186]                 envs <- base::Sys.getenv()
[18:07:06.186]                 names <- names(envs)
[18:07:06.186]                 common <- intersect(names, old_names)
[18:07:06.186]                 added <- setdiff(names, old_names)
[18:07:06.186]                 removed <- setdiff(old_names, names)
[18:07:06.186]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:06.186]                   envs[common]]
[18:07:06.186]                 NAMES <- toupper(changed)
[18:07:06.186]                 args <- list()
[18:07:06.186]                 for (kk in seq_along(NAMES)) {
[18:07:06.186]                   name <- changed[[kk]]
[18:07:06.186]                   NAME <- NAMES[[kk]]
[18:07:06.186]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.186]                     next
[18:07:06.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.186]                 }
[18:07:06.186]                 NAMES <- toupper(added)
[18:07:06.186]                 for (kk in seq_along(NAMES)) {
[18:07:06.186]                   name <- added[[kk]]
[18:07:06.186]                   NAME <- NAMES[[kk]]
[18:07:06.186]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.186]                     next
[18:07:06.186]                   args[[name]] <- ""
[18:07:06.186]                 }
[18:07:06.186]                 NAMES <- toupper(removed)
[18:07:06.186]                 for (kk in seq_along(NAMES)) {
[18:07:06.186]                   name <- removed[[kk]]
[18:07:06.186]                   NAME <- NAMES[[kk]]
[18:07:06.186]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.186]                     next
[18:07:06.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.186]                 }
[18:07:06.186]                 if (length(args) > 0) 
[18:07:06.186]                   base::do.call(base::Sys.setenv, args = args)
[18:07:06.186]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:06.186]             }
[18:07:06.186]             else {
[18:07:06.186]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:06.186]             }
[18:07:06.186]             {
[18:07:06.186]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:06.186]                   0L) {
[18:07:06.186]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:06.186]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:06.186]                   base::options(opts)
[18:07:06.186]                 }
[18:07:06.186]                 {
[18:07:06.186]                   {
[18:07:06.186]                     NULL
[18:07:06.186]                     RNGkind("Mersenne-Twister")
[18:07:06.186]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:06.186]                       inherits = FALSE)
[18:07:06.186]                   }
[18:07:06.186]                   options(future.plan = "multisession")
[18:07:06.186]                   if (is.na("multisession")) 
[18:07:06.186]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.186]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[18:07:06.186]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:06.186]                     .init = FALSE)
[18:07:06.186]                 }
[18:07:06.186]             }
[18:07:06.186]         }
[18:07:06.186]     })
[18:07:06.186]     if (TRUE) {
[18:07:06.186]         base::sink(type = "output", split = FALSE)
[18:07:06.186]         if (TRUE) {
[18:07:06.186]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:06.186]         }
[18:07:06.186]         else {
[18:07:06.186]             ...future.result["stdout"] <- base::list(NULL)
[18:07:06.186]         }
[18:07:06.186]         base::close(...future.stdout)
[18:07:06.186]         ...future.stdout <- NULL
[18:07:06.186]     }
[18:07:06.186]     ...future.result$conditions <- ...future.conditions
[18:07:06.186]     ...future.result$finished <- base::Sys.time()
[18:07:06.186]     ...future.result
[18:07:06.186] }
[18:07:06.190] plan(): Setting new future strategy stack:
[18:07:06.190] List of future strategies:
[18:07:06.190] 1. sequential:
[18:07:06.190]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.190]    - tweaked: FALSE
[18:07:06.190]    - call: NULL
[18:07:06.191] plan(): nbrOfWorkers() = 1
[18:07:06.194] plan(): Setting new future strategy stack:
[18:07:06.194] List of future strategies:
[18:07:06.194] 1. multisession:
[18:07:06.194]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.194]    - tweaked: FALSE
[18:07:06.194]    - call: plan("default")
[18:07:06.200] plan(): nbrOfWorkers() = 1
[18:07:06.201] SequentialFuture started (and completed)
[18:07:06.201] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:06.207] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[18:07:06.209] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:06.210] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:06.210] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:06.210] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:06.211] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:06.211] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:06.211] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:06.212] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:06.212] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:06.212] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:06.212] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:06.213] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:06.213] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:06.213] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:06.213] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:06.213] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:06.214] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:06.214] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:06.214] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:06.214] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:06.215] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:06.215] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:06.215] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:06.215] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:06.216] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:06.216] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:06.216] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:06.216] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:06.217] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:06.217] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:06.217] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:06.217] Option 'future.plan' = ‘multisession’
[18:07:06.218] R command-line argument: -p 1
[18:07:06.218]  => 'future.plan' already set.
[18:07:06.219] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:06.219] Setting plan('default')
[18:07:06.219] plan(): Setting new future strategy stack:
[18:07:06.219] List of future strategies:
[18:07:06.219] 1. multisession:
[18:07:06.219]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.219]    - tweaked: FALSE
[18:07:06.219]    - call: plan("default", .init = FALSE)
[18:07:06.225] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[18:07:06.226] plan(): Setting new future strategy stack:
[18:07:06.227] List of future strategies:
[18:07:06.227] 1. multisession:
[18:07:06.227]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.227]    - tweaked: FALSE
[18:07:06.227]    - call: plan("default")
[18:07:06.228] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:06.228] multisession:
[18:07:06.228] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.228] - tweaked: FALSE
[18:07:06.228] - call: plan("default")
[18:07:06.234] getGlobalsAndPackages() ...
[18:07:06.234] Not searching for globals
[18:07:06.235] - globals: [0] <none>
[18:07:06.235] getGlobalsAndPackages() ... DONE
[18:07:06.235] Packages needed by the future expression (n = 0): <none>
[18:07:06.236] Packages needed by future strategies (n = 0): <none>
[18:07:06.237] {
[18:07:06.237]     {
[18:07:06.237]         {
[18:07:06.237]             ...future.startTime <- base::Sys.time()
[18:07:06.237]             {
[18:07:06.237]                 {
[18:07:06.237]                   {
[18:07:06.237]                     base::local({
[18:07:06.237]                       has_future <- base::requireNamespace("future", 
[18:07:06.237]                         quietly = TRUE)
[18:07:06.237]                       if (has_future) {
[18:07:06.237]                         ns <- base::getNamespace("future")
[18:07:06.237]                         version <- ns[[".package"]][["version"]]
[18:07:06.237]                         if (is.null(version)) 
[18:07:06.237]                           version <- utils::packageVersion("future")
[18:07:06.237]                       }
[18:07:06.237]                       else {
[18:07:06.237]                         version <- NULL
[18:07:06.237]                       }
[18:07:06.237]                       if (!has_future || version < "1.8.0") {
[18:07:06.237]                         info <- base::c(r_version = base::gsub("R version ", 
[18:07:06.237]                           "", base::R.version$version.string), 
[18:07:06.237]                           platform = base::sprintf("%s (%s-bit)", 
[18:07:06.237]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:06.237]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:06.237]                             "release", "version")], collapse = " "), 
[18:07:06.237]                           hostname = base::Sys.info()[["nodename"]])
[18:07:06.237]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:07:06.237]                           info)
[18:07:06.237]                         info <- base::paste(info, collapse = "; ")
[18:07:06.237]                         if (!has_future) {
[18:07:06.237]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:06.237]                             info)
[18:07:06.237]                         }
[18:07:06.237]                         else {
[18:07:06.237]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:06.237]                             info, version)
[18:07:06.237]                         }
[18:07:06.237]                         base::stop(msg)
[18:07:06.237]                       }
[18:07:06.237]                     })
[18:07:06.237]                   }
[18:07:06.237]                   ...future.strategy.old <- future::plan("list")
[18:07:06.237]                   options(future.plan = NULL)
[18:07:06.237]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.237]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:06.237]                 }
[18:07:06.237]                 ...future.workdir <- getwd()
[18:07:06.237]             }
[18:07:06.237]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:06.237]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:06.237]         }
[18:07:06.237]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:06.237]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:06.237]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:06.237]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:06.237]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:06.237]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:06.237]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:06.237]             base::names(...future.oldOptions))
[18:07:06.237]     }
[18:07:06.237]     if (FALSE) {
[18:07:06.237]     }
[18:07:06.237]     else {
[18:07:06.237]         if (TRUE) {
[18:07:06.237]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:06.237]                 open = "w")
[18:07:06.237]         }
[18:07:06.237]         else {
[18:07:06.237]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:06.237]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:06.237]         }
[18:07:06.237]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:06.237]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:06.237]             base::sink(type = "output", split = FALSE)
[18:07:06.237]             base::close(...future.stdout)
[18:07:06.237]         }, add = TRUE)
[18:07:06.237]     }
[18:07:06.237]     ...future.frame <- base::sys.nframe()
[18:07:06.237]     ...future.conditions <- base::list()
[18:07:06.237]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:06.237]     if (FALSE) {
[18:07:06.237]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:06.237]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:06.237]     }
[18:07:06.237]     ...future.result <- base::tryCatch({
[18:07:06.237]         base::withCallingHandlers({
[18:07:06.237]             ...future.value <- base::withVisible(base::local(NA))
[18:07:06.237]             future::FutureResult(value = ...future.value$value, 
[18:07:06.237]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.237]                   ...future.rng), globalenv = if (FALSE) 
[18:07:06.237]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:06.237]                     ...future.globalenv.names))
[18:07:06.237]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:06.237]         }, condition = base::local({
[18:07:06.237]             c <- base::c
[18:07:06.237]             inherits <- base::inherits
[18:07:06.237]             invokeRestart <- base::invokeRestart
[18:07:06.237]             length <- base::length
[18:07:06.237]             list <- base::list
[18:07:06.237]             seq.int <- base::seq.int
[18:07:06.237]             signalCondition <- base::signalCondition
[18:07:06.237]             sys.calls <- base::sys.calls
[18:07:06.237]             `[[` <- base::`[[`
[18:07:06.237]             `+` <- base::`+`
[18:07:06.237]             `<<-` <- base::`<<-`
[18:07:06.237]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:06.237]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:06.237]                   3L)]
[18:07:06.237]             }
[18:07:06.237]             function(cond) {
[18:07:06.237]                 is_error <- inherits(cond, "error")
[18:07:06.237]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:06.237]                   NULL)
[18:07:06.237]                 if (is_error) {
[18:07:06.237]                   sessionInformation <- function() {
[18:07:06.237]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:06.237]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:06.237]                       search = base::search(), system = base::Sys.info())
[18:07:06.237]                   }
[18:07:06.237]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.237]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:06.237]                     cond$call), session = sessionInformation(), 
[18:07:06.237]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:06.237]                   signalCondition(cond)
[18:07:06.237]                 }
[18:07:06.237]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:06.237]                 "immediateCondition"))) {
[18:07:06.237]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:06.237]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.237]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:06.237]                   if (TRUE && !signal) {
[18:07:06.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.237]                     {
[18:07:06.237]                       inherits <- base::inherits
[18:07:06.237]                       invokeRestart <- base::invokeRestart
[18:07:06.237]                       is.null <- base::is.null
[18:07:06.237]                       muffled <- FALSE
[18:07:06.237]                       if (inherits(cond, "message")) {
[18:07:06.237]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.237]                         if (muffled) 
[18:07:06.237]                           invokeRestart("muffleMessage")
[18:07:06.237]                       }
[18:07:06.237]                       else if (inherits(cond, "warning")) {
[18:07:06.237]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.237]                         if (muffled) 
[18:07:06.237]                           invokeRestart("muffleWarning")
[18:07:06.237]                       }
[18:07:06.237]                       else if (inherits(cond, "condition")) {
[18:07:06.237]                         if (!is.null(pattern)) {
[18:07:06.237]                           computeRestarts <- base::computeRestarts
[18:07:06.237]                           grepl <- base::grepl
[18:07:06.237]                           restarts <- computeRestarts(cond)
[18:07:06.237]                           for (restart in restarts) {
[18:07:06.237]                             name <- restart$name
[18:07:06.237]                             if (is.null(name)) 
[18:07:06.237]                               next
[18:07:06.237]                             if (!grepl(pattern, name)) 
[18:07:06.237]                               next
[18:07:06.237]                             invokeRestart(restart)
[18:07:06.237]                             muffled <- TRUE
[18:07:06.237]                             break
[18:07:06.237]                           }
[18:07:06.237]                         }
[18:07:06.237]                       }
[18:07:06.237]                       invisible(muffled)
[18:07:06.237]                     }
[18:07:06.237]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.237]                   }
[18:07:06.237]                 }
[18:07:06.237]                 else {
[18:07:06.237]                   if (TRUE) {
[18:07:06.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.237]                     {
[18:07:06.237]                       inherits <- base::inherits
[18:07:06.237]                       invokeRestart <- base::invokeRestart
[18:07:06.237]                       is.null <- base::is.null
[18:07:06.237]                       muffled <- FALSE
[18:07:06.237]                       if (inherits(cond, "message")) {
[18:07:06.237]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.237]                         if (muffled) 
[18:07:06.237]                           invokeRestart("muffleMessage")
[18:07:06.237]                       }
[18:07:06.237]                       else if (inherits(cond, "warning")) {
[18:07:06.237]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.237]                         if (muffled) 
[18:07:06.237]                           invokeRestart("muffleWarning")
[18:07:06.237]                       }
[18:07:06.237]                       else if (inherits(cond, "condition")) {
[18:07:06.237]                         if (!is.null(pattern)) {
[18:07:06.237]                           computeRestarts <- base::computeRestarts
[18:07:06.237]                           grepl <- base::grepl
[18:07:06.237]                           restarts <- computeRestarts(cond)
[18:07:06.237]                           for (restart in restarts) {
[18:07:06.237]                             name <- restart$name
[18:07:06.237]                             if (is.null(name)) 
[18:07:06.237]                               next
[18:07:06.237]                             if (!grepl(pattern, name)) 
[18:07:06.237]                               next
[18:07:06.237]                             invokeRestart(restart)
[18:07:06.237]                             muffled <- TRUE
[18:07:06.237]                             break
[18:07:06.237]                           }
[18:07:06.237]                         }
[18:07:06.237]                       }
[18:07:06.237]                       invisible(muffled)
[18:07:06.237]                     }
[18:07:06.237]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.237]                   }
[18:07:06.237]                 }
[18:07:06.237]             }
[18:07:06.237]         }))
[18:07:06.237]     }, error = function(ex) {
[18:07:06.237]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:06.237]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.237]                 ...future.rng), started = ...future.startTime, 
[18:07:06.237]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:06.237]             version = "1.8"), class = "FutureResult")
[18:07:06.237]     }, finally = {
[18:07:06.237]         if (!identical(...future.workdir, getwd())) 
[18:07:06.237]             setwd(...future.workdir)
[18:07:06.237]         {
[18:07:06.237]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:06.237]                 ...future.oldOptions$nwarnings <- NULL
[18:07:06.237]             }
[18:07:06.237]             base::options(...future.oldOptions)
[18:07:06.237]             if (.Platform$OS.type == "windows") {
[18:07:06.237]                 old_names <- names(...future.oldEnvVars)
[18:07:06.237]                 envs <- base::Sys.getenv()
[18:07:06.237]                 names <- names(envs)
[18:07:06.237]                 common <- intersect(names, old_names)
[18:07:06.237]                 added <- setdiff(names, old_names)
[18:07:06.237]                 removed <- setdiff(old_names, names)
[18:07:06.237]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:06.237]                   envs[common]]
[18:07:06.237]                 NAMES <- toupper(changed)
[18:07:06.237]                 args <- list()
[18:07:06.237]                 for (kk in seq_along(NAMES)) {
[18:07:06.237]                   name <- changed[[kk]]
[18:07:06.237]                   NAME <- NAMES[[kk]]
[18:07:06.237]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.237]                     next
[18:07:06.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.237]                 }
[18:07:06.237]                 NAMES <- toupper(added)
[18:07:06.237]                 for (kk in seq_along(NAMES)) {
[18:07:06.237]                   name <- added[[kk]]
[18:07:06.237]                   NAME <- NAMES[[kk]]
[18:07:06.237]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.237]                     next
[18:07:06.237]                   args[[name]] <- ""
[18:07:06.237]                 }
[18:07:06.237]                 NAMES <- toupper(removed)
[18:07:06.237]                 for (kk in seq_along(NAMES)) {
[18:07:06.237]                   name <- removed[[kk]]
[18:07:06.237]                   NAME <- NAMES[[kk]]
[18:07:06.237]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.237]                     next
[18:07:06.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.237]                 }
[18:07:06.237]                 if (length(args) > 0) 
[18:07:06.237]                   base::do.call(base::Sys.setenv, args = args)
[18:07:06.237]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:06.237]             }
[18:07:06.237]             else {
[18:07:06.237]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:06.237]             }
[18:07:06.237]             {
[18:07:06.237]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:06.237]                   0L) {
[18:07:06.237]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:06.237]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:06.237]                   base::options(opts)
[18:07:06.237]                 }
[18:07:06.237]                 {
[18:07:06.237]                   {
[18:07:06.237]                     NULL
[18:07:06.237]                     RNGkind("Mersenne-Twister")
[18:07:06.237]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:06.237]                       inherits = FALSE)
[18:07:06.237]                   }
[18:07:06.237]                   options(future.plan = "multisession")
[18:07:06.237]                   if (is.na("")) 
[18:07:06.237]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.237]                   else Sys.setenv(R_FUTURE_PLAN = "")
[18:07:06.237]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:06.237]                     .init = FALSE)
[18:07:06.237]                 }
[18:07:06.237]             }
[18:07:06.237]         }
[18:07:06.237]     })
[18:07:06.237]     if (TRUE) {
[18:07:06.237]         base::sink(type = "output", split = FALSE)
[18:07:06.237]         if (TRUE) {
[18:07:06.237]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:06.237]         }
[18:07:06.237]         else {
[18:07:06.237]             ...future.result["stdout"] <- base::list(NULL)
[18:07:06.237]         }
[18:07:06.237]         base::close(...future.stdout)
[18:07:06.237]         ...future.stdout <- NULL
[18:07:06.237]     }
[18:07:06.237]     ...future.result$conditions <- ...future.conditions
[18:07:06.237]     ...future.result$finished <- base::Sys.time()
[18:07:06.237]     ...future.result
[18:07:06.237] }
[18:07:06.240] plan(): Setting new future strategy stack:
[18:07:06.241] List of future strategies:
[18:07:06.241] 1. sequential:
[18:07:06.241]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.241]    - tweaked: FALSE
[18:07:06.241]    - call: NULL
[18:07:06.242] plan(): nbrOfWorkers() = 1
[18:07:06.243] plan(): Setting new future strategy stack:
[18:07:06.244] List of future strategies:
[18:07:06.244] 1. multisession:
[18:07:06.244]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.244]    - tweaked: FALSE
[18:07:06.244]    - call: plan("default")
[18:07:06.250] plan(): nbrOfWorkers() = 1
[18:07:06.250] SequentialFuture started (and completed)
[18:07:06.251] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:06.256] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[18:07:06.259] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[18:07:06.259] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[18:07:06.259] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[18:07:06.259] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[18:07:06.260] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[18:07:06.260] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[18:07:06.260] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[18:07:06.261] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[18:07:06.261] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[18:07:06.261] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[18:07:06.261] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[18:07:06.262] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[18:07:06.262] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[18:07:06.262] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[18:07:06.262] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[18:07:06.262] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[18:07:06.263] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[18:07:06.263] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[18:07:06.263] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[18:07:06.264] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[18:07:06.264] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[18:07:06.264] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[18:07:06.264] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[18:07:06.265] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[18:07:06.265] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[18:07:06.265] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[18:07:06.265] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[18:07:06.265] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[18:07:06.266] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[18:07:06.266] Environment variable ‘R_FUTURE_JOURNAL’ not set
[18:07:06.266] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[18:07:06.266] Option 'future.plan' of type ‘function’
[18:07:06.267] R command-line argument: -p 1
[18:07:06.267]  => 'future.plan' already set.
[18:07:06.268] R process uuid: 784200be-659b-1b76-de35-bc819a793bba
[18:07:06.268] Setting plan('default')
[18:07:06.268] plan(): Setting new future strategy stack:
[18:07:06.268] List of future strategies:
[18:07:06.268] 1. multisession:
[18:07:06.268]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.268]    - tweaked: FALSE
[18:07:06.268]    - call: NULL
[18:07:06.274] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[18:07:06.275] plan(): Setting new future strategy stack:
[18:07:06.275] List of future strategies:
[18:07:06.275] 1. multisession:
[18:07:06.275]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.275]    - tweaked: FALSE
[18:07:06.275]    - call: NULL
[18:07:06.276] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:06.276] multisession:
[18:07:06.276] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.276] - tweaked: FALSE
[18:07:06.276] - call: NULL
[18:07:06.283] getGlobalsAndPackages() ...
[18:07:06.283] Not searching for globals
[18:07:06.283] - globals: [0] <none>
[18:07:06.283] getGlobalsAndPackages() ... DONE
[18:07:06.284] Packages needed by the future expression (n = 0): <none>
[18:07:06.284] Packages needed by future strategies (n = 0): <none>
[18:07:06.285] {
[18:07:06.285]     {
[18:07:06.285]         {
[18:07:06.285]             ...future.startTime <- base::Sys.time()
[18:07:06.285]             {
[18:07:06.285]                 {
[18:07:06.285]                   {
[18:07:06.285]                     base::local({
[18:07:06.285]                       has_future <- base::requireNamespace("future", 
[18:07:06.285]                         quietly = TRUE)
[18:07:06.285]                       if (has_future) {
[18:07:06.285]                         ns <- base::getNamespace("future")
[18:07:06.285]                         version <- ns[[".package"]][["version"]]
[18:07:06.285]                         if (is.null(version)) 
[18:07:06.285]                           version <- utils::packageVersion("future")
[18:07:06.285]                       }
[18:07:06.285]                       else {
[18:07:06.285]                         version <- NULL
[18:07:06.285]                       }
[18:07:06.285]                       if (!has_future || version < "1.8.0") {
[18:07:06.285]                         info <- base::c(r_version = base::gsub("R version ", 
[18:07:06.285]                           "", base::R.version$version.string), 
[18:07:06.285]                           platform = base::sprintf("%s (%s-bit)", 
[18:07:06.285]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:06.285]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:06.285]                             "release", "version")], collapse = " "), 
[18:07:06.285]                           hostname = base::Sys.info()[["nodename"]])
[18:07:06.285]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:07:06.285]                           info)
[18:07:06.285]                         info <- base::paste(info, collapse = "; ")
[18:07:06.285]                         if (!has_future) {
[18:07:06.285]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:06.285]                             info)
[18:07:06.285]                         }
[18:07:06.285]                         else {
[18:07:06.285]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:06.285]                             info, version)
[18:07:06.285]                         }
[18:07:06.285]                         base::stop(msg)
[18:07:06.285]                       }
[18:07:06.285]                     })
[18:07:06.285]                   }
[18:07:06.285]                   ...future.strategy.old <- future::plan("list")
[18:07:06.285]                   options(future.plan = NULL)
[18:07:06.285]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.285]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:06.285]                 }
[18:07:06.285]                 ...future.workdir <- getwd()
[18:07:06.285]             }
[18:07:06.285]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:06.285]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:06.285]         }
[18:07:06.285]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:06.285]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:06.285]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:06.285]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:06.285]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:06.285]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:06.285]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:06.285]             base::names(...future.oldOptions))
[18:07:06.285]     }
[18:07:06.285]     if (FALSE) {
[18:07:06.285]     }
[18:07:06.285]     else {
[18:07:06.285]         if (TRUE) {
[18:07:06.285]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:06.285]                 open = "w")
[18:07:06.285]         }
[18:07:06.285]         else {
[18:07:06.285]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:06.285]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:06.285]         }
[18:07:06.285]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:06.285]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:06.285]             base::sink(type = "output", split = FALSE)
[18:07:06.285]             base::close(...future.stdout)
[18:07:06.285]         }, add = TRUE)
[18:07:06.285]     }
[18:07:06.285]     ...future.frame <- base::sys.nframe()
[18:07:06.285]     ...future.conditions <- base::list()
[18:07:06.285]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:06.285]     if (FALSE) {
[18:07:06.285]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:06.285]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:06.285]     }
[18:07:06.285]     ...future.result <- base::tryCatch({
[18:07:06.285]         base::withCallingHandlers({
[18:07:06.285]             ...future.value <- base::withVisible(base::local(NA))
[18:07:06.285]             future::FutureResult(value = ...future.value$value, 
[18:07:06.285]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.285]                   ...future.rng), globalenv = if (FALSE) 
[18:07:06.285]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:06.285]                     ...future.globalenv.names))
[18:07:06.285]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:06.285]         }, condition = base::local({
[18:07:06.285]             c <- base::c
[18:07:06.285]             inherits <- base::inherits
[18:07:06.285]             invokeRestart <- base::invokeRestart
[18:07:06.285]             length <- base::length
[18:07:06.285]             list <- base::list
[18:07:06.285]             seq.int <- base::seq.int
[18:07:06.285]             signalCondition <- base::signalCondition
[18:07:06.285]             sys.calls <- base::sys.calls
[18:07:06.285]             `[[` <- base::`[[`
[18:07:06.285]             `+` <- base::`+`
[18:07:06.285]             `<<-` <- base::`<<-`
[18:07:06.285]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:06.285]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:06.285]                   3L)]
[18:07:06.285]             }
[18:07:06.285]             function(cond) {
[18:07:06.285]                 is_error <- inherits(cond, "error")
[18:07:06.285]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:06.285]                   NULL)
[18:07:06.285]                 if (is_error) {
[18:07:06.285]                   sessionInformation <- function() {
[18:07:06.285]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:06.285]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:06.285]                       search = base::search(), system = base::Sys.info())
[18:07:06.285]                   }
[18:07:06.285]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.285]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:06.285]                     cond$call), session = sessionInformation(), 
[18:07:06.285]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:06.285]                   signalCondition(cond)
[18:07:06.285]                 }
[18:07:06.285]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:06.285]                 "immediateCondition"))) {
[18:07:06.285]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:06.285]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.285]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:06.285]                   if (TRUE && !signal) {
[18:07:06.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.285]                     {
[18:07:06.285]                       inherits <- base::inherits
[18:07:06.285]                       invokeRestart <- base::invokeRestart
[18:07:06.285]                       is.null <- base::is.null
[18:07:06.285]                       muffled <- FALSE
[18:07:06.285]                       if (inherits(cond, "message")) {
[18:07:06.285]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.285]                         if (muffled) 
[18:07:06.285]                           invokeRestart("muffleMessage")
[18:07:06.285]                       }
[18:07:06.285]                       else if (inherits(cond, "warning")) {
[18:07:06.285]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.285]                         if (muffled) 
[18:07:06.285]                           invokeRestart("muffleWarning")
[18:07:06.285]                       }
[18:07:06.285]                       else if (inherits(cond, "condition")) {
[18:07:06.285]                         if (!is.null(pattern)) {
[18:07:06.285]                           computeRestarts <- base::computeRestarts
[18:07:06.285]                           grepl <- base::grepl
[18:07:06.285]                           restarts <- computeRestarts(cond)
[18:07:06.285]                           for (restart in restarts) {
[18:07:06.285]                             name <- restart$name
[18:07:06.285]                             if (is.null(name)) 
[18:07:06.285]                               next
[18:07:06.285]                             if (!grepl(pattern, name)) 
[18:07:06.285]                               next
[18:07:06.285]                             invokeRestart(restart)
[18:07:06.285]                             muffled <- TRUE
[18:07:06.285]                             break
[18:07:06.285]                           }
[18:07:06.285]                         }
[18:07:06.285]                       }
[18:07:06.285]                       invisible(muffled)
[18:07:06.285]                     }
[18:07:06.285]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.285]                   }
[18:07:06.285]                 }
[18:07:06.285]                 else {
[18:07:06.285]                   if (TRUE) {
[18:07:06.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.285]                     {
[18:07:06.285]                       inherits <- base::inherits
[18:07:06.285]                       invokeRestart <- base::invokeRestart
[18:07:06.285]                       is.null <- base::is.null
[18:07:06.285]                       muffled <- FALSE
[18:07:06.285]                       if (inherits(cond, "message")) {
[18:07:06.285]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.285]                         if (muffled) 
[18:07:06.285]                           invokeRestart("muffleMessage")
[18:07:06.285]                       }
[18:07:06.285]                       else if (inherits(cond, "warning")) {
[18:07:06.285]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.285]                         if (muffled) 
[18:07:06.285]                           invokeRestart("muffleWarning")
[18:07:06.285]                       }
[18:07:06.285]                       else if (inherits(cond, "condition")) {
[18:07:06.285]                         if (!is.null(pattern)) {
[18:07:06.285]                           computeRestarts <- base::computeRestarts
[18:07:06.285]                           grepl <- base::grepl
[18:07:06.285]                           restarts <- computeRestarts(cond)
[18:07:06.285]                           for (restart in restarts) {
[18:07:06.285]                             name <- restart$name
[18:07:06.285]                             if (is.null(name)) 
[18:07:06.285]                               next
[18:07:06.285]                             if (!grepl(pattern, name)) 
[18:07:06.285]                               next
[18:07:06.285]                             invokeRestart(restart)
[18:07:06.285]                             muffled <- TRUE
[18:07:06.285]                             break
[18:07:06.285]                           }
[18:07:06.285]                         }
[18:07:06.285]                       }
[18:07:06.285]                       invisible(muffled)
[18:07:06.285]                     }
[18:07:06.285]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.285]                   }
[18:07:06.285]                 }
[18:07:06.285]             }
[18:07:06.285]         }))
[18:07:06.285]     }, error = function(ex) {
[18:07:06.285]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:06.285]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.285]                 ...future.rng), started = ...future.startTime, 
[18:07:06.285]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:06.285]             version = "1.8"), class = "FutureResult")
[18:07:06.285]     }, finally = {
[18:07:06.285]         if (!identical(...future.workdir, getwd())) 
[18:07:06.285]             setwd(...future.workdir)
[18:07:06.285]         {
[18:07:06.285]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:06.285]                 ...future.oldOptions$nwarnings <- NULL
[18:07:06.285]             }
[18:07:06.285]             base::options(...future.oldOptions)
[18:07:06.285]             if (.Platform$OS.type == "windows") {
[18:07:06.285]                 old_names <- names(...future.oldEnvVars)
[18:07:06.285]                 envs <- base::Sys.getenv()
[18:07:06.285]                 names <- names(envs)
[18:07:06.285]                 common <- intersect(names, old_names)
[18:07:06.285]                 added <- setdiff(names, old_names)
[18:07:06.285]                 removed <- setdiff(old_names, names)
[18:07:06.285]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:06.285]                   envs[common]]
[18:07:06.285]                 NAMES <- toupper(changed)
[18:07:06.285]                 args <- list()
[18:07:06.285]                 for (kk in seq_along(NAMES)) {
[18:07:06.285]                   name <- changed[[kk]]
[18:07:06.285]                   NAME <- NAMES[[kk]]
[18:07:06.285]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.285]                     next
[18:07:06.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.285]                 }
[18:07:06.285]                 NAMES <- toupper(added)
[18:07:06.285]                 for (kk in seq_along(NAMES)) {
[18:07:06.285]                   name <- added[[kk]]
[18:07:06.285]                   NAME <- NAMES[[kk]]
[18:07:06.285]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.285]                     next
[18:07:06.285]                   args[[name]] <- ""
[18:07:06.285]                 }
[18:07:06.285]                 NAMES <- toupper(removed)
[18:07:06.285]                 for (kk in seq_along(NAMES)) {
[18:07:06.285]                   name <- removed[[kk]]
[18:07:06.285]                   NAME <- NAMES[[kk]]
[18:07:06.285]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.285]                     next
[18:07:06.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.285]                 }
[18:07:06.285]                 if (length(args) > 0) 
[18:07:06.285]                   base::do.call(base::Sys.setenv, args = args)
[18:07:06.285]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:06.285]             }
[18:07:06.285]             else {
[18:07:06.285]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:06.285]             }
[18:07:06.285]             {
[18:07:06.285]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:06.285]                   0L) {
[18:07:06.285]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:06.285]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:06.285]                   base::options(opts)
[18:07:06.285]                 }
[18:07:06.285]                 {
[18:07:06.285]                   {
[18:07:06.285]                     NULL
[18:07:06.285]                     RNGkind("Mersenne-Twister")
[18:07:06.285]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:06.285]                       inherits = FALSE)
[18:07:06.285]                   }
[18:07:06.285]                   options(future.plan = function (..., workers = availableCores(), 
[18:07:06.285]                     lazy = FALSE, rscript_libs = .libPaths(), 
[18:07:06.285]                     envir = parent.frame()) 
[18:07:06.285]                   {
[18:07:06.285]                     if (is.function(workers)) 
[18:07:06.285]                       workers <- workers()
[18:07:06.285]                     workers <- structure(as.integer(workers), 
[18:07:06.285]                       class = class(workers))
[18:07:06.285]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[18:07:06.285]                       workers >= 1)
[18:07:06.285]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[18:07:06.285]                       return(sequential(..., lazy = TRUE, envir = envir))
[18:07:06.285]                     }
[18:07:06.285]                     future <- MultisessionFuture(..., workers = workers, 
[18:07:06.285]                       lazy = lazy, rscript_libs = rscript_libs, 
[18:07:06.285]                       envir = envir)
[18:07:06.285]                     if (!future$lazy) 
[18:07:06.285]                       future <- run(future)
[18:07:06.285]                     invisible(future)
[18:07:06.285]                   })
[18:07:06.285]                   if (is.na("")) 
[18:07:06.285]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.285]                   else Sys.setenv(R_FUTURE_PLAN = "")
[18:07:06.285]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:06.285]                     .init = FALSE)
[18:07:06.285]                 }
[18:07:06.285]             }
[18:07:06.285]         }
[18:07:06.285]     })
[18:07:06.285]     if (TRUE) {
[18:07:06.285]         base::sink(type = "output", split = FALSE)
[18:07:06.285]         if (TRUE) {
[18:07:06.285]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:06.285]         }
[18:07:06.285]         else {
[18:07:06.285]             ...future.result["stdout"] <- base::list(NULL)
[18:07:06.285]         }
[18:07:06.285]         base::close(...future.stdout)
[18:07:06.285]         ...future.stdout <- NULL
[18:07:06.285]     }
[18:07:06.285]     ...future.result$conditions <- ...future.conditions
[18:07:06.285]     ...future.result$finished <- base::Sys.time()
[18:07:06.285]     ...future.result
[18:07:06.285] }
[18:07:06.290] plan(): Setting new future strategy stack:
[18:07:06.290] List of future strategies:
[18:07:06.290] 1. sequential:
[18:07:06.290]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.290]    - tweaked: FALSE
[18:07:06.290]    - call: NULL
[18:07:06.291] plan(): nbrOfWorkers() = 1
[18:07:06.293] plan(): Setting new future strategy stack:
[18:07:06.293] List of future strategies:
[18:07:06.293] 1. multisession:
[18:07:06.293]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:06.293]    - tweaked: FALSE
[18:07:06.293]    - call: NULL
[18:07:06.301] plan(): nbrOfWorkers() = 1
[18:07:06.302] SequentialFuture started (and completed)
[18:07:06.302] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:06.308] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[18:07:06.313] Option 'future.startup.script': TRUE
[18:07:06.314] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[18:07:06.314] Future startup scripts found: <none>
[18:07:06.314] Option 'future.startup.script': TRUE
[18:07:06.314] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[18:07:06.315] Future startup scripts found: <none>
[18:07:06.315] Option 'future.startup.script': TRUE
[18:07:06.315] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[18:07:06.315] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[18:07:06.319] Option 'future.startup.script': TRUE
[18:07:06.320] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[18:07:06.320] Future startup scripts found: ‘.future.R’
[18:07:06.320] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[18:07:06.322] plan(): Setting new future strategy stack:
[18:07:06.322] List of future strategies:
[18:07:06.322] 1. FutureStrategy:
[18:07:06.322]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.322]    - tweaked: FALSE
[18:07:06.322]    - call: future::plan(oplan)
[18:07:06.324] plan(): nbrOfWorkers() = 1
> 
