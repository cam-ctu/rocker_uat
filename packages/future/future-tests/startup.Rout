
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:48:36.001] plan(): Setting new future strategy stack:
[17:48:36.002] List of future strategies:
[17:48:36.002] 1. sequential:
[17:48:36.002]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.002]    - tweaked: FALSE
[17:48:36.002]    - call: future::plan("sequential")
[17:48:36.013] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[17:48:36.026] plan(): Setting new future strategy stack:
[17:48:36.026] List of future strategies:
[17:48:36.026] 1. sequential:
[17:48:36.026]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.026]    - tweaked: FALSE
[17:48:36.026]    - call: NULL
[17:48:36.037] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[17:48:36.044] plan(): Setting new future strategy stack:
[17:48:36.044] List of future strategies:
[17:48:36.044] 1. sequential:
[17:48:36.044]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.044]    - tweaked: FALSE
[17:48:36.044]    - call: NULL
[17:48:36.044] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:48:36.045] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.045] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.045] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.045] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.045] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.046] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.047] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.048] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.048] R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.048] Coercing from character to numeric: ‘0.01’
[17:48:36.048] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[17:48:36.048] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.048] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.048] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.049] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.049] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.049] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.049] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:36.049] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.049] Setting plan('default')
[17:48:36.049] plan(): Setting new future strategy stack:
[17:48:36.049] List of future strategies:
[17:48:36.049] 1. sequential:
[17:48:36.049]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.049]    - tweaked: FALSE
[17:48:36.049]    - call: NULL
[17:48:36.050] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:48:36.050] plan(): Setting new future strategy stack:
[17:48:36.050] List of future strategies:
[17:48:36.050] 1. sequential:
[17:48:36.050]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.050]    - tweaked: FALSE
[17:48:36.050]    - call: NULL
[17:48:36.051] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:48:36.052] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.052] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.052] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.053] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.054] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.055] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.055] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.055] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:36.055] R command-line argument: -p 1
[17:48:36.055]  => options(future.plan = sequential)
[17:48:36.055] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.055] Setting plan('default')
[17:48:36.056] plan(): Setting new future strategy stack:
[17:48:36.056] List of future strategies:
[17:48:36.056] 1. sequential:
[17:48:36.056]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.056]    - tweaked: FALSE
[17:48:36.056]    - call: NULL
[17:48:36.058] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:48:36.058] plan(): Setting new future strategy stack:
[17:48:36.058] List of future strategies:
[17:48:36.058] 1. sequential:
[17:48:36.058]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.058]    - tweaked: FALSE
[17:48:36.058]    - call: NULL
[17:48:36.059] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[17:48:36.059] plan(): Setting new future strategy stack:
[17:48:36.059] List of future strategies:
[17:48:36.059] 1. sequential:
[17:48:36.059]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.059]    - tweaked: FALSE
[17:48:36.059]    - call: NULL
[17:48:36.059] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[17:48:36.060] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.060] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.060] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.061] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.062] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.063] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:36.064] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.064] Setting plan('default')
[17:48:36.064] plan(): Setting new future strategy stack:
[17:48:36.064] List of future strategies:
[17:48:36.064] 1. sequential:
[17:48:36.064]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.064]    - tweaked: FALSE
[17:48:36.064]    - call: NULL
[17:48:36.064] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:48:36.065] plan(): Setting new future strategy stack:
[17:48:36.065] List of future strategies:
[17:48:36.065] 1. sequential:
[17:48:36.065]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.065]    - tweaked: FALSE
[17:48:36.065]    - call: NULL
[17:48:36.065] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[17:48:36.066] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.066] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.066] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.066] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.066] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.067] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.068] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.069] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:36.070] R command-line argument: -p 2
[17:48:36.070]  => options(future.plan = tweak(multisession, workers = 2))
[17:48:36.072] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.072] Setting plan('default')
[17:48:36.072] plan(): Setting new future strategy stack:
[17:48:36.072] List of future strategies:
[17:48:36.072] 1. multisession:
[17:48:36.072]    - args: function (..., workers = 2L, envir = parent.frame())
[17:48:36.072]    - tweaked: TRUE
[17:48:36.072]    - call: NULL
[17:48:36.073] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[17:48:36.073] plan(): Setting new future strategy stack:
[17:48:36.073] List of future strategies:
[17:48:36.073] 1. multisession:
[17:48:36.073]    - args: function (..., workers = 2L, envir = parent.frame())
[17:48:36.073]    - tweaked: TRUE
[17:48:36.073]    - call: NULL
[17:48:36.073] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:48:36.073] multisession:
[17:48:36.073] - args: function (..., workers = 2L, envir = parent.frame())
[17:48:36.073] - tweaked: TRUE
[17:48:36.073] - call: NULL
[17:48:36.075] getGlobalsAndPackages() ...
[17:48:36.075] Not searching for globals
[17:48:36.075] - globals: [0] <none>
[17:48:36.075] getGlobalsAndPackages() ... DONE
[17:48:36.076] [local output] makeClusterPSOCK() ...
[17:48:36.109] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:48:36.110] [local output] Base port: 11408
[17:48:36.110] [local output] Getting setup options for 2 cluster nodes ...
[17:48:36.110] [local output]  - Node 1 of 2 ...
[17:48:36.111] [local output] localMachine=TRUE => revtunnel=FALSE

[17:48:36.112] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d68ee7d0a.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d68ee7d0a.pid")'’
[17:48:36.301] - Possible to infer worker's PID: TRUE
[17:48:36.301] [local output] Rscript port: 11408

[17:48:36.302] [local output]  - Node 2 of 2 ...
[17:48:36.302] [local output] localMachine=TRUE => revtunnel=FALSE

[17:48:36.303] [local output] Rscript port: 11408

[17:48:36.303] [local output] Getting setup options for 2 cluster nodes ... done
[17:48:36.303] [local output]  - Parallel setup requested for some PSOCK nodes
[17:48:36.304] [local output] Setting up PSOCK nodes in parallel
[17:48:36.304] List of 36
[17:48:36.304]  $ worker          : chr "localhost"
[17:48:36.304]   ..- attr(*, "localhost")= logi TRUE
[17:48:36.304]  $ master          : chr "localhost"
[17:48:36.304]  $ port            : int 11408
[17:48:36.304]  $ connectTimeout  : num 120
[17:48:36.304]  $ timeout         : num 2592000
[17:48:36.304]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:48:36.304]  $ homogeneous     : logi TRUE
[17:48:36.304]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:48:36.304]  $ rscript_envs    : NULL
[17:48:36.304]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:48:36.304]  $ rscript_startup : NULL
[17:48:36.304]  $ rscript_sh      : chr "sh"
[17:48:36.304]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:48:36.304]  $ methods         : logi TRUE
[17:48:36.304]  $ socketOptions   : chr "no-delay"
[17:48:36.304]  $ useXDR          : logi FALSE
[17:48:36.304]  $ outfile         : chr "/dev/null"
[17:48:36.304]  $ renice          : int NA
[17:48:36.304]  $ rshcmd          : NULL
[17:48:36.304]  $ user            : chr(0) 
[17:48:36.304]  $ revtunnel       : logi FALSE
[17:48:36.304]  $ rshlogfile      : NULL
[17:48:36.304]  $ rshopts         : chr(0) 
[17:48:36.304]  $ rank            : int 1
[17:48:36.304]  $ manual          : logi FALSE
[17:48:36.304]  $ dryrun          : logi FALSE
[17:48:36.304]  $ quiet           : logi FALSE
[17:48:36.304]  $ setup_strategy  : chr "parallel"
[17:48:36.304]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:48:36.304]  $ pidfile         : chr "/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d68ee7d0a.pid"
[17:48:36.304]  $ rshcmd_label    : NULL
[17:48:36.304]  $ rsh_call        : NULL
[17:48:36.304]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:48:36.304]  $ localMachine    : logi TRUE
[17:48:36.304]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:48:36.304]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:48:36.304]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:48:36.304]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:48:36.304]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:48:36.304]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:48:36.304]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:48:36.304]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:48:36.304]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:48:36.304]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:48:36.304]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:48:36.304]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:48:36.304]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:48:36.304]  $ arguments       :List of 28
[17:48:36.304]   ..$ worker          : chr "localhost"
[17:48:36.304]   ..$ master          : NULL
[17:48:36.304]   ..$ port            : int 11408
[17:48:36.304]   ..$ connectTimeout  : num 120
[17:48:36.304]   ..$ timeout         : num 2592000
[17:48:36.304]   ..$ rscript         : NULL
[17:48:36.304]   ..$ homogeneous     : NULL
[17:48:36.304]   ..$ rscript_args    : NULL
[17:48:36.304]   ..$ rscript_envs    : NULL
[17:48:36.304]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:48:36.304]   ..$ rscript_startup : NULL
[17:48:36.304]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:48:36.304]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:48:36.304]   ..$ methods         : logi TRUE
[17:48:36.304]   ..$ socketOptions   : chr "no-delay"
[17:48:36.304]   ..$ useXDR          : logi FALSE
[17:48:36.304]   ..$ outfile         : chr "/dev/null"
[17:48:36.304]   ..$ renice          : int NA
[17:48:36.304]   ..$ rshcmd          : NULL
[17:48:36.304]   ..$ user            : NULL
[17:48:36.304]   ..$ revtunnel       : logi NA
[17:48:36.304]   ..$ rshlogfile      : NULL
[17:48:36.304]   ..$ rshopts         : NULL
[17:48:36.304]   ..$ rank            : int 1
[17:48:36.304]   ..$ manual          : logi FALSE
[17:48:36.304]   ..$ dryrun          : logi FALSE
[17:48:36.304]   ..$ quiet           : logi FALSE
[17:48:36.304]   ..$ setup_strategy  : chr "parallel"
[17:48:36.304]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:48:36.320] [local output] System call to launch all workers:
[17:48:36.321] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d68ee7d0a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11408 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:48:36.321] [local output] Starting PSOCK main server
[17:48:36.326] [local output] Workers launched
[17:48:36.326] [local output] Waiting for workers to connect back
[17:48:36.327]  - [local output] 0 workers out of 2 ready
[17:48:36.567]  - [local output] 0 workers out of 2 ready
[17:48:36.568]  - [local output] 1 workers out of 2 ready
[17:48:36.572]  - [local output] 1 workers out of 2 ready
[17:48:36.573]  - [local output] 2 workers out of 2 ready
[17:48:36.573] [local output] Launching of workers completed
[17:48:36.573] [local output] Collecting session information from workers
[17:48:36.574] [local output]  - Worker #1 of 2
[17:48:36.574] [local output]  - Worker #2 of 2
[17:48:36.574] [local output] makeClusterPSOCK() ... done
[17:48:36.587] Packages needed by the future expression (n = 0): <none>
[17:48:36.587] Packages needed by future strategies (n = 0): <none>
[17:48:36.588] {
[17:48:36.588]     {
[17:48:36.588]         {
[17:48:36.588]             ...future.startTime <- base::Sys.time()
[17:48:36.588]             {
[17:48:36.588]                 {
[17:48:36.588]                   {
[17:48:36.588]                     {
[17:48:36.588]                       base::local({
[17:48:36.588]                         has_future <- base::requireNamespace("future", 
[17:48:36.588]                           quietly = TRUE)
[17:48:36.588]                         if (has_future) {
[17:48:36.588]                           ns <- base::getNamespace("future")
[17:48:36.588]                           version <- ns[[".package"]][["version"]]
[17:48:36.588]                           if (is.null(version)) 
[17:48:36.588]                             version <- utils::packageVersion("future")
[17:48:36.588]                         }
[17:48:36.588]                         else {
[17:48:36.588]                           version <- NULL
[17:48:36.588]                         }
[17:48:36.588]                         if (!has_future || version < "1.8.0") {
[17:48:36.588]                           info <- base::c(r_version = base::gsub("R version ", 
[17:48:36.588]                             "", base::R.version$version.string), 
[17:48:36.588]                             platform = base::sprintf("%s (%s-bit)", 
[17:48:36.588]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:48:36.588]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:48:36.588]                               "release", "version")], collapse = " "), 
[17:48:36.588]                             hostname = base::Sys.info()[["nodename"]])
[17:48:36.588]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:48:36.588]                             info)
[17:48:36.588]                           info <- base::paste(info, collapse = "; ")
[17:48:36.588]                           if (!has_future) {
[17:48:36.588]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:48:36.588]                               info)
[17:48:36.588]                           }
[17:48:36.588]                           else {
[17:48:36.588]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:48:36.588]                               info, version)
[17:48:36.588]                           }
[17:48:36.588]                           base::stop(msg)
[17:48:36.588]                         }
[17:48:36.588]                       })
[17:48:36.588]                     }
[17:48:36.588]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:48:36.588]                     base::options(mc.cores = 1L)
[17:48:36.588]                   }
[17:48:36.588]                   ...future.strategy.old <- future::plan("list")
[17:48:36.588]                   options(future.plan = NULL)
[17:48:36.588]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:48:36.588]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:48:36.588]                 }
[17:48:36.588]                 ...future.workdir <- getwd()
[17:48:36.588]             }
[17:48:36.588]             ...future.oldOptions <- base::as.list(base::.Options)
[17:48:36.588]             ...future.oldEnvVars <- base::Sys.getenv()
[17:48:36.588]         }
[17:48:36.588]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:48:36.588]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:48:36.588]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:48:36.588]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:48:36.588]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:48:36.588]             future.stdout.windows.reencode = NULL, width = 80L)
[17:48:36.588]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:48:36.588]             base::names(...future.oldOptions))
[17:48:36.588]     }
[17:48:36.588]     if (FALSE) {
[17:48:36.588]     }
[17:48:36.588]     else {
[17:48:36.588]         if (TRUE) {
[17:48:36.588]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:48:36.588]                 open = "w")
[17:48:36.588]         }
[17:48:36.588]         else {
[17:48:36.588]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:48:36.588]                 windows = "NUL", "/dev/null"), open = "w")
[17:48:36.588]         }
[17:48:36.588]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:48:36.588]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:48:36.588]             base::sink(type = "output", split = FALSE)
[17:48:36.588]             base::close(...future.stdout)
[17:48:36.588]         }, add = TRUE)
[17:48:36.588]     }
[17:48:36.588]     ...future.frame <- base::sys.nframe()
[17:48:36.588]     ...future.conditions <- base::list()
[17:48:36.588]     ...future.rng <- base::globalenv()$.Random.seed
[17:48:36.588]     if (FALSE) {
[17:48:36.588]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:48:36.588]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:48:36.588]     }
[17:48:36.588]     ...future.result <- base::tryCatch({
[17:48:36.588]         base::withCallingHandlers({
[17:48:36.588]             ...future.value <- base::withVisible(base::local({
[17:48:36.588]                 ...future.makeSendCondition <- base::local({
[17:48:36.588]                   sendCondition <- NULL
[17:48:36.588]                   function(frame = 1L) {
[17:48:36.588]                     if (is.function(sendCondition)) 
[17:48:36.588]                       return(sendCondition)
[17:48:36.588]                     ns <- getNamespace("parallel")
[17:48:36.588]                     if (exists("sendData", mode = "function", 
[17:48:36.588]                       envir = ns)) {
[17:48:36.588]                       parallel_sendData <- get("sendData", mode = "function", 
[17:48:36.588]                         envir = ns)
[17:48:36.588]                       envir <- sys.frame(frame)
[17:48:36.588]                       master <- NULL
[17:48:36.588]                       while (!identical(envir, .GlobalEnv) && 
[17:48:36.588]                         !identical(envir, emptyenv())) {
[17:48:36.588]                         if (exists("master", mode = "list", envir = envir, 
[17:48:36.588]                           inherits = FALSE)) {
[17:48:36.588]                           master <- get("master", mode = "list", 
[17:48:36.588]                             envir = envir, inherits = FALSE)
[17:48:36.588]                           if (inherits(master, c("SOCKnode", 
[17:48:36.588]                             "SOCK0node"))) {
[17:48:36.588]                             sendCondition <<- function(cond) {
[17:48:36.588]                               data <- list(type = "VALUE", value = cond, 
[17:48:36.588]                                 success = TRUE)
[17:48:36.588]                               parallel_sendData(master, data)
[17:48:36.588]                             }
[17:48:36.588]                             return(sendCondition)
[17:48:36.588]                           }
[17:48:36.588]                         }
[17:48:36.588]                         frame <- frame + 1L
[17:48:36.588]                         envir <- sys.frame(frame)
[17:48:36.588]                       }
[17:48:36.588]                     }
[17:48:36.588]                     sendCondition <<- function(cond) NULL
[17:48:36.588]                   }
[17:48:36.588]                 })
[17:48:36.588]                 withCallingHandlers({
[17:48:36.588]                   NA
[17:48:36.588]                 }, immediateCondition = function(cond) {
[17:48:36.588]                   sendCondition <- ...future.makeSendCondition()
[17:48:36.588]                   sendCondition(cond)
[17:48:36.588]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:36.588]                   {
[17:48:36.588]                     inherits <- base::inherits
[17:48:36.588]                     invokeRestart <- base::invokeRestart
[17:48:36.588]                     is.null <- base::is.null
[17:48:36.588]                     muffled <- FALSE
[17:48:36.588]                     if (inherits(cond, "message")) {
[17:48:36.588]                       muffled <- grepl(pattern, "muffleMessage")
[17:48:36.588]                       if (muffled) 
[17:48:36.588]                         invokeRestart("muffleMessage")
[17:48:36.588]                     }
[17:48:36.588]                     else if (inherits(cond, "warning")) {
[17:48:36.588]                       muffled <- grepl(pattern, "muffleWarning")
[17:48:36.588]                       if (muffled) 
[17:48:36.588]                         invokeRestart("muffleWarning")
[17:48:36.588]                     }
[17:48:36.588]                     else if (inherits(cond, "condition")) {
[17:48:36.588]                       if (!is.null(pattern)) {
[17:48:36.588]                         computeRestarts <- base::computeRestarts
[17:48:36.588]                         grepl <- base::grepl
[17:48:36.588]                         restarts <- computeRestarts(cond)
[17:48:36.588]                         for (restart in restarts) {
[17:48:36.588]                           name <- restart$name
[17:48:36.588]                           if (is.null(name)) 
[17:48:36.588]                             next
[17:48:36.588]                           if (!grepl(pattern, name)) 
[17:48:36.588]                             next
[17:48:36.588]                           invokeRestart(restart)
[17:48:36.588]                           muffled <- TRUE
[17:48:36.588]                           break
[17:48:36.588]                         }
[17:48:36.588]                       }
[17:48:36.588]                     }
[17:48:36.588]                     invisible(muffled)
[17:48:36.588]                   }
[17:48:36.588]                   muffleCondition(cond)
[17:48:36.588]                 })
[17:48:36.588]             }))
[17:48:36.588]             future::FutureResult(value = ...future.value$value, 
[17:48:36.588]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:36.588]                   ...future.rng), globalenv = if (FALSE) 
[17:48:36.588]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:48:36.588]                     ...future.globalenv.names))
[17:48:36.588]                 else NULL, started = ...future.startTime, version = "1.8")
[17:48:36.588]         }, condition = base::local({
[17:48:36.588]             c <- base::c
[17:48:36.588]             inherits <- base::inherits
[17:48:36.588]             invokeRestart <- base::invokeRestart
[17:48:36.588]             length <- base::length
[17:48:36.588]             list <- base::list
[17:48:36.588]             seq.int <- base::seq.int
[17:48:36.588]             signalCondition <- base::signalCondition
[17:48:36.588]             sys.calls <- base::sys.calls
[17:48:36.588]             `[[` <- base::`[[`
[17:48:36.588]             `+` <- base::`+`
[17:48:36.588]             `<<-` <- base::`<<-`
[17:48:36.588]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:48:36.588]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:48:36.588]                   3L)]
[17:48:36.588]             }
[17:48:36.588]             function(cond) {
[17:48:36.588]                 is_error <- inherits(cond, "error")
[17:48:36.588]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:48:36.588]                   NULL)
[17:48:36.588]                 if (is_error) {
[17:48:36.588]                   sessionInformation <- function() {
[17:48:36.588]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:48:36.588]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:48:36.588]                       search = base::search(), system = base::Sys.info())
[17:48:36.588]                   }
[17:48:36.588]                   ...future.conditions[[length(...future.conditions) + 
[17:48:36.588]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:48:36.588]                     cond$call), session = sessionInformation(), 
[17:48:36.588]                     timestamp = base::Sys.time(), signaled = 0L)
[17:48:36.588]                   signalCondition(cond)
[17:48:36.588]                 }
[17:48:36.588]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:48:36.588]                 "immediateCondition"))) {
[17:48:36.588]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:48:36.588]                   ...future.conditions[[length(...future.conditions) + 
[17:48:36.588]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:48:36.588]                   if (TRUE && !signal) {
[17:48:36.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:36.588]                     {
[17:48:36.588]                       inherits <- base::inherits
[17:48:36.588]                       invokeRestart <- base::invokeRestart
[17:48:36.588]                       is.null <- base::is.null
[17:48:36.588]                       muffled <- FALSE
[17:48:36.588]                       if (inherits(cond, "message")) {
[17:48:36.588]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:36.588]                         if (muffled) 
[17:48:36.588]                           invokeRestart("muffleMessage")
[17:48:36.588]                       }
[17:48:36.588]                       else if (inherits(cond, "warning")) {
[17:48:36.588]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:36.588]                         if (muffled) 
[17:48:36.588]                           invokeRestart("muffleWarning")
[17:48:36.588]                       }
[17:48:36.588]                       else if (inherits(cond, "condition")) {
[17:48:36.588]                         if (!is.null(pattern)) {
[17:48:36.588]                           computeRestarts <- base::computeRestarts
[17:48:36.588]                           grepl <- base::grepl
[17:48:36.588]                           restarts <- computeRestarts(cond)
[17:48:36.588]                           for (restart in restarts) {
[17:48:36.588]                             name <- restart$name
[17:48:36.588]                             if (is.null(name)) 
[17:48:36.588]                               next
[17:48:36.588]                             if (!grepl(pattern, name)) 
[17:48:36.588]                               next
[17:48:36.588]                             invokeRestart(restart)
[17:48:36.588]                             muffled <- TRUE
[17:48:36.588]                             break
[17:48:36.588]                           }
[17:48:36.588]                         }
[17:48:36.588]                       }
[17:48:36.588]                       invisible(muffled)
[17:48:36.588]                     }
[17:48:36.588]                     muffleCondition(cond, pattern = "^muffle")
[17:48:36.588]                   }
[17:48:36.588]                 }
[17:48:36.588]                 else {
[17:48:36.588]                   if (TRUE) {
[17:48:36.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:36.588]                     {
[17:48:36.588]                       inherits <- base::inherits
[17:48:36.588]                       invokeRestart <- base::invokeRestart
[17:48:36.588]                       is.null <- base::is.null
[17:48:36.588]                       muffled <- FALSE
[17:48:36.588]                       if (inherits(cond, "message")) {
[17:48:36.588]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:36.588]                         if (muffled) 
[17:48:36.588]                           invokeRestart("muffleMessage")
[17:48:36.588]                       }
[17:48:36.588]                       else if (inherits(cond, "warning")) {
[17:48:36.588]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:36.588]                         if (muffled) 
[17:48:36.588]                           invokeRestart("muffleWarning")
[17:48:36.588]                       }
[17:48:36.588]                       else if (inherits(cond, "condition")) {
[17:48:36.588]                         if (!is.null(pattern)) {
[17:48:36.588]                           computeRestarts <- base::computeRestarts
[17:48:36.588]                           grepl <- base::grepl
[17:48:36.588]                           restarts <- computeRestarts(cond)
[17:48:36.588]                           for (restart in restarts) {
[17:48:36.588]                             name <- restart$name
[17:48:36.588]                             if (is.null(name)) 
[17:48:36.588]                               next
[17:48:36.588]                             if (!grepl(pattern, name)) 
[17:48:36.588]                               next
[17:48:36.588]                             invokeRestart(restart)
[17:48:36.588]                             muffled <- TRUE
[17:48:36.588]                             break
[17:48:36.588]                           }
[17:48:36.588]                         }
[17:48:36.588]                       }
[17:48:36.588]                       invisible(muffled)
[17:48:36.588]                     }
[17:48:36.588]                     muffleCondition(cond, pattern = "^muffle")
[17:48:36.588]                   }
[17:48:36.588]                 }
[17:48:36.588]             }
[17:48:36.588]         }))
[17:48:36.588]     }, error = function(ex) {
[17:48:36.588]         base::structure(base::list(value = NULL, visible = NULL, 
[17:48:36.588]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:36.588]                 ...future.rng), started = ...future.startTime, 
[17:48:36.588]             finished = Sys.time(), session_uuid = NA_character_, 
[17:48:36.588]             version = "1.8"), class = "FutureResult")
[17:48:36.588]     }, finally = {
[17:48:36.588]         if (!identical(...future.workdir, getwd())) 
[17:48:36.588]             setwd(...future.workdir)
[17:48:36.588]         {
[17:48:36.588]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:48:36.588]                 ...future.oldOptions$nwarnings <- NULL
[17:48:36.588]             }
[17:48:36.588]             base::options(...future.oldOptions)
[17:48:36.588]             if (.Platform$OS.type == "windows") {
[17:48:36.588]                 old_names <- names(...future.oldEnvVars)
[17:48:36.588]                 envs <- base::Sys.getenv()
[17:48:36.588]                 names <- names(envs)
[17:48:36.588]                 common <- intersect(names, old_names)
[17:48:36.588]                 added <- setdiff(names, old_names)
[17:48:36.588]                 removed <- setdiff(old_names, names)
[17:48:36.588]                 changed <- common[...future.oldEnvVars[common] != 
[17:48:36.588]                   envs[common]]
[17:48:36.588]                 NAMES <- toupper(changed)
[17:48:36.588]                 args <- list()
[17:48:36.588]                 for (kk in seq_along(NAMES)) {
[17:48:36.588]                   name <- changed[[kk]]
[17:48:36.588]                   NAME <- NAMES[[kk]]
[17:48:36.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:36.588]                     next
[17:48:36.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:36.588]                 }
[17:48:36.588]                 NAMES <- toupper(added)
[17:48:36.588]                 for (kk in seq_along(NAMES)) {
[17:48:36.588]                   name <- added[[kk]]
[17:48:36.588]                   NAME <- NAMES[[kk]]
[17:48:36.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:36.588]                     next
[17:48:36.588]                   args[[name]] <- ""
[17:48:36.588]                 }
[17:48:36.588]                 NAMES <- toupper(removed)
[17:48:36.588]                 for (kk in seq_along(NAMES)) {
[17:48:36.588]                   name <- removed[[kk]]
[17:48:36.588]                   NAME <- NAMES[[kk]]
[17:48:36.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:36.588]                     next
[17:48:36.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:36.588]                 }
[17:48:36.588]                 if (length(args) > 0) 
[17:48:36.588]                   base::do.call(base::Sys.setenv, args = args)
[17:48:36.588]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:48:36.588]             }
[17:48:36.588]             else {
[17:48:36.588]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:48:36.588]             }
[17:48:36.588]             {
[17:48:36.588]                 if (base::length(...future.futureOptionsAdded) > 
[17:48:36.588]                   0L) {
[17:48:36.588]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:48:36.588]                   base::names(opts) <- ...future.futureOptionsAdded
[17:48:36.588]                   base::options(opts)
[17:48:36.588]                 }
[17:48:36.588]                 {
[17:48:36.588]                   {
[17:48:36.588]                     base::options(mc.cores = ...future.mc.cores.old)
[17:48:36.588]                     NULL
[17:48:36.588]                   }
[17:48:36.588]                   options(future.plan = function (..., workers = 2L, 
[17:48:36.588]                     envir = parent.frame()) 
[17:48:36.588]                   strategy(..., workers = workers, envir = envir))
[17:48:36.588]                   if (is.na(NA_character_)) 
[17:48:36.588]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:48:36.588]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:48:36.588]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:48:36.588]                     .init = FALSE)
[17:48:36.588]                 }
[17:48:36.588]             }
[17:48:36.588]         }
[17:48:36.588]     })
[17:48:36.588]     if (TRUE) {
[17:48:36.588]         base::sink(type = "output", split = FALSE)
[17:48:36.588]         if (TRUE) {
[17:48:36.588]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:48:36.588]         }
[17:48:36.588]         else {
[17:48:36.588]             ...future.result["stdout"] <- base::list(NULL)
[17:48:36.588]         }
[17:48:36.588]         base::close(...future.stdout)
[17:48:36.588]         ...future.stdout <- NULL
[17:48:36.588]     }
[17:48:36.588]     ...future.result$conditions <- ...future.conditions
[17:48:36.588]     ...future.result$finished <- base::Sys.time()
[17:48:36.588]     ...future.result
[17:48:36.588] }
[17:48:36.639] MultisessionFuture started
[17:48:36.640] result() for ClusterFuture ...
[17:48:36.640] receiveMessageFromWorker() for ClusterFuture ...
[17:48:36.640] - Validating connection of MultisessionFuture
[17:48:36.671] - received message: FutureResult
[17:48:36.672] - Received FutureResult
[17:48:36.674] - Erased future from FutureRegistry
[17:48:36.674] result() for ClusterFuture ...
[17:48:36.674] - result already collected: FutureResult
[17:48:36.674] result() for ClusterFuture ... done
[17:48:36.675] receiveMessageFromWorker() for ClusterFuture ... done
[17:48:36.675] result() for ClusterFuture ... done
[17:48:36.675] result() for ClusterFuture ...
[17:48:36.675] - result already collected: FutureResult
[17:48:36.675] result() for ClusterFuture ... done
[17:48:36.675] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:48:36.675] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[17:48:36.676] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.676] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.677] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.678] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.679] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.680] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.681] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[17:48:36.681] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.681] Setting plan('default')
[17:48:36.681] plan(): Setting new future strategy stack:
[17:48:36.681] List of future strategies:
[17:48:36.681] 1. sequential:
[17:48:36.681]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.681]    - tweaked: FALSE
[17:48:36.681]    - call: NULL
[17:48:36.682] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:48:36.683] plan(): Setting new future strategy stack:
[17:48:36.683] List of future strategies:
[17:48:36.683] 1. sequential:
[17:48:36.683]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.683]    - tweaked: FALSE
[17:48:36.683]    - call: NULL
[17:48:36.684] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[17:48:36.686] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.686] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.686] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.686] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.687] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.687] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.687] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.687] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.687] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.688] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.688] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.688] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.688] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.689] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.689] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.689] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.689] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.689] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.690] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.690] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.690] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.690] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.691] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.691] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.691] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.691] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.692] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.692] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.692] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.692] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.692] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.693] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[17:48:36.693] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.694] Setting plan('default')
[17:48:36.694] plan(): Setting new future strategy stack:
[17:48:36.694] List of future strategies:
[17:48:36.694] 1. sequential:
[17:48:36.694]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.694]    - tweaked: FALSE
[17:48:36.694]    - call: NULL
[17:48:36.695] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:48:36.696] plan(): Setting new future strategy stack:
[17:48:36.696] List of future strategies:
[17:48:36.696] 1. sequential:
[17:48:36.696]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.696]    - tweaked: FALSE
[17:48:36.696]    - call: NULL
[17:48:36.697] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[17:48:36.698] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.698] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.699] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.699] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.699] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.699] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.699] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.700] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.700] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.700] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.700] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.700] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_PLAN’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.701] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.702] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.702] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.702] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.702] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.702] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.702] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.703] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[17:48:36.704] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.704] Setting plan('default')
[17:48:36.704] plan(): Setting new future strategy stack:
[17:48:36.704] List of future strategies:
[17:48:36.704] 1. sequential:
[17:48:36.704]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.704]    - tweaked: FALSE
[17:48:36.704]    - call: NULL
[17:48:36.705] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:48:36.705] plan(): Setting new future strategy stack:
[17:48:36.706] List of future strategies:
[17:48:36.706] 1. sequential:
[17:48:36.706]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:36.706]    - tweaked: FALSE
[17:48:36.706]    - call: NULL
[17:48:36.706] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:48:36.707] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:36.707] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:36.707] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:36.708] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:36.709] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:36.709] R_FUTURE_PLAN=‘multisession’
[17:48:36.709] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:48:36.709] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:36.709] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:36.709] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:36.709] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:36.710] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:36.711] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:36.712] Option 'future.plan' = ‘multisession’
[17:48:36.712] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:36.712] Setting plan('default')
[17:48:36.712] plan(): Setting new future strategy stack:
[17:48:36.712] List of future strategies:
[17:48:36.712] 1. multisession:
[17:48:36.712]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:36.712]    - tweaked: FALSE
[17:48:36.712]    - call: plan("default", .init = FALSE)
[17:48:36.718] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:48:36.719] plan(): Setting new future strategy stack:
[17:48:36.719] List of future strategies:
[17:48:36.719] 1. multisession:
[17:48:36.719]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:36.719]    - tweaked: FALSE
[17:48:36.719]    - call: plan("default")
[17:48:36.719] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:48:36.719] multisession:
[17:48:36.719] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:36.719] - tweaked: FALSE
[17:48:36.719] - call: plan("default")
[17:48:36.722] getGlobalsAndPackages() ...
[17:48:36.723] Not searching for globals
[17:48:36.723] - globals: [0] <none>
[17:48:36.723] getGlobalsAndPackages() ... DONE
[17:48:36.723] [local output] makeClusterPSOCK() ...
[17:48:36.726] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:48:36.727] [local output] Base port: 11942
[17:48:36.727] [local output] Getting setup options for 2 cluster nodes ...
[17:48:36.727] [local output]  - Node 1 of 2 ...
[17:48:36.727] [local output] localMachine=TRUE => revtunnel=FALSE

[17:48:36.728] [local output] Rscript port: 11942

[17:48:36.728] [local output]  - Node 2 of 2 ...
[17:48:36.728] [local output] localMachine=TRUE => revtunnel=FALSE

[17:48:36.729] [local output] Rscript port: 11942

[17:48:36.729] [local output] Getting setup options for 2 cluster nodes ... done
[17:48:36.729] [local output]  - Parallel setup requested for some PSOCK nodes
[17:48:36.730] [local output] Setting up PSOCK nodes in parallel
[17:48:36.730] List of 36
[17:48:36.730]  $ worker          : chr "localhost"
[17:48:36.730]   ..- attr(*, "localhost")= logi TRUE
[17:48:36.730]  $ master          : chr "localhost"
[17:48:36.730]  $ port            : int 11942
[17:48:36.730]  $ connectTimeout  : num 120
[17:48:36.730]  $ timeout         : num 2592000
[17:48:36.730]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:48:36.730]  $ homogeneous     : logi TRUE
[17:48:36.730]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:48:36.730]  $ rscript_envs    : NULL
[17:48:36.730]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:48:36.730]  $ rscript_startup : NULL
[17:48:36.730]  $ rscript_sh      : chr "sh"
[17:48:36.730]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:48:36.730]  $ methods         : logi TRUE
[17:48:36.730]  $ socketOptions   : chr "no-delay"
[17:48:36.730]  $ useXDR          : logi FALSE
[17:48:36.730]  $ outfile         : chr "/dev/null"
[17:48:36.730]  $ renice          : int NA
[17:48:36.730]  $ rshcmd          : NULL
[17:48:36.730]  $ user            : chr(0) 
[17:48:36.730]  $ revtunnel       : logi FALSE
[17:48:36.730]  $ rshlogfile      : NULL
[17:48:36.730]  $ rshopts         : chr(0) 
[17:48:36.730]  $ rank            : int 1
[17:48:36.730]  $ manual          : logi FALSE
[17:48:36.730]  $ dryrun          : logi FALSE
[17:48:36.730]  $ quiet           : logi FALSE
[17:48:36.730]  $ setup_strategy  : chr "parallel"
[17:48:36.730]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:48:36.730]  $ pidfile         : chr "/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d43b024e7.pid"
[17:48:36.730]  $ rshcmd_label    : NULL
[17:48:36.730]  $ rsh_call        : NULL
[17:48:36.730]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:48:36.730]  $ localMachine    : logi TRUE
[17:48:36.730]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:48:36.730]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:48:36.730]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:48:36.730]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:48:36.730]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:48:36.730]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:48:36.730]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:48:36.730]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:48:36.730]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:48:36.730]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:48:36.730]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:48:36.730]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:48:36.730]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:48:36.730]  $ arguments       :List of 28
[17:48:36.730]   ..$ worker          : chr "localhost"
[17:48:36.730]   ..$ master          : NULL
[17:48:36.730]   ..$ port            : int 11942
[17:48:36.730]   ..$ connectTimeout  : num 120
[17:48:36.730]   ..$ timeout         : num 2592000
[17:48:36.730]   ..$ rscript         : NULL
[17:48:36.730]   ..$ homogeneous     : NULL
[17:48:36.730]   ..$ rscript_args    : NULL
[17:48:36.730]   ..$ rscript_envs    : NULL
[17:48:36.730]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:48:36.730]   ..$ rscript_startup : NULL
[17:48:36.730]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:48:36.730]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:48:36.730]   ..$ methods         : logi TRUE
[17:48:36.730]   ..$ socketOptions   : chr "no-delay"
[17:48:36.730]   ..$ useXDR          : logi FALSE
[17:48:36.730]   ..$ outfile         : chr "/dev/null"
[17:48:36.730]   ..$ renice          : int NA
[17:48:36.730]   ..$ rshcmd          : NULL
[17:48:36.730]   ..$ user            : NULL
[17:48:36.730]   ..$ revtunnel       : logi NA
[17:48:36.730]   ..$ rshlogfile      : NULL
[17:48:36.730]   ..$ rshopts         : NULL
[17:48:36.730]   ..$ rank            : int 1
[17:48:36.730]   ..$ manual          : logi FALSE
[17:48:36.730]   ..$ dryrun          : logi FALSE
[17:48:36.730]   ..$ quiet           : logi FALSE
[17:48:36.730]   ..$ setup_strategy  : chr "parallel"
[17:48:36.730]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:48:36.746] [local output] System call to launch all workers:
[17:48:36.746] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d43b024e7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11942 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:48:36.746] [local output] Starting PSOCK main server
[17:48:36.747] [local output] Workers launched
[17:48:36.747] [local output] Waiting for workers to connect back
[17:48:36.748]  - [local output] 0 workers out of 2 ready
[17:48:36.993]  - [local output] 0 workers out of 2 ready
[17:48:36.993]  - [local output] 1 workers out of 2 ready
[17:48:36.994]  - [local output] 2 workers out of 2 ready
[17:48:36.994] [local output] Launching of workers completed
[17:48:36.994] [local output] Collecting session information from workers
[17:48:36.995] [local output]  - Worker #1 of 2
[17:48:36.995] [local output]  - Worker #2 of 2
[17:48:36.995] [local output] makeClusterPSOCK() ... done
[17:48:37.007] Packages needed by the future expression (n = 0): <none>
[17:48:37.007] Packages needed by future strategies (n = 0): <none>
[17:48:37.008] {
[17:48:37.008]     {
[17:48:37.008]         {
[17:48:37.008]             ...future.startTime <- base::Sys.time()
[17:48:37.008]             {
[17:48:37.008]                 {
[17:48:37.008]                   {
[17:48:37.008]                     {
[17:48:37.008]                       base::local({
[17:48:37.008]                         has_future <- base::requireNamespace("future", 
[17:48:37.008]                           quietly = TRUE)
[17:48:37.008]                         if (has_future) {
[17:48:37.008]                           ns <- base::getNamespace("future")
[17:48:37.008]                           version <- ns[[".package"]][["version"]]
[17:48:37.008]                           if (is.null(version)) 
[17:48:37.008]                             version <- utils::packageVersion("future")
[17:48:37.008]                         }
[17:48:37.008]                         else {
[17:48:37.008]                           version <- NULL
[17:48:37.008]                         }
[17:48:37.008]                         if (!has_future || version < "1.8.0") {
[17:48:37.008]                           info <- base::c(r_version = base::gsub("R version ", 
[17:48:37.008]                             "", base::R.version$version.string), 
[17:48:37.008]                             platform = base::sprintf("%s (%s-bit)", 
[17:48:37.008]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:48:37.008]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:48:37.008]                               "release", "version")], collapse = " "), 
[17:48:37.008]                             hostname = base::Sys.info()[["nodename"]])
[17:48:37.008]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:48:37.008]                             info)
[17:48:37.008]                           info <- base::paste(info, collapse = "; ")
[17:48:37.008]                           if (!has_future) {
[17:48:37.008]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:48:37.008]                               info)
[17:48:37.008]                           }
[17:48:37.008]                           else {
[17:48:37.008]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:48:37.008]                               info, version)
[17:48:37.008]                           }
[17:48:37.008]                           base::stop(msg)
[17:48:37.008]                         }
[17:48:37.008]                       })
[17:48:37.008]                     }
[17:48:37.008]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:48:37.008]                     base::options(mc.cores = 1L)
[17:48:37.008]                   }
[17:48:37.008]                   ...future.strategy.old <- future::plan("list")
[17:48:37.008]                   options(future.plan = NULL)
[17:48:37.008]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.008]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:48:37.008]                 }
[17:48:37.008]                 ...future.workdir <- getwd()
[17:48:37.008]             }
[17:48:37.008]             ...future.oldOptions <- base::as.list(base::.Options)
[17:48:37.008]             ...future.oldEnvVars <- base::Sys.getenv()
[17:48:37.008]         }
[17:48:37.008]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:48:37.008]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:48:37.008]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:48:37.008]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:48:37.008]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:48:37.008]             future.stdout.windows.reencode = NULL, width = 80L)
[17:48:37.008]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:48:37.008]             base::names(...future.oldOptions))
[17:48:37.008]     }
[17:48:37.008]     if (FALSE) {
[17:48:37.008]     }
[17:48:37.008]     else {
[17:48:37.008]         if (TRUE) {
[17:48:37.008]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:48:37.008]                 open = "w")
[17:48:37.008]         }
[17:48:37.008]         else {
[17:48:37.008]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:48:37.008]                 windows = "NUL", "/dev/null"), open = "w")
[17:48:37.008]         }
[17:48:37.008]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:48:37.008]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:48:37.008]             base::sink(type = "output", split = FALSE)
[17:48:37.008]             base::close(...future.stdout)
[17:48:37.008]         }, add = TRUE)
[17:48:37.008]     }
[17:48:37.008]     ...future.frame <- base::sys.nframe()
[17:48:37.008]     ...future.conditions <- base::list()
[17:48:37.008]     ...future.rng <- base::globalenv()$.Random.seed
[17:48:37.008]     if (FALSE) {
[17:48:37.008]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:48:37.008]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:48:37.008]     }
[17:48:37.008]     ...future.result <- base::tryCatch({
[17:48:37.008]         base::withCallingHandlers({
[17:48:37.008]             ...future.value <- base::withVisible(base::local({
[17:48:37.008]                 ...future.makeSendCondition <- base::local({
[17:48:37.008]                   sendCondition <- NULL
[17:48:37.008]                   function(frame = 1L) {
[17:48:37.008]                     if (is.function(sendCondition)) 
[17:48:37.008]                       return(sendCondition)
[17:48:37.008]                     ns <- getNamespace("parallel")
[17:48:37.008]                     if (exists("sendData", mode = "function", 
[17:48:37.008]                       envir = ns)) {
[17:48:37.008]                       parallel_sendData <- get("sendData", mode = "function", 
[17:48:37.008]                         envir = ns)
[17:48:37.008]                       envir <- sys.frame(frame)
[17:48:37.008]                       master <- NULL
[17:48:37.008]                       while (!identical(envir, .GlobalEnv) && 
[17:48:37.008]                         !identical(envir, emptyenv())) {
[17:48:37.008]                         if (exists("master", mode = "list", envir = envir, 
[17:48:37.008]                           inherits = FALSE)) {
[17:48:37.008]                           master <- get("master", mode = "list", 
[17:48:37.008]                             envir = envir, inherits = FALSE)
[17:48:37.008]                           if (inherits(master, c("SOCKnode", 
[17:48:37.008]                             "SOCK0node"))) {
[17:48:37.008]                             sendCondition <<- function(cond) {
[17:48:37.008]                               data <- list(type = "VALUE", value = cond, 
[17:48:37.008]                                 success = TRUE)
[17:48:37.008]                               parallel_sendData(master, data)
[17:48:37.008]                             }
[17:48:37.008]                             return(sendCondition)
[17:48:37.008]                           }
[17:48:37.008]                         }
[17:48:37.008]                         frame <- frame + 1L
[17:48:37.008]                         envir <- sys.frame(frame)
[17:48:37.008]                       }
[17:48:37.008]                     }
[17:48:37.008]                     sendCondition <<- function(cond) NULL
[17:48:37.008]                   }
[17:48:37.008]                 })
[17:48:37.008]                 withCallingHandlers({
[17:48:37.008]                   NA
[17:48:37.008]                 }, immediateCondition = function(cond) {
[17:48:37.008]                   sendCondition <- ...future.makeSendCondition()
[17:48:37.008]                   sendCondition(cond)
[17:48:37.008]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.008]                   {
[17:48:37.008]                     inherits <- base::inherits
[17:48:37.008]                     invokeRestart <- base::invokeRestart
[17:48:37.008]                     is.null <- base::is.null
[17:48:37.008]                     muffled <- FALSE
[17:48:37.008]                     if (inherits(cond, "message")) {
[17:48:37.008]                       muffled <- grepl(pattern, "muffleMessage")
[17:48:37.008]                       if (muffled) 
[17:48:37.008]                         invokeRestart("muffleMessage")
[17:48:37.008]                     }
[17:48:37.008]                     else if (inherits(cond, "warning")) {
[17:48:37.008]                       muffled <- grepl(pattern, "muffleWarning")
[17:48:37.008]                       if (muffled) 
[17:48:37.008]                         invokeRestart("muffleWarning")
[17:48:37.008]                     }
[17:48:37.008]                     else if (inherits(cond, "condition")) {
[17:48:37.008]                       if (!is.null(pattern)) {
[17:48:37.008]                         computeRestarts <- base::computeRestarts
[17:48:37.008]                         grepl <- base::grepl
[17:48:37.008]                         restarts <- computeRestarts(cond)
[17:48:37.008]                         for (restart in restarts) {
[17:48:37.008]                           name <- restart$name
[17:48:37.008]                           if (is.null(name)) 
[17:48:37.008]                             next
[17:48:37.008]                           if (!grepl(pattern, name)) 
[17:48:37.008]                             next
[17:48:37.008]                           invokeRestart(restart)
[17:48:37.008]                           muffled <- TRUE
[17:48:37.008]                           break
[17:48:37.008]                         }
[17:48:37.008]                       }
[17:48:37.008]                     }
[17:48:37.008]                     invisible(muffled)
[17:48:37.008]                   }
[17:48:37.008]                   muffleCondition(cond)
[17:48:37.008]                 })
[17:48:37.008]             }))
[17:48:37.008]             future::FutureResult(value = ...future.value$value, 
[17:48:37.008]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.008]                   ...future.rng), globalenv = if (FALSE) 
[17:48:37.008]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:48:37.008]                     ...future.globalenv.names))
[17:48:37.008]                 else NULL, started = ...future.startTime, version = "1.8")
[17:48:37.008]         }, condition = base::local({
[17:48:37.008]             c <- base::c
[17:48:37.008]             inherits <- base::inherits
[17:48:37.008]             invokeRestart <- base::invokeRestart
[17:48:37.008]             length <- base::length
[17:48:37.008]             list <- base::list
[17:48:37.008]             seq.int <- base::seq.int
[17:48:37.008]             signalCondition <- base::signalCondition
[17:48:37.008]             sys.calls <- base::sys.calls
[17:48:37.008]             `[[` <- base::`[[`
[17:48:37.008]             `+` <- base::`+`
[17:48:37.008]             `<<-` <- base::`<<-`
[17:48:37.008]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:48:37.008]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:48:37.008]                   3L)]
[17:48:37.008]             }
[17:48:37.008]             function(cond) {
[17:48:37.008]                 is_error <- inherits(cond, "error")
[17:48:37.008]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:48:37.008]                   NULL)
[17:48:37.008]                 if (is_error) {
[17:48:37.008]                   sessionInformation <- function() {
[17:48:37.008]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:48:37.008]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:48:37.008]                       search = base::search(), system = base::Sys.info())
[17:48:37.008]                   }
[17:48:37.008]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.008]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:48:37.008]                     cond$call), session = sessionInformation(), 
[17:48:37.008]                     timestamp = base::Sys.time(), signaled = 0L)
[17:48:37.008]                   signalCondition(cond)
[17:48:37.008]                 }
[17:48:37.008]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:48:37.008]                 "immediateCondition"))) {
[17:48:37.008]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:48:37.008]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.008]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:48:37.008]                   if (TRUE && !signal) {
[17:48:37.008]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.008]                     {
[17:48:37.008]                       inherits <- base::inherits
[17:48:37.008]                       invokeRestart <- base::invokeRestart
[17:48:37.008]                       is.null <- base::is.null
[17:48:37.008]                       muffled <- FALSE
[17:48:37.008]                       if (inherits(cond, "message")) {
[17:48:37.008]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.008]                         if (muffled) 
[17:48:37.008]                           invokeRestart("muffleMessage")
[17:48:37.008]                       }
[17:48:37.008]                       else if (inherits(cond, "warning")) {
[17:48:37.008]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.008]                         if (muffled) 
[17:48:37.008]                           invokeRestart("muffleWarning")
[17:48:37.008]                       }
[17:48:37.008]                       else if (inherits(cond, "condition")) {
[17:48:37.008]                         if (!is.null(pattern)) {
[17:48:37.008]                           computeRestarts <- base::computeRestarts
[17:48:37.008]                           grepl <- base::grepl
[17:48:37.008]                           restarts <- computeRestarts(cond)
[17:48:37.008]                           for (restart in restarts) {
[17:48:37.008]                             name <- restart$name
[17:48:37.008]                             if (is.null(name)) 
[17:48:37.008]                               next
[17:48:37.008]                             if (!grepl(pattern, name)) 
[17:48:37.008]                               next
[17:48:37.008]                             invokeRestart(restart)
[17:48:37.008]                             muffled <- TRUE
[17:48:37.008]                             break
[17:48:37.008]                           }
[17:48:37.008]                         }
[17:48:37.008]                       }
[17:48:37.008]                       invisible(muffled)
[17:48:37.008]                     }
[17:48:37.008]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.008]                   }
[17:48:37.008]                 }
[17:48:37.008]                 else {
[17:48:37.008]                   if (TRUE) {
[17:48:37.008]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.008]                     {
[17:48:37.008]                       inherits <- base::inherits
[17:48:37.008]                       invokeRestart <- base::invokeRestart
[17:48:37.008]                       is.null <- base::is.null
[17:48:37.008]                       muffled <- FALSE
[17:48:37.008]                       if (inherits(cond, "message")) {
[17:48:37.008]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.008]                         if (muffled) 
[17:48:37.008]                           invokeRestart("muffleMessage")
[17:48:37.008]                       }
[17:48:37.008]                       else if (inherits(cond, "warning")) {
[17:48:37.008]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.008]                         if (muffled) 
[17:48:37.008]                           invokeRestart("muffleWarning")
[17:48:37.008]                       }
[17:48:37.008]                       else if (inherits(cond, "condition")) {
[17:48:37.008]                         if (!is.null(pattern)) {
[17:48:37.008]                           computeRestarts <- base::computeRestarts
[17:48:37.008]                           grepl <- base::grepl
[17:48:37.008]                           restarts <- computeRestarts(cond)
[17:48:37.008]                           for (restart in restarts) {
[17:48:37.008]                             name <- restart$name
[17:48:37.008]                             if (is.null(name)) 
[17:48:37.008]                               next
[17:48:37.008]                             if (!grepl(pattern, name)) 
[17:48:37.008]                               next
[17:48:37.008]                             invokeRestart(restart)
[17:48:37.008]                             muffled <- TRUE
[17:48:37.008]                             break
[17:48:37.008]                           }
[17:48:37.008]                         }
[17:48:37.008]                       }
[17:48:37.008]                       invisible(muffled)
[17:48:37.008]                     }
[17:48:37.008]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.008]                   }
[17:48:37.008]                 }
[17:48:37.008]             }
[17:48:37.008]         }))
[17:48:37.008]     }, error = function(ex) {
[17:48:37.008]         base::structure(base::list(value = NULL, visible = NULL, 
[17:48:37.008]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.008]                 ...future.rng), started = ...future.startTime, 
[17:48:37.008]             finished = Sys.time(), session_uuid = NA_character_, 
[17:48:37.008]             version = "1.8"), class = "FutureResult")
[17:48:37.008]     }, finally = {
[17:48:37.008]         if (!identical(...future.workdir, getwd())) 
[17:48:37.008]             setwd(...future.workdir)
[17:48:37.008]         {
[17:48:37.008]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:48:37.008]                 ...future.oldOptions$nwarnings <- NULL
[17:48:37.008]             }
[17:48:37.008]             base::options(...future.oldOptions)
[17:48:37.008]             if (.Platform$OS.type == "windows") {
[17:48:37.008]                 old_names <- names(...future.oldEnvVars)
[17:48:37.008]                 envs <- base::Sys.getenv()
[17:48:37.008]                 names <- names(envs)
[17:48:37.008]                 common <- intersect(names, old_names)
[17:48:37.008]                 added <- setdiff(names, old_names)
[17:48:37.008]                 removed <- setdiff(old_names, names)
[17:48:37.008]                 changed <- common[...future.oldEnvVars[common] != 
[17:48:37.008]                   envs[common]]
[17:48:37.008]                 NAMES <- toupper(changed)
[17:48:37.008]                 args <- list()
[17:48:37.008]                 for (kk in seq_along(NAMES)) {
[17:48:37.008]                   name <- changed[[kk]]
[17:48:37.008]                   NAME <- NAMES[[kk]]
[17:48:37.008]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.008]                     next
[17:48:37.008]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.008]                 }
[17:48:37.008]                 NAMES <- toupper(added)
[17:48:37.008]                 for (kk in seq_along(NAMES)) {
[17:48:37.008]                   name <- added[[kk]]
[17:48:37.008]                   NAME <- NAMES[[kk]]
[17:48:37.008]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.008]                     next
[17:48:37.008]                   args[[name]] <- ""
[17:48:37.008]                 }
[17:48:37.008]                 NAMES <- toupper(removed)
[17:48:37.008]                 for (kk in seq_along(NAMES)) {
[17:48:37.008]                   name <- removed[[kk]]
[17:48:37.008]                   NAME <- NAMES[[kk]]
[17:48:37.008]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.008]                     next
[17:48:37.008]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.008]                 }
[17:48:37.008]                 if (length(args) > 0) 
[17:48:37.008]                   base::do.call(base::Sys.setenv, args = args)
[17:48:37.008]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:48:37.008]             }
[17:48:37.008]             else {
[17:48:37.008]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:48:37.008]             }
[17:48:37.008]             {
[17:48:37.008]                 if (base::length(...future.futureOptionsAdded) > 
[17:48:37.008]                   0L) {
[17:48:37.008]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:48:37.008]                   base::names(opts) <- ...future.futureOptionsAdded
[17:48:37.008]                   base::options(opts)
[17:48:37.008]                 }
[17:48:37.008]                 {
[17:48:37.008]                   {
[17:48:37.008]                     base::options(mc.cores = ...future.mc.cores.old)
[17:48:37.008]                     NULL
[17:48:37.008]                   }
[17:48:37.008]                   options(future.plan = "multisession")
[17:48:37.008]                   if (is.na("multisession")) 
[17:48:37.008]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.008]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:48:37.008]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:48:37.008]                     .init = FALSE)
[17:48:37.008]                 }
[17:48:37.008]             }
[17:48:37.008]         }
[17:48:37.008]     })
[17:48:37.008]     if (TRUE) {
[17:48:37.008]         base::sink(type = "output", split = FALSE)
[17:48:37.008]         if (TRUE) {
[17:48:37.008]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:48:37.008]         }
[17:48:37.008]         else {
[17:48:37.008]             ...future.result["stdout"] <- base::list(NULL)
[17:48:37.008]         }
[17:48:37.008]         base::close(...future.stdout)
[17:48:37.008]         ...future.stdout <- NULL
[17:48:37.008]     }
[17:48:37.008]     ...future.result$conditions <- ...future.conditions
[17:48:37.008]     ...future.result$finished <- base::Sys.time()
[17:48:37.008]     ...future.result
[17:48:37.008] }
[17:48:37.067] MultisessionFuture started
[17:48:37.067] result() for ClusterFuture ...
[17:48:37.068] receiveMessageFromWorker() for ClusterFuture ...
[17:48:37.068] - Validating connection of MultisessionFuture
[17:48:37.106] - received message: FutureResult
[17:48:37.107] - Received FutureResult
[17:48:37.107] - Erased future from FutureRegistry
[17:48:37.107] result() for ClusterFuture ...
[17:48:37.107] - result already collected: FutureResult
[17:48:37.107] result() for ClusterFuture ... done
[17:48:37.108] receiveMessageFromWorker() for ClusterFuture ... done
[17:48:37.108] result() for ClusterFuture ... done
[17:48:37.108] result() for ClusterFuture ...
[17:48:37.108] - result already collected: FutureResult
[17:48:37.108] result() for ClusterFuture ... done
[17:48:37.108] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:48:37.111] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:48:37.112] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:37.113] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:37.113] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:37.114] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:37.115] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:37.116] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:37.116] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:37.116] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:37.116] Option 'future.plan' = ‘multisession’
[17:48:37.116] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:37.116] Setting plan('default')
[17:48:37.116] plan(): Setting new future strategy stack:
[17:48:37.116] List of future strategies:
[17:48:37.116] 1. multisession:
[17:48:37.116]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.116]    - tweaked: FALSE
[17:48:37.116]    - call: plan("default", .init = FALSE)
[17:48:37.121] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:48:37.122] plan(): Setting new future strategy stack:
[17:48:37.122] List of future strategies:
[17:48:37.122] 1. multisession:
[17:48:37.122]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.122]    - tweaked: FALSE
[17:48:37.122]    - call: plan("default")
[17:48:37.123] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:48:37.123] multisession:
[17:48:37.123] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.123] - tweaked: FALSE
[17:48:37.123] - call: plan("default")
[17:48:37.127] getGlobalsAndPackages() ...
[17:48:37.128] Not searching for globals
[17:48:37.128] - globals: [0] <none>
[17:48:37.128] getGlobalsAndPackages() ... DONE
[17:48:37.128] [local output] makeClusterPSOCK() ...
[17:48:37.132] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:48:37.133] [local output] Base port: 11309
[17:48:37.133] [local output] Getting setup options for 2 cluster nodes ...
[17:48:37.133] [local output]  - Node 1 of 2 ...
[17:48:37.134] [local output] localMachine=TRUE => revtunnel=FALSE

[17:48:37.134] [local output] Rscript port: 11309

[17:48:37.135] [local output]  - Node 2 of 2 ...
[17:48:37.135] [local output] localMachine=TRUE => revtunnel=FALSE

[17:48:37.136] [local output] Rscript port: 11309

[17:48:37.136] [local output] Getting setup options for 2 cluster nodes ... done
[17:48:37.136] [local output]  - Parallel setup requested for some PSOCK nodes
[17:48:37.137] [local output] Setting up PSOCK nodes in parallel
[17:48:37.137] List of 36
[17:48:37.137]  $ worker          : chr "localhost"
[17:48:37.137]   ..- attr(*, "localhost")= logi TRUE
[17:48:37.137]  $ master          : chr "localhost"
[17:48:37.137]  $ port            : int 11309
[17:48:37.137]  $ connectTimeout  : num 120
[17:48:37.137]  $ timeout         : num 2592000
[17:48:37.137]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:48:37.137]  $ homogeneous     : logi TRUE
[17:48:37.137]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:48:37.137]  $ rscript_envs    : NULL
[17:48:37.137]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:48:37.137]  $ rscript_startup : NULL
[17:48:37.137]  $ rscript_sh      : chr "sh"
[17:48:37.137]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:48:37.137]  $ methods         : logi TRUE
[17:48:37.137]  $ socketOptions   : chr "no-delay"
[17:48:37.137]  $ useXDR          : logi FALSE
[17:48:37.137]  $ outfile         : chr "/dev/null"
[17:48:37.137]  $ renice          : int NA
[17:48:37.137]  $ rshcmd          : NULL
[17:48:37.137]  $ user            : chr(0) 
[17:48:37.137]  $ revtunnel       : logi FALSE
[17:48:37.137]  $ rshlogfile      : NULL
[17:48:37.137]  $ rshopts         : chr(0) 
[17:48:37.137]  $ rank            : int 1
[17:48:37.137]  $ manual          : logi FALSE
[17:48:37.137]  $ dryrun          : logi FALSE
[17:48:37.137]  $ quiet           : logi FALSE
[17:48:37.137]  $ setup_strategy  : chr "parallel"
[17:48:37.137]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:48:37.137]  $ pidfile         : chr "/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d7d7a2c1.pid"
[17:48:37.137]  $ rshcmd_label    : NULL
[17:48:37.137]  $ rsh_call        : NULL
[17:48:37.137]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:48:37.137]  $ localMachine    : logi TRUE
[17:48:37.137]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:48:37.137]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:48:37.137]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:48:37.137]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:48:37.137]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:48:37.137]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:48:37.137]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:48:37.137]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:48:37.137]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:48:37.137]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:48:37.137]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:48:37.137]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:48:37.137]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:48:37.137]  $ arguments       :List of 28
[17:48:37.137]   ..$ worker          : chr "localhost"
[17:48:37.137]   ..$ master          : NULL
[17:48:37.137]   ..$ port            : int 11309
[17:48:37.137]   ..$ connectTimeout  : num 120
[17:48:37.137]   ..$ timeout         : num 2592000
[17:48:37.137]   ..$ rscript         : NULL
[17:48:37.137]   ..$ homogeneous     : NULL
[17:48:37.137]   ..$ rscript_args    : NULL
[17:48:37.137]   ..$ rscript_envs    : NULL
[17:48:37.137]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:48:37.137]   ..$ rscript_startup : NULL
[17:48:37.137]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:48:37.137]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:48:37.137]   ..$ methods         : logi TRUE
[17:48:37.137]   ..$ socketOptions   : chr "no-delay"
[17:48:37.137]   ..$ useXDR          : logi FALSE
[17:48:37.137]   ..$ outfile         : chr "/dev/null"
[17:48:37.137]   ..$ renice          : int NA
[17:48:37.137]   ..$ rshcmd          : NULL
[17:48:37.137]   ..$ user            : NULL
[17:48:37.137]   ..$ revtunnel       : logi NA
[17:48:37.137]   ..$ rshlogfile      : NULL
[17:48:37.137]   ..$ rshopts         : NULL
[17:48:37.137]   ..$ rank            : int 1
[17:48:37.137]   ..$ manual          : logi FALSE
[17:48:37.137]   ..$ dryrun          : logi FALSE
[17:48:37.137]   ..$ quiet           : logi FALSE
[17:48:37.137]   ..$ setup_strategy  : chr "parallel"
[17:48:37.137]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:48:37.155] [local output] System call to launch all workers:
[17:48:37.155] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp5io1Rr/worker.rank=1.parallelly.parent=50061.c38d7d7a2c1.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11309 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:48:37.155] [local output] Starting PSOCK main server
[17:48:37.157] [local output] Workers launched
[17:48:37.157] [local output] Waiting for workers to connect back
[17:48:37.157]  - [local output] 0 workers out of 2 ready
[17:48:37.393]  - [local output] 0 workers out of 2 ready
[17:48:37.394]  - [local output] 1 workers out of 2 ready
[17:48:37.398]  - [local output] 1 workers out of 2 ready
[17:48:37.399]  - [local output] 2 workers out of 2 ready
[17:48:37.399] [local output] Launching of workers completed
[17:48:37.399] [local output] Collecting session information from workers
[17:48:37.400] [local output]  - Worker #1 of 2
[17:48:37.400] [local output]  - Worker #2 of 2
[17:48:37.400] [local output] makeClusterPSOCK() ... done
[17:48:37.411] Packages needed by the future expression (n = 0): <none>
[17:48:37.411] Packages needed by future strategies (n = 0): <none>
[17:48:37.411] {
[17:48:37.411]     {
[17:48:37.411]         {
[17:48:37.411]             ...future.startTime <- base::Sys.time()
[17:48:37.411]             {
[17:48:37.411]                 {
[17:48:37.411]                   {
[17:48:37.411]                     {
[17:48:37.411]                       base::local({
[17:48:37.411]                         has_future <- base::requireNamespace("future", 
[17:48:37.411]                           quietly = TRUE)
[17:48:37.411]                         if (has_future) {
[17:48:37.411]                           ns <- base::getNamespace("future")
[17:48:37.411]                           version <- ns[[".package"]][["version"]]
[17:48:37.411]                           if (is.null(version)) 
[17:48:37.411]                             version <- utils::packageVersion("future")
[17:48:37.411]                         }
[17:48:37.411]                         else {
[17:48:37.411]                           version <- NULL
[17:48:37.411]                         }
[17:48:37.411]                         if (!has_future || version < "1.8.0") {
[17:48:37.411]                           info <- base::c(r_version = base::gsub("R version ", 
[17:48:37.411]                             "", base::R.version$version.string), 
[17:48:37.411]                             platform = base::sprintf("%s (%s-bit)", 
[17:48:37.411]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:48:37.411]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:48:37.411]                               "release", "version")], collapse = " "), 
[17:48:37.411]                             hostname = base::Sys.info()[["nodename"]])
[17:48:37.411]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:48:37.411]                             info)
[17:48:37.411]                           info <- base::paste(info, collapse = "; ")
[17:48:37.411]                           if (!has_future) {
[17:48:37.411]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:48:37.411]                               info)
[17:48:37.411]                           }
[17:48:37.411]                           else {
[17:48:37.411]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:48:37.411]                               info, version)
[17:48:37.411]                           }
[17:48:37.411]                           base::stop(msg)
[17:48:37.411]                         }
[17:48:37.411]                       })
[17:48:37.411]                     }
[17:48:37.411]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:48:37.411]                     base::options(mc.cores = 1L)
[17:48:37.411]                   }
[17:48:37.411]                   ...future.strategy.old <- future::plan("list")
[17:48:37.411]                   options(future.plan = NULL)
[17:48:37.411]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.411]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:48:37.411]                 }
[17:48:37.411]                 ...future.workdir <- getwd()
[17:48:37.411]             }
[17:48:37.411]             ...future.oldOptions <- base::as.list(base::.Options)
[17:48:37.411]             ...future.oldEnvVars <- base::Sys.getenv()
[17:48:37.411]         }
[17:48:37.411]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:48:37.411]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:48:37.411]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:48:37.411]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:48:37.411]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:48:37.411]             future.stdout.windows.reencode = NULL, width = 80L)
[17:48:37.411]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:48:37.411]             base::names(...future.oldOptions))
[17:48:37.411]     }
[17:48:37.411]     if (FALSE) {
[17:48:37.411]     }
[17:48:37.411]     else {
[17:48:37.411]         if (TRUE) {
[17:48:37.411]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:48:37.411]                 open = "w")
[17:48:37.411]         }
[17:48:37.411]         else {
[17:48:37.411]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:48:37.411]                 windows = "NUL", "/dev/null"), open = "w")
[17:48:37.411]         }
[17:48:37.411]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:48:37.411]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:48:37.411]             base::sink(type = "output", split = FALSE)
[17:48:37.411]             base::close(...future.stdout)
[17:48:37.411]         }, add = TRUE)
[17:48:37.411]     }
[17:48:37.411]     ...future.frame <- base::sys.nframe()
[17:48:37.411]     ...future.conditions <- base::list()
[17:48:37.411]     ...future.rng <- base::globalenv()$.Random.seed
[17:48:37.411]     if (FALSE) {
[17:48:37.411]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:48:37.411]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:48:37.411]     }
[17:48:37.411]     ...future.result <- base::tryCatch({
[17:48:37.411]         base::withCallingHandlers({
[17:48:37.411]             ...future.value <- base::withVisible(base::local({
[17:48:37.411]                 ...future.makeSendCondition <- base::local({
[17:48:37.411]                   sendCondition <- NULL
[17:48:37.411]                   function(frame = 1L) {
[17:48:37.411]                     if (is.function(sendCondition)) 
[17:48:37.411]                       return(sendCondition)
[17:48:37.411]                     ns <- getNamespace("parallel")
[17:48:37.411]                     if (exists("sendData", mode = "function", 
[17:48:37.411]                       envir = ns)) {
[17:48:37.411]                       parallel_sendData <- get("sendData", mode = "function", 
[17:48:37.411]                         envir = ns)
[17:48:37.411]                       envir <- sys.frame(frame)
[17:48:37.411]                       master <- NULL
[17:48:37.411]                       while (!identical(envir, .GlobalEnv) && 
[17:48:37.411]                         !identical(envir, emptyenv())) {
[17:48:37.411]                         if (exists("master", mode = "list", envir = envir, 
[17:48:37.411]                           inherits = FALSE)) {
[17:48:37.411]                           master <- get("master", mode = "list", 
[17:48:37.411]                             envir = envir, inherits = FALSE)
[17:48:37.411]                           if (inherits(master, c("SOCKnode", 
[17:48:37.411]                             "SOCK0node"))) {
[17:48:37.411]                             sendCondition <<- function(cond) {
[17:48:37.411]                               data <- list(type = "VALUE", value = cond, 
[17:48:37.411]                                 success = TRUE)
[17:48:37.411]                               parallel_sendData(master, data)
[17:48:37.411]                             }
[17:48:37.411]                             return(sendCondition)
[17:48:37.411]                           }
[17:48:37.411]                         }
[17:48:37.411]                         frame <- frame + 1L
[17:48:37.411]                         envir <- sys.frame(frame)
[17:48:37.411]                       }
[17:48:37.411]                     }
[17:48:37.411]                     sendCondition <<- function(cond) NULL
[17:48:37.411]                   }
[17:48:37.411]                 })
[17:48:37.411]                 withCallingHandlers({
[17:48:37.411]                   NA
[17:48:37.411]                 }, immediateCondition = function(cond) {
[17:48:37.411]                   sendCondition <- ...future.makeSendCondition()
[17:48:37.411]                   sendCondition(cond)
[17:48:37.411]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.411]                   {
[17:48:37.411]                     inherits <- base::inherits
[17:48:37.411]                     invokeRestart <- base::invokeRestart
[17:48:37.411]                     is.null <- base::is.null
[17:48:37.411]                     muffled <- FALSE
[17:48:37.411]                     if (inherits(cond, "message")) {
[17:48:37.411]                       muffled <- grepl(pattern, "muffleMessage")
[17:48:37.411]                       if (muffled) 
[17:48:37.411]                         invokeRestart("muffleMessage")
[17:48:37.411]                     }
[17:48:37.411]                     else if (inherits(cond, "warning")) {
[17:48:37.411]                       muffled <- grepl(pattern, "muffleWarning")
[17:48:37.411]                       if (muffled) 
[17:48:37.411]                         invokeRestart("muffleWarning")
[17:48:37.411]                     }
[17:48:37.411]                     else if (inherits(cond, "condition")) {
[17:48:37.411]                       if (!is.null(pattern)) {
[17:48:37.411]                         computeRestarts <- base::computeRestarts
[17:48:37.411]                         grepl <- base::grepl
[17:48:37.411]                         restarts <- computeRestarts(cond)
[17:48:37.411]                         for (restart in restarts) {
[17:48:37.411]                           name <- restart$name
[17:48:37.411]                           if (is.null(name)) 
[17:48:37.411]                             next
[17:48:37.411]                           if (!grepl(pattern, name)) 
[17:48:37.411]                             next
[17:48:37.411]                           invokeRestart(restart)
[17:48:37.411]                           muffled <- TRUE
[17:48:37.411]                           break
[17:48:37.411]                         }
[17:48:37.411]                       }
[17:48:37.411]                     }
[17:48:37.411]                     invisible(muffled)
[17:48:37.411]                   }
[17:48:37.411]                   muffleCondition(cond)
[17:48:37.411]                 })
[17:48:37.411]             }))
[17:48:37.411]             future::FutureResult(value = ...future.value$value, 
[17:48:37.411]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.411]                   ...future.rng), globalenv = if (FALSE) 
[17:48:37.411]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:48:37.411]                     ...future.globalenv.names))
[17:48:37.411]                 else NULL, started = ...future.startTime, version = "1.8")
[17:48:37.411]         }, condition = base::local({
[17:48:37.411]             c <- base::c
[17:48:37.411]             inherits <- base::inherits
[17:48:37.411]             invokeRestart <- base::invokeRestart
[17:48:37.411]             length <- base::length
[17:48:37.411]             list <- base::list
[17:48:37.411]             seq.int <- base::seq.int
[17:48:37.411]             signalCondition <- base::signalCondition
[17:48:37.411]             sys.calls <- base::sys.calls
[17:48:37.411]             `[[` <- base::`[[`
[17:48:37.411]             `+` <- base::`+`
[17:48:37.411]             `<<-` <- base::`<<-`
[17:48:37.411]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:48:37.411]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:48:37.411]                   3L)]
[17:48:37.411]             }
[17:48:37.411]             function(cond) {
[17:48:37.411]                 is_error <- inherits(cond, "error")
[17:48:37.411]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:48:37.411]                   NULL)
[17:48:37.411]                 if (is_error) {
[17:48:37.411]                   sessionInformation <- function() {
[17:48:37.411]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:48:37.411]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:48:37.411]                       search = base::search(), system = base::Sys.info())
[17:48:37.411]                   }
[17:48:37.411]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.411]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:48:37.411]                     cond$call), session = sessionInformation(), 
[17:48:37.411]                     timestamp = base::Sys.time(), signaled = 0L)
[17:48:37.411]                   signalCondition(cond)
[17:48:37.411]                 }
[17:48:37.411]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:48:37.411]                 "immediateCondition"))) {
[17:48:37.411]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:48:37.411]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.411]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:48:37.411]                   if (TRUE && !signal) {
[17:48:37.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.411]                     {
[17:48:37.411]                       inherits <- base::inherits
[17:48:37.411]                       invokeRestart <- base::invokeRestart
[17:48:37.411]                       is.null <- base::is.null
[17:48:37.411]                       muffled <- FALSE
[17:48:37.411]                       if (inherits(cond, "message")) {
[17:48:37.411]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.411]                         if (muffled) 
[17:48:37.411]                           invokeRestart("muffleMessage")
[17:48:37.411]                       }
[17:48:37.411]                       else if (inherits(cond, "warning")) {
[17:48:37.411]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.411]                         if (muffled) 
[17:48:37.411]                           invokeRestart("muffleWarning")
[17:48:37.411]                       }
[17:48:37.411]                       else if (inherits(cond, "condition")) {
[17:48:37.411]                         if (!is.null(pattern)) {
[17:48:37.411]                           computeRestarts <- base::computeRestarts
[17:48:37.411]                           grepl <- base::grepl
[17:48:37.411]                           restarts <- computeRestarts(cond)
[17:48:37.411]                           for (restart in restarts) {
[17:48:37.411]                             name <- restart$name
[17:48:37.411]                             if (is.null(name)) 
[17:48:37.411]                               next
[17:48:37.411]                             if (!grepl(pattern, name)) 
[17:48:37.411]                               next
[17:48:37.411]                             invokeRestart(restart)
[17:48:37.411]                             muffled <- TRUE
[17:48:37.411]                             break
[17:48:37.411]                           }
[17:48:37.411]                         }
[17:48:37.411]                       }
[17:48:37.411]                       invisible(muffled)
[17:48:37.411]                     }
[17:48:37.411]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.411]                   }
[17:48:37.411]                 }
[17:48:37.411]                 else {
[17:48:37.411]                   if (TRUE) {
[17:48:37.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.411]                     {
[17:48:37.411]                       inherits <- base::inherits
[17:48:37.411]                       invokeRestart <- base::invokeRestart
[17:48:37.411]                       is.null <- base::is.null
[17:48:37.411]                       muffled <- FALSE
[17:48:37.411]                       if (inherits(cond, "message")) {
[17:48:37.411]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.411]                         if (muffled) 
[17:48:37.411]                           invokeRestart("muffleMessage")
[17:48:37.411]                       }
[17:48:37.411]                       else if (inherits(cond, "warning")) {
[17:48:37.411]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.411]                         if (muffled) 
[17:48:37.411]                           invokeRestart("muffleWarning")
[17:48:37.411]                       }
[17:48:37.411]                       else if (inherits(cond, "condition")) {
[17:48:37.411]                         if (!is.null(pattern)) {
[17:48:37.411]                           computeRestarts <- base::computeRestarts
[17:48:37.411]                           grepl <- base::grepl
[17:48:37.411]                           restarts <- computeRestarts(cond)
[17:48:37.411]                           for (restart in restarts) {
[17:48:37.411]                             name <- restart$name
[17:48:37.411]                             if (is.null(name)) 
[17:48:37.411]                               next
[17:48:37.411]                             if (!grepl(pattern, name)) 
[17:48:37.411]                               next
[17:48:37.411]                             invokeRestart(restart)
[17:48:37.411]                             muffled <- TRUE
[17:48:37.411]                             break
[17:48:37.411]                           }
[17:48:37.411]                         }
[17:48:37.411]                       }
[17:48:37.411]                       invisible(muffled)
[17:48:37.411]                     }
[17:48:37.411]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.411]                   }
[17:48:37.411]                 }
[17:48:37.411]             }
[17:48:37.411]         }))
[17:48:37.411]     }, error = function(ex) {
[17:48:37.411]         base::structure(base::list(value = NULL, visible = NULL, 
[17:48:37.411]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.411]                 ...future.rng), started = ...future.startTime, 
[17:48:37.411]             finished = Sys.time(), session_uuid = NA_character_, 
[17:48:37.411]             version = "1.8"), class = "FutureResult")
[17:48:37.411]     }, finally = {
[17:48:37.411]         if (!identical(...future.workdir, getwd())) 
[17:48:37.411]             setwd(...future.workdir)
[17:48:37.411]         {
[17:48:37.411]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:48:37.411]                 ...future.oldOptions$nwarnings <- NULL
[17:48:37.411]             }
[17:48:37.411]             base::options(...future.oldOptions)
[17:48:37.411]             if (.Platform$OS.type == "windows") {
[17:48:37.411]                 old_names <- names(...future.oldEnvVars)
[17:48:37.411]                 envs <- base::Sys.getenv()
[17:48:37.411]                 names <- names(envs)
[17:48:37.411]                 common <- intersect(names, old_names)
[17:48:37.411]                 added <- setdiff(names, old_names)
[17:48:37.411]                 removed <- setdiff(old_names, names)
[17:48:37.411]                 changed <- common[...future.oldEnvVars[common] != 
[17:48:37.411]                   envs[common]]
[17:48:37.411]                 NAMES <- toupper(changed)
[17:48:37.411]                 args <- list()
[17:48:37.411]                 for (kk in seq_along(NAMES)) {
[17:48:37.411]                   name <- changed[[kk]]
[17:48:37.411]                   NAME <- NAMES[[kk]]
[17:48:37.411]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.411]                     next
[17:48:37.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.411]                 }
[17:48:37.411]                 NAMES <- toupper(added)
[17:48:37.411]                 for (kk in seq_along(NAMES)) {
[17:48:37.411]                   name <- added[[kk]]
[17:48:37.411]                   NAME <- NAMES[[kk]]
[17:48:37.411]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.411]                     next
[17:48:37.411]                   args[[name]] <- ""
[17:48:37.411]                 }
[17:48:37.411]                 NAMES <- toupper(removed)
[17:48:37.411]                 for (kk in seq_along(NAMES)) {
[17:48:37.411]                   name <- removed[[kk]]
[17:48:37.411]                   NAME <- NAMES[[kk]]
[17:48:37.411]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.411]                     next
[17:48:37.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.411]                 }
[17:48:37.411]                 if (length(args) > 0) 
[17:48:37.411]                   base::do.call(base::Sys.setenv, args = args)
[17:48:37.411]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:48:37.411]             }
[17:48:37.411]             else {
[17:48:37.411]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:48:37.411]             }
[17:48:37.411]             {
[17:48:37.411]                 if (base::length(...future.futureOptionsAdded) > 
[17:48:37.411]                   0L) {
[17:48:37.411]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:48:37.411]                   base::names(opts) <- ...future.futureOptionsAdded
[17:48:37.411]                   base::options(opts)
[17:48:37.411]                 }
[17:48:37.411]                 {
[17:48:37.411]                   {
[17:48:37.411]                     base::options(mc.cores = ...future.mc.cores.old)
[17:48:37.411]                     NULL
[17:48:37.411]                   }
[17:48:37.411]                   options(future.plan = "multisession")
[17:48:37.411]                   if (is.na("")) 
[17:48:37.411]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.411]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:48:37.411]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:48:37.411]                     .init = FALSE)
[17:48:37.411]                 }
[17:48:37.411]             }
[17:48:37.411]         }
[17:48:37.411]     })
[17:48:37.411]     if (TRUE) {
[17:48:37.411]         base::sink(type = "output", split = FALSE)
[17:48:37.411]         if (TRUE) {
[17:48:37.411]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:48:37.411]         }
[17:48:37.411]         else {
[17:48:37.411]             ...future.result["stdout"] <- base::list(NULL)
[17:48:37.411]         }
[17:48:37.411]         base::close(...future.stdout)
[17:48:37.411]         ...future.stdout <- NULL
[17:48:37.411]     }
[17:48:37.411]     ...future.result$conditions <- ...future.conditions
[17:48:37.411]     ...future.result$finished <- base::Sys.time()
[17:48:37.411]     ...future.result
[17:48:37.411] }
[17:48:37.463] MultisessionFuture started
[17:48:37.463] result() for ClusterFuture ...
[17:48:37.463] receiveMessageFromWorker() for ClusterFuture ...
[17:48:37.464] - Validating connection of MultisessionFuture
[17:48:37.495] - received message: FutureResult
[17:48:37.495] - Received FutureResult
[17:48:37.496] - Erased future from FutureRegistry
[17:48:37.496] result() for ClusterFuture ...
[17:48:37.496] - result already collected: FutureResult
[17:48:37.496] result() for ClusterFuture ... done
[17:48:37.496] receiveMessageFromWorker() for ClusterFuture ... done
[17:48:37.496] result() for ClusterFuture ... done
[17:48:37.496] result() for ClusterFuture ...
[17:48:37.496] - result already collected: FutureResult
[17:48:37.496] result() for ClusterFuture ... done
[17:48:37.496] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:48:37.500] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:48:37.501] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:37.501] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:37.501] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:37.501] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:37.502] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:37.502] R_FUTURE_PLAN=‘multisession’
[17:48:37.502] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:48:37.503] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:37.503] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:37.504] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:37.505] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:37.505] Option 'future.plan' = ‘multisession’
[17:48:37.505] R command-line argument: -p 1
[17:48:37.505]  => 'future.plan' already set.
[17:48:37.505] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:37.505] Setting plan('default')
[17:48:37.505] plan(): Setting new future strategy stack:
[17:48:37.505] List of future strategies:
[17:48:37.505] 1. multisession:
[17:48:37.505]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.505]    - tweaked: FALSE
[17:48:37.505]    - call: plan("default", .init = FALSE)
[17:48:37.509] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:48:37.510] plan(): Setting new future strategy stack:
[17:48:37.510] List of future strategies:
[17:48:37.510] 1. multisession:
[17:48:37.510]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.510]    - tweaked: FALSE
[17:48:37.510]    - call: plan("default")
[17:48:37.510] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:48:37.510] multisession:
[17:48:37.510] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.510] - tweaked: FALSE
[17:48:37.510] - call: plan("default")
[17:48:37.514] getGlobalsAndPackages() ...
[17:48:37.514] Not searching for globals
[17:48:37.514] - globals: [0] <none>
[17:48:37.514] getGlobalsAndPackages() ... DONE
[17:48:37.515] Packages needed by the future expression (n = 0): <none>
[17:48:37.515] Packages needed by future strategies (n = 0): <none>
[17:48:37.515] {
[17:48:37.515]     {
[17:48:37.515]         {
[17:48:37.515]             ...future.startTime <- base::Sys.time()
[17:48:37.515]             {
[17:48:37.515]                 {
[17:48:37.515]                   {
[17:48:37.515]                     base::local({
[17:48:37.515]                       has_future <- base::requireNamespace("future", 
[17:48:37.515]                         quietly = TRUE)
[17:48:37.515]                       if (has_future) {
[17:48:37.515]                         ns <- base::getNamespace("future")
[17:48:37.515]                         version <- ns[[".package"]][["version"]]
[17:48:37.515]                         if (is.null(version)) 
[17:48:37.515]                           version <- utils::packageVersion("future")
[17:48:37.515]                       }
[17:48:37.515]                       else {
[17:48:37.515]                         version <- NULL
[17:48:37.515]                       }
[17:48:37.515]                       if (!has_future || version < "1.8.0") {
[17:48:37.515]                         info <- base::c(r_version = base::gsub("R version ", 
[17:48:37.515]                           "", base::R.version$version.string), 
[17:48:37.515]                           platform = base::sprintf("%s (%s-bit)", 
[17:48:37.515]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:48:37.515]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:48:37.515]                             "release", "version")], collapse = " "), 
[17:48:37.515]                           hostname = base::Sys.info()[["nodename"]])
[17:48:37.515]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:48:37.515]                           info)
[17:48:37.515]                         info <- base::paste(info, collapse = "; ")
[17:48:37.515]                         if (!has_future) {
[17:48:37.515]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:48:37.515]                             info)
[17:48:37.515]                         }
[17:48:37.515]                         else {
[17:48:37.515]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:48:37.515]                             info, version)
[17:48:37.515]                         }
[17:48:37.515]                         base::stop(msg)
[17:48:37.515]                       }
[17:48:37.515]                     })
[17:48:37.515]                   }
[17:48:37.515]                   ...future.strategy.old <- future::plan("list")
[17:48:37.515]                   options(future.plan = NULL)
[17:48:37.515]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.515]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:48:37.515]                 }
[17:48:37.515]                 ...future.workdir <- getwd()
[17:48:37.515]             }
[17:48:37.515]             ...future.oldOptions <- base::as.list(base::.Options)
[17:48:37.515]             ...future.oldEnvVars <- base::Sys.getenv()
[17:48:37.515]         }
[17:48:37.515]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:48:37.515]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:48:37.515]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:48:37.515]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:48:37.515]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:48:37.515]             future.stdout.windows.reencode = NULL, width = 80L)
[17:48:37.515]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:48:37.515]             base::names(...future.oldOptions))
[17:48:37.515]     }
[17:48:37.515]     if (FALSE) {
[17:48:37.515]     }
[17:48:37.515]     else {
[17:48:37.515]         if (TRUE) {
[17:48:37.515]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:48:37.515]                 open = "w")
[17:48:37.515]         }
[17:48:37.515]         else {
[17:48:37.515]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:48:37.515]                 windows = "NUL", "/dev/null"), open = "w")
[17:48:37.515]         }
[17:48:37.515]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:48:37.515]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:48:37.515]             base::sink(type = "output", split = FALSE)
[17:48:37.515]             base::close(...future.stdout)
[17:48:37.515]         }, add = TRUE)
[17:48:37.515]     }
[17:48:37.515]     ...future.frame <- base::sys.nframe()
[17:48:37.515]     ...future.conditions <- base::list()
[17:48:37.515]     ...future.rng <- base::globalenv()$.Random.seed
[17:48:37.515]     if (FALSE) {
[17:48:37.515]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:48:37.515]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:48:37.515]     }
[17:48:37.515]     ...future.result <- base::tryCatch({
[17:48:37.515]         base::withCallingHandlers({
[17:48:37.515]             ...future.value <- base::withVisible(base::local(NA))
[17:48:37.515]             future::FutureResult(value = ...future.value$value, 
[17:48:37.515]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.515]                   ...future.rng), globalenv = if (FALSE) 
[17:48:37.515]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:48:37.515]                     ...future.globalenv.names))
[17:48:37.515]                 else NULL, started = ...future.startTime, version = "1.8")
[17:48:37.515]         }, condition = base::local({
[17:48:37.515]             c <- base::c
[17:48:37.515]             inherits <- base::inherits
[17:48:37.515]             invokeRestart <- base::invokeRestart
[17:48:37.515]             length <- base::length
[17:48:37.515]             list <- base::list
[17:48:37.515]             seq.int <- base::seq.int
[17:48:37.515]             signalCondition <- base::signalCondition
[17:48:37.515]             sys.calls <- base::sys.calls
[17:48:37.515]             `[[` <- base::`[[`
[17:48:37.515]             `+` <- base::`+`
[17:48:37.515]             `<<-` <- base::`<<-`
[17:48:37.515]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:48:37.515]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:48:37.515]                   3L)]
[17:48:37.515]             }
[17:48:37.515]             function(cond) {
[17:48:37.515]                 is_error <- inherits(cond, "error")
[17:48:37.515]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:48:37.515]                   NULL)
[17:48:37.515]                 if (is_error) {
[17:48:37.515]                   sessionInformation <- function() {
[17:48:37.515]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:48:37.515]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:48:37.515]                       search = base::search(), system = base::Sys.info())
[17:48:37.515]                   }
[17:48:37.515]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.515]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:48:37.515]                     cond$call), session = sessionInformation(), 
[17:48:37.515]                     timestamp = base::Sys.time(), signaled = 0L)
[17:48:37.515]                   signalCondition(cond)
[17:48:37.515]                 }
[17:48:37.515]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:48:37.515]                 "immediateCondition"))) {
[17:48:37.515]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:48:37.515]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.515]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:48:37.515]                   if (TRUE && !signal) {
[17:48:37.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.515]                     {
[17:48:37.515]                       inherits <- base::inherits
[17:48:37.515]                       invokeRestart <- base::invokeRestart
[17:48:37.515]                       is.null <- base::is.null
[17:48:37.515]                       muffled <- FALSE
[17:48:37.515]                       if (inherits(cond, "message")) {
[17:48:37.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.515]                         if (muffled) 
[17:48:37.515]                           invokeRestart("muffleMessage")
[17:48:37.515]                       }
[17:48:37.515]                       else if (inherits(cond, "warning")) {
[17:48:37.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.515]                         if (muffled) 
[17:48:37.515]                           invokeRestart("muffleWarning")
[17:48:37.515]                       }
[17:48:37.515]                       else if (inherits(cond, "condition")) {
[17:48:37.515]                         if (!is.null(pattern)) {
[17:48:37.515]                           computeRestarts <- base::computeRestarts
[17:48:37.515]                           grepl <- base::grepl
[17:48:37.515]                           restarts <- computeRestarts(cond)
[17:48:37.515]                           for (restart in restarts) {
[17:48:37.515]                             name <- restart$name
[17:48:37.515]                             if (is.null(name)) 
[17:48:37.515]                               next
[17:48:37.515]                             if (!grepl(pattern, name)) 
[17:48:37.515]                               next
[17:48:37.515]                             invokeRestart(restart)
[17:48:37.515]                             muffled <- TRUE
[17:48:37.515]                             break
[17:48:37.515]                           }
[17:48:37.515]                         }
[17:48:37.515]                       }
[17:48:37.515]                       invisible(muffled)
[17:48:37.515]                     }
[17:48:37.515]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.515]                   }
[17:48:37.515]                 }
[17:48:37.515]                 else {
[17:48:37.515]                   if (TRUE) {
[17:48:37.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.515]                     {
[17:48:37.515]                       inherits <- base::inherits
[17:48:37.515]                       invokeRestart <- base::invokeRestart
[17:48:37.515]                       is.null <- base::is.null
[17:48:37.515]                       muffled <- FALSE
[17:48:37.515]                       if (inherits(cond, "message")) {
[17:48:37.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.515]                         if (muffled) 
[17:48:37.515]                           invokeRestart("muffleMessage")
[17:48:37.515]                       }
[17:48:37.515]                       else if (inherits(cond, "warning")) {
[17:48:37.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.515]                         if (muffled) 
[17:48:37.515]                           invokeRestart("muffleWarning")
[17:48:37.515]                       }
[17:48:37.515]                       else if (inherits(cond, "condition")) {
[17:48:37.515]                         if (!is.null(pattern)) {
[17:48:37.515]                           computeRestarts <- base::computeRestarts
[17:48:37.515]                           grepl <- base::grepl
[17:48:37.515]                           restarts <- computeRestarts(cond)
[17:48:37.515]                           for (restart in restarts) {
[17:48:37.515]                             name <- restart$name
[17:48:37.515]                             if (is.null(name)) 
[17:48:37.515]                               next
[17:48:37.515]                             if (!grepl(pattern, name)) 
[17:48:37.515]                               next
[17:48:37.515]                             invokeRestart(restart)
[17:48:37.515]                             muffled <- TRUE
[17:48:37.515]                             break
[17:48:37.515]                           }
[17:48:37.515]                         }
[17:48:37.515]                       }
[17:48:37.515]                       invisible(muffled)
[17:48:37.515]                     }
[17:48:37.515]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.515]                   }
[17:48:37.515]                 }
[17:48:37.515]             }
[17:48:37.515]         }))
[17:48:37.515]     }, error = function(ex) {
[17:48:37.515]         base::structure(base::list(value = NULL, visible = NULL, 
[17:48:37.515]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.515]                 ...future.rng), started = ...future.startTime, 
[17:48:37.515]             finished = Sys.time(), session_uuid = NA_character_, 
[17:48:37.515]             version = "1.8"), class = "FutureResult")
[17:48:37.515]     }, finally = {
[17:48:37.515]         if (!identical(...future.workdir, getwd())) 
[17:48:37.515]             setwd(...future.workdir)
[17:48:37.515]         {
[17:48:37.515]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:48:37.515]                 ...future.oldOptions$nwarnings <- NULL
[17:48:37.515]             }
[17:48:37.515]             base::options(...future.oldOptions)
[17:48:37.515]             if (.Platform$OS.type == "windows") {
[17:48:37.515]                 old_names <- names(...future.oldEnvVars)
[17:48:37.515]                 envs <- base::Sys.getenv()
[17:48:37.515]                 names <- names(envs)
[17:48:37.515]                 common <- intersect(names, old_names)
[17:48:37.515]                 added <- setdiff(names, old_names)
[17:48:37.515]                 removed <- setdiff(old_names, names)
[17:48:37.515]                 changed <- common[...future.oldEnvVars[common] != 
[17:48:37.515]                   envs[common]]
[17:48:37.515]                 NAMES <- toupper(changed)
[17:48:37.515]                 args <- list()
[17:48:37.515]                 for (kk in seq_along(NAMES)) {
[17:48:37.515]                   name <- changed[[kk]]
[17:48:37.515]                   NAME <- NAMES[[kk]]
[17:48:37.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.515]                     next
[17:48:37.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.515]                 }
[17:48:37.515]                 NAMES <- toupper(added)
[17:48:37.515]                 for (kk in seq_along(NAMES)) {
[17:48:37.515]                   name <- added[[kk]]
[17:48:37.515]                   NAME <- NAMES[[kk]]
[17:48:37.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.515]                     next
[17:48:37.515]                   args[[name]] <- ""
[17:48:37.515]                 }
[17:48:37.515]                 NAMES <- toupper(removed)
[17:48:37.515]                 for (kk in seq_along(NAMES)) {
[17:48:37.515]                   name <- removed[[kk]]
[17:48:37.515]                   NAME <- NAMES[[kk]]
[17:48:37.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.515]                     next
[17:48:37.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.515]                 }
[17:48:37.515]                 if (length(args) > 0) 
[17:48:37.515]                   base::do.call(base::Sys.setenv, args = args)
[17:48:37.515]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:48:37.515]             }
[17:48:37.515]             else {
[17:48:37.515]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:48:37.515]             }
[17:48:37.515]             {
[17:48:37.515]                 if (base::length(...future.futureOptionsAdded) > 
[17:48:37.515]                   0L) {
[17:48:37.515]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:48:37.515]                   base::names(opts) <- ...future.futureOptionsAdded
[17:48:37.515]                   base::options(opts)
[17:48:37.515]                 }
[17:48:37.515]                 {
[17:48:37.515]                   {
[17:48:37.515]                     NULL
[17:48:37.515]                     RNGkind("Mersenne-Twister")
[17:48:37.515]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:48:37.515]                       inherits = FALSE)
[17:48:37.515]                   }
[17:48:37.515]                   options(future.plan = "multisession")
[17:48:37.515]                   if (is.na("multisession")) 
[17:48:37.515]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.515]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:48:37.515]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:48:37.515]                     .init = FALSE)
[17:48:37.515]                 }
[17:48:37.515]             }
[17:48:37.515]         }
[17:48:37.515]     })
[17:48:37.515]     if (TRUE) {
[17:48:37.515]         base::sink(type = "output", split = FALSE)
[17:48:37.515]         if (TRUE) {
[17:48:37.515]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:48:37.515]         }
[17:48:37.515]         else {
[17:48:37.515]             ...future.result["stdout"] <- base::list(NULL)
[17:48:37.515]         }
[17:48:37.515]         base::close(...future.stdout)
[17:48:37.515]         ...future.stdout <- NULL
[17:48:37.515]     }
[17:48:37.515]     ...future.result$conditions <- ...future.conditions
[17:48:37.515]     ...future.result$finished <- base::Sys.time()
[17:48:37.515]     ...future.result
[17:48:37.515] }
[17:48:37.517] plan(): Setting new future strategy stack:
[17:48:37.517] List of future strategies:
[17:48:37.517] 1. sequential:
[17:48:37.517]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:37.517]    - tweaked: FALSE
[17:48:37.517]    - call: NULL
[17:48:37.518] plan(): nbrOfWorkers() = 1
[17:48:37.519] plan(): Setting new future strategy stack:
[17:48:37.519] List of future strategies:
[17:48:37.519] 1. multisession:
[17:48:37.519]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.519]    - tweaked: FALSE
[17:48:37.519]    - call: plan("default")
[17:48:37.523] plan(): nbrOfWorkers() = 1
[17:48:37.523] SequentialFuture started (and completed)
[17:48:37.524] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:48:37.527] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:48:37.528] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:37.528] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:37.528] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:37.529] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:37.530] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:37.531] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:37.532] Option 'future.plan' = ‘multisession’
[17:48:37.532] R command-line argument: -p 1
[17:48:37.532]  => 'future.plan' already set.
[17:48:37.532] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:37.532] Setting plan('default')
[17:48:37.532] plan(): Setting new future strategy stack:
[17:48:37.532] List of future strategies:
[17:48:37.532] 1. multisession:
[17:48:37.532]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.532]    - tweaked: FALSE
[17:48:37.532]    - call: plan("default", .init = FALSE)
[17:48:37.536] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:48:37.536] plan(): Setting new future strategy stack:
[17:48:37.536] List of future strategies:
[17:48:37.536] 1. multisession:
[17:48:37.536]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.536]    - tweaked: FALSE
[17:48:37.536]    - call: plan("default")
[17:48:37.537] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:48:37.537] multisession:
[17:48:37.537] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.537] - tweaked: FALSE
[17:48:37.537] - call: plan("default")
[17:48:37.540] getGlobalsAndPackages() ...
[17:48:37.540] Not searching for globals
[17:48:37.540] - globals: [0] <none>
[17:48:37.540] getGlobalsAndPackages() ... DONE
[17:48:37.541] Packages needed by the future expression (n = 0): <none>
[17:48:37.541] Packages needed by future strategies (n = 0): <none>
[17:48:37.541] {
[17:48:37.541]     {
[17:48:37.541]         {
[17:48:37.541]             ...future.startTime <- base::Sys.time()
[17:48:37.541]             {
[17:48:37.541]                 {
[17:48:37.541]                   {
[17:48:37.541]                     base::local({
[17:48:37.541]                       has_future <- base::requireNamespace("future", 
[17:48:37.541]                         quietly = TRUE)
[17:48:37.541]                       if (has_future) {
[17:48:37.541]                         ns <- base::getNamespace("future")
[17:48:37.541]                         version <- ns[[".package"]][["version"]]
[17:48:37.541]                         if (is.null(version)) 
[17:48:37.541]                           version <- utils::packageVersion("future")
[17:48:37.541]                       }
[17:48:37.541]                       else {
[17:48:37.541]                         version <- NULL
[17:48:37.541]                       }
[17:48:37.541]                       if (!has_future || version < "1.8.0") {
[17:48:37.541]                         info <- base::c(r_version = base::gsub("R version ", 
[17:48:37.541]                           "", base::R.version$version.string), 
[17:48:37.541]                           platform = base::sprintf("%s (%s-bit)", 
[17:48:37.541]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:48:37.541]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:48:37.541]                             "release", "version")], collapse = " "), 
[17:48:37.541]                           hostname = base::Sys.info()[["nodename"]])
[17:48:37.541]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:48:37.541]                           info)
[17:48:37.541]                         info <- base::paste(info, collapse = "; ")
[17:48:37.541]                         if (!has_future) {
[17:48:37.541]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:48:37.541]                             info)
[17:48:37.541]                         }
[17:48:37.541]                         else {
[17:48:37.541]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:48:37.541]                             info, version)
[17:48:37.541]                         }
[17:48:37.541]                         base::stop(msg)
[17:48:37.541]                       }
[17:48:37.541]                     })
[17:48:37.541]                   }
[17:48:37.541]                   ...future.strategy.old <- future::plan("list")
[17:48:37.541]                   options(future.plan = NULL)
[17:48:37.541]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.541]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:48:37.541]                 }
[17:48:37.541]                 ...future.workdir <- getwd()
[17:48:37.541]             }
[17:48:37.541]             ...future.oldOptions <- base::as.list(base::.Options)
[17:48:37.541]             ...future.oldEnvVars <- base::Sys.getenv()
[17:48:37.541]         }
[17:48:37.541]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:48:37.541]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:48:37.541]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:48:37.541]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:48:37.541]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:48:37.541]             future.stdout.windows.reencode = NULL, width = 80L)
[17:48:37.541]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:48:37.541]             base::names(...future.oldOptions))
[17:48:37.541]     }
[17:48:37.541]     if (FALSE) {
[17:48:37.541]     }
[17:48:37.541]     else {
[17:48:37.541]         if (TRUE) {
[17:48:37.541]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:48:37.541]                 open = "w")
[17:48:37.541]         }
[17:48:37.541]         else {
[17:48:37.541]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:48:37.541]                 windows = "NUL", "/dev/null"), open = "w")
[17:48:37.541]         }
[17:48:37.541]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:48:37.541]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:48:37.541]             base::sink(type = "output", split = FALSE)
[17:48:37.541]             base::close(...future.stdout)
[17:48:37.541]         }, add = TRUE)
[17:48:37.541]     }
[17:48:37.541]     ...future.frame <- base::sys.nframe()
[17:48:37.541]     ...future.conditions <- base::list()
[17:48:37.541]     ...future.rng <- base::globalenv()$.Random.seed
[17:48:37.541]     if (FALSE) {
[17:48:37.541]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:48:37.541]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:48:37.541]     }
[17:48:37.541]     ...future.result <- base::tryCatch({
[17:48:37.541]         base::withCallingHandlers({
[17:48:37.541]             ...future.value <- base::withVisible(base::local(NA))
[17:48:37.541]             future::FutureResult(value = ...future.value$value, 
[17:48:37.541]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.541]                   ...future.rng), globalenv = if (FALSE) 
[17:48:37.541]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:48:37.541]                     ...future.globalenv.names))
[17:48:37.541]                 else NULL, started = ...future.startTime, version = "1.8")
[17:48:37.541]         }, condition = base::local({
[17:48:37.541]             c <- base::c
[17:48:37.541]             inherits <- base::inherits
[17:48:37.541]             invokeRestart <- base::invokeRestart
[17:48:37.541]             length <- base::length
[17:48:37.541]             list <- base::list
[17:48:37.541]             seq.int <- base::seq.int
[17:48:37.541]             signalCondition <- base::signalCondition
[17:48:37.541]             sys.calls <- base::sys.calls
[17:48:37.541]             `[[` <- base::`[[`
[17:48:37.541]             `+` <- base::`+`
[17:48:37.541]             `<<-` <- base::`<<-`
[17:48:37.541]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:48:37.541]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:48:37.541]                   3L)]
[17:48:37.541]             }
[17:48:37.541]             function(cond) {
[17:48:37.541]                 is_error <- inherits(cond, "error")
[17:48:37.541]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:48:37.541]                   NULL)
[17:48:37.541]                 if (is_error) {
[17:48:37.541]                   sessionInformation <- function() {
[17:48:37.541]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:48:37.541]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:48:37.541]                       search = base::search(), system = base::Sys.info())
[17:48:37.541]                   }
[17:48:37.541]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.541]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:48:37.541]                     cond$call), session = sessionInformation(), 
[17:48:37.541]                     timestamp = base::Sys.time(), signaled = 0L)
[17:48:37.541]                   signalCondition(cond)
[17:48:37.541]                 }
[17:48:37.541]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:48:37.541]                 "immediateCondition"))) {
[17:48:37.541]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:48:37.541]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.541]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:48:37.541]                   if (TRUE && !signal) {
[17:48:37.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.541]                     {
[17:48:37.541]                       inherits <- base::inherits
[17:48:37.541]                       invokeRestart <- base::invokeRestart
[17:48:37.541]                       is.null <- base::is.null
[17:48:37.541]                       muffled <- FALSE
[17:48:37.541]                       if (inherits(cond, "message")) {
[17:48:37.541]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.541]                         if (muffled) 
[17:48:37.541]                           invokeRestart("muffleMessage")
[17:48:37.541]                       }
[17:48:37.541]                       else if (inherits(cond, "warning")) {
[17:48:37.541]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.541]                         if (muffled) 
[17:48:37.541]                           invokeRestart("muffleWarning")
[17:48:37.541]                       }
[17:48:37.541]                       else if (inherits(cond, "condition")) {
[17:48:37.541]                         if (!is.null(pattern)) {
[17:48:37.541]                           computeRestarts <- base::computeRestarts
[17:48:37.541]                           grepl <- base::grepl
[17:48:37.541]                           restarts <- computeRestarts(cond)
[17:48:37.541]                           for (restart in restarts) {
[17:48:37.541]                             name <- restart$name
[17:48:37.541]                             if (is.null(name)) 
[17:48:37.541]                               next
[17:48:37.541]                             if (!grepl(pattern, name)) 
[17:48:37.541]                               next
[17:48:37.541]                             invokeRestart(restart)
[17:48:37.541]                             muffled <- TRUE
[17:48:37.541]                             break
[17:48:37.541]                           }
[17:48:37.541]                         }
[17:48:37.541]                       }
[17:48:37.541]                       invisible(muffled)
[17:48:37.541]                     }
[17:48:37.541]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.541]                   }
[17:48:37.541]                 }
[17:48:37.541]                 else {
[17:48:37.541]                   if (TRUE) {
[17:48:37.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.541]                     {
[17:48:37.541]                       inherits <- base::inherits
[17:48:37.541]                       invokeRestart <- base::invokeRestart
[17:48:37.541]                       is.null <- base::is.null
[17:48:37.541]                       muffled <- FALSE
[17:48:37.541]                       if (inherits(cond, "message")) {
[17:48:37.541]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.541]                         if (muffled) 
[17:48:37.541]                           invokeRestart("muffleMessage")
[17:48:37.541]                       }
[17:48:37.541]                       else if (inherits(cond, "warning")) {
[17:48:37.541]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.541]                         if (muffled) 
[17:48:37.541]                           invokeRestart("muffleWarning")
[17:48:37.541]                       }
[17:48:37.541]                       else if (inherits(cond, "condition")) {
[17:48:37.541]                         if (!is.null(pattern)) {
[17:48:37.541]                           computeRestarts <- base::computeRestarts
[17:48:37.541]                           grepl <- base::grepl
[17:48:37.541]                           restarts <- computeRestarts(cond)
[17:48:37.541]                           for (restart in restarts) {
[17:48:37.541]                             name <- restart$name
[17:48:37.541]                             if (is.null(name)) 
[17:48:37.541]                               next
[17:48:37.541]                             if (!grepl(pattern, name)) 
[17:48:37.541]                               next
[17:48:37.541]                             invokeRestart(restart)
[17:48:37.541]                             muffled <- TRUE
[17:48:37.541]                             break
[17:48:37.541]                           }
[17:48:37.541]                         }
[17:48:37.541]                       }
[17:48:37.541]                       invisible(muffled)
[17:48:37.541]                     }
[17:48:37.541]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.541]                   }
[17:48:37.541]                 }
[17:48:37.541]             }
[17:48:37.541]         }))
[17:48:37.541]     }, error = function(ex) {
[17:48:37.541]         base::structure(base::list(value = NULL, visible = NULL, 
[17:48:37.541]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.541]                 ...future.rng), started = ...future.startTime, 
[17:48:37.541]             finished = Sys.time(), session_uuid = NA_character_, 
[17:48:37.541]             version = "1.8"), class = "FutureResult")
[17:48:37.541]     }, finally = {
[17:48:37.541]         if (!identical(...future.workdir, getwd())) 
[17:48:37.541]             setwd(...future.workdir)
[17:48:37.541]         {
[17:48:37.541]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:48:37.541]                 ...future.oldOptions$nwarnings <- NULL
[17:48:37.541]             }
[17:48:37.541]             base::options(...future.oldOptions)
[17:48:37.541]             if (.Platform$OS.type == "windows") {
[17:48:37.541]                 old_names <- names(...future.oldEnvVars)
[17:48:37.541]                 envs <- base::Sys.getenv()
[17:48:37.541]                 names <- names(envs)
[17:48:37.541]                 common <- intersect(names, old_names)
[17:48:37.541]                 added <- setdiff(names, old_names)
[17:48:37.541]                 removed <- setdiff(old_names, names)
[17:48:37.541]                 changed <- common[...future.oldEnvVars[common] != 
[17:48:37.541]                   envs[common]]
[17:48:37.541]                 NAMES <- toupper(changed)
[17:48:37.541]                 args <- list()
[17:48:37.541]                 for (kk in seq_along(NAMES)) {
[17:48:37.541]                   name <- changed[[kk]]
[17:48:37.541]                   NAME <- NAMES[[kk]]
[17:48:37.541]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.541]                     next
[17:48:37.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.541]                 }
[17:48:37.541]                 NAMES <- toupper(added)
[17:48:37.541]                 for (kk in seq_along(NAMES)) {
[17:48:37.541]                   name <- added[[kk]]
[17:48:37.541]                   NAME <- NAMES[[kk]]
[17:48:37.541]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.541]                     next
[17:48:37.541]                   args[[name]] <- ""
[17:48:37.541]                 }
[17:48:37.541]                 NAMES <- toupper(removed)
[17:48:37.541]                 for (kk in seq_along(NAMES)) {
[17:48:37.541]                   name <- removed[[kk]]
[17:48:37.541]                   NAME <- NAMES[[kk]]
[17:48:37.541]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.541]                     next
[17:48:37.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.541]                 }
[17:48:37.541]                 if (length(args) > 0) 
[17:48:37.541]                   base::do.call(base::Sys.setenv, args = args)
[17:48:37.541]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:48:37.541]             }
[17:48:37.541]             else {
[17:48:37.541]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:48:37.541]             }
[17:48:37.541]             {
[17:48:37.541]                 if (base::length(...future.futureOptionsAdded) > 
[17:48:37.541]                   0L) {
[17:48:37.541]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:48:37.541]                   base::names(opts) <- ...future.futureOptionsAdded
[17:48:37.541]                   base::options(opts)
[17:48:37.541]                 }
[17:48:37.541]                 {
[17:48:37.541]                   {
[17:48:37.541]                     NULL
[17:48:37.541]                     RNGkind("Mersenne-Twister")
[17:48:37.541]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:48:37.541]                       inherits = FALSE)
[17:48:37.541]                   }
[17:48:37.541]                   options(future.plan = "multisession")
[17:48:37.541]                   if (is.na("")) 
[17:48:37.541]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.541]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:48:37.541]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:48:37.541]                     .init = FALSE)
[17:48:37.541]                 }
[17:48:37.541]             }
[17:48:37.541]         }
[17:48:37.541]     })
[17:48:37.541]     if (TRUE) {
[17:48:37.541]         base::sink(type = "output", split = FALSE)
[17:48:37.541]         if (TRUE) {
[17:48:37.541]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:48:37.541]         }
[17:48:37.541]         else {
[17:48:37.541]             ...future.result["stdout"] <- base::list(NULL)
[17:48:37.541]         }
[17:48:37.541]         base::close(...future.stdout)
[17:48:37.541]         ...future.stdout <- NULL
[17:48:37.541]     }
[17:48:37.541]     ...future.result$conditions <- ...future.conditions
[17:48:37.541]     ...future.result$finished <- base::Sys.time()
[17:48:37.541]     ...future.result
[17:48:37.541] }
[17:48:37.543] plan(): Setting new future strategy stack:
[17:48:37.543] List of future strategies:
[17:48:37.543] 1. sequential:
[17:48:37.543]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:37.543]    - tweaked: FALSE
[17:48:37.543]    - call: NULL
[17:48:37.544] plan(): nbrOfWorkers() = 1
[17:48:37.544] plan(): Setting new future strategy stack:
[17:48:37.544] List of future strategies:
[17:48:37.544] 1. multisession:
[17:48:37.544]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.544]    - tweaked: FALSE
[17:48:37.544]    - call: plan("default")
[17:48:37.548] plan(): nbrOfWorkers() = 1
[17:48:37.548] SequentialFuture started (and completed)
[17:48:37.548] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:48:37.551] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:48:37.552] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:48:37.552] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:48:37.552] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:48:37.552] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:48:37.552] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:48:37.553] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:48:37.554] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:48:37.555] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:48:37.555] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:48:37.555] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:48:37.555] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:48:37.555] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:48:37.555] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:48:37.555] Option 'future.plan' of type ‘function’
[17:48:37.556] R command-line argument: -p 1
[17:48:37.556]  => 'future.plan' already set.
[17:48:37.556] R process uuid: 94839e2a-b763-d938-e6df-602c33edd9df
[17:48:37.556] Setting plan('default')
[17:48:37.556] plan(): Setting new future strategy stack:
[17:48:37.556] List of future strategies:
[17:48:37.556] 1. multisession:
[17:48:37.556]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.556]    - tweaked: FALSE
[17:48:37.556]    - call: NULL
[17:48:37.559] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:48:37.560] plan(): Setting new future strategy stack:
[17:48:37.560] List of future strategies:
[17:48:37.560] 1. multisession:
[17:48:37.560]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.560]    - tweaked: FALSE
[17:48:37.560]    - call: NULL
[17:48:37.560] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:48:37.560] multisession:
[17:48:37.560] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.560] - tweaked: FALSE
[17:48:37.560] - call: NULL
[17:48:37.563] getGlobalsAndPackages() ...
[17:48:37.563] Not searching for globals
[17:48:37.563] - globals: [0] <none>
[17:48:37.564] getGlobalsAndPackages() ... DONE
[17:48:37.564] Packages needed by the future expression (n = 0): <none>
[17:48:37.564] Packages needed by future strategies (n = 0): <none>
[17:48:37.564] {
[17:48:37.564]     {
[17:48:37.564]         {
[17:48:37.564]             ...future.startTime <- base::Sys.time()
[17:48:37.564]             {
[17:48:37.564]                 {
[17:48:37.564]                   {
[17:48:37.564]                     base::local({
[17:48:37.564]                       has_future <- base::requireNamespace("future", 
[17:48:37.564]                         quietly = TRUE)
[17:48:37.564]                       if (has_future) {
[17:48:37.564]                         ns <- base::getNamespace("future")
[17:48:37.564]                         version <- ns[[".package"]][["version"]]
[17:48:37.564]                         if (is.null(version)) 
[17:48:37.564]                           version <- utils::packageVersion("future")
[17:48:37.564]                       }
[17:48:37.564]                       else {
[17:48:37.564]                         version <- NULL
[17:48:37.564]                       }
[17:48:37.564]                       if (!has_future || version < "1.8.0") {
[17:48:37.564]                         info <- base::c(r_version = base::gsub("R version ", 
[17:48:37.564]                           "", base::R.version$version.string), 
[17:48:37.564]                           platform = base::sprintf("%s (%s-bit)", 
[17:48:37.564]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:48:37.564]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:48:37.564]                             "release", "version")], collapse = " "), 
[17:48:37.564]                           hostname = base::Sys.info()[["nodename"]])
[17:48:37.564]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:48:37.564]                           info)
[17:48:37.564]                         info <- base::paste(info, collapse = "; ")
[17:48:37.564]                         if (!has_future) {
[17:48:37.564]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:48:37.564]                             info)
[17:48:37.564]                         }
[17:48:37.564]                         else {
[17:48:37.564]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:48:37.564]                             info, version)
[17:48:37.564]                         }
[17:48:37.564]                         base::stop(msg)
[17:48:37.564]                       }
[17:48:37.564]                     })
[17:48:37.564]                   }
[17:48:37.564]                   ...future.strategy.old <- future::plan("list")
[17:48:37.564]                   options(future.plan = NULL)
[17:48:37.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:48:37.564]                 }
[17:48:37.564]                 ...future.workdir <- getwd()
[17:48:37.564]             }
[17:48:37.564]             ...future.oldOptions <- base::as.list(base::.Options)
[17:48:37.564]             ...future.oldEnvVars <- base::Sys.getenv()
[17:48:37.564]         }
[17:48:37.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:48:37.564]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:48:37.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:48:37.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:48:37.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:48:37.564]             future.stdout.windows.reencode = NULL, width = 80L)
[17:48:37.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:48:37.564]             base::names(...future.oldOptions))
[17:48:37.564]     }
[17:48:37.564]     if (FALSE) {
[17:48:37.564]     }
[17:48:37.564]     else {
[17:48:37.564]         if (TRUE) {
[17:48:37.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:48:37.564]                 open = "w")
[17:48:37.564]         }
[17:48:37.564]         else {
[17:48:37.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:48:37.564]                 windows = "NUL", "/dev/null"), open = "w")
[17:48:37.564]         }
[17:48:37.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:48:37.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:48:37.564]             base::sink(type = "output", split = FALSE)
[17:48:37.564]             base::close(...future.stdout)
[17:48:37.564]         }, add = TRUE)
[17:48:37.564]     }
[17:48:37.564]     ...future.frame <- base::sys.nframe()
[17:48:37.564]     ...future.conditions <- base::list()
[17:48:37.564]     ...future.rng <- base::globalenv()$.Random.seed
[17:48:37.564]     if (FALSE) {
[17:48:37.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:48:37.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:48:37.564]     }
[17:48:37.564]     ...future.result <- base::tryCatch({
[17:48:37.564]         base::withCallingHandlers({
[17:48:37.564]             ...future.value <- base::withVisible(base::local(NA))
[17:48:37.564]             future::FutureResult(value = ...future.value$value, 
[17:48:37.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.564]                   ...future.rng), globalenv = if (FALSE) 
[17:48:37.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:48:37.564]                     ...future.globalenv.names))
[17:48:37.564]                 else NULL, started = ...future.startTime, version = "1.8")
[17:48:37.564]         }, condition = base::local({
[17:48:37.564]             c <- base::c
[17:48:37.564]             inherits <- base::inherits
[17:48:37.564]             invokeRestart <- base::invokeRestart
[17:48:37.564]             length <- base::length
[17:48:37.564]             list <- base::list
[17:48:37.564]             seq.int <- base::seq.int
[17:48:37.564]             signalCondition <- base::signalCondition
[17:48:37.564]             sys.calls <- base::sys.calls
[17:48:37.564]             `[[` <- base::`[[`
[17:48:37.564]             `+` <- base::`+`
[17:48:37.564]             `<<-` <- base::`<<-`
[17:48:37.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:48:37.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:48:37.564]                   3L)]
[17:48:37.564]             }
[17:48:37.564]             function(cond) {
[17:48:37.564]                 is_error <- inherits(cond, "error")
[17:48:37.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:48:37.564]                   NULL)
[17:48:37.564]                 if (is_error) {
[17:48:37.564]                   sessionInformation <- function() {
[17:48:37.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:48:37.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:48:37.564]                       search = base::search(), system = base::Sys.info())
[17:48:37.564]                   }
[17:48:37.564]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:48:37.564]                     cond$call), session = sessionInformation(), 
[17:48:37.564]                     timestamp = base::Sys.time(), signaled = 0L)
[17:48:37.564]                   signalCondition(cond)
[17:48:37.564]                 }
[17:48:37.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:48:37.564]                 "immediateCondition"))) {
[17:48:37.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:48:37.564]                   ...future.conditions[[length(...future.conditions) + 
[17:48:37.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:48:37.564]                   if (TRUE && !signal) {
[17:48:37.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.564]                     {
[17:48:37.564]                       inherits <- base::inherits
[17:48:37.564]                       invokeRestart <- base::invokeRestart
[17:48:37.564]                       is.null <- base::is.null
[17:48:37.564]                       muffled <- FALSE
[17:48:37.564]                       if (inherits(cond, "message")) {
[17:48:37.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.564]                         if (muffled) 
[17:48:37.564]                           invokeRestart("muffleMessage")
[17:48:37.564]                       }
[17:48:37.564]                       else if (inherits(cond, "warning")) {
[17:48:37.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.564]                         if (muffled) 
[17:48:37.564]                           invokeRestart("muffleWarning")
[17:48:37.564]                       }
[17:48:37.564]                       else if (inherits(cond, "condition")) {
[17:48:37.564]                         if (!is.null(pattern)) {
[17:48:37.564]                           computeRestarts <- base::computeRestarts
[17:48:37.564]                           grepl <- base::grepl
[17:48:37.564]                           restarts <- computeRestarts(cond)
[17:48:37.564]                           for (restart in restarts) {
[17:48:37.564]                             name <- restart$name
[17:48:37.564]                             if (is.null(name)) 
[17:48:37.564]                               next
[17:48:37.564]                             if (!grepl(pattern, name)) 
[17:48:37.564]                               next
[17:48:37.564]                             invokeRestart(restart)
[17:48:37.564]                             muffled <- TRUE
[17:48:37.564]                             break
[17:48:37.564]                           }
[17:48:37.564]                         }
[17:48:37.564]                       }
[17:48:37.564]                       invisible(muffled)
[17:48:37.564]                     }
[17:48:37.564]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.564]                   }
[17:48:37.564]                 }
[17:48:37.564]                 else {
[17:48:37.564]                   if (TRUE) {
[17:48:37.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:48:37.564]                     {
[17:48:37.564]                       inherits <- base::inherits
[17:48:37.564]                       invokeRestart <- base::invokeRestart
[17:48:37.564]                       is.null <- base::is.null
[17:48:37.564]                       muffled <- FALSE
[17:48:37.564]                       if (inherits(cond, "message")) {
[17:48:37.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:48:37.564]                         if (muffled) 
[17:48:37.564]                           invokeRestart("muffleMessage")
[17:48:37.564]                       }
[17:48:37.564]                       else if (inherits(cond, "warning")) {
[17:48:37.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:48:37.564]                         if (muffled) 
[17:48:37.564]                           invokeRestart("muffleWarning")
[17:48:37.564]                       }
[17:48:37.564]                       else if (inherits(cond, "condition")) {
[17:48:37.564]                         if (!is.null(pattern)) {
[17:48:37.564]                           computeRestarts <- base::computeRestarts
[17:48:37.564]                           grepl <- base::grepl
[17:48:37.564]                           restarts <- computeRestarts(cond)
[17:48:37.564]                           for (restart in restarts) {
[17:48:37.564]                             name <- restart$name
[17:48:37.564]                             if (is.null(name)) 
[17:48:37.564]                               next
[17:48:37.564]                             if (!grepl(pattern, name)) 
[17:48:37.564]                               next
[17:48:37.564]                             invokeRestart(restart)
[17:48:37.564]                             muffled <- TRUE
[17:48:37.564]                             break
[17:48:37.564]                           }
[17:48:37.564]                         }
[17:48:37.564]                       }
[17:48:37.564]                       invisible(muffled)
[17:48:37.564]                     }
[17:48:37.564]                     muffleCondition(cond, pattern = "^muffle")
[17:48:37.564]                   }
[17:48:37.564]                 }
[17:48:37.564]             }
[17:48:37.564]         }))
[17:48:37.564]     }, error = function(ex) {
[17:48:37.564]         base::structure(base::list(value = NULL, visible = NULL, 
[17:48:37.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:48:37.564]                 ...future.rng), started = ...future.startTime, 
[17:48:37.564]             finished = Sys.time(), session_uuid = NA_character_, 
[17:48:37.564]             version = "1.8"), class = "FutureResult")
[17:48:37.564]     }, finally = {
[17:48:37.564]         if (!identical(...future.workdir, getwd())) 
[17:48:37.564]             setwd(...future.workdir)
[17:48:37.564]         {
[17:48:37.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:48:37.564]                 ...future.oldOptions$nwarnings <- NULL
[17:48:37.564]             }
[17:48:37.564]             base::options(...future.oldOptions)
[17:48:37.564]             if (.Platform$OS.type == "windows") {
[17:48:37.564]                 old_names <- names(...future.oldEnvVars)
[17:48:37.564]                 envs <- base::Sys.getenv()
[17:48:37.564]                 names <- names(envs)
[17:48:37.564]                 common <- intersect(names, old_names)
[17:48:37.564]                 added <- setdiff(names, old_names)
[17:48:37.564]                 removed <- setdiff(old_names, names)
[17:48:37.564]                 changed <- common[...future.oldEnvVars[common] != 
[17:48:37.564]                   envs[common]]
[17:48:37.564]                 NAMES <- toupper(changed)
[17:48:37.564]                 args <- list()
[17:48:37.564]                 for (kk in seq_along(NAMES)) {
[17:48:37.564]                   name <- changed[[kk]]
[17:48:37.564]                   NAME <- NAMES[[kk]]
[17:48:37.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.564]                     next
[17:48:37.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.564]                 }
[17:48:37.564]                 NAMES <- toupper(added)
[17:48:37.564]                 for (kk in seq_along(NAMES)) {
[17:48:37.564]                   name <- added[[kk]]
[17:48:37.564]                   NAME <- NAMES[[kk]]
[17:48:37.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.564]                     next
[17:48:37.564]                   args[[name]] <- ""
[17:48:37.564]                 }
[17:48:37.564]                 NAMES <- toupper(removed)
[17:48:37.564]                 for (kk in seq_along(NAMES)) {
[17:48:37.564]                   name <- removed[[kk]]
[17:48:37.564]                   NAME <- NAMES[[kk]]
[17:48:37.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:48:37.564]                     next
[17:48:37.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:48:37.564]                 }
[17:48:37.564]                 if (length(args) > 0) 
[17:48:37.564]                   base::do.call(base::Sys.setenv, args = args)
[17:48:37.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:48:37.564]             }
[17:48:37.564]             else {
[17:48:37.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:48:37.564]             }
[17:48:37.564]             {
[17:48:37.564]                 if (base::length(...future.futureOptionsAdded) > 
[17:48:37.564]                   0L) {
[17:48:37.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:48:37.564]                   base::names(opts) <- ...future.futureOptionsAdded
[17:48:37.564]                   base::options(opts)
[17:48:37.564]                 }
[17:48:37.564]                 {
[17:48:37.564]                   {
[17:48:37.564]                     NULL
[17:48:37.564]                     RNGkind("Mersenne-Twister")
[17:48:37.564]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:48:37.564]                       inherits = FALSE)
[17:48:37.564]                   }
[17:48:37.564]                   options(future.plan = function (..., workers = availableCores(), 
[17:48:37.564]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:48:37.564]                     envir = parent.frame()) 
[17:48:37.564]                   {
[17:48:37.564]                     if (is.function(workers)) 
[17:48:37.564]                       workers <- workers()
[17:48:37.564]                     workers <- structure(as.integer(workers), 
[17:48:37.564]                       class = class(workers))
[17:48:37.564]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:48:37.564]                       workers >= 1)
[17:48:37.564]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:48:37.564]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:48:37.564]                     }
[17:48:37.564]                     future <- MultisessionFuture(..., workers = workers, 
[17:48:37.564]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:48:37.564]                       envir = envir)
[17:48:37.564]                     if (!future$lazy) 
[17:48:37.564]                       future <- run(future)
[17:48:37.564]                     invisible(future)
[17:48:37.564]                   })
[17:48:37.564]                   if (is.na("")) 
[17:48:37.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:48:37.564]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:48:37.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:48:37.564]                     .init = FALSE)
[17:48:37.564]                 }
[17:48:37.564]             }
[17:48:37.564]         }
[17:48:37.564]     })
[17:48:37.564]     if (TRUE) {
[17:48:37.564]         base::sink(type = "output", split = FALSE)
[17:48:37.564]         if (TRUE) {
[17:48:37.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:48:37.564]         }
[17:48:37.564]         else {
[17:48:37.564]             ...future.result["stdout"] <- base::list(NULL)
[17:48:37.564]         }
[17:48:37.564]         base::close(...future.stdout)
[17:48:37.564]         ...future.stdout <- NULL
[17:48:37.564]     }
[17:48:37.564]     ...future.result$conditions <- ...future.conditions
[17:48:37.564]     ...future.result$finished <- base::Sys.time()
[17:48:37.564]     ...future.result
[17:48:37.564] }
[17:48:37.566] plan(): Setting new future strategy stack:
[17:48:37.567] List of future strategies:
[17:48:37.567] 1. sequential:
[17:48:37.567]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:37.567]    - tweaked: FALSE
[17:48:37.567]    - call: NULL
[17:48:37.567] plan(): nbrOfWorkers() = 1
[17:48:37.568] plan(): Setting new future strategy stack:
[17:48:37.568] List of future strategies:
[17:48:37.568] 1. multisession:
[17:48:37.568]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:48:37.568]    - tweaked: FALSE
[17:48:37.568]    - call: NULL
[17:48:37.571] plan(): nbrOfWorkers() = 1
[17:48:37.571] SequentialFuture started (and completed)
[17:48:37.571] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:48:37.574] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[17:48:37.577] Option 'future.startup.script': TRUE
[17:48:37.577] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:48:37.577] Future startup scripts found: <none>
[17:48:37.577] Option 'future.startup.script': TRUE
[17:48:37.577] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:48:37.578] Future startup scripts found: <none>
[17:48:37.578] Option 'future.startup.script': TRUE
[17:48:37.578] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:48:37.578] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[17:48:37.578] Option 'future.startup.script': TRUE
[17:48:37.581] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:48:37.581] Future startup scripts found: ‘.future.R’
[17:48:37.581] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[17:48:37.582] plan(): Setting new future strategy stack:
[17:48:37.582] List of future strategies:
[17:48:37.582] 1. FutureStrategy:
[17:48:37.582]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:48:37.582]    - tweaked: FALSE
[17:48:37.582]    - call: future::plan(oplan)
[17:48:37.582] plan(): nbrOfWorkers() = 1
> 
