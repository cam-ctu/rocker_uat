
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:03:15.159] plan(): Setting new future strategy stack:
[17:03:15.160] List of future strategies:
[17:03:15.160] 1. sequential:
[17:03:15.160]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.160]    - tweaked: FALSE
[17:03:15.160]    - call: future::plan("sequential")
[17:03:15.171] plan(): nbrOfWorkers() = 1
> 
> strategies <- supportedStrategies()
> 
> message("*** Nested futures ...")
*** Nested futures ...
> 
> for (strategy1 in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   for (strategy2 in strategies) {
+     message(sprintf("- plan(list('%s', '%s')) ...", strategy1, strategy2))
+     plan(list(a = strategy1, b = strategy2))
+     
+     nested <- plan("list")
+     stopifnot(
+       length(nested) == 2L,
+       all(names(nested) == c("a", "b")),
+       inherits(plan("next"), strategy1)
+     )
+ 
+     x %<-% {
+       a <- 1L
+ 
+       ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+       ## we're exporting the plan() function including its local stack!
+       plan_a <- unclass(future::plan("list"))
+       nested_a <- nested[-1]
+ 
+       stopifnot(
+         length(nested_a) == 1L,
+         length(plan_a) == 1L,
+         inherits(plan_a[[1]], "future"),
+         inherits(future::plan("next"), strategy2)
+       )
+ 
+       ## Attribute 'init' is modified at run time
+       for (kk in seq_along(plan_a)) attr(plan_a[[kk]], "init") <- NULL
+       for (kk in seq_along(nested_a)) attr(nested_a[[kk]], "init") <- NULL
+       stopifnot(all.equal(plan_a, nested_a))
+ 
+       y %<-% {
+         b <- 2L
+         
+         ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+         ## we're exporting the plan() function including its local stack!
+         plan_b <- future::plan("list")
+         nested_b <- nested_a[-1]
+ 
+         stopifnot(
+           length(nested_b) == 0L,
+           length(plan_b) == 1L,
+           inherits(plan_b[[1]], "future"),
+           inherits(future::plan("next"), "sequential")
+         )
+ 
+         list(a = a, nested_a = nested_a, plan_a = plan_a,
+              b = b, nested_b = nested_b, plan_b = plan_b)
+       }
+       y
+     }
+ 
+     str(x)
+ 
+     stopifnot(
+       length(x) == 3 * length(nested),
+       all(names(x) == c("a", "nested_a", "plan_a",
+                         "b", "nested_b", "plan_b")),
+ 
+       x$a == 1L,
+       length(x$nested_a) == 1L,
+       is.list(x$plan_a),
+       length(x$plan_a) == 1L,
+       inherits(x$plan_a[[1]], "future"),
+ 
+       x$b == 2L,
+       length(x$nested_b) == 0L,
+       is.list(x$plan_b),
+       length(x$plan_b) == 1L,
+       inherits(x$plan_b[[1]], "future"),
+       inherits(x$plan_b[[1]], "sequential")
+     )
+ 
+     ## Attribute 'init' is modified at run time
+     for (kk in seq_along(x$plan_a)) attr(x$plan_a[[kk]], "init") <- NULL
+     for (kk in seq_along(nested)) attr(nested[[kk]], "init") <- NULL
+     stopifnot(all.equal(x$plan_a, nested[-1L]))
+ 
+     rm(list = c("nested", "x"))
+ 
+ 
+     ## Nested futures and globals
+     ## In future (<= 1.7.0), the below would produce an error saying
+     ## "Failed to locate global object in the relevant environments: 'a'"
+     ## Related to https://github.com/HenrikBengtsson/globals/issues/35
+     data <- data.frame(a = 1:3, b = 3:1)
+     y_truth <- subset(data, a == 2)
+     f <- future({
+       value(future( subset(data, a == 2) ))
+     })
+     y <- value(f)
+     stopifnot(identical(y, y_truth))
+     
+     message(sprintf("- plan(list('%s', '%s')) ... DONE", strategy1, strategy2))
+   }
+ }
- plan(list('sequential', 'sequential')) ...
[17:03:15.225] plan(): Setting new future strategy stack:
[17:03:15.225] List of future strategies:
[17:03:15.225] 1. sequential:
[17:03:15.225]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.225]    - tweaked: FALSE
[17:03:15.225]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.225] 2. sequential:
[17:03:15.225]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.225]    - tweaked: FALSE
[17:03:15.225]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.236] plan(): nbrOfWorkers() = 1
[17:03:15.239] getGlobalsAndPackages() ...
[17:03:15.239] Searching for globals...
[17:03:15.260] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:15.260] Searching for globals ... DONE
[17:03:15.260] Resolving globals: FALSE
[17:03:15.262] The total size of the 2 globals is 22.60 KiB (23144 bytes)
[17:03:15.263] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 22.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (22.48 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:15.264] - globals: [2] ‘nested’, ‘strategy2’
[17:03:15.264] - packages: [1] ‘future’
[17:03:15.265] getGlobalsAndPackages() ... DONE
[17:03:15.265] run() for ‘Future’ ...
[17:03:15.265] - state: ‘created’
[17:03:15.265] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.266] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.266] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.266]   - Field: ‘label’
[17:03:15.266]   - Field: ‘local’
[17:03:15.266]   - Field: ‘owner’
[17:03:15.266]   - Field: ‘envir’
[17:03:15.266]   - Field: ‘packages’
[17:03:15.266]   - Field: ‘gc’
[17:03:15.267]   - Field: ‘conditions’
[17:03:15.267]   - Field: ‘expr’
[17:03:15.267]   - Field: ‘uuid’
[17:03:15.267]   - Field: ‘seed’
[17:03:15.267]   - Field: ‘version’
[17:03:15.267]   - Field: ‘result’
[17:03:15.267]   - Field: ‘asynchronous’
[17:03:15.267]   - Field: ‘calls’
[17:03:15.267]   - Field: ‘globals’
[17:03:15.267]   - Field: ‘stdout’
[17:03:15.267]   - Field: ‘earlySignal’
[17:03:15.268]   - Field: ‘lazy’
[17:03:15.268]   - Field: ‘state’
[17:03:15.268] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.268] - Launch lazy future ...
[17:03:15.269] Packages needed by the future expression (n = 1): ‘future’
[17:03:15.269] Packages needed by future strategies (n = 1): ‘future’
[17:03:15.270] {
[17:03:15.270]     {
[17:03:15.270]         {
[17:03:15.270]             ...future.startTime <- base::Sys.time()
[17:03:15.270]             {
[17:03:15.270]                 {
[17:03:15.270]                   {
[17:03:15.270]                     {
[17:03:15.270]                       base::local({
[17:03:15.270]                         has_future <- base::requireNamespace("future", 
[17:03:15.270]                           quietly = TRUE)
[17:03:15.270]                         if (has_future) {
[17:03:15.270]                           ns <- base::getNamespace("future")
[17:03:15.270]                           version <- ns[[".package"]][["version"]]
[17:03:15.270]                           if (is.null(version)) 
[17:03:15.270]                             version <- utils::packageVersion("future")
[17:03:15.270]                         }
[17:03:15.270]                         else {
[17:03:15.270]                           version <- NULL
[17:03:15.270]                         }
[17:03:15.270]                         if (!has_future || version < "1.8.0") {
[17:03:15.270]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.270]                             "", base::R.version$version.string), 
[17:03:15.270]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.270]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.270]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.270]                               "release", "version")], collapse = " "), 
[17:03:15.270]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.270]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.270]                             info)
[17:03:15.270]                           info <- base::paste(info, collapse = "; ")
[17:03:15.270]                           if (!has_future) {
[17:03:15.270]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.270]                               info)
[17:03:15.270]                           }
[17:03:15.270]                           else {
[17:03:15.270]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.270]                               info, version)
[17:03:15.270]                           }
[17:03:15.270]                           base::stop(msg)
[17:03:15.270]                         }
[17:03:15.270]                       })
[17:03:15.270]                     }
[17:03:15.270]                     base::local({
[17:03:15.270]                       for (pkg in "future") {
[17:03:15.270]                         base::loadNamespace(pkg)
[17:03:15.270]                         base::library(pkg, character.only = TRUE)
[17:03:15.270]                       }
[17:03:15.270]                     })
[17:03:15.270]                   }
[17:03:15.270]                   ...future.strategy.old <- future::plan("list")
[17:03:15.270]                   options(future.plan = NULL)
[17:03:15.270]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.270]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:15.270]                   {
[17:03:15.270]                     future <- SequentialFuture(..., envir = envir)
[17:03:15.270]                     if (!future$lazy) 
[17:03:15.270]                       future <- run(future)
[17:03:15.270]                     invisible(future)
[17:03:15.270]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:15.270]                 }
[17:03:15.270]                 ...future.workdir <- getwd()
[17:03:15.270]             }
[17:03:15.270]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.270]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.270]         }
[17:03:15.270]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.270]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.270]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.270]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.270]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.270]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.270]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.270]             base::names(...future.oldOptions))
[17:03:15.270]     }
[17:03:15.270]     if (FALSE) {
[17:03:15.270]     }
[17:03:15.270]     else {
[17:03:15.270]         if (TRUE) {
[17:03:15.270]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.270]                 open = "w")
[17:03:15.270]         }
[17:03:15.270]         else {
[17:03:15.270]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.270]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.270]         }
[17:03:15.270]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.270]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.270]             base::sink(type = "output", split = FALSE)
[17:03:15.270]             base::close(...future.stdout)
[17:03:15.270]         }, add = TRUE)
[17:03:15.270]     }
[17:03:15.270]     ...future.frame <- base::sys.nframe()
[17:03:15.270]     ...future.conditions <- base::list()
[17:03:15.270]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.270]     if (FALSE) {
[17:03:15.270]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.270]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.270]     }
[17:03:15.270]     ...future.result <- base::tryCatch({
[17:03:15.270]         base::withCallingHandlers({
[17:03:15.270]             ...future.value <- base::withVisible(base::local({
[17:03:15.270]                 a <- 1L
[17:03:15.270]                 plan_a <- unclass(future::plan("list"))
[17:03:15.270]                 nested_a <- nested[-1]
[17:03:15.270]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:15.270]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.270]                   strategy2))
[17:03:15.270]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:15.270]                   "init") <- NULL
[17:03:15.270]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:15.270]                   "init") <- NULL
[17:03:15.270]                 stopifnot(all.equal(plan_a, nested_a))
[17:03:15.270]                 y %<-% {
[17:03:15.270]                   b <- 2L
[17:03:15.270]                   plan_b <- future::plan("list")
[17:03:15.270]                   nested_b <- nested_a[-1]
[17:03:15.270]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:15.270]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.270]                     "sequential"))
[17:03:15.270]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:15.270]                     b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:15.270]                 }
[17:03:15.270]                 y
[17:03:15.270]             }))
[17:03:15.270]             future::FutureResult(value = ...future.value$value, 
[17:03:15.270]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.270]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.270]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.270]                     ...future.globalenv.names))
[17:03:15.270]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.270]         }, condition = base::local({
[17:03:15.270]             c <- base::c
[17:03:15.270]             inherits <- base::inherits
[17:03:15.270]             invokeRestart <- base::invokeRestart
[17:03:15.270]             length <- base::length
[17:03:15.270]             list <- base::list
[17:03:15.270]             seq.int <- base::seq.int
[17:03:15.270]             signalCondition <- base::signalCondition
[17:03:15.270]             sys.calls <- base::sys.calls
[17:03:15.270]             `[[` <- base::`[[`
[17:03:15.270]             `+` <- base::`+`
[17:03:15.270]             `<<-` <- base::`<<-`
[17:03:15.270]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.270]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.270]                   3L)]
[17:03:15.270]             }
[17:03:15.270]             function(cond) {
[17:03:15.270]                 is_error <- inherits(cond, "error")
[17:03:15.270]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.270]                   NULL)
[17:03:15.270]                 if (is_error) {
[17:03:15.270]                   sessionInformation <- function() {
[17:03:15.270]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.270]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.270]                       search = base::search(), system = base::Sys.info())
[17:03:15.270]                   }
[17:03:15.270]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.270]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.270]                     cond$call), session = sessionInformation(), 
[17:03:15.270]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.270]                   signalCondition(cond)
[17:03:15.270]                 }
[17:03:15.270]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.270]                 "immediateCondition"))) {
[17:03:15.270]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.270]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.270]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.270]                   if (TRUE && !signal) {
[17:03:15.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.270]                     {
[17:03:15.270]                       inherits <- base::inherits
[17:03:15.270]                       invokeRestart <- base::invokeRestart
[17:03:15.270]                       is.null <- base::is.null
[17:03:15.270]                       muffled <- FALSE
[17:03:15.270]                       if (inherits(cond, "message")) {
[17:03:15.270]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.270]                         if (muffled) 
[17:03:15.270]                           invokeRestart("muffleMessage")
[17:03:15.270]                       }
[17:03:15.270]                       else if (inherits(cond, "warning")) {
[17:03:15.270]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.270]                         if (muffled) 
[17:03:15.270]                           invokeRestart("muffleWarning")
[17:03:15.270]                       }
[17:03:15.270]                       else if (inherits(cond, "condition")) {
[17:03:15.270]                         if (!is.null(pattern)) {
[17:03:15.270]                           computeRestarts <- base::computeRestarts
[17:03:15.270]                           grepl <- base::grepl
[17:03:15.270]                           restarts <- computeRestarts(cond)
[17:03:15.270]                           for (restart in restarts) {
[17:03:15.270]                             name <- restart$name
[17:03:15.270]                             if (is.null(name)) 
[17:03:15.270]                               next
[17:03:15.270]                             if (!grepl(pattern, name)) 
[17:03:15.270]                               next
[17:03:15.270]                             invokeRestart(restart)
[17:03:15.270]                             muffled <- TRUE
[17:03:15.270]                             break
[17:03:15.270]                           }
[17:03:15.270]                         }
[17:03:15.270]                       }
[17:03:15.270]                       invisible(muffled)
[17:03:15.270]                     }
[17:03:15.270]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.270]                   }
[17:03:15.270]                 }
[17:03:15.270]                 else {
[17:03:15.270]                   if (TRUE) {
[17:03:15.270]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.270]                     {
[17:03:15.270]                       inherits <- base::inherits
[17:03:15.270]                       invokeRestart <- base::invokeRestart
[17:03:15.270]                       is.null <- base::is.null
[17:03:15.270]                       muffled <- FALSE
[17:03:15.270]                       if (inherits(cond, "message")) {
[17:03:15.270]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.270]                         if (muffled) 
[17:03:15.270]                           invokeRestart("muffleMessage")
[17:03:15.270]                       }
[17:03:15.270]                       else if (inherits(cond, "warning")) {
[17:03:15.270]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.270]                         if (muffled) 
[17:03:15.270]                           invokeRestart("muffleWarning")
[17:03:15.270]                       }
[17:03:15.270]                       else if (inherits(cond, "condition")) {
[17:03:15.270]                         if (!is.null(pattern)) {
[17:03:15.270]                           computeRestarts <- base::computeRestarts
[17:03:15.270]                           grepl <- base::grepl
[17:03:15.270]                           restarts <- computeRestarts(cond)
[17:03:15.270]                           for (restart in restarts) {
[17:03:15.270]                             name <- restart$name
[17:03:15.270]                             if (is.null(name)) 
[17:03:15.270]                               next
[17:03:15.270]                             if (!grepl(pattern, name)) 
[17:03:15.270]                               next
[17:03:15.270]                             invokeRestart(restart)
[17:03:15.270]                             muffled <- TRUE
[17:03:15.270]                             break
[17:03:15.270]                           }
[17:03:15.270]                         }
[17:03:15.270]                       }
[17:03:15.270]                       invisible(muffled)
[17:03:15.270]                     }
[17:03:15.270]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.270]                   }
[17:03:15.270]                 }
[17:03:15.270]             }
[17:03:15.270]         }))
[17:03:15.270]     }, error = function(ex) {
[17:03:15.270]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.270]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.270]                 ...future.rng), started = ...future.startTime, 
[17:03:15.270]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.270]             version = "1.8"), class = "FutureResult")
[17:03:15.270]     }, finally = {
[17:03:15.270]         if (!identical(...future.workdir, getwd())) 
[17:03:15.270]             setwd(...future.workdir)
[17:03:15.270]         {
[17:03:15.270]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.270]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.270]             }
[17:03:15.270]             base::options(...future.oldOptions)
[17:03:15.270]             if (.Platform$OS.type == "windows") {
[17:03:15.270]                 old_names <- names(...future.oldEnvVars)
[17:03:15.270]                 envs <- base::Sys.getenv()
[17:03:15.270]                 names <- names(envs)
[17:03:15.270]                 common <- intersect(names, old_names)
[17:03:15.270]                 added <- setdiff(names, old_names)
[17:03:15.270]                 removed <- setdiff(old_names, names)
[17:03:15.270]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.270]                   envs[common]]
[17:03:15.270]                 NAMES <- toupper(changed)
[17:03:15.270]                 args <- list()
[17:03:15.270]                 for (kk in seq_along(NAMES)) {
[17:03:15.270]                   name <- changed[[kk]]
[17:03:15.270]                   NAME <- NAMES[[kk]]
[17:03:15.270]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.270]                     next
[17:03:15.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.270]                 }
[17:03:15.270]                 NAMES <- toupper(added)
[17:03:15.270]                 for (kk in seq_along(NAMES)) {
[17:03:15.270]                   name <- added[[kk]]
[17:03:15.270]                   NAME <- NAMES[[kk]]
[17:03:15.270]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.270]                     next
[17:03:15.270]                   args[[name]] <- ""
[17:03:15.270]                 }
[17:03:15.270]                 NAMES <- toupper(removed)
[17:03:15.270]                 for (kk in seq_along(NAMES)) {
[17:03:15.270]                   name <- removed[[kk]]
[17:03:15.270]                   NAME <- NAMES[[kk]]
[17:03:15.270]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.270]                     next
[17:03:15.270]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.270]                 }
[17:03:15.270]                 if (length(args) > 0) 
[17:03:15.270]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.270]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.270]             }
[17:03:15.270]             else {
[17:03:15.270]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.270]             }
[17:03:15.270]             {
[17:03:15.270]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.270]                   0L) {
[17:03:15.270]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.270]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.270]                   base::options(opts)
[17:03:15.270]                 }
[17:03:15.270]                 {
[17:03:15.270]                   {
[17:03:15.270]                     NULL
[17:03:15.270]                     RNGkind("Mersenne-Twister")
[17:03:15.270]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.270]                       inherits = FALSE)
[17:03:15.270]                   }
[17:03:15.270]                   options(future.plan = NULL)
[17:03:15.270]                   if (is.na(NA_character_)) 
[17:03:15.270]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.270]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.270]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.270]                     .init = FALSE)
[17:03:15.270]                 }
[17:03:15.270]             }
[17:03:15.270]         }
[17:03:15.270]     })
[17:03:15.270]     if (TRUE) {
[17:03:15.270]         base::sink(type = "output", split = FALSE)
[17:03:15.270]         if (TRUE) {
[17:03:15.270]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.270]         }
[17:03:15.270]         else {
[17:03:15.270]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.270]         }
[17:03:15.270]         base::close(...future.stdout)
[17:03:15.270]         ...future.stdout <- NULL
[17:03:15.270]     }
[17:03:15.270]     ...future.result$conditions <- ...future.conditions
[17:03:15.270]     ...future.result$finished <- base::Sys.time()
[17:03:15.270]     ...future.result
[17:03:15.270] }
[17:03:15.271] assign_globals() ...
[17:03:15.272] List of 2
[17:03:15.272]  $ nested   :List of 2
[17:03:15.272]   ..$ a:function (..., envir = parent.frame())  
[17:03:15.272]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:15.272]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.272]   ..$ b:function (..., envir = parent.frame())  
[17:03:15.272]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:15.272]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.272]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:15.272]  $ strategy2: chr "sequential"
[17:03:15.272]  - attr(*, "where")=List of 2
[17:03:15.272]   ..$ nested   :<environment: R_EmptyEnv> 
[17:03:15.272]   ..$ strategy2:<environment: R_EmptyEnv> 
[17:03:15.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.272]  - attr(*, "resolved")= logi FALSE
[17:03:15.272]  - attr(*, "total_size")= num 23144
[17:03:15.272]  - attr(*, "already-done")= logi TRUE
[17:03:15.278] - copied ‘nested’ to environment
[17:03:15.278] - copied ‘strategy2’ to environment
[17:03:15.278] assign_globals() ... done
[17:03:15.279] plan(): Setting new future strategy stack:
[17:03:15.279] List of future strategies:
[17:03:15.279] 1. sequential:
[17:03:15.279]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.279]    - tweaked: FALSE
[17:03:15.279]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.279] plan(): nbrOfWorkers() = 1
[17:03:15.315] plan(): Setting new future strategy stack:
[17:03:15.316] List of future strategies:
[17:03:15.316] 1. sequential:
[17:03:15.316]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.316]    - tweaked: FALSE
[17:03:15.316]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.316] 2. sequential:
[17:03:15.316]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.316]    - tweaked: FALSE
[17:03:15.316]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.316] plan(): nbrOfWorkers() = 1
[17:03:15.316] SequentialFuture started (and completed)
[17:03:15.318] signalConditions() ...
[17:03:15.318]  - include = ‘immediateCondition’
[17:03:15.318]  - exclude = 
[17:03:15.318]  - resignal = FALSE
[17:03:15.318]  - Number of conditions: 54
[17:03:15.318] signalConditions() ... done
[17:03:15.318] - Launch lazy future ... done
[17:03:15.319] run() for ‘SequentialFuture’ ... done
[17:03:15.319] signalConditions() ...
[17:03:15.319]  - include = ‘immediateCondition’
[17:03:15.319]  - exclude = 
[17:03:15.319]  - resignal = FALSE
[17:03:15.319]  - Number of conditions: 54
[17:03:15.319] signalConditions() ... done
[17:03:15.319] Future state: ‘finished’
[17:03:15.319] signalConditions() ...
[17:03:15.320]  - include = ‘condition’
[17:03:15.320]  - exclude = ‘immediateCondition’
[17:03:15.320]  - resignal = TRUE
[17:03:15.320]  - Number of conditions: 54
[17:03:15.320]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.280] getGlobalsAndPackages() ...
[17:03:15.320]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.281] Searching for globals...
[17:03:15.320]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.299] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[17:03:15.320]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.299] Searching for globals ... DONE
[17:03:15.320]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.299] Resolving globals: FALSE
[17:03:15.321]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.300] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[17:03:15.321]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[17:03:15.321]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[17:03:15.321]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] 
[17:03:15.321]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] getGlobalsAndPackages() ... DONE
[17:03:15.321]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] run() for ‘Future’ ...
[17:03:15.321]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] - state: ‘created’
[17:03:15.321]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.301] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.322]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.322]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.322]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302]   - Field: ‘label’
[17:03:15.322]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302]   - Field: ‘local’
[17:03:15.322]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302]   - Field: ‘owner’
[17:03:15.322]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302]   - Field: ‘envir’
[17:03:15.322]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302]   - Field: ‘packages’
[17:03:15.322]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.302]   - Field: ‘gc’
[17:03:15.323]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘conditions’
[17:03:15.323]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘expr’
[17:03:15.323]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘uuid’
[17:03:15.323]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘seed’
[17:03:15.323]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘version’
[17:03:15.323]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘result’
[17:03:15.323]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘asynchronous’
[17:03:15.324]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘calls’
[17:03:15.324]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘globals’
[17:03:15.324]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.303]   - Field: ‘stdout’
[17:03:15.324]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304]   - Field: ‘earlySignal’
[17:03:15.324]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304]   - Field: ‘lazy’
[17:03:15.324]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304]   - Field: ‘state’
[17:03:15.324]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.324]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304] - Launch lazy future ...
[17:03:15.325]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304] Packages needed by the future expression (n = 0): <none>
[17:03:15.325]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.304] Packages needed by future strategies (n = 0): <none>
[17:03:15.325]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.305] {
[17:03:15.305]     {
[17:03:15.305]         {
[17:03:15.305]             ...future.startTime <- base::Sys.time()
[17:03:15.305]             {
[17:03:15.305]                 {
[17:03:15.305]                   {
[17:03:15.305]                     base::local({
[17:03:15.305]                       has_future <- base::requireNamespace("future", 
[17:03:15.305]                         quietly = TRUE)
[17:03:15.305]                       if (has_future) {
[17:03:15.305]                         ns <- base::getNamespace("future")
[17:03:15.305]                         version <- ns[[".package"]][["version"]]
[17:03:15.305]                         if (is.null(version)) 
[17:03:15.305]                           version <- utils::packageVersion("future")
[17:03:15.305]                       }
[17:03:15.305]                       else {
[17:03:15.305]                         version <- NULL
[17:03:15.305]                       }
[17:03:15.305]                       if (!has_future || version < "1.8.0") {
[17:03:15.305]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.305]                           "", base::R.version$version.string), 
[17:03:15.305]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:15.305]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.305]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.305]                             "release", "version")], collapse = " "), 
[17:03:15.305]                           hostname = base::Sys.info()[["nodename"]])
[17:03:15.305]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.305]                           info)
[17:03:15.305]                         info <- base::paste(info, collapse = "; ")
[17:03:15.305]                         if (!has_future) {
[17:03:15.305]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.305]                             info)
[17:03:15.305]                         }
[17:03:15.305]                         else {
[17:03:15.305]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.305]                             info, version)
[17:03:15.305]                         }
[17:03:15.305]                         base::stop(msg)
[17:03:15.305]                       }
[17:03:15.305]                     })
[17:03:15.305]                   }
[17:03:15.305]                   ...future.strategy.old <- future::plan("list")
[17:03:15.305]                   options(future.plan = NULL)
[17:03:15.305]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.305]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:15.305]                 }
[17:03:15.305]                 ...future.workdir <- getwd()
[17:03:15.305]             }
[17:03:15.305]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.305]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.305]         }
[17:03:15.305]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.305]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.305]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.305]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.305]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.305]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.305]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.305]             base::names(...future.oldOptions))
[17:03:15.305]     }
[17:03:15.305]     if (FALSE) {
[17:03:15.305]     }
[17:03:15.305]     else {
[17:03:15.305]         if (TRUE) {
[17:03:15.305]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.305]                 open = "w")
[17:03:15.305]         }
[17:03:15.305]         else {
[17:03:15.305]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.305]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.305]         }
[17:03:15.305]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.305]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.305]             base::sink(type = "output", split = FALSE)
[17:03:15.305]             base::close(...future.stdout)
[17:03:15.305]         }, add = TRUE)
[17:03:15.305]     }
[17:03:15.305]     ...future.frame <- base::sys.nframe()
[17:03:15.305]     ...future.conditions <- base::list()
[17:03:15.305]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.305]     if (FALSE) {
[17:03:15.305]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.305]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.305]     }
[17:03:15.305]     ...future.result <- base::tryCatch({
[17:03:15.305]         base::withCallingHandlers({
[17:03:15.305]             ...future.value <- base::withVisible(base::local({
[17:03:15.305]                 b <- 2L
[17:03:15.305]                 plan_b <- future::plan("list")
[17:03:15.305]                 nested_b <- nested_a[-1]
[17:03:15.305]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:15.305]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.305]                   "sequential"))
[17:03:15.305]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:15.305]                   b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:15.305]             }))
[17:03:15.305]             future::FutureResult(value = ...future.value$value, 
[17:03:15.305]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.305]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.305]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.305]                     ...future.globalenv.names))
[17:03:15.305]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.305]         }, condition = base::local({
[17:03:15.305]             c <- base::c
[17:03:15.305]             inherits <- base::inherits
[17:03:15.305]             invokeRestart <- base::invokeRestart
[17:03:15.305]             length <- base::length
[17:03:15.305]             list <- base::list
[17:03:15.305]             seq.int <- base::seq.int
[17:03:15.305]             signalCondition <- base::signalCondition
[17:03:15.305]             sys.calls <- base::sys.calls
[17:03:15.305]             `[[` <- base::`[[`
[17:03:15.305]             `+` <- base::`+`
[17:03:15.305]             `<<-` <- base::`<<-`
[17:03:15.305]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.305]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.305]                   3L)]
[17:03:15.305]             }
[17:03:15.305]             function(cond) {
[17:03:15.305]                 is_error <- inherits(cond, "error")
[17:03:15.305]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.305]                   NULL)
[17:03:15.305]                 if (is_error) {
[17:03:15.305]                   sessionInformation <- function() {
[17:03:15.305]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.305]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.305]                       search = base::search(), system = base::Sys.info())
[17:03:15.305]                   }
[17:03:15.305]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.305]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.305]                     cond$call), session = sessionInformation(), 
[17:03:15.305]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.305]                   signalCondition(cond)
[17:03:15.305]                 }
[17:03:15.305]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.305]                 "immediateCondition"))) {
[17:03:15.305]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.305]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.305]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.305]                   if (TRUE && !signal) {
[17:03:15.305]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.305]                     {
[17:03:15.305]                       inherits <- base::inherits
[17:03:15.305]                       invokeRestart <- base::invokeRestart
[17:03:15.305]                       is.null <- base::is.null
[17:03:15.305]                       muffled <- FALSE
[17:03:15.305]                       if (inherits(cond, "message")) {
[17:03:15.305]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.305]                         if (muffled) 
[17:03:15.305]                           invokeRestart("muffleMessage")
[17:03:15.305]                       }
[17:03:15.305]                       else if (inherits(cond, "warning")) {
[17:03:15.305]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.305]                         if (muffled) 
[17:03:15.305]                           invokeRestart("muffleWarning")
[17:03:15.305]                       }
[17:03:15.305]                       else if (inherits(cond, "condition")) {
[17:03:15.305]                         if (!is.null(pattern)) {
[17:03:15.305]                           computeRestarts <- base::computeRestarts
[17:03:15.305]                           grepl <- base::grepl
[17:03:15.305]                           restarts <- computeRestarts(cond)
[17:03:15.305]                           for (restart in restarts) {
[17:03:15.305]                             name <- restart$name
[17:03:15.305]                             if (is.null(name)) 
[17:03:15.305]                               next
[17:03:15.305]                             if (!grepl(pattern, name)) 
[17:03:15.305]                               next
[17:03:15.305]                             invokeRestart(restart)
[17:03:15.305]                             muffled <- TRUE
[17:03:15.305]                             break
[17:03:15.305]                           }
[17:03:15.305]                         }
[17:03:15.305]                       }
[17:03:15.305]                       invisible(muffled)
[17:03:15.305]                     }
[17:03:15.305]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.305]                   }
[17:03:15.305]                 }
[17:03:15.305]                 else {
[17:03:15.305]                   if (TRUE) {
[17:03:15.305]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.305]                     {
[17:03:15.305]                       inherits <- base::inherits
[17:03:15.305]                       invokeRestart <- base::invokeRestart
[17:03:15.305]                       is.null <- base::is.null
[17:03:15.305]                       muffled <- FALSE
[17:03:15.305]                       if (inherits(cond, "message")) {
[17:03:15.305]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.305]                         if (muffled) 
[17:03:15.305]                           invokeRestart("muffleMessage")
[17:03:15.305]                       }
[17:03:15.305]                       else if (inherits(cond, "warning")) {
[17:03:15.305]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.305]                         if (muffled) 
[17:03:15.305]                           invokeRestart("muffleWarning")
[17:03:15.305]                       }
[17:03:15.305]                       else if (inherits(cond, "condition")) {
[17:03:15.305]                         if (!is.null(pattern)) {
[17:03:15.305]                           computeRestarts <- base::computeRestarts
[17:03:15.305]                           grepl <- base::grepl
[17:03:15.305]                           restarts <- computeRestarts(cond)
[17:03:15.305]                           for (restart in restarts) {
[17:03:15.305]                             name <- restart$name
[17:03:15.305]                             if (is.null(name)) 
[17:03:15.305]                               next
[17:03:15.305]                             if (!grepl(pattern, name)) 
[17:03:15.305]                               next
[17:03:15.305]                             invokeRestart(restart)
[17:03:15.305]                             muffled <- TRUE
[17:03:15.305]                             break
[17:03:15.305]                           }
[17:03:15.305]                         }
[17:03:15.305]                       }
[17:03:15.305]                       invisible(muffled)
[17:03:15.305]                     }
[17:03:15.305]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.305]                   }
[17:03:15.305]                 }
[17:03:15.305]             }
[17:03:15.305]         }))
[17:03:15.305]     }, error = function(ex) {
[17:03:15.305]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.305]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.305]                 ...future.rng), started = ...future.startTime, 
[17:03:15.305]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.305]             version = "1.8"), class = "FutureResult")
[17:03:15.305]     }, finally = {
[17:03:15.305]         if (!identical(...future.workdir, getwd())) 
[17:03:15.305]             setwd(...future.workdir)
[17:03:15.305]         {
[17:03:15.305]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.305]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.305]             }
[17:03:15.305]             base::options(...future.oldOptions)
[17:03:15.305]             if (.Platform$OS.type == "windows") {
[17:03:15.305]                 old_names <- names(...future.oldEnvVars)
[17:03:15.305]                 envs <- base::Sys.getenv()
[17:03:15.305]                 names <- names(envs)
[17:03:15.305]                 common <- intersect(names, old_names)
[17:03:15.305]                 added <- setdiff(names, old_names)
[17:03:15.305]                 removed <- setdiff(old_names, names)
[17:03:15.305]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.305]                   envs[common]]
[17:03:15.305]                 NAMES <- toupper(changed)
[17:03:15.305]                 args <- list()
[17:03:15.305]                 for (kk in seq_along(NAMES)) {
[17:03:15.305]                   name <- changed[[kk]]
[17:03:15.305]                   NAME <- NAMES[[kk]]
[17:03:15.305]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.305]                     next
[17:03:15.305]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.305]                 }
[17:03:15.305]                 NAMES <- toupper(added)
[17:03:15.305]                 for (kk in seq_along(NAMES)) {
[17:03:15.305]                   name <- added[[kk]]
[17:03:15.305]                   NAME <- NAMES[[kk]]
[17:03:15.305]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.305]                     next
[17:03:15.305]                   args[[name]] <- ""
[17:03:15.305]                 }
[17:03:15.305]                 NAMES <- toupper(removed)
[17:03:15.305]                 for (kk in seq_along(NAMES)) {
[17:03:15.305]                   name <- removed[[kk]]
[17:03:15.305]                   NAME <- NAMES[[kk]]
[17:03:15.305]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.305]                     next
[17:03:15.305]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.305]                 }
[17:03:15.305]                 if (length(args) > 0) 
[17:03:15.305]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.305]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.305]             }
[17:03:15.305]             else {
[17:03:15.305]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.305]             }
[17:03:15.305]             {
[17:03:15.305]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.305]                   0L) {
[17:03:15.305]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.305]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.305]                   base::options(opts)
[17:03:15.305]                 }
[17:03:15.305]                 {
[17:03:15.305]                   {
[17:03:15.305]                     NULL
[17:03:15.305]                     RNGkind("Mersenne-Twister")
[17:03:15.305]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.305]                       inherits = FALSE)
[17:03:15.305]                   }
[17:03:15.305]                   options(future.plan = NULL)
[17:03:15.305]                   if (is.na(NA_character_)) 
[17:03:15.305]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.305]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.305]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.305]                     .init = FALSE)
[17:03:15.305]                 }
[17:03:15.305]             }
[17:03:15.305]         }
[17:03:15.305]     })
[17:03:15.305]     if (TRUE) {
[17:03:15.305]         base::sink(type = "output", split = FALSE)
[17:03:15.305]         if (TRUE) {
[17:03:15.305]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.305]         }
[17:03:15.305]         else {
[17:03:15.305]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.305]         }
[17:03:15.305]         base::close(...future.stdout)
[17:03:15.305]         ...future.stdout <- NULL
[17:03:15.305]     }
[17:03:15.305]     ...future.result$conditions <- ...future.conditions
[17:03:15.305]     ...future.result$finished <- base::Sys.time()
[17:03:15.305]     ...future.result
[17:03:15.305] }
[17:03:15.325]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.306] assign_globals() ...
[17:03:15.325]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.306] List of 3
[17:03:15.306]  $ nested_a:List of 1
[17:03:15.306]   ..$ b:function (..., envir = parent.frame())  
[17:03:15.306]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:15.306]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.306]  $ a       : int 1
[17:03:15.306]  $ plan_a  :List of 1
[17:03:15.306]   ..$ b:function (..., envir = parent.frame())  
[17:03:15.306]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:15.306]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.306]  - attr(*, "where")=List of 3
[17:03:15.306]   ..$ nested_a:<environment: R_EmptyEnv> 
[17:03:15.306]   ..$ a       :<environment: R_EmptyEnv> 
[17:03:15.306]   ..$ plan_a  :<environment: R_EmptyEnv> 
[17:03:15.306]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.306]  - attr(*, "resolved")= logi FALSE
[17:03:15.306]  - attr(*, "total_size")= num 23080
[17:03:15.306]  - attr(*, "already-done")= logi TRUE
[17:03:15.325]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.311] - copied ‘nested_a’ to environment
[17:03:15.325]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.311] - copied ‘a’ to environment
[17:03:15.325]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.311] - copied ‘plan_a’ to environment
[17:03:15.326]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.311] assign_globals() ... done
[17:03:15.326]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.312] plan(): Setting new future strategy stack:
[17:03:15.326]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.312] List of future strategies:
[17:03:15.312] 1. sequential:
[17:03:15.312]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.312]    - tweaked: FALSE
[17:03:15.312]    - call: NULL
[17:03:15.326]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.312] plan(): nbrOfWorkers() = 1
[17:03:15.326]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.313] plan(): Setting new future strategy stack:
[17:03:15.326]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.314] List of future strategies:
[17:03:15.314] 1. sequential:
[17:03:15.314]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.314]    - tweaked: FALSE
[17:03:15.314]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.326]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.314] plan(): nbrOfWorkers() = 1
[17:03:15.326]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.314] SequentialFuture started (and completed)
[17:03:15.327]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.315] - Launch lazy future ... done
[17:03:15.327]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.315] run() for ‘SequentialFuture’ ... done
[17:03:15.327] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:15.332] getGlobalsAndPackages() ...
[17:03:15.332] Searching for globals...
[17:03:15.333] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:15.333] Searching for globals ... DONE
[17:03:15.333] Resolving globals: FALSE
[17:03:15.334] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:15.334] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:15.334] - globals: [1] ‘data’
[17:03:15.334] - packages: [1] ‘future’
[17:03:15.334] getGlobalsAndPackages() ... DONE
[17:03:15.335] run() for ‘Future’ ...
[17:03:15.335] - state: ‘created’
[17:03:15.335] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.335] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.335] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.335]   - Field: ‘label’
[17:03:15.336]   - Field: ‘local’
[17:03:15.336]   - Field: ‘owner’
[17:03:15.336]   - Field: ‘envir’
[17:03:15.336]   - Field: ‘packages’
[17:03:15.336]   - Field: ‘gc’
[17:03:15.336]   - Field: ‘conditions’
[17:03:15.336]   - Field: ‘expr’
[17:03:15.336]   - Field: ‘uuid’
[17:03:15.336]   - Field: ‘seed’
[17:03:15.336]   - Field: ‘version’
[17:03:15.336]   - Field: ‘result’
[17:03:15.336]   - Field: ‘asynchronous’
[17:03:15.337]   - Field: ‘calls’
[17:03:15.337]   - Field: ‘globals’
[17:03:15.337]   - Field: ‘stdout’
[17:03:15.337]   - Field: ‘earlySignal’
[17:03:15.337]   - Field: ‘lazy’
[17:03:15.337]   - Field: ‘state’
[17:03:15.337] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.337] - Launch lazy future ...
[17:03:15.337] Packages needed by the future expression (n = 1): ‘future’
[17:03:15.338] Packages needed by future strategies (n = 1): ‘future’
[17:03:15.338] {
[17:03:15.338]     {
[17:03:15.338]         {
[17:03:15.338]             ...future.startTime <- base::Sys.time()
[17:03:15.338]             {
[17:03:15.338]                 {
[17:03:15.338]                   {
[17:03:15.338]                     {
[17:03:15.338]                       base::local({
[17:03:15.338]                         has_future <- base::requireNamespace("future", 
[17:03:15.338]                           quietly = TRUE)
[17:03:15.338]                         if (has_future) {
[17:03:15.338]                           ns <- base::getNamespace("future")
[17:03:15.338]                           version <- ns[[".package"]][["version"]]
[17:03:15.338]                           if (is.null(version)) 
[17:03:15.338]                             version <- utils::packageVersion("future")
[17:03:15.338]                         }
[17:03:15.338]                         else {
[17:03:15.338]                           version <- NULL
[17:03:15.338]                         }
[17:03:15.338]                         if (!has_future || version < "1.8.0") {
[17:03:15.338]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.338]                             "", base::R.version$version.string), 
[17:03:15.338]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.338]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.338]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.338]                               "release", "version")], collapse = " "), 
[17:03:15.338]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.338]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.338]                             info)
[17:03:15.338]                           info <- base::paste(info, collapse = "; ")
[17:03:15.338]                           if (!has_future) {
[17:03:15.338]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.338]                               info)
[17:03:15.338]                           }
[17:03:15.338]                           else {
[17:03:15.338]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.338]                               info, version)
[17:03:15.338]                           }
[17:03:15.338]                           base::stop(msg)
[17:03:15.338]                         }
[17:03:15.338]                       })
[17:03:15.338]                     }
[17:03:15.338]                     base::local({
[17:03:15.338]                       for (pkg in "future") {
[17:03:15.338]                         base::loadNamespace(pkg)
[17:03:15.338]                         base::library(pkg, character.only = TRUE)
[17:03:15.338]                       }
[17:03:15.338]                     })
[17:03:15.338]                   }
[17:03:15.338]                   ...future.strategy.old <- future::plan("list")
[17:03:15.338]                   options(future.plan = NULL)
[17:03:15.338]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.338]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:15.338]                   {
[17:03:15.338]                     future <- SequentialFuture(..., envir = envir)
[17:03:15.338]                     if (!future$lazy) 
[17:03:15.338]                       future <- run(future)
[17:03:15.338]                     invisible(future)
[17:03:15.338]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:15.338]                 }
[17:03:15.338]                 ...future.workdir <- getwd()
[17:03:15.338]             }
[17:03:15.338]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.338]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.338]         }
[17:03:15.338]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.338]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.338]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.338]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.338]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.338]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.338]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.338]             base::names(...future.oldOptions))
[17:03:15.338]     }
[17:03:15.338]     if (FALSE) {
[17:03:15.338]     }
[17:03:15.338]     else {
[17:03:15.338]         if (TRUE) {
[17:03:15.338]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.338]                 open = "w")
[17:03:15.338]         }
[17:03:15.338]         else {
[17:03:15.338]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.338]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.338]         }
[17:03:15.338]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.338]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.338]             base::sink(type = "output", split = FALSE)
[17:03:15.338]             base::close(...future.stdout)
[17:03:15.338]         }, add = TRUE)
[17:03:15.338]     }
[17:03:15.338]     ...future.frame <- base::sys.nframe()
[17:03:15.338]     ...future.conditions <- base::list()
[17:03:15.338]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.338]     if (FALSE) {
[17:03:15.338]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.338]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.338]     }
[17:03:15.338]     ...future.result <- base::tryCatch({
[17:03:15.338]         base::withCallingHandlers({
[17:03:15.338]             ...future.value <- base::withVisible(base::local({
[17:03:15.338]                 value(future(subset(data, a == 2)))
[17:03:15.338]             }))
[17:03:15.338]             future::FutureResult(value = ...future.value$value, 
[17:03:15.338]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.338]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.338]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.338]                     ...future.globalenv.names))
[17:03:15.338]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.338]         }, condition = base::local({
[17:03:15.338]             c <- base::c
[17:03:15.338]             inherits <- base::inherits
[17:03:15.338]             invokeRestart <- base::invokeRestart
[17:03:15.338]             length <- base::length
[17:03:15.338]             list <- base::list
[17:03:15.338]             seq.int <- base::seq.int
[17:03:15.338]             signalCondition <- base::signalCondition
[17:03:15.338]             sys.calls <- base::sys.calls
[17:03:15.338]             `[[` <- base::`[[`
[17:03:15.338]             `+` <- base::`+`
[17:03:15.338]             `<<-` <- base::`<<-`
[17:03:15.338]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.338]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.338]                   3L)]
[17:03:15.338]             }
[17:03:15.338]             function(cond) {
[17:03:15.338]                 is_error <- inherits(cond, "error")
[17:03:15.338]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.338]                   NULL)
[17:03:15.338]                 if (is_error) {
[17:03:15.338]                   sessionInformation <- function() {
[17:03:15.338]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.338]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.338]                       search = base::search(), system = base::Sys.info())
[17:03:15.338]                   }
[17:03:15.338]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.338]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.338]                     cond$call), session = sessionInformation(), 
[17:03:15.338]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.338]                   signalCondition(cond)
[17:03:15.338]                 }
[17:03:15.338]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.338]                 "immediateCondition"))) {
[17:03:15.338]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.338]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.338]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.338]                   if (TRUE && !signal) {
[17:03:15.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.338]                     {
[17:03:15.338]                       inherits <- base::inherits
[17:03:15.338]                       invokeRestart <- base::invokeRestart
[17:03:15.338]                       is.null <- base::is.null
[17:03:15.338]                       muffled <- FALSE
[17:03:15.338]                       if (inherits(cond, "message")) {
[17:03:15.338]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.338]                         if (muffled) 
[17:03:15.338]                           invokeRestart("muffleMessage")
[17:03:15.338]                       }
[17:03:15.338]                       else if (inherits(cond, "warning")) {
[17:03:15.338]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.338]                         if (muffled) 
[17:03:15.338]                           invokeRestart("muffleWarning")
[17:03:15.338]                       }
[17:03:15.338]                       else if (inherits(cond, "condition")) {
[17:03:15.338]                         if (!is.null(pattern)) {
[17:03:15.338]                           computeRestarts <- base::computeRestarts
[17:03:15.338]                           grepl <- base::grepl
[17:03:15.338]                           restarts <- computeRestarts(cond)
[17:03:15.338]                           for (restart in restarts) {
[17:03:15.338]                             name <- restart$name
[17:03:15.338]                             if (is.null(name)) 
[17:03:15.338]                               next
[17:03:15.338]                             if (!grepl(pattern, name)) 
[17:03:15.338]                               next
[17:03:15.338]                             invokeRestart(restart)
[17:03:15.338]                             muffled <- TRUE
[17:03:15.338]                             break
[17:03:15.338]                           }
[17:03:15.338]                         }
[17:03:15.338]                       }
[17:03:15.338]                       invisible(muffled)
[17:03:15.338]                     }
[17:03:15.338]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.338]                   }
[17:03:15.338]                 }
[17:03:15.338]                 else {
[17:03:15.338]                   if (TRUE) {
[17:03:15.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.338]                     {
[17:03:15.338]                       inherits <- base::inherits
[17:03:15.338]                       invokeRestart <- base::invokeRestart
[17:03:15.338]                       is.null <- base::is.null
[17:03:15.338]                       muffled <- FALSE
[17:03:15.338]                       if (inherits(cond, "message")) {
[17:03:15.338]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.338]                         if (muffled) 
[17:03:15.338]                           invokeRestart("muffleMessage")
[17:03:15.338]                       }
[17:03:15.338]                       else if (inherits(cond, "warning")) {
[17:03:15.338]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.338]                         if (muffled) 
[17:03:15.338]                           invokeRestart("muffleWarning")
[17:03:15.338]                       }
[17:03:15.338]                       else if (inherits(cond, "condition")) {
[17:03:15.338]                         if (!is.null(pattern)) {
[17:03:15.338]                           computeRestarts <- base::computeRestarts
[17:03:15.338]                           grepl <- base::grepl
[17:03:15.338]                           restarts <- computeRestarts(cond)
[17:03:15.338]                           for (restart in restarts) {
[17:03:15.338]                             name <- restart$name
[17:03:15.338]                             if (is.null(name)) 
[17:03:15.338]                               next
[17:03:15.338]                             if (!grepl(pattern, name)) 
[17:03:15.338]                               next
[17:03:15.338]                             invokeRestart(restart)
[17:03:15.338]                             muffled <- TRUE
[17:03:15.338]                             break
[17:03:15.338]                           }
[17:03:15.338]                         }
[17:03:15.338]                       }
[17:03:15.338]                       invisible(muffled)
[17:03:15.338]                     }
[17:03:15.338]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.338]                   }
[17:03:15.338]                 }
[17:03:15.338]             }
[17:03:15.338]         }))
[17:03:15.338]     }, error = function(ex) {
[17:03:15.338]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.338]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.338]                 ...future.rng), started = ...future.startTime, 
[17:03:15.338]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.338]             version = "1.8"), class = "FutureResult")
[17:03:15.338]     }, finally = {
[17:03:15.338]         if (!identical(...future.workdir, getwd())) 
[17:03:15.338]             setwd(...future.workdir)
[17:03:15.338]         {
[17:03:15.338]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.338]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.338]             }
[17:03:15.338]             base::options(...future.oldOptions)
[17:03:15.338]             if (.Platform$OS.type == "windows") {
[17:03:15.338]                 old_names <- names(...future.oldEnvVars)
[17:03:15.338]                 envs <- base::Sys.getenv()
[17:03:15.338]                 names <- names(envs)
[17:03:15.338]                 common <- intersect(names, old_names)
[17:03:15.338]                 added <- setdiff(names, old_names)
[17:03:15.338]                 removed <- setdiff(old_names, names)
[17:03:15.338]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.338]                   envs[common]]
[17:03:15.338]                 NAMES <- toupper(changed)
[17:03:15.338]                 args <- list()
[17:03:15.338]                 for (kk in seq_along(NAMES)) {
[17:03:15.338]                   name <- changed[[kk]]
[17:03:15.338]                   NAME <- NAMES[[kk]]
[17:03:15.338]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.338]                     next
[17:03:15.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.338]                 }
[17:03:15.338]                 NAMES <- toupper(added)
[17:03:15.338]                 for (kk in seq_along(NAMES)) {
[17:03:15.338]                   name <- added[[kk]]
[17:03:15.338]                   NAME <- NAMES[[kk]]
[17:03:15.338]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.338]                     next
[17:03:15.338]                   args[[name]] <- ""
[17:03:15.338]                 }
[17:03:15.338]                 NAMES <- toupper(removed)
[17:03:15.338]                 for (kk in seq_along(NAMES)) {
[17:03:15.338]                   name <- removed[[kk]]
[17:03:15.338]                   NAME <- NAMES[[kk]]
[17:03:15.338]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.338]                     next
[17:03:15.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.338]                 }
[17:03:15.338]                 if (length(args) > 0) 
[17:03:15.338]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.338]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.338]             }
[17:03:15.338]             else {
[17:03:15.338]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.338]             }
[17:03:15.338]             {
[17:03:15.338]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.338]                   0L) {
[17:03:15.338]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.338]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.338]                   base::options(opts)
[17:03:15.338]                 }
[17:03:15.338]                 {
[17:03:15.338]                   {
[17:03:15.338]                     NULL
[17:03:15.338]                     RNGkind("Mersenne-Twister")
[17:03:15.338]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.338]                       inherits = FALSE)
[17:03:15.338]                   }
[17:03:15.338]                   options(future.plan = NULL)
[17:03:15.338]                   if (is.na(NA_character_)) 
[17:03:15.338]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.338]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.338]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.338]                     .init = FALSE)
[17:03:15.338]                 }
[17:03:15.338]             }
[17:03:15.338]         }
[17:03:15.338]     })
[17:03:15.338]     if (TRUE) {
[17:03:15.338]         base::sink(type = "output", split = FALSE)
[17:03:15.338]         if (TRUE) {
[17:03:15.338]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.338]         }
[17:03:15.338]         else {
[17:03:15.338]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.338]         }
[17:03:15.338]         base::close(...future.stdout)
[17:03:15.338]         ...future.stdout <- NULL
[17:03:15.338]     }
[17:03:15.338]     ...future.result$conditions <- ...future.conditions
[17:03:15.338]     ...future.result$finished <- base::Sys.time()
[17:03:15.338]     ...future.result
[17:03:15.338] }
[17:03:15.340] assign_globals() ...
[17:03:15.340] List of 1
[17:03:15.340]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:15.340]   ..$ a: int [1:3] 1 2 3
[17:03:15.340]   ..$ b: int [1:3] 3 2 1
[17:03:15.340]  - attr(*, "where")=List of 1
[17:03:15.340]   ..$ data:<environment: R_EmptyEnv> 
[17:03:15.340]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.340]  - attr(*, "resolved")= logi FALSE
[17:03:15.340]  - attr(*, "total_size")= num 128
[17:03:15.340]  - attr(*, "already-done")= logi TRUE
[17:03:15.344] - copied ‘data’ to environment
[17:03:15.344] assign_globals() ... done
[17:03:15.345] plan(): Setting new future strategy stack:
[17:03:15.345] List of future strategies:
[17:03:15.345] 1. sequential:
[17:03:15.345]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.345]    - tweaked: FALSE
[17:03:15.345]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.345] plan(): nbrOfWorkers() = 1
[17:03:15.373] plan(): Setting new future strategy stack:
[17:03:15.374] List of future strategies:
[17:03:15.374] 1. sequential:
[17:03:15.374]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.374]    - tweaked: FALSE
[17:03:15.374]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.374] 2. sequential:
[17:03:15.374]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.374]    - tweaked: FALSE
[17:03:15.374]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.374] plan(): nbrOfWorkers() = 1
[17:03:15.374] SequentialFuture started (and completed)
[17:03:15.374] signalConditions() ...
[17:03:15.375]  - include = ‘immediateCondition’
[17:03:15.375]  - exclude = 
[17:03:15.375]  - resignal = FALSE
[17:03:15.375]  - Number of conditions: 52
[17:03:15.375] signalConditions() ... done
[17:03:15.375] - Launch lazy future ... done
[17:03:15.375] run() for ‘SequentialFuture’ ... done
[17:03:15.375] signalConditions() ...
[17:03:15.375]  - include = ‘immediateCondition’
[17:03:15.375]  - exclude = 
[17:03:15.376]  - resignal = FALSE
[17:03:15.376]  - Number of conditions: 52
[17:03:15.376] signalConditions() ... done
[17:03:15.376] Future state: ‘finished’
[17:03:15.376] signalConditions() ...
[17:03:15.376]  - include = ‘condition’
[17:03:15.376]  - exclude = ‘immediateCondition’
[17:03:15.376]  - resignal = TRUE
[17:03:15.376]  - Number of conditions: 52
[17:03:15.376]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.346] getGlobalsAndPackages() ...
[17:03:15.376]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.346] Searching for globals...
[17:03:15.377]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.359] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:15.377]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.359] Searching for globals ... DONE
[17:03:15.377]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.360] Resolving globals: FALSE
[17:03:15.377]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.360] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:15.377]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.360] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:15.377]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.360] - globals: [1] ‘data’
[17:03:15.377]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.361] 
[17:03:15.377]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.361] getGlobalsAndPackages() ... DONE
[17:03:15.378]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.361] run() for ‘Future’ ...
[17:03:15.378]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.361] - state: ‘created’
[17:03:15.378]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.361] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.378]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.361] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.378]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.378]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘label’
[17:03:15.378]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘local’
[17:03:15.378]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘owner’
[17:03:15.379]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘envir’
[17:03:15.379]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘packages’
[17:03:15.379]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘gc’
[17:03:15.379]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘conditions’
[17:03:15.379]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘expr’
[17:03:15.379]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.362]   - Field: ‘uuid’
[17:03:15.379]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘seed’
[17:03:15.380]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘version’
[17:03:15.380]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘result’
[17:03:15.380]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘asynchronous’
[17:03:15.380]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘calls’
[17:03:15.380]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘globals’
[17:03:15.380]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘stdout’
[17:03:15.380]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘earlySignal’
[17:03:15.380]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘lazy’
[17:03:15.381]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.363]   - Field: ‘state’
[17:03:15.381]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.364] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.381]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.365] - Launch lazy future ...
[17:03:15.381]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.365] Packages needed by the future expression (n = 0): <none>
[17:03:15.381]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.365] Packages needed by future strategies (n = 0): <none>
[17:03:15.381]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.366] {
[17:03:15.366]     {
[17:03:15.366]         {
[17:03:15.366]             ...future.startTime <- base::Sys.time()
[17:03:15.366]             {
[17:03:15.366]                 {
[17:03:15.366]                   {
[17:03:15.366]                     base::local({
[17:03:15.366]                       has_future <- base::requireNamespace("future", 
[17:03:15.366]                         quietly = TRUE)
[17:03:15.366]                       if (has_future) {
[17:03:15.366]                         ns <- base::getNamespace("future")
[17:03:15.366]                         version <- ns[[".package"]][["version"]]
[17:03:15.366]                         if (is.null(version)) 
[17:03:15.366]                           version <- utils::packageVersion("future")
[17:03:15.366]                       }
[17:03:15.366]                       else {
[17:03:15.366]                         version <- NULL
[17:03:15.366]                       }
[17:03:15.366]                       if (!has_future || version < "1.8.0") {
[17:03:15.366]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.366]                           "", base::R.version$version.string), 
[17:03:15.366]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:15.366]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.366]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.366]                             "release", "version")], collapse = " "), 
[17:03:15.366]                           hostname = base::Sys.info()[["nodename"]])
[17:03:15.366]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.366]                           info)
[17:03:15.366]                         info <- base::paste(info, collapse = "; ")
[17:03:15.366]                         if (!has_future) {
[17:03:15.366]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.366]                             info)
[17:03:15.366]                         }
[17:03:15.366]                         else {
[17:03:15.366]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.366]                             info, version)
[17:03:15.366]                         }
[17:03:15.366]                         base::stop(msg)
[17:03:15.366]                       }
[17:03:15.366]                     })
[17:03:15.366]                   }
[17:03:15.366]                   ...future.strategy.old <- future::plan("list")
[17:03:15.366]                   options(future.plan = NULL)
[17:03:15.366]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.366]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:15.366]                 }
[17:03:15.366]                 ...future.workdir <- getwd()
[17:03:15.366]             }
[17:03:15.366]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.366]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.366]         }
[17:03:15.366]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.366]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.366]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.366]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.366]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.366]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.366]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.366]             base::names(...future.oldOptions))
[17:03:15.366]     }
[17:03:15.366]     if (FALSE) {
[17:03:15.366]     }
[17:03:15.366]     else {
[17:03:15.366]         if (TRUE) {
[17:03:15.366]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.366]                 open = "w")
[17:03:15.366]         }
[17:03:15.366]         else {
[17:03:15.366]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.366]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.366]         }
[17:03:15.366]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.366]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.366]             base::sink(type = "output", split = FALSE)
[17:03:15.366]             base::close(...future.stdout)
[17:03:15.366]         }, add = TRUE)
[17:03:15.366]     }
[17:03:15.366]     ...future.frame <- base::sys.nframe()
[17:03:15.366]     ...future.conditions <- base::list()
[17:03:15.366]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.366]     if (FALSE) {
[17:03:15.366]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.366]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.366]     }
[17:03:15.366]     ...future.result <- base::tryCatch({
[17:03:15.366]         base::withCallingHandlers({
[17:03:15.366]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:03:15.366]                 a == 2)))
[17:03:15.366]             future::FutureResult(value = ...future.value$value, 
[17:03:15.366]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.366]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.366]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.366]                     ...future.globalenv.names))
[17:03:15.366]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.366]         }, condition = base::local({
[17:03:15.366]             c <- base::c
[17:03:15.366]             inherits <- base::inherits
[17:03:15.366]             invokeRestart <- base::invokeRestart
[17:03:15.366]             length <- base::length
[17:03:15.366]             list <- base::list
[17:03:15.366]             seq.int <- base::seq.int
[17:03:15.366]             signalCondition <- base::signalCondition
[17:03:15.366]             sys.calls <- base::sys.calls
[17:03:15.366]             `[[` <- base::`[[`
[17:03:15.366]             `+` <- base::`+`
[17:03:15.366]             `<<-` <- base::`<<-`
[17:03:15.366]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.366]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.366]                   3L)]
[17:03:15.366]             }
[17:03:15.366]             function(cond) {
[17:03:15.366]                 is_error <- inherits(cond, "error")
[17:03:15.366]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.366]                   NULL)
[17:03:15.366]                 if (is_error) {
[17:03:15.366]                   sessionInformation <- function() {
[17:03:15.366]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.366]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.366]                       search = base::search(), system = base::Sys.info())
[17:03:15.366]                   }
[17:03:15.366]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.366]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.366]                     cond$call), session = sessionInformation(), 
[17:03:15.366]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.366]                   signalCondition(cond)
[17:03:15.366]                 }
[17:03:15.366]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.366]                 "immediateCondition"))) {
[17:03:15.366]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.366]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.366]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.366]                   if (TRUE && !signal) {
[17:03:15.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.366]                     {
[17:03:15.366]                       inherits <- base::inherits
[17:03:15.366]                       invokeRestart <- base::invokeRestart
[17:03:15.366]                       is.null <- base::is.null
[17:03:15.366]                       muffled <- FALSE
[17:03:15.366]                       if (inherits(cond, "message")) {
[17:03:15.366]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.366]                         if (muffled) 
[17:03:15.366]                           invokeRestart("muffleMessage")
[17:03:15.366]                       }
[17:03:15.366]                       else if (inherits(cond, "warning")) {
[17:03:15.366]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.366]                         if (muffled) 
[17:03:15.366]                           invokeRestart("muffleWarning")
[17:03:15.366]                       }
[17:03:15.366]                       else if (inherits(cond, "condition")) {
[17:03:15.366]                         if (!is.null(pattern)) {
[17:03:15.366]                           computeRestarts <- base::computeRestarts
[17:03:15.366]                           grepl <- base::grepl
[17:03:15.366]                           restarts <- computeRestarts(cond)
[17:03:15.366]                           for (restart in restarts) {
[17:03:15.366]                             name <- restart$name
[17:03:15.366]                             if (is.null(name)) 
[17:03:15.366]                               next
[17:03:15.366]                             if (!grepl(pattern, name)) 
[17:03:15.366]                               next
[17:03:15.366]                             invokeRestart(restart)
[17:03:15.366]                             muffled <- TRUE
[17:03:15.366]                             break
[17:03:15.366]                           }
[17:03:15.366]                         }
[17:03:15.366]                       }
[17:03:15.366]                       invisible(muffled)
[17:03:15.366]                     }
[17:03:15.366]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.366]                   }
[17:03:15.366]                 }
[17:03:15.366]                 else {
[17:03:15.366]                   if (TRUE) {
[17:03:15.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.366]                     {
[17:03:15.366]                       inherits <- base::inherits
[17:03:15.366]                       invokeRestart <- base::invokeRestart
[17:03:15.366]                       is.null <- base::is.null
[17:03:15.366]                       muffled <- FALSE
[17:03:15.366]                       if (inherits(cond, "message")) {
[17:03:15.366]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.366]                         if (muffled) 
[17:03:15.366]                           invokeRestart("muffleMessage")
[17:03:15.366]                       }
[17:03:15.366]                       else if (inherits(cond, "warning")) {
[17:03:15.366]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.366]                         if (muffled) 
[17:03:15.366]                           invokeRestart("muffleWarning")
[17:03:15.366]                       }
[17:03:15.366]                       else if (inherits(cond, "condition")) {
[17:03:15.366]                         if (!is.null(pattern)) {
[17:03:15.366]                           computeRestarts <- base::computeRestarts
[17:03:15.366]                           grepl <- base::grepl
[17:03:15.366]                           restarts <- computeRestarts(cond)
[17:03:15.366]                           for (restart in restarts) {
[17:03:15.366]                             name <- restart$name
[17:03:15.366]                             if (is.null(name)) 
[17:03:15.366]                               next
[17:03:15.366]                             if (!grepl(pattern, name)) 
[17:03:15.366]                               next
[17:03:15.366]                             invokeRestart(restart)
[17:03:15.366]                             muffled <- TRUE
[17:03:15.366]                             break
[17:03:15.366]                           }
[17:03:15.366]                         }
[17:03:15.366]                       }
[17:03:15.366]                       invisible(muffled)
[17:03:15.366]                     }
[17:03:15.366]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.366]                   }
[17:03:15.366]                 }
[17:03:15.366]             }
[17:03:15.366]         }))
[17:03:15.366]     }, error = function(ex) {
[17:03:15.366]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.366]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.366]                 ...future.rng), started = ...future.startTime, 
[17:03:15.366]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.366]             version = "1.8"), class = "FutureResult")
[17:03:15.366]     }, finally = {
[17:03:15.366]         if (!identical(...future.workdir, getwd())) 
[17:03:15.366]             setwd(...future.workdir)
[17:03:15.366]         {
[17:03:15.366]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.366]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.366]             }
[17:03:15.366]             base::options(...future.oldOptions)
[17:03:15.366]             if (.Platform$OS.type == "windows") {
[17:03:15.366]                 old_names <- names(...future.oldEnvVars)
[17:03:15.366]                 envs <- base::Sys.getenv()
[17:03:15.366]                 names <- names(envs)
[17:03:15.366]                 common <- intersect(names, old_names)
[17:03:15.366]                 added <- setdiff(names, old_names)
[17:03:15.366]                 removed <- setdiff(old_names, names)
[17:03:15.366]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.366]                   envs[common]]
[17:03:15.366]                 NAMES <- toupper(changed)
[17:03:15.366]                 args <- list()
[17:03:15.366]                 for (kk in seq_along(NAMES)) {
[17:03:15.366]                   name <- changed[[kk]]
[17:03:15.366]                   NAME <- NAMES[[kk]]
[17:03:15.366]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.366]                     next
[17:03:15.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.366]                 }
[17:03:15.366]                 NAMES <- toupper(added)
[17:03:15.366]                 for (kk in seq_along(NAMES)) {
[17:03:15.366]                   name <- added[[kk]]
[17:03:15.366]                   NAME <- NAMES[[kk]]
[17:03:15.366]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.366]                     next
[17:03:15.366]                   args[[name]] <- ""
[17:03:15.366]                 }
[17:03:15.366]                 NAMES <- toupper(removed)
[17:03:15.366]                 for (kk in seq_along(NAMES)) {
[17:03:15.366]                   name <- removed[[kk]]
[17:03:15.366]                   NAME <- NAMES[[kk]]
[17:03:15.366]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.366]                     next
[17:03:15.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.366]                 }
[17:03:15.366]                 if (length(args) > 0) 
[17:03:15.366]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.366]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.366]             }
[17:03:15.366]             else {
[17:03:15.366]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.366]             }
[17:03:15.366]             {
[17:03:15.366]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.366]                   0L) {
[17:03:15.366]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.366]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.366]                   base::options(opts)
[17:03:15.366]                 }
[17:03:15.366]                 {
[17:03:15.366]                   {
[17:03:15.366]                     NULL
[17:03:15.366]                     RNGkind("Mersenne-Twister")
[17:03:15.366]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.366]                       inherits = FALSE)
[17:03:15.366]                   }
[17:03:15.366]                   options(future.plan = NULL)
[17:03:15.366]                   if (is.na(NA_character_)) 
[17:03:15.366]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.366]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.366]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.366]                     .init = FALSE)
[17:03:15.366]                 }
[17:03:15.366]             }
[17:03:15.366]         }
[17:03:15.366]     })
[17:03:15.366]     if (TRUE) {
[17:03:15.366]         base::sink(type = "output", split = FALSE)
[17:03:15.366]         if (TRUE) {
[17:03:15.366]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.366]         }
[17:03:15.366]         else {
[17:03:15.366]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.366]         }
[17:03:15.366]         base::close(...future.stdout)
[17:03:15.366]         ...future.stdout <- NULL
[17:03:15.366]     }
[17:03:15.366]     ...future.result$conditions <- ...future.conditions
[17:03:15.366]     ...future.result$finished <- base::Sys.time()
[17:03:15.366]     ...future.result
[17:03:15.366] }
[17:03:15.381]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.367] assign_globals() ...
[17:03:15.381]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.367] List of 1
[17:03:15.367]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:15.367]   ..$ a: int [1:3] 1 2 3
[17:03:15.367]   ..$ b: int [1:3] 3 2 1
[17:03:15.367]  - attr(*, "where")=List of 1
[17:03:15.367]   ..$ data:<environment: R_EmptyEnv> 
[17:03:15.367]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.367]  - attr(*, "resolved")= logi FALSE
[17:03:15.367]  - attr(*, "total_size")= num 128
[17:03:15.367]  - attr(*, "already-done")= logi TRUE
[17:03:15.382]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.370] - copied ‘data’ to environment
[17:03:15.382]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.370] assign_globals() ... done
[17:03:15.382]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.371] plan(): Setting new future strategy stack:
[17:03:15.382]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.371] List of future strategies:
[17:03:15.371] 1. sequential:
[17:03:15.371]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.371]    - tweaked: FALSE
[17:03:15.371]    - call: NULL
[17:03:15.382]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.371] plan(): nbrOfWorkers() = 1
[17:03:15.382]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.372] plan(): Setting new future strategy stack:
[17:03:15.382]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.372] List of future strategies:
[17:03:15.372] 1. sequential:
[17:03:15.372]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.372]    - tweaked: FALSE
[17:03:15.372]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.382]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.373] plan(): nbrOfWorkers() = 1
[17:03:15.383]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.373] SequentialFuture started (and completed)
[17:03:15.383]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.373] - Launch lazy future ... done
[17:03:15.383]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.373] run() for ‘SequentialFuture’ ... done
[17:03:15.383] signalConditions() ... done
- plan(list('sequential', 'sequential')) ... DONE
- plan(list('sequential', 'multicore')) ...
[17:03:15.383] plan(): Setting new future strategy stack:
[17:03:15.383] List of future strategies:
[17:03:15.383] 1. sequential:
[17:03:15.383]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.383]    - tweaked: FALSE
[17:03:15.383]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.383] 2. multicore:
[17:03:15.383]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:15.383]    - tweaked: FALSE
[17:03:15.383]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.384] plan(): nbrOfWorkers() = 1
[17:03:15.384] getGlobalsAndPackages() ...
[17:03:15.384] Searching for globals...
[17:03:15.401] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:15.401] Searching for globals ... DONE
[17:03:15.401] Resolving globals: FALSE
[17:03:15.402] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[17:03:15.402] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:15.402] - globals: [2] ‘nested’, ‘strategy2’
[17:03:15.402] - packages: [1] ‘future’
[17:03:15.403] getGlobalsAndPackages() ... DONE
[17:03:15.403] run() for ‘Future’ ...
[17:03:15.403] - state: ‘created’
[17:03:15.403] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.403] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.403] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.404]   - Field: ‘label’
[17:03:15.404]   - Field: ‘local’
[17:03:15.404]   - Field: ‘owner’
[17:03:15.404]   - Field: ‘envir’
[17:03:15.404]   - Field: ‘packages’
[17:03:15.404]   - Field: ‘gc’
[17:03:15.404]   - Field: ‘conditions’
[17:03:15.404]   - Field: ‘expr’
[17:03:15.404]   - Field: ‘uuid’
[17:03:15.404]   - Field: ‘seed’
[17:03:15.404]   - Field: ‘version’
[17:03:15.405]   - Field: ‘result’
[17:03:15.405]   - Field: ‘asynchronous’
[17:03:15.405]   - Field: ‘calls’
[17:03:15.405]   - Field: ‘globals’
[17:03:15.405]   - Field: ‘stdout’
[17:03:15.405]   - Field: ‘earlySignal’
[17:03:15.405]   - Field: ‘lazy’
[17:03:15.405]   - Field: ‘state’
[17:03:15.405] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.405] - Launch lazy future ...
[17:03:15.406] Packages needed by the future expression (n = 1): ‘future’
[17:03:15.406] Packages needed by future strategies (n = 1): ‘future’
[17:03:15.407] {
[17:03:15.407]     {
[17:03:15.407]         {
[17:03:15.407]             ...future.startTime <- base::Sys.time()
[17:03:15.407]             {
[17:03:15.407]                 {
[17:03:15.407]                   {
[17:03:15.407]                     {
[17:03:15.407]                       base::local({
[17:03:15.407]                         has_future <- base::requireNamespace("future", 
[17:03:15.407]                           quietly = TRUE)
[17:03:15.407]                         if (has_future) {
[17:03:15.407]                           ns <- base::getNamespace("future")
[17:03:15.407]                           version <- ns[[".package"]][["version"]]
[17:03:15.407]                           if (is.null(version)) 
[17:03:15.407]                             version <- utils::packageVersion("future")
[17:03:15.407]                         }
[17:03:15.407]                         else {
[17:03:15.407]                           version <- NULL
[17:03:15.407]                         }
[17:03:15.407]                         if (!has_future || version < "1.8.0") {
[17:03:15.407]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.407]                             "", base::R.version$version.string), 
[17:03:15.407]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.407]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.407]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.407]                               "release", "version")], collapse = " "), 
[17:03:15.407]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.407]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.407]                             info)
[17:03:15.407]                           info <- base::paste(info, collapse = "; ")
[17:03:15.407]                           if (!has_future) {
[17:03:15.407]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.407]                               info)
[17:03:15.407]                           }
[17:03:15.407]                           else {
[17:03:15.407]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.407]                               info, version)
[17:03:15.407]                           }
[17:03:15.407]                           base::stop(msg)
[17:03:15.407]                         }
[17:03:15.407]                       })
[17:03:15.407]                     }
[17:03:15.407]                     base::local({
[17:03:15.407]                       for (pkg in "future") {
[17:03:15.407]                         base::loadNamespace(pkg)
[17:03:15.407]                         base::library(pkg, character.only = TRUE)
[17:03:15.407]                       }
[17:03:15.407]                     })
[17:03:15.407]                   }
[17:03:15.407]                   ...future.strategy.old <- future::plan("list")
[17:03:15.407]                   options(future.plan = NULL)
[17:03:15.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.407]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:15.407]                     envir = parent.frame()) 
[17:03:15.407]                   {
[17:03:15.407]                     default_workers <- missing(workers)
[17:03:15.407]                     if (is.function(workers)) 
[17:03:15.407]                       workers <- workers()
[17:03:15.407]                     workers <- structure(as.integer(workers), 
[17:03:15.407]                       class = class(workers))
[17:03:15.407]                     stop_if_not(is.finite(workers), workers >= 
[17:03:15.407]                       1L)
[17:03:15.407]                     if ((workers == 1L && !inherits(workers, 
[17:03:15.407]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:15.407]                       if (default_workers) 
[17:03:15.407]                         supportsMulticore(warn = TRUE)
[17:03:15.407]                       return(sequential(..., envir = envir))
[17:03:15.407]                     }
[17:03:15.407]                     oopts <- options(mc.cores = workers)
[17:03:15.407]                     on.exit(options(oopts))
[17:03:15.407]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:15.407]                       envir = envir)
[17:03:15.407]                     if (!future$lazy) 
[17:03:15.407]                       future <- run(future)
[17:03:15.407]                     invisible(future)
[17:03:15.407]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:15.407]                 }
[17:03:15.407]                 ...future.workdir <- getwd()
[17:03:15.407]             }
[17:03:15.407]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.407]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.407]         }
[17:03:15.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.407]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.407]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.407]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.407]             base::names(...future.oldOptions))
[17:03:15.407]     }
[17:03:15.407]     if (FALSE) {
[17:03:15.407]     }
[17:03:15.407]     else {
[17:03:15.407]         if (TRUE) {
[17:03:15.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.407]                 open = "w")
[17:03:15.407]         }
[17:03:15.407]         else {
[17:03:15.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.407]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.407]         }
[17:03:15.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.407]             base::sink(type = "output", split = FALSE)
[17:03:15.407]             base::close(...future.stdout)
[17:03:15.407]         }, add = TRUE)
[17:03:15.407]     }
[17:03:15.407]     ...future.frame <- base::sys.nframe()
[17:03:15.407]     ...future.conditions <- base::list()
[17:03:15.407]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.407]     if (FALSE) {
[17:03:15.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.407]     }
[17:03:15.407]     ...future.result <- base::tryCatch({
[17:03:15.407]         base::withCallingHandlers({
[17:03:15.407]             ...future.value <- base::withVisible(base::local({
[17:03:15.407]                 a <- 1L
[17:03:15.407]                 plan_a <- unclass(future::plan("list"))
[17:03:15.407]                 nested_a <- nested[-1]
[17:03:15.407]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:15.407]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.407]                   strategy2))
[17:03:15.407]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:15.407]                   "init") <- NULL
[17:03:15.407]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:15.407]                   "init") <- NULL
[17:03:15.407]                 stopifnot(all.equal(plan_a, nested_a))
[17:03:15.407]                 y %<-% {
[17:03:15.407]                   b <- 2L
[17:03:15.407]                   plan_b <- future::plan("list")
[17:03:15.407]                   nested_b <- nested_a[-1]
[17:03:15.407]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:15.407]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.407]                     "sequential"))
[17:03:15.407]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:15.407]                     b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:15.407]                 }
[17:03:15.407]                 y
[17:03:15.407]             }))
[17:03:15.407]             future::FutureResult(value = ...future.value$value, 
[17:03:15.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.407]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.407]                     ...future.globalenv.names))
[17:03:15.407]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.407]         }, condition = base::local({
[17:03:15.407]             c <- base::c
[17:03:15.407]             inherits <- base::inherits
[17:03:15.407]             invokeRestart <- base::invokeRestart
[17:03:15.407]             length <- base::length
[17:03:15.407]             list <- base::list
[17:03:15.407]             seq.int <- base::seq.int
[17:03:15.407]             signalCondition <- base::signalCondition
[17:03:15.407]             sys.calls <- base::sys.calls
[17:03:15.407]             `[[` <- base::`[[`
[17:03:15.407]             `+` <- base::`+`
[17:03:15.407]             `<<-` <- base::`<<-`
[17:03:15.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.407]                   3L)]
[17:03:15.407]             }
[17:03:15.407]             function(cond) {
[17:03:15.407]                 is_error <- inherits(cond, "error")
[17:03:15.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.407]                   NULL)
[17:03:15.407]                 if (is_error) {
[17:03:15.407]                   sessionInformation <- function() {
[17:03:15.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.407]                       search = base::search(), system = base::Sys.info())
[17:03:15.407]                   }
[17:03:15.407]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.407]                     cond$call), session = sessionInformation(), 
[17:03:15.407]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.407]                   signalCondition(cond)
[17:03:15.407]                 }
[17:03:15.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.407]                 "immediateCondition"))) {
[17:03:15.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.407]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.407]                   if (TRUE && !signal) {
[17:03:15.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.407]                     {
[17:03:15.407]                       inherits <- base::inherits
[17:03:15.407]                       invokeRestart <- base::invokeRestart
[17:03:15.407]                       is.null <- base::is.null
[17:03:15.407]                       muffled <- FALSE
[17:03:15.407]                       if (inherits(cond, "message")) {
[17:03:15.407]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.407]                         if (muffled) 
[17:03:15.407]                           invokeRestart("muffleMessage")
[17:03:15.407]                       }
[17:03:15.407]                       else if (inherits(cond, "warning")) {
[17:03:15.407]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.407]                         if (muffled) 
[17:03:15.407]                           invokeRestart("muffleWarning")
[17:03:15.407]                       }
[17:03:15.407]                       else if (inherits(cond, "condition")) {
[17:03:15.407]                         if (!is.null(pattern)) {
[17:03:15.407]                           computeRestarts <- base::computeRestarts
[17:03:15.407]                           grepl <- base::grepl
[17:03:15.407]                           restarts <- computeRestarts(cond)
[17:03:15.407]                           for (restart in restarts) {
[17:03:15.407]                             name <- restart$name
[17:03:15.407]                             if (is.null(name)) 
[17:03:15.407]                               next
[17:03:15.407]                             if (!grepl(pattern, name)) 
[17:03:15.407]                               next
[17:03:15.407]                             invokeRestart(restart)
[17:03:15.407]                             muffled <- TRUE
[17:03:15.407]                             break
[17:03:15.407]                           }
[17:03:15.407]                         }
[17:03:15.407]                       }
[17:03:15.407]                       invisible(muffled)
[17:03:15.407]                     }
[17:03:15.407]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.407]                   }
[17:03:15.407]                 }
[17:03:15.407]                 else {
[17:03:15.407]                   if (TRUE) {
[17:03:15.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.407]                     {
[17:03:15.407]                       inherits <- base::inherits
[17:03:15.407]                       invokeRestart <- base::invokeRestart
[17:03:15.407]                       is.null <- base::is.null
[17:03:15.407]                       muffled <- FALSE
[17:03:15.407]                       if (inherits(cond, "message")) {
[17:03:15.407]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.407]                         if (muffled) 
[17:03:15.407]                           invokeRestart("muffleMessage")
[17:03:15.407]                       }
[17:03:15.407]                       else if (inherits(cond, "warning")) {
[17:03:15.407]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.407]                         if (muffled) 
[17:03:15.407]                           invokeRestart("muffleWarning")
[17:03:15.407]                       }
[17:03:15.407]                       else if (inherits(cond, "condition")) {
[17:03:15.407]                         if (!is.null(pattern)) {
[17:03:15.407]                           computeRestarts <- base::computeRestarts
[17:03:15.407]                           grepl <- base::grepl
[17:03:15.407]                           restarts <- computeRestarts(cond)
[17:03:15.407]                           for (restart in restarts) {
[17:03:15.407]                             name <- restart$name
[17:03:15.407]                             if (is.null(name)) 
[17:03:15.407]                               next
[17:03:15.407]                             if (!grepl(pattern, name)) 
[17:03:15.407]                               next
[17:03:15.407]                             invokeRestart(restart)
[17:03:15.407]                             muffled <- TRUE
[17:03:15.407]                             break
[17:03:15.407]                           }
[17:03:15.407]                         }
[17:03:15.407]                       }
[17:03:15.407]                       invisible(muffled)
[17:03:15.407]                     }
[17:03:15.407]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.407]                   }
[17:03:15.407]                 }
[17:03:15.407]             }
[17:03:15.407]         }))
[17:03:15.407]     }, error = function(ex) {
[17:03:15.407]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.407]                 ...future.rng), started = ...future.startTime, 
[17:03:15.407]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.407]             version = "1.8"), class = "FutureResult")
[17:03:15.407]     }, finally = {
[17:03:15.407]         if (!identical(...future.workdir, getwd())) 
[17:03:15.407]             setwd(...future.workdir)
[17:03:15.407]         {
[17:03:15.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.407]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.407]             }
[17:03:15.407]             base::options(...future.oldOptions)
[17:03:15.407]             if (.Platform$OS.type == "windows") {
[17:03:15.407]                 old_names <- names(...future.oldEnvVars)
[17:03:15.407]                 envs <- base::Sys.getenv()
[17:03:15.407]                 names <- names(envs)
[17:03:15.407]                 common <- intersect(names, old_names)
[17:03:15.407]                 added <- setdiff(names, old_names)
[17:03:15.407]                 removed <- setdiff(old_names, names)
[17:03:15.407]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.407]                   envs[common]]
[17:03:15.407]                 NAMES <- toupper(changed)
[17:03:15.407]                 args <- list()
[17:03:15.407]                 for (kk in seq_along(NAMES)) {
[17:03:15.407]                   name <- changed[[kk]]
[17:03:15.407]                   NAME <- NAMES[[kk]]
[17:03:15.407]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.407]                     next
[17:03:15.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.407]                 }
[17:03:15.407]                 NAMES <- toupper(added)
[17:03:15.407]                 for (kk in seq_along(NAMES)) {
[17:03:15.407]                   name <- added[[kk]]
[17:03:15.407]                   NAME <- NAMES[[kk]]
[17:03:15.407]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.407]                     next
[17:03:15.407]                   args[[name]] <- ""
[17:03:15.407]                 }
[17:03:15.407]                 NAMES <- toupper(removed)
[17:03:15.407]                 for (kk in seq_along(NAMES)) {
[17:03:15.407]                   name <- removed[[kk]]
[17:03:15.407]                   NAME <- NAMES[[kk]]
[17:03:15.407]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.407]                     next
[17:03:15.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.407]                 }
[17:03:15.407]                 if (length(args) > 0) 
[17:03:15.407]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.407]             }
[17:03:15.407]             else {
[17:03:15.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.407]             }
[17:03:15.407]             {
[17:03:15.407]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.407]                   0L) {
[17:03:15.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.407]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.407]                   base::options(opts)
[17:03:15.407]                 }
[17:03:15.407]                 {
[17:03:15.407]                   {
[17:03:15.407]                     NULL
[17:03:15.407]                     RNGkind("Mersenne-Twister")
[17:03:15.407]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.407]                       inherits = FALSE)
[17:03:15.407]                   }
[17:03:15.407]                   options(future.plan = NULL)
[17:03:15.407]                   if (is.na(NA_character_)) 
[17:03:15.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.407]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.407]                     .init = FALSE)
[17:03:15.407]                 }
[17:03:15.407]             }
[17:03:15.407]         }
[17:03:15.407]     })
[17:03:15.407]     if (TRUE) {
[17:03:15.407]         base::sink(type = "output", split = FALSE)
[17:03:15.407]         if (TRUE) {
[17:03:15.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.407]         }
[17:03:15.407]         else {
[17:03:15.407]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.407]         }
[17:03:15.407]         base::close(...future.stdout)
[17:03:15.407]         ...future.stdout <- NULL
[17:03:15.407]     }
[17:03:15.407]     ...future.result$conditions <- ...future.conditions
[17:03:15.407]     ...future.result$finished <- base::Sys.time()
[17:03:15.407]     ...future.result
[17:03:15.407] }
[17:03:15.409] assign_globals() ...
[17:03:15.409] List of 2
[17:03:15.409]  $ nested   :List of 2
[17:03:15.409]   ..$ a:function (..., envir = parent.frame())  
[17:03:15.409]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:15.409]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.409]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:15.409]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:15.409]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.409]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:15.409]  $ strategy2: chr "multicore"
[17:03:15.409]  - attr(*, "where")=List of 2
[17:03:15.409]   ..$ nested   :<environment: R_EmptyEnv> 
[17:03:15.409]   ..$ strategy2:<environment: R_EmptyEnv> 
[17:03:15.409]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.409]  - attr(*, "resolved")= logi FALSE
[17:03:15.409]  - attr(*, "total_size")= num 59224
[17:03:15.409]  - attr(*, "already-done")= logi TRUE
[17:03:15.414] - copied ‘nested’ to environment
[17:03:15.414] - copied ‘strategy2’ to environment
[17:03:15.414] assign_globals() ... done
[17:03:15.414] plan(): Setting new future strategy stack:
[17:03:15.414] List of future strategies:
[17:03:15.414] 1. multicore:
[17:03:15.414]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:15.414]    - tweaked: FALSE
[17:03:15.414]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.418] plan(): nbrOfWorkers() = 2
[17:03:15.481] plan(): Setting new future strategy stack:
[17:03:15.481] List of future strategies:
[17:03:15.481] 1. sequential:
[17:03:15.481]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.481]    - tweaked: FALSE
[17:03:15.481]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.481] 2. multicore:
[17:03:15.481]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:15.481]    - tweaked: FALSE
[17:03:15.481]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.482] plan(): nbrOfWorkers() = 1
[17:03:15.482] SequentialFuture started (and completed)
[17:03:15.482] signalConditions() ...
[17:03:15.482]  - include = ‘immediateCondition’
[17:03:15.482]  - exclude = 
[17:03:15.482]  - resignal = FALSE
[17:03:15.483]  - Number of conditions: 57
[17:03:15.483] signalConditions() ... done
[17:03:15.483] - Launch lazy future ... done
[17:03:15.483] run() for ‘SequentialFuture’ ... done
[17:03:15.483] signalConditions() ...
[17:03:15.483]  - include = ‘immediateCondition’
[17:03:15.483]  - exclude = 
[17:03:15.483]  - resignal = FALSE
[17:03:15.484]  - Number of conditions: 57
[17:03:15.484] signalConditions() ... done
[17:03:15.484] Future state: ‘finished’
[17:03:15.484] signalConditions() ...
[17:03:15.484]  - include = ‘condition’
[17:03:15.484]  - exclude = ‘immediateCondition’
[17:03:15.484]  - resignal = TRUE
[17:03:15.484]  - Number of conditions: 57
[17:03:15.485]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.419] getGlobalsAndPackages() ...
[17:03:15.485]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.419] Searching for globals...
[17:03:15.485]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.438] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[17:03:15.485]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.438] Searching for globals ... DONE
[17:03:15.485]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.438] Resolving globals: FALSE
[17:03:15.485]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.439] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[17:03:15.486]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.439] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[17:03:15.486]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.439] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[17:03:15.486]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.439] 
[17:03:15.486]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.440] getGlobalsAndPackages() ... DONE
[17:03:15.486]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.440] run() for ‘Future’ ...
[17:03:15.486]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.440] - state: ‘created’
[17:03:15.486]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.440] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:15.487]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:15.487]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:15.487]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444]   - Field: ‘label’
[17:03:15.487]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444]   - Field: ‘local’
[17:03:15.487]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444]   - Field: ‘owner’
[17:03:15.487]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444]   - Field: ‘envir’
[17:03:15.488]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444]   - Field: ‘workers’
[17:03:15.488]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.444]   - Field: ‘packages’
[17:03:15.488]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘gc’
[17:03:15.488]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘job’
[17:03:15.488]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘conditions’
[17:03:15.488]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘expr’
[17:03:15.488]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘uuid’
[17:03:15.489]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘seed’
[17:03:15.489]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘version’
[17:03:15.489]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘result’
[17:03:15.489]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘asynchronous’
[17:03:15.489]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.445]   - Field: ‘calls’
[17:03:15.489]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446]   - Field: ‘globals’
[17:03:15.490]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446]   - Field: ‘stdout’
[17:03:15.490]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446]   - Field: ‘earlySignal’
[17:03:15.490]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446]   - Field: ‘lazy’
[17:03:15.490]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446]   - Field: ‘state’
[17:03:15.490]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:15.490]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.446] - Launch lazy future ...
[17:03:15.490]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.447] Packages needed by the future expression (n = 0): <none>
[17:03:15.491]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.447] Packages needed by future strategies (n = 0): <none>
[17:03:15.491]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.448] {
[17:03:15.448]     {
[17:03:15.448]         {
[17:03:15.448]             ...future.startTime <- base::Sys.time()
[17:03:15.448]             {
[17:03:15.448]                 {
[17:03:15.448]                   {
[17:03:15.448]                     {
[17:03:15.448]                       base::local({
[17:03:15.448]                         has_future <- base::requireNamespace("future", 
[17:03:15.448]                           quietly = TRUE)
[17:03:15.448]                         if (has_future) {
[17:03:15.448]                           ns <- base::getNamespace("future")
[17:03:15.448]                           version <- ns[[".package"]][["version"]]
[17:03:15.448]                           if (is.null(version)) 
[17:03:15.448]                             version <- utils::packageVersion("future")
[17:03:15.448]                         }
[17:03:15.448]                         else {
[17:03:15.448]                           version <- NULL
[17:03:15.448]                         }
[17:03:15.448]                         if (!has_future || version < "1.8.0") {
[17:03:15.448]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.448]                             "", base::R.version$version.string), 
[17:03:15.448]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.448]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.448]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.448]                               "release", "version")], collapse = " "), 
[17:03:15.448]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.448]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.448]                             info)
[17:03:15.448]                           info <- base::paste(info, collapse = "; ")
[17:03:15.448]                           if (!has_future) {
[17:03:15.448]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.448]                               info)
[17:03:15.448]                           }
[17:03:15.448]                           else {
[17:03:15.448]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.448]                               info, version)
[17:03:15.448]                           }
[17:03:15.448]                           base::stop(msg)
[17:03:15.448]                         }
[17:03:15.448]                       })
[17:03:15.448]                     }
[17:03:15.448]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:15.448]                     base::options(mc.cores = 1L)
[17:03:15.448]                   }
[17:03:15.448]                   ...future.strategy.old <- future::plan("list")
[17:03:15.448]                   options(future.plan = NULL)
[17:03:15.448]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.448]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:15.448]                 }
[17:03:15.448]                 ...future.workdir <- getwd()
[17:03:15.448]             }
[17:03:15.448]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.448]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.448]         }
[17:03:15.448]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.448]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.448]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.448]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.448]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.448]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.448]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.448]             base::names(...future.oldOptions))
[17:03:15.448]     }
[17:03:15.448]     if (FALSE) {
[17:03:15.448]     }
[17:03:15.448]     else {
[17:03:15.448]         if (TRUE) {
[17:03:15.448]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.448]                 open = "w")
[17:03:15.448]         }
[17:03:15.448]         else {
[17:03:15.448]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.448]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.448]         }
[17:03:15.448]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.448]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.448]             base::sink(type = "output", split = FALSE)
[17:03:15.448]             base::close(...future.stdout)
[17:03:15.448]         }, add = TRUE)
[17:03:15.448]     }
[17:03:15.448]     ...future.frame <- base::sys.nframe()
[17:03:15.448]     ...future.conditions <- base::list()
[17:03:15.448]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.448]     if (FALSE) {
[17:03:15.448]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.448]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.448]     }
[17:03:15.448]     ...future.result <- base::tryCatch({
[17:03:15.448]         base::withCallingHandlers({
[17:03:15.448]             ...future.value <- base::withVisible(base::local({
[17:03:15.448]                 withCallingHandlers({
[17:03:15.448]                   {
[17:03:15.448]                     b <- 2L
[17:03:15.448]                     plan_b <- future::plan("list")
[17:03:15.448]                     nested_b <- nested_a[-1]
[17:03:15.448]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:15.448]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.448]                       "sequential"))
[17:03:15.448]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:15.448]                       b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:15.448]                   }
[17:03:15.448]                 }, immediateCondition = function(cond) {
[17:03:15.448]                   save_rds <- function (object, pathname, ...) 
[17:03:15.448]                   {
[17:03:15.448]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:15.448]                     if (file_test("-f", pathname_tmp)) {
[17:03:15.448]                       fi_tmp <- file.info(pathname_tmp)
[17:03:15.448]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:15.448]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:15.448]                         fi_tmp[["mtime"]])
[17:03:15.448]                     }
[17:03:15.448]                     tryCatch({
[17:03:15.448]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:15.448]                     }, error = function(ex) {
[17:03:15.448]                       msg <- conditionMessage(ex)
[17:03:15.448]                       fi_tmp <- file.info(pathname_tmp)
[17:03:15.448]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:15.448]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:15.448]                         fi_tmp[["mtime"]], msg)
[17:03:15.448]                       ex$message <- msg
[17:03:15.448]                       stop(ex)
[17:03:15.448]                     })
[17:03:15.448]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:15.448]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:15.448]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:15.448]                       fi_tmp <- file.info(pathname_tmp)
[17:03:15.448]                       fi <- file.info(pathname)
[17:03:15.448]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:15.448]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:15.448]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:15.448]                         fi[["size"]], fi[["mtime"]])
[17:03:15.448]                       stop(msg)
[17:03:15.448]                     }
[17:03:15.448]                     invisible(pathname)
[17:03:15.448]                   }
[17:03:15.448]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:15.448]                     rootPath = tempdir()) 
[17:03:15.448]                   {
[17:03:15.448]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:15.448]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:15.448]                       tmpdir = path, fileext = ".rds")
[17:03:15.448]                     save_rds(obj, file)
[17:03:15.448]                   }
[17:03:15.448]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:15.448]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.448]                   {
[17:03:15.448]                     inherits <- base::inherits
[17:03:15.448]                     invokeRestart <- base::invokeRestart
[17:03:15.448]                     is.null <- base::is.null
[17:03:15.448]                     muffled <- FALSE
[17:03:15.448]                     if (inherits(cond, "message")) {
[17:03:15.448]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:15.448]                       if (muffled) 
[17:03:15.448]                         invokeRestart("muffleMessage")
[17:03:15.448]                     }
[17:03:15.448]                     else if (inherits(cond, "warning")) {
[17:03:15.448]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:15.448]                       if (muffled) 
[17:03:15.448]                         invokeRestart("muffleWarning")
[17:03:15.448]                     }
[17:03:15.448]                     else if (inherits(cond, "condition")) {
[17:03:15.448]                       if (!is.null(pattern)) {
[17:03:15.448]                         computeRestarts <- base::computeRestarts
[17:03:15.448]                         grepl <- base::grepl
[17:03:15.448]                         restarts <- computeRestarts(cond)
[17:03:15.448]                         for (restart in restarts) {
[17:03:15.448]                           name <- restart$name
[17:03:15.448]                           if (is.null(name)) 
[17:03:15.448]                             next
[17:03:15.448]                           if (!grepl(pattern, name)) 
[17:03:15.448]                             next
[17:03:15.448]                           invokeRestart(restart)
[17:03:15.448]                           muffled <- TRUE
[17:03:15.448]                           break
[17:03:15.448]                         }
[17:03:15.448]                       }
[17:03:15.448]                     }
[17:03:15.448]                     invisible(muffled)
[17:03:15.448]                   }
[17:03:15.448]                   muffleCondition(cond)
[17:03:15.448]                 })
[17:03:15.448]             }))
[17:03:15.448]             future::FutureResult(value = ...future.value$value, 
[17:03:15.448]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.448]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.448]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.448]                     ...future.globalenv.names))
[17:03:15.448]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.448]         }, condition = base::local({
[17:03:15.448]             c <- base::c
[17:03:15.448]             inherits <- base::inherits
[17:03:15.448]             invokeRestart <- base::invokeRestart
[17:03:15.448]             length <- base::length
[17:03:15.448]             list <- base::list
[17:03:15.448]             seq.int <- base::seq.int
[17:03:15.448]             signalCondition <- base::signalCondition
[17:03:15.448]             sys.calls <- base::sys.calls
[17:03:15.448]             `[[` <- base::`[[`
[17:03:15.448]             `+` <- base::`+`
[17:03:15.448]             `<<-` <- base::`<<-`
[17:03:15.448]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.448]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.448]                   3L)]
[17:03:15.448]             }
[17:03:15.448]             function(cond) {
[17:03:15.448]                 is_error <- inherits(cond, "error")
[17:03:15.448]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.448]                   NULL)
[17:03:15.448]                 if (is_error) {
[17:03:15.448]                   sessionInformation <- function() {
[17:03:15.448]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.448]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.448]                       search = base::search(), system = base::Sys.info())
[17:03:15.448]                   }
[17:03:15.448]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.448]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.448]                     cond$call), session = sessionInformation(), 
[17:03:15.448]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.448]                   signalCondition(cond)
[17:03:15.448]                 }
[17:03:15.448]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.448]                 "immediateCondition"))) {
[17:03:15.448]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.448]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.448]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.448]                   if (TRUE && !signal) {
[17:03:15.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.448]                     {
[17:03:15.448]                       inherits <- base::inherits
[17:03:15.448]                       invokeRestart <- base::invokeRestart
[17:03:15.448]                       is.null <- base::is.null
[17:03:15.448]                       muffled <- FALSE
[17:03:15.448]                       if (inherits(cond, "message")) {
[17:03:15.448]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.448]                         if (muffled) 
[17:03:15.448]                           invokeRestart("muffleMessage")
[17:03:15.448]                       }
[17:03:15.448]                       else if (inherits(cond, "warning")) {
[17:03:15.448]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.448]                         if (muffled) 
[17:03:15.448]                           invokeRestart("muffleWarning")
[17:03:15.448]                       }
[17:03:15.448]                       else if (inherits(cond, "condition")) {
[17:03:15.448]                         if (!is.null(pattern)) {
[17:03:15.448]                           computeRestarts <- base::computeRestarts
[17:03:15.448]                           grepl <- base::grepl
[17:03:15.448]                           restarts <- computeRestarts(cond)
[17:03:15.448]                           for (restart in restarts) {
[17:03:15.448]                             name <- restart$name
[17:03:15.448]                             if (is.null(name)) 
[17:03:15.448]                               next
[17:03:15.448]                             if (!grepl(pattern, name)) 
[17:03:15.448]                               next
[17:03:15.448]                             invokeRestart(restart)
[17:03:15.448]                             muffled <- TRUE
[17:03:15.448]                             break
[17:03:15.448]                           }
[17:03:15.448]                         }
[17:03:15.448]                       }
[17:03:15.448]                       invisible(muffled)
[17:03:15.448]                     }
[17:03:15.448]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.448]                   }
[17:03:15.448]                 }
[17:03:15.448]                 else {
[17:03:15.448]                   if (TRUE) {
[17:03:15.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.448]                     {
[17:03:15.448]                       inherits <- base::inherits
[17:03:15.448]                       invokeRestart <- base::invokeRestart
[17:03:15.448]                       is.null <- base::is.null
[17:03:15.448]                       muffled <- FALSE
[17:03:15.448]                       if (inherits(cond, "message")) {
[17:03:15.448]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.448]                         if (muffled) 
[17:03:15.448]                           invokeRestart("muffleMessage")
[17:03:15.448]                       }
[17:03:15.448]                       else if (inherits(cond, "warning")) {
[17:03:15.448]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.448]                         if (muffled) 
[17:03:15.448]                           invokeRestart("muffleWarning")
[17:03:15.448]                       }
[17:03:15.448]                       else if (inherits(cond, "condition")) {
[17:03:15.448]                         if (!is.null(pattern)) {
[17:03:15.448]                           computeRestarts <- base::computeRestarts
[17:03:15.448]                           grepl <- base::grepl
[17:03:15.448]                           restarts <- computeRestarts(cond)
[17:03:15.448]                           for (restart in restarts) {
[17:03:15.448]                             name <- restart$name
[17:03:15.448]                             if (is.null(name)) 
[17:03:15.448]                               next
[17:03:15.448]                             if (!grepl(pattern, name)) 
[17:03:15.448]                               next
[17:03:15.448]                             invokeRestart(restart)
[17:03:15.448]                             muffled <- TRUE
[17:03:15.448]                             break
[17:03:15.448]                           }
[17:03:15.448]                         }
[17:03:15.448]                       }
[17:03:15.448]                       invisible(muffled)
[17:03:15.448]                     }
[17:03:15.448]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.448]                   }
[17:03:15.448]                 }
[17:03:15.448]             }
[17:03:15.448]         }))
[17:03:15.448]     }, error = function(ex) {
[17:03:15.448]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.448]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.448]                 ...future.rng), started = ...future.startTime, 
[17:03:15.448]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.448]             version = "1.8"), class = "FutureResult")
[17:03:15.448]     }, finally = {
[17:03:15.448]         if (!identical(...future.workdir, getwd())) 
[17:03:15.448]             setwd(...future.workdir)
[17:03:15.448]         {
[17:03:15.448]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.448]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.448]             }
[17:03:15.448]             base::options(...future.oldOptions)
[17:03:15.448]             if (.Platform$OS.type == "windows") {
[17:03:15.448]                 old_names <- names(...future.oldEnvVars)
[17:03:15.448]                 envs <- base::Sys.getenv()
[17:03:15.448]                 names <- names(envs)
[17:03:15.448]                 common <- intersect(names, old_names)
[17:03:15.448]                 added <- setdiff(names, old_names)
[17:03:15.448]                 removed <- setdiff(old_names, names)
[17:03:15.448]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.448]                   envs[common]]
[17:03:15.448]                 NAMES <- toupper(changed)
[17:03:15.448]                 args <- list()
[17:03:15.448]                 for (kk in seq_along(NAMES)) {
[17:03:15.448]                   name <- changed[[kk]]
[17:03:15.448]                   NAME <- NAMES[[kk]]
[17:03:15.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.448]                     next
[17:03:15.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.448]                 }
[17:03:15.448]                 NAMES <- toupper(added)
[17:03:15.448]                 for (kk in seq_along(NAMES)) {
[17:03:15.448]                   name <- added[[kk]]
[17:03:15.448]                   NAME <- NAMES[[kk]]
[17:03:15.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.448]                     next
[17:03:15.448]                   args[[name]] <- ""
[17:03:15.448]                 }
[17:03:15.448]                 NAMES <- toupper(removed)
[17:03:15.448]                 for (kk in seq_along(NAMES)) {
[17:03:15.448]                   name <- removed[[kk]]
[17:03:15.448]                   NAME <- NAMES[[kk]]
[17:03:15.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.448]                     next
[17:03:15.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.448]                 }
[17:03:15.448]                 if (length(args) > 0) 
[17:03:15.448]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.448]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.448]             }
[17:03:15.448]             else {
[17:03:15.448]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.448]             }
[17:03:15.448]             {
[17:03:15.448]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.448]                   0L) {
[17:03:15.448]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.448]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.448]                   base::options(opts)
[17:03:15.448]                 }
[17:03:15.448]                 {
[17:03:15.448]                   {
[17:03:15.448]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:15.448]                     NULL
[17:03:15.448]                   }
[17:03:15.448]                   options(future.plan = NULL)
[17:03:15.448]                   if (is.na(NA_character_)) 
[17:03:15.448]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.448]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.448]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.448]                     .init = FALSE)
[17:03:15.448]                 }
[17:03:15.448]             }
[17:03:15.448]         }
[17:03:15.448]     })
[17:03:15.448]     if (TRUE) {
[17:03:15.448]         base::sink(type = "output", split = FALSE)
[17:03:15.448]         if (TRUE) {
[17:03:15.448]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.448]         }
[17:03:15.448]         else {
[17:03:15.448]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.448]         }
[17:03:15.448]         base::close(...future.stdout)
[17:03:15.448]         ...future.stdout <- NULL
[17:03:15.448]     }
[17:03:15.448]     ...future.result$conditions <- ...future.conditions
[17:03:15.448]     ...future.result$finished <- base::Sys.time()
[17:03:15.448]     ...future.result
[17:03:15.448] }
[17:03:15.491]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.450] assign_globals() ...
[17:03:15.491]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.450] List of 3
[17:03:15.450]  $ nested_a:List of 1
[17:03:15.450]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:15.450]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:15.450]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.450]  $ a       : int 1
[17:03:15.450]  $ plan_a  :List of 1
[17:03:15.450]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:15.450]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:15.450]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.450]  - attr(*, "where")=List of 3
[17:03:15.450]   ..$ nested_a:<environment: R_EmptyEnv> 
[17:03:15.450]   ..$ a       :<environment: R_EmptyEnv> 
[17:03:15.450]   ..$ plan_a  :<environment: R_EmptyEnv> 
[17:03:15.450]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.450]  - attr(*, "resolved")= logi FALSE
[17:03:15.450]  - attr(*, "total_size")= num 95240
[17:03:15.450]  - attr(*, "already-done")= logi TRUE
[17:03:15.491]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.455] - copied ‘nested_a’ to environment
[17:03:15.491]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.455] - copied ‘a’ to environment
[17:03:15.492]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.455] - copied ‘plan_a’ to environment
[17:03:15.492]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.455] assign_globals() ... done
[17:03:15.492]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.455] requestCore(): workers = 2
[17:03:15.492]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.458] MulticoreFuture started
[17:03:15.492]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.459] - Launch lazy future ... done
[17:03:15.492]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.459] run() for ‘MulticoreFuture’ ... done
[17:03:15.492]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.460] result() for MulticoreFuture ...
[17:03:15.493]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.479] result() for MulticoreFuture ...
[17:03:15.493]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.480] result() for MulticoreFuture ... done
[17:03:15.493]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.480] result() for MulticoreFuture ... done
[17:03:15.493]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.480] result() for MulticoreFuture ...
[17:03:15.493]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.480] result() for MulticoreFuture ... done
[17:03:15.493] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:15.499] getGlobalsAndPackages() ...
[17:03:15.499] Searching for globals...
[17:03:15.501] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:15.501] Searching for globals ... DONE
[17:03:15.501] Resolving globals: FALSE
[17:03:15.502] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:15.502] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:15.502] - globals: [1] ‘data’
[17:03:15.502] - packages: [1] ‘future’
[17:03:15.502] getGlobalsAndPackages() ... DONE
[17:03:15.503] run() for ‘Future’ ...
[17:03:15.503] - state: ‘created’
[17:03:15.503] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.503] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.503] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.505]   - Field: ‘label’
[17:03:15.505]   - Field: ‘local’
[17:03:15.505]   - Field: ‘owner’
[17:03:15.505]   - Field: ‘envir’
[17:03:15.505]   - Field: ‘packages’
[17:03:15.505]   - Field: ‘gc’
[17:03:15.505]   - Field: ‘conditions’
[17:03:15.506]   - Field: ‘expr’
[17:03:15.506]   - Field: ‘uuid’
[17:03:15.506]   - Field: ‘seed’
[17:03:15.506]   - Field: ‘version’
[17:03:15.506]   - Field: ‘result’
[17:03:15.506]   - Field: ‘asynchronous’
[17:03:15.506]   - Field: ‘calls’
[17:03:15.506]   - Field: ‘globals’
[17:03:15.506]   - Field: ‘stdout’
[17:03:15.506]   - Field: ‘earlySignal’
[17:03:15.506]   - Field: ‘lazy’
[17:03:15.507]   - Field: ‘state’
[17:03:15.507] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.507] - Launch lazy future ...
[17:03:15.507] Packages needed by the future expression (n = 1): ‘future’
[17:03:15.507] Packages needed by future strategies (n = 1): ‘future’
[17:03:15.508] {
[17:03:15.508]     {
[17:03:15.508]         {
[17:03:15.508]             ...future.startTime <- base::Sys.time()
[17:03:15.508]             {
[17:03:15.508]                 {
[17:03:15.508]                   {
[17:03:15.508]                     {
[17:03:15.508]                       base::local({
[17:03:15.508]                         has_future <- base::requireNamespace("future", 
[17:03:15.508]                           quietly = TRUE)
[17:03:15.508]                         if (has_future) {
[17:03:15.508]                           ns <- base::getNamespace("future")
[17:03:15.508]                           version <- ns[[".package"]][["version"]]
[17:03:15.508]                           if (is.null(version)) 
[17:03:15.508]                             version <- utils::packageVersion("future")
[17:03:15.508]                         }
[17:03:15.508]                         else {
[17:03:15.508]                           version <- NULL
[17:03:15.508]                         }
[17:03:15.508]                         if (!has_future || version < "1.8.0") {
[17:03:15.508]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.508]                             "", base::R.version$version.string), 
[17:03:15.508]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.508]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.508]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.508]                               "release", "version")], collapse = " "), 
[17:03:15.508]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.508]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.508]                             info)
[17:03:15.508]                           info <- base::paste(info, collapse = "; ")
[17:03:15.508]                           if (!has_future) {
[17:03:15.508]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.508]                               info)
[17:03:15.508]                           }
[17:03:15.508]                           else {
[17:03:15.508]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.508]                               info, version)
[17:03:15.508]                           }
[17:03:15.508]                           base::stop(msg)
[17:03:15.508]                         }
[17:03:15.508]                       })
[17:03:15.508]                     }
[17:03:15.508]                     base::local({
[17:03:15.508]                       for (pkg in "future") {
[17:03:15.508]                         base::loadNamespace(pkg)
[17:03:15.508]                         base::library(pkg, character.only = TRUE)
[17:03:15.508]                       }
[17:03:15.508]                     })
[17:03:15.508]                   }
[17:03:15.508]                   ...future.strategy.old <- future::plan("list")
[17:03:15.508]                   options(future.plan = NULL)
[17:03:15.508]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.508]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:15.508]                     envir = parent.frame()) 
[17:03:15.508]                   {
[17:03:15.508]                     default_workers <- missing(workers)
[17:03:15.508]                     if (is.function(workers)) 
[17:03:15.508]                       workers <- workers()
[17:03:15.508]                     workers <- structure(as.integer(workers), 
[17:03:15.508]                       class = class(workers))
[17:03:15.508]                     stop_if_not(is.finite(workers), workers >= 
[17:03:15.508]                       1L)
[17:03:15.508]                     if ((workers == 1L && !inherits(workers, 
[17:03:15.508]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:15.508]                       if (default_workers) 
[17:03:15.508]                         supportsMulticore(warn = TRUE)
[17:03:15.508]                       return(sequential(..., envir = envir))
[17:03:15.508]                     }
[17:03:15.508]                     oopts <- options(mc.cores = workers)
[17:03:15.508]                     on.exit(options(oopts))
[17:03:15.508]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:15.508]                       envir = envir)
[17:03:15.508]                     if (!future$lazy) 
[17:03:15.508]                       future <- run(future)
[17:03:15.508]                     invisible(future)
[17:03:15.508]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:15.508]                 }
[17:03:15.508]                 ...future.workdir <- getwd()
[17:03:15.508]             }
[17:03:15.508]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.508]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.508]         }
[17:03:15.508]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.508]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.508]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.508]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.508]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.508]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.508]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.508]             base::names(...future.oldOptions))
[17:03:15.508]     }
[17:03:15.508]     if (FALSE) {
[17:03:15.508]     }
[17:03:15.508]     else {
[17:03:15.508]         if (TRUE) {
[17:03:15.508]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.508]                 open = "w")
[17:03:15.508]         }
[17:03:15.508]         else {
[17:03:15.508]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.508]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.508]         }
[17:03:15.508]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.508]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.508]             base::sink(type = "output", split = FALSE)
[17:03:15.508]             base::close(...future.stdout)
[17:03:15.508]         }, add = TRUE)
[17:03:15.508]     }
[17:03:15.508]     ...future.frame <- base::sys.nframe()
[17:03:15.508]     ...future.conditions <- base::list()
[17:03:15.508]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.508]     if (FALSE) {
[17:03:15.508]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.508]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.508]     }
[17:03:15.508]     ...future.result <- base::tryCatch({
[17:03:15.508]         base::withCallingHandlers({
[17:03:15.508]             ...future.value <- base::withVisible(base::local({
[17:03:15.508]                 value(future(subset(data, a == 2)))
[17:03:15.508]             }))
[17:03:15.508]             future::FutureResult(value = ...future.value$value, 
[17:03:15.508]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.508]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.508]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.508]                     ...future.globalenv.names))
[17:03:15.508]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.508]         }, condition = base::local({
[17:03:15.508]             c <- base::c
[17:03:15.508]             inherits <- base::inherits
[17:03:15.508]             invokeRestart <- base::invokeRestart
[17:03:15.508]             length <- base::length
[17:03:15.508]             list <- base::list
[17:03:15.508]             seq.int <- base::seq.int
[17:03:15.508]             signalCondition <- base::signalCondition
[17:03:15.508]             sys.calls <- base::sys.calls
[17:03:15.508]             `[[` <- base::`[[`
[17:03:15.508]             `+` <- base::`+`
[17:03:15.508]             `<<-` <- base::`<<-`
[17:03:15.508]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.508]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.508]                   3L)]
[17:03:15.508]             }
[17:03:15.508]             function(cond) {
[17:03:15.508]                 is_error <- inherits(cond, "error")
[17:03:15.508]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.508]                   NULL)
[17:03:15.508]                 if (is_error) {
[17:03:15.508]                   sessionInformation <- function() {
[17:03:15.508]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.508]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.508]                       search = base::search(), system = base::Sys.info())
[17:03:15.508]                   }
[17:03:15.508]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.508]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.508]                     cond$call), session = sessionInformation(), 
[17:03:15.508]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.508]                   signalCondition(cond)
[17:03:15.508]                 }
[17:03:15.508]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.508]                 "immediateCondition"))) {
[17:03:15.508]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.508]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.508]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.508]                   if (TRUE && !signal) {
[17:03:15.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.508]                     {
[17:03:15.508]                       inherits <- base::inherits
[17:03:15.508]                       invokeRestart <- base::invokeRestart
[17:03:15.508]                       is.null <- base::is.null
[17:03:15.508]                       muffled <- FALSE
[17:03:15.508]                       if (inherits(cond, "message")) {
[17:03:15.508]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.508]                         if (muffled) 
[17:03:15.508]                           invokeRestart("muffleMessage")
[17:03:15.508]                       }
[17:03:15.508]                       else if (inherits(cond, "warning")) {
[17:03:15.508]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.508]                         if (muffled) 
[17:03:15.508]                           invokeRestart("muffleWarning")
[17:03:15.508]                       }
[17:03:15.508]                       else if (inherits(cond, "condition")) {
[17:03:15.508]                         if (!is.null(pattern)) {
[17:03:15.508]                           computeRestarts <- base::computeRestarts
[17:03:15.508]                           grepl <- base::grepl
[17:03:15.508]                           restarts <- computeRestarts(cond)
[17:03:15.508]                           for (restart in restarts) {
[17:03:15.508]                             name <- restart$name
[17:03:15.508]                             if (is.null(name)) 
[17:03:15.508]                               next
[17:03:15.508]                             if (!grepl(pattern, name)) 
[17:03:15.508]                               next
[17:03:15.508]                             invokeRestart(restart)
[17:03:15.508]                             muffled <- TRUE
[17:03:15.508]                             break
[17:03:15.508]                           }
[17:03:15.508]                         }
[17:03:15.508]                       }
[17:03:15.508]                       invisible(muffled)
[17:03:15.508]                     }
[17:03:15.508]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.508]                   }
[17:03:15.508]                 }
[17:03:15.508]                 else {
[17:03:15.508]                   if (TRUE) {
[17:03:15.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.508]                     {
[17:03:15.508]                       inherits <- base::inherits
[17:03:15.508]                       invokeRestart <- base::invokeRestart
[17:03:15.508]                       is.null <- base::is.null
[17:03:15.508]                       muffled <- FALSE
[17:03:15.508]                       if (inherits(cond, "message")) {
[17:03:15.508]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.508]                         if (muffled) 
[17:03:15.508]                           invokeRestart("muffleMessage")
[17:03:15.508]                       }
[17:03:15.508]                       else if (inherits(cond, "warning")) {
[17:03:15.508]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.508]                         if (muffled) 
[17:03:15.508]                           invokeRestart("muffleWarning")
[17:03:15.508]                       }
[17:03:15.508]                       else if (inherits(cond, "condition")) {
[17:03:15.508]                         if (!is.null(pattern)) {
[17:03:15.508]                           computeRestarts <- base::computeRestarts
[17:03:15.508]                           grepl <- base::grepl
[17:03:15.508]                           restarts <- computeRestarts(cond)
[17:03:15.508]                           for (restart in restarts) {
[17:03:15.508]                             name <- restart$name
[17:03:15.508]                             if (is.null(name)) 
[17:03:15.508]                               next
[17:03:15.508]                             if (!grepl(pattern, name)) 
[17:03:15.508]                               next
[17:03:15.508]                             invokeRestart(restart)
[17:03:15.508]                             muffled <- TRUE
[17:03:15.508]                             break
[17:03:15.508]                           }
[17:03:15.508]                         }
[17:03:15.508]                       }
[17:03:15.508]                       invisible(muffled)
[17:03:15.508]                     }
[17:03:15.508]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.508]                   }
[17:03:15.508]                 }
[17:03:15.508]             }
[17:03:15.508]         }))
[17:03:15.508]     }, error = function(ex) {
[17:03:15.508]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.508]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.508]                 ...future.rng), started = ...future.startTime, 
[17:03:15.508]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.508]             version = "1.8"), class = "FutureResult")
[17:03:15.508]     }, finally = {
[17:03:15.508]         if (!identical(...future.workdir, getwd())) 
[17:03:15.508]             setwd(...future.workdir)
[17:03:15.508]         {
[17:03:15.508]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.508]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.508]             }
[17:03:15.508]             base::options(...future.oldOptions)
[17:03:15.508]             if (.Platform$OS.type == "windows") {
[17:03:15.508]                 old_names <- names(...future.oldEnvVars)
[17:03:15.508]                 envs <- base::Sys.getenv()
[17:03:15.508]                 names <- names(envs)
[17:03:15.508]                 common <- intersect(names, old_names)
[17:03:15.508]                 added <- setdiff(names, old_names)
[17:03:15.508]                 removed <- setdiff(old_names, names)
[17:03:15.508]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.508]                   envs[common]]
[17:03:15.508]                 NAMES <- toupper(changed)
[17:03:15.508]                 args <- list()
[17:03:15.508]                 for (kk in seq_along(NAMES)) {
[17:03:15.508]                   name <- changed[[kk]]
[17:03:15.508]                   NAME <- NAMES[[kk]]
[17:03:15.508]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.508]                     next
[17:03:15.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.508]                 }
[17:03:15.508]                 NAMES <- toupper(added)
[17:03:15.508]                 for (kk in seq_along(NAMES)) {
[17:03:15.508]                   name <- added[[kk]]
[17:03:15.508]                   NAME <- NAMES[[kk]]
[17:03:15.508]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.508]                     next
[17:03:15.508]                   args[[name]] <- ""
[17:03:15.508]                 }
[17:03:15.508]                 NAMES <- toupper(removed)
[17:03:15.508]                 for (kk in seq_along(NAMES)) {
[17:03:15.508]                   name <- removed[[kk]]
[17:03:15.508]                   NAME <- NAMES[[kk]]
[17:03:15.508]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.508]                     next
[17:03:15.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.508]                 }
[17:03:15.508]                 if (length(args) > 0) 
[17:03:15.508]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.508]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.508]             }
[17:03:15.508]             else {
[17:03:15.508]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.508]             }
[17:03:15.508]             {
[17:03:15.508]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.508]                   0L) {
[17:03:15.508]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.508]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.508]                   base::options(opts)
[17:03:15.508]                 }
[17:03:15.508]                 {
[17:03:15.508]                   {
[17:03:15.508]                     NULL
[17:03:15.508]                     RNGkind("Mersenne-Twister")
[17:03:15.508]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.508]                       inherits = FALSE)
[17:03:15.508]                   }
[17:03:15.508]                   options(future.plan = NULL)
[17:03:15.508]                   if (is.na(NA_character_)) 
[17:03:15.508]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.508]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.508]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.508]                     .init = FALSE)
[17:03:15.508]                 }
[17:03:15.508]             }
[17:03:15.508]         }
[17:03:15.508]     })
[17:03:15.508]     if (TRUE) {
[17:03:15.508]         base::sink(type = "output", split = FALSE)
[17:03:15.508]         if (TRUE) {
[17:03:15.508]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.508]         }
[17:03:15.508]         else {
[17:03:15.508]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.508]         }
[17:03:15.508]         base::close(...future.stdout)
[17:03:15.508]         ...future.stdout <- NULL
[17:03:15.508]     }
[17:03:15.508]     ...future.result$conditions <- ...future.conditions
[17:03:15.508]     ...future.result$finished <- base::Sys.time()
[17:03:15.508]     ...future.result
[17:03:15.508] }
[17:03:15.509] assign_globals() ...
[17:03:15.509] List of 1
[17:03:15.509]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:15.509]   ..$ a: int [1:3] 1 2 3
[17:03:15.509]   ..$ b: int [1:3] 3 2 1
[17:03:15.509]  - attr(*, "where")=List of 1
[17:03:15.509]   ..$ data:<environment: R_EmptyEnv> 
[17:03:15.509]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.509]  - attr(*, "resolved")= logi FALSE
[17:03:15.509]  - attr(*, "total_size")= num 128
[17:03:15.509]  - attr(*, "already-done")= logi TRUE
[17:03:15.513] - copied ‘data’ to environment
[17:03:15.513] assign_globals() ... done
[17:03:15.513] plan(): Setting new future strategy stack:
[17:03:15.513] List of future strategies:
[17:03:15.513] 1. multicore:
[17:03:15.513]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:15.513]    - tweaked: FALSE
[17:03:15.513]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.517] plan(): nbrOfWorkers() = 2
[17:03:15.562] plan(): Setting new future strategy stack:
[17:03:15.562] List of future strategies:
[17:03:15.562] 1. sequential:
[17:03:15.562]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.562]    - tweaked: FALSE
[17:03:15.562]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.562] 2. multicore:
[17:03:15.562]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:15.562]    - tweaked: FALSE
[17:03:15.562]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.563] plan(): nbrOfWorkers() = 1
[17:03:15.563] SequentialFuture started (and completed)
[17:03:15.564] signalConditions() ...
[17:03:15.564]  - include = ‘immediateCondition’
[17:03:15.564]  - exclude = 
[17:03:15.564]  - resignal = FALSE
[17:03:15.564]  - Number of conditions: 55
[17:03:15.564] signalConditions() ... done
[17:03:15.564] - Launch lazy future ... done
[17:03:15.564] run() for ‘SequentialFuture’ ... done
[17:03:15.565] signalConditions() ...
[17:03:15.565]  - include = ‘immediateCondition’
[17:03:15.565]  - exclude = 
[17:03:15.565]  - resignal = FALSE
[17:03:15.565]  - Number of conditions: 55
[17:03:15.565] signalConditions() ... done
[17:03:15.565] Future state: ‘finished’
[17:03:15.565] signalConditions() ...
[17:03:15.565]  - include = ‘condition’
[17:03:15.566]  - exclude = ‘immediateCondition’
[17:03:15.566]  - resignal = TRUE
[17:03:15.566]  - Number of conditions: 55
[17:03:15.566]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.518] getGlobalsAndPackages() ...
[17:03:15.566]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.518] Searching for globals...
[17:03:15.566]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.534] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:15.566]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.534] Searching for globals ... DONE
[17:03:15.567]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.534] Resolving globals: FALSE
[17:03:15.567]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.534] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:15.567]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.535] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:15.567]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.535] - globals: [1] ‘data’
[17:03:15.567]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.535] 
[17:03:15.567]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.535] getGlobalsAndPackages() ... DONE
[17:03:15.568]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.535] run() for ‘Future’ ...
[17:03:15.568]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.535] - state: ‘created’
[17:03:15.568]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.536] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:15.568]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.539] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:15.568]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.539] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:15.568]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.539]   - Field: ‘label’
[17:03:15.569]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.539]   - Field: ‘local’
[17:03:15.569]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘owner’
[17:03:15.569]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘envir’
[17:03:15.571]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘workers’
[17:03:15.572]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘packages’
[17:03:15.572]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘gc’
[17:03:15.572]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘job’
[17:03:15.572]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘conditions’
[17:03:15.572]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘expr’
[17:03:15.572]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘uuid’
[17:03:15.573]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.540]   - Field: ‘seed’
[17:03:15.573]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘version’
[17:03:15.573]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘result’
[17:03:15.573]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘asynchronous’
[17:03:15.573]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘calls’
[17:03:15.574]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘globals’
[17:03:15.574]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘stdout’
[17:03:15.574]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘earlySignal’
[17:03:15.574]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘lazy’
[17:03:15.574]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541]   - Field: ‘state’
[17:03:15.574]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.541] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:15.574]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.542] - Launch lazy future ...
[17:03:15.575]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.542] Packages needed by the future expression (n = 0): <none>
[17:03:15.575]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.542] Packages needed by future strategies (n = 0): <none>
[17:03:15.575]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.542] {
[17:03:15.542]     {
[17:03:15.542]         {
[17:03:15.542]             ...future.startTime <- base::Sys.time()
[17:03:15.542]             {
[17:03:15.542]                 {
[17:03:15.542]                   {
[17:03:15.542]                     {
[17:03:15.542]                       base::local({
[17:03:15.542]                         has_future <- base::requireNamespace("future", 
[17:03:15.542]                           quietly = TRUE)
[17:03:15.542]                         if (has_future) {
[17:03:15.542]                           ns <- base::getNamespace("future")
[17:03:15.542]                           version <- ns[[".package"]][["version"]]
[17:03:15.542]                           if (is.null(version)) 
[17:03:15.542]                             version <- utils::packageVersion("future")
[17:03:15.542]                         }
[17:03:15.542]                         else {
[17:03:15.542]                           version <- NULL
[17:03:15.542]                         }
[17:03:15.542]                         if (!has_future || version < "1.8.0") {
[17:03:15.542]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.542]                             "", base::R.version$version.string), 
[17:03:15.542]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.542]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.542]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.542]                               "release", "version")], collapse = " "), 
[17:03:15.542]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.542]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.542]                             info)
[17:03:15.542]                           info <- base::paste(info, collapse = "; ")
[17:03:15.542]                           if (!has_future) {
[17:03:15.542]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.542]                               info)
[17:03:15.542]                           }
[17:03:15.542]                           else {
[17:03:15.542]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.542]                               info, version)
[17:03:15.542]                           }
[17:03:15.542]                           base::stop(msg)
[17:03:15.542]                         }
[17:03:15.542]                       })
[17:03:15.542]                     }
[17:03:15.542]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:15.542]                     base::options(mc.cores = 1L)
[17:03:15.542]                   }
[17:03:15.542]                   ...future.strategy.old <- future::plan("list")
[17:03:15.542]                   options(future.plan = NULL)
[17:03:15.542]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.542]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:15.542]                 }
[17:03:15.542]                 ...future.workdir <- getwd()
[17:03:15.542]             }
[17:03:15.542]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.542]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.542]         }
[17:03:15.542]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.542]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.542]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.542]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.542]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.542]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.542]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.542]             base::names(...future.oldOptions))
[17:03:15.542]     }
[17:03:15.542]     if (FALSE) {
[17:03:15.542]     }
[17:03:15.542]     else {
[17:03:15.542]         if (TRUE) {
[17:03:15.542]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.542]                 open = "w")
[17:03:15.542]         }
[17:03:15.542]         else {
[17:03:15.542]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.542]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.542]         }
[17:03:15.542]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.542]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.542]             base::sink(type = "output", split = FALSE)
[17:03:15.542]             base::close(...future.stdout)
[17:03:15.542]         }, add = TRUE)
[17:03:15.542]     }
[17:03:15.542]     ...future.frame <- base::sys.nframe()
[17:03:15.542]     ...future.conditions <- base::list()
[17:03:15.542]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.542]     if (FALSE) {
[17:03:15.542]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.542]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.542]     }
[17:03:15.542]     ...future.result <- base::tryCatch({
[17:03:15.542]         base::withCallingHandlers({
[17:03:15.542]             ...future.value <- base::withVisible(base::local({
[17:03:15.542]                 withCallingHandlers({
[17:03:15.542]                   subset(data, a == 2)
[17:03:15.542]                 }, immediateCondition = function(cond) {
[17:03:15.542]                   save_rds <- function (object, pathname, ...) 
[17:03:15.542]                   {
[17:03:15.542]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:15.542]                     if (file_test("-f", pathname_tmp)) {
[17:03:15.542]                       fi_tmp <- file.info(pathname_tmp)
[17:03:15.542]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:15.542]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:15.542]                         fi_tmp[["mtime"]])
[17:03:15.542]                     }
[17:03:15.542]                     tryCatch({
[17:03:15.542]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:15.542]                     }, error = function(ex) {
[17:03:15.542]                       msg <- conditionMessage(ex)
[17:03:15.542]                       fi_tmp <- file.info(pathname_tmp)
[17:03:15.542]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:15.542]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:15.542]                         fi_tmp[["mtime"]], msg)
[17:03:15.542]                       ex$message <- msg
[17:03:15.542]                       stop(ex)
[17:03:15.542]                     })
[17:03:15.542]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:15.542]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:15.542]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:15.542]                       fi_tmp <- file.info(pathname_tmp)
[17:03:15.542]                       fi <- file.info(pathname)
[17:03:15.542]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:15.542]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:15.542]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:15.542]                         fi[["size"]], fi[["mtime"]])
[17:03:15.542]                       stop(msg)
[17:03:15.542]                     }
[17:03:15.542]                     invisible(pathname)
[17:03:15.542]                   }
[17:03:15.542]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:15.542]                     rootPath = tempdir()) 
[17:03:15.542]                   {
[17:03:15.542]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:15.542]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:15.542]                       tmpdir = path, fileext = ".rds")
[17:03:15.542]                     save_rds(obj, file)
[17:03:15.542]                   }
[17:03:15.542]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:15.542]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.542]                   {
[17:03:15.542]                     inherits <- base::inherits
[17:03:15.542]                     invokeRestart <- base::invokeRestart
[17:03:15.542]                     is.null <- base::is.null
[17:03:15.542]                     muffled <- FALSE
[17:03:15.542]                     if (inherits(cond, "message")) {
[17:03:15.542]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:15.542]                       if (muffled) 
[17:03:15.542]                         invokeRestart("muffleMessage")
[17:03:15.542]                     }
[17:03:15.542]                     else if (inherits(cond, "warning")) {
[17:03:15.542]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:15.542]                       if (muffled) 
[17:03:15.542]                         invokeRestart("muffleWarning")
[17:03:15.542]                     }
[17:03:15.542]                     else if (inherits(cond, "condition")) {
[17:03:15.542]                       if (!is.null(pattern)) {
[17:03:15.542]                         computeRestarts <- base::computeRestarts
[17:03:15.542]                         grepl <- base::grepl
[17:03:15.542]                         restarts <- computeRestarts(cond)
[17:03:15.542]                         for (restart in restarts) {
[17:03:15.542]                           name <- restart$name
[17:03:15.542]                           if (is.null(name)) 
[17:03:15.542]                             next
[17:03:15.542]                           if (!grepl(pattern, name)) 
[17:03:15.542]                             next
[17:03:15.542]                           invokeRestart(restart)
[17:03:15.542]                           muffled <- TRUE
[17:03:15.542]                           break
[17:03:15.542]                         }
[17:03:15.542]                       }
[17:03:15.542]                     }
[17:03:15.542]                     invisible(muffled)
[17:03:15.542]                   }
[17:03:15.542]                   muffleCondition(cond)
[17:03:15.542]                 })
[17:03:15.542]             }))
[17:03:15.542]             future::FutureResult(value = ...future.value$value, 
[17:03:15.542]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.542]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.542]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.542]                     ...future.globalenv.names))
[17:03:15.542]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.542]         }, condition = base::local({
[17:03:15.542]             c <- base::c
[17:03:15.542]             inherits <- base::inherits
[17:03:15.542]             invokeRestart <- base::invokeRestart
[17:03:15.542]             length <- base::length
[17:03:15.542]             list <- base::list
[17:03:15.542]             seq.int <- base::seq.int
[17:03:15.542]             signalCondition <- base::signalCondition
[17:03:15.542]             sys.calls <- base::sys.calls
[17:03:15.542]             `[[` <- base::`[[`
[17:03:15.542]             `+` <- base::`+`
[17:03:15.542]             `<<-` <- base::`<<-`
[17:03:15.542]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.542]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.542]                   3L)]
[17:03:15.542]             }
[17:03:15.542]             function(cond) {
[17:03:15.542]                 is_error <- inherits(cond, "error")
[17:03:15.542]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.542]                   NULL)
[17:03:15.542]                 if (is_error) {
[17:03:15.542]                   sessionInformation <- function() {
[17:03:15.542]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.542]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.542]                       search = base::search(), system = base::Sys.info())
[17:03:15.542]                   }
[17:03:15.542]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.542]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.542]                     cond$call), session = sessionInformation(), 
[17:03:15.542]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.542]                   signalCondition(cond)
[17:03:15.542]                 }
[17:03:15.542]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.542]                 "immediateCondition"))) {
[17:03:15.542]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.542]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.542]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.542]                   if (TRUE && !signal) {
[17:03:15.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.542]                     {
[17:03:15.542]                       inherits <- base::inherits
[17:03:15.542]                       invokeRestart <- base::invokeRestart
[17:03:15.542]                       is.null <- base::is.null
[17:03:15.542]                       muffled <- FALSE
[17:03:15.542]                       if (inherits(cond, "message")) {
[17:03:15.542]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.542]                         if (muffled) 
[17:03:15.542]                           invokeRestart("muffleMessage")
[17:03:15.542]                       }
[17:03:15.542]                       else if (inherits(cond, "warning")) {
[17:03:15.542]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.542]                         if (muffled) 
[17:03:15.542]                           invokeRestart("muffleWarning")
[17:03:15.542]                       }
[17:03:15.542]                       else if (inherits(cond, "condition")) {
[17:03:15.542]                         if (!is.null(pattern)) {
[17:03:15.542]                           computeRestarts <- base::computeRestarts
[17:03:15.542]                           grepl <- base::grepl
[17:03:15.542]                           restarts <- computeRestarts(cond)
[17:03:15.542]                           for (restart in restarts) {
[17:03:15.542]                             name <- restart$name
[17:03:15.542]                             if (is.null(name)) 
[17:03:15.542]                               next
[17:03:15.542]                             if (!grepl(pattern, name)) 
[17:03:15.542]                               next
[17:03:15.542]                             invokeRestart(restart)
[17:03:15.542]                             muffled <- TRUE
[17:03:15.542]                             break
[17:03:15.542]                           }
[17:03:15.542]                         }
[17:03:15.542]                       }
[17:03:15.542]                       invisible(muffled)
[17:03:15.542]                     }
[17:03:15.542]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.542]                   }
[17:03:15.542]                 }
[17:03:15.542]                 else {
[17:03:15.542]                   if (TRUE) {
[17:03:15.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.542]                     {
[17:03:15.542]                       inherits <- base::inherits
[17:03:15.542]                       invokeRestart <- base::invokeRestart
[17:03:15.542]                       is.null <- base::is.null
[17:03:15.542]                       muffled <- FALSE
[17:03:15.542]                       if (inherits(cond, "message")) {
[17:03:15.542]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.542]                         if (muffled) 
[17:03:15.542]                           invokeRestart("muffleMessage")
[17:03:15.542]                       }
[17:03:15.542]                       else if (inherits(cond, "warning")) {
[17:03:15.542]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.542]                         if (muffled) 
[17:03:15.542]                           invokeRestart("muffleWarning")
[17:03:15.542]                       }
[17:03:15.542]                       else if (inherits(cond, "condition")) {
[17:03:15.542]                         if (!is.null(pattern)) {
[17:03:15.542]                           computeRestarts <- base::computeRestarts
[17:03:15.542]                           grepl <- base::grepl
[17:03:15.542]                           restarts <- computeRestarts(cond)
[17:03:15.542]                           for (restart in restarts) {
[17:03:15.542]                             name <- restart$name
[17:03:15.542]                             if (is.null(name)) 
[17:03:15.542]                               next
[17:03:15.542]                             if (!grepl(pattern, name)) 
[17:03:15.542]                               next
[17:03:15.542]                             invokeRestart(restart)
[17:03:15.542]                             muffled <- TRUE
[17:03:15.542]                             break
[17:03:15.542]                           }
[17:03:15.542]                         }
[17:03:15.542]                       }
[17:03:15.542]                       invisible(muffled)
[17:03:15.542]                     }
[17:03:15.542]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.542]                   }
[17:03:15.542]                 }
[17:03:15.542]             }
[17:03:15.542]         }))
[17:03:15.542]     }, error = function(ex) {
[17:03:15.542]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.542]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.542]                 ...future.rng), started = ...future.startTime, 
[17:03:15.542]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.542]             version = "1.8"), class = "FutureResult")
[17:03:15.542]     }, finally = {
[17:03:15.542]         if (!identical(...future.workdir, getwd())) 
[17:03:15.542]             setwd(...future.workdir)
[17:03:15.542]         {
[17:03:15.542]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.542]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.542]             }
[17:03:15.542]             base::options(...future.oldOptions)
[17:03:15.542]             if (.Platform$OS.type == "windows") {
[17:03:15.542]                 old_names <- names(...future.oldEnvVars)
[17:03:15.542]                 envs <- base::Sys.getenv()
[17:03:15.542]                 names <- names(envs)
[17:03:15.542]                 common <- intersect(names, old_names)
[17:03:15.542]                 added <- setdiff(names, old_names)
[17:03:15.542]                 removed <- setdiff(old_names, names)
[17:03:15.542]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.542]                   envs[common]]
[17:03:15.542]                 NAMES <- toupper(changed)
[17:03:15.542]                 args <- list()
[17:03:15.542]                 for (kk in seq_along(NAMES)) {
[17:03:15.542]                   name <- changed[[kk]]
[17:03:15.542]                   NAME <- NAMES[[kk]]
[17:03:15.542]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.542]                     next
[17:03:15.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.542]                 }
[17:03:15.542]                 NAMES <- toupper(added)
[17:03:15.542]                 for (kk in seq_along(NAMES)) {
[17:03:15.542]                   name <- added[[kk]]
[17:03:15.542]                   NAME <- NAMES[[kk]]
[17:03:15.542]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.542]                     next
[17:03:15.542]                   args[[name]] <- ""
[17:03:15.542]                 }
[17:03:15.542]                 NAMES <- toupper(removed)
[17:03:15.542]                 for (kk in seq_along(NAMES)) {
[17:03:15.542]                   name <- removed[[kk]]
[17:03:15.542]                   NAME <- NAMES[[kk]]
[17:03:15.542]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.542]                     next
[17:03:15.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.542]                 }
[17:03:15.542]                 if (length(args) > 0) 
[17:03:15.542]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.542]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.542]             }
[17:03:15.542]             else {
[17:03:15.542]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.542]             }
[17:03:15.542]             {
[17:03:15.542]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.542]                   0L) {
[17:03:15.542]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.542]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.542]                   base::options(opts)
[17:03:15.542]                 }
[17:03:15.542]                 {
[17:03:15.542]                   {
[17:03:15.542]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:15.542]                     NULL
[17:03:15.542]                   }
[17:03:15.542]                   options(future.plan = NULL)
[17:03:15.542]                   if (is.na(NA_character_)) 
[17:03:15.542]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.542]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.542]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.542]                     .init = FALSE)
[17:03:15.542]                 }
[17:03:15.542]             }
[17:03:15.542]         }
[17:03:15.542]     })
[17:03:15.542]     if (TRUE) {
[17:03:15.542]         base::sink(type = "output", split = FALSE)
[17:03:15.542]         if (TRUE) {
[17:03:15.542]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.542]         }
[17:03:15.542]         else {
[17:03:15.542]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.542]         }
[17:03:15.542]         base::close(...future.stdout)
[17:03:15.542]         ...future.stdout <- NULL
[17:03:15.542]     }
[17:03:15.542]     ...future.result$conditions <- ...future.conditions
[17:03:15.542]     ...future.result$finished <- base::Sys.time()
[17:03:15.542]     ...future.result
[17:03:15.542] }
[17:03:15.575]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.544] assign_globals() ...
[17:03:15.575]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.545] List of 1
[17:03:15.545]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:15.545]   ..$ a: int [1:3] 1 2 3
[17:03:15.545]   ..$ b: int [1:3] 3 2 1
[17:03:15.545]  - attr(*, "where")=List of 1
[17:03:15.545]   ..$ data:<environment: R_EmptyEnv> 
[17:03:15.545]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.545]  - attr(*, "resolved")= logi FALSE
[17:03:15.545]  - attr(*, "total_size")= num 128
[17:03:15.545]  - attr(*, "already-done")= logi TRUE
[17:03:15.576]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.548] - copied ‘data’ to environment
[17:03:15.576]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.548] assign_globals() ... done
[17:03:15.576]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.548] requestCore(): workers = 2
[17:03:15.576]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.550] MulticoreFuture started
[17:03:15.576]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.550] - Launch lazy future ... done
[17:03:15.576]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.551] run() for ‘MulticoreFuture’ ... done
[17:03:15.577]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.551] result() for MulticoreFuture ...
[17:03:15.577]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.560] result() for MulticoreFuture ...
[17:03:15.577]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.560] result() for MulticoreFuture ... done
[17:03:15.577]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.561] result() for MulticoreFuture ... done
[17:03:15.577]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.561] result() for MulticoreFuture ...
[17:03:15.577]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.561] result() for MulticoreFuture ... done
[17:03:15.577] signalConditions() ... done
- plan(list('sequential', 'multicore')) ... DONE
- plan(list('sequential', 'multisession')) ...
[17:03:15.578] plan(): Setting new future strategy stack:
[17:03:15.578] List of future strategies:
[17:03:15.578] 1. sequential:
[17:03:15.578]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:15.578]    - tweaked: FALSE
[17:03:15.578]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.578] 2. multisession:
[17:03:15.578]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:15.578]    - tweaked: FALSE
[17:03:15.578]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.579] plan(): nbrOfWorkers() = 1
[17:03:15.579] getGlobalsAndPackages() ...
[17:03:15.579] Searching for globals...
[17:03:15.597] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:15.598] Searching for globals ... DONE
[17:03:15.598] Resolving globals: FALSE
[17:03:15.599] The total size of the 2 globals is 55.41 KiB (56736 bytes)
[17:03:15.599] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.29 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:15.599] - globals: [2] ‘nested’, ‘strategy2’
[17:03:15.599] - packages: [1] ‘future’
[17:03:15.600] getGlobalsAndPackages() ... DONE
[17:03:15.600] run() for ‘Future’ ...
[17:03:15.600] - state: ‘created’
[17:03:15.600] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:15.600] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:15.600] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:15.601]   - Field: ‘label’
[17:03:15.601]   - Field: ‘local’
[17:03:15.601]   - Field: ‘owner’
[17:03:15.601]   - Field: ‘envir’
[17:03:15.601]   - Field: ‘packages’
[17:03:15.601]   - Field: ‘gc’
[17:03:15.601]   - Field: ‘conditions’
[17:03:15.601]   - Field: ‘expr’
[17:03:15.601]   - Field: ‘uuid’
[17:03:15.601]   - Field: ‘seed’
[17:03:15.601]   - Field: ‘version’
[17:03:15.602]   - Field: ‘result’
[17:03:15.602]   - Field: ‘asynchronous’
[17:03:15.602]   - Field: ‘calls’
[17:03:15.602]   - Field: ‘globals’
[17:03:15.602]   - Field: ‘stdout’
[17:03:15.602]   - Field: ‘earlySignal’
[17:03:15.602]   - Field: ‘lazy’
[17:03:15.602]   - Field: ‘state’
[17:03:15.602] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:15.602] - Launch lazy future ...
[17:03:15.603] Packages needed by the future expression (n = 1): ‘future’
[17:03:15.603] Packages needed by future strategies (n = 1): ‘future’
[17:03:15.603] {
[17:03:15.603]     {
[17:03:15.603]         {
[17:03:15.603]             ...future.startTime <- base::Sys.time()
[17:03:15.603]             {
[17:03:15.603]                 {
[17:03:15.603]                   {
[17:03:15.603]                     {
[17:03:15.603]                       base::local({
[17:03:15.603]                         has_future <- base::requireNamespace("future", 
[17:03:15.603]                           quietly = TRUE)
[17:03:15.603]                         if (has_future) {
[17:03:15.603]                           ns <- base::getNamespace("future")
[17:03:15.603]                           version <- ns[[".package"]][["version"]]
[17:03:15.603]                           if (is.null(version)) 
[17:03:15.603]                             version <- utils::packageVersion("future")
[17:03:15.603]                         }
[17:03:15.603]                         else {
[17:03:15.603]                           version <- NULL
[17:03:15.603]                         }
[17:03:15.603]                         if (!has_future || version < "1.8.0") {
[17:03:15.603]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:15.603]                             "", base::R.version$version.string), 
[17:03:15.603]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:15.603]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:15.603]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:15.603]                               "release", "version")], collapse = " "), 
[17:03:15.603]                             hostname = base::Sys.info()[["nodename"]])
[17:03:15.603]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:15.603]                             info)
[17:03:15.603]                           info <- base::paste(info, collapse = "; ")
[17:03:15.603]                           if (!has_future) {
[17:03:15.603]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:15.603]                               info)
[17:03:15.603]                           }
[17:03:15.603]                           else {
[17:03:15.603]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:15.603]                               info, version)
[17:03:15.603]                           }
[17:03:15.603]                           base::stop(msg)
[17:03:15.603]                         }
[17:03:15.603]                       })
[17:03:15.603]                     }
[17:03:15.603]                     base::local({
[17:03:15.603]                       for (pkg in "future") {
[17:03:15.603]                         base::loadNamespace(pkg)
[17:03:15.603]                         base::library(pkg, character.only = TRUE)
[17:03:15.603]                       }
[17:03:15.603]                     })
[17:03:15.603]                   }
[17:03:15.603]                   ...future.strategy.old <- future::plan("list")
[17:03:15.603]                   options(future.plan = NULL)
[17:03:15.603]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.603]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:15.603]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:15.603]                     envir = parent.frame()) 
[17:03:15.603]                   {
[17:03:15.603]                     if (is.function(workers)) 
[17:03:15.603]                       workers <- workers()
[17:03:15.603]                     workers <- structure(as.integer(workers), 
[17:03:15.603]                       class = class(workers))
[17:03:15.603]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:15.603]                       workers >= 1)
[17:03:15.603]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:15.603]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:15.603]                     }
[17:03:15.603]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:15.603]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:15.603]                       envir = envir)
[17:03:15.603]                     if (!future$lazy) 
[17:03:15.603]                       future <- run(future)
[17:03:15.603]                     invisible(future)
[17:03:15.603]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:15.603]                 }
[17:03:15.603]                 ...future.workdir <- getwd()
[17:03:15.603]             }
[17:03:15.603]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:15.603]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:15.603]         }
[17:03:15.603]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:15.603]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:15.603]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:15.603]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:15.603]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:15.603]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:15.603]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:15.603]             base::names(...future.oldOptions))
[17:03:15.603]     }
[17:03:15.603]     if (FALSE) {
[17:03:15.603]     }
[17:03:15.603]     else {
[17:03:15.603]         if (TRUE) {
[17:03:15.603]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:15.603]                 open = "w")
[17:03:15.603]         }
[17:03:15.603]         else {
[17:03:15.603]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:15.603]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:15.603]         }
[17:03:15.603]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:15.603]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:15.603]             base::sink(type = "output", split = FALSE)
[17:03:15.603]             base::close(...future.stdout)
[17:03:15.603]         }, add = TRUE)
[17:03:15.603]     }
[17:03:15.603]     ...future.frame <- base::sys.nframe()
[17:03:15.603]     ...future.conditions <- base::list()
[17:03:15.603]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:15.603]     if (FALSE) {
[17:03:15.603]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:15.603]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:15.603]     }
[17:03:15.603]     ...future.result <- base::tryCatch({
[17:03:15.603]         base::withCallingHandlers({
[17:03:15.603]             ...future.value <- base::withVisible(base::local({
[17:03:15.603]                 a <- 1L
[17:03:15.603]                 plan_a <- unclass(future::plan("list"))
[17:03:15.603]                 nested_a <- nested[-1]
[17:03:15.603]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:15.603]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.603]                   strategy2))
[17:03:15.603]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:15.603]                   "init") <- NULL
[17:03:15.603]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:15.603]                   "init") <- NULL
[17:03:15.603]                 stopifnot(all.equal(plan_a, nested_a))
[17:03:15.603]                 y %<-% {
[17:03:15.603]                   b <- 2L
[17:03:15.603]                   plan_b <- future::plan("list")
[17:03:15.603]                   nested_b <- nested_a[-1]
[17:03:15.603]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:15.603]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:15.603]                     "sequential"))
[17:03:15.603]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:15.603]                     b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:15.603]                 }
[17:03:15.603]                 y
[17:03:15.603]             }))
[17:03:15.603]             future::FutureResult(value = ...future.value$value, 
[17:03:15.603]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.603]                   ...future.rng), globalenv = if (FALSE) 
[17:03:15.603]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:15.603]                     ...future.globalenv.names))
[17:03:15.603]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:15.603]         }, condition = base::local({
[17:03:15.603]             c <- base::c
[17:03:15.603]             inherits <- base::inherits
[17:03:15.603]             invokeRestart <- base::invokeRestart
[17:03:15.603]             length <- base::length
[17:03:15.603]             list <- base::list
[17:03:15.603]             seq.int <- base::seq.int
[17:03:15.603]             signalCondition <- base::signalCondition
[17:03:15.603]             sys.calls <- base::sys.calls
[17:03:15.603]             `[[` <- base::`[[`
[17:03:15.603]             `+` <- base::`+`
[17:03:15.603]             `<<-` <- base::`<<-`
[17:03:15.603]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:15.603]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:15.603]                   3L)]
[17:03:15.603]             }
[17:03:15.603]             function(cond) {
[17:03:15.603]                 is_error <- inherits(cond, "error")
[17:03:15.603]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:15.603]                   NULL)
[17:03:15.603]                 if (is_error) {
[17:03:15.603]                   sessionInformation <- function() {
[17:03:15.603]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:15.603]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:15.603]                       search = base::search(), system = base::Sys.info())
[17:03:15.603]                   }
[17:03:15.603]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.603]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:15.603]                     cond$call), session = sessionInformation(), 
[17:03:15.603]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:15.603]                   signalCondition(cond)
[17:03:15.603]                 }
[17:03:15.603]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:15.603]                 "immediateCondition"))) {
[17:03:15.603]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:15.603]                   ...future.conditions[[length(...future.conditions) + 
[17:03:15.603]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:15.603]                   if (TRUE && !signal) {
[17:03:15.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.603]                     {
[17:03:15.603]                       inherits <- base::inherits
[17:03:15.603]                       invokeRestart <- base::invokeRestart
[17:03:15.603]                       is.null <- base::is.null
[17:03:15.603]                       muffled <- FALSE
[17:03:15.603]                       if (inherits(cond, "message")) {
[17:03:15.603]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.603]                         if (muffled) 
[17:03:15.603]                           invokeRestart("muffleMessage")
[17:03:15.603]                       }
[17:03:15.603]                       else if (inherits(cond, "warning")) {
[17:03:15.603]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.603]                         if (muffled) 
[17:03:15.603]                           invokeRestart("muffleWarning")
[17:03:15.603]                       }
[17:03:15.603]                       else if (inherits(cond, "condition")) {
[17:03:15.603]                         if (!is.null(pattern)) {
[17:03:15.603]                           computeRestarts <- base::computeRestarts
[17:03:15.603]                           grepl <- base::grepl
[17:03:15.603]                           restarts <- computeRestarts(cond)
[17:03:15.603]                           for (restart in restarts) {
[17:03:15.603]                             name <- restart$name
[17:03:15.603]                             if (is.null(name)) 
[17:03:15.603]                               next
[17:03:15.603]                             if (!grepl(pattern, name)) 
[17:03:15.603]                               next
[17:03:15.603]                             invokeRestart(restart)
[17:03:15.603]                             muffled <- TRUE
[17:03:15.603]                             break
[17:03:15.603]                           }
[17:03:15.603]                         }
[17:03:15.603]                       }
[17:03:15.603]                       invisible(muffled)
[17:03:15.603]                     }
[17:03:15.603]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.603]                   }
[17:03:15.603]                 }
[17:03:15.603]                 else {
[17:03:15.603]                   if (TRUE) {
[17:03:15.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:15.603]                     {
[17:03:15.603]                       inherits <- base::inherits
[17:03:15.603]                       invokeRestart <- base::invokeRestart
[17:03:15.603]                       is.null <- base::is.null
[17:03:15.603]                       muffled <- FALSE
[17:03:15.603]                       if (inherits(cond, "message")) {
[17:03:15.603]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:15.603]                         if (muffled) 
[17:03:15.603]                           invokeRestart("muffleMessage")
[17:03:15.603]                       }
[17:03:15.603]                       else if (inherits(cond, "warning")) {
[17:03:15.603]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:15.603]                         if (muffled) 
[17:03:15.603]                           invokeRestart("muffleWarning")
[17:03:15.603]                       }
[17:03:15.603]                       else if (inherits(cond, "condition")) {
[17:03:15.603]                         if (!is.null(pattern)) {
[17:03:15.603]                           computeRestarts <- base::computeRestarts
[17:03:15.603]                           grepl <- base::grepl
[17:03:15.603]                           restarts <- computeRestarts(cond)
[17:03:15.603]                           for (restart in restarts) {
[17:03:15.603]                             name <- restart$name
[17:03:15.603]                             if (is.null(name)) 
[17:03:15.603]                               next
[17:03:15.603]                             if (!grepl(pattern, name)) 
[17:03:15.603]                               next
[17:03:15.603]                             invokeRestart(restart)
[17:03:15.603]                             muffled <- TRUE
[17:03:15.603]                             break
[17:03:15.603]                           }
[17:03:15.603]                         }
[17:03:15.603]                       }
[17:03:15.603]                       invisible(muffled)
[17:03:15.603]                     }
[17:03:15.603]                     muffleCondition(cond, pattern = "^muffle")
[17:03:15.603]                   }
[17:03:15.603]                 }
[17:03:15.603]             }
[17:03:15.603]         }))
[17:03:15.603]     }, error = function(ex) {
[17:03:15.603]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:15.603]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:15.603]                 ...future.rng), started = ...future.startTime, 
[17:03:15.603]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:15.603]             version = "1.8"), class = "FutureResult")
[17:03:15.603]     }, finally = {
[17:03:15.603]         if (!identical(...future.workdir, getwd())) 
[17:03:15.603]             setwd(...future.workdir)
[17:03:15.603]         {
[17:03:15.603]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:15.603]                 ...future.oldOptions$nwarnings <- NULL
[17:03:15.603]             }
[17:03:15.603]             base::options(...future.oldOptions)
[17:03:15.603]             if (.Platform$OS.type == "windows") {
[17:03:15.603]                 old_names <- names(...future.oldEnvVars)
[17:03:15.603]                 envs <- base::Sys.getenv()
[17:03:15.603]                 names <- names(envs)
[17:03:15.603]                 common <- intersect(names, old_names)
[17:03:15.603]                 added <- setdiff(names, old_names)
[17:03:15.603]                 removed <- setdiff(old_names, names)
[17:03:15.603]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:15.603]                   envs[common]]
[17:03:15.603]                 NAMES <- toupper(changed)
[17:03:15.603]                 args <- list()
[17:03:15.603]                 for (kk in seq_along(NAMES)) {
[17:03:15.603]                   name <- changed[[kk]]
[17:03:15.603]                   NAME <- NAMES[[kk]]
[17:03:15.603]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.603]                     next
[17:03:15.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.603]                 }
[17:03:15.603]                 NAMES <- toupper(added)
[17:03:15.603]                 for (kk in seq_along(NAMES)) {
[17:03:15.603]                   name <- added[[kk]]
[17:03:15.603]                   NAME <- NAMES[[kk]]
[17:03:15.603]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.603]                     next
[17:03:15.603]                   args[[name]] <- ""
[17:03:15.603]                 }
[17:03:15.603]                 NAMES <- toupper(removed)
[17:03:15.603]                 for (kk in seq_along(NAMES)) {
[17:03:15.603]                   name <- removed[[kk]]
[17:03:15.603]                   NAME <- NAMES[[kk]]
[17:03:15.603]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:15.603]                     next
[17:03:15.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:15.603]                 }
[17:03:15.603]                 if (length(args) > 0) 
[17:03:15.603]                   base::do.call(base::Sys.setenv, args = args)
[17:03:15.603]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:15.603]             }
[17:03:15.603]             else {
[17:03:15.603]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:15.603]             }
[17:03:15.603]             {
[17:03:15.603]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:15.603]                   0L) {
[17:03:15.603]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:15.603]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:15.603]                   base::options(opts)
[17:03:15.603]                 }
[17:03:15.603]                 {
[17:03:15.603]                   {
[17:03:15.603]                     NULL
[17:03:15.603]                     RNGkind("Mersenne-Twister")
[17:03:15.603]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:15.603]                       inherits = FALSE)
[17:03:15.603]                   }
[17:03:15.603]                   options(future.plan = NULL)
[17:03:15.603]                   if (is.na(NA_character_)) 
[17:03:15.603]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:15.603]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:15.603]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:15.603]                     .init = FALSE)
[17:03:15.603]                 }
[17:03:15.603]             }
[17:03:15.603]         }
[17:03:15.603]     })
[17:03:15.603]     if (TRUE) {
[17:03:15.603]         base::sink(type = "output", split = FALSE)
[17:03:15.603]         if (TRUE) {
[17:03:15.603]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:15.603]         }
[17:03:15.603]         else {
[17:03:15.603]             ...future.result["stdout"] <- base::list(NULL)
[17:03:15.603]         }
[17:03:15.603]         base::close(...future.stdout)
[17:03:15.603]         ...future.stdout <- NULL
[17:03:15.603]     }
[17:03:15.603]     ...future.result$conditions <- ...future.conditions
[17:03:15.603]     ...future.result$finished <- base::Sys.time()
[17:03:15.603]     ...future.result
[17:03:15.603] }
[17:03:15.605] assign_globals() ...
[17:03:15.605] List of 2
[17:03:15.605]  $ nested   :List of 2
[17:03:15.605]   ..$ a:function (..., envir = parent.frame())  
[17:03:15.605]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:15.605]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.605]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:15.605]     envir = parent.frame())  
[17:03:15.605]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[17:03:15.605]   .. ..- attr(*, "init")= logi TRUE
[17:03:15.605]   .. ..- attr(*, "untweakable")= chr "persistent"
[17:03:15.605]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:15.605]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:15.605]  $ strategy2: chr "multisession"
[17:03:15.605]  - attr(*, "where")=List of 2
[17:03:15.605]   ..$ nested   :<environment: R_EmptyEnv> 
[17:03:15.605]   ..$ strategy2:<environment: R_EmptyEnv> 
[17:03:15.605]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:15.605]  - attr(*, "resolved")= logi FALSE
[17:03:15.605]  - attr(*, "total_size")= num 56736
[17:03:15.605]  - attr(*, "already-done")= logi TRUE
[17:03:15.610] - copied ‘nested’ to environment
[17:03:15.610] - copied ‘strategy2’ to environment
[17:03:15.611] assign_globals() ... done
[17:03:15.611] plan(): Setting new future strategy stack:
[17:03:15.611] List of future strategies:
[17:03:15.611] 1. multisession:
[17:03:15.611]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:15.611]    - tweaked: FALSE
[17:03:15.611]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:15.615] plan(): nbrOfWorkers() = 2
[17:03:16.339] plan(): Setting new future strategy stack:
[17:03:16.339] List of future strategies:
[17:03:16.339] 1. sequential:
[17:03:16.339]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.339]    - tweaked: FALSE
[17:03:16.339]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.339] 2. multisession:
[17:03:16.339]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.339]    - tweaked: FALSE
[17:03:16.339]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.339] plan(): nbrOfWorkers() = 1
[17:03:16.340] SequentialFuture started (and completed)
[17:03:16.340] signalConditions() ...
[17:03:16.340]  - include = ‘immediateCondition’
[17:03:16.340]  - exclude = 
[17:03:16.340]  - resignal = FALSE
[17:03:16.340]  - Number of conditions: 98
[17:03:16.340] signalConditions() ... done
[17:03:16.341] - Launch lazy future ... done
[17:03:16.341] run() for ‘SequentialFuture’ ... done
[17:03:16.341] signalConditions() ...
[17:03:16.341]  - include = ‘immediateCondition’
[17:03:16.341]  - exclude = 
[17:03:16.341]  - resignal = FALSE
[17:03:16.341]  - Number of conditions: 98
[17:03:16.342] signalConditions() ... done
[17:03:16.342] Future state: ‘finished’
[17:03:16.342] signalConditions() ...
[17:03:16.342]  - include = ‘condition’
[17:03:16.342]  - exclude = ‘immediateCondition’
[17:03:16.342]  - resignal = TRUE
[17:03:16.342]  - Number of conditions: 98
[17:03:16.342]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.617] getGlobalsAndPackages() ...
[17:03:16.343]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.617] Searching for globals...
[17:03:16.343]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.636] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[17:03:16.343]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.636] Searching for globals ... DONE
[17:03:16.343]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.636] Resolving globals: FALSE
[17:03:16.343]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.637] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[17:03:16.343]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.637] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[17:03:16.344]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.638] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[17:03:16.344]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.638] 
[17:03:16.344]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.638] getGlobalsAndPackages() ... DONE
[17:03:16.344]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.638] run() for ‘Future’ ...
[17:03:16.344]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.638] - state: ‘created’
[17:03:16.344]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.638] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.345]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.644] [local output] makeClusterPSOCK() ...
[17:03:16.345]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.685] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:16.345]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.686] [local output] Base port: 11779
[17:03:16.345]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.686] [local output] Getting setup options for 2 cluster nodes ...
[17:03:16.345]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.686] [local output]  - Node 1 of 2 ...
[17:03:16.345]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.686] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:16.346]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.687] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9143f201de3.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9143f201de3.pid")'’
[17:03:16.346]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.874] - Possible to infer worker's PID: TRUE
[17:03:16.346]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.874] [local output] Rscript port: 11779

[17:03:16.346]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.874] [local output]  - Node 2 of 2 ...
[17:03:16.346]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.875] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:16.346]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.876] [local output] Rscript port: 11779

[17:03:16.347]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.876] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:16.347]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.876] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:16.347]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.876] [local output] Setting up PSOCK nodes in parallel
[17:03:16.347]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.877] List of 36
[17:03:15.877]  $ worker          : chr "localhost"
[17:03:15.877]   ..- attr(*, "localhost")= logi TRUE
[17:03:15.877]  $ master          : chr "localhost"
[17:03:15.877]  $ port            : int 11779
[17:03:15.877]  $ connectTimeout  : num 120
[17:03:15.877]  $ timeout         : num 2592000
[17:03:15.877]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:15.877]  $ homogeneous     : logi TRUE
[17:03:15.877]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:15.877]  $ rscript_envs    : NULL
[17:03:15.877]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:15.877]  $ rscript_startup : NULL
[17:03:15.877]  $ rscript_sh      : chr "sh"
[17:03:15.877]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:15.877]  $ methods         : logi TRUE
[17:03:15.877]  $ socketOptions   : chr "no-delay"
[17:03:15.877]  $ useXDR          : logi FALSE
[17:03:15.877]  $ outfile         : chr "/dev/null"
[17:03:15.877]  $ renice          : int NA
[17:03:15.877]  $ rshcmd          : NULL
[17:03:15.877]  $ user            : chr(0) 
[17:03:15.877]  $ revtunnel       : logi FALSE
[17:03:15.877]  $ rshlogfile      : NULL
[17:03:15.877]  $ rshopts         : chr(0) 
[17:03:15.877]  $ rank            : int 1
[17:03:15.877]  $ manual          : logi FALSE
[17:03:15.877]  $ dryrun          : logi FALSE
[17:03:15.877]  $ quiet           : logi FALSE
[17:03:15.877]  $ setup_strategy  : chr "parallel"
[17:03:15.877]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:15.877]  $ pidfile         : chr "/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9143f201de3.pid"
[17:03:15.877]  $ rshcmd_label    : NULL
[17:03:15.877]  $ rsh_call        : NULL
[17:03:15.877]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:15.877]  $ localMachine    : logi TRUE
[17:03:15.877]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:15.877]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:15.877]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:15.877]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:15.877]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:15.877]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:15.877]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:15.877]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:15.877]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:15.877]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:15.877]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:15.877]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:15.877]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:15.877]  $ arguments       :List of 28
[17:03:15.877]   ..$ worker          : chr "localhost"
[17:03:15.877]   ..$ master          : NULL
[17:03:15.877]   ..$ port            : int 11779
[17:03:15.877]   ..$ connectTimeout  : num 120
[17:03:15.877]   ..$ timeout         : num 2592000
[17:03:15.877]   ..$ rscript         : NULL
[17:03:15.877]   ..$ homogeneous     : NULL
[17:03:15.877]   ..$ rscript_args    : NULL
[17:03:15.877]   ..$ rscript_envs    : NULL
[17:03:15.877]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:15.877]   ..$ rscript_startup : NULL
[17:03:15.877]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:15.877]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:15.877]   ..$ methods         : logi TRUE
[17:03:15.877]   ..$ socketOptions   : chr "no-delay"
[17:03:15.877]   ..$ useXDR          : logi FALSE
[17:03:15.877]   ..$ outfile         : chr "/dev/null"
[17:03:15.877]   ..$ renice          : int NA
[17:03:15.877]   ..$ rshcmd          : NULL
[17:03:15.877]   ..$ user            : NULL
[17:03:15.877]   ..$ revtunnel       : logi NA
[17:03:15.877]   ..$ rshlogfile      : NULL
[17:03:15.877]   ..$ rshopts         : NULL
[17:03:15.877]   ..$ rank            : int 1
[17:03:15.877]   ..$ manual          : logi FALSE
[17:03:15.877]   ..$ dryrun          : logi FALSE
[17:03:15.877]   ..$ quiet           : logi FALSE
[17:03:15.877]   ..$ setup_strategy  : chr "parallel"
[17:03:15.877]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:16.347]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.893] [local output] System call to launch all workers:
[17:03:16.347]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.893] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9143f201de3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11779 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:16.348]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.893] [local output] Starting PSOCK main server
[17:03:16.348]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.899] [local output] Workers launched
[17:03:16.348]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.899] [local output] Waiting for workers to connect back
[17:03:16.348]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:15.899]  - [local output] 0 workers out of 2 ready
[17:03:16.348]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.138]  - [local output] 0 workers out of 2 ready
[17:03:16.348]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.138]  - [local output] 1 workers out of 2 ready
[17:03:16.349]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.145]  - [local output] 1 workers out of 2 ready
[17:03:16.349]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.145]  - [local output] 2 workers out of 2 ready
[17:03:16.349]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.145] [local output] Launching of workers completed
[17:03:16.349]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.145] [local output] Collecting session information from workers
[17:03:16.349]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.146] [local output]  - Worker #1 of 2
[17:03:16.349]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.147] [local output]  - Worker #2 of 2
[17:03:16.350]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.147] [local output] makeClusterPSOCK() ... done
[17:03:16.350]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.350]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:16.350]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158]   - Field: ‘node’
[17:03:16.350]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158]   - Field: ‘label’
[17:03:16.350]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158]   - Field: ‘local’
[17:03:16.350]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158]   - Field: ‘owner’
[17:03:16.351]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158]   - Field: ‘envir’
[17:03:16.351]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.158]   - Field: ‘workers’
[17:03:16.351]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘packages’
[17:03:16.351]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘gc’
[17:03:16.351]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘conditions’
[17:03:16.352]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘persistent’
[17:03:16.352]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘expr’
[17:03:16.352]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘uuid’
[17:03:16.352]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘seed’
[17:03:16.352]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.159]   - Field: ‘version’
[17:03:16.352]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘result’
[17:03:16.353]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘asynchronous’
[17:03:16.353]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘calls’
[17:03:16.353]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘globals’
[17:03:16.353]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘stdout’
[17:03:16.353]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘earlySignal’
[17:03:16.353]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.160]   - Field: ‘lazy’
[17:03:16.354]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.161]   - Field: ‘state’
[17:03:16.354]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.161] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:16.354]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.161] - Launch lazy future ...
[17:03:16.354]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.162] Packages needed by the future expression (n = 0): <none>
[17:03:16.354]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.162] Packages needed by future strategies (n = 0): <none>
[17:03:16.354]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.162] {
[17:03:16.162]     {
[17:03:16.162]         {
[17:03:16.162]             ...future.startTime <- base::Sys.time()
[17:03:16.162]             {
[17:03:16.162]                 {
[17:03:16.162]                   {
[17:03:16.162]                     {
[17:03:16.162]                       base::local({
[17:03:16.162]                         has_future <- base::requireNamespace("future", 
[17:03:16.162]                           quietly = TRUE)
[17:03:16.162]                         if (has_future) {
[17:03:16.162]                           ns <- base::getNamespace("future")
[17:03:16.162]                           version <- ns[[".package"]][["version"]]
[17:03:16.162]                           if (is.null(version)) 
[17:03:16.162]                             version <- utils::packageVersion("future")
[17:03:16.162]                         }
[17:03:16.162]                         else {
[17:03:16.162]                           version <- NULL
[17:03:16.162]                         }
[17:03:16.162]                         if (!has_future || version < "1.8.0") {
[17:03:16.162]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.162]                             "", base::R.version$version.string), 
[17:03:16.162]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:16.162]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.162]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.162]                               "release", "version")], collapse = " "), 
[17:03:16.162]                             hostname = base::Sys.info()[["nodename"]])
[17:03:16.162]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.162]                             info)
[17:03:16.162]                           info <- base::paste(info, collapse = "; ")
[17:03:16.162]                           if (!has_future) {
[17:03:16.162]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.162]                               info)
[17:03:16.162]                           }
[17:03:16.162]                           else {
[17:03:16.162]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.162]                               info, version)
[17:03:16.162]                           }
[17:03:16.162]                           base::stop(msg)
[17:03:16.162]                         }
[17:03:16.162]                       })
[17:03:16.162]                     }
[17:03:16.162]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.162]                     base::options(mc.cores = 1L)
[17:03:16.162]                   }
[17:03:16.162]                   ...future.strategy.old <- future::plan("list")
[17:03:16.162]                   options(future.plan = NULL)
[17:03:16.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.162]                 }
[17:03:16.162]                 ...future.workdir <- getwd()
[17:03:16.162]             }
[17:03:16.162]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.162]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.162]         }
[17:03:16.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.162]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.162]             base::names(...future.oldOptions))
[17:03:16.162]     }
[17:03:16.162]     if (FALSE) {
[17:03:16.162]     }
[17:03:16.162]     else {
[17:03:16.162]         if (TRUE) {
[17:03:16.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.162]                 open = "w")
[17:03:16.162]         }
[17:03:16.162]         else {
[17:03:16.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.162]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.162]         }
[17:03:16.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.162]             base::sink(type = "output", split = FALSE)
[17:03:16.162]             base::close(...future.stdout)
[17:03:16.162]         }, add = TRUE)
[17:03:16.162]     }
[17:03:16.162]     ...future.frame <- base::sys.nframe()
[17:03:16.162]     ...future.conditions <- base::list()
[17:03:16.162]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.162]     if (FALSE) {
[17:03:16.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.162]     }
[17:03:16.162]     ...future.result <- base::tryCatch({
[17:03:16.162]         base::withCallingHandlers({
[17:03:16.162]             ...future.value <- base::withVisible(base::local({
[17:03:16.162]                 ...future.makeSendCondition <- base::local({
[17:03:16.162]                   sendCondition <- NULL
[17:03:16.162]                   function(frame = 1L) {
[17:03:16.162]                     if (is.function(sendCondition)) 
[17:03:16.162]                       return(sendCondition)
[17:03:16.162]                     ns <- getNamespace("parallel")
[17:03:16.162]                     if (exists("sendData", mode = "function", 
[17:03:16.162]                       envir = ns)) {
[17:03:16.162]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:16.162]                         envir = ns)
[17:03:16.162]                       envir <- sys.frame(frame)
[17:03:16.162]                       master <- NULL
[17:03:16.162]                       while (!identical(envir, .GlobalEnv) && 
[17:03:16.162]                         !identical(envir, emptyenv())) {
[17:03:16.162]                         if (exists("master", mode = "list", envir = envir, 
[17:03:16.162]                           inherits = FALSE)) {
[17:03:16.162]                           master <- get("master", mode = "list", 
[17:03:16.162]                             envir = envir, inherits = FALSE)
[17:03:16.162]                           if (inherits(master, c("SOCKnode", 
[17:03:16.162]                             "SOCK0node"))) {
[17:03:16.162]                             sendCondition <<- function(cond) {
[17:03:16.162]                               data <- list(type = "VALUE", value = cond, 
[17:03:16.162]                                 success = TRUE)
[17:03:16.162]                               parallel_sendData(master, data)
[17:03:16.162]                             }
[17:03:16.162]                             return(sendCondition)
[17:03:16.162]                           }
[17:03:16.162]                         }
[17:03:16.162]                         frame <- frame + 1L
[17:03:16.162]                         envir <- sys.frame(frame)
[17:03:16.162]                       }
[17:03:16.162]                     }
[17:03:16.162]                     sendCondition <<- function(cond) NULL
[17:03:16.162]                   }
[17:03:16.162]                 })
[17:03:16.162]                 withCallingHandlers({
[17:03:16.162]                   {
[17:03:16.162]                     b <- 2L
[17:03:16.162]                     plan_b <- future::plan("list")
[17:03:16.162]                     nested_b <- nested_a[-1]
[17:03:16.162]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.162]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.162]                       "sequential"))
[17:03:16.162]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.162]                       b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.162]                   }
[17:03:16.162]                 }, immediateCondition = function(cond) {
[17:03:16.162]                   sendCondition <- ...future.makeSendCondition()
[17:03:16.162]                   sendCondition(cond)
[17:03:16.162]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.162]                   {
[17:03:16.162]                     inherits <- base::inherits
[17:03:16.162]                     invokeRestart <- base::invokeRestart
[17:03:16.162]                     is.null <- base::is.null
[17:03:16.162]                     muffled <- FALSE
[17:03:16.162]                     if (inherits(cond, "message")) {
[17:03:16.162]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.162]                       if (muffled) 
[17:03:16.162]                         invokeRestart("muffleMessage")
[17:03:16.162]                     }
[17:03:16.162]                     else if (inherits(cond, "warning")) {
[17:03:16.162]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.162]                       if (muffled) 
[17:03:16.162]                         invokeRestart("muffleWarning")
[17:03:16.162]                     }
[17:03:16.162]                     else if (inherits(cond, "condition")) {
[17:03:16.162]                       if (!is.null(pattern)) {
[17:03:16.162]                         computeRestarts <- base::computeRestarts
[17:03:16.162]                         grepl <- base::grepl
[17:03:16.162]                         restarts <- computeRestarts(cond)
[17:03:16.162]                         for (restart in restarts) {
[17:03:16.162]                           name <- restart$name
[17:03:16.162]                           if (is.null(name)) 
[17:03:16.162]                             next
[17:03:16.162]                           if (!grepl(pattern, name)) 
[17:03:16.162]                             next
[17:03:16.162]                           invokeRestart(restart)
[17:03:16.162]                           muffled <- TRUE
[17:03:16.162]                           break
[17:03:16.162]                         }
[17:03:16.162]                       }
[17:03:16.162]                     }
[17:03:16.162]                     invisible(muffled)
[17:03:16.162]                   }
[17:03:16.162]                   muffleCondition(cond)
[17:03:16.162]                 })
[17:03:16.162]             }))
[17:03:16.162]             future::FutureResult(value = ...future.value$value, 
[17:03:16.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.162]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.162]                     ...future.globalenv.names))
[17:03:16.162]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.162]         }, condition = base::local({
[17:03:16.162]             c <- base::c
[17:03:16.162]             inherits <- base::inherits
[17:03:16.162]             invokeRestart <- base::invokeRestart
[17:03:16.162]             length <- base::length
[17:03:16.162]             list <- base::list
[17:03:16.162]             seq.int <- base::seq.int
[17:03:16.162]             signalCondition <- base::signalCondition
[17:03:16.162]             sys.calls <- base::sys.calls
[17:03:16.162]             `[[` <- base::`[[`
[17:03:16.162]             `+` <- base::`+`
[17:03:16.162]             `<<-` <- base::`<<-`
[17:03:16.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.162]                   3L)]
[17:03:16.162]             }
[17:03:16.162]             function(cond) {
[17:03:16.162]                 is_error <- inherits(cond, "error")
[17:03:16.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.162]                   NULL)
[17:03:16.162]                 if (is_error) {
[17:03:16.162]                   sessionInformation <- function() {
[17:03:16.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.162]                       search = base::search(), system = base::Sys.info())
[17:03:16.162]                   }
[17:03:16.162]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.162]                     cond$call), session = sessionInformation(), 
[17:03:16.162]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.162]                   signalCondition(cond)
[17:03:16.162]                 }
[17:03:16.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.162]                 "immediateCondition"))) {
[17:03:16.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.162]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.162]                   if (TRUE && !signal) {
[17:03:16.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.162]                     {
[17:03:16.162]                       inherits <- base::inherits
[17:03:16.162]                       invokeRestart <- base::invokeRestart
[17:03:16.162]                       is.null <- base::is.null
[17:03:16.162]                       muffled <- FALSE
[17:03:16.162]                       if (inherits(cond, "message")) {
[17:03:16.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.162]                         if (muffled) 
[17:03:16.162]                           invokeRestart("muffleMessage")
[17:03:16.162]                       }
[17:03:16.162]                       else if (inherits(cond, "warning")) {
[17:03:16.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.162]                         if (muffled) 
[17:03:16.162]                           invokeRestart("muffleWarning")
[17:03:16.162]                       }
[17:03:16.162]                       else if (inherits(cond, "condition")) {
[17:03:16.162]                         if (!is.null(pattern)) {
[17:03:16.162]                           computeRestarts <- base::computeRestarts
[17:03:16.162]                           grepl <- base::grepl
[17:03:16.162]                           restarts <- computeRestarts(cond)
[17:03:16.162]                           for (restart in restarts) {
[17:03:16.162]                             name <- restart$name
[17:03:16.162]                             if (is.null(name)) 
[17:03:16.162]                               next
[17:03:16.162]                             if (!grepl(pattern, name)) 
[17:03:16.162]                               next
[17:03:16.162]                             invokeRestart(restart)
[17:03:16.162]                             muffled <- TRUE
[17:03:16.162]                             break
[17:03:16.162]                           }
[17:03:16.162]                         }
[17:03:16.162]                       }
[17:03:16.162]                       invisible(muffled)
[17:03:16.162]                     }
[17:03:16.162]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.162]                   }
[17:03:16.162]                 }
[17:03:16.162]                 else {
[17:03:16.162]                   if (TRUE) {
[17:03:16.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.162]                     {
[17:03:16.162]                       inherits <- base::inherits
[17:03:16.162]                       invokeRestart <- base::invokeRestart
[17:03:16.162]                       is.null <- base::is.null
[17:03:16.162]                       muffled <- FALSE
[17:03:16.162]                       if (inherits(cond, "message")) {
[17:03:16.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.162]                         if (muffled) 
[17:03:16.162]                           invokeRestart("muffleMessage")
[17:03:16.162]                       }
[17:03:16.162]                       else if (inherits(cond, "warning")) {
[17:03:16.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.162]                         if (muffled) 
[17:03:16.162]                           invokeRestart("muffleWarning")
[17:03:16.162]                       }
[17:03:16.162]                       else if (inherits(cond, "condition")) {
[17:03:16.162]                         if (!is.null(pattern)) {
[17:03:16.162]                           computeRestarts <- base::computeRestarts
[17:03:16.162]                           grepl <- base::grepl
[17:03:16.162]                           restarts <- computeRestarts(cond)
[17:03:16.162]                           for (restart in restarts) {
[17:03:16.162]                             name <- restart$name
[17:03:16.162]                             if (is.null(name)) 
[17:03:16.162]                               next
[17:03:16.162]                             if (!grepl(pattern, name)) 
[17:03:16.162]                               next
[17:03:16.162]                             invokeRestart(restart)
[17:03:16.162]                             muffled <- TRUE
[17:03:16.162]                             break
[17:03:16.162]                           }
[17:03:16.162]                         }
[17:03:16.162]                       }
[17:03:16.162]                       invisible(muffled)
[17:03:16.162]                     }
[17:03:16.162]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.162]                   }
[17:03:16.162]                 }
[17:03:16.162]             }
[17:03:16.162]         }))
[17:03:16.162]     }, error = function(ex) {
[17:03:16.162]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.162]                 ...future.rng), started = ...future.startTime, 
[17:03:16.162]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.162]             version = "1.8"), class = "FutureResult")
[17:03:16.162]     }, finally = {
[17:03:16.162]         if (!identical(...future.workdir, getwd())) 
[17:03:16.162]             setwd(...future.workdir)
[17:03:16.162]         {
[17:03:16.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.162]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.162]             }
[17:03:16.162]             base::options(...future.oldOptions)
[17:03:16.162]             if (.Platform$OS.type == "windows") {
[17:03:16.162]                 old_names <- names(...future.oldEnvVars)
[17:03:16.162]                 envs <- base::Sys.getenv()
[17:03:16.162]                 names <- names(envs)
[17:03:16.162]                 common <- intersect(names, old_names)
[17:03:16.162]                 added <- setdiff(names, old_names)
[17:03:16.162]                 removed <- setdiff(old_names, names)
[17:03:16.162]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.162]                   envs[common]]
[17:03:16.162]                 NAMES <- toupper(changed)
[17:03:16.162]                 args <- list()
[17:03:16.162]                 for (kk in seq_along(NAMES)) {
[17:03:16.162]                   name <- changed[[kk]]
[17:03:16.162]                   NAME <- NAMES[[kk]]
[17:03:16.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.162]                     next
[17:03:16.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.162]                 }
[17:03:16.162]                 NAMES <- toupper(added)
[17:03:16.162]                 for (kk in seq_along(NAMES)) {
[17:03:16.162]                   name <- added[[kk]]
[17:03:16.162]                   NAME <- NAMES[[kk]]
[17:03:16.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.162]                     next
[17:03:16.162]                   args[[name]] <- ""
[17:03:16.162]                 }
[17:03:16.162]                 NAMES <- toupper(removed)
[17:03:16.162]                 for (kk in seq_along(NAMES)) {
[17:03:16.162]                   name <- removed[[kk]]
[17:03:16.162]                   NAME <- NAMES[[kk]]
[17:03:16.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.162]                     next
[17:03:16.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.162]                 }
[17:03:16.162]                 if (length(args) > 0) 
[17:03:16.162]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.162]             }
[17:03:16.162]             else {
[17:03:16.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.162]             }
[17:03:16.162]             {
[17:03:16.162]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.162]                   0L) {
[17:03:16.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.162]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.162]                   base::options(opts)
[17:03:16.162]                 }
[17:03:16.162]                 {
[17:03:16.162]                   {
[17:03:16.162]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.162]                     NULL
[17:03:16.162]                   }
[17:03:16.162]                   options(future.plan = NULL)
[17:03:16.162]                   if (is.na(NA_character_)) 
[17:03:16.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.162]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.162]                     .init = FALSE)
[17:03:16.162]                 }
[17:03:16.162]             }
[17:03:16.162]         }
[17:03:16.162]     })
[17:03:16.162]     if (TRUE) {
[17:03:16.162]         base::sink(type = "output", split = FALSE)
[17:03:16.162]         if (TRUE) {
[17:03:16.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.162]         }
[17:03:16.162]         else {
[17:03:16.162]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.162]         }
[17:03:16.162]         base::close(...future.stdout)
[17:03:16.162]         ...future.stdout <- NULL
[17:03:16.162]     }
[17:03:16.162]     ...future.result$conditions <- ...future.conditions
[17:03:16.162]     ...future.result$finished <- base::Sys.time()
[17:03:16.162]     ...future.result
[17:03:16.162] }
[17:03:16.355]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.213] Exporting 3 global objects (87.82 KiB) to cluster node #1 ...
[17:03:16.355]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.214] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ...
[17:03:16.355]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.214] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ... DONE
[17:03:16.355]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.215] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:03:16.355]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.215] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:03:16.355]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.215] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ...
[17:03:16.356]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.260] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ... DONE
[17:03:16.356]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.260] Exporting 3 global objects (87.82 KiB) to cluster node #1 ... DONE
[17:03:16.356]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.261] MultisessionFuture started
[17:03:16.356]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.261] - Launch lazy future ... done
[17:03:16.356]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.261] run() for ‘MultisessionFuture’ ... done
[17:03:16.357]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.261] result() for ClusterFuture ...
[17:03:16.357]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.262] receiveMessageFromWorker() for ClusterFuture ...
[17:03:16.357]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.262] - Validating connection of MultisessionFuture
[17:03:16.357]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.336] - received message: FutureResult
[17:03:16.357]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] - Received FutureResult
[17:03:16.358]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] - Erased future from FutureRegistry
[17:03:16.358]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] result() for ClusterFuture ...
[17:03:16.358]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] - result already collected: FutureResult
[17:03:16.358]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] result() for ClusterFuture ... done
[17:03:16.358]  - Condition #94: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:16.358]  - Condition #95: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.337] result() for ClusterFuture ... done
[17:03:16.359]  - Condition #96: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.338] result() for ClusterFuture ...
[17:03:16.359]  - Condition #97: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.338] - result already collected: FutureResult
[17:03:16.359]  - Condition #98: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.338] result() for ClusterFuture ... done
[17:03:16.359] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.366] getGlobalsAndPackages() ...
[17:03:16.366] Searching for globals...
[17:03:16.368] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.368] Searching for globals ... DONE
[17:03:16.368] Resolving globals: FALSE
[17:03:16.369] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.369] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.369] - globals: [1] ‘data’
[17:03:16.369] - packages: [1] ‘future’
[17:03:16.369] getGlobalsAndPackages() ... DONE
[17:03:16.370] run() for ‘Future’ ...
[17:03:16.370] - state: ‘created’
[17:03:16.370] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:16.370] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:16.370] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:16.371]   - Field: ‘label’
[17:03:16.371]   - Field: ‘local’
[17:03:16.371]   - Field: ‘owner’
[17:03:16.371]   - Field: ‘envir’
[17:03:16.371]   - Field: ‘packages’
[17:03:16.371]   - Field: ‘gc’
[17:03:16.371]   - Field: ‘conditions’
[17:03:16.371]   - Field: ‘expr’
[17:03:16.372]   - Field: ‘uuid’
[17:03:16.372]   - Field: ‘seed’
[17:03:16.372]   - Field: ‘version’
[17:03:16.372]   - Field: ‘result’
[17:03:16.372]   - Field: ‘asynchronous’
[17:03:16.372]   - Field: ‘calls’
[17:03:16.372]   - Field: ‘globals’
[17:03:16.372]   - Field: ‘stdout’
[17:03:16.373]   - Field: ‘earlySignal’
[17:03:16.373]   - Field: ‘lazy’
[17:03:16.373]   - Field: ‘state’
[17:03:16.373] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:16.373] - Launch lazy future ...
[17:03:16.373] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.373] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.374] {
[17:03:16.374]     {
[17:03:16.374]         {
[17:03:16.374]             ...future.startTime <- base::Sys.time()
[17:03:16.374]             {
[17:03:16.374]                 {
[17:03:16.374]                   {
[17:03:16.374]                     {
[17:03:16.374]                       base::local({
[17:03:16.374]                         has_future <- base::requireNamespace("future", 
[17:03:16.374]                           quietly = TRUE)
[17:03:16.374]                         if (has_future) {
[17:03:16.374]                           ns <- base::getNamespace("future")
[17:03:16.374]                           version <- ns[[".package"]][["version"]]
[17:03:16.374]                           if (is.null(version)) 
[17:03:16.374]                             version <- utils::packageVersion("future")
[17:03:16.374]                         }
[17:03:16.374]                         else {
[17:03:16.374]                           version <- NULL
[17:03:16.374]                         }
[17:03:16.374]                         if (!has_future || version < "1.8.0") {
[17:03:16.374]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.374]                             "", base::R.version$version.string), 
[17:03:16.374]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:16.374]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.374]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.374]                               "release", "version")], collapse = " "), 
[17:03:16.374]                             hostname = base::Sys.info()[["nodename"]])
[17:03:16.374]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.374]                             info)
[17:03:16.374]                           info <- base::paste(info, collapse = "; ")
[17:03:16.374]                           if (!has_future) {
[17:03:16.374]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.374]                               info)
[17:03:16.374]                           }
[17:03:16.374]                           else {
[17:03:16.374]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.374]                               info, version)
[17:03:16.374]                           }
[17:03:16.374]                           base::stop(msg)
[17:03:16.374]                         }
[17:03:16.374]                       })
[17:03:16.374]                     }
[17:03:16.374]                     base::local({
[17:03:16.374]                       for (pkg in "future") {
[17:03:16.374]                         base::loadNamespace(pkg)
[17:03:16.374]                         base::library(pkg, character.only = TRUE)
[17:03:16.374]                       }
[17:03:16.374]                     })
[17:03:16.374]                   }
[17:03:16.374]                   ...future.strategy.old <- future::plan("list")
[17:03:16.374]                   options(future.plan = NULL)
[17:03:16.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.374]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:16.374]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:16.374]                     envir = parent.frame()) 
[17:03:16.374]                   {
[17:03:16.374]                     if (is.function(workers)) 
[17:03:16.374]                       workers <- workers()
[17:03:16.374]                     workers <- structure(as.integer(workers), 
[17:03:16.374]                       class = class(workers))
[17:03:16.374]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:16.374]                       workers >= 1)
[17:03:16.374]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:16.374]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:16.374]                     }
[17:03:16.374]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:16.374]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:16.374]                       envir = envir)
[17:03:16.374]                     if (!future$lazy) 
[17:03:16.374]                       future <- run(future)
[17:03:16.374]                     invisible(future)
[17:03:16.374]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.374]                 }
[17:03:16.374]                 ...future.workdir <- getwd()
[17:03:16.374]             }
[17:03:16.374]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.374]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.374]         }
[17:03:16.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.374]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.374]             base::names(...future.oldOptions))
[17:03:16.374]     }
[17:03:16.374]     if (FALSE) {
[17:03:16.374]     }
[17:03:16.374]     else {
[17:03:16.374]         if (TRUE) {
[17:03:16.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.374]                 open = "w")
[17:03:16.374]         }
[17:03:16.374]         else {
[17:03:16.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.374]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.374]         }
[17:03:16.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.374]             base::sink(type = "output", split = FALSE)
[17:03:16.374]             base::close(...future.stdout)
[17:03:16.374]         }, add = TRUE)
[17:03:16.374]     }
[17:03:16.374]     ...future.frame <- base::sys.nframe()
[17:03:16.374]     ...future.conditions <- base::list()
[17:03:16.374]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.374]     if (FALSE) {
[17:03:16.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.374]     }
[17:03:16.374]     ...future.result <- base::tryCatch({
[17:03:16.374]         base::withCallingHandlers({
[17:03:16.374]             ...future.value <- base::withVisible(base::local({
[17:03:16.374]                 value(future(subset(data, a == 2)))
[17:03:16.374]             }))
[17:03:16.374]             future::FutureResult(value = ...future.value$value, 
[17:03:16.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.374]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.374]                     ...future.globalenv.names))
[17:03:16.374]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.374]         }, condition = base::local({
[17:03:16.374]             c <- base::c
[17:03:16.374]             inherits <- base::inherits
[17:03:16.374]             invokeRestart <- base::invokeRestart
[17:03:16.374]             length <- base::length
[17:03:16.374]             list <- base::list
[17:03:16.374]             seq.int <- base::seq.int
[17:03:16.374]             signalCondition <- base::signalCondition
[17:03:16.374]             sys.calls <- base::sys.calls
[17:03:16.374]             `[[` <- base::`[[`
[17:03:16.374]             `+` <- base::`+`
[17:03:16.374]             `<<-` <- base::`<<-`
[17:03:16.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.374]                   3L)]
[17:03:16.374]             }
[17:03:16.374]             function(cond) {
[17:03:16.374]                 is_error <- inherits(cond, "error")
[17:03:16.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.374]                   NULL)
[17:03:16.374]                 if (is_error) {
[17:03:16.374]                   sessionInformation <- function() {
[17:03:16.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.374]                       search = base::search(), system = base::Sys.info())
[17:03:16.374]                   }
[17:03:16.374]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.374]                     cond$call), session = sessionInformation(), 
[17:03:16.374]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.374]                   signalCondition(cond)
[17:03:16.374]                 }
[17:03:16.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.374]                 "immediateCondition"))) {
[17:03:16.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.374]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.374]                   if (TRUE && !signal) {
[17:03:16.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.374]                     {
[17:03:16.374]                       inherits <- base::inherits
[17:03:16.374]                       invokeRestart <- base::invokeRestart
[17:03:16.374]                       is.null <- base::is.null
[17:03:16.374]                       muffled <- FALSE
[17:03:16.374]                       if (inherits(cond, "message")) {
[17:03:16.374]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.374]                         if (muffled) 
[17:03:16.374]                           invokeRestart("muffleMessage")
[17:03:16.374]                       }
[17:03:16.374]                       else if (inherits(cond, "warning")) {
[17:03:16.374]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.374]                         if (muffled) 
[17:03:16.374]                           invokeRestart("muffleWarning")
[17:03:16.374]                       }
[17:03:16.374]                       else if (inherits(cond, "condition")) {
[17:03:16.374]                         if (!is.null(pattern)) {
[17:03:16.374]                           computeRestarts <- base::computeRestarts
[17:03:16.374]                           grepl <- base::grepl
[17:03:16.374]                           restarts <- computeRestarts(cond)
[17:03:16.374]                           for (restart in restarts) {
[17:03:16.374]                             name <- restart$name
[17:03:16.374]                             if (is.null(name)) 
[17:03:16.374]                               next
[17:03:16.374]                             if (!grepl(pattern, name)) 
[17:03:16.374]                               next
[17:03:16.374]                             invokeRestart(restart)
[17:03:16.374]                             muffled <- TRUE
[17:03:16.374]                             break
[17:03:16.374]                           }
[17:03:16.374]                         }
[17:03:16.374]                       }
[17:03:16.374]                       invisible(muffled)
[17:03:16.374]                     }
[17:03:16.374]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.374]                   }
[17:03:16.374]                 }
[17:03:16.374]                 else {
[17:03:16.374]                   if (TRUE) {
[17:03:16.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.374]                     {
[17:03:16.374]                       inherits <- base::inherits
[17:03:16.374]                       invokeRestart <- base::invokeRestart
[17:03:16.374]                       is.null <- base::is.null
[17:03:16.374]                       muffled <- FALSE
[17:03:16.374]                       if (inherits(cond, "message")) {
[17:03:16.374]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.374]                         if (muffled) 
[17:03:16.374]                           invokeRestart("muffleMessage")
[17:03:16.374]                       }
[17:03:16.374]                       else if (inherits(cond, "warning")) {
[17:03:16.374]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.374]                         if (muffled) 
[17:03:16.374]                           invokeRestart("muffleWarning")
[17:03:16.374]                       }
[17:03:16.374]                       else if (inherits(cond, "condition")) {
[17:03:16.374]                         if (!is.null(pattern)) {
[17:03:16.374]                           computeRestarts <- base::computeRestarts
[17:03:16.374]                           grepl <- base::grepl
[17:03:16.374]                           restarts <- computeRestarts(cond)
[17:03:16.374]                           for (restart in restarts) {
[17:03:16.374]                             name <- restart$name
[17:03:16.374]                             if (is.null(name)) 
[17:03:16.374]                               next
[17:03:16.374]                             if (!grepl(pattern, name)) 
[17:03:16.374]                               next
[17:03:16.374]                             invokeRestart(restart)
[17:03:16.374]                             muffled <- TRUE
[17:03:16.374]                             break
[17:03:16.374]                           }
[17:03:16.374]                         }
[17:03:16.374]                       }
[17:03:16.374]                       invisible(muffled)
[17:03:16.374]                     }
[17:03:16.374]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.374]                   }
[17:03:16.374]                 }
[17:03:16.374]             }
[17:03:16.374]         }))
[17:03:16.374]     }, error = function(ex) {
[17:03:16.374]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.374]                 ...future.rng), started = ...future.startTime, 
[17:03:16.374]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.374]             version = "1.8"), class = "FutureResult")
[17:03:16.374]     }, finally = {
[17:03:16.374]         if (!identical(...future.workdir, getwd())) 
[17:03:16.374]             setwd(...future.workdir)
[17:03:16.374]         {
[17:03:16.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.374]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.374]             }
[17:03:16.374]             base::options(...future.oldOptions)
[17:03:16.374]             if (.Platform$OS.type == "windows") {
[17:03:16.374]                 old_names <- names(...future.oldEnvVars)
[17:03:16.374]                 envs <- base::Sys.getenv()
[17:03:16.374]                 names <- names(envs)
[17:03:16.374]                 common <- intersect(names, old_names)
[17:03:16.374]                 added <- setdiff(names, old_names)
[17:03:16.374]                 removed <- setdiff(old_names, names)
[17:03:16.374]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.374]                   envs[common]]
[17:03:16.374]                 NAMES <- toupper(changed)
[17:03:16.374]                 args <- list()
[17:03:16.374]                 for (kk in seq_along(NAMES)) {
[17:03:16.374]                   name <- changed[[kk]]
[17:03:16.374]                   NAME <- NAMES[[kk]]
[17:03:16.374]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.374]                     next
[17:03:16.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.374]                 }
[17:03:16.374]                 NAMES <- toupper(added)
[17:03:16.374]                 for (kk in seq_along(NAMES)) {
[17:03:16.374]                   name <- added[[kk]]
[17:03:16.374]                   NAME <- NAMES[[kk]]
[17:03:16.374]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.374]                     next
[17:03:16.374]                   args[[name]] <- ""
[17:03:16.374]                 }
[17:03:16.374]                 NAMES <- toupper(removed)
[17:03:16.374]                 for (kk in seq_along(NAMES)) {
[17:03:16.374]                   name <- removed[[kk]]
[17:03:16.374]                   NAME <- NAMES[[kk]]
[17:03:16.374]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.374]                     next
[17:03:16.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.374]                 }
[17:03:16.374]                 if (length(args) > 0) 
[17:03:16.374]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.374]             }
[17:03:16.374]             else {
[17:03:16.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.374]             }
[17:03:16.374]             {
[17:03:16.374]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.374]                   0L) {
[17:03:16.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.374]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.374]                   base::options(opts)
[17:03:16.374]                 }
[17:03:16.374]                 {
[17:03:16.374]                   {
[17:03:16.374]                     NULL
[17:03:16.374]                     RNGkind("Mersenne-Twister")
[17:03:16.374]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.374]                       inherits = FALSE)
[17:03:16.374]                   }
[17:03:16.374]                   options(future.plan = NULL)
[17:03:16.374]                   if (is.na(NA_character_)) 
[17:03:16.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.374]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.374]                     .init = FALSE)
[17:03:16.374]                 }
[17:03:16.374]             }
[17:03:16.374]         }
[17:03:16.374]     })
[17:03:16.374]     if (TRUE) {
[17:03:16.374]         base::sink(type = "output", split = FALSE)
[17:03:16.374]         if (TRUE) {
[17:03:16.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.374]         }
[17:03:16.374]         else {
[17:03:16.374]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.374]         }
[17:03:16.374]         base::close(...future.stdout)
[17:03:16.374]         ...future.stdout <- NULL
[17:03:16.374]     }
[17:03:16.374]     ...future.result$conditions <- ...future.conditions
[17:03:16.374]     ...future.result$finished <- base::Sys.time()
[17:03:16.374]     ...future.result
[17:03:16.374] }
[17:03:16.376] assign_globals() ...
[17:03:16.376] List of 1
[17:03:16.376]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.376]   ..$ a: int [1:3] 1 2 3
[17:03:16.376]   ..$ b: int [1:3] 3 2 1
[17:03:16.376]  - attr(*, "where")=List of 1
[17:03:16.376]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.376]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.376]  - attr(*, "resolved")= logi FALSE
[17:03:16.376]  - attr(*, "total_size")= num 128
[17:03:16.376]  - attr(*, "already-done")= logi TRUE
[17:03:16.382] - copied ‘data’ to environment
[17:03:16.382] assign_globals() ... done
[17:03:16.382] plan(): Setting new future strategy stack:
[17:03:16.382] List of future strategies:
[17:03:16.382] 1. multisession:
[17:03:16.382]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.382]    - tweaked: FALSE
[17:03:16.382]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.386] plan(): nbrOfWorkers() = 2
[17:03:16.427] plan(): Setting new future strategy stack:
[17:03:16.428] List of future strategies:
[17:03:16.428] 1. sequential:
[17:03:16.428]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.428]    - tweaked: FALSE
[17:03:16.428]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.428] 2. multisession:
[17:03:16.428]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.428]    - tweaked: FALSE
[17:03:16.428]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.428] plan(): nbrOfWorkers() = 1
[17:03:16.428] SequentialFuture started (and completed)
[17:03:16.428] signalConditions() ...
[17:03:16.429]  - include = ‘immediateCondition’
[17:03:16.429]  - exclude = 
[17:03:16.429]  - resignal = FALSE
[17:03:16.429]  - Number of conditions: 63
[17:03:16.429] signalConditions() ... done
[17:03:16.429] - Launch lazy future ... done
[17:03:16.429] run() for ‘SequentialFuture’ ... done
[17:03:16.429] signalConditions() ...
[17:03:16.429]  - include = ‘immediateCondition’
[17:03:16.429]  - exclude = 
[17:03:16.430]  - resignal = FALSE
[17:03:16.430]  - Number of conditions: 63
[17:03:16.430] signalConditions() ... done
[17:03:16.430] Future state: ‘finished’
[17:03:16.430] signalConditions() ...
[17:03:16.430]  - include = ‘condition’
[17:03:16.430]  - exclude = ‘immediateCondition’
[17:03:16.430]  - resignal = TRUE
[17:03:16.430]  - Number of conditions: 63
[17:03:16.430]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.387] getGlobalsAndPackages() ...
[17:03:16.430]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.387] Searching for globals...
[17:03:16.431]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.400] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.431]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.400] Searching for globals ... DONE
[17:03:16.431]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.400] Resolving globals: FALSE
[17:03:16.431]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.401] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.431]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.401] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.431]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.401] - globals: [1] ‘data’
[17:03:16.431]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.401] 
[17:03:16.432]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.401] getGlobalsAndPackages() ... DONE
[17:03:16.432]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.402] run() for ‘Future’ ...
[17:03:16.432]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.402] - state: ‘created’
[17:03:16.432]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.402] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.432]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.417] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.432]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.417] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:16.432]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.417]   - Field: ‘node’
[17:03:16.432]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.417]   - Field: ‘label’
[17:03:16.433]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.417]   - Field: ‘local’
[17:03:16.433]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.417]   - Field: ‘owner’
[17:03:16.433]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘envir’
[17:03:16.433]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘workers’
[17:03:16.433]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘packages’
[17:03:16.433]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘gc’
[17:03:16.433]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘conditions’
[17:03:16.433]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘persistent’
[17:03:16.434]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘expr’
[17:03:16.434]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘uuid’
[17:03:16.434]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘seed’
[17:03:16.434]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.418]   - Field: ‘version’
[17:03:16.434]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘result’
[17:03:16.434]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘asynchronous’
[17:03:16.434]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘calls’
[17:03:16.434]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘globals’
[17:03:16.435]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘stdout’
[17:03:16.435]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘earlySignal’
[17:03:16.435]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘lazy’
[17:03:16.435]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419]   - Field: ‘state’
[17:03:16.435]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.419] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:16.435]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.420] - Launch lazy future ...
[17:03:16.435]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.420] Packages needed by the future expression (n = 0): <none>
[17:03:16.436]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.420] Packages needed by future strategies (n = 0): <none>
[17:03:16.436]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.420] {
[17:03:16.420]     {
[17:03:16.420]         {
[17:03:16.420]             ...future.startTime <- base::Sys.time()
[17:03:16.420]             {
[17:03:16.420]                 {
[17:03:16.420]                   {
[17:03:16.420]                     {
[17:03:16.420]                       base::local({
[17:03:16.420]                         has_future <- base::requireNamespace("future", 
[17:03:16.420]                           quietly = TRUE)
[17:03:16.420]                         if (has_future) {
[17:03:16.420]                           ns <- base::getNamespace("future")
[17:03:16.420]                           version <- ns[[".package"]][["version"]]
[17:03:16.420]                           if (is.null(version)) 
[17:03:16.420]                             version <- utils::packageVersion("future")
[17:03:16.420]                         }
[17:03:16.420]                         else {
[17:03:16.420]                           version <- NULL
[17:03:16.420]                         }
[17:03:16.420]                         if (!has_future || version < "1.8.0") {
[17:03:16.420]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.420]                             "", base::R.version$version.string), 
[17:03:16.420]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:16.420]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.420]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.420]                               "release", "version")], collapse = " "), 
[17:03:16.420]                             hostname = base::Sys.info()[["nodename"]])
[17:03:16.420]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.420]                             info)
[17:03:16.420]                           info <- base::paste(info, collapse = "; ")
[17:03:16.420]                           if (!has_future) {
[17:03:16.420]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.420]                               info)
[17:03:16.420]                           }
[17:03:16.420]                           else {
[17:03:16.420]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.420]                               info, version)
[17:03:16.420]                           }
[17:03:16.420]                           base::stop(msg)
[17:03:16.420]                         }
[17:03:16.420]                       })
[17:03:16.420]                     }
[17:03:16.420]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.420]                     base::options(mc.cores = 1L)
[17:03:16.420]                   }
[17:03:16.420]                   ...future.strategy.old <- future::plan("list")
[17:03:16.420]                   options(future.plan = NULL)
[17:03:16.420]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.420]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.420]                 }
[17:03:16.420]                 ...future.workdir <- getwd()
[17:03:16.420]             }
[17:03:16.420]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.420]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.420]         }
[17:03:16.420]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.420]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.420]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.420]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.420]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.420]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.420]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.420]             base::names(...future.oldOptions))
[17:03:16.420]     }
[17:03:16.420]     if (FALSE) {
[17:03:16.420]     }
[17:03:16.420]     else {
[17:03:16.420]         if (TRUE) {
[17:03:16.420]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.420]                 open = "w")
[17:03:16.420]         }
[17:03:16.420]         else {
[17:03:16.420]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.420]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.420]         }
[17:03:16.420]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.420]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.420]             base::sink(type = "output", split = FALSE)
[17:03:16.420]             base::close(...future.stdout)
[17:03:16.420]         }, add = TRUE)
[17:03:16.420]     }
[17:03:16.420]     ...future.frame <- base::sys.nframe()
[17:03:16.420]     ...future.conditions <- base::list()
[17:03:16.420]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.420]     if (FALSE) {
[17:03:16.420]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.420]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.420]     }
[17:03:16.420]     ...future.result <- base::tryCatch({
[17:03:16.420]         base::withCallingHandlers({
[17:03:16.420]             ...future.value <- base::withVisible(base::local({
[17:03:16.420]                 ...future.makeSendCondition <- base::local({
[17:03:16.420]                   sendCondition <- NULL
[17:03:16.420]                   function(frame = 1L) {
[17:03:16.420]                     if (is.function(sendCondition)) 
[17:03:16.420]                       return(sendCondition)
[17:03:16.420]                     ns <- getNamespace("parallel")
[17:03:16.420]                     if (exists("sendData", mode = "function", 
[17:03:16.420]                       envir = ns)) {
[17:03:16.420]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:16.420]                         envir = ns)
[17:03:16.420]                       envir <- sys.frame(frame)
[17:03:16.420]                       master <- NULL
[17:03:16.420]                       while (!identical(envir, .GlobalEnv) && 
[17:03:16.420]                         !identical(envir, emptyenv())) {
[17:03:16.420]                         if (exists("master", mode = "list", envir = envir, 
[17:03:16.420]                           inherits = FALSE)) {
[17:03:16.420]                           master <- get("master", mode = "list", 
[17:03:16.420]                             envir = envir, inherits = FALSE)
[17:03:16.420]                           if (inherits(master, c("SOCKnode", 
[17:03:16.420]                             "SOCK0node"))) {
[17:03:16.420]                             sendCondition <<- function(cond) {
[17:03:16.420]                               data <- list(type = "VALUE", value = cond, 
[17:03:16.420]                                 success = TRUE)
[17:03:16.420]                               parallel_sendData(master, data)
[17:03:16.420]                             }
[17:03:16.420]                             return(sendCondition)
[17:03:16.420]                           }
[17:03:16.420]                         }
[17:03:16.420]                         frame <- frame + 1L
[17:03:16.420]                         envir <- sys.frame(frame)
[17:03:16.420]                       }
[17:03:16.420]                     }
[17:03:16.420]                     sendCondition <<- function(cond) NULL
[17:03:16.420]                   }
[17:03:16.420]                 })
[17:03:16.420]                 withCallingHandlers({
[17:03:16.420]                   subset(data, a == 2)
[17:03:16.420]                 }, immediateCondition = function(cond) {
[17:03:16.420]                   sendCondition <- ...future.makeSendCondition()
[17:03:16.420]                   sendCondition(cond)
[17:03:16.420]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.420]                   {
[17:03:16.420]                     inherits <- base::inherits
[17:03:16.420]                     invokeRestart <- base::invokeRestart
[17:03:16.420]                     is.null <- base::is.null
[17:03:16.420]                     muffled <- FALSE
[17:03:16.420]                     if (inherits(cond, "message")) {
[17:03:16.420]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.420]                       if (muffled) 
[17:03:16.420]                         invokeRestart("muffleMessage")
[17:03:16.420]                     }
[17:03:16.420]                     else if (inherits(cond, "warning")) {
[17:03:16.420]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.420]                       if (muffled) 
[17:03:16.420]                         invokeRestart("muffleWarning")
[17:03:16.420]                     }
[17:03:16.420]                     else if (inherits(cond, "condition")) {
[17:03:16.420]                       if (!is.null(pattern)) {
[17:03:16.420]                         computeRestarts <- base::computeRestarts
[17:03:16.420]                         grepl <- base::grepl
[17:03:16.420]                         restarts <- computeRestarts(cond)
[17:03:16.420]                         for (restart in restarts) {
[17:03:16.420]                           name <- restart$name
[17:03:16.420]                           if (is.null(name)) 
[17:03:16.420]                             next
[17:03:16.420]                           if (!grepl(pattern, name)) 
[17:03:16.420]                             next
[17:03:16.420]                           invokeRestart(restart)
[17:03:16.420]                           muffled <- TRUE
[17:03:16.420]                           break
[17:03:16.420]                         }
[17:03:16.420]                       }
[17:03:16.420]                     }
[17:03:16.420]                     invisible(muffled)
[17:03:16.420]                   }
[17:03:16.420]                   muffleCondition(cond)
[17:03:16.420]                 })
[17:03:16.420]             }))
[17:03:16.420]             future::FutureResult(value = ...future.value$value, 
[17:03:16.420]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.420]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.420]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.420]                     ...future.globalenv.names))
[17:03:16.420]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.420]         }, condition = base::local({
[17:03:16.420]             c <- base::c
[17:03:16.420]             inherits <- base::inherits
[17:03:16.420]             invokeRestart <- base::invokeRestart
[17:03:16.420]             length <- base::length
[17:03:16.420]             list <- base::list
[17:03:16.420]             seq.int <- base::seq.int
[17:03:16.420]             signalCondition <- base::signalCondition
[17:03:16.420]             sys.calls <- base::sys.calls
[17:03:16.420]             `[[` <- base::`[[`
[17:03:16.420]             `+` <- base::`+`
[17:03:16.420]             `<<-` <- base::`<<-`
[17:03:16.420]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.420]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.420]                   3L)]
[17:03:16.420]             }
[17:03:16.420]             function(cond) {
[17:03:16.420]                 is_error <- inherits(cond, "error")
[17:03:16.420]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.420]                   NULL)
[17:03:16.420]                 if (is_error) {
[17:03:16.420]                   sessionInformation <- function() {
[17:03:16.420]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.420]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.420]                       search = base::search(), system = base::Sys.info())
[17:03:16.420]                   }
[17:03:16.420]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.420]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.420]                     cond$call), session = sessionInformation(), 
[17:03:16.420]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.420]                   signalCondition(cond)
[17:03:16.420]                 }
[17:03:16.420]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.420]                 "immediateCondition"))) {
[17:03:16.420]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.420]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.420]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.420]                   if (TRUE && !signal) {
[17:03:16.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.420]                     {
[17:03:16.420]                       inherits <- base::inherits
[17:03:16.420]                       invokeRestart <- base::invokeRestart
[17:03:16.420]                       is.null <- base::is.null
[17:03:16.420]                       muffled <- FALSE
[17:03:16.420]                       if (inherits(cond, "message")) {
[17:03:16.420]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.420]                         if (muffled) 
[17:03:16.420]                           invokeRestart("muffleMessage")
[17:03:16.420]                       }
[17:03:16.420]                       else if (inherits(cond, "warning")) {
[17:03:16.420]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.420]                         if (muffled) 
[17:03:16.420]                           invokeRestart("muffleWarning")
[17:03:16.420]                       }
[17:03:16.420]                       else if (inherits(cond, "condition")) {
[17:03:16.420]                         if (!is.null(pattern)) {
[17:03:16.420]                           computeRestarts <- base::computeRestarts
[17:03:16.420]                           grepl <- base::grepl
[17:03:16.420]                           restarts <- computeRestarts(cond)
[17:03:16.420]                           for (restart in restarts) {
[17:03:16.420]                             name <- restart$name
[17:03:16.420]                             if (is.null(name)) 
[17:03:16.420]                               next
[17:03:16.420]                             if (!grepl(pattern, name)) 
[17:03:16.420]                               next
[17:03:16.420]                             invokeRestart(restart)
[17:03:16.420]                             muffled <- TRUE
[17:03:16.420]                             break
[17:03:16.420]                           }
[17:03:16.420]                         }
[17:03:16.420]                       }
[17:03:16.420]                       invisible(muffled)
[17:03:16.420]                     }
[17:03:16.420]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.420]                   }
[17:03:16.420]                 }
[17:03:16.420]                 else {
[17:03:16.420]                   if (TRUE) {
[17:03:16.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.420]                     {
[17:03:16.420]                       inherits <- base::inherits
[17:03:16.420]                       invokeRestart <- base::invokeRestart
[17:03:16.420]                       is.null <- base::is.null
[17:03:16.420]                       muffled <- FALSE
[17:03:16.420]                       if (inherits(cond, "message")) {
[17:03:16.420]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.420]                         if (muffled) 
[17:03:16.420]                           invokeRestart("muffleMessage")
[17:03:16.420]                       }
[17:03:16.420]                       else if (inherits(cond, "warning")) {
[17:03:16.420]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.420]                         if (muffled) 
[17:03:16.420]                           invokeRestart("muffleWarning")
[17:03:16.420]                       }
[17:03:16.420]                       else if (inherits(cond, "condition")) {
[17:03:16.420]                         if (!is.null(pattern)) {
[17:03:16.420]                           computeRestarts <- base::computeRestarts
[17:03:16.420]                           grepl <- base::grepl
[17:03:16.420]                           restarts <- computeRestarts(cond)
[17:03:16.420]                           for (restart in restarts) {
[17:03:16.420]                             name <- restart$name
[17:03:16.420]                             if (is.null(name)) 
[17:03:16.420]                               next
[17:03:16.420]                             if (!grepl(pattern, name)) 
[17:03:16.420]                               next
[17:03:16.420]                             invokeRestart(restart)
[17:03:16.420]                             muffled <- TRUE
[17:03:16.420]                             break
[17:03:16.420]                           }
[17:03:16.420]                         }
[17:03:16.420]                       }
[17:03:16.420]                       invisible(muffled)
[17:03:16.420]                     }
[17:03:16.420]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.420]                   }
[17:03:16.420]                 }
[17:03:16.420]             }
[17:03:16.420]         }))
[17:03:16.420]     }, error = function(ex) {
[17:03:16.420]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.420]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.420]                 ...future.rng), started = ...future.startTime, 
[17:03:16.420]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.420]             version = "1.8"), class = "FutureResult")
[17:03:16.420]     }, finally = {
[17:03:16.420]         if (!identical(...future.workdir, getwd())) 
[17:03:16.420]             setwd(...future.workdir)
[17:03:16.420]         {
[17:03:16.420]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.420]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.420]             }
[17:03:16.420]             base::options(...future.oldOptions)
[17:03:16.420]             if (.Platform$OS.type == "windows") {
[17:03:16.420]                 old_names <- names(...future.oldEnvVars)
[17:03:16.420]                 envs <- base::Sys.getenv()
[17:03:16.420]                 names <- names(envs)
[17:03:16.420]                 common <- intersect(names, old_names)
[17:03:16.420]                 added <- setdiff(names, old_names)
[17:03:16.420]                 removed <- setdiff(old_names, names)
[17:03:16.420]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.420]                   envs[common]]
[17:03:16.420]                 NAMES <- toupper(changed)
[17:03:16.420]                 args <- list()
[17:03:16.420]                 for (kk in seq_along(NAMES)) {
[17:03:16.420]                   name <- changed[[kk]]
[17:03:16.420]                   NAME <- NAMES[[kk]]
[17:03:16.420]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.420]                     next
[17:03:16.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.420]                 }
[17:03:16.420]                 NAMES <- toupper(added)
[17:03:16.420]                 for (kk in seq_along(NAMES)) {
[17:03:16.420]                   name <- added[[kk]]
[17:03:16.420]                   NAME <- NAMES[[kk]]
[17:03:16.420]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.420]                     next
[17:03:16.420]                   args[[name]] <- ""
[17:03:16.420]                 }
[17:03:16.420]                 NAMES <- toupper(removed)
[17:03:16.420]                 for (kk in seq_along(NAMES)) {
[17:03:16.420]                   name <- removed[[kk]]
[17:03:16.420]                   NAME <- NAMES[[kk]]
[17:03:16.420]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.420]                     next
[17:03:16.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.420]                 }
[17:03:16.420]                 if (length(args) > 0) 
[17:03:16.420]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.420]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.420]             }
[17:03:16.420]             else {
[17:03:16.420]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.420]             }
[17:03:16.420]             {
[17:03:16.420]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.420]                   0L) {
[17:03:16.420]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.420]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.420]                   base::options(opts)
[17:03:16.420]                 }
[17:03:16.420]                 {
[17:03:16.420]                   {
[17:03:16.420]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.420]                     NULL
[17:03:16.420]                   }
[17:03:16.420]                   options(future.plan = NULL)
[17:03:16.420]                   if (is.na(NA_character_)) 
[17:03:16.420]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.420]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.420]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.420]                     .init = FALSE)
[17:03:16.420]                 }
[17:03:16.420]             }
[17:03:16.420]         }
[17:03:16.420]     })
[17:03:16.420]     if (TRUE) {
[17:03:16.420]         base::sink(type = "output", split = FALSE)
[17:03:16.420]         if (TRUE) {
[17:03:16.420]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.420]         }
[17:03:16.420]         else {
[17:03:16.420]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.420]         }
[17:03:16.420]         base::close(...future.stdout)
[17:03:16.420]         ...future.stdout <- NULL
[17:03:16.420]     }
[17:03:16.420]     ...future.result$conditions <- ...future.conditions
[17:03:16.420]     ...future.result$finished <- base::Sys.time()
[17:03:16.420]     ...future.result
[17:03:16.420] }
[17:03:16.436]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.423] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[17:03:16.436]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.423] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[17:03:16.436]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.424] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[17:03:16.436]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.424] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[17:03:16.436]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.424] MultisessionFuture started
[17:03:16.436]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.424] - Launch lazy future ... done
[17:03:16.437]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.424] run() for ‘MultisessionFuture’ ... done
[17:03:16.437]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.425] result() for ClusterFuture ...
[17:03:16.437]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.425] receiveMessageFromWorker() for ClusterFuture ...
[17:03:16.437]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.425] - Validating connection of MultisessionFuture
[17:03:16.437]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.426] - received message: FutureResult
[17:03:16.437]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.426] - Received FutureResult
[17:03:16.437]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.426] - Erased future from FutureRegistry
[17:03:16.437]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.426] result() for ClusterFuture ...
[17:03:16.438]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.426] - result already collected: FutureResult
[17:03:16.438]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.427] result() for ClusterFuture ... done
[17:03:16.438]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.427] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:16.438]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.427] result() for ClusterFuture ... done
[17:03:16.438]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.427] result() for ClusterFuture ...
[17:03:16.438]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.427] - result already collected: FutureResult
[17:03:16.438]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.427] result() for ClusterFuture ... done
[17:03:16.439] signalConditions() ... done
- plan(list('sequential', 'multisession')) ... DONE
- plan(list('multicore', 'sequential')) ...
[17:03:16.439] plan(): Setting new future strategy stack:
[17:03:16.439] List of future strategies:
[17:03:16.439] 1. multicore:
[17:03:16.439]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.439]    - tweaked: FALSE
[17:03:16.439]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.439] 2. sequential:
[17:03:16.439]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.439]    - tweaked: FALSE
[17:03:16.439]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.444] plan(): nbrOfWorkers() = 2
[17:03:16.444] getGlobalsAndPackages() ...
[17:03:16.445] Searching for globals...
[17:03:16.467] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:16.467] Searching for globals ... DONE
[17:03:16.467] Resolving globals: FALSE
[17:03:16.468] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[17:03:16.469] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:16.469] - globals: [2] ‘nested’, ‘strategy2’
[17:03:16.469] - packages: [1] ‘future’
[17:03:16.469] getGlobalsAndPackages() ... DONE
[17:03:16.469] run() for ‘Future’ ...
[17:03:16.469] - state: ‘created’
[17:03:16.470] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.473] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.473] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:16.474]   - Field: ‘label’
[17:03:16.474]   - Field: ‘local’
[17:03:16.474]   - Field: ‘owner’
[17:03:16.474]   - Field: ‘envir’
[17:03:16.474]   - Field: ‘workers’
[17:03:16.474]   - Field: ‘packages’
[17:03:16.474]   - Field: ‘gc’
[17:03:16.474]   - Field: ‘job’
[17:03:16.474]   - Field: ‘conditions’
[17:03:16.474]   - Field: ‘expr’
[17:03:16.474]   - Field: ‘uuid’
[17:03:16.475]   - Field: ‘seed’
[17:03:16.475]   - Field: ‘version’
[17:03:16.475]   - Field: ‘result’
[17:03:16.475]   - Field: ‘asynchronous’
[17:03:16.475]   - Field: ‘calls’
[17:03:16.475]   - Field: ‘globals’
[17:03:16.475]   - Field: ‘stdout’
[17:03:16.475]   - Field: ‘earlySignal’
[17:03:16.475]   - Field: ‘lazy’
[17:03:16.475]   - Field: ‘state’
[17:03:16.475] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:16.476] - Launch lazy future ...
[17:03:16.476] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.476] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.476] {
[17:03:16.476]     {
[17:03:16.476]         {
[17:03:16.476]             ...future.startTime <- base::Sys.time()
[17:03:16.476]             {
[17:03:16.476]                 {
[17:03:16.476]                   {
[17:03:16.476]                     {
[17:03:16.476]                       {
[17:03:16.476]                         base::local({
[17:03:16.476]                           has_future <- base::requireNamespace("future", 
[17:03:16.476]                             quietly = TRUE)
[17:03:16.476]                           if (has_future) {
[17:03:16.476]                             ns <- base::getNamespace("future")
[17:03:16.476]                             version <- ns[[".package"]][["version"]]
[17:03:16.476]                             if (is.null(version)) 
[17:03:16.476]                               version <- utils::packageVersion("future")
[17:03:16.476]                           }
[17:03:16.476]                           else {
[17:03:16.476]                             version <- NULL
[17:03:16.476]                           }
[17:03:16.476]                           if (!has_future || version < "1.8.0") {
[17:03:16.476]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.476]                               "", base::R.version$version.string), 
[17:03:16.476]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:16.476]                                 base::R.version$platform, 8 * 
[17:03:16.476]                                   base::.Machine$sizeof.pointer), 
[17:03:16.476]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.476]                                 "release", "version")], collapse = " "), 
[17:03:16.476]                               hostname = base::Sys.info()[["nodename"]])
[17:03:16.476]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.476]                               info)
[17:03:16.476]                             info <- base::paste(info, collapse = "; ")
[17:03:16.476]                             if (!has_future) {
[17:03:16.476]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.476]                                 info)
[17:03:16.476]                             }
[17:03:16.476]                             else {
[17:03:16.476]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.476]                                 info, version)
[17:03:16.476]                             }
[17:03:16.476]                             base::stop(msg)
[17:03:16.476]                           }
[17:03:16.476]                         })
[17:03:16.476]                       }
[17:03:16.476]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.476]                       base::options(mc.cores = 1L)
[17:03:16.476]                     }
[17:03:16.476]                     base::local({
[17:03:16.476]                       for (pkg in "future") {
[17:03:16.476]                         base::loadNamespace(pkg)
[17:03:16.476]                         base::library(pkg, character.only = TRUE)
[17:03:16.476]                       }
[17:03:16.476]                     })
[17:03:16.476]                   }
[17:03:16.476]                   ...future.strategy.old <- future::plan("list")
[17:03:16.476]                   options(future.plan = NULL)
[17:03:16.476]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.476]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:16.476]                   {
[17:03:16.476]                     future <- SequentialFuture(..., envir = envir)
[17:03:16.476]                     if (!future$lazy) 
[17:03:16.476]                       future <- run(future)
[17:03:16.476]                     invisible(future)
[17:03:16.476]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.476]                 }
[17:03:16.476]                 ...future.workdir <- getwd()
[17:03:16.476]             }
[17:03:16.476]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.476]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.476]         }
[17:03:16.476]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.476]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.476]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.476]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.476]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.476]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.476]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.476]             base::names(...future.oldOptions))
[17:03:16.476]     }
[17:03:16.476]     if (FALSE) {
[17:03:16.476]     }
[17:03:16.476]     else {
[17:03:16.476]         if (TRUE) {
[17:03:16.476]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.476]                 open = "w")
[17:03:16.476]         }
[17:03:16.476]         else {
[17:03:16.476]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.476]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.476]         }
[17:03:16.476]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.476]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.476]             base::sink(type = "output", split = FALSE)
[17:03:16.476]             base::close(...future.stdout)
[17:03:16.476]         }, add = TRUE)
[17:03:16.476]     }
[17:03:16.476]     ...future.frame <- base::sys.nframe()
[17:03:16.476]     ...future.conditions <- base::list()
[17:03:16.476]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.476]     if (FALSE) {
[17:03:16.476]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.476]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.476]     }
[17:03:16.476]     ...future.result <- base::tryCatch({
[17:03:16.476]         base::withCallingHandlers({
[17:03:16.476]             ...future.value <- base::withVisible(base::local({
[17:03:16.476]                 withCallingHandlers({
[17:03:16.476]                   {
[17:03:16.476]                     a <- 1L
[17:03:16.476]                     plan_a <- unclass(future::plan("list"))
[17:03:16.476]                     nested_a <- nested[-1]
[17:03:16.476]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:16.476]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.476]                       strategy2))
[17:03:16.476]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:16.476]                       "init") <- NULL
[17:03:16.476]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:16.476]                       "init") <- NULL
[17:03:16.476]                     stopifnot(all.equal(plan_a, nested_a))
[17:03:16.476]                     y %<-% {
[17:03:16.476]                       b <- 2L
[17:03:16.476]                       plan_b <- future::plan("list")
[17:03:16.476]                       nested_b <- nested_a[-1]
[17:03:16.476]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.476]                         1L, inherits(plan_b[[1]], "future"), 
[17:03:16.476]                         inherits(future::plan("next"), "sequential"))
[17:03:16.476]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.476]                         b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.476]                     }
[17:03:16.476]                     y
[17:03:16.476]                   }
[17:03:16.476]                 }, immediateCondition = function(cond) {
[17:03:16.476]                   save_rds <- function (object, pathname, ...) 
[17:03:16.476]                   {
[17:03:16.476]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:16.476]                     if (file_test("-f", pathname_tmp)) {
[17:03:16.476]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.476]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:16.476]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.476]                         fi_tmp[["mtime"]])
[17:03:16.476]                     }
[17:03:16.476]                     tryCatch({
[17:03:16.476]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:16.476]                     }, error = function(ex) {
[17:03:16.476]                       msg <- conditionMessage(ex)
[17:03:16.476]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.476]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:16.476]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.476]                         fi_tmp[["mtime"]], msg)
[17:03:16.476]                       ex$message <- msg
[17:03:16.476]                       stop(ex)
[17:03:16.476]                     })
[17:03:16.476]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:16.476]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:16.476]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:16.476]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.476]                       fi <- file.info(pathname)
[17:03:16.476]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:16.476]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.476]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:16.476]                         fi[["size"]], fi[["mtime"]])
[17:03:16.476]                       stop(msg)
[17:03:16.476]                     }
[17:03:16.476]                     invisible(pathname)
[17:03:16.476]                   }
[17:03:16.476]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:16.476]                     rootPath = tempdir()) 
[17:03:16.476]                   {
[17:03:16.476]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:16.476]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:16.476]                       tmpdir = path, fileext = ".rds")
[17:03:16.476]                     save_rds(obj, file)
[17:03:16.476]                   }
[17:03:16.476]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:16.476]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.476]                   {
[17:03:16.476]                     inherits <- base::inherits
[17:03:16.476]                     invokeRestart <- base::invokeRestart
[17:03:16.476]                     is.null <- base::is.null
[17:03:16.476]                     muffled <- FALSE
[17:03:16.476]                     if (inherits(cond, "message")) {
[17:03:16.476]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.476]                       if (muffled) 
[17:03:16.476]                         invokeRestart("muffleMessage")
[17:03:16.476]                     }
[17:03:16.476]                     else if (inherits(cond, "warning")) {
[17:03:16.476]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.476]                       if (muffled) 
[17:03:16.476]                         invokeRestart("muffleWarning")
[17:03:16.476]                     }
[17:03:16.476]                     else if (inherits(cond, "condition")) {
[17:03:16.476]                       if (!is.null(pattern)) {
[17:03:16.476]                         computeRestarts <- base::computeRestarts
[17:03:16.476]                         grepl <- base::grepl
[17:03:16.476]                         restarts <- computeRestarts(cond)
[17:03:16.476]                         for (restart in restarts) {
[17:03:16.476]                           name <- restart$name
[17:03:16.476]                           if (is.null(name)) 
[17:03:16.476]                             next
[17:03:16.476]                           if (!grepl(pattern, name)) 
[17:03:16.476]                             next
[17:03:16.476]                           invokeRestart(restart)
[17:03:16.476]                           muffled <- TRUE
[17:03:16.476]                           break
[17:03:16.476]                         }
[17:03:16.476]                       }
[17:03:16.476]                     }
[17:03:16.476]                     invisible(muffled)
[17:03:16.476]                   }
[17:03:16.476]                   muffleCondition(cond)
[17:03:16.476]                 })
[17:03:16.476]             }))
[17:03:16.476]             future::FutureResult(value = ...future.value$value, 
[17:03:16.476]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.476]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.476]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.476]                     ...future.globalenv.names))
[17:03:16.476]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.476]         }, condition = base::local({
[17:03:16.476]             c <- base::c
[17:03:16.476]             inherits <- base::inherits
[17:03:16.476]             invokeRestart <- base::invokeRestart
[17:03:16.476]             length <- base::length
[17:03:16.476]             list <- base::list
[17:03:16.476]             seq.int <- base::seq.int
[17:03:16.476]             signalCondition <- base::signalCondition
[17:03:16.476]             sys.calls <- base::sys.calls
[17:03:16.476]             `[[` <- base::`[[`
[17:03:16.476]             `+` <- base::`+`
[17:03:16.476]             `<<-` <- base::`<<-`
[17:03:16.476]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.476]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.476]                   3L)]
[17:03:16.476]             }
[17:03:16.476]             function(cond) {
[17:03:16.476]                 is_error <- inherits(cond, "error")
[17:03:16.476]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.476]                   NULL)
[17:03:16.476]                 if (is_error) {
[17:03:16.476]                   sessionInformation <- function() {
[17:03:16.476]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.476]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.476]                       search = base::search(), system = base::Sys.info())
[17:03:16.476]                   }
[17:03:16.476]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.476]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.476]                     cond$call), session = sessionInformation(), 
[17:03:16.476]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.476]                   signalCondition(cond)
[17:03:16.476]                 }
[17:03:16.476]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.476]                 "immediateCondition"))) {
[17:03:16.476]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.476]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.476]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.476]                   if (TRUE && !signal) {
[17:03:16.476]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.476]                     {
[17:03:16.476]                       inherits <- base::inherits
[17:03:16.476]                       invokeRestart <- base::invokeRestart
[17:03:16.476]                       is.null <- base::is.null
[17:03:16.476]                       muffled <- FALSE
[17:03:16.476]                       if (inherits(cond, "message")) {
[17:03:16.476]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.476]                         if (muffled) 
[17:03:16.476]                           invokeRestart("muffleMessage")
[17:03:16.476]                       }
[17:03:16.476]                       else if (inherits(cond, "warning")) {
[17:03:16.476]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.476]                         if (muffled) 
[17:03:16.476]                           invokeRestart("muffleWarning")
[17:03:16.476]                       }
[17:03:16.476]                       else if (inherits(cond, "condition")) {
[17:03:16.476]                         if (!is.null(pattern)) {
[17:03:16.476]                           computeRestarts <- base::computeRestarts
[17:03:16.476]                           grepl <- base::grepl
[17:03:16.476]                           restarts <- computeRestarts(cond)
[17:03:16.476]                           for (restart in restarts) {
[17:03:16.476]                             name <- restart$name
[17:03:16.476]                             if (is.null(name)) 
[17:03:16.476]                               next
[17:03:16.476]                             if (!grepl(pattern, name)) 
[17:03:16.476]                               next
[17:03:16.476]                             invokeRestart(restart)
[17:03:16.476]                             muffled <- TRUE
[17:03:16.476]                             break
[17:03:16.476]                           }
[17:03:16.476]                         }
[17:03:16.476]                       }
[17:03:16.476]                       invisible(muffled)
[17:03:16.476]                     }
[17:03:16.476]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.476]                   }
[17:03:16.476]                 }
[17:03:16.476]                 else {
[17:03:16.476]                   if (TRUE) {
[17:03:16.476]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.476]                     {
[17:03:16.476]                       inherits <- base::inherits
[17:03:16.476]                       invokeRestart <- base::invokeRestart
[17:03:16.476]                       is.null <- base::is.null
[17:03:16.476]                       muffled <- FALSE
[17:03:16.476]                       if (inherits(cond, "message")) {
[17:03:16.476]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.476]                         if (muffled) 
[17:03:16.476]                           invokeRestart("muffleMessage")
[17:03:16.476]                       }
[17:03:16.476]                       else if (inherits(cond, "warning")) {
[17:03:16.476]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.476]                         if (muffled) 
[17:03:16.476]                           invokeRestart("muffleWarning")
[17:03:16.476]                       }
[17:03:16.476]                       else if (inherits(cond, "condition")) {
[17:03:16.476]                         if (!is.null(pattern)) {
[17:03:16.476]                           computeRestarts <- base::computeRestarts
[17:03:16.476]                           grepl <- base::grepl
[17:03:16.476]                           restarts <- computeRestarts(cond)
[17:03:16.476]                           for (restart in restarts) {
[17:03:16.476]                             name <- restart$name
[17:03:16.476]                             if (is.null(name)) 
[17:03:16.476]                               next
[17:03:16.476]                             if (!grepl(pattern, name)) 
[17:03:16.476]                               next
[17:03:16.476]                             invokeRestart(restart)
[17:03:16.476]                             muffled <- TRUE
[17:03:16.476]                             break
[17:03:16.476]                           }
[17:03:16.476]                         }
[17:03:16.476]                       }
[17:03:16.476]                       invisible(muffled)
[17:03:16.476]                     }
[17:03:16.476]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.476]                   }
[17:03:16.476]                 }
[17:03:16.476]             }
[17:03:16.476]         }))
[17:03:16.476]     }, error = function(ex) {
[17:03:16.476]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.476]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.476]                 ...future.rng), started = ...future.startTime, 
[17:03:16.476]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.476]             version = "1.8"), class = "FutureResult")
[17:03:16.476]     }, finally = {
[17:03:16.476]         if (!identical(...future.workdir, getwd())) 
[17:03:16.476]             setwd(...future.workdir)
[17:03:16.476]         {
[17:03:16.476]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.476]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.476]             }
[17:03:16.476]             base::options(...future.oldOptions)
[17:03:16.476]             if (.Platform$OS.type == "windows") {
[17:03:16.476]                 old_names <- names(...future.oldEnvVars)
[17:03:16.476]                 envs <- base::Sys.getenv()
[17:03:16.476]                 names <- names(envs)
[17:03:16.476]                 common <- intersect(names, old_names)
[17:03:16.476]                 added <- setdiff(names, old_names)
[17:03:16.476]                 removed <- setdiff(old_names, names)
[17:03:16.476]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.476]                   envs[common]]
[17:03:16.476]                 NAMES <- toupper(changed)
[17:03:16.476]                 args <- list()
[17:03:16.476]                 for (kk in seq_along(NAMES)) {
[17:03:16.476]                   name <- changed[[kk]]
[17:03:16.476]                   NAME <- NAMES[[kk]]
[17:03:16.476]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.476]                     next
[17:03:16.476]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.476]                 }
[17:03:16.476]                 NAMES <- toupper(added)
[17:03:16.476]                 for (kk in seq_along(NAMES)) {
[17:03:16.476]                   name <- added[[kk]]
[17:03:16.476]                   NAME <- NAMES[[kk]]
[17:03:16.476]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.476]                     next
[17:03:16.476]                   args[[name]] <- ""
[17:03:16.476]                 }
[17:03:16.476]                 NAMES <- toupper(removed)
[17:03:16.476]                 for (kk in seq_along(NAMES)) {
[17:03:16.476]                   name <- removed[[kk]]
[17:03:16.476]                   NAME <- NAMES[[kk]]
[17:03:16.476]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.476]                     next
[17:03:16.476]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.476]                 }
[17:03:16.476]                 if (length(args) > 0) 
[17:03:16.476]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.476]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.476]             }
[17:03:16.476]             else {
[17:03:16.476]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.476]             }
[17:03:16.476]             {
[17:03:16.476]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.476]                   0L) {
[17:03:16.476]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.476]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.476]                   base::options(opts)
[17:03:16.476]                 }
[17:03:16.476]                 {
[17:03:16.476]                   {
[17:03:16.476]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.476]                     NULL
[17:03:16.476]                   }
[17:03:16.476]                   options(future.plan = NULL)
[17:03:16.476]                   if (is.na(NA_character_)) 
[17:03:16.476]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.476]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.476]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.476]                     .init = FALSE)
[17:03:16.476]                 }
[17:03:16.476]             }
[17:03:16.476]         }
[17:03:16.476]     })
[17:03:16.476]     if (TRUE) {
[17:03:16.476]         base::sink(type = "output", split = FALSE)
[17:03:16.476]         if (TRUE) {
[17:03:16.476]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.476]         }
[17:03:16.476]         else {
[17:03:16.476]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.476]         }
[17:03:16.476]         base::close(...future.stdout)
[17:03:16.476]         ...future.stdout <- NULL
[17:03:16.476]     }
[17:03:16.476]     ...future.result$conditions <- ...future.conditions
[17:03:16.476]     ...future.result$finished <- base::Sys.time()
[17:03:16.476]     ...future.result
[17:03:16.476] }
[17:03:16.479] assign_globals() ...
[17:03:16.479] List of 2
[17:03:16.479]  $ nested   :List of 2
[17:03:16.479]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:16.479]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:16.479]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.479]   ..$ b:function (..., envir = parent.frame())  
[17:03:16.479]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:16.479]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.479]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.479]  $ strategy2: chr "sequential"
[17:03:16.479]  - attr(*, "where")=List of 2
[17:03:16.479]   ..$ nested   :<environment: R_EmptyEnv> 
[17:03:16.479]   ..$ strategy2:<environment: R_EmptyEnv> 
[17:03:16.479]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.479]  - attr(*, "resolved")= logi FALSE
[17:03:16.479]  - attr(*, "total_size")= num 59224
[17:03:16.479]  - attr(*, "already-done")= logi TRUE
[17:03:16.483] - copied ‘nested’ to environment
[17:03:16.483] - copied ‘strategy2’ to environment
[17:03:16.483] assign_globals() ... done
[17:03:16.484] requestCore(): workers = 2
[17:03:16.486] MulticoreFuture started
[17:03:16.486] - Launch lazy future ... done
[17:03:16.487] run() for ‘MulticoreFuture’ ... done
[17:03:16.487] result() for MulticoreFuture ...
[17:03:16.487] plan(): Setting new future strategy stack:
[17:03:16.488] List of future strategies:
[17:03:16.488] 1. sequential:
[17:03:16.488]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.488]    - tweaked: FALSE
[17:03:16.488]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.489] plan(): nbrOfWorkers() = 1
[17:03:16.526] plan(): Setting new future strategy stack:
[17:03:16.526] List of future strategies:
[17:03:16.526] 1. multicore:
[17:03:16.526]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.526]    - tweaked: FALSE
[17:03:16.526]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.526] 2. sequential:
[17:03:16.526]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.526]    - tweaked: FALSE
[17:03:16.526]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.531] plan(): nbrOfWorkers() = 2
[17:03:16.532] result() for MulticoreFuture ...
[17:03:16.532] result() for MulticoreFuture ... done
[17:03:16.533] signalConditions() ...
[17:03:16.533]  - include = ‘immediateCondition’
[17:03:16.533]  - exclude = 
[17:03:16.533]  - resignal = FALSE
[17:03:16.533]  - Number of conditions: 54
[17:03:16.533] signalConditions() ... done
[17:03:16.534] result() for MulticoreFuture ... done
[17:03:16.534] result() for MulticoreFuture ...
[17:03:16.534] result() for MulticoreFuture ... done
[17:03:16.534] signalConditions() ...
[17:03:16.534]  - include = ‘immediateCondition’
[17:03:16.534]  - exclude = 
[17:03:16.535]  - resignal = FALSE
[17:03:16.535]  - Number of conditions: 54
[17:03:16.535] signalConditions() ... done
[17:03:16.535] Future state: ‘finished’
[17:03:16.535] result() for MulticoreFuture ...
[17:03:16.535] result() for MulticoreFuture ... done
[17:03:16.536] signalConditions() ...
[17:03:16.536]  - include = ‘condition’
[17:03:16.536]  - exclude = ‘immediateCondition’
[17:03:16.536]  - resignal = TRUE
[17:03:16.536]  - Number of conditions: 54
[17:03:16.536]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.491] getGlobalsAndPackages() ...
[17:03:16.537]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.491] Searching for globals...
[17:03:16.537]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.501] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[17:03:16.537]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.501] Searching for globals ... DONE
[17:03:16.537]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.502] Resolving globals: FALSE
[17:03:16.538]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.503] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[17:03:16.538]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.504] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[17:03:16.538]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.504] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[17:03:16.538]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.504] 
[17:03:16.538]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.504] getGlobalsAndPackages() ... DONE
[17:03:16.538]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.505] run() for ‘Future’ ...
[17:03:16.539]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.505] - state: ‘created’
[17:03:16.539]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.506] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:16.539]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.506] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:16.539]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.506] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:16.539]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.506]   - Field: ‘label’
[17:03:16.540]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.507]   - Field: ‘local’
[17:03:16.540]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.507]   - Field: ‘owner’
[17:03:16.540]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.507]   - Field: ‘envir’
[17:03:16.540]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.507]   - Field: ‘packages’
[17:03:16.540]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.507]   - Field: ‘gc’
[17:03:16.540]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.508]   - Field: ‘conditions’
[17:03:16.541]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.508]   - Field: ‘expr’
[17:03:16.541]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.508]   - Field: ‘uuid’
[17:03:16.541]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.508]   - Field: ‘seed’
[17:03:16.541]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.508]   - Field: ‘version’
[17:03:16.541]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.508]   - Field: ‘result’
[17:03:16.541]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.509]   - Field: ‘asynchronous’
[17:03:16.542]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.509]   - Field: ‘calls’
[17:03:16.542]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.509]   - Field: ‘globals’
[17:03:16.542]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.509]   - Field: ‘stdout’
[17:03:16.542]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.509]   - Field: ‘earlySignal’
[17:03:16.542]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.509]   - Field: ‘lazy’
[17:03:16.542]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.510]   - Field: ‘state’
[17:03:16.543]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.510] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:16.543]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.510] - Launch lazy future ...
[17:03:16.543]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.510] Packages needed by the future expression (n = 0): <none>
[17:03:16.543]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.511] Packages needed by future strategies (n = 0): <none>
[17:03:16.543]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.511] {
[17:03:16.511]     {
[17:03:16.511]         {
[17:03:16.511]             ...future.startTime <- base::Sys.time()
[17:03:16.511]             {
[17:03:16.511]                 {
[17:03:16.511]                   {
[17:03:16.511]                     base::local({
[17:03:16.511]                       has_future <- base::requireNamespace("future", 
[17:03:16.511]                         quietly = TRUE)
[17:03:16.511]                       if (has_future) {
[17:03:16.511]                         ns <- base::getNamespace("future")
[17:03:16.511]                         version <- ns[[".package"]][["version"]]
[17:03:16.511]                         if (is.null(version)) 
[17:03:16.511]                           version <- utils::packageVersion("future")
[17:03:16.511]                       }
[17:03:16.511]                       else {
[17:03:16.511]                         version <- NULL
[17:03:16.511]                       }
[17:03:16.511]                       if (!has_future || version < "1.8.0") {
[17:03:16.511]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.511]                           "", base::R.version$version.string), 
[17:03:16.511]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:16.511]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.511]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.511]                             "release", "version")], collapse = " "), 
[17:03:16.511]                           hostname = base::Sys.info()[["nodename"]])
[17:03:16.511]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.511]                           info)
[17:03:16.511]                         info <- base::paste(info, collapse = "; ")
[17:03:16.511]                         if (!has_future) {
[17:03:16.511]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.511]                             info)
[17:03:16.511]                         }
[17:03:16.511]                         else {
[17:03:16.511]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.511]                             info, version)
[17:03:16.511]                         }
[17:03:16.511]                         base::stop(msg)
[17:03:16.511]                       }
[17:03:16.511]                     })
[17:03:16.511]                   }
[17:03:16.511]                   ...future.strategy.old <- future::plan("list")
[17:03:16.511]                   options(future.plan = NULL)
[17:03:16.511]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.511]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.511]                 }
[17:03:16.511]                 ...future.workdir <- getwd()
[17:03:16.511]             }
[17:03:16.511]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.511]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.511]         }
[17:03:16.511]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.511]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.511]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.511]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.511]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.511]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.511]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.511]             base::names(...future.oldOptions))
[17:03:16.511]     }
[17:03:16.511]     if (FALSE) {
[17:03:16.511]     }
[17:03:16.511]     else {
[17:03:16.511]         if (TRUE) {
[17:03:16.511]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.511]                 open = "w")
[17:03:16.511]         }
[17:03:16.511]         else {
[17:03:16.511]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.511]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.511]         }
[17:03:16.511]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.511]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.511]             base::sink(type = "output", split = FALSE)
[17:03:16.511]             base::close(...future.stdout)
[17:03:16.511]         }, add = TRUE)
[17:03:16.511]     }
[17:03:16.511]     ...future.frame <- base::sys.nframe()
[17:03:16.511]     ...future.conditions <- base::list()
[17:03:16.511]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.511]     if (FALSE) {
[17:03:16.511]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.511]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.511]     }
[17:03:16.511]     ...future.result <- base::tryCatch({
[17:03:16.511]         base::withCallingHandlers({
[17:03:16.511]             ...future.value <- base::withVisible(base::local({
[17:03:16.511]                 b <- 2L
[17:03:16.511]                 plan_b <- future::plan("list")
[17:03:16.511]                 nested_b <- nested_a[-1]
[17:03:16.511]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.511]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.511]                   "sequential"))
[17:03:16.511]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.511]                   b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.511]             }))
[17:03:16.511]             future::FutureResult(value = ...future.value$value, 
[17:03:16.511]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.511]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.511]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.511]                     ...future.globalenv.names))
[17:03:16.511]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.511]         }, condition = base::local({
[17:03:16.511]             c <- base::c
[17:03:16.511]             inherits <- base::inherits
[17:03:16.511]             invokeRestart <- base::invokeRestart
[17:03:16.511]             length <- base::length
[17:03:16.511]             list <- base::list
[17:03:16.511]             seq.int <- base::seq.int
[17:03:16.511]             signalCondition <- base::signalCondition
[17:03:16.511]             sys.calls <- base::sys.calls
[17:03:16.511]             `[[` <- base::`[[`
[17:03:16.511]             `+` <- base::`+`
[17:03:16.511]             `<<-` <- base::`<<-`
[17:03:16.511]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.511]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.511]                   3L)]
[17:03:16.511]             }
[17:03:16.511]             function(cond) {
[17:03:16.511]                 is_error <- inherits(cond, "error")
[17:03:16.511]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.511]                   NULL)
[17:03:16.511]                 if (is_error) {
[17:03:16.511]                   sessionInformation <- function() {
[17:03:16.511]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.511]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.511]                       search = base::search(), system = base::Sys.info())
[17:03:16.511]                   }
[17:03:16.511]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.511]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.511]                     cond$call), session = sessionInformation(), 
[17:03:16.511]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.511]                   signalCondition(cond)
[17:03:16.511]                 }
[17:03:16.511]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.511]                 "immediateCondition"))) {
[17:03:16.511]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.511]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.511]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.511]                   if (TRUE && !signal) {
[17:03:16.511]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.511]                     {
[17:03:16.511]                       inherits <- base::inherits
[17:03:16.511]                       invokeRestart <- base::invokeRestart
[17:03:16.511]                       is.null <- base::is.null
[17:03:16.511]                       muffled <- FALSE
[17:03:16.511]                       if (inherits(cond, "message")) {
[17:03:16.511]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.511]                         if (muffled) 
[17:03:16.511]                           invokeRestart("muffleMessage")
[17:03:16.511]                       }
[17:03:16.511]                       else if (inherits(cond, "warning")) {
[17:03:16.511]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.511]                         if (muffled) 
[17:03:16.511]                           invokeRestart("muffleWarning")
[17:03:16.511]                       }
[17:03:16.511]                       else if (inherits(cond, "condition")) {
[17:03:16.511]                         if (!is.null(pattern)) {
[17:03:16.511]                           computeRestarts <- base::computeRestarts
[17:03:16.511]                           grepl <- base::grepl
[17:03:16.511]                           restarts <- computeRestarts(cond)
[17:03:16.511]                           for (restart in restarts) {
[17:03:16.511]                             name <- restart$name
[17:03:16.511]                             if (is.null(name)) 
[17:03:16.511]                               next
[17:03:16.511]                             if (!grepl(pattern, name)) 
[17:03:16.511]                               next
[17:03:16.511]                             invokeRestart(restart)
[17:03:16.511]                             muffled <- TRUE
[17:03:16.511]                             break
[17:03:16.511]                           }
[17:03:16.511]                         }
[17:03:16.511]                       }
[17:03:16.511]                       invisible(muffled)
[17:03:16.511]                     }
[17:03:16.511]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.511]                   }
[17:03:16.511]                 }
[17:03:16.511]                 else {
[17:03:16.511]                   if (TRUE) {
[17:03:16.511]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.511]                     {
[17:03:16.511]                       inherits <- base::inherits
[17:03:16.511]                       invokeRestart <- base::invokeRestart
[17:03:16.511]                       is.null <- base::is.null
[17:03:16.511]                       muffled <- FALSE
[17:03:16.511]                       if (inherits(cond, "message")) {
[17:03:16.511]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.511]                         if (muffled) 
[17:03:16.511]                           invokeRestart("muffleMessage")
[17:03:16.511]                       }
[17:03:16.511]                       else if (inherits(cond, "warning")) {
[17:03:16.511]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.511]                         if (muffled) 
[17:03:16.511]                           invokeRestart("muffleWarning")
[17:03:16.511]                       }
[17:03:16.511]                       else if (inherits(cond, "condition")) {
[17:03:16.511]                         if (!is.null(pattern)) {
[17:03:16.511]                           computeRestarts <- base::computeRestarts
[17:03:16.511]                           grepl <- base::grepl
[17:03:16.511]                           restarts <- computeRestarts(cond)
[17:03:16.511]                           for (restart in restarts) {
[17:03:16.511]                             name <- restart$name
[17:03:16.511]                             if (is.null(name)) 
[17:03:16.511]                               next
[17:03:16.511]                             if (!grepl(pattern, name)) 
[17:03:16.511]                               next
[17:03:16.511]                             invokeRestart(restart)
[17:03:16.511]                             muffled <- TRUE
[17:03:16.511]                             break
[17:03:16.511]                           }
[17:03:16.511]                         }
[17:03:16.511]                       }
[17:03:16.511]                       invisible(muffled)
[17:03:16.511]                     }
[17:03:16.511]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.511]                   }
[17:03:16.511]                 }
[17:03:16.511]             }
[17:03:16.511]         }))
[17:03:16.511]     }, error = function(ex) {
[17:03:16.511]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.511]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.511]                 ...future.rng), started = ...future.startTime, 
[17:03:16.511]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.511]             version = "1.8"), class = "FutureResult")
[17:03:16.511]     }, finally = {
[17:03:16.511]         if (!identical(...future.workdir, getwd())) 
[17:03:16.511]             setwd(...future.workdir)
[17:03:16.511]         {
[17:03:16.511]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.511]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.511]             }
[17:03:16.511]             base::options(...future.oldOptions)
[17:03:16.511]             if (.Platform$OS.type == "windows") {
[17:03:16.511]                 old_names <- names(...future.oldEnvVars)
[17:03:16.511]                 envs <- base::Sys.getenv()
[17:03:16.511]                 names <- names(envs)
[17:03:16.511]                 common <- intersect(names, old_names)
[17:03:16.511]                 added <- setdiff(names, old_names)
[17:03:16.511]                 removed <- setdiff(old_names, names)
[17:03:16.511]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.511]                   envs[common]]
[17:03:16.511]                 NAMES <- toupper(changed)
[17:03:16.511]                 args <- list()
[17:03:16.511]                 for (kk in seq_along(NAMES)) {
[17:03:16.511]                   name <- changed[[kk]]
[17:03:16.511]                   NAME <- NAMES[[kk]]
[17:03:16.511]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.511]                     next
[17:03:16.511]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.511]                 }
[17:03:16.511]                 NAMES <- toupper(added)
[17:03:16.511]                 for (kk in seq_along(NAMES)) {
[17:03:16.511]                   name <- added[[kk]]
[17:03:16.511]                   NAME <- NAMES[[kk]]
[17:03:16.511]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.511]                     next
[17:03:16.511]                   args[[name]] <- ""
[17:03:16.511]                 }
[17:03:16.511]                 NAMES <- toupper(removed)
[17:03:16.511]                 for (kk in seq_along(NAMES)) {
[17:03:16.511]                   name <- removed[[kk]]
[17:03:16.511]                   NAME <- NAMES[[kk]]
[17:03:16.511]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.511]                     next
[17:03:16.511]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.511]                 }
[17:03:16.511]                 if (length(args) > 0) 
[17:03:16.511]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.511]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.511]             }
[17:03:16.511]             else {
[17:03:16.511]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.511]             }
[17:03:16.511]             {
[17:03:16.511]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.511]                   0L) {
[17:03:16.511]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.511]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.511]                   base::options(opts)
[17:03:16.511]                 }
[17:03:16.511]                 {
[17:03:16.511]                   {
[17:03:16.511]                     NULL
[17:03:16.511]                     RNGkind("Mersenne-Twister")
[17:03:16.511]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.511]                       inherits = FALSE)
[17:03:16.511]                   }
[17:03:16.511]                   options(future.plan = NULL)
[17:03:16.511]                   if (is.na(NA_character_)) 
[17:03:16.511]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.511]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.511]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.511]                     .init = FALSE)
[17:03:16.511]                 }
[17:03:16.511]             }
[17:03:16.511]         }
[17:03:16.511]     })
[17:03:16.511]     if (TRUE) {
[17:03:16.511]         base::sink(type = "output", split = FALSE)
[17:03:16.511]         if (TRUE) {
[17:03:16.511]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.511]         }
[17:03:16.511]         else {
[17:03:16.511]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.511]         }
[17:03:16.511]         base::close(...future.stdout)
[17:03:16.511]         ...future.stdout <- NULL
[17:03:16.511]     }
[17:03:16.511]     ...future.result$conditions <- ...future.conditions
[17:03:16.511]     ...future.result$finished <- base::Sys.time()
[17:03:16.511]     ...future.result
[17:03:16.511] }
[17:03:16.544]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.514] assign_globals() ...
[17:03:16.544]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.514] List of 3
[17:03:16.514]  $ nested_a:List of 1
[17:03:16.514]   ..$ b:function (..., envir = parent.frame())  
[17:03:16.514]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:16.514]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.514]  $ a       : int 1
[17:03:16.514]  $ plan_a  :List of 1
[17:03:16.514]   ..$ b:function (..., envir = parent.frame())  
[17:03:16.514]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[17:03:16.514]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.514]  - attr(*, "where")=List of 3
[17:03:16.514]   ..$ nested_a:<environment: R_EmptyEnv> 
[17:03:16.514]   ..$ a       :<environment: R_EmptyEnv> 
[17:03:16.514]   ..$ plan_a  :<environment: R_EmptyEnv> 
[17:03:16.514]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.514]  - attr(*, "resolved")= logi FALSE
[17:03:16.514]  - attr(*, "total_size")= num 23080
[17:03:16.514]  - attr(*, "already-done")= logi TRUE
[17:03:16.544]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.521] - copied ‘nested_a’ to environment
[17:03:16.544]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.521] - copied ‘a’ to environment
[17:03:16.544]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.521] - copied ‘plan_a’ to environment
[17:03:16.544]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.521] assign_globals() ... done
[17:03:16.545]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.522] plan(): Setting new future strategy stack:
[17:03:16.545]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.522] List of future strategies:
[17:03:16.522] 1. sequential:
[17:03:16.522]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.522]    - tweaked: FALSE
[17:03:16.522]    - call: NULL
[17:03:16.545]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.523] plan(): nbrOfWorkers() = 1
[17:03:16.545]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.524] plan(): Setting new future strategy stack:
[17:03:16.545]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.524] List of future strategies:
[17:03:16.524] 1. sequential:
[17:03:16.524]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.524]    - tweaked: FALSE
[17:03:16.524]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.545]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.525] plan(): nbrOfWorkers() = 1
[17:03:16.546]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.525] SequentialFuture started (and completed)
[17:03:16.546]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.525] - Launch lazy future ... done
[17:03:16.546]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.525] run() for ‘SequentialFuture’ ... done
[17:03:16.546] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.552] getGlobalsAndPackages() ...
[17:03:16.553] Searching for globals...
[17:03:16.554] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.554] Searching for globals ... DONE
[17:03:16.554] Resolving globals: FALSE
[17:03:16.555] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.556] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.556] - globals: [1] ‘data’
[17:03:16.556] - packages: [1] ‘future’
[17:03:16.556] getGlobalsAndPackages() ... DONE
[17:03:16.556] run() for ‘Future’ ...
[17:03:16.557] - state: ‘created’
[17:03:16.557] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.561] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.561] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:16.561]   - Field: ‘label’
[17:03:16.561]   - Field: ‘local’
[17:03:16.561]   - Field: ‘owner’
[17:03:16.561]   - Field: ‘envir’
[17:03:16.561]   - Field: ‘workers’
[17:03:16.562]   - Field: ‘packages’
[17:03:16.562]   - Field: ‘gc’
[17:03:16.562]   - Field: ‘job’
[17:03:16.562]   - Field: ‘conditions’
[17:03:16.562]   - Field: ‘expr’
[17:03:16.562]   - Field: ‘uuid’
[17:03:16.562]   - Field: ‘seed’
[17:03:16.562]   - Field: ‘version’
[17:03:16.562]   - Field: ‘result’
[17:03:16.563]   - Field: ‘asynchronous’
[17:03:16.563]   - Field: ‘calls’
[17:03:16.563]   - Field: ‘globals’
[17:03:16.563]   - Field: ‘stdout’
[17:03:16.563]   - Field: ‘earlySignal’
[17:03:16.563]   - Field: ‘lazy’
[17:03:16.563]   - Field: ‘state’
[17:03:16.563] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:16.563] - Launch lazy future ...
[17:03:16.564] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.564] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.564] {
[17:03:16.564]     {
[17:03:16.564]         {
[17:03:16.564]             ...future.startTime <- base::Sys.time()
[17:03:16.564]             {
[17:03:16.564]                 {
[17:03:16.564]                   {
[17:03:16.564]                     {
[17:03:16.564]                       {
[17:03:16.564]                         base::local({
[17:03:16.564]                           has_future <- base::requireNamespace("future", 
[17:03:16.564]                             quietly = TRUE)
[17:03:16.564]                           if (has_future) {
[17:03:16.564]                             ns <- base::getNamespace("future")
[17:03:16.564]                             version <- ns[[".package"]][["version"]]
[17:03:16.564]                             if (is.null(version)) 
[17:03:16.564]                               version <- utils::packageVersion("future")
[17:03:16.564]                           }
[17:03:16.564]                           else {
[17:03:16.564]                             version <- NULL
[17:03:16.564]                           }
[17:03:16.564]                           if (!has_future || version < "1.8.0") {
[17:03:16.564]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.564]                               "", base::R.version$version.string), 
[17:03:16.564]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:16.564]                                 base::R.version$platform, 8 * 
[17:03:16.564]                                   base::.Machine$sizeof.pointer), 
[17:03:16.564]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.564]                                 "release", "version")], collapse = " "), 
[17:03:16.564]                               hostname = base::Sys.info()[["nodename"]])
[17:03:16.564]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.564]                               info)
[17:03:16.564]                             info <- base::paste(info, collapse = "; ")
[17:03:16.564]                             if (!has_future) {
[17:03:16.564]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.564]                                 info)
[17:03:16.564]                             }
[17:03:16.564]                             else {
[17:03:16.564]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.564]                                 info, version)
[17:03:16.564]                             }
[17:03:16.564]                             base::stop(msg)
[17:03:16.564]                           }
[17:03:16.564]                         })
[17:03:16.564]                       }
[17:03:16.564]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.564]                       base::options(mc.cores = 1L)
[17:03:16.564]                     }
[17:03:16.564]                     base::local({
[17:03:16.564]                       for (pkg in "future") {
[17:03:16.564]                         base::loadNamespace(pkg)
[17:03:16.564]                         base::library(pkg, character.only = TRUE)
[17:03:16.564]                       }
[17:03:16.564]                     })
[17:03:16.564]                   }
[17:03:16.564]                   ...future.strategy.old <- future::plan("list")
[17:03:16.564]                   options(future.plan = NULL)
[17:03:16.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.564]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:16.564]                   {
[17:03:16.564]                     future <- SequentialFuture(..., envir = envir)
[17:03:16.564]                     if (!future$lazy) 
[17:03:16.564]                       future <- run(future)
[17:03:16.564]                     invisible(future)
[17:03:16.564]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.564]                 }
[17:03:16.564]                 ...future.workdir <- getwd()
[17:03:16.564]             }
[17:03:16.564]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.564]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.564]         }
[17:03:16.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.564]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.564]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.564]             base::names(...future.oldOptions))
[17:03:16.564]     }
[17:03:16.564]     if (FALSE) {
[17:03:16.564]     }
[17:03:16.564]     else {
[17:03:16.564]         if (TRUE) {
[17:03:16.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.564]                 open = "w")
[17:03:16.564]         }
[17:03:16.564]         else {
[17:03:16.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.564]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.564]         }
[17:03:16.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.564]             base::sink(type = "output", split = FALSE)
[17:03:16.564]             base::close(...future.stdout)
[17:03:16.564]         }, add = TRUE)
[17:03:16.564]     }
[17:03:16.564]     ...future.frame <- base::sys.nframe()
[17:03:16.564]     ...future.conditions <- base::list()
[17:03:16.564]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.564]     if (FALSE) {
[17:03:16.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.564]     }
[17:03:16.564]     ...future.result <- base::tryCatch({
[17:03:16.564]         base::withCallingHandlers({
[17:03:16.564]             ...future.value <- base::withVisible(base::local({
[17:03:16.564]                 withCallingHandlers({
[17:03:16.564]                   {
[17:03:16.564]                     value(future(subset(data, a == 2)))
[17:03:16.564]                   }
[17:03:16.564]                 }, immediateCondition = function(cond) {
[17:03:16.564]                   save_rds <- function (object, pathname, ...) 
[17:03:16.564]                   {
[17:03:16.564]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:16.564]                     if (file_test("-f", pathname_tmp)) {
[17:03:16.564]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.564]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:16.564]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.564]                         fi_tmp[["mtime"]])
[17:03:16.564]                     }
[17:03:16.564]                     tryCatch({
[17:03:16.564]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:16.564]                     }, error = function(ex) {
[17:03:16.564]                       msg <- conditionMessage(ex)
[17:03:16.564]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.564]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:16.564]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.564]                         fi_tmp[["mtime"]], msg)
[17:03:16.564]                       ex$message <- msg
[17:03:16.564]                       stop(ex)
[17:03:16.564]                     })
[17:03:16.564]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:16.564]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:16.564]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:16.564]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.564]                       fi <- file.info(pathname)
[17:03:16.564]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:16.564]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.564]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:16.564]                         fi[["size"]], fi[["mtime"]])
[17:03:16.564]                       stop(msg)
[17:03:16.564]                     }
[17:03:16.564]                     invisible(pathname)
[17:03:16.564]                   }
[17:03:16.564]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:16.564]                     rootPath = tempdir()) 
[17:03:16.564]                   {
[17:03:16.564]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:16.564]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:16.564]                       tmpdir = path, fileext = ".rds")
[17:03:16.564]                     save_rds(obj, file)
[17:03:16.564]                   }
[17:03:16.564]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:16.564]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.564]                   {
[17:03:16.564]                     inherits <- base::inherits
[17:03:16.564]                     invokeRestart <- base::invokeRestart
[17:03:16.564]                     is.null <- base::is.null
[17:03:16.564]                     muffled <- FALSE
[17:03:16.564]                     if (inherits(cond, "message")) {
[17:03:16.564]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.564]                       if (muffled) 
[17:03:16.564]                         invokeRestart("muffleMessage")
[17:03:16.564]                     }
[17:03:16.564]                     else if (inherits(cond, "warning")) {
[17:03:16.564]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.564]                       if (muffled) 
[17:03:16.564]                         invokeRestart("muffleWarning")
[17:03:16.564]                     }
[17:03:16.564]                     else if (inherits(cond, "condition")) {
[17:03:16.564]                       if (!is.null(pattern)) {
[17:03:16.564]                         computeRestarts <- base::computeRestarts
[17:03:16.564]                         grepl <- base::grepl
[17:03:16.564]                         restarts <- computeRestarts(cond)
[17:03:16.564]                         for (restart in restarts) {
[17:03:16.564]                           name <- restart$name
[17:03:16.564]                           if (is.null(name)) 
[17:03:16.564]                             next
[17:03:16.564]                           if (!grepl(pattern, name)) 
[17:03:16.564]                             next
[17:03:16.564]                           invokeRestart(restart)
[17:03:16.564]                           muffled <- TRUE
[17:03:16.564]                           break
[17:03:16.564]                         }
[17:03:16.564]                       }
[17:03:16.564]                     }
[17:03:16.564]                     invisible(muffled)
[17:03:16.564]                   }
[17:03:16.564]                   muffleCondition(cond)
[17:03:16.564]                 })
[17:03:16.564]             }))
[17:03:16.564]             future::FutureResult(value = ...future.value$value, 
[17:03:16.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.564]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.564]                     ...future.globalenv.names))
[17:03:16.564]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.564]         }, condition = base::local({
[17:03:16.564]             c <- base::c
[17:03:16.564]             inherits <- base::inherits
[17:03:16.564]             invokeRestart <- base::invokeRestart
[17:03:16.564]             length <- base::length
[17:03:16.564]             list <- base::list
[17:03:16.564]             seq.int <- base::seq.int
[17:03:16.564]             signalCondition <- base::signalCondition
[17:03:16.564]             sys.calls <- base::sys.calls
[17:03:16.564]             `[[` <- base::`[[`
[17:03:16.564]             `+` <- base::`+`
[17:03:16.564]             `<<-` <- base::`<<-`
[17:03:16.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.564]                   3L)]
[17:03:16.564]             }
[17:03:16.564]             function(cond) {
[17:03:16.564]                 is_error <- inherits(cond, "error")
[17:03:16.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.564]                   NULL)
[17:03:16.564]                 if (is_error) {
[17:03:16.564]                   sessionInformation <- function() {
[17:03:16.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.564]                       search = base::search(), system = base::Sys.info())
[17:03:16.564]                   }
[17:03:16.564]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.564]                     cond$call), session = sessionInformation(), 
[17:03:16.564]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.564]                   signalCondition(cond)
[17:03:16.564]                 }
[17:03:16.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.564]                 "immediateCondition"))) {
[17:03:16.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.564]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.564]                   if (TRUE && !signal) {
[17:03:16.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.564]                     {
[17:03:16.564]                       inherits <- base::inherits
[17:03:16.564]                       invokeRestart <- base::invokeRestart
[17:03:16.564]                       is.null <- base::is.null
[17:03:16.564]                       muffled <- FALSE
[17:03:16.564]                       if (inherits(cond, "message")) {
[17:03:16.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.564]                         if (muffled) 
[17:03:16.564]                           invokeRestart("muffleMessage")
[17:03:16.564]                       }
[17:03:16.564]                       else if (inherits(cond, "warning")) {
[17:03:16.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.564]                         if (muffled) 
[17:03:16.564]                           invokeRestart("muffleWarning")
[17:03:16.564]                       }
[17:03:16.564]                       else if (inherits(cond, "condition")) {
[17:03:16.564]                         if (!is.null(pattern)) {
[17:03:16.564]                           computeRestarts <- base::computeRestarts
[17:03:16.564]                           grepl <- base::grepl
[17:03:16.564]                           restarts <- computeRestarts(cond)
[17:03:16.564]                           for (restart in restarts) {
[17:03:16.564]                             name <- restart$name
[17:03:16.564]                             if (is.null(name)) 
[17:03:16.564]                               next
[17:03:16.564]                             if (!grepl(pattern, name)) 
[17:03:16.564]                               next
[17:03:16.564]                             invokeRestart(restart)
[17:03:16.564]                             muffled <- TRUE
[17:03:16.564]                             break
[17:03:16.564]                           }
[17:03:16.564]                         }
[17:03:16.564]                       }
[17:03:16.564]                       invisible(muffled)
[17:03:16.564]                     }
[17:03:16.564]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.564]                   }
[17:03:16.564]                 }
[17:03:16.564]                 else {
[17:03:16.564]                   if (TRUE) {
[17:03:16.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.564]                     {
[17:03:16.564]                       inherits <- base::inherits
[17:03:16.564]                       invokeRestart <- base::invokeRestart
[17:03:16.564]                       is.null <- base::is.null
[17:03:16.564]                       muffled <- FALSE
[17:03:16.564]                       if (inherits(cond, "message")) {
[17:03:16.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.564]                         if (muffled) 
[17:03:16.564]                           invokeRestart("muffleMessage")
[17:03:16.564]                       }
[17:03:16.564]                       else if (inherits(cond, "warning")) {
[17:03:16.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.564]                         if (muffled) 
[17:03:16.564]                           invokeRestart("muffleWarning")
[17:03:16.564]                       }
[17:03:16.564]                       else if (inherits(cond, "condition")) {
[17:03:16.564]                         if (!is.null(pattern)) {
[17:03:16.564]                           computeRestarts <- base::computeRestarts
[17:03:16.564]                           grepl <- base::grepl
[17:03:16.564]                           restarts <- computeRestarts(cond)
[17:03:16.564]                           for (restart in restarts) {
[17:03:16.564]                             name <- restart$name
[17:03:16.564]                             if (is.null(name)) 
[17:03:16.564]                               next
[17:03:16.564]                             if (!grepl(pattern, name)) 
[17:03:16.564]                               next
[17:03:16.564]                             invokeRestart(restart)
[17:03:16.564]                             muffled <- TRUE
[17:03:16.564]                             break
[17:03:16.564]                           }
[17:03:16.564]                         }
[17:03:16.564]                       }
[17:03:16.564]                       invisible(muffled)
[17:03:16.564]                     }
[17:03:16.564]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.564]                   }
[17:03:16.564]                 }
[17:03:16.564]             }
[17:03:16.564]         }))
[17:03:16.564]     }, error = function(ex) {
[17:03:16.564]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.564]                 ...future.rng), started = ...future.startTime, 
[17:03:16.564]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.564]             version = "1.8"), class = "FutureResult")
[17:03:16.564]     }, finally = {
[17:03:16.564]         if (!identical(...future.workdir, getwd())) 
[17:03:16.564]             setwd(...future.workdir)
[17:03:16.564]         {
[17:03:16.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.564]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.564]             }
[17:03:16.564]             base::options(...future.oldOptions)
[17:03:16.564]             if (.Platform$OS.type == "windows") {
[17:03:16.564]                 old_names <- names(...future.oldEnvVars)
[17:03:16.564]                 envs <- base::Sys.getenv()
[17:03:16.564]                 names <- names(envs)
[17:03:16.564]                 common <- intersect(names, old_names)
[17:03:16.564]                 added <- setdiff(names, old_names)
[17:03:16.564]                 removed <- setdiff(old_names, names)
[17:03:16.564]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.564]                   envs[common]]
[17:03:16.564]                 NAMES <- toupper(changed)
[17:03:16.564]                 args <- list()
[17:03:16.564]                 for (kk in seq_along(NAMES)) {
[17:03:16.564]                   name <- changed[[kk]]
[17:03:16.564]                   NAME <- NAMES[[kk]]
[17:03:16.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.564]                     next
[17:03:16.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.564]                 }
[17:03:16.564]                 NAMES <- toupper(added)
[17:03:16.564]                 for (kk in seq_along(NAMES)) {
[17:03:16.564]                   name <- added[[kk]]
[17:03:16.564]                   NAME <- NAMES[[kk]]
[17:03:16.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.564]                     next
[17:03:16.564]                   args[[name]] <- ""
[17:03:16.564]                 }
[17:03:16.564]                 NAMES <- toupper(removed)
[17:03:16.564]                 for (kk in seq_along(NAMES)) {
[17:03:16.564]                   name <- removed[[kk]]
[17:03:16.564]                   NAME <- NAMES[[kk]]
[17:03:16.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.564]                     next
[17:03:16.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.564]                 }
[17:03:16.564]                 if (length(args) > 0) 
[17:03:16.564]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.564]             }
[17:03:16.564]             else {
[17:03:16.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.564]             }
[17:03:16.564]             {
[17:03:16.564]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.564]                   0L) {
[17:03:16.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.564]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.564]                   base::options(opts)
[17:03:16.564]                 }
[17:03:16.564]                 {
[17:03:16.564]                   {
[17:03:16.564]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.564]                     NULL
[17:03:16.564]                   }
[17:03:16.564]                   options(future.plan = NULL)
[17:03:16.564]                   if (is.na(NA_character_)) 
[17:03:16.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.564]                     .init = FALSE)
[17:03:16.564]                 }
[17:03:16.564]             }
[17:03:16.564]         }
[17:03:16.564]     })
[17:03:16.564]     if (TRUE) {
[17:03:16.564]         base::sink(type = "output", split = FALSE)
[17:03:16.564]         if (TRUE) {
[17:03:16.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.564]         }
[17:03:16.564]         else {
[17:03:16.564]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.564]         }
[17:03:16.564]         base::close(...future.stdout)
[17:03:16.564]         ...future.stdout <- NULL
[17:03:16.564]     }
[17:03:16.564]     ...future.result$conditions <- ...future.conditions
[17:03:16.564]     ...future.result$finished <- base::Sys.time()
[17:03:16.564]     ...future.result
[17:03:16.564] }
[17:03:16.567] assign_globals() ...
[17:03:16.567] List of 1
[17:03:16.567]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.567]   ..$ a: int [1:3] 1 2 3
[17:03:16.567]   ..$ b: int [1:3] 3 2 1
[17:03:16.567]  - attr(*, "where")=List of 1
[17:03:16.567]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.567]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.567]  - attr(*, "resolved")= logi FALSE
[17:03:16.567]  - attr(*, "total_size")= num 128
[17:03:16.567]  - attr(*, "already-done")= logi TRUE
[17:03:16.571] - copied ‘data’ to environment
[17:03:16.571] assign_globals() ... done
[17:03:16.571] requestCore(): workers = 2
[17:03:16.573] MulticoreFuture started
[17:03:16.574] - Launch lazy future ... done
[17:03:16.574] run() for ‘MulticoreFuture’ ... done
[17:03:16.574] result() for MulticoreFuture ...
[17:03:16.575] plan(): Setting new future strategy stack:
[17:03:16.575] List of future strategies:
[17:03:16.575] 1. sequential:
[17:03:16.575]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.575]    - tweaked: FALSE
[17:03:16.575]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.576] plan(): nbrOfWorkers() = 1
[17:03:16.600] plan(): Setting new future strategy stack:
[17:03:16.600] List of future strategies:
[17:03:16.600] 1. multicore:
[17:03:16.600]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.600]    - tweaked: FALSE
[17:03:16.600]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.600] 2. sequential:
[17:03:16.600]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.600]    - tweaked: FALSE
[17:03:16.600]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.605] plan(): nbrOfWorkers() = 2
[17:03:16.606] result() for MulticoreFuture ...
[17:03:16.606] result() for MulticoreFuture ... done
[17:03:16.607] signalConditions() ...
[17:03:16.607]  - include = ‘immediateCondition’
[17:03:16.607]  - exclude = 
[17:03:16.607]  - resignal = FALSE
[17:03:16.607]  - Number of conditions: 52
[17:03:16.607] signalConditions() ... done
[17:03:16.607] result() for MulticoreFuture ... done
[17:03:16.607] result() for MulticoreFuture ...
[17:03:16.608] result() for MulticoreFuture ... done
[17:03:16.608] signalConditions() ...
[17:03:16.608]  - include = ‘immediateCondition’
[17:03:16.608]  - exclude = 
[17:03:16.608]  - resignal = FALSE
[17:03:16.608]  - Number of conditions: 52
[17:03:16.608] signalConditions() ... done
[17:03:16.608] Future state: ‘finished’
[17:03:16.609] result() for MulticoreFuture ...
[17:03:16.609] result() for MulticoreFuture ... done
[17:03:16.609] signalConditions() ...
[17:03:16.609]  - include = ‘condition’
[17:03:16.609]  - exclude = ‘immediateCondition’
[17:03:16.609]  - resignal = TRUE
[17:03:16.609]  - Number of conditions: 52
[17:03:16.609]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.577] getGlobalsAndPackages() ...
[17:03:16.609]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.577] Searching for globals...
[17:03:16.610]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.579] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.610]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.580] Searching for globals ... DONE
[17:03:16.610]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.580] Resolving globals: FALSE
[17:03:16.610]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.581] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.610]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.581] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.610]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.582] - globals: [1] ‘data’
[17:03:16.611]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.582] 
[17:03:16.611]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.582] getGlobalsAndPackages() ... DONE
[17:03:16.611]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.583] run() for ‘Future’ ...
[17:03:16.611]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.583] - state: ‘created’
[17:03:16.611]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.583] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:03:16.611]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.584] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:16.611]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.584] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:16.612]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.584]   - Field: ‘label’
[17:03:16.612]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.584]   - Field: ‘local’
[17:03:16.612]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.584]   - Field: ‘owner’
[17:03:16.612]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.585]   - Field: ‘envir’
[17:03:16.612]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.585]   - Field: ‘packages’
[17:03:16.612]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.585]   - Field: ‘gc’
[17:03:16.613]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.585]   - Field: ‘conditions’
[17:03:16.613]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.585]   - Field: ‘expr’
[17:03:16.613]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.585]   - Field: ‘uuid’
[17:03:16.613]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.586]   - Field: ‘seed’
[17:03:16.613]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.586]   - Field: ‘version’
[17:03:16.613]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.586]   - Field: ‘result’
[17:03:16.613]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.586]   - Field: ‘asynchronous’
[17:03:16.614]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.586]   - Field: ‘calls’
[17:03:16.614]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.586]   - Field: ‘globals’
[17:03:16.614]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.587]   - Field: ‘stdout’
[17:03:16.614]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.587]   - Field: ‘earlySignal’
[17:03:16.614]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.587]   - Field: ‘lazy’
[17:03:16.614]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.587]   - Field: ‘state’
[17:03:16.614]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.587] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:16.615]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.587] - Launch lazy future ...
[17:03:16.615]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.588] Packages needed by the future expression (n = 0): <none>
[17:03:16.615]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.588] Packages needed by future strategies (n = 0): <none>
[17:03:16.615]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.589] {
[17:03:16.589]     {
[17:03:16.589]         {
[17:03:16.589]             ...future.startTime <- base::Sys.time()
[17:03:16.589]             {
[17:03:16.589]                 {
[17:03:16.589]                   {
[17:03:16.589]                     base::local({
[17:03:16.589]                       has_future <- base::requireNamespace("future", 
[17:03:16.589]                         quietly = TRUE)
[17:03:16.589]                       if (has_future) {
[17:03:16.589]                         ns <- base::getNamespace("future")
[17:03:16.589]                         version <- ns[[".package"]][["version"]]
[17:03:16.589]                         if (is.null(version)) 
[17:03:16.589]                           version <- utils::packageVersion("future")
[17:03:16.589]                       }
[17:03:16.589]                       else {
[17:03:16.589]                         version <- NULL
[17:03:16.589]                       }
[17:03:16.589]                       if (!has_future || version < "1.8.0") {
[17:03:16.589]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.589]                           "", base::R.version$version.string), 
[17:03:16.589]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:16.589]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.589]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.589]                             "release", "version")], collapse = " "), 
[17:03:16.589]                           hostname = base::Sys.info()[["nodename"]])
[17:03:16.589]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.589]                           info)
[17:03:16.589]                         info <- base::paste(info, collapse = "; ")
[17:03:16.589]                         if (!has_future) {
[17:03:16.589]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.589]                             info)
[17:03:16.589]                         }
[17:03:16.589]                         else {
[17:03:16.589]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.589]                             info, version)
[17:03:16.589]                         }
[17:03:16.589]                         base::stop(msg)
[17:03:16.589]                       }
[17:03:16.589]                     })
[17:03:16.589]                   }
[17:03:16.589]                   ...future.strategy.old <- future::plan("list")
[17:03:16.589]                   options(future.plan = NULL)
[17:03:16.589]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.589]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.589]                 }
[17:03:16.589]                 ...future.workdir <- getwd()
[17:03:16.589]             }
[17:03:16.589]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.589]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.589]         }
[17:03:16.589]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.589]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.589]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.589]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.589]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.589]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.589]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.589]             base::names(...future.oldOptions))
[17:03:16.589]     }
[17:03:16.589]     if (FALSE) {
[17:03:16.589]     }
[17:03:16.589]     else {
[17:03:16.589]         if (TRUE) {
[17:03:16.589]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.589]                 open = "w")
[17:03:16.589]         }
[17:03:16.589]         else {
[17:03:16.589]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.589]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.589]         }
[17:03:16.589]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.589]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.589]             base::sink(type = "output", split = FALSE)
[17:03:16.589]             base::close(...future.stdout)
[17:03:16.589]         }, add = TRUE)
[17:03:16.589]     }
[17:03:16.589]     ...future.frame <- base::sys.nframe()
[17:03:16.589]     ...future.conditions <- base::list()
[17:03:16.589]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.589]     if (FALSE) {
[17:03:16.589]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.589]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.589]     }
[17:03:16.589]     ...future.result <- base::tryCatch({
[17:03:16.589]         base::withCallingHandlers({
[17:03:16.589]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:03:16.589]                 a == 2)))
[17:03:16.589]             future::FutureResult(value = ...future.value$value, 
[17:03:16.589]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.589]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.589]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.589]                     ...future.globalenv.names))
[17:03:16.589]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.589]         }, condition = base::local({
[17:03:16.589]             c <- base::c
[17:03:16.589]             inherits <- base::inherits
[17:03:16.589]             invokeRestart <- base::invokeRestart
[17:03:16.589]             length <- base::length
[17:03:16.589]             list <- base::list
[17:03:16.589]             seq.int <- base::seq.int
[17:03:16.589]             signalCondition <- base::signalCondition
[17:03:16.589]             sys.calls <- base::sys.calls
[17:03:16.589]             `[[` <- base::`[[`
[17:03:16.589]             `+` <- base::`+`
[17:03:16.589]             `<<-` <- base::`<<-`
[17:03:16.589]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.589]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.589]                   3L)]
[17:03:16.589]             }
[17:03:16.589]             function(cond) {
[17:03:16.589]                 is_error <- inherits(cond, "error")
[17:03:16.589]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.589]                   NULL)
[17:03:16.589]                 if (is_error) {
[17:03:16.589]                   sessionInformation <- function() {
[17:03:16.589]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.589]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.589]                       search = base::search(), system = base::Sys.info())
[17:03:16.589]                   }
[17:03:16.589]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.589]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.589]                     cond$call), session = sessionInformation(), 
[17:03:16.589]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.589]                   signalCondition(cond)
[17:03:16.589]                 }
[17:03:16.589]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.589]                 "immediateCondition"))) {
[17:03:16.589]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.589]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.589]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.589]                   if (TRUE && !signal) {
[17:03:16.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.589]                     {
[17:03:16.589]                       inherits <- base::inherits
[17:03:16.589]                       invokeRestart <- base::invokeRestart
[17:03:16.589]                       is.null <- base::is.null
[17:03:16.589]                       muffled <- FALSE
[17:03:16.589]                       if (inherits(cond, "message")) {
[17:03:16.589]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.589]                         if (muffled) 
[17:03:16.589]                           invokeRestart("muffleMessage")
[17:03:16.589]                       }
[17:03:16.589]                       else if (inherits(cond, "warning")) {
[17:03:16.589]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.589]                         if (muffled) 
[17:03:16.589]                           invokeRestart("muffleWarning")
[17:03:16.589]                       }
[17:03:16.589]                       else if (inherits(cond, "condition")) {
[17:03:16.589]                         if (!is.null(pattern)) {
[17:03:16.589]                           computeRestarts <- base::computeRestarts
[17:03:16.589]                           grepl <- base::grepl
[17:03:16.589]                           restarts <- computeRestarts(cond)
[17:03:16.589]                           for (restart in restarts) {
[17:03:16.589]                             name <- restart$name
[17:03:16.589]                             if (is.null(name)) 
[17:03:16.589]                               next
[17:03:16.589]                             if (!grepl(pattern, name)) 
[17:03:16.589]                               next
[17:03:16.589]                             invokeRestart(restart)
[17:03:16.589]                             muffled <- TRUE
[17:03:16.589]                             break
[17:03:16.589]                           }
[17:03:16.589]                         }
[17:03:16.589]                       }
[17:03:16.589]                       invisible(muffled)
[17:03:16.589]                     }
[17:03:16.589]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.589]                   }
[17:03:16.589]                 }
[17:03:16.589]                 else {
[17:03:16.589]                   if (TRUE) {
[17:03:16.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.589]                     {
[17:03:16.589]                       inherits <- base::inherits
[17:03:16.589]                       invokeRestart <- base::invokeRestart
[17:03:16.589]                       is.null <- base::is.null
[17:03:16.589]                       muffled <- FALSE
[17:03:16.589]                       if (inherits(cond, "message")) {
[17:03:16.589]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.589]                         if (muffled) 
[17:03:16.589]                           invokeRestart("muffleMessage")
[17:03:16.589]                       }
[17:03:16.589]                       else if (inherits(cond, "warning")) {
[17:03:16.589]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.589]                         if (muffled) 
[17:03:16.589]                           invokeRestart("muffleWarning")
[17:03:16.589]                       }
[17:03:16.589]                       else if (inherits(cond, "condition")) {
[17:03:16.589]                         if (!is.null(pattern)) {
[17:03:16.589]                           computeRestarts <- base::computeRestarts
[17:03:16.589]                           grepl <- base::grepl
[17:03:16.589]                           restarts <- computeRestarts(cond)
[17:03:16.589]                           for (restart in restarts) {
[17:03:16.589]                             name <- restart$name
[17:03:16.589]                             if (is.null(name)) 
[17:03:16.589]                               next
[17:03:16.589]                             if (!grepl(pattern, name)) 
[17:03:16.589]                               next
[17:03:16.589]                             invokeRestart(restart)
[17:03:16.589]                             muffled <- TRUE
[17:03:16.589]                             break
[17:03:16.589]                           }
[17:03:16.589]                         }
[17:03:16.589]                       }
[17:03:16.589]                       invisible(muffled)
[17:03:16.589]                     }
[17:03:16.589]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.589]                   }
[17:03:16.589]                 }
[17:03:16.589]             }
[17:03:16.589]         }))
[17:03:16.589]     }, error = function(ex) {
[17:03:16.589]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.589]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.589]                 ...future.rng), started = ...future.startTime, 
[17:03:16.589]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.589]             version = "1.8"), class = "FutureResult")
[17:03:16.589]     }, finally = {
[17:03:16.589]         if (!identical(...future.workdir, getwd())) 
[17:03:16.589]             setwd(...future.workdir)
[17:03:16.589]         {
[17:03:16.589]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.589]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.589]             }
[17:03:16.589]             base::options(...future.oldOptions)
[17:03:16.589]             if (.Platform$OS.type == "windows") {
[17:03:16.589]                 old_names <- names(...future.oldEnvVars)
[17:03:16.589]                 envs <- base::Sys.getenv()
[17:03:16.589]                 names <- names(envs)
[17:03:16.589]                 common <- intersect(names, old_names)
[17:03:16.589]                 added <- setdiff(names, old_names)
[17:03:16.589]                 removed <- setdiff(old_names, names)
[17:03:16.589]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.589]                   envs[common]]
[17:03:16.589]                 NAMES <- toupper(changed)
[17:03:16.589]                 args <- list()
[17:03:16.589]                 for (kk in seq_along(NAMES)) {
[17:03:16.589]                   name <- changed[[kk]]
[17:03:16.589]                   NAME <- NAMES[[kk]]
[17:03:16.589]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.589]                     next
[17:03:16.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.589]                 }
[17:03:16.589]                 NAMES <- toupper(added)
[17:03:16.589]                 for (kk in seq_along(NAMES)) {
[17:03:16.589]                   name <- added[[kk]]
[17:03:16.589]                   NAME <- NAMES[[kk]]
[17:03:16.589]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.589]                     next
[17:03:16.589]                   args[[name]] <- ""
[17:03:16.589]                 }
[17:03:16.589]                 NAMES <- toupper(removed)
[17:03:16.589]                 for (kk in seq_along(NAMES)) {
[17:03:16.589]                   name <- removed[[kk]]
[17:03:16.589]                   NAME <- NAMES[[kk]]
[17:03:16.589]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.589]                     next
[17:03:16.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.589]                 }
[17:03:16.589]                 if (length(args) > 0) 
[17:03:16.589]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.589]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.589]             }
[17:03:16.589]             else {
[17:03:16.589]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.589]             }
[17:03:16.589]             {
[17:03:16.589]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.589]                   0L) {
[17:03:16.589]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.589]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.589]                   base::options(opts)
[17:03:16.589]                 }
[17:03:16.589]                 {
[17:03:16.589]                   {
[17:03:16.589]                     NULL
[17:03:16.589]                     RNGkind("Mersenne-Twister")
[17:03:16.589]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.589]                       inherits = FALSE)
[17:03:16.589]                   }
[17:03:16.589]                   options(future.plan = NULL)
[17:03:16.589]                   if (is.na(NA_character_)) 
[17:03:16.589]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.589]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.589]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.589]                     .init = FALSE)
[17:03:16.589]                 }
[17:03:16.589]             }
[17:03:16.589]         }
[17:03:16.589]     })
[17:03:16.589]     if (TRUE) {
[17:03:16.589]         base::sink(type = "output", split = FALSE)
[17:03:16.589]         if (TRUE) {
[17:03:16.589]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.589]         }
[17:03:16.589]         else {
[17:03:16.589]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.589]         }
[17:03:16.589]         base::close(...future.stdout)
[17:03:16.589]         ...future.stdout <- NULL
[17:03:16.589]     }
[17:03:16.589]     ...future.result$conditions <- ...future.conditions
[17:03:16.589]     ...future.result$finished <- base::Sys.time()
[17:03:16.589]     ...future.result
[17:03:16.589] }
[17:03:16.615]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.591] assign_globals() ...
[17:03:16.615]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.591] List of 1
[17:03:16.591]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.591]   ..$ a: int [1:3] 1 2 3
[17:03:16.591]   ..$ b: int [1:3] 3 2 1
[17:03:16.591]  - attr(*, "where")=List of 1
[17:03:16.591]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.591]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.591]  - attr(*, "resolved")= logi FALSE
[17:03:16.591]  - attr(*, "total_size")= num 128
[17:03:16.591]  - attr(*, "already-done")= logi TRUE
[17:03:16.616]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.596] - copied ‘data’ to environment
[17:03:16.616]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.596] assign_globals() ... done
[17:03:16.616]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.596] plan(): Setting new future strategy stack:
[17:03:16.616]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.596] List of future strategies:
[17:03:16.596] 1. sequential:
[17:03:16.596]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.596]    - tweaked: FALSE
[17:03:16.596]    - call: NULL
[17:03:16.616]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.597] plan(): nbrOfWorkers() = 1
[17:03:16.616]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.598] plan(): Setting new future strategy stack:
[17:03:16.617]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.598] List of future strategies:
[17:03:16.598] 1. sequential:
[17:03:16.598]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.598]    - tweaked: FALSE
[17:03:16.598]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.617]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.599] plan(): nbrOfWorkers() = 1
[17:03:16.617]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.599] SequentialFuture started (and completed)
[17:03:16.617]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.599] - Launch lazy future ... done
[17:03:16.617]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.600] run() for ‘SequentialFuture’ ... done
[17:03:16.617] signalConditions() ... done
- plan(list('multicore', 'sequential')) ... DONE
- plan(list('multicore', 'multicore')) ...
[17:03:16.618] plan(): Setting new future strategy stack:
[17:03:16.618] List of future strategies:
[17:03:16.618] 1. multicore:
[17:03:16.618]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.618]    - tweaked: FALSE
[17:03:16.618]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.618] 2. multicore:
[17:03:16.618]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.618]    - tweaked: FALSE
[17:03:16.618]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.622] plan(): nbrOfWorkers() = 2
[17:03:16.623] getGlobalsAndPackages() ...
[17:03:16.623] Searching for globals...
[17:03:16.645] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:16.645] Searching for globals ... DONE
[17:03:16.645] Resolving globals: FALSE
[17:03:16.646] The total size of the 2 globals is 93.07 KiB (95304 bytes)
[17:03:16.647] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 93.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (92.95 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:16.647] - globals: [2] ‘nested’, ‘strategy2’
[17:03:16.647] - packages: [1] ‘future’
[17:03:16.647] getGlobalsAndPackages() ... DONE
[17:03:16.647] run() for ‘Future’ ...
[17:03:16.647] - state: ‘created’
[17:03:16.648] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.651] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.651] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:16.651]   - Field: ‘label’
[17:03:16.652]   - Field: ‘local’
[17:03:16.652]   - Field: ‘owner’
[17:03:16.652]   - Field: ‘envir’
[17:03:16.652]   - Field: ‘workers’
[17:03:16.652]   - Field: ‘packages’
[17:03:16.652]   - Field: ‘gc’
[17:03:16.652]   - Field: ‘job’
[17:03:16.652]   - Field: ‘conditions’
[17:03:16.652]   - Field: ‘expr’
[17:03:16.653]   - Field: ‘uuid’
[17:03:16.653]   - Field: ‘seed’
[17:03:16.653]   - Field: ‘version’
[17:03:16.653]   - Field: ‘result’
[17:03:16.653]   - Field: ‘asynchronous’
[17:03:16.653]   - Field: ‘calls’
[17:03:16.653]   - Field: ‘globals’
[17:03:16.653]   - Field: ‘stdout’
[17:03:16.653]   - Field: ‘earlySignal’
[17:03:16.653]   - Field: ‘lazy’
[17:03:16.654]   - Field: ‘state’
[17:03:16.654] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:16.654] - Launch lazy future ...
[17:03:16.654] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.654] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.655] {
[17:03:16.655]     {
[17:03:16.655]         {
[17:03:16.655]             ...future.startTime <- base::Sys.time()
[17:03:16.655]             {
[17:03:16.655]                 {
[17:03:16.655]                   {
[17:03:16.655]                     {
[17:03:16.655]                       {
[17:03:16.655]                         base::local({
[17:03:16.655]                           has_future <- base::requireNamespace("future", 
[17:03:16.655]                             quietly = TRUE)
[17:03:16.655]                           if (has_future) {
[17:03:16.655]                             ns <- base::getNamespace("future")
[17:03:16.655]                             version <- ns[[".package"]][["version"]]
[17:03:16.655]                             if (is.null(version)) 
[17:03:16.655]                               version <- utils::packageVersion("future")
[17:03:16.655]                           }
[17:03:16.655]                           else {
[17:03:16.655]                             version <- NULL
[17:03:16.655]                           }
[17:03:16.655]                           if (!has_future || version < "1.8.0") {
[17:03:16.655]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.655]                               "", base::R.version$version.string), 
[17:03:16.655]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:16.655]                                 base::R.version$platform, 8 * 
[17:03:16.655]                                   base::.Machine$sizeof.pointer), 
[17:03:16.655]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.655]                                 "release", "version")], collapse = " "), 
[17:03:16.655]                               hostname = base::Sys.info()[["nodename"]])
[17:03:16.655]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.655]                               info)
[17:03:16.655]                             info <- base::paste(info, collapse = "; ")
[17:03:16.655]                             if (!has_future) {
[17:03:16.655]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.655]                                 info)
[17:03:16.655]                             }
[17:03:16.655]                             else {
[17:03:16.655]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.655]                                 info, version)
[17:03:16.655]                             }
[17:03:16.655]                             base::stop(msg)
[17:03:16.655]                           }
[17:03:16.655]                         })
[17:03:16.655]                       }
[17:03:16.655]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.655]                       base::options(mc.cores = 1L)
[17:03:16.655]                     }
[17:03:16.655]                     base::local({
[17:03:16.655]                       for (pkg in "future") {
[17:03:16.655]                         base::loadNamespace(pkg)
[17:03:16.655]                         base::library(pkg, character.only = TRUE)
[17:03:16.655]                       }
[17:03:16.655]                     })
[17:03:16.655]                   }
[17:03:16.655]                   ...future.strategy.old <- future::plan("list")
[17:03:16.655]                   options(future.plan = NULL)
[17:03:16.655]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.655]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:16.655]                     envir = parent.frame()) 
[17:03:16.655]                   {
[17:03:16.655]                     default_workers <- missing(workers)
[17:03:16.655]                     if (is.function(workers)) 
[17:03:16.655]                       workers <- workers()
[17:03:16.655]                     workers <- structure(as.integer(workers), 
[17:03:16.655]                       class = class(workers))
[17:03:16.655]                     stop_if_not(is.finite(workers), workers >= 
[17:03:16.655]                       1L)
[17:03:16.655]                     if ((workers == 1L && !inherits(workers, 
[17:03:16.655]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:16.655]                       if (default_workers) 
[17:03:16.655]                         supportsMulticore(warn = TRUE)
[17:03:16.655]                       return(sequential(..., envir = envir))
[17:03:16.655]                     }
[17:03:16.655]                     oopts <- options(mc.cores = workers)
[17:03:16.655]                     on.exit(options(oopts))
[17:03:16.655]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:16.655]                       envir = envir)
[17:03:16.655]                     if (!future$lazy) 
[17:03:16.655]                       future <- run(future)
[17:03:16.655]                     invisible(future)
[17:03:16.655]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.655]                 }
[17:03:16.655]                 ...future.workdir <- getwd()
[17:03:16.655]             }
[17:03:16.655]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.655]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.655]         }
[17:03:16.655]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.655]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.655]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.655]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.655]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.655]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.655]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.655]             base::names(...future.oldOptions))
[17:03:16.655]     }
[17:03:16.655]     if (FALSE) {
[17:03:16.655]     }
[17:03:16.655]     else {
[17:03:16.655]         if (TRUE) {
[17:03:16.655]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.655]                 open = "w")
[17:03:16.655]         }
[17:03:16.655]         else {
[17:03:16.655]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.655]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.655]         }
[17:03:16.655]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.655]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.655]             base::sink(type = "output", split = FALSE)
[17:03:16.655]             base::close(...future.stdout)
[17:03:16.655]         }, add = TRUE)
[17:03:16.655]     }
[17:03:16.655]     ...future.frame <- base::sys.nframe()
[17:03:16.655]     ...future.conditions <- base::list()
[17:03:16.655]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.655]     if (FALSE) {
[17:03:16.655]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.655]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.655]     }
[17:03:16.655]     ...future.result <- base::tryCatch({
[17:03:16.655]         base::withCallingHandlers({
[17:03:16.655]             ...future.value <- base::withVisible(base::local({
[17:03:16.655]                 withCallingHandlers({
[17:03:16.655]                   {
[17:03:16.655]                     a <- 1L
[17:03:16.655]                     plan_a <- unclass(future::plan("list"))
[17:03:16.655]                     nested_a <- nested[-1]
[17:03:16.655]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:16.655]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.655]                       strategy2))
[17:03:16.655]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:16.655]                       "init") <- NULL
[17:03:16.655]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:16.655]                       "init") <- NULL
[17:03:16.655]                     stopifnot(all.equal(plan_a, nested_a))
[17:03:16.655]                     y %<-% {
[17:03:16.655]                       b <- 2L
[17:03:16.655]                       plan_b <- future::plan("list")
[17:03:16.655]                       nested_b <- nested_a[-1]
[17:03:16.655]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.655]                         1L, inherits(plan_b[[1]], "future"), 
[17:03:16.655]                         inherits(future::plan("next"), "sequential"))
[17:03:16.655]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.655]                         b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.655]                     }
[17:03:16.655]                     y
[17:03:16.655]                   }
[17:03:16.655]                 }, immediateCondition = function(cond) {
[17:03:16.655]                   save_rds <- function (object, pathname, ...) 
[17:03:16.655]                   {
[17:03:16.655]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:16.655]                     if (file_test("-f", pathname_tmp)) {
[17:03:16.655]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.655]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:16.655]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.655]                         fi_tmp[["mtime"]])
[17:03:16.655]                     }
[17:03:16.655]                     tryCatch({
[17:03:16.655]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:16.655]                     }, error = function(ex) {
[17:03:16.655]                       msg <- conditionMessage(ex)
[17:03:16.655]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.655]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:16.655]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.655]                         fi_tmp[["mtime"]], msg)
[17:03:16.655]                       ex$message <- msg
[17:03:16.655]                       stop(ex)
[17:03:16.655]                     })
[17:03:16.655]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:16.655]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:16.655]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:16.655]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.655]                       fi <- file.info(pathname)
[17:03:16.655]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:16.655]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.655]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:16.655]                         fi[["size"]], fi[["mtime"]])
[17:03:16.655]                       stop(msg)
[17:03:16.655]                     }
[17:03:16.655]                     invisible(pathname)
[17:03:16.655]                   }
[17:03:16.655]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:16.655]                     rootPath = tempdir()) 
[17:03:16.655]                   {
[17:03:16.655]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:16.655]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:16.655]                       tmpdir = path, fileext = ".rds")
[17:03:16.655]                     save_rds(obj, file)
[17:03:16.655]                   }
[17:03:16.655]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:16.655]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.655]                   {
[17:03:16.655]                     inherits <- base::inherits
[17:03:16.655]                     invokeRestart <- base::invokeRestart
[17:03:16.655]                     is.null <- base::is.null
[17:03:16.655]                     muffled <- FALSE
[17:03:16.655]                     if (inherits(cond, "message")) {
[17:03:16.655]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.655]                       if (muffled) 
[17:03:16.655]                         invokeRestart("muffleMessage")
[17:03:16.655]                     }
[17:03:16.655]                     else if (inherits(cond, "warning")) {
[17:03:16.655]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.655]                       if (muffled) 
[17:03:16.655]                         invokeRestart("muffleWarning")
[17:03:16.655]                     }
[17:03:16.655]                     else if (inherits(cond, "condition")) {
[17:03:16.655]                       if (!is.null(pattern)) {
[17:03:16.655]                         computeRestarts <- base::computeRestarts
[17:03:16.655]                         grepl <- base::grepl
[17:03:16.655]                         restarts <- computeRestarts(cond)
[17:03:16.655]                         for (restart in restarts) {
[17:03:16.655]                           name <- restart$name
[17:03:16.655]                           if (is.null(name)) 
[17:03:16.655]                             next
[17:03:16.655]                           if (!grepl(pattern, name)) 
[17:03:16.655]                             next
[17:03:16.655]                           invokeRestart(restart)
[17:03:16.655]                           muffled <- TRUE
[17:03:16.655]                           break
[17:03:16.655]                         }
[17:03:16.655]                       }
[17:03:16.655]                     }
[17:03:16.655]                     invisible(muffled)
[17:03:16.655]                   }
[17:03:16.655]                   muffleCondition(cond)
[17:03:16.655]                 })
[17:03:16.655]             }))
[17:03:16.655]             future::FutureResult(value = ...future.value$value, 
[17:03:16.655]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.655]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.655]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.655]                     ...future.globalenv.names))
[17:03:16.655]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.655]         }, condition = base::local({
[17:03:16.655]             c <- base::c
[17:03:16.655]             inherits <- base::inherits
[17:03:16.655]             invokeRestart <- base::invokeRestart
[17:03:16.655]             length <- base::length
[17:03:16.655]             list <- base::list
[17:03:16.655]             seq.int <- base::seq.int
[17:03:16.655]             signalCondition <- base::signalCondition
[17:03:16.655]             sys.calls <- base::sys.calls
[17:03:16.655]             `[[` <- base::`[[`
[17:03:16.655]             `+` <- base::`+`
[17:03:16.655]             `<<-` <- base::`<<-`
[17:03:16.655]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.655]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.655]                   3L)]
[17:03:16.655]             }
[17:03:16.655]             function(cond) {
[17:03:16.655]                 is_error <- inherits(cond, "error")
[17:03:16.655]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.655]                   NULL)
[17:03:16.655]                 if (is_error) {
[17:03:16.655]                   sessionInformation <- function() {
[17:03:16.655]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.655]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.655]                       search = base::search(), system = base::Sys.info())
[17:03:16.655]                   }
[17:03:16.655]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.655]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.655]                     cond$call), session = sessionInformation(), 
[17:03:16.655]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.655]                   signalCondition(cond)
[17:03:16.655]                 }
[17:03:16.655]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.655]                 "immediateCondition"))) {
[17:03:16.655]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.655]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.655]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.655]                   if (TRUE && !signal) {
[17:03:16.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.655]                     {
[17:03:16.655]                       inherits <- base::inherits
[17:03:16.655]                       invokeRestart <- base::invokeRestart
[17:03:16.655]                       is.null <- base::is.null
[17:03:16.655]                       muffled <- FALSE
[17:03:16.655]                       if (inherits(cond, "message")) {
[17:03:16.655]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.655]                         if (muffled) 
[17:03:16.655]                           invokeRestart("muffleMessage")
[17:03:16.655]                       }
[17:03:16.655]                       else if (inherits(cond, "warning")) {
[17:03:16.655]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.655]                         if (muffled) 
[17:03:16.655]                           invokeRestart("muffleWarning")
[17:03:16.655]                       }
[17:03:16.655]                       else if (inherits(cond, "condition")) {
[17:03:16.655]                         if (!is.null(pattern)) {
[17:03:16.655]                           computeRestarts <- base::computeRestarts
[17:03:16.655]                           grepl <- base::grepl
[17:03:16.655]                           restarts <- computeRestarts(cond)
[17:03:16.655]                           for (restart in restarts) {
[17:03:16.655]                             name <- restart$name
[17:03:16.655]                             if (is.null(name)) 
[17:03:16.655]                               next
[17:03:16.655]                             if (!grepl(pattern, name)) 
[17:03:16.655]                               next
[17:03:16.655]                             invokeRestart(restart)
[17:03:16.655]                             muffled <- TRUE
[17:03:16.655]                             break
[17:03:16.655]                           }
[17:03:16.655]                         }
[17:03:16.655]                       }
[17:03:16.655]                       invisible(muffled)
[17:03:16.655]                     }
[17:03:16.655]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.655]                   }
[17:03:16.655]                 }
[17:03:16.655]                 else {
[17:03:16.655]                   if (TRUE) {
[17:03:16.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.655]                     {
[17:03:16.655]                       inherits <- base::inherits
[17:03:16.655]                       invokeRestart <- base::invokeRestart
[17:03:16.655]                       is.null <- base::is.null
[17:03:16.655]                       muffled <- FALSE
[17:03:16.655]                       if (inherits(cond, "message")) {
[17:03:16.655]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.655]                         if (muffled) 
[17:03:16.655]                           invokeRestart("muffleMessage")
[17:03:16.655]                       }
[17:03:16.655]                       else if (inherits(cond, "warning")) {
[17:03:16.655]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.655]                         if (muffled) 
[17:03:16.655]                           invokeRestart("muffleWarning")
[17:03:16.655]                       }
[17:03:16.655]                       else if (inherits(cond, "condition")) {
[17:03:16.655]                         if (!is.null(pattern)) {
[17:03:16.655]                           computeRestarts <- base::computeRestarts
[17:03:16.655]                           grepl <- base::grepl
[17:03:16.655]                           restarts <- computeRestarts(cond)
[17:03:16.655]                           for (restart in restarts) {
[17:03:16.655]                             name <- restart$name
[17:03:16.655]                             if (is.null(name)) 
[17:03:16.655]                               next
[17:03:16.655]                             if (!grepl(pattern, name)) 
[17:03:16.655]                               next
[17:03:16.655]                             invokeRestart(restart)
[17:03:16.655]                             muffled <- TRUE
[17:03:16.655]                             break
[17:03:16.655]                           }
[17:03:16.655]                         }
[17:03:16.655]                       }
[17:03:16.655]                       invisible(muffled)
[17:03:16.655]                     }
[17:03:16.655]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.655]                   }
[17:03:16.655]                 }
[17:03:16.655]             }
[17:03:16.655]         }))
[17:03:16.655]     }, error = function(ex) {
[17:03:16.655]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.655]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.655]                 ...future.rng), started = ...future.startTime, 
[17:03:16.655]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.655]             version = "1.8"), class = "FutureResult")
[17:03:16.655]     }, finally = {
[17:03:16.655]         if (!identical(...future.workdir, getwd())) 
[17:03:16.655]             setwd(...future.workdir)
[17:03:16.655]         {
[17:03:16.655]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.655]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.655]             }
[17:03:16.655]             base::options(...future.oldOptions)
[17:03:16.655]             if (.Platform$OS.type == "windows") {
[17:03:16.655]                 old_names <- names(...future.oldEnvVars)
[17:03:16.655]                 envs <- base::Sys.getenv()
[17:03:16.655]                 names <- names(envs)
[17:03:16.655]                 common <- intersect(names, old_names)
[17:03:16.655]                 added <- setdiff(names, old_names)
[17:03:16.655]                 removed <- setdiff(old_names, names)
[17:03:16.655]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.655]                   envs[common]]
[17:03:16.655]                 NAMES <- toupper(changed)
[17:03:16.655]                 args <- list()
[17:03:16.655]                 for (kk in seq_along(NAMES)) {
[17:03:16.655]                   name <- changed[[kk]]
[17:03:16.655]                   NAME <- NAMES[[kk]]
[17:03:16.655]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.655]                     next
[17:03:16.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.655]                 }
[17:03:16.655]                 NAMES <- toupper(added)
[17:03:16.655]                 for (kk in seq_along(NAMES)) {
[17:03:16.655]                   name <- added[[kk]]
[17:03:16.655]                   NAME <- NAMES[[kk]]
[17:03:16.655]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.655]                     next
[17:03:16.655]                   args[[name]] <- ""
[17:03:16.655]                 }
[17:03:16.655]                 NAMES <- toupper(removed)
[17:03:16.655]                 for (kk in seq_along(NAMES)) {
[17:03:16.655]                   name <- removed[[kk]]
[17:03:16.655]                   NAME <- NAMES[[kk]]
[17:03:16.655]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.655]                     next
[17:03:16.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.655]                 }
[17:03:16.655]                 if (length(args) > 0) 
[17:03:16.655]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.655]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.655]             }
[17:03:16.655]             else {
[17:03:16.655]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.655]             }
[17:03:16.655]             {
[17:03:16.655]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.655]                   0L) {
[17:03:16.655]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.655]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.655]                   base::options(opts)
[17:03:16.655]                 }
[17:03:16.655]                 {
[17:03:16.655]                   {
[17:03:16.655]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.655]                     NULL
[17:03:16.655]                   }
[17:03:16.655]                   options(future.plan = NULL)
[17:03:16.655]                   if (is.na(NA_character_)) 
[17:03:16.655]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.655]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.655]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.655]                     .init = FALSE)
[17:03:16.655]                 }
[17:03:16.655]             }
[17:03:16.655]         }
[17:03:16.655]     })
[17:03:16.655]     if (TRUE) {
[17:03:16.655]         base::sink(type = "output", split = FALSE)
[17:03:16.655]         if (TRUE) {
[17:03:16.655]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.655]         }
[17:03:16.655]         else {
[17:03:16.655]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.655]         }
[17:03:16.655]         base::close(...future.stdout)
[17:03:16.655]         ...future.stdout <- NULL
[17:03:16.655]     }
[17:03:16.655]     ...future.result$conditions <- ...future.conditions
[17:03:16.655]     ...future.result$finished <- base::Sys.time()
[17:03:16.655]     ...future.result
[17:03:16.655] }
[17:03:16.658] assign_globals() ...
[17:03:16.658] List of 2
[17:03:16.658]  $ nested   :List of 2
[17:03:16.658]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:16.658]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:16.658]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.658]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:16.658]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:16.658]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.658]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.658]  $ strategy2: chr "multicore"
[17:03:16.658]  - attr(*, "where")=List of 2
[17:03:16.658]   ..$ nested   :<environment: R_EmptyEnv> 
[17:03:16.658]   ..$ strategy2:<environment: R_EmptyEnv> 
[17:03:16.658]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.658]  - attr(*, "resolved")= logi FALSE
[17:03:16.658]  - attr(*, "total_size")= num 95304
[17:03:16.658]  - attr(*, "already-done")= logi TRUE
[17:03:16.663] - copied ‘nested’ to environment
[17:03:16.663] - copied ‘strategy2’ to environment
[17:03:16.663] assign_globals() ... done
[17:03:16.663] requestCore(): workers = 2
[17:03:16.666] MulticoreFuture started
[17:03:16.666] - Launch lazy future ... done
[17:03:16.667] run() for ‘MulticoreFuture’ ... done
[17:03:16.667] result() for MulticoreFuture ...
[17:03:16.667] plan(): Setting new future strategy stack:
[17:03:16.668] List of future strategies:
[17:03:16.668] 1. multicore:
[17:03:16.668]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.668]    - tweaked: FALSE
[17:03:16.668]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.673] plan(): nbrOfWorkers() = 1
[17:03:16.715] plan(): Setting new future strategy stack:
[17:03:16.715] List of future strategies:
[17:03:16.715] 1. multicore:
[17:03:16.715]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.715]    - tweaked: FALSE
[17:03:16.715]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.715] 2. multicore:
[17:03:16.715]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.715]    - tweaked: FALSE
[17:03:16.715]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.719] plan(): nbrOfWorkers() = 2
[17:03:16.721] result() for MulticoreFuture ...
[17:03:16.721] result() for MulticoreFuture ... done
[17:03:16.721] signalConditions() ...
[17:03:16.721]  - include = ‘immediateCondition’
[17:03:16.721]  - exclude = 
[17:03:16.721]  - resignal = FALSE
[17:03:16.721]  - Number of conditions: 54
[17:03:16.722] signalConditions() ... done
[17:03:16.722] result() for MulticoreFuture ... done
[17:03:16.722] result() for MulticoreFuture ...
[17:03:16.722] result() for MulticoreFuture ... done
[17:03:16.722] signalConditions() ...
[17:03:16.722]  - include = ‘immediateCondition’
[17:03:16.722]  - exclude = 
[17:03:16.722]  - resignal = FALSE
[17:03:16.723]  - Number of conditions: 54
[17:03:16.723] signalConditions() ... done
[17:03:16.723] Future state: ‘finished’
[17:03:16.723] result() for MulticoreFuture ...
[17:03:16.723] result() for MulticoreFuture ... done
[17:03:16.723] signalConditions() ...
[17:03:16.723]  - include = ‘condition’
[17:03:16.723]  - exclude = ‘immediateCondition’
[17:03:16.724]  - resignal = TRUE
[17:03:16.724]  - Number of conditions: 54
[17:03:16.724]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.675] getGlobalsAndPackages() ...
[17:03:16.724]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.675] Searching for globals...
[17:03:16.724]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.684] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[17:03:16.724]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.684] Searching for globals ... DONE
[17:03:16.725]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.684] Resolving globals: FALSE
[17:03:16.725]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.685] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[17:03:16.725]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.686] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[17:03:16.725]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.686] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[17:03:16.725]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.687] 
[17:03:16.725]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.687] getGlobalsAndPackages() ... DONE
[17:03:16.726]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.688] run() for ‘Future’ ...
[17:03:16.726]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.688] - state: ‘created’
[17:03:16.726]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.688] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.726]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.692] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:16.726]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.692] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:16.726]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.693]   - Field: ‘label’
[17:03:16.727]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.693]   - Field: ‘local’
[17:03:16.727]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.693]   - Field: ‘owner’
[17:03:16.727]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.693]   - Field: ‘envir’
[17:03:16.727]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.693]   - Field: ‘packages’
[17:03:16.727]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.693]   - Field: ‘gc’
[17:03:16.727]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.694]   - Field: ‘conditions’
[17:03:16.728]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.694]   - Field: ‘expr’
[17:03:16.728]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.694]   - Field: ‘uuid’
[17:03:16.728]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.694]   - Field: ‘seed’
[17:03:16.728]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.694]   - Field: ‘version’
[17:03:16.728]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.694]   - Field: ‘result’
[17:03:16.728]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.695]   - Field: ‘asynchronous’
[17:03:16.729]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.695]   - Field: ‘calls’
[17:03:16.729]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.695]   - Field: ‘globals’
[17:03:16.729]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.695]   - Field: ‘stdout’
[17:03:16.729]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.695]   - Field: ‘earlySignal’
[17:03:16.729]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.695]   - Field: ‘lazy’
[17:03:16.729]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.696]   - Field: ‘state’
[17:03:16.730]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.696] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:16.730]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.696] - Launch lazy future ...
[17:03:16.730]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.696] Packages needed by the future expression (n = 0): <none>
[17:03:16.730]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.696] Packages needed by future strategies (n = 0): <none>
[17:03:16.730]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.697] {
[17:03:16.697]     {
[17:03:16.697]         {
[17:03:16.697]             ...future.startTime <- base::Sys.time()
[17:03:16.697]             {
[17:03:16.697]                 {
[17:03:16.697]                   {
[17:03:16.697]                     base::local({
[17:03:16.697]                       has_future <- base::requireNamespace("future", 
[17:03:16.697]                         quietly = TRUE)
[17:03:16.697]                       if (has_future) {
[17:03:16.697]                         ns <- base::getNamespace("future")
[17:03:16.697]                         version <- ns[[".package"]][["version"]]
[17:03:16.697]                         if (is.null(version)) 
[17:03:16.697]                           version <- utils::packageVersion("future")
[17:03:16.697]                       }
[17:03:16.697]                       else {
[17:03:16.697]                         version <- NULL
[17:03:16.697]                       }
[17:03:16.697]                       if (!has_future || version < "1.8.0") {
[17:03:16.697]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.697]                           "", base::R.version$version.string), 
[17:03:16.697]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:16.697]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.697]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.697]                             "release", "version")], collapse = " "), 
[17:03:16.697]                           hostname = base::Sys.info()[["nodename"]])
[17:03:16.697]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.697]                           info)
[17:03:16.697]                         info <- base::paste(info, collapse = "; ")
[17:03:16.697]                         if (!has_future) {
[17:03:16.697]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.697]                             info)
[17:03:16.697]                         }
[17:03:16.697]                         else {
[17:03:16.697]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.697]                             info, version)
[17:03:16.697]                         }
[17:03:16.697]                         base::stop(msg)
[17:03:16.697]                       }
[17:03:16.697]                     })
[17:03:16.697]                   }
[17:03:16.697]                   ...future.strategy.old <- future::plan("list")
[17:03:16.697]                   options(future.plan = NULL)
[17:03:16.697]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.697]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.697]                 }
[17:03:16.697]                 ...future.workdir <- getwd()
[17:03:16.697]             }
[17:03:16.697]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.697]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.697]         }
[17:03:16.697]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.697]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.697]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.697]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.697]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.697]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.697]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.697]             base::names(...future.oldOptions))
[17:03:16.697]     }
[17:03:16.697]     if (FALSE) {
[17:03:16.697]     }
[17:03:16.697]     else {
[17:03:16.697]         if (TRUE) {
[17:03:16.697]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.697]                 open = "w")
[17:03:16.697]         }
[17:03:16.697]         else {
[17:03:16.697]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.697]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.697]         }
[17:03:16.697]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.697]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.697]             base::sink(type = "output", split = FALSE)
[17:03:16.697]             base::close(...future.stdout)
[17:03:16.697]         }, add = TRUE)
[17:03:16.697]     }
[17:03:16.697]     ...future.frame <- base::sys.nframe()
[17:03:16.697]     ...future.conditions <- base::list()
[17:03:16.697]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.697]     if (FALSE) {
[17:03:16.697]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.697]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.697]     }
[17:03:16.697]     ...future.result <- base::tryCatch({
[17:03:16.697]         base::withCallingHandlers({
[17:03:16.697]             ...future.value <- base::withVisible(base::local({
[17:03:16.697]                 b <- 2L
[17:03:16.697]                 plan_b <- future::plan("list")
[17:03:16.697]                 nested_b <- nested_a[-1]
[17:03:16.697]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.697]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.697]                   "sequential"))
[17:03:16.697]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.697]                   b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.697]             }))
[17:03:16.697]             future::FutureResult(value = ...future.value$value, 
[17:03:16.697]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.697]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.697]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.697]                     ...future.globalenv.names))
[17:03:16.697]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.697]         }, condition = base::local({
[17:03:16.697]             c <- base::c
[17:03:16.697]             inherits <- base::inherits
[17:03:16.697]             invokeRestart <- base::invokeRestart
[17:03:16.697]             length <- base::length
[17:03:16.697]             list <- base::list
[17:03:16.697]             seq.int <- base::seq.int
[17:03:16.697]             signalCondition <- base::signalCondition
[17:03:16.697]             sys.calls <- base::sys.calls
[17:03:16.697]             `[[` <- base::`[[`
[17:03:16.697]             `+` <- base::`+`
[17:03:16.697]             `<<-` <- base::`<<-`
[17:03:16.697]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.697]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.697]                   3L)]
[17:03:16.697]             }
[17:03:16.697]             function(cond) {
[17:03:16.697]                 is_error <- inherits(cond, "error")
[17:03:16.697]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.697]                   NULL)
[17:03:16.697]                 if (is_error) {
[17:03:16.697]                   sessionInformation <- function() {
[17:03:16.697]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.697]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.697]                       search = base::search(), system = base::Sys.info())
[17:03:16.697]                   }
[17:03:16.697]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.697]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.697]                     cond$call), session = sessionInformation(), 
[17:03:16.697]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.697]                   signalCondition(cond)
[17:03:16.697]                 }
[17:03:16.697]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.697]                 "immediateCondition"))) {
[17:03:16.697]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.697]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.697]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.697]                   if (TRUE && !signal) {
[17:03:16.697]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.697]                     {
[17:03:16.697]                       inherits <- base::inherits
[17:03:16.697]                       invokeRestart <- base::invokeRestart
[17:03:16.697]                       is.null <- base::is.null
[17:03:16.697]                       muffled <- FALSE
[17:03:16.697]                       if (inherits(cond, "message")) {
[17:03:16.697]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.697]                         if (muffled) 
[17:03:16.697]                           invokeRestart("muffleMessage")
[17:03:16.697]                       }
[17:03:16.697]                       else if (inherits(cond, "warning")) {
[17:03:16.697]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.697]                         if (muffled) 
[17:03:16.697]                           invokeRestart("muffleWarning")
[17:03:16.697]                       }
[17:03:16.697]                       else if (inherits(cond, "condition")) {
[17:03:16.697]                         if (!is.null(pattern)) {
[17:03:16.697]                           computeRestarts <- base::computeRestarts
[17:03:16.697]                           grepl <- base::grepl
[17:03:16.697]                           restarts <- computeRestarts(cond)
[17:03:16.697]                           for (restart in restarts) {
[17:03:16.697]                             name <- restart$name
[17:03:16.697]                             if (is.null(name)) 
[17:03:16.697]                               next
[17:03:16.697]                             if (!grepl(pattern, name)) 
[17:03:16.697]                               next
[17:03:16.697]                             invokeRestart(restart)
[17:03:16.697]                             muffled <- TRUE
[17:03:16.697]                             break
[17:03:16.697]                           }
[17:03:16.697]                         }
[17:03:16.697]                       }
[17:03:16.697]                       invisible(muffled)
[17:03:16.697]                     }
[17:03:16.697]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.697]                   }
[17:03:16.697]                 }
[17:03:16.697]                 else {
[17:03:16.697]                   if (TRUE) {
[17:03:16.697]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.697]                     {
[17:03:16.697]                       inherits <- base::inherits
[17:03:16.697]                       invokeRestart <- base::invokeRestart
[17:03:16.697]                       is.null <- base::is.null
[17:03:16.697]                       muffled <- FALSE
[17:03:16.697]                       if (inherits(cond, "message")) {
[17:03:16.697]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.697]                         if (muffled) 
[17:03:16.697]                           invokeRestart("muffleMessage")
[17:03:16.697]                       }
[17:03:16.697]                       else if (inherits(cond, "warning")) {
[17:03:16.697]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.697]                         if (muffled) 
[17:03:16.697]                           invokeRestart("muffleWarning")
[17:03:16.697]                       }
[17:03:16.697]                       else if (inherits(cond, "condition")) {
[17:03:16.697]                         if (!is.null(pattern)) {
[17:03:16.697]                           computeRestarts <- base::computeRestarts
[17:03:16.697]                           grepl <- base::grepl
[17:03:16.697]                           restarts <- computeRestarts(cond)
[17:03:16.697]                           for (restart in restarts) {
[17:03:16.697]                             name <- restart$name
[17:03:16.697]                             if (is.null(name)) 
[17:03:16.697]                               next
[17:03:16.697]                             if (!grepl(pattern, name)) 
[17:03:16.697]                               next
[17:03:16.697]                             invokeRestart(restart)
[17:03:16.697]                             muffled <- TRUE
[17:03:16.697]                             break
[17:03:16.697]                           }
[17:03:16.697]                         }
[17:03:16.697]                       }
[17:03:16.697]                       invisible(muffled)
[17:03:16.697]                     }
[17:03:16.697]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.697]                   }
[17:03:16.697]                 }
[17:03:16.697]             }
[17:03:16.697]         }))
[17:03:16.697]     }, error = function(ex) {
[17:03:16.697]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.697]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.697]                 ...future.rng), started = ...future.startTime, 
[17:03:16.697]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.697]             version = "1.8"), class = "FutureResult")
[17:03:16.697]     }, finally = {
[17:03:16.697]         if (!identical(...future.workdir, getwd())) 
[17:03:16.697]             setwd(...future.workdir)
[17:03:16.697]         {
[17:03:16.697]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.697]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.697]             }
[17:03:16.697]             base::options(...future.oldOptions)
[17:03:16.697]             if (.Platform$OS.type == "windows") {
[17:03:16.697]                 old_names <- names(...future.oldEnvVars)
[17:03:16.697]                 envs <- base::Sys.getenv()
[17:03:16.697]                 names <- names(envs)
[17:03:16.697]                 common <- intersect(names, old_names)
[17:03:16.697]                 added <- setdiff(names, old_names)
[17:03:16.697]                 removed <- setdiff(old_names, names)
[17:03:16.697]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.697]                   envs[common]]
[17:03:16.697]                 NAMES <- toupper(changed)
[17:03:16.697]                 args <- list()
[17:03:16.697]                 for (kk in seq_along(NAMES)) {
[17:03:16.697]                   name <- changed[[kk]]
[17:03:16.697]                   NAME <- NAMES[[kk]]
[17:03:16.697]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.697]                     next
[17:03:16.697]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.697]                 }
[17:03:16.697]                 NAMES <- toupper(added)
[17:03:16.697]                 for (kk in seq_along(NAMES)) {
[17:03:16.697]                   name <- added[[kk]]
[17:03:16.697]                   NAME <- NAMES[[kk]]
[17:03:16.697]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.697]                     next
[17:03:16.697]                   args[[name]] <- ""
[17:03:16.697]                 }
[17:03:16.697]                 NAMES <- toupper(removed)
[17:03:16.697]                 for (kk in seq_along(NAMES)) {
[17:03:16.697]                   name <- removed[[kk]]
[17:03:16.697]                   NAME <- NAMES[[kk]]
[17:03:16.697]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.697]                     next
[17:03:16.697]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.697]                 }
[17:03:16.697]                 if (length(args) > 0) 
[17:03:16.697]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.697]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.697]             }
[17:03:16.697]             else {
[17:03:16.697]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.697]             }
[17:03:16.697]             {
[17:03:16.697]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.697]                   0L) {
[17:03:16.697]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.697]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.697]                   base::options(opts)
[17:03:16.697]                 }
[17:03:16.697]                 {
[17:03:16.697]                   {
[17:03:16.697]                     NULL
[17:03:16.697]                     RNGkind("Mersenne-Twister")
[17:03:16.697]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.697]                       inherits = FALSE)
[17:03:16.697]                   }
[17:03:16.697]                   options(future.plan = NULL)
[17:03:16.697]                   if (is.na(NA_character_)) 
[17:03:16.697]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.697]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.697]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.697]                     .init = FALSE)
[17:03:16.697]                 }
[17:03:16.697]             }
[17:03:16.697]         }
[17:03:16.697]     })
[17:03:16.697]     if (TRUE) {
[17:03:16.697]         base::sink(type = "output", split = FALSE)
[17:03:16.697]         if (TRUE) {
[17:03:16.697]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.697]         }
[17:03:16.697]         else {
[17:03:16.697]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.697]         }
[17:03:16.697]         base::close(...future.stdout)
[17:03:16.697]         ...future.stdout <- NULL
[17:03:16.697]     }
[17:03:16.697]     ...future.result$conditions <- ...future.conditions
[17:03:16.697]     ...future.result$finished <- base::Sys.time()
[17:03:16.697]     ...future.result
[17:03:16.697] }
[17:03:16.730]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.700] assign_globals() ...
[17:03:16.731]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.700] List of 3
[17:03:16.700]  $ nested_a:List of 1
[17:03:16.700]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:16.700]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:16.700]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.700]  $ a       : int 1
[17:03:16.700]  $ plan_a  :List of 1
[17:03:16.700]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:16.700]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:16.700]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.700]  - attr(*, "where")=List of 3
[17:03:16.700]   ..$ nested_a:<environment: R_EmptyEnv> 
[17:03:16.700]   ..$ a       :<environment: R_EmptyEnv> 
[17:03:16.700]   ..$ plan_a  :<environment: R_EmptyEnv> 
[17:03:16.700]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.700]  - attr(*, "resolved")= logi FALSE
[17:03:16.700]  - attr(*, "total_size")= num 95240
[17:03:16.700]  - attr(*, "already-done")= logi TRUE
[17:03:16.731]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.707] - copied ‘nested_a’ to environment
[17:03:16.731]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.707] - copied ‘a’ to environment
[17:03:16.731]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.707] - copied ‘plan_a’ to environment
[17:03:16.731]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.707] assign_globals() ... done
[17:03:16.731]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.708] plan(): Setting new future strategy stack:
[17:03:16.732]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.708] List of future strategies:
[17:03:16.708] 1. sequential:
[17:03:16.708]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.708]    - tweaked: FALSE
[17:03:16.708]    - call: NULL
[17:03:16.732]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.708] plan(): nbrOfWorkers() = 1
[17:03:16.732]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.709] plan(): Setting new future strategy stack:
[17:03:16.732]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.709] List of future strategies:
[17:03:16.709] 1. multicore:
[17:03:16.709]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.709]    - tweaked: FALSE
[17:03:16.709]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.732]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.713] plan(): nbrOfWorkers() = 1
[17:03:16.732]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.714] SequentialFuture started (and completed)
[17:03:16.732]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.714] - Launch lazy future ... done
[17:03:16.733]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.714] run() for ‘SequentialFuture’ ... done
[17:03:16.733] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.739] getGlobalsAndPackages() ...
[17:03:16.739] Searching for globals...
[17:03:16.741] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.741] Searching for globals ... DONE
[17:03:16.741] Resolving globals: FALSE
[17:03:16.742] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.742] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.742] - globals: [1] ‘data’
[17:03:16.742] - packages: [1] ‘future’
[17:03:16.742] getGlobalsAndPackages() ... DONE
[17:03:16.743] run() for ‘Future’ ...
[17:03:16.743] - state: ‘created’
[17:03:16.743] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.747] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.747] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:16.748]   - Field: ‘label’
[17:03:16.748]   - Field: ‘local’
[17:03:16.748]   - Field: ‘owner’
[17:03:16.748]   - Field: ‘envir’
[17:03:16.748]   - Field: ‘workers’
[17:03:16.748]   - Field: ‘packages’
[17:03:16.748]   - Field: ‘gc’
[17:03:16.748]   - Field: ‘job’
[17:03:16.748]   - Field: ‘conditions’
[17:03:16.749]   - Field: ‘expr’
[17:03:16.749]   - Field: ‘uuid’
[17:03:16.749]   - Field: ‘seed’
[17:03:16.749]   - Field: ‘version’
[17:03:16.749]   - Field: ‘result’
[17:03:16.749]   - Field: ‘asynchronous’
[17:03:16.749]   - Field: ‘calls’
[17:03:16.749]   - Field: ‘globals’
[17:03:16.749]   - Field: ‘stdout’
[17:03:16.749]   - Field: ‘earlySignal’
[17:03:16.750]   - Field: ‘lazy’
[17:03:16.750]   - Field: ‘state’
[17:03:16.750] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:16.750] - Launch lazy future ...
[17:03:16.750] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.750] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.751] {
[17:03:16.751]     {
[17:03:16.751]         {
[17:03:16.751]             ...future.startTime <- base::Sys.time()
[17:03:16.751]             {
[17:03:16.751]                 {
[17:03:16.751]                   {
[17:03:16.751]                     {
[17:03:16.751]                       {
[17:03:16.751]                         base::local({
[17:03:16.751]                           has_future <- base::requireNamespace("future", 
[17:03:16.751]                             quietly = TRUE)
[17:03:16.751]                           if (has_future) {
[17:03:16.751]                             ns <- base::getNamespace("future")
[17:03:16.751]                             version <- ns[[".package"]][["version"]]
[17:03:16.751]                             if (is.null(version)) 
[17:03:16.751]                               version <- utils::packageVersion("future")
[17:03:16.751]                           }
[17:03:16.751]                           else {
[17:03:16.751]                             version <- NULL
[17:03:16.751]                           }
[17:03:16.751]                           if (!has_future || version < "1.8.0") {
[17:03:16.751]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.751]                               "", base::R.version$version.string), 
[17:03:16.751]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:16.751]                                 base::R.version$platform, 8 * 
[17:03:16.751]                                   base::.Machine$sizeof.pointer), 
[17:03:16.751]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.751]                                 "release", "version")], collapse = " "), 
[17:03:16.751]                               hostname = base::Sys.info()[["nodename"]])
[17:03:16.751]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.751]                               info)
[17:03:16.751]                             info <- base::paste(info, collapse = "; ")
[17:03:16.751]                             if (!has_future) {
[17:03:16.751]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.751]                                 info)
[17:03:16.751]                             }
[17:03:16.751]                             else {
[17:03:16.751]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.751]                                 info, version)
[17:03:16.751]                             }
[17:03:16.751]                             base::stop(msg)
[17:03:16.751]                           }
[17:03:16.751]                         })
[17:03:16.751]                       }
[17:03:16.751]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.751]                       base::options(mc.cores = 1L)
[17:03:16.751]                     }
[17:03:16.751]                     base::local({
[17:03:16.751]                       for (pkg in "future") {
[17:03:16.751]                         base::loadNamespace(pkg)
[17:03:16.751]                         base::library(pkg, character.only = TRUE)
[17:03:16.751]                       }
[17:03:16.751]                     })
[17:03:16.751]                   }
[17:03:16.751]                   ...future.strategy.old <- future::plan("list")
[17:03:16.751]                   options(future.plan = NULL)
[17:03:16.751]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.751]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:16.751]                     envir = parent.frame()) 
[17:03:16.751]                   {
[17:03:16.751]                     default_workers <- missing(workers)
[17:03:16.751]                     if (is.function(workers)) 
[17:03:16.751]                       workers <- workers()
[17:03:16.751]                     workers <- structure(as.integer(workers), 
[17:03:16.751]                       class = class(workers))
[17:03:16.751]                     stop_if_not(is.finite(workers), workers >= 
[17:03:16.751]                       1L)
[17:03:16.751]                     if ((workers == 1L && !inherits(workers, 
[17:03:16.751]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:16.751]                       if (default_workers) 
[17:03:16.751]                         supportsMulticore(warn = TRUE)
[17:03:16.751]                       return(sequential(..., envir = envir))
[17:03:16.751]                     }
[17:03:16.751]                     oopts <- options(mc.cores = workers)
[17:03:16.751]                     on.exit(options(oopts))
[17:03:16.751]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:16.751]                       envir = envir)
[17:03:16.751]                     if (!future$lazy) 
[17:03:16.751]                       future <- run(future)
[17:03:16.751]                     invisible(future)
[17:03:16.751]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.751]                 }
[17:03:16.751]                 ...future.workdir <- getwd()
[17:03:16.751]             }
[17:03:16.751]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.751]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.751]         }
[17:03:16.751]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.751]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.751]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.751]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.751]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.751]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.751]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.751]             base::names(...future.oldOptions))
[17:03:16.751]     }
[17:03:16.751]     if (FALSE) {
[17:03:16.751]     }
[17:03:16.751]     else {
[17:03:16.751]         if (TRUE) {
[17:03:16.751]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.751]                 open = "w")
[17:03:16.751]         }
[17:03:16.751]         else {
[17:03:16.751]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.751]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.751]         }
[17:03:16.751]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.751]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.751]             base::sink(type = "output", split = FALSE)
[17:03:16.751]             base::close(...future.stdout)
[17:03:16.751]         }, add = TRUE)
[17:03:16.751]     }
[17:03:16.751]     ...future.frame <- base::sys.nframe()
[17:03:16.751]     ...future.conditions <- base::list()
[17:03:16.751]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.751]     if (FALSE) {
[17:03:16.751]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.751]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.751]     }
[17:03:16.751]     ...future.result <- base::tryCatch({
[17:03:16.751]         base::withCallingHandlers({
[17:03:16.751]             ...future.value <- base::withVisible(base::local({
[17:03:16.751]                 withCallingHandlers({
[17:03:16.751]                   {
[17:03:16.751]                     value(future(subset(data, a == 2)))
[17:03:16.751]                   }
[17:03:16.751]                 }, immediateCondition = function(cond) {
[17:03:16.751]                   save_rds <- function (object, pathname, ...) 
[17:03:16.751]                   {
[17:03:16.751]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:16.751]                     if (file_test("-f", pathname_tmp)) {
[17:03:16.751]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.751]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:16.751]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.751]                         fi_tmp[["mtime"]])
[17:03:16.751]                     }
[17:03:16.751]                     tryCatch({
[17:03:16.751]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:16.751]                     }, error = function(ex) {
[17:03:16.751]                       msg <- conditionMessage(ex)
[17:03:16.751]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.751]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:16.751]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.751]                         fi_tmp[["mtime"]], msg)
[17:03:16.751]                       ex$message <- msg
[17:03:16.751]                       stop(ex)
[17:03:16.751]                     })
[17:03:16.751]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:16.751]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:16.751]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:16.751]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.751]                       fi <- file.info(pathname)
[17:03:16.751]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:16.751]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.751]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:16.751]                         fi[["size"]], fi[["mtime"]])
[17:03:16.751]                       stop(msg)
[17:03:16.751]                     }
[17:03:16.751]                     invisible(pathname)
[17:03:16.751]                   }
[17:03:16.751]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:16.751]                     rootPath = tempdir()) 
[17:03:16.751]                   {
[17:03:16.751]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:16.751]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:16.751]                       tmpdir = path, fileext = ".rds")
[17:03:16.751]                     save_rds(obj, file)
[17:03:16.751]                   }
[17:03:16.751]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:16.751]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.751]                   {
[17:03:16.751]                     inherits <- base::inherits
[17:03:16.751]                     invokeRestart <- base::invokeRestart
[17:03:16.751]                     is.null <- base::is.null
[17:03:16.751]                     muffled <- FALSE
[17:03:16.751]                     if (inherits(cond, "message")) {
[17:03:16.751]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.751]                       if (muffled) 
[17:03:16.751]                         invokeRestart("muffleMessage")
[17:03:16.751]                     }
[17:03:16.751]                     else if (inherits(cond, "warning")) {
[17:03:16.751]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.751]                       if (muffled) 
[17:03:16.751]                         invokeRestart("muffleWarning")
[17:03:16.751]                     }
[17:03:16.751]                     else if (inherits(cond, "condition")) {
[17:03:16.751]                       if (!is.null(pattern)) {
[17:03:16.751]                         computeRestarts <- base::computeRestarts
[17:03:16.751]                         grepl <- base::grepl
[17:03:16.751]                         restarts <- computeRestarts(cond)
[17:03:16.751]                         for (restart in restarts) {
[17:03:16.751]                           name <- restart$name
[17:03:16.751]                           if (is.null(name)) 
[17:03:16.751]                             next
[17:03:16.751]                           if (!grepl(pattern, name)) 
[17:03:16.751]                             next
[17:03:16.751]                           invokeRestart(restart)
[17:03:16.751]                           muffled <- TRUE
[17:03:16.751]                           break
[17:03:16.751]                         }
[17:03:16.751]                       }
[17:03:16.751]                     }
[17:03:16.751]                     invisible(muffled)
[17:03:16.751]                   }
[17:03:16.751]                   muffleCondition(cond)
[17:03:16.751]                 })
[17:03:16.751]             }))
[17:03:16.751]             future::FutureResult(value = ...future.value$value, 
[17:03:16.751]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.751]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.751]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.751]                     ...future.globalenv.names))
[17:03:16.751]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.751]         }, condition = base::local({
[17:03:16.751]             c <- base::c
[17:03:16.751]             inherits <- base::inherits
[17:03:16.751]             invokeRestart <- base::invokeRestart
[17:03:16.751]             length <- base::length
[17:03:16.751]             list <- base::list
[17:03:16.751]             seq.int <- base::seq.int
[17:03:16.751]             signalCondition <- base::signalCondition
[17:03:16.751]             sys.calls <- base::sys.calls
[17:03:16.751]             `[[` <- base::`[[`
[17:03:16.751]             `+` <- base::`+`
[17:03:16.751]             `<<-` <- base::`<<-`
[17:03:16.751]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.751]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.751]                   3L)]
[17:03:16.751]             }
[17:03:16.751]             function(cond) {
[17:03:16.751]                 is_error <- inherits(cond, "error")
[17:03:16.751]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.751]                   NULL)
[17:03:16.751]                 if (is_error) {
[17:03:16.751]                   sessionInformation <- function() {
[17:03:16.751]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.751]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.751]                       search = base::search(), system = base::Sys.info())
[17:03:16.751]                   }
[17:03:16.751]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.751]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.751]                     cond$call), session = sessionInformation(), 
[17:03:16.751]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.751]                   signalCondition(cond)
[17:03:16.751]                 }
[17:03:16.751]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.751]                 "immediateCondition"))) {
[17:03:16.751]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.751]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.751]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.751]                   if (TRUE && !signal) {
[17:03:16.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.751]                     {
[17:03:16.751]                       inherits <- base::inherits
[17:03:16.751]                       invokeRestart <- base::invokeRestart
[17:03:16.751]                       is.null <- base::is.null
[17:03:16.751]                       muffled <- FALSE
[17:03:16.751]                       if (inherits(cond, "message")) {
[17:03:16.751]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.751]                         if (muffled) 
[17:03:16.751]                           invokeRestart("muffleMessage")
[17:03:16.751]                       }
[17:03:16.751]                       else if (inherits(cond, "warning")) {
[17:03:16.751]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.751]                         if (muffled) 
[17:03:16.751]                           invokeRestart("muffleWarning")
[17:03:16.751]                       }
[17:03:16.751]                       else if (inherits(cond, "condition")) {
[17:03:16.751]                         if (!is.null(pattern)) {
[17:03:16.751]                           computeRestarts <- base::computeRestarts
[17:03:16.751]                           grepl <- base::grepl
[17:03:16.751]                           restarts <- computeRestarts(cond)
[17:03:16.751]                           for (restart in restarts) {
[17:03:16.751]                             name <- restart$name
[17:03:16.751]                             if (is.null(name)) 
[17:03:16.751]                               next
[17:03:16.751]                             if (!grepl(pattern, name)) 
[17:03:16.751]                               next
[17:03:16.751]                             invokeRestart(restart)
[17:03:16.751]                             muffled <- TRUE
[17:03:16.751]                             break
[17:03:16.751]                           }
[17:03:16.751]                         }
[17:03:16.751]                       }
[17:03:16.751]                       invisible(muffled)
[17:03:16.751]                     }
[17:03:16.751]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.751]                   }
[17:03:16.751]                 }
[17:03:16.751]                 else {
[17:03:16.751]                   if (TRUE) {
[17:03:16.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.751]                     {
[17:03:16.751]                       inherits <- base::inherits
[17:03:16.751]                       invokeRestart <- base::invokeRestart
[17:03:16.751]                       is.null <- base::is.null
[17:03:16.751]                       muffled <- FALSE
[17:03:16.751]                       if (inherits(cond, "message")) {
[17:03:16.751]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.751]                         if (muffled) 
[17:03:16.751]                           invokeRestart("muffleMessage")
[17:03:16.751]                       }
[17:03:16.751]                       else if (inherits(cond, "warning")) {
[17:03:16.751]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.751]                         if (muffled) 
[17:03:16.751]                           invokeRestart("muffleWarning")
[17:03:16.751]                       }
[17:03:16.751]                       else if (inherits(cond, "condition")) {
[17:03:16.751]                         if (!is.null(pattern)) {
[17:03:16.751]                           computeRestarts <- base::computeRestarts
[17:03:16.751]                           grepl <- base::grepl
[17:03:16.751]                           restarts <- computeRestarts(cond)
[17:03:16.751]                           for (restart in restarts) {
[17:03:16.751]                             name <- restart$name
[17:03:16.751]                             if (is.null(name)) 
[17:03:16.751]                               next
[17:03:16.751]                             if (!grepl(pattern, name)) 
[17:03:16.751]                               next
[17:03:16.751]                             invokeRestart(restart)
[17:03:16.751]                             muffled <- TRUE
[17:03:16.751]                             break
[17:03:16.751]                           }
[17:03:16.751]                         }
[17:03:16.751]                       }
[17:03:16.751]                       invisible(muffled)
[17:03:16.751]                     }
[17:03:16.751]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.751]                   }
[17:03:16.751]                 }
[17:03:16.751]             }
[17:03:16.751]         }))
[17:03:16.751]     }, error = function(ex) {
[17:03:16.751]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.751]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.751]                 ...future.rng), started = ...future.startTime, 
[17:03:16.751]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.751]             version = "1.8"), class = "FutureResult")
[17:03:16.751]     }, finally = {
[17:03:16.751]         if (!identical(...future.workdir, getwd())) 
[17:03:16.751]             setwd(...future.workdir)
[17:03:16.751]         {
[17:03:16.751]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.751]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.751]             }
[17:03:16.751]             base::options(...future.oldOptions)
[17:03:16.751]             if (.Platform$OS.type == "windows") {
[17:03:16.751]                 old_names <- names(...future.oldEnvVars)
[17:03:16.751]                 envs <- base::Sys.getenv()
[17:03:16.751]                 names <- names(envs)
[17:03:16.751]                 common <- intersect(names, old_names)
[17:03:16.751]                 added <- setdiff(names, old_names)
[17:03:16.751]                 removed <- setdiff(old_names, names)
[17:03:16.751]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.751]                   envs[common]]
[17:03:16.751]                 NAMES <- toupper(changed)
[17:03:16.751]                 args <- list()
[17:03:16.751]                 for (kk in seq_along(NAMES)) {
[17:03:16.751]                   name <- changed[[kk]]
[17:03:16.751]                   NAME <- NAMES[[kk]]
[17:03:16.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.751]                     next
[17:03:16.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.751]                 }
[17:03:16.751]                 NAMES <- toupper(added)
[17:03:16.751]                 for (kk in seq_along(NAMES)) {
[17:03:16.751]                   name <- added[[kk]]
[17:03:16.751]                   NAME <- NAMES[[kk]]
[17:03:16.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.751]                     next
[17:03:16.751]                   args[[name]] <- ""
[17:03:16.751]                 }
[17:03:16.751]                 NAMES <- toupper(removed)
[17:03:16.751]                 for (kk in seq_along(NAMES)) {
[17:03:16.751]                   name <- removed[[kk]]
[17:03:16.751]                   NAME <- NAMES[[kk]]
[17:03:16.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.751]                     next
[17:03:16.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.751]                 }
[17:03:16.751]                 if (length(args) > 0) 
[17:03:16.751]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.751]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.751]             }
[17:03:16.751]             else {
[17:03:16.751]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.751]             }
[17:03:16.751]             {
[17:03:16.751]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.751]                   0L) {
[17:03:16.751]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.751]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.751]                   base::options(opts)
[17:03:16.751]                 }
[17:03:16.751]                 {
[17:03:16.751]                   {
[17:03:16.751]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.751]                     NULL
[17:03:16.751]                   }
[17:03:16.751]                   options(future.plan = NULL)
[17:03:16.751]                   if (is.na(NA_character_)) 
[17:03:16.751]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.751]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.751]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.751]                     .init = FALSE)
[17:03:16.751]                 }
[17:03:16.751]             }
[17:03:16.751]         }
[17:03:16.751]     })
[17:03:16.751]     if (TRUE) {
[17:03:16.751]         base::sink(type = "output", split = FALSE)
[17:03:16.751]         if (TRUE) {
[17:03:16.751]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.751]         }
[17:03:16.751]         else {
[17:03:16.751]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.751]         }
[17:03:16.751]         base::close(...future.stdout)
[17:03:16.751]         ...future.stdout <- NULL
[17:03:16.751]     }
[17:03:16.751]     ...future.result$conditions <- ...future.conditions
[17:03:16.751]     ...future.result$finished <- base::Sys.time()
[17:03:16.751]     ...future.result
[17:03:16.751] }
[17:03:16.754] assign_globals() ...
[17:03:16.754] List of 1
[17:03:16.754]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.754]   ..$ a: int [1:3] 1 2 3
[17:03:16.754]   ..$ b: int [1:3] 3 2 1
[17:03:16.754]  - attr(*, "where")=List of 1
[17:03:16.754]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.754]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.754]  - attr(*, "resolved")= logi FALSE
[17:03:16.754]  - attr(*, "total_size")= num 128
[17:03:16.754]  - attr(*, "already-done")= logi TRUE
[17:03:16.757] - copied ‘data’ to environment
[17:03:16.757] assign_globals() ... done
[17:03:16.758] requestCore(): workers = 2
[17:03:16.760] MulticoreFuture started
[17:03:16.760] - Launch lazy future ... done
[17:03:16.761] run() for ‘MulticoreFuture’ ... done
[17:03:16.761] result() for MulticoreFuture ...
[17:03:16.761] plan(): Setting new future strategy stack:
[17:03:16.762] List of future strategies:
[17:03:16.762] 1. multicore:
[17:03:16.762]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.762]    - tweaked: FALSE
[17:03:16.762]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.767] plan(): nbrOfWorkers() = 1
[17:03:16.803] plan(): Setting new future strategy stack:
[17:03:16.804] List of future strategies:
[17:03:16.804] 1. multicore:
[17:03:16.804]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.804]    - tweaked: FALSE
[17:03:16.804]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.804] 2. multicore:
[17:03:16.804]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.804]    - tweaked: FALSE
[17:03:16.804]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.808] plan(): nbrOfWorkers() = 2
[17:03:16.809] result() for MulticoreFuture ...
[17:03:16.809] result() for MulticoreFuture ... done
[17:03:16.809] signalConditions() ...
[17:03:16.809]  - include = ‘immediateCondition’
[17:03:16.809]  - exclude = 
[17:03:16.809]  - resignal = FALSE
[17:03:16.810]  - Number of conditions: 52
[17:03:16.810] signalConditions() ... done
[17:03:16.810] result() for MulticoreFuture ... done
[17:03:16.810] result() for MulticoreFuture ...
[17:03:16.810] result() for MulticoreFuture ... done
[17:03:16.810] signalConditions() ...
[17:03:16.810]  - include = ‘immediateCondition’
[17:03:16.810]  - exclude = 
[17:03:16.811]  - resignal = FALSE
[17:03:16.811]  - Number of conditions: 52
[17:03:16.811] signalConditions() ... done
[17:03:16.811] Future state: ‘finished’
[17:03:16.811] result() for MulticoreFuture ...
[17:03:16.811] result() for MulticoreFuture ... done
[17:03:16.811] signalConditions() ...
[17:03:16.811]  - include = ‘condition’
[17:03:16.811]  - exclude = ‘immediateCondition’
[17:03:16.812]  - resignal = TRUE
[17:03:16.812]  - Number of conditions: 52
[17:03:16.812]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.768] getGlobalsAndPackages() ...
[17:03:16.812]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.768] Searching for globals...
[17:03:16.812]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.770] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.812]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.770] Searching for globals ... DONE
[17:03:16.812]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.771] Resolving globals: FALSE
[17:03:16.813]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.772] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.813]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.772] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.813]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.772] - globals: [1] ‘data’
[17:03:16.813]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.773] 
[17:03:16.813]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.773] getGlobalsAndPackages() ... DONE
[17:03:16.813]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.773] run() for ‘Future’ ...
[17:03:16.814]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.774] - state: ‘created’
[17:03:16.814]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.774] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.814]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.778] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:16.814]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.778] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:16.814]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.778]   - Field: ‘label’
[17:03:16.814]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.779]   - Field: ‘local’
[17:03:16.814]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.779]   - Field: ‘owner’
[17:03:16.815]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.779]   - Field: ‘envir’
[17:03:16.815]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.779]   - Field: ‘packages’
[17:03:16.815]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.779]   - Field: ‘gc’
[17:03:16.815]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.779]   - Field: ‘conditions’
[17:03:16.815]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘expr’
[17:03:16.815]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘uuid’
[17:03:16.816]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘seed’
[17:03:16.816]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘version’
[17:03:16.816]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘result’
[17:03:16.816]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘asynchronous’
[17:03:16.816]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.780]   - Field: ‘calls’
[17:03:16.816]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781]   - Field: ‘globals’
[17:03:16.816]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781]   - Field: ‘stdout’
[17:03:16.817]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781]   - Field: ‘earlySignal’
[17:03:16.817]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781]   - Field: ‘lazy’
[17:03:16.817]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781]   - Field: ‘state’
[17:03:16.817]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:16.817]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.781] - Launch lazy future ...
[17:03:16.817]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.782] Packages needed by the future expression (n = 0): <none>
[17:03:16.817]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.782] Packages needed by future strategies (n = 0): <none>
[17:03:16.818]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.783] {
[17:03:16.783]     {
[17:03:16.783]         {
[17:03:16.783]             ...future.startTime <- base::Sys.time()
[17:03:16.783]             {
[17:03:16.783]                 {
[17:03:16.783]                   {
[17:03:16.783]                     base::local({
[17:03:16.783]                       has_future <- base::requireNamespace("future", 
[17:03:16.783]                         quietly = TRUE)
[17:03:16.783]                       if (has_future) {
[17:03:16.783]                         ns <- base::getNamespace("future")
[17:03:16.783]                         version <- ns[[".package"]][["version"]]
[17:03:16.783]                         if (is.null(version)) 
[17:03:16.783]                           version <- utils::packageVersion("future")
[17:03:16.783]                       }
[17:03:16.783]                       else {
[17:03:16.783]                         version <- NULL
[17:03:16.783]                       }
[17:03:16.783]                       if (!has_future || version < "1.8.0") {
[17:03:16.783]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.783]                           "", base::R.version$version.string), 
[17:03:16.783]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:16.783]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.783]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.783]                             "release", "version")], collapse = " "), 
[17:03:16.783]                           hostname = base::Sys.info()[["nodename"]])
[17:03:16.783]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.783]                           info)
[17:03:16.783]                         info <- base::paste(info, collapse = "; ")
[17:03:16.783]                         if (!has_future) {
[17:03:16.783]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.783]                             info)
[17:03:16.783]                         }
[17:03:16.783]                         else {
[17:03:16.783]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.783]                             info, version)
[17:03:16.783]                         }
[17:03:16.783]                         base::stop(msg)
[17:03:16.783]                       }
[17:03:16.783]                     })
[17:03:16.783]                   }
[17:03:16.783]                   ...future.strategy.old <- future::plan("list")
[17:03:16.783]                   options(future.plan = NULL)
[17:03:16.783]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.783]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.783]                 }
[17:03:16.783]                 ...future.workdir <- getwd()
[17:03:16.783]             }
[17:03:16.783]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.783]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.783]         }
[17:03:16.783]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.783]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.783]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.783]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.783]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.783]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.783]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.783]             base::names(...future.oldOptions))
[17:03:16.783]     }
[17:03:16.783]     if (FALSE) {
[17:03:16.783]     }
[17:03:16.783]     else {
[17:03:16.783]         if (TRUE) {
[17:03:16.783]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.783]                 open = "w")
[17:03:16.783]         }
[17:03:16.783]         else {
[17:03:16.783]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.783]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.783]         }
[17:03:16.783]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.783]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.783]             base::sink(type = "output", split = FALSE)
[17:03:16.783]             base::close(...future.stdout)
[17:03:16.783]         }, add = TRUE)
[17:03:16.783]     }
[17:03:16.783]     ...future.frame <- base::sys.nframe()
[17:03:16.783]     ...future.conditions <- base::list()
[17:03:16.783]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.783]     if (FALSE) {
[17:03:16.783]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.783]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.783]     }
[17:03:16.783]     ...future.result <- base::tryCatch({
[17:03:16.783]         base::withCallingHandlers({
[17:03:16.783]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:03:16.783]                 a == 2)))
[17:03:16.783]             future::FutureResult(value = ...future.value$value, 
[17:03:16.783]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.783]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.783]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.783]                     ...future.globalenv.names))
[17:03:16.783]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.783]         }, condition = base::local({
[17:03:16.783]             c <- base::c
[17:03:16.783]             inherits <- base::inherits
[17:03:16.783]             invokeRestart <- base::invokeRestart
[17:03:16.783]             length <- base::length
[17:03:16.783]             list <- base::list
[17:03:16.783]             seq.int <- base::seq.int
[17:03:16.783]             signalCondition <- base::signalCondition
[17:03:16.783]             sys.calls <- base::sys.calls
[17:03:16.783]             `[[` <- base::`[[`
[17:03:16.783]             `+` <- base::`+`
[17:03:16.783]             `<<-` <- base::`<<-`
[17:03:16.783]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.783]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.783]                   3L)]
[17:03:16.783]             }
[17:03:16.783]             function(cond) {
[17:03:16.783]                 is_error <- inherits(cond, "error")
[17:03:16.783]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.783]                   NULL)
[17:03:16.783]                 if (is_error) {
[17:03:16.783]                   sessionInformation <- function() {
[17:03:16.783]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.783]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.783]                       search = base::search(), system = base::Sys.info())
[17:03:16.783]                   }
[17:03:16.783]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.783]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.783]                     cond$call), session = sessionInformation(), 
[17:03:16.783]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.783]                   signalCondition(cond)
[17:03:16.783]                 }
[17:03:16.783]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.783]                 "immediateCondition"))) {
[17:03:16.783]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.783]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.783]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.783]                   if (TRUE && !signal) {
[17:03:16.783]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.783]                     {
[17:03:16.783]                       inherits <- base::inherits
[17:03:16.783]                       invokeRestart <- base::invokeRestart
[17:03:16.783]                       is.null <- base::is.null
[17:03:16.783]                       muffled <- FALSE
[17:03:16.783]                       if (inherits(cond, "message")) {
[17:03:16.783]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.783]                         if (muffled) 
[17:03:16.783]                           invokeRestart("muffleMessage")
[17:03:16.783]                       }
[17:03:16.783]                       else if (inherits(cond, "warning")) {
[17:03:16.783]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.783]                         if (muffled) 
[17:03:16.783]                           invokeRestart("muffleWarning")
[17:03:16.783]                       }
[17:03:16.783]                       else if (inherits(cond, "condition")) {
[17:03:16.783]                         if (!is.null(pattern)) {
[17:03:16.783]                           computeRestarts <- base::computeRestarts
[17:03:16.783]                           grepl <- base::grepl
[17:03:16.783]                           restarts <- computeRestarts(cond)
[17:03:16.783]                           for (restart in restarts) {
[17:03:16.783]                             name <- restart$name
[17:03:16.783]                             if (is.null(name)) 
[17:03:16.783]                               next
[17:03:16.783]                             if (!grepl(pattern, name)) 
[17:03:16.783]                               next
[17:03:16.783]                             invokeRestart(restart)
[17:03:16.783]                             muffled <- TRUE
[17:03:16.783]                             break
[17:03:16.783]                           }
[17:03:16.783]                         }
[17:03:16.783]                       }
[17:03:16.783]                       invisible(muffled)
[17:03:16.783]                     }
[17:03:16.783]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.783]                   }
[17:03:16.783]                 }
[17:03:16.783]                 else {
[17:03:16.783]                   if (TRUE) {
[17:03:16.783]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.783]                     {
[17:03:16.783]                       inherits <- base::inherits
[17:03:16.783]                       invokeRestart <- base::invokeRestart
[17:03:16.783]                       is.null <- base::is.null
[17:03:16.783]                       muffled <- FALSE
[17:03:16.783]                       if (inherits(cond, "message")) {
[17:03:16.783]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.783]                         if (muffled) 
[17:03:16.783]                           invokeRestart("muffleMessage")
[17:03:16.783]                       }
[17:03:16.783]                       else if (inherits(cond, "warning")) {
[17:03:16.783]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.783]                         if (muffled) 
[17:03:16.783]                           invokeRestart("muffleWarning")
[17:03:16.783]                       }
[17:03:16.783]                       else if (inherits(cond, "condition")) {
[17:03:16.783]                         if (!is.null(pattern)) {
[17:03:16.783]                           computeRestarts <- base::computeRestarts
[17:03:16.783]                           grepl <- base::grepl
[17:03:16.783]                           restarts <- computeRestarts(cond)
[17:03:16.783]                           for (restart in restarts) {
[17:03:16.783]                             name <- restart$name
[17:03:16.783]                             if (is.null(name)) 
[17:03:16.783]                               next
[17:03:16.783]                             if (!grepl(pattern, name)) 
[17:03:16.783]                               next
[17:03:16.783]                             invokeRestart(restart)
[17:03:16.783]                             muffled <- TRUE
[17:03:16.783]                             break
[17:03:16.783]                           }
[17:03:16.783]                         }
[17:03:16.783]                       }
[17:03:16.783]                       invisible(muffled)
[17:03:16.783]                     }
[17:03:16.783]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.783]                   }
[17:03:16.783]                 }
[17:03:16.783]             }
[17:03:16.783]         }))
[17:03:16.783]     }, error = function(ex) {
[17:03:16.783]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.783]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.783]                 ...future.rng), started = ...future.startTime, 
[17:03:16.783]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.783]             version = "1.8"), class = "FutureResult")
[17:03:16.783]     }, finally = {
[17:03:16.783]         if (!identical(...future.workdir, getwd())) 
[17:03:16.783]             setwd(...future.workdir)
[17:03:16.783]         {
[17:03:16.783]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.783]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.783]             }
[17:03:16.783]             base::options(...future.oldOptions)
[17:03:16.783]             if (.Platform$OS.type == "windows") {
[17:03:16.783]                 old_names <- names(...future.oldEnvVars)
[17:03:16.783]                 envs <- base::Sys.getenv()
[17:03:16.783]                 names <- names(envs)
[17:03:16.783]                 common <- intersect(names, old_names)
[17:03:16.783]                 added <- setdiff(names, old_names)
[17:03:16.783]                 removed <- setdiff(old_names, names)
[17:03:16.783]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.783]                   envs[common]]
[17:03:16.783]                 NAMES <- toupper(changed)
[17:03:16.783]                 args <- list()
[17:03:16.783]                 for (kk in seq_along(NAMES)) {
[17:03:16.783]                   name <- changed[[kk]]
[17:03:16.783]                   NAME <- NAMES[[kk]]
[17:03:16.783]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.783]                     next
[17:03:16.783]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.783]                 }
[17:03:16.783]                 NAMES <- toupper(added)
[17:03:16.783]                 for (kk in seq_along(NAMES)) {
[17:03:16.783]                   name <- added[[kk]]
[17:03:16.783]                   NAME <- NAMES[[kk]]
[17:03:16.783]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.783]                     next
[17:03:16.783]                   args[[name]] <- ""
[17:03:16.783]                 }
[17:03:16.783]                 NAMES <- toupper(removed)
[17:03:16.783]                 for (kk in seq_along(NAMES)) {
[17:03:16.783]                   name <- removed[[kk]]
[17:03:16.783]                   NAME <- NAMES[[kk]]
[17:03:16.783]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.783]                     next
[17:03:16.783]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.783]                 }
[17:03:16.783]                 if (length(args) > 0) 
[17:03:16.783]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.783]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.783]             }
[17:03:16.783]             else {
[17:03:16.783]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.783]             }
[17:03:16.783]             {
[17:03:16.783]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.783]                   0L) {
[17:03:16.783]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.783]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.783]                   base::options(opts)
[17:03:16.783]                 }
[17:03:16.783]                 {
[17:03:16.783]                   {
[17:03:16.783]                     NULL
[17:03:16.783]                     RNGkind("Mersenne-Twister")
[17:03:16.783]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.783]                       inherits = FALSE)
[17:03:16.783]                   }
[17:03:16.783]                   options(future.plan = NULL)
[17:03:16.783]                   if (is.na(NA_character_)) 
[17:03:16.783]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.783]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.783]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.783]                     .init = FALSE)
[17:03:16.783]                 }
[17:03:16.783]             }
[17:03:16.783]         }
[17:03:16.783]     })
[17:03:16.783]     if (TRUE) {
[17:03:16.783]         base::sink(type = "output", split = FALSE)
[17:03:16.783]         if (TRUE) {
[17:03:16.783]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.783]         }
[17:03:16.783]         else {
[17:03:16.783]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.783]         }
[17:03:16.783]         base::close(...future.stdout)
[17:03:16.783]         ...future.stdout <- NULL
[17:03:16.783]     }
[17:03:16.783]     ...future.result$conditions <- ...future.conditions
[17:03:16.783]     ...future.result$finished <- base::Sys.time()
[17:03:16.783]     ...future.result
[17:03:16.783] }
[17:03:16.818]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.785] assign_globals() ...
[17:03:16.818]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.785] List of 1
[17:03:16.785]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.785]   ..$ a: int [1:3] 1 2 3
[17:03:16.785]   ..$ b: int [1:3] 3 2 1
[17:03:16.785]  - attr(*, "where")=List of 1
[17:03:16.785]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.785]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.785]  - attr(*, "resolved")= logi FALSE
[17:03:16.785]  - attr(*, "total_size")= num 128
[17:03:16.785]  - attr(*, "already-done")= logi TRUE
[17:03:16.818]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.790] - copied ‘data’ to environment
[17:03:16.818]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.790] assign_globals() ... done
[17:03:16.818]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.790] plan(): Setting new future strategy stack:
[17:03:16.819]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.790] List of future strategies:
[17:03:16.790] 1. sequential:
[17:03:16.790]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.790]    - tweaked: FALSE
[17:03:16.790]    - call: NULL
[17:03:16.819]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.791] plan(): nbrOfWorkers() = 1
[17:03:16.819]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.792] plan(): Setting new future strategy stack:
[17:03:16.819]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.792] List of future strategies:
[17:03:16.792] 1. multicore:
[17:03:16.792]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.792]    - tweaked: FALSE
[17:03:16.792]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.819]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.796] plan(): nbrOfWorkers() = 1
[17:03:16.819]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.797] SequentialFuture started (and completed)
[17:03:16.819]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.797] - Launch lazy future ... done
[17:03:16.820]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.802] run() for ‘SequentialFuture’ ... done
[17:03:16.820] signalConditions() ... done
- plan(list('multicore', 'multicore')) ... DONE
- plan(list('multicore', 'multisession')) ...
[17:03:16.820] plan(): Setting new future strategy stack:
[17:03:16.820] List of future strategies:
[17:03:16.820] 1. multicore:
[17:03:16.820]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.820]    - tweaked: FALSE
[17:03:16.820]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.820] 2. multisession:
[17:03:16.820]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.820]    - tweaked: FALSE
[17:03:16.820]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.825] plan(): nbrOfWorkers() = 2
[17:03:16.825] getGlobalsAndPackages() ...
[17:03:16.825] Searching for globals...
[17:03:16.847] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:16.848] Searching for globals ... DONE
[17:03:16.848] Resolving globals: FALSE
[17:03:16.849] The total size of the 2 globals is 90.64 KiB (92816 bytes)
[17:03:16.849] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.52 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:16.850] - globals: [2] ‘nested’, ‘strategy2’
[17:03:16.850] - packages: [1] ‘future’
[17:03:16.850] getGlobalsAndPackages() ... DONE
[17:03:16.850] run() for ‘Future’ ...
[17:03:16.850] - state: ‘created’
[17:03:16.851] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.854] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.854] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:16.855]   - Field: ‘label’
[17:03:16.855]   - Field: ‘local’
[17:03:16.855]   - Field: ‘owner’
[17:03:16.855]   - Field: ‘envir’
[17:03:16.855]   - Field: ‘workers’
[17:03:16.855]   - Field: ‘packages’
[17:03:16.855]   - Field: ‘gc’
[17:03:16.855]   - Field: ‘job’
[17:03:16.856]   - Field: ‘conditions’
[17:03:16.856]   - Field: ‘expr’
[17:03:16.856]   - Field: ‘uuid’
[17:03:16.856]   - Field: ‘seed’
[17:03:16.856]   - Field: ‘version’
[17:03:16.856]   - Field: ‘result’
[17:03:16.856]   - Field: ‘asynchronous’
[17:03:16.856]   - Field: ‘calls’
[17:03:16.856]   - Field: ‘globals’
[17:03:16.856]   - Field: ‘stdout’
[17:03:16.857]   - Field: ‘earlySignal’
[17:03:16.857]   - Field: ‘lazy’
[17:03:16.857]   - Field: ‘state’
[17:03:16.857] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:16.857] - Launch lazy future ...
[17:03:16.857] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.858] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.858] {
[17:03:16.858]     {
[17:03:16.858]         {
[17:03:16.858]             ...future.startTime <- base::Sys.time()
[17:03:16.858]             {
[17:03:16.858]                 {
[17:03:16.858]                   {
[17:03:16.858]                     {
[17:03:16.858]                       {
[17:03:16.858]                         base::local({
[17:03:16.858]                           has_future <- base::requireNamespace("future", 
[17:03:16.858]                             quietly = TRUE)
[17:03:16.858]                           if (has_future) {
[17:03:16.858]                             ns <- base::getNamespace("future")
[17:03:16.858]                             version <- ns[[".package"]][["version"]]
[17:03:16.858]                             if (is.null(version)) 
[17:03:16.858]                               version <- utils::packageVersion("future")
[17:03:16.858]                           }
[17:03:16.858]                           else {
[17:03:16.858]                             version <- NULL
[17:03:16.858]                           }
[17:03:16.858]                           if (!has_future || version < "1.8.0") {
[17:03:16.858]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.858]                               "", base::R.version$version.string), 
[17:03:16.858]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:16.858]                                 base::R.version$platform, 8 * 
[17:03:16.858]                                   base::.Machine$sizeof.pointer), 
[17:03:16.858]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.858]                                 "release", "version")], collapse = " "), 
[17:03:16.858]                               hostname = base::Sys.info()[["nodename"]])
[17:03:16.858]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.858]                               info)
[17:03:16.858]                             info <- base::paste(info, collapse = "; ")
[17:03:16.858]                             if (!has_future) {
[17:03:16.858]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.858]                                 info)
[17:03:16.858]                             }
[17:03:16.858]                             else {
[17:03:16.858]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.858]                                 info, version)
[17:03:16.858]                             }
[17:03:16.858]                             base::stop(msg)
[17:03:16.858]                           }
[17:03:16.858]                         })
[17:03:16.858]                       }
[17:03:16.858]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.858]                       base::options(mc.cores = 1L)
[17:03:16.858]                     }
[17:03:16.858]                     base::local({
[17:03:16.858]                       for (pkg in "future") {
[17:03:16.858]                         base::loadNamespace(pkg)
[17:03:16.858]                         base::library(pkg, character.only = TRUE)
[17:03:16.858]                       }
[17:03:16.858]                     })
[17:03:16.858]                   }
[17:03:16.858]                   ...future.strategy.old <- future::plan("list")
[17:03:16.858]                   options(future.plan = NULL)
[17:03:16.858]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.858]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:16.858]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:16.858]                     envir = parent.frame()) 
[17:03:16.858]                   {
[17:03:16.858]                     if (is.function(workers)) 
[17:03:16.858]                       workers <- workers()
[17:03:16.858]                     workers <- structure(as.integer(workers), 
[17:03:16.858]                       class = class(workers))
[17:03:16.858]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:16.858]                       workers >= 1)
[17:03:16.858]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:16.858]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:16.858]                     }
[17:03:16.858]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:16.858]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:16.858]                       envir = envir)
[17:03:16.858]                     if (!future$lazy) 
[17:03:16.858]                       future <- run(future)
[17:03:16.858]                     invisible(future)
[17:03:16.858]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.858]                 }
[17:03:16.858]                 ...future.workdir <- getwd()
[17:03:16.858]             }
[17:03:16.858]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.858]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.858]         }
[17:03:16.858]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.858]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.858]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.858]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.858]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.858]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.858]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.858]             base::names(...future.oldOptions))
[17:03:16.858]     }
[17:03:16.858]     if (FALSE) {
[17:03:16.858]     }
[17:03:16.858]     else {
[17:03:16.858]         if (TRUE) {
[17:03:16.858]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.858]                 open = "w")
[17:03:16.858]         }
[17:03:16.858]         else {
[17:03:16.858]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.858]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.858]         }
[17:03:16.858]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.858]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.858]             base::sink(type = "output", split = FALSE)
[17:03:16.858]             base::close(...future.stdout)
[17:03:16.858]         }, add = TRUE)
[17:03:16.858]     }
[17:03:16.858]     ...future.frame <- base::sys.nframe()
[17:03:16.858]     ...future.conditions <- base::list()
[17:03:16.858]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.858]     if (FALSE) {
[17:03:16.858]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.858]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.858]     }
[17:03:16.858]     ...future.result <- base::tryCatch({
[17:03:16.858]         base::withCallingHandlers({
[17:03:16.858]             ...future.value <- base::withVisible(base::local({
[17:03:16.858]                 withCallingHandlers({
[17:03:16.858]                   {
[17:03:16.858]                     a <- 1L
[17:03:16.858]                     plan_a <- unclass(future::plan("list"))
[17:03:16.858]                     nested_a <- nested[-1]
[17:03:16.858]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:16.858]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.858]                       strategy2))
[17:03:16.858]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:16.858]                       "init") <- NULL
[17:03:16.858]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:16.858]                       "init") <- NULL
[17:03:16.858]                     stopifnot(all.equal(plan_a, nested_a))
[17:03:16.858]                     y %<-% {
[17:03:16.858]                       b <- 2L
[17:03:16.858]                       plan_b <- future::plan("list")
[17:03:16.858]                       nested_b <- nested_a[-1]
[17:03:16.858]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.858]                         1L, inherits(plan_b[[1]], "future"), 
[17:03:16.858]                         inherits(future::plan("next"), "sequential"))
[17:03:16.858]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.858]                         b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.858]                     }
[17:03:16.858]                     y
[17:03:16.858]                   }
[17:03:16.858]                 }, immediateCondition = function(cond) {
[17:03:16.858]                   save_rds <- function (object, pathname, ...) 
[17:03:16.858]                   {
[17:03:16.858]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:16.858]                     if (file_test("-f", pathname_tmp)) {
[17:03:16.858]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.858]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:16.858]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.858]                         fi_tmp[["mtime"]])
[17:03:16.858]                     }
[17:03:16.858]                     tryCatch({
[17:03:16.858]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:16.858]                     }, error = function(ex) {
[17:03:16.858]                       msg <- conditionMessage(ex)
[17:03:16.858]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.858]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:16.858]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.858]                         fi_tmp[["mtime"]], msg)
[17:03:16.858]                       ex$message <- msg
[17:03:16.858]                       stop(ex)
[17:03:16.858]                     })
[17:03:16.858]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:16.858]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:16.858]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:16.858]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.858]                       fi <- file.info(pathname)
[17:03:16.858]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:16.858]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.858]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:16.858]                         fi[["size"]], fi[["mtime"]])
[17:03:16.858]                       stop(msg)
[17:03:16.858]                     }
[17:03:16.858]                     invisible(pathname)
[17:03:16.858]                   }
[17:03:16.858]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:16.858]                     rootPath = tempdir()) 
[17:03:16.858]                   {
[17:03:16.858]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:16.858]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:16.858]                       tmpdir = path, fileext = ".rds")
[17:03:16.858]                     save_rds(obj, file)
[17:03:16.858]                   }
[17:03:16.858]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:16.858]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.858]                   {
[17:03:16.858]                     inherits <- base::inherits
[17:03:16.858]                     invokeRestart <- base::invokeRestart
[17:03:16.858]                     is.null <- base::is.null
[17:03:16.858]                     muffled <- FALSE
[17:03:16.858]                     if (inherits(cond, "message")) {
[17:03:16.858]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.858]                       if (muffled) 
[17:03:16.858]                         invokeRestart("muffleMessage")
[17:03:16.858]                     }
[17:03:16.858]                     else if (inherits(cond, "warning")) {
[17:03:16.858]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.858]                       if (muffled) 
[17:03:16.858]                         invokeRestart("muffleWarning")
[17:03:16.858]                     }
[17:03:16.858]                     else if (inherits(cond, "condition")) {
[17:03:16.858]                       if (!is.null(pattern)) {
[17:03:16.858]                         computeRestarts <- base::computeRestarts
[17:03:16.858]                         grepl <- base::grepl
[17:03:16.858]                         restarts <- computeRestarts(cond)
[17:03:16.858]                         for (restart in restarts) {
[17:03:16.858]                           name <- restart$name
[17:03:16.858]                           if (is.null(name)) 
[17:03:16.858]                             next
[17:03:16.858]                           if (!grepl(pattern, name)) 
[17:03:16.858]                             next
[17:03:16.858]                           invokeRestart(restart)
[17:03:16.858]                           muffled <- TRUE
[17:03:16.858]                           break
[17:03:16.858]                         }
[17:03:16.858]                       }
[17:03:16.858]                     }
[17:03:16.858]                     invisible(muffled)
[17:03:16.858]                   }
[17:03:16.858]                   muffleCondition(cond)
[17:03:16.858]                 })
[17:03:16.858]             }))
[17:03:16.858]             future::FutureResult(value = ...future.value$value, 
[17:03:16.858]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.858]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.858]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.858]                     ...future.globalenv.names))
[17:03:16.858]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.858]         }, condition = base::local({
[17:03:16.858]             c <- base::c
[17:03:16.858]             inherits <- base::inherits
[17:03:16.858]             invokeRestart <- base::invokeRestart
[17:03:16.858]             length <- base::length
[17:03:16.858]             list <- base::list
[17:03:16.858]             seq.int <- base::seq.int
[17:03:16.858]             signalCondition <- base::signalCondition
[17:03:16.858]             sys.calls <- base::sys.calls
[17:03:16.858]             `[[` <- base::`[[`
[17:03:16.858]             `+` <- base::`+`
[17:03:16.858]             `<<-` <- base::`<<-`
[17:03:16.858]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.858]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.858]                   3L)]
[17:03:16.858]             }
[17:03:16.858]             function(cond) {
[17:03:16.858]                 is_error <- inherits(cond, "error")
[17:03:16.858]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.858]                   NULL)
[17:03:16.858]                 if (is_error) {
[17:03:16.858]                   sessionInformation <- function() {
[17:03:16.858]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.858]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.858]                       search = base::search(), system = base::Sys.info())
[17:03:16.858]                   }
[17:03:16.858]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.858]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.858]                     cond$call), session = sessionInformation(), 
[17:03:16.858]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.858]                   signalCondition(cond)
[17:03:16.858]                 }
[17:03:16.858]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.858]                 "immediateCondition"))) {
[17:03:16.858]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.858]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.858]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.858]                   if (TRUE && !signal) {
[17:03:16.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.858]                     {
[17:03:16.858]                       inherits <- base::inherits
[17:03:16.858]                       invokeRestart <- base::invokeRestart
[17:03:16.858]                       is.null <- base::is.null
[17:03:16.858]                       muffled <- FALSE
[17:03:16.858]                       if (inherits(cond, "message")) {
[17:03:16.858]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.858]                         if (muffled) 
[17:03:16.858]                           invokeRestart("muffleMessage")
[17:03:16.858]                       }
[17:03:16.858]                       else if (inherits(cond, "warning")) {
[17:03:16.858]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.858]                         if (muffled) 
[17:03:16.858]                           invokeRestart("muffleWarning")
[17:03:16.858]                       }
[17:03:16.858]                       else if (inherits(cond, "condition")) {
[17:03:16.858]                         if (!is.null(pattern)) {
[17:03:16.858]                           computeRestarts <- base::computeRestarts
[17:03:16.858]                           grepl <- base::grepl
[17:03:16.858]                           restarts <- computeRestarts(cond)
[17:03:16.858]                           for (restart in restarts) {
[17:03:16.858]                             name <- restart$name
[17:03:16.858]                             if (is.null(name)) 
[17:03:16.858]                               next
[17:03:16.858]                             if (!grepl(pattern, name)) 
[17:03:16.858]                               next
[17:03:16.858]                             invokeRestart(restart)
[17:03:16.858]                             muffled <- TRUE
[17:03:16.858]                             break
[17:03:16.858]                           }
[17:03:16.858]                         }
[17:03:16.858]                       }
[17:03:16.858]                       invisible(muffled)
[17:03:16.858]                     }
[17:03:16.858]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.858]                   }
[17:03:16.858]                 }
[17:03:16.858]                 else {
[17:03:16.858]                   if (TRUE) {
[17:03:16.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.858]                     {
[17:03:16.858]                       inherits <- base::inherits
[17:03:16.858]                       invokeRestart <- base::invokeRestart
[17:03:16.858]                       is.null <- base::is.null
[17:03:16.858]                       muffled <- FALSE
[17:03:16.858]                       if (inherits(cond, "message")) {
[17:03:16.858]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.858]                         if (muffled) 
[17:03:16.858]                           invokeRestart("muffleMessage")
[17:03:16.858]                       }
[17:03:16.858]                       else if (inherits(cond, "warning")) {
[17:03:16.858]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.858]                         if (muffled) 
[17:03:16.858]                           invokeRestart("muffleWarning")
[17:03:16.858]                       }
[17:03:16.858]                       else if (inherits(cond, "condition")) {
[17:03:16.858]                         if (!is.null(pattern)) {
[17:03:16.858]                           computeRestarts <- base::computeRestarts
[17:03:16.858]                           grepl <- base::grepl
[17:03:16.858]                           restarts <- computeRestarts(cond)
[17:03:16.858]                           for (restart in restarts) {
[17:03:16.858]                             name <- restart$name
[17:03:16.858]                             if (is.null(name)) 
[17:03:16.858]                               next
[17:03:16.858]                             if (!grepl(pattern, name)) 
[17:03:16.858]                               next
[17:03:16.858]                             invokeRestart(restart)
[17:03:16.858]                             muffled <- TRUE
[17:03:16.858]                             break
[17:03:16.858]                           }
[17:03:16.858]                         }
[17:03:16.858]                       }
[17:03:16.858]                       invisible(muffled)
[17:03:16.858]                     }
[17:03:16.858]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.858]                   }
[17:03:16.858]                 }
[17:03:16.858]             }
[17:03:16.858]         }))
[17:03:16.858]     }, error = function(ex) {
[17:03:16.858]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.858]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.858]                 ...future.rng), started = ...future.startTime, 
[17:03:16.858]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.858]             version = "1.8"), class = "FutureResult")
[17:03:16.858]     }, finally = {
[17:03:16.858]         if (!identical(...future.workdir, getwd())) 
[17:03:16.858]             setwd(...future.workdir)
[17:03:16.858]         {
[17:03:16.858]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.858]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.858]             }
[17:03:16.858]             base::options(...future.oldOptions)
[17:03:16.858]             if (.Platform$OS.type == "windows") {
[17:03:16.858]                 old_names <- names(...future.oldEnvVars)
[17:03:16.858]                 envs <- base::Sys.getenv()
[17:03:16.858]                 names <- names(envs)
[17:03:16.858]                 common <- intersect(names, old_names)
[17:03:16.858]                 added <- setdiff(names, old_names)
[17:03:16.858]                 removed <- setdiff(old_names, names)
[17:03:16.858]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.858]                   envs[common]]
[17:03:16.858]                 NAMES <- toupper(changed)
[17:03:16.858]                 args <- list()
[17:03:16.858]                 for (kk in seq_along(NAMES)) {
[17:03:16.858]                   name <- changed[[kk]]
[17:03:16.858]                   NAME <- NAMES[[kk]]
[17:03:16.858]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.858]                     next
[17:03:16.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.858]                 }
[17:03:16.858]                 NAMES <- toupper(added)
[17:03:16.858]                 for (kk in seq_along(NAMES)) {
[17:03:16.858]                   name <- added[[kk]]
[17:03:16.858]                   NAME <- NAMES[[kk]]
[17:03:16.858]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.858]                     next
[17:03:16.858]                   args[[name]] <- ""
[17:03:16.858]                 }
[17:03:16.858]                 NAMES <- toupper(removed)
[17:03:16.858]                 for (kk in seq_along(NAMES)) {
[17:03:16.858]                   name <- removed[[kk]]
[17:03:16.858]                   NAME <- NAMES[[kk]]
[17:03:16.858]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.858]                     next
[17:03:16.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.858]                 }
[17:03:16.858]                 if (length(args) > 0) 
[17:03:16.858]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.858]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.858]             }
[17:03:16.858]             else {
[17:03:16.858]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.858]             }
[17:03:16.858]             {
[17:03:16.858]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.858]                   0L) {
[17:03:16.858]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.858]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.858]                   base::options(opts)
[17:03:16.858]                 }
[17:03:16.858]                 {
[17:03:16.858]                   {
[17:03:16.858]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.858]                     NULL
[17:03:16.858]                   }
[17:03:16.858]                   options(future.plan = NULL)
[17:03:16.858]                   if (is.na(NA_character_)) 
[17:03:16.858]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.858]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.858]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.858]                     .init = FALSE)
[17:03:16.858]                 }
[17:03:16.858]             }
[17:03:16.858]         }
[17:03:16.858]     })
[17:03:16.858]     if (TRUE) {
[17:03:16.858]         base::sink(type = "output", split = FALSE)
[17:03:16.858]         if (TRUE) {
[17:03:16.858]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.858]         }
[17:03:16.858]         else {
[17:03:16.858]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.858]         }
[17:03:16.858]         base::close(...future.stdout)
[17:03:16.858]         ...future.stdout <- NULL
[17:03:16.858]     }
[17:03:16.858]     ...future.result$conditions <- ...future.conditions
[17:03:16.858]     ...future.result$finished <- base::Sys.time()
[17:03:16.858]     ...future.result
[17:03:16.858] }
[17:03:16.861] assign_globals() ...
[17:03:16.861] List of 2
[17:03:16.861]  $ nested   :List of 2
[17:03:16.861]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[17:03:16.861]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[17:03:16.861]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.861]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:16.861]     envir = parent.frame())  
[17:03:16.861]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[17:03:16.861]   .. ..- attr(*, "init")= logi TRUE
[17:03:16.861]   .. ..- attr(*, "untweakable")= chr "persistent"
[17:03:16.861]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.861]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.861]  $ strategy2: chr "multisession"
[17:03:16.861]  - attr(*, "where")=List of 2
[17:03:16.861]   ..$ nested   :<environment: R_EmptyEnv> 
[17:03:16.861]   ..$ strategy2:<environment: R_EmptyEnv> 
[17:03:16.861]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.861]  - attr(*, "resolved")= logi FALSE
[17:03:16.861]  - attr(*, "total_size")= num 92816
[17:03:16.861]  - attr(*, "already-done")= logi TRUE
[17:03:16.867] - copied ‘nested’ to environment
[17:03:16.867] - copied ‘strategy2’ to environment
[17:03:16.867] assign_globals() ... done
[17:03:16.867] requestCore(): workers = 2
[17:03:16.870] MulticoreFuture started
[17:03:16.870] - Launch lazy future ... done
[17:03:16.870] run() for ‘MulticoreFuture’ ... done
[17:03:16.871] result() for MulticoreFuture ...
[17:03:16.871] plan(): Setting new future strategy stack:
[17:03:16.871] List of future strategies:
[17:03:16.871] 1. multisession:
[17:03:16.871]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.871]    - tweaked: FALSE
[17:03:16.871]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.877] plan(): nbrOfWorkers() = 1
[17:03:16.918] plan(): Setting new future strategy stack:
[17:03:16.918] List of future strategies:
[17:03:16.918] 1. multicore:
[17:03:16.918]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:16.918]    - tweaked: FALSE
[17:03:16.918]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.918] 2. multisession:
[17:03:16.918]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.918]    - tweaked: FALSE
[17:03:16.918]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.922] plan(): nbrOfWorkers() = 2
[17:03:16.924] result() for MulticoreFuture ...
[17:03:16.924] result() for MulticoreFuture ... done
[17:03:16.924] signalConditions() ...
[17:03:16.924]  - include = ‘immediateCondition’
[17:03:16.925]  - exclude = 
[17:03:16.925]  - resignal = FALSE
[17:03:16.925]  - Number of conditions: 54
[17:03:16.925] signalConditions() ... done
[17:03:16.925] result() for MulticoreFuture ... done
[17:03:16.925] result() for MulticoreFuture ...
[17:03:16.925] result() for MulticoreFuture ... done
[17:03:16.925] signalConditions() ...
[17:03:16.925]  - include = ‘immediateCondition’
[17:03:16.926]  - exclude = 
[17:03:16.926]  - resignal = FALSE
[17:03:16.926]  - Number of conditions: 54
[17:03:16.926] signalConditions() ... done
[17:03:16.926] Future state: ‘finished’
[17:03:16.926] result() for MulticoreFuture ...
[17:03:16.926] result() for MulticoreFuture ... done
[17:03:16.926] signalConditions() ...
[17:03:16.927]  - include = ‘condition’
[17:03:16.927]  - exclude = ‘immediateCondition’
[17:03:16.927]  - resignal = TRUE
[17:03:16.927]  - Number of conditions: 54
[17:03:16.927]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.879] getGlobalsAndPackages() ...
[17:03:16.927]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.879] Searching for globals...
[17:03:16.927]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.886] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[17:03:16.928]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.887] Searching for globals ... DONE
[17:03:16.928]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.887] Resolving globals: FALSE
[17:03:16.928]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.888] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[17:03:16.928]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.889] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[17:03:16.928]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.889] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[17:03:16.928]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.889] 
[17:03:16.929]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.889] getGlobalsAndPackages() ... DONE
[17:03:16.929]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.890] run() for ‘Future’ ...
[17:03:16.929]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.890] - state: ‘created’
[17:03:16.929]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.890] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.929]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.894] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:16.929]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:16.929]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.895]   - Field: ‘label’
[17:03:16.930]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.895]   - Field: ‘local’
[17:03:16.930]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.895]   - Field: ‘owner’
[17:03:16.930]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.895]   - Field: ‘envir’
[17:03:16.930]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘packages’
[17:03:16.930]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘gc’
[17:03:16.930]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘conditions’
[17:03:16.930]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘expr’
[17:03:16.931]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘uuid’
[17:03:16.931]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘seed’
[17:03:16.931]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.896]   - Field: ‘version’
[17:03:16.931]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘result’
[17:03:16.931]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘asynchronous’
[17:03:16.931]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘calls’
[17:03:16.932]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘globals’
[17:03:16.932]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘stdout’
[17:03:16.932]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘earlySignal’
[17:03:16.932]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.897]   - Field: ‘lazy’
[17:03:16.932]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.898]   - Field: ‘state’
[17:03:16.932]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.898] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:16.933]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.898] - Launch lazy future ...
[17:03:16.933]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.898] Packages needed by the future expression (n = 0): <none>
[17:03:16.933]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.898] Packages needed by future strategies (n = 0): <none>
[17:03:16.933]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.899] {
[17:03:16.899]     {
[17:03:16.899]         {
[17:03:16.899]             ...future.startTime <- base::Sys.time()
[17:03:16.899]             {
[17:03:16.899]                 {
[17:03:16.899]                   {
[17:03:16.899]                     base::local({
[17:03:16.899]                       has_future <- base::requireNamespace("future", 
[17:03:16.899]                         quietly = TRUE)
[17:03:16.899]                       if (has_future) {
[17:03:16.899]                         ns <- base::getNamespace("future")
[17:03:16.899]                         version <- ns[[".package"]][["version"]]
[17:03:16.899]                         if (is.null(version)) 
[17:03:16.899]                           version <- utils::packageVersion("future")
[17:03:16.899]                       }
[17:03:16.899]                       else {
[17:03:16.899]                         version <- NULL
[17:03:16.899]                       }
[17:03:16.899]                       if (!has_future || version < "1.8.0") {
[17:03:16.899]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.899]                           "", base::R.version$version.string), 
[17:03:16.899]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:16.899]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.899]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.899]                             "release", "version")], collapse = " "), 
[17:03:16.899]                           hostname = base::Sys.info()[["nodename"]])
[17:03:16.899]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.899]                           info)
[17:03:16.899]                         info <- base::paste(info, collapse = "; ")
[17:03:16.899]                         if (!has_future) {
[17:03:16.899]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.899]                             info)
[17:03:16.899]                         }
[17:03:16.899]                         else {
[17:03:16.899]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.899]                             info, version)
[17:03:16.899]                         }
[17:03:16.899]                         base::stop(msg)
[17:03:16.899]                       }
[17:03:16.899]                     })
[17:03:16.899]                   }
[17:03:16.899]                   ...future.strategy.old <- future::plan("list")
[17:03:16.899]                   options(future.plan = NULL)
[17:03:16.899]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.899]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.899]                 }
[17:03:16.899]                 ...future.workdir <- getwd()
[17:03:16.899]             }
[17:03:16.899]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.899]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.899]         }
[17:03:16.899]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.899]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.899]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.899]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.899]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.899]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.899]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.899]             base::names(...future.oldOptions))
[17:03:16.899]     }
[17:03:16.899]     if (FALSE) {
[17:03:16.899]     }
[17:03:16.899]     else {
[17:03:16.899]         if (TRUE) {
[17:03:16.899]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.899]                 open = "w")
[17:03:16.899]         }
[17:03:16.899]         else {
[17:03:16.899]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.899]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.899]         }
[17:03:16.899]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.899]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.899]             base::sink(type = "output", split = FALSE)
[17:03:16.899]             base::close(...future.stdout)
[17:03:16.899]         }, add = TRUE)
[17:03:16.899]     }
[17:03:16.899]     ...future.frame <- base::sys.nframe()
[17:03:16.899]     ...future.conditions <- base::list()
[17:03:16.899]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.899]     if (FALSE) {
[17:03:16.899]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.899]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.899]     }
[17:03:16.899]     ...future.result <- base::tryCatch({
[17:03:16.899]         base::withCallingHandlers({
[17:03:16.899]             ...future.value <- base::withVisible(base::local({
[17:03:16.899]                 b <- 2L
[17:03:16.899]                 plan_b <- future::plan("list")
[17:03:16.899]                 nested_b <- nested_a[-1]
[17:03:16.899]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:16.899]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[17:03:16.899]                   "sequential"))
[17:03:16.899]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:16.899]                   b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:16.899]             }))
[17:03:16.899]             future::FutureResult(value = ...future.value$value, 
[17:03:16.899]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.899]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.899]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.899]                     ...future.globalenv.names))
[17:03:16.899]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.899]         }, condition = base::local({
[17:03:16.899]             c <- base::c
[17:03:16.899]             inherits <- base::inherits
[17:03:16.899]             invokeRestart <- base::invokeRestart
[17:03:16.899]             length <- base::length
[17:03:16.899]             list <- base::list
[17:03:16.899]             seq.int <- base::seq.int
[17:03:16.899]             signalCondition <- base::signalCondition
[17:03:16.899]             sys.calls <- base::sys.calls
[17:03:16.899]             `[[` <- base::`[[`
[17:03:16.899]             `+` <- base::`+`
[17:03:16.899]             `<<-` <- base::`<<-`
[17:03:16.899]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.899]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.899]                   3L)]
[17:03:16.899]             }
[17:03:16.899]             function(cond) {
[17:03:16.899]                 is_error <- inherits(cond, "error")
[17:03:16.899]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.899]                   NULL)
[17:03:16.899]                 if (is_error) {
[17:03:16.899]                   sessionInformation <- function() {
[17:03:16.899]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.899]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.899]                       search = base::search(), system = base::Sys.info())
[17:03:16.899]                   }
[17:03:16.899]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.899]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.899]                     cond$call), session = sessionInformation(), 
[17:03:16.899]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.899]                   signalCondition(cond)
[17:03:16.899]                 }
[17:03:16.899]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.899]                 "immediateCondition"))) {
[17:03:16.899]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.899]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.899]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.899]                   if (TRUE && !signal) {
[17:03:16.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.899]                     {
[17:03:16.899]                       inherits <- base::inherits
[17:03:16.899]                       invokeRestart <- base::invokeRestart
[17:03:16.899]                       is.null <- base::is.null
[17:03:16.899]                       muffled <- FALSE
[17:03:16.899]                       if (inherits(cond, "message")) {
[17:03:16.899]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.899]                         if (muffled) 
[17:03:16.899]                           invokeRestart("muffleMessage")
[17:03:16.899]                       }
[17:03:16.899]                       else if (inherits(cond, "warning")) {
[17:03:16.899]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.899]                         if (muffled) 
[17:03:16.899]                           invokeRestart("muffleWarning")
[17:03:16.899]                       }
[17:03:16.899]                       else if (inherits(cond, "condition")) {
[17:03:16.899]                         if (!is.null(pattern)) {
[17:03:16.899]                           computeRestarts <- base::computeRestarts
[17:03:16.899]                           grepl <- base::grepl
[17:03:16.899]                           restarts <- computeRestarts(cond)
[17:03:16.899]                           for (restart in restarts) {
[17:03:16.899]                             name <- restart$name
[17:03:16.899]                             if (is.null(name)) 
[17:03:16.899]                               next
[17:03:16.899]                             if (!grepl(pattern, name)) 
[17:03:16.899]                               next
[17:03:16.899]                             invokeRestart(restart)
[17:03:16.899]                             muffled <- TRUE
[17:03:16.899]                             break
[17:03:16.899]                           }
[17:03:16.899]                         }
[17:03:16.899]                       }
[17:03:16.899]                       invisible(muffled)
[17:03:16.899]                     }
[17:03:16.899]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.899]                   }
[17:03:16.899]                 }
[17:03:16.899]                 else {
[17:03:16.899]                   if (TRUE) {
[17:03:16.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.899]                     {
[17:03:16.899]                       inherits <- base::inherits
[17:03:16.899]                       invokeRestart <- base::invokeRestart
[17:03:16.899]                       is.null <- base::is.null
[17:03:16.899]                       muffled <- FALSE
[17:03:16.899]                       if (inherits(cond, "message")) {
[17:03:16.899]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.899]                         if (muffled) 
[17:03:16.899]                           invokeRestart("muffleMessage")
[17:03:16.899]                       }
[17:03:16.899]                       else if (inherits(cond, "warning")) {
[17:03:16.899]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.899]                         if (muffled) 
[17:03:16.899]                           invokeRestart("muffleWarning")
[17:03:16.899]                       }
[17:03:16.899]                       else if (inherits(cond, "condition")) {
[17:03:16.899]                         if (!is.null(pattern)) {
[17:03:16.899]                           computeRestarts <- base::computeRestarts
[17:03:16.899]                           grepl <- base::grepl
[17:03:16.899]                           restarts <- computeRestarts(cond)
[17:03:16.899]                           for (restart in restarts) {
[17:03:16.899]                             name <- restart$name
[17:03:16.899]                             if (is.null(name)) 
[17:03:16.899]                               next
[17:03:16.899]                             if (!grepl(pattern, name)) 
[17:03:16.899]                               next
[17:03:16.899]                             invokeRestart(restart)
[17:03:16.899]                             muffled <- TRUE
[17:03:16.899]                             break
[17:03:16.899]                           }
[17:03:16.899]                         }
[17:03:16.899]                       }
[17:03:16.899]                       invisible(muffled)
[17:03:16.899]                     }
[17:03:16.899]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.899]                   }
[17:03:16.899]                 }
[17:03:16.899]             }
[17:03:16.899]         }))
[17:03:16.899]     }, error = function(ex) {
[17:03:16.899]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.899]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.899]                 ...future.rng), started = ...future.startTime, 
[17:03:16.899]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.899]             version = "1.8"), class = "FutureResult")
[17:03:16.899]     }, finally = {
[17:03:16.899]         if (!identical(...future.workdir, getwd())) 
[17:03:16.899]             setwd(...future.workdir)
[17:03:16.899]         {
[17:03:16.899]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.899]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.899]             }
[17:03:16.899]             base::options(...future.oldOptions)
[17:03:16.899]             if (.Platform$OS.type == "windows") {
[17:03:16.899]                 old_names <- names(...future.oldEnvVars)
[17:03:16.899]                 envs <- base::Sys.getenv()
[17:03:16.899]                 names <- names(envs)
[17:03:16.899]                 common <- intersect(names, old_names)
[17:03:16.899]                 added <- setdiff(names, old_names)
[17:03:16.899]                 removed <- setdiff(old_names, names)
[17:03:16.899]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.899]                   envs[common]]
[17:03:16.899]                 NAMES <- toupper(changed)
[17:03:16.899]                 args <- list()
[17:03:16.899]                 for (kk in seq_along(NAMES)) {
[17:03:16.899]                   name <- changed[[kk]]
[17:03:16.899]                   NAME <- NAMES[[kk]]
[17:03:16.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.899]                     next
[17:03:16.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.899]                 }
[17:03:16.899]                 NAMES <- toupper(added)
[17:03:16.899]                 for (kk in seq_along(NAMES)) {
[17:03:16.899]                   name <- added[[kk]]
[17:03:16.899]                   NAME <- NAMES[[kk]]
[17:03:16.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.899]                     next
[17:03:16.899]                   args[[name]] <- ""
[17:03:16.899]                 }
[17:03:16.899]                 NAMES <- toupper(removed)
[17:03:16.899]                 for (kk in seq_along(NAMES)) {
[17:03:16.899]                   name <- removed[[kk]]
[17:03:16.899]                   NAME <- NAMES[[kk]]
[17:03:16.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.899]                     next
[17:03:16.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.899]                 }
[17:03:16.899]                 if (length(args) > 0) 
[17:03:16.899]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.899]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.899]             }
[17:03:16.899]             else {
[17:03:16.899]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.899]             }
[17:03:16.899]             {
[17:03:16.899]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.899]                   0L) {
[17:03:16.899]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.899]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.899]                   base::options(opts)
[17:03:16.899]                 }
[17:03:16.899]                 {
[17:03:16.899]                   {
[17:03:16.899]                     NULL
[17:03:16.899]                     RNGkind("Mersenne-Twister")
[17:03:16.899]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.899]                       inherits = FALSE)
[17:03:16.899]                   }
[17:03:16.899]                   options(future.plan = NULL)
[17:03:16.899]                   if (is.na(NA_character_)) 
[17:03:16.899]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.899]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.899]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.899]                     .init = FALSE)
[17:03:16.899]                 }
[17:03:16.899]             }
[17:03:16.899]         }
[17:03:16.899]     })
[17:03:16.899]     if (TRUE) {
[17:03:16.899]         base::sink(type = "output", split = FALSE)
[17:03:16.899]         if (TRUE) {
[17:03:16.899]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.899]         }
[17:03:16.899]         else {
[17:03:16.899]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.899]         }
[17:03:16.899]         base::close(...future.stdout)
[17:03:16.899]         ...future.stdout <- NULL
[17:03:16.899]     }
[17:03:16.899]     ...future.result$conditions <- ...future.conditions
[17:03:16.899]     ...future.result$finished <- base::Sys.time()
[17:03:16.899]     ...future.result
[17:03:16.899] }
[17:03:16.933]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.902] assign_globals() ...
[17:03:16.933]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.902] List of 3
[17:03:16.902]  $ nested_a:List of 1
[17:03:16.902]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:16.902]     envir = parent.frame())  
[17:03:16.902]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[17:03:16.902]   .. ..- attr(*, "untweakable")= chr "persistent"
[17:03:16.902]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.902]  $ a       : int 1
[17:03:16.902]  $ plan_a  :List of 1
[17:03:16.902]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:16.902]     envir = parent.frame())  
[17:03:16.902]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[17:03:16.902]   .. ..- attr(*, "untweakable")= chr "persistent"
[17:03:16.902]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[17:03:16.902]  - attr(*, "where")=List of 3
[17:03:16.902]   ..$ nested_a:<environment: R_EmptyEnv> 
[17:03:16.902]   ..$ a       :<environment: R_EmptyEnv> 
[17:03:16.902]   ..$ plan_a  :<environment: R_EmptyEnv> 
[17:03:16.902]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.902]  - attr(*, "resolved")= logi FALSE
[17:03:16.902]  - attr(*, "total_size")= num 89928
[17:03:16.902]  - attr(*, "already-done")= logi TRUE
[17:03:16.933]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.910] - copied ‘nested_a’ to environment
[17:03:16.934]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.910] - copied ‘a’ to environment
[17:03:16.934]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.910] - copied ‘plan_a’ to environment
[17:03:16.934]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.910] assign_globals() ... done
[17:03:16.934]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.910] plan(): Setting new future strategy stack:
[17:03:16.934]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.911] List of future strategies:
[17:03:16.911] 1. sequential:
[17:03:16.911]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:16.911]    - tweaked: FALSE
[17:03:16.911]    - call: NULL
[17:03:16.934]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.911] plan(): nbrOfWorkers() = 1
[17:03:16.935]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.912] plan(): Setting new future strategy stack:
[17:03:16.935]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.912] List of future strategies:
[17:03:16.912] 1. multisession:
[17:03:16.912]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.912]    - tweaked: FALSE
[17:03:16.912]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.935]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.916] plan(): nbrOfWorkers() = 1
[17:03:16.935]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.917] SequentialFuture started (and completed)
[17:03:16.935]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.917] - Launch lazy future ... done
[17:03:16.935]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.917] run() for ‘SequentialFuture’ ... done
[17:03:16.936] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:16.942] getGlobalsAndPackages() ...
[17:03:16.942] Searching for globals...
[17:03:16.944] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:16.944] Searching for globals ... DONE
[17:03:16.944] Resolving globals: FALSE
[17:03:16.945] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:16.946] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:16.946] - globals: [1] ‘data’
[17:03:16.946] - packages: [1] ‘future’
[17:03:16.946] getGlobalsAndPackages() ... DONE
[17:03:16.946] run() for ‘Future’ ...
[17:03:16.946] - state: ‘created’
[17:03:16.947] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:03:16.951] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:16.951] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:03:16.951]   - Field: ‘label’
[17:03:16.951]   - Field: ‘local’
[17:03:16.951]   - Field: ‘owner’
[17:03:16.952]   - Field: ‘envir’
[17:03:16.952]   - Field: ‘workers’
[17:03:16.952]   - Field: ‘packages’
[17:03:16.952]   - Field: ‘gc’
[17:03:16.952]   - Field: ‘job’
[17:03:16.952]   - Field: ‘conditions’
[17:03:16.952]   - Field: ‘expr’
[17:03:16.952]   - Field: ‘uuid’
[17:03:16.952]   - Field: ‘seed’
[17:03:16.952]   - Field: ‘version’
[17:03:16.953]   - Field: ‘result’
[17:03:16.953]   - Field: ‘asynchronous’
[17:03:16.953]   - Field: ‘calls’
[17:03:16.953]   - Field: ‘globals’
[17:03:16.953]   - Field: ‘stdout’
[17:03:16.953]   - Field: ‘earlySignal’
[17:03:16.953]   - Field: ‘lazy’
[17:03:16.953]   - Field: ‘state’
[17:03:16.953] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:03:16.954] - Launch lazy future ...
[17:03:16.954] Packages needed by the future expression (n = 1): ‘future’
[17:03:16.954] Packages needed by future strategies (n = 1): ‘future’
[17:03:16.955] {
[17:03:16.955]     {
[17:03:16.955]         {
[17:03:16.955]             ...future.startTime <- base::Sys.time()
[17:03:16.955]             {
[17:03:16.955]                 {
[17:03:16.955]                   {
[17:03:16.955]                     {
[17:03:16.955]                       {
[17:03:16.955]                         base::local({
[17:03:16.955]                           has_future <- base::requireNamespace("future", 
[17:03:16.955]                             quietly = TRUE)
[17:03:16.955]                           if (has_future) {
[17:03:16.955]                             ns <- base::getNamespace("future")
[17:03:16.955]                             version <- ns[[".package"]][["version"]]
[17:03:16.955]                             if (is.null(version)) 
[17:03:16.955]                               version <- utils::packageVersion("future")
[17:03:16.955]                           }
[17:03:16.955]                           else {
[17:03:16.955]                             version <- NULL
[17:03:16.955]                           }
[17:03:16.955]                           if (!has_future || version < "1.8.0") {
[17:03:16.955]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.955]                               "", base::R.version$version.string), 
[17:03:16.955]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:16.955]                                 base::R.version$platform, 8 * 
[17:03:16.955]                                   base::.Machine$sizeof.pointer), 
[17:03:16.955]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.955]                                 "release", "version")], collapse = " "), 
[17:03:16.955]                               hostname = base::Sys.info()[["nodename"]])
[17:03:16.955]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.955]                               info)
[17:03:16.955]                             info <- base::paste(info, collapse = "; ")
[17:03:16.955]                             if (!has_future) {
[17:03:16.955]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.955]                                 info)
[17:03:16.955]                             }
[17:03:16.955]                             else {
[17:03:16.955]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.955]                                 info, version)
[17:03:16.955]                             }
[17:03:16.955]                             base::stop(msg)
[17:03:16.955]                           }
[17:03:16.955]                         })
[17:03:16.955]                       }
[17:03:16.955]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:16.955]                       base::options(mc.cores = 1L)
[17:03:16.955]                     }
[17:03:16.955]                     base::local({
[17:03:16.955]                       for (pkg in "future") {
[17:03:16.955]                         base::loadNamespace(pkg)
[17:03:16.955]                         base::library(pkg, character.only = TRUE)
[17:03:16.955]                       }
[17:03:16.955]                     })
[17:03:16.955]                   }
[17:03:16.955]                   ...future.strategy.old <- future::plan("list")
[17:03:16.955]                   options(future.plan = NULL)
[17:03:16.955]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.955]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:16.955]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:16.955]                     envir = parent.frame()) 
[17:03:16.955]                   {
[17:03:16.955]                     if (is.function(workers)) 
[17:03:16.955]                       workers <- workers()
[17:03:16.955]                     workers <- structure(as.integer(workers), 
[17:03:16.955]                       class = class(workers))
[17:03:16.955]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:16.955]                       workers >= 1)
[17:03:16.955]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:16.955]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:16.955]                     }
[17:03:16.955]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:16.955]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:16.955]                       envir = envir)
[17:03:16.955]                     if (!future$lazy) 
[17:03:16.955]                       future <- run(future)
[17:03:16.955]                     invisible(future)
[17:03:16.955]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:16.955]                 }
[17:03:16.955]                 ...future.workdir <- getwd()
[17:03:16.955]             }
[17:03:16.955]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.955]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.955]         }
[17:03:16.955]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.955]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.955]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.955]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.955]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.955]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.955]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.955]             base::names(...future.oldOptions))
[17:03:16.955]     }
[17:03:16.955]     if (FALSE) {
[17:03:16.955]     }
[17:03:16.955]     else {
[17:03:16.955]         if (TRUE) {
[17:03:16.955]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.955]                 open = "w")
[17:03:16.955]         }
[17:03:16.955]         else {
[17:03:16.955]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.955]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.955]         }
[17:03:16.955]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.955]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.955]             base::sink(type = "output", split = FALSE)
[17:03:16.955]             base::close(...future.stdout)
[17:03:16.955]         }, add = TRUE)
[17:03:16.955]     }
[17:03:16.955]     ...future.frame <- base::sys.nframe()
[17:03:16.955]     ...future.conditions <- base::list()
[17:03:16.955]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.955]     if (FALSE) {
[17:03:16.955]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.955]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.955]     }
[17:03:16.955]     ...future.result <- base::tryCatch({
[17:03:16.955]         base::withCallingHandlers({
[17:03:16.955]             ...future.value <- base::withVisible(base::local({
[17:03:16.955]                 withCallingHandlers({
[17:03:16.955]                   {
[17:03:16.955]                     value(future(subset(data, a == 2)))
[17:03:16.955]                   }
[17:03:16.955]                 }, immediateCondition = function(cond) {
[17:03:16.955]                   save_rds <- function (object, pathname, ...) 
[17:03:16.955]                   {
[17:03:16.955]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:03:16.955]                     if (file_test("-f", pathname_tmp)) {
[17:03:16.955]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.955]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:03:16.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.955]                         fi_tmp[["mtime"]])
[17:03:16.955]                     }
[17:03:16.955]                     tryCatch({
[17:03:16.955]                       saveRDS(object, file = pathname_tmp, ...)
[17:03:16.955]                     }, error = function(ex) {
[17:03:16.955]                       msg <- conditionMessage(ex)
[17:03:16.955]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.955]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:03:16.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.955]                         fi_tmp[["mtime"]], msg)
[17:03:16.955]                       ex$message <- msg
[17:03:16.955]                       stop(ex)
[17:03:16.955]                     })
[17:03:16.955]                     stopifnot(file_test("-f", pathname_tmp))
[17:03:16.955]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:03:16.955]                     if (!res || file_test("-f", pathname_tmp)) {
[17:03:16.955]                       fi_tmp <- file.info(pathname_tmp)
[17:03:16.955]                       fi <- file.info(pathname)
[17:03:16.955]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:03:16.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:03:16.955]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:03:16.955]                         fi[["size"]], fi[["mtime"]])
[17:03:16.955]                       stop(msg)
[17:03:16.955]                     }
[17:03:16.955]                     invisible(pathname)
[17:03:16.955]                   }
[17:03:16.955]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:03:16.955]                     rootPath = tempdir()) 
[17:03:16.955]                   {
[17:03:16.955]                     obj <- list(time = Sys.time(), condition = cond)
[17:03:16.955]                     file <- tempfile(pattern = class(cond)[1], 
[17:03:16.955]                       tmpdir = path, fileext = ".rds")
[17:03:16.955]                     save_rds(obj, file)
[17:03:16.955]                   }
[17:03:16.955]                   saveImmediateCondition(cond, path = "/tmp/RtmpK5BQg4/.future/immediateConditions")
[17:03:16.955]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.955]                   {
[17:03:16.955]                     inherits <- base::inherits
[17:03:16.955]                     invokeRestart <- base::invokeRestart
[17:03:16.955]                     is.null <- base::is.null
[17:03:16.955]                     muffled <- FALSE
[17:03:16.955]                     if (inherits(cond, "message")) {
[17:03:16.955]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:16.955]                       if (muffled) 
[17:03:16.955]                         invokeRestart("muffleMessage")
[17:03:16.955]                     }
[17:03:16.955]                     else if (inherits(cond, "warning")) {
[17:03:16.955]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:16.955]                       if (muffled) 
[17:03:16.955]                         invokeRestart("muffleWarning")
[17:03:16.955]                     }
[17:03:16.955]                     else if (inherits(cond, "condition")) {
[17:03:16.955]                       if (!is.null(pattern)) {
[17:03:16.955]                         computeRestarts <- base::computeRestarts
[17:03:16.955]                         grepl <- base::grepl
[17:03:16.955]                         restarts <- computeRestarts(cond)
[17:03:16.955]                         for (restart in restarts) {
[17:03:16.955]                           name <- restart$name
[17:03:16.955]                           if (is.null(name)) 
[17:03:16.955]                             next
[17:03:16.955]                           if (!grepl(pattern, name)) 
[17:03:16.955]                             next
[17:03:16.955]                           invokeRestart(restart)
[17:03:16.955]                           muffled <- TRUE
[17:03:16.955]                           break
[17:03:16.955]                         }
[17:03:16.955]                       }
[17:03:16.955]                     }
[17:03:16.955]                     invisible(muffled)
[17:03:16.955]                   }
[17:03:16.955]                   muffleCondition(cond)
[17:03:16.955]                 })
[17:03:16.955]             }))
[17:03:16.955]             future::FutureResult(value = ...future.value$value, 
[17:03:16.955]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.955]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.955]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.955]                     ...future.globalenv.names))
[17:03:16.955]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.955]         }, condition = base::local({
[17:03:16.955]             c <- base::c
[17:03:16.955]             inherits <- base::inherits
[17:03:16.955]             invokeRestart <- base::invokeRestart
[17:03:16.955]             length <- base::length
[17:03:16.955]             list <- base::list
[17:03:16.955]             seq.int <- base::seq.int
[17:03:16.955]             signalCondition <- base::signalCondition
[17:03:16.955]             sys.calls <- base::sys.calls
[17:03:16.955]             `[[` <- base::`[[`
[17:03:16.955]             `+` <- base::`+`
[17:03:16.955]             `<<-` <- base::`<<-`
[17:03:16.955]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.955]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.955]                   3L)]
[17:03:16.955]             }
[17:03:16.955]             function(cond) {
[17:03:16.955]                 is_error <- inherits(cond, "error")
[17:03:16.955]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.955]                   NULL)
[17:03:16.955]                 if (is_error) {
[17:03:16.955]                   sessionInformation <- function() {
[17:03:16.955]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.955]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.955]                       search = base::search(), system = base::Sys.info())
[17:03:16.955]                   }
[17:03:16.955]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.955]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.955]                     cond$call), session = sessionInformation(), 
[17:03:16.955]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.955]                   signalCondition(cond)
[17:03:16.955]                 }
[17:03:16.955]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.955]                 "immediateCondition"))) {
[17:03:16.955]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.955]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.955]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.955]                   if (TRUE && !signal) {
[17:03:16.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.955]                     {
[17:03:16.955]                       inherits <- base::inherits
[17:03:16.955]                       invokeRestart <- base::invokeRestart
[17:03:16.955]                       is.null <- base::is.null
[17:03:16.955]                       muffled <- FALSE
[17:03:16.955]                       if (inherits(cond, "message")) {
[17:03:16.955]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.955]                         if (muffled) 
[17:03:16.955]                           invokeRestart("muffleMessage")
[17:03:16.955]                       }
[17:03:16.955]                       else if (inherits(cond, "warning")) {
[17:03:16.955]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.955]                         if (muffled) 
[17:03:16.955]                           invokeRestart("muffleWarning")
[17:03:16.955]                       }
[17:03:16.955]                       else if (inherits(cond, "condition")) {
[17:03:16.955]                         if (!is.null(pattern)) {
[17:03:16.955]                           computeRestarts <- base::computeRestarts
[17:03:16.955]                           grepl <- base::grepl
[17:03:16.955]                           restarts <- computeRestarts(cond)
[17:03:16.955]                           for (restart in restarts) {
[17:03:16.955]                             name <- restart$name
[17:03:16.955]                             if (is.null(name)) 
[17:03:16.955]                               next
[17:03:16.955]                             if (!grepl(pattern, name)) 
[17:03:16.955]                               next
[17:03:16.955]                             invokeRestart(restart)
[17:03:16.955]                             muffled <- TRUE
[17:03:16.955]                             break
[17:03:16.955]                           }
[17:03:16.955]                         }
[17:03:16.955]                       }
[17:03:16.955]                       invisible(muffled)
[17:03:16.955]                     }
[17:03:16.955]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.955]                   }
[17:03:16.955]                 }
[17:03:16.955]                 else {
[17:03:16.955]                   if (TRUE) {
[17:03:16.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.955]                     {
[17:03:16.955]                       inherits <- base::inherits
[17:03:16.955]                       invokeRestart <- base::invokeRestart
[17:03:16.955]                       is.null <- base::is.null
[17:03:16.955]                       muffled <- FALSE
[17:03:16.955]                       if (inherits(cond, "message")) {
[17:03:16.955]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.955]                         if (muffled) 
[17:03:16.955]                           invokeRestart("muffleMessage")
[17:03:16.955]                       }
[17:03:16.955]                       else if (inherits(cond, "warning")) {
[17:03:16.955]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.955]                         if (muffled) 
[17:03:16.955]                           invokeRestart("muffleWarning")
[17:03:16.955]                       }
[17:03:16.955]                       else if (inherits(cond, "condition")) {
[17:03:16.955]                         if (!is.null(pattern)) {
[17:03:16.955]                           computeRestarts <- base::computeRestarts
[17:03:16.955]                           grepl <- base::grepl
[17:03:16.955]                           restarts <- computeRestarts(cond)
[17:03:16.955]                           for (restart in restarts) {
[17:03:16.955]                             name <- restart$name
[17:03:16.955]                             if (is.null(name)) 
[17:03:16.955]                               next
[17:03:16.955]                             if (!grepl(pattern, name)) 
[17:03:16.955]                               next
[17:03:16.955]                             invokeRestart(restart)
[17:03:16.955]                             muffled <- TRUE
[17:03:16.955]                             break
[17:03:16.955]                           }
[17:03:16.955]                         }
[17:03:16.955]                       }
[17:03:16.955]                       invisible(muffled)
[17:03:16.955]                     }
[17:03:16.955]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.955]                   }
[17:03:16.955]                 }
[17:03:16.955]             }
[17:03:16.955]         }))
[17:03:16.955]     }, error = function(ex) {
[17:03:16.955]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.955]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.955]                 ...future.rng), started = ...future.startTime, 
[17:03:16.955]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.955]             version = "1.8"), class = "FutureResult")
[17:03:16.955]     }, finally = {
[17:03:16.955]         if (!identical(...future.workdir, getwd())) 
[17:03:16.955]             setwd(...future.workdir)
[17:03:16.955]         {
[17:03:16.955]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.955]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.955]             }
[17:03:16.955]             base::options(...future.oldOptions)
[17:03:16.955]             if (.Platform$OS.type == "windows") {
[17:03:16.955]                 old_names <- names(...future.oldEnvVars)
[17:03:16.955]                 envs <- base::Sys.getenv()
[17:03:16.955]                 names <- names(envs)
[17:03:16.955]                 common <- intersect(names, old_names)
[17:03:16.955]                 added <- setdiff(names, old_names)
[17:03:16.955]                 removed <- setdiff(old_names, names)
[17:03:16.955]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.955]                   envs[common]]
[17:03:16.955]                 NAMES <- toupper(changed)
[17:03:16.955]                 args <- list()
[17:03:16.955]                 for (kk in seq_along(NAMES)) {
[17:03:16.955]                   name <- changed[[kk]]
[17:03:16.955]                   NAME <- NAMES[[kk]]
[17:03:16.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.955]                     next
[17:03:16.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.955]                 }
[17:03:16.955]                 NAMES <- toupper(added)
[17:03:16.955]                 for (kk in seq_along(NAMES)) {
[17:03:16.955]                   name <- added[[kk]]
[17:03:16.955]                   NAME <- NAMES[[kk]]
[17:03:16.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.955]                     next
[17:03:16.955]                   args[[name]] <- ""
[17:03:16.955]                 }
[17:03:16.955]                 NAMES <- toupper(removed)
[17:03:16.955]                 for (kk in seq_along(NAMES)) {
[17:03:16.955]                   name <- removed[[kk]]
[17:03:16.955]                   NAME <- NAMES[[kk]]
[17:03:16.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.955]                     next
[17:03:16.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.955]                 }
[17:03:16.955]                 if (length(args) > 0) 
[17:03:16.955]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.955]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.955]             }
[17:03:16.955]             else {
[17:03:16.955]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.955]             }
[17:03:16.955]             {
[17:03:16.955]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.955]                   0L) {
[17:03:16.955]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.955]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.955]                   base::options(opts)
[17:03:16.955]                 }
[17:03:16.955]                 {
[17:03:16.955]                   {
[17:03:16.955]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:16.955]                     NULL
[17:03:16.955]                   }
[17:03:16.955]                   options(future.plan = NULL)
[17:03:16.955]                   if (is.na(NA_character_)) 
[17:03:16.955]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.955]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.955]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.955]                     .init = FALSE)
[17:03:16.955]                 }
[17:03:16.955]             }
[17:03:16.955]         }
[17:03:16.955]     })
[17:03:16.955]     if (TRUE) {
[17:03:16.955]         base::sink(type = "output", split = FALSE)
[17:03:16.955]         if (TRUE) {
[17:03:16.955]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.955]         }
[17:03:16.955]         else {
[17:03:16.955]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.955]         }
[17:03:16.955]         base::close(...future.stdout)
[17:03:16.955]         ...future.stdout <- NULL
[17:03:16.955]     }
[17:03:16.955]     ...future.result$conditions <- ...future.conditions
[17:03:16.955]     ...future.result$finished <- base::Sys.time()
[17:03:16.955]     ...future.result
[17:03:16.955] }
[17:03:16.957] assign_globals() ...
[17:03:16.958] List of 1
[17:03:16.958]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.958]   ..$ a: int [1:3] 1 2 3
[17:03:16.958]   ..$ b: int [1:3] 3 2 1
[17:03:16.958]  - attr(*, "where")=List of 1
[17:03:16.958]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.958]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.958]  - attr(*, "resolved")= logi FALSE
[17:03:16.958]  - attr(*, "total_size")= num 128
[17:03:16.958]  - attr(*, "already-done")= logi TRUE
[17:03:16.961] - copied ‘data’ to environment
[17:03:16.961] assign_globals() ... done
[17:03:16.961] requestCore(): workers = 2
[17:03:16.964] MulticoreFuture started
[17:03:16.964] - Launch lazy future ... done
[17:03:16.964] run() for ‘MulticoreFuture’ ... done
[17:03:16.965] result() for MulticoreFuture ...
[17:03:16.965] plan(): Setting new future strategy stack:
[17:03:16.965] List of future strategies:
[17:03:16.965] 1. multisession:
[17:03:16.965]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:16.965]    - tweaked: FALSE
[17:03:16.965]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:16.971] plan(): nbrOfWorkers() = 1
[17:03:17.007] plan(): Setting new future strategy stack:
[17:03:17.007] List of future strategies:
[17:03:17.007] 1. multicore:
[17:03:17.007]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:17.007]    - tweaked: FALSE
[17:03:17.007]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.007] 2. multisession:
[17:03:17.007]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:17.007]    - tweaked: FALSE
[17:03:17.007]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.011] plan(): nbrOfWorkers() = 2
[17:03:17.012] result() for MulticoreFuture ...
[17:03:17.012] result() for MulticoreFuture ... done
[17:03:17.013] signalConditions() ...
[17:03:17.013]  - include = ‘immediateCondition’
[17:03:17.013]  - exclude = 
[17:03:17.013]  - resignal = FALSE
[17:03:17.013]  - Number of conditions: 52
[17:03:17.013] signalConditions() ... done
[17:03:17.014] result() for MulticoreFuture ... done
[17:03:17.014] result() for MulticoreFuture ...
[17:03:17.014] result() for MulticoreFuture ... done
[17:03:17.014] signalConditions() ...
[17:03:17.014]  - include = ‘immediateCondition’
[17:03:17.014]  - exclude = 
[17:03:17.014]  - resignal = FALSE
[17:03:17.015]  - Number of conditions: 52
[17:03:17.015] signalConditions() ... done
[17:03:17.015] Future state: ‘finished’
[17:03:17.015] result() for MulticoreFuture ...
[17:03:17.015] result() for MulticoreFuture ... done
[17:03:17.016] signalConditions() ...
[17:03:17.016]  - include = ‘condition’
[17:03:17.016]  - exclude = ‘immediateCondition’
[17:03:17.016]  - resignal = TRUE
[17:03:17.016]  - Number of conditions: 52
[17:03:17.016]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.972] getGlobalsAndPackages() ...
[17:03:17.016]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.972] Searching for globals...
[17:03:17.017]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.974] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:17.017]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.974] Searching for globals ... DONE
[17:03:17.017]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.974] Resolving globals: FALSE
[17:03:17.017]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.975] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:17.017]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.975] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:17.018]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.976] - globals: [1] ‘data’
[17:03:17.018]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.976] 
[17:03:17.018]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.976] getGlobalsAndPackages() ... DONE
[17:03:17.018]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.977] run() for ‘Future’ ...
[17:03:17.018]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.977] - state: ‘created’
[17:03:17.018]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.977] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:17.019]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.987] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:03:17.019]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.987] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:03:17.019]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.988]   - Field: ‘label’
[17:03:17.023]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.988]   - Field: ‘local’
[17:03:17.023]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.988]   - Field: ‘owner’
[17:03:17.023]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.988]   - Field: ‘envir’
[17:03:17.023]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.988]   - Field: ‘packages’
[17:03:17.024]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.989]   - Field: ‘gc’
[17:03:17.024]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.989]   - Field: ‘conditions’
[17:03:17.024]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.989]   - Field: ‘expr’
[17:03:17.024]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.989]   - Field: ‘uuid’
[17:03:17.024]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.989]   - Field: ‘seed’
[17:03:17.024]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.989]   - Field: ‘version’
[17:03:17.024]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.990]   - Field: ‘result’
[17:03:17.025]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.990]   - Field: ‘asynchronous’
[17:03:17.025]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.990]   - Field: ‘calls’
[17:03:17.025]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.990]   - Field: ‘globals’
[17:03:17.025]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.990]   - Field: ‘stdout’
[17:03:17.025]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.990]   - Field: ‘earlySignal’
[17:03:17.025]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.991]   - Field: ‘lazy’
[17:03:17.026]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.991]   - Field: ‘state’
[17:03:17.026]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.991] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:03:17.026]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.991] - Launch lazy future ...
[17:03:17.026]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.991] Packages needed by the future expression (n = 0): <none>
[17:03:17.026]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.992] Packages needed by future strategies (n = 0): <none>
[17:03:17.026]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.992] {
[17:03:16.992]     {
[17:03:16.992]         {
[17:03:16.992]             ...future.startTime <- base::Sys.time()
[17:03:16.992]             {
[17:03:16.992]                 {
[17:03:16.992]                   {
[17:03:16.992]                     base::local({
[17:03:16.992]                       has_future <- base::requireNamespace("future", 
[17:03:16.992]                         quietly = TRUE)
[17:03:16.992]                       if (has_future) {
[17:03:16.992]                         ns <- base::getNamespace("future")
[17:03:16.992]                         version <- ns[[".package"]][["version"]]
[17:03:16.992]                         if (is.null(version)) 
[17:03:16.992]                           version <- utils::packageVersion("future")
[17:03:16.992]                       }
[17:03:16.992]                       else {
[17:03:16.992]                         version <- NULL
[17:03:16.992]                       }
[17:03:16.992]                       if (!has_future || version < "1.8.0") {
[17:03:16.992]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:16.992]                           "", base::R.version$version.string), 
[17:03:16.992]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:16.992]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:16.992]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:16.992]                             "release", "version")], collapse = " "), 
[17:03:16.992]                           hostname = base::Sys.info()[["nodename"]])
[17:03:16.992]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:16.992]                           info)
[17:03:16.992]                         info <- base::paste(info, collapse = "; ")
[17:03:16.992]                         if (!has_future) {
[17:03:16.992]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:16.992]                             info)
[17:03:16.992]                         }
[17:03:16.992]                         else {
[17:03:16.992]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:16.992]                             info, version)
[17:03:16.992]                         }
[17:03:16.992]                         base::stop(msg)
[17:03:16.992]                       }
[17:03:16.992]                     })
[17:03:16.992]                   }
[17:03:16.992]                   ...future.strategy.old <- future::plan("list")
[17:03:16.992]                   options(future.plan = NULL)
[17:03:16.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:16.992]                 }
[17:03:16.992]                 ...future.workdir <- getwd()
[17:03:16.992]             }
[17:03:16.992]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:16.992]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:16.992]         }
[17:03:16.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:16.992]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:16.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:16.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:16.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:16.992]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:16.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:16.992]             base::names(...future.oldOptions))
[17:03:16.992]     }
[17:03:16.992]     if (FALSE) {
[17:03:16.992]     }
[17:03:16.992]     else {
[17:03:16.992]         if (TRUE) {
[17:03:16.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:16.992]                 open = "w")
[17:03:16.992]         }
[17:03:16.992]         else {
[17:03:16.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:16.992]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:16.992]         }
[17:03:16.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:16.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:16.992]             base::sink(type = "output", split = FALSE)
[17:03:16.992]             base::close(...future.stdout)
[17:03:16.992]         }, add = TRUE)
[17:03:16.992]     }
[17:03:16.992]     ...future.frame <- base::sys.nframe()
[17:03:16.992]     ...future.conditions <- base::list()
[17:03:16.992]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:16.992]     if (FALSE) {
[17:03:16.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:16.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:16.992]     }
[17:03:16.992]     ...future.result <- base::tryCatch({
[17:03:16.992]         base::withCallingHandlers({
[17:03:16.992]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:03:16.992]                 a == 2)))
[17:03:16.992]             future::FutureResult(value = ...future.value$value, 
[17:03:16.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.992]                   ...future.rng), globalenv = if (FALSE) 
[17:03:16.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:16.992]                     ...future.globalenv.names))
[17:03:16.992]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:16.992]         }, condition = base::local({
[17:03:16.992]             c <- base::c
[17:03:16.992]             inherits <- base::inherits
[17:03:16.992]             invokeRestart <- base::invokeRestart
[17:03:16.992]             length <- base::length
[17:03:16.992]             list <- base::list
[17:03:16.992]             seq.int <- base::seq.int
[17:03:16.992]             signalCondition <- base::signalCondition
[17:03:16.992]             sys.calls <- base::sys.calls
[17:03:16.992]             `[[` <- base::`[[`
[17:03:16.992]             `+` <- base::`+`
[17:03:16.992]             `<<-` <- base::`<<-`
[17:03:16.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:16.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:16.992]                   3L)]
[17:03:16.992]             }
[17:03:16.992]             function(cond) {
[17:03:16.992]                 is_error <- inherits(cond, "error")
[17:03:16.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:16.992]                   NULL)
[17:03:16.992]                 if (is_error) {
[17:03:16.992]                   sessionInformation <- function() {
[17:03:16.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:16.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:16.992]                       search = base::search(), system = base::Sys.info())
[17:03:16.992]                   }
[17:03:16.992]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:16.992]                     cond$call), session = sessionInformation(), 
[17:03:16.992]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:16.992]                   signalCondition(cond)
[17:03:16.992]                 }
[17:03:16.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:16.992]                 "immediateCondition"))) {
[17:03:16.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:16.992]                   ...future.conditions[[length(...future.conditions) + 
[17:03:16.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:16.992]                   if (TRUE && !signal) {
[17:03:16.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.992]                     {
[17:03:16.992]                       inherits <- base::inherits
[17:03:16.992]                       invokeRestart <- base::invokeRestart
[17:03:16.992]                       is.null <- base::is.null
[17:03:16.992]                       muffled <- FALSE
[17:03:16.992]                       if (inherits(cond, "message")) {
[17:03:16.992]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.992]                         if (muffled) 
[17:03:16.992]                           invokeRestart("muffleMessage")
[17:03:16.992]                       }
[17:03:16.992]                       else if (inherits(cond, "warning")) {
[17:03:16.992]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.992]                         if (muffled) 
[17:03:16.992]                           invokeRestart("muffleWarning")
[17:03:16.992]                       }
[17:03:16.992]                       else if (inherits(cond, "condition")) {
[17:03:16.992]                         if (!is.null(pattern)) {
[17:03:16.992]                           computeRestarts <- base::computeRestarts
[17:03:16.992]                           grepl <- base::grepl
[17:03:16.992]                           restarts <- computeRestarts(cond)
[17:03:16.992]                           for (restart in restarts) {
[17:03:16.992]                             name <- restart$name
[17:03:16.992]                             if (is.null(name)) 
[17:03:16.992]                               next
[17:03:16.992]                             if (!grepl(pattern, name)) 
[17:03:16.992]                               next
[17:03:16.992]                             invokeRestart(restart)
[17:03:16.992]                             muffled <- TRUE
[17:03:16.992]                             break
[17:03:16.992]                           }
[17:03:16.992]                         }
[17:03:16.992]                       }
[17:03:16.992]                       invisible(muffled)
[17:03:16.992]                     }
[17:03:16.992]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.992]                   }
[17:03:16.992]                 }
[17:03:16.992]                 else {
[17:03:16.992]                   if (TRUE) {
[17:03:16.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:16.992]                     {
[17:03:16.992]                       inherits <- base::inherits
[17:03:16.992]                       invokeRestart <- base::invokeRestart
[17:03:16.992]                       is.null <- base::is.null
[17:03:16.992]                       muffled <- FALSE
[17:03:16.992]                       if (inherits(cond, "message")) {
[17:03:16.992]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:16.992]                         if (muffled) 
[17:03:16.992]                           invokeRestart("muffleMessage")
[17:03:16.992]                       }
[17:03:16.992]                       else if (inherits(cond, "warning")) {
[17:03:16.992]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:16.992]                         if (muffled) 
[17:03:16.992]                           invokeRestart("muffleWarning")
[17:03:16.992]                       }
[17:03:16.992]                       else if (inherits(cond, "condition")) {
[17:03:16.992]                         if (!is.null(pattern)) {
[17:03:16.992]                           computeRestarts <- base::computeRestarts
[17:03:16.992]                           grepl <- base::grepl
[17:03:16.992]                           restarts <- computeRestarts(cond)
[17:03:16.992]                           for (restart in restarts) {
[17:03:16.992]                             name <- restart$name
[17:03:16.992]                             if (is.null(name)) 
[17:03:16.992]                               next
[17:03:16.992]                             if (!grepl(pattern, name)) 
[17:03:16.992]                               next
[17:03:16.992]                             invokeRestart(restart)
[17:03:16.992]                             muffled <- TRUE
[17:03:16.992]                             break
[17:03:16.992]                           }
[17:03:16.992]                         }
[17:03:16.992]                       }
[17:03:16.992]                       invisible(muffled)
[17:03:16.992]                     }
[17:03:16.992]                     muffleCondition(cond, pattern = "^muffle")
[17:03:16.992]                   }
[17:03:16.992]                 }
[17:03:16.992]             }
[17:03:16.992]         }))
[17:03:16.992]     }, error = function(ex) {
[17:03:16.992]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:16.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:16.992]                 ...future.rng), started = ...future.startTime, 
[17:03:16.992]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:16.992]             version = "1.8"), class = "FutureResult")
[17:03:16.992]     }, finally = {
[17:03:16.992]         if (!identical(...future.workdir, getwd())) 
[17:03:16.992]             setwd(...future.workdir)
[17:03:16.992]         {
[17:03:16.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:16.992]                 ...future.oldOptions$nwarnings <- NULL
[17:03:16.992]             }
[17:03:16.992]             base::options(...future.oldOptions)
[17:03:16.992]             if (.Platform$OS.type == "windows") {
[17:03:16.992]                 old_names <- names(...future.oldEnvVars)
[17:03:16.992]                 envs <- base::Sys.getenv()
[17:03:16.992]                 names <- names(envs)
[17:03:16.992]                 common <- intersect(names, old_names)
[17:03:16.992]                 added <- setdiff(names, old_names)
[17:03:16.992]                 removed <- setdiff(old_names, names)
[17:03:16.992]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:16.992]                   envs[common]]
[17:03:16.992]                 NAMES <- toupper(changed)
[17:03:16.992]                 args <- list()
[17:03:16.992]                 for (kk in seq_along(NAMES)) {
[17:03:16.992]                   name <- changed[[kk]]
[17:03:16.992]                   NAME <- NAMES[[kk]]
[17:03:16.992]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.992]                     next
[17:03:16.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.992]                 }
[17:03:16.992]                 NAMES <- toupper(added)
[17:03:16.992]                 for (kk in seq_along(NAMES)) {
[17:03:16.992]                   name <- added[[kk]]
[17:03:16.992]                   NAME <- NAMES[[kk]]
[17:03:16.992]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.992]                     next
[17:03:16.992]                   args[[name]] <- ""
[17:03:16.992]                 }
[17:03:16.992]                 NAMES <- toupper(removed)
[17:03:16.992]                 for (kk in seq_along(NAMES)) {
[17:03:16.992]                   name <- removed[[kk]]
[17:03:16.992]                   NAME <- NAMES[[kk]]
[17:03:16.992]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:16.992]                     next
[17:03:16.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:16.992]                 }
[17:03:16.992]                 if (length(args) > 0) 
[17:03:16.992]                   base::do.call(base::Sys.setenv, args = args)
[17:03:16.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:16.992]             }
[17:03:16.992]             else {
[17:03:16.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:16.992]             }
[17:03:16.992]             {
[17:03:16.992]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:16.992]                   0L) {
[17:03:16.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:16.992]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:16.992]                   base::options(opts)
[17:03:16.992]                 }
[17:03:16.992]                 {
[17:03:16.992]                   {
[17:03:16.992]                     NULL
[17:03:16.992]                     RNGkind("Mersenne-Twister")
[17:03:16.992]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:16.992]                       inherits = FALSE)
[17:03:16.992]                   }
[17:03:16.992]                   options(future.plan = NULL)
[17:03:16.992]                   if (is.na(NA_character_)) 
[17:03:16.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:16.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:16.992]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:16.992]                     .init = FALSE)
[17:03:16.992]                 }
[17:03:16.992]             }
[17:03:16.992]         }
[17:03:16.992]     })
[17:03:16.992]     if (TRUE) {
[17:03:16.992]         base::sink(type = "output", split = FALSE)
[17:03:16.992]         if (TRUE) {
[17:03:16.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:16.992]         }
[17:03:16.992]         else {
[17:03:16.992]             ...future.result["stdout"] <- base::list(NULL)
[17:03:16.992]         }
[17:03:16.992]         base::close(...future.stdout)
[17:03:16.992]         ...future.stdout <- NULL
[17:03:16.992]     }
[17:03:16.992]     ...future.result$conditions <- ...future.conditions
[17:03:16.992]     ...future.result$finished <- base::Sys.time()
[17:03:16.992]     ...future.result
[17:03:16.992] }
[17:03:17.026]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.994] assign_globals() ...
[17:03:17.027]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.994] List of 1
[17:03:16.994]  $ data:'data.frame':	3 obs. of  2 variables:
[17:03:16.994]   ..$ a: int [1:3] 1 2 3
[17:03:16.994]   ..$ b: int [1:3] 3 2 1
[17:03:16.994]  - attr(*, "where")=List of 1
[17:03:16.994]   ..$ data:<environment: R_EmptyEnv> 
[17:03:16.994]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:03:16.994]  - attr(*, "resolved")= logi FALSE
[17:03:16.994]  - attr(*, "total_size")= num 128
[17:03:16.994]  - attr(*, "already-done")= logi TRUE
[17:03:17.027]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.999] - copied ‘data’ to environment
[17:03:17.027]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:16.999] assign_globals() ... done
[17:03:17.027]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.000] plan(): Setting new future strategy stack:
[17:03:17.027]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.000] List of future strategies:
[17:03:17.000] 1. sequential:
[17:03:17.000]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:17.000]    - tweaked: FALSE
[17:03:17.000]    - call: NULL
[17:03:17.027]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.000] plan(): nbrOfWorkers() = 1
[17:03:17.028]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.002] plan(): Setting new future strategy stack:
[17:03:17.028]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.002] List of future strategies:
[17:03:17.002] 1. multisession:
[17:03:17.002]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:17.002]    - tweaked: FALSE
[17:03:17.002]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.028]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.006] plan(): nbrOfWorkers() = 1
[17:03:17.028]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.006] SequentialFuture started (and completed)
[17:03:17.028]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.006] - Launch lazy future ... done
[17:03:17.028]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:03:17.007] run() for ‘SequentialFuture’ ... done
[17:03:17.029] signalConditions() ... done
- plan(list('multicore', 'multisession')) ... DONE
- plan(list('multisession', 'sequential')) ...
[17:03:17.029] plan(): Setting new future strategy stack:
[17:03:17.029] List of future strategies:
[17:03:17.029] 1. multisession:
[17:03:17.029]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:17.029]    - tweaked: FALSE
[17:03:17.029]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.029] 2. sequential:
[17:03:17.029]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:17.029]    - tweaked: FALSE
[17:03:17.029]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.030] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:17.030] multisession:
[17:03:17.030] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:17.030] - tweaked: FALSE
[17:03:17.030] - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.034] getGlobalsAndPackages() ...
[17:03:17.034] Not searching for globals
[17:03:17.035] - globals: [0] <none>
[17:03:17.035] getGlobalsAndPackages() ... DONE
[17:03:17.035] [local output] makeClusterPSOCK() ...
[17:03:17.038] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:17.039] [local output] Base port: 11803
[17:03:17.039] [local output] Getting setup options for 2 cluster nodes ...
[17:03:17.039] [local output]  - Node 1 of 2 ...
[17:03:17.040] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:17.040] [local output] Rscript port: 11803

[17:03:17.041] [local output]  - Node 2 of 2 ...
[17:03:17.041] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:17.042] [local output] Rscript port: 11803

[17:03:17.042] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:17.042] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:17.042] [local output] Setting up PSOCK nodes in parallel
[17:03:17.042] List of 36
[17:03:17.042]  $ worker          : chr "localhost"
[17:03:17.042]   ..- attr(*, "localhost")= logi TRUE
[17:03:17.042]  $ master          : chr "localhost"
[17:03:17.042]  $ port            : int 11803
[17:03:17.042]  $ connectTimeout  : num 120
[17:03:17.042]  $ timeout         : num 2592000
[17:03:17.042]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:17.042]  $ homogeneous     : logi TRUE
[17:03:17.042]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:17.042]  $ rscript_envs    : NULL
[17:03:17.042]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:17.042]  $ rscript_startup : NULL
[17:03:17.042]  $ rscript_sh      : chr "sh"
[17:03:17.042]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:17.042]  $ methods         : logi TRUE
[17:03:17.042]  $ socketOptions   : chr "no-delay"
[17:03:17.042]  $ useXDR          : logi FALSE
[17:03:17.042]  $ outfile         : chr "/dev/null"
[17:03:17.042]  $ renice          : int NA
[17:03:17.042]  $ rshcmd          : NULL
[17:03:17.042]  $ user            : chr(0) 
[17:03:17.042]  $ revtunnel       : logi FALSE
[17:03:17.042]  $ rshlogfile      : NULL
[17:03:17.042]  $ rshopts         : chr(0) 
[17:03:17.042]  $ rank            : int 1
[17:03:17.042]  $ manual          : logi FALSE
[17:03:17.042]  $ dryrun          : logi FALSE
[17:03:17.042]  $ quiet           : logi FALSE
[17:03:17.042]  $ setup_strategy  : chr "parallel"
[17:03:17.042]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:17.042]  $ pidfile         : chr "/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9141c80756d.pid"
[17:03:17.042]  $ rshcmd_label    : NULL
[17:03:17.042]  $ rsh_call        : NULL
[17:03:17.042]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:17.042]  $ localMachine    : logi TRUE
[17:03:17.042]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:17.042]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:17.042]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:17.042]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:17.042]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:17.042]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:17.042]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:17.042]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:17.042]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:17.042]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:17.042]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:17.042]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:17.042]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:17.042]  $ arguments       :List of 28
[17:03:17.042]   ..$ worker          : chr "localhost"
[17:03:17.042]   ..$ master          : NULL
[17:03:17.042]   ..$ port            : int 11803
[17:03:17.042]   ..$ connectTimeout  : num 120
[17:03:17.042]   ..$ timeout         : num 2592000
[17:03:17.042]   ..$ rscript         : NULL
[17:03:17.042]   ..$ homogeneous     : NULL
[17:03:17.042]   ..$ rscript_args    : NULL
[17:03:17.042]   ..$ rscript_envs    : NULL
[17:03:17.042]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:17.042]   ..$ rscript_startup : NULL
[17:03:17.042]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:17.042]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:17.042]   ..$ methods         : logi TRUE
[17:03:17.042]   ..$ socketOptions   : chr "no-delay"
[17:03:17.042]   ..$ useXDR          : logi FALSE
[17:03:17.042]   ..$ outfile         : chr "/dev/null"
[17:03:17.042]   ..$ renice          : int NA
[17:03:17.042]   ..$ rshcmd          : NULL
[17:03:17.042]   ..$ user            : NULL
[17:03:17.042]   ..$ revtunnel       : logi NA
[17:03:17.042]   ..$ rshlogfile      : NULL
[17:03:17.042]   ..$ rshopts         : NULL
[17:03:17.042]   ..$ rank            : int 1
[17:03:17.042]   ..$ manual          : logi FALSE
[17:03:17.042]   ..$ dryrun          : logi FALSE
[17:03:17.042]   ..$ quiet           : logi FALSE
[17:03:17.042]   ..$ setup_strategy  : chr "parallel"
[17:03:17.042]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:17.063] [local output] System call to launch all workers:
[17:03:17.063] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9141c80756d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11803 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:17.063] [local output] Starting PSOCK main server
[17:03:17.064] [local output] Workers launched
[17:03:17.064] [local output] Waiting for workers to connect back
[17:03:17.065]  - [local output] 0 workers out of 2 ready
[17:03:17.309]  - [local output] 0 workers out of 2 ready
[17:03:17.310]  - [local output] 1 workers out of 2 ready
[17:03:17.310]  - [local output] 1 workers out of 2 ready
[17:03:17.311]  - [local output] 2 workers out of 2 ready
[17:03:17.311] [local output] Launching of workers completed
[17:03:17.311] [local output] Collecting session information from workers
[17:03:17.312] [local output]  - Worker #1 of 2
[17:03:17.312] [local output]  - Worker #2 of 2
[17:03:17.312] [local output] makeClusterPSOCK() ... done
[17:03:17.323] Packages needed by the future expression (n = 0): <none>
[17:03:17.323] Packages needed by future strategies (n = 1): ‘future’
[17:03:17.324] {
[17:03:17.324]     {
[17:03:17.324]         {
[17:03:17.324]             ...future.startTime <- base::Sys.time()
[17:03:17.324]             {
[17:03:17.324]                 {
[17:03:17.324]                   {
[17:03:17.324]                     {
[17:03:17.324]                       {
[17:03:17.324]                         base::local({
[17:03:17.324]                           has_future <- base::requireNamespace("future", 
[17:03:17.324]                             quietly = TRUE)
[17:03:17.324]                           if (has_future) {
[17:03:17.324]                             ns <- base::getNamespace("future")
[17:03:17.324]                             version <- ns[[".package"]][["version"]]
[17:03:17.324]                             if (is.null(version)) 
[17:03:17.324]                               version <- utils::packageVersion("future")
[17:03:17.324]                           }
[17:03:17.324]                           else {
[17:03:17.324]                             version <- NULL
[17:03:17.324]                           }
[17:03:17.324]                           if (!has_future || version < "1.8.0") {
[17:03:17.324]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:17.324]                               "", base::R.version$version.string), 
[17:03:17.324]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:17.324]                                 base::R.version$platform, 8 * 
[17:03:17.324]                                   base::.Machine$sizeof.pointer), 
[17:03:17.324]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:17.324]                                 "release", "version")], collapse = " "), 
[17:03:17.324]                               hostname = base::Sys.info()[["nodename"]])
[17:03:17.324]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:17.324]                               info)
[17:03:17.324]                             info <- base::paste(info, collapse = "; ")
[17:03:17.324]                             if (!has_future) {
[17:03:17.324]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:17.324]                                 info)
[17:03:17.324]                             }
[17:03:17.324]                             else {
[17:03:17.324]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:17.324]                                 info, version)
[17:03:17.324]                             }
[17:03:17.324]                             base::stop(msg)
[17:03:17.324]                           }
[17:03:17.324]                         })
[17:03:17.324]                       }
[17:03:17.324]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:17.324]                       base::options(mc.cores = 1L)
[17:03:17.324]                     }
[17:03:17.324]                     base::local({
[17:03:17.324]                       for (pkg in "future") {
[17:03:17.324]                         base::loadNamespace(pkg)
[17:03:17.324]                         base::library(pkg, character.only = TRUE)
[17:03:17.324]                       }
[17:03:17.324]                     })
[17:03:17.324]                   }
[17:03:17.324]                   ...future.strategy.old <- future::plan("list")
[17:03:17.324]                   options(future.plan = NULL)
[17:03:17.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.324]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:17.324]                   {
[17:03:17.324]                     future <- SequentialFuture(..., envir = envir)
[17:03:17.324]                     if (!future$lazy) 
[17:03:17.324]                       future <- run(future)
[17:03:17.324]                     invisible(future)
[17:03:17.324]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:17.324]                 }
[17:03:17.324]                 ...future.workdir <- getwd()
[17:03:17.324]             }
[17:03:17.324]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:17.324]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:17.324]         }
[17:03:17.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:17.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:17.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:17.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:17.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:17.324]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:17.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:17.324]             base::names(...future.oldOptions))
[17:03:17.324]     }
[17:03:17.324]     if (FALSE) {
[17:03:17.324]     }
[17:03:17.324]     else {
[17:03:17.324]         if (TRUE) {
[17:03:17.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:17.324]                 open = "w")
[17:03:17.324]         }
[17:03:17.324]         else {
[17:03:17.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:17.324]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:17.324]         }
[17:03:17.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:17.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:17.324]             base::sink(type = "output", split = FALSE)
[17:03:17.324]             base::close(...future.stdout)
[17:03:17.324]         }, add = TRUE)
[17:03:17.324]     }
[17:03:17.324]     ...future.frame <- base::sys.nframe()
[17:03:17.324]     ...future.conditions <- base::list()
[17:03:17.324]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:17.324]     if (FALSE) {
[17:03:17.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:17.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:17.324]     }
[17:03:17.324]     ...future.result <- base::tryCatch({
[17:03:17.324]         base::withCallingHandlers({
[17:03:17.324]             ...future.value <- base::withVisible(base::local({
[17:03:17.324]                 ...future.makeSendCondition <- base::local({
[17:03:17.324]                   sendCondition <- NULL
[17:03:17.324]                   function(frame = 1L) {
[17:03:17.324]                     if (is.function(sendCondition)) 
[17:03:17.324]                       return(sendCondition)
[17:03:17.324]                     ns <- getNamespace("parallel")
[17:03:17.324]                     if (exists("sendData", mode = "function", 
[17:03:17.324]                       envir = ns)) {
[17:03:17.324]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:17.324]                         envir = ns)
[17:03:17.324]                       envir <- sys.frame(frame)
[17:03:17.324]                       master <- NULL
[17:03:17.324]                       while (!identical(envir, .GlobalEnv) && 
[17:03:17.324]                         !identical(envir, emptyenv())) {
[17:03:17.324]                         if (exists("master", mode = "list", envir = envir, 
[17:03:17.324]                           inherits = FALSE)) {
[17:03:17.324]                           master <- get("master", mode = "list", 
[17:03:17.324]                             envir = envir, inherits = FALSE)
[17:03:17.324]                           if (inherits(master, c("SOCKnode", 
[17:03:17.324]                             "SOCK0node"))) {
[17:03:17.324]                             sendCondition <<- function(cond) {
[17:03:17.324]                               data <- list(type = "VALUE", value = cond, 
[17:03:17.324]                                 success = TRUE)
[17:03:17.324]                               parallel_sendData(master, data)
[17:03:17.324]                             }
[17:03:17.324]                             return(sendCondition)
[17:03:17.324]                           }
[17:03:17.324]                         }
[17:03:17.324]                         frame <- frame + 1L
[17:03:17.324]                         envir <- sys.frame(frame)
[17:03:17.324]                       }
[17:03:17.324]                     }
[17:03:17.324]                     sendCondition <<- function(cond) NULL
[17:03:17.324]                   }
[17:03:17.324]                 })
[17:03:17.324]                 withCallingHandlers({
[17:03:17.324]                   NA
[17:03:17.324]                 }, immediateCondition = function(cond) {
[17:03:17.324]                   sendCondition <- ...future.makeSendCondition()
[17:03:17.324]                   sendCondition(cond)
[17:03:17.324]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.324]                   {
[17:03:17.324]                     inherits <- base::inherits
[17:03:17.324]                     invokeRestart <- base::invokeRestart
[17:03:17.324]                     is.null <- base::is.null
[17:03:17.324]                     muffled <- FALSE
[17:03:17.324]                     if (inherits(cond, "message")) {
[17:03:17.324]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:17.324]                       if (muffled) 
[17:03:17.324]                         invokeRestart("muffleMessage")
[17:03:17.324]                     }
[17:03:17.324]                     else if (inherits(cond, "warning")) {
[17:03:17.324]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:17.324]                       if (muffled) 
[17:03:17.324]                         invokeRestart("muffleWarning")
[17:03:17.324]                     }
[17:03:17.324]                     else if (inherits(cond, "condition")) {
[17:03:17.324]                       if (!is.null(pattern)) {
[17:03:17.324]                         computeRestarts <- base::computeRestarts
[17:03:17.324]                         grepl <- base::grepl
[17:03:17.324]                         restarts <- computeRestarts(cond)
[17:03:17.324]                         for (restart in restarts) {
[17:03:17.324]                           name <- restart$name
[17:03:17.324]                           if (is.null(name)) 
[17:03:17.324]                             next
[17:03:17.324]                           if (!grepl(pattern, name)) 
[17:03:17.324]                             next
[17:03:17.324]                           invokeRestart(restart)
[17:03:17.324]                           muffled <- TRUE
[17:03:17.324]                           break
[17:03:17.324]                         }
[17:03:17.324]                       }
[17:03:17.324]                     }
[17:03:17.324]                     invisible(muffled)
[17:03:17.324]                   }
[17:03:17.324]                   muffleCondition(cond)
[17:03:17.324]                 })
[17:03:17.324]             }))
[17:03:17.324]             future::FutureResult(value = ...future.value$value, 
[17:03:17.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.324]                   ...future.rng), globalenv = if (FALSE) 
[17:03:17.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:17.324]                     ...future.globalenv.names))
[17:03:17.324]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:17.324]         }, condition = base::local({
[17:03:17.324]             c <- base::c
[17:03:17.324]             inherits <- base::inherits
[17:03:17.324]             invokeRestart <- base::invokeRestart
[17:03:17.324]             length <- base::length
[17:03:17.324]             list <- base::list
[17:03:17.324]             seq.int <- base::seq.int
[17:03:17.324]             signalCondition <- base::signalCondition
[17:03:17.324]             sys.calls <- base::sys.calls
[17:03:17.324]             `[[` <- base::`[[`
[17:03:17.324]             `+` <- base::`+`
[17:03:17.324]             `<<-` <- base::`<<-`
[17:03:17.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:17.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:17.324]                   3L)]
[17:03:17.324]             }
[17:03:17.324]             function(cond) {
[17:03:17.324]                 is_error <- inherits(cond, "error")
[17:03:17.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:17.324]                   NULL)
[17:03:17.324]                 if (is_error) {
[17:03:17.324]                   sessionInformation <- function() {
[17:03:17.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:17.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:17.324]                       search = base::search(), system = base::Sys.info())
[17:03:17.324]                   }
[17:03:17.324]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:17.324]                     cond$call), session = sessionInformation(), 
[17:03:17.324]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:17.324]                   signalCondition(cond)
[17:03:17.324]                 }
[17:03:17.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:17.324]                 "immediateCondition"))) {
[17:03:17.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:17.324]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:17.324]                   if (TRUE && !signal) {
[17:03:17.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.324]                     {
[17:03:17.324]                       inherits <- base::inherits
[17:03:17.324]                       invokeRestart <- base::invokeRestart
[17:03:17.324]                       is.null <- base::is.null
[17:03:17.324]                       muffled <- FALSE
[17:03:17.324]                       if (inherits(cond, "message")) {
[17:03:17.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.324]                         if (muffled) 
[17:03:17.324]                           invokeRestart("muffleMessage")
[17:03:17.324]                       }
[17:03:17.324]                       else if (inherits(cond, "warning")) {
[17:03:17.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.324]                         if (muffled) 
[17:03:17.324]                           invokeRestart("muffleWarning")
[17:03:17.324]                       }
[17:03:17.324]                       else if (inherits(cond, "condition")) {
[17:03:17.324]                         if (!is.null(pattern)) {
[17:03:17.324]                           computeRestarts <- base::computeRestarts
[17:03:17.324]                           grepl <- base::grepl
[17:03:17.324]                           restarts <- computeRestarts(cond)
[17:03:17.324]                           for (restart in restarts) {
[17:03:17.324]                             name <- restart$name
[17:03:17.324]                             if (is.null(name)) 
[17:03:17.324]                               next
[17:03:17.324]                             if (!grepl(pattern, name)) 
[17:03:17.324]                               next
[17:03:17.324]                             invokeRestart(restart)
[17:03:17.324]                             muffled <- TRUE
[17:03:17.324]                             break
[17:03:17.324]                           }
[17:03:17.324]                         }
[17:03:17.324]                       }
[17:03:17.324]                       invisible(muffled)
[17:03:17.324]                     }
[17:03:17.324]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.324]                   }
[17:03:17.324]                 }
[17:03:17.324]                 else {
[17:03:17.324]                   if (TRUE) {
[17:03:17.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.324]                     {
[17:03:17.324]                       inherits <- base::inherits
[17:03:17.324]                       invokeRestart <- base::invokeRestart
[17:03:17.324]                       is.null <- base::is.null
[17:03:17.324]                       muffled <- FALSE
[17:03:17.324]                       if (inherits(cond, "message")) {
[17:03:17.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.324]                         if (muffled) 
[17:03:17.324]                           invokeRestart("muffleMessage")
[17:03:17.324]                       }
[17:03:17.324]                       else if (inherits(cond, "warning")) {
[17:03:17.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.324]                         if (muffled) 
[17:03:17.324]                           invokeRestart("muffleWarning")
[17:03:17.324]                       }
[17:03:17.324]                       else if (inherits(cond, "condition")) {
[17:03:17.324]                         if (!is.null(pattern)) {
[17:03:17.324]                           computeRestarts <- base::computeRestarts
[17:03:17.324]                           grepl <- base::grepl
[17:03:17.324]                           restarts <- computeRestarts(cond)
[17:03:17.324]                           for (restart in restarts) {
[17:03:17.324]                             name <- restart$name
[17:03:17.324]                             if (is.null(name)) 
[17:03:17.324]                               next
[17:03:17.324]                             if (!grepl(pattern, name)) 
[17:03:17.324]                               next
[17:03:17.324]                             invokeRestart(restart)
[17:03:17.324]                             muffled <- TRUE
[17:03:17.324]                             break
[17:03:17.324]                           }
[17:03:17.324]                         }
[17:03:17.324]                       }
[17:03:17.324]                       invisible(muffled)
[17:03:17.324]                     }
[17:03:17.324]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.324]                   }
[17:03:17.324]                 }
[17:03:17.324]             }
[17:03:17.324]         }))
[17:03:17.324]     }, error = function(ex) {
[17:03:17.324]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:17.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.324]                 ...future.rng), started = ...future.startTime, 
[17:03:17.324]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:17.324]             version = "1.8"), class = "FutureResult")
[17:03:17.324]     }, finally = {
[17:03:17.324]         if (!identical(...future.workdir, getwd())) 
[17:03:17.324]             setwd(...future.workdir)
[17:03:17.324]         {
[17:03:17.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:17.324]                 ...future.oldOptions$nwarnings <- NULL
[17:03:17.324]             }
[17:03:17.324]             base::options(...future.oldOptions)
[17:03:17.324]             if (.Platform$OS.type == "windows") {
[17:03:17.324]                 old_names <- names(...future.oldEnvVars)
[17:03:17.324]                 envs <- base::Sys.getenv()
[17:03:17.324]                 names <- names(envs)
[17:03:17.324]                 common <- intersect(names, old_names)
[17:03:17.324]                 added <- setdiff(names, old_names)
[17:03:17.324]                 removed <- setdiff(old_names, names)
[17:03:17.324]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:17.324]                   envs[common]]
[17:03:17.324]                 NAMES <- toupper(changed)
[17:03:17.324]                 args <- list()
[17:03:17.324]                 for (kk in seq_along(NAMES)) {
[17:03:17.324]                   name <- changed[[kk]]
[17:03:17.324]                   NAME <- NAMES[[kk]]
[17:03:17.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.324]                     next
[17:03:17.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.324]                 }
[17:03:17.324]                 NAMES <- toupper(added)
[17:03:17.324]                 for (kk in seq_along(NAMES)) {
[17:03:17.324]                   name <- added[[kk]]
[17:03:17.324]                   NAME <- NAMES[[kk]]
[17:03:17.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.324]                     next
[17:03:17.324]                   args[[name]] <- ""
[17:03:17.324]                 }
[17:03:17.324]                 NAMES <- toupper(removed)
[17:03:17.324]                 for (kk in seq_along(NAMES)) {
[17:03:17.324]                   name <- removed[[kk]]
[17:03:17.324]                   NAME <- NAMES[[kk]]
[17:03:17.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.324]                     next
[17:03:17.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.324]                 }
[17:03:17.324]                 if (length(args) > 0) 
[17:03:17.324]                   base::do.call(base::Sys.setenv, args = args)
[17:03:17.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:17.324]             }
[17:03:17.324]             else {
[17:03:17.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:17.324]             }
[17:03:17.324]             {
[17:03:17.324]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:17.324]                   0L) {
[17:03:17.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:17.324]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:17.324]                   base::options(opts)
[17:03:17.324]                 }
[17:03:17.324]                 {
[17:03:17.324]                   {
[17:03:17.324]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:17.324]                     NULL
[17:03:17.324]                   }
[17:03:17.324]                   options(future.plan = NULL)
[17:03:17.324]                   if (is.na(NA_character_)) 
[17:03:17.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:17.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:17.324]                     .init = FALSE)
[17:03:17.324]                 }
[17:03:17.324]             }
[17:03:17.324]         }
[17:03:17.324]     })
[17:03:17.324]     if (TRUE) {
[17:03:17.324]         base::sink(type = "output", split = FALSE)
[17:03:17.324]         if (TRUE) {
[17:03:17.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:17.324]         }
[17:03:17.324]         else {
[17:03:17.324]             ...future.result["stdout"] <- base::list(NULL)
[17:03:17.324]         }
[17:03:17.324]         base::close(...future.stdout)
[17:03:17.324]         ...future.stdout <- NULL
[17:03:17.324]     }
[17:03:17.324]     ...future.result$conditions <- ...future.conditions
[17:03:17.324]     ...future.result$finished <- base::Sys.time()
[17:03:17.324]     ...future.result
[17:03:17.324] }
[17:03:17.376] MultisessionFuture started
[17:03:17.376] result() for ClusterFuture ...
[17:03:17.376] receiveMessageFromWorker() for ClusterFuture ...
[17:03:17.376] - Validating connection of MultisessionFuture
[17:03:17.410] - received message: FutureResult
[17:03:17.411] - Received FutureResult
[17:03:17.411] - Erased future from FutureRegistry
[17:03:17.411] result() for ClusterFuture ...
[17:03:17.411] - result already collected: FutureResult
[17:03:17.411] result() for ClusterFuture ... done
[17:03:17.411] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:17.412] result() for ClusterFuture ... done
[17:03:17.412] result() for ClusterFuture ...
[17:03:17.412] - result already collected: FutureResult
[17:03:17.412] result() for ClusterFuture ... done
[17:03:17.412] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:17.416] plan(): nbrOfWorkers() = 2
[17:03:17.416] getGlobalsAndPackages() ...
[17:03:17.416] Searching for globals...
[17:03:17.434] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:17.434] Searching for globals ... DONE
[17:03:17.434] Resolving globals: FALSE
[17:03:17.435] The total size of the 2 globals is 55.46 KiB (56792 bytes)
[17:03:17.436] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.34 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:17.436] - globals: [2] ‘nested’, ‘strategy2’
[17:03:17.436] - packages: [1] ‘future’
[17:03:17.436] getGlobalsAndPackages() ... DONE
[17:03:17.437] run() for ‘Future’ ...
[17:03:17.437] - state: ‘created’
[17:03:17.437] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:17.457] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:17.458] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:17.458]   - Field: ‘node’
[17:03:17.458]   - Field: ‘label’
[17:03:17.458]   - Field: ‘local’
[17:03:17.458]   - Field: ‘owner’
[17:03:17.458]   - Field: ‘envir’
[17:03:17.458]   - Field: ‘workers’
[17:03:17.458]   - Field: ‘packages’
[17:03:17.458]   - Field: ‘gc’
[17:03:17.458]   - Field: ‘conditions’
[17:03:17.458]   - Field: ‘persistent’
[17:03:17.459]   - Field: ‘expr’
[17:03:17.459]   - Field: ‘uuid’
[17:03:17.459]   - Field: ‘seed’
[17:03:17.459]   - Field: ‘version’
[17:03:17.459]   - Field: ‘result’
[17:03:17.459]   - Field: ‘asynchronous’
[17:03:17.459]   - Field: ‘calls’
[17:03:17.459]   - Field: ‘globals’
[17:03:17.459]   - Field: ‘stdout’
[17:03:17.459]   - Field: ‘earlySignal’
[17:03:17.459]   - Field: ‘lazy’
[17:03:17.460]   - Field: ‘state’
[17:03:17.460] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:17.460] - Launch lazy future ...
[17:03:17.460] Packages needed by the future expression (n = 1): ‘future’
[17:03:17.460] Packages needed by future strategies (n = 1): ‘future’
[17:03:17.461] {
[17:03:17.461]     {
[17:03:17.461]         {
[17:03:17.461]             ...future.startTime <- base::Sys.time()
[17:03:17.461]             {
[17:03:17.461]                 {
[17:03:17.461]                   {
[17:03:17.461]                     {
[17:03:17.461]                       {
[17:03:17.461]                         base::local({
[17:03:17.461]                           has_future <- base::requireNamespace("future", 
[17:03:17.461]                             quietly = TRUE)
[17:03:17.461]                           if (has_future) {
[17:03:17.461]                             ns <- base::getNamespace("future")
[17:03:17.461]                             version <- ns[[".package"]][["version"]]
[17:03:17.461]                             if (is.null(version)) 
[17:03:17.461]                               version <- utils::packageVersion("future")
[17:03:17.461]                           }
[17:03:17.461]                           else {
[17:03:17.461]                             version <- NULL
[17:03:17.461]                           }
[17:03:17.461]                           if (!has_future || version < "1.8.0") {
[17:03:17.461]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:17.461]                               "", base::R.version$version.string), 
[17:03:17.461]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:17.461]                                 base::R.version$platform, 8 * 
[17:03:17.461]                                   base::.Machine$sizeof.pointer), 
[17:03:17.461]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:17.461]                                 "release", "version")], collapse = " "), 
[17:03:17.461]                               hostname = base::Sys.info()[["nodename"]])
[17:03:17.461]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:17.461]                               info)
[17:03:17.461]                             info <- base::paste(info, collapse = "; ")
[17:03:17.461]                             if (!has_future) {
[17:03:17.461]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:17.461]                                 info)
[17:03:17.461]                             }
[17:03:17.461]                             else {
[17:03:17.461]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:17.461]                                 info, version)
[17:03:17.461]                             }
[17:03:17.461]                             base::stop(msg)
[17:03:17.461]                           }
[17:03:17.461]                         })
[17:03:17.461]                       }
[17:03:17.461]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:17.461]                       base::options(mc.cores = 1L)
[17:03:17.461]                     }
[17:03:17.461]                     base::local({
[17:03:17.461]                       for (pkg in "future") {
[17:03:17.461]                         base::loadNamespace(pkg)
[17:03:17.461]                         base::library(pkg, character.only = TRUE)
[17:03:17.461]                       }
[17:03:17.461]                     })
[17:03:17.461]                   }
[17:03:17.461]                   ...future.strategy.old <- future::plan("list")
[17:03:17.461]                   options(future.plan = NULL)
[17:03:17.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.461]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:17.461]                   {
[17:03:17.461]                     future <- SequentialFuture(..., envir = envir)
[17:03:17.461]                     if (!future$lazy) 
[17:03:17.461]                       future <- run(future)
[17:03:17.461]                     invisible(future)
[17:03:17.461]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:17.461]                 }
[17:03:17.461]                 ...future.workdir <- getwd()
[17:03:17.461]             }
[17:03:17.461]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:17.461]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:17.461]         }
[17:03:17.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:17.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:17.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:17.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:17.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:17.461]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:17.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:17.461]             base::names(...future.oldOptions))
[17:03:17.461]     }
[17:03:17.461]     if (FALSE) {
[17:03:17.461]     }
[17:03:17.461]     else {
[17:03:17.461]         if (TRUE) {
[17:03:17.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:17.461]                 open = "w")
[17:03:17.461]         }
[17:03:17.461]         else {
[17:03:17.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:17.461]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:17.461]         }
[17:03:17.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:17.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:17.461]             base::sink(type = "output", split = FALSE)
[17:03:17.461]             base::close(...future.stdout)
[17:03:17.461]         }, add = TRUE)
[17:03:17.461]     }
[17:03:17.461]     ...future.frame <- base::sys.nframe()
[17:03:17.461]     ...future.conditions <- base::list()
[17:03:17.461]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:17.461]     if (FALSE) {
[17:03:17.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:17.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:17.461]     }
[17:03:17.461]     ...future.result <- base::tryCatch({
[17:03:17.461]         base::withCallingHandlers({
[17:03:17.461]             ...future.value <- base::withVisible(base::local({
[17:03:17.461]                 ...future.makeSendCondition <- base::local({
[17:03:17.461]                   sendCondition <- NULL
[17:03:17.461]                   function(frame = 1L) {
[17:03:17.461]                     if (is.function(sendCondition)) 
[17:03:17.461]                       return(sendCondition)
[17:03:17.461]                     ns <- getNamespace("parallel")
[17:03:17.461]                     if (exists("sendData", mode = "function", 
[17:03:17.461]                       envir = ns)) {
[17:03:17.461]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:17.461]                         envir = ns)
[17:03:17.461]                       envir <- sys.frame(frame)
[17:03:17.461]                       master <- NULL
[17:03:17.461]                       while (!identical(envir, .GlobalEnv) && 
[17:03:17.461]                         !identical(envir, emptyenv())) {
[17:03:17.461]                         if (exists("master", mode = "list", envir = envir, 
[17:03:17.461]                           inherits = FALSE)) {
[17:03:17.461]                           master <- get("master", mode = "list", 
[17:03:17.461]                             envir = envir, inherits = FALSE)
[17:03:17.461]                           if (inherits(master, c("SOCKnode", 
[17:03:17.461]                             "SOCK0node"))) {
[17:03:17.461]                             sendCondition <<- function(cond) {
[17:03:17.461]                               data <- list(type = "VALUE", value = cond, 
[17:03:17.461]                                 success = TRUE)
[17:03:17.461]                               parallel_sendData(master, data)
[17:03:17.461]                             }
[17:03:17.461]                             return(sendCondition)
[17:03:17.461]                           }
[17:03:17.461]                         }
[17:03:17.461]                         frame <- frame + 1L
[17:03:17.461]                         envir <- sys.frame(frame)
[17:03:17.461]                       }
[17:03:17.461]                     }
[17:03:17.461]                     sendCondition <<- function(cond) NULL
[17:03:17.461]                   }
[17:03:17.461]                 })
[17:03:17.461]                 withCallingHandlers({
[17:03:17.461]                   {
[17:03:17.461]                     a <- 1L
[17:03:17.461]                     plan_a <- unclass(future::plan("list"))
[17:03:17.461]                     nested_a <- nested[-1]
[17:03:17.461]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:17.461]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:17.461]                       strategy2))
[17:03:17.461]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:17.461]                       "init") <- NULL
[17:03:17.461]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:17.461]                       "init") <- NULL
[17:03:17.461]                     stopifnot(all.equal(plan_a, nested_a))
[17:03:17.461]                     y %<-% {
[17:03:17.461]                       b <- 2L
[17:03:17.461]                       plan_b <- future::plan("list")
[17:03:17.461]                       nested_b <- nested_a[-1]
[17:03:17.461]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:17.461]                         1L, inherits(plan_b[[1]], "future"), 
[17:03:17.461]                         inherits(future::plan("next"), "sequential"))
[17:03:17.461]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:17.461]                         b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:17.461]                     }
[17:03:17.461]                     y
[17:03:17.461]                   }
[17:03:17.461]                 }, immediateCondition = function(cond) {
[17:03:17.461]                   sendCondition <- ...future.makeSendCondition()
[17:03:17.461]                   sendCondition(cond)
[17:03:17.461]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.461]                   {
[17:03:17.461]                     inherits <- base::inherits
[17:03:17.461]                     invokeRestart <- base::invokeRestart
[17:03:17.461]                     is.null <- base::is.null
[17:03:17.461]                     muffled <- FALSE
[17:03:17.461]                     if (inherits(cond, "message")) {
[17:03:17.461]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:17.461]                       if (muffled) 
[17:03:17.461]                         invokeRestart("muffleMessage")
[17:03:17.461]                     }
[17:03:17.461]                     else if (inherits(cond, "warning")) {
[17:03:17.461]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:17.461]                       if (muffled) 
[17:03:17.461]                         invokeRestart("muffleWarning")
[17:03:17.461]                     }
[17:03:17.461]                     else if (inherits(cond, "condition")) {
[17:03:17.461]                       if (!is.null(pattern)) {
[17:03:17.461]                         computeRestarts <- base::computeRestarts
[17:03:17.461]                         grepl <- base::grepl
[17:03:17.461]                         restarts <- computeRestarts(cond)
[17:03:17.461]                         for (restart in restarts) {
[17:03:17.461]                           name <- restart$name
[17:03:17.461]                           if (is.null(name)) 
[17:03:17.461]                             next
[17:03:17.461]                           if (!grepl(pattern, name)) 
[17:03:17.461]                             next
[17:03:17.461]                           invokeRestart(restart)
[17:03:17.461]                           muffled <- TRUE
[17:03:17.461]                           break
[17:03:17.461]                         }
[17:03:17.461]                       }
[17:03:17.461]                     }
[17:03:17.461]                     invisible(muffled)
[17:03:17.461]                   }
[17:03:17.461]                   muffleCondition(cond)
[17:03:17.461]                 })
[17:03:17.461]             }))
[17:03:17.461]             future::FutureResult(value = ...future.value$value, 
[17:03:17.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.461]                   ...future.rng), globalenv = if (FALSE) 
[17:03:17.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:17.461]                     ...future.globalenv.names))
[17:03:17.461]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:17.461]         }, condition = base::local({
[17:03:17.461]             c <- base::c
[17:03:17.461]             inherits <- base::inherits
[17:03:17.461]             invokeRestart <- base::invokeRestart
[17:03:17.461]             length <- base::length
[17:03:17.461]             list <- base::list
[17:03:17.461]             seq.int <- base::seq.int
[17:03:17.461]             signalCondition <- base::signalCondition
[17:03:17.461]             sys.calls <- base::sys.calls
[17:03:17.461]             `[[` <- base::`[[`
[17:03:17.461]             `+` <- base::`+`
[17:03:17.461]             `<<-` <- base::`<<-`
[17:03:17.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:17.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:17.461]                   3L)]
[17:03:17.461]             }
[17:03:17.461]             function(cond) {
[17:03:17.461]                 is_error <- inherits(cond, "error")
[17:03:17.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:17.461]                   NULL)
[17:03:17.461]                 if (is_error) {
[17:03:17.461]                   sessionInformation <- function() {
[17:03:17.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:17.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:17.461]                       search = base::search(), system = base::Sys.info())
[17:03:17.461]                   }
[17:03:17.461]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:17.461]                     cond$call), session = sessionInformation(), 
[17:03:17.461]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:17.461]                   signalCondition(cond)
[17:03:17.461]                 }
[17:03:17.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:17.461]                 "immediateCondition"))) {
[17:03:17.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:17.461]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:17.461]                   if (TRUE && !signal) {
[17:03:17.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.461]                     {
[17:03:17.461]                       inherits <- base::inherits
[17:03:17.461]                       invokeRestart <- base::invokeRestart
[17:03:17.461]                       is.null <- base::is.null
[17:03:17.461]                       muffled <- FALSE
[17:03:17.461]                       if (inherits(cond, "message")) {
[17:03:17.461]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.461]                         if (muffled) 
[17:03:17.461]                           invokeRestart("muffleMessage")
[17:03:17.461]                       }
[17:03:17.461]                       else if (inherits(cond, "warning")) {
[17:03:17.461]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.461]                         if (muffled) 
[17:03:17.461]                           invokeRestart("muffleWarning")
[17:03:17.461]                       }
[17:03:17.461]                       else if (inherits(cond, "condition")) {
[17:03:17.461]                         if (!is.null(pattern)) {
[17:03:17.461]                           computeRestarts <- base::computeRestarts
[17:03:17.461]                           grepl <- base::grepl
[17:03:17.461]                           restarts <- computeRestarts(cond)
[17:03:17.461]                           for (restart in restarts) {
[17:03:17.461]                             name <- restart$name
[17:03:17.461]                             if (is.null(name)) 
[17:03:17.461]                               next
[17:03:17.461]                             if (!grepl(pattern, name)) 
[17:03:17.461]                               next
[17:03:17.461]                             invokeRestart(restart)
[17:03:17.461]                             muffled <- TRUE
[17:03:17.461]                             break
[17:03:17.461]                           }
[17:03:17.461]                         }
[17:03:17.461]                       }
[17:03:17.461]                       invisible(muffled)
[17:03:17.461]                     }
[17:03:17.461]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.461]                   }
[17:03:17.461]                 }
[17:03:17.461]                 else {
[17:03:17.461]                   if (TRUE) {
[17:03:17.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.461]                     {
[17:03:17.461]                       inherits <- base::inherits
[17:03:17.461]                       invokeRestart <- base::invokeRestart
[17:03:17.461]                       is.null <- base::is.null
[17:03:17.461]                       muffled <- FALSE
[17:03:17.461]                       if (inherits(cond, "message")) {
[17:03:17.461]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.461]                         if (muffled) 
[17:03:17.461]                           invokeRestart("muffleMessage")
[17:03:17.461]                       }
[17:03:17.461]                       else if (inherits(cond, "warning")) {
[17:03:17.461]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.461]                         if (muffled) 
[17:03:17.461]                           invokeRestart("muffleWarning")
[17:03:17.461]                       }
[17:03:17.461]                       else if (inherits(cond, "condition")) {
[17:03:17.461]                         if (!is.null(pattern)) {
[17:03:17.461]                           computeRestarts <- base::computeRestarts
[17:03:17.461]                           grepl <- base::grepl
[17:03:17.461]                           restarts <- computeRestarts(cond)
[17:03:17.461]                           for (restart in restarts) {
[17:03:17.461]                             name <- restart$name
[17:03:17.461]                             if (is.null(name)) 
[17:03:17.461]                               next
[17:03:17.461]                             if (!grepl(pattern, name)) 
[17:03:17.461]                               next
[17:03:17.461]                             invokeRestart(restart)
[17:03:17.461]                             muffled <- TRUE
[17:03:17.461]                             break
[17:03:17.461]                           }
[17:03:17.461]                         }
[17:03:17.461]                       }
[17:03:17.461]                       invisible(muffled)
[17:03:17.461]                     }
[17:03:17.461]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.461]                   }
[17:03:17.461]                 }
[17:03:17.461]             }
[17:03:17.461]         }))
[17:03:17.461]     }, error = function(ex) {
[17:03:17.461]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:17.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.461]                 ...future.rng), started = ...future.startTime, 
[17:03:17.461]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:17.461]             version = "1.8"), class = "FutureResult")
[17:03:17.461]     }, finally = {
[17:03:17.461]         if (!identical(...future.workdir, getwd())) 
[17:03:17.461]             setwd(...future.workdir)
[17:03:17.461]         {
[17:03:17.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:17.461]                 ...future.oldOptions$nwarnings <- NULL
[17:03:17.461]             }
[17:03:17.461]             base::options(...future.oldOptions)
[17:03:17.461]             if (.Platform$OS.type == "windows") {
[17:03:17.461]                 old_names <- names(...future.oldEnvVars)
[17:03:17.461]                 envs <- base::Sys.getenv()
[17:03:17.461]                 names <- names(envs)
[17:03:17.461]                 common <- intersect(names, old_names)
[17:03:17.461]                 added <- setdiff(names, old_names)
[17:03:17.461]                 removed <- setdiff(old_names, names)
[17:03:17.461]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:17.461]                   envs[common]]
[17:03:17.461]                 NAMES <- toupper(changed)
[17:03:17.461]                 args <- list()
[17:03:17.461]                 for (kk in seq_along(NAMES)) {
[17:03:17.461]                   name <- changed[[kk]]
[17:03:17.461]                   NAME <- NAMES[[kk]]
[17:03:17.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.461]                     next
[17:03:17.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.461]                 }
[17:03:17.461]                 NAMES <- toupper(added)
[17:03:17.461]                 for (kk in seq_along(NAMES)) {
[17:03:17.461]                   name <- added[[kk]]
[17:03:17.461]                   NAME <- NAMES[[kk]]
[17:03:17.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.461]                     next
[17:03:17.461]                   args[[name]] <- ""
[17:03:17.461]                 }
[17:03:17.461]                 NAMES <- toupper(removed)
[17:03:17.461]                 for (kk in seq_along(NAMES)) {
[17:03:17.461]                   name <- removed[[kk]]
[17:03:17.461]                   NAME <- NAMES[[kk]]
[17:03:17.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.461]                     next
[17:03:17.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.461]                 }
[17:03:17.461]                 if (length(args) > 0) 
[17:03:17.461]                   base::do.call(base::Sys.setenv, args = args)
[17:03:17.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:17.461]             }
[17:03:17.461]             else {
[17:03:17.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:17.461]             }
[17:03:17.461]             {
[17:03:17.461]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:17.461]                   0L) {
[17:03:17.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:17.461]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:17.461]                   base::options(opts)
[17:03:17.461]                 }
[17:03:17.461]                 {
[17:03:17.461]                   {
[17:03:17.461]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:17.461]                     NULL
[17:03:17.461]                   }
[17:03:17.461]                   options(future.plan = NULL)
[17:03:17.461]                   if (is.na(NA_character_)) 
[17:03:17.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:17.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:17.461]                     .init = FALSE)
[17:03:17.461]                 }
[17:03:17.461]             }
[17:03:17.461]         }
[17:03:17.461]     })
[17:03:17.461]     if (TRUE) {
[17:03:17.461]         base::sink(type = "output", split = FALSE)
[17:03:17.461]         if (TRUE) {
[17:03:17.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:17.461]         }
[17:03:17.461]         else {
[17:03:17.461]             ...future.result["stdout"] <- base::list(NULL)
[17:03:17.461]         }
[17:03:17.461]         base::close(...future.stdout)
[17:03:17.461]         ...future.stdout <- NULL
[17:03:17.461]     }
[17:03:17.461]     ...future.result$conditions <- ...future.conditions
[17:03:17.461]     ...future.result$finished <- base::Sys.time()
[17:03:17.461]     ...future.result
[17:03:17.461] }
[17:03:17.463] Exporting 2 global objects (55.46 KiB) to cluster node #1 ...
[17:03:17.464] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ...
[17:03:17.508] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ... DONE
[17:03:17.508] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[17:03:17.508] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[17:03:17.508] Exporting 2 global objects (55.46 KiB) to cluster node #1 ... DONE
[17:03:17.509] MultisessionFuture started
[17:03:17.509] - Launch lazy future ... done
[17:03:17.509] run() for ‘MultisessionFuture’ ... done
[17:03:17.509] result() for ClusterFuture ...
[17:03:17.509] receiveMessageFromWorker() for ClusterFuture ...
[17:03:17.509] - Validating connection of MultisessionFuture
[17:03:17.574] - received message: FutureResult
[17:03:17.574] - Received FutureResult
[17:03:17.575] - Erased future from FutureRegistry
[17:03:17.575] result() for ClusterFuture ...
[17:03:17.575] - result already collected: FutureResult
[17:03:17.575] result() for ClusterFuture ... done
[17:03:17.575] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:17.575] result() for ClusterFuture ... done
[17:03:17.575] result() for ClusterFuture ...
[17:03:17.575] - result already collected: FutureResult
[17:03:17.575] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:17.580] getGlobalsAndPackages() ...
[17:03:17.580] Searching for globals...
[17:03:17.582] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:17.582] Searching for globals ... DONE
[17:03:17.582] Resolving globals: FALSE
[17:03:17.583] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:17.583] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:17.583] - globals: [1] ‘data’
[17:03:17.583] - packages: [1] ‘future’
[17:03:17.583] getGlobalsAndPackages() ... DONE
[17:03:17.584] run() for ‘Future’ ...
[17:03:17.584] - state: ‘created’
[17:03:17.584] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:17.598] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:17.598] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:17.598]   - Field: ‘node’
[17:03:17.599]   - Field: ‘label’
[17:03:17.599]   - Field: ‘local’
[17:03:17.599]   - Field: ‘owner’
[17:03:17.599]   - Field: ‘envir’
[17:03:17.599]   - Field: ‘workers’
[17:03:17.599]   - Field: ‘packages’
[17:03:17.599]   - Field: ‘gc’
[17:03:17.599]   - Field: ‘conditions’
[17:03:17.599]   - Field: ‘persistent’
[17:03:17.599]   - Field: ‘expr’
[17:03:17.600]   - Field: ‘uuid’
[17:03:17.600]   - Field: ‘seed’
[17:03:17.600]   - Field: ‘version’
[17:03:17.600]   - Field: ‘result’
[17:03:17.600]   - Field: ‘asynchronous’
[17:03:17.600]   - Field: ‘calls’
[17:03:17.600]   - Field: ‘globals’
[17:03:17.600]   - Field: ‘stdout’
[17:03:17.600]   - Field: ‘earlySignal’
[17:03:17.600]   - Field: ‘lazy’
[17:03:17.600]   - Field: ‘state’
[17:03:17.601] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:17.601] - Launch lazy future ...
[17:03:17.601] Packages needed by the future expression (n = 1): ‘future’
[17:03:17.601] Packages needed by future strategies (n = 1): ‘future’
[17:03:17.602] {
[17:03:17.602]     {
[17:03:17.602]         {
[17:03:17.602]             ...future.startTime <- base::Sys.time()
[17:03:17.602]             {
[17:03:17.602]                 {
[17:03:17.602]                   {
[17:03:17.602]                     {
[17:03:17.602]                       {
[17:03:17.602]                         base::local({
[17:03:17.602]                           has_future <- base::requireNamespace("future", 
[17:03:17.602]                             quietly = TRUE)
[17:03:17.602]                           if (has_future) {
[17:03:17.602]                             ns <- base::getNamespace("future")
[17:03:17.602]                             version <- ns[[".package"]][["version"]]
[17:03:17.602]                             if (is.null(version)) 
[17:03:17.602]                               version <- utils::packageVersion("future")
[17:03:17.602]                           }
[17:03:17.602]                           else {
[17:03:17.602]                             version <- NULL
[17:03:17.602]                           }
[17:03:17.602]                           if (!has_future || version < "1.8.0") {
[17:03:17.602]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:17.602]                               "", base::R.version$version.string), 
[17:03:17.602]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:17.602]                                 base::R.version$platform, 8 * 
[17:03:17.602]                                   base::.Machine$sizeof.pointer), 
[17:03:17.602]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:17.602]                                 "release", "version")], collapse = " "), 
[17:03:17.602]                               hostname = base::Sys.info()[["nodename"]])
[17:03:17.602]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:17.602]                               info)
[17:03:17.602]                             info <- base::paste(info, collapse = "; ")
[17:03:17.602]                             if (!has_future) {
[17:03:17.602]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:17.602]                                 info)
[17:03:17.602]                             }
[17:03:17.602]                             else {
[17:03:17.602]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:17.602]                                 info, version)
[17:03:17.602]                             }
[17:03:17.602]                             base::stop(msg)
[17:03:17.602]                           }
[17:03:17.602]                         })
[17:03:17.602]                       }
[17:03:17.602]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:17.602]                       base::options(mc.cores = 1L)
[17:03:17.602]                     }
[17:03:17.602]                     base::local({
[17:03:17.602]                       for (pkg in "future") {
[17:03:17.602]                         base::loadNamespace(pkg)
[17:03:17.602]                         base::library(pkg, character.only = TRUE)
[17:03:17.602]                       }
[17:03:17.602]                     })
[17:03:17.602]                   }
[17:03:17.602]                   ...future.strategy.old <- future::plan("list")
[17:03:17.602]                   options(future.plan = NULL)
[17:03:17.602]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.602]                   future::plan(list(b = function (..., envir = parent.frame()) 
[17:03:17.602]                   {
[17:03:17.602]                     future <- SequentialFuture(..., envir = envir)
[17:03:17.602]                     if (!future$lazy) 
[17:03:17.602]                       future <- run(future)
[17:03:17.602]                     invisible(future)
[17:03:17.602]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:17.602]                 }
[17:03:17.602]                 ...future.workdir <- getwd()
[17:03:17.602]             }
[17:03:17.602]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:17.602]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:17.602]         }
[17:03:17.602]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:17.602]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:17.602]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:17.602]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:17.602]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:17.602]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:17.602]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:17.602]             base::names(...future.oldOptions))
[17:03:17.602]     }
[17:03:17.602]     if (FALSE) {
[17:03:17.602]     }
[17:03:17.602]     else {
[17:03:17.602]         if (TRUE) {
[17:03:17.602]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:17.602]                 open = "w")
[17:03:17.602]         }
[17:03:17.602]         else {
[17:03:17.602]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:17.602]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:17.602]         }
[17:03:17.602]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:17.602]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:17.602]             base::sink(type = "output", split = FALSE)
[17:03:17.602]             base::close(...future.stdout)
[17:03:17.602]         }, add = TRUE)
[17:03:17.602]     }
[17:03:17.602]     ...future.frame <- base::sys.nframe()
[17:03:17.602]     ...future.conditions <- base::list()
[17:03:17.602]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:17.602]     if (FALSE) {
[17:03:17.602]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:17.602]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:17.602]     }
[17:03:17.602]     ...future.result <- base::tryCatch({
[17:03:17.602]         base::withCallingHandlers({
[17:03:17.602]             ...future.value <- base::withVisible(base::local({
[17:03:17.602]                 ...future.makeSendCondition <- base::local({
[17:03:17.602]                   sendCondition <- NULL
[17:03:17.602]                   function(frame = 1L) {
[17:03:17.602]                     if (is.function(sendCondition)) 
[17:03:17.602]                       return(sendCondition)
[17:03:17.602]                     ns <- getNamespace("parallel")
[17:03:17.602]                     if (exists("sendData", mode = "function", 
[17:03:17.602]                       envir = ns)) {
[17:03:17.602]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:17.602]                         envir = ns)
[17:03:17.602]                       envir <- sys.frame(frame)
[17:03:17.602]                       master <- NULL
[17:03:17.602]                       while (!identical(envir, .GlobalEnv) && 
[17:03:17.602]                         !identical(envir, emptyenv())) {
[17:03:17.602]                         if (exists("master", mode = "list", envir = envir, 
[17:03:17.602]                           inherits = FALSE)) {
[17:03:17.602]                           master <- get("master", mode = "list", 
[17:03:17.602]                             envir = envir, inherits = FALSE)
[17:03:17.602]                           if (inherits(master, c("SOCKnode", 
[17:03:17.602]                             "SOCK0node"))) {
[17:03:17.602]                             sendCondition <<- function(cond) {
[17:03:17.602]                               data <- list(type = "VALUE", value = cond, 
[17:03:17.602]                                 success = TRUE)
[17:03:17.602]                               parallel_sendData(master, data)
[17:03:17.602]                             }
[17:03:17.602]                             return(sendCondition)
[17:03:17.602]                           }
[17:03:17.602]                         }
[17:03:17.602]                         frame <- frame + 1L
[17:03:17.602]                         envir <- sys.frame(frame)
[17:03:17.602]                       }
[17:03:17.602]                     }
[17:03:17.602]                     sendCondition <<- function(cond) NULL
[17:03:17.602]                   }
[17:03:17.602]                 })
[17:03:17.602]                 withCallingHandlers({
[17:03:17.602]                   {
[17:03:17.602]                     value(future(subset(data, a == 2)))
[17:03:17.602]                   }
[17:03:17.602]                 }, immediateCondition = function(cond) {
[17:03:17.602]                   sendCondition <- ...future.makeSendCondition()
[17:03:17.602]                   sendCondition(cond)
[17:03:17.602]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.602]                   {
[17:03:17.602]                     inherits <- base::inherits
[17:03:17.602]                     invokeRestart <- base::invokeRestart
[17:03:17.602]                     is.null <- base::is.null
[17:03:17.602]                     muffled <- FALSE
[17:03:17.602]                     if (inherits(cond, "message")) {
[17:03:17.602]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:17.602]                       if (muffled) 
[17:03:17.602]                         invokeRestart("muffleMessage")
[17:03:17.602]                     }
[17:03:17.602]                     else if (inherits(cond, "warning")) {
[17:03:17.602]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:17.602]                       if (muffled) 
[17:03:17.602]                         invokeRestart("muffleWarning")
[17:03:17.602]                     }
[17:03:17.602]                     else if (inherits(cond, "condition")) {
[17:03:17.602]                       if (!is.null(pattern)) {
[17:03:17.602]                         computeRestarts <- base::computeRestarts
[17:03:17.602]                         grepl <- base::grepl
[17:03:17.602]                         restarts <- computeRestarts(cond)
[17:03:17.602]                         for (restart in restarts) {
[17:03:17.602]                           name <- restart$name
[17:03:17.602]                           if (is.null(name)) 
[17:03:17.602]                             next
[17:03:17.602]                           if (!grepl(pattern, name)) 
[17:03:17.602]                             next
[17:03:17.602]                           invokeRestart(restart)
[17:03:17.602]                           muffled <- TRUE
[17:03:17.602]                           break
[17:03:17.602]                         }
[17:03:17.602]                       }
[17:03:17.602]                     }
[17:03:17.602]                     invisible(muffled)
[17:03:17.602]                   }
[17:03:17.602]                   muffleCondition(cond)
[17:03:17.602]                 })
[17:03:17.602]             }))
[17:03:17.602]             future::FutureResult(value = ...future.value$value, 
[17:03:17.602]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.602]                   ...future.rng), globalenv = if (FALSE) 
[17:03:17.602]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:17.602]                     ...future.globalenv.names))
[17:03:17.602]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:17.602]         }, condition = base::local({
[17:03:17.602]             c <- base::c
[17:03:17.602]             inherits <- base::inherits
[17:03:17.602]             invokeRestart <- base::invokeRestart
[17:03:17.602]             length <- base::length
[17:03:17.602]             list <- base::list
[17:03:17.602]             seq.int <- base::seq.int
[17:03:17.602]             signalCondition <- base::signalCondition
[17:03:17.602]             sys.calls <- base::sys.calls
[17:03:17.602]             `[[` <- base::`[[`
[17:03:17.602]             `+` <- base::`+`
[17:03:17.602]             `<<-` <- base::`<<-`
[17:03:17.602]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:17.602]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:17.602]                   3L)]
[17:03:17.602]             }
[17:03:17.602]             function(cond) {
[17:03:17.602]                 is_error <- inherits(cond, "error")
[17:03:17.602]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:17.602]                   NULL)
[17:03:17.602]                 if (is_error) {
[17:03:17.602]                   sessionInformation <- function() {
[17:03:17.602]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:17.602]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:17.602]                       search = base::search(), system = base::Sys.info())
[17:03:17.602]                   }
[17:03:17.602]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.602]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:17.602]                     cond$call), session = sessionInformation(), 
[17:03:17.602]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:17.602]                   signalCondition(cond)
[17:03:17.602]                 }
[17:03:17.602]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:17.602]                 "immediateCondition"))) {
[17:03:17.602]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:17.602]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.602]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:17.602]                   if (TRUE && !signal) {
[17:03:17.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.602]                     {
[17:03:17.602]                       inherits <- base::inherits
[17:03:17.602]                       invokeRestart <- base::invokeRestart
[17:03:17.602]                       is.null <- base::is.null
[17:03:17.602]                       muffled <- FALSE
[17:03:17.602]                       if (inherits(cond, "message")) {
[17:03:17.602]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.602]                         if (muffled) 
[17:03:17.602]                           invokeRestart("muffleMessage")
[17:03:17.602]                       }
[17:03:17.602]                       else if (inherits(cond, "warning")) {
[17:03:17.602]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.602]                         if (muffled) 
[17:03:17.602]                           invokeRestart("muffleWarning")
[17:03:17.602]                       }
[17:03:17.602]                       else if (inherits(cond, "condition")) {
[17:03:17.602]                         if (!is.null(pattern)) {
[17:03:17.602]                           computeRestarts <- base::computeRestarts
[17:03:17.602]                           grepl <- base::grepl
[17:03:17.602]                           restarts <- computeRestarts(cond)
[17:03:17.602]                           for (restart in restarts) {
[17:03:17.602]                             name <- restart$name
[17:03:17.602]                             if (is.null(name)) 
[17:03:17.602]                               next
[17:03:17.602]                             if (!grepl(pattern, name)) 
[17:03:17.602]                               next
[17:03:17.602]                             invokeRestart(restart)
[17:03:17.602]                             muffled <- TRUE
[17:03:17.602]                             break
[17:03:17.602]                           }
[17:03:17.602]                         }
[17:03:17.602]                       }
[17:03:17.602]                       invisible(muffled)
[17:03:17.602]                     }
[17:03:17.602]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.602]                   }
[17:03:17.602]                 }
[17:03:17.602]                 else {
[17:03:17.602]                   if (TRUE) {
[17:03:17.602]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.602]                     {
[17:03:17.602]                       inherits <- base::inherits
[17:03:17.602]                       invokeRestart <- base::invokeRestart
[17:03:17.602]                       is.null <- base::is.null
[17:03:17.602]                       muffled <- FALSE
[17:03:17.602]                       if (inherits(cond, "message")) {
[17:03:17.602]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.602]                         if (muffled) 
[17:03:17.602]                           invokeRestart("muffleMessage")
[17:03:17.602]                       }
[17:03:17.602]                       else if (inherits(cond, "warning")) {
[17:03:17.602]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.602]                         if (muffled) 
[17:03:17.602]                           invokeRestart("muffleWarning")
[17:03:17.602]                       }
[17:03:17.602]                       else if (inherits(cond, "condition")) {
[17:03:17.602]                         if (!is.null(pattern)) {
[17:03:17.602]                           computeRestarts <- base::computeRestarts
[17:03:17.602]                           grepl <- base::grepl
[17:03:17.602]                           restarts <- computeRestarts(cond)
[17:03:17.602]                           for (restart in restarts) {
[17:03:17.602]                             name <- restart$name
[17:03:17.602]                             if (is.null(name)) 
[17:03:17.602]                               next
[17:03:17.602]                             if (!grepl(pattern, name)) 
[17:03:17.602]                               next
[17:03:17.602]                             invokeRestart(restart)
[17:03:17.602]                             muffled <- TRUE
[17:03:17.602]                             break
[17:03:17.602]                           }
[17:03:17.602]                         }
[17:03:17.602]                       }
[17:03:17.602]                       invisible(muffled)
[17:03:17.602]                     }
[17:03:17.602]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.602]                   }
[17:03:17.602]                 }
[17:03:17.602]             }
[17:03:17.602]         }))
[17:03:17.602]     }, error = function(ex) {
[17:03:17.602]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:17.602]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.602]                 ...future.rng), started = ...future.startTime, 
[17:03:17.602]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:17.602]             version = "1.8"), class = "FutureResult")
[17:03:17.602]     }, finally = {
[17:03:17.602]         if (!identical(...future.workdir, getwd())) 
[17:03:17.602]             setwd(...future.workdir)
[17:03:17.602]         {
[17:03:17.602]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:17.602]                 ...future.oldOptions$nwarnings <- NULL
[17:03:17.602]             }
[17:03:17.602]             base::options(...future.oldOptions)
[17:03:17.602]             if (.Platform$OS.type == "windows") {
[17:03:17.602]                 old_names <- names(...future.oldEnvVars)
[17:03:17.602]                 envs <- base::Sys.getenv()
[17:03:17.602]                 names <- names(envs)
[17:03:17.602]                 common <- intersect(names, old_names)
[17:03:17.602]                 added <- setdiff(names, old_names)
[17:03:17.602]                 removed <- setdiff(old_names, names)
[17:03:17.602]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:17.602]                   envs[common]]
[17:03:17.602]                 NAMES <- toupper(changed)
[17:03:17.602]                 args <- list()
[17:03:17.602]                 for (kk in seq_along(NAMES)) {
[17:03:17.602]                   name <- changed[[kk]]
[17:03:17.602]                   NAME <- NAMES[[kk]]
[17:03:17.602]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.602]                     next
[17:03:17.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.602]                 }
[17:03:17.602]                 NAMES <- toupper(added)
[17:03:17.602]                 for (kk in seq_along(NAMES)) {
[17:03:17.602]                   name <- added[[kk]]
[17:03:17.602]                   NAME <- NAMES[[kk]]
[17:03:17.602]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.602]                     next
[17:03:17.602]                   args[[name]] <- ""
[17:03:17.602]                 }
[17:03:17.602]                 NAMES <- toupper(removed)
[17:03:17.602]                 for (kk in seq_along(NAMES)) {
[17:03:17.602]                   name <- removed[[kk]]
[17:03:17.602]                   NAME <- NAMES[[kk]]
[17:03:17.602]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.602]                     next
[17:03:17.602]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.602]                 }
[17:03:17.602]                 if (length(args) > 0) 
[17:03:17.602]                   base::do.call(base::Sys.setenv, args = args)
[17:03:17.602]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:17.602]             }
[17:03:17.602]             else {
[17:03:17.602]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:17.602]             }
[17:03:17.602]             {
[17:03:17.602]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:17.602]                   0L) {
[17:03:17.602]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:17.602]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:17.602]                   base::options(opts)
[17:03:17.602]                 }
[17:03:17.602]                 {
[17:03:17.602]                   {
[17:03:17.602]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:17.602]                     NULL
[17:03:17.602]                   }
[17:03:17.602]                   options(future.plan = NULL)
[17:03:17.602]                   if (is.na(NA_character_)) 
[17:03:17.602]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.602]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:17.602]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:17.602]                     .init = FALSE)
[17:03:17.602]                 }
[17:03:17.602]             }
[17:03:17.602]         }
[17:03:17.602]     })
[17:03:17.602]     if (TRUE) {
[17:03:17.602]         base::sink(type = "output", split = FALSE)
[17:03:17.602]         if (TRUE) {
[17:03:17.602]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:17.602]         }
[17:03:17.602]         else {
[17:03:17.602]             ...future.result["stdout"] <- base::list(NULL)
[17:03:17.602]         }
[17:03:17.602]         base::close(...future.stdout)
[17:03:17.602]         ...future.stdout <- NULL
[17:03:17.602]     }
[17:03:17.602]     ...future.result$conditions <- ...future.conditions
[17:03:17.602]     ...future.result$finished <- base::Sys.time()
[17:03:17.602]     ...future.result
[17:03:17.602] }
[17:03:17.604] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[17:03:17.604] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[17:03:17.605] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[17:03:17.605] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[17:03:17.605] MultisessionFuture started
[17:03:17.605] - Launch lazy future ... done
[17:03:17.606] run() for ‘MultisessionFuture’ ... done
[17:03:17.606] result() for ClusterFuture ...
[17:03:17.606] receiveMessageFromWorker() for ClusterFuture ...
[17:03:17.606] - Validating connection of MultisessionFuture
[17:03:17.653] - received message: FutureResult
[17:03:17.653] - Received FutureResult
[17:03:17.653] - Erased future from FutureRegistry
[17:03:17.653] result() for ClusterFuture ...
[17:03:17.653] - result already collected: FutureResult
[17:03:17.654] result() for ClusterFuture ... done
[17:03:17.654] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:17.654] result() for ClusterFuture ... done
[17:03:17.654] result() for ClusterFuture ...
[17:03:17.654] - result already collected: FutureResult
[17:03:17.654] result() for ClusterFuture ... done
- plan(list('multisession', 'sequential')) ... DONE
- plan(list('multisession', 'multicore')) ...
[17:03:17.654] plan(): Setting new future strategy stack:
[17:03:17.655] List of future strategies:
[17:03:17.655] 1. multisession:
[17:03:17.655]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:17.655]    - tweaked: FALSE
[17:03:17.655]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.655] 2. multicore:
[17:03:17.655]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:17.655]    - tweaked: FALSE
[17:03:17.655]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.655] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:17.656] multisession:
[17:03:17.656] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:17.656] - tweaked: FALSE
[17:03:17.656] - call: plan(list(a = strategy1, b = strategy2))
[17:03:17.660] getGlobalsAndPackages() ...
[17:03:17.660] Not searching for globals
[17:03:17.660] - globals: [0] <none>
[17:03:17.660] getGlobalsAndPackages() ... DONE
[17:03:17.660] [local output] makeClusterPSOCK() ...
[17:03:17.663] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:17.664] [local output] Base port: 11864
[17:03:17.664] [local output] Getting setup options for 2 cluster nodes ...
[17:03:17.664] [local output]  - Node 1 of 2 ...
[17:03:17.665] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:17.665] [local output] Rscript port: 11864

[17:03:17.665] [local output]  - Node 2 of 2 ...
[17:03:17.666] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:17.666] [local output] Rscript port: 11864

[17:03:17.667] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:17.667] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:17.667] [local output] Setting up PSOCK nodes in parallel
[17:03:17.667] List of 36
[17:03:17.667]  $ worker          : chr "localhost"
[17:03:17.667]   ..- attr(*, "localhost")= logi TRUE
[17:03:17.667]  $ master          : chr "localhost"
[17:03:17.667]  $ port            : int 11864
[17:03:17.667]  $ connectTimeout  : num 120
[17:03:17.667]  $ timeout         : num 2592000
[17:03:17.667]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:17.667]  $ homogeneous     : logi TRUE
[17:03:17.667]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:17.667]  $ rscript_envs    : NULL
[17:03:17.667]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:17.667]  $ rscript_startup : NULL
[17:03:17.667]  $ rscript_sh      : chr "sh"
[17:03:17.667]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:17.667]  $ methods         : logi TRUE
[17:03:17.667]  $ socketOptions   : chr "no-delay"
[17:03:17.667]  $ useXDR          : logi FALSE
[17:03:17.667]  $ outfile         : chr "/dev/null"
[17:03:17.667]  $ renice          : int NA
[17:03:17.667]  $ rshcmd          : NULL
[17:03:17.667]  $ user            : chr(0) 
[17:03:17.667]  $ revtunnel       : logi FALSE
[17:03:17.667]  $ rshlogfile      : NULL
[17:03:17.667]  $ rshopts         : chr(0) 
[17:03:17.667]  $ rank            : int 1
[17:03:17.667]  $ manual          : logi FALSE
[17:03:17.667]  $ dryrun          : logi FALSE
[17:03:17.667]  $ quiet           : logi FALSE
[17:03:17.667]  $ setup_strategy  : chr "parallel"
[17:03:17.667]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:17.667]  $ pidfile         : chr "/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b914745c9d74.pid"
[17:03:17.667]  $ rshcmd_label    : NULL
[17:03:17.667]  $ rsh_call        : NULL
[17:03:17.667]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:17.667]  $ localMachine    : logi TRUE
[17:03:17.667]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:17.667]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:17.667]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:17.667]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:17.667]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:17.667]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:17.667]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:17.667]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:17.667]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:17.667]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:17.667]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:17.667]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:17.667]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:17.667]  $ arguments       :List of 28
[17:03:17.667]   ..$ worker          : chr "localhost"
[17:03:17.667]   ..$ master          : NULL
[17:03:17.667]   ..$ port            : int 11864
[17:03:17.667]   ..$ connectTimeout  : num 120
[17:03:17.667]   ..$ timeout         : num 2592000
[17:03:17.667]   ..$ rscript         : NULL
[17:03:17.667]   ..$ homogeneous     : NULL
[17:03:17.667]   ..$ rscript_args    : NULL
[17:03:17.667]   ..$ rscript_envs    : NULL
[17:03:17.667]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:17.667]   ..$ rscript_startup : NULL
[17:03:17.667]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:17.667]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:17.667]   ..$ methods         : logi TRUE
[17:03:17.667]   ..$ socketOptions   : chr "no-delay"
[17:03:17.667]   ..$ useXDR          : logi FALSE
[17:03:17.667]   ..$ outfile         : chr "/dev/null"
[17:03:17.667]   ..$ renice          : int NA
[17:03:17.667]   ..$ rshcmd          : NULL
[17:03:17.667]   ..$ user            : NULL
[17:03:17.667]   ..$ revtunnel       : logi NA
[17:03:17.667]   ..$ rshlogfile      : NULL
[17:03:17.667]   ..$ rshopts         : NULL
[17:03:17.667]   ..$ rank            : int 1
[17:03:17.667]   ..$ manual          : logi FALSE
[17:03:17.667]   ..$ dryrun          : logi FALSE
[17:03:17.667]   ..$ quiet           : logi FALSE
[17:03:17.667]   ..$ setup_strategy  : chr "parallel"
[17:03:17.667]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:17.684] [local output] System call to launch all workers:
[17:03:17.684] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b914745c9d74.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11864 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:17.684] [local output] Starting PSOCK main server
[17:03:17.685] [local output] Workers launched
[17:03:17.685] [local output] Waiting for workers to connect back
[17:03:17.685]  - [local output] 0 workers out of 2 ready
[17:03:17.959]  - [local output] 0 workers out of 2 ready
[17:03:17.959]  - [local output] 1 workers out of 2 ready
[17:03:17.963]  - [local output] 1 workers out of 2 ready
[17:03:17.963]  - [local output] 2 workers out of 2 ready
[17:03:17.964] [local output] Launching of workers completed
[17:03:17.964] [local output] Collecting session information from workers
[17:03:17.964] [local output]  - Worker #1 of 2
[17:03:17.965] [local output]  - Worker #2 of 2
[17:03:17.965] [local output] makeClusterPSOCK() ... done
[17:03:17.976] Packages needed by the future expression (n = 0): <none>
[17:03:17.976] Packages needed by future strategies (n = 1): ‘future’
[17:03:17.976] {
[17:03:17.976]     {
[17:03:17.976]         {
[17:03:17.976]             ...future.startTime <- base::Sys.time()
[17:03:17.976]             {
[17:03:17.976]                 {
[17:03:17.976]                   {
[17:03:17.976]                     {
[17:03:17.976]                       {
[17:03:17.976]                         base::local({
[17:03:17.976]                           has_future <- base::requireNamespace("future", 
[17:03:17.976]                             quietly = TRUE)
[17:03:17.976]                           if (has_future) {
[17:03:17.976]                             ns <- base::getNamespace("future")
[17:03:17.976]                             version <- ns[[".package"]][["version"]]
[17:03:17.976]                             if (is.null(version)) 
[17:03:17.976]                               version <- utils::packageVersion("future")
[17:03:17.976]                           }
[17:03:17.976]                           else {
[17:03:17.976]                             version <- NULL
[17:03:17.976]                           }
[17:03:17.976]                           if (!has_future || version < "1.8.0") {
[17:03:17.976]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:17.976]                               "", base::R.version$version.string), 
[17:03:17.976]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:17.976]                                 base::R.version$platform, 8 * 
[17:03:17.976]                                   base::.Machine$sizeof.pointer), 
[17:03:17.976]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:17.976]                                 "release", "version")], collapse = " "), 
[17:03:17.976]                               hostname = base::Sys.info()[["nodename"]])
[17:03:17.976]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:17.976]                               info)
[17:03:17.976]                             info <- base::paste(info, collapse = "; ")
[17:03:17.976]                             if (!has_future) {
[17:03:17.976]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:17.976]                                 info)
[17:03:17.976]                             }
[17:03:17.976]                             else {
[17:03:17.976]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:17.976]                                 info, version)
[17:03:17.976]                             }
[17:03:17.976]                             base::stop(msg)
[17:03:17.976]                           }
[17:03:17.976]                         })
[17:03:17.976]                       }
[17:03:17.976]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:17.976]                       base::options(mc.cores = 1L)
[17:03:17.976]                     }
[17:03:17.976]                     base::local({
[17:03:17.976]                       for (pkg in "future") {
[17:03:17.976]                         base::loadNamespace(pkg)
[17:03:17.976]                         base::library(pkg, character.only = TRUE)
[17:03:17.976]                       }
[17:03:17.976]                     })
[17:03:17.976]                   }
[17:03:17.976]                   ...future.strategy.old <- future::plan("list")
[17:03:17.976]                   options(future.plan = NULL)
[17:03:17.976]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.976]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:17.976]                     envir = parent.frame()) 
[17:03:17.976]                   {
[17:03:17.976]                     default_workers <- missing(workers)
[17:03:17.976]                     if (is.function(workers)) 
[17:03:17.976]                       workers <- workers()
[17:03:17.976]                     workers <- structure(as.integer(workers), 
[17:03:17.976]                       class = class(workers))
[17:03:17.976]                     stop_if_not(is.finite(workers), workers >= 
[17:03:17.976]                       1L)
[17:03:17.976]                     if ((workers == 1L && !inherits(workers, 
[17:03:17.976]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:17.976]                       if (default_workers) 
[17:03:17.976]                         supportsMulticore(warn = TRUE)
[17:03:17.976]                       return(sequential(..., envir = envir))
[17:03:17.976]                     }
[17:03:17.976]                     oopts <- options(mc.cores = workers)
[17:03:17.976]                     on.exit(options(oopts))
[17:03:17.976]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:17.976]                       envir = envir)
[17:03:17.976]                     if (!future$lazy) 
[17:03:17.976]                       future <- run(future)
[17:03:17.976]                     invisible(future)
[17:03:17.976]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:17.976]                 }
[17:03:17.976]                 ...future.workdir <- getwd()
[17:03:17.976]             }
[17:03:17.976]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:17.976]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:17.976]         }
[17:03:17.976]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:17.976]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:17.976]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:17.976]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:17.976]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:17.976]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:17.976]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:17.976]             base::names(...future.oldOptions))
[17:03:17.976]     }
[17:03:17.976]     if (FALSE) {
[17:03:17.976]     }
[17:03:17.976]     else {
[17:03:17.976]         if (TRUE) {
[17:03:17.976]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:17.976]                 open = "w")
[17:03:17.976]         }
[17:03:17.976]         else {
[17:03:17.976]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:17.976]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:17.976]         }
[17:03:17.976]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:17.976]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:17.976]             base::sink(type = "output", split = FALSE)
[17:03:17.976]             base::close(...future.stdout)
[17:03:17.976]         }, add = TRUE)
[17:03:17.976]     }
[17:03:17.976]     ...future.frame <- base::sys.nframe()
[17:03:17.976]     ...future.conditions <- base::list()
[17:03:17.976]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:17.976]     if (FALSE) {
[17:03:17.976]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:17.976]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:17.976]     }
[17:03:17.976]     ...future.result <- base::tryCatch({
[17:03:17.976]         base::withCallingHandlers({
[17:03:17.976]             ...future.value <- base::withVisible(base::local({
[17:03:17.976]                 ...future.makeSendCondition <- base::local({
[17:03:17.976]                   sendCondition <- NULL
[17:03:17.976]                   function(frame = 1L) {
[17:03:17.976]                     if (is.function(sendCondition)) 
[17:03:17.976]                       return(sendCondition)
[17:03:17.976]                     ns <- getNamespace("parallel")
[17:03:17.976]                     if (exists("sendData", mode = "function", 
[17:03:17.976]                       envir = ns)) {
[17:03:17.976]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:17.976]                         envir = ns)
[17:03:17.976]                       envir <- sys.frame(frame)
[17:03:17.976]                       master <- NULL
[17:03:17.976]                       while (!identical(envir, .GlobalEnv) && 
[17:03:17.976]                         !identical(envir, emptyenv())) {
[17:03:17.976]                         if (exists("master", mode = "list", envir = envir, 
[17:03:17.976]                           inherits = FALSE)) {
[17:03:17.976]                           master <- get("master", mode = "list", 
[17:03:17.976]                             envir = envir, inherits = FALSE)
[17:03:17.976]                           if (inherits(master, c("SOCKnode", 
[17:03:17.976]                             "SOCK0node"))) {
[17:03:17.976]                             sendCondition <<- function(cond) {
[17:03:17.976]                               data <- list(type = "VALUE", value = cond, 
[17:03:17.976]                                 success = TRUE)
[17:03:17.976]                               parallel_sendData(master, data)
[17:03:17.976]                             }
[17:03:17.976]                             return(sendCondition)
[17:03:17.976]                           }
[17:03:17.976]                         }
[17:03:17.976]                         frame <- frame + 1L
[17:03:17.976]                         envir <- sys.frame(frame)
[17:03:17.976]                       }
[17:03:17.976]                     }
[17:03:17.976]                     sendCondition <<- function(cond) NULL
[17:03:17.976]                   }
[17:03:17.976]                 })
[17:03:17.976]                 withCallingHandlers({
[17:03:17.976]                   NA
[17:03:17.976]                 }, immediateCondition = function(cond) {
[17:03:17.976]                   sendCondition <- ...future.makeSendCondition()
[17:03:17.976]                   sendCondition(cond)
[17:03:17.976]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.976]                   {
[17:03:17.976]                     inherits <- base::inherits
[17:03:17.976]                     invokeRestart <- base::invokeRestart
[17:03:17.976]                     is.null <- base::is.null
[17:03:17.976]                     muffled <- FALSE
[17:03:17.976]                     if (inherits(cond, "message")) {
[17:03:17.976]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:17.976]                       if (muffled) 
[17:03:17.976]                         invokeRestart("muffleMessage")
[17:03:17.976]                     }
[17:03:17.976]                     else if (inherits(cond, "warning")) {
[17:03:17.976]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:17.976]                       if (muffled) 
[17:03:17.976]                         invokeRestart("muffleWarning")
[17:03:17.976]                     }
[17:03:17.976]                     else if (inherits(cond, "condition")) {
[17:03:17.976]                       if (!is.null(pattern)) {
[17:03:17.976]                         computeRestarts <- base::computeRestarts
[17:03:17.976]                         grepl <- base::grepl
[17:03:17.976]                         restarts <- computeRestarts(cond)
[17:03:17.976]                         for (restart in restarts) {
[17:03:17.976]                           name <- restart$name
[17:03:17.976]                           if (is.null(name)) 
[17:03:17.976]                             next
[17:03:17.976]                           if (!grepl(pattern, name)) 
[17:03:17.976]                             next
[17:03:17.976]                           invokeRestart(restart)
[17:03:17.976]                           muffled <- TRUE
[17:03:17.976]                           break
[17:03:17.976]                         }
[17:03:17.976]                       }
[17:03:17.976]                     }
[17:03:17.976]                     invisible(muffled)
[17:03:17.976]                   }
[17:03:17.976]                   muffleCondition(cond)
[17:03:17.976]                 })
[17:03:17.976]             }))
[17:03:17.976]             future::FutureResult(value = ...future.value$value, 
[17:03:17.976]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.976]                   ...future.rng), globalenv = if (FALSE) 
[17:03:17.976]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:17.976]                     ...future.globalenv.names))
[17:03:17.976]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:17.976]         }, condition = base::local({
[17:03:17.976]             c <- base::c
[17:03:17.976]             inherits <- base::inherits
[17:03:17.976]             invokeRestart <- base::invokeRestart
[17:03:17.976]             length <- base::length
[17:03:17.976]             list <- base::list
[17:03:17.976]             seq.int <- base::seq.int
[17:03:17.976]             signalCondition <- base::signalCondition
[17:03:17.976]             sys.calls <- base::sys.calls
[17:03:17.976]             `[[` <- base::`[[`
[17:03:17.976]             `+` <- base::`+`
[17:03:17.976]             `<<-` <- base::`<<-`
[17:03:17.976]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:17.976]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:17.976]                   3L)]
[17:03:17.976]             }
[17:03:17.976]             function(cond) {
[17:03:17.976]                 is_error <- inherits(cond, "error")
[17:03:17.976]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:17.976]                   NULL)
[17:03:17.976]                 if (is_error) {
[17:03:17.976]                   sessionInformation <- function() {
[17:03:17.976]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:17.976]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:17.976]                       search = base::search(), system = base::Sys.info())
[17:03:17.976]                   }
[17:03:17.976]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.976]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:17.976]                     cond$call), session = sessionInformation(), 
[17:03:17.976]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:17.976]                   signalCondition(cond)
[17:03:17.976]                 }
[17:03:17.976]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:17.976]                 "immediateCondition"))) {
[17:03:17.976]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:17.976]                   ...future.conditions[[length(...future.conditions) + 
[17:03:17.976]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:17.976]                   if (TRUE && !signal) {
[17:03:17.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.976]                     {
[17:03:17.976]                       inherits <- base::inherits
[17:03:17.976]                       invokeRestart <- base::invokeRestart
[17:03:17.976]                       is.null <- base::is.null
[17:03:17.976]                       muffled <- FALSE
[17:03:17.976]                       if (inherits(cond, "message")) {
[17:03:17.976]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.976]                         if (muffled) 
[17:03:17.976]                           invokeRestart("muffleMessage")
[17:03:17.976]                       }
[17:03:17.976]                       else if (inherits(cond, "warning")) {
[17:03:17.976]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.976]                         if (muffled) 
[17:03:17.976]                           invokeRestart("muffleWarning")
[17:03:17.976]                       }
[17:03:17.976]                       else if (inherits(cond, "condition")) {
[17:03:17.976]                         if (!is.null(pattern)) {
[17:03:17.976]                           computeRestarts <- base::computeRestarts
[17:03:17.976]                           grepl <- base::grepl
[17:03:17.976]                           restarts <- computeRestarts(cond)
[17:03:17.976]                           for (restart in restarts) {
[17:03:17.976]                             name <- restart$name
[17:03:17.976]                             if (is.null(name)) 
[17:03:17.976]                               next
[17:03:17.976]                             if (!grepl(pattern, name)) 
[17:03:17.976]                               next
[17:03:17.976]                             invokeRestart(restart)
[17:03:17.976]                             muffled <- TRUE
[17:03:17.976]                             break
[17:03:17.976]                           }
[17:03:17.976]                         }
[17:03:17.976]                       }
[17:03:17.976]                       invisible(muffled)
[17:03:17.976]                     }
[17:03:17.976]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.976]                   }
[17:03:17.976]                 }
[17:03:17.976]                 else {
[17:03:17.976]                   if (TRUE) {
[17:03:17.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:17.976]                     {
[17:03:17.976]                       inherits <- base::inherits
[17:03:17.976]                       invokeRestart <- base::invokeRestart
[17:03:17.976]                       is.null <- base::is.null
[17:03:17.976]                       muffled <- FALSE
[17:03:17.976]                       if (inherits(cond, "message")) {
[17:03:17.976]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:17.976]                         if (muffled) 
[17:03:17.976]                           invokeRestart("muffleMessage")
[17:03:17.976]                       }
[17:03:17.976]                       else if (inherits(cond, "warning")) {
[17:03:17.976]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:17.976]                         if (muffled) 
[17:03:17.976]                           invokeRestart("muffleWarning")
[17:03:17.976]                       }
[17:03:17.976]                       else if (inherits(cond, "condition")) {
[17:03:17.976]                         if (!is.null(pattern)) {
[17:03:17.976]                           computeRestarts <- base::computeRestarts
[17:03:17.976]                           grepl <- base::grepl
[17:03:17.976]                           restarts <- computeRestarts(cond)
[17:03:17.976]                           for (restart in restarts) {
[17:03:17.976]                             name <- restart$name
[17:03:17.976]                             if (is.null(name)) 
[17:03:17.976]                               next
[17:03:17.976]                             if (!grepl(pattern, name)) 
[17:03:17.976]                               next
[17:03:17.976]                             invokeRestart(restart)
[17:03:17.976]                             muffled <- TRUE
[17:03:17.976]                             break
[17:03:17.976]                           }
[17:03:17.976]                         }
[17:03:17.976]                       }
[17:03:17.976]                       invisible(muffled)
[17:03:17.976]                     }
[17:03:17.976]                     muffleCondition(cond, pattern = "^muffle")
[17:03:17.976]                   }
[17:03:17.976]                 }
[17:03:17.976]             }
[17:03:17.976]         }))
[17:03:17.976]     }, error = function(ex) {
[17:03:17.976]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:17.976]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:17.976]                 ...future.rng), started = ...future.startTime, 
[17:03:17.976]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:17.976]             version = "1.8"), class = "FutureResult")
[17:03:17.976]     }, finally = {
[17:03:17.976]         if (!identical(...future.workdir, getwd())) 
[17:03:17.976]             setwd(...future.workdir)
[17:03:17.976]         {
[17:03:17.976]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:17.976]                 ...future.oldOptions$nwarnings <- NULL
[17:03:17.976]             }
[17:03:17.976]             base::options(...future.oldOptions)
[17:03:17.976]             if (.Platform$OS.type == "windows") {
[17:03:17.976]                 old_names <- names(...future.oldEnvVars)
[17:03:17.976]                 envs <- base::Sys.getenv()
[17:03:17.976]                 names <- names(envs)
[17:03:17.976]                 common <- intersect(names, old_names)
[17:03:17.976]                 added <- setdiff(names, old_names)
[17:03:17.976]                 removed <- setdiff(old_names, names)
[17:03:17.976]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:17.976]                   envs[common]]
[17:03:17.976]                 NAMES <- toupper(changed)
[17:03:17.976]                 args <- list()
[17:03:17.976]                 for (kk in seq_along(NAMES)) {
[17:03:17.976]                   name <- changed[[kk]]
[17:03:17.976]                   NAME <- NAMES[[kk]]
[17:03:17.976]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.976]                     next
[17:03:17.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.976]                 }
[17:03:17.976]                 NAMES <- toupper(added)
[17:03:17.976]                 for (kk in seq_along(NAMES)) {
[17:03:17.976]                   name <- added[[kk]]
[17:03:17.976]                   NAME <- NAMES[[kk]]
[17:03:17.976]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.976]                     next
[17:03:17.976]                   args[[name]] <- ""
[17:03:17.976]                 }
[17:03:17.976]                 NAMES <- toupper(removed)
[17:03:17.976]                 for (kk in seq_along(NAMES)) {
[17:03:17.976]                   name <- removed[[kk]]
[17:03:17.976]                   NAME <- NAMES[[kk]]
[17:03:17.976]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:17.976]                     next
[17:03:17.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:17.976]                 }
[17:03:17.976]                 if (length(args) > 0) 
[17:03:17.976]                   base::do.call(base::Sys.setenv, args = args)
[17:03:17.976]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:17.976]             }
[17:03:17.976]             else {
[17:03:17.976]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:17.976]             }
[17:03:17.976]             {
[17:03:17.976]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:17.976]                   0L) {
[17:03:17.976]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:17.976]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:17.976]                   base::options(opts)
[17:03:17.976]                 }
[17:03:17.976]                 {
[17:03:17.976]                   {
[17:03:17.976]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:17.976]                     NULL
[17:03:17.976]                   }
[17:03:17.976]                   options(future.plan = NULL)
[17:03:17.976]                   if (is.na(NA_character_)) 
[17:03:17.976]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:17.976]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:17.976]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:17.976]                     .init = FALSE)
[17:03:17.976]                 }
[17:03:17.976]             }
[17:03:17.976]         }
[17:03:17.976]     })
[17:03:17.976]     if (TRUE) {
[17:03:17.976]         base::sink(type = "output", split = FALSE)
[17:03:17.976]         if (TRUE) {
[17:03:17.976]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:17.976]         }
[17:03:17.976]         else {
[17:03:17.976]             ...future.result["stdout"] <- base::list(NULL)
[17:03:17.976]         }
[17:03:17.976]         base::close(...future.stdout)
[17:03:17.976]         ...future.stdout <- NULL
[17:03:17.976]     }
[17:03:17.976]     ...future.result$conditions <- ...future.conditions
[17:03:17.976]     ...future.result$finished <- base::Sys.time()
[17:03:17.976]     ...future.result
[17:03:17.976] }
[17:03:18.028] MultisessionFuture started
[17:03:18.029] result() for ClusterFuture ...
[17:03:18.029] receiveMessageFromWorker() for ClusterFuture ...
[17:03:18.029] - Validating connection of MultisessionFuture
[17:03:18.074] - received message: FutureResult
[17:03:18.075] - Received FutureResult
[17:03:18.075] - Erased future from FutureRegistry
[17:03:18.075] result() for ClusterFuture ...
[17:03:18.075] - result already collected: FutureResult
[17:03:18.075] result() for ClusterFuture ... done
[17:03:18.075] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:18.075] result() for ClusterFuture ... done
[17:03:18.075] result() for ClusterFuture ...
[17:03:18.076] - result already collected: FutureResult
[17:03:18.076] result() for ClusterFuture ... done
[17:03:18.076] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:18.079] plan(): nbrOfWorkers() = 2
[17:03:18.079] getGlobalsAndPackages() ...
[17:03:18.080] Searching for globals...
[17:03:18.097] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:18.097] Searching for globals ... DONE
[17:03:18.097] Resolving globals: FALSE
[17:03:18.098] The total size of the 2 globals is 90.70 KiB (92872 bytes)
[17:03:18.099] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.58 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:18.099] - globals: [2] ‘nested’, ‘strategy2’
[17:03:18.099] - packages: [1] ‘future’
[17:03:18.099] getGlobalsAndPackages() ... DONE
[17:03:18.099] run() for ‘Future’ ...
[17:03:18.099] - state: ‘created’
[17:03:18.100] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:18.114] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:18.114] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:18.114]   - Field: ‘node’
[17:03:18.114]   - Field: ‘label’
[17:03:18.114]   - Field: ‘local’
[17:03:18.114]   - Field: ‘owner’
[17:03:18.114]   - Field: ‘envir’
[17:03:18.115]   - Field: ‘workers’
[17:03:18.115]   - Field: ‘packages’
[17:03:18.115]   - Field: ‘gc’
[17:03:18.115]   - Field: ‘conditions’
[17:03:18.115]   - Field: ‘persistent’
[17:03:18.115]   - Field: ‘expr’
[17:03:18.115]   - Field: ‘uuid’
[17:03:18.115]   - Field: ‘seed’
[17:03:18.115]   - Field: ‘version’
[17:03:18.115]   - Field: ‘result’
[17:03:18.115]   - Field: ‘asynchronous’
[17:03:18.116]   - Field: ‘calls’
[17:03:18.116]   - Field: ‘globals’
[17:03:18.116]   - Field: ‘stdout’
[17:03:18.116]   - Field: ‘earlySignal’
[17:03:18.116]   - Field: ‘lazy’
[17:03:18.116]   - Field: ‘state’
[17:03:18.116] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:18.116] - Launch lazy future ...
[17:03:18.116] Packages needed by the future expression (n = 1): ‘future’
[17:03:18.117] Packages needed by future strategies (n = 1): ‘future’
[17:03:18.117] {
[17:03:18.117]     {
[17:03:18.117]         {
[17:03:18.117]             ...future.startTime <- base::Sys.time()
[17:03:18.117]             {
[17:03:18.117]                 {
[17:03:18.117]                   {
[17:03:18.117]                     {
[17:03:18.117]                       {
[17:03:18.117]                         base::local({
[17:03:18.117]                           has_future <- base::requireNamespace("future", 
[17:03:18.117]                             quietly = TRUE)
[17:03:18.117]                           if (has_future) {
[17:03:18.117]                             ns <- base::getNamespace("future")
[17:03:18.117]                             version <- ns[[".package"]][["version"]]
[17:03:18.117]                             if (is.null(version)) 
[17:03:18.117]                               version <- utils::packageVersion("future")
[17:03:18.117]                           }
[17:03:18.117]                           else {
[17:03:18.117]                             version <- NULL
[17:03:18.117]                           }
[17:03:18.117]                           if (!has_future || version < "1.8.0") {
[17:03:18.117]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:18.117]                               "", base::R.version$version.string), 
[17:03:18.117]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:18.117]                                 base::R.version$platform, 8 * 
[17:03:18.117]                                   base::.Machine$sizeof.pointer), 
[17:03:18.117]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:18.117]                                 "release", "version")], collapse = " "), 
[17:03:18.117]                               hostname = base::Sys.info()[["nodename"]])
[17:03:18.117]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:18.117]                               info)
[17:03:18.117]                             info <- base::paste(info, collapse = "; ")
[17:03:18.117]                             if (!has_future) {
[17:03:18.117]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:18.117]                                 info)
[17:03:18.117]                             }
[17:03:18.117]                             else {
[17:03:18.117]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:18.117]                                 info, version)
[17:03:18.117]                             }
[17:03:18.117]                             base::stop(msg)
[17:03:18.117]                           }
[17:03:18.117]                         })
[17:03:18.117]                       }
[17:03:18.117]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:18.117]                       base::options(mc.cores = 1L)
[17:03:18.117]                     }
[17:03:18.117]                     base::local({
[17:03:18.117]                       for (pkg in "future") {
[17:03:18.117]                         base::loadNamespace(pkg)
[17:03:18.117]                         base::library(pkg, character.only = TRUE)
[17:03:18.117]                       }
[17:03:18.117]                     })
[17:03:18.117]                   }
[17:03:18.117]                   ...future.strategy.old <- future::plan("list")
[17:03:18.117]                   options(future.plan = NULL)
[17:03:18.117]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.117]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:18.117]                     envir = parent.frame()) 
[17:03:18.117]                   {
[17:03:18.117]                     default_workers <- missing(workers)
[17:03:18.117]                     if (is.function(workers)) 
[17:03:18.117]                       workers <- workers()
[17:03:18.117]                     workers <- structure(as.integer(workers), 
[17:03:18.117]                       class = class(workers))
[17:03:18.117]                     stop_if_not(is.finite(workers), workers >= 
[17:03:18.117]                       1L)
[17:03:18.117]                     if ((workers == 1L && !inherits(workers, 
[17:03:18.117]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:18.117]                       if (default_workers) 
[17:03:18.117]                         supportsMulticore(warn = TRUE)
[17:03:18.117]                       return(sequential(..., envir = envir))
[17:03:18.117]                     }
[17:03:18.117]                     oopts <- options(mc.cores = workers)
[17:03:18.117]                     on.exit(options(oopts))
[17:03:18.117]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:18.117]                       envir = envir)
[17:03:18.117]                     if (!future$lazy) 
[17:03:18.117]                       future <- run(future)
[17:03:18.117]                     invisible(future)
[17:03:18.117]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:18.117]                 }
[17:03:18.117]                 ...future.workdir <- getwd()
[17:03:18.117]             }
[17:03:18.117]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:18.117]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:18.117]         }
[17:03:18.117]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:18.117]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:18.117]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:18.117]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:18.117]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:18.117]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:18.117]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:18.117]             base::names(...future.oldOptions))
[17:03:18.117]     }
[17:03:18.117]     if (FALSE) {
[17:03:18.117]     }
[17:03:18.117]     else {
[17:03:18.117]         if (TRUE) {
[17:03:18.117]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:18.117]                 open = "w")
[17:03:18.117]         }
[17:03:18.117]         else {
[17:03:18.117]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:18.117]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:18.117]         }
[17:03:18.117]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:18.117]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:18.117]             base::sink(type = "output", split = FALSE)
[17:03:18.117]             base::close(...future.stdout)
[17:03:18.117]         }, add = TRUE)
[17:03:18.117]     }
[17:03:18.117]     ...future.frame <- base::sys.nframe()
[17:03:18.117]     ...future.conditions <- base::list()
[17:03:18.117]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:18.117]     if (FALSE) {
[17:03:18.117]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:18.117]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:18.117]     }
[17:03:18.117]     ...future.result <- base::tryCatch({
[17:03:18.117]         base::withCallingHandlers({
[17:03:18.117]             ...future.value <- base::withVisible(base::local({
[17:03:18.117]                 ...future.makeSendCondition <- base::local({
[17:03:18.117]                   sendCondition <- NULL
[17:03:18.117]                   function(frame = 1L) {
[17:03:18.117]                     if (is.function(sendCondition)) 
[17:03:18.117]                       return(sendCondition)
[17:03:18.117]                     ns <- getNamespace("parallel")
[17:03:18.117]                     if (exists("sendData", mode = "function", 
[17:03:18.117]                       envir = ns)) {
[17:03:18.117]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:18.117]                         envir = ns)
[17:03:18.117]                       envir <- sys.frame(frame)
[17:03:18.117]                       master <- NULL
[17:03:18.117]                       while (!identical(envir, .GlobalEnv) && 
[17:03:18.117]                         !identical(envir, emptyenv())) {
[17:03:18.117]                         if (exists("master", mode = "list", envir = envir, 
[17:03:18.117]                           inherits = FALSE)) {
[17:03:18.117]                           master <- get("master", mode = "list", 
[17:03:18.117]                             envir = envir, inherits = FALSE)
[17:03:18.117]                           if (inherits(master, c("SOCKnode", 
[17:03:18.117]                             "SOCK0node"))) {
[17:03:18.117]                             sendCondition <<- function(cond) {
[17:03:18.117]                               data <- list(type = "VALUE", value = cond, 
[17:03:18.117]                                 success = TRUE)
[17:03:18.117]                               parallel_sendData(master, data)
[17:03:18.117]                             }
[17:03:18.117]                             return(sendCondition)
[17:03:18.117]                           }
[17:03:18.117]                         }
[17:03:18.117]                         frame <- frame + 1L
[17:03:18.117]                         envir <- sys.frame(frame)
[17:03:18.117]                       }
[17:03:18.117]                     }
[17:03:18.117]                     sendCondition <<- function(cond) NULL
[17:03:18.117]                   }
[17:03:18.117]                 })
[17:03:18.117]                 withCallingHandlers({
[17:03:18.117]                   {
[17:03:18.117]                     a <- 1L
[17:03:18.117]                     plan_a <- unclass(future::plan("list"))
[17:03:18.117]                     nested_a <- nested[-1]
[17:03:18.117]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:18.117]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:18.117]                       strategy2))
[17:03:18.117]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:18.117]                       "init") <- NULL
[17:03:18.117]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:18.117]                       "init") <- NULL
[17:03:18.117]                     stopifnot(all.equal(plan_a, nested_a))
[17:03:18.117]                     y %<-% {
[17:03:18.117]                       b <- 2L
[17:03:18.117]                       plan_b <- future::plan("list")
[17:03:18.117]                       nested_b <- nested_a[-1]
[17:03:18.117]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:18.117]                         1L, inherits(plan_b[[1]], "future"), 
[17:03:18.117]                         inherits(future::plan("next"), "sequential"))
[17:03:18.117]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:18.117]                         b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:18.117]                     }
[17:03:18.117]                     y
[17:03:18.117]                   }
[17:03:18.117]                 }, immediateCondition = function(cond) {
[17:03:18.117]                   sendCondition <- ...future.makeSendCondition()
[17:03:18.117]                   sendCondition(cond)
[17:03:18.117]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.117]                   {
[17:03:18.117]                     inherits <- base::inherits
[17:03:18.117]                     invokeRestart <- base::invokeRestart
[17:03:18.117]                     is.null <- base::is.null
[17:03:18.117]                     muffled <- FALSE
[17:03:18.117]                     if (inherits(cond, "message")) {
[17:03:18.117]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:18.117]                       if (muffled) 
[17:03:18.117]                         invokeRestart("muffleMessage")
[17:03:18.117]                     }
[17:03:18.117]                     else if (inherits(cond, "warning")) {
[17:03:18.117]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:18.117]                       if (muffled) 
[17:03:18.117]                         invokeRestart("muffleWarning")
[17:03:18.117]                     }
[17:03:18.117]                     else if (inherits(cond, "condition")) {
[17:03:18.117]                       if (!is.null(pattern)) {
[17:03:18.117]                         computeRestarts <- base::computeRestarts
[17:03:18.117]                         grepl <- base::grepl
[17:03:18.117]                         restarts <- computeRestarts(cond)
[17:03:18.117]                         for (restart in restarts) {
[17:03:18.117]                           name <- restart$name
[17:03:18.117]                           if (is.null(name)) 
[17:03:18.117]                             next
[17:03:18.117]                           if (!grepl(pattern, name)) 
[17:03:18.117]                             next
[17:03:18.117]                           invokeRestart(restart)
[17:03:18.117]                           muffled <- TRUE
[17:03:18.117]                           break
[17:03:18.117]                         }
[17:03:18.117]                       }
[17:03:18.117]                     }
[17:03:18.117]                     invisible(muffled)
[17:03:18.117]                   }
[17:03:18.117]                   muffleCondition(cond)
[17:03:18.117]                 })
[17:03:18.117]             }))
[17:03:18.117]             future::FutureResult(value = ...future.value$value, 
[17:03:18.117]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.117]                   ...future.rng), globalenv = if (FALSE) 
[17:03:18.117]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:18.117]                     ...future.globalenv.names))
[17:03:18.117]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:18.117]         }, condition = base::local({
[17:03:18.117]             c <- base::c
[17:03:18.117]             inherits <- base::inherits
[17:03:18.117]             invokeRestart <- base::invokeRestart
[17:03:18.117]             length <- base::length
[17:03:18.117]             list <- base::list
[17:03:18.117]             seq.int <- base::seq.int
[17:03:18.117]             signalCondition <- base::signalCondition
[17:03:18.117]             sys.calls <- base::sys.calls
[17:03:18.117]             `[[` <- base::`[[`
[17:03:18.117]             `+` <- base::`+`
[17:03:18.117]             `<<-` <- base::`<<-`
[17:03:18.117]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:18.117]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:18.117]                   3L)]
[17:03:18.117]             }
[17:03:18.117]             function(cond) {
[17:03:18.117]                 is_error <- inherits(cond, "error")
[17:03:18.117]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:18.117]                   NULL)
[17:03:18.117]                 if (is_error) {
[17:03:18.117]                   sessionInformation <- function() {
[17:03:18.117]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:18.117]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:18.117]                       search = base::search(), system = base::Sys.info())
[17:03:18.117]                   }
[17:03:18.117]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.117]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:18.117]                     cond$call), session = sessionInformation(), 
[17:03:18.117]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:18.117]                   signalCondition(cond)
[17:03:18.117]                 }
[17:03:18.117]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:18.117]                 "immediateCondition"))) {
[17:03:18.117]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:18.117]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.117]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:18.117]                   if (TRUE && !signal) {
[17:03:18.117]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.117]                     {
[17:03:18.117]                       inherits <- base::inherits
[17:03:18.117]                       invokeRestart <- base::invokeRestart
[17:03:18.117]                       is.null <- base::is.null
[17:03:18.117]                       muffled <- FALSE
[17:03:18.117]                       if (inherits(cond, "message")) {
[17:03:18.117]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.117]                         if (muffled) 
[17:03:18.117]                           invokeRestart("muffleMessage")
[17:03:18.117]                       }
[17:03:18.117]                       else if (inherits(cond, "warning")) {
[17:03:18.117]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.117]                         if (muffled) 
[17:03:18.117]                           invokeRestart("muffleWarning")
[17:03:18.117]                       }
[17:03:18.117]                       else if (inherits(cond, "condition")) {
[17:03:18.117]                         if (!is.null(pattern)) {
[17:03:18.117]                           computeRestarts <- base::computeRestarts
[17:03:18.117]                           grepl <- base::grepl
[17:03:18.117]                           restarts <- computeRestarts(cond)
[17:03:18.117]                           for (restart in restarts) {
[17:03:18.117]                             name <- restart$name
[17:03:18.117]                             if (is.null(name)) 
[17:03:18.117]                               next
[17:03:18.117]                             if (!grepl(pattern, name)) 
[17:03:18.117]                               next
[17:03:18.117]                             invokeRestart(restart)
[17:03:18.117]                             muffled <- TRUE
[17:03:18.117]                             break
[17:03:18.117]                           }
[17:03:18.117]                         }
[17:03:18.117]                       }
[17:03:18.117]                       invisible(muffled)
[17:03:18.117]                     }
[17:03:18.117]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.117]                   }
[17:03:18.117]                 }
[17:03:18.117]                 else {
[17:03:18.117]                   if (TRUE) {
[17:03:18.117]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.117]                     {
[17:03:18.117]                       inherits <- base::inherits
[17:03:18.117]                       invokeRestart <- base::invokeRestart
[17:03:18.117]                       is.null <- base::is.null
[17:03:18.117]                       muffled <- FALSE
[17:03:18.117]                       if (inherits(cond, "message")) {
[17:03:18.117]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.117]                         if (muffled) 
[17:03:18.117]                           invokeRestart("muffleMessage")
[17:03:18.117]                       }
[17:03:18.117]                       else if (inherits(cond, "warning")) {
[17:03:18.117]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.117]                         if (muffled) 
[17:03:18.117]                           invokeRestart("muffleWarning")
[17:03:18.117]                       }
[17:03:18.117]                       else if (inherits(cond, "condition")) {
[17:03:18.117]                         if (!is.null(pattern)) {
[17:03:18.117]                           computeRestarts <- base::computeRestarts
[17:03:18.117]                           grepl <- base::grepl
[17:03:18.117]                           restarts <- computeRestarts(cond)
[17:03:18.117]                           for (restart in restarts) {
[17:03:18.117]                             name <- restart$name
[17:03:18.117]                             if (is.null(name)) 
[17:03:18.117]                               next
[17:03:18.117]                             if (!grepl(pattern, name)) 
[17:03:18.117]                               next
[17:03:18.117]                             invokeRestart(restart)
[17:03:18.117]                             muffled <- TRUE
[17:03:18.117]                             break
[17:03:18.117]                           }
[17:03:18.117]                         }
[17:03:18.117]                       }
[17:03:18.117]                       invisible(muffled)
[17:03:18.117]                     }
[17:03:18.117]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.117]                   }
[17:03:18.117]                 }
[17:03:18.117]             }
[17:03:18.117]         }))
[17:03:18.117]     }, error = function(ex) {
[17:03:18.117]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:18.117]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.117]                 ...future.rng), started = ...future.startTime, 
[17:03:18.117]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:18.117]             version = "1.8"), class = "FutureResult")
[17:03:18.117]     }, finally = {
[17:03:18.117]         if (!identical(...future.workdir, getwd())) 
[17:03:18.117]             setwd(...future.workdir)
[17:03:18.117]         {
[17:03:18.117]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:18.117]                 ...future.oldOptions$nwarnings <- NULL
[17:03:18.117]             }
[17:03:18.117]             base::options(...future.oldOptions)
[17:03:18.117]             if (.Platform$OS.type == "windows") {
[17:03:18.117]                 old_names <- names(...future.oldEnvVars)
[17:03:18.117]                 envs <- base::Sys.getenv()
[17:03:18.117]                 names <- names(envs)
[17:03:18.117]                 common <- intersect(names, old_names)
[17:03:18.117]                 added <- setdiff(names, old_names)
[17:03:18.117]                 removed <- setdiff(old_names, names)
[17:03:18.117]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:18.117]                   envs[common]]
[17:03:18.117]                 NAMES <- toupper(changed)
[17:03:18.117]                 args <- list()
[17:03:18.117]                 for (kk in seq_along(NAMES)) {
[17:03:18.117]                   name <- changed[[kk]]
[17:03:18.117]                   NAME <- NAMES[[kk]]
[17:03:18.117]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.117]                     next
[17:03:18.117]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.117]                 }
[17:03:18.117]                 NAMES <- toupper(added)
[17:03:18.117]                 for (kk in seq_along(NAMES)) {
[17:03:18.117]                   name <- added[[kk]]
[17:03:18.117]                   NAME <- NAMES[[kk]]
[17:03:18.117]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.117]                     next
[17:03:18.117]                   args[[name]] <- ""
[17:03:18.117]                 }
[17:03:18.117]                 NAMES <- toupper(removed)
[17:03:18.117]                 for (kk in seq_along(NAMES)) {
[17:03:18.117]                   name <- removed[[kk]]
[17:03:18.117]                   NAME <- NAMES[[kk]]
[17:03:18.117]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.117]                     next
[17:03:18.117]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.117]                 }
[17:03:18.117]                 if (length(args) > 0) 
[17:03:18.117]                   base::do.call(base::Sys.setenv, args = args)
[17:03:18.117]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:18.117]             }
[17:03:18.117]             else {
[17:03:18.117]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:18.117]             }
[17:03:18.117]             {
[17:03:18.117]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:18.117]                   0L) {
[17:03:18.117]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:18.117]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:18.117]                   base::options(opts)
[17:03:18.117]                 }
[17:03:18.117]                 {
[17:03:18.117]                   {
[17:03:18.117]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:18.117]                     NULL
[17:03:18.117]                   }
[17:03:18.117]                   options(future.plan = NULL)
[17:03:18.117]                   if (is.na(NA_character_)) 
[17:03:18.117]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.117]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:18.117]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:18.117]                     .init = FALSE)
[17:03:18.117]                 }
[17:03:18.117]             }
[17:03:18.117]         }
[17:03:18.117]     })
[17:03:18.117]     if (TRUE) {
[17:03:18.117]         base::sink(type = "output", split = FALSE)
[17:03:18.117]         if (TRUE) {
[17:03:18.117]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:18.117]         }
[17:03:18.117]         else {
[17:03:18.117]             ...future.result["stdout"] <- base::list(NULL)
[17:03:18.117]         }
[17:03:18.117]         base::close(...future.stdout)
[17:03:18.117]         ...future.stdout <- NULL
[17:03:18.117]     }
[17:03:18.117]     ...future.result$conditions <- ...future.conditions
[17:03:18.117]     ...future.result$finished <- base::Sys.time()
[17:03:18.117]     ...future.result
[17:03:18.117] }
[17:03:18.120] Exporting 2 global objects (90.70 KiB) to cluster node #1 ...
[17:03:18.120] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ...
[17:03:18.168] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ... DONE
[17:03:18.168] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[17:03:18.168] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[17:03:18.169] Exporting 2 global objects (90.70 KiB) to cluster node #1 ... DONE
[17:03:18.169] MultisessionFuture started
[17:03:18.169] - Launch lazy future ... done
[17:03:18.169] run() for ‘MultisessionFuture’ ... done
[17:03:18.170] result() for ClusterFuture ...
[17:03:18.170] receiveMessageFromWorker() for ClusterFuture ...
[17:03:18.170] - Validating connection of MultisessionFuture
[17:03:18.241] - received message: FutureResult
[17:03:18.241] - Received FutureResult
[17:03:18.241] - Erased future from FutureRegistry
[17:03:18.241] result() for ClusterFuture ...
[17:03:18.242] - result already collected: FutureResult
[17:03:18.242] result() for ClusterFuture ... done
[17:03:18.242] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:18.242] result() for ClusterFuture ... done
[17:03:18.242] result() for ClusterFuture ...
[17:03:18.242] - result already collected: FutureResult
[17:03:18.242] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:18.247] getGlobalsAndPackages() ...
[17:03:18.247] Searching for globals...
[17:03:18.249] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:18.249] Searching for globals ... DONE
[17:03:18.249] Resolving globals: FALSE
[17:03:18.249] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:18.250] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:18.250] - globals: [1] ‘data’
[17:03:18.250] - packages: [1] ‘future’
[17:03:18.250] getGlobalsAndPackages() ... DONE
[17:03:18.250] run() for ‘Future’ ...
[17:03:18.251] - state: ‘created’
[17:03:18.251] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:18.264] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:18.264] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:18.264]   - Field: ‘node’
[17:03:18.265]   - Field: ‘label’
[17:03:18.265]   - Field: ‘local’
[17:03:18.265]   - Field: ‘owner’
[17:03:18.265]   - Field: ‘envir’
[17:03:18.265]   - Field: ‘workers’
[17:03:18.265]   - Field: ‘packages’
[17:03:18.265]   - Field: ‘gc’
[17:03:18.265]   - Field: ‘conditions’
[17:03:18.265]   - Field: ‘persistent’
[17:03:18.265]   - Field: ‘expr’
[17:03:18.265]   - Field: ‘uuid’
[17:03:18.266]   - Field: ‘seed’
[17:03:18.266]   - Field: ‘version’
[17:03:18.266]   - Field: ‘result’
[17:03:18.266]   - Field: ‘asynchronous’
[17:03:18.266]   - Field: ‘calls’
[17:03:18.266]   - Field: ‘globals’
[17:03:18.266]   - Field: ‘stdout’
[17:03:18.266]   - Field: ‘earlySignal’
[17:03:18.266]   - Field: ‘lazy’
[17:03:18.266]   - Field: ‘state’
[17:03:18.266] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:18.267] - Launch lazy future ...
[17:03:18.267] Packages needed by the future expression (n = 1): ‘future’
[17:03:18.267] Packages needed by future strategies (n = 1): ‘future’
[17:03:18.268] {
[17:03:18.268]     {
[17:03:18.268]         {
[17:03:18.268]             ...future.startTime <- base::Sys.time()
[17:03:18.268]             {
[17:03:18.268]                 {
[17:03:18.268]                   {
[17:03:18.268]                     {
[17:03:18.268]                       {
[17:03:18.268]                         base::local({
[17:03:18.268]                           has_future <- base::requireNamespace("future", 
[17:03:18.268]                             quietly = TRUE)
[17:03:18.268]                           if (has_future) {
[17:03:18.268]                             ns <- base::getNamespace("future")
[17:03:18.268]                             version <- ns[[".package"]][["version"]]
[17:03:18.268]                             if (is.null(version)) 
[17:03:18.268]                               version <- utils::packageVersion("future")
[17:03:18.268]                           }
[17:03:18.268]                           else {
[17:03:18.268]                             version <- NULL
[17:03:18.268]                           }
[17:03:18.268]                           if (!has_future || version < "1.8.0") {
[17:03:18.268]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:18.268]                               "", base::R.version$version.string), 
[17:03:18.268]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:18.268]                                 base::R.version$platform, 8 * 
[17:03:18.268]                                   base::.Machine$sizeof.pointer), 
[17:03:18.268]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:18.268]                                 "release", "version")], collapse = " "), 
[17:03:18.268]                               hostname = base::Sys.info()[["nodename"]])
[17:03:18.268]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:18.268]                               info)
[17:03:18.268]                             info <- base::paste(info, collapse = "; ")
[17:03:18.268]                             if (!has_future) {
[17:03:18.268]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:18.268]                                 info)
[17:03:18.268]                             }
[17:03:18.268]                             else {
[17:03:18.268]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:18.268]                                 info, version)
[17:03:18.268]                             }
[17:03:18.268]                             base::stop(msg)
[17:03:18.268]                           }
[17:03:18.268]                         })
[17:03:18.268]                       }
[17:03:18.268]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:18.268]                       base::options(mc.cores = 1L)
[17:03:18.268]                     }
[17:03:18.268]                     base::local({
[17:03:18.268]                       for (pkg in "future") {
[17:03:18.268]                         base::loadNamespace(pkg)
[17:03:18.268]                         base::library(pkg, character.only = TRUE)
[17:03:18.268]                       }
[17:03:18.268]                     })
[17:03:18.268]                   }
[17:03:18.268]                   ...future.strategy.old <- future::plan("list")
[17:03:18.268]                   options(future.plan = NULL)
[17:03:18.268]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.268]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[17:03:18.268]                     envir = parent.frame()) 
[17:03:18.268]                   {
[17:03:18.268]                     default_workers <- missing(workers)
[17:03:18.268]                     if (is.function(workers)) 
[17:03:18.268]                       workers <- workers()
[17:03:18.268]                     workers <- structure(as.integer(workers), 
[17:03:18.268]                       class = class(workers))
[17:03:18.268]                     stop_if_not(is.finite(workers), workers >= 
[17:03:18.268]                       1L)
[17:03:18.268]                     if ((workers == 1L && !inherits(workers, 
[17:03:18.268]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:03:18.268]                       if (default_workers) 
[17:03:18.268]                         supportsMulticore(warn = TRUE)
[17:03:18.268]                       return(sequential(..., envir = envir))
[17:03:18.268]                     }
[17:03:18.268]                     oopts <- options(mc.cores = workers)
[17:03:18.268]                     on.exit(options(oopts))
[17:03:18.268]                     future <- MulticoreFuture(..., workers = workers, 
[17:03:18.268]                       envir = envir)
[17:03:18.268]                     if (!future$lazy) 
[17:03:18.268]                       future <- run(future)
[17:03:18.268]                     invisible(future)
[17:03:18.268]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:18.268]                 }
[17:03:18.268]                 ...future.workdir <- getwd()
[17:03:18.268]             }
[17:03:18.268]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:18.268]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:18.268]         }
[17:03:18.268]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:18.268]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:18.268]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:18.268]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:18.268]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:18.268]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:18.268]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:18.268]             base::names(...future.oldOptions))
[17:03:18.268]     }
[17:03:18.268]     if (FALSE) {
[17:03:18.268]     }
[17:03:18.268]     else {
[17:03:18.268]         if (TRUE) {
[17:03:18.268]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:18.268]                 open = "w")
[17:03:18.268]         }
[17:03:18.268]         else {
[17:03:18.268]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:18.268]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:18.268]         }
[17:03:18.268]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:18.268]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:18.268]             base::sink(type = "output", split = FALSE)
[17:03:18.268]             base::close(...future.stdout)
[17:03:18.268]         }, add = TRUE)
[17:03:18.268]     }
[17:03:18.268]     ...future.frame <- base::sys.nframe()
[17:03:18.268]     ...future.conditions <- base::list()
[17:03:18.268]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:18.268]     if (FALSE) {
[17:03:18.268]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:18.268]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:18.268]     }
[17:03:18.268]     ...future.result <- base::tryCatch({
[17:03:18.268]         base::withCallingHandlers({
[17:03:18.268]             ...future.value <- base::withVisible(base::local({
[17:03:18.268]                 ...future.makeSendCondition <- base::local({
[17:03:18.268]                   sendCondition <- NULL
[17:03:18.268]                   function(frame = 1L) {
[17:03:18.268]                     if (is.function(sendCondition)) 
[17:03:18.268]                       return(sendCondition)
[17:03:18.268]                     ns <- getNamespace("parallel")
[17:03:18.268]                     if (exists("sendData", mode = "function", 
[17:03:18.268]                       envir = ns)) {
[17:03:18.268]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:18.268]                         envir = ns)
[17:03:18.268]                       envir <- sys.frame(frame)
[17:03:18.268]                       master <- NULL
[17:03:18.268]                       while (!identical(envir, .GlobalEnv) && 
[17:03:18.268]                         !identical(envir, emptyenv())) {
[17:03:18.268]                         if (exists("master", mode = "list", envir = envir, 
[17:03:18.268]                           inherits = FALSE)) {
[17:03:18.268]                           master <- get("master", mode = "list", 
[17:03:18.268]                             envir = envir, inherits = FALSE)
[17:03:18.268]                           if (inherits(master, c("SOCKnode", 
[17:03:18.268]                             "SOCK0node"))) {
[17:03:18.268]                             sendCondition <<- function(cond) {
[17:03:18.268]                               data <- list(type = "VALUE", value = cond, 
[17:03:18.268]                                 success = TRUE)
[17:03:18.268]                               parallel_sendData(master, data)
[17:03:18.268]                             }
[17:03:18.268]                             return(sendCondition)
[17:03:18.268]                           }
[17:03:18.268]                         }
[17:03:18.268]                         frame <- frame + 1L
[17:03:18.268]                         envir <- sys.frame(frame)
[17:03:18.268]                       }
[17:03:18.268]                     }
[17:03:18.268]                     sendCondition <<- function(cond) NULL
[17:03:18.268]                   }
[17:03:18.268]                 })
[17:03:18.268]                 withCallingHandlers({
[17:03:18.268]                   {
[17:03:18.268]                     value(future(subset(data, a == 2)))
[17:03:18.268]                   }
[17:03:18.268]                 }, immediateCondition = function(cond) {
[17:03:18.268]                   sendCondition <- ...future.makeSendCondition()
[17:03:18.268]                   sendCondition(cond)
[17:03:18.268]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.268]                   {
[17:03:18.268]                     inherits <- base::inherits
[17:03:18.268]                     invokeRestart <- base::invokeRestart
[17:03:18.268]                     is.null <- base::is.null
[17:03:18.268]                     muffled <- FALSE
[17:03:18.268]                     if (inherits(cond, "message")) {
[17:03:18.268]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:18.268]                       if (muffled) 
[17:03:18.268]                         invokeRestart("muffleMessage")
[17:03:18.268]                     }
[17:03:18.268]                     else if (inherits(cond, "warning")) {
[17:03:18.268]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:18.268]                       if (muffled) 
[17:03:18.268]                         invokeRestart("muffleWarning")
[17:03:18.268]                     }
[17:03:18.268]                     else if (inherits(cond, "condition")) {
[17:03:18.268]                       if (!is.null(pattern)) {
[17:03:18.268]                         computeRestarts <- base::computeRestarts
[17:03:18.268]                         grepl <- base::grepl
[17:03:18.268]                         restarts <- computeRestarts(cond)
[17:03:18.268]                         for (restart in restarts) {
[17:03:18.268]                           name <- restart$name
[17:03:18.268]                           if (is.null(name)) 
[17:03:18.268]                             next
[17:03:18.268]                           if (!grepl(pattern, name)) 
[17:03:18.268]                             next
[17:03:18.268]                           invokeRestart(restart)
[17:03:18.268]                           muffled <- TRUE
[17:03:18.268]                           break
[17:03:18.268]                         }
[17:03:18.268]                       }
[17:03:18.268]                     }
[17:03:18.268]                     invisible(muffled)
[17:03:18.268]                   }
[17:03:18.268]                   muffleCondition(cond)
[17:03:18.268]                 })
[17:03:18.268]             }))
[17:03:18.268]             future::FutureResult(value = ...future.value$value, 
[17:03:18.268]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.268]                   ...future.rng), globalenv = if (FALSE) 
[17:03:18.268]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:18.268]                     ...future.globalenv.names))
[17:03:18.268]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:18.268]         }, condition = base::local({
[17:03:18.268]             c <- base::c
[17:03:18.268]             inherits <- base::inherits
[17:03:18.268]             invokeRestart <- base::invokeRestart
[17:03:18.268]             length <- base::length
[17:03:18.268]             list <- base::list
[17:03:18.268]             seq.int <- base::seq.int
[17:03:18.268]             signalCondition <- base::signalCondition
[17:03:18.268]             sys.calls <- base::sys.calls
[17:03:18.268]             `[[` <- base::`[[`
[17:03:18.268]             `+` <- base::`+`
[17:03:18.268]             `<<-` <- base::`<<-`
[17:03:18.268]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:18.268]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:18.268]                   3L)]
[17:03:18.268]             }
[17:03:18.268]             function(cond) {
[17:03:18.268]                 is_error <- inherits(cond, "error")
[17:03:18.268]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:18.268]                   NULL)
[17:03:18.268]                 if (is_error) {
[17:03:18.268]                   sessionInformation <- function() {
[17:03:18.268]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:18.268]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:18.268]                       search = base::search(), system = base::Sys.info())
[17:03:18.268]                   }
[17:03:18.268]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.268]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:18.268]                     cond$call), session = sessionInformation(), 
[17:03:18.268]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:18.268]                   signalCondition(cond)
[17:03:18.268]                 }
[17:03:18.268]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:18.268]                 "immediateCondition"))) {
[17:03:18.268]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:18.268]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.268]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:18.268]                   if (TRUE && !signal) {
[17:03:18.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.268]                     {
[17:03:18.268]                       inherits <- base::inherits
[17:03:18.268]                       invokeRestart <- base::invokeRestart
[17:03:18.268]                       is.null <- base::is.null
[17:03:18.268]                       muffled <- FALSE
[17:03:18.268]                       if (inherits(cond, "message")) {
[17:03:18.268]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.268]                         if (muffled) 
[17:03:18.268]                           invokeRestart("muffleMessage")
[17:03:18.268]                       }
[17:03:18.268]                       else if (inherits(cond, "warning")) {
[17:03:18.268]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.268]                         if (muffled) 
[17:03:18.268]                           invokeRestart("muffleWarning")
[17:03:18.268]                       }
[17:03:18.268]                       else if (inherits(cond, "condition")) {
[17:03:18.268]                         if (!is.null(pattern)) {
[17:03:18.268]                           computeRestarts <- base::computeRestarts
[17:03:18.268]                           grepl <- base::grepl
[17:03:18.268]                           restarts <- computeRestarts(cond)
[17:03:18.268]                           for (restart in restarts) {
[17:03:18.268]                             name <- restart$name
[17:03:18.268]                             if (is.null(name)) 
[17:03:18.268]                               next
[17:03:18.268]                             if (!grepl(pattern, name)) 
[17:03:18.268]                               next
[17:03:18.268]                             invokeRestart(restart)
[17:03:18.268]                             muffled <- TRUE
[17:03:18.268]                             break
[17:03:18.268]                           }
[17:03:18.268]                         }
[17:03:18.268]                       }
[17:03:18.268]                       invisible(muffled)
[17:03:18.268]                     }
[17:03:18.268]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.268]                   }
[17:03:18.268]                 }
[17:03:18.268]                 else {
[17:03:18.268]                   if (TRUE) {
[17:03:18.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.268]                     {
[17:03:18.268]                       inherits <- base::inherits
[17:03:18.268]                       invokeRestart <- base::invokeRestart
[17:03:18.268]                       is.null <- base::is.null
[17:03:18.268]                       muffled <- FALSE
[17:03:18.268]                       if (inherits(cond, "message")) {
[17:03:18.268]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.268]                         if (muffled) 
[17:03:18.268]                           invokeRestart("muffleMessage")
[17:03:18.268]                       }
[17:03:18.268]                       else if (inherits(cond, "warning")) {
[17:03:18.268]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.268]                         if (muffled) 
[17:03:18.268]                           invokeRestart("muffleWarning")
[17:03:18.268]                       }
[17:03:18.268]                       else if (inherits(cond, "condition")) {
[17:03:18.268]                         if (!is.null(pattern)) {
[17:03:18.268]                           computeRestarts <- base::computeRestarts
[17:03:18.268]                           grepl <- base::grepl
[17:03:18.268]                           restarts <- computeRestarts(cond)
[17:03:18.268]                           for (restart in restarts) {
[17:03:18.268]                             name <- restart$name
[17:03:18.268]                             if (is.null(name)) 
[17:03:18.268]                               next
[17:03:18.268]                             if (!grepl(pattern, name)) 
[17:03:18.268]                               next
[17:03:18.268]                             invokeRestart(restart)
[17:03:18.268]                             muffled <- TRUE
[17:03:18.268]                             break
[17:03:18.268]                           }
[17:03:18.268]                         }
[17:03:18.268]                       }
[17:03:18.268]                       invisible(muffled)
[17:03:18.268]                     }
[17:03:18.268]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.268]                   }
[17:03:18.268]                 }
[17:03:18.268]             }
[17:03:18.268]         }))
[17:03:18.268]     }, error = function(ex) {
[17:03:18.268]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:18.268]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.268]                 ...future.rng), started = ...future.startTime, 
[17:03:18.268]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:18.268]             version = "1.8"), class = "FutureResult")
[17:03:18.268]     }, finally = {
[17:03:18.268]         if (!identical(...future.workdir, getwd())) 
[17:03:18.268]             setwd(...future.workdir)
[17:03:18.268]         {
[17:03:18.268]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:18.268]                 ...future.oldOptions$nwarnings <- NULL
[17:03:18.268]             }
[17:03:18.268]             base::options(...future.oldOptions)
[17:03:18.268]             if (.Platform$OS.type == "windows") {
[17:03:18.268]                 old_names <- names(...future.oldEnvVars)
[17:03:18.268]                 envs <- base::Sys.getenv()
[17:03:18.268]                 names <- names(envs)
[17:03:18.268]                 common <- intersect(names, old_names)
[17:03:18.268]                 added <- setdiff(names, old_names)
[17:03:18.268]                 removed <- setdiff(old_names, names)
[17:03:18.268]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:18.268]                   envs[common]]
[17:03:18.268]                 NAMES <- toupper(changed)
[17:03:18.268]                 args <- list()
[17:03:18.268]                 for (kk in seq_along(NAMES)) {
[17:03:18.268]                   name <- changed[[kk]]
[17:03:18.268]                   NAME <- NAMES[[kk]]
[17:03:18.268]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.268]                     next
[17:03:18.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.268]                 }
[17:03:18.268]                 NAMES <- toupper(added)
[17:03:18.268]                 for (kk in seq_along(NAMES)) {
[17:03:18.268]                   name <- added[[kk]]
[17:03:18.268]                   NAME <- NAMES[[kk]]
[17:03:18.268]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.268]                     next
[17:03:18.268]                   args[[name]] <- ""
[17:03:18.268]                 }
[17:03:18.268]                 NAMES <- toupper(removed)
[17:03:18.268]                 for (kk in seq_along(NAMES)) {
[17:03:18.268]                   name <- removed[[kk]]
[17:03:18.268]                   NAME <- NAMES[[kk]]
[17:03:18.268]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.268]                     next
[17:03:18.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.268]                 }
[17:03:18.268]                 if (length(args) > 0) 
[17:03:18.268]                   base::do.call(base::Sys.setenv, args = args)
[17:03:18.268]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:18.268]             }
[17:03:18.268]             else {
[17:03:18.268]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:18.268]             }
[17:03:18.268]             {
[17:03:18.268]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:18.268]                   0L) {
[17:03:18.268]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:18.268]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:18.268]                   base::options(opts)
[17:03:18.268]                 }
[17:03:18.268]                 {
[17:03:18.268]                   {
[17:03:18.268]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:18.268]                     NULL
[17:03:18.268]                   }
[17:03:18.268]                   options(future.plan = NULL)
[17:03:18.268]                   if (is.na(NA_character_)) 
[17:03:18.268]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.268]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:18.268]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:18.268]                     .init = FALSE)
[17:03:18.268]                 }
[17:03:18.268]             }
[17:03:18.268]         }
[17:03:18.268]     })
[17:03:18.268]     if (TRUE) {
[17:03:18.268]         base::sink(type = "output", split = FALSE)
[17:03:18.268]         if (TRUE) {
[17:03:18.268]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:18.268]         }
[17:03:18.268]         else {
[17:03:18.268]             ...future.result["stdout"] <- base::list(NULL)
[17:03:18.268]         }
[17:03:18.268]         base::close(...future.stdout)
[17:03:18.268]         ...future.stdout <- NULL
[17:03:18.268]     }
[17:03:18.268]     ...future.result$conditions <- ...future.conditions
[17:03:18.268]     ...future.result$finished <- base::Sys.time()
[17:03:18.268]     ...future.result
[17:03:18.268] }
[17:03:18.270] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[17:03:18.270] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[17:03:18.271] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[17:03:18.271] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[17:03:18.271] MultisessionFuture started
[17:03:18.271] - Launch lazy future ... done
[17:03:18.272] run() for ‘MultisessionFuture’ ... done
[17:03:18.272] result() for ClusterFuture ...
[17:03:18.272] receiveMessageFromWorker() for ClusterFuture ...
[17:03:18.272] - Validating connection of MultisessionFuture
[17:03:18.326] - received message: FutureResult
[17:03:18.326] - Received FutureResult
[17:03:18.326] - Erased future from FutureRegistry
[17:03:18.326] result() for ClusterFuture ...
[17:03:18.327] - result already collected: FutureResult
[17:03:18.327] result() for ClusterFuture ... done
[17:03:18.327] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:18.327] result() for ClusterFuture ... done
[17:03:18.327] result() for ClusterFuture ...
[17:03:18.327] - result already collected: FutureResult
[17:03:18.327] result() for ClusterFuture ... done
- plan(list('multisession', 'multicore')) ... DONE
- plan(list('multisession', 'multisession')) ...
[17:03:18.328] plan(): Setting new future strategy stack:
[17:03:18.328] List of future strategies:
[17:03:18.328] 1. multisession:
[17:03:18.328]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:18.328]    - tweaked: FALSE
[17:03:18.328]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:18.328] 2. multisession:
[17:03:18.328]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:18.328]    - tweaked: FALSE
[17:03:18.328]    - call: plan(list(a = strategy1, b = strategy2))
[17:03:18.328] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:18.328] multisession:
[17:03:18.328] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:18.328] - tweaked: FALSE
[17:03:18.328] - call: plan(list(a = strategy1, b = strategy2))
[17:03:18.333] getGlobalsAndPackages() ...
[17:03:18.333] Not searching for globals
[17:03:18.333] - globals: [0] <none>
[17:03:18.333] getGlobalsAndPackages() ... DONE
[17:03:18.334] [local output] makeClusterPSOCK() ...
[17:03:18.338] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:18.339] [local output] Base port: 11845
[17:03:18.339] [local output] Getting setup options for 2 cluster nodes ...
[17:03:18.339] [local output]  - Node 1 of 2 ...
[17:03:18.339] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:18.340] [local output] Rscript port: 11845

[17:03:18.340] [local output]  - Node 2 of 2 ...
[17:03:18.341] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:18.341] [local output] Rscript port: 11845

[17:03:18.341] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:18.342] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:18.342] [local output] Setting up PSOCK nodes in parallel
[17:03:18.342] List of 36
[17:03:18.342]  $ worker          : chr "localhost"
[17:03:18.342]   ..- attr(*, "localhost")= logi TRUE
[17:03:18.342]  $ master          : chr "localhost"
[17:03:18.342]  $ port            : int 11845
[17:03:18.342]  $ connectTimeout  : num 120
[17:03:18.342]  $ timeout         : num 2592000
[17:03:18.342]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:18.342]  $ homogeneous     : logi TRUE
[17:03:18.342]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:18.342]  $ rscript_envs    : NULL
[17:03:18.342]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:18.342]  $ rscript_startup : NULL
[17:03:18.342]  $ rscript_sh      : chr "sh"
[17:03:18.342]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:18.342]  $ methods         : logi TRUE
[17:03:18.342]  $ socketOptions   : chr "no-delay"
[17:03:18.342]  $ useXDR          : logi FALSE
[17:03:18.342]  $ outfile         : chr "/dev/null"
[17:03:18.342]  $ renice          : int NA
[17:03:18.342]  $ rshcmd          : NULL
[17:03:18.342]  $ user            : chr(0) 
[17:03:18.342]  $ revtunnel       : logi FALSE
[17:03:18.342]  $ rshlogfile      : NULL
[17:03:18.342]  $ rshopts         : chr(0) 
[17:03:18.342]  $ rank            : int 1
[17:03:18.342]  $ manual          : logi FALSE
[17:03:18.342]  $ dryrun          : logi FALSE
[17:03:18.342]  $ quiet           : logi FALSE
[17:03:18.342]  $ setup_strategy  : chr "parallel"
[17:03:18.342]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:18.342]  $ pidfile         : chr "/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9143b84b36.pid"
[17:03:18.342]  $ rshcmd_label    : NULL
[17:03:18.342]  $ rsh_call        : NULL
[17:03:18.342]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:18.342]  $ localMachine    : logi TRUE
[17:03:18.342]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:18.342]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:18.342]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:18.342]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:18.342]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:18.342]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:18.342]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:18.342]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:18.342]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:18.342]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:18.342]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:18.342]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:18.342]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:18.342]  $ arguments       :List of 28
[17:03:18.342]   ..$ worker          : chr "localhost"
[17:03:18.342]   ..$ master          : NULL
[17:03:18.342]   ..$ port            : int 11845
[17:03:18.342]   ..$ connectTimeout  : num 120
[17:03:18.342]   ..$ timeout         : num 2592000
[17:03:18.342]   ..$ rscript         : NULL
[17:03:18.342]   ..$ homogeneous     : NULL
[17:03:18.342]   ..$ rscript_args    : NULL
[17:03:18.342]   ..$ rscript_envs    : NULL
[17:03:18.342]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:18.342]   ..$ rscript_startup : NULL
[17:03:18.342]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:18.342]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:18.342]   ..$ methods         : logi TRUE
[17:03:18.342]   ..$ socketOptions   : chr "no-delay"
[17:03:18.342]   ..$ useXDR          : logi FALSE
[17:03:18.342]   ..$ outfile         : chr "/dev/null"
[17:03:18.342]   ..$ renice          : int NA
[17:03:18.342]   ..$ rshcmd          : NULL
[17:03:18.342]   ..$ user            : NULL
[17:03:18.342]   ..$ revtunnel       : logi NA
[17:03:18.342]   ..$ rshlogfile      : NULL
[17:03:18.342]   ..$ rshopts         : NULL
[17:03:18.342]   ..$ rank            : int 1
[17:03:18.342]   ..$ manual          : logi FALSE
[17:03:18.342]   ..$ dryrun          : logi FALSE
[17:03:18.342]   ..$ quiet           : logi FALSE
[17:03:18.342]   ..$ setup_strategy  : chr "parallel"
[17:03:18.342]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:18.362] [local output] System call to launch all workers:
[17:03:18.362] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK5BQg4/worker.rank=1.parallelly.parent=47380.b9143b84b36.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11845 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:18.363] [local output] Starting PSOCK main server
[17:03:18.364] [local output] Workers launched
[17:03:18.364] [local output] Waiting for workers to connect back
[17:03:18.364]  - [local output] 0 workers out of 2 ready
[17:03:18.600]  - [local output] 0 workers out of 2 ready
[17:03:18.601]  - [local output] 1 workers out of 2 ready
[17:03:18.610]  - [local output] 1 workers out of 2 ready
[17:03:18.610]  - [local output] 2 workers out of 2 ready
[17:03:18.611] [local output] Launching of workers completed
[17:03:18.611] [local output] Collecting session information from workers
[17:03:18.611] [local output]  - Worker #1 of 2
[17:03:18.612] [local output]  - Worker #2 of 2
[17:03:18.612] [local output] makeClusterPSOCK() ... done
[17:03:18.623] Packages needed by the future expression (n = 0): <none>
[17:03:18.623] Packages needed by future strategies (n = 1): ‘future’
[17:03:18.623] {
[17:03:18.623]     {
[17:03:18.623]         {
[17:03:18.623]             ...future.startTime <- base::Sys.time()
[17:03:18.623]             {
[17:03:18.623]                 {
[17:03:18.623]                   {
[17:03:18.623]                     {
[17:03:18.623]                       {
[17:03:18.623]                         base::local({
[17:03:18.623]                           has_future <- base::requireNamespace("future", 
[17:03:18.623]                             quietly = TRUE)
[17:03:18.623]                           if (has_future) {
[17:03:18.623]                             ns <- base::getNamespace("future")
[17:03:18.623]                             version <- ns[[".package"]][["version"]]
[17:03:18.623]                             if (is.null(version)) 
[17:03:18.623]                               version <- utils::packageVersion("future")
[17:03:18.623]                           }
[17:03:18.623]                           else {
[17:03:18.623]                             version <- NULL
[17:03:18.623]                           }
[17:03:18.623]                           if (!has_future || version < "1.8.0") {
[17:03:18.623]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:18.623]                               "", base::R.version$version.string), 
[17:03:18.623]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:18.623]                                 base::R.version$platform, 8 * 
[17:03:18.623]                                   base::.Machine$sizeof.pointer), 
[17:03:18.623]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:18.623]                                 "release", "version")], collapse = " "), 
[17:03:18.623]                               hostname = base::Sys.info()[["nodename"]])
[17:03:18.623]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:18.623]                               info)
[17:03:18.623]                             info <- base::paste(info, collapse = "; ")
[17:03:18.623]                             if (!has_future) {
[17:03:18.623]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:18.623]                                 info)
[17:03:18.623]                             }
[17:03:18.623]                             else {
[17:03:18.623]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:18.623]                                 info, version)
[17:03:18.623]                             }
[17:03:18.623]                             base::stop(msg)
[17:03:18.623]                           }
[17:03:18.623]                         })
[17:03:18.623]                       }
[17:03:18.623]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:18.623]                       base::options(mc.cores = 1L)
[17:03:18.623]                     }
[17:03:18.623]                     base::local({
[17:03:18.623]                       for (pkg in "future") {
[17:03:18.623]                         base::loadNamespace(pkg)
[17:03:18.623]                         base::library(pkg, character.only = TRUE)
[17:03:18.623]                       }
[17:03:18.623]                     })
[17:03:18.623]                   }
[17:03:18.623]                   ...future.strategy.old <- future::plan("list")
[17:03:18.623]                   options(future.plan = NULL)
[17:03:18.623]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.623]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:18.623]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:18.623]                     envir = parent.frame()) 
[17:03:18.623]                   {
[17:03:18.623]                     if (is.function(workers)) 
[17:03:18.623]                       workers <- workers()
[17:03:18.623]                     workers <- structure(as.integer(workers), 
[17:03:18.623]                       class = class(workers))
[17:03:18.623]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:18.623]                       workers >= 1)
[17:03:18.623]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:18.623]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:18.623]                     }
[17:03:18.623]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:18.623]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:18.623]                       envir = envir)
[17:03:18.623]                     if (!future$lazy) 
[17:03:18.623]                       future <- run(future)
[17:03:18.623]                     invisible(future)
[17:03:18.623]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:18.623]                 }
[17:03:18.623]                 ...future.workdir <- getwd()
[17:03:18.623]             }
[17:03:18.623]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:18.623]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:18.623]         }
[17:03:18.623]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:18.623]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:18.623]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:18.623]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:18.623]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:18.623]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:18.623]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:18.623]             base::names(...future.oldOptions))
[17:03:18.623]     }
[17:03:18.623]     if (FALSE) {
[17:03:18.623]     }
[17:03:18.623]     else {
[17:03:18.623]         if (TRUE) {
[17:03:18.623]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:18.623]                 open = "w")
[17:03:18.623]         }
[17:03:18.623]         else {
[17:03:18.623]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:18.623]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:18.623]         }
[17:03:18.623]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:18.623]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:18.623]             base::sink(type = "output", split = FALSE)
[17:03:18.623]             base::close(...future.stdout)
[17:03:18.623]         }, add = TRUE)
[17:03:18.623]     }
[17:03:18.623]     ...future.frame <- base::sys.nframe()
[17:03:18.623]     ...future.conditions <- base::list()
[17:03:18.623]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:18.623]     if (FALSE) {
[17:03:18.623]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:18.623]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:18.623]     }
[17:03:18.623]     ...future.result <- base::tryCatch({
[17:03:18.623]         base::withCallingHandlers({
[17:03:18.623]             ...future.value <- base::withVisible(base::local({
[17:03:18.623]                 ...future.makeSendCondition <- base::local({
[17:03:18.623]                   sendCondition <- NULL
[17:03:18.623]                   function(frame = 1L) {
[17:03:18.623]                     if (is.function(sendCondition)) 
[17:03:18.623]                       return(sendCondition)
[17:03:18.623]                     ns <- getNamespace("parallel")
[17:03:18.623]                     if (exists("sendData", mode = "function", 
[17:03:18.623]                       envir = ns)) {
[17:03:18.623]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:18.623]                         envir = ns)
[17:03:18.623]                       envir <- sys.frame(frame)
[17:03:18.623]                       master <- NULL
[17:03:18.623]                       while (!identical(envir, .GlobalEnv) && 
[17:03:18.623]                         !identical(envir, emptyenv())) {
[17:03:18.623]                         if (exists("master", mode = "list", envir = envir, 
[17:03:18.623]                           inherits = FALSE)) {
[17:03:18.623]                           master <- get("master", mode = "list", 
[17:03:18.623]                             envir = envir, inherits = FALSE)
[17:03:18.623]                           if (inherits(master, c("SOCKnode", 
[17:03:18.623]                             "SOCK0node"))) {
[17:03:18.623]                             sendCondition <<- function(cond) {
[17:03:18.623]                               data <- list(type = "VALUE", value = cond, 
[17:03:18.623]                                 success = TRUE)
[17:03:18.623]                               parallel_sendData(master, data)
[17:03:18.623]                             }
[17:03:18.623]                             return(sendCondition)
[17:03:18.623]                           }
[17:03:18.623]                         }
[17:03:18.623]                         frame <- frame + 1L
[17:03:18.623]                         envir <- sys.frame(frame)
[17:03:18.623]                       }
[17:03:18.623]                     }
[17:03:18.623]                     sendCondition <<- function(cond) NULL
[17:03:18.623]                   }
[17:03:18.623]                 })
[17:03:18.623]                 withCallingHandlers({
[17:03:18.623]                   NA
[17:03:18.623]                 }, immediateCondition = function(cond) {
[17:03:18.623]                   sendCondition <- ...future.makeSendCondition()
[17:03:18.623]                   sendCondition(cond)
[17:03:18.623]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.623]                   {
[17:03:18.623]                     inherits <- base::inherits
[17:03:18.623]                     invokeRestart <- base::invokeRestart
[17:03:18.623]                     is.null <- base::is.null
[17:03:18.623]                     muffled <- FALSE
[17:03:18.623]                     if (inherits(cond, "message")) {
[17:03:18.623]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:18.623]                       if (muffled) 
[17:03:18.623]                         invokeRestart("muffleMessage")
[17:03:18.623]                     }
[17:03:18.623]                     else if (inherits(cond, "warning")) {
[17:03:18.623]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:18.623]                       if (muffled) 
[17:03:18.623]                         invokeRestart("muffleWarning")
[17:03:18.623]                     }
[17:03:18.623]                     else if (inherits(cond, "condition")) {
[17:03:18.623]                       if (!is.null(pattern)) {
[17:03:18.623]                         computeRestarts <- base::computeRestarts
[17:03:18.623]                         grepl <- base::grepl
[17:03:18.623]                         restarts <- computeRestarts(cond)
[17:03:18.623]                         for (restart in restarts) {
[17:03:18.623]                           name <- restart$name
[17:03:18.623]                           if (is.null(name)) 
[17:03:18.623]                             next
[17:03:18.623]                           if (!grepl(pattern, name)) 
[17:03:18.623]                             next
[17:03:18.623]                           invokeRestart(restart)
[17:03:18.623]                           muffled <- TRUE
[17:03:18.623]                           break
[17:03:18.623]                         }
[17:03:18.623]                       }
[17:03:18.623]                     }
[17:03:18.623]                     invisible(muffled)
[17:03:18.623]                   }
[17:03:18.623]                   muffleCondition(cond)
[17:03:18.623]                 })
[17:03:18.623]             }))
[17:03:18.623]             future::FutureResult(value = ...future.value$value, 
[17:03:18.623]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.623]                   ...future.rng), globalenv = if (FALSE) 
[17:03:18.623]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:18.623]                     ...future.globalenv.names))
[17:03:18.623]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:18.623]         }, condition = base::local({
[17:03:18.623]             c <- base::c
[17:03:18.623]             inherits <- base::inherits
[17:03:18.623]             invokeRestart <- base::invokeRestart
[17:03:18.623]             length <- base::length
[17:03:18.623]             list <- base::list
[17:03:18.623]             seq.int <- base::seq.int
[17:03:18.623]             signalCondition <- base::signalCondition
[17:03:18.623]             sys.calls <- base::sys.calls
[17:03:18.623]             `[[` <- base::`[[`
[17:03:18.623]             `+` <- base::`+`
[17:03:18.623]             `<<-` <- base::`<<-`
[17:03:18.623]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:18.623]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:18.623]                   3L)]
[17:03:18.623]             }
[17:03:18.623]             function(cond) {
[17:03:18.623]                 is_error <- inherits(cond, "error")
[17:03:18.623]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:18.623]                   NULL)
[17:03:18.623]                 if (is_error) {
[17:03:18.623]                   sessionInformation <- function() {
[17:03:18.623]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:18.623]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:18.623]                       search = base::search(), system = base::Sys.info())
[17:03:18.623]                   }
[17:03:18.623]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.623]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:18.623]                     cond$call), session = sessionInformation(), 
[17:03:18.623]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:18.623]                   signalCondition(cond)
[17:03:18.623]                 }
[17:03:18.623]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:18.623]                 "immediateCondition"))) {
[17:03:18.623]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:18.623]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.623]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:18.623]                   if (TRUE && !signal) {
[17:03:18.623]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.623]                     {
[17:03:18.623]                       inherits <- base::inherits
[17:03:18.623]                       invokeRestart <- base::invokeRestart
[17:03:18.623]                       is.null <- base::is.null
[17:03:18.623]                       muffled <- FALSE
[17:03:18.623]                       if (inherits(cond, "message")) {
[17:03:18.623]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.623]                         if (muffled) 
[17:03:18.623]                           invokeRestart("muffleMessage")
[17:03:18.623]                       }
[17:03:18.623]                       else if (inherits(cond, "warning")) {
[17:03:18.623]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.623]                         if (muffled) 
[17:03:18.623]                           invokeRestart("muffleWarning")
[17:03:18.623]                       }
[17:03:18.623]                       else if (inherits(cond, "condition")) {
[17:03:18.623]                         if (!is.null(pattern)) {
[17:03:18.623]                           computeRestarts <- base::computeRestarts
[17:03:18.623]                           grepl <- base::grepl
[17:03:18.623]                           restarts <- computeRestarts(cond)
[17:03:18.623]                           for (restart in restarts) {
[17:03:18.623]                             name <- restart$name
[17:03:18.623]                             if (is.null(name)) 
[17:03:18.623]                               next
[17:03:18.623]                             if (!grepl(pattern, name)) 
[17:03:18.623]                               next
[17:03:18.623]                             invokeRestart(restart)
[17:03:18.623]                             muffled <- TRUE
[17:03:18.623]                             break
[17:03:18.623]                           }
[17:03:18.623]                         }
[17:03:18.623]                       }
[17:03:18.623]                       invisible(muffled)
[17:03:18.623]                     }
[17:03:18.623]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.623]                   }
[17:03:18.623]                 }
[17:03:18.623]                 else {
[17:03:18.623]                   if (TRUE) {
[17:03:18.623]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.623]                     {
[17:03:18.623]                       inherits <- base::inherits
[17:03:18.623]                       invokeRestart <- base::invokeRestart
[17:03:18.623]                       is.null <- base::is.null
[17:03:18.623]                       muffled <- FALSE
[17:03:18.623]                       if (inherits(cond, "message")) {
[17:03:18.623]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.623]                         if (muffled) 
[17:03:18.623]                           invokeRestart("muffleMessage")
[17:03:18.623]                       }
[17:03:18.623]                       else if (inherits(cond, "warning")) {
[17:03:18.623]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.623]                         if (muffled) 
[17:03:18.623]                           invokeRestart("muffleWarning")
[17:03:18.623]                       }
[17:03:18.623]                       else if (inherits(cond, "condition")) {
[17:03:18.623]                         if (!is.null(pattern)) {
[17:03:18.623]                           computeRestarts <- base::computeRestarts
[17:03:18.623]                           grepl <- base::grepl
[17:03:18.623]                           restarts <- computeRestarts(cond)
[17:03:18.623]                           for (restart in restarts) {
[17:03:18.623]                             name <- restart$name
[17:03:18.623]                             if (is.null(name)) 
[17:03:18.623]                               next
[17:03:18.623]                             if (!grepl(pattern, name)) 
[17:03:18.623]                               next
[17:03:18.623]                             invokeRestart(restart)
[17:03:18.623]                             muffled <- TRUE
[17:03:18.623]                             break
[17:03:18.623]                           }
[17:03:18.623]                         }
[17:03:18.623]                       }
[17:03:18.623]                       invisible(muffled)
[17:03:18.623]                     }
[17:03:18.623]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.623]                   }
[17:03:18.623]                 }
[17:03:18.623]             }
[17:03:18.623]         }))
[17:03:18.623]     }, error = function(ex) {
[17:03:18.623]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:18.623]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.623]                 ...future.rng), started = ...future.startTime, 
[17:03:18.623]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:18.623]             version = "1.8"), class = "FutureResult")
[17:03:18.623]     }, finally = {
[17:03:18.623]         if (!identical(...future.workdir, getwd())) 
[17:03:18.623]             setwd(...future.workdir)
[17:03:18.623]         {
[17:03:18.623]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:18.623]                 ...future.oldOptions$nwarnings <- NULL
[17:03:18.623]             }
[17:03:18.623]             base::options(...future.oldOptions)
[17:03:18.623]             if (.Platform$OS.type == "windows") {
[17:03:18.623]                 old_names <- names(...future.oldEnvVars)
[17:03:18.623]                 envs <- base::Sys.getenv()
[17:03:18.623]                 names <- names(envs)
[17:03:18.623]                 common <- intersect(names, old_names)
[17:03:18.623]                 added <- setdiff(names, old_names)
[17:03:18.623]                 removed <- setdiff(old_names, names)
[17:03:18.623]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:18.623]                   envs[common]]
[17:03:18.623]                 NAMES <- toupper(changed)
[17:03:18.623]                 args <- list()
[17:03:18.623]                 for (kk in seq_along(NAMES)) {
[17:03:18.623]                   name <- changed[[kk]]
[17:03:18.623]                   NAME <- NAMES[[kk]]
[17:03:18.623]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.623]                     next
[17:03:18.623]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.623]                 }
[17:03:18.623]                 NAMES <- toupper(added)
[17:03:18.623]                 for (kk in seq_along(NAMES)) {
[17:03:18.623]                   name <- added[[kk]]
[17:03:18.623]                   NAME <- NAMES[[kk]]
[17:03:18.623]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.623]                     next
[17:03:18.623]                   args[[name]] <- ""
[17:03:18.623]                 }
[17:03:18.623]                 NAMES <- toupper(removed)
[17:03:18.623]                 for (kk in seq_along(NAMES)) {
[17:03:18.623]                   name <- removed[[kk]]
[17:03:18.623]                   NAME <- NAMES[[kk]]
[17:03:18.623]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.623]                     next
[17:03:18.623]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.623]                 }
[17:03:18.623]                 if (length(args) > 0) 
[17:03:18.623]                   base::do.call(base::Sys.setenv, args = args)
[17:03:18.623]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:18.623]             }
[17:03:18.623]             else {
[17:03:18.623]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:18.623]             }
[17:03:18.623]             {
[17:03:18.623]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:18.623]                   0L) {
[17:03:18.623]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:18.623]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:18.623]                   base::options(opts)
[17:03:18.623]                 }
[17:03:18.623]                 {
[17:03:18.623]                   {
[17:03:18.623]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:18.623]                     NULL
[17:03:18.623]                   }
[17:03:18.623]                   options(future.plan = NULL)
[17:03:18.623]                   if (is.na(NA_character_)) 
[17:03:18.623]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.623]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:18.623]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:18.623]                     .init = FALSE)
[17:03:18.623]                 }
[17:03:18.623]             }
[17:03:18.623]         }
[17:03:18.623]     })
[17:03:18.623]     if (TRUE) {
[17:03:18.623]         base::sink(type = "output", split = FALSE)
[17:03:18.623]         if (TRUE) {
[17:03:18.623]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:18.623]         }
[17:03:18.623]         else {
[17:03:18.623]             ...future.result["stdout"] <- base::list(NULL)
[17:03:18.623]         }
[17:03:18.623]         base::close(...future.stdout)
[17:03:18.623]         ...future.stdout <- NULL
[17:03:18.623]     }
[17:03:18.623]     ...future.result$conditions <- ...future.conditions
[17:03:18.623]     ...future.result$finished <- base::Sys.time()
[17:03:18.623]     ...future.result
[17:03:18.623] }
[17:03:18.675] MultisessionFuture started
[17:03:18.676] result() for ClusterFuture ...
[17:03:18.676] receiveMessageFromWorker() for ClusterFuture ...
[17:03:18.676] - Validating connection of MultisessionFuture
[17:03:18.721] - received message: FutureResult
[17:03:18.722] - Received FutureResult
[17:03:18.722] - Erased future from FutureRegistry
[17:03:18.722] result() for ClusterFuture ...
[17:03:18.722] - result already collected: FutureResult
[17:03:18.722] result() for ClusterFuture ... done
[17:03:18.722] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:18.722] result() for ClusterFuture ... done
[17:03:18.722] result() for ClusterFuture ...
[17:03:18.722] - result already collected: FutureResult
[17:03:18.722] result() for ClusterFuture ... done
[17:03:18.723] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:18.726] plan(): nbrOfWorkers() = 2
[17:03:18.726] getGlobalsAndPackages() ...
[17:03:18.726] Searching for globals...
[17:03:18.742] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[17:03:18.742] Searching for globals ... DONE
[17:03:18.742] Resolving globals: FALSE
[17:03:18.743] The total size of the 2 globals is 88.27 KiB (90384 bytes)
[17:03:18.744] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 88.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (88.15 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[17:03:18.744] - globals: [2] ‘nested’, ‘strategy2’
[17:03:18.744] - packages: [1] ‘future’
[17:03:18.744] getGlobalsAndPackages() ... DONE
[17:03:18.744] run() for ‘Future’ ...
[17:03:18.744] - state: ‘created’
[17:03:18.744] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:18.758] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:18.758] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:18.758]   - Field: ‘node’
[17:03:18.758]   - Field: ‘label’
[17:03:18.758]   - Field: ‘local’
[17:03:18.758]   - Field: ‘owner’
[17:03:18.759]   - Field: ‘envir’
[17:03:18.759]   - Field: ‘workers’
[17:03:18.759]   - Field: ‘packages’
[17:03:18.759]   - Field: ‘gc’
[17:03:18.759]   - Field: ‘conditions’
[17:03:18.759]   - Field: ‘persistent’
[17:03:18.759]   - Field: ‘expr’
[17:03:18.759]   - Field: ‘uuid’
[17:03:18.759]   - Field: ‘seed’
[17:03:18.759]   - Field: ‘version’
[17:03:18.760]   - Field: ‘result’
[17:03:18.760]   - Field: ‘asynchronous’
[17:03:18.760]   - Field: ‘calls’
[17:03:18.760]   - Field: ‘globals’
[17:03:18.760]   - Field: ‘stdout’
[17:03:18.760]   - Field: ‘earlySignal’
[17:03:18.760]   - Field: ‘lazy’
[17:03:18.760]   - Field: ‘state’
[17:03:18.760] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:18.760] - Launch lazy future ...
[17:03:18.761] Packages needed by the future expression (n = 1): ‘future’
[17:03:18.761] Packages needed by future strategies (n = 1): ‘future’
[17:03:18.761] {
[17:03:18.761]     {
[17:03:18.761]         {
[17:03:18.761]             ...future.startTime <- base::Sys.time()
[17:03:18.761]             {
[17:03:18.761]                 {
[17:03:18.761]                   {
[17:03:18.761]                     {
[17:03:18.761]                       {
[17:03:18.761]                         base::local({
[17:03:18.761]                           has_future <- base::requireNamespace("future", 
[17:03:18.761]                             quietly = TRUE)
[17:03:18.761]                           if (has_future) {
[17:03:18.761]                             ns <- base::getNamespace("future")
[17:03:18.761]                             version <- ns[[".package"]][["version"]]
[17:03:18.761]                             if (is.null(version)) 
[17:03:18.761]                               version <- utils::packageVersion("future")
[17:03:18.761]                           }
[17:03:18.761]                           else {
[17:03:18.761]                             version <- NULL
[17:03:18.761]                           }
[17:03:18.761]                           if (!has_future || version < "1.8.0") {
[17:03:18.761]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:18.761]                               "", base::R.version$version.string), 
[17:03:18.761]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:18.761]                                 base::R.version$platform, 8 * 
[17:03:18.761]                                   base::.Machine$sizeof.pointer), 
[17:03:18.761]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:18.761]                                 "release", "version")], collapse = " "), 
[17:03:18.761]                               hostname = base::Sys.info()[["nodename"]])
[17:03:18.761]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:18.761]                               info)
[17:03:18.761]                             info <- base::paste(info, collapse = "; ")
[17:03:18.761]                             if (!has_future) {
[17:03:18.761]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:18.761]                                 info)
[17:03:18.761]                             }
[17:03:18.761]                             else {
[17:03:18.761]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:18.761]                                 info, version)
[17:03:18.761]                             }
[17:03:18.761]                             base::stop(msg)
[17:03:18.761]                           }
[17:03:18.761]                         })
[17:03:18.761]                       }
[17:03:18.761]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:18.761]                       base::options(mc.cores = 1L)
[17:03:18.761]                     }
[17:03:18.761]                     base::local({
[17:03:18.761]                       for (pkg in "future") {
[17:03:18.761]                         base::loadNamespace(pkg)
[17:03:18.761]                         base::library(pkg, character.only = TRUE)
[17:03:18.761]                       }
[17:03:18.761]                     })
[17:03:18.761]                   }
[17:03:18.761]                   ...future.strategy.old <- future::plan("list")
[17:03:18.761]                   options(future.plan = NULL)
[17:03:18.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.761]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:18.761]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:18.761]                     envir = parent.frame()) 
[17:03:18.761]                   {
[17:03:18.761]                     if (is.function(workers)) 
[17:03:18.761]                       workers <- workers()
[17:03:18.761]                     workers <- structure(as.integer(workers), 
[17:03:18.761]                       class = class(workers))
[17:03:18.761]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:18.761]                       workers >= 1)
[17:03:18.761]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:18.761]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:18.761]                     }
[17:03:18.761]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:18.761]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:18.761]                       envir = envir)
[17:03:18.761]                     if (!future$lazy) 
[17:03:18.761]                       future <- run(future)
[17:03:18.761]                     invisible(future)
[17:03:18.761]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:18.761]                 }
[17:03:18.761]                 ...future.workdir <- getwd()
[17:03:18.761]             }
[17:03:18.761]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:18.761]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:18.761]         }
[17:03:18.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:18.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:18.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:18.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:18.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:18.761]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:18.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:18.761]             base::names(...future.oldOptions))
[17:03:18.761]     }
[17:03:18.761]     if (FALSE) {
[17:03:18.761]     }
[17:03:18.761]     else {
[17:03:18.761]         if (TRUE) {
[17:03:18.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:18.761]                 open = "w")
[17:03:18.761]         }
[17:03:18.761]         else {
[17:03:18.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:18.761]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:18.761]         }
[17:03:18.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:18.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:18.761]             base::sink(type = "output", split = FALSE)
[17:03:18.761]             base::close(...future.stdout)
[17:03:18.761]         }, add = TRUE)
[17:03:18.761]     }
[17:03:18.761]     ...future.frame <- base::sys.nframe()
[17:03:18.761]     ...future.conditions <- base::list()
[17:03:18.761]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:18.761]     if (FALSE) {
[17:03:18.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:18.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:18.761]     }
[17:03:18.761]     ...future.result <- base::tryCatch({
[17:03:18.761]         base::withCallingHandlers({
[17:03:18.761]             ...future.value <- base::withVisible(base::local({
[17:03:18.761]                 ...future.makeSendCondition <- base::local({
[17:03:18.761]                   sendCondition <- NULL
[17:03:18.761]                   function(frame = 1L) {
[17:03:18.761]                     if (is.function(sendCondition)) 
[17:03:18.761]                       return(sendCondition)
[17:03:18.761]                     ns <- getNamespace("parallel")
[17:03:18.761]                     if (exists("sendData", mode = "function", 
[17:03:18.761]                       envir = ns)) {
[17:03:18.761]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:18.761]                         envir = ns)
[17:03:18.761]                       envir <- sys.frame(frame)
[17:03:18.761]                       master <- NULL
[17:03:18.761]                       while (!identical(envir, .GlobalEnv) && 
[17:03:18.761]                         !identical(envir, emptyenv())) {
[17:03:18.761]                         if (exists("master", mode = "list", envir = envir, 
[17:03:18.761]                           inherits = FALSE)) {
[17:03:18.761]                           master <- get("master", mode = "list", 
[17:03:18.761]                             envir = envir, inherits = FALSE)
[17:03:18.761]                           if (inherits(master, c("SOCKnode", 
[17:03:18.761]                             "SOCK0node"))) {
[17:03:18.761]                             sendCondition <<- function(cond) {
[17:03:18.761]                               data <- list(type = "VALUE", value = cond, 
[17:03:18.761]                                 success = TRUE)
[17:03:18.761]                               parallel_sendData(master, data)
[17:03:18.761]                             }
[17:03:18.761]                             return(sendCondition)
[17:03:18.761]                           }
[17:03:18.761]                         }
[17:03:18.761]                         frame <- frame + 1L
[17:03:18.761]                         envir <- sys.frame(frame)
[17:03:18.761]                       }
[17:03:18.761]                     }
[17:03:18.761]                     sendCondition <<- function(cond) NULL
[17:03:18.761]                   }
[17:03:18.761]                 })
[17:03:18.761]                 withCallingHandlers({
[17:03:18.761]                   {
[17:03:18.761]                     a <- 1L
[17:03:18.761]                     plan_a <- unclass(future::plan("list"))
[17:03:18.761]                     nested_a <- nested[-1]
[17:03:18.761]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[17:03:18.761]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[17:03:18.761]                       strategy2))
[17:03:18.761]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[17:03:18.761]                       "init") <- NULL
[17:03:18.761]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[17:03:18.761]                       "init") <- NULL
[17:03:18.761]                     stopifnot(all.equal(plan_a, nested_a))
[17:03:18.761]                     y %<-% {
[17:03:18.761]                       b <- 2L
[17:03:18.761]                       plan_b <- future::plan("list")
[17:03:18.761]                       nested_b <- nested_a[-1]
[17:03:18.761]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[17:03:18.761]                         1L, inherits(plan_b[[1]], "future"), 
[17:03:18.761]                         inherits(future::plan("next"), "sequential"))
[17:03:18.761]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[17:03:18.761]                         b = b, nested_b = nested_b, plan_b = plan_b)
[17:03:18.761]                     }
[17:03:18.761]                     y
[17:03:18.761]                   }
[17:03:18.761]                 }, immediateCondition = function(cond) {
[17:03:18.761]                   sendCondition <- ...future.makeSendCondition()
[17:03:18.761]                   sendCondition(cond)
[17:03:18.761]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.761]                   {
[17:03:18.761]                     inherits <- base::inherits
[17:03:18.761]                     invokeRestart <- base::invokeRestart
[17:03:18.761]                     is.null <- base::is.null
[17:03:18.761]                     muffled <- FALSE
[17:03:18.761]                     if (inherits(cond, "message")) {
[17:03:18.761]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:18.761]                       if (muffled) 
[17:03:18.761]                         invokeRestart("muffleMessage")
[17:03:18.761]                     }
[17:03:18.761]                     else if (inherits(cond, "warning")) {
[17:03:18.761]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:18.761]                       if (muffled) 
[17:03:18.761]                         invokeRestart("muffleWarning")
[17:03:18.761]                     }
[17:03:18.761]                     else if (inherits(cond, "condition")) {
[17:03:18.761]                       if (!is.null(pattern)) {
[17:03:18.761]                         computeRestarts <- base::computeRestarts
[17:03:18.761]                         grepl <- base::grepl
[17:03:18.761]                         restarts <- computeRestarts(cond)
[17:03:18.761]                         for (restart in restarts) {
[17:03:18.761]                           name <- restart$name
[17:03:18.761]                           if (is.null(name)) 
[17:03:18.761]                             next
[17:03:18.761]                           if (!grepl(pattern, name)) 
[17:03:18.761]                             next
[17:03:18.761]                           invokeRestart(restart)
[17:03:18.761]                           muffled <- TRUE
[17:03:18.761]                           break
[17:03:18.761]                         }
[17:03:18.761]                       }
[17:03:18.761]                     }
[17:03:18.761]                     invisible(muffled)
[17:03:18.761]                   }
[17:03:18.761]                   muffleCondition(cond)
[17:03:18.761]                 })
[17:03:18.761]             }))
[17:03:18.761]             future::FutureResult(value = ...future.value$value, 
[17:03:18.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.761]                   ...future.rng), globalenv = if (FALSE) 
[17:03:18.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:18.761]                     ...future.globalenv.names))
[17:03:18.761]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:18.761]         }, condition = base::local({
[17:03:18.761]             c <- base::c
[17:03:18.761]             inherits <- base::inherits
[17:03:18.761]             invokeRestart <- base::invokeRestart
[17:03:18.761]             length <- base::length
[17:03:18.761]             list <- base::list
[17:03:18.761]             seq.int <- base::seq.int
[17:03:18.761]             signalCondition <- base::signalCondition
[17:03:18.761]             sys.calls <- base::sys.calls
[17:03:18.761]             `[[` <- base::`[[`
[17:03:18.761]             `+` <- base::`+`
[17:03:18.761]             `<<-` <- base::`<<-`
[17:03:18.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:18.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:18.761]                   3L)]
[17:03:18.761]             }
[17:03:18.761]             function(cond) {
[17:03:18.761]                 is_error <- inherits(cond, "error")
[17:03:18.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:18.761]                   NULL)
[17:03:18.761]                 if (is_error) {
[17:03:18.761]                   sessionInformation <- function() {
[17:03:18.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:18.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:18.761]                       search = base::search(), system = base::Sys.info())
[17:03:18.761]                   }
[17:03:18.761]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:18.761]                     cond$call), session = sessionInformation(), 
[17:03:18.761]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:18.761]                   signalCondition(cond)
[17:03:18.761]                 }
[17:03:18.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:18.761]                 "immediateCondition"))) {
[17:03:18.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:18.761]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:18.761]                   if (TRUE && !signal) {
[17:03:18.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.761]                     {
[17:03:18.761]                       inherits <- base::inherits
[17:03:18.761]                       invokeRestart <- base::invokeRestart
[17:03:18.761]                       is.null <- base::is.null
[17:03:18.761]                       muffled <- FALSE
[17:03:18.761]                       if (inherits(cond, "message")) {
[17:03:18.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.761]                         if (muffled) 
[17:03:18.761]                           invokeRestart("muffleMessage")
[17:03:18.761]                       }
[17:03:18.761]                       else if (inherits(cond, "warning")) {
[17:03:18.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.761]                         if (muffled) 
[17:03:18.761]                           invokeRestart("muffleWarning")
[17:03:18.761]                       }
[17:03:18.761]                       else if (inherits(cond, "condition")) {
[17:03:18.761]                         if (!is.null(pattern)) {
[17:03:18.761]                           computeRestarts <- base::computeRestarts
[17:03:18.761]                           grepl <- base::grepl
[17:03:18.761]                           restarts <- computeRestarts(cond)
[17:03:18.761]                           for (restart in restarts) {
[17:03:18.761]                             name <- restart$name
[17:03:18.761]                             if (is.null(name)) 
[17:03:18.761]                               next
[17:03:18.761]                             if (!grepl(pattern, name)) 
[17:03:18.761]                               next
[17:03:18.761]                             invokeRestart(restart)
[17:03:18.761]                             muffled <- TRUE
[17:03:18.761]                             break
[17:03:18.761]                           }
[17:03:18.761]                         }
[17:03:18.761]                       }
[17:03:18.761]                       invisible(muffled)
[17:03:18.761]                     }
[17:03:18.761]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.761]                   }
[17:03:18.761]                 }
[17:03:18.761]                 else {
[17:03:18.761]                   if (TRUE) {
[17:03:18.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.761]                     {
[17:03:18.761]                       inherits <- base::inherits
[17:03:18.761]                       invokeRestart <- base::invokeRestart
[17:03:18.761]                       is.null <- base::is.null
[17:03:18.761]                       muffled <- FALSE
[17:03:18.761]                       if (inherits(cond, "message")) {
[17:03:18.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.761]                         if (muffled) 
[17:03:18.761]                           invokeRestart("muffleMessage")
[17:03:18.761]                       }
[17:03:18.761]                       else if (inherits(cond, "warning")) {
[17:03:18.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.761]                         if (muffled) 
[17:03:18.761]                           invokeRestart("muffleWarning")
[17:03:18.761]                       }
[17:03:18.761]                       else if (inherits(cond, "condition")) {
[17:03:18.761]                         if (!is.null(pattern)) {
[17:03:18.761]                           computeRestarts <- base::computeRestarts
[17:03:18.761]                           grepl <- base::grepl
[17:03:18.761]                           restarts <- computeRestarts(cond)
[17:03:18.761]                           for (restart in restarts) {
[17:03:18.761]                             name <- restart$name
[17:03:18.761]                             if (is.null(name)) 
[17:03:18.761]                               next
[17:03:18.761]                             if (!grepl(pattern, name)) 
[17:03:18.761]                               next
[17:03:18.761]                             invokeRestart(restart)
[17:03:18.761]                             muffled <- TRUE
[17:03:18.761]                             break
[17:03:18.761]                           }
[17:03:18.761]                         }
[17:03:18.761]                       }
[17:03:18.761]                       invisible(muffled)
[17:03:18.761]                     }
[17:03:18.761]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.761]                   }
[17:03:18.761]                 }
[17:03:18.761]             }
[17:03:18.761]         }))
[17:03:18.761]     }, error = function(ex) {
[17:03:18.761]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:18.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.761]                 ...future.rng), started = ...future.startTime, 
[17:03:18.761]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:18.761]             version = "1.8"), class = "FutureResult")
[17:03:18.761]     }, finally = {
[17:03:18.761]         if (!identical(...future.workdir, getwd())) 
[17:03:18.761]             setwd(...future.workdir)
[17:03:18.761]         {
[17:03:18.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:18.761]                 ...future.oldOptions$nwarnings <- NULL
[17:03:18.761]             }
[17:03:18.761]             base::options(...future.oldOptions)
[17:03:18.761]             if (.Platform$OS.type == "windows") {
[17:03:18.761]                 old_names <- names(...future.oldEnvVars)
[17:03:18.761]                 envs <- base::Sys.getenv()
[17:03:18.761]                 names <- names(envs)
[17:03:18.761]                 common <- intersect(names, old_names)
[17:03:18.761]                 added <- setdiff(names, old_names)
[17:03:18.761]                 removed <- setdiff(old_names, names)
[17:03:18.761]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:18.761]                   envs[common]]
[17:03:18.761]                 NAMES <- toupper(changed)
[17:03:18.761]                 args <- list()
[17:03:18.761]                 for (kk in seq_along(NAMES)) {
[17:03:18.761]                   name <- changed[[kk]]
[17:03:18.761]                   NAME <- NAMES[[kk]]
[17:03:18.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.761]                     next
[17:03:18.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.761]                 }
[17:03:18.761]                 NAMES <- toupper(added)
[17:03:18.761]                 for (kk in seq_along(NAMES)) {
[17:03:18.761]                   name <- added[[kk]]
[17:03:18.761]                   NAME <- NAMES[[kk]]
[17:03:18.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.761]                     next
[17:03:18.761]                   args[[name]] <- ""
[17:03:18.761]                 }
[17:03:18.761]                 NAMES <- toupper(removed)
[17:03:18.761]                 for (kk in seq_along(NAMES)) {
[17:03:18.761]                   name <- removed[[kk]]
[17:03:18.761]                   NAME <- NAMES[[kk]]
[17:03:18.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.761]                     next
[17:03:18.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.761]                 }
[17:03:18.761]                 if (length(args) > 0) 
[17:03:18.761]                   base::do.call(base::Sys.setenv, args = args)
[17:03:18.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:18.761]             }
[17:03:18.761]             else {
[17:03:18.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:18.761]             }
[17:03:18.761]             {
[17:03:18.761]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:18.761]                   0L) {
[17:03:18.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:18.761]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:18.761]                   base::options(opts)
[17:03:18.761]                 }
[17:03:18.761]                 {
[17:03:18.761]                   {
[17:03:18.761]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:18.761]                     NULL
[17:03:18.761]                   }
[17:03:18.761]                   options(future.plan = NULL)
[17:03:18.761]                   if (is.na(NA_character_)) 
[17:03:18.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:18.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:18.761]                     .init = FALSE)
[17:03:18.761]                 }
[17:03:18.761]             }
[17:03:18.761]         }
[17:03:18.761]     })
[17:03:18.761]     if (TRUE) {
[17:03:18.761]         base::sink(type = "output", split = FALSE)
[17:03:18.761]         if (TRUE) {
[17:03:18.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:18.761]         }
[17:03:18.761]         else {
[17:03:18.761]             ...future.result["stdout"] <- base::list(NULL)
[17:03:18.761]         }
[17:03:18.761]         base::close(...future.stdout)
[17:03:18.761]         ...future.stdout <- NULL
[17:03:18.761]     }
[17:03:18.761]     ...future.result$conditions <- ...future.conditions
[17:03:18.761]     ...future.result$finished <- base::Sys.time()
[17:03:18.761]     ...future.result
[17:03:18.761] }
[17:03:18.764] Exporting 2 global objects (88.27 KiB) to cluster node #1 ...
[17:03:18.764] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ...
[17:03:18.808] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ... DONE
[17:03:18.808] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[17:03:18.808] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[17:03:18.808] Exporting 2 global objects (88.27 KiB) to cluster node #1 ... DONE
[17:03:18.809] MultisessionFuture started
[17:03:18.809] - Launch lazy future ... done
[17:03:18.809] run() for ‘MultisessionFuture’ ... done
[17:03:18.810] result() for ClusterFuture ...
[17:03:18.810] receiveMessageFromWorker() for ClusterFuture ...
[17:03:18.810] - Validating connection of MultisessionFuture
[17:03:18.881] - received message: FutureResult
[17:03:18.881] - Received FutureResult
[17:03:18.881] - Erased future from FutureRegistry
[17:03:18.881] result() for ClusterFuture ...
[17:03:18.882] - result already collected: FutureResult
[17:03:18.882] result() for ClusterFuture ... done
[17:03:18.882] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:18.882] result() for ClusterFuture ... done
[17:03:18.882] result() for ClusterFuture ...
[17:03:18.882] - result already collected: FutureResult
[17:03:18.882] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[17:03:18.888] getGlobalsAndPackages() ...
[17:03:18.888] Searching for globals...
[17:03:18.889] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[17:03:18.889] Searching for globals ... DONE
[17:03:18.889] Resolving globals: FALSE
[17:03:18.890] The total size of the 1 globals is 128 bytes (128 bytes)
[17:03:18.890] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[17:03:18.890] - globals: [1] ‘data’
[17:03:18.890] - packages: [1] ‘future’
[17:03:18.891] getGlobalsAndPackages() ... DONE
[17:03:18.891] run() for ‘Future’ ...
[17:03:18.891] - state: ‘created’
[17:03:18.891] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:18.905] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:18.905] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:18.905]   - Field: ‘node’
[17:03:18.905]   - Field: ‘label’
[17:03:18.905]   - Field: ‘local’
[17:03:18.905]   - Field: ‘owner’
[17:03:18.905]   - Field: ‘envir’
[17:03:18.905]   - Field: ‘workers’
[17:03:18.906]   - Field: ‘packages’
[17:03:18.906]   - Field: ‘gc’
[17:03:18.906]   - Field: ‘conditions’
[17:03:18.906]   - Field: ‘persistent’
[17:03:18.906]   - Field: ‘expr’
[17:03:18.906]   - Field: ‘uuid’
[17:03:18.906]   - Field: ‘seed’
[17:03:18.906]   - Field: ‘version’
[17:03:18.906]   - Field: ‘result’
[17:03:18.906]   - Field: ‘asynchronous’
[17:03:18.906]   - Field: ‘calls’
[17:03:18.907]   - Field: ‘globals’
[17:03:18.907]   - Field: ‘stdout’
[17:03:18.907]   - Field: ‘earlySignal’
[17:03:18.907]   - Field: ‘lazy’
[17:03:18.907]   - Field: ‘state’
[17:03:18.907] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:18.907] - Launch lazy future ...
[17:03:18.907] Packages needed by the future expression (n = 1): ‘future’
[17:03:18.908] Packages needed by future strategies (n = 1): ‘future’
[17:03:18.908] {
[17:03:18.908]     {
[17:03:18.908]         {
[17:03:18.908]             ...future.startTime <- base::Sys.time()
[17:03:18.908]             {
[17:03:18.908]                 {
[17:03:18.908]                   {
[17:03:18.908]                     {
[17:03:18.908]                       {
[17:03:18.908]                         base::local({
[17:03:18.908]                           has_future <- base::requireNamespace("future", 
[17:03:18.908]                             quietly = TRUE)
[17:03:18.908]                           if (has_future) {
[17:03:18.908]                             ns <- base::getNamespace("future")
[17:03:18.908]                             version <- ns[[".package"]][["version"]]
[17:03:18.908]                             if (is.null(version)) 
[17:03:18.908]                               version <- utils::packageVersion("future")
[17:03:18.908]                           }
[17:03:18.908]                           else {
[17:03:18.908]                             version <- NULL
[17:03:18.908]                           }
[17:03:18.908]                           if (!has_future || version < "1.8.0") {
[17:03:18.908]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:18.908]                               "", base::R.version$version.string), 
[17:03:18.908]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:18.908]                                 base::R.version$platform, 8 * 
[17:03:18.908]                                   base::.Machine$sizeof.pointer), 
[17:03:18.908]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:18.908]                                 "release", "version")], collapse = " "), 
[17:03:18.908]                               hostname = base::Sys.info()[["nodename"]])
[17:03:18.908]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:18.908]                               info)
[17:03:18.908]                             info <- base::paste(info, collapse = "; ")
[17:03:18.908]                             if (!has_future) {
[17:03:18.908]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:18.908]                                 info)
[17:03:18.908]                             }
[17:03:18.908]                             else {
[17:03:18.908]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:18.908]                                 info, version)
[17:03:18.908]                             }
[17:03:18.908]                             base::stop(msg)
[17:03:18.908]                           }
[17:03:18.908]                         })
[17:03:18.908]                       }
[17:03:18.908]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:18.908]                       base::options(mc.cores = 1L)
[17:03:18.908]                     }
[17:03:18.908]                     base::local({
[17:03:18.908]                       for (pkg in "future") {
[17:03:18.908]                         base::loadNamespace(pkg)
[17:03:18.908]                         base::library(pkg, character.only = TRUE)
[17:03:18.908]                       }
[17:03:18.908]                     })
[17:03:18.908]                   }
[17:03:18.908]                   ...future.strategy.old <- future::plan("list")
[17:03:18.908]                   options(future.plan = NULL)
[17:03:18.908]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.908]                   future::plan(list(b = function (..., workers = availableCores(), 
[17:03:18.908]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:03:18.908]                     envir = parent.frame()) 
[17:03:18.908]                   {
[17:03:18.908]                     if (is.function(workers)) 
[17:03:18.908]                       workers <- workers()
[17:03:18.908]                     workers <- structure(as.integer(workers), 
[17:03:18.908]                       class = class(workers))
[17:03:18.908]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:03:18.908]                       workers >= 1)
[17:03:18.908]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:03:18.908]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:03:18.908]                     }
[17:03:18.908]                     future <- MultisessionFuture(..., workers = workers, 
[17:03:18.908]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:03:18.908]                       envir = envir)
[17:03:18.908]                     if (!future$lazy) 
[17:03:18.908]                       future <- run(future)
[17:03:18.908]                     invisible(future)
[17:03:18.908]                   }), .cleanup = FALSE, .init = FALSE)
[17:03:18.908]                 }
[17:03:18.908]                 ...future.workdir <- getwd()
[17:03:18.908]             }
[17:03:18.908]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:18.908]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:18.908]         }
[17:03:18.908]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:18.908]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:18.908]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:18.908]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:18.908]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:18.908]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:18.908]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:18.908]             base::names(...future.oldOptions))
[17:03:18.908]     }
[17:03:18.908]     if (FALSE) {
[17:03:18.908]     }
[17:03:18.908]     else {
[17:03:18.908]         if (TRUE) {
[17:03:18.908]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:18.908]                 open = "w")
[17:03:18.908]         }
[17:03:18.908]         else {
[17:03:18.908]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:18.908]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:18.908]         }
[17:03:18.908]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:18.908]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:18.908]             base::sink(type = "output", split = FALSE)
[17:03:18.908]             base::close(...future.stdout)
[17:03:18.908]         }, add = TRUE)
[17:03:18.908]     }
[17:03:18.908]     ...future.frame <- base::sys.nframe()
[17:03:18.908]     ...future.conditions <- base::list()
[17:03:18.908]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:18.908]     if (FALSE) {
[17:03:18.908]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:18.908]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:18.908]     }
[17:03:18.908]     ...future.result <- base::tryCatch({
[17:03:18.908]         base::withCallingHandlers({
[17:03:18.908]             ...future.value <- base::withVisible(base::local({
[17:03:18.908]                 ...future.makeSendCondition <- base::local({
[17:03:18.908]                   sendCondition <- NULL
[17:03:18.908]                   function(frame = 1L) {
[17:03:18.908]                     if (is.function(sendCondition)) 
[17:03:18.908]                       return(sendCondition)
[17:03:18.908]                     ns <- getNamespace("parallel")
[17:03:18.908]                     if (exists("sendData", mode = "function", 
[17:03:18.908]                       envir = ns)) {
[17:03:18.908]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:18.908]                         envir = ns)
[17:03:18.908]                       envir <- sys.frame(frame)
[17:03:18.908]                       master <- NULL
[17:03:18.908]                       while (!identical(envir, .GlobalEnv) && 
[17:03:18.908]                         !identical(envir, emptyenv())) {
[17:03:18.908]                         if (exists("master", mode = "list", envir = envir, 
[17:03:18.908]                           inherits = FALSE)) {
[17:03:18.908]                           master <- get("master", mode = "list", 
[17:03:18.908]                             envir = envir, inherits = FALSE)
[17:03:18.908]                           if (inherits(master, c("SOCKnode", 
[17:03:18.908]                             "SOCK0node"))) {
[17:03:18.908]                             sendCondition <<- function(cond) {
[17:03:18.908]                               data <- list(type = "VALUE", value = cond, 
[17:03:18.908]                                 success = TRUE)
[17:03:18.908]                               parallel_sendData(master, data)
[17:03:18.908]                             }
[17:03:18.908]                             return(sendCondition)
[17:03:18.908]                           }
[17:03:18.908]                         }
[17:03:18.908]                         frame <- frame + 1L
[17:03:18.908]                         envir <- sys.frame(frame)
[17:03:18.908]                       }
[17:03:18.908]                     }
[17:03:18.908]                     sendCondition <<- function(cond) NULL
[17:03:18.908]                   }
[17:03:18.908]                 })
[17:03:18.908]                 withCallingHandlers({
[17:03:18.908]                   {
[17:03:18.908]                     value(future(subset(data, a == 2)))
[17:03:18.908]                   }
[17:03:18.908]                 }, immediateCondition = function(cond) {
[17:03:18.908]                   sendCondition <- ...future.makeSendCondition()
[17:03:18.908]                   sendCondition(cond)
[17:03:18.908]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.908]                   {
[17:03:18.908]                     inherits <- base::inherits
[17:03:18.908]                     invokeRestart <- base::invokeRestart
[17:03:18.908]                     is.null <- base::is.null
[17:03:18.908]                     muffled <- FALSE
[17:03:18.908]                     if (inherits(cond, "message")) {
[17:03:18.908]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:18.908]                       if (muffled) 
[17:03:18.908]                         invokeRestart("muffleMessage")
[17:03:18.908]                     }
[17:03:18.908]                     else if (inherits(cond, "warning")) {
[17:03:18.908]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:18.908]                       if (muffled) 
[17:03:18.908]                         invokeRestart("muffleWarning")
[17:03:18.908]                     }
[17:03:18.908]                     else if (inherits(cond, "condition")) {
[17:03:18.908]                       if (!is.null(pattern)) {
[17:03:18.908]                         computeRestarts <- base::computeRestarts
[17:03:18.908]                         grepl <- base::grepl
[17:03:18.908]                         restarts <- computeRestarts(cond)
[17:03:18.908]                         for (restart in restarts) {
[17:03:18.908]                           name <- restart$name
[17:03:18.908]                           if (is.null(name)) 
[17:03:18.908]                             next
[17:03:18.908]                           if (!grepl(pattern, name)) 
[17:03:18.908]                             next
[17:03:18.908]                           invokeRestart(restart)
[17:03:18.908]                           muffled <- TRUE
[17:03:18.908]                           break
[17:03:18.908]                         }
[17:03:18.908]                       }
[17:03:18.908]                     }
[17:03:18.908]                     invisible(muffled)
[17:03:18.908]                   }
[17:03:18.908]                   muffleCondition(cond)
[17:03:18.908]                 })
[17:03:18.908]             }))
[17:03:18.908]             future::FutureResult(value = ...future.value$value, 
[17:03:18.908]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.908]                   ...future.rng), globalenv = if (FALSE) 
[17:03:18.908]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:18.908]                     ...future.globalenv.names))
[17:03:18.908]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:18.908]         }, condition = base::local({
[17:03:18.908]             c <- base::c
[17:03:18.908]             inherits <- base::inherits
[17:03:18.908]             invokeRestart <- base::invokeRestart
[17:03:18.908]             length <- base::length
[17:03:18.908]             list <- base::list
[17:03:18.908]             seq.int <- base::seq.int
[17:03:18.908]             signalCondition <- base::signalCondition
[17:03:18.908]             sys.calls <- base::sys.calls
[17:03:18.908]             `[[` <- base::`[[`
[17:03:18.908]             `+` <- base::`+`
[17:03:18.908]             `<<-` <- base::`<<-`
[17:03:18.908]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:18.908]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:18.908]                   3L)]
[17:03:18.908]             }
[17:03:18.908]             function(cond) {
[17:03:18.908]                 is_error <- inherits(cond, "error")
[17:03:18.908]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:18.908]                   NULL)
[17:03:18.908]                 if (is_error) {
[17:03:18.908]                   sessionInformation <- function() {
[17:03:18.908]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:18.908]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:18.908]                       search = base::search(), system = base::Sys.info())
[17:03:18.908]                   }
[17:03:18.908]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.908]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:18.908]                     cond$call), session = sessionInformation(), 
[17:03:18.908]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:18.908]                   signalCondition(cond)
[17:03:18.908]                 }
[17:03:18.908]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:18.908]                 "immediateCondition"))) {
[17:03:18.908]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:18.908]                   ...future.conditions[[length(...future.conditions) + 
[17:03:18.908]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:18.908]                   if (TRUE && !signal) {
[17:03:18.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.908]                     {
[17:03:18.908]                       inherits <- base::inherits
[17:03:18.908]                       invokeRestart <- base::invokeRestart
[17:03:18.908]                       is.null <- base::is.null
[17:03:18.908]                       muffled <- FALSE
[17:03:18.908]                       if (inherits(cond, "message")) {
[17:03:18.908]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.908]                         if (muffled) 
[17:03:18.908]                           invokeRestart("muffleMessage")
[17:03:18.908]                       }
[17:03:18.908]                       else if (inherits(cond, "warning")) {
[17:03:18.908]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.908]                         if (muffled) 
[17:03:18.908]                           invokeRestart("muffleWarning")
[17:03:18.908]                       }
[17:03:18.908]                       else if (inherits(cond, "condition")) {
[17:03:18.908]                         if (!is.null(pattern)) {
[17:03:18.908]                           computeRestarts <- base::computeRestarts
[17:03:18.908]                           grepl <- base::grepl
[17:03:18.908]                           restarts <- computeRestarts(cond)
[17:03:18.908]                           for (restart in restarts) {
[17:03:18.908]                             name <- restart$name
[17:03:18.908]                             if (is.null(name)) 
[17:03:18.908]                               next
[17:03:18.908]                             if (!grepl(pattern, name)) 
[17:03:18.908]                               next
[17:03:18.908]                             invokeRestart(restart)
[17:03:18.908]                             muffled <- TRUE
[17:03:18.908]                             break
[17:03:18.908]                           }
[17:03:18.908]                         }
[17:03:18.908]                       }
[17:03:18.908]                       invisible(muffled)
[17:03:18.908]                     }
[17:03:18.908]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.908]                   }
[17:03:18.908]                 }
[17:03:18.908]                 else {
[17:03:18.908]                   if (TRUE) {
[17:03:18.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:18.908]                     {
[17:03:18.908]                       inherits <- base::inherits
[17:03:18.908]                       invokeRestart <- base::invokeRestart
[17:03:18.908]                       is.null <- base::is.null
[17:03:18.908]                       muffled <- FALSE
[17:03:18.908]                       if (inherits(cond, "message")) {
[17:03:18.908]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:18.908]                         if (muffled) 
[17:03:18.908]                           invokeRestart("muffleMessage")
[17:03:18.908]                       }
[17:03:18.908]                       else if (inherits(cond, "warning")) {
[17:03:18.908]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:18.908]                         if (muffled) 
[17:03:18.908]                           invokeRestart("muffleWarning")
[17:03:18.908]                       }
[17:03:18.908]                       else if (inherits(cond, "condition")) {
[17:03:18.908]                         if (!is.null(pattern)) {
[17:03:18.908]                           computeRestarts <- base::computeRestarts
[17:03:18.908]                           grepl <- base::grepl
[17:03:18.908]                           restarts <- computeRestarts(cond)
[17:03:18.908]                           for (restart in restarts) {
[17:03:18.908]                             name <- restart$name
[17:03:18.908]                             if (is.null(name)) 
[17:03:18.908]                               next
[17:03:18.908]                             if (!grepl(pattern, name)) 
[17:03:18.908]                               next
[17:03:18.908]                             invokeRestart(restart)
[17:03:18.908]                             muffled <- TRUE
[17:03:18.908]                             break
[17:03:18.908]                           }
[17:03:18.908]                         }
[17:03:18.908]                       }
[17:03:18.908]                       invisible(muffled)
[17:03:18.908]                     }
[17:03:18.908]                     muffleCondition(cond, pattern = "^muffle")
[17:03:18.908]                   }
[17:03:18.908]                 }
[17:03:18.908]             }
[17:03:18.908]         }))
[17:03:18.908]     }, error = function(ex) {
[17:03:18.908]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:18.908]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:18.908]                 ...future.rng), started = ...future.startTime, 
[17:03:18.908]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:18.908]             version = "1.8"), class = "FutureResult")
[17:03:18.908]     }, finally = {
[17:03:18.908]         if (!identical(...future.workdir, getwd())) 
[17:03:18.908]             setwd(...future.workdir)
[17:03:18.908]         {
[17:03:18.908]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:18.908]                 ...future.oldOptions$nwarnings <- NULL
[17:03:18.908]             }
[17:03:18.908]             base::options(...future.oldOptions)
[17:03:18.908]             if (.Platform$OS.type == "windows") {
[17:03:18.908]                 old_names <- names(...future.oldEnvVars)
[17:03:18.908]                 envs <- base::Sys.getenv()
[17:03:18.908]                 names <- names(envs)
[17:03:18.908]                 common <- intersect(names, old_names)
[17:03:18.908]                 added <- setdiff(names, old_names)
[17:03:18.908]                 removed <- setdiff(old_names, names)
[17:03:18.908]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:18.908]                   envs[common]]
[17:03:18.908]                 NAMES <- toupper(changed)
[17:03:18.908]                 args <- list()
[17:03:18.908]                 for (kk in seq_along(NAMES)) {
[17:03:18.908]                   name <- changed[[kk]]
[17:03:18.908]                   NAME <- NAMES[[kk]]
[17:03:18.908]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.908]                     next
[17:03:18.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.908]                 }
[17:03:18.908]                 NAMES <- toupper(added)
[17:03:18.908]                 for (kk in seq_along(NAMES)) {
[17:03:18.908]                   name <- added[[kk]]
[17:03:18.908]                   NAME <- NAMES[[kk]]
[17:03:18.908]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.908]                     next
[17:03:18.908]                   args[[name]] <- ""
[17:03:18.908]                 }
[17:03:18.908]                 NAMES <- toupper(removed)
[17:03:18.908]                 for (kk in seq_along(NAMES)) {
[17:03:18.908]                   name <- removed[[kk]]
[17:03:18.908]                   NAME <- NAMES[[kk]]
[17:03:18.908]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:18.908]                     next
[17:03:18.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:18.908]                 }
[17:03:18.908]                 if (length(args) > 0) 
[17:03:18.908]                   base::do.call(base::Sys.setenv, args = args)
[17:03:18.908]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:18.908]             }
[17:03:18.908]             else {
[17:03:18.908]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:18.908]             }
[17:03:18.908]             {
[17:03:18.908]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:18.908]                   0L) {
[17:03:18.908]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:18.908]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:18.908]                   base::options(opts)
[17:03:18.908]                 }
[17:03:18.908]                 {
[17:03:18.908]                   {
[17:03:18.908]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:18.908]                     NULL
[17:03:18.908]                   }
[17:03:18.908]                   options(future.plan = NULL)
[17:03:18.908]                   if (is.na(NA_character_)) 
[17:03:18.908]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:18.908]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:18.908]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:18.908]                     .init = FALSE)
[17:03:18.908]                 }
[17:03:18.908]             }
[17:03:18.908]         }
[17:03:18.908]     })
[17:03:18.908]     if (TRUE) {
[17:03:18.908]         base::sink(type = "output", split = FALSE)
[17:03:18.908]         if (TRUE) {
[17:03:18.908]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:18.908]         }
[17:03:18.908]         else {
[17:03:18.908]             ...future.result["stdout"] <- base::list(NULL)
[17:03:18.908]         }
[17:03:18.908]         base::close(...future.stdout)
[17:03:18.908]         ...future.stdout <- NULL
[17:03:18.908]     }
[17:03:18.908]     ...future.result$conditions <- ...future.conditions
[17:03:18.908]     ...future.result$finished <- base::Sys.time()
[17:03:18.908]     ...future.result
[17:03:18.908] }
[17:03:18.911] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[17:03:18.911] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[17:03:18.911] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[17:03:18.912] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[17:03:18.912] MultisessionFuture started
[17:03:18.912] - Launch lazy future ... done
[17:03:18.912] run() for ‘MultisessionFuture’ ... done
[17:03:18.913] result() for ClusterFuture ...
[17:03:18.913] receiveMessageFromWorker() for ClusterFuture ...
[17:03:18.913] - Validating connection of MultisessionFuture
[17:03:18.970] - received message: FutureResult
[17:03:18.970] - Received FutureResult
[17:03:18.970] - Erased future from FutureRegistry
[17:03:18.971] result() for ClusterFuture ...
[17:03:18.971] - result already collected: FutureResult
[17:03:18.971] result() for ClusterFuture ... done
[17:03:18.971] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:18.971] result() for ClusterFuture ... done
[17:03:18.971] result() for ClusterFuture ...
[17:03:18.971] - result already collected: FutureResult
[17:03:18.971] result() for ClusterFuture ... done
- plan(list('multisession', 'multisession')) ... DONE
> 
> message("*** Nested futures ... DONE")
*** Nested futures ... DONE
> 
> source("incl/end.R")
[17:03:18.972] plan(): Setting new future strategy stack:
[17:03:18.972] List of future strategies:
[17:03:18.972] 1. FutureStrategy:
[17:03:18.972]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:18.972]    - tweaked: FALSE
[17:03:18.972]    - call: future::plan(oplan)
[17:03:18.973] plan(): nbrOfWorkers() = 1
> 
