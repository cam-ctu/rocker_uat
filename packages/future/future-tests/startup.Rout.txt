
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:04:21.477] plan(): Setting new future strategy stack:
[17:04:21.477] List of future strategies:
[17:04:21.477] 1. sequential:
[17:04:21.477]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.477]    - tweaked: FALSE
[17:04:21.477]    - call: future::plan("sequential")
[17:04:21.488] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[17:04:21.503] plan(): Setting new future strategy stack:
[17:04:21.503] List of future strategies:
[17:04:21.503] 1. sequential:
[17:04:21.503]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.503]    - tweaked: FALSE
[17:04:21.503]    - call: NULL
[17:04:21.514] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[17:04:21.522] plan(): Setting new future strategy stack:
[17:04:21.522] List of future strategies:
[17:04:21.522] 1. sequential:
[17:04:21.522]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.522]    - tweaked: FALSE
[17:04:21.522]    - call: NULL
[17:04:21.522] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:04:21.523] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:21.524] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:21.524] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:21.525] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:21.526] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:21.526] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:21.526] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:21.526] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:21.526] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:21.526] R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:21.526] Coercing from character to numeric: ‘0.01’
[17:04:21.526] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[17:04:21.527] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:21.527] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:21.527] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:21.527] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:21.527] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:21.527] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:21.527] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:21.527] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:21.528] Setting plan('default')
[17:04:21.528] plan(): Setting new future strategy stack:
[17:04:21.528] List of future strategies:
[17:04:21.528] 1. sequential:
[17:04:21.528]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.528]    - tweaked: FALSE
[17:04:21.528]    - call: NULL
[17:04:21.528] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:04:21.529] plan(): Setting new future strategy stack:
[17:04:21.529] List of future strategies:
[17:04:21.529] 1. sequential:
[17:04:21.529]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.529]    - tweaked: FALSE
[17:04:21.529]    - call: NULL
[17:04:21.529] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:04:21.530] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:21.530] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:21.531] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:21.532] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:21.533] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:21.534] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:21.534] R command-line argument: -p 1
[17:04:21.534]  => options(future.plan = sequential)
[17:04:21.534] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:21.534] Setting plan('default')
[17:04:21.534] plan(): Setting new future strategy stack:
[17:04:21.534] List of future strategies:
[17:04:21.534] 1. sequential:
[17:04:21.534]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.534]    - tweaked: FALSE
[17:04:21.534]    - call: NULL
[17:04:21.537] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:04:21.538] plan(): Setting new future strategy stack:
[17:04:21.538] List of future strategies:
[17:04:21.538] 1. sequential:
[17:04:21.538]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.538]    - tweaked: FALSE
[17:04:21.538]    - call: NULL
[17:04:21.538] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[17:04:21.539] plan(): Setting new future strategy stack:
[17:04:21.539] List of future strategies:
[17:04:21.539] 1. sequential:
[17:04:21.539]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.539]    - tweaked: FALSE
[17:04:21.539]    - call: NULL
[17:04:21.539] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[17:04:21.540] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:21.540] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:21.540] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:21.540] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:21.540] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:21.540] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:21.541] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:21.542] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:21.543] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:21.543] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:21.543] Setting plan('default')
[17:04:21.543] plan(): Setting new future strategy stack:
[17:04:21.544] List of future strategies:
[17:04:21.544] 1. sequential:
[17:04:21.544]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.544]    - tweaked: FALSE
[17:04:21.544]    - call: NULL
[17:04:21.544] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:04:21.544] plan(): Setting new future strategy stack:
[17:04:21.545] List of future strategies:
[17:04:21.545] 1. sequential:
[17:04:21.545]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:21.545]    - tweaked: FALSE
[17:04:21.545]    - call: NULL
[17:04:21.545] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[17:04:21.546] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:21.546] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:21.546] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:21.546] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:21.546] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:21.546] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:21.546] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:21.547] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:21.548] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:21.549] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:21.549] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:21.549] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:21.549] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:21.549] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:21.549] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:21.549] R command-line argument: -p 2
[17:04:21.550]  => options(future.plan = tweak(multisession, workers = 2))
[17:04:21.552] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:21.552] Setting plan('default')
[17:04:21.552] plan(): Setting new future strategy stack:
[17:04:21.552] List of future strategies:
[17:04:21.552] 1. multisession:
[17:04:21.552]    - args: function (..., workers = 2L, envir = parent.frame())
[17:04:21.552]    - tweaked: TRUE
[17:04:21.552]    - call: NULL
[17:04:21.553] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[17:04:21.553] plan(): Setting new future strategy stack:
[17:04:21.553] List of future strategies:
[17:04:21.553] 1. multisession:
[17:04:21.553]    - args: function (..., workers = 2L, envir = parent.frame())
[17:04:21.553]    - tweaked: TRUE
[17:04:21.553]    - call: NULL
[17:04:21.553] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:21.553] multisession:
[17:04:21.553] - args: function (..., workers = 2L, envir = parent.frame())
[17:04:21.553] - tweaked: TRUE
[17:04:21.553] - call: NULL
[17:04:21.555] getGlobalsAndPackages() ...
[17:04:21.555] Not searching for globals
[17:04:21.555] - globals: [0] <none>
[17:04:21.555] getGlobalsAndPackages() ... DONE
[17:04:21.556] [local output] makeClusterPSOCK() ...
[17:04:21.591] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:04:21.593] [local output] Base port: 11409
[17:04:21.593] [local output] Getting setup options for 2 cluster nodes ...
[17:04:21.593] [local output]  - Node 1 of 2 ...
[17:04:21.593] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:21.594] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a4a00f4ae.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a4a00f4ae.pid")'’
[17:04:21.787] - Possible to infer worker's PID: TRUE
[17:04:21.787] [local output] Rscript port: 11409

[17:04:21.787] [local output]  - Node 2 of 2 ...
[17:04:21.788] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:21.788] [local output] Rscript port: 11409

[17:04:21.789] [local output] Getting setup options for 2 cluster nodes ... done
[17:04:21.789] [local output]  - Parallel setup requested for some PSOCK nodes
[17:04:21.789] [local output] Setting up PSOCK nodes in parallel
[17:04:21.789] List of 36
[17:04:21.789]  $ worker          : chr "localhost"
[17:04:21.789]   ..- attr(*, "localhost")= logi TRUE
[17:04:21.789]  $ master          : chr "localhost"
[17:04:21.789]  $ port            : int 11409
[17:04:21.789]  $ connectTimeout  : num 120
[17:04:21.789]  $ timeout         : num 2592000
[17:04:21.789]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:04:21.789]  $ homogeneous     : logi TRUE
[17:04:21.789]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:04:21.789]  $ rscript_envs    : NULL
[17:04:21.789]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:04:21.789]  $ rscript_startup : NULL
[17:04:21.789]  $ rscript_sh      : chr "sh"
[17:04:21.789]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:21.789]  $ methods         : logi TRUE
[17:04:21.789]  $ socketOptions   : chr "no-delay"
[17:04:21.789]  $ useXDR          : logi FALSE
[17:04:21.789]  $ outfile         : chr "/dev/null"
[17:04:21.789]  $ renice          : int NA
[17:04:21.789]  $ rshcmd          : NULL
[17:04:21.789]  $ user            : chr(0) 
[17:04:21.789]  $ revtunnel       : logi FALSE
[17:04:21.789]  $ rshlogfile      : NULL
[17:04:21.789]  $ rshopts         : chr(0) 
[17:04:21.789]  $ rank            : int 1
[17:04:21.789]  $ manual          : logi FALSE
[17:04:21.789]  $ dryrun          : logi FALSE
[17:04:21.789]  $ quiet           : logi FALSE
[17:04:21.789]  $ setup_strategy  : chr "parallel"
[17:04:21.789]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:21.789]  $ pidfile         : chr "/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a4a00f4ae.pid"
[17:04:21.789]  $ rshcmd_label    : NULL
[17:04:21.789]  $ rsh_call        : NULL
[17:04:21.789]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:21.789]  $ localMachine    : logi TRUE
[17:04:21.789]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:04:21.789]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:04:21.789]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:04:21.789]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:04:21.789]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:04:21.789]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:04:21.789]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:04:21.789]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:04:21.789]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:04:21.789]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:04:21.789]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:04:21.789]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:04:21.789]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:04:21.789]  $ arguments       :List of 28
[17:04:21.789]   ..$ worker          : chr "localhost"
[17:04:21.789]   ..$ master          : NULL
[17:04:21.789]   ..$ port            : int 11409
[17:04:21.789]   ..$ connectTimeout  : num 120
[17:04:21.789]   ..$ timeout         : num 2592000
[17:04:21.789]   ..$ rscript         : NULL
[17:04:21.789]   ..$ homogeneous     : NULL
[17:04:21.789]   ..$ rscript_args    : NULL
[17:04:21.789]   ..$ rscript_envs    : NULL
[17:04:21.789]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:04:21.789]   ..$ rscript_startup : NULL
[17:04:21.789]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:04:21.789]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:21.789]   ..$ methods         : logi TRUE
[17:04:21.789]   ..$ socketOptions   : chr "no-delay"
[17:04:21.789]   ..$ useXDR          : logi FALSE
[17:04:21.789]   ..$ outfile         : chr "/dev/null"
[17:04:21.789]   ..$ renice          : int NA
[17:04:21.789]   ..$ rshcmd          : NULL
[17:04:21.789]   ..$ user            : NULL
[17:04:21.789]   ..$ revtunnel       : logi NA
[17:04:21.789]   ..$ rshlogfile      : NULL
[17:04:21.789]   ..$ rshopts         : NULL
[17:04:21.789]   ..$ rank            : int 1
[17:04:21.789]   ..$ manual          : logi FALSE
[17:04:21.789]   ..$ dryrun          : logi FALSE
[17:04:21.789]   ..$ quiet           : logi FALSE
[17:04:21.789]   ..$ setup_strategy  : chr "parallel"
[17:04:21.789]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:04:21.806] [local output] System call to launch all workers:
[17:04:21.806] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a4a00f4ae.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11409 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:04:21.806] [local output] Starting PSOCK main server
[17:04:21.812] [local output] Workers launched
[17:04:21.812] [local output] Waiting for workers to connect back
[17:04:21.813]  - [local output] 0 workers out of 2 ready
[17:04:22.059]  - [local output] 0 workers out of 2 ready
[17:04:22.059]  - [local output] 1 workers out of 2 ready
[17:04:22.060]  - [local output] 2 workers out of 2 ready
[17:04:22.060] [local output] Launching of workers completed
[17:04:22.060] [local output] Collecting session information from workers
[17:04:22.061] [local output]  - Worker #1 of 2
[17:04:22.061] [local output]  - Worker #2 of 2
[17:04:22.061] [local output] makeClusterPSOCK() ... done
[17:04:22.073] Packages needed by the future expression (n = 0): <none>
[17:04:22.073] Packages needed by future strategies (n = 0): <none>
[17:04:22.074] {
[17:04:22.074]     {
[17:04:22.074]         {
[17:04:22.074]             ...future.startTime <- base::Sys.time()
[17:04:22.074]             {
[17:04:22.074]                 {
[17:04:22.074]                   {
[17:04:22.074]                     {
[17:04:22.074]                       base::local({
[17:04:22.074]                         has_future <- base::requireNamespace("future", 
[17:04:22.074]                           quietly = TRUE)
[17:04:22.074]                         if (has_future) {
[17:04:22.074]                           ns <- base::getNamespace("future")
[17:04:22.074]                           version <- ns[[".package"]][["version"]]
[17:04:22.074]                           if (is.null(version)) 
[17:04:22.074]                             version <- utils::packageVersion("future")
[17:04:22.074]                         }
[17:04:22.074]                         else {
[17:04:22.074]                           version <- NULL
[17:04:22.074]                         }
[17:04:22.074]                         if (!has_future || version < "1.8.0") {
[17:04:22.074]                           info <- base::c(r_version = base::gsub("R version ", 
[17:04:22.074]                             "", base::R.version$version.string), 
[17:04:22.074]                             platform = base::sprintf("%s (%s-bit)", 
[17:04:22.074]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:22.074]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:22.074]                               "release", "version")], collapse = " "), 
[17:04:22.074]                             hostname = base::Sys.info()[["nodename"]])
[17:04:22.074]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:04:22.074]                             info)
[17:04:22.074]                           info <- base::paste(info, collapse = "; ")
[17:04:22.074]                           if (!has_future) {
[17:04:22.074]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:22.074]                               info)
[17:04:22.074]                           }
[17:04:22.074]                           else {
[17:04:22.074]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:22.074]                               info, version)
[17:04:22.074]                           }
[17:04:22.074]                           base::stop(msg)
[17:04:22.074]                         }
[17:04:22.074]                       })
[17:04:22.074]                     }
[17:04:22.074]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:04:22.074]                     base::options(mc.cores = 1L)
[17:04:22.074]                   }
[17:04:22.074]                   ...future.strategy.old <- future::plan("list")
[17:04:22.074]                   options(future.plan = NULL)
[17:04:22.074]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:22.074]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:22.074]                 }
[17:04:22.074]                 ...future.workdir <- getwd()
[17:04:22.074]             }
[17:04:22.074]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:22.074]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:22.074]         }
[17:04:22.074]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:22.074]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:22.074]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:22.074]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:22.074]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:22.074]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:22.074]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:22.074]             base::names(...future.oldOptions))
[17:04:22.074]     }
[17:04:22.074]     if (FALSE) {
[17:04:22.074]     }
[17:04:22.074]     else {
[17:04:22.074]         if (TRUE) {
[17:04:22.074]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:22.074]                 open = "w")
[17:04:22.074]         }
[17:04:22.074]         else {
[17:04:22.074]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:22.074]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:22.074]         }
[17:04:22.074]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:22.074]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:22.074]             base::sink(type = "output", split = FALSE)
[17:04:22.074]             base::close(...future.stdout)
[17:04:22.074]         }, add = TRUE)
[17:04:22.074]     }
[17:04:22.074]     ...future.frame <- base::sys.nframe()
[17:04:22.074]     ...future.conditions <- base::list()
[17:04:22.074]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:22.074]     if (FALSE) {
[17:04:22.074]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:22.074]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:22.074]     }
[17:04:22.074]     ...future.result <- base::tryCatch({
[17:04:22.074]         base::withCallingHandlers({
[17:04:22.074]             ...future.value <- base::withVisible(base::local({
[17:04:22.074]                 ...future.makeSendCondition <- base::local({
[17:04:22.074]                   sendCondition <- NULL
[17:04:22.074]                   function(frame = 1L) {
[17:04:22.074]                     if (is.function(sendCondition)) 
[17:04:22.074]                       return(sendCondition)
[17:04:22.074]                     ns <- getNamespace("parallel")
[17:04:22.074]                     if (exists("sendData", mode = "function", 
[17:04:22.074]                       envir = ns)) {
[17:04:22.074]                       parallel_sendData <- get("sendData", mode = "function", 
[17:04:22.074]                         envir = ns)
[17:04:22.074]                       envir <- sys.frame(frame)
[17:04:22.074]                       master <- NULL
[17:04:22.074]                       while (!identical(envir, .GlobalEnv) && 
[17:04:22.074]                         !identical(envir, emptyenv())) {
[17:04:22.074]                         if (exists("master", mode = "list", envir = envir, 
[17:04:22.074]                           inherits = FALSE)) {
[17:04:22.074]                           master <- get("master", mode = "list", 
[17:04:22.074]                             envir = envir, inherits = FALSE)
[17:04:22.074]                           if (inherits(master, c("SOCKnode", 
[17:04:22.074]                             "SOCK0node"))) {
[17:04:22.074]                             sendCondition <<- function(cond) {
[17:04:22.074]                               data <- list(type = "VALUE", value = cond, 
[17:04:22.074]                                 success = TRUE)
[17:04:22.074]                               parallel_sendData(master, data)
[17:04:22.074]                             }
[17:04:22.074]                             return(sendCondition)
[17:04:22.074]                           }
[17:04:22.074]                         }
[17:04:22.074]                         frame <- frame + 1L
[17:04:22.074]                         envir <- sys.frame(frame)
[17:04:22.074]                       }
[17:04:22.074]                     }
[17:04:22.074]                     sendCondition <<- function(cond) NULL
[17:04:22.074]                   }
[17:04:22.074]                 })
[17:04:22.074]                 withCallingHandlers({
[17:04:22.074]                   NA
[17:04:22.074]                 }, immediateCondition = function(cond) {
[17:04:22.074]                   sendCondition <- ...future.makeSendCondition()
[17:04:22.074]                   sendCondition(cond)
[17:04:22.074]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.074]                   {
[17:04:22.074]                     inherits <- base::inherits
[17:04:22.074]                     invokeRestart <- base::invokeRestart
[17:04:22.074]                     is.null <- base::is.null
[17:04:22.074]                     muffled <- FALSE
[17:04:22.074]                     if (inherits(cond, "message")) {
[17:04:22.074]                       muffled <- grepl(pattern, "muffleMessage")
[17:04:22.074]                       if (muffled) 
[17:04:22.074]                         invokeRestart("muffleMessage")
[17:04:22.074]                     }
[17:04:22.074]                     else if (inherits(cond, "warning")) {
[17:04:22.074]                       muffled <- grepl(pattern, "muffleWarning")
[17:04:22.074]                       if (muffled) 
[17:04:22.074]                         invokeRestart("muffleWarning")
[17:04:22.074]                     }
[17:04:22.074]                     else if (inherits(cond, "condition")) {
[17:04:22.074]                       if (!is.null(pattern)) {
[17:04:22.074]                         computeRestarts <- base::computeRestarts
[17:04:22.074]                         grepl <- base::grepl
[17:04:22.074]                         restarts <- computeRestarts(cond)
[17:04:22.074]                         for (restart in restarts) {
[17:04:22.074]                           name <- restart$name
[17:04:22.074]                           if (is.null(name)) 
[17:04:22.074]                             next
[17:04:22.074]                           if (!grepl(pattern, name)) 
[17:04:22.074]                             next
[17:04:22.074]                           invokeRestart(restart)
[17:04:22.074]                           muffled <- TRUE
[17:04:22.074]                           break
[17:04:22.074]                         }
[17:04:22.074]                       }
[17:04:22.074]                     }
[17:04:22.074]                     invisible(muffled)
[17:04:22.074]                   }
[17:04:22.074]                   muffleCondition(cond)
[17:04:22.074]                 })
[17:04:22.074]             }))
[17:04:22.074]             future::FutureResult(value = ...future.value$value, 
[17:04:22.074]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:22.074]                   ...future.rng), globalenv = if (FALSE) 
[17:04:22.074]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:22.074]                     ...future.globalenv.names))
[17:04:22.074]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:22.074]         }, condition = base::local({
[17:04:22.074]             c <- base::c
[17:04:22.074]             inherits <- base::inherits
[17:04:22.074]             invokeRestart <- base::invokeRestart
[17:04:22.074]             length <- base::length
[17:04:22.074]             list <- base::list
[17:04:22.074]             seq.int <- base::seq.int
[17:04:22.074]             signalCondition <- base::signalCondition
[17:04:22.074]             sys.calls <- base::sys.calls
[17:04:22.074]             `[[` <- base::`[[`
[17:04:22.074]             `+` <- base::`+`
[17:04:22.074]             `<<-` <- base::`<<-`
[17:04:22.074]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:22.074]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:22.074]                   3L)]
[17:04:22.074]             }
[17:04:22.074]             function(cond) {
[17:04:22.074]                 is_error <- inherits(cond, "error")
[17:04:22.074]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:22.074]                   NULL)
[17:04:22.074]                 if (is_error) {
[17:04:22.074]                   sessionInformation <- function() {
[17:04:22.074]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:22.074]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:22.074]                       search = base::search(), system = base::Sys.info())
[17:04:22.074]                   }
[17:04:22.074]                   ...future.conditions[[length(...future.conditions) + 
[17:04:22.074]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:22.074]                     cond$call), session = sessionInformation(), 
[17:04:22.074]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:22.074]                   signalCondition(cond)
[17:04:22.074]                 }
[17:04:22.074]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:22.074]                 "immediateCondition"))) {
[17:04:22.074]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:22.074]                   ...future.conditions[[length(...future.conditions) + 
[17:04:22.074]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:22.074]                   if (TRUE && !signal) {
[17:04:22.074]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.074]                     {
[17:04:22.074]                       inherits <- base::inherits
[17:04:22.074]                       invokeRestart <- base::invokeRestart
[17:04:22.074]                       is.null <- base::is.null
[17:04:22.074]                       muffled <- FALSE
[17:04:22.074]                       if (inherits(cond, "message")) {
[17:04:22.074]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:22.074]                         if (muffled) 
[17:04:22.074]                           invokeRestart("muffleMessage")
[17:04:22.074]                       }
[17:04:22.074]                       else if (inherits(cond, "warning")) {
[17:04:22.074]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:22.074]                         if (muffled) 
[17:04:22.074]                           invokeRestart("muffleWarning")
[17:04:22.074]                       }
[17:04:22.074]                       else if (inherits(cond, "condition")) {
[17:04:22.074]                         if (!is.null(pattern)) {
[17:04:22.074]                           computeRestarts <- base::computeRestarts
[17:04:22.074]                           grepl <- base::grepl
[17:04:22.074]                           restarts <- computeRestarts(cond)
[17:04:22.074]                           for (restart in restarts) {
[17:04:22.074]                             name <- restart$name
[17:04:22.074]                             if (is.null(name)) 
[17:04:22.074]                               next
[17:04:22.074]                             if (!grepl(pattern, name)) 
[17:04:22.074]                               next
[17:04:22.074]                             invokeRestart(restart)
[17:04:22.074]                             muffled <- TRUE
[17:04:22.074]                             break
[17:04:22.074]                           }
[17:04:22.074]                         }
[17:04:22.074]                       }
[17:04:22.074]                       invisible(muffled)
[17:04:22.074]                     }
[17:04:22.074]                     muffleCondition(cond, pattern = "^muffle")
[17:04:22.074]                   }
[17:04:22.074]                 }
[17:04:22.074]                 else {
[17:04:22.074]                   if (TRUE) {
[17:04:22.074]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.074]                     {
[17:04:22.074]                       inherits <- base::inherits
[17:04:22.074]                       invokeRestart <- base::invokeRestart
[17:04:22.074]                       is.null <- base::is.null
[17:04:22.074]                       muffled <- FALSE
[17:04:22.074]                       if (inherits(cond, "message")) {
[17:04:22.074]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:22.074]                         if (muffled) 
[17:04:22.074]                           invokeRestart("muffleMessage")
[17:04:22.074]                       }
[17:04:22.074]                       else if (inherits(cond, "warning")) {
[17:04:22.074]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:22.074]                         if (muffled) 
[17:04:22.074]                           invokeRestart("muffleWarning")
[17:04:22.074]                       }
[17:04:22.074]                       else if (inherits(cond, "condition")) {
[17:04:22.074]                         if (!is.null(pattern)) {
[17:04:22.074]                           computeRestarts <- base::computeRestarts
[17:04:22.074]                           grepl <- base::grepl
[17:04:22.074]                           restarts <- computeRestarts(cond)
[17:04:22.074]                           for (restart in restarts) {
[17:04:22.074]                             name <- restart$name
[17:04:22.074]                             if (is.null(name)) 
[17:04:22.074]                               next
[17:04:22.074]                             if (!grepl(pattern, name)) 
[17:04:22.074]                               next
[17:04:22.074]                             invokeRestart(restart)
[17:04:22.074]                             muffled <- TRUE
[17:04:22.074]                             break
[17:04:22.074]                           }
[17:04:22.074]                         }
[17:04:22.074]                       }
[17:04:22.074]                       invisible(muffled)
[17:04:22.074]                     }
[17:04:22.074]                     muffleCondition(cond, pattern = "^muffle")
[17:04:22.074]                   }
[17:04:22.074]                 }
[17:04:22.074]             }
[17:04:22.074]         }))
[17:04:22.074]     }, error = function(ex) {
[17:04:22.074]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:22.074]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:22.074]                 ...future.rng), started = ...future.startTime, 
[17:04:22.074]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:22.074]             version = "1.8"), class = "FutureResult")
[17:04:22.074]     }, finally = {
[17:04:22.074]         if (!identical(...future.workdir, getwd())) 
[17:04:22.074]             setwd(...future.workdir)
[17:04:22.074]         {
[17:04:22.074]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:22.074]                 ...future.oldOptions$nwarnings <- NULL
[17:04:22.074]             }
[17:04:22.074]             base::options(...future.oldOptions)
[17:04:22.074]             if (.Platform$OS.type == "windows") {
[17:04:22.074]                 old_names <- names(...future.oldEnvVars)
[17:04:22.074]                 envs <- base::Sys.getenv()
[17:04:22.074]                 names <- names(envs)
[17:04:22.074]                 common <- intersect(names, old_names)
[17:04:22.074]                 added <- setdiff(names, old_names)
[17:04:22.074]                 removed <- setdiff(old_names, names)
[17:04:22.074]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:22.074]                   envs[common]]
[17:04:22.074]                 NAMES <- toupper(changed)
[17:04:22.074]                 args <- list()
[17:04:22.074]                 for (kk in seq_along(NAMES)) {
[17:04:22.074]                   name <- changed[[kk]]
[17:04:22.074]                   NAME <- NAMES[[kk]]
[17:04:22.074]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.074]                     next
[17:04:22.074]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:22.074]                 }
[17:04:22.074]                 NAMES <- toupper(added)
[17:04:22.074]                 for (kk in seq_along(NAMES)) {
[17:04:22.074]                   name <- added[[kk]]
[17:04:22.074]                   NAME <- NAMES[[kk]]
[17:04:22.074]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.074]                     next
[17:04:22.074]                   args[[name]] <- ""
[17:04:22.074]                 }
[17:04:22.074]                 NAMES <- toupper(removed)
[17:04:22.074]                 for (kk in seq_along(NAMES)) {
[17:04:22.074]                   name <- removed[[kk]]
[17:04:22.074]                   NAME <- NAMES[[kk]]
[17:04:22.074]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.074]                     next
[17:04:22.074]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:22.074]                 }
[17:04:22.074]                 if (length(args) > 0) 
[17:04:22.074]                   base::do.call(base::Sys.setenv, args = args)
[17:04:22.074]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:22.074]             }
[17:04:22.074]             else {
[17:04:22.074]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:22.074]             }
[17:04:22.074]             {
[17:04:22.074]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:22.074]                   0L) {
[17:04:22.074]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:22.074]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:22.074]                   base::options(opts)
[17:04:22.074]                 }
[17:04:22.074]                 {
[17:04:22.074]                   {
[17:04:22.074]                     base::options(mc.cores = ...future.mc.cores.old)
[17:04:22.074]                     NULL
[17:04:22.074]                   }
[17:04:22.074]                   options(future.plan = function (..., workers = 2L, 
[17:04:22.074]                     envir = parent.frame()) 
[17:04:22.074]                   strategy(..., workers = workers, envir = envir))
[17:04:22.074]                   if (is.na(NA_character_)) 
[17:04:22.074]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:22.074]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:04:22.074]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:22.074]                     .init = FALSE)
[17:04:22.074]                 }
[17:04:22.074]             }
[17:04:22.074]         }
[17:04:22.074]     })
[17:04:22.074]     if (TRUE) {
[17:04:22.074]         base::sink(type = "output", split = FALSE)
[17:04:22.074]         if (TRUE) {
[17:04:22.074]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:22.074]         }
[17:04:22.074]         else {
[17:04:22.074]             ...future.result["stdout"] <- base::list(NULL)
[17:04:22.074]         }
[17:04:22.074]         base::close(...future.stdout)
[17:04:22.074]         ...future.stdout <- NULL
[17:04:22.074]     }
[17:04:22.074]     ...future.result$conditions <- ...future.conditions
[17:04:22.074]     ...future.result$finished <- base::Sys.time()
[17:04:22.074]     ...future.result
[17:04:22.074] }
[17:04:22.128] MultisessionFuture started
[17:04:22.129] result() for ClusterFuture ...
[17:04:22.129] receiveMessageFromWorker() for ClusterFuture ...
[17:04:22.130] - Validating connection of MultisessionFuture
[17:04:22.162] - received message: FutureResult
[17:04:22.162] - Received FutureResult
[17:04:22.164] - Erased future from FutureRegistry
[17:04:22.165] result() for ClusterFuture ...
[17:04:22.165] - result already collected: FutureResult
[17:04:22.165] result() for ClusterFuture ... done
[17:04:22.165] receiveMessageFromWorker() for ClusterFuture ... done
[17:04:22.165] result() for ClusterFuture ... done
[17:04:22.165] result() for ClusterFuture ...
[17:04:22.165] - result already collected: FutureResult
[17:04:22.165] result() for ClusterFuture ... done
[17:04:22.165] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:22.166] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[17:04:22.167] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:22.167] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:22.167] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:22.167] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:22.167] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:22.167] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:22.168] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:22.169] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:22.170] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:22.171] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:22.171] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:22.171] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[17:04:22.171] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:22.172] Setting plan('default')
[17:04:22.172] plan(): Setting new future strategy stack:
[17:04:22.172] List of future strategies:
[17:04:22.172] 1. sequential:
[17:04:22.172]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:22.172]    - tweaked: FALSE
[17:04:22.172]    - call: NULL
[17:04:22.173] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:04:22.174] plan(): Setting new future strategy stack:
[17:04:22.174] List of future strategies:
[17:04:22.174] 1. sequential:
[17:04:22.174]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:22.174]    - tweaked: FALSE
[17:04:22.174]    - call: NULL
[17:04:22.174] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[17:04:22.176] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:22.176] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:22.176] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:22.176] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:22.177] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:22.177] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:22.177] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:22.177] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:22.177] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:22.178] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:22.178] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:22.178] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:22.178] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:22.178] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:22.178] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:22.179] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:22.179] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:22.179] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:22.179] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:22.179] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:22.180] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:22.180] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:22.180] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:22.180] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:22.180] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:22.181] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:22.181] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:22.181] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:22.181] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:22.181] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:22.181] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:22.182] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[17:04:22.182] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:22.183] Setting plan('default')
[17:04:22.183] plan(): Setting new future strategy stack:
[17:04:22.183] List of future strategies:
[17:04:22.183] 1. sequential:
[17:04:22.183]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:22.183]    - tweaked: FALSE
[17:04:22.183]    - call: NULL
[17:04:22.184] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:04:22.184] plan(): Setting new future strategy stack:
[17:04:22.184] List of future strategies:
[17:04:22.184] 1. sequential:
[17:04:22.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:22.184]    - tweaked: FALSE
[17:04:22.184]    - call: NULL
[17:04:22.185] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[17:04:22.186] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:22.186] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:22.186] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:22.187] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_PLAN’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:22.188] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:22.189] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:22.190] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[17:04:22.191] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:22.191] Setting plan('default')
[17:04:22.191] plan(): Setting new future strategy stack:
[17:04:22.191] List of future strategies:
[17:04:22.191] 1. sequential:
[17:04:22.191]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:22.191]    - tweaked: FALSE
[17:04:22.191]    - call: NULL
[17:04:22.192] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:04:22.193] plan(): Setting new future strategy stack:
[17:04:22.193] List of future strategies:
[17:04:22.193] 1. sequential:
[17:04:22.193]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:22.193]    - tweaked: FALSE
[17:04:22.193]    - call: NULL
[17:04:22.193] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:04:22.194] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:22.194] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:22.195] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:22.196] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:22.196] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:22.196] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:22.196] R_FUTURE_PLAN=‘multisession’
[17:04:22.196] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:04:22.196] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:22.196] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:22.197] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:22.198] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:22.199] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:22.199] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:22.199] Option 'future.plan' = ‘multisession’
[17:04:22.199] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:22.199] Setting plan('default')
[17:04:22.199] plan(): Setting new future strategy stack:
[17:04:22.199] List of future strategies:
[17:04:22.199] 1. multisession:
[17:04:22.199]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:22.199]    - tweaked: FALSE
[17:04:22.199]    - call: plan("default", .init = FALSE)
[17:04:22.203] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:04:22.206] plan(): Setting new future strategy stack:
[17:04:22.206] List of future strategies:
[17:04:22.206] 1. multisession:
[17:04:22.206]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:22.206]    - tweaked: FALSE
[17:04:22.206]    - call: plan("default")
[17:04:22.207] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:22.207] multisession:
[17:04:22.207] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:22.207] - tweaked: FALSE
[17:04:22.207] - call: plan("default")
[17:04:22.211] getGlobalsAndPackages() ...
[17:04:22.211] Not searching for globals
[17:04:22.211] - globals: [0] <none>
[17:04:22.211] getGlobalsAndPackages() ... DONE
[17:04:22.212] [local output] makeClusterPSOCK() ...
[17:04:22.215] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:04:22.215] [local output] Base port: 11720
[17:04:22.215] [local output] Getting setup options for 2 cluster nodes ...
[17:04:22.216] [local output]  - Node 1 of 2 ...
[17:04:22.216] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:22.216] [local output] Rscript port: 11720

[17:04:22.217] [local output]  - Node 2 of 2 ...
[17:04:22.217] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:22.218] [local output] Rscript port: 11720

[17:04:22.218] [local output] Getting setup options for 2 cluster nodes ... done
[17:04:22.218] [local output]  - Parallel setup requested for some PSOCK nodes
[17:04:22.218] [local output] Setting up PSOCK nodes in parallel
[17:04:22.218] List of 36
[17:04:22.218]  $ worker          : chr "localhost"
[17:04:22.218]   ..- attr(*, "localhost")= logi TRUE
[17:04:22.218]  $ master          : chr "localhost"
[17:04:22.218]  $ port            : int 11720
[17:04:22.218]  $ connectTimeout  : num 120
[17:04:22.218]  $ timeout         : num 2592000
[17:04:22.218]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:04:22.218]  $ homogeneous     : logi TRUE
[17:04:22.218]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:04:22.218]  $ rscript_envs    : NULL
[17:04:22.218]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:04:22.218]  $ rscript_startup : NULL
[17:04:22.218]  $ rscript_sh      : chr "sh"
[17:04:22.218]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:22.218]  $ methods         : logi TRUE
[17:04:22.218]  $ socketOptions   : chr "no-delay"
[17:04:22.218]  $ useXDR          : logi FALSE
[17:04:22.218]  $ outfile         : chr "/dev/null"
[17:04:22.218]  $ renice          : int NA
[17:04:22.218]  $ rshcmd          : NULL
[17:04:22.218]  $ user            : chr(0) 
[17:04:22.218]  $ revtunnel       : logi FALSE
[17:04:22.218]  $ rshlogfile      : NULL
[17:04:22.218]  $ rshopts         : chr(0) 
[17:04:22.218]  $ rank            : int 1
[17:04:22.218]  $ manual          : logi FALSE
[17:04:22.218]  $ dryrun          : logi FALSE
[17:04:22.218]  $ quiet           : logi FALSE
[17:04:22.218]  $ setup_strategy  : chr "parallel"
[17:04:22.218]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:22.218]  $ pidfile         : chr "/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a7f8ccc5a.pid"
[17:04:22.218]  $ rshcmd_label    : NULL
[17:04:22.218]  $ rsh_call        : NULL
[17:04:22.218]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:22.218]  $ localMachine    : logi TRUE
[17:04:22.218]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:04:22.218]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:04:22.218]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:04:22.218]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:04:22.218]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:04:22.218]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:04:22.218]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:04:22.218]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:04:22.218]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:04:22.218]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:04:22.218]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:04:22.218]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:04:22.218]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:04:22.218]  $ arguments       :List of 28
[17:04:22.218]   ..$ worker          : chr "localhost"
[17:04:22.218]   ..$ master          : NULL
[17:04:22.218]   ..$ port            : int 11720
[17:04:22.218]   ..$ connectTimeout  : num 120
[17:04:22.218]   ..$ timeout         : num 2592000
[17:04:22.218]   ..$ rscript         : NULL
[17:04:22.218]   ..$ homogeneous     : NULL
[17:04:22.218]   ..$ rscript_args    : NULL
[17:04:22.218]   ..$ rscript_envs    : NULL
[17:04:22.218]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:04:22.218]   ..$ rscript_startup : NULL
[17:04:22.218]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:04:22.218]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:22.218]   ..$ methods         : logi TRUE
[17:04:22.218]   ..$ socketOptions   : chr "no-delay"
[17:04:22.218]   ..$ useXDR          : logi FALSE
[17:04:22.218]   ..$ outfile         : chr "/dev/null"
[17:04:22.218]   ..$ renice          : int NA
[17:04:22.218]   ..$ rshcmd          : NULL
[17:04:22.218]   ..$ user            : NULL
[17:04:22.218]   ..$ revtunnel       : logi NA
[17:04:22.218]   ..$ rshlogfile      : NULL
[17:04:22.218]   ..$ rshopts         : NULL
[17:04:22.218]   ..$ rank            : int 1
[17:04:22.218]   ..$ manual          : logi FALSE
[17:04:22.218]   ..$ dryrun          : logi FALSE
[17:04:22.218]   ..$ quiet           : logi FALSE
[17:04:22.218]   ..$ setup_strategy  : chr "parallel"
[17:04:22.218]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:04:22.235] [local output] System call to launch all workers:
[17:04:22.235] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a7f8ccc5a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11720 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:04:22.235] [local output] Starting PSOCK main server
[17:04:22.236] [local output] Workers launched
[17:04:22.237] [local output] Waiting for workers to connect back
[17:04:22.237]  - [local output] 0 workers out of 2 ready
[17:04:22.512]  - [local output] 0 workers out of 2 ready
[17:04:22.513]  - [local output] 1 workers out of 2 ready
[17:04:22.513]  - [local output] 2 workers out of 2 ready
[17:04:22.513] [local output] Launching of workers completed
[17:04:22.513] [local output] Collecting session information from workers
[17:04:22.514] [local output]  - Worker #1 of 2
[17:04:22.515] [local output]  - Worker #2 of 2
[17:04:22.515] [local output] makeClusterPSOCK() ... done
[17:04:22.526] Packages needed by the future expression (n = 0): <none>
[17:04:22.526] Packages needed by future strategies (n = 0): <none>
[17:04:22.527] {
[17:04:22.527]     {
[17:04:22.527]         {
[17:04:22.527]             ...future.startTime <- base::Sys.time()
[17:04:22.527]             {
[17:04:22.527]                 {
[17:04:22.527]                   {
[17:04:22.527]                     {
[17:04:22.527]                       base::local({
[17:04:22.527]                         has_future <- base::requireNamespace("future", 
[17:04:22.527]                           quietly = TRUE)
[17:04:22.527]                         if (has_future) {
[17:04:22.527]                           ns <- base::getNamespace("future")
[17:04:22.527]                           version <- ns[[".package"]][["version"]]
[17:04:22.527]                           if (is.null(version)) 
[17:04:22.527]                             version <- utils::packageVersion("future")
[17:04:22.527]                         }
[17:04:22.527]                         else {
[17:04:22.527]                           version <- NULL
[17:04:22.527]                         }
[17:04:22.527]                         if (!has_future || version < "1.8.0") {
[17:04:22.527]                           info <- base::c(r_version = base::gsub("R version ", 
[17:04:22.527]                             "", base::R.version$version.string), 
[17:04:22.527]                             platform = base::sprintf("%s (%s-bit)", 
[17:04:22.527]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:22.527]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:22.527]                               "release", "version")], collapse = " "), 
[17:04:22.527]                             hostname = base::Sys.info()[["nodename"]])
[17:04:22.527]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:04:22.527]                             info)
[17:04:22.527]                           info <- base::paste(info, collapse = "; ")
[17:04:22.527]                           if (!has_future) {
[17:04:22.527]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:22.527]                               info)
[17:04:22.527]                           }
[17:04:22.527]                           else {
[17:04:22.527]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:22.527]                               info, version)
[17:04:22.527]                           }
[17:04:22.527]                           base::stop(msg)
[17:04:22.527]                         }
[17:04:22.527]                       })
[17:04:22.527]                     }
[17:04:22.527]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:04:22.527]                     base::options(mc.cores = 1L)
[17:04:22.527]                   }
[17:04:22.527]                   ...future.strategy.old <- future::plan("list")
[17:04:22.527]                   options(future.plan = NULL)
[17:04:22.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:22.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:22.527]                 }
[17:04:22.527]                 ...future.workdir <- getwd()
[17:04:22.527]             }
[17:04:22.527]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:22.527]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:22.527]         }
[17:04:22.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:22.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:22.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:22.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:22.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:22.527]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:22.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:22.527]             base::names(...future.oldOptions))
[17:04:22.527]     }
[17:04:22.527]     if (FALSE) {
[17:04:22.527]     }
[17:04:22.527]     else {
[17:04:22.527]         if (TRUE) {
[17:04:22.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:22.527]                 open = "w")
[17:04:22.527]         }
[17:04:22.527]         else {
[17:04:22.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:22.527]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:22.527]         }
[17:04:22.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:22.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:22.527]             base::sink(type = "output", split = FALSE)
[17:04:22.527]             base::close(...future.stdout)
[17:04:22.527]         }, add = TRUE)
[17:04:22.527]     }
[17:04:22.527]     ...future.frame <- base::sys.nframe()
[17:04:22.527]     ...future.conditions <- base::list()
[17:04:22.527]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:22.527]     if (FALSE) {
[17:04:22.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:22.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:22.527]     }
[17:04:22.527]     ...future.result <- base::tryCatch({
[17:04:22.527]         base::withCallingHandlers({
[17:04:22.527]             ...future.value <- base::withVisible(base::local({
[17:04:22.527]                 ...future.makeSendCondition <- base::local({
[17:04:22.527]                   sendCondition <- NULL
[17:04:22.527]                   function(frame = 1L) {
[17:04:22.527]                     if (is.function(sendCondition)) 
[17:04:22.527]                       return(sendCondition)
[17:04:22.527]                     ns <- getNamespace("parallel")
[17:04:22.527]                     if (exists("sendData", mode = "function", 
[17:04:22.527]                       envir = ns)) {
[17:04:22.527]                       parallel_sendData <- get("sendData", mode = "function", 
[17:04:22.527]                         envir = ns)
[17:04:22.527]                       envir <- sys.frame(frame)
[17:04:22.527]                       master <- NULL
[17:04:22.527]                       while (!identical(envir, .GlobalEnv) && 
[17:04:22.527]                         !identical(envir, emptyenv())) {
[17:04:22.527]                         if (exists("master", mode = "list", envir = envir, 
[17:04:22.527]                           inherits = FALSE)) {
[17:04:22.527]                           master <- get("master", mode = "list", 
[17:04:22.527]                             envir = envir, inherits = FALSE)
[17:04:22.527]                           if (inherits(master, c("SOCKnode", 
[17:04:22.527]                             "SOCK0node"))) {
[17:04:22.527]                             sendCondition <<- function(cond) {
[17:04:22.527]                               data <- list(type = "VALUE", value = cond, 
[17:04:22.527]                                 success = TRUE)
[17:04:22.527]                               parallel_sendData(master, data)
[17:04:22.527]                             }
[17:04:22.527]                             return(sendCondition)
[17:04:22.527]                           }
[17:04:22.527]                         }
[17:04:22.527]                         frame <- frame + 1L
[17:04:22.527]                         envir <- sys.frame(frame)
[17:04:22.527]                       }
[17:04:22.527]                     }
[17:04:22.527]                     sendCondition <<- function(cond) NULL
[17:04:22.527]                   }
[17:04:22.527]                 })
[17:04:22.527]                 withCallingHandlers({
[17:04:22.527]                   NA
[17:04:22.527]                 }, immediateCondition = function(cond) {
[17:04:22.527]                   sendCondition <- ...future.makeSendCondition()
[17:04:22.527]                   sendCondition(cond)
[17:04:22.527]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.527]                   {
[17:04:22.527]                     inherits <- base::inherits
[17:04:22.527]                     invokeRestart <- base::invokeRestart
[17:04:22.527]                     is.null <- base::is.null
[17:04:22.527]                     muffled <- FALSE
[17:04:22.527]                     if (inherits(cond, "message")) {
[17:04:22.527]                       muffled <- grepl(pattern, "muffleMessage")
[17:04:22.527]                       if (muffled) 
[17:04:22.527]                         invokeRestart("muffleMessage")
[17:04:22.527]                     }
[17:04:22.527]                     else if (inherits(cond, "warning")) {
[17:04:22.527]                       muffled <- grepl(pattern, "muffleWarning")
[17:04:22.527]                       if (muffled) 
[17:04:22.527]                         invokeRestart("muffleWarning")
[17:04:22.527]                     }
[17:04:22.527]                     else if (inherits(cond, "condition")) {
[17:04:22.527]                       if (!is.null(pattern)) {
[17:04:22.527]                         computeRestarts <- base::computeRestarts
[17:04:22.527]                         grepl <- base::grepl
[17:04:22.527]                         restarts <- computeRestarts(cond)
[17:04:22.527]                         for (restart in restarts) {
[17:04:22.527]                           name <- restart$name
[17:04:22.527]                           if (is.null(name)) 
[17:04:22.527]                             next
[17:04:22.527]                           if (!grepl(pattern, name)) 
[17:04:22.527]                             next
[17:04:22.527]                           invokeRestart(restart)
[17:04:22.527]                           muffled <- TRUE
[17:04:22.527]                           break
[17:04:22.527]                         }
[17:04:22.527]                       }
[17:04:22.527]                     }
[17:04:22.527]                     invisible(muffled)
[17:04:22.527]                   }
[17:04:22.527]                   muffleCondition(cond)
[17:04:22.527]                 })
[17:04:22.527]             }))
[17:04:22.527]             future::FutureResult(value = ...future.value$value, 
[17:04:22.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:22.527]                   ...future.rng), globalenv = if (FALSE) 
[17:04:22.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:22.527]                     ...future.globalenv.names))
[17:04:22.527]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:22.527]         }, condition = base::local({
[17:04:22.527]             c <- base::c
[17:04:22.527]             inherits <- base::inherits
[17:04:22.527]             invokeRestart <- base::invokeRestart
[17:04:22.527]             length <- base::length
[17:04:22.527]             list <- base::list
[17:04:22.527]             seq.int <- base::seq.int
[17:04:22.527]             signalCondition <- base::signalCondition
[17:04:22.527]             sys.calls <- base::sys.calls
[17:04:22.527]             `[[` <- base::`[[`
[17:04:22.527]             `+` <- base::`+`
[17:04:22.527]             `<<-` <- base::`<<-`
[17:04:22.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:22.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:22.527]                   3L)]
[17:04:22.527]             }
[17:04:22.527]             function(cond) {
[17:04:22.527]                 is_error <- inherits(cond, "error")
[17:04:22.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:22.527]                   NULL)
[17:04:22.527]                 if (is_error) {
[17:04:22.527]                   sessionInformation <- function() {
[17:04:22.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:22.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:22.527]                       search = base::search(), system = base::Sys.info())
[17:04:22.527]                   }
[17:04:22.527]                   ...future.conditions[[length(...future.conditions) + 
[17:04:22.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:22.527]                     cond$call), session = sessionInformation(), 
[17:04:22.527]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:22.527]                   signalCondition(cond)
[17:04:22.527]                 }
[17:04:22.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:22.527]                 "immediateCondition"))) {
[17:04:22.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:22.527]                   ...future.conditions[[length(...future.conditions) + 
[17:04:22.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:22.527]                   if (TRUE && !signal) {
[17:04:22.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.527]                     {
[17:04:22.527]                       inherits <- base::inherits
[17:04:22.527]                       invokeRestart <- base::invokeRestart
[17:04:22.527]                       is.null <- base::is.null
[17:04:22.527]                       muffled <- FALSE
[17:04:22.527]                       if (inherits(cond, "message")) {
[17:04:22.527]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:22.527]                         if (muffled) 
[17:04:22.527]                           invokeRestart("muffleMessage")
[17:04:22.527]                       }
[17:04:22.527]                       else if (inherits(cond, "warning")) {
[17:04:22.527]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:22.527]                         if (muffled) 
[17:04:22.527]                           invokeRestart("muffleWarning")
[17:04:22.527]                       }
[17:04:22.527]                       else if (inherits(cond, "condition")) {
[17:04:22.527]                         if (!is.null(pattern)) {
[17:04:22.527]                           computeRestarts <- base::computeRestarts
[17:04:22.527]                           grepl <- base::grepl
[17:04:22.527]                           restarts <- computeRestarts(cond)
[17:04:22.527]                           for (restart in restarts) {
[17:04:22.527]                             name <- restart$name
[17:04:22.527]                             if (is.null(name)) 
[17:04:22.527]                               next
[17:04:22.527]                             if (!grepl(pattern, name)) 
[17:04:22.527]                               next
[17:04:22.527]                             invokeRestart(restart)
[17:04:22.527]                             muffled <- TRUE
[17:04:22.527]                             break
[17:04:22.527]                           }
[17:04:22.527]                         }
[17:04:22.527]                       }
[17:04:22.527]                       invisible(muffled)
[17:04:22.527]                     }
[17:04:22.527]                     muffleCondition(cond, pattern = "^muffle")
[17:04:22.527]                   }
[17:04:22.527]                 }
[17:04:22.527]                 else {
[17:04:22.527]                   if (TRUE) {
[17:04:22.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.527]                     {
[17:04:22.527]                       inherits <- base::inherits
[17:04:22.527]                       invokeRestart <- base::invokeRestart
[17:04:22.527]                       is.null <- base::is.null
[17:04:22.527]                       muffled <- FALSE
[17:04:22.527]                       if (inherits(cond, "message")) {
[17:04:22.527]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:22.527]                         if (muffled) 
[17:04:22.527]                           invokeRestart("muffleMessage")
[17:04:22.527]                       }
[17:04:22.527]                       else if (inherits(cond, "warning")) {
[17:04:22.527]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:22.527]                         if (muffled) 
[17:04:22.527]                           invokeRestart("muffleWarning")
[17:04:22.527]                       }
[17:04:22.527]                       else if (inherits(cond, "condition")) {
[17:04:22.527]                         if (!is.null(pattern)) {
[17:04:22.527]                           computeRestarts <- base::computeRestarts
[17:04:22.527]                           grepl <- base::grepl
[17:04:22.527]                           restarts <- computeRestarts(cond)
[17:04:22.527]                           for (restart in restarts) {
[17:04:22.527]                             name <- restart$name
[17:04:22.527]                             if (is.null(name)) 
[17:04:22.527]                               next
[17:04:22.527]                             if (!grepl(pattern, name)) 
[17:04:22.527]                               next
[17:04:22.527]                             invokeRestart(restart)
[17:04:22.527]                             muffled <- TRUE
[17:04:22.527]                             break
[17:04:22.527]                           }
[17:04:22.527]                         }
[17:04:22.527]                       }
[17:04:22.527]                       invisible(muffled)
[17:04:22.527]                     }
[17:04:22.527]                     muffleCondition(cond, pattern = "^muffle")
[17:04:22.527]                   }
[17:04:22.527]                 }
[17:04:22.527]             }
[17:04:22.527]         }))
[17:04:22.527]     }, error = function(ex) {
[17:04:22.527]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:22.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:22.527]                 ...future.rng), started = ...future.startTime, 
[17:04:22.527]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:22.527]             version = "1.8"), class = "FutureResult")
[17:04:22.527]     }, finally = {
[17:04:22.527]         if (!identical(...future.workdir, getwd())) 
[17:04:22.527]             setwd(...future.workdir)
[17:04:22.527]         {
[17:04:22.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:22.527]                 ...future.oldOptions$nwarnings <- NULL
[17:04:22.527]             }
[17:04:22.527]             base::options(...future.oldOptions)
[17:04:22.527]             if (.Platform$OS.type == "windows") {
[17:04:22.527]                 old_names <- names(...future.oldEnvVars)
[17:04:22.527]                 envs <- base::Sys.getenv()
[17:04:22.527]                 names <- names(envs)
[17:04:22.527]                 common <- intersect(names, old_names)
[17:04:22.527]                 added <- setdiff(names, old_names)
[17:04:22.527]                 removed <- setdiff(old_names, names)
[17:04:22.527]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:22.527]                   envs[common]]
[17:04:22.527]                 NAMES <- toupper(changed)
[17:04:22.527]                 args <- list()
[17:04:22.527]                 for (kk in seq_along(NAMES)) {
[17:04:22.527]                   name <- changed[[kk]]
[17:04:22.527]                   NAME <- NAMES[[kk]]
[17:04:22.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.527]                     next
[17:04:22.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:22.527]                 }
[17:04:22.527]                 NAMES <- toupper(added)
[17:04:22.527]                 for (kk in seq_along(NAMES)) {
[17:04:22.527]                   name <- added[[kk]]
[17:04:22.527]                   NAME <- NAMES[[kk]]
[17:04:22.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.527]                     next
[17:04:22.527]                   args[[name]] <- ""
[17:04:22.527]                 }
[17:04:22.527]                 NAMES <- toupper(removed)
[17:04:22.527]                 for (kk in seq_along(NAMES)) {
[17:04:22.527]                   name <- removed[[kk]]
[17:04:22.527]                   NAME <- NAMES[[kk]]
[17:04:22.527]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.527]                     next
[17:04:22.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:22.527]                 }
[17:04:22.527]                 if (length(args) > 0) 
[17:04:22.527]                   base::do.call(base::Sys.setenv, args = args)
[17:04:22.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:22.527]             }
[17:04:22.527]             else {
[17:04:22.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:22.527]             }
[17:04:22.527]             {
[17:04:22.527]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:22.527]                   0L) {
[17:04:22.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:22.527]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:22.527]                   base::options(opts)
[17:04:22.527]                 }
[17:04:22.527]                 {
[17:04:22.527]                   {
[17:04:22.527]                     base::options(mc.cores = ...future.mc.cores.old)
[17:04:22.527]                     NULL
[17:04:22.527]                   }
[17:04:22.527]                   options(future.plan = "multisession")
[17:04:22.527]                   if (is.na("multisession")) 
[17:04:22.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:22.527]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:04:22.527]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:22.527]                     .init = FALSE)
[17:04:22.527]                 }
[17:04:22.527]             }
[17:04:22.527]         }
[17:04:22.527]     })
[17:04:22.527]     if (TRUE) {
[17:04:22.527]         base::sink(type = "output", split = FALSE)
[17:04:22.527]         if (TRUE) {
[17:04:22.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:22.527]         }
[17:04:22.527]         else {
[17:04:22.527]             ...future.result["stdout"] <- base::list(NULL)
[17:04:22.527]         }
[17:04:22.527]         base::close(...future.stdout)
[17:04:22.527]         ...future.stdout <- NULL
[17:04:22.527]     }
[17:04:22.527]     ...future.result$conditions <- ...future.conditions
[17:04:22.527]     ...future.result$finished <- base::Sys.time()
[17:04:22.527]     ...future.result
[17:04:22.527] }
[17:04:22.591] MultisessionFuture started
[17:04:22.591] result() for ClusterFuture ...
[17:04:22.591] receiveMessageFromWorker() for ClusterFuture ...
[17:04:22.591] - Validating connection of MultisessionFuture
[17:04:22.631] - received message: FutureResult
[17:04:22.632] - Received FutureResult
[17:04:22.632] - Erased future from FutureRegistry
[17:04:22.632] result() for ClusterFuture ...
[17:04:22.632] - result already collected: FutureResult
[17:04:22.632] result() for ClusterFuture ... done
[17:04:22.632] receiveMessageFromWorker() for ClusterFuture ... done
[17:04:22.632] result() for ClusterFuture ... done
[17:04:22.632] result() for ClusterFuture ...
[17:04:22.632] - result already collected: FutureResult
[17:04:22.633] result() for ClusterFuture ... done
[17:04:22.633] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:22.636] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:04:22.637] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:22.637] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:22.637] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:22.638] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:22.639] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:22.640] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:22.641] Option 'future.plan' = ‘multisession’
[17:04:22.641] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:22.641] Setting plan('default')
[17:04:22.641] plan(): Setting new future strategy stack:
[17:04:22.641] List of future strategies:
[17:04:22.641] 1. multisession:
[17:04:22.641]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:22.641]    - tweaked: FALSE
[17:04:22.641]    - call: plan("default", .init = FALSE)
[17:04:22.646] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:04:22.646] plan(): Setting new future strategy stack:
[17:04:22.646] List of future strategies:
[17:04:22.646] 1. multisession:
[17:04:22.646]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:22.646]    - tweaked: FALSE
[17:04:22.646]    - call: plan("default")
[17:04:22.647] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:22.647] multisession:
[17:04:22.647] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:22.647] - tweaked: FALSE
[17:04:22.647] - call: plan("default")
[17:04:22.652] getGlobalsAndPackages() ...
[17:04:22.652] Not searching for globals
[17:04:22.652] - globals: [0] <none>
[17:04:22.652] getGlobalsAndPackages() ... DONE
[17:04:22.653] [local output] makeClusterPSOCK() ...
[17:04:22.656] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:04:22.656] [local output] Base port: 11807
[17:04:22.657] [local output] Getting setup options for 2 cluster nodes ...
[17:04:22.657] [local output]  - Node 1 of 2 ...
[17:04:22.657] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:22.658] [local output] Rscript port: 11807

[17:04:22.658] [local output]  - Node 2 of 2 ...
[17:04:22.658] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:22.659] [local output] Rscript port: 11807

[17:04:22.659] [local output] Getting setup options for 2 cluster nodes ... done
[17:04:22.659] [local output]  - Parallel setup requested for some PSOCK nodes
[17:04:22.659] [local output] Setting up PSOCK nodes in parallel
[17:04:22.660] List of 36
[17:04:22.660]  $ worker          : chr "localhost"
[17:04:22.660]   ..- attr(*, "localhost")= logi TRUE
[17:04:22.660]  $ master          : chr "localhost"
[17:04:22.660]  $ port            : int 11807
[17:04:22.660]  $ connectTimeout  : num 120
[17:04:22.660]  $ timeout         : num 2592000
[17:04:22.660]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:04:22.660]  $ homogeneous     : logi TRUE
[17:04:22.660]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:04:22.660]  $ rscript_envs    : NULL
[17:04:22.660]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:04:22.660]  $ rscript_startup : NULL
[17:04:22.660]  $ rscript_sh      : chr "sh"
[17:04:22.660]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:22.660]  $ methods         : logi TRUE
[17:04:22.660]  $ socketOptions   : chr "no-delay"
[17:04:22.660]  $ useXDR          : logi FALSE
[17:04:22.660]  $ outfile         : chr "/dev/null"
[17:04:22.660]  $ renice          : int NA
[17:04:22.660]  $ rshcmd          : NULL
[17:04:22.660]  $ user            : chr(0) 
[17:04:22.660]  $ revtunnel       : logi FALSE
[17:04:22.660]  $ rshlogfile      : NULL
[17:04:22.660]  $ rshopts         : chr(0) 
[17:04:22.660]  $ rank            : int 1
[17:04:22.660]  $ manual          : logi FALSE
[17:04:22.660]  $ dryrun          : logi FALSE
[17:04:22.660]  $ quiet           : logi FALSE
[17:04:22.660]  $ setup_strategy  : chr "parallel"
[17:04:22.660]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:22.660]  $ pidfile         : chr "/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a19706ccd.pid"
[17:04:22.660]  $ rshcmd_label    : NULL
[17:04:22.660]  $ rsh_call        : NULL
[17:04:22.660]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:22.660]  $ localMachine    : logi TRUE
[17:04:22.660]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:04:22.660]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:04:22.660]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:04:22.660]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:04:22.660]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:04:22.660]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:04:22.660]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:04:22.660]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:04:22.660]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:04:22.660]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:04:22.660]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:04:22.660]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:04:22.660]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:04:22.660]  $ arguments       :List of 28
[17:04:22.660]   ..$ worker          : chr "localhost"
[17:04:22.660]   ..$ master          : NULL
[17:04:22.660]   ..$ port            : int 11807
[17:04:22.660]   ..$ connectTimeout  : num 120
[17:04:22.660]   ..$ timeout         : num 2592000
[17:04:22.660]   ..$ rscript         : NULL
[17:04:22.660]   ..$ homogeneous     : NULL
[17:04:22.660]   ..$ rscript_args    : NULL
[17:04:22.660]   ..$ rscript_envs    : NULL
[17:04:22.660]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:04:22.660]   ..$ rscript_startup : NULL
[17:04:22.660]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:04:22.660]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:22.660]   ..$ methods         : logi TRUE
[17:04:22.660]   ..$ socketOptions   : chr "no-delay"
[17:04:22.660]   ..$ useXDR          : logi FALSE
[17:04:22.660]   ..$ outfile         : chr "/dev/null"
[17:04:22.660]   ..$ renice          : int NA
[17:04:22.660]   ..$ rshcmd          : NULL
[17:04:22.660]   ..$ user            : NULL
[17:04:22.660]   ..$ revtunnel       : logi NA
[17:04:22.660]   ..$ rshlogfile      : NULL
[17:04:22.660]   ..$ rshopts         : NULL
[17:04:22.660]   ..$ rank            : int 1
[17:04:22.660]   ..$ manual          : logi FALSE
[17:04:22.660]   ..$ dryrun          : logi FALSE
[17:04:22.660]   ..$ quiet           : logi FALSE
[17:04:22.660]   ..$ setup_strategy  : chr "parallel"
[17:04:22.660]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:04:22.679] [local output] System call to launch all workers:
[17:04:22.679] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpShZwCY/worker.rank=1.parallelly.parent=50058.c38a19706ccd.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11807 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:04:22.679] [local output] Starting PSOCK main server
[17:04:22.681] [local output] Workers launched
[17:04:22.681] [local output] Waiting for workers to connect back
[17:04:22.681]  - [local output] 0 workers out of 2 ready
[17:04:22.924]  - [local output] 0 workers out of 2 ready
[17:04:22.924]  - [local output] 1 workers out of 2 ready
[17:04:22.928]  - [local output] 1 workers out of 2 ready
[17:04:22.928]  - [local output] 2 workers out of 2 ready
[17:04:22.929] [local output] Launching of workers completed
[17:04:22.929] [local output] Collecting session information from workers
[17:04:22.929] [local output]  - Worker #1 of 2
[17:04:22.930] [local output]  - Worker #2 of 2
[17:04:22.930] [local output] makeClusterPSOCK() ... done
[17:04:22.941] Packages needed by the future expression (n = 0): <none>
[17:04:22.941] Packages needed by future strategies (n = 0): <none>
[17:04:22.941] {
[17:04:22.941]     {
[17:04:22.941]         {
[17:04:22.941]             ...future.startTime <- base::Sys.time()
[17:04:22.941]             {
[17:04:22.941]                 {
[17:04:22.941]                   {
[17:04:22.941]                     {
[17:04:22.941]                       base::local({
[17:04:22.941]                         has_future <- base::requireNamespace("future", 
[17:04:22.941]                           quietly = TRUE)
[17:04:22.941]                         if (has_future) {
[17:04:22.941]                           ns <- base::getNamespace("future")
[17:04:22.941]                           version <- ns[[".package"]][["version"]]
[17:04:22.941]                           if (is.null(version)) 
[17:04:22.941]                             version <- utils::packageVersion("future")
[17:04:22.941]                         }
[17:04:22.941]                         else {
[17:04:22.941]                           version <- NULL
[17:04:22.941]                         }
[17:04:22.941]                         if (!has_future || version < "1.8.0") {
[17:04:22.941]                           info <- base::c(r_version = base::gsub("R version ", 
[17:04:22.941]                             "", base::R.version$version.string), 
[17:04:22.941]                             platform = base::sprintf("%s (%s-bit)", 
[17:04:22.941]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:22.941]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:22.941]                               "release", "version")], collapse = " "), 
[17:04:22.941]                             hostname = base::Sys.info()[["nodename"]])
[17:04:22.941]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:04:22.941]                             info)
[17:04:22.941]                           info <- base::paste(info, collapse = "; ")
[17:04:22.941]                           if (!has_future) {
[17:04:22.941]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:22.941]                               info)
[17:04:22.941]                           }
[17:04:22.941]                           else {
[17:04:22.941]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:22.941]                               info, version)
[17:04:22.941]                           }
[17:04:22.941]                           base::stop(msg)
[17:04:22.941]                         }
[17:04:22.941]                       })
[17:04:22.941]                     }
[17:04:22.941]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:04:22.941]                     base::options(mc.cores = 1L)
[17:04:22.941]                   }
[17:04:22.941]                   ...future.strategy.old <- future::plan("list")
[17:04:22.941]                   options(future.plan = NULL)
[17:04:22.941]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:22.941]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:22.941]                 }
[17:04:22.941]                 ...future.workdir <- getwd()
[17:04:22.941]             }
[17:04:22.941]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:22.941]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:22.941]         }
[17:04:22.941]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:22.941]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:22.941]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:22.941]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:22.941]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:22.941]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:22.941]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:22.941]             base::names(...future.oldOptions))
[17:04:22.941]     }
[17:04:22.941]     if (FALSE) {
[17:04:22.941]     }
[17:04:22.941]     else {
[17:04:22.941]         if (TRUE) {
[17:04:22.941]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:22.941]                 open = "w")
[17:04:22.941]         }
[17:04:22.941]         else {
[17:04:22.941]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:22.941]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:22.941]         }
[17:04:22.941]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:22.941]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:22.941]             base::sink(type = "output", split = FALSE)
[17:04:22.941]             base::close(...future.stdout)
[17:04:22.941]         }, add = TRUE)
[17:04:22.941]     }
[17:04:22.941]     ...future.frame <- base::sys.nframe()
[17:04:22.941]     ...future.conditions <- base::list()
[17:04:22.941]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:22.941]     if (FALSE) {
[17:04:22.941]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:22.941]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:22.941]     }
[17:04:22.941]     ...future.result <- base::tryCatch({
[17:04:22.941]         base::withCallingHandlers({
[17:04:22.941]             ...future.value <- base::withVisible(base::local({
[17:04:22.941]                 ...future.makeSendCondition <- base::local({
[17:04:22.941]                   sendCondition <- NULL
[17:04:22.941]                   function(frame = 1L) {
[17:04:22.941]                     if (is.function(sendCondition)) 
[17:04:22.941]                       return(sendCondition)
[17:04:22.941]                     ns <- getNamespace("parallel")
[17:04:22.941]                     if (exists("sendData", mode = "function", 
[17:04:22.941]                       envir = ns)) {
[17:04:22.941]                       parallel_sendData <- get("sendData", mode = "function", 
[17:04:22.941]                         envir = ns)
[17:04:22.941]                       envir <- sys.frame(frame)
[17:04:22.941]                       master <- NULL
[17:04:22.941]                       while (!identical(envir, .GlobalEnv) && 
[17:04:22.941]                         !identical(envir, emptyenv())) {
[17:04:22.941]                         if (exists("master", mode = "list", envir = envir, 
[17:04:22.941]                           inherits = FALSE)) {
[17:04:22.941]                           master <- get("master", mode = "list", 
[17:04:22.941]                             envir = envir, inherits = FALSE)
[17:04:22.941]                           if (inherits(master, c("SOCKnode", 
[17:04:22.941]                             "SOCK0node"))) {
[17:04:22.941]                             sendCondition <<- function(cond) {
[17:04:22.941]                               data <- list(type = "VALUE", value = cond, 
[17:04:22.941]                                 success = TRUE)
[17:04:22.941]                               parallel_sendData(master, data)
[17:04:22.941]                             }
[17:04:22.941]                             return(sendCondition)
[17:04:22.941]                           }
[17:04:22.941]                         }
[17:04:22.941]                         frame <- frame + 1L
[17:04:22.941]                         envir <- sys.frame(frame)
[17:04:22.941]                       }
[17:04:22.941]                     }
[17:04:22.941]                     sendCondition <<- function(cond) NULL
[17:04:22.941]                   }
[17:04:22.941]                 })
[17:04:22.941]                 withCallingHandlers({
[17:04:22.941]                   NA
[17:04:22.941]                 }, immediateCondition = function(cond) {
[17:04:22.941]                   sendCondition <- ...future.makeSendCondition()
[17:04:22.941]                   sendCondition(cond)
[17:04:22.941]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.941]                   {
[17:04:22.941]                     inherits <- base::inherits
[17:04:22.941]                     invokeRestart <- base::invokeRestart
[17:04:22.941]                     is.null <- base::is.null
[17:04:22.941]                     muffled <- FALSE
[17:04:22.941]                     if (inherits(cond, "message")) {
[17:04:22.941]                       muffled <- grepl(pattern, "muffleMessage")
[17:04:22.941]                       if (muffled) 
[17:04:22.941]                         invokeRestart("muffleMessage")
[17:04:22.941]                     }
[17:04:22.941]                     else if (inherits(cond, "warning")) {
[17:04:22.941]                       muffled <- grepl(pattern, "muffleWarning")
[17:04:22.941]                       if (muffled) 
[17:04:22.941]                         invokeRestart("muffleWarning")
[17:04:22.941]                     }
[17:04:22.941]                     else if (inherits(cond, "condition")) {
[17:04:22.941]                       if (!is.null(pattern)) {
[17:04:22.941]                         computeRestarts <- base::computeRestarts
[17:04:22.941]                         grepl <- base::grepl
[17:04:22.941]                         restarts <- computeRestarts(cond)
[17:04:22.941]                         for (restart in restarts) {
[17:04:22.941]                           name <- restart$name
[17:04:22.941]                           if (is.null(name)) 
[17:04:22.941]                             next
[17:04:22.941]                           if (!grepl(pattern, name)) 
[17:04:22.941]                             next
[17:04:22.941]                           invokeRestart(restart)
[17:04:22.941]                           muffled <- TRUE
[17:04:22.941]                           break
[17:04:22.941]                         }
[17:04:22.941]                       }
[17:04:22.941]                     }
[17:04:22.941]                     invisible(muffled)
[17:04:22.941]                   }
[17:04:22.941]                   muffleCondition(cond)
[17:04:22.941]                 })
[17:04:22.941]             }))
[17:04:22.941]             future::FutureResult(value = ...future.value$value, 
[17:04:22.941]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:22.941]                   ...future.rng), globalenv = if (FALSE) 
[17:04:22.941]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:22.941]                     ...future.globalenv.names))
[17:04:22.941]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:22.941]         }, condition = base::local({
[17:04:22.941]             c <- base::c
[17:04:22.941]             inherits <- base::inherits
[17:04:22.941]             invokeRestart <- base::invokeRestart
[17:04:22.941]             length <- base::length
[17:04:22.941]             list <- base::list
[17:04:22.941]             seq.int <- base::seq.int
[17:04:22.941]             signalCondition <- base::signalCondition
[17:04:22.941]             sys.calls <- base::sys.calls
[17:04:22.941]             `[[` <- base::`[[`
[17:04:22.941]             `+` <- base::`+`
[17:04:22.941]             `<<-` <- base::`<<-`
[17:04:22.941]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:22.941]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:22.941]                   3L)]
[17:04:22.941]             }
[17:04:22.941]             function(cond) {
[17:04:22.941]                 is_error <- inherits(cond, "error")
[17:04:22.941]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:22.941]                   NULL)
[17:04:22.941]                 if (is_error) {
[17:04:22.941]                   sessionInformation <- function() {
[17:04:22.941]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:22.941]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:22.941]                       search = base::search(), system = base::Sys.info())
[17:04:22.941]                   }
[17:04:22.941]                   ...future.conditions[[length(...future.conditions) + 
[17:04:22.941]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:22.941]                     cond$call), session = sessionInformation(), 
[17:04:22.941]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:22.941]                   signalCondition(cond)
[17:04:22.941]                 }
[17:04:22.941]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:22.941]                 "immediateCondition"))) {
[17:04:22.941]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:22.941]                   ...future.conditions[[length(...future.conditions) + 
[17:04:22.941]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:22.941]                   if (TRUE && !signal) {
[17:04:22.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.941]                     {
[17:04:22.941]                       inherits <- base::inherits
[17:04:22.941]                       invokeRestart <- base::invokeRestart
[17:04:22.941]                       is.null <- base::is.null
[17:04:22.941]                       muffled <- FALSE
[17:04:22.941]                       if (inherits(cond, "message")) {
[17:04:22.941]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:22.941]                         if (muffled) 
[17:04:22.941]                           invokeRestart("muffleMessage")
[17:04:22.941]                       }
[17:04:22.941]                       else if (inherits(cond, "warning")) {
[17:04:22.941]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:22.941]                         if (muffled) 
[17:04:22.941]                           invokeRestart("muffleWarning")
[17:04:22.941]                       }
[17:04:22.941]                       else if (inherits(cond, "condition")) {
[17:04:22.941]                         if (!is.null(pattern)) {
[17:04:22.941]                           computeRestarts <- base::computeRestarts
[17:04:22.941]                           grepl <- base::grepl
[17:04:22.941]                           restarts <- computeRestarts(cond)
[17:04:22.941]                           for (restart in restarts) {
[17:04:22.941]                             name <- restart$name
[17:04:22.941]                             if (is.null(name)) 
[17:04:22.941]                               next
[17:04:22.941]                             if (!grepl(pattern, name)) 
[17:04:22.941]                               next
[17:04:22.941]                             invokeRestart(restart)
[17:04:22.941]                             muffled <- TRUE
[17:04:22.941]                             break
[17:04:22.941]                           }
[17:04:22.941]                         }
[17:04:22.941]                       }
[17:04:22.941]                       invisible(muffled)
[17:04:22.941]                     }
[17:04:22.941]                     muffleCondition(cond, pattern = "^muffle")
[17:04:22.941]                   }
[17:04:22.941]                 }
[17:04:22.941]                 else {
[17:04:22.941]                   if (TRUE) {
[17:04:22.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:22.941]                     {
[17:04:22.941]                       inherits <- base::inherits
[17:04:22.941]                       invokeRestart <- base::invokeRestart
[17:04:22.941]                       is.null <- base::is.null
[17:04:22.941]                       muffled <- FALSE
[17:04:22.941]                       if (inherits(cond, "message")) {
[17:04:22.941]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:22.941]                         if (muffled) 
[17:04:22.941]                           invokeRestart("muffleMessage")
[17:04:22.941]                       }
[17:04:22.941]                       else if (inherits(cond, "warning")) {
[17:04:22.941]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:22.941]                         if (muffled) 
[17:04:22.941]                           invokeRestart("muffleWarning")
[17:04:22.941]                       }
[17:04:22.941]                       else if (inherits(cond, "condition")) {
[17:04:22.941]                         if (!is.null(pattern)) {
[17:04:22.941]                           computeRestarts <- base::computeRestarts
[17:04:22.941]                           grepl <- base::grepl
[17:04:22.941]                           restarts <- computeRestarts(cond)
[17:04:22.941]                           for (restart in restarts) {
[17:04:22.941]                             name <- restart$name
[17:04:22.941]                             if (is.null(name)) 
[17:04:22.941]                               next
[17:04:22.941]                             if (!grepl(pattern, name)) 
[17:04:22.941]                               next
[17:04:22.941]                             invokeRestart(restart)
[17:04:22.941]                             muffled <- TRUE
[17:04:22.941]                             break
[17:04:22.941]                           }
[17:04:22.941]                         }
[17:04:22.941]                       }
[17:04:22.941]                       invisible(muffled)
[17:04:22.941]                     }
[17:04:22.941]                     muffleCondition(cond, pattern = "^muffle")
[17:04:22.941]                   }
[17:04:22.941]                 }
[17:04:22.941]             }
[17:04:22.941]         }))
[17:04:22.941]     }, error = function(ex) {
[17:04:22.941]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:22.941]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:22.941]                 ...future.rng), started = ...future.startTime, 
[17:04:22.941]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:22.941]             version = "1.8"), class = "FutureResult")
[17:04:22.941]     }, finally = {
[17:04:22.941]         if (!identical(...future.workdir, getwd())) 
[17:04:22.941]             setwd(...future.workdir)
[17:04:22.941]         {
[17:04:22.941]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:22.941]                 ...future.oldOptions$nwarnings <- NULL
[17:04:22.941]             }
[17:04:22.941]             base::options(...future.oldOptions)
[17:04:22.941]             if (.Platform$OS.type == "windows") {
[17:04:22.941]                 old_names <- names(...future.oldEnvVars)
[17:04:22.941]                 envs <- base::Sys.getenv()
[17:04:22.941]                 names <- names(envs)
[17:04:22.941]                 common <- intersect(names, old_names)
[17:04:22.941]                 added <- setdiff(names, old_names)
[17:04:22.941]                 removed <- setdiff(old_names, names)
[17:04:22.941]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:22.941]                   envs[common]]
[17:04:22.941]                 NAMES <- toupper(changed)
[17:04:22.941]                 args <- list()
[17:04:22.941]                 for (kk in seq_along(NAMES)) {
[17:04:22.941]                   name <- changed[[kk]]
[17:04:22.941]                   NAME <- NAMES[[kk]]
[17:04:22.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.941]                     next
[17:04:22.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:22.941]                 }
[17:04:22.941]                 NAMES <- toupper(added)
[17:04:22.941]                 for (kk in seq_along(NAMES)) {
[17:04:22.941]                   name <- added[[kk]]
[17:04:22.941]                   NAME <- NAMES[[kk]]
[17:04:22.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.941]                     next
[17:04:22.941]                   args[[name]] <- ""
[17:04:22.941]                 }
[17:04:22.941]                 NAMES <- toupper(removed)
[17:04:22.941]                 for (kk in seq_along(NAMES)) {
[17:04:22.941]                   name <- removed[[kk]]
[17:04:22.941]                   NAME <- NAMES[[kk]]
[17:04:22.941]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:22.941]                     next
[17:04:22.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:22.941]                 }
[17:04:22.941]                 if (length(args) > 0) 
[17:04:22.941]                   base::do.call(base::Sys.setenv, args = args)
[17:04:22.941]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:22.941]             }
[17:04:22.941]             else {
[17:04:22.941]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:22.941]             }
[17:04:22.941]             {
[17:04:22.941]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:22.941]                   0L) {
[17:04:22.941]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:22.941]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:22.941]                   base::options(opts)
[17:04:22.941]                 }
[17:04:22.941]                 {
[17:04:22.941]                   {
[17:04:22.941]                     base::options(mc.cores = ...future.mc.cores.old)
[17:04:22.941]                     NULL
[17:04:22.941]                   }
[17:04:22.941]                   options(future.plan = "multisession")
[17:04:22.941]                   if (is.na("")) 
[17:04:22.941]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:22.941]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:04:22.941]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:22.941]                     .init = FALSE)
[17:04:22.941]                 }
[17:04:22.941]             }
[17:04:22.941]         }
[17:04:22.941]     })
[17:04:22.941]     if (TRUE) {
[17:04:22.941]         base::sink(type = "output", split = FALSE)
[17:04:22.941]         if (TRUE) {
[17:04:22.941]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:22.941]         }
[17:04:22.941]         else {
[17:04:22.941]             ...future.result["stdout"] <- base::list(NULL)
[17:04:22.941]         }
[17:04:22.941]         base::close(...future.stdout)
[17:04:22.941]         ...future.stdout <- NULL
[17:04:22.941]     }
[17:04:22.941]     ...future.result$conditions <- ...future.conditions
[17:04:22.941]     ...future.result$finished <- base::Sys.time()
[17:04:22.941]     ...future.result
[17:04:22.941] }
[17:04:22.994] MultisessionFuture started
[17:04:22.994] result() for ClusterFuture ...
[17:04:22.995] receiveMessageFromWorker() for ClusterFuture ...
[17:04:22.995] - Validating connection of MultisessionFuture
[17:04:23.027] - received message: FutureResult
[17:04:23.028] - Received FutureResult
[17:04:23.028] - Erased future from FutureRegistry
[17:04:23.028] result() for ClusterFuture ...
[17:04:23.028] - result already collected: FutureResult
[17:04:23.028] result() for ClusterFuture ... done
[17:04:23.028] receiveMessageFromWorker() for ClusterFuture ... done
[17:04:23.028] result() for ClusterFuture ... done
[17:04:23.028] result() for ClusterFuture ...
[17:04:23.028] - result already collected: FutureResult
[17:04:23.028] result() for ClusterFuture ... done
[17:04:23.029] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:23.032] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:04:23.033] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:23.033] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:23.033] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:23.033] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:23.034] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:23.034] R_FUTURE_PLAN=‘multisession’
[17:04:23.035] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:04:23.035] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:23.035] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:23.036] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:23.037] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:23.037] Option 'future.plan' = ‘multisession’
[17:04:23.037] R command-line argument: -p 1
[17:04:23.037]  => 'future.plan' already set.
[17:04:23.037] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:23.037] Setting plan('default')
[17:04:23.037] plan(): Setting new future strategy stack:
[17:04:23.038] List of future strategies:
[17:04:23.038] 1. multisession:
[17:04:23.038]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.038]    - tweaked: FALSE
[17:04:23.038]    - call: plan("default", .init = FALSE)
[17:04:23.042] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:04:23.043] plan(): Setting new future strategy stack:
[17:04:23.043] List of future strategies:
[17:04:23.043] 1. multisession:
[17:04:23.043]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.043]    - tweaked: FALSE
[17:04:23.043]    - call: plan("default")
[17:04:23.044] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:23.044] multisession:
[17:04:23.044] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.044] - tweaked: FALSE
[17:04:23.044] - call: plan("default")
[17:04:23.048] getGlobalsAndPackages() ...
[17:04:23.048] Not searching for globals
[17:04:23.048] - globals: [0] <none>
[17:04:23.049] getGlobalsAndPackages() ... DONE
[17:04:23.049] Packages needed by the future expression (n = 0): <none>
[17:04:23.049] Packages needed by future strategies (n = 0): <none>
[17:04:23.050] {
[17:04:23.050]     {
[17:04:23.050]         {
[17:04:23.050]             ...future.startTime <- base::Sys.time()
[17:04:23.050]             {
[17:04:23.050]                 {
[17:04:23.050]                   {
[17:04:23.050]                     base::local({
[17:04:23.050]                       has_future <- base::requireNamespace("future", 
[17:04:23.050]                         quietly = TRUE)
[17:04:23.050]                       if (has_future) {
[17:04:23.050]                         ns <- base::getNamespace("future")
[17:04:23.050]                         version <- ns[[".package"]][["version"]]
[17:04:23.050]                         if (is.null(version)) 
[17:04:23.050]                           version <- utils::packageVersion("future")
[17:04:23.050]                       }
[17:04:23.050]                       else {
[17:04:23.050]                         version <- NULL
[17:04:23.050]                       }
[17:04:23.050]                       if (!has_future || version < "1.8.0") {
[17:04:23.050]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:23.050]                           "", base::R.version$version.string), 
[17:04:23.050]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:23.050]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:23.050]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:23.050]                             "release", "version")], collapse = " "), 
[17:04:23.050]                           hostname = base::Sys.info()[["nodename"]])
[17:04:23.050]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:23.050]                           info)
[17:04:23.050]                         info <- base::paste(info, collapse = "; ")
[17:04:23.050]                         if (!has_future) {
[17:04:23.050]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:23.050]                             info)
[17:04:23.050]                         }
[17:04:23.050]                         else {
[17:04:23.050]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:23.050]                             info, version)
[17:04:23.050]                         }
[17:04:23.050]                         base::stop(msg)
[17:04:23.050]                       }
[17:04:23.050]                     })
[17:04:23.050]                   }
[17:04:23.050]                   ...future.strategy.old <- future::plan("list")
[17:04:23.050]                   options(future.plan = NULL)
[17:04:23.050]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:23.050]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:23.050]                 }
[17:04:23.050]                 ...future.workdir <- getwd()
[17:04:23.050]             }
[17:04:23.050]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:23.050]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:23.050]         }
[17:04:23.050]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:23.050]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:23.050]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:23.050]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:23.050]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:23.050]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:23.050]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:23.050]             base::names(...future.oldOptions))
[17:04:23.050]     }
[17:04:23.050]     if (FALSE) {
[17:04:23.050]     }
[17:04:23.050]     else {
[17:04:23.050]         if (TRUE) {
[17:04:23.050]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:23.050]                 open = "w")
[17:04:23.050]         }
[17:04:23.050]         else {
[17:04:23.050]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:23.050]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:23.050]         }
[17:04:23.050]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:23.050]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:23.050]             base::sink(type = "output", split = FALSE)
[17:04:23.050]             base::close(...future.stdout)
[17:04:23.050]         }, add = TRUE)
[17:04:23.050]     }
[17:04:23.050]     ...future.frame <- base::sys.nframe()
[17:04:23.050]     ...future.conditions <- base::list()
[17:04:23.050]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:23.050]     if (FALSE) {
[17:04:23.050]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:23.050]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:23.050]     }
[17:04:23.050]     ...future.result <- base::tryCatch({
[17:04:23.050]         base::withCallingHandlers({
[17:04:23.050]             ...future.value <- base::withVisible(base::local(NA))
[17:04:23.050]             future::FutureResult(value = ...future.value$value, 
[17:04:23.050]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:23.050]                   ...future.rng), globalenv = if (FALSE) 
[17:04:23.050]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:23.050]                     ...future.globalenv.names))
[17:04:23.050]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:23.050]         }, condition = base::local({
[17:04:23.050]             c <- base::c
[17:04:23.050]             inherits <- base::inherits
[17:04:23.050]             invokeRestart <- base::invokeRestart
[17:04:23.050]             length <- base::length
[17:04:23.050]             list <- base::list
[17:04:23.050]             seq.int <- base::seq.int
[17:04:23.050]             signalCondition <- base::signalCondition
[17:04:23.050]             sys.calls <- base::sys.calls
[17:04:23.050]             `[[` <- base::`[[`
[17:04:23.050]             `+` <- base::`+`
[17:04:23.050]             `<<-` <- base::`<<-`
[17:04:23.050]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:23.050]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:23.050]                   3L)]
[17:04:23.050]             }
[17:04:23.050]             function(cond) {
[17:04:23.050]                 is_error <- inherits(cond, "error")
[17:04:23.050]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:23.050]                   NULL)
[17:04:23.050]                 if (is_error) {
[17:04:23.050]                   sessionInformation <- function() {
[17:04:23.050]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:23.050]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:23.050]                       search = base::search(), system = base::Sys.info())
[17:04:23.050]                   }
[17:04:23.050]                   ...future.conditions[[length(...future.conditions) + 
[17:04:23.050]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:23.050]                     cond$call), session = sessionInformation(), 
[17:04:23.050]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:23.050]                   signalCondition(cond)
[17:04:23.050]                 }
[17:04:23.050]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:23.050]                 "immediateCondition"))) {
[17:04:23.050]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:23.050]                   ...future.conditions[[length(...future.conditions) + 
[17:04:23.050]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:23.050]                   if (TRUE && !signal) {
[17:04:23.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:23.050]                     {
[17:04:23.050]                       inherits <- base::inherits
[17:04:23.050]                       invokeRestart <- base::invokeRestart
[17:04:23.050]                       is.null <- base::is.null
[17:04:23.050]                       muffled <- FALSE
[17:04:23.050]                       if (inherits(cond, "message")) {
[17:04:23.050]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:23.050]                         if (muffled) 
[17:04:23.050]                           invokeRestart("muffleMessage")
[17:04:23.050]                       }
[17:04:23.050]                       else if (inherits(cond, "warning")) {
[17:04:23.050]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:23.050]                         if (muffled) 
[17:04:23.050]                           invokeRestart("muffleWarning")
[17:04:23.050]                       }
[17:04:23.050]                       else if (inherits(cond, "condition")) {
[17:04:23.050]                         if (!is.null(pattern)) {
[17:04:23.050]                           computeRestarts <- base::computeRestarts
[17:04:23.050]                           grepl <- base::grepl
[17:04:23.050]                           restarts <- computeRestarts(cond)
[17:04:23.050]                           for (restart in restarts) {
[17:04:23.050]                             name <- restart$name
[17:04:23.050]                             if (is.null(name)) 
[17:04:23.050]                               next
[17:04:23.050]                             if (!grepl(pattern, name)) 
[17:04:23.050]                               next
[17:04:23.050]                             invokeRestart(restart)
[17:04:23.050]                             muffled <- TRUE
[17:04:23.050]                             break
[17:04:23.050]                           }
[17:04:23.050]                         }
[17:04:23.050]                       }
[17:04:23.050]                       invisible(muffled)
[17:04:23.050]                     }
[17:04:23.050]                     muffleCondition(cond, pattern = "^muffle")
[17:04:23.050]                   }
[17:04:23.050]                 }
[17:04:23.050]                 else {
[17:04:23.050]                   if (TRUE) {
[17:04:23.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:23.050]                     {
[17:04:23.050]                       inherits <- base::inherits
[17:04:23.050]                       invokeRestart <- base::invokeRestart
[17:04:23.050]                       is.null <- base::is.null
[17:04:23.050]                       muffled <- FALSE
[17:04:23.050]                       if (inherits(cond, "message")) {
[17:04:23.050]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:23.050]                         if (muffled) 
[17:04:23.050]                           invokeRestart("muffleMessage")
[17:04:23.050]                       }
[17:04:23.050]                       else if (inherits(cond, "warning")) {
[17:04:23.050]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:23.050]                         if (muffled) 
[17:04:23.050]                           invokeRestart("muffleWarning")
[17:04:23.050]                       }
[17:04:23.050]                       else if (inherits(cond, "condition")) {
[17:04:23.050]                         if (!is.null(pattern)) {
[17:04:23.050]                           computeRestarts <- base::computeRestarts
[17:04:23.050]                           grepl <- base::grepl
[17:04:23.050]                           restarts <- computeRestarts(cond)
[17:04:23.050]                           for (restart in restarts) {
[17:04:23.050]                             name <- restart$name
[17:04:23.050]                             if (is.null(name)) 
[17:04:23.050]                               next
[17:04:23.050]                             if (!grepl(pattern, name)) 
[17:04:23.050]                               next
[17:04:23.050]                             invokeRestart(restart)
[17:04:23.050]                             muffled <- TRUE
[17:04:23.050]                             break
[17:04:23.050]                           }
[17:04:23.050]                         }
[17:04:23.050]                       }
[17:04:23.050]                       invisible(muffled)
[17:04:23.050]                     }
[17:04:23.050]                     muffleCondition(cond, pattern = "^muffle")
[17:04:23.050]                   }
[17:04:23.050]                 }
[17:04:23.050]             }
[17:04:23.050]         }))
[17:04:23.050]     }, error = function(ex) {
[17:04:23.050]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:23.050]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:23.050]                 ...future.rng), started = ...future.startTime, 
[17:04:23.050]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:23.050]             version = "1.8"), class = "FutureResult")
[17:04:23.050]     }, finally = {
[17:04:23.050]         if (!identical(...future.workdir, getwd())) 
[17:04:23.050]             setwd(...future.workdir)
[17:04:23.050]         {
[17:04:23.050]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:23.050]                 ...future.oldOptions$nwarnings <- NULL
[17:04:23.050]             }
[17:04:23.050]             base::options(...future.oldOptions)
[17:04:23.050]             if (.Platform$OS.type == "windows") {
[17:04:23.050]                 old_names <- names(...future.oldEnvVars)
[17:04:23.050]                 envs <- base::Sys.getenv()
[17:04:23.050]                 names <- names(envs)
[17:04:23.050]                 common <- intersect(names, old_names)
[17:04:23.050]                 added <- setdiff(names, old_names)
[17:04:23.050]                 removed <- setdiff(old_names, names)
[17:04:23.050]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:23.050]                   envs[common]]
[17:04:23.050]                 NAMES <- toupper(changed)
[17:04:23.050]                 args <- list()
[17:04:23.050]                 for (kk in seq_along(NAMES)) {
[17:04:23.050]                   name <- changed[[kk]]
[17:04:23.050]                   NAME <- NAMES[[kk]]
[17:04:23.050]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.050]                     next
[17:04:23.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:23.050]                 }
[17:04:23.050]                 NAMES <- toupper(added)
[17:04:23.050]                 for (kk in seq_along(NAMES)) {
[17:04:23.050]                   name <- added[[kk]]
[17:04:23.050]                   NAME <- NAMES[[kk]]
[17:04:23.050]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.050]                     next
[17:04:23.050]                   args[[name]] <- ""
[17:04:23.050]                 }
[17:04:23.050]                 NAMES <- toupper(removed)
[17:04:23.050]                 for (kk in seq_along(NAMES)) {
[17:04:23.050]                   name <- removed[[kk]]
[17:04:23.050]                   NAME <- NAMES[[kk]]
[17:04:23.050]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.050]                     next
[17:04:23.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:23.050]                 }
[17:04:23.050]                 if (length(args) > 0) 
[17:04:23.050]                   base::do.call(base::Sys.setenv, args = args)
[17:04:23.050]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:23.050]             }
[17:04:23.050]             else {
[17:04:23.050]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:23.050]             }
[17:04:23.050]             {
[17:04:23.050]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:23.050]                   0L) {
[17:04:23.050]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:23.050]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:23.050]                   base::options(opts)
[17:04:23.050]                 }
[17:04:23.050]                 {
[17:04:23.050]                   {
[17:04:23.050]                     NULL
[17:04:23.050]                     RNGkind("Mersenne-Twister")
[17:04:23.050]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:23.050]                       inherits = FALSE)
[17:04:23.050]                   }
[17:04:23.050]                   options(future.plan = "multisession")
[17:04:23.050]                   if (is.na("multisession")) 
[17:04:23.050]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:23.050]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:04:23.050]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:23.050]                     .init = FALSE)
[17:04:23.050]                 }
[17:04:23.050]             }
[17:04:23.050]         }
[17:04:23.050]     })
[17:04:23.050]     if (TRUE) {
[17:04:23.050]         base::sink(type = "output", split = FALSE)
[17:04:23.050]         if (TRUE) {
[17:04:23.050]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:23.050]         }
[17:04:23.050]         else {
[17:04:23.050]             ...future.result["stdout"] <- base::list(NULL)
[17:04:23.050]         }
[17:04:23.050]         base::close(...future.stdout)
[17:04:23.050]         ...future.stdout <- NULL
[17:04:23.050]     }
[17:04:23.050]     ...future.result$conditions <- ...future.conditions
[17:04:23.050]     ...future.result$finished <- base::Sys.time()
[17:04:23.050]     ...future.result
[17:04:23.050] }
[17:04:23.052] plan(): Setting new future strategy stack:
[17:04:23.052] List of future strategies:
[17:04:23.052] 1. sequential:
[17:04:23.052]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:23.052]    - tweaked: FALSE
[17:04:23.052]    - call: NULL
[17:04:23.052] plan(): nbrOfWorkers() = 1
[17:04:23.054] plan(): Setting new future strategy stack:
[17:04:23.054] List of future strategies:
[17:04:23.054] 1. multisession:
[17:04:23.054]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.054]    - tweaked: FALSE
[17:04:23.054]    - call: plan("default")
[17:04:23.058] plan(): nbrOfWorkers() = 1
[17:04:23.058] SequentialFuture started (and completed)
[17:04:23.059] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:23.062] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:04:23.063] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:23.063] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:23.063] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:23.064] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:23.065] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:23.066] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:23.066] Option 'future.plan' = ‘multisession’
[17:04:23.067] R command-line argument: -p 1
[17:04:23.067]  => 'future.plan' already set.
[17:04:23.067] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:23.067] Setting plan('default')
[17:04:23.067] plan(): Setting new future strategy stack:
[17:04:23.067] List of future strategies:
[17:04:23.067] 1. multisession:
[17:04:23.067]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.067]    - tweaked: FALSE
[17:04:23.067]    - call: plan("default", .init = FALSE)
[17:04:23.071] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:04:23.071] plan(): Setting new future strategy stack:
[17:04:23.071] List of future strategies:
[17:04:23.071] 1. multisession:
[17:04:23.071]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.071]    - tweaked: FALSE
[17:04:23.071]    - call: plan("default")
[17:04:23.072] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:23.072] multisession:
[17:04:23.072] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.072] - tweaked: FALSE
[17:04:23.072] - call: plan("default")
[17:04:23.075] getGlobalsAndPackages() ...
[17:04:23.075] Not searching for globals
[17:04:23.075] - globals: [0] <none>
[17:04:23.075] getGlobalsAndPackages() ... DONE
[17:04:23.076] Packages needed by the future expression (n = 0): <none>
[17:04:23.076] Packages needed by future strategies (n = 0): <none>
[17:04:23.076] {
[17:04:23.076]     {
[17:04:23.076]         {
[17:04:23.076]             ...future.startTime <- base::Sys.time()
[17:04:23.076]             {
[17:04:23.076]                 {
[17:04:23.076]                   {
[17:04:23.076]                     base::local({
[17:04:23.076]                       has_future <- base::requireNamespace("future", 
[17:04:23.076]                         quietly = TRUE)
[17:04:23.076]                       if (has_future) {
[17:04:23.076]                         ns <- base::getNamespace("future")
[17:04:23.076]                         version <- ns[[".package"]][["version"]]
[17:04:23.076]                         if (is.null(version)) 
[17:04:23.076]                           version <- utils::packageVersion("future")
[17:04:23.076]                       }
[17:04:23.076]                       else {
[17:04:23.076]                         version <- NULL
[17:04:23.076]                       }
[17:04:23.076]                       if (!has_future || version < "1.8.0") {
[17:04:23.076]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:23.076]                           "", base::R.version$version.string), 
[17:04:23.076]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:23.076]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:23.076]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:23.076]                             "release", "version")], collapse = " "), 
[17:04:23.076]                           hostname = base::Sys.info()[["nodename"]])
[17:04:23.076]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:23.076]                           info)
[17:04:23.076]                         info <- base::paste(info, collapse = "; ")
[17:04:23.076]                         if (!has_future) {
[17:04:23.076]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:23.076]                             info)
[17:04:23.076]                         }
[17:04:23.076]                         else {
[17:04:23.076]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:23.076]                             info, version)
[17:04:23.076]                         }
[17:04:23.076]                         base::stop(msg)
[17:04:23.076]                       }
[17:04:23.076]                     })
[17:04:23.076]                   }
[17:04:23.076]                   ...future.strategy.old <- future::plan("list")
[17:04:23.076]                   options(future.plan = NULL)
[17:04:23.076]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:23.076]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:23.076]                 }
[17:04:23.076]                 ...future.workdir <- getwd()
[17:04:23.076]             }
[17:04:23.076]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:23.076]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:23.076]         }
[17:04:23.076]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:23.076]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:23.076]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:23.076]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:23.076]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:23.076]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:23.076]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:23.076]             base::names(...future.oldOptions))
[17:04:23.076]     }
[17:04:23.076]     if (FALSE) {
[17:04:23.076]     }
[17:04:23.076]     else {
[17:04:23.076]         if (TRUE) {
[17:04:23.076]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:23.076]                 open = "w")
[17:04:23.076]         }
[17:04:23.076]         else {
[17:04:23.076]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:23.076]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:23.076]         }
[17:04:23.076]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:23.076]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:23.076]             base::sink(type = "output", split = FALSE)
[17:04:23.076]             base::close(...future.stdout)
[17:04:23.076]         }, add = TRUE)
[17:04:23.076]     }
[17:04:23.076]     ...future.frame <- base::sys.nframe()
[17:04:23.076]     ...future.conditions <- base::list()
[17:04:23.076]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:23.076]     if (FALSE) {
[17:04:23.076]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:23.076]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:23.076]     }
[17:04:23.076]     ...future.result <- base::tryCatch({
[17:04:23.076]         base::withCallingHandlers({
[17:04:23.076]             ...future.value <- base::withVisible(base::local(NA))
[17:04:23.076]             future::FutureResult(value = ...future.value$value, 
[17:04:23.076]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:23.076]                   ...future.rng), globalenv = if (FALSE) 
[17:04:23.076]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:23.076]                     ...future.globalenv.names))
[17:04:23.076]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:23.076]         }, condition = base::local({
[17:04:23.076]             c <- base::c
[17:04:23.076]             inherits <- base::inherits
[17:04:23.076]             invokeRestart <- base::invokeRestart
[17:04:23.076]             length <- base::length
[17:04:23.076]             list <- base::list
[17:04:23.076]             seq.int <- base::seq.int
[17:04:23.076]             signalCondition <- base::signalCondition
[17:04:23.076]             sys.calls <- base::sys.calls
[17:04:23.076]             `[[` <- base::`[[`
[17:04:23.076]             `+` <- base::`+`
[17:04:23.076]             `<<-` <- base::`<<-`
[17:04:23.076]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:23.076]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:23.076]                   3L)]
[17:04:23.076]             }
[17:04:23.076]             function(cond) {
[17:04:23.076]                 is_error <- inherits(cond, "error")
[17:04:23.076]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:23.076]                   NULL)
[17:04:23.076]                 if (is_error) {
[17:04:23.076]                   sessionInformation <- function() {
[17:04:23.076]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:23.076]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:23.076]                       search = base::search(), system = base::Sys.info())
[17:04:23.076]                   }
[17:04:23.076]                   ...future.conditions[[length(...future.conditions) + 
[17:04:23.076]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:23.076]                     cond$call), session = sessionInformation(), 
[17:04:23.076]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:23.076]                   signalCondition(cond)
[17:04:23.076]                 }
[17:04:23.076]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:23.076]                 "immediateCondition"))) {
[17:04:23.076]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:23.076]                   ...future.conditions[[length(...future.conditions) + 
[17:04:23.076]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:23.076]                   if (TRUE && !signal) {
[17:04:23.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:23.076]                     {
[17:04:23.076]                       inherits <- base::inherits
[17:04:23.076]                       invokeRestart <- base::invokeRestart
[17:04:23.076]                       is.null <- base::is.null
[17:04:23.076]                       muffled <- FALSE
[17:04:23.076]                       if (inherits(cond, "message")) {
[17:04:23.076]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:23.076]                         if (muffled) 
[17:04:23.076]                           invokeRestart("muffleMessage")
[17:04:23.076]                       }
[17:04:23.076]                       else if (inherits(cond, "warning")) {
[17:04:23.076]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:23.076]                         if (muffled) 
[17:04:23.076]                           invokeRestart("muffleWarning")
[17:04:23.076]                       }
[17:04:23.076]                       else if (inherits(cond, "condition")) {
[17:04:23.076]                         if (!is.null(pattern)) {
[17:04:23.076]                           computeRestarts <- base::computeRestarts
[17:04:23.076]                           grepl <- base::grepl
[17:04:23.076]                           restarts <- computeRestarts(cond)
[17:04:23.076]                           for (restart in restarts) {
[17:04:23.076]                             name <- restart$name
[17:04:23.076]                             if (is.null(name)) 
[17:04:23.076]                               next
[17:04:23.076]                             if (!grepl(pattern, name)) 
[17:04:23.076]                               next
[17:04:23.076]                             invokeRestart(restart)
[17:04:23.076]                             muffled <- TRUE
[17:04:23.076]                             break
[17:04:23.076]                           }
[17:04:23.076]                         }
[17:04:23.076]                       }
[17:04:23.076]                       invisible(muffled)
[17:04:23.076]                     }
[17:04:23.076]                     muffleCondition(cond, pattern = "^muffle")
[17:04:23.076]                   }
[17:04:23.076]                 }
[17:04:23.076]                 else {
[17:04:23.076]                   if (TRUE) {
[17:04:23.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:23.076]                     {
[17:04:23.076]                       inherits <- base::inherits
[17:04:23.076]                       invokeRestart <- base::invokeRestart
[17:04:23.076]                       is.null <- base::is.null
[17:04:23.076]                       muffled <- FALSE
[17:04:23.076]                       if (inherits(cond, "message")) {
[17:04:23.076]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:23.076]                         if (muffled) 
[17:04:23.076]                           invokeRestart("muffleMessage")
[17:04:23.076]                       }
[17:04:23.076]                       else if (inherits(cond, "warning")) {
[17:04:23.076]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:23.076]                         if (muffled) 
[17:04:23.076]                           invokeRestart("muffleWarning")
[17:04:23.076]                       }
[17:04:23.076]                       else if (inherits(cond, "condition")) {
[17:04:23.076]                         if (!is.null(pattern)) {
[17:04:23.076]                           computeRestarts <- base::computeRestarts
[17:04:23.076]                           grepl <- base::grepl
[17:04:23.076]                           restarts <- computeRestarts(cond)
[17:04:23.076]                           for (restart in restarts) {
[17:04:23.076]                             name <- restart$name
[17:04:23.076]                             if (is.null(name)) 
[17:04:23.076]                               next
[17:04:23.076]                             if (!grepl(pattern, name)) 
[17:04:23.076]                               next
[17:04:23.076]                             invokeRestart(restart)
[17:04:23.076]                             muffled <- TRUE
[17:04:23.076]                             break
[17:04:23.076]                           }
[17:04:23.076]                         }
[17:04:23.076]                       }
[17:04:23.076]                       invisible(muffled)
[17:04:23.076]                     }
[17:04:23.076]                     muffleCondition(cond, pattern = "^muffle")
[17:04:23.076]                   }
[17:04:23.076]                 }
[17:04:23.076]             }
[17:04:23.076]         }))
[17:04:23.076]     }, error = function(ex) {
[17:04:23.076]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:23.076]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:23.076]                 ...future.rng), started = ...future.startTime, 
[17:04:23.076]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:23.076]             version = "1.8"), class = "FutureResult")
[17:04:23.076]     }, finally = {
[17:04:23.076]         if (!identical(...future.workdir, getwd())) 
[17:04:23.076]             setwd(...future.workdir)
[17:04:23.076]         {
[17:04:23.076]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:23.076]                 ...future.oldOptions$nwarnings <- NULL
[17:04:23.076]             }
[17:04:23.076]             base::options(...future.oldOptions)
[17:04:23.076]             if (.Platform$OS.type == "windows") {
[17:04:23.076]                 old_names <- names(...future.oldEnvVars)
[17:04:23.076]                 envs <- base::Sys.getenv()
[17:04:23.076]                 names <- names(envs)
[17:04:23.076]                 common <- intersect(names, old_names)
[17:04:23.076]                 added <- setdiff(names, old_names)
[17:04:23.076]                 removed <- setdiff(old_names, names)
[17:04:23.076]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:23.076]                   envs[common]]
[17:04:23.076]                 NAMES <- toupper(changed)
[17:04:23.076]                 args <- list()
[17:04:23.076]                 for (kk in seq_along(NAMES)) {
[17:04:23.076]                   name <- changed[[kk]]
[17:04:23.076]                   NAME <- NAMES[[kk]]
[17:04:23.076]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.076]                     next
[17:04:23.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:23.076]                 }
[17:04:23.076]                 NAMES <- toupper(added)
[17:04:23.076]                 for (kk in seq_along(NAMES)) {
[17:04:23.076]                   name <- added[[kk]]
[17:04:23.076]                   NAME <- NAMES[[kk]]
[17:04:23.076]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.076]                     next
[17:04:23.076]                   args[[name]] <- ""
[17:04:23.076]                 }
[17:04:23.076]                 NAMES <- toupper(removed)
[17:04:23.076]                 for (kk in seq_along(NAMES)) {
[17:04:23.076]                   name <- removed[[kk]]
[17:04:23.076]                   NAME <- NAMES[[kk]]
[17:04:23.076]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.076]                     next
[17:04:23.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:23.076]                 }
[17:04:23.076]                 if (length(args) > 0) 
[17:04:23.076]                   base::do.call(base::Sys.setenv, args = args)
[17:04:23.076]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:23.076]             }
[17:04:23.076]             else {
[17:04:23.076]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:23.076]             }
[17:04:23.076]             {
[17:04:23.076]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:23.076]                   0L) {
[17:04:23.076]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:23.076]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:23.076]                   base::options(opts)
[17:04:23.076]                 }
[17:04:23.076]                 {
[17:04:23.076]                   {
[17:04:23.076]                     NULL
[17:04:23.076]                     RNGkind("Mersenne-Twister")
[17:04:23.076]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:23.076]                       inherits = FALSE)
[17:04:23.076]                   }
[17:04:23.076]                   options(future.plan = "multisession")
[17:04:23.076]                   if (is.na("")) 
[17:04:23.076]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:23.076]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:04:23.076]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:23.076]                     .init = FALSE)
[17:04:23.076]                 }
[17:04:23.076]             }
[17:04:23.076]         }
[17:04:23.076]     })
[17:04:23.076]     if (TRUE) {
[17:04:23.076]         base::sink(type = "output", split = FALSE)
[17:04:23.076]         if (TRUE) {
[17:04:23.076]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:23.076]         }
[17:04:23.076]         else {
[17:04:23.076]             ...future.result["stdout"] <- base::list(NULL)
[17:04:23.076]         }
[17:04:23.076]         base::close(...future.stdout)
[17:04:23.076]         ...future.stdout <- NULL
[17:04:23.076]     }
[17:04:23.076]     ...future.result$conditions <- ...future.conditions
[17:04:23.076]     ...future.result$finished <- base::Sys.time()
[17:04:23.076]     ...future.result
[17:04:23.076] }
[17:04:23.078] plan(): Setting new future strategy stack:
[17:04:23.078] List of future strategies:
[17:04:23.078] 1. sequential:
[17:04:23.078]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:23.078]    - tweaked: FALSE
[17:04:23.078]    - call: NULL
[17:04:23.078] plan(): nbrOfWorkers() = 1
[17:04:23.079] plan(): Setting new future strategy stack:
[17:04:23.079] List of future strategies:
[17:04:23.079] 1. multisession:
[17:04:23.079]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.079]    - tweaked: FALSE
[17:04:23.079]    - call: plan("default")
[17:04:23.083] plan(): nbrOfWorkers() = 1
[17:04:23.083] SequentialFuture started (and completed)
[17:04:23.083] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:23.086] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:04:23.087] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:04:23.087] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:04:23.087] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:04:23.087] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:04:23.088] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:04:23.089] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:04:23.090] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:04:23.091] Option 'future.plan' of type ‘function’
[17:04:23.091] R command-line argument: -p 1
[17:04:23.091]  => 'future.plan' already set.
[17:04:23.091] R process uuid: 4739e9ae-1e6a-1c8a-ca1a-96802cc6d7e2
[17:04:23.091] Setting plan('default')
[17:04:23.091] plan(): Setting new future strategy stack:
[17:04:23.092] List of future strategies:
[17:04:23.092] 1. multisession:
[17:04:23.092]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.092]    - tweaked: FALSE
[17:04:23.092]    - call: NULL
[17:04:23.095] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:04:23.095] plan(): Setting new future strategy stack:
[17:04:23.095] List of future strategies:
[17:04:23.095] 1. multisession:
[17:04:23.095]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.095]    - tweaked: FALSE
[17:04:23.095]    - call: NULL
[17:04:23.096] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:23.096] multisession:
[17:04:23.096] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.096] - tweaked: FALSE
[17:04:23.096] - call: NULL
[17:04:23.099] getGlobalsAndPackages() ...
[17:04:23.099] Not searching for globals
[17:04:23.099] - globals: [0] <none>
[17:04:23.099] getGlobalsAndPackages() ... DONE
[17:04:23.100] Packages needed by the future expression (n = 0): <none>
[17:04:23.100] Packages needed by future strategies (n = 0): <none>
[17:04:23.100] {
[17:04:23.100]     {
[17:04:23.100]         {
[17:04:23.100]             ...future.startTime <- base::Sys.time()
[17:04:23.100]             {
[17:04:23.100]                 {
[17:04:23.100]                   {
[17:04:23.100]                     base::local({
[17:04:23.100]                       has_future <- base::requireNamespace("future", 
[17:04:23.100]                         quietly = TRUE)
[17:04:23.100]                       if (has_future) {
[17:04:23.100]                         ns <- base::getNamespace("future")
[17:04:23.100]                         version <- ns[[".package"]][["version"]]
[17:04:23.100]                         if (is.null(version)) 
[17:04:23.100]                           version <- utils::packageVersion("future")
[17:04:23.100]                       }
[17:04:23.100]                       else {
[17:04:23.100]                         version <- NULL
[17:04:23.100]                       }
[17:04:23.100]                       if (!has_future || version < "1.8.0") {
[17:04:23.100]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:23.100]                           "", base::R.version$version.string), 
[17:04:23.100]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:23.100]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:23.100]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:23.100]                             "release", "version")], collapse = " "), 
[17:04:23.100]                           hostname = base::Sys.info()[["nodename"]])
[17:04:23.100]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:23.100]                           info)
[17:04:23.100]                         info <- base::paste(info, collapse = "; ")
[17:04:23.100]                         if (!has_future) {
[17:04:23.100]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:23.100]                             info)
[17:04:23.100]                         }
[17:04:23.100]                         else {
[17:04:23.100]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:23.100]                             info, version)
[17:04:23.100]                         }
[17:04:23.100]                         base::stop(msg)
[17:04:23.100]                       }
[17:04:23.100]                     })
[17:04:23.100]                   }
[17:04:23.100]                   ...future.strategy.old <- future::plan("list")
[17:04:23.100]                   options(future.plan = NULL)
[17:04:23.100]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:23.100]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:23.100]                 }
[17:04:23.100]                 ...future.workdir <- getwd()
[17:04:23.100]             }
[17:04:23.100]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:23.100]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:23.100]         }
[17:04:23.100]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:23.100]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:23.100]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:23.100]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:23.100]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:23.100]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:23.100]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:23.100]             base::names(...future.oldOptions))
[17:04:23.100]     }
[17:04:23.100]     if (FALSE) {
[17:04:23.100]     }
[17:04:23.100]     else {
[17:04:23.100]         if (TRUE) {
[17:04:23.100]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:23.100]                 open = "w")
[17:04:23.100]         }
[17:04:23.100]         else {
[17:04:23.100]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:23.100]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:23.100]         }
[17:04:23.100]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:23.100]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:23.100]             base::sink(type = "output", split = FALSE)
[17:04:23.100]             base::close(...future.stdout)
[17:04:23.100]         }, add = TRUE)
[17:04:23.100]     }
[17:04:23.100]     ...future.frame <- base::sys.nframe()
[17:04:23.100]     ...future.conditions <- base::list()
[17:04:23.100]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:23.100]     if (FALSE) {
[17:04:23.100]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:23.100]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:23.100]     }
[17:04:23.100]     ...future.result <- base::tryCatch({
[17:04:23.100]         base::withCallingHandlers({
[17:04:23.100]             ...future.value <- base::withVisible(base::local(NA))
[17:04:23.100]             future::FutureResult(value = ...future.value$value, 
[17:04:23.100]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:23.100]                   ...future.rng), globalenv = if (FALSE) 
[17:04:23.100]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:23.100]                     ...future.globalenv.names))
[17:04:23.100]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:23.100]         }, condition = base::local({
[17:04:23.100]             c <- base::c
[17:04:23.100]             inherits <- base::inherits
[17:04:23.100]             invokeRestart <- base::invokeRestart
[17:04:23.100]             length <- base::length
[17:04:23.100]             list <- base::list
[17:04:23.100]             seq.int <- base::seq.int
[17:04:23.100]             signalCondition <- base::signalCondition
[17:04:23.100]             sys.calls <- base::sys.calls
[17:04:23.100]             `[[` <- base::`[[`
[17:04:23.100]             `+` <- base::`+`
[17:04:23.100]             `<<-` <- base::`<<-`
[17:04:23.100]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:23.100]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:23.100]                   3L)]
[17:04:23.100]             }
[17:04:23.100]             function(cond) {
[17:04:23.100]                 is_error <- inherits(cond, "error")
[17:04:23.100]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:23.100]                   NULL)
[17:04:23.100]                 if (is_error) {
[17:04:23.100]                   sessionInformation <- function() {
[17:04:23.100]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:23.100]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:23.100]                       search = base::search(), system = base::Sys.info())
[17:04:23.100]                   }
[17:04:23.100]                   ...future.conditions[[length(...future.conditions) + 
[17:04:23.100]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:23.100]                     cond$call), session = sessionInformation(), 
[17:04:23.100]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:23.100]                   signalCondition(cond)
[17:04:23.100]                 }
[17:04:23.100]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:23.100]                 "immediateCondition"))) {
[17:04:23.100]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:23.100]                   ...future.conditions[[length(...future.conditions) + 
[17:04:23.100]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:23.100]                   if (TRUE && !signal) {
[17:04:23.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:23.100]                     {
[17:04:23.100]                       inherits <- base::inherits
[17:04:23.100]                       invokeRestart <- base::invokeRestart
[17:04:23.100]                       is.null <- base::is.null
[17:04:23.100]                       muffled <- FALSE
[17:04:23.100]                       if (inherits(cond, "message")) {
[17:04:23.100]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:23.100]                         if (muffled) 
[17:04:23.100]                           invokeRestart("muffleMessage")
[17:04:23.100]                       }
[17:04:23.100]                       else if (inherits(cond, "warning")) {
[17:04:23.100]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:23.100]                         if (muffled) 
[17:04:23.100]                           invokeRestart("muffleWarning")
[17:04:23.100]                       }
[17:04:23.100]                       else if (inherits(cond, "condition")) {
[17:04:23.100]                         if (!is.null(pattern)) {
[17:04:23.100]                           computeRestarts <- base::computeRestarts
[17:04:23.100]                           grepl <- base::grepl
[17:04:23.100]                           restarts <- computeRestarts(cond)
[17:04:23.100]                           for (restart in restarts) {
[17:04:23.100]                             name <- restart$name
[17:04:23.100]                             if (is.null(name)) 
[17:04:23.100]                               next
[17:04:23.100]                             if (!grepl(pattern, name)) 
[17:04:23.100]                               next
[17:04:23.100]                             invokeRestart(restart)
[17:04:23.100]                             muffled <- TRUE
[17:04:23.100]                             break
[17:04:23.100]                           }
[17:04:23.100]                         }
[17:04:23.100]                       }
[17:04:23.100]                       invisible(muffled)
[17:04:23.100]                     }
[17:04:23.100]                     muffleCondition(cond, pattern = "^muffle")
[17:04:23.100]                   }
[17:04:23.100]                 }
[17:04:23.100]                 else {
[17:04:23.100]                   if (TRUE) {
[17:04:23.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:23.100]                     {
[17:04:23.100]                       inherits <- base::inherits
[17:04:23.100]                       invokeRestart <- base::invokeRestart
[17:04:23.100]                       is.null <- base::is.null
[17:04:23.100]                       muffled <- FALSE
[17:04:23.100]                       if (inherits(cond, "message")) {
[17:04:23.100]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:23.100]                         if (muffled) 
[17:04:23.100]                           invokeRestart("muffleMessage")
[17:04:23.100]                       }
[17:04:23.100]                       else if (inherits(cond, "warning")) {
[17:04:23.100]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:23.100]                         if (muffled) 
[17:04:23.100]                           invokeRestart("muffleWarning")
[17:04:23.100]                       }
[17:04:23.100]                       else if (inherits(cond, "condition")) {
[17:04:23.100]                         if (!is.null(pattern)) {
[17:04:23.100]                           computeRestarts <- base::computeRestarts
[17:04:23.100]                           grepl <- base::grepl
[17:04:23.100]                           restarts <- computeRestarts(cond)
[17:04:23.100]                           for (restart in restarts) {
[17:04:23.100]                             name <- restart$name
[17:04:23.100]                             if (is.null(name)) 
[17:04:23.100]                               next
[17:04:23.100]                             if (!grepl(pattern, name)) 
[17:04:23.100]                               next
[17:04:23.100]                             invokeRestart(restart)
[17:04:23.100]                             muffled <- TRUE
[17:04:23.100]                             break
[17:04:23.100]                           }
[17:04:23.100]                         }
[17:04:23.100]                       }
[17:04:23.100]                       invisible(muffled)
[17:04:23.100]                     }
[17:04:23.100]                     muffleCondition(cond, pattern = "^muffle")
[17:04:23.100]                   }
[17:04:23.100]                 }
[17:04:23.100]             }
[17:04:23.100]         }))
[17:04:23.100]     }, error = function(ex) {
[17:04:23.100]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:23.100]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:23.100]                 ...future.rng), started = ...future.startTime, 
[17:04:23.100]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:23.100]             version = "1.8"), class = "FutureResult")
[17:04:23.100]     }, finally = {
[17:04:23.100]         if (!identical(...future.workdir, getwd())) 
[17:04:23.100]             setwd(...future.workdir)
[17:04:23.100]         {
[17:04:23.100]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:23.100]                 ...future.oldOptions$nwarnings <- NULL
[17:04:23.100]             }
[17:04:23.100]             base::options(...future.oldOptions)
[17:04:23.100]             if (.Platform$OS.type == "windows") {
[17:04:23.100]                 old_names <- names(...future.oldEnvVars)
[17:04:23.100]                 envs <- base::Sys.getenv()
[17:04:23.100]                 names <- names(envs)
[17:04:23.100]                 common <- intersect(names, old_names)
[17:04:23.100]                 added <- setdiff(names, old_names)
[17:04:23.100]                 removed <- setdiff(old_names, names)
[17:04:23.100]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:23.100]                   envs[common]]
[17:04:23.100]                 NAMES <- toupper(changed)
[17:04:23.100]                 args <- list()
[17:04:23.100]                 for (kk in seq_along(NAMES)) {
[17:04:23.100]                   name <- changed[[kk]]
[17:04:23.100]                   NAME <- NAMES[[kk]]
[17:04:23.100]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.100]                     next
[17:04:23.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:23.100]                 }
[17:04:23.100]                 NAMES <- toupper(added)
[17:04:23.100]                 for (kk in seq_along(NAMES)) {
[17:04:23.100]                   name <- added[[kk]]
[17:04:23.100]                   NAME <- NAMES[[kk]]
[17:04:23.100]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.100]                     next
[17:04:23.100]                   args[[name]] <- ""
[17:04:23.100]                 }
[17:04:23.100]                 NAMES <- toupper(removed)
[17:04:23.100]                 for (kk in seq_along(NAMES)) {
[17:04:23.100]                   name <- removed[[kk]]
[17:04:23.100]                   NAME <- NAMES[[kk]]
[17:04:23.100]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:23.100]                     next
[17:04:23.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:23.100]                 }
[17:04:23.100]                 if (length(args) > 0) 
[17:04:23.100]                   base::do.call(base::Sys.setenv, args = args)
[17:04:23.100]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:23.100]             }
[17:04:23.100]             else {
[17:04:23.100]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:23.100]             }
[17:04:23.100]             {
[17:04:23.100]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:23.100]                   0L) {
[17:04:23.100]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:23.100]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:23.100]                   base::options(opts)
[17:04:23.100]                 }
[17:04:23.100]                 {
[17:04:23.100]                   {
[17:04:23.100]                     NULL
[17:04:23.100]                     RNGkind("Mersenne-Twister")
[17:04:23.100]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:23.100]                       inherits = FALSE)
[17:04:23.100]                   }
[17:04:23.100]                   options(future.plan = function (..., workers = availableCores(), 
[17:04:23.100]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:04:23.100]                     envir = parent.frame()) 
[17:04:23.100]                   {
[17:04:23.100]                     if (is.function(workers)) 
[17:04:23.100]                       workers <- workers()
[17:04:23.100]                     workers <- structure(as.integer(workers), 
[17:04:23.100]                       class = class(workers))
[17:04:23.100]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:04:23.100]                       workers >= 1)
[17:04:23.100]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:04:23.100]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:04:23.100]                     }
[17:04:23.100]                     future <- MultisessionFuture(..., workers = workers, 
[17:04:23.100]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:04:23.100]                       envir = envir)
[17:04:23.100]                     if (!future$lazy) 
[17:04:23.100]                       future <- run(future)
[17:04:23.100]                     invisible(future)
[17:04:23.100]                   })
[17:04:23.100]                   if (is.na("")) 
[17:04:23.100]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:23.100]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:04:23.100]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:23.100]                     .init = FALSE)
[17:04:23.100]                 }
[17:04:23.100]             }
[17:04:23.100]         }
[17:04:23.100]     })
[17:04:23.100]     if (TRUE) {
[17:04:23.100]         base::sink(type = "output", split = FALSE)
[17:04:23.100]         if (TRUE) {
[17:04:23.100]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:23.100]         }
[17:04:23.100]         else {
[17:04:23.100]             ...future.result["stdout"] <- base::list(NULL)
[17:04:23.100]         }
[17:04:23.100]         base::close(...future.stdout)
[17:04:23.100]         ...future.stdout <- NULL
[17:04:23.100]     }
[17:04:23.100]     ...future.result$conditions <- ...future.conditions
[17:04:23.100]     ...future.result$finished <- base::Sys.time()
[17:04:23.100]     ...future.result
[17:04:23.100] }
[17:04:23.103] plan(): Setting new future strategy stack:
[17:04:23.103] List of future strategies:
[17:04:23.103] 1. sequential:
[17:04:23.103]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:23.103]    - tweaked: FALSE
[17:04:23.103]    - call: NULL
[17:04:23.103] plan(): nbrOfWorkers() = 1
[17:04:23.104] plan(): Setting new future strategy stack:
[17:04:23.104] List of future strategies:
[17:04:23.104] 1. multisession:
[17:04:23.104]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:04:23.104]    - tweaked: FALSE
[17:04:23.104]    - call: NULL
[17:04:23.108] plan(): nbrOfWorkers() = 1
[17:04:23.108] SequentialFuture started (and completed)
[17:04:23.108] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:23.111] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[17:04:23.114] Option 'future.startup.script': TRUE
[17:04:23.114] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:04:23.114] Future startup scripts found: <none>
[17:04:23.114] Option 'future.startup.script': TRUE
[17:04:23.114] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:04:23.114] Future startup scripts found: <none>
[17:04:23.114] Option 'future.startup.script': TRUE
[17:04:23.114] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:04:23.115] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[17:04:23.115] Option 'future.startup.script': TRUE
[17:04:23.115] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:04:23.117] Future startup scripts found: ‘.future.R’
[17:04:23.117] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[17:04:23.118] plan(): Setting new future strategy stack:
[17:04:23.118] List of future strategies:
[17:04:23.118] 1. FutureStrategy:
[17:04:23.118]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:23.118]    - tweaked: FALSE
[17:04:23.118]    - call: future::plan(oplan)
[17:04:23.119] plan(): nbrOfWorkers() = 1
> 
