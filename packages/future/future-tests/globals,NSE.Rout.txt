
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:42.250] plan(): Setting new future strategy stack:
[17:02:42.251] List of future strategies:
[17:02:42.251] 1. sequential:
[17:02:42.251]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.251]    - tweaked: FALSE
[17:02:42.251]    - call: future::plan("sequential")
[17:02:42.262] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[17:02:42.295] plan(): Setting new future strategy stack:
[17:02:42.296] List of future strategies:
[17:02:42.296] 1. sequential:
[17:02:42.296]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.296]    - tweaked: FALSE
[17:02:42.296]    - call: plan(strategy)
[17:02:42.309] plan(): nbrOfWorkers() = 1
[17:02:42.310] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:02:42.311] Searching for globals...
[17:02:42.315] - globals found: [1] ‘getOption’
[17:02:42.315] Searching for globals ... DONE
[17:02:42.315] Resolving globals: FALSE
[17:02:42.315] 
[17:02:42.315] 
[17:02:42.316] getGlobalsAndPackages() ... DONE
[17:02:42.316] run() for ‘Future’ ...
[17:02:42.316] - state: ‘created’
[17:02:42.317] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:42.317] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:42.317] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:42.317]   - Field: ‘label’
[17:02:42.317]   - Field: ‘local’
[17:02:42.317]   - Field: ‘owner’
[17:02:42.317]   - Field: ‘envir’
[17:02:42.317]   - Field: ‘packages’
[17:02:42.318]   - Field: ‘gc’
[17:02:42.318]   - Field: ‘conditions’
[17:02:42.318]   - Field: ‘expr’
[17:02:42.318]   - Field: ‘uuid’
[17:02:42.318]   - Field: ‘seed’
[17:02:42.318]   - Field: ‘version’
[17:02:42.318]   - Field: ‘result’
[17:02:42.318]   - Field: ‘asynchronous’
[17:02:42.318]   - Field: ‘calls’
[17:02:42.318]   - Field: ‘globals’
[17:02:42.318]   - Field: ‘stdout’
[17:02:42.319]   - Field: ‘earlySignal’
[17:02:42.319]   - Field: ‘lazy’
[17:02:42.319]   - Field: ‘state’
[17:02:42.319] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:42.319] - Launch lazy future ...
[17:02:42.320] Packages needed by the future expression (n = 0): <none>
[17:02:42.320] Packages needed by future strategies (n = 0): <none>
[17:02:42.321] {
[17:02:42.321]     {
[17:02:42.321]         {
[17:02:42.321]             ...future.startTime <- base::Sys.time()
[17:02:42.321]             {
[17:02:42.321]                 {
[17:02:42.321]                   {
[17:02:42.321]                     base::local({
[17:02:42.321]                       has_future <- base::requireNamespace("future", 
[17:02:42.321]                         quietly = TRUE)
[17:02:42.321]                       if (has_future) {
[17:02:42.321]                         ns <- base::getNamespace("future")
[17:02:42.321]                         version <- ns[[".package"]][["version"]]
[17:02:42.321]                         if (is.null(version)) 
[17:02:42.321]                           version <- utils::packageVersion("future")
[17:02:42.321]                       }
[17:02:42.321]                       else {
[17:02:42.321]                         version <- NULL
[17:02:42.321]                       }
[17:02:42.321]                       if (!has_future || version < "1.8.0") {
[17:02:42.321]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.321]                           "", base::R.version$version.string), 
[17:02:42.321]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:42.321]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.321]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.321]                             "release", "version")], collapse = " "), 
[17:02:42.321]                           hostname = base::Sys.info()[["nodename"]])
[17:02:42.321]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.321]                           info)
[17:02:42.321]                         info <- base::paste(info, collapse = "; ")
[17:02:42.321]                         if (!has_future) {
[17:02:42.321]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.321]                             info)
[17:02:42.321]                         }
[17:02:42.321]                         else {
[17:02:42.321]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.321]                             info, version)
[17:02:42.321]                         }
[17:02:42.321]                         base::stop(msg)
[17:02:42.321]                       }
[17:02:42.321]                     })
[17:02:42.321]                   }
[17:02:42.321]                   ...future.strategy.old <- future::plan("list")
[17:02:42.321]                   options(future.plan = NULL)
[17:02:42.321]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.321]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.321]                 }
[17:02:42.321]                 ...future.workdir <- getwd()
[17:02:42.321]             }
[17:02:42.321]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.321]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.321]         }
[17:02:42.321]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:02:42.321]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.321]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:02:42.321]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.321]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.321]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.321]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.321]             base::names(...future.oldOptions))
[17:02:42.321]     }
[17:02:42.321]     if (FALSE) {
[17:02:42.321]     }
[17:02:42.321]     else {
[17:02:42.321]         if (TRUE) {
[17:02:42.321]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.321]                 open = "w")
[17:02:42.321]         }
[17:02:42.321]         else {
[17:02:42.321]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.321]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.321]         }
[17:02:42.321]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.321]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.321]             base::sink(type = "output", split = FALSE)
[17:02:42.321]             base::close(...future.stdout)
[17:02:42.321]         }, add = TRUE)
[17:02:42.321]     }
[17:02:42.321]     ...future.frame <- base::sys.nframe()
[17:02:42.321]     ...future.conditions <- base::list()
[17:02:42.321]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.321]     if (FALSE) {
[17:02:42.321]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.321]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.321]     }
[17:02:42.321]     ...future.result <- base::tryCatch({
[17:02:42.321]         base::withCallingHandlers({
[17:02:42.321]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[17:02:42.321]             future::FutureResult(value = ...future.value$value, 
[17:02:42.321]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.321]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.321]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.321]                     ...future.globalenv.names))
[17:02:42.321]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.321]         }, condition = base::local({
[17:02:42.321]             c <- base::c
[17:02:42.321]             inherits <- base::inherits
[17:02:42.321]             invokeRestart <- base::invokeRestart
[17:02:42.321]             length <- base::length
[17:02:42.321]             list <- base::list
[17:02:42.321]             seq.int <- base::seq.int
[17:02:42.321]             signalCondition <- base::signalCondition
[17:02:42.321]             sys.calls <- base::sys.calls
[17:02:42.321]             `[[` <- base::`[[`
[17:02:42.321]             `+` <- base::`+`
[17:02:42.321]             `<<-` <- base::`<<-`
[17:02:42.321]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.321]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.321]                   3L)]
[17:02:42.321]             }
[17:02:42.321]             function(cond) {
[17:02:42.321]                 is_error <- inherits(cond, "error")
[17:02:42.321]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.321]                   NULL)
[17:02:42.321]                 if (is_error) {
[17:02:42.321]                   sessionInformation <- function() {
[17:02:42.321]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.321]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.321]                       search = base::search(), system = base::Sys.info())
[17:02:42.321]                   }
[17:02:42.321]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.321]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.321]                     cond$call), session = sessionInformation(), 
[17:02:42.321]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.321]                   signalCondition(cond)
[17:02:42.321]                 }
[17:02:42.321]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.321]                 "immediateCondition"))) {
[17:02:42.321]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.321]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.321]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.321]                   if (TRUE && !signal) {
[17:02:42.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.321]                     {
[17:02:42.321]                       inherits <- base::inherits
[17:02:42.321]                       invokeRestart <- base::invokeRestart
[17:02:42.321]                       is.null <- base::is.null
[17:02:42.321]                       muffled <- FALSE
[17:02:42.321]                       if (inherits(cond, "message")) {
[17:02:42.321]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.321]                         if (muffled) 
[17:02:42.321]                           invokeRestart("muffleMessage")
[17:02:42.321]                       }
[17:02:42.321]                       else if (inherits(cond, "warning")) {
[17:02:42.321]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.321]                         if (muffled) 
[17:02:42.321]                           invokeRestart("muffleWarning")
[17:02:42.321]                       }
[17:02:42.321]                       else if (inherits(cond, "condition")) {
[17:02:42.321]                         if (!is.null(pattern)) {
[17:02:42.321]                           computeRestarts <- base::computeRestarts
[17:02:42.321]                           grepl <- base::grepl
[17:02:42.321]                           restarts <- computeRestarts(cond)
[17:02:42.321]                           for (restart in restarts) {
[17:02:42.321]                             name <- restart$name
[17:02:42.321]                             if (is.null(name)) 
[17:02:42.321]                               next
[17:02:42.321]                             if (!grepl(pattern, name)) 
[17:02:42.321]                               next
[17:02:42.321]                             invokeRestart(restart)
[17:02:42.321]                             muffled <- TRUE
[17:02:42.321]                             break
[17:02:42.321]                           }
[17:02:42.321]                         }
[17:02:42.321]                       }
[17:02:42.321]                       invisible(muffled)
[17:02:42.321]                     }
[17:02:42.321]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.321]                   }
[17:02:42.321]                 }
[17:02:42.321]                 else {
[17:02:42.321]                   if (TRUE) {
[17:02:42.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.321]                     {
[17:02:42.321]                       inherits <- base::inherits
[17:02:42.321]                       invokeRestart <- base::invokeRestart
[17:02:42.321]                       is.null <- base::is.null
[17:02:42.321]                       muffled <- FALSE
[17:02:42.321]                       if (inherits(cond, "message")) {
[17:02:42.321]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.321]                         if (muffled) 
[17:02:42.321]                           invokeRestart("muffleMessage")
[17:02:42.321]                       }
[17:02:42.321]                       else if (inherits(cond, "warning")) {
[17:02:42.321]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.321]                         if (muffled) 
[17:02:42.321]                           invokeRestart("muffleWarning")
[17:02:42.321]                       }
[17:02:42.321]                       else if (inherits(cond, "condition")) {
[17:02:42.321]                         if (!is.null(pattern)) {
[17:02:42.321]                           computeRestarts <- base::computeRestarts
[17:02:42.321]                           grepl <- base::grepl
[17:02:42.321]                           restarts <- computeRestarts(cond)
[17:02:42.321]                           for (restart in restarts) {
[17:02:42.321]                             name <- restart$name
[17:02:42.321]                             if (is.null(name)) 
[17:02:42.321]                               next
[17:02:42.321]                             if (!grepl(pattern, name)) 
[17:02:42.321]                               next
[17:02:42.321]                             invokeRestart(restart)
[17:02:42.321]                             muffled <- TRUE
[17:02:42.321]                             break
[17:02:42.321]                           }
[17:02:42.321]                         }
[17:02:42.321]                       }
[17:02:42.321]                       invisible(muffled)
[17:02:42.321]                     }
[17:02:42.321]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.321]                   }
[17:02:42.321]                 }
[17:02:42.321]             }
[17:02:42.321]         }))
[17:02:42.321]     }, error = function(ex) {
[17:02:42.321]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.321]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.321]                 ...future.rng), started = ...future.startTime, 
[17:02:42.321]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.321]             version = "1.8"), class = "FutureResult")
[17:02:42.321]     }, finally = {
[17:02:42.321]         if (!identical(...future.workdir, getwd())) 
[17:02:42.321]             setwd(...future.workdir)
[17:02:42.321]         {
[17:02:42.321]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.321]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.321]             }
[17:02:42.321]             base::options(...future.oldOptions)
[17:02:42.321]             if (.Platform$OS.type == "windows") {
[17:02:42.321]                 old_names <- names(...future.oldEnvVars)
[17:02:42.321]                 envs <- base::Sys.getenv()
[17:02:42.321]                 names <- names(envs)
[17:02:42.321]                 common <- intersect(names, old_names)
[17:02:42.321]                 added <- setdiff(names, old_names)
[17:02:42.321]                 removed <- setdiff(old_names, names)
[17:02:42.321]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.321]                   envs[common]]
[17:02:42.321]                 NAMES <- toupper(changed)
[17:02:42.321]                 args <- list()
[17:02:42.321]                 for (kk in seq_along(NAMES)) {
[17:02:42.321]                   name <- changed[[kk]]
[17:02:42.321]                   NAME <- NAMES[[kk]]
[17:02:42.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.321]                     next
[17:02:42.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.321]                 }
[17:02:42.321]                 NAMES <- toupper(added)
[17:02:42.321]                 for (kk in seq_along(NAMES)) {
[17:02:42.321]                   name <- added[[kk]]
[17:02:42.321]                   NAME <- NAMES[[kk]]
[17:02:42.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.321]                     next
[17:02:42.321]                   args[[name]] <- ""
[17:02:42.321]                 }
[17:02:42.321]                 NAMES <- toupper(removed)
[17:02:42.321]                 for (kk in seq_along(NAMES)) {
[17:02:42.321]                   name <- removed[[kk]]
[17:02:42.321]                   NAME <- NAMES[[kk]]
[17:02:42.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.321]                     next
[17:02:42.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.321]                 }
[17:02:42.321]                 if (length(args) > 0) 
[17:02:42.321]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.321]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.321]             }
[17:02:42.321]             else {
[17:02:42.321]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.321]             }
[17:02:42.321]             {
[17:02:42.321]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.321]                   0L) {
[17:02:42.321]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.321]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.321]                   base::options(opts)
[17:02:42.321]                 }
[17:02:42.321]                 {
[17:02:42.321]                   {
[17:02:42.321]                     NULL
[17:02:42.321]                     RNGkind("Mersenne-Twister")
[17:02:42.321]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:42.321]                       inherits = FALSE)
[17:02:42.321]                   }
[17:02:42.321]                   options(future.plan = NULL)
[17:02:42.321]                   if (is.na(NA_character_)) 
[17:02:42.321]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.321]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.321]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.321]                     .init = FALSE)
[17:02:42.321]                 }
[17:02:42.321]             }
[17:02:42.321]         }
[17:02:42.321]     })
[17:02:42.321]     if (TRUE) {
[17:02:42.321]         base::sink(type = "output", split = FALSE)
[17:02:42.321]         if (TRUE) {
[17:02:42.321]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.321]         }
[17:02:42.321]         else {
[17:02:42.321]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.321]         }
[17:02:42.321]         base::close(...future.stdout)
[17:02:42.321]         ...future.stdout <- NULL
[17:02:42.321]     }
[17:02:42.321]     ...future.result$conditions <- ...future.conditions
[17:02:42.321]     ...future.result$finished <- base::Sys.time()
[17:02:42.321]     ...future.result
[17:02:42.321] }
[17:02:42.322] plan(): Setting new future strategy stack:
[17:02:42.323] List of future strategies:
[17:02:42.323] 1. sequential:
[17:02:42.323]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.323]    - tweaked: FALSE
[17:02:42.323]    - call: NULL
[17:02:42.323] plan(): nbrOfWorkers() = 1
[17:02:42.324] plan(): Setting new future strategy stack:
[17:02:42.324] List of future strategies:
[17:02:42.324] 1. sequential:
[17:02:42.324]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.324]    - tweaked: FALSE
[17:02:42.324]    - call: plan(strategy)
[17:02:42.325] plan(): nbrOfWorkers() = 1
[17:02:42.325] SequentialFuture started (and completed)
[17:02:42.325] - Launch lazy future ... done
[17:02:42.326] run() for ‘SequentialFuture’ ... done
[17:02:42.326] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.326] Searching for globals...
[17:02:42.327] - globals found: [1] ‘getOption’
[17:02:42.327] Searching for globals ... DONE
[17:02:42.327] Resolving globals: FALSE
[17:02:42.327] 
[17:02:42.327] 
[17:02:42.328] getGlobalsAndPackages() ... DONE
[17:02:42.328] run() for ‘Future’ ...
[17:02:42.328] - state: ‘created’
[17:02:42.328] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:42.328] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:42.328] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:42.328]   - Field: ‘label’
[17:02:42.329]   - Field: ‘local’
[17:02:42.329]   - Field: ‘owner’
[17:02:42.329]   - Field: ‘envir’
[17:02:42.329]   - Field: ‘packages’
[17:02:42.329]   - Field: ‘gc’
[17:02:42.329]   - Field: ‘conditions’
[17:02:42.329]   - Field: ‘expr’
[17:02:42.329]   - Field: ‘uuid’
[17:02:42.329]   - Field: ‘seed’
[17:02:42.329]   - Field: ‘version’
[17:02:42.329]   - Field: ‘result’
[17:02:42.330]   - Field: ‘asynchronous’
[17:02:42.330]   - Field: ‘calls’
[17:02:42.330]   - Field: ‘globals’
[17:02:42.330]   - Field: ‘stdout’
[17:02:42.330]   - Field: ‘earlySignal’
[17:02:42.330]   - Field: ‘lazy’
[17:02:42.330]   - Field: ‘state’
[17:02:42.330] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:42.330] - Launch lazy future ...
[17:02:42.330] Packages needed by the future expression (n = 0): <none>
[17:02:42.331] Packages needed by future strategies (n = 0): <none>
[17:02:42.331] {
[17:02:42.331]     {
[17:02:42.331]         {
[17:02:42.331]             ...future.startTime <- base::Sys.time()
[17:02:42.331]             {
[17:02:42.331]                 {
[17:02:42.331]                   {
[17:02:42.331]                     base::local({
[17:02:42.331]                       has_future <- base::requireNamespace("future", 
[17:02:42.331]                         quietly = TRUE)
[17:02:42.331]                       if (has_future) {
[17:02:42.331]                         ns <- base::getNamespace("future")
[17:02:42.331]                         version <- ns[[".package"]][["version"]]
[17:02:42.331]                         if (is.null(version)) 
[17:02:42.331]                           version <- utils::packageVersion("future")
[17:02:42.331]                       }
[17:02:42.331]                       else {
[17:02:42.331]                         version <- NULL
[17:02:42.331]                       }
[17:02:42.331]                       if (!has_future || version < "1.8.0") {
[17:02:42.331]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.331]                           "", base::R.version$version.string), 
[17:02:42.331]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:42.331]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.331]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.331]                             "release", "version")], collapse = " "), 
[17:02:42.331]                           hostname = base::Sys.info()[["nodename"]])
[17:02:42.331]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.331]                           info)
[17:02:42.331]                         info <- base::paste(info, collapse = "; ")
[17:02:42.331]                         if (!has_future) {
[17:02:42.331]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.331]                             info)
[17:02:42.331]                         }
[17:02:42.331]                         else {
[17:02:42.331]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.331]                             info, version)
[17:02:42.331]                         }
[17:02:42.331]                         base::stop(msg)
[17:02:42.331]                       }
[17:02:42.331]                     })
[17:02:42.331]                   }
[17:02:42.331]                   ...future.strategy.old <- future::plan("list")
[17:02:42.331]                   options(future.plan = NULL)
[17:02:42.331]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.331]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.331]                 }
[17:02:42.331]                 ...future.workdir <- getwd()
[17:02:42.331]             }
[17:02:42.331]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.331]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.331]         }
[17:02:42.331]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.331]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.331]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.331]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.331]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.331]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.331]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.331]             base::names(...future.oldOptions))
[17:02:42.331]     }
[17:02:42.331]     if (FALSE) {
[17:02:42.331]     }
[17:02:42.331]     else {
[17:02:42.331]         if (TRUE) {
[17:02:42.331]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.331]                 open = "w")
[17:02:42.331]         }
[17:02:42.331]         else {
[17:02:42.331]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.331]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.331]         }
[17:02:42.331]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.331]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.331]             base::sink(type = "output", split = FALSE)
[17:02:42.331]             base::close(...future.stdout)
[17:02:42.331]         }, add = TRUE)
[17:02:42.331]     }
[17:02:42.331]     ...future.frame <- base::sys.nframe()
[17:02:42.331]     ...future.conditions <- base::list()
[17:02:42.331]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.331]     if (FALSE) {
[17:02:42.331]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.331]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.331]     }
[17:02:42.331]     ...future.result <- base::tryCatch({
[17:02:42.331]         base::withCallingHandlers({
[17:02:42.331]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[17:02:42.331]             future::FutureResult(value = ...future.value$value, 
[17:02:42.331]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.331]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.331]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.331]                     ...future.globalenv.names))
[17:02:42.331]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.331]         }, condition = base::local({
[17:02:42.331]             c <- base::c
[17:02:42.331]             inherits <- base::inherits
[17:02:42.331]             invokeRestart <- base::invokeRestart
[17:02:42.331]             length <- base::length
[17:02:42.331]             list <- base::list
[17:02:42.331]             seq.int <- base::seq.int
[17:02:42.331]             signalCondition <- base::signalCondition
[17:02:42.331]             sys.calls <- base::sys.calls
[17:02:42.331]             `[[` <- base::`[[`
[17:02:42.331]             `+` <- base::`+`
[17:02:42.331]             `<<-` <- base::`<<-`
[17:02:42.331]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.331]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.331]                   3L)]
[17:02:42.331]             }
[17:02:42.331]             function(cond) {
[17:02:42.331]                 is_error <- inherits(cond, "error")
[17:02:42.331]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.331]                   NULL)
[17:02:42.331]                 if (is_error) {
[17:02:42.331]                   sessionInformation <- function() {
[17:02:42.331]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.331]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.331]                       search = base::search(), system = base::Sys.info())
[17:02:42.331]                   }
[17:02:42.331]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.331]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.331]                     cond$call), session = sessionInformation(), 
[17:02:42.331]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.331]                   signalCondition(cond)
[17:02:42.331]                 }
[17:02:42.331]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.331]                 "immediateCondition"))) {
[17:02:42.331]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.331]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.331]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.331]                   if (TRUE && !signal) {
[17:02:42.331]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.331]                     {
[17:02:42.331]                       inherits <- base::inherits
[17:02:42.331]                       invokeRestart <- base::invokeRestart
[17:02:42.331]                       is.null <- base::is.null
[17:02:42.331]                       muffled <- FALSE
[17:02:42.331]                       if (inherits(cond, "message")) {
[17:02:42.331]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.331]                         if (muffled) 
[17:02:42.331]                           invokeRestart("muffleMessage")
[17:02:42.331]                       }
[17:02:42.331]                       else if (inherits(cond, "warning")) {
[17:02:42.331]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.331]                         if (muffled) 
[17:02:42.331]                           invokeRestart("muffleWarning")
[17:02:42.331]                       }
[17:02:42.331]                       else if (inherits(cond, "condition")) {
[17:02:42.331]                         if (!is.null(pattern)) {
[17:02:42.331]                           computeRestarts <- base::computeRestarts
[17:02:42.331]                           grepl <- base::grepl
[17:02:42.331]                           restarts <- computeRestarts(cond)
[17:02:42.331]                           for (restart in restarts) {
[17:02:42.331]                             name <- restart$name
[17:02:42.331]                             if (is.null(name)) 
[17:02:42.331]                               next
[17:02:42.331]                             if (!grepl(pattern, name)) 
[17:02:42.331]                               next
[17:02:42.331]                             invokeRestart(restart)
[17:02:42.331]                             muffled <- TRUE
[17:02:42.331]                             break
[17:02:42.331]                           }
[17:02:42.331]                         }
[17:02:42.331]                       }
[17:02:42.331]                       invisible(muffled)
[17:02:42.331]                     }
[17:02:42.331]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.331]                   }
[17:02:42.331]                 }
[17:02:42.331]                 else {
[17:02:42.331]                   if (TRUE) {
[17:02:42.331]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.331]                     {
[17:02:42.331]                       inherits <- base::inherits
[17:02:42.331]                       invokeRestart <- base::invokeRestart
[17:02:42.331]                       is.null <- base::is.null
[17:02:42.331]                       muffled <- FALSE
[17:02:42.331]                       if (inherits(cond, "message")) {
[17:02:42.331]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.331]                         if (muffled) 
[17:02:42.331]                           invokeRestart("muffleMessage")
[17:02:42.331]                       }
[17:02:42.331]                       else if (inherits(cond, "warning")) {
[17:02:42.331]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.331]                         if (muffled) 
[17:02:42.331]                           invokeRestart("muffleWarning")
[17:02:42.331]                       }
[17:02:42.331]                       else if (inherits(cond, "condition")) {
[17:02:42.331]                         if (!is.null(pattern)) {
[17:02:42.331]                           computeRestarts <- base::computeRestarts
[17:02:42.331]                           grepl <- base::grepl
[17:02:42.331]                           restarts <- computeRestarts(cond)
[17:02:42.331]                           for (restart in restarts) {
[17:02:42.331]                             name <- restart$name
[17:02:42.331]                             if (is.null(name)) 
[17:02:42.331]                               next
[17:02:42.331]                             if (!grepl(pattern, name)) 
[17:02:42.331]                               next
[17:02:42.331]                             invokeRestart(restart)
[17:02:42.331]                             muffled <- TRUE
[17:02:42.331]                             break
[17:02:42.331]                           }
[17:02:42.331]                         }
[17:02:42.331]                       }
[17:02:42.331]                       invisible(muffled)
[17:02:42.331]                     }
[17:02:42.331]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.331]                   }
[17:02:42.331]                 }
[17:02:42.331]             }
[17:02:42.331]         }))
[17:02:42.331]     }, error = function(ex) {
[17:02:42.331]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.331]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.331]                 ...future.rng), started = ...future.startTime, 
[17:02:42.331]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.331]             version = "1.8"), class = "FutureResult")
[17:02:42.331]     }, finally = {
[17:02:42.331]         if (!identical(...future.workdir, getwd())) 
[17:02:42.331]             setwd(...future.workdir)
[17:02:42.331]         {
[17:02:42.331]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.331]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.331]             }
[17:02:42.331]             base::options(...future.oldOptions)
[17:02:42.331]             if (.Platform$OS.type == "windows") {
[17:02:42.331]                 old_names <- names(...future.oldEnvVars)
[17:02:42.331]                 envs <- base::Sys.getenv()
[17:02:42.331]                 names <- names(envs)
[17:02:42.331]                 common <- intersect(names, old_names)
[17:02:42.331]                 added <- setdiff(names, old_names)
[17:02:42.331]                 removed <- setdiff(old_names, names)
[17:02:42.331]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.331]                   envs[common]]
[17:02:42.331]                 NAMES <- toupper(changed)
[17:02:42.331]                 args <- list()
[17:02:42.331]                 for (kk in seq_along(NAMES)) {
[17:02:42.331]                   name <- changed[[kk]]
[17:02:42.331]                   NAME <- NAMES[[kk]]
[17:02:42.331]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.331]                     next
[17:02:42.331]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.331]                 }
[17:02:42.331]                 NAMES <- toupper(added)
[17:02:42.331]                 for (kk in seq_along(NAMES)) {
[17:02:42.331]                   name <- added[[kk]]
[17:02:42.331]                   NAME <- NAMES[[kk]]
[17:02:42.331]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.331]                     next
[17:02:42.331]                   args[[name]] <- ""
[17:02:42.331]                 }
[17:02:42.331]                 NAMES <- toupper(removed)
[17:02:42.331]                 for (kk in seq_along(NAMES)) {
[17:02:42.331]                   name <- removed[[kk]]
[17:02:42.331]                   NAME <- NAMES[[kk]]
[17:02:42.331]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.331]                     next
[17:02:42.331]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.331]                 }
[17:02:42.331]                 if (length(args) > 0) 
[17:02:42.331]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.331]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.331]             }
[17:02:42.331]             else {
[17:02:42.331]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.331]             }
[17:02:42.331]             {
[17:02:42.331]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.331]                   0L) {
[17:02:42.331]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.331]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.331]                   base::options(opts)
[17:02:42.331]                 }
[17:02:42.331]                 {
[17:02:42.331]                   {
[17:02:42.331]                     NULL
[17:02:42.331]                     RNGkind("Mersenne-Twister")
[17:02:42.331]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:42.331]                       inherits = FALSE)
[17:02:42.331]                   }
[17:02:42.331]                   options(future.plan = NULL)
[17:02:42.331]                   if (is.na(NA_character_)) 
[17:02:42.331]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.331]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.331]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.331]                     .init = FALSE)
[17:02:42.331]                 }
[17:02:42.331]             }
[17:02:42.331]         }
[17:02:42.331]     })
[17:02:42.331]     if (TRUE) {
[17:02:42.331]         base::sink(type = "output", split = FALSE)
[17:02:42.331]         if (TRUE) {
[17:02:42.331]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.331]         }
[17:02:42.331]         else {
[17:02:42.331]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.331]         }
[17:02:42.331]         base::close(...future.stdout)
[17:02:42.331]         ...future.stdout <- NULL
[17:02:42.331]     }
[17:02:42.331]     ...future.result$conditions <- ...future.conditions
[17:02:42.331]     ...future.result$finished <- base::Sys.time()
[17:02:42.331]     ...future.result
[17:02:42.331] }
[17:02:42.333] plan(): Setting new future strategy stack:
[17:02:42.333] List of future strategies:
[17:02:42.333] 1. sequential:
[17:02:42.333]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.333]    - tweaked: FALSE
[17:02:42.333]    - call: NULL
[17:02:42.333] plan(): nbrOfWorkers() = 1
[17:02:42.334] plan(): Setting new future strategy stack:
[17:02:42.334] List of future strategies:
[17:02:42.334] 1. sequential:
[17:02:42.334]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.334]    - tweaked: FALSE
[17:02:42.334]    - call: plan(strategy)
[17:02:42.335] plan(): nbrOfWorkers() = 1
[17:02:42.335] SequentialFuture started (and completed)
[17:02:42.335] - Launch lazy future ... done
[17:02:42.335] run() for ‘SequentialFuture’ ... done
[17:02:42.335] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:02:42.336] Searching for globals...
[17:02:42.337] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.337] Searching for globals...
[17:02:42.338] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:02:42.338] Searching for globals ... DONE
[17:02:42.338] Resolving globals: FALSE
[17:02:42.339] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:42.340] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:42.340] - globals: [1] ‘data’
[17:02:42.340] 
[17:02:42.340] getGlobalsAndPackages() ... DONE
[17:02:42.340] run() for ‘Future’ ...
[17:02:42.340] - state: ‘created’
[17:02:42.340] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:42.341] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:42.341] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:42.341]   - Field: ‘label’
[17:02:42.341]   - Field: ‘local’
[17:02:42.341]   - Field: ‘owner’
[17:02:42.341]   - Field: ‘envir’
[17:02:42.341]   - Field: ‘packages’
[17:02:42.341]   - Field: ‘gc’
[17:02:42.341]   - Field: ‘conditions’
[17:02:42.342]   - Field: ‘expr’
[17:02:42.342]   - Field: ‘uuid’
[17:02:42.342]   - Field: ‘seed’
[17:02:42.342]   - Field: ‘version’
[17:02:42.342]   - Field: ‘result’
[17:02:42.342]   - Field: ‘asynchronous’
[17:02:42.345]   - Field: ‘calls’
[17:02:42.345]   - Field: ‘globals’
[17:02:42.345]   - Field: ‘stdout’
[17:02:42.345]   - Field: ‘earlySignal’
[17:02:42.345]   - Field: ‘lazy’
[17:02:42.345]   - Field: ‘state’
[17:02:42.345] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:42.346] - Launch lazy future ...
[17:02:42.346] Packages needed by the future expression (n = 0): <none>
[17:02:42.346] Packages needed by future strategies (n = 0): <none>
[17:02:42.346] {
[17:02:42.346]     {
[17:02:42.346]         {
[17:02:42.346]             ...future.startTime <- base::Sys.time()
[17:02:42.346]             {
[17:02:42.346]                 {
[17:02:42.346]                   {
[17:02:42.346]                     base::local({
[17:02:42.346]                       has_future <- base::requireNamespace("future", 
[17:02:42.346]                         quietly = TRUE)
[17:02:42.346]                       if (has_future) {
[17:02:42.346]                         ns <- base::getNamespace("future")
[17:02:42.346]                         version <- ns[[".package"]][["version"]]
[17:02:42.346]                         if (is.null(version)) 
[17:02:42.346]                           version <- utils::packageVersion("future")
[17:02:42.346]                       }
[17:02:42.346]                       else {
[17:02:42.346]                         version <- NULL
[17:02:42.346]                       }
[17:02:42.346]                       if (!has_future || version < "1.8.0") {
[17:02:42.346]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.346]                           "", base::R.version$version.string), 
[17:02:42.346]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:42.346]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.346]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.346]                             "release", "version")], collapse = " "), 
[17:02:42.346]                           hostname = base::Sys.info()[["nodename"]])
[17:02:42.346]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.346]                           info)
[17:02:42.346]                         info <- base::paste(info, collapse = "; ")
[17:02:42.346]                         if (!has_future) {
[17:02:42.346]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.346]                             info)
[17:02:42.346]                         }
[17:02:42.346]                         else {
[17:02:42.346]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.346]                             info, version)
[17:02:42.346]                         }
[17:02:42.346]                         base::stop(msg)
[17:02:42.346]                       }
[17:02:42.346]                     })
[17:02:42.346]                   }
[17:02:42.346]                   ...future.strategy.old <- future::plan("list")
[17:02:42.346]                   options(future.plan = NULL)
[17:02:42.346]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.346]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.346]                 }
[17:02:42.346]                 ...future.workdir <- getwd()
[17:02:42.346]             }
[17:02:42.346]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.346]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.346]         }
[17:02:42.346]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.346]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.346]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.346]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.346]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.346]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.346]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.346]             base::names(...future.oldOptions))
[17:02:42.346]     }
[17:02:42.346]     if (FALSE) {
[17:02:42.346]     }
[17:02:42.346]     else {
[17:02:42.346]         if (TRUE) {
[17:02:42.346]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.346]                 open = "w")
[17:02:42.346]         }
[17:02:42.346]         else {
[17:02:42.346]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.346]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.346]         }
[17:02:42.346]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.346]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.346]             base::sink(type = "output", split = FALSE)
[17:02:42.346]             base::close(...future.stdout)
[17:02:42.346]         }, add = TRUE)
[17:02:42.346]     }
[17:02:42.346]     ...future.frame <- base::sys.nframe()
[17:02:42.346]     ...future.conditions <- base::list()
[17:02:42.346]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.346]     if (FALSE) {
[17:02:42.346]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.346]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.346]     }
[17:02:42.346]     ...future.result <- base::tryCatch({
[17:02:42.346]         base::withCallingHandlers({
[17:02:42.346]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:02:42.346]                 x < 3)$y))
[17:02:42.346]             future::FutureResult(value = ...future.value$value, 
[17:02:42.346]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.346]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.346]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.346]                     ...future.globalenv.names))
[17:02:42.346]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.346]         }, condition = base::local({
[17:02:42.346]             c <- base::c
[17:02:42.346]             inherits <- base::inherits
[17:02:42.346]             invokeRestart <- base::invokeRestart
[17:02:42.346]             length <- base::length
[17:02:42.346]             list <- base::list
[17:02:42.346]             seq.int <- base::seq.int
[17:02:42.346]             signalCondition <- base::signalCondition
[17:02:42.346]             sys.calls <- base::sys.calls
[17:02:42.346]             `[[` <- base::`[[`
[17:02:42.346]             `+` <- base::`+`
[17:02:42.346]             `<<-` <- base::`<<-`
[17:02:42.346]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.346]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.346]                   3L)]
[17:02:42.346]             }
[17:02:42.346]             function(cond) {
[17:02:42.346]                 is_error <- inherits(cond, "error")
[17:02:42.346]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.346]                   NULL)
[17:02:42.346]                 if (is_error) {
[17:02:42.346]                   sessionInformation <- function() {
[17:02:42.346]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.346]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.346]                       search = base::search(), system = base::Sys.info())
[17:02:42.346]                   }
[17:02:42.346]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.346]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.346]                     cond$call), session = sessionInformation(), 
[17:02:42.346]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.346]                   signalCondition(cond)
[17:02:42.346]                 }
[17:02:42.346]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.346]                 "immediateCondition"))) {
[17:02:42.346]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.346]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.346]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.346]                   if (TRUE && !signal) {
[17:02:42.346]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.346]                     {
[17:02:42.346]                       inherits <- base::inherits
[17:02:42.346]                       invokeRestart <- base::invokeRestart
[17:02:42.346]                       is.null <- base::is.null
[17:02:42.346]                       muffled <- FALSE
[17:02:42.346]                       if (inherits(cond, "message")) {
[17:02:42.346]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.346]                         if (muffled) 
[17:02:42.346]                           invokeRestart("muffleMessage")
[17:02:42.346]                       }
[17:02:42.346]                       else if (inherits(cond, "warning")) {
[17:02:42.346]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.346]                         if (muffled) 
[17:02:42.346]                           invokeRestart("muffleWarning")
[17:02:42.346]                       }
[17:02:42.346]                       else if (inherits(cond, "condition")) {
[17:02:42.346]                         if (!is.null(pattern)) {
[17:02:42.346]                           computeRestarts <- base::computeRestarts
[17:02:42.346]                           grepl <- base::grepl
[17:02:42.346]                           restarts <- computeRestarts(cond)
[17:02:42.346]                           for (restart in restarts) {
[17:02:42.346]                             name <- restart$name
[17:02:42.346]                             if (is.null(name)) 
[17:02:42.346]                               next
[17:02:42.346]                             if (!grepl(pattern, name)) 
[17:02:42.346]                               next
[17:02:42.346]                             invokeRestart(restart)
[17:02:42.346]                             muffled <- TRUE
[17:02:42.346]                             break
[17:02:42.346]                           }
[17:02:42.346]                         }
[17:02:42.346]                       }
[17:02:42.346]                       invisible(muffled)
[17:02:42.346]                     }
[17:02:42.346]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.346]                   }
[17:02:42.346]                 }
[17:02:42.346]                 else {
[17:02:42.346]                   if (TRUE) {
[17:02:42.346]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.346]                     {
[17:02:42.346]                       inherits <- base::inherits
[17:02:42.346]                       invokeRestart <- base::invokeRestart
[17:02:42.346]                       is.null <- base::is.null
[17:02:42.346]                       muffled <- FALSE
[17:02:42.346]                       if (inherits(cond, "message")) {
[17:02:42.346]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.346]                         if (muffled) 
[17:02:42.346]                           invokeRestart("muffleMessage")
[17:02:42.346]                       }
[17:02:42.346]                       else if (inherits(cond, "warning")) {
[17:02:42.346]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.346]                         if (muffled) 
[17:02:42.346]                           invokeRestart("muffleWarning")
[17:02:42.346]                       }
[17:02:42.346]                       else if (inherits(cond, "condition")) {
[17:02:42.346]                         if (!is.null(pattern)) {
[17:02:42.346]                           computeRestarts <- base::computeRestarts
[17:02:42.346]                           grepl <- base::grepl
[17:02:42.346]                           restarts <- computeRestarts(cond)
[17:02:42.346]                           for (restart in restarts) {
[17:02:42.346]                             name <- restart$name
[17:02:42.346]                             if (is.null(name)) 
[17:02:42.346]                               next
[17:02:42.346]                             if (!grepl(pattern, name)) 
[17:02:42.346]                               next
[17:02:42.346]                             invokeRestart(restart)
[17:02:42.346]                             muffled <- TRUE
[17:02:42.346]                             break
[17:02:42.346]                           }
[17:02:42.346]                         }
[17:02:42.346]                       }
[17:02:42.346]                       invisible(muffled)
[17:02:42.346]                     }
[17:02:42.346]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.346]                   }
[17:02:42.346]                 }
[17:02:42.346]             }
[17:02:42.346]         }))
[17:02:42.346]     }, error = function(ex) {
[17:02:42.346]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.346]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.346]                 ...future.rng), started = ...future.startTime, 
[17:02:42.346]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.346]             version = "1.8"), class = "FutureResult")
[17:02:42.346]     }, finally = {
[17:02:42.346]         if (!identical(...future.workdir, getwd())) 
[17:02:42.346]             setwd(...future.workdir)
[17:02:42.346]         {
[17:02:42.346]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.346]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.346]             }
[17:02:42.346]             base::options(...future.oldOptions)
[17:02:42.346]             if (.Platform$OS.type == "windows") {
[17:02:42.346]                 old_names <- names(...future.oldEnvVars)
[17:02:42.346]                 envs <- base::Sys.getenv()
[17:02:42.346]                 names <- names(envs)
[17:02:42.346]                 common <- intersect(names, old_names)
[17:02:42.346]                 added <- setdiff(names, old_names)
[17:02:42.346]                 removed <- setdiff(old_names, names)
[17:02:42.346]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.346]                   envs[common]]
[17:02:42.346]                 NAMES <- toupper(changed)
[17:02:42.346]                 args <- list()
[17:02:42.346]                 for (kk in seq_along(NAMES)) {
[17:02:42.346]                   name <- changed[[kk]]
[17:02:42.346]                   NAME <- NAMES[[kk]]
[17:02:42.346]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.346]                     next
[17:02:42.346]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.346]                 }
[17:02:42.346]                 NAMES <- toupper(added)
[17:02:42.346]                 for (kk in seq_along(NAMES)) {
[17:02:42.346]                   name <- added[[kk]]
[17:02:42.346]                   NAME <- NAMES[[kk]]
[17:02:42.346]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.346]                     next
[17:02:42.346]                   args[[name]] <- ""
[17:02:42.346]                 }
[17:02:42.346]                 NAMES <- toupper(removed)
[17:02:42.346]                 for (kk in seq_along(NAMES)) {
[17:02:42.346]                   name <- removed[[kk]]
[17:02:42.346]                   NAME <- NAMES[[kk]]
[17:02:42.346]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.346]                     next
[17:02:42.346]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.346]                 }
[17:02:42.346]                 if (length(args) > 0) 
[17:02:42.346]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.346]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.346]             }
[17:02:42.346]             else {
[17:02:42.346]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.346]             }
[17:02:42.346]             {
[17:02:42.346]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.346]                   0L) {
[17:02:42.346]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.346]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.346]                   base::options(opts)
[17:02:42.346]                 }
[17:02:42.346]                 {
[17:02:42.346]                   {
[17:02:42.346]                     NULL
[17:02:42.346]                     RNGkind("Mersenne-Twister")
[17:02:42.346]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:42.346]                       inherits = FALSE)
[17:02:42.346]                   }
[17:02:42.346]                   options(future.plan = NULL)
[17:02:42.346]                   if (is.na(NA_character_)) 
[17:02:42.346]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.346]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.346]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.346]                     .init = FALSE)
[17:02:42.346]                 }
[17:02:42.346]             }
[17:02:42.346]         }
[17:02:42.346]     })
[17:02:42.346]     if (TRUE) {
[17:02:42.346]         base::sink(type = "output", split = FALSE)
[17:02:42.346]         if (TRUE) {
[17:02:42.346]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.346]         }
[17:02:42.346]         else {
[17:02:42.346]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.346]         }
[17:02:42.346]         base::close(...future.stdout)
[17:02:42.346]         ...future.stdout <- NULL
[17:02:42.346]     }
[17:02:42.346]     ...future.result$conditions <- ...future.conditions
[17:02:42.346]     ...future.result$finished <- base::Sys.time()
[17:02:42.346]     ...future.result
[17:02:42.346] }
[17:02:42.348] assign_globals() ...
[17:02:42.348] List of 1
[17:02:42.348]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:42.348]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:42.348]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:42.348]  - attr(*, "where")=List of 1
[17:02:42.348]   ..$ data:<environment: R_EmptyEnv> 
[17:02:42.348]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:42.348]  - attr(*, "resolved")= logi FALSE
[17:02:42.348]  - attr(*, "total_size")= num 160
[17:02:42.348]  - attr(*, "already-done")= logi TRUE
[17:02:42.354] - copied ‘data’ to environment
[17:02:42.354] assign_globals() ... done
[17:02:42.354] plan(): Setting new future strategy stack:
[17:02:42.354] List of future strategies:
[17:02:42.354] 1. sequential:
[17:02:42.354]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.354]    - tweaked: FALSE
[17:02:42.354]    - call: NULL
[17:02:42.355] plan(): nbrOfWorkers() = 1
[17:02:42.356] plan(): Setting new future strategy stack:
[17:02:42.356] List of future strategies:
[17:02:42.356] 1. sequential:
[17:02:42.356]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.356]    - tweaked: FALSE
[17:02:42.356]    - call: plan(strategy)
[17:02:42.356] plan(): nbrOfWorkers() = 1
[17:02:42.356] SequentialFuture started (and completed)
[17:02:42.357] - Launch lazy future ... done
[17:02:42.357] run() for ‘SequentialFuture’ ... done
[17:02:42.357] plan(): Setting new future strategy stack:
[17:02:42.357] List of future strategies:
[17:02:42.357] 1. sequential:
[17:02:42.357]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.357]    - tweaked: FALSE
[17:02:42.357]    - call: plan(list(sequential, strategy))
[17:02:42.357] 2. sequential:
[17:02:42.357]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.357]    - tweaked: FALSE
[17:02:42.357]    - call: plan(list(sequential, strategy))
[17:02:42.358] plan(): nbrOfWorkers() = 1
[17:02:42.358] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.358] Searching for globals...
[17:02:42.363] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:02:42.364] Searching for globals ... DONE
[17:02:42.364] Resolving globals: FALSE
[17:02:42.364] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:42.365] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:42.365] - globals: [1] ‘data’
[17:02:42.365] - packages: [1] ‘future’
[17:02:42.365] getGlobalsAndPackages() ... DONE
[17:02:42.365] run() for ‘Future’ ...
[17:02:42.365] - state: ‘created’
[17:02:42.366] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:42.366] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:42.366] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:42.366]   - Field: ‘label’
[17:02:42.366]   - Field: ‘local’
[17:02:42.366]   - Field: ‘owner’
[17:02:42.366]   - Field: ‘envir’
[17:02:42.366]   - Field: ‘packages’
[17:02:42.367]   - Field: ‘gc’
[17:02:42.367]   - Field: ‘conditions’
[17:02:42.367]   - Field: ‘expr’
[17:02:42.367]   - Field: ‘uuid’
[17:02:42.367]   - Field: ‘seed’
[17:02:42.367]   - Field: ‘version’
[17:02:42.367]   - Field: ‘result’
[17:02:42.367]   - Field: ‘asynchronous’
[17:02:42.367]   - Field: ‘calls’
[17:02:42.367]   - Field: ‘globals’
[17:02:42.367]   - Field: ‘stdout’
[17:02:42.368]   - Field: ‘earlySignal’
[17:02:42.368]   - Field: ‘lazy’
[17:02:42.368]   - Field: ‘state’
[17:02:42.368] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:42.368] - Launch lazy future ...
[17:02:42.368] Packages needed by the future expression (n = 1): ‘future’
[17:02:42.368] Packages needed by future strategies (n = 1): ‘future’
[17:02:42.369] {
[17:02:42.369]     {
[17:02:42.369]         {
[17:02:42.369]             ...future.startTime <- base::Sys.time()
[17:02:42.369]             {
[17:02:42.369]                 {
[17:02:42.369]                   {
[17:02:42.369]                     {
[17:02:42.369]                       base::local({
[17:02:42.369]                         has_future <- base::requireNamespace("future", 
[17:02:42.369]                           quietly = TRUE)
[17:02:42.369]                         if (has_future) {
[17:02:42.369]                           ns <- base::getNamespace("future")
[17:02:42.369]                           version <- ns[[".package"]][["version"]]
[17:02:42.369]                           if (is.null(version)) 
[17:02:42.369]                             version <- utils::packageVersion("future")
[17:02:42.369]                         }
[17:02:42.369]                         else {
[17:02:42.369]                           version <- NULL
[17:02:42.369]                         }
[17:02:42.369]                         if (!has_future || version < "1.8.0") {
[17:02:42.369]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.369]                             "", base::R.version$version.string), 
[17:02:42.369]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:42.369]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.369]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.369]                               "release", "version")], collapse = " "), 
[17:02:42.369]                             hostname = base::Sys.info()[["nodename"]])
[17:02:42.369]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.369]                             info)
[17:02:42.369]                           info <- base::paste(info, collapse = "; ")
[17:02:42.369]                           if (!has_future) {
[17:02:42.369]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.369]                               info)
[17:02:42.369]                           }
[17:02:42.369]                           else {
[17:02:42.369]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.369]                               info, version)
[17:02:42.369]                           }
[17:02:42.369]                           base::stop(msg)
[17:02:42.369]                         }
[17:02:42.369]                       })
[17:02:42.369]                     }
[17:02:42.369]                     base::local({
[17:02:42.369]                       for (pkg in "future") {
[17:02:42.369]                         base::loadNamespace(pkg)
[17:02:42.369]                         base::library(pkg, character.only = TRUE)
[17:02:42.369]                       }
[17:02:42.369]                     })
[17:02:42.369]                   }
[17:02:42.369]                   ...future.strategy.old <- future::plan("list")
[17:02:42.369]                   options(future.plan = NULL)
[17:02:42.369]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.369]                   future::plan(list(function (..., envir = parent.frame()) 
[17:02:42.369]                   {
[17:02:42.369]                     future <- SequentialFuture(..., envir = envir)
[17:02:42.369]                     if (!future$lazy) 
[17:02:42.369]                       future <- run(future)
[17:02:42.369]                     invisible(future)
[17:02:42.369]                   }), .cleanup = FALSE, .init = FALSE)
[17:02:42.369]                 }
[17:02:42.369]                 ...future.workdir <- getwd()
[17:02:42.369]             }
[17:02:42.369]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.369]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.369]         }
[17:02:42.369]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.369]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.369]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.369]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.369]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.369]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.369]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.369]             base::names(...future.oldOptions))
[17:02:42.369]     }
[17:02:42.369]     if (FALSE) {
[17:02:42.369]     }
[17:02:42.369]     else {
[17:02:42.369]         if (TRUE) {
[17:02:42.369]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.369]                 open = "w")
[17:02:42.369]         }
[17:02:42.369]         else {
[17:02:42.369]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.369]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.369]         }
[17:02:42.369]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.369]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.369]             base::sink(type = "output", split = FALSE)
[17:02:42.369]             base::close(...future.stdout)
[17:02:42.369]         }, add = TRUE)
[17:02:42.369]     }
[17:02:42.369]     ...future.frame <- base::sys.nframe()
[17:02:42.369]     ...future.conditions <- base::list()
[17:02:42.369]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.369]     if (FALSE) {
[17:02:42.369]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.369]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.369]     }
[17:02:42.369]     ...future.result <- base::tryCatch({
[17:02:42.369]         base::withCallingHandlers({
[17:02:42.369]             ...future.value <- base::withVisible(base::local({
[17:02:42.369]                 a %<-% subset(data, x < 3)$y
[17:02:42.369]                 a
[17:02:42.369]             }))
[17:02:42.369]             future::FutureResult(value = ...future.value$value, 
[17:02:42.369]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.369]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.369]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.369]                     ...future.globalenv.names))
[17:02:42.369]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.369]         }, condition = base::local({
[17:02:42.369]             c <- base::c
[17:02:42.369]             inherits <- base::inherits
[17:02:42.369]             invokeRestart <- base::invokeRestart
[17:02:42.369]             length <- base::length
[17:02:42.369]             list <- base::list
[17:02:42.369]             seq.int <- base::seq.int
[17:02:42.369]             signalCondition <- base::signalCondition
[17:02:42.369]             sys.calls <- base::sys.calls
[17:02:42.369]             `[[` <- base::`[[`
[17:02:42.369]             `+` <- base::`+`
[17:02:42.369]             `<<-` <- base::`<<-`
[17:02:42.369]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.369]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.369]                   3L)]
[17:02:42.369]             }
[17:02:42.369]             function(cond) {
[17:02:42.369]                 is_error <- inherits(cond, "error")
[17:02:42.369]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.369]                   NULL)
[17:02:42.369]                 if (is_error) {
[17:02:42.369]                   sessionInformation <- function() {
[17:02:42.369]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.369]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.369]                       search = base::search(), system = base::Sys.info())
[17:02:42.369]                   }
[17:02:42.369]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.369]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.369]                     cond$call), session = sessionInformation(), 
[17:02:42.369]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.369]                   signalCondition(cond)
[17:02:42.369]                 }
[17:02:42.369]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.369]                 "immediateCondition"))) {
[17:02:42.369]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.369]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.369]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.369]                   if (TRUE && !signal) {
[17:02:42.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.369]                     {
[17:02:42.369]                       inherits <- base::inherits
[17:02:42.369]                       invokeRestart <- base::invokeRestart
[17:02:42.369]                       is.null <- base::is.null
[17:02:42.369]                       muffled <- FALSE
[17:02:42.369]                       if (inherits(cond, "message")) {
[17:02:42.369]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.369]                         if (muffled) 
[17:02:42.369]                           invokeRestart("muffleMessage")
[17:02:42.369]                       }
[17:02:42.369]                       else if (inherits(cond, "warning")) {
[17:02:42.369]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.369]                         if (muffled) 
[17:02:42.369]                           invokeRestart("muffleWarning")
[17:02:42.369]                       }
[17:02:42.369]                       else if (inherits(cond, "condition")) {
[17:02:42.369]                         if (!is.null(pattern)) {
[17:02:42.369]                           computeRestarts <- base::computeRestarts
[17:02:42.369]                           grepl <- base::grepl
[17:02:42.369]                           restarts <- computeRestarts(cond)
[17:02:42.369]                           for (restart in restarts) {
[17:02:42.369]                             name <- restart$name
[17:02:42.369]                             if (is.null(name)) 
[17:02:42.369]                               next
[17:02:42.369]                             if (!grepl(pattern, name)) 
[17:02:42.369]                               next
[17:02:42.369]                             invokeRestart(restart)
[17:02:42.369]                             muffled <- TRUE
[17:02:42.369]                             break
[17:02:42.369]                           }
[17:02:42.369]                         }
[17:02:42.369]                       }
[17:02:42.369]                       invisible(muffled)
[17:02:42.369]                     }
[17:02:42.369]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.369]                   }
[17:02:42.369]                 }
[17:02:42.369]                 else {
[17:02:42.369]                   if (TRUE) {
[17:02:42.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.369]                     {
[17:02:42.369]                       inherits <- base::inherits
[17:02:42.369]                       invokeRestart <- base::invokeRestart
[17:02:42.369]                       is.null <- base::is.null
[17:02:42.369]                       muffled <- FALSE
[17:02:42.369]                       if (inherits(cond, "message")) {
[17:02:42.369]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.369]                         if (muffled) 
[17:02:42.369]                           invokeRestart("muffleMessage")
[17:02:42.369]                       }
[17:02:42.369]                       else if (inherits(cond, "warning")) {
[17:02:42.369]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.369]                         if (muffled) 
[17:02:42.369]                           invokeRestart("muffleWarning")
[17:02:42.369]                       }
[17:02:42.369]                       else if (inherits(cond, "condition")) {
[17:02:42.369]                         if (!is.null(pattern)) {
[17:02:42.369]                           computeRestarts <- base::computeRestarts
[17:02:42.369]                           grepl <- base::grepl
[17:02:42.369]                           restarts <- computeRestarts(cond)
[17:02:42.369]                           for (restart in restarts) {
[17:02:42.369]                             name <- restart$name
[17:02:42.369]                             if (is.null(name)) 
[17:02:42.369]                               next
[17:02:42.369]                             if (!grepl(pattern, name)) 
[17:02:42.369]                               next
[17:02:42.369]                             invokeRestart(restart)
[17:02:42.369]                             muffled <- TRUE
[17:02:42.369]                             break
[17:02:42.369]                           }
[17:02:42.369]                         }
[17:02:42.369]                       }
[17:02:42.369]                       invisible(muffled)
[17:02:42.369]                     }
[17:02:42.369]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.369]                   }
[17:02:42.369]                 }
[17:02:42.369]             }
[17:02:42.369]         }))
[17:02:42.369]     }, error = function(ex) {
[17:02:42.369]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.369]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.369]                 ...future.rng), started = ...future.startTime, 
[17:02:42.369]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.369]             version = "1.8"), class = "FutureResult")
[17:02:42.369]     }, finally = {
[17:02:42.369]         if (!identical(...future.workdir, getwd())) 
[17:02:42.369]             setwd(...future.workdir)
[17:02:42.369]         {
[17:02:42.369]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.369]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.369]             }
[17:02:42.369]             base::options(...future.oldOptions)
[17:02:42.369]             if (.Platform$OS.type == "windows") {
[17:02:42.369]                 old_names <- names(...future.oldEnvVars)
[17:02:42.369]                 envs <- base::Sys.getenv()
[17:02:42.369]                 names <- names(envs)
[17:02:42.369]                 common <- intersect(names, old_names)
[17:02:42.369]                 added <- setdiff(names, old_names)
[17:02:42.369]                 removed <- setdiff(old_names, names)
[17:02:42.369]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.369]                   envs[common]]
[17:02:42.369]                 NAMES <- toupper(changed)
[17:02:42.369]                 args <- list()
[17:02:42.369]                 for (kk in seq_along(NAMES)) {
[17:02:42.369]                   name <- changed[[kk]]
[17:02:42.369]                   NAME <- NAMES[[kk]]
[17:02:42.369]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.369]                     next
[17:02:42.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.369]                 }
[17:02:42.369]                 NAMES <- toupper(added)
[17:02:42.369]                 for (kk in seq_along(NAMES)) {
[17:02:42.369]                   name <- added[[kk]]
[17:02:42.369]                   NAME <- NAMES[[kk]]
[17:02:42.369]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.369]                     next
[17:02:42.369]                   args[[name]] <- ""
[17:02:42.369]                 }
[17:02:42.369]                 NAMES <- toupper(removed)
[17:02:42.369]                 for (kk in seq_along(NAMES)) {
[17:02:42.369]                   name <- removed[[kk]]
[17:02:42.369]                   NAME <- NAMES[[kk]]
[17:02:42.369]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.369]                     next
[17:02:42.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.369]                 }
[17:02:42.369]                 if (length(args) > 0) 
[17:02:42.369]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.369]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.369]             }
[17:02:42.369]             else {
[17:02:42.369]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.369]             }
[17:02:42.369]             {
[17:02:42.369]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.369]                   0L) {
[17:02:42.369]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.369]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.369]                   base::options(opts)
[17:02:42.369]                 }
[17:02:42.369]                 {
[17:02:42.369]                   {
[17:02:42.369]                     NULL
[17:02:42.369]                     RNGkind("Mersenne-Twister")
[17:02:42.369]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:42.369]                       inherits = FALSE)
[17:02:42.369]                   }
[17:02:42.369]                   options(future.plan = NULL)
[17:02:42.369]                   if (is.na(NA_character_)) 
[17:02:42.369]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.369]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.369]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.369]                     .init = FALSE)
[17:02:42.369]                 }
[17:02:42.369]             }
[17:02:42.369]         }
[17:02:42.369]     })
[17:02:42.369]     if (TRUE) {
[17:02:42.369]         base::sink(type = "output", split = FALSE)
[17:02:42.369]         if (TRUE) {
[17:02:42.369]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.369]         }
[17:02:42.369]         else {
[17:02:42.369]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.369]         }
[17:02:42.369]         base::close(...future.stdout)
[17:02:42.369]         ...future.stdout <- NULL
[17:02:42.369]     }
[17:02:42.369]     ...future.result$conditions <- ...future.conditions
[17:02:42.369]     ...future.result$finished <- base::Sys.time()
[17:02:42.369]     ...future.result
[17:02:42.369] }
[17:02:42.370] assign_globals() ...
[17:02:42.371] List of 1
[17:02:42.371]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:42.371]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:42.371]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:42.371]  - attr(*, "where")=List of 1
[17:02:42.371]   ..$ data:<environment: R_EmptyEnv> 
[17:02:42.371]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:42.371]  - attr(*, "resolved")= logi FALSE
[17:02:42.371]  - attr(*, "total_size")= num 160
[17:02:42.371]  - attr(*, "already-done")= logi TRUE
[17:02:42.374] - copied ‘data’ to environment
[17:02:42.374] assign_globals() ... done
[17:02:42.374] plan(): Setting new future strategy stack:
[17:02:42.374] List of future strategies:
[17:02:42.374] 1. sequential:
[17:02:42.374]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.374]    - tweaked: FALSE
[17:02:42.374]    - call: plan(list(sequential, strategy))
[17:02:42.375] plan(): nbrOfWorkers() = 1
[17:02:42.408] plan(): Setting new future strategy stack:
[17:02:42.408] List of future strategies:
[17:02:42.408] 1. sequential:
[17:02:42.408]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.408]    - tweaked: FALSE
[17:02:42.408]    - call: plan(list(sequential, strategy))
[17:02:42.408] 2. sequential:
[17:02:42.408]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.408]    - tweaked: FALSE
[17:02:42.408]    - call: plan(list(sequential, strategy))
[17:02:42.408] plan(): nbrOfWorkers() = 1
[17:02:42.409] SequentialFuture started (and completed)
[17:02:42.409] signalConditions() ...
[17:02:42.409]  - include = ‘immediateCondition’
[17:02:42.409]  - exclude = 
[17:02:42.409]  - resignal = FALSE
[17:02:42.409]  - Number of conditions: 53
[17:02:42.409] signalConditions() ... done
[17:02:42.409] - Launch lazy future ... done
[17:02:42.409] run() for ‘SequentialFuture’ ... done
[17:02:42.410] signalConditions() ...
[17:02:42.410]  - include = ‘immediateCondition’
[17:02:42.410]  - exclude = 
[17:02:42.410]  - resignal = FALSE
[17:02:42.410]  - Number of conditions: 53
[17:02:42.410] signalConditions() ... done
[17:02:42.410] Future state: ‘finished’
[17:02:42.410] signalConditions() ...
[17:02:42.410]  - include = ‘condition’
[17:02:42.410]  - exclude = ‘immediateCondition’
[17:02:42.411]  - resignal = TRUE
[17:02:42.411]  - Number of conditions: 53
[17:02:42.411]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.375] getGlobalsAndPackages() ...
[17:02:42.411]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.411]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.391] Searching for globals...
[17:02:42.411]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.392] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:02:42.411]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.392] Searching for globals ... DONE
[17:02:42.411]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.392] Resolving globals: FALSE
[17:02:42.412]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.393] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:42.412]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.393] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:42.412]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.393] - globals: [1] ‘data’
[17:02:42.412]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.393] 
[17:02:42.412]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.394] getGlobalsAndPackages() ... DONE
[17:02:42.412]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.394] run() for ‘Future’ ...
[17:02:42.412]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.394] - state: ‘created’
[17:02:42.412]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.394] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:42.413]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.394] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:42.413]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:42.413]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘label’
[17:02:42.413]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘local’
[17:02:42.413]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘owner’
[17:02:42.413]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘envir’
[17:02:42.413]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘packages’
[17:02:42.413]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘gc’
[17:02:42.414]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘conditions’
[17:02:42.414]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.395]   - Field: ‘expr’
[17:02:42.414]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘uuid’
[17:02:42.414]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘seed’
[17:02:42.414]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘version’
[17:02:42.414]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘result’
[17:02:42.414]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘asynchronous’
[17:02:42.415]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘calls’
[17:02:42.415]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘globals’
[17:02:42.415]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘stdout’
[17:02:42.415]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘earlySignal’
[17:02:42.415]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.396]   - Field: ‘lazy’
[17:02:42.415]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.397]   - Field: ‘state’
[17:02:42.415]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.397] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:42.415]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.397] - Launch lazy future ...
[17:02:42.416]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.397] Packages needed by the future expression (n = 0): <none>
[17:02:42.416]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.397] Packages needed by future strategies (n = 0): <none>
[17:02:42.416]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.398] {
[17:02:42.398]     {
[17:02:42.398]         {
[17:02:42.398]             ...future.startTime <- base::Sys.time()
[17:02:42.398]             {
[17:02:42.398]                 {
[17:02:42.398]                   {
[17:02:42.398]                     base::local({
[17:02:42.398]                       has_future <- base::requireNamespace("future", 
[17:02:42.398]                         quietly = TRUE)
[17:02:42.398]                       if (has_future) {
[17:02:42.398]                         ns <- base::getNamespace("future")
[17:02:42.398]                         version <- ns[[".package"]][["version"]]
[17:02:42.398]                         if (is.null(version)) 
[17:02:42.398]                           version <- utils::packageVersion("future")
[17:02:42.398]                       }
[17:02:42.398]                       else {
[17:02:42.398]                         version <- NULL
[17:02:42.398]                       }
[17:02:42.398]                       if (!has_future || version < "1.8.0") {
[17:02:42.398]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.398]                           "", base::R.version$version.string), 
[17:02:42.398]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:42.398]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.398]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.398]                             "release", "version")], collapse = " "), 
[17:02:42.398]                           hostname = base::Sys.info()[["nodename"]])
[17:02:42.398]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.398]                           info)
[17:02:42.398]                         info <- base::paste(info, collapse = "; ")
[17:02:42.398]                         if (!has_future) {
[17:02:42.398]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.398]                             info)
[17:02:42.398]                         }
[17:02:42.398]                         else {
[17:02:42.398]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.398]                             info, version)
[17:02:42.398]                         }
[17:02:42.398]                         base::stop(msg)
[17:02:42.398]                       }
[17:02:42.398]                     })
[17:02:42.398]                   }
[17:02:42.398]                   ...future.strategy.old <- future::plan("list")
[17:02:42.398]                   options(future.plan = NULL)
[17:02:42.398]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.398]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.398]                 }
[17:02:42.398]                 ...future.workdir <- getwd()
[17:02:42.398]             }
[17:02:42.398]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.398]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.398]         }
[17:02:42.398]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.398]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.398]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.398]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.398]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.398]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.398]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.398]             base::names(...future.oldOptions))
[17:02:42.398]     }
[17:02:42.398]     if (FALSE) {
[17:02:42.398]     }
[17:02:42.398]     else {
[17:02:42.398]         if (TRUE) {
[17:02:42.398]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.398]                 open = "w")
[17:02:42.398]         }
[17:02:42.398]         else {
[17:02:42.398]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.398]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.398]         }
[17:02:42.398]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.398]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.398]             base::sink(type = "output", split = FALSE)
[17:02:42.398]             base::close(...future.stdout)
[17:02:42.398]         }, add = TRUE)
[17:02:42.398]     }
[17:02:42.398]     ...future.frame <- base::sys.nframe()
[17:02:42.398]     ...future.conditions <- base::list()
[17:02:42.398]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.398]     if (FALSE) {
[17:02:42.398]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.398]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.398]     }
[17:02:42.398]     ...future.result <- base::tryCatch({
[17:02:42.398]         base::withCallingHandlers({
[17:02:42.398]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:02:42.398]                 x < 3)$y))
[17:02:42.398]             future::FutureResult(value = ...future.value$value, 
[17:02:42.398]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.398]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.398]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.398]                     ...future.globalenv.names))
[17:02:42.398]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.398]         }, condition = base::local({
[17:02:42.398]             c <- base::c
[17:02:42.398]             inherits <- base::inherits
[17:02:42.398]             invokeRestart <- base::invokeRestart
[17:02:42.398]             length <- base::length
[17:02:42.398]             list <- base::list
[17:02:42.398]             seq.int <- base::seq.int
[17:02:42.398]             signalCondition <- base::signalCondition
[17:02:42.398]             sys.calls <- base::sys.calls
[17:02:42.398]             `[[` <- base::`[[`
[17:02:42.398]             `+` <- base::`+`
[17:02:42.398]             `<<-` <- base::`<<-`
[17:02:42.398]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.398]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.398]                   3L)]
[17:02:42.398]             }
[17:02:42.398]             function(cond) {
[17:02:42.398]                 is_error <- inherits(cond, "error")
[17:02:42.398]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.398]                   NULL)
[17:02:42.398]                 if (is_error) {
[17:02:42.398]                   sessionInformation <- function() {
[17:02:42.398]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.398]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.398]                       search = base::search(), system = base::Sys.info())
[17:02:42.398]                   }
[17:02:42.398]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.398]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.398]                     cond$call), session = sessionInformation(), 
[17:02:42.398]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.398]                   signalCondition(cond)
[17:02:42.398]                 }
[17:02:42.398]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.398]                 "immediateCondition"))) {
[17:02:42.398]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.398]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.398]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.398]                   if (TRUE && !signal) {
[17:02:42.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.398]                     {
[17:02:42.398]                       inherits <- base::inherits
[17:02:42.398]                       invokeRestart <- base::invokeRestart
[17:02:42.398]                       is.null <- base::is.null
[17:02:42.398]                       muffled <- FALSE
[17:02:42.398]                       if (inherits(cond, "message")) {
[17:02:42.398]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.398]                         if (muffled) 
[17:02:42.398]                           invokeRestart("muffleMessage")
[17:02:42.398]                       }
[17:02:42.398]                       else if (inherits(cond, "warning")) {
[17:02:42.398]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.398]                         if (muffled) 
[17:02:42.398]                           invokeRestart("muffleWarning")
[17:02:42.398]                       }
[17:02:42.398]                       else if (inherits(cond, "condition")) {
[17:02:42.398]                         if (!is.null(pattern)) {
[17:02:42.398]                           computeRestarts <- base::computeRestarts
[17:02:42.398]                           grepl <- base::grepl
[17:02:42.398]                           restarts <- computeRestarts(cond)
[17:02:42.398]                           for (restart in restarts) {
[17:02:42.398]                             name <- restart$name
[17:02:42.398]                             if (is.null(name)) 
[17:02:42.398]                               next
[17:02:42.398]                             if (!grepl(pattern, name)) 
[17:02:42.398]                               next
[17:02:42.398]                             invokeRestart(restart)
[17:02:42.398]                             muffled <- TRUE
[17:02:42.398]                             break
[17:02:42.398]                           }
[17:02:42.398]                         }
[17:02:42.398]                       }
[17:02:42.398]                       invisible(muffled)
[17:02:42.398]                     }
[17:02:42.398]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.398]                   }
[17:02:42.398]                 }
[17:02:42.398]                 else {
[17:02:42.398]                   if (TRUE) {
[17:02:42.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.398]                     {
[17:02:42.398]                       inherits <- base::inherits
[17:02:42.398]                       invokeRestart <- base::invokeRestart
[17:02:42.398]                       is.null <- base::is.null
[17:02:42.398]                       muffled <- FALSE
[17:02:42.398]                       if (inherits(cond, "message")) {
[17:02:42.398]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.398]                         if (muffled) 
[17:02:42.398]                           invokeRestart("muffleMessage")
[17:02:42.398]                       }
[17:02:42.398]                       else if (inherits(cond, "warning")) {
[17:02:42.398]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.398]                         if (muffled) 
[17:02:42.398]                           invokeRestart("muffleWarning")
[17:02:42.398]                       }
[17:02:42.398]                       else if (inherits(cond, "condition")) {
[17:02:42.398]                         if (!is.null(pattern)) {
[17:02:42.398]                           computeRestarts <- base::computeRestarts
[17:02:42.398]                           grepl <- base::grepl
[17:02:42.398]                           restarts <- computeRestarts(cond)
[17:02:42.398]                           for (restart in restarts) {
[17:02:42.398]                             name <- restart$name
[17:02:42.398]                             if (is.null(name)) 
[17:02:42.398]                               next
[17:02:42.398]                             if (!grepl(pattern, name)) 
[17:02:42.398]                               next
[17:02:42.398]                             invokeRestart(restart)
[17:02:42.398]                             muffled <- TRUE
[17:02:42.398]                             break
[17:02:42.398]                           }
[17:02:42.398]                         }
[17:02:42.398]                       }
[17:02:42.398]                       invisible(muffled)
[17:02:42.398]                     }
[17:02:42.398]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.398]                   }
[17:02:42.398]                 }
[17:02:42.398]             }
[17:02:42.398]         }))
[17:02:42.398]     }, error = function(ex) {
[17:02:42.398]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.398]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.398]                 ...future.rng), started = ...future.startTime, 
[17:02:42.398]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.398]             version = "1.8"), class = "FutureResult")
[17:02:42.398]     }, finally = {
[17:02:42.398]         if (!identical(...future.workdir, getwd())) 
[17:02:42.398]             setwd(...future.workdir)
[17:02:42.398]         {
[17:02:42.398]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.398]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.398]             }
[17:02:42.398]             base::options(...future.oldOptions)
[17:02:42.398]             if (.Platform$OS.type == "windows") {
[17:02:42.398]                 old_names <- names(...future.oldEnvVars)
[17:02:42.398]                 envs <- base::Sys.getenv()
[17:02:42.398]                 names <- names(envs)
[17:02:42.398]                 common <- intersect(names, old_names)
[17:02:42.398]                 added <- setdiff(names, old_names)
[17:02:42.398]                 removed <- setdiff(old_names, names)
[17:02:42.398]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.398]                   envs[common]]
[17:02:42.398]                 NAMES <- toupper(changed)
[17:02:42.398]                 args <- list()
[17:02:42.398]                 for (kk in seq_along(NAMES)) {
[17:02:42.398]                   name <- changed[[kk]]
[17:02:42.398]                   NAME <- NAMES[[kk]]
[17:02:42.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.398]                     next
[17:02:42.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.398]                 }
[17:02:42.398]                 NAMES <- toupper(added)
[17:02:42.398]                 for (kk in seq_along(NAMES)) {
[17:02:42.398]                   name <- added[[kk]]
[17:02:42.398]                   NAME <- NAMES[[kk]]
[17:02:42.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.398]                     next
[17:02:42.398]                   args[[name]] <- ""
[17:02:42.398]                 }
[17:02:42.398]                 NAMES <- toupper(removed)
[17:02:42.398]                 for (kk in seq_along(NAMES)) {
[17:02:42.398]                   name <- removed[[kk]]
[17:02:42.398]                   NAME <- NAMES[[kk]]
[17:02:42.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.398]                     next
[17:02:42.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.398]                 }
[17:02:42.398]                 if (length(args) > 0) 
[17:02:42.398]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.398]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.398]             }
[17:02:42.398]             else {
[17:02:42.398]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.398]             }
[17:02:42.398]             {
[17:02:42.398]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.398]                   0L) {
[17:02:42.398]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.398]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.398]                   base::options(opts)
[17:02:42.398]                 }
[17:02:42.398]                 {
[17:02:42.398]                   {
[17:02:42.398]                     NULL
[17:02:42.398]                     RNGkind("Mersenne-Twister")
[17:02:42.398]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:42.398]                       inherits = FALSE)
[17:02:42.398]                   }
[17:02:42.398]                   options(future.plan = NULL)
[17:02:42.398]                   if (is.na(NA_character_)) 
[17:02:42.398]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.398]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.398]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.398]                     .init = FALSE)
[17:02:42.398]                 }
[17:02:42.398]             }
[17:02:42.398]         }
[17:02:42.398]     })
[17:02:42.398]     if (TRUE) {
[17:02:42.398]         base::sink(type = "output", split = FALSE)
[17:02:42.398]         if (TRUE) {
[17:02:42.398]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.398]         }
[17:02:42.398]         else {
[17:02:42.398]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.398]         }
[17:02:42.398]         base::close(...future.stdout)
[17:02:42.398]         ...future.stdout <- NULL
[17:02:42.398]     }
[17:02:42.398]     ...future.result$conditions <- ...future.conditions
[17:02:42.398]     ...future.result$finished <- base::Sys.time()
[17:02:42.398]     ...future.result
[17:02:42.398] }
[17:02:42.416]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.399] assign_globals() ...
[17:02:42.416]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.399] List of 1
[17:02:42.399]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:42.399]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:42.399]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:42.399]  - attr(*, "where")=List of 1
[17:02:42.399]   ..$ data:<environment: R_EmptyEnv> 
[17:02:42.399]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:42.399]  - attr(*, "resolved")= logi FALSE
[17:02:42.399]  - attr(*, "total_size")= num 160
[17:02:42.399]  - attr(*, "already-done")= logi TRUE
[17:02:42.416]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.404] - copied ‘data’ to environment
[17:02:42.416]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.404] assign_globals() ... done
[17:02:42.416]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.405] plan(): Setting new future strategy stack:
[17:02:42.417]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.405] List of future strategies:
[17:02:42.405] 1. sequential:
[17:02:42.405]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.405]    - tweaked: FALSE
[17:02:42.405]    - call: NULL
[17:02:42.417]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.405] plan(): nbrOfWorkers() = 1
[17:02:42.417]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.406] plan(): Setting new future strategy stack:
[17:02:42.417]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.406] List of future strategies:
[17:02:42.406] 1. sequential:
[17:02:42.406]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.406]    - tweaked: FALSE
[17:02:42.406]    - call: plan(list(sequential, strategy))
[17:02:42.417]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.407] plan(): nbrOfWorkers() = 1
[17:02:42.417]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.407] SequentialFuture started (and completed)
[17:02:42.417]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.407] - Launch lazy future ... done
[17:02:42.418]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.407] run() for ‘SequentialFuture’ ... done
[17:02:42.418] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[17:02:42.418] plan(): Setting new future strategy stack:
[17:02:42.418] List of future strategies:
[17:02:42.418] 1. multicore:
[17:02:42.418]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.418]    - tweaked: FALSE
[17:02:42.418]    - call: plan(strategy)
[17:02:42.422] plan(): nbrOfWorkers() = 2
[17:02:42.422] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:02:42.423] Searching for globals...
[17:02:42.423] - globals found: [1] ‘getOption’
[17:02:42.423] Searching for globals ... DONE
[17:02:42.424] Resolving globals: FALSE
[17:02:42.424] 
[17:02:42.424] 
[17:02:42.424] getGlobalsAndPackages() ... DONE
[17:02:42.424] run() for ‘Future’ ...
[17:02:42.424] - state: ‘created’
[17:02:42.424] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:42.428] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:42.428] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:42.428]   - Field: ‘label’
[17:02:42.429]   - Field: ‘local’
[17:02:42.429]   - Field: ‘owner’
[17:02:42.429]   - Field: ‘envir’
[17:02:42.429]   - Field: ‘workers’
[17:02:42.429]   - Field: ‘packages’
[17:02:42.429]   - Field: ‘gc’
[17:02:42.429]   - Field: ‘job’
[17:02:42.429]   - Field: ‘conditions’
[17:02:42.429]   - Field: ‘expr’
[17:02:42.429]   - Field: ‘uuid’
[17:02:42.430]   - Field: ‘seed’
[17:02:42.430]   - Field: ‘version’
[17:02:42.430]   - Field: ‘result’
[17:02:42.430]   - Field: ‘asynchronous’
[17:02:42.430]   - Field: ‘calls’
[17:02:42.430]   - Field: ‘globals’
[17:02:42.430]   - Field: ‘stdout’
[17:02:42.430]   - Field: ‘earlySignal’
[17:02:42.430]   - Field: ‘lazy’
[17:02:42.430]   - Field: ‘state’
[17:02:42.430] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:42.431] - Launch lazy future ...
[17:02:42.432] Packages needed by the future expression (n = 0): <none>
[17:02:42.432] Packages needed by future strategies (n = 0): <none>
[17:02:42.432] {
[17:02:42.432]     {
[17:02:42.432]         {
[17:02:42.432]             ...future.startTime <- base::Sys.time()
[17:02:42.432]             {
[17:02:42.432]                 {
[17:02:42.432]                   {
[17:02:42.432]                     {
[17:02:42.432]                       base::local({
[17:02:42.432]                         has_future <- base::requireNamespace("future", 
[17:02:42.432]                           quietly = TRUE)
[17:02:42.432]                         if (has_future) {
[17:02:42.432]                           ns <- base::getNamespace("future")
[17:02:42.432]                           version <- ns[[".package"]][["version"]]
[17:02:42.432]                           if (is.null(version)) 
[17:02:42.432]                             version <- utils::packageVersion("future")
[17:02:42.432]                         }
[17:02:42.432]                         else {
[17:02:42.432]                           version <- NULL
[17:02:42.432]                         }
[17:02:42.432]                         if (!has_future || version < "1.8.0") {
[17:02:42.432]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.432]                             "", base::R.version$version.string), 
[17:02:42.432]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:42.432]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.432]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.432]                               "release", "version")], collapse = " "), 
[17:02:42.432]                             hostname = base::Sys.info()[["nodename"]])
[17:02:42.432]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.432]                             info)
[17:02:42.432]                           info <- base::paste(info, collapse = "; ")
[17:02:42.432]                           if (!has_future) {
[17:02:42.432]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.432]                               info)
[17:02:42.432]                           }
[17:02:42.432]                           else {
[17:02:42.432]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.432]                               info, version)
[17:02:42.432]                           }
[17:02:42.432]                           base::stop(msg)
[17:02:42.432]                         }
[17:02:42.432]                       })
[17:02:42.432]                     }
[17:02:42.432]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:42.432]                     base::options(mc.cores = 1L)
[17:02:42.432]                   }
[17:02:42.432]                   ...future.strategy.old <- future::plan("list")
[17:02:42.432]                   options(future.plan = NULL)
[17:02:42.432]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.432]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.432]                 }
[17:02:42.432]                 ...future.workdir <- getwd()
[17:02:42.432]             }
[17:02:42.432]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.432]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.432]         }
[17:02:42.432]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:02:42.432]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.432]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:02:42.432]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.432]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.432]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.432]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.432]             base::names(...future.oldOptions))
[17:02:42.432]     }
[17:02:42.432]     if (FALSE) {
[17:02:42.432]     }
[17:02:42.432]     else {
[17:02:42.432]         if (TRUE) {
[17:02:42.432]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.432]                 open = "w")
[17:02:42.432]         }
[17:02:42.432]         else {
[17:02:42.432]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.432]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.432]         }
[17:02:42.432]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.432]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.432]             base::sink(type = "output", split = FALSE)
[17:02:42.432]             base::close(...future.stdout)
[17:02:42.432]         }, add = TRUE)
[17:02:42.432]     }
[17:02:42.432]     ...future.frame <- base::sys.nframe()
[17:02:42.432]     ...future.conditions <- base::list()
[17:02:42.432]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.432]     if (FALSE) {
[17:02:42.432]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.432]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.432]     }
[17:02:42.432]     ...future.result <- base::tryCatch({
[17:02:42.432]         base::withCallingHandlers({
[17:02:42.432]             ...future.value <- base::withVisible(base::local({
[17:02:42.432]                 withCallingHandlers({
[17:02:42.432]                   getOption("future.globals.onMissing")
[17:02:42.432]                 }, immediateCondition = function(cond) {
[17:02:42.432]                   save_rds <- function (object, pathname, ...) 
[17:02:42.432]                   {
[17:02:42.432]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:42.432]                     if (file_test("-f", pathname_tmp)) {
[17:02:42.432]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.432]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:42.432]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.432]                         fi_tmp[["mtime"]])
[17:02:42.432]                     }
[17:02:42.432]                     tryCatch({
[17:02:42.432]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:42.432]                     }, error = function(ex) {
[17:02:42.432]                       msg <- conditionMessage(ex)
[17:02:42.432]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.432]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:42.432]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.432]                         fi_tmp[["mtime"]], msg)
[17:02:42.432]                       ex$message <- msg
[17:02:42.432]                       stop(ex)
[17:02:42.432]                     })
[17:02:42.432]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:42.432]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:42.432]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:42.432]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.432]                       fi <- file.info(pathname)
[17:02:42.432]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:42.432]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.432]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:42.432]                         fi[["size"]], fi[["mtime"]])
[17:02:42.432]                       stop(msg)
[17:02:42.432]                     }
[17:02:42.432]                     invisible(pathname)
[17:02:42.432]                   }
[17:02:42.432]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:42.432]                     rootPath = tempdir()) 
[17:02:42.432]                   {
[17:02:42.432]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:42.432]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:42.432]                       tmpdir = path, fileext = ".rds")
[17:02:42.432]                     save_rds(obj, file)
[17:02:42.432]                   }
[17:02:42.432]                   saveImmediateCondition(cond, path = "/tmp/RtmpkGmVuW/.future/immediateConditions")
[17:02:42.432]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.432]                   {
[17:02:42.432]                     inherits <- base::inherits
[17:02:42.432]                     invokeRestart <- base::invokeRestart
[17:02:42.432]                     is.null <- base::is.null
[17:02:42.432]                     muffled <- FALSE
[17:02:42.432]                     if (inherits(cond, "message")) {
[17:02:42.432]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:42.432]                       if (muffled) 
[17:02:42.432]                         invokeRestart("muffleMessage")
[17:02:42.432]                     }
[17:02:42.432]                     else if (inherits(cond, "warning")) {
[17:02:42.432]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:42.432]                       if (muffled) 
[17:02:42.432]                         invokeRestart("muffleWarning")
[17:02:42.432]                     }
[17:02:42.432]                     else if (inherits(cond, "condition")) {
[17:02:42.432]                       if (!is.null(pattern)) {
[17:02:42.432]                         computeRestarts <- base::computeRestarts
[17:02:42.432]                         grepl <- base::grepl
[17:02:42.432]                         restarts <- computeRestarts(cond)
[17:02:42.432]                         for (restart in restarts) {
[17:02:42.432]                           name <- restart$name
[17:02:42.432]                           if (is.null(name)) 
[17:02:42.432]                             next
[17:02:42.432]                           if (!grepl(pattern, name)) 
[17:02:42.432]                             next
[17:02:42.432]                           invokeRestart(restart)
[17:02:42.432]                           muffled <- TRUE
[17:02:42.432]                           break
[17:02:42.432]                         }
[17:02:42.432]                       }
[17:02:42.432]                     }
[17:02:42.432]                     invisible(muffled)
[17:02:42.432]                   }
[17:02:42.432]                   muffleCondition(cond)
[17:02:42.432]                 })
[17:02:42.432]             }))
[17:02:42.432]             future::FutureResult(value = ...future.value$value, 
[17:02:42.432]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.432]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.432]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.432]                     ...future.globalenv.names))
[17:02:42.432]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.432]         }, condition = base::local({
[17:02:42.432]             c <- base::c
[17:02:42.432]             inherits <- base::inherits
[17:02:42.432]             invokeRestart <- base::invokeRestart
[17:02:42.432]             length <- base::length
[17:02:42.432]             list <- base::list
[17:02:42.432]             seq.int <- base::seq.int
[17:02:42.432]             signalCondition <- base::signalCondition
[17:02:42.432]             sys.calls <- base::sys.calls
[17:02:42.432]             `[[` <- base::`[[`
[17:02:42.432]             `+` <- base::`+`
[17:02:42.432]             `<<-` <- base::`<<-`
[17:02:42.432]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.432]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.432]                   3L)]
[17:02:42.432]             }
[17:02:42.432]             function(cond) {
[17:02:42.432]                 is_error <- inherits(cond, "error")
[17:02:42.432]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.432]                   NULL)
[17:02:42.432]                 if (is_error) {
[17:02:42.432]                   sessionInformation <- function() {
[17:02:42.432]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.432]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.432]                       search = base::search(), system = base::Sys.info())
[17:02:42.432]                   }
[17:02:42.432]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.432]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.432]                     cond$call), session = sessionInformation(), 
[17:02:42.432]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.432]                   signalCondition(cond)
[17:02:42.432]                 }
[17:02:42.432]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.432]                 "immediateCondition"))) {
[17:02:42.432]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.432]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.432]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.432]                   if (TRUE && !signal) {
[17:02:42.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.432]                     {
[17:02:42.432]                       inherits <- base::inherits
[17:02:42.432]                       invokeRestart <- base::invokeRestart
[17:02:42.432]                       is.null <- base::is.null
[17:02:42.432]                       muffled <- FALSE
[17:02:42.432]                       if (inherits(cond, "message")) {
[17:02:42.432]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.432]                         if (muffled) 
[17:02:42.432]                           invokeRestart("muffleMessage")
[17:02:42.432]                       }
[17:02:42.432]                       else if (inherits(cond, "warning")) {
[17:02:42.432]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.432]                         if (muffled) 
[17:02:42.432]                           invokeRestart("muffleWarning")
[17:02:42.432]                       }
[17:02:42.432]                       else if (inherits(cond, "condition")) {
[17:02:42.432]                         if (!is.null(pattern)) {
[17:02:42.432]                           computeRestarts <- base::computeRestarts
[17:02:42.432]                           grepl <- base::grepl
[17:02:42.432]                           restarts <- computeRestarts(cond)
[17:02:42.432]                           for (restart in restarts) {
[17:02:42.432]                             name <- restart$name
[17:02:42.432]                             if (is.null(name)) 
[17:02:42.432]                               next
[17:02:42.432]                             if (!grepl(pattern, name)) 
[17:02:42.432]                               next
[17:02:42.432]                             invokeRestart(restart)
[17:02:42.432]                             muffled <- TRUE
[17:02:42.432]                             break
[17:02:42.432]                           }
[17:02:42.432]                         }
[17:02:42.432]                       }
[17:02:42.432]                       invisible(muffled)
[17:02:42.432]                     }
[17:02:42.432]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.432]                   }
[17:02:42.432]                 }
[17:02:42.432]                 else {
[17:02:42.432]                   if (TRUE) {
[17:02:42.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.432]                     {
[17:02:42.432]                       inherits <- base::inherits
[17:02:42.432]                       invokeRestart <- base::invokeRestart
[17:02:42.432]                       is.null <- base::is.null
[17:02:42.432]                       muffled <- FALSE
[17:02:42.432]                       if (inherits(cond, "message")) {
[17:02:42.432]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.432]                         if (muffled) 
[17:02:42.432]                           invokeRestart("muffleMessage")
[17:02:42.432]                       }
[17:02:42.432]                       else if (inherits(cond, "warning")) {
[17:02:42.432]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.432]                         if (muffled) 
[17:02:42.432]                           invokeRestart("muffleWarning")
[17:02:42.432]                       }
[17:02:42.432]                       else if (inherits(cond, "condition")) {
[17:02:42.432]                         if (!is.null(pattern)) {
[17:02:42.432]                           computeRestarts <- base::computeRestarts
[17:02:42.432]                           grepl <- base::grepl
[17:02:42.432]                           restarts <- computeRestarts(cond)
[17:02:42.432]                           for (restart in restarts) {
[17:02:42.432]                             name <- restart$name
[17:02:42.432]                             if (is.null(name)) 
[17:02:42.432]                               next
[17:02:42.432]                             if (!grepl(pattern, name)) 
[17:02:42.432]                               next
[17:02:42.432]                             invokeRestart(restart)
[17:02:42.432]                             muffled <- TRUE
[17:02:42.432]                             break
[17:02:42.432]                           }
[17:02:42.432]                         }
[17:02:42.432]                       }
[17:02:42.432]                       invisible(muffled)
[17:02:42.432]                     }
[17:02:42.432]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.432]                   }
[17:02:42.432]                 }
[17:02:42.432]             }
[17:02:42.432]         }))
[17:02:42.432]     }, error = function(ex) {
[17:02:42.432]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.432]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.432]                 ...future.rng), started = ...future.startTime, 
[17:02:42.432]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.432]             version = "1.8"), class = "FutureResult")
[17:02:42.432]     }, finally = {
[17:02:42.432]         if (!identical(...future.workdir, getwd())) 
[17:02:42.432]             setwd(...future.workdir)
[17:02:42.432]         {
[17:02:42.432]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.432]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.432]             }
[17:02:42.432]             base::options(...future.oldOptions)
[17:02:42.432]             if (.Platform$OS.type == "windows") {
[17:02:42.432]                 old_names <- names(...future.oldEnvVars)
[17:02:42.432]                 envs <- base::Sys.getenv()
[17:02:42.432]                 names <- names(envs)
[17:02:42.432]                 common <- intersect(names, old_names)
[17:02:42.432]                 added <- setdiff(names, old_names)
[17:02:42.432]                 removed <- setdiff(old_names, names)
[17:02:42.432]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.432]                   envs[common]]
[17:02:42.432]                 NAMES <- toupper(changed)
[17:02:42.432]                 args <- list()
[17:02:42.432]                 for (kk in seq_along(NAMES)) {
[17:02:42.432]                   name <- changed[[kk]]
[17:02:42.432]                   NAME <- NAMES[[kk]]
[17:02:42.432]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.432]                     next
[17:02:42.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.432]                 }
[17:02:42.432]                 NAMES <- toupper(added)
[17:02:42.432]                 for (kk in seq_along(NAMES)) {
[17:02:42.432]                   name <- added[[kk]]
[17:02:42.432]                   NAME <- NAMES[[kk]]
[17:02:42.432]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.432]                     next
[17:02:42.432]                   args[[name]] <- ""
[17:02:42.432]                 }
[17:02:42.432]                 NAMES <- toupper(removed)
[17:02:42.432]                 for (kk in seq_along(NAMES)) {
[17:02:42.432]                   name <- removed[[kk]]
[17:02:42.432]                   NAME <- NAMES[[kk]]
[17:02:42.432]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.432]                     next
[17:02:42.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.432]                 }
[17:02:42.432]                 if (length(args) > 0) 
[17:02:42.432]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.432]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.432]             }
[17:02:42.432]             else {
[17:02:42.432]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.432]             }
[17:02:42.432]             {
[17:02:42.432]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.432]                   0L) {
[17:02:42.432]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.432]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.432]                   base::options(opts)
[17:02:42.432]                 }
[17:02:42.432]                 {
[17:02:42.432]                   {
[17:02:42.432]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:42.432]                     NULL
[17:02:42.432]                   }
[17:02:42.432]                   options(future.plan = NULL)
[17:02:42.432]                   if (is.na(NA_character_)) 
[17:02:42.432]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.432]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.432]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.432]                     .init = FALSE)
[17:02:42.432]                 }
[17:02:42.432]             }
[17:02:42.432]         }
[17:02:42.432]     })
[17:02:42.432]     if (TRUE) {
[17:02:42.432]         base::sink(type = "output", split = FALSE)
[17:02:42.432]         if (TRUE) {
[17:02:42.432]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.432]         }
[17:02:42.432]         else {
[17:02:42.432]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.432]         }
[17:02:42.432]         base::close(...future.stdout)
[17:02:42.432]         ...future.stdout <- NULL
[17:02:42.432]     }
[17:02:42.432]     ...future.result$conditions <- ...future.conditions
[17:02:42.432]     ...future.result$finished <- base::Sys.time()
[17:02:42.432]     ...future.result
[17:02:42.432] }
[17:02:42.434] requestCore(): workers = 2
[17:02:42.437] MulticoreFuture started
[17:02:42.443] - Launch lazy future ... done
[17:02:42.443] plan(): Setting new future strategy stack:
[17:02:42.443] run() for ‘MulticoreFuture’ ... done
[17:02:42.443] List of future strategies:
[17:02:42.443] 1. sequential:
[17:02:42.443]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.443]    - tweaked: FALSE
[17:02:42.443]    - call: NULL
[17:02:42.444] result() for MulticoreFuture ...
[17:02:42.445] plan(): nbrOfWorkers() = 1
[17:02:42.447] plan(): Setting new future strategy stack:
[17:02:42.447] List of future strategies:
[17:02:42.447] 1. multicore:
[17:02:42.447]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.447]    - tweaked: FALSE
[17:02:42.447]    - call: plan(strategy)
[17:02:42.452] plan(): nbrOfWorkers() = 2
[17:02:42.456] result() for MulticoreFuture ...
[17:02:42.457] result() for MulticoreFuture ... done
[17:02:42.457] result() for MulticoreFuture ... done
[17:02:42.457] result() for MulticoreFuture ...
[17:02:42.457] result() for MulticoreFuture ... done
[17:02:42.457] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.458] Searching for globals...
[17:02:42.458] - globals found: [1] ‘getOption’
[17:02:42.459] Searching for globals ... DONE
[17:02:42.459] Resolving globals: FALSE
[17:02:42.459] 
[17:02:42.459] 
[17:02:42.459] getGlobalsAndPackages() ... DONE
[17:02:42.460] run() for ‘Future’ ...
[17:02:42.460] - state: ‘created’
[17:02:42.460] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:42.464] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:42.464] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:42.464]   - Field: ‘label’
[17:02:42.464]   - Field: ‘local’
[17:02:42.464]   - Field: ‘owner’
[17:02:42.465]   - Field: ‘envir’
[17:02:42.465]   - Field: ‘workers’
[17:02:42.465]   - Field: ‘packages’
[17:02:42.465]   - Field: ‘gc’
[17:02:42.465]   - Field: ‘job’
[17:02:42.465]   - Field: ‘conditions’
[17:02:42.465]   - Field: ‘expr’
[17:02:42.465]   - Field: ‘uuid’
[17:02:42.465]   - Field: ‘seed’
[17:02:42.465]   - Field: ‘version’
[17:02:42.466]   - Field: ‘result’
[17:02:42.466]   - Field: ‘asynchronous’
[17:02:42.466]   - Field: ‘calls’
[17:02:42.466]   - Field: ‘globals’
[17:02:42.466]   - Field: ‘stdout’
[17:02:42.466]   - Field: ‘earlySignal’
[17:02:42.466]   - Field: ‘lazy’
[17:02:42.466]   - Field: ‘state’
[17:02:42.466] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:42.467] - Launch lazy future ...
[17:02:42.467] Packages needed by the future expression (n = 0): <none>
[17:02:42.467] Packages needed by future strategies (n = 0): <none>
[17:02:42.468] {
[17:02:42.468]     {
[17:02:42.468]         {
[17:02:42.468]             ...future.startTime <- base::Sys.time()
[17:02:42.468]             {
[17:02:42.468]                 {
[17:02:42.468]                   {
[17:02:42.468]                     {
[17:02:42.468]                       base::local({
[17:02:42.468]                         has_future <- base::requireNamespace("future", 
[17:02:42.468]                           quietly = TRUE)
[17:02:42.468]                         if (has_future) {
[17:02:42.468]                           ns <- base::getNamespace("future")
[17:02:42.468]                           version <- ns[[".package"]][["version"]]
[17:02:42.468]                           if (is.null(version)) 
[17:02:42.468]                             version <- utils::packageVersion("future")
[17:02:42.468]                         }
[17:02:42.468]                         else {
[17:02:42.468]                           version <- NULL
[17:02:42.468]                         }
[17:02:42.468]                         if (!has_future || version < "1.8.0") {
[17:02:42.468]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.468]                             "", base::R.version$version.string), 
[17:02:42.468]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:42.468]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.468]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.468]                               "release", "version")], collapse = " "), 
[17:02:42.468]                             hostname = base::Sys.info()[["nodename"]])
[17:02:42.468]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.468]                             info)
[17:02:42.468]                           info <- base::paste(info, collapse = "; ")
[17:02:42.468]                           if (!has_future) {
[17:02:42.468]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.468]                               info)
[17:02:42.468]                           }
[17:02:42.468]                           else {
[17:02:42.468]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.468]                               info, version)
[17:02:42.468]                           }
[17:02:42.468]                           base::stop(msg)
[17:02:42.468]                         }
[17:02:42.468]                       })
[17:02:42.468]                     }
[17:02:42.468]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:42.468]                     base::options(mc.cores = 1L)
[17:02:42.468]                   }
[17:02:42.468]                   ...future.strategy.old <- future::plan("list")
[17:02:42.468]                   options(future.plan = NULL)
[17:02:42.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.468]                 }
[17:02:42.468]                 ...future.workdir <- getwd()
[17:02:42.468]             }
[17:02:42.468]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.468]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.468]         }
[17:02:42.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.468]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.468]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.468]             base::names(...future.oldOptions))
[17:02:42.468]     }
[17:02:42.468]     if (FALSE) {
[17:02:42.468]     }
[17:02:42.468]     else {
[17:02:42.468]         if (TRUE) {
[17:02:42.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.468]                 open = "w")
[17:02:42.468]         }
[17:02:42.468]         else {
[17:02:42.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.468]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.468]         }
[17:02:42.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.468]             base::sink(type = "output", split = FALSE)
[17:02:42.468]             base::close(...future.stdout)
[17:02:42.468]         }, add = TRUE)
[17:02:42.468]     }
[17:02:42.468]     ...future.frame <- base::sys.nframe()
[17:02:42.468]     ...future.conditions <- base::list()
[17:02:42.468]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.468]     if (FALSE) {
[17:02:42.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.468]     }
[17:02:42.468]     ...future.result <- base::tryCatch({
[17:02:42.468]         base::withCallingHandlers({
[17:02:42.468]             ...future.value <- base::withVisible(base::local({
[17:02:42.468]                 withCallingHandlers({
[17:02:42.468]                   getOption("future.globals.onMissing")
[17:02:42.468]                 }, immediateCondition = function(cond) {
[17:02:42.468]                   save_rds <- function (object, pathname, ...) 
[17:02:42.468]                   {
[17:02:42.468]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:42.468]                     if (file_test("-f", pathname_tmp)) {
[17:02:42.468]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.468]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:42.468]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.468]                         fi_tmp[["mtime"]])
[17:02:42.468]                     }
[17:02:42.468]                     tryCatch({
[17:02:42.468]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:42.468]                     }, error = function(ex) {
[17:02:42.468]                       msg <- conditionMessage(ex)
[17:02:42.468]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.468]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:42.468]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.468]                         fi_tmp[["mtime"]], msg)
[17:02:42.468]                       ex$message <- msg
[17:02:42.468]                       stop(ex)
[17:02:42.468]                     })
[17:02:42.468]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:42.468]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:42.468]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:42.468]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.468]                       fi <- file.info(pathname)
[17:02:42.468]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:42.468]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.468]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:42.468]                         fi[["size"]], fi[["mtime"]])
[17:02:42.468]                       stop(msg)
[17:02:42.468]                     }
[17:02:42.468]                     invisible(pathname)
[17:02:42.468]                   }
[17:02:42.468]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:42.468]                     rootPath = tempdir()) 
[17:02:42.468]                   {
[17:02:42.468]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:42.468]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:42.468]                       tmpdir = path, fileext = ".rds")
[17:02:42.468]                     save_rds(obj, file)
[17:02:42.468]                   }
[17:02:42.468]                   saveImmediateCondition(cond, path = "/tmp/RtmpkGmVuW/.future/immediateConditions")
[17:02:42.468]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.468]                   {
[17:02:42.468]                     inherits <- base::inherits
[17:02:42.468]                     invokeRestart <- base::invokeRestart
[17:02:42.468]                     is.null <- base::is.null
[17:02:42.468]                     muffled <- FALSE
[17:02:42.468]                     if (inherits(cond, "message")) {
[17:02:42.468]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:42.468]                       if (muffled) 
[17:02:42.468]                         invokeRestart("muffleMessage")
[17:02:42.468]                     }
[17:02:42.468]                     else if (inherits(cond, "warning")) {
[17:02:42.468]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:42.468]                       if (muffled) 
[17:02:42.468]                         invokeRestart("muffleWarning")
[17:02:42.468]                     }
[17:02:42.468]                     else if (inherits(cond, "condition")) {
[17:02:42.468]                       if (!is.null(pattern)) {
[17:02:42.468]                         computeRestarts <- base::computeRestarts
[17:02:42.468]                         grepl <- base::grepl
[17:02:42.468]                         restarts <- computeRestarts(cond)
[17:02:42.468]                         for (restart in restarts) {
[17:02:42.468]                           name <- restart$name
[17:02:42.468]                           if (is.null(name)) 
[17:02:42.468]                             next
[17:02:42.468]                           if (!grepl(pattern, name)) 
[17:02:42.468]                             next
[17:02:42.468]                           invokeRestart(restart)
[17:02:42.468]                           muffled <- TRUE
[17:02:42.468]                           break
[17:02:42.468]                         }
[17:02:42.468]                       }
[17:02:42.468]                     }
[17:02:42.468]                     invisible(muffled)
[17:02:42.468]                   }
[17:02:42.468]                   muffleCondition(cond)
[17:02:42.468]                 })
[17:02:42.468]             }))
[17:02:42.468]             future::FutureResult(value = ...future.value$value, 
[17:02:42.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.468]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.468]                     ...future.globalenv.names))
[17:02:42.468]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.468]         }, condition = base::local({
[17:02:42.468]             c <- base::c
[17:02:42.468]             inherits <- base::inherits
[17:02:42.468]             invokeRestart <- base::invokeRestart
[17:02:42.468]             length <- base::length
[17:02:42.468]             list <- base::list
[17:02:42.468]             seq.int <- base::seq.int
[17:02:42.468]             signalCondition <- base::signalCondition
[17:02:42.468]             sys.calls <- base::sys.calls
[17:02:42.468]             `[[` <- base::`[[`
[17:02:42.468]             `+` <- base::`+`
[17:02:42.468]             `<<-` <- base::`<<-`
[17:02:42.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.468]                   3L)]
[17:02:42.468]             }
[17:02:42.468]             function(cond) {
[17:02:42.468]                 is_error <- inherits(cond, "error")
[17:02:42.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.468]                   NULL)
[17:02:42.468]                 if (is_error) {
[17:02:42.468]                   sessionInformation <- function() {
[17:02:42.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.468]                       search = base::search(), system = base::Sys.info())
[17:02:42.468]                   }
[17:02:42.468]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.468]                     cond$call), session = sessionInformation(), 
[17:02:42.468]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.468]                   signalCondition(cond)
[17:02:42.468]                 }
[17:02:42.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.468]                 "immediateCondition"))) {
[17:02:42.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.468]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.468]                   if (TRUE && !signal) {
[17:02:42.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.468]                     {
[17:02:42.468]                       inherits <- base::inherits
[17:02:42.468]                       invokeRestart <- base::invokeRestart
[17:02:42.468]                       is.null <- base::is.null
[17:02:42.468]                       muffled <- FALSE
[17:02:42.468]                       if (inherits(cond, "message")) {
[17:02:42.468]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.468]                         if (muffled) 
[17:02:42.468]                           invokeRestart("muffleMessage")
[17:02:42.468]                       }
[17:02:42.468]                       else if (inherits(cond, "warning")) {
[17:02:42.468]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.468]                         if (muffled) 
[17:02:42.468]                           invokeRestart("muffleWarning")
[17:02:42.468]                       }
[17:02:42.468]                       else if (inherits(cond, "condition")) {
[17:02:42.468]                         if (!is.null(pattern)) {
[17:02:42.468]                           computeRestarts <- base::computeRestarts
[17:02:42.468]                           grepl <- base::grepl
[17:02:42.468]                           restarts <- computeRestarts(cond)
[17:02:42.468]                           for (restart in restarts) {
[17:02:42.468]                             name <- restart$name
[17:02:42.468]                             if (is.null(name)) 
[17:02:42.468]                               next
[17:02:42.468]                             if (!grepl(pattern, name)) 
[17:02:42.468]                               next
[17:02:42.468]                             invokeRestart(restart)
[17:02:42.468]                             muffled <- TRUE
[17:02:42.468]                             break
[17:02:42.468]                           }
[17:02:42.468]                         }
[17:02:42.468]                       }
[17:02:42.468]                       invisible(muffled)
[17:02:42.468]                     }
[17:02:42.468]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.468]                   }
[17:02:42.468]                 }
[17:02:42.468]                 else {
[17:02:42.468]                   if (TRUE) {
[17:02:42.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.468]                     {
[17:02:42.468]                       inherits <- base::inherits
[17:02:42.468]                       invokeRestart <- base::invokeRestart
[17:02:42.468]                       is.null <- base::is.null
[17:02:42.468]                       muffled <- FALSE
[17:02:42.468]                       if (inherits(cond, "message")) {
[17:02:42.468]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.468]                         if (muffled) 
[17:02:42.468]                           invokeRestart("muffleMessage")
[17:02:42.468]                       }
[17:02:42.468]                       else if (inherits(cond, "warning")) {
[17:02:42.468]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.468]                         if (muffled) 
[17:02:42.468]                           invokeRestart("muffleWarning")
[17:02:42.468]                       }
[17:02:42.468]                       else if (inherits(cond, "condition")) {
[17:02:42.468]                         if (!is.null(pattern)) {
[17:02:42.468]                           computeRestarts <- base::computeRestarts
[17:02:42.468]                           grepl <- base::grepl
[17:02:42.468]                           restarts <- computeRestarts(cond)
[17:02:42.468]                           for (restart in restarts) {
[17:02:42.468]                             name <- restart$name
[17:02:42.468]                             if (is.null(name)) 
[17:02:42.468]                               next
[17:02:42.468]                             if (!grepl(pattern, name)) 
[17:02:42.468]                               next
[17:02:42.468]                             invokeRestart(restart)
[17:02:42.468]                             muffled <- TRUE
[17:02:42.468]                             break
[17:02:42.468]                           }
[17:02:42.468]                         }
[17:02:42.468]                       }
[17:02:42.468]                       invisible(muffled)
[17:02:42.468]                     }
[17:02:42.468]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.468]                   }
[17:02:42.468]                 }
[17:02:42.468]             }
[17:02:42.468]         }))
[17:02:42.468]     }, error = function(ex) {
[17:02:42.468]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.468]                 ...future.rng), started = ...future.startTime, 
[17:02:42.468]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.468]             version = "1.8"), class = "FutureResult")
[17:02:42.468]     }, finally = {
[17:02:42.468]         if (!identical(...future.workdir, getwd())) 
[17:02:42.468]             setwd(...future.workdir)
[17:02:42.468]         {
[17:02:42.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.468]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.468]             }
[17:02:42.468]             base::options(...future.oldOptions)
[17:02:42.468]             if (.Platform$OS.type == "windows") {
[17:02:42.468]                 old_names <- names(...future.oldEnvVars)
[17:02:42.468]                 envs <- base::Sys.getenv()
[17:02:42.468]                 names <- names(envs)
[17:02:42.468]                 common <- intersect(names, old_names)
[17:02:42.468]                 added <- setdiff(names, old_names)
[17:02:42.468]                 removed <- setdiff(old_names, names)
[17:02:42.468]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.468]                   envs[common]]
[17:02:42.468]                 NAMES <- toupper(changed)
[17:02:42.468]                 args <- list()
[17:02:42.468]                 for (kk in seq_along(NAMES)) {
[17:02:42.468]                   name <- changed[[kk]]
[17:02:42.468]                   NAME <- NAMES[[kk]]
[17:02:42.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.468]                     next
[17:02:42.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.468]                 }
[17:02:42.468]                 NAMES <- toupper(added)
[17:02:42.468]                 for (kk in seq_along(NAMES)) {
[17:02:42.468]                   name <- added[[kk]]
[17:02:42.468]                   NAME <- NAMES[[kk]]
[17:02:42.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.468]                     next
[17:02:42.468]                   args[[name]] <- ""
[17:02:42.468]                 }
[17:02:42.468]                 NAMES <- toupper(removed)
[17:02:42.468]                 for (kk in seq_along(NAMES)) {
[17:02:42.468]                   name <- removed[[kk]]
[17:02:42.468]                   NAME <- NAMES[[kk]]
[17:02:42.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.468]                     next
[17:02:42.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.468]                 }
[17:02:42.468]                 if (length(args) > 0) 
[17:02:42.468]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.468]             }
[17:02:42.468]             else {
[17:02:42.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.468]             }
[17:02:42.468]             {
[17:02:42.468]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.468]                   0L) {
[17:02:42.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.468]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.468]                   base::options(opts)
[17:02:42.468]                 }
[17:02:42.468]                 {
[17:02:42.468]                   {
[17:02:42.468]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:42.468]                     NULL
[17:02:42.468]                   }
[17:02:42.468]                   options(future.plan = NULL)
[17:02:42.468]                   if (is.na(NA_character_)) 
[17:02:42.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.468]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.468]                     .init = FALSE)
[17:02:42.468]                 }
[17:02:42.468]             }
[17:02:42.468]         }
[17:02:42.468]     })
[17:02:42.468]     if (TRUE) {
[17:02:42.468]         base::sink(type = "output", split = FALSE)
[17:02:42.468]         if (TRUE) {
[17:02:42.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.468]         }
[17:02:42.468]         else {
[17:02:42.468]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.468]         }
[17:02:42.468]         base::close(...future.stdout)
[17:02:42.468]         ...future.stdout <- NULL
[17:02:42.468]     }
[17:02:42.468]     ...future.result$conditions <- ...future.conditions
[17:02:42.468]     ...future.result$finished <- base::Sys.time()
[17:02:42.468]     ...future.result
[17:02:42.468] }
[17:02:42.470] requestCore(): workers = 2
[17:02:42.472] MulticoreFuture started
[17:02:42.472] - Launch lazy future ... done
[17:02:42.472] run() for ‘MulticoreFuture’ ... done
[17:02:42.473] result() for MulticoreFuture ...
[17:02:42.473] plan(): Setting new future strategy stack:
[17:02:42.473] List of future strategies:
[17:02:42.473] 1. sequential:
[17:02:42.473]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.473]    - tweaked: FALSE
[17:02:42.473]    - call: NULL
[17:02:42.474] plan(): nbrOfWorkers() = 1
[17:02:42.476] plan(): Setting new future strategy stack:
[17:02:42.477] List of future strategies:
[17:02:42.477] 1. multicore:
[17:02:42.477]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.477]    - tweaked: FALSE
[17:02:42.477]    - call: plan(strategy)
[17:02:42.482] plan(): nbrOfWorkers() = 2
[17:02:42.483] result() for MulticoreFuture ...
[17:02:42.483] result() for MulticoreFuture ... done
[17:02:42.483] result() for MulticoreFuture ... done
[17:02:42.483] result() for MulticoreFuture ...
[17:02:42.484] result() for MulticoreFuture ... done
[17:02:42.484] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:02:42.484] Searching for globals...
[17:02:42.486] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.486] Searching for globals...
[17:02:42.487] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:02:42.488] Searching for globals ... DONE
[17:02:42.488] Resolving globals: FALSE
[17:02:42.488] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:42.489] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:42.489] - globals: [1] ‘data’
[17:02:42.489] 
[17:02:42.489] getGlobalsAndPackages() ... DONE
[17:02:42.490] run() for ‘Future’ ...
[17:02:42.490] - state: ‘created’
[17:02:42.490] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:42.494] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:42.494] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:42.494]   - Field: ‘label’
[17:02:42.494]   - Field: ‘local’
[17:02:42.495]   - Field: ‘owner’
[17:02:42.495]   - Field: ‘envir’
[17:02:42.495]   - Field: ‘workers’
[17:02:42.495]   - Field: ‘packages’
[17:02:42.495]   - Field: ‘gc’
[17:02:42.495]   - Field: ‘job’
[17:02:42.495]   - Field: ‘conditions’
[17:02:42.495]   - Field: ‘expr’
[17:02:42.496]   - Field: ‘uuid’
[17:02:42.496]   - Field: ‘seed’
[17:02:42.496]   - Field: ‘version’
[17:02:42.496]   - Field: ‘result’
[17:02:42.496]   - Field: ‘asynchronous’
[17:02:42.496]   - Field: ‘calls’
[17:02:42.496]   - Field: ‘globals’
[17:02:42.496]   - Field: ‘stdout’
[17:02:42.496]   - Field: ‘earlySignal’
[17:02:42.497]   - Field: ‘lazy’
[17:02:42.497]   - Field: ‘state’
[17:02:42.497] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:42.497] - Launch lazy future ...
[17:02:42.497] Packages needed by the future expression (n = 0): <none>
[17:02:42.497] Packages needed by future strategies (n = 0): <none>
[17:02:42.498] {
[17:02:42.498]     {
[17:02:42.498]         {
[17:02:42.498]             ...future.startTime <- base::Sys.time()
[17:02:42.498]             {
[17:02:42.498]                 {
[17:02:42.498]                   {
[17:02:42.498]                     {
[17:02:42.498]                       base::local({
[17:02:42.498]                         has_future <- base::requireNamespace("future", 
[17:02:42.498]                           quietly = TRUE)
[17:02:42.498]                         if (has_future) {
[17:02:42.498]                           ns <- base::getNamespace("future")
[17:02:42.498]                           version <- ns[[".package"]][["version"]]
[17:02:42.498]                           if (is.null(version)) 
[17:02:42.498]                             version <- utils::packageVersion("future")
[17:02:42.498]                         }
[17:02:42.498]                         else {
[17:02:42.498]                           version <- NULL
[17:02:42.498]                         }
[17:02:42.498]                         if (!has_future || version < "1.8.0") {
[17:02:42.498]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.498]                             "", base::R.version$version.string), 
[17:02:42.498]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:42.498]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.498]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.498]                               "release", "version")], collapse = " "), 
[17:02:42.498]                             hostname = base::Sys.info()[["nodename"]])
[17:02:42.498]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.498]                             info)
[17:02:42.498]                           info <- base::paste(info, collapse = "; ")
[17:02:42.498]                           if (!has_future) {
[17:02:42.498]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.498]                               info)
[17:02:42.498]                           }
[17:02:42.498]                           else {
[17:02:42.498]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.498]                               info, version)
[17:02:42.498]                           }
[17:02:42.498]                           base::stop(msg)
[17:02:42.498]                         }
[17:02:42.498]                       })
[17:02:42.498]                     }
[17:02:42.498]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:42.498]                     base::options(mc.cores = 1L)
[17:02:42.498]                   }
[17:02:42.498]                   ...future.strategy.old <- future::plan("list")
[17:02:42.498]                   options(future.plan = NULL)
[17:02:42.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.498]                 }
[17:02:42.498]                 ...future.workdir <- getwd()
[17:02:42.498]             }
[17:02:42.498]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.498]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.498]         }
[17:02:42.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.498]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.498]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.498]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.498]             base::names(...future.oldOptions))
[17:02:42.498]     }
[17:02:42.498]     if (FALSE) {
[17:02:42.498]     }
[17:02:42.498]     else {
[17:02:42.498]         if (TRUE) {
[17:02:42.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.498]                 open = "w")
[17:02:42.498]         }
[17:02:42.498]         else {
[17:02:42.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.498]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.498]         }
[17:02:42.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.498]             base::sink(type = "output", split = FALSE)
[17:02:42.498]             base::close(...future.stdout)
[17:02:42.498]         }, add = TRUE)
[17:02:42.498]     }
[17:02:42.498]     ...future.frame <- base::sys.nframe()
[17:02:42.498]     ...future.conditions <- base::list()
[17:02:42.498]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.498]     if (FALSE) {
[17:02:42.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.498]     }
[17:02:42.498]     ...future.result <- base::tryCatch({
[17:02:42.498]         base::withCallingHandlers({
[17:02:42.498]             ...future.value <- base::withVisible(base::local({
[17:02:42.498]                 withCallingHandlers({
[17:02:42.498]                   subset(data, x < 3)$y
[17:02:42.498]                 }, immediateCondition = function(cond) {
[17:02:42.498]                   save_rds <- function (object, pathname, ...) 
[17:02:42.498]                   {
[17:02:42.498]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:42.498]                     if (file_test("-f", pathname_tmp)) {
[17:02:42.498]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.498]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:42.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.498]                         fi_tmp[["mtime"]])
[17:02:42.498]                     }
[17:02:42.498]                     tryCatch({
[17:02:42.498]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:42.498]                     }, error = function(ex) {
[17:02:42.498]                       msg <- conditionMessage(ex)
[17:02:42.498]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.498]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:42.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.498]                         fi_tmp[["mtime"]], msg)
[17:02:42.498]                       ex$message <- msg
[17:02:42.498]                       stop(ex)
[17:02:42.498]                     })
[17:02:42.498]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:42.498]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:42.498]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:42.498]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.498]                       fi <- file.info(pathname)
[17:02:42.498]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:42.498]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.498]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:42.498]                         fi[["size"]], fi[["mtime"]])
[17:02:42.498]                       stop(msg)
[17:02:42.498]                     }
[17:02:42.498]                     invisible(pathname)
[17:02:42.498]                   }
[17:02:42.498]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:42.498]                     rootPath = tempdir()) 
[17:02:42.498]                   {
[17:02:42.498]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:42.498]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:42.498]                       tmpdir = path, fileext = ".rds")
[17:02:42.498]                     save_rds(obj, file)
[17:02:42.498]                   }
[17:02:42.498]                   saveImmediateCondition(cond, path = "/tmp/RtmpkGmVuW/.future/immediateConditions")
[17:02:42.498]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.498]                   {
[17:02:42.498]                     inherits <- base::inherits
[17:02:42.498]                     invokeRestart <- base::invokeRestart
[17:02:42.498]                     is.null <- base::is.null
[17:02:42.498]                     muffled <- FALSE
[17:02:42.498]                     if (inherits(cond, "message")) {
[17:02:42.498]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:42.498]                       if (muffled) 
[17:02:42.498]                         invokeRestart("muffleMessage")
[17:02:42.498]                     }
[17:02:42.498]                     else if (inherits(cond, "warning")) {
[17:02:42.498]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:42.498]                       if (muffled) 
[17:02:42.498]                         invokeRestart("muffleWarning")
[17:02:42.498]                     }
[17:02:42.498]                     else if (inherits(cond, "condition")) {
[17:02:42.498]                       if (!is.null(pattern)) {
[17:02:42.498]                         computeRestarts <- base::computeRestarts
[17:02:42.498]                         grepl <- base::grepl
[17:02:42.498]                         restarts <- computeRestarts(cond)
[17:02:42.498]                         for (restart in restarts) {
[17:02:42.498]                           name <- restart$name
[17:02:42.498]                           if (is.null(name)) 
[17:02:42.498]                             next
[17:02:42.498]                           if (!grepl(pattern, name)) 
[17:02:42.498]                             next
[17:02:42.498]                           invokeRestart(restart)
[17:02:42.498]                           muffled <- TRUE
[17:02:42.498]                           break
[17:02:42.498]                         }
[17:02:42.498]                       }
[17:02:42.498]                     }
[17:02:42.498]                     invisible(muffled)
[17:02:42.498]                   }
[17:02:42.498]                   muffleCondition(cond)
[17:02:42.498]                 })
[17:02:42.498]             }))
[17:02:42.498]             future::FutureResult(value = ...future.value$value, 
[17:02:42.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.498]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.498]                     ...future.globalenv.names))
[17:02:42.498]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.498]         }, condition = base::local({
[17:02:42.498]             c <- base::c
[17:02:42.498]             inherits <- base::inherits
[17:02:42.498]             invokeRestart <- base::invokeRestart
[17:02:42.498]             length <- base::length
[17:02:42.498]             list <- base::list
[17:02:42.498]             seq.int <- base::seq.int
[17:02:42.498]             signalCondition <- base::signalCondition
[17:02:42.498]             sys.calls <- base::sys.calls
[17:02:42.498]             `[[` <- base::`[[`
[17:02:42.498]             `+` <- base::`+`
[17:02:42.498]             `<<-` <- base::`<<-`
[17:02:42.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.498]                   3L)]
[17:02:42.498]             }
[17:02:42.498]             function(cond) {
[17:02:42.498]                 is_error <- inherits(cond, "error")
[17:02:42.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.498]                   NULL)
[17:02:42.498]                 if (is_error) {
[17:02:42.498]                   sessionInformation <- function() {
[17:02:42.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.498]                       search = base::search(), system = base::Sys.info())
[17:02:42.498]                   }
[17:02:42.498]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.498]                     cond$call), session = sessionInformation(), 
[17:02:42.498]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.498]                   signalCondition(cond)
[17:02:42.498]                 }
[17:02:42.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.498]                 "immediateCondition"))) {
[17:02:42.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.498]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.498]                   if (TRUE && !signal) {
[17:02:42.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.498]                     {
[17:02:42.498]                       inherits <- base::inherits
[17:02:42.498]                       invokeRestart <- base::invokeRestart
[17:02:42.498]                       is.null <- base::is.null
[17:02:42.498]                       muffled <- FALSE
[17:02:42.498]                       if (inherits(cond, "message")) {
[17:02:42.498]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.498]                         if (muffled) 
[17:02:42.498]                           invokeRestart("muffleMessage")
[17:02:42.498]                       }
[17:02:42.498]                       else if (inherits(cond, "warning")) {
[17:02:42.498]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.498]                         if (muffled) 
[17:02:42.498]                           invokeRestart("muffleWarning")
[17:02:42.498]                       }
[17:02:42.498]                       else if (inherits(cond, "condition")) {
[17:02:42.498]                         if (!is.null(pattern)) {
[17:02:42.498]                           computeRestarts <- base::computeRestarts
[17:02:42.498]                           grepl <- base::grepl
[17:02:42.498]                           restarts <- computeRestarts(cond)
[17:02:42.498]                           for (restart in restarts) {
[17:02:42.498]                             name <- restart$name
[17:02:42.498]                             if (is.null(name)) 
[17:02:42.498]                               next
[17:02:42.498]                             if (!grepl(pattern, name)) 
[17:02:42.498]                               next
[17:02:42.498]                             invokeRestart(restart)
[17:02:42.498]                             muffled <- TRUE
[17:02:42.498]                             break
[17:02:42.498]                           }
[17:02:42.498]                         }
[17:02:42.498]                       }
[17:02:42.498]                       invisible(muffled)
[17:02:42.498]                     }
[17:02:42.498]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.498]                   }
[17:02:42.498]                 }
[17:02:42.498]                 else {
[17:02:42.498]                   if (TRUE) {
[17:02:42.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.498]                     {
[17:02:42.498]                       inherits <- base::inherits
[17:02:42.498]                       invokeRestart <- base::invokeRestart
[17:02:42.498]                       is.null <- base::is.null
[17:02:42.498]                       muffled <- FALSE
[17:02:42.498]                       if (inherits(cond, "message")) {
[17:02:42.498]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.498]                         if (muffled) 
[17:02:42.498]                           invokeRestart("muffleMessage")
[17:02:42.498]                       }
[17:02:42.498]                       else if (inherits(cond, "warning")) {
[17:02:42.498]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.498]                         if (muffled) 
[17:02:42.498]                           invokeRestart("muffleWarning")
[17:02:42.498]                       }
[17:02:42.498]                       else if (inherits(cond, "condition")) {
[17:02:42.498]                         if (!is.null(pattern)) {
[17:02:42.498]                           computeRestarts <- base::computeRestarts
[17:02:42.498]                           grepl <- base::grepl
[17:02:42.498]                           restarts <- computeRestarts(cond)
[17:02:42.498]                           for (restart in restarts) {
[17:02:42.498]                             name <- restart$name
[17:02:42.498]                             if (is.null(name)) 
[17:02:42.498]                               next
[17:02:42.498]                             if (!grepl(pattern, name)) 
[17:02:42.498]                               next
[17:02:42.498]                             invokeRestart(restart)
[17:02:42.498]                             muffled <- TRUE
[17:02:42.498]                             break
[17:02:42.498]                           }
[17:02:42.498]                         }
[17:02:42.498]                       }
[17:02:42.498]                       invisible(muffled)
[17:02:42.498]                     }
[17:02:42.498]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.498]                   }
[17:02:42.498]                 }
[17:02:42.498]             }
[17:02:42.498]         }))
[17:02:42.498]     }, error = function(ex) {
[17:02:42.498]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.498]                 ...future.rng), started = ...future.startTime, 
[17:02:42.498]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.498]             version = "1.8"), class = "FutureResult")
[17:02:42.498]     }, finally = {
[17:02:42.498]         if (!identical(...future.workdir, getwd())) 
[17:02:42.498]             setwd(...future.workdir)
[17:02:42.498]         {
[17:02:42.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.498]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.498]             }
[17:02:42.498]             base::options(...future.oldOptions)
[17:02:42.498]             if (.Platform$OS.type == "windows") {
[17:02:42.498]                 old_names <- names(...future.oldEnvVars)
[17:02:42.498]                 envs <- base::Sys.getenv()
[17:02:42.498]                 names <- names(envs)
[17:02:42.498]                 common <- intersect(names, old_names)
[17:02:42.498]                 added <- setdiff(names, old_names)
[17:02:42.498]                 removed <- setdiff(old_names, names)
[17:02:42.498]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.498]                   envs[common]]
[17:02:42.498]                 NAMES <- toupper(changed)
[17:02:42.498]                 args <- list()
[17:02:42.498]                 for (kk in seq_along(NAMES)) {
[17:02:42.498]                   name <- changed[[kk]]
[17:02:42.498]                   NAME <- NAMES[[kk]]
[17:02:42.498]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.498]                     next
[17:02:42.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.498]                 }
[17:02:42.498]                 NAMES <- toupper(added)
[17:02:42.498]                 for (kk in seq_along(NAMES)) {
[17:02:42.498]                   name <- added[[kk]]
[17:02:42.498]                   NAME <- NAMES[[kk]]
[17:02:42.498]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.498]                     next
[17:02:42.498]                   args[[name]] <- ""
[17:02:42.498]                 }
[17:02:42.498]                 NAMES <- toupper(removed)
[17:02:42.498]                 for (kk in seq_along(NAMES)) {
[17:02:42.498]                   name <- removed[[kk]]
[17:02:42.498]                   NAME <- NAMES[[kk]]
[17:02:42.498]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.498]                     next
[17:02:42.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.498]                 }
[17:02:42.498]                 if (length(args) > 0) 
[17:02:42.498]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.498]             }
[17:02:42.498]             else {
[17:02:42.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.498]             }
[17:02:42.498]             {
[17:02:42.498]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.498]                   0L) {
[17:02:42.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.498]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.498]                   base::options(opts)
[17:02:42.498]                 }
[17:02:42.498]                 {
[17:02:42.498]                   {
[17:02:42.498]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:42.498]                     NULL
[17:02:42.498]                   }
[17:02:42.498]                   options(future.plan = NULL)
[17:02:42.498]                   if (is.na(NA_character_)) 
[17:02:42.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.498]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.498]                     .init = FALSE)
[17:02:42.498]                 }
[17:02:42.498]             }
[17:02:42.498]         }
[17:02:42.498]     })
[17:02:42.498]     if (TRUE) {
[17:02:42.498]         base::sink(type = "output", split = FALSE)
[17:02:42.498]         if (TRUE) {
[17:02:42.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.498]         }
[17:02:42.498]         else {
[17:02:42.498]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.498]         }
[17:02:42.498]         base::close(...future.stdout)
[17:02:42.498]         ...future.stdout <- NULL
[17:02:42.498]     }
[17:02:42.498]     ...future.result$conditions <- ...future.conditions
[17:02:42.498]     ...future.result$finished <- base::Sys.time()
[17:02:42.498]     ...future.result
[17:02:42.498] }
[17:02:42.501] assign_globals() ...
[17:02:42.501] List of 1
[17:02:42.501]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:42.501]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:42.501]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:42.501]  - attr(*, "where")=List of 1
[17:02:42.501]   ..$ data:<environment: R_EmptyEnv> 
[17:02:42.501]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:42.501]  - attr(*, "resolved")= logi FALSE
[17:02:42.501]  - attr(*, "total_size")= num 160
[17:02:42.501]  - attr(*, "already-done")= logi TRUE
[17:02:42.507] - copied ‘data’ to environment
[17:02:42.507] assign_globals() ... done
[17:02:42.507] requestCore(): workers = 2
[17:02:42.510] MulticoreFuture started
[17:02:42.510] - Launch lazy future ... done
[17:02:42.510] run() for ‘MulticoreFuture’ ... done
[17:02:42.511] plan(): Setting new future strategy stack:
[17:02:42.511] result() for MulticoreFuture ...
[17:02:42.511] List of future strategies:
[17:02:42.511] 1. sequential:
[17:02:42.511]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.511]    - tweaked: FALSE
[17:02:42.511]    - call: NULL
[17:02:42.512] plan(): nbrOfWorkers() = 1
[17:02:42.515] plan(): Setting new future strategy stack:
[17:02:42.515] List of future strategies:
[17:02:42.515] 1. multicore:
[17:02:42.515]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.515]    - tweaked: FALSE
[17:02:42.515]    - call: plan(strategy)
[17:02:42.520] plan(): nbrOfWorkers() = 2
[17:02:42.521] result() for MulticoreFuture ...
[17:02:42.521] result() for MulticoreFuture ... done
[17:02:42.521] result() for MulticoreFuture ... done
[17:02:42.521] result() for MulticoreFuture ...
[17:02:42.522] result() for MulticoreFuture ... done
[17:02:42.522] plan(): Setting new future strategy stack:
[17:02:42.522] List of future strategies:
[17:02:42.522] 1. sequential:
[17:02:42.522]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.522]    - tweaked: FALSE
[17:02:42.522]    - call: plan(list(sequential, strategy))
[17:02:42.522] 2. multicore:
[17:02:42.522]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.522]    - tweaked: FALSE
[17:02:42.522]    - call: plan(list(sequential, strategy))
[17:02:42.523] plan(): nbrOfWorkers() = 1
[17:02:42.524] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.524] Searching for globals...
[17:02:42.528] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:02:42.528] Searching for globals ... DONE
[17:02:42.528] Resolving globals: FALSE
[17:02:42.529] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:42.529] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:42.529] - globals: [1] ‘data’
[17:02:42.530] - packages: [1] ‘future’
[17:02:42.530] getGlobalsAndPackages() ... DONE
[17:02:42.530] run() for ‘Future’ ...
[17:02:42.530] - state: ‘created’
[17:02:42.530] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:42.531] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:42.531] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:42.531]   - Field: ‘label’
[17:02:42.531]   - Field: ‘local’
[17:02:42.531]   - Field: ‘owner’
[17:02:42.531]   - Field: ‘envir’
[17:02:42.532]   - Field: ‘packages’
[17:02:42.532]   - Field: ‘gc’
[17:02:42.532]   - Field: ‘conditions’
[17:02:42.532]   - Field: ‘expr’
[17:02:42.532]   - Field: ‘uuid’
[17:02:42.532]   - Field: ‘seed’
[17:02:42.532]   - Field: ‘version’
[17:02:42.532]   - Field: ‘result’
[17:02:42.532]   - Field: ‘asynchronous’
[17:02:42.533]   - Field: ‘calls’
[17:02:42.533]   - Field: ‘globals’
[17:02:42.533]   - Field: ‘stdout’
[17:02:42.533]   - Field: ‘earlySignal’
[17:02:42.533]   - Field: ‘lazy’
[17:02:42.533]   - Field: ‘state’
[17:02:42.533] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:42.533] - Launch lazy future ...
[17:02:42.534] Packages needed by the future expression (n = 1): ‘future’
[17:02:42.534] Packages needed by future strategies (n = 1): ‘future’
[17:02:42.534] {
[17:02:42.534]     {
[17:02:42.534]         {
[17:02:42.534]             ...future.startTime <- base::Sys.time()
[17:02:42.534]             {
[17:02:42.534]                 {
[17:02:42.534]                   {
[17:02:42.534]                     {
[17:02:42.534]                       base::local({
[17:02:42.534]                         has_future <- base::requireNamespace("future", 
[17:02:42.534]                           quietly = TRUE)
[17:02:42.534]                         if (has_future) {
[17:02:42.534]                           ns <- base::getNamespace("future")
[17:02:42.534]                           version <- ns[[".package"]][["version"]]
[17:02:42.534]                           if (is.null(version)) 
[17:02:42.534]                             version <- utils::packageVersion("future")
[17:02:42.534]                         }
[17:02:42.534]                         else {
[17:02:42.534]                           version <- NULL
[17:02:42.534]                         }
[17:02:42.534]                         if (!has_future || version < "1.8.0") {
[17:02:42.534]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.534]                             "", base::R.version$version.string), 
[17:02:42.534]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:42.534]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.534]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.534]                               "release", "version")], collapse = " "), 
[17:02:42.534]                             hostname = base::Sys.info()[["nodename"]])
[17:02:42.534]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.534]                             info)
[17:02:42.534]                           info <- base::paste(info, collapse = "; ")
[17:02:42.534]                           if (!has_future) {
[17:02:42.534]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.534]                               info)
[17:02:42.534]                           }
[17:02:42.534]                           else {
[17:02:42.534]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.534]                               info, version)
[17:02:42.534]                           }
[17:02:42.534]                           base::stop(msg)
[17:02:42.534]                         }
[17:02:42.534]                       })
[17:02:42.534]                     }
[17:02:42.534]                     base::local({
[17:02:42.534]                       for (pkg in "future") {
[17:02:42.534]                         base::loadNamespace(pkg)
[17:02:42.534]                         base::library(pkg, character.only = TRUE)
[17:02:42.534]                       }
[17:02:42.534]                     })
[17:02:42.534]                   }
[17:02:42.534]                   ...future.strategy.old <- future::plan("list")
[17:02:42.534]                   options(future.plan = NULL)
[17:02:42.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.534]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:02:42.534]                     envir = parent.frame()) 
[17:02:42.534]                   {
[17:02:42.534]                     default_workers <- missing(workers)
[17:02:42.534]                     if (is.function(workers)) 
[17:02:42.534]                       workers <- workers()
[17:02:42.534]                     workers <- structure(as.integer(workers), 
[17:02:42.534]                       class = class(workers))
[17:02:42.534]                     stop_if_not(is.finite(workers), workers >= 
[17:02:42.534]                       1L)
[17:02:42.534]                     if ((workers == 1L && !inherits(workers, 
[17:02:42.534]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:02:42.534]                       if (default_workers) 
[17:02:42.534]                         supportsMulticore(warn = TRUE)
[17:02:42.534]                       return(sequential(..., envir = envir))
[17:02:42.534]                     }
[17:02:42.534]                     oopts <- options(mc.cores = workers)
[17:02:42.534]                     on.exit(options(oopts))
[17:02:42.534]                     future <- MulticoreFuture(..., workers = workers, 
[17:02:42.534]                       envir = envir)
[17:02:42.534]                     if (!future$lazy) 
[17:02:42.534]                       future <- run(future)
[17:02:42.534]                     invisible(future)
[17:02:42.534]                   }), .cleanup = FALSE, .init = FALSE)
[17:02:42.534]                 }
[17:02:42.534]                 ...future.workdir <- getwd()
[17:02:42.534]             }
[17:02:42.534]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.534]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.534]         }
[17:02:42.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.534]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.534]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.534]             base::names(...future.oldOptions))
[17:02:42.534]     }
[17:02:42.534]     if (FALSE) {
[17:02:42.534]     }
[17:02:42.534]     else {
[17:02:42.534]         if (TRUE) {
[17:02:42.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.534]                 open = "w")
[17:02:42.534]         }
[17:02:42.534]         else {
[17:02:42.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.534]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.534]         }
[17:02:42.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.534]             base::sink(type = "output", split = FALSE)
[17:02:42.534]             base::close(...future.stdout)
[17:02:42.534]         }, add = TRUE)
[17:02:42.534]     }
[17:02:42.534]     ...future.frame <- base::sys.nframe()
[17:02:42.534]     ...future.conditions <- base::list()
[17:02:42.534]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.534]     if (FALSE) {
[17:02:42.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.534]     }
[17:02:42.534]     ...future.result <- base::tryCatch({
[17:02:42.534]         base::withCallingHandlers({
[17:02:42.534]             ...future.value <- base::withVisible(base::local({
[17:02:42.534]                 a %<-% subset(data, x < 3)$y
[17:02:42.534]                 a
[17:02:42.534]             }))
[17:02:42.534]             future::FutureResult(value = ...future.value$value, 
[17:02:42.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.534]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.534]                     ...future.globalenv.names))
[17:02:42.534]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.534]         }, condition = base::local({
[17:02:42.534]             c <- base::c
[17:02:42.534]             inherits <- base::inherits
[17:02:42.534]             invokeRestart <- base::invokeRestart
[17:02:42.534]             length <- base::length
[17:02:42.534]             list <- base::list
[17:02:42.534]             seq.int <- base::seq.int
[17:02:42.534]             signalCondition <- base::signalCondition
[17:02:42.534]             sys.calls <- base::sys.calls
[17:02:42.534]             `[[` <- base::`[[`
[17:02:42.534]             `+` <- base::`+`
[17:02:42.534]             `<<-` <- base::`<<-`
[17:02:42.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.534]                   3L)]
[17:02:42.534]             }
[17:02:42.534]             function(cond) {
[17:02:42.534]                 is_error <- inherits(cond, "error")
[17:02:42.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.534]                   NULL)
[17:02:42.534]                 if (is_error) {
[17:02:42.534]                   sessionInformation <- function() {
[17:02:42.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.534]                       search = base::search(), system = base::Sys.info())
[17:02:42.534]                   }
[17:02:42.534]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.534]                     cond$call), session = sessionInformation(), 
[17:02:42.534]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.534]                   signalCondition(cond)
[17:02:42.534]                 }
[17:02:42.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.534]                 "immediateCondition"))) {
[17:02:42.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.534]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.534]                   if (TRUE && !signal) {
[17:02:42.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.534]                     {
[17:02:42.534]                       inherits <- base::inherits
[17:02:42.534]                       invokeRestart <- base::invokeRestart
[17:02:42.534]                       is.null <- base::is.null
[17:02:42.534]                       muffled <- FALSE
[17:02:42.534]                       if (inherits(cond, "message")) {
[17:02:42.534]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.534]                         if (muffled) 
[17:02:42.534]                           invokeRestart("muffleMessage")
[17:02:42.534]                       }
[17:02:42.534]                       else if (inherits(cond, "warning")) {
[17:02:42.534]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.534]                         if (muffled) 
[17:02:42.534]                           invokeRestart("muffleWarning")
[17:02:42.534]                       }
[17:02:42.534]                       else if (inherits(cond, "condition")) {
[17:02:42.534]                         if (!is.null(pattern)) {
[17:02:42.534]                           computeRestarts <- base::computeRestarts
[17:02:42.534]                           grepl <- base::grepl
[17:02:42.534]                           restarts <- computeRestarts(cond)
[17:02:42.534]                           for (restart in restarts) {
[17:02:42.534]                             name <- restart$name
[17:02:42.534]                             if (is.null(name)) 
[17:02:42.534]                               next
[17:02:42.534]                             if (!grepl(pattern, name)) 
[17:02:42.534]                               next
[17:02:42.534]                             invokeRestart(restart)
[17:02:42.534]                             muffled <- TRUE
[17:02:42.534]                             break
[17:02:42.534]                           }
[17:02:42.534]                         }
[17:02:42.534]                       }
[17:02:42.534]                       invisible(muffled)
[17:02:42.534]                     }
[17:02:42.534]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.534]                   }
[17:02:42.534]                 }
[17:02:42.534]                 else {
[17:02:42.534]                   if (TRUE) {
[17:02:42.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.534]                     {
[17:02:42.534]                       inherits <- base::inherits
[17:02:42.534]                       invokeRestart <- base::invokeRestart
[17:02:42.534]                       is.null <- base::is.null
[17:02:42.534]                       muffled <- FALSE
[17:02:42.534]                       if (inherits(cond, "message")) {
[17:02:42.534]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.534]                         if (muffled) 
[17:02:42.534]                           invokeRestart("muffleMessage")
[17:02:42.534]                       }
[17:02:42.534]                       else if (inherits(cond, "warning")) {
[17:02:42.534]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.534]                         if (muffled) 
[17:02:42.534]                           invokeRestart("muffleWarning")
[17:02:42.534]                       }
[17:02:42.534]                       else if (inherits(cond, "condition")) {
[17:02:42.534]                         if (!is.null(pattern)) {
[17:02:42.534]                           computeRestarts <- base::computeRestarts
[17:02:42.534]                           grepl <- base::grepl
[17:02:42.534]                           restarts <- computeRestarts(cond)
[17:02:42.534]                           for (restart in restarts) {
[17:02:42.534]                             name <- restart$name
[17:02:42.534]                             if (is.null(name)) 
[17:02:42.534]                               next
[17:02:42.534]                             if (!grepl(pattern, name)) 
[17:02:42.534]                               next
[17:02:42.534]                             invokeRestart(restart)
[17:02:42.534]                             muffled <- TRUE
[17:02:42.534]                             break
[17:02:42.534]                           }
[17:02:42.534]                         }
[17:02:42.534]                       }
[17:02:42.534]                       invisible(muffled)
[17:02:42.534]                     }
[17:02:42.534]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.534]                   }
[17:02:42.534]                 }
[17:02:42.534]             }
[17:02:42.534]         }))
[17:02:42.534]     }, error = function(ex) {
[17:02:42.534]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.534]                 ...future.rng), started = ...future.startTime, 
[17:02:42.534]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.534]             version = "1.8"), class = "FutureResult")
[17:02:42.534]     }, finally = {
[17:02:42.534]         if (!identical(...future.workdir, getwd())) 
[17:02:42.534]             setwd(...future.workdir)
[17:02:42.534]         {
[17:02:42.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.534]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.534]             }
[17:02:42.534]             base::options(...future.oldOptions)
[17:02:42.534]             if (.Platform$OS.type == "windows") {
[17:02:42.534]                 old_names <- names(...future.oldEnvVars)
[17:02:42.534]                 envs <- base::Sys.getenv()
[17:02:42.534]                 names <- names(envs)
[17:02:42.534]                 common <- intersect(names, old_names)
[17:02:42.534]                 added <- setdiff(names, old_names)
[17:02:42.534]                 removed <- setdiff(old_names, names)
[17:02:42.534]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.534]                   envs[common]]
[17:02:42.534]                 NAMES <- toupper(changed)
[17:02:42.534]                 args <- list()
[17:02:42.534]                 for (kk in seq_along(NAMES)) {
[17:02:42.534]                   name <- changed[[kk]]
[17:02:42.534]                   NAME <- NAMES[[kk]]
[17:02:42.534]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.534]                     next
[17:02:42.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.534]                 }
[17:02:42.534]                 NAMES <- toupper(added)
[17:02:42.534]                 for (kk in seq_along(NAMES)) {
[17:02:42.534]                   name <- added[[kk]]
[17:02:42.534]                   NAME <- NAMES[[kk]]
[17:02:42.534]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.534]                     next
[17:02:42.534]                   args[[name]] <- ""
[17:02:42.534]                 }
[17:02:42.534]                 NAMES <- toupper(removed)
[17:02:42.534]                 for (kk in seq_along(NAMES)) {
[17:02:42.534]                   name <- removed[[kk]]
[17:02:42.534]                   NAME <- NAMES[[kk]]
[17:02:42.534]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.534]                     next
[17:02:42.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.534]                 }
[17:02:42.534]                 if (length(args) > 0) 
[17:02:42.534]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.534]             }
[17:02:42.534]             else {
[17:02:42.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.534]             }
[17:02:42.534]             {
[17:02:42.534]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.534]                   0L) {
[17:02:42.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.534]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.534]                   base::options(opts)
[17:02:42.534]                 }
[17:02:42.534]                 {
[17:02:42.534]                   {
[17:02:42.534]                     NULL
[17:02:42.534]                     RNGkind("Mersenne-Twister")
[17:02:42.534]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:42.534]                       inherits = FALSE)
[17:02:42.534]                   }
[17:02:42.534]                   options(future.plan = NULL)
[17:02:42.534]                   if (is.na(NA_character_)) 
[17:02:42.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.534]                     .init = FALSE)
[17:02:42.534]                 }
[17:02:42.534]             }
[17:02:42.534]         }
[17:02:42.534]     })
[17:02:42.534]     if (TRUE) {
[17:02:42.534]         base::sink(type = "output", split = FALSE)
[17:02:42.534]         if (TRUE) {
[17:02:42.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.534]         }
[17:02:42.534]         else {
[17:02:42.534]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.534]         }
[17:02:42.534]         base::close(...future.stdout)
[17:02:42.534]         ...future.stdout <- NULL
[17:02:42.534]     }
[17:02:42.534]     ...future.result$conditions <- ...future.conditions
[17:02:42.534]     ...future.result$finished <- base::Sys.time()
[17:02:42.534]     ...future.result
[17:02:42.534] }
[17:02:42.537] assign_globals() ...
[17:02:42.537] List of 1
[17:02:42.537]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:42.537]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:42.537]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:42.537]  - attr(*, "where")=List of 1
[17:02:42.537]   ..$ data:<environment: R_EmptyEnv> 
[17:02:42.537]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:42.537]  - attr(*, "resolved")= logi FALSE
[17:02:42.537]  - attr(*, "total_size")= num 160
[17:02:42.537]  - attr(*, "already-done")= logi TRUE
[17:02:42.540] - copied ‘data’ to environment
[17:02:42.541] assign_globals() ... done
[17:02:42.541] plan(): Setting new future strategy stack:
[17:02:42.541] List of future strategies:
[17:02:42.541] 1. multicore:
[17:02:42.541]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.541]    - tweaked: FALSE
[17:02:42.541]    - call: plan(list(sequential, strategy))
[17:02:42.545] plan(): nbrOfWorkers() = 2
[17:02:42.598] plan(): Setting new future strategy stack:
[17:02:42.598] List of future strategies:
[17:02:42.598] 1. sequential:
[17:02:42.598]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:42.598]    - tweaked: FALSE
[17:02:42.598]    - call: plan(list(sequential, strategy))
[17:02:42.598] 2. multicore:
[17:02:42.598]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:42.598]    - tweaked: FALSE
[17:02:42.598]    - call: plan(list(sequential, strategy))
[17:02:42.599] plan(): nbrOfWorkers() = 1
[17:02:42.599] SequentialFuture started (and completed)
[17:02:42.599] signalConditions() ...
[17:02:42.599]  - include = ‘immediateCondition’
[17:02:42.600]  - exclude = 
[17:02:42.600]  - resignal = FALSE
[17:02:42.600]  - Number of conditions: 56
[17:02:42.600] signalConditions() ... done
[17:02:42.600] - Launch lazy future ... done
[17:02:42.600] run() for ‘SequentialFuture’ ... done
[17:02:42.600] signalConditions() ...
[17:02:42.601]  - include = ‘immediateCondition’
[17:02:42.601]  - exclude = 
[17:02:42.601]  - resignal = FALSE
[17:02:42.601]  - Number of conditions: 56
[17:02:42.601] signalConditions() ... done
[17:02:42.601] Future state: ‘finished’
[17:02:42.601] signalConditions() ...
[17:02:42.601]  - include = ‘condition’
[17:02:42.602]  - exclude = ‘immediateCondition’
[17:02:42.602]  - resignal = TRUE
[17:02:42.602]  - Number of conditions: 56
[17:02:42.602]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.546] getGlobalsAndPackages() ...
[17:02:42.602]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.602]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.563] Searching for globals...
[17:02:42.602]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.564] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:02:42.603]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.564] Searching for globals ... DONE
[17:02:42.603]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.564] Resolving globals: FALSE
[17:02:42.603]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.565] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:42.603]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.565] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:42.603]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.565] - globals: [1] ‘data’
[17:02:42.603]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.565] 
[17:02:42.604]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.565] getGlobalsAndPackages() ... DONE
[17:02:42.604]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.566] run() for ‘Future’ ...
[17:02:42.604]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.566] - state: ‘created’
[17:02:42.604]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.566] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:42.604]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.570] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:42.604]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.570] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:42.605]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.570]   - Field: ‘label’
[17:02:42.605]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘local’
[17:02:42.605]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘owner’
[17:02:42.605]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘envir’
[17:02:42.605]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘workers’
[17:02:42.605]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘packages’
[17:02:42.606]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘gc’
[17:02:42.606]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.571]   - Field: ‘job’
[17:02:42.606]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘conditions’
[17:02:42.606]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘expr’
[17:02:42.606]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘uuid’
[17:02:42.606]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘seed’
[17:02:42.607]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘version’
[17:02:42.607]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘result’
[17:02:42.607]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘asynchronous’
[17:02:42.607]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘calls’
[17:02:42.607]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.572]   - Field: ‘globals’
[17:02:42.607]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573]   - Field: ‘stdout’
[17:02:42.608]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573]   - Field: ‘earlySignal’
[17:02:42.608]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573]   - Field: ‘lazy’
[17:02:42.608]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573]   - Field: ‘state’
[17:02:42.608]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:42.608]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573] - Launch lazy future ...
[17:02:42.608]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.573] Packages needed by the future expression (n = 0): <none>
[17:02:42.608]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.574] Packages needed by future strategies (n = 0): <none>
[17:02:42.609]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.574] {
[17:02:42.574]     {
[17:02:42.574]         {
[17:02:42.574]             ...future.startTime <- base::Sys.time()
[17:02:42.574]             {
[17:02:42.574]                 {
[17:02:42.574]                   {
[17:02:42.574]                     {
[17:02:42.574]                       base::local({
[17:02:42.574]                         has_future <- base::requireNamespace("future", 
[17:02:42.574]                           quietly = TRUE)
[17:02:42.574]                         if (has_future) {
[17:02:42.574]                           ns <- base::getNamespace("future")
[17:02:42.574]                           version <- ns[[".package"]][["version"]]
[17:02:42.574]                           if (is.null(version)) 
[17:02:42.574]                             version <- utils::packageVersion("future")
[17:02:42.574]                         }
[17:02:42.574]                         else {
[17:02:42.574]                           version <- NULL
[17:02:42.574]                         }
[17:02:42.574]                         if (!has_future || version < "1.8.0") {
[17:02:42.574]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:42.574]                             "", base::R.version$version.string), 
[17:02:42.574]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:42.574]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:42.574]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:42.574]                               "release", "version")], collapse = " "), 
[17:02:42.574]                             hostname = base::Sys.info()[["nodename"]])
[17:02:42.574]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:42.574]                             info)
[17:02:42.574]                           info <- base::paste(info, collapse = "; ")
[17:02:42.574]                           if (!has_future) {
[17:02:42.574]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:42.574]                               info)
[17:02:42.574]                           }
[17:02:42.574]                           else {
[17:02:42.574]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:42.574]                               info, version)
[17:02:42.574]                           }
[17:02:42.574]                           base::stop(msg)
[17:02:42.574]                         }
[17:02:42.574]                       })
[17:02:42.574]                     }
[17:02:42.574]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:42.574]                     base::options(mc.cores = 1L)
[17:02:42.574]                   }
[17:02:42.574]                   ...future.strategy.old <- future::plan("list")
[17:02:42.574]                   options(future.plan = NULL)
[17:02:42.574]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.574]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:42.574]                 }
[17:02:42.574]                 ...future.workdir <- getwd()
[17:02:42.574]             }
[17:02:42.574]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:42.574]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:42.574]         }
[17:02:42.574]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:42.574]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:42.574]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:42.574]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:42.574]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:42.574]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:42.574]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:42.574]             base::names(...future.oldOptions))
[17:02:42.574]     }
[17:02:42.574]     if (FALSE) {
[17:02:42.574]     }
[17:02:42.574]     else {
[17:02:42.574]         if (TRUE) {
[17:02:42.574]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:42.574]                 open = "w")
[17:02:42.574]         }
[17:02:42.574]         else {
[17:02:42.574]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:42.574]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:42.574]         }
[17:02:42.574]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:42.574]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:42.574]             base::sink(type = "output", split = FALSE)
[17:02:42.574]             base::close(...future.stdout)
[17:02:42.574]         }, add = TRUE)
[17:02:42.574]     }
[17:02:42.574]     ...future.frame <- base::sys.nframe()
[17:02:42.574]     ...future.conditions <- base::list()
[17:02:42.574]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:42.574]     if (FALSE) {
[17:02:42.574]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:42.574]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:42.574]     }
[17:02:42.574]     ...future.result <- base::tryCatch({
[17:02:42.574]         base::withCallingHandlers({
[17:02:42.574]             ...future.value <- base::withVisible(base::local({
[17:02:42.574]                 withCallingHandlers({
[17:02:42.574]                   subset(data, x < 3)$y
[17:02:42.574]                 }, immediateCondition = function(cond) {
[17:02:42.574]                   save_rds <- function (object, pathname, ...) 
[17:02:42.574]                   {
[17:02:42.574]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:42.574]                     if (file_test("-f", pathname_tmp)) {
[17:02:42.574]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.574]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:42.574]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.574]                         fi_tmp[["mtime"]])
[17:02:42.574]                     }
[17:02:42.574]                     tryCatch({
[17:02:42.574]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:42.574]                     }, error = function(ex) {
[17:02:42.574]                       msg <- conditionMessage(ex)
[17:02:42.574]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.574]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:42.574]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.574]                         fi_tmp[["mtime"]], msg)
[17:02:42.574]                       ex$message <- msg
[17:02:42.574]                       stop(ex)
[17:02:42.574]                     })
[17:02:42.574]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:42.574]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:42.574]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:42.574]                       fi_tmp <- file.info(pathname_tmp)
[17:02:42.574]                       fi <- file.info(pathname)
[17:02:42.574]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:42.574]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:42.574]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:42.574]                         fi[["size"]], fi[["mtime"]])
[17:02:42.574]                       stop(msg)
[17:02:42.574]                     }
[17:02:42.574]                     invisible(pathname)
[17:02:42.574]                   }
[17:02:42.574]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:42.574]                     rootPath = tempdir()) 
[17:02:42.574]                   {
[17:02:42.574]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:42.574]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:42.574]                       tmpdir = path, fileext = ".rds")
[17:02:42.574]                     save_rds(obj, file)
[17:02:42.574]                   }
[17:02:42.574]                   saveImmediateCondition(cond, path = "/tmp/RtmpkGmVuW/.future/immediateConditions")
[17:02:42.574]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.574]                   {
[17:02:42.574]                     inherits <- base::inherits
[17:02:42.574]                     invokeRestart <- base::invokeRestart
[17:02:42.574]                     is.null <- base::is.null
[17:02:42.574]                     muffled <- FALSE
[17:02:42.574]                     if (inherits(cond, "message")) {
[17:02:42.574]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:42.574]                       if (muffled) 
[17:02:42.574]                         invokeRestart("muffleMessage")
[17:02:42.574]                     }
[17:02:42.574]                     else if (inherits(cond, "warning")) {
[17:02:42.574]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:42.574]                       if (muffled) 
[17:02:42.574]                         invokeRestart("muffleWarning")
[17:02:42.574]                     }
[17:02:42.574]                     else if (inherits(cond, "condition")) {
[17:02:42.574]                       if (!is.null(pattern)) {
[17:02:42.574]                         computeRestarts <- base::computeRestarts
[17:02:42.574]                         grepl <- base::grepl
[17:02:42.574]                         restarts <- computeRestarts(cond)
[17:02:42.574]                         for (restart in restarts) {
[17:02:42.574]                           name <- restart$name
[17:02:42.574]                           if (is.null(name)) 
[17:02:42.574]                             next
[17:02:42.574]                           if (!grepl(pattern, name)) 
[17:02:42.574]                             next
[17:02:42.574]                           invokeRestart(restart)
[17:02:42.574]                           muffled <- TRUE
[17:02:42.574]                           break
[17:02:42.574]                         }
[17:02:42.574]                       }
[17:02:42.574]                     }
[17:02:42.574]                     invisible(muffled)
[17:02:42.574]                   }
[17:02:42.574]                   muffleCondition(cond)
[17:02:42.574]                 })
[17:02:42.574]             }))
[17:02:42.574]             future::FutureResult(value = ...future.value$value, 
[17:02:42.574]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.574]                   ...future.rng), globalenv = if (FALSE) 
[17:02:42.574]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:42.574]                     ...future.globalenv.names))
[17:02:42.574]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:42.574]         }, condition = base::local({
[17:02:42.574]             c <- base::c
[17:02:42.574]             inherits <- base::inherits
[17:02:42.574]             invokeRestart <- base::invokeRestart
[17:02:42.574]             length <- base::length
[17:02:42.574]             list <- base::list
[17:02:42.574]             seq.int <- base::seq.int
[17:02:42.574]             signalCondition <- base::signalCondition
[17:02:42.574]             sys.calls <- base::sys.calls
[17:02:42.574]             `[[` <- base::`[[`
[17:02:42.574]             `+` <- base::`+`
[17:02:42.574]             `<<-` <- base::`<<-`
[17:02:42.574]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:42.574]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:42.574]                   3L)]
[17:02:42.574]             }
[17:02:42.574]             function(cond) {
[17:02:42.574]                 is_error <- inherits(cond, "error")
[17:02:42.574]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:42.574]                   NULL)
[17:02:42.574]                 if (is_error) {
[17:02:42.574]                   sessionInformation <- function() {
[17:02:42.574]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:42.574]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:42.574]                       search = base::search(), system = base::Sys.info())
[17:02:42.574]                   }
[17:02:42.574]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.574]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:42.574]                     cond$call), session = sessionInformation(), 
[17:02:42.574]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:42.574]                   signalCondition(cond)
[17:02:42.574]                 }
[17:02:42.574]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:42.574]                 "immediateCondition"))) {
[17:02:42.574]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:42.574]                   ...future.conditions[[length(...future.conditions) + 
[17:02:42.574]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:42.574]                   if (TRUE && !signal) {
[17:02:42.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.574]                     {
[17:02:42.574]                       inherits <- base::inherits
[17:02:42.574]                       invokeRestart <- base::invokeRestart
[17:02:42.574]                       is.null <- base::is.null
[17:02:42.574]                       muffled <- FALSE
[17:02:42.574]                       if (inherits(cond, "message")) {
[17:02:42.574]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.574]                         if (muffled) 
[17:02:42.574]                           invokeRestart("muffleMessage")
[17:02:42.574]                       }
[17:02:42.574]                       else if (inherits(cond, "warning")) {
[17:02:42.574]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.574]                         if (muffled) 
[17:02:42.574]                           invokeRestart("muffleWarning")
[17:02:42.574]                       }
[17:02:42.574]                       else if (inherits(cond, "condition")) {
[17:02:42.574]                         if (!is.null(pattern)) {
[17:02:42.574]                           computeRestarts <- base::computeRestarts
[17:02:42.574]                           grepl <- base::grepl
[17:02:42.574]                           restarts <- computeRestarts(cond)
[17:02:42.574]                           for (restart in restarts) {
[17:02:42.574]                             name <- restart$name
[17:02:42.574]                             if (is.null(name)) 
[17:02:42.574]                               next
[17:02:42.574]                             if (!grepl(pattern, name)) 
[17:02:42.574]                               next
[17:02:42.574]                             invokeRestart(restart)
[17:02:42.574]                             muffled <- TRUE
[17:02:42.574]                             break
[17:02:42.574]                           }
[17:02:42.574]                         }
[17:02:42.574]                       }
[17:02:42.574]                       invisible(muffled)
[17:02:42.574]                     }
[17:02:42.574]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.574]                   }
[17:02:42.574]                 }
[17:02:42.574]                 else {
[17:02:42.574]                   if (TRUE) {
[17:02:42.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:42.574]                     {
[17:02:42.574]                       inherits <- base::inherits
[17:02:42.574]                       invokeRestart <- base::invokeRestart
[17:02:42.574]                       is.null <- base::is.null
[17:02:42.574]                       muffled <- FALSE
[17:02:42.574]                       if (inherits(cond, "message")) {
[17:02:42.574]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:42.574]                         if (muffled) 
[17:02:42.574]                           invokeRestart("muffleMessage")
[17:02:42.574]                       }
[17:02:42.574]                       else if (inherits(cond, "warning")) {
[17:02:42.574]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:42.574]                         if (muffled) 
[17:02:42.574]                           invokeRestart("muffleWarning")
[17:02:42.574]                       }
[17:02:42.574]                       else if (inherits(cond, "condition")) {
[17:02:42.574]                         if (!is.null(pattern)) {
[17:02:42.574]                           computeRestarts <- base::computeRestarts
[17:02:42.574]                           grepl <- base::grepl
[17:02:42.574]                           restarts <- computeRestarts(cond)
[17:02:42.574]                           for (restart in restarts) {
[17:02:42.574]                             name <- restart$name
[17:02:42.574]                             if (is.null(name)) 
[17:02:42.574]                               next
[17:02:42.574]                             if (!grepl(pattern, name)) 
[17:02:42.574]                               next
[17:02:42.574]                             invokeRestart(restart)
[17:02:42.574]                             muffled <- TRUE
[17:02:42.574]                             break
[17:02:42.574]                           }
[17:02:42.574]                         }
[17:02:42.574]                       }
[17:02:42.574]                       invisible(muffled)
[17:02:42.574]                     }
[17:02:42.574]                     muffleCondition(cond, pattern = "^muffle")
[17:02:42.574]                   }
[17:02:42.574]                 }
[17:02:42.574]             }
[17:02:42.574]         }))
[17:02:42.574]     }, error = function(ex) {
[17:02:42.574]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:42.574]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:42.574]                 ...future.rng), started = ...future.startTime, 
[17:02:42.574]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:42.574]             version = "1.8"), class = "FutureResult")
[17:02:42.574]     }, finally = {
[17:02:42.574]         if (!identical(...future.workdir, getwd())) 
[17:02:42.574]             setwd(...future.workdir)
[17:02:42.574]         {
[17:02:42.574]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:42.574]                 ...future.oldOptions$nwarnings <- NULL
[17:02:42.574]             }
[17:02:42.574]             base::options(...future.oldOptions)
[17:02:42.574]             if (.Platform$OS.type == "windows") {
[17:02:42.574]                 old_names <- names(...future.oldEnvVars)
[17:02:42.574]                 envs <- base::Sys.getenv()
[17:02:42.574]                 names <- names(envs)
[17:02:42.574]                 common <- intersect(names, old_names)
[17:02:42.574]                 added <- setdiff(names, old_names)
[17:02:42.574]                 removed <- setdiff(old_names, names)
[17:02:42.574]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:42.574]                   envs[common]]
[17:02:42.574]                 NAMES <- toupper(changed)
[17:02:42.574]                 args <- list()
[17:02:42.574]                 for (kk in seq_along(NAMES)) {
[17:02:42.574]                   name <- changed[[kk]]
[17:02:42.574]                   NAME <- NAMES[[kk]]
[17:02:42.574]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.574]                     next
[17:02:42.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.574]                 }
[17:02:42.574]                 NAMES <- toupper(added)
[17:02:42.574]                 for (kk in seq_along(NAMES)) {
[17:02:42.574]                   name <- added[[kk]]
[17:02:42.574]                   NAME <- NAMES[[kk]]
[17:02:42.574]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.574]                     next
[17:02:42.574]                   args[[name]] <- ""
[17:02:42.574]                 }
[17:02:42.574]                 NAMES <- toupper(removed)
[17:02:42.574]                 for (kk in seq_along(NAMES)) {
[17:02:42.574]                   name <- removed[[kk]]
[17:02:42.574]                   NAME <- NAMES[[kk]]
[17:02:42.574]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:42.574]                     next
[17:02:42.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:42.574]                 }
[17:02:42.574]                 if (length(args) > 0) 
[17:02:42.574]                   base::do.call(base::Sys.setenv, args = args)
[17:02:42.574]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:42.574]             }
[17:02:42.574]             else {
[17:02:42.574]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:42.574]             }
[17:02:42.574]             {
[17:02:42.574]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:42.574]                   0L) {
[17:02:42.574]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:42.574]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:42.574]                   base::options(opts)
[17:02:42.574]                 }
[17:02:42.574]                 {
[17:02:42.574]                   {
[17:02:42.574]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:42.574]                     NULL
[17:02:42.574]                   }
[17:02:42.574]                   options(future.plan = NULL)
[17:02:42.574]                   if (is.na(NA_character_)) 
[17:02:42.574]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:42.574]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:42.574]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:42.574]                     .init = FALSE)
[17:02:42.574]                 }
[17:02:42.574]             }
[17:02:42.574]         }
[17:02:42.574]     })
[17:02:42.574]     if (TRUE) {
[17:02:42.574]         base::sink(type = "output", split = FALSE)
[17:02:42.574]         if (TRUE) {
[17:02:42.574]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:42.574]         }
[17:02:42.574]         else {
[17:02:42.574]             ...future.result["stdout"] <- base::list(NULL)
[17:02:42.574]         }
[17:02:42.574]         base::close(...future.stdout)
[17:02:42.574]         ...future.stdout <- NULL
[17:02:42.574]     }
[17:02:42.574]     ...future.result$conditions <- ...future.conditions
[17:02:42.574]     ...future.result$finished <- base::Sys.time()
[17:02:42.574]     ...future.result
[17:02:42.574] }
[17:02:42.609]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.576] assign_globals() ...
[17:02:42.609]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.576] List of 1
[17:02:42.576]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:42.576]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:42.576]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:42.576]  - attr(*, "where")=List of 1
[17:02:42.576]   ..$ data:<environment: R_EmptyEnv> 
[17:02:42.576]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:42.576]  - attr(*, "resolved")= logi FALSE
[17:02:42.576]  - attr(*, "total_size")= num 160
[17:02:42.576]  - attr(*, "already-done")= logi TRUE
[17:02:42.609]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.582] - copied ‘data’ to environment
[17:02:42.609]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.582] assign_globals() ... done
[17:02:42.609]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.582] requestCore(): workers = 2
[17:02:42.610]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.584] MulticoreFuture started
[17:02:42.610]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.585] - Launch lazy future ... done
[17:02:42.610]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.585] run() for ‘MulticoreFuture’ ... done
[17:02:42.610]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.586] result() for MulticoreFuture ...
[17:02:42.610]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.596] result() for MulticoreFuture ...
[17:02:42.610]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.596] result() for MulticoreFuture ... done
[17:02:42.611]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.596] result() for MulticoreFuture ... done
[17:02:42.611]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.597] result() for MulticoreFuture ...
[17:02:42.611]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:42.597] result() for MulticoreFuture ... done
[17:02:42.611] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[17:02:42.612] plan(): Setting new future strategy stack:
[17:02:42.612] List of future strategies:
[17:02:42.612] 1. multisession:
[17:02:42.612]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:42.612]    - tweaked: FALSE
[17:02:42.612]    - call: plan(strategy)
[17:02:42.612] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:42.612] multisession:
[17:02:42.612] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:42.612] - tweaked: FALSE
[17:02:42.612] - call: plan(strategy)
[17:02:42.619] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:42.619] Not searching for globals
[17:02:42.620] - globals: [0] <none>
[17:02:42.620] getGlobalsAndPackages() ... DONE
[17:02:42.620] [local output] makeClusterPSOCK() ...
[17:02:42.665] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:42.667] [local output] Base port: 11853
[17:02:42.667] [local output] Getting setup options for 2 cluster nodes ...
[17:02:42.667] [local output]  - Node 1 of 2 ...
[17:02:42.667] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:42.668] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkGmVuW/worker.rank=1.parallelly.parent=43586.aa427772b349.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpkGmVuW/worker.rank=1.parallelly.parent=43586.aa427772b349.pid")'’
[17:02:42.862] - Possible to infer worker's PID: TRUE
[17:02:42.862] [local output] Rscript port: 11853

[17:02:42.862] [local output]  - Node 2 of 2 ...
[17:02:42.863] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:42.863] [local output] Rscript port: 11853

[17:02:42.864] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:42.864] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:42.864] [local output] Setting up PSOCK nodes in parallel
[17:02:42.864] List of 36
[17:02:42.864]  $ worker          : chr "localhost"
[17:02:42.864]   ..- attr(*, "localhost")= logi TRUE
[17:02:42.864]  $ master          : chr "localhost"
[17:02:42.864]  $ port            : int 11853
[17:02:42.864]  $ connectTimeout  : num 120
[17:02:42.864]  $ timeout         : num 2592000
[17:02:42.864]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:42.864]  $ homogeneous     : logi TRUE
[17:02:42.864]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:42.864]  $ rscript_envs    : NULL
[17:02:42.864]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:42.864]  $ rscript_startup : NULL
[17:02:42.864]  $ rscript_sh      : chr "sh"
[17:02:42.864]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:42.864]  $ methods         : logi TRUE
[17:02:42.864]  $ socketOptions   : chr "no-delay"
[17:02:42.864]  $ useXDR          : logi FALSE
[17:02:42.864]  $ outfile         : chr "/dev/null"
[17:02:42.864]  $ renice          : int NA
[17:02:42.864]  $ rshcmd          : NULL
[17:02:42.864]  $ user            : chr(0) 
[17:02:42.864]  $ revtunnel       : logi FALSE
[17:02:42.864]  $ rshlogfile      : NULL
[17:02:42.864]  $ rshopts         : chr(0) 
[17:02:42.864]  $ rank            : int 1
[17:02:42.864]  $ manual          : logi FALSE
[17:02:42.864]  $ dryrun          : logi FALSE
[17:02:42.864]  $ quiet           : logi FALSE
[17:02:42.864]  $ setup_strategy  : chr "parallel"
[17:02:42.864]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:42.864]  $ pidfile         : chr "/tmp/RtmpkGmVuW/worker.rank=1.parallelly.parent=43586.aa427772b349.pid"
[17:02:42.864]  $ rshcmd_label    : NULL
[17:02:42.864]  $ rsh_call        : NULL
[17:02:42.864]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:42.864]  $ localMachine    : logi TRUE
[17:02:42.864]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:42.864]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:42.864]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:42.864]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:42.864]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:42.864]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:42.864]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:42.864]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:42.864]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:42.864]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:42.864]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:42.864]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:42.864]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:42.864]  $ arguments       :List of 28
[17:02:42.864]   ..$ worker          : chr "localhost"
[17:02:42.864]   ..$ master          : NULL
[17:02:42.864]   ..$ port            : int 11853
[17:02:42.864]   ..$ connectTimeout  : num 120
[17:02:42.864]   ..$ timeout         : num 2592000
[17:02:42.864]   ..$ rscript         : NULL
[17:02:42.864]   ..$ homogeneous     : NULL
[17:02:42.864]   ..$ rscript_args    : NULL
[17:02:42.864]   ..$ rscript_envs    : NULL
[17:02:42.864]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:42.864]   ..$ rscript_startup : NULL
[17:02:42.864]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:42.864]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:42.864]   ..$ methods         : logi TRUE
[17:02:42.864]   ..$ socketOptions   : chr "no-delay"
[17:02:42.864]   ..$ useXDR          : logi FALSE
[17:02:42.864]   ..$ outfile         : chr "/dev/null"
[17:02:42.864]   ..$ renice          : int NA
[17:02:42.864]   ..$ rshcmd          : NULL
[17:02:42.864]   ..$ user            : NULL
[17:02:42.864]   ..$ revtunnel       : logi NA
[17:02:42.864]   ..$ rshlogfile      : NULL
[17:02:42.864]   ..$ rshopts         : NULL
[17:02:42.864]   ..$ rank            : int 1
[17:02:42.864]   ..$ manual          : logi FALSE
[17:02:42.864]   ..$ dryrun          : logi FALSE
[17:02:42.864]   ..$ quiet           : logi FALSE
[17:02:42.864]   ..$ setup_strategy  : chr "parallel"
[17:02:42.864]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:42.881] [local output] System call to launch all workers:
[17:02:42.882] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkGmVuW/worker.rank=1.parallelly.parent=43586.aa427772b349.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11853 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:42.882] [local output] Starting PSOCK main server
[17:02:42.887] [local output] Workers launched
[17:02:42.888] [local output] Waiting for workers to connect back
[17:02:42.888]  - [local output] 0 workers out of 2 ready
[17:02:43.157]  - [local output] 0 workers out of 2 ready
[17:02:43.157]  - [local output] 1 workers out of 2 ready
[17:02:43.158]  - [local output] 2 workers out of 2 ready
[17:02:43.158] [local output] Launching of workers completed
[17:02:43.158] [local output] Collecting session information from workers
[17:02:43.159] [local output]  - Worker #1 of 2
[17:02:43.159] [local output]  - Worker #2 of 2
[17:02:43.160] [local output] makeClusterPSOCK() ... done
[17:02:43.172] Packages needed by the future expression (n = 0): <none>
[17:02:43.173] Packages needed by future strategies (n = 0): <none>
[17:02:43.173] {
[17:02:43.173]     {
[17:02:43.173]         {
[17:02:43.173]             ...future.startTime <- base::Sys.time()
[17:02:43.173]             {
[17:02:43.173]                 {
[17:02:43.173]                   {
[17:02:43.173]                     {
[17:02:43.173]                       base::local({
[17:02:43.173]                         has_future <- base::requireNamespace("future", 
[17:02:43.173]                           quietly = TRUE)
[17:02:43.173]                         if (has_future) {
[17:02:43.173]                           ns <- base::getNamespace("future")
[17:02:43.173]                           version <- ns[[".package"]][["version"]]
[17:02:43.173]                           if (is.null(version)) 
[17:02:43.173]                             version <- utils::packageVersion("future")
[17:02:43.173]                         }
[17:02:43.173]                         else {
[17:02:43.173]                           version <- NULL
[17:02:43.173]                         }
[17:02:43.173]                         if (!has_future || version < "1.8.0") {
[17:02:43.173]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:43.173]                             "", base::R.version$version.string), 
[17:02:43.173]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:43.173]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:43.173]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:43.173]                               "release", "version")], collapse = " "), 
[17:02:43.173]                             hostname = base::Sys.info()[["nodename"]])
[17:02:43.173]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:43.173]                             info)
[17:02:43.173]                           info <- base::paste(info, collapse = "; ")
[17:02:43.173]                           if (!has_future) {
[17:02:43.173]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:43.173]                               info)
[17:02:43.173]                           }
[17:02:43.173]                           else {
[17:02:43.173]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:43.173]                               info, version)
[17:02:43.173]                           }
[17:02:43.173]                           base::stop(msg)
[17:02:43.173]                         }
[17:02:43.173]                       })
[17:02:43.173]                     }
[17:02:43.173]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:43.173]                     base::options(mc.cores = 1L)
[17:02:43.173]                   }
[17:02:43.173]                   ...future.strategy.old <- future::plan("list")
[17:02:43.173]                   options(future.plan = NULL)
[17:02:43.173]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.173]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:43.173]                 }
[17:02:43.173]                 ...future.workdir <- getwd()
[17:02:43.173]             }
[17:02:43.173]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:43.173]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:43.173]         }
[17:02:43.173]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:43.173]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:43.173]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:43.173]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:43.173]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:43.173]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:43.173]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:43.173]             base::names(...future.oldOptions))
[17:02:43.173]     }
[17:02:43.173]     if (FALSE) {
[17:02:43.173]     }
[17:02:43.173]     else {
[17:02:43.173]         if (TRUE) {
[17:02:43.173]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:43.173]                 open = "w")
[17:02:43.173]         }
[17:02:43.173]         else {
[17:02:43.173]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:43.173]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:43.173]         }
[17:02:43.173]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:43.173]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:43.173]             base::sink(type = "output", split = FALSE)
[17:02:43.173]             base::close(...future.stdout)
[17:02:43.173]         }, add = TRUE)
[17:02:43.173]     }
[17:02:43.173]     ...future.frame <- base::sys.nframe()
[17:02:43.173]     ...future.conditions <- base::list()
[17:02:43.173]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:43.173]     if (FALSE) {
[17:02:43.173]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:43.173]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:43.173]     }
[17:02:43.173]     ...future.result <- base::tryCatch({
[17:02:43.173]         base::withCallingHandlers({
[17:02:43.173]             ...future.value <- base::withVisible(base::local({
[17:02:43.173]                 ...future.makeSendCondition <- base::local({
[17:02:43.173]                   sendCondition <- NULL
[17:02:43.173]                   function(frame = 1L) {
[17:02:43.173]                     if (is.function(sendCondition)) 
[17:02:43.173]                       return(sendCondition)
[17:02:43.173]                     ns <- getNamespace("parallel")
[17:02:43.173]                     if (exists("sendData", mode = "function", 
[17:02:43.173]                       envir = ns)) {
[17:02:43.173]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:43.173]                         envir = ns)
[17:02:43.173]                       envir <- sys.frame(frame)
[17:02:43.173]                       master <- NULL
[17:02:43.173]                       while (!identical(envir, .GlobalEnv) && 
[17:02:43.173]                         !identical(envir, emptyenv())) {
[17:02:43.173]                         if (exists("master", mode = "list", envir = envir, 
[17:02:43.173]                           inherits = FALSE)) {
[17:02:43.173]                           master <- get("master", mode = "list", 
[17:02:43.173]                             envir = envir, inherits = FALSE)
[17:02:43.173]                           if (inherits(master, c("SOCKnode", 
[17:02:43.173]                             "SOCK0node"))) {
[17:02:43.173]                             sendCondition <<- function(cond) {
[17:02:43.173]                               data <- list(type = "VALUE", value = cond, 
[17:02:43.173]                                 success = TRUE)
[17:02:43.173]                               parallel_sendData(master, data)
[17:02:43.173]                             }
[17:02:43.173]                             return(sendCondition)
[17:02:43.173]                           }
[17:02:43.173]                         }
[17:02:43.173]                         frame <- frame + 1L
[17:02:43.173]                         envir <- sys.frame(frame)
[17:02:43.173]                       }
[17:02:43.173]                     }
[17:02:43.173]                     sendCondition <<- function(cond) NULL
[17:02:43.173]                   }
[17:02:43.173]                 })
[17:02:43.173]                 withCallingHandlers({
[17:02:43.173]                   NA
[17:02:43.173]                 }, immediateCondition = function(cond) {
[17:02:43.173]                   sendCondition <- ...future.makeSendCondition()
[17:02:43.173]                   sendCondition(cond)
[17:02:43.173]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.173]                   {
[17:02:43.173]                     inherits <- base::inherits
[17:02:43.173]                     invokeRestart <- base::invokeRestart
[17:02:43.173]                     is.null <- base::is.null
[17:02:43.173]                     muffled <- FALSE
[17:02:43.173]                     if (inherits(cond, "message")) {
[17:02:43.173]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:43.173]                       if (muffled) 
[17:02:43.173]                         invokeRestart("muffleMessage")
[17:02:43.173]                     }
[17:02:43.173]                     else if (inherits(cond, "warning")) {
[17:02:43.173]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:43.173]                       if (muffled) 
[17:02:43.173]                         invokeRestart("muffleWarning")
[17:02:43.173]                     }
[17:02:43.173]                     else if (inherits(cond, "condition")) {
[17:02:43.173]                       if (!is.null(pattern)) {
[17:02:43.173]                         computeRestarts <- base::computeRestarts
[17:02:43.173]                         grepl <- base::grepl
[17:02:43.173]                         restarts <- computeRestarts(cond)
[17:02:43.173]                         for (restart in restarts) {
[17:02:43.173]                           name <- restart$name
[17:02:43.173]                           if (is.null(name)) 
[17:02:43.173]                             next
[17:02:43.173]                           if (!grepl(pattern, name)) 
[17:02:43.173]                             next
[17:02:43.173]                           invokeRestart(restart)
[17:02:43.173]                           muffled <- TRUE
[17:02:43.173]                           break
[17:02:43.173]                         }
[17:02:43.173]                       }
[17:02:43.173]                     }
[17:02:43.173]                     invisible(muffled)
[17:02:43.173]                   }
[17:02:43.173]                   muffleCondition(cond)
[17:02:43.173]                 })
[17:02:43.173]             }))
[17:02:43.173]             future::FutureResult(value = ...future.value$value, 
[17:02:43.173]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.173]                   ...future.rng), globalenv = if (FALSE) 
[17:02:43.173]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:43.173]                     ...future.globalenv.names))
[17:02:43.173]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:43.173]         }, condition = base::local({
[17:02:43.173]             c <- base::c
[17:02:43.173]             inherits <- base::inherits
[17:02:43.173]             invokeRestart <- base::invokeRestart
[17:02:43.173]             length <- base::length
[17:02:43.173]             list <- base::list
[17:02:43.173]             seq.int <- base::seq.int
[17:02:43.173]             signalCondition <- base::signalCondition
[17:02:43.173]             sys.calls <- base::sys.calls
[17:02:43.173]             `[[` <- base::`[[`
[17:02:43.173]             `+` <- base::`+`
[17:02:43.173]             `<<-` <- base::`<<-`
[17:02:43.173]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:43.173]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:43.173]                   3L)]
[17:02:43.173]             }
[17:02:43.173]             function(cond) {
[17:02:43.173]                 is_error <- inherits(cond, "error")
[17:02:43.173]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:43.173]                   NULL)
[17:02:43.173]                 if (is_error) {
[17:02:43.173]                   sessionInformation <- function() {
[17:02:43.173]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:43.173]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:43.173]                       search = base::search(), system = base::Sys.info())
[17:02:43.173]                   }
[17:02:43.173]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.173]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:43.173]                     cond$call), session = sessionInformation(), 
[17:02:43.173]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:43.173]                   signalCondition(cond)
[17:02:43.173]                 }
[17:02:43.173]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:43.173]                 "immediateCondition"))) {
[17:02:43.173]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:43.173]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.173]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:43.173]                   if (TRUE && !signal) {
[17:02:43.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.173]                     {
[17:02:43.173]                       inherits <- base::inherits
[17:02:43.173]                       invokeRestart <- base::invokeRestart
[17:02:43.173]                       is.null <- base::is.null
[17:02:43.173]                       muffled <- FALSE
[17:02:43.173]                       if (inherits(cond, "message")) {
[17:02:43.173]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.173]                         if (muffled) 
[17:02:43.173]                           invokeRestart("muffleMessage")
[17:02:43.173]                       }
[17:02:43.173]                       else if (inherits(cond, "warning")) {
[17:02:43.173]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.173]                         if (muffled) 
[17:02:43.173]                           invokeRestart("muffleWarning")
[17:02:43.173]                       }
[17:02:43.173]                       else if (inherits(cond, "condition")) {
[17:02:43.173]                         if (!is.null(pattern)) {
[17:02:43.173]                           computeRestarts <- base::computeRestarts
[17:02:43.173]                           grepl <- base::grepl
[17:02:43.173]                           restarts <- computeRestarts(cond)
[17:02:43.173]                           for (restart in restarts) {
[17:02:43.173]                             name <- restart$name
[17:02:43.173]                             if (is.null(name)) 
[17:02:43.173]                               next
[17:02:43.173]                             if (!grepl(pattern, name)) 
[17:02:43.173]                               next
[17:02:43.173]                             invokeRestart(restart)
[17:02:43.173]                             muffled <- TRUE
[17:02:43.173]                             break
[17:02:43.173]                           }
[17:02:43.173]                         }
[17:02:43.173]                       }
[17:02:43.173]                       invisible(muffled)
[17:02:43.173]                     }
[17:02:43.173]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.173]                   }
[17:02:43.173]                 }
[17:02:43.173]                 else {
[17:02:43.173]                   if (TRUE) {
[17:02:43.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.173]                     {
[17:02:43.173]                       inherits <- base::inherits
[17:02:43.173]                       invokeRestart <- base::invokeRestart
[17:02:43.173]                       is.null <- base::is.null
[17:02:43.173]                       muffled <- FALSE
[17:02:43.173]                       if (inherits(cond, "message")) {
[17:02:43.173]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.173]                         if (muffled) 
[17:02:43.173]                           invokeRestart("muffleMessage")
[17:02:43.173]                       }
[17:02:43.173]                       else if (inherits(cond, "warning")) {
[17:02:43.173]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.173]                         if (muffled) 
[17:02:43.173]                           invokeRestart("muffleWarning")
[17:02:43.173]                       }
[17:02:43.173]                       else if (inherits(cond, "condition")) {
[17:02:43.173]                         if (!is.null(pattern)) {
[17:02:43.173]                           computeRestarts <- base::computeRestarts
[17:02:43.173]                           grepl <- base::grepl
[17:02:43.173]                           restarts <- computeRestarts(cond)
[17:02:43.173]                           for (restart in restarts) {
[17:02:43.173]                             name <- restart$name
[17:02:43.173]                             if (is.null(name)) 
[17:02:43.173]                               next
[17:02:43.173]                             if (!grepl(pattern, name)) 
[17:02:43.173]                               next
[17:02:43.173]                             invokeRestart(restart)
[17:02:43.173]                             muffled <- TRUE
[17:02:43.173]                             break
[17:02:43.173]                           }
[17:02:43.173]                         }
[17:02:43.173]                       }
[17:02:43.173]                       invisible(muffled)
[17:02:43.173]                     }
[17:02:43.173]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.173]                   }
[17:02:43.173]                 }
[17:02:43.173]             }
[17:02:43.173]         }))
[17:02:43.173]     }, error = function(ex) {
[17:02:43.173]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:43.173]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.173]                 ...future.rng), started = ...future.startTime, 
[17:02:43.173]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:43.173]             version = "1.8"), class = "FutureResult")
[17:02:43.173]     }, finally = {
[17:02:43.173]         if (!identical(...future.workdir, getwd())) 
[17:02:43.173]             setwd(...future.workdir)
[17:02:43.173]         {
[17:02:43.173]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:43.173]                 ...future.oldOptions$nwarnings <- NULL
[17:02:43.173]             }
[17:02:43.173]             base::options(...future.oldOptions)
[17:02:43.173]             if (.Platform$OS.type == "windows") {
[17:02:43.173]                 old_names <- names(...future.oldEnvVars)
[17:02:43.173]                 envs <- base::Sys.getenv()
[17:02:43.173]                 names <- names(envs)
[17:02:43.173]                 common <- intersect(names, old_names)
[17:02:43.173]                 added <- setdiff(names, old_names)
[17:02:43.173]                 removed <- setdiff(old_names, names)
[17:02:43.173]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:43.173]                   envs[common]]
[17:02:43.173]                 NAMES <- toupper(changed)
[17:02:43.173]                 args <- list()
[17:02:43.173]                 for (kk in seq_along(NAMES)) {
[17:02:43.173]                   name <- changed[[kk]]
[17:02:43.173]                   NAME <- NAMES[[kk]]
[17:02:43.173]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.173]                     next
[17:02:43.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.173]                 }
[17:02:43.173]                 NAMES <- toupper(added)
[17:02:43.173]                 for (kk in seq_along(NAMES)) {
[17:02:43.173]                   name <- added[[kk]]
[17:02:43.173]                   NAME <- NAMES[[kk]]
[17:02:43.173]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.173]                     next
[17:02:43.173]                   args[[name]] <- ""
[17:02:43.173]                 }
[17:02:43.173]                 NAMES <- toupper(removed)
[17:02:43.173]                 for (kk in seq_along(NAMES)) {
[17:02:43.173]                   name <- removed[[kk]]
[17:02:43.173]                   NAME <- NAMES[[kk]]
[17:02:43.173]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.173]                     next
[17:02:43.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.173]                 }
[17:02:43.173]                 if (length(args) > 0) 
[17:02:43.173]                   base::do.call(base::Sys.setenv, args = args)
[17:02:43.173]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:43.173]             }
[17:02:43.173]             else {
[17:02:43.173]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:43.173]             }
[17:02:43.173]             {
[17:02:43.173]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:43.173]                   0L) {
[17:02:43.173]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:43.173]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:43.173]                   base::options(opts)
[17:02:43.173]                 }
[17:02:43.173]                 {
[17:02:43.173]                   {
[17:02:43.173]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:43.173]                     NULL
[17:02:43.173]                   }
[17:02:43.173]                   options(future.plan = NULL)
[17:02:43.173]                   if (is.na(NA_character_)) 
[17:02:43.173]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.173]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:43.173]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:43.173]                     .init = FALSE)
[17:02:43.173]                 }
[17:02:43.173]             }
[17:02:43.173]         }
[17:02:43.173]     })
[17:02:43.173]     if (TRUE) {
[17:02:43.173]         base::sink(type = "output", split = FALSE)
[17:02:43.173]         if (TRUE) {
[17:02:43.173]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:43.173]         }
[17:02:43.173]         else {
[17:02:43.173]             ...future.result["stdout"] <- base::list(NULL)
[17:02:43.173]         }
[17:02:43.173]         base::close(...future.stdout)
[17:02:43.173]         ...future.stdout <- NULL
[17:02:43.173]     }
[17:02:43.173]     ...future.result$conditions <- ...future.conditions
[17:02:43.173]     ...future.result$finished <- base::Sys.time()
[17:02:43.173]     ...future.result
[17:02:43.173] }
[17:02:43.225] MultisessionFuture started
[17:02:43.226] result() for ClusterFuture ...
[17:02:43.226] receiveMessageFromWorker() for ClusterFuture ...
[17:02:43.226] - Validating connection of MultisessionFuture
[17:02:43.258] - received message: FutureResult
[17:02:43.258] - Received FutureResult
[17:02:43.258] - Erased future from FutureRegistry
[17:02:43.258] result() for ClusterFuture ...
[17:02:43.259] - result already collected: FutureResult
[17:02:43.259] result() for ClusterFuture ... done
[17:02:43.259] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:43.259] result() for ClusterFuture ... done
[17:02:43.259] result() for ClusterFuture ...
[17:02:43.259] - result already collected: FutureResult
[17:02:43.259] result() for ClusterFuture ... done
[17:02:43.260] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:43.264] plan(): nbrOfWorkers() = 2
[17:02:43.264] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:02:43.264] Searching for globals...
[17:02:43.265] - globals found: [1] ‘getOption’
[17:02:43.265] Searching for globals ... DONE
[17:02:43.265] Resolving globals: FALSE
[17:02:43.266] 
[17:02:43.266] 
[17:02:43.266] getGlobalsAndPackages() ... DONE
[17:02:43.266] run() for ‘Future’ ...
[17:02:43.266] - state: ‘created’
[17:02:43.266] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:43.281] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:43.281] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:43.281]   - Field: ‘node’
[17:02:43.281]   - Field: ‘label’
[17:02:43.281]   - Field: ‘local’
[17:02:43.281]   - Field: ‘owner’
[17:02:43.281]   - Field: ‘envir’
[17:02:43.281]   - Field: ‘workers’
[17:02:43.281]   - Field: ‘packages’
[17:02:43.281]   - Field: ‘gc’
[17:02:43.282]   - Field: ‘conditions’
[17:02:43.282]   - Field: ‘persistent’
[17:02:43.282]   - Field: ‘expr’
[17:02:43.282]   - Field: ‘uuid’
[17:02:43.282]   - Field: ‘seed’
[17:02:43.282]   - Field: ‘version’
[17:02:43.282]   - Field: ‘result’
[17:02:43.282]   - Field: ‘asynchronous’
[17:02:43.283]   - Field: ‘calls’
[17:02:43.283]   - Field: ‘globals’
[17:02:43.283]   - Field: ‘stdout’
[17:02:43.283]   - Field: ‘earlySignal’
[17:02:43.283]   - Field: ‘lazy’
[17:02:43.283]   - Field: ‘state’
[17:02:43.283] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:43.283] - Launch lazy future ...
[17:02:43.284] Packages needed by the future expression (n = 0): <none>
[17:02:43.284] Packages needed by future strategies (n = 0): <none>
[17:02:43.284] {
[17:02:43.284]     {
[17:02:43.284]         {
[17:02:43.284]             ...future.startTime <- base::Sys.time()
[17:02:43.284]             {
[17:02:43.284]                 {
[17:02:43.284]                   {
[17:02:43.284]                     {
[17:02:43.284]                       base::local({
[17:02:43.284]                         has_future <- base::requireNamespace("future", 
[17:02:43.284]                           quietly = TRUE)
[17:02:43.284]                         if (has_future) {
[17:02:43.284]                           ns <- base::getNamespace("future")
[17:02:43.284]                           version <- ns[[".package"]][["version"]]
[17:02:43.284]                           if (is.null(version)) 
[17:02:43.284]                             version <- utils::packageVersion("future")
[17:02:43.284]                         }
[17:02:43.284]                         else {
[17:02:43.284]                           version <- NULL
[17:02:43.284]                         }
[17:02:43.284]                         if (!has_future || version < "1.8.0") {
[17:02:43.284]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:43.284]                             "", base::R.version$version.string), 
[17:02:43.284]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:43.284]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:43.284]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:43.284]                               "release", "version")], collapse = " "), 
[17:02:43.284]                             hostname = base::Sys.info()[["nodename"]])
[17:02:43.284]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:43.284]                             info)
[17:02:43.284]                           info <- base::paste(info, collapse = "; ")
[17:02:43.284]                           if (!has_future) {
[17:02:43.284]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:43.284]                               info)
[17:02:43.284]                           }
[17:02:43.284]                           else {
[17:02:43.284]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:43.284]                               info, version)
[17:02:43.284]                           }
[17:02:43.284]                           base::stop(msg)
[17:02:43.284]                         }
[17:02:43.284]                       })
[17:02:43.284]                     }
[17:02:43.284]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:43.284]                     base::options(mc.cores = 1L)
[17:02:43.284]                   }
[17:02:43.284]                   ...future.strategy.old <- future::plan("list")
[17:02:43.284]                   options(future.plan = NULL)
[17:02:43.284]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.284]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:43.284]                 }
[17:02:43.284]                 ...future.workdir <- getwd()
[17:02:43.284]             }
[17:02:43.284]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:43.284]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:43.284]         }
[17:02:43.284]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:02:43.284]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:43.284]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:02:43.284]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:43.284]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:43.284]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:43.284]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:43.284]             base::names(...future.oldOptions))
[17:02:43.284]     }
[17:02:43.284]     if (FALSE) {
[17:02:43.284]     }
[17:02:43.284]     else {
[17:02:43.284]         if (TRUE) {
[17:02:43.284]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:43.284]                 open = "w")
[17:02:43.284]         }
[17:02:43.284]         else {
[17:02:43.284]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:43.284]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:43.284]         }
[17:02:43.284]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:43.284]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:43.284]             base::sink(type = "output", split = FALSE)
[17:02:43.284]             base::close(...future.stdout)
[17:02:43.284]         }, add = TRUE)
[17:02:43.284]     }
[17:02:43.284]     ...future.frame <- base::sys.nframe()
[17:02:43.284]     ...future.conditions <- base::list()
[17:02:43.284]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:43.284]     if (FALSE) {
[17:02:43.284]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:43.284]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:43.284]     }
[17:02:43.284]     ...future.result <- base::tryCatch({
[17:02:43.284]         base::withCallingHandlers({
[17:02:43.284]             ...future.value <- base::withVisible(base::local({
[17:02:43.284]                 ...future.makeSendCondition <- base::local({
[17:02:43.284]                   sendCondition <- NULL
[17:02:43.284]                   function(frame = 1L) {
[17:02:43.284]                     if (is.function(sendCondition)) 
[17:02:43.284]                       return(sendCondition)
[17:02:43.284]                     ns <- getNamespace("parallel")
[17:02:43.284]                     if (exists("sendData", mode = "function", 
[17:02:43.284]                       envir = ns)) {
[17:02:43.284]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:43.284]                         envir = ns)
[17:02:43.284]                       envir <- sys.frame(frame)
[17:02:43.284]                       master <- NULL
[17:02:43.284]                       while (!identical(envir, .GlobalEnv) && 
[17:02:43.284]                         !identical(envir, emptyenv())) {
[17:02:43.284]                         if (exists("master", mode = "list", envir = envir, 
[17:02:43.284]                           inherits = FALSE)) {
[17:02:43.284]                           master <- get("master", mode = "list", 
[17:02:43.284]                             envir = envir, inherits = FALSE)
[17:02:43.284]                           if (inherits(master, c("SOCKnode", 
[17:02:43.284]                             "SOCK0node"))) {
[17:02:43.284]                             sendCondition <<- function(cond) {
[17:02:43.284]                               data <- list(type = "VALUE", value = cond, 
[17:02:43.284]                                 success = TRUE)
[17:02:43.284]                               parallel_sendData(master, data)
[17:02:43.284]                             }
[17:02:43.284]                             return(sendCondition)
[17:02:43.284]                           }
[17:02:43.284]                         }
[17:02:43.284]                         frame <- frame + 1L
[17:02:43.284]                         envir <- sys.frame(frame)
[17:02:43.284]                       }
[17:02:43.284]                     }
[17:02:43.284]                     sendCondition <<- function(cond) NULL
[17:02:43.284]                   }
[17:02:43.284]                 })
[17:02:43.284]                 withCallingHandlers({
[17:02:43.284]                   getOption("future.globals.onMissing")
[17:02:43.284]                 }, immediateCondition = function(cond) {
[17:02:43.284]                   sendCondition <- ...future.makeSendCondition()
[17:02:43.284]                   sendCondition(cond)
[17:02:43.284]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.284]                   {
[17:02:43.284]                     inherits <- base::inherits
[17:02:43.284]                     invokeRestart <- base::invokeRestart
[17:02:43.284]                     is.null <- base::is.null
[17:02:43.284]                     muffled <- FALSE
[17:02:43.284]                     if (inherits(cond, "message")) {
[17:02:43.284]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:43.284]                       if (muffled) 
[17:02:43.284]                         invokeRestart("muffleMessage")
[17:02:43.284]                     }
[17:02:43.284]                     else if (inherits(cond, "warning")) {
[17:02:43.284]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:43.284]                       if (muffled) 
[17:02:43.284]                         invokeRestart("muffleWarning")
[17:02:43.284]                     }
[17:02:43.284]                     else if (inherits(cond, "condition")) {
[17:02:43.284]                       if (!is.null(pattern)) {
[17:02:43.284]                         computeRestarts <- base::computeRestarts
[17:02:43.284]                         grepl <- base::grepl
[17:02:43.284]                         restarts <- computeRestarts(cond)
[17:02:43.284]                         for (restart in restarts) {
[17:02:43.284]                           name <- restart$name
[17:02:43.284]                           if (is.null(name)) 
[17:02:43.284]                             next
[17:02:43.284]                           if (!grepl(pattern, name)) 
[17:02:43.284]                             next
[17:02:43.284]                           invokeRestart(restart)
[17:02:43.284]                           muffled <- TRUE
[17:02:43.284]                           break
[17:02:43.284]                         }
[17:02:43.284]                       }
[17:02:43.284]                     }
[17:02:43.284]                     invisible(muffled)
[17:02:43.284]                   }
[17:02:43.284]                   muffleCondition(cond)
[17:02:43.284]                 })
[17:02:43.284]             }))
[17:02:43.284]             future::FutureResult(value = ...future.value$value, 
[17:02:43.284]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.284]                   ...future.rng), globalenv = if (FALSE) 
[17:02:43.284]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:43.284]                     ...future.globalenv.names))
[17:02:43.284]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:43.284]         }, condition = base::local({
[17:02:43.284]             c <- base::c
[17:02:43.284]             inherits <- base::inherits
[17:02:43.284]             invokeRestart <- base::invokeRestart
[17:02:43.284]             length <- base::length
[17:02:43.284]             list <- base::list
[17:02:43.284]             seq.int <- base::seq.int
[17:02:43.284]             signalCondition <- base::signalCondition
[17:02:43.284]             sys.calls <- base::sys.calls
[17:02:43.284]             `[[` <- base::`[[`
[17:02:43.284]             `+` <- base::`+`
[17:02:43.284]             `<<-` <- base::`<<-`
[17:02:43.284]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:43.284]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:43.284]                   3L)]
[17:02:43.284]             }
[17:02:43.284]             function(cond) {
[17:02:43.284]                 is_error <- inherits(cond, "error")
[17:02:43.284]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:43.284]                   NULL)
[17:02:43.284]                 if (is_error) {
[17:02:43.284]                   sessionInformation <- function() {
[17:02:43.284]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:43.284]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:43.284]                       search = base::search(), system = base::Sys.info())
[17:02:43.284]                   }
[17:02:43.284]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.284]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:43.284]                     cond$call), session = sessionInformation(), 
[17:02:43.284]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:43.284]                   signalCondition(cond)
[17:02:43.284]                 }
[17:02:43.284]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:43.284]                 "immediateCondition"))) {
[17:02:43.284]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:43.284]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.284]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:43.284]                   if (TRUE && !signal) {
[17:02:43.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.284]                     {
[17:02:43.284]                       inherits <- base::inherits
[17:02:43.284]                       invokeRestart <- base::invokeRestart
[17:02:43.284]                       is.null <- base::is.null
[17:02:43.284]                       muffled <- FALSE
[17:02:43.284]                       if (inherits(cond, "message")) {
[17:02:43.284]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.284]                         if (muffled) 
[17:02:43.284]                           invokeRestart("muffleMessage")
[17:02:43.284]                       }
[17:02:43.284]                       else if (inherits(cond, "warning")) {
[17:02:43.284]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.284]                         if (muffled) 
[17:02:43.284]                           invokeRestart("muffleWarning")
[17:02:43.284]                       }
[17:02:43.284]                       else if (inherits(cond, "condition")) {
[17:02:43.284]                         if (!is.null(pattern)) {
[17:02:43.284]                           computeRestarts <- base::computeRestarts
[17:02:43.284]                           grepl <- base::grepl
[17:02:43.284]                           restarts <- computeRestarts(cond)
[17:02:43.284]                           for (restart in restarts) {
[17:02:43.284]                             name <- restart$name
[17:02:43.284]                             if (is.null(name)) 
[17:02:43.284]                               next
[17:02:43.284]                             if (!grepl(pattern, name)) 
[17:02:43.284]                               next
[17:02:43.284]                             invokeRestart(restart)
[17:02:43.284]                             muffled <- TRUE
[17:02:43.284]                             break
[17:02:43.284]                           }
[17:02:43.284]                         }
[17:02:43.284]                       }
[17:02:43.284]                       invisible(muffled)
[17:02:43.284]                     }
[17:02:43.284]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.284]                   }
[17:02:43.284]                 }
[17:02:43.284]                 else {
[17:02:43.284]                   if (TRUE) {
[17:02:43.284]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.284]                     {
[17:02:43.284]                       inherits <- base::inherits
[17:02:43.284]                       invokeRestart <- base::invokeRestart
[17:02:43.284]                       is.null <- base::is.null
[17:02:43.284]                       muffled <- FALSE
[17:02:43.284]                       if (inherits(cond, "message")) {
[17:02:43.284]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.284]                         if (muffled) 
[17:02:43.284]                           invokeRestart("muffleMessage")
[17:02:43.284]                       }
[17:02:43.284]                       else if (inherits(cond, "warning")) {
[17:02:43.284]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.284]                         if (muffled) 
[17:02:43.284]                           invokeRestart("muffleWarning")
[17:02:43.284]                       }
[17:02:43.284]                       else if (inherits(cond, "condition")) {
[17:02:43.284]                         if (!is.null(pattern)) {
[17:02:43.284]                           computeRestarts <- base::computeRestarts
[17:02:43.284]                           grepl <- base::grepl
[17:02:43.284]                           restarts <- computeRestarts(cond)
[17:02:43.284]                           for (restart in restarts) {
[17:02:43.284]                             name <- restart$name
[17:02:43.284]                             if (is.null(name)) 
[17:02:43.284]                               next
[17:02:43.284]                             if (!grepl(pattern, name)) 
[17:02:43.284]                               next
[17:02:43.284]                             invokeRestart(restart)
[17:02:43.284]                             muffled <- TRUE
[17:02:43.284]                             break
[17:02:43.284]                           }
[17:02:43.284]                         }
[17:02:43.284]                       }
[17:02:43.284]                       invisible(muffled)
[17:02:43.284]                     }
[17:02:43.284]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.284]                   }
[17:02:43.284]                 }
[17:02:43.284]             }
[17:02:43.284]         }))
[17:02:43.284]     }, error = function(ex) {
[17:02:43.284]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:43.284]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.284]                 ...future.rng), started = ...future.startTime, 
[17:02:43.284]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:43.284]             version = "1.8"), class = "FutureResult")
[17:02:43.284]     }, finally = {
[17:02:43.284]         if (!identical(...future.workdir, getwd())) 
[17:02:43.284]             setwd(...future.workdir)
[17:02:43.284]         {
[17:02:43.284]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:43.284]                 ...future.oldOptions$nwarnings <- NULL
[17:02:43.284]             }
[17:02:43.284]             base::options(...future.oldOptions)
[17:02:43.284]             if (.Platform$OS.type == "windows") {
[17:02:43.284]                 old_names <- names(...future.oldEnvVars)
[17:02:43.284]                 envs <- base::Sys.getenv()
[17:02:43.284]                 names <- names(envs)
[17:02:43.284]                 common <- intersect(names, old_names)
[17:02:43.284]                 added <- setdiff(names, old_names)
[17:02:43.284]                 removed <- setdiff(old_names, names)
[17:02:43.284]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:43.284]                   envs[common]]
[17:02:43.284]                 NAMES <- toupper(changed)
[17:02:43.284]                 args <- list()
[17:02:43.284]                 for (kk in seq_along(NAMES)) {
[17:02:43.284]                   name <- changed[[kk]]
[17:02:43.284]                   NAME <- NAMES[[kk]]
[17:02:43.284]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.284]                     next
[17:02:43.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.284]                 }
[17:02:43.284]                 NAMES <- toupper(added)
[17:02:43.284]                 for (kk in seq_along(NAMES)) {
[17:02:43.284]                   name <- added[[kk]]
[17:02:43.284]                   NAME <- NAMES[[kk]]
[17:02:43.284]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.284]                     next
[17:02:43.284]                   args[[name]] <- ""
[17:02:43.284]                 }
[17:02:43.284]                 NAMES <- toupper(removed)
[17:02:43.284]                 for (kk in seq_along(NAMES)) {
[17:02:43.284]                   name <- removed[[kk]]
[17:02:43.284]                   NAME <- NAMES[[kk]]
[17:02:43.284]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.284]                     next
[17:02:43.284]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.284]                 }
[17:02:43.284]                 if (length(args) > 0) 
[17:02:43.284]                   base::do.call(base::Sys.setenv, args = args)
[17:02:43.284]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:43.284]             }
[17:02:43.284]             else {
[17:02:43.284]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:43.284]             }
[17:02:43.284]             {
[17:02:43.284]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:43.284]                   0L) {
[17:02:43.284]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:43.284]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:43.284]                   base::options(opts)
[17:02:43.284]                 }
[17:02:43.284]                 {
[17:02:43.284]                   {
[17:02:43.284]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:43.284]                     NULL
[17:02:43.284]                   }
[17:02:43.284]                   options(future.plan = NULL)
[17:02:43.284]                   if (is.na(NA_character_)) 
[17:02:43.284]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.284]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:43.284]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:43.284]                     .init = FALSE)
[17:02:43.284]                 }
[17:02:43.284]             }
[17:02:43.284]         }
[17:02:43.284]     })
[17:02:43.284]     if (TRUE) {
[17:02:43.284]         base::sink(type = "output", split = FALSE)
[17:02:43.284]         if (TRUE) {
[17:02:43.284]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:43.284]         }
[17:02:43.284]         else {
[17:02:43.284]             ...future.result["stdout"] <- base::list(NULL)
[17:02:43.284]         }
[17:02:43.284]         base::close(...future.stdout)
[17:02:43.284]         ...future.stdout <- NULL
[17:02:43.284]     }
[17:02:43.284]     ...future.result$conditions <- ...future.conditions
[17:02:43.284]     ...future.result$finished <- base::Sys.time()
[17:02:43.284]     ...future.result
[17:02:43.284] }
[17:02:43.288] MultisessionFuture started
[17:02:43.288] - Launch lazy future ... done
[17:02:43.288] run() for ‘MultisessionFuture’ ... done
[17:02:43.288] result() for ClusterFuture ...
[17:02:43.288] receiveMessageFromWorker() for ClusterFuture ...
[17:02:43.289] - Validating connection of MultisessionFuture
[17:02:43.289] - received message: FutureResult
[17:02:43.290] - Received FutureResult
[17:02:43.290] - Erased future from FutureRegistry
[17:02:43.290] result() for ClusterFuture ...
[17:02:43.290] - result already collected: FutureResult
[17:02:43.290] result() for ClusterFuture ... done
[17:02:43.290] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:43.290] result() for ClusterFuture ... done
[17:02:43.290] result() for ClusterFuture ...
[17:02:43.291] - result already collected: FutureResult
[17:02:43.291] result() for ClusterFuture ... done
[17:02:43.291] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:43.291] Searching for globals...
[17:02:43.292] - globals found: [1] ‘getOption’
[17:02:43.292] Searching for globals ... DONE
[17:02:43.292] Resolving globals: FALSE
[17:02:43.293] 
[17:02:43.293] 
[17:02:43.293] getGlobalsAndPackages() ... DONE
[17:02:43.293] run() for ‘Future’ ...
[17:02:43.293] - state: ‘created’
[17:02:43.293] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:43.308] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:43.308] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:43.309]   - Field: ‘node’
[17:02:43.309]   - Field: ‘label’
[17:02:43.309]   - Field: ‘local’
[17:02:43.309]   - Field: ‘owner’
[17:02:43.309]   - Field: ‘envir’
[17:02:43.309]   - Field: ‘workers’
[17:02:43.309]   - Field: ‘packages’
[17:02:43.309]   - Field: ‘gc’
[17:02:43.309]   - Field: ‘conditions’
[17:02:43.310]   - Field: ‘persistent’
[17:02:43.310]   - Field: ‘expr’
[17:02:43.310]   - Field: ‘uuid’
[17:02:43.310]   - Field: ‘seed’
[17:02:43.310]   - Field: ‘version’
[17:02:43.310]   - Field: ‘result’
[17:02:43.310]   - Field: ‘asynchronous’
[17:02:43.310]   - Field: ‘calls’
[17:02:43.310]   - Field: ‘globals’
[17:02:43.311]   - Field: ‘stdout’
[17:02:43.311]   - Field: ‘earlySignal’
[17:02:43.311]   - Field: ‘lazy’
[17:02:43.311]   - Field: ‘state’
[17:02:43.311] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:43.311] - Launch lazy future ...
[17:02:43.311] Packages needed by the future expression (n = 0): <none>
[17:02:43.312] Packages needed by future strategies (n = 0): <none>
[17:02:43.312] {
[17:02:43.312]     {
[17:02:43.312]         {
[17:02:43.312]             ...future.startTime <- base::Sys.time()
[17:02:43.312]             {
[17:02:43.312]                 {
[17:02:43.312]                   {
[17:02:43.312]                     {
[17:02:43.312]                       base::local({
[17:02:43.312]                         has_future <- base::requireNamespace("future", 
[17:02:43.312]                           quietly = TRUE)
[17:02:43.312]                         if (has_future) {
[17:02:43.312]                           ns <- base::getNamespace("future")
[17:02:43.312]                           version <- ns[[".package"]][["version"]]
[17:02:43.312]                           if (is.null(version)) 
[17:02:43.312]                             version <- utils::packageVersion("future")
[17:02:43.312]                         }
[17:02:43.312]                         else {
[17:02:43.312]                           version <- NULL
[17:02:43.312]                         }
[17:02:43.312]                         if (!has_future || version < "1.8.0") {
[17:02:43.312]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:43.312]                             "", base::R.version$version.string), 
[17:02:43.312]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:43.312]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:43.312]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:43.312]                               "release", "version")], collapse = " "), 
[17:02:43.312]                             hostname = base::Sys.info()[["nodename"]])
[17:02:43.312]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:43.312]                             info)
[17:02:43.312]                           info <- base::paste(info, collapse = "; ")
[17:02:43.312]                           if (!has_future) {
[17:02:43.312]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:43.312]                               info)
[17:02:43.312]                           }
[17:02:43.312]                           else {
[17:02:43.312]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:43.312]                               info, version)
[17:02:43.312]                           }
[17:02:43.312]                           base::stop(msg)
[17:02:43.312]                         }
[17:02:43.312]                       })
[17:02:43.312]                     }
[17:02:43.312]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:43.312]                     base::options(mc.cores = 1L)
[17:02:43.312]                   }
[17:02:43.312]                   ...future.strategy.old <- future::plan("list")
[17:02:43.312]                   options(future.plan = NULL)
[17:02:43.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:43.312]                 }
[17:02:43.312]                 ...future.workdir <- getwd()
[17:02:43.312]             }
[17:02:43.312]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:43.312]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:43.312]         }
[17:02:43.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:43.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:43.312]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:43.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:43.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:43.312]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:43.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:43.312]             base::names(...future.oldOptions))
[17:02:43.312]     }
[17:02:43.312]     if (FALSE) {
[17:02:43.312]     }
[17:02:43.312]     else {
[17:02:43.312]         if (TRUE) {
[17:02:43.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:43.312]                 open = "w")
[17:02:43.312]         }
[17:02:43.312]         else {
[17:02:43.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:43.312]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:43.312]         }
[17:02:43.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:43.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:43.312]             base::sink(type = "output", split = FALSE)
[17:02:43.312]             base::close(...future.stdout)
[17:02:43.312]         }, add = TRUE)
[17:02:43.312]     }
[17:02:43.312]     ...future.frame <- base::sys.nframe()
[17:02:43.312]     ...future.conditions <- base::list()
[17:02:43.312]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:43.312]     if (FALSE) {
[17:02:43.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:43.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:43.312]     }
[17:02:43.312]     ...future.result <- base::tryCatch({
[17:02:43.312]         base::withCallingHandlers({
[17:02:43.312]             ...future.value <- base::withVisible(base::local({
[17:02:43.312]                 ...future.makeSendCondition <- base::local({
[17:02:43.312]                   sendCondition <- NULL
[17:02:43.312]                   function(frame = 1L) {
[17:02:43.312]                     if (is.function(sendCondition)) 
[17:02:43.312]                       return(sendCondition)
[17:02:43.312]                     ns <- getNamespace("parallel")
[17:02:43.312]                     if (exists("sendData", mode = "function", 
[17:02:43.312]                       envir = ns)) {
[17:02:43.312]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:43.312]                         envir = ns)
[17:02:43.312]                       envir <- sys.frame(frame)
[17:02:43.312]                       master <- NULL
[17:02:43.312]                       while (!identical(envir, .GlobalEnv) && 
[17:02:43.312]                         !identical(envir, emptyenv())) {
[17:02:43.312]                         if (exists("master", mode = "list", envir = envir, 
[17:02:43.312]                           inherits = FALSE)) {
[17:02:43.312]                           master <- get("master", mode = "list", 
[17:02:43.312]                             envir = envir, inherits = FALSE)
[17:02:43.312]                           if (inherits(master, c("SOCKnode", 
[17:02:43.312]                             "SOCK0node"))) {
[17:02:43.312]                             sendCondition <<- function(cond) {
[17:02:43.312]                               data <- list(type = "VALUE", value = cond, 
[17:02:43.312]                                 success = TRUE)
[17:02:43.312]                               parallel_sendData(master, data)
[17:02:43.312]                             }
[17:02:43.312]                             return(sendCondition)
[17:02:43.312]                           }
[17:02:43.312]                         }
[17:02:43.312]                         frame <- frame + 1L
[17:02:43.312]                         envir <- sys.frame(frame)
[17:02:43.312]                       }
[17:02:43.312]                     }
[17:02:43.312]                     sendCondition <<- function(cond) NULL
[17:02:43.312]                   }
[17:02:43.312]                 })
[17:02:43.312]                 withCallingHandlers({
[17:02:43.312]                   getOption("future.globals.onMissing")
[17:02:43.312]                 }, immediateCondition = function(cond) {
[17:02:43.312]                   sendCondition <- ...future.makeSendCondition()
[17:02:43.312]                   sendCondition(cond)
[17:02:43.312]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.312]                   {
[17:02:43.312]                     inherits <- base::inherits
[17:02:43.312]                     invokeRestart <- base::invokeRestart
[17:02:43.312]                     is.null <- base::is.null
[17:02:43.312]                     muffled <- FALSE
[17:02:43.312]                     if (inherits(cond, "message")) {
[17:02:43.312]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:43.312]                       if (muffled) 
[17:02:43.312]                         invokeRestart("muffleMessage")
[17:02:43.312]                     }
[17:02:43.312]                     else if (inherits(cond, "warning")) {
[17:02:43.312]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:43.312]                       if (muffled) 
[17:02:43.312]                         invokeRestart("muffleWarning")
[17:02:43.312]                     }
[17:02:43.312]                     else if (inherits(cond, "condition")) {
[17:02:43.312]                       if (!is.null(pattern)) {
[17:02:43.312]                         computeRestarts <- base::computeRestarts
[17:02:43.312]                         grepl <- base::grepl
[17:02:43.312]                         restarts <- computeRestarts(cond)
[17:02:43.312]                         for (restart in restarts) {
[17:02:43.312]                           name <- restart$name
[17:02:43.312]                           if (is.null(name)) 
[17:02:43.312]                             next
[17:02:43.312]                           if (!grepl(pattern, name)) 
[17:02:43.312]                             next
[17:02:43.312]                           invokeRestart(restart)
[17:02:43.312]                           muffled <- TRUE
[17:02:43.312]                           break
[17:02:43.312]                         }
[17:02:43.312]                       }
[17:02:43.312]                     }
[17:02:43.312]                     invisible(muffled)
[17:02:43.312]                   }
[17:02:43.312]                   muffleCondition(cond)
[17:02:43.312]                 })
[17:02:43.312]             }))
[17:02:43.312]             future::FutureResult(value = ...future.value$value, 
[17:02:43.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.312]                   ...future.rng), globalenv = if (FALSE) 
[17:02:43.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:43.312]                     ...future.globalenv.names))
[17:02:43.312]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:43.312]         }, condition = base::local({
[17:02:43.312]             c <- base::c
[17:02:43.312]             inherits <- base::inherits
[17:02:43.312]             invokeRestart <- base::invokeRestart
[17:02:43.312]             length <- base::length
[17:02:43.312]             list <- base::list
[17:02:43.312]             seq.int <- base::seq.int
[17:02:43.312]             signalCondition <- base::signalCondition
[17:02:43.312]             sys.calls <- base::sys.calls
[17:02:43.312]             `[[` <- base::`[[`
[17:02:43.312]             `+` <- base::`+`
[17:02:43.312]             `<<-` <- base::`<<-`
[17:02:43.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:43.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:43.312]                   3L)]
[17:02:43.312]             }
[17:02:43.312]             function(cond) {
[17:02:43.312]                 is_error <- inherits(cond, "error")
[17:02:43.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:43.312]                   NULL)
[17:02:43.312]                 if (is_error) {
[17:02:43.312]                   sessionInformation <- function() {
[17:02:43.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:43.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:43.312]                       search = base::search(), system = base::Sys.info())
[17:02:43.312]                   }
[17:02:43.312]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:43.312]                     cond$call), session = sessionInformation(), 
[17:02:43.312]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:43.312]                   signalCondition(cond)
[17:02:43.312]                 }
[17:02:43.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:43.312]                 "immediateCondition"))) {
[17:02:43.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:43.312]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:43.312]                   if (TRUE && !signal) {
[17:02:43.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.312]                     {
[17:02:43.312]                       inherits <- base::inherits
[17:02:43.312]                       invokeRestart <- base::invokeRestart
[17:02:43.312]                       is.null <- base::is.null
[17:02:43.312]                       muffled <- FALSE
[17:02:43.312]                       if (inherits(cond, "message")) {
[17:02:43.312]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.312]                         if (muffled) 
[17:02:43.312]                           invokeRestart("muffleMessage")
[17:02:43.312]                       }
[17:02:43.312]                       else if (inherits(cond, "warning")) {
[17:02:43.312]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.312]                         if (muffled) 
[17:02:43.312]                           invokeRestart("muffleWarning")
[17:02:43.312]                       }
[17:02:43.312]                       else if (inherits(cond, "condition")) {
[17:02:43.312]                         if (!is.null(pattern)) {
[17:02:43.312]                           computeRestarts <- base::computeRestarts
[17:02:43.312]                           grepl <- base::grepl
[17:02:43.312]                           restarts <- computeRestarts(cond)
[17:02:43.312]                           for (restart in restarts) {
[17:02:43.312]                             name <- restart$name
[17:02:43.312]                             if (is.null(name)) 
[17:02:43.312]                               next
[17:02:43.312]                             if (!grepl(pattern, name)) 
[17:02:43.312]                               next
[17:02:43.312]                             invokeRestart(restart)
[17:02:43.312]                             muffled <- TRUE
[17:02:43.312]                             break
[17:02:43.312]                           }
[17:02:43.312]                         }
[17:02:43.312]                       }
[17:02:43.312]                       invisible(muffled)
[17:02:43.312]                     }
[17:02:43.312]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.312]                   }
[17:02:43.312]                 }
[17:02:43.312]                 else {
[17:02:43.312]                   if (TRUE) {
[17:02:43.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.312]                     {
[17:02:43.312]                       inherits <- base::inherits
[17:02:43.312]                       invokeRestart <- base::invokeRestart
[17:02:43.312]                       is.null <- base::is.null
[17:02:43.312]                       muffled <- FALSE
[17:02:43.312]                       if (inherits(cond, "message")) {
[17:02:43.312]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.312]                         if (muffled) 
[17:02:43.312]                           invokeRestart("muffleMessage")
[17:02:43.312]                       }
[17:02:43.312]                       else if (inherits(cond, "warning")) {
[17:02:43.312]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.312]                         if (muffled) 
[17:02:43.312]                           invokeRestart("muffleWarning")
[17:02:43.312]                       }
[17:02:43.312]                       else if (inherits(cond, "condition")) {
[17:02:43.312]                         if (!is.null(pattern)) {
[17:02:43.312]                           computeRestarts <- base::computeRestarts
[17:02:43.312]                           grepl <- base::grepl
[17:02:43.312]                           restarts <- computeRestarts(cond)
[17:02:43.312]                           for (restart in restarts) {
[17:02:43.312]                             name <- restart$name
[17:02:43.312]                             if (is.null(name)) 
[17:02:43.312]                               next
[17:02:43.312]                             if (!grepl(pattern, name)) 
[17:02:43.312]                               next
[17:02:43.312]                             invokeRestart(restart)
[17:02:43.312]                             muffled <- TRUE
[17:02:43.312]                             break
[17:02:43.312]                           }
[17:02:43.312]                         }
[17:02:43.312]                       }
[17:02:43.312]                       invisible(muffled)
[17:02:43.312]                     }
[17:02:43.312]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.312]                   }
[17:02:43.312]                 }
[17:02:43.312]             }
[17:02:43.312]         }))
[17:02:43.312]     }, error = function(ex) {
[17:02:43.312]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:43.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.312]                 ...future.rng), started = ...future.startTime, 
[17:02:43.312]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:43.312]             version = "1.8"), class = "FutureResult")
[17:02:43.312]     }, finally = {
[17:02:43.312]         if (!identical(...future.workdir, getwd())) 
[17:02:43.312]             setwd(...future.workdir)
[17:02:43.312]         {
[17:02:43.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:43.312]                 ...future.oldOptions$nwarnings <- NULL
[17:02:43.312]             }
[17:02:43.312]             base::options(...future.oldOptions)
[17:02:43.312]             if (.Platform$OS.type == "windows") {
[17:02:43.312]                 old_names <- names(...future.oldEnvVars)
[17:02:43.312]                 envs <- base::Sys.getenv()
[17:02:43.312]                 names <- names(envs)
[17:02:43.312]                 common <- intersect(names, old_names)
[17:02:43.312]                 added <- setdiff(names, old_names)
[17:02:43.312]                 removed <- setdiff(old_names, names)
[17:02:43.312]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:43.312]                   envs[common]]
[17:02:43.312]                 NAMES <- toupper(changed)
[17:02:43.312]                 args <- list()
[17:02:43.312]                 for (kk in seq_along(NAMES)) {
[17:02:43.312]                   name <- changed[[kk]]
[17:02:43.312]                   NAME <- NAMES[[kk]]
[17:02:43.312]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.312]                     next
[17:02:43.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.312]                 }
[17:02:43.312]                 NAMES <- toupper(added)
[17:02:43.312]                 for (kk in seq_along(NAMES)) {
[17:02:43.312]                   name <- added[[kk]]
[17:02:43.312]                   NAME <- NAMES[[kk]]
[17:02:43.312]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.312]                     next
[17:02:43.312]                   args[[name]] <- ""
[17:02:43.312]                 }
[17:02:43.312]                 NAMES <- toupper(removed)
[17:02:43.312]                 for (kk in seq_along(NAMES)) {
[17:02:43.312]                   name <- removed[[kk]]
[17:02:43.312]                   NAME <- NAMES[[kk]]
[17:02:43.312]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.312]                     next
[17:02:43.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.312]                 }
[17:02:43.312]                 if (length(args) > 0) 
[17:02:43.312]                   base::do.call(base::Sys.setenv, args = args)
[17:02:43.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:43.312]             }
[17:02:43.312]             else {
[17:02:43.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:43.312]             }
[17:02:43.312]             {
[17:02:43.312]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:43.312]                   0L) {
[17:02:43.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:43.312]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:43.312]                   base::options(opts)
[17:02:43.312]                 }
[17:02:43.312]                 {
[17:02:43.312]                   {
[17:02:43.312]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:43.312]                     NULL
[17:02:43.312]                   }
[17:02:43.312]                   options(future.plan = NULL)
[17:02:43.312]                   if (is.na(NA_character_)) 
[17:02:43.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:43.312]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:43.312]                     .init = FALSE)
[17:02:43.312]                 }
[17:02:43.312]             }
[17:02:43.312]         }
[17:02:43.312]     })
[17:02:43.312]     if (TRUE) {
[17:02:43.312]         base::sink(type = "output", split = FALSE)
[17:02:43.312]         if (TRUE) {
[17:02:43.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:43.312]         }
[17:02:43.312]         else {
[17:02:43.312]             ...future.result["stdout"] <- base::list(NULL)
[17:02:43.312]         }
[17:02:43.312]         base::close(...future.stdout)
[17:02:43.312]         ...future.stdout <- NULL
[17:02:43.312]     }
[17:02:43.312]     ...future.result$conditions <- ...future.conditions
[17:02:43.312]     ...future.result$finished <- base::Sys.time()
[17:02:43.312]     ...future.result
[17:02:43.312] }
[17:02:43.316] MultisessionFuture started
[17:02:43.316] - Launch lazy future ... done
[17:02:43.316] run() for ‘MultisessionFuture’ ... done
[17:02:43.316] result() for ClusterFuture ...
[17:02:43.316] receiveMessageFromWorker() for ClusterFuture ...
[17:02:43.317] - Validating connection of MultisessionFuture
[17:02:43.321] - received message: FutureResult
[17:02:43.321] - Received FutureResult
[17:02:43.321] - Erased future from FutureRegistry
[17:02:43.322] result() for ClusterFuture ...
[17:02:43.322] - result already collected: FutureResult
[17:02:43.322] result() for ClusterFuture ... done
[17:02:43.322] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:43.322] result() for ClusterFuture ... done
[17:02:43.322] result() for ClusterFuture ...
[17:02:43.322] - result already collected: FutureResult
[17:02:43.322] result() for ClusterFuture ... done
[17:02:43.323] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:02:43.323] Searching for globals...
[17:02:43.324] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:43.325] Searching for globals...
[17:02:43.326] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:02:43.326] Searching for globals ... DONE
[17:02:43.326] Resolving globals: FALSE
[17:02:43.327] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:43.327] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:43.327] - globals: [1] ‘data’
[17:02:43.327] 
[17:02:43.328] getGlobalsAndPackages() ... DONE
[17:02:43.328] run() for ‘Future’ ...
[17:02:43.328] - state: ‘created’
[17:02:43.328] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:43.343] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:43.343] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:43.343]   - Field: ‘node’
[17:02:43.343]   - Field: ‘label’
[17:02:43.343]   - Field: ‘local’
[17:02:43.343]   - Field: ‘owner’
[17:02:43.343]   - Field: ‘envir’
[17:02:43.343]   - Field: ‘workers’
[17:02:43.344]   - Field: ‘packages’
[17:02:43.344]   - Field: ‘gc’
[17:02:43.344]   - Field: ‘conditions’
[17:02:43.344]   - Field: ‘persistent’
[17:02:43.344]   - Field: ‘expr’
[17:02:43.344]   - Field: ‘uuid’
[17:02:43.344]   - Field: ‘seed’
[17:02:43.344]   - Field: ‘version’
[17:02:43.345]   - Field: ‘result’
[17:02:43.345]   - Field: ‘asynchronous’
[17:02:43.345]   - Field: ‘calls’
[17:02:43.345]   - Field: ‘globals’
[17:02:43.345]   - Field: ‘stdout’
[17:02:43.345]   - Field: ‘earlySignal’
[17:02:43.345]   - Field: ‘lazy’
[17:02:43.345]   - Field: ‘state’
[17:02:43.345] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:43.346] - Launch lazy future ...
[17:02:43.346] Packages needed by the future expression (n = 0): <none>
[17:02:43.346] Packages needed by future strategies (n = 0): <none>
[17:02:43.347] {
[17:02:43.347]     {
[17:02:43.347]         {
[17:02:43.347]             ...future.startTime <- base::Sys.time()
[17:02:43.347]             {
[17:02:43.347]                 {
[17:02:43.347]                   {
[17:02:43.347]                     {
[17:02:43.347]                       base::local({
[17:02:43.347]                         has_future <- base::requireNamespace("future", 
[17:02:43.347]                           quietly = TRUE)
[17:02:43.347]                         if (has_future) {
[17:02:43.347]                           ns <- base::getNamespace("future")
[17:02:43.347]                           version <- ns[[".package"]][["version"]]
[17:02:43.347]                           if (is.null(version)) 
[17:02:43.347]                             version <- utils::packageVersion("future")
[17:02:43.347]                         }
[17:02:43.347]                         else {
[17:02:43.347]                           version <- NULL
[17:02:43.347]                         }
[17:02:43.347]                         if (!has_future || version < "1.8.0") {
[17:02:43.347]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:43.347]                             "", base::R.version$version.string), 
[17:02:43.347]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:43.347]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:43.347]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:43.347]                               "release", "version")], collapse = " "), 
[17:02:43.347]                             hostname = base::Sys.info()[["nodename"]])
[17:02:43.347]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:43.347]                             info)
[17:02:43.347]                           info <- base::paste(info, collapse = "; ")
[17:02:43.347]                           if (!has_future) {
[17:02:43.347]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:43.347]                               info)
[17:02:43.347]                           }
[17:02:43.347]                           else {
[17:02:43.347]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:43.347]                               info, version)
[17:02:43.347]                           }
[17:02:43.347]                           base::stop(msg)
[17:02:43.347]                         }
[17:02:43.347]                       })
[17:02:43.347]                     }
[17:02:43.347]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:43.347]                     base::options(mc.cores = 1L)
[17:02:43.347]                   }
[17:02:43.347]                   ...future.strategy.old <- future::plan("list")
[17:02:43.347]                   options(future.plan = NULL)
[17:02:43.347]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.347]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:43.347]                 }
[17:02:43.347]                 ...future.workdir <- getwd()
[17:02:43.347]             }
[17:02:43.347]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:43.347]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:43.347]         }
[17:02:43.347]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:43.347]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:43.347]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:43.347]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:43.347]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:43.347]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:43.347]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:43.347]             base::names(...future.oldOptions))
[17:02:43.347]     }
[17:02:43.347]     if (FALSE) {
[17:02:43.347]     }
[17:02:43.347]     else {
[17:02:43.347]         if (TRUE) {
[17:02:43.347]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:43.347]                 open = "w")
[17:02:43.347]         }
[17:02:43.347]         else {
[17:02:43.347]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:43.347]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:43.347]         }
[17:02:43.347]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:43.347]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:43.347]             base::sink(type = "output", split = FALSE)
[17:02:43.347]             base::close(...future.stdout)
[17:02:43.347]         }, add = TRUE)
[17:02:43.347]     }
[17:02:43.347]     ...future.frame <- base::sys.nframe()
[17:02:43.347]     ...future.conditions <- base::list()
[17:02:43.347]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:43.347]     if (FALSE) {
[17:02:43.347]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:43.347]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:43.347]     }
[17:02:43.347]     ...future.result <- base::tryCatch({
[17:02:43.347]         base::withCallingHandlers({
[17:02:43.347]             ...future.value <- base::withVisible(base::local({
[17:02:43.347]                 ...future.makeSendCondition <- base::local({
[17:02:43.347]                   sendCondition <- NULL
[17:02:43.347]                   function(frame = 1L) {
[17:02:43.347]                     if (is.function(sendCondition)) 
[17:02:43.347]                       return(sendCondition)
[17:02:43.347]                     ns <- getNamespace("parallel")
[17:02:43.347]                     if (exists("sendData", mode = "function", 
[17:02:43.347]                       envir = ns)) {
[17:02:43.347]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:43.347]                         envir = ns)
[17:02:43.347]                       envir <- sys.frame(frame)
[17:02:43.347]                       master <- NULL
[17:02:43.347]                       while (!identical(envir, .GlobalEnv) && 
[17:02:43.347]                         !identical(envir, emptyenv())) {
[17:02:43.347]                         if (exists("master", mode = "list", envir = envir, 
[17:02:43.347]                           inherits = FALSE)) {
[17:02:43.347]                           master <- get("master", mode = "list", 
[17:02:43.347]                             envir = envir, inherits = FALSE)
[17:02:43.347]                           if (inherits(master, c("SOCKnode", 
[17:02:43.347]                             "SOCK0node"))) {
[17:02:43.347]                             sendCondition <<- function(cond) {
[17:02:43.347]                               data <- list(type = "VALUE", value = cond, 
[17:02:43.347]                                 success = TRUE)
[17:02:43.347]                               parallel_sendData(master, data)
[17:02:43.347]                             }
[17:02:43.347]                             return(sendCondition)
[17:02:43.347]                           }
[17:02:43.347]                         }
[17:02:43.347]                         frame <- frame + 1L
[17:02:43.347]                         envir <- sys.frame(frame)
[17:02:43.347]                       }
[17:02:43.347]                     }
[17:02:43.347]                     sendCondition <<- function(cond) NULL
[17:02:43.347]                   }
[17:02:43.347]                 })
[17:02:43.347]                 withCallingHandlers({
[17:02:43.347]                   subset(data, x < 3)$y
[17:02:43.347]                 }, immediateCondition = function(cond) {
[17:02:43.347]                   sendCondition <- ...future.makeSendCondition()
[17:02:43.347]                   sendCondition(cond)
[17:02:43.347]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.347]                   {
[17:02:43.347]                     inherits <- base::inherits
[17:02:43.347]                     invokeRestart <- base::invokeRestart
[17:02:43.347]                     is.null <- base::is.null
[17:02:43.347]                     muffled <- FALSE
[17:02:43.347]                     if (inherits(cond, "message")) {
[17:02:43.347]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:43.347]                       if (muffled) 
[17:02:43.347]                         invokeRestart("muffleMessage")
[17:02:43.347]                     }
[17:02:43.347]                     else if (inherits(cond, "warning")) {
[17:02:43.347]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:43.347]                       if (muffled) 
[17:02:43.347]                         invokeRestart("muffleWarning")
[17:02:43.347]                     }
[17:02:43.347]                     else if (inherits(cond, "condition")) {
[17:02:43.347]                       if (!is.null(pattern)) {
[17:02:43.347]                         computeRestarts <- base::computeRestarts
[17:02:43.347]                         grepl <- base::grepl
[17:02:43.347]                         restarts <- computeRestarts(cond)
[17:02:43.347]                         for (restart in restarts) {
[17:02:43.347]                           name <- restart$name
[17:02:43.347]                           if (is.null(name)) 
[17:02:43.347]                             next
[17:02:43.347]                           if (!grepl(pattern, name)) 
[17:02:43.347]                             next
[17:02:43.347]                           invokeRestart(restart)
[17:02:43.347]                           muffled <- TRUE
[17:02:43.347]                           break
[17:02:43.347]                         }
[17:02:43.347]                       }
[17:02:43.347]                     }
[17:02:43.347]                     invisible(muffled)
[17:02:43.347]                   }
[17:02:43.347]                   muffleCondition(cond)
[17:02:43.347]                 })
[17:02:43.347]             }))
[17:02:43.347]             future::FutureResult(value = ...future.value$value, 
[17:02:43.347]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.347]                   ...future.rng), globalenv = if (FALSE) 
[17:02:43.347]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:43.347]                     ...future.globalenv.names))
[17:02:43.347]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:43.347]         }, condition = base::local({
[17:02:43.347]             c <- base::c
[17:02:43.347]             inherits <- base::inherits
[17:02:43.347]             invokeRestart <- base::invokeRestart
[17:02:43.347]             length <- base::length
[17:02:43.347]             list <- base::list
[17:02:43.347]             seq.int <- base::seq.int
[17:02:43.347]             signalCondition <- base::signalCondition
[17:02:43.347]             sys.calls <- base::sys.calls
[17:02:43.347]             `[[` <- base::`[[`
[17:02:43.347]             `+` <- base::`+`
[17:02:43.347]             `<<-` <- base::`<<-`
[17:02:43.347]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:43.347]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:43.347]                   3L)]
[17:02:43.347]             }
[17:02:43.347]             function(cond) {
[17:02:43.347]                 is_error <- inherits(cond, "error")
[17:02:43.347]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:43.347]                   NULL)
[17:02:43.347]                 if (is_error) {
[17:02:43.347]                   sessionInformation <- function() {
[17:02:43.347]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:43.347]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:43.347]                       search = base::search(), system = base::Sys.info())
[17:02:43.347]                   }
[17:02:43.347]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.347]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:43.347]                     cond$call), session = sessionInformation(), 
[17:02:43.347]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:43.347]                   signalCondition(cond)
[17:02:43.347]                 }
[17:02:43.347]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:43.347]                 "immediateCondition"))) {
[17:02:43.347]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:43.347]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.347]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:43.347]                   if (TRUE && !signal) {
[17:02:43.347]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.347]                     {
[17:02:43.347]                       inherits <- base::inherits
[17:02:43.347]                       invokeRestart <- base::invokeRestart
[17:02:43.347]                       is.null <- base::is.null
[17:02:43.347]                       muffled <- FALSE
[17:02:43.347]                       if (inherits(cond, "message")) {
[17:02:43.347]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.347]                         if (muffled) 
[17:02:43.347]                           invokeRestart("muffleMessage")
[17:02:43.347]                       }
[17:02:43.347]                       else if (inherits(cond, "warning")) {
[17:02:43.347]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.347]                         if (muffled) 
[17:02:43.347]                           invokeRestart("muffleWarning")
[17:02:43.347]                       }
[17:02:43.347]                       else if (inherits(cond, "condition")) {
[17:02:43.347]                         if (!is.null(pattern)) {
[17:02:43.347]                           computeRestarts <- base::computeRestarts
[17:02:43.347]                           grepl <- base::grepl
[17:02:43.347]                           restarts <- computeRestarts(cond)
[17:02:43.347]                           for (restart in restarts) {
[17:02:43.347]                             name <- restart$name
[17:02:43.347]                             if (is.null(name)) 
[17:02:43.347]                               next
[17:02:43.347]                             if (!grepl(pattern, name)) 
[17:02:43.347]                               next
[17:02:43.347]                             invokeRestart(restart)
[17:02:43.347]                             muffled <- TRUE
[17:02:43.347]                             break
[17:02:43.347]                           }
[17:02:43.347]                         }
[17:02:43.347]                       }
[17:02:43.347]                       invisible(muffled)
[17:02:43.347]                     }
[17:02:43.347]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.347]                   }
[17:02:43.347]                 }
[17:02:43.347]                 else {
[17:02:43.347]                   if (TRUE) {
[17:02:43.347]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.347]                     {
[17:02:43.347]                       inherits <- base::inherits
[17:02:43.347]                       invokeRestart <- base::invokeRestart
[17:02:43.347]                       is.null <- base::is.null
[17:02:43.347]                       muffled <- FALSE
[17:02:43.347]                       if (inherits(cond, "message")) {
[17:02:43.347]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.347]                         if (muffled) 
[17:02:43.347]                           invokeRestart("muffleMessage")
[17:02:43.347]                       }
[17:02:43.347]                       else if (inherits(cond, "warning")) {
[17:02:43.347]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.347]                         if (muffled) 
[17:02:43.347]                           invokeRestart("muffleWarning")
[17:02:43.347]                       }
[17:02:43.347]                       else if (inherits(cond, "condition")) {
[17:02:43.347]                         if (!is.null(pattern)) {
[17:02:43.347]                           computeRestarts <- base::computeRestarts
[17:02:43.347]                           grepl <- base::grepl
[17:02:43.347]                           restarts <- computeRestarts(cond)
[17:02:43.347]                           for (restart in restarts) {
[17:02:43.347]                             name <- restart$name
[17:02:43.347]                             if (is.null(name)) 
[17:02:43.347]                               next
[17:02:43.347]                             if (!grepl(pattern, name)) 
[17:02:43.347]                               next
[17:02:43.347]                             invokeRestart(restart)
[17:02:43.347]                             muffled <- TRUE
[17:02:43.347]                             break
[17:02:43.347]                           }
[17:02:43.347]                         }
[17:02:43.347]                       }
[17:02:43.347]                       invisible(muffled)
[17:02:43.347]                     }
[17:02:43.347]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.347]                   }
[17:02:43.347]                 }
[17:02:43.347]             }
[17:02:43.347]         }))
[17:02:43.347]     }, error = function(ex) {
[17:02:43.347]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:43.347]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.347]                 ...future.rng), started = ...future.startTime, 
[17:02:43.347]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:43.347]             version = "1.8"), class = "FutureResult")
[17:02:43.347]     }, finally = {
[17:02:43.347]         if (!identical(...future.workdir, getwd())) 
[17:02:43.347]             setwd(...future.workdir)
[17:02:43.347]         {
[17:02:43.347]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:43.347]                 ...future.oldOptions$nwarnings <- NULL
[17:02:43.347]             }
[17:02:43.347]             base::options(...future.oldOptions)
[17:02:43.347]             if (.Platform$OS.type == "windows") {
[17:02:43.347]                 old_names <- names(...future.oldEnvVars)
[17:02:43.347]                 envs <- base::Sys.getenv()
[17:02:43.347]                 names <- names(envs)
[17:02:43.347]                 common <- intersect(names, old_names)
[17:02:43.347]                 added <- setdiff(names, old_names)
[17:02:43.347]                 removed <- setdiff(old_names, names)
[17:02:43.347]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:43.347]                   envs[common]]
[17:02:43.347]                 NAMES <- toupper(changed)
[17:02:43.347]                 args <- list()
[17:02:43.347]                 for (kk in seq_along(NAMES)) {
[17:02:43.347]                   name <- changed[[kk]]
[17:02:43.347]                   NAME <- NAMES[[kk]]
[17:02:43.347]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.347]                     next
[17:02:43.347]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.347]                 }
[17:02:43.347]                 NAMES <- toupper(added)
[17:02:43.347]                 for (kk in seq_along(NAMES)) {
[17:02:43.347]                   name <- added[[kk]]
[17:02:43.347]                   NAME <- NAMES[[kk]]
[17:02:43.347]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.347]                     next
[17:02:43.347]                   args[[name]] <- ""
[17:02:43.347]                 }
[17:02:43.347]                 NAMES <- toupper(removed)
[17:02:43.347]                 for (kk in seq_along(NAMES)) {
[17:02:43.347]                   name <- removed[[kk]]
[17:02:43.347]                   NAME <- NAMES[[kk]]
[17:02:43.347]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.347]                     next
[17:02:43.347]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.347]                 }
[17:02:43.347]                 if (length(args) > 0) 
[17:02:43.347]                   base::do.call(base::Sys.setenv, args = args)
[17:02:43.347]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:43.347]             }
[17:02:43.347]             else {
[17:02:43.347]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:43.347]             }
[17:02:43.347]             {
[17:02:43.347]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:43.347]                   0L) {
[17:02:43.347]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:43.347]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:43.347]                   base::options(opts)
[17:02:43.347]                 }
[17:02:43.347]                 {
[17:02:43.347]                   {
[17:02:43.347]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:43.347]                     NULL
[17:02:43.347]                   }
[17:02:43.347]                   options(future.plan = NULL)
[17:02:43.347]                   if (is.na(NA_character_)) 
[17:02:43.347]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.347]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:43.347]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:43.347]                     .init = FALSE)
[17:02:43.347]                 }
[17:02:43.347]             }
[17:02:43.347]         }
[17:02:43.347]     })
[17:02:43.347]     if (TRUE) {
[17:02:43.347]         base::sink(type = "output", split = FALSE)
[17:02:43.347]         if (TRUE) {
[17:02:43.347]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:43.347]         }
[17:02:43.347]         else {
[17:02:43.347]             ...future.result["stdout"] <- base::list(NULL)
[17:02:43.347]         }
[17:02:43.347]         base::close(...future.stdout)
[17:02:43.347]         ...future.stdout <- NULL
[17:02:43.347]     }
[17:02:43.347]     ...future.result$conditions <- ...future.conditions
[17:02:43.347]     ...future.result$finished <- base::Sys.time()
[17:02:43.347]     ...future.result
[17:02:43.347] }
[17:02:43.350] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[17:02:43.350] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[17:02:43.350] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[17:02:43.351] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[17:02:43.351] MultisessionFuture started
[17:02:43.351] - Launch lazy future ... done
[17:02:43.351] run() for ‘MultisessionFuture’ ... done
[17:02:43.352] result() for ClusterFuture ...
[17:02:43.352] receiveMessageFromWorker() for ClusterFuture ...
[17:02:43.352] - Validating connection of MultisessionFuture
[17:02:43.353] - received message: FutureResult
[17:02:43.353] - Received FutureResult
[17:02:43.353] - Erased future from FutureRegistry
[17:02:43.353] result() for ClusterFuture ...
[17:02:43.353] - result already collected: FutureResult
[17:02:43.354] result() for ClusterFuture ... done
[17:02:43.354] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:43.354] result() for ClusterFuture ... done
[17:02:43.354] result() for ClusterFuture ...
[17:02:43.354] - result already collected: FutureResult
[17:02:43.354] result() for ClusterFuture ... done
[17:02:43.354] plan(): Setting new future strategy stack:
[17:02:43.354] List of future strategies:
[17:02:43.354] 1. sequential:
[17:02:43.354]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:43.354]    - tweaked: FALSE
[17:02:43.354]    - call: plan(list(sequential, strategy))
[17:02:43.354] 2. multisession:
[17:02:43.354]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:43.354]    - tweaked: FALSE
[17:02:43.354]    - call: plan(list(sequential, strategy))
[17:02:43.356] plan(): nbrOfWorkers() = 1
[17:02:43.356] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:43.356] Searching for globals...
[17:02:43.364] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:02:43.364] Searching for globals ... DONE
[17:02:43.365] Resolving globals: FALSE
[17:02:43.365] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:43.366] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:43.366] - globals: [1] ‘data’
[17:02:43.366] - packages: [1] ‘future’
[17:02:43.366] getGlobalsAndPackages() ... DONE
[17:02:43.367] run() for ‘Future’ ...
[17:02:43.367] - state: ‘created’
[17:02:43.367] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:43.367] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:43.367] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:43.367]   - Field: ‘label’
[17:02:43.368]   - Field: ‘local’
[17:02:43.368]   - Field: ‘owner’
[17:02:43.368]   - Field: ‘envir’
[17:02:43.368]   - Field: ‘packages’
[17:02:43.368]   - Field: ‘gc’
[17:02:43.368]   - Field: ‘conditions’
[17:02:43.368]   - Field: ‘expr’
[17:02:43.368]   - Field: ‘uuid’
[17:02:43.368]   - Field: ‘seed’
[17:02:43.368]   - Field: ‘version’
[17:02:43.368]   - Field: ‘result’
[17:02:43.369]   - Field: ‘asynchronous’
[17:02:43.369]   - Field: ‘calls’
[17:02:43.369]   - Field: ‘globals’
[17:02:43.369]   - Field: ‘stdout’
[17:02:43.369]   - Field: ‘earlySignal’
[17:02:43.369]   - Field: ‘lazy’
[17:02:43.369]   - Field: ‘state’
[17:02:43.369] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:43.370] - Launch lazy future ...
[17:02:43.370] Packages needed by the future expression (n = 1): ‘future’
[17:02:43.370] Packages needed by future strategies (n = 1): ‘future’
[17:02:43.371] {
[17:02:43.371]     {
[17:02:43.371]         {
[17:02:43.371]             ...future.startTime <- base::Sys.time()
[17:02:43.371]             {
[17:02:43.371]                 {
[17:02:43.371]                   {
[17:02:43.371]                     {
[17:02:43.371]                       base::local({
[17:02:43.371]                         has_future <- base::requireNamespace("future", 
[17:02:43.371]                           quietly = TRUE)
[17:02:43.371]                         if (has_future) {
[17:02:43.371]                           ns <- base::getNamespace("future")
[17:02:43.371]                           version <- ns[[".package"]][["version"]]
[17:02:43.371]                           if (is.null(version)) 
[17:02:43.371]                             version <- utils::packageVersion("future")
[17:02:43.371]                         }
[17:02:43.371]                         else {
[17:02:43.371]                           version <- NULL
[17:02:43.371]                         }
[17:02:43.371]                         if (!has_future || version < "1.8.0") {
[17:02:43.371]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:43.371]                             "", base::R.version$version.string), 
[17:02:43.371]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:43.371]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:43.371]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:43.371]                               "release", "version")], collapse = " "), 
[17:02:43.371]                             hostname = base::Sys.info()[["nodename"]])
[17:02:43.371]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:43.371]                             info)
[17:02:43.371]                           info <- base::paste(info, collapse = "; ")
[17:02:43.371]                           if (!has_future) {
[17:02:43.371]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:43.371]                               info)
[17:02:43.371]                           }
[17:02:43.371]                           else {
[17:02:43.371]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:43.371]                               info, version)
[17:02:43.371]                           }
[17:02:43.371]                           base::stop(msg)
[17:02:43.371]                         }
[17:02:43.371]                       })
[17:02:43.371]                     }
[17:02:43.371]                     base::local({
[17:02:43.371]                       for (pkg in "future") {
[17:02:43.371]                         base::loadNamespace(pkg)
[17:02:43.371]                         base::library(pkg, character.only = TRUE)
[17:02:43.371]                       }
[17:02:43.371]                     })
[17:02:43.371]                   }
[17:02:43.371]                   ...future.strategy.old <- future::plan("list")
[17:02:43.371]                   options(future.plan = NULL)
[17:02:43.371]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.371]                   future::plan(list(function (..., workers = availableCores(), 
[17:02:43.371]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:02:43.371]                     envir = parent.frame()) 
[17:02:43.371]                   {
[17:02:43.371]                     if (is.function(workers)) 
[17:02:43.371]                       workers <- workers()
[17:02:43.371]                     workers <- structure(as.integer(workers), 
[17:02:43.371]                       class = class(workers))
[17:02:43.371]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:02:43.371]                       workers >= 1)
[17:02:43.371]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:02:43.371]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:02:43.371]                     }
[17:02:43.371]                     future <- MultisessionFuture(..., workers = workers, 
[17:02:43.371]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:02:43.371]                       envir = envir)
[17:02:43.371]                     if (!future$lazy) 
[17:02:43.371]                       future <- run(future)
[17:02:43.371]                     invisible(future)
[17:02:43.371]                   }), .cleanup = FALSE, .init = FALSE)
[17:02:43.371]                 }
[17:02:43.371]                 ...future.workdir <- getwd()
[17:02:43.371]             }
[17:02:43.371]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:43.371]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:43.371]         }
[17:02:43.371]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:43.371]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:43.371]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:43.371]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:43.371]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:43.371]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:43.371]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:43.371]             base::names(...future.oldOptions))
[17:02:43.371]     }
[17:02:43.371]     if (FALSE) {
[17:02:43.371]     }
[17:02:43.371]     else {
[17:02:43.371]         if (TRUE) {
[17:02:43.371]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:43.371]                 open = "w")
[17:02:43.371]         }
[17:02:43.371]         else {
[17:02:43.371]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:43.371]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:43.371]         }
[17:02:43.371]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:43.371]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:43.371]             base::sink(type = "output", split = FALSE)
[17:02:43.371]             base::close(...future.stdout)
[17:02:43.371]         }, add = TRUE)
[17:02:43.371]     }
[17:02:43.371]     ...future.frame <- base::sys.nframe()
[17:02:43.371]     ...future.conditions <- base::list()
[17:02:43.371]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:43.371]     if (FALSE) {
[17:02:43.371]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:43.371]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:43.371]     }
[17:02:43.371]     ...future.result <- base::tryCatch({
[17:02:43.371]         base::withCallingHandlers({
[17:02:43.371]             ...future.value <- base::withVisible(base::local({
[17:02:43.371]                 a %<-% subset(data, x < 3)$y
[17:02:43.371]                 a
[17:02:43.371]             }))
[17:02:43.371]             future::FutureResult(value = ...future.value$value, 
[17:02:43.371]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.371]                   ...future.rng), globalenv = if (FALSE) 
[17:02:43.371]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:43.371]                     ...future.globalenv.names))
[17:02:43.371]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:43.371]         }, condition = base::local({
[17:02:43.371]             c <- base::c
[17:02:43.371]             inherits <- base::inherits
[17:02:43.371]             invokeRestart <- base::invokeRestart
[17:02:43.371]             length <- base::length
[17:02:43.371]             list <- base::list
[17:02:43.371]             seq.int <- base::seq.int
[17:02:43.371]             signalCondition <- base::signalCondition
[17:02:43.371]             sys.calls <- base::sys.calls
[17:02:43.371]             `[[` <- base::`[[`
[17:02:43.371]             `+` <- base::`+`
[17:02:43.371]             `<<-` <- base::`<<-`
[17:02:43.371]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:43.371]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:43.371]                   3L)]
[17:02:43.371]             }
[17:02:43.371]             function(cond) {
[17:02:43.371]                 is_error <- inherits(cond, "error")
[17:02:43.371]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:43.371]                   NULL)
[17:02:43.371]                 if (is_error) {
[17:02:43.371]                   sessionInformation <- function() {
[17:02:43.371]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:43.371]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:43.371]                       search = base::search(), system = base::Sys.info())
[17:02:43.371]                   }
[17:02:43.371]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.371]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:43.371]                     cond$call), session = sessionInformation(), 
[17:02:43.371]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:43.371]                   signalCondition(cond)
[17:02:43.371]                 }
[17:02:43.371]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:43.371]                 "immediateCondition"))) {
[17:02:43.371]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:43.371]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.371]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:43.371]                   if (TRUE && !signal) {
[17:02:43.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.371]                     {
[17:02:43.371]                       inherits <- base::inherits
[17:02:43.371]                       invokeRestart <- base::invokeRestart
[17:02:43.371]                       is.null <- base::is.null
[17:02:43.371]                       muffled <- FALSE
[17:02:43.371]                       if (inherits(cond, "message")) {
[17:02:43.371]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.371]                         if (muffled) 
[17:02:43.371]                           invokeRestart("muffleMessage")
[17:02:43.371]                       }
[17:02:43.371]                       else if (inherits(cond, "warning")) {
[17:02:43.371]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.371]                         if (muffled) 
[17:02:43.371]                           invokeRestart("muffleWarning")
[17:02:43.371]                       }
[17:02:43.371]                       else if (inherits(cond, "condition")) {
[17:02:43.371]                         if (!is.null(pattern)) {
[17:02:43.371]                           computeRestarts <- base::computeRestarts
[17:02:43.371]                           grepl <- base::grepl
[17:02:43.371]                           restarts <- computeRestarts(cond)
[17:02:43.371]                           for (restart in restarts) {
[17:02:43.371]                             name <- restart$name
[17:02:43.371]                             if (is.null(name)) 
[17:02:43.371]                               next
[17:02:43.371]                             if (!grepl(pattern, name)) 
[17:02:43.371]                               next
[17:02:43.371]                             invokeRestart(restart)
[17:02:43.371]                             muffled <- TRUE
[17:02:43.371]                             break
[17:02:43.371]                           }
[17:02:43.371]                         }
[17:02:43.371]                       }
[17:02:43.371]                       invisible(muffled)
[17:02:43.371]                     }
[17:02:43.371]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.371]                   }
[17:02:43.371]                 }
[17:02:43.371]                 else {
[17:02:43.371]                   if (TRUE) {
[17:02:43.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.371]                     {
[17:02:43.371]                       inherits <- base::inherits
[17:02:43.371]                       invokeRestart <- base::invokeRestart
[17:02:43.371]                       is.null <- base::is.null
[17:02:43.371]                       muffled <- FALSE
[17:02:43.371]                       if (inherits(cond, "message")) {
[17:02:43.371]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.371]                         if (muffled) 
[17:02:43.371]                           invokeRestart("muffleMessage")
[17:02:43.371]                       }
[17:02:43.371]                       else if (inherits(cond, "warning")) {
[17:02:43.371]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.371]                         if (muffled) 
[17:02:43.371]                           invokeRestart("muffleWarning")
[17:02:43.371]                       }
[17:02:43.371]                       else if (inherits(cond, "condition")) {
[17:02:43.371]                         if (!is.null(pattern)) {
[17:02:43.371]                           computeRestarts <- base::computeRestarts
[17:02:43.371]                           grepl <- base::grepl
[17:02:43.371]                           restarts <- computeRestarts(cond)
[17:02:43.371]                           for (restart in restarts) {
[17:02:43.371]                             name <- restart$name
[17:02:43.371]                             if (is.null(name)) 
[17:02:43.371]                               next
[17:02:43.371]                             if (!grepl(pattern, name)) 
[17:02:43.371]                               next
[17:02:43.371]                             invokeRestart(restart)
[17:02:43.371]                             muffled <- TRUE
[17:02:43.371]                             break
[17:02:43.371]                           }
[17:02:43.371]                         }
[17:02:43.371]                       }
[17:02:43.371]                       invisible(muffled)
[17:02:43.371]                     }
[17:02:43.371]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.371]                   }
[17:02:43.371]                 }
[17:02:43.371]             }
[17:02:43.371]         }))
[17:02:43.371]     }, error = function(ex) {
[17:02:43.371]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:43.371]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.371]                 ...future.rng), started = ...future.startTime, 
[17:02:43.371]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:43.371]             version = "1.8"), class = "FutureResult")
[17:02:43.371]     }, finally = {
[17:02:43.371]         if (!identical(...future.workdir, getwd())) 
[17:02:43.371]             setwd(...future.workdir)
[17:02:43.371]         {
[17:02:43.371]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:43.371]                 ...future.oldOptions$nwarnings <- NULL
[17:02:43.371]             }
[17:02:43.371]             base::options(...future.oldOptions)
[17:02:43.371]             if (.Platform$OS.type == "windows") {
[17:02:43.371]                 old_names <- names(...future.oldEnvVars)
[17:02:43.371]                 envs <- base::Sys.getenv()
[17:02:43.371]                 names <- names(envs)
[17:02:43.371]                 common <- intersect(names, old_names)
[17:02:43.371]                 added <- setdiff(names, old_names)
[17:02:43.371]                 removed <- setdiff(old_names, names)
[17:02:43.371]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:43.371]                   envs[common]]
[17:02:43.371]                 NAMES <- toupper(changed)
[17:02:43.371]                 args <- list()
[17:02:43.371]                 for (kk in seq_along(NAMES)) {
[17:02:43.371]                   name <- changed[[kk]]
[17:02:43.371]                   NAME <- NAMES[[kk]]
[17:02:43.371]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.371]                     next
[17:02:43.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.371]                 }
[17:02:43.371]                 NAMES <- toupper(added)
[17:02:43.371]                 for (kk in seq_along(NAMES)) {
[17:02:43.371]                   name <- added[[kk]]
[17:02:43.371]                   NAME <- NAMES[[kk]]
[17:02:43.371]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.371]                     next
[17:02:43.371]                   args[[name]] <- ""
[17:02:43.371]                 }
[17:02:43.371]                 NAMES <- toupper(removed)
[17:02:43.371]                 for (kk in seq_along(NAMES)) {
[17:02:43.371]                   name <- removed[[kk]]
[17:02:43.371]                   NAME <- NAMES[[kk]]
[17:02:43.371]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.371]                     next
[17:02:43.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.371]                 }
[17:02:43.371]                 if (length(args) > 0) 
[17:02:43.371]                   base::do.call(base::Sys.setenv, args = args)
[17:02:43.371]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:43.371]             }
[17:02:43.371]             else {
[17:02:43.371]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:43.371]             }
[17:02:43.371]             {
[17:02:43.371]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:43.371]                   0L) {
[17:02:43.371]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:43.371]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:43.371]                   base::options(opts)
[17:02:43.371]                 }
[17:02:43.371]                 {
[17:02:43.371]                   {
[17:02:43.371]                     NULL
[17:02:43.371]                     RNGkind("Mersenne-Twister")
[17:02:43.371]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:43.371]                       inherits = FALSE)
[17:02:43.371]                   }
[17:02:43.371]                   options(future.plan = NULL)
[17:02:43.371]                   if (is.na(NA_character_)) 
[17:02:43.371]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.371]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:43.371]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:43.371]                     .init = FALSE)
[17:02:43.371]                 }
[17:02:43.371]             }
[17:02:43.371]         }
[17:02:43.371]     })
[17:02:43.371]     if (TRUE) {
[17:02:43.371]         base::sink(type = "output", split = FALSE)
[17:02:43.371]         if (TRUE) {
[17:02:43.371]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:43.371]         }
[17:02:43.371]         else {
[17:02:43.371]             ...future.result["stdout"] <- base::list(NULL)
[17:02:43.371]         }
[17:02:43.371]         base::close(...future.stdout)
[17:02:43.371]         ...future.stdout <- NULL
[17:02:43.371]     }
[17:02:43.371]     ...future.result$conditions <- ...future.conditions
[17:02:43.371]     ...future.result$finished <- base::Sys.time()
[17:02:43.371]     ...future.result
[17:02:43.371] }
[17:02:43.374] assign_globals() ...
[17:02:43.374] List of 1
[17:02:43.374]  $ data:'data.frame':	5 obs. of  2 variables:
[17:02:43.374]   ..$ x: int [1:5] 1 2 3 4 5
[17:02:43.374]   ..$ y: int [1:5] 1 2 3 4 5
[17:02:43.374]  - attr(*, "where")=List of 1
[17:02:43.374]   ..$ data:<environment: R_EmptyEnv> 
[17:02:43.374]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:43.374]  - attr(*, "resolved")= logi FALSE
[17:02:43.374]  - attr(*, "total_size")= num 160
[17:02:43.374]  - attr(*, "already-done")= logi TRUE
[17:02:43.377] - copied ‘data’ to environment
[17:02:43.378] assign_globals() ... done
[17:02:43.378] plan(): Setting new future strategy stack:
[17:02:43.378] List of future strategies:
[17:02:43.378] 1. multisession:
[17:02:43.378]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:43.378]    - tweaked: FALSE
[17:02:43.378]    - call: plan(list(sequential, strategy))
[17:02:43.382] plan(): nbrOfWorkers() = 2
[17:02:43.841] plan(): Setting new future strategy stack:
[17:02:43.842] List of future strategies:
[17:02:43.842] 1. sequential:
[17:02:43.842]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:43.842]    - tweaked: FALSE
[17:02:43.842]    - call: plan(list(sequential, strategy))
[17:02:43.842] 2. multisession:
[17:02:43.842]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:43.842]    - tweaked: FALSE
[17:02:43.842]    - call: plan(list(sequential, strategy))
[17:02:43.842] plan(): nbrOfWorkers() = 1
[17:02:43.842] SequentialFuture started (and completed)
[17:02:43.842] signalConditions() ...
[17:02:43.843]  - include = ‘immediateCondition’
[17:02:43.843]  - exclude = 
[17:02:43.843]  - resignal = FALSE
[17:02:43.843]  - Number of conditions: 93
[17:02:43.843] signalConditions() ... done
[17:02:43.843] - Launch lazy future ... done
[17:02:43.843] run() for ‘SequentialFuture’ ... done
[17:02:43.843] signalConditions() ...
[17:02:43.843]  - include = ‘immediateCondition’
[17:02:43.843]  - exclude = 
[17:02:43.844]  - resignal = FALSE
[17:02:43.844]  - Number of conditions: 93
[17:02:43.844] signalConditions() ... done
[17:02:43.844] Future state: ‘finished’
[17:02:43.844] signalConditions() ...
[17:02:43.844]  - include = ‘condition’
[17:02:43.844]  - exclude = ‘immediateCondition’
[17:02:43.844]  - resignal = TRUE
[17:02:43.844]  - Number of conditions: 93
[17:02:43.844]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.382] getGlobalsAndPackages() ...
[17:02:43.845]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:02:43.845]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.395] Searching for globals...
[17:02:43.845]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.397] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:02:43.845]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.397] Searching for globals ... DONE
[17:02:43.845]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.397] Resolving globals: FALSE
[17:02:43.845]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.397] The total size of the 1 globals is 160 bytes (160 bytes)
[17:02:43.845]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.398] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:02:43.845]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.398] - globals: [1] ‘data’
[17:02:43.846]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.398] 
[17:02:43.846]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.398] getGlobalsAndPackages() ... DONE
[17:02:43.846]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.398] run() for ‘Future’ ...
[17:02:43.846]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.398] - state: ‘created’
[17:02:43.846]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.399] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:43.846]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.402] [local output] makeClusterPSOCK() ...
[17:02:43.846]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.405] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:43.846]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.406] [local output] Base port: 11294
[17:02:43.847]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.406] [local output] Getting setup options for 2 cluster nodes ...
[17:02:43.847]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.406] [local output]  - Node 1 of 2 ...
[17:02:43.847]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.407] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:43.847]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.407] [local output] Rscript port: 11294

[17:02:43.847]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.408] [local output]  - Node 2 of 2 ...
[17:02:43.847]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.408] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:43.847]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.408] [local output] Rscript port: 11294

[17:02:43.848]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.409] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:43.848]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.409] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:43.848]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.409] [local output] Setting up PSOCK nodes in parallel
[17:02:43.848]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.409] List of 36
[17:02:43.409]  $ worker          : chr "localhost"
[17:02:43.409]   ..- attr(*, "localhost")= logi TRUE
[17:02:43.409]  $ master          : chr "localhost"
[17:02:43.409]  $ port            : int 11294
[17:02:43.409]  $ connectTimeout  : num 120
[17:02:43.409]  $ timeout         : num 2592000
[17:02:43.409]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:43.409]  $ homogeneous     : logi TRUE
[17:02:43.409]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:43.409]  $ rscript_envs    : NULL
[17:02:43.409]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:43.409]  $ rscript_startup : NULL
[17:02:43.409]  $ rscript_sh      : chr "sh"
[17:02:43.409]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:43.409]  $ methods         : logi TRUE
[17:02:43.409]  $ socketOptions   : chr "no-delay"
[17:02:43.409]  $ useXDR          : logi FALSE
[17:02:43.409]  $ outfile         : chr "/dev/null"
[17:02:43.409]  $ renice          : int NA
[17:02:43.409]  $ rshcmd          : NULL
[17:02:43.409]  $ user            : chr(0) 
[17:02:43.409]  $ revtunnel       : logi FALSE
[17:02:43.409]  $ rshlogfile      : NULL
[17:02:43.409]  $ rshopts         : chr(0) 
[17:02:43.409]  $ rank            : int 1
[17:02:43.409]  $ manual          : logi FALSE
[17:02:43.409]  $ dryrun          : logi FALSE
[17:02:43.409]  $ quiet           : logi FALSE
[17:02:43.409]  $ setup_strategy  : chr "parallel"
[17:02:43.409]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:43.409]  $ pidfile         : chr "/tmp/RtmpkGmVuW/worker.rank=1.parallelly.parent=43586.aa426cf8a49f.pid"
[17:02:43.409]  $ rshcmd_label    : NULL
[17:02:43.409]  $ rsh_call        : NULL
[17:02:43.409]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:43.409]  $ localMachine    : logi TRUE
[17:02:43.409]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:43.409]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:43.409]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:43.409]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:43.409]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:43.409]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:43.409]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:43.409]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:43.409]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:43.409]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:43.409]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:43.409]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:43.409]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:43.409]  $ arguments       :List of 28
[17:02:43.409]   ..$ worker          : chr "localhost"
[17:02:43.409]   ..$ master          : NULL
[17:02:43.409]   ..$ port            : int 11294
[17:02:43.409]   ..$ connectTimeout  : num 120
[17:02:43.409]   ..$ timeout         : num 2592000
[17:02:43.409]   ..$ rscript         : NULL
[17:02:43.409]   ..$ homogeneous     : NULL
[17:02:43.409]   ..$ rscript_args    : NULL
[17:02:43.409]   ..$ rscript_envs    : NULL
[17:02:43.409]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:43.409]   ..$ rscript_startup : NULL
[17:02:43.409]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:43.409]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:43.409]   ..$ methods         : logi TRUE
[17:02:43.409]   ..$ socketOptions   : chr "no-delay"
[17:02:43.409]   ..$ useXDR          : logi FALSE
[17:02:43.409]   ..$ outfile         : chr "/dev/null"
[17:02:43.409]   ..$ renice          : int NA
[17:02:43.409]   ..$ rshcmd          : NULL
[17:02:43.409]   ..$ user            : NULL
[17:02:43.409]   ..$ revtunnel       : logi NA
[17:02:43.409]   ..$ rshlogfile      : NULL
[17:02:43.409]   ..$ rshopts         : NULL
[17:02:43.409]   ..$ rank            : int 1
[17:02:43.409]   ..$ manual          : logi FALSE
[17:02:43.409]   ..$ dryrun          : logi FALSE
[17:02:43.409]   ..$ quiet           : logi FALSE
[17:02:43.409]   ..$ setup_strategy  : chr "parallel"
[17:02:43.409]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:43.848]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.426] [local output] System call to launch all workers:
[17:02:43.848]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.426] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkGmVuW/worker.rank=1.parallelly.parent=43586.aa426cf8a49f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11294 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:43.848]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.426] [local output] Starting PSOCK main server
[17:02:43.848]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.428] [local output] Workers launched
[17:02:43.849]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.428] [local output] Waiting for workers to connect back
[17:02:43.849]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.428]  - [local output] 0 workers out of 2 ready
[17:02:43.849]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.730]  - [local output] 0 workers out of 2 ready
[17:02:43.849]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.730]  - [local output] 1 workers out of 2 ready
[17:02:43.849]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.735]  - [local output] 1 workers out of 2 ready
[17:02:43.849]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.735]  - [local output] 2 workers out of 2 ready
[17:02:43.849]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.736] [local output] Launching of workers completed
[17:02:43.849]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.736] [local output] Collecting session information from workers
[17:02:43.849]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.736] [local output]  - Worker #1 of 2
[17:02:43.850]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.737] [local output]  - Worker #2 of 2
[17:02:43.850]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.737] [local output] makeClusterPSOCK() ... done
[17:02:43.850]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.747] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:43.850]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.747] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:43.850]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.747]   - Field: ‘node’
[17:02:43.850]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘label’
[17:02:43.850]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘local’
[17:02:43.850]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘owner’
[17:02:43.851]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘envir’
[17:02:43.851]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘workers’
[17:02:43.851]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘packages’
[17:02:43.851]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘gc’
[17:02:43.851]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘conditions’
[17:02:43.851]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.748]   - Field: ‘persistent’
[17:02:43.851]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘expr’
[17:02:43.852]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘uuid’
[17:02:43.852]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘seed’
[17:02:43.852]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘version’
[17:02:43.852]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘result’
[17:02:43.852]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘asynchronous’
[17:02:43.852]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘calls’
[17:02:43.852]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘globals’
[17:02:43.852]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘stdout’
[17:02:43.853]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.749]   - Field: ‘earlySignal’
[17:02:43.853]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.750]   - Field: ‘lazy’
[17:02:43.853]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.750]   - Field: ‘state’
[17:02:43.853]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.750] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:43.853]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.750] - Launch lazy future ...
[17:02:43.853]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.750] Packages needed by the future expression (n = 0): <none>
[17:02:43.853]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.750] Packages needed by future strategies (n = 0): <none>
[17:02:43.853]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.751] {
[17:02:43.751]     {
[17:02:43.751]         {
[17:02:43.751]             ...future.startTime <- base::Sys.time()
[17:02:43.751]             {
[17:02:43.751]                 {
[17:02:43.751]                   {
[17:02:43.751]                     {
[17:02:43.751]                       base::local({
[17:02:43.751]                         has_future <- base::requireNamespace("future", 
[17:02:43.751]                           quietly = TRUE)
[17:02:43.751]                         if (has_future) {
[17:02:43.751]                           ns <- base::getNamespace("future")
[17:02:43.751]                           version <- ns[[".package"]][["version"]]
[17:02:43.751]                           if (is.null(version)) 
[17:02:43.751]                             version <- utils::packageVersion("future")
[17:02:43.751]                         }
[17:02:43.751]                         else {
[17:02:43.751]                           version <- NULL
[17:02:43.751]                         }
[17:02:43.751]                         if (!has_future || version < "1.8.0") {
[17:02:43.751]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:43.751]                             "", base::R.version$version.string), 
[17:02:43.751]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:43.751]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:43.751]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:43.751]                               "release", "version")], collapse = " "), 
[17:02:43.751]                             hostname = base::Sys.info()[["nodename"]])
[17:02:43.751]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:43.751]                             info)
[17:02:43.751]                           info <- base::paste(info, collapse = "; ")
[17:02:43.751]                           if (!has_future) {
[17:02:43.751]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:43.751]                               info)
[17:02:43.751]                           }
[17:02:43.751]                           else {
[17:02:43.751]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:43.751]                               info, version)
[17:02:43.751]                           }
[17:02:43.751]                           base::stop(msg)
[17:02:43.751]                         }
[17:02:43.751]                       })
[17:02:43.751]                     }
[17:02:43.751]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:43.751]                     base::options(mc.cores = 1L)
[17:02:43.751]                   }
[17:02:43.751]                   ...future.strategy.old <- future::plan("list")
[17:02:43.751]                   options(future.plan = NULL)
[17:02:43.751]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.751]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:43.751]                 }
[17:02:43.751]                 ...future.workdir <- getwd()
[17:02:43.751]             }
[17:02:43.751]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:43.751]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:43.751]         }
[17:02:43.751]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:02:43.751]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:43.751]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:02:43.751]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:43.751]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:43.751]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:43.751]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:43.751]             base::names(...future.oldOptions))
[17:02:43.751]     }
[17:02:43.751]     if (FALSE) {
[17:02:43.751]     }
[17:02:43.751]     else {
[17:02:43.751]         if (TRUE) {
[17:02:43.751]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:43.751]                 open = "w")
[17:02:43.751]         }
[17:02:43.751]         else {
[17:02:43.751]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:43.751]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:43.751]         }
[17:02:43.751]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:43.751]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:43.751]             base::sink(type = "output", split = FALSE)
[17:02:43.751]             base::close(...future.stdout)
[17:02:43.751]         }, add = TRUE)
[17:02:43.751]     }
[17:02:43.751]     ...future.frame <- base::sys.nframe()
[17:02:43.751]     ...future.conditions <- base::list()
[17:02:43.751]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:43.751]     if (FALSE) {
[17:02:43.751]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:43.751]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:43.751]     }
[17:02:43.751]     ...future.result <- base::tryCatch({
[17:02:43.751]         base::withCallingHandlers({
[17:02:43.751]             ...future.value <- base::withVisible(base::local({
[17:02:43.751]                 ...future.makeSendCondition <- base::local({
[17:02:43.751]                   sendCondition <- NULL
[17:02:43.751]                   function(frame = 1L) {
[17:02:43.751]                     if (is.function(sendCondition)) 
[17:02:43.751]                       return(sendCondition)
[17:02:43.751]                     ns <- getNamespace("parallel")
[17:02:43.751]                     if (exists("sendData", mode = "function", 
[17:02:43.751]                       envir = ns)) {
[17:02:43.751]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:43.751]                         envir = ns)
[17:02:43.751]                       envir <- sys.frame(frame)
[17:02:43.751]                       master <- NULL
[17:02:43.751]                       while (!identical(envir, .GlobalEnv) && 
[17:02:43.751]                         !identical(envir, emptyenv())) {
[17:02:43.751]                         if (exists("master", mode = "list", envir = envir, 
[17:02:43.751]                           inherits = FALSE)) {
[17:02:43.751]                           master <- get("master", mode = "list", 
[17:02:43.751]                             envir = envir, inherits = FALSE)
[17:02:43.751]                           if (inherits(master, c("SOCKnode", 
[17:02:43.751]                             "SOCK0node"))) {
[17:02:43.751]                             sendCondition <<- function(cond) {
[17:02:43.751]                               data <- list(type = "VALUE", value = cond, 
[17:02:43.751]                                 success = TRUE)
[17:02:43.751]                               parallel_sendData(master, data)
[17:02:43.751]                             }
[17:02:43.751]                             return(sendCondition)
[17:02:43.751]                           }
[17:02:43.751]                         }
[17:02:43.751]                         frame <- frame + 1L
[17:02:43.751]                         envir <- sys.frame(frame)
[17:02:43.751]                       }
[17:02:43.751]                     }
[17:02:43.751]                     sendCondition <<- function(cond) NULL
[17:02:43.751]                   }
[17:02:43.751]                 })
[17:02:43.751]                 withCallingHandlers({
[17:02:43.751]                   subset(data, x < 3)$y
[17:02:43.751]                 }, immediateCondition = function(cond) {
[17:02:43.751]                   sendCondition <- ...future.makeSendCondition()
[17:02:43.751]                   sendCondition(cond)
[17:02:43.751]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.751]                   {
[17:02:43.751]                     inherits <- base::inherits
[17:02:43.751]                     invokeRestart <- base::invokeRestart
[17:02:43.751]                     is.null <- base::is.null
[17:02:43.751]                     muffled <- FALSE
[17:02:43.751]                     if (inherits(cond, "message")) {
[17:02:43.751]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:43.751]                       if (muffled) 
[17:02:43.751]                         invokeRestart("muffleMessage")
[17:02:43.751]                     }
[17:02:43.751]                     else if (inherits(cond, "warning")) {
[17:02:43.751]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:43.751]                       if (muffled) 
[17:02:43.751]                         invokeRestart("muffleWarning")
[17:02:43.751]                     }
[17:02:43.751]                     else if (inherits(cond, "condition")) {
[17:02:43.751]                       if (!is.null(pattern)) {
[17:02:43.751]                         computeRestarts <- base::computeRestarts
[17:02:43.751]                         grepl <- base::grepl
[17:02:43.751]                         restarts <- computeRestarts(cond)
[17:02:43.751]                         for (restart in restarts) {
[17:02:43.751]                           name <- restart$name
[17:02:43.751]                           if (is.null(name)) 
[17:02:43.751]                             next
[17:02:43.751]                           if (!grepl(pattern, name)) 
[17:02:43.751]                             next
[17:02:43.751]                           invokeRestart(restart)
[17:02:43.751]                           muffled <- TRUE
[17:02:43.751]                           break
[17:02:43.751]                         }
[17:02:43.751]                       }
[17:02:43.751]                     }
[17:02:43.751]                     invisible(muffled)
[17:02:43.751]                   }
[17:02:43.751]                   muffleCondition(cond)
[17:02:43.751]                 })
[17:02:43.751]             }))
[17:02:43.751]             future::FutureResult(value = ...future.value$value, 
[17:02:43.751]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.751]                   ...future.rng), globalenv = if (FALSE) 
[17:02:43.751]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:43.751]                     ...future.globalenv.names))
[17:02:43.751]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:43.751]         }, condition = base::local({
[17:02:43.751]             c <- base::c
[17:02:43.751]             inherits <- base::inherits
[17:02:43.751]             invokeRestart <- base::invokeRestart
[17:02:43.751]             length <- base::length
[17:02:43.751]             list <- base::list
[17:02:43.751]             seq.int <- base::seq.int
[17:02:43.751]             signalCondition <- base::signalCondition
[17:02:43.751]             sys.calls <- base::sys.calls
[17:02:43.751]             `[[` <- base::`[[`
[17:02:43.751]             `+` <- base::`+`
[17:02:43.751]             `<<-` <- base::`<<-`
[17:02:43.751]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:43.751]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:43.751]                   3L)]
[17:02:43.751]             }
[17:02:43.751]             function(cond) {
[17:02:43.751]                 is_error <- inherits(cond, "error")
[17:02:43.751]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:43.751]                   NULL)
[17:02:43.751]                 if (is_error) {
[17:02:43.751]                   sessionInformation <- function() {
[17:02:43.751]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:43.751]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:43.751]                       search = base::search(), system = base::Sys.info())
[17:02:43.751]                   }
[17:02:43.751]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.751]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:43.751]                     cond$call), session = sessionInformation(), 
[17:02:43.751]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:43.751]                   signalCondition(cond)
[17:02:43.751]                 }
[17:02:43.751]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:43.751]                 "immediateCondition"))) {
[17:02:43.751]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:43.751]                   ...future.conditions[[length(...future.conditions) + 
[17:02:43.751]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:43.751]                   if (TRUE && !signal) {
[17:02:43.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.751]                     {
[17:02:43.751]                       inherits <- base::inherits
[17:02:43.751]                       invokeRestart <- base::invokeRestart
[17:02:43.751]                       is.null <- base::is.null
[17:02:43.751]                       muffled <- FALSE
[17:02:43.751]                       if (inherits(cond, "message")) {
[17:02:43.751]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.751]                         if (muffled) 
[17:02:43.751]                           invokeRestart("muffleMessage")
[17:02:43.751]                       }
[17:02:43.751]                       else if (inherits(cond, "warning")) {
[17:02:43.751]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.751]                         if (muffled) 
[17:02:43.751]                           invokeRestart("muffleWarning")
[17:02:43.751]                       }
[17:02:43.751]                       else if (inherits(cond, "condition")) {
[17:02:43.751]                         if (!is.null(pattern)) {
[17:02:43.751]                           computeRestarts <- base::computeRestarts
[17:02:43.751]                           grepl <- base::grepl
[17:02:43.751]                           restarts <- computeRestarts(cond)
[17:02:43.751]                           for (restart in restarts) {
[17:02:43.751]                             name <- restart$name
[17:02:43.751]                             if (is.null(name)) 
[17:02:43.751]                               next
[17:02:43.751]                             if (!grepl(pattern, name)) 
[17:02:43.751]                               next
[17:02:43.751]                             invokeRestart(restart)
[17:02:43.751]                             muffled <- TRUE
[17:02:43.751]                             break
[17:02:43.751]                           }
[17:02:43.751]                         }
[17:02:43.751]                       }
[17:02:43.751]                       invisible(muffled)
[17:02:43.751]                     }
[17:02:43.751]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.751]                   }
[17:02:43.751]                 }
[17:02:43.751]                 else {
[17:02:43.751]                   if (TRUE) {
[17:02:43.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:43.751]                     {
[17:02:43.751]                       inherits <- base::inherits
[17:02:43.751]                       invokeRestart <- base::invokeRestart
[17:02:43.751]                       is.null <- base::is.null
[17:02:43.751]                       muffled <- FALSE
[17:02:43.751]                       if (inherits(cond, "message")) {
[17:02:43.751]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:43.751]                         if (muffled) 
[17:02:43.751]                           invokeRestart("muffleMessage")
[17:02:43.751]                       }
[17:02:43.751]                       else if (inherits(cond, "warning")) {
[17:02:43.751]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:43.751]                         if (muffled) 
[17:02:43.751]                           invokeRestart("muffleWarning")
[17:02:43.751]                       }
[17:02:43.751]                       else if (inherits(cond, "condition")) {
[17:02:43.751]                         if (!is.null(pattern)) {
[17:02:43.751]                           computeRestarts <- base::computeRestarts
[17:02:43.751]                           grepl <- base::grepl
[17:02:43.751]                           restarts <- computeRestarts(cond)
[17:02:43.751]                           for (restart in restarts) {
[17:02:43.751]                             name <- restart$name
[17:02:43.751]                             if (is.null(name)) 
[17:02:43.751]                               next
[17:02:43.751]                             if (!grepl(pattern, name)) 
[17:02:43.751]                               next
[17:02:43.751]                             invokeRestart(restart)
[17:02:43.751]                             muffled <- TRUE
[17:02:43.751]                             break
[17:02:43.751]                           }
[17:02:43.751]                         }
[17:02:43.751]                       }
[17:02:43.751]                       invisible(muffled)
[17:02:43.751]                     }
[17:02:43.751]                     muffleCondition(cond, pattern = "^muffle")
[17:02:43.751]                   }
[17:02:43.751]                 }
[17:02:43.751]             }
[17:02:43.751]         }))
[17:02:43.751]     }, error = function(ex) {
[17:02:43.751]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:43.751]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:43.751]                 ...future.rng), started = ...future.startTime, 
[17:02:43.751]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:43.751]             version = "1.8"), class = "FutureResult")
[17:02:43.751]     }, finally = {
[17:02:43.751]         if (!identical(...future.workdir, getwd())) 
[17:02:43.751]             setwd(...future.workdir)
[17:02:43.751]         {
[17:02:43.751]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:43.751]                 ...future.oldOptions$nwarnings <- NULL
[17:02:43.751]             }
[17:02:43.751]             base::options(...future.oldOptions)
[17:02:43.751]             if (.Platform$OS.type == "windows") {
[17:02:43.751]                 old_names <- names(...future.oldEnvVars)
[17:02:43.751]                 envs <- base::Sys.getenv()
[17:02:43.751]                 names <- names(envs)
[17:02:43.751]                 common <- intersect(names, old_names)
[17:02:43.751]                 added <- setdiff(names, old_names)
[17:02:43.751]                 removed <- setdiff(old_names, names)
[17:02:43.751]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:43.751]                   envs[common]]
[17:02:43.751]                 NAMES <- toupper(changed)
[17:02:43.751]                 args <- list()
[17:02:43.751]                 for (kk in seq_along(NAMES)) {
[17:02:43.751]                   name <- changed[[kk]]
[17:02:43.751]                   NAME <- NAMES[[kk]]
[17:02:43.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.751]                     next
[17:02:43.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.751]                 }
[17:02:43.751]                 NAMES <- toupper(added)
[17:02:43.751]                 for (kk in seq_along(NAMES)) {
[17:02:43.751]                   name <- added[[kk]]
[17:02:43.751]                   NAME <- NAMES[[kk]]
[17:02:43.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.751]                     next
[17:02:43.751]                   args[[name]] <- ""
[17:02:43.751]                 }
[17:02:43.751]                 NAMES <- toupper(removed)
[17:02:43.751]                 for (kk in seq_along(NAMES)) {
[17:02:43.751]                   name <- removed[[kk]]
[17:02:43.751]                   NAME <- NAMES[[kk]]
[17:02:43.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:43.751]                     next
[17:02:43.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:43.751]                 }
[17:02:43.751]                 if (length(args) > 0) 
[17:02:43.751]                   base::do.call(base::Sys.setenv, args = args)
[17:02:43.751]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:43.751]             }
[17:02:43.751]             else {
[17:02:43.751]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:43.751]             }
[17:02:43.751]             {
[17:02:43.751]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:43.751]                   0L) {
[17:02:43.751]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:43.751]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:43.751]                   base::options(opts)
[17:02:43.751]                 }
[17:02:43.751]                 {
[17:02:43.751]                   {
[17:02:43.751]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:43.751]                     NULL
[17:02:43.751]                   }
[17:02:43.751]                   options(future.plan = NULL)
[17:02:43.751]                   if (is.na(NA_character_)) 
[17:02:43.751]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:43.751]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:43.751]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:43.751]                     .init = FALSE)
[17:02:43.751]                 }
[17:02:43.751]             }
[17:02:43.751]         }
[17:02:43.751]     })
[17:02:43.751]     if (TRUE) {
[17:02:43.751]         base::sink(type = "output", split = FALSE)
[17:02:43.751]         if (TRUE) {
[17:02:43.751]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:43.751]         }
[17:02:43.751]         else {
[17:02:43.751]             ...future.result["stdout"] <- base::list(NULL)
[17:02:43.751]         }
[17:02:43.751]         base::close(...future.stdout)
[17:02:43.751]         ...future.stdout <- NULL
[17:02:43.751]     }
[17:02:43.751]     ...future.result$conditions <- ...future.conditions
[17:02:43.751]     ...future.result$finished <- base::Sys.time()
[17:02:43.751]     ...future.result
[17:02:43.751] }
[17:02:43.854]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.802] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[17:02:43.854]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.803] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[17:02:43.854]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.803] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[17:02:43.854]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.803] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[17:02:43.854]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.804] MultisessionFuture started
[17:02:43.854]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.804] - Launch lazy future ... done
[17:02:43.854]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.804] run() for ‘MultisessionFuture’ ... done
[17:02:43.854]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.804] result() for ClusterFuture ...
[17:02:43.855]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.805] receiveMessageFromWorker() for ClusterFuture ...
[17:02:43.855]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.805] - Validating connection of MultisessionFuture
[17:02:43.855]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.838] - received message: FutureResult
[17:02:43.855]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.838] - Received FutureResult
[17:02:43.855]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.838] - Erased future from FutureRegistry
[17:02:43.855]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.840] result() for ClusterFuture ...
[17:02:43.855]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.840] - result already collected: FutureResult
[17:02:43.855]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.840] result() for ClusterFuture ... done
[17:02:43.856]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.841] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:43.856]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.841] result() for ClusterFuture ... done
[17:02:43.856]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.841] result() for ClusterFuture ...
[17:02:43.856]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.841] - result already collected: FutureResult
[17:02:43.856]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:43.841] result() for ClusterFuture ... done
[17:02:43.856] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[17:02:43.857] plan(): Setting new future strategy stack:
[17:02:43.857] List of future strategies:
[17:02:43.857] 1. FutureStrategy:
[17:02:43.857]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:43.857]    - tweaked: FALSE
[17:02:43.857]    - call: future::plan(oplan)
[17:02:43.858] plan(): nbrOfWorkers() = 1
> 
