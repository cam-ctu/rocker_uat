
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:57.453] plan(): Setting new future strategy stack:
[18:03:57.454] List of future strategies:
[18:03:57.454] 1. sequential:
[18:03:57.454]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.454]    - tweaked: FALSE
[18:03:57.454]    - call: future::plan("sequential")
[18:03:57.477] plan(): nbrOfWorkers() = 1
> 
> ## BACKWARD COMPATIBILITY
> if (getRversion() < "3.2.0") {
+   names <- function(x) if (is.environment(x)) ls(envir = x) else base::names(x)
+ }
> 
> message("*** %<-% to environment ...")
*** %<-% to environment ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Async delayed assignment (infix operator)
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- new.env()
> stopifnot(length(names(z)) == 0L)
> 
> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)
> res <- try(z[[1]] %<-% { 2 } %lazy% TRUE, silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)
> z$B %<-% { TRUE }  %lazy% TRUE
[18:03:57.502] getGlobalsAndPackages() ...
[18:03:57.502] Searching for globals...
[18:03:57.507] - globals found: [1] ‘{’
[18:03:57.508] Searching for globals ... DONE
[18:03:57.508] Resolving globals: FALSE
[18:03:57.509] 
[18:03:57.509] 
[18:03:57.509] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 2) # sic!
> stopifnot("B" %in% ls(z))
> 
> y <- as.list(z)
[18:03:57.511] run() for ‘Future’ ...
[18:03:57.511] - state: ‘created’
[18:03:57.512] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:57.512] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:57.513] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:57.513]   - Field: ‘label’
[18:03:57.513]   - Field: ‘local’
[18:03:57.513]   - Field: ‘owner’
[18:03:57.513]   - Field: ‘envir’
[18:03:57.514]   - Field: ‘packages’
[18:03:57.514]   - Field: ‘gc’
[18:03:57.514]   - Field: ‘conditions’
[18:03:57.514]   - Field: ‘expr’
[18:03:57.514]   - Field: ‘uuid’
[18:03:57.515]   - Field: ‘seed’
[18:03:57.515]   - Field: ‘version’
[18:03:57.515]   - Field: ‘result’
[18:03:57.515]   - Field: ‘asynchronous’
[18:03:57.515]   - Field: ‘calls’
[18:03:57.516]   - Field: ‘globals’
[18:03:57.516]   - Field: ‘stdout’
[18:03:57.516]   - Field: ‘earlySignal’
[18:03:57.516]   - Field: ‘lazy’
[18:03:57.516]   - Field: ‘state’
[18:03:57.517] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:57.517] - Launch lazy future ...
[18:03:57.518] Packages needed by the future expression (n = 0): <none>
[18:03:57.518] Packages needed by future strategies (n = 0): <none>
[18:03:57.520] {
[18:03:57.520]     {
[18:03:57.520]         {
[18:03:57.520]             ...future.startTime <- base::Sys.time()
[18:03:57.520]             {
[18:03:57.520]                 {
[18:03:57.520]                   {
[18:03:57.520]                     base::local({
[18:03:57.520]                       has_future <- base::requireNamespace("future", 
[18:03:57.520]                         quietly = TRUE)
[18:03:57.520]                       if (has_future) {
[18:03:57.520]                         ns <- base::getNamespace("future")
[18:03:57.520]                         version <- ns[[".package"]][["version"]]
[18:03:57.520]                         if (is.null(version)) 
[18:03:57.520]                           version <- utils::packageVersion("future")
[18:03:57.520]                       }
[18:03:57.520]                       else {
[18:03:57.520]                         version <- NULL
[18:03:57.520]                       }
[18:03:57.520]                       if (!has_future || version < "1.8.0") {
[18:03:57.520]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:57.520]                           "", base::R.version$version.string), 
[18:03:57.520]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:57.520]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:57.520]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:57.520]                             "release", "version")], collapse = " "), 
[18:03:57.520]                           hostname = base::Sys.info()[["nodename"]])
[18:03:57.520]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:57.520]                           info)
[18:03:57.520]                         info <- base::paste(info, collapse = "; ")
[18:03:57.520]                         if (!has_future) {
[18:03:57.520]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:57.520]                             info)
[18:03:57.520]                         }
[18:03:57.520]                         else {
[18:03:57.520]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:57.520]                             info, version)
[18:03:57.520]                         }
[18:03:57.520]                         base::stop(msg)
[18:03:57.520]                       }
[18:03:57.520]                     })
[18:03:57.520]                   }
[18:03:57.520]                   ...future.strategy.old <- future::plan("list")
[18:03:57.520]                   options(future.plan = NULL)
[18:03:57.520]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:57.520]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:57.520]                 }
[18:03:57.520]                 ...future.workdir <- getwd()
[18:03:57.520]             }
[18:03:57.520]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:57.520]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:57.520]         }
[18:03:57.520]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:57.520]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:57.520]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:57.520]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:57.520]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:57.520]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:57.520]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:57.520]             base::names(...future.oldOptions))
[18:03:57.520]     }
[18:03:57.520]     if (FALSE) {
[18:03:57.520]     }
[18:03:57.520]     else {
[18:03:57.520]         if (TRUE) {
[18:03:57.520]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:57.520]                 open = "w")
[18:03:57.520]         }
[18:03:57.520]         else {
[18:03:57.520]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:57.520]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:57.520]         }
[18:03:57.520]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:57.520]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:57.520]             base::sink(type = "output", split = FALSE)
[18:03:57.520]             base::close(...future.stdout)
[18:03:57.520]         }, add = TRUE)
[18:03:57.520]     }
[18:03:57.520]     ...future.frame <- base::sys.nframe()
[18:03:57.520]     ...future.conditions <- base::list()
[18:03:57.520]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:57.520]     if (FALSE) {
[18:03:57.520]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:57.520]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:57.520]     }
[18:03:57.520]     ...future.result <- base::tryCatch({
[18:03:57.520]         base::withCallingHandlers({
[18:03:57.520]             ...future.value <- base::withVisible(base::local({
[18:03:57.520]                 TRUE
[18:03:57.520]             }))
[18:03:57.520]             future::FutureResult(value = ...future.value$value, 
[18:03:57.520]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:57.520]                   ...future.rng), globalenv = if (FALSE) 
[18:03:57.520]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:57.520]                     ...future.globalenv.names))
[18:03:57.520]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:57.520]         }, condition = base::local({
[18:03:57.520]             c <- base::c
[18:03:57.520]             inherits <- base::inherits
[18:03:57.520]             invokeRestart <- base::invokeRestart
[18:03:57.520]             length <- base::length
[18:03:57.520]             list <- base::list
[18:03:57.520]             seq.int <- base::seq.int
[18:03:57.520]             signalCondition <- base::signalCondition
[18:03:57.520]             sys.calls <- base::sys.calls
[18:03:57.520]             `[[` <- base::`[[`
[18:03:57.520]             `+` <- base::`+`
[18:03:57.520]             `<<-` <- base::`<<-`
[18:03:57.520]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:57.520]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:57.520]                   3L)]
[18:03:57.520]             }
[18:03:57.520]             function(cond) {
[18:03:57.520]                 is_error <- inherits(cond, "error")
[18:03:57.520]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:57.520]                   NULL)
[18:03:57.520]                 if (is_error) {
[18:03:57.520]                   sessionInformation <- function() {
[18:03:57.520]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:57.520]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:57.520]                       search = base::search(), system = base::Sys.info())
[18:03:57.520]                   }
[18:03:57.520]                   ...future.conditions[[length(...future.conditions) + 
[18:03:57.520]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:57.520]                     cond$call), session = sessionInformation(), 
[18:03:57.520]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:57.520]                   signalCondition(cond)
[18:03:57.520]                 }
[18:03:57.520]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:57.520]                 "immediateCondition"))) {
[18:03:57.520]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:57.520]                   ...future.conditions[[length(...future.conditions) + 
[18:03:57.520]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:57.520]                   if (TRUE && !signal) {
[18:03:57.520]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:57.520]                     {
[18:03:57.520]                       inherits <- base::inherits
[18:03:57.520]                       invokeRestart <- base::invokeRestart
[18:03:57.520]                       is.null <- base::is.null
[18:03:57.520]                       muffled <- FALSE
[18:03:57.520]                       if (inherits(cond, "message")) {
[18:03:57.520]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:57.520]                         if (muffled) 
[18:03:57.520]                           invokeRestart("muffleMessage")
[18:03:57.520]                       }
[18:03:57.520]                       else if (inherits(cond, "warning")) {
[18:03:57.520]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:57.520]                         if (muffled) 
[18:03:57.520]                           invokeRestart("muffleWarning")
[18:03:57.520]                       }
[18:03:57.520]                       else if (inherits(cond, "condition")) {
[18:03:57.520]                         if (!is.null(pattern)) {
[18:03:57.520]                           computeRestarts <- base::computeRestarts
[18:03:57.520]                           grepl <- base::grepl
[18:03:57.520]                           restarts <- computeRestarts(cond)
[18:03:57.520]                           for (restart in restarts) {
[18:03:57.520]                             name <- restart$name
[18:03:57.520]                             if (is.null(name)) 
[18:03:57.520]                               next
[18:03:57.520]                             if (!grepl(pattern, name)) 
[18:03:57.520]                               next
[18:03:57.520]                             invokeRestart(restart)
[18:03:57.520]                             muffled <- TRUE
[18:03:57.520]                             break
[18:03:57.520]                           }
[18:03:57.520]                         }
[18:03:57.520]                       }
[18:03:57.520]                       invisible(muffled)
[18:03:57.520]                     }
[18:03:57.520]                     muffleCondition(cond, pattern = "^muffle")
[18:03:57.520]                   }
[18:03:57.520]                 }
[18:03:57.520]                 else {
[18:03:57.520]                   if (TRUE) {
[18:03:57.520]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:57.520]                     {
[18:03:57.520]                       inherits <- base::inherits
[18:03:57.520]                       invokeRestart <- base::invokeRestart
[18:03:57.520]                       is.null <- base::is.null
[18:03:57.520]                       muffled <- FALSE
[18:03:57.520]                       if (inherits(cond, "message")) {
[18:03:57.520]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:57.520]                         if (muffled) 
[18:03:57.520]                           invokeRestart("muffleMessage")
[18:03:57.520]                       }
[18:03:57.520]                       else if (inherits(cond, "warning")) {
[18:03:57.520]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:57.520]                         if (muffled) 
[18:03:57.520]                           invokeRestart("muffleWarning")
[18:03:57.520]                       }
[18:03:57.520]                       else if (inherits(cond, "condition")) {
[18:03:57.520]                         if (!is.null(pattern)) {
[18:03:57.520]                           computeRestarts <- base::computeRestarts
[18:03:57.520]                           grepl <- base::grepl
[18:03:57.520]                           restarts <- computeRestarts(cond)
[18:03:57.520]                           for (restart in restarts) {
[18:03:57.520]                             name <- restart$name
[18:03:57.520]                             if (is.null(name)) 
[18:03:57.520]                               next
[18:03:57.520]                             if (!grepl(pattern, name)) 
[18:03:57.520]                               next
[18:03:57.520]                             invokeRestart(restart)
[18:03:57.520]                             muffled <- TRUE
[18:03:57.520]                             break
[18:03:57.520]                           }
[18:03:57.520]                         }
[18:03:57.520]                       }
[18:03:57.520]                       invisible(muffled)
[18:03:57.520]                     }
[18:03:57.520]                     muffleCondition(cond, pattern = "^muffle")
[18:03:57.520]                   }
[18:03:57.520]                 }
[18:03:57.520]             }
[18:03:57.520]         }))
[18:03:57.520]     }, error = function(ex) {
[18:03:57.520]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:57.520]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:57.520]                 ...future.rng), started = ...future.startTime, 
[18:03:57.520]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:57.520]             version = "1.8"), class = "FutureResult")
[18:03:57.520]     }, finally = {
[18:03:57.520]         if (!identical(...future.workdir, getwd())) 
[18:03:57.520]             setwd(...future.workdir)
[18:03:57.520]         {
[18:03:57.520]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:57.520]                 ...future.oldOptions$nwarnings <- NULL
[18:03:57.520]             }
[18:03:57.520]             base::options(...future.oldOptions)
[18:03:57.520]             if (.Platform$OS.type == "windows") {
[18:03:57.520]                 old_names <- names(...future.oldEnvVars)
[18:03:57.520]                 envs <- base::Sys.getenv()
[18:03:57.520]                 names <- names(envs)
[18:03:57.520]                 common <- intersect(names, old_names)
[18:03:57.520]                 added <- setdiff(names, old_names)
[18:03:57.520]                 removed <- setdiff(old_names, names)
[18:03:57.520]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:57.520]                   envs[common]]
[18:03:57.520]                 NAMES <- toupper(changed)
[18:03:57.520]                 args <- list()
[18:03:57.520]                 for (kk in seq_along(NAMES)) {
[18:03:57.520]                   name <- changed[[kk]]
[18:03:57.520]                   NAME <- NAMES[[kk]]
[18:03:57.520]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.520]                     next
[18:03:57.520]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:57.520]                 }
[18:03:57.520]                 NAMES <- toupper(added)
[18:03:57.520]                 for (kk in seq_along(NAMES)) {
[18:03:57.520]                   name <- added[[kk]]
[18:03:57.520]                   NAME <- NAMES[[kk]]
[18:03:57.520]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.520]                     next
[18:03:57.520]                   args[[name]] <- ""
[18:03:57.520]                 }
[18:03:57.520]                 NAMES <- toupper(removed)
[18:03:57.520]                 for (kk in seq_along(NAMES)) {
[18:03:57.520]                   name <- removed[[kk]]
[18:03:57.520]                   NAME <- NAMES[[kk]]
[18:03:57.520]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.520]                     next
[18:03:57.520]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:57.520]                 }
[18:03:57.520]                 if (length(args) > 0) 
[18:03:57.520]                   base::do.call(base::Sys.setenv, args = args)
[18:03:57.520]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:57.520]             }
[18:03:57.520]             else {
[18:03:57.520]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:57.520]             }
[18:03:57.520]             {
[18:03:57.520]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:57.520]                   0L) {
[18:03:57.520]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:57.520]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:57.520]                   base::options(opts)
[18:03:57.520]                 }
[18:03:57.520]                 {
[18:03:57.520]                   {
[18:03:57.520]                     NULL
[18:03:57.520]                     RNGkind("Mersenne-Twister")
[18:03:57.520]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:57.520]                       inherits = FALSE)
[18:03:57.520]                   }
[18:03:57.520]                   options(future.plan = NULL)
[18:03:57.520]                   if (is.na(NA_character_)) 
[18:03:57.520]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:57.520]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:57.520]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:57.520]                     .init = FALSE)
[18:03:57.520]                 }
[18:03:57.520]             }
[18:03:57.520]         }
[18:03:57.520]     })
[18:03:57.520]     if (TRUE) {
[18:03:57.520]         base::sink(type = "output", split = FALSE)
[18:03:57.520]         if (TRUE) {
[18:03:57.520]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:57.520]         }
[18:03:57.520]         else {
[18:03:57.520]             ...future.result["stdout"] <- base::list(NULL)
[18:03:57.520]         }
[18:03:57.520]         base::close(...future.stdout)
[18:03:57.520]         ...future.stdout <- NULL
[18:03:57.520]     }
[18:03:57.520]     ...future.result$conditions <- ...future.conditions
[18:03:57.520]     ...future.result$finished <- base::Sys.time()
[18:03:57.520]     ...future.result
[18:03:57.520] }
[18:03:57.523] plan(): Setting new future strategy stack:
[18:03:57.524] List of future strategies:
[18:03:57.524] 1. sequential:
[18:03:57.524]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.524]    - tweaked: FALSE
[18:03:57.524]    - call: NULL
[18:03:57.525] plan(): nbrOfWorkers() = 1
[18:03:57.527] plan(): Setting new future strategy stack:
[18:03:57.527] List of future strategies:
[18:03:57.527] 1. sequential:
[18:03:57.527]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.527]    - tweaked: FALSE
[18:03:57.527]    - call: future::plan("sequential")
[18:03:57.528] plan(): nbrOfWorkers() = 1
[18:03:57.528] SequentialFuture started (and completed)
[18:03:57.529] - Launch lazy future ... done
[18:03:57.529] run() for ‘SequentialFuture’ ... done
> str(y)
List of 1
 $ B: logi TRUE
> stopifnot(length(y) == 1)
> stopifnot(identical(names(y), "B"))
> 
> 
> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes
> u <- new.env()
> u$a %<-% { 1 } %lazy% TRUE
[18:03:57.535] getGlobalsAndPackages() ...
[18:03:57.535] Searching for globals...
[18:03:57.536] - globals found: [1] ‘{’
[18:03:57.536] Searching for globals ... DONE
[18:03:57.536] Resolving globals: FALSE
[18:03:57.537] 
[18:03:57.537] 
[18:03:57.537] getGlobalsAndPackages() ... DONE
> stopifnot(length(u) == 2)
> stopifnot("a" %in% names(u))
> fu <- futureOf(u$a)
> 
> v <- new.env()
> v$a %<-% { 2 } %lazy% TRUE
[18:03:57.539] getGlobalsAndPackages() ...
[18:03:57.539] Searching for globals...
[18:03:57.540] - globals found: [1] ‘{’
[18:03:57.540] Searching for globals ... DONE
[18:03:57.541] Resolving globals: FALSE
[18:03:57.541] 
[18:03:57.541] 
[18:03:57.542] getGlobalsAndPackages() ... DONE
> stopifnot(length(v) == 2)
> stopifnot("a" %in% names(v))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[18:03:57.543] run() for ‘Future’ ...
[18:03:57.543] - state: ‘created’
[18:03:57.543] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:57.544] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:57.544] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:57.544]   - Field: ‘label’
[18:03:57.545]   - Field: ‘local’
[18:03:57.545]   - Field: ‘owner’
[18:03:57.545]   - Field: ‘envir’
[18:03:57.545]   - Field: ‘packages’
[18:03:57.545]   - Field: ‘gc’
[18:03:57.546]   - Field: ‘conditions’
[18:03:57.546]   - Field: ‘expr’
[18:03:57.546]   - Field: ‘uuid’
[18:03:57.546]   - Field: ‘seed’
[18:03:57.546]   - Field: ‘version’
[18:03:57.547]   - Field: ‘result’
[18:03:57.547]   - Field: ‘asynchronous’
[18:03:57.547]   - Field: ‘calls’
[18:03:57.547]   - Field: ‘globals’
[18:03:57.547]   - Field: ‘stdout’
[18:03:57.547]   - Field: ‘earlySignal’
[18:03:57.548]   - Field: ‘lazy’
[18:03:57.548]   - Field: ‘state’
[18:03:57.548] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:57.548] - Launch lazy future ...
[18:03:57.549] Packages needed by the future expression (n = 0): <none>
[18:03:57.549] Packages needed by future strategies (n = 0): <none>
[18:03:57.550] {
[18:03:57.550]     {
[18:03:57.550]         {
[18:03:57.550]             ...future.startTime <- base::Sys.time()
[18:03:57.550]             {
[18:03:57.550]                 {
[18:03:57.550]                   {
[18:03:57.550]                     base::local({
[18:03:57.550]                       has_future <- base::requireNamespace("future", 
[18:03:57.550]                         quietly = TRUE)
[18:03:57.550]                       if (has_future) {
[18:03:57.550]                         ns <- base::getNamespace("future")
[18:03:57.550]                         version <- ns[[".package"]][["version"]]
[18:03:57.550]                         if (is.null(version)) 
[18:03:57.550]                           version <- utils::packageVersion("future")
[18:03:57.550]                       }
[18:03:57.550]                       else {
[18:03:57.550]                         version <- NULL
[18:03:57.550]                       }
[18:03:57.550]                       if (!has_future || version < "1.8.0") {
[18:03:57.550]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:57.550]                           "", base::R.version$version.string), 
[18:03:57.550]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:57.550]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:57.550]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:57.550]                             "release", "version")], collapse = " "), 
[18:03:57.550]                           hostname = base::Sys.info()[["nodename"]])
[18:03:57.550]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:57.550]                           info)
[18:03:57.550]                         info <- base::paste(info, collapse = "; ")
[18:03:57.550]                         if (!has_future) {
[18:03:57.550]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:57.550]                             info)
[18:03:57.550]                         }
[18:03:57.550]                         else {
[18:03:57.550]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:57.550]                             info, version)
[18:03:57.550]                         }
[18:03:57.550]                         base::stop(msg)
[18:03:57.550]                       }
[18:03:57.550]                     })
[18:03:57.550]                   }
[18:03:57.550]                   ...future.strategy.old <- future::plan("list")
[18:03:57.550]                   options(future.plan = NULL)
[18:03:57.550]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:57.550]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:57.550]                 }
[18:03:57.550]                 ...future.workdir <- getwd()
[18:03:57.550]             }
[18:03:57.550]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:57.550]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:57.550]         }
[18:03:57.550]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:57.550]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:57.550]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:57.550]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:57.550]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:57.550]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:57.550]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:57.550]             base::names(...future.oldOptions))
[18:03:57.550]     }
[18:03:57.550]     if (FALSE) {
[18:03:57.550]     }
[18:03:57.550]     else {
[18:03:57.550]         if (TRUE) {
[18:03:57.550]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:57.550]                 open = "w")
[18:03:57.550]         }
[18:03:57.550]         else {
[18:03:57.550]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:57.550]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:57.550]         }
[18:03:57.550]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:57.550]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:57.550]             base::sink(type = "output", split = FALSE)
[18:03:57.550]             base::close(...future.stdout)
[18:03:57.550]         }, add = TRUE)
[18:03:57.550]     }
[18:03:57.550]     ...future.frame <- base::sys.nframe()
[18:03:57.550]     ...future.conditions <- base::list()
[18:03:57.550]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:57.550]     if (FALSE) {
[18:03:57.550]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:57.550]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:57.550]     }
[18:03:57.550]     ...future.result <- base::tryCatch({
[18:03:57.550]         base::withCallingHandlers({
[18:03:57.550]             ...future.value <- base::withVisible(base::local({
[18:03:57.550]                 1
[18:03:57.550]             }))
[18:03:57.550]             future::FutureResult(value = ...future.value$value, 
[18:03:57.550]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:57.550]                   ...future.rng), globalenv = if (FALSE) 
[18:03:57.550]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:57.550]                     ...future.globalenv.names))
[18:03:57.550]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:57.550]         }, condition = base::local({
[18:03:57.550]             c <- base::c
[18:03:57.550]             inherits <- base::inherits
[18:03:57.550]             invokeRestart <- base::invokeRestart
[18:03:57.550]             length <- base::length
[18:03:57.550]             list <- base::list
[18:03:57.550]             seq.int <- base::seq.int
[18:03:57.550]             signalCondition <- base::signalCondition
[18:03:57.550]             sys.calls <- base::sys.calls
[18:03:57.550]             `[[` <- base::`[[`
[18:03:57.550]             `+` <- base::`+`
[18:03:57.550]             `<<-` <- base::`<<-`
[18:03:57.550]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:57.550]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:57.550]                   3L)]
[18:03:57.550]             }
[18:03:57.550]             function(cond) {
[18:03:57.550]                 is_error <- inherits(cond, "error")
[18:03:57.550]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:57.550]                   NULL)
[18:03:57.550]                 if (is_error) {
[18:03:57.550]                   sessionInformation <- function() {
[18:03:57.550]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:57.550]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:57.550]                       search = base::search(), system = base::Sys.info())
[18:03:57.550]                   }
[18:03:57.550]                   ...future.conditions[[length(...future.conditions) + 
[18:03:57.550]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:57.550]                     cond$call), session = sessionInformation(), 
[18:03:57.550]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:57.550]                   signalCondition(cond)
[18:03:57.550]                 }
[18:03:57.550]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:57.550]                 "immediateCondition"))) {
[18:03:57.550]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:57.550]                   ...future.conditions[[length(...future.conditions) + 
[18:03:57.550]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:57.550]                   if (TRUE && !signal) {
[18:03:57.550]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:57.550]                     {
[18:03:57.550]                       inherits <- base::inherits
[18:03:57.550]                       invokeRestart <- base::invokeRestart
[18:03:57.550]                       is.null <- base::is.null
[18:03:57.550]                       muffled <- FALSE
[18:03:57.550]                       if (inherits(cond, "message")) {
[18:03:57.550]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:57.550]                         if (muffled) 
[18:03:57.550]                           invokeRestart("muffleMessage")
[18:03:57.550]                       }
[18:03:57.550]                       else if (inherits(cond, "warning")) {
[18:03:57.550]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:57.550]                         if (muffled) 
[18:03:57.550]                           invokeRestart("muffleWarning")
[18:03:57.550]                       }
[18:03:57.550]                       else if (inherits(cond, "condition")) {
[18:03:57.550]                         if (!is.null(pattern)) {
[18:03:57.550]                           computeRestarts <- base::computeRestarts
[18:03:57.550]                           grepl <- base::grepl
[18:03:57.550]                           restarts <- computeRestarts(cond)
[18:03:57.550]                           for (restart in restarts) {
[18:03:57.550]                             name <- restart$name
[18:03:57.550]                             if (is.null(name)) 
[18:03:57.550]                               next
[18:03:57.550]                             if (!grepl(pattern, name)) 
[18:03:57.550]                               next
[18:03:57.550]                             invokeRestart(restart)
[18:03:57.550]                             muffled <- TRUE
[18:03:57.550]                             break
[18:03:57.550]                           }
[18:03:57.550]                         }
[18:03:57.550]                       }
[18:03:57.550]                       invisible(muffled)
[18:03:57.550]                     }
[18:03:57.550]                     muffleCondition(cond, pattern = "^muffle")
[18:03:57.550]                   }
[18:03:57.550]                 }
[18:03:57.550]                 else {
[18:03:57.550]                   if (TRUE) {
[18:03:57.550]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:57.550]                     {
[18:03:57.550]                       inherits <- base::inherits
[18:03:57.550]                       invokeRestart <- base::invokeRestart
[18:03:57.550]                       is.null <- base::is.null
[18:03:57.550]                       muffled <- FALSE
[18:03:57.550]                       if (inherits(cond, "message")) {
[18:03:57.550]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:57.550]                         if (muffled) 
[18:03:57.550]                           invokeRestart("muffleMessage")
[18:03:57.550]                       }
[18:03:57.550]                       else if (inherits(cond, "warning")) {
[18:03:57.550]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:57.550]                         if (muffled) 
[18:03:57.550]                           invokeRestart("muffleWarning")
[18:03:57.550]                       }
[18:03:57.550]                       else if (inherits(cond, "condition")) {
[18:03:57.550]                         if (!is.null(pattern)) {
[18:03:57.550]                           computeRestarts <- base::computeRestarts
[18:03:57.550]                           grepl <- base::grepl
[18:03:57.550]                           restarts <- computeRestarts(cond)
[18:03:57.550]                           for (restart in restarts) {
[18:03:57.550]                             name <- restart$name
[18:03:57.550]                             if (is.null(name)) 
[18:03:57.550]                               next
[18:03:57.550]                             if (!grepl(pattern, name)) 
[18:03:57.550]                               next
[18:03:57.550]                             invokeRestart(restart)
[18:03:57.550]                             muffled <- TRUE
[18:03:57.550]                             break
[18:03:57.550]                           }
[18:03:57.550]                         }
[18:03:57.550]                       }
[18:03:57.550]                       invisible(muffled)
[18:03:57.550]                     }
[18:03:57.550]                     muffleCondition(cond, pattern = "^muffle")
[18:03:57.550]                   }
[18:03:57.550]                 }
[18:03:57.550]             }
[18:03:57.550]         }))
[18:03:57.550]     }, error = function(ex) {
[18:03:57.550]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:57.550]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:57.550]                 ...future.rng), started = ...future.startTime, 
[18:03:57.550]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:57.550]             version = "1.8"), class = "FutureResult")
[18:03:57.550]     }, finally = {
[18:03:57.550]         if (!identical(...future.workdir, getwd())) 
[18:03:57.550]             setwd(...future.workdir)
[18:03:57.550]         {
[18:03:57.550]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:57.550]                 ...future.oldOptions$nwarnings <- NULL
[18:03:57.550]             }
[18:03:57.550]             base::options(...future.oldOptions)
[18:03:57.550]             if (.Platform$OS.type == "windows") {
[18:03:57.550]                 old_names <- names(...future.oldEnvVars)
[18:03:57.550]                 envs <- base::Sys.getenv()
[18:03:57.550]                 names <- names(envs)
[18:03:57.550]                 common <- intersect(names, old_names)
[18:03:57.550]                 added <- setdiff(names, old_names)
[18:03:57.550]                 removed <- setdiff(old_names, names)
[18:03:57.550]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:57.550]                   envs[common]]
[18:03:57.550]                 NAMES <- toupper(changed)
[18:03:57.550]                 args <- list()
[18:03:57.550]                 for (kk in seq_along(NAMES)) {
[18:03:57.550]                   name <- changed[[kk]]
[18:03:57.550]                   NAME <- NAMES[[kk]]
[18:03:57.550]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.550]                     next
[18:03:57.550]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:57.550]                 }
[18:03:57.550]                 NAMES <- toupper(added)
[18:03:57.550]                 for (kk in seq_along(NAMES)) {
[18:03:57.550]                   name <- added[[kk]]
[18:03:57.550]                   NAME <- NAMES[[kk]]
[18:03:57.550]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.550]                     next
[18:03:57.550]                   args[[name]] <- ""
[18:03:57.550]                 }
[18:03:57.550]                 NAMES <- toupper(removed)
[18:03:57.550]                 for (kk in seq_along(NAMES)) {
[18:03:57.550]                   name <- removed[[kk]]
[18:03:57.550]                   NAME <- NAMES[[kk]]
[18:03:57.550]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.550]                     next
[18:03:57.550]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:57.550]                 }
[18:03:57.550]                 if (length(args) > 0) 
[18:03:57.550]                   base::do.call(base::Sys.setenv, args = args)
[18:03:57.550]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:57.550]             }
[18:03:57.550]             else {
[18:03:57.550]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:57.550]             }
[18:03:57.550]             {
[18:03:57.550]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:57.550]                   0L) {
[18:03:57.550]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:57.550]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:57.550]                   base::options(opts)
[18:03:57.550]                 }
[18:03:57.550]                 {
[18:03:57.550]                   {
[18:03:57.550]                     NULL
[18:03:57.550]                     RNGkind("Mersenne-Twister")
[18:03:57.550]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:57.550]                       inherits = FALSE)
[18:03:57.550]                   }
[18:03:57.550]                   options(future.plan = NULL)
[18:03:57.550]                   if (is.na(NA_character_)) 
[18:03:57.550]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:57.550]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:57.550]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:57.550]                     .init = FALSE)
[18:03:57.550]                 }
[18:03:57.550]             }
[18:03:57.550]         }
[18:03:57.550]     })
[18:03:57.550]     if (TRUE) {
[18:03:57.550]         base::sink(type = "output", split = FALSE)
[18:03:57.550]         if (TRUE) {
[18:03:57.550]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:57.550]         }
[18:03:57.550]         else {
[18:03:57.550]             ...future.result["stdout"] <- base::list(NULL)
[18:03:57.550]         }
[18:03:57.550]         base::close(...future.stdout)
[18:03:57.550]         ...future.stdout <- NULL
[18:03:57.550]     }
[18:03:57.550]     ...future.result$conditions <- ...future.conditions
[18:03:57.550]     ...future.result$finished <- base::Sys.time()
[18:03:57.550]     ...future.result
[18:03:57.550] }
[18:03:57.553] plan(): Setting new future strategy stack:
[18:03:57.553] List of future strategies:
[18:03:57.553] 1. sequential:
[18:03:57.553]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.553]    - tweaked: FALSE
[18:03:57.553]    - call: NULL
[18:03:57.554] plan(): nbrOfWorkers() = 1
[18:03:57.556] plan(): Setting new future strategy stack:
[18:03:57.556] List of future strategies:
[18:03:57.556] 1. sequential:
[18:03:57.556]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.556]    - tweaked: FALSE
[18:03:57.556]    - call: future::plan("sequential")
[18:03:57.557] plan(): nbrOfWorkers() = 1
[18:03:57.557] SequentialFuture started (and completed)
[18:03:57.557] - Launch lazy future ... done
[18:03:57.557] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[18:03:57.558] run() for ‘Future’ ...
[18:03:57.558] - state: ‘created’
[18:03:57.558] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:57.559] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:57.559] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:57.559]   - Field: ‘label’
[18:03:57.560]   - Field: ‘local’
[18:03:57.560]   - Field: ‘owner’
[18:03:57.560]   - Field: ‘envir’
[18:03:57.560]   - Field: ‘packages’
[18:03:57.560]   - Field: ‘gc’
[18:03:57.561]   - Field: ‘conditions’
[18:03:57.561]   - Field: ‘expr’
[18:03:57.561]   - Field: ‘uuid’
[18:03:57.561]   - Field: ‘seed’
[18:03:57.562]   - Field: ‘version’
[18:03:57.562]   - Field: ‘result’
[18:03:57.562]   - Field: ‘asynchronous’
[18:03:57.562]   - Field: ‘calls’
[18:03:57.562]   - Field: ‘globals’
[18:03:57.563]   - Field: ‘stdout’
[18:03:57.563]   - Field: ‘earlySignal’
[18:03:57.563]   - Field: ‘lazy’
[18:03:57.563]   - Field: ‘state’
[18:03:57.563] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:57.564] - Launch lazy future ...
[18:03:57.564] Packages needed by the future expression (n = 0): <none>
[18:03:57.564] Packages needed by future strategies (n = 0): <none>
[18:03:57.565] {
[18:03:57.565]     {
[18:03:57.565]         {
[18:03:57.565]             ...future.startTime <- base::Sys.time()
[18:03:57.565]             {
[18:03:57.565]                 {
[18:03:57.565]                   {
[18:03:57.565]                     base::local({
[18:03:57.565]                       has_future <- base::requireNamespace("future", 
[18:03:57.565]                         quietly = TRUE)
[18:03:57.565]                       if (has_future) {
[18:03:57.565]                         ns <- base::getNamespace("future")
[18:03:57.565]                         version <- ns[[".package"]][["version"]]
[18:03:57.565]                         if (is.null(version)) 
[18:03:57.565]                           version <- utils::packageVersion("future")
[18:03:57.565]                       }
[18:03:57.565]                       else {
[18:03:57.565]                         version <- NULL
[18:03:57.565]                       }
[18:03:57.565]                       if (!has_future || version < "1.8.0") {
[18:03:57.565]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:57.565]                           "", base::R.version$version.string), 
[18:03:57.565]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:57.565]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:57.565]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:57.565]                             "release", "version")], collapse = " "), 
[18:03:57.565]                           hostname = base::Sys.info()[["nodename"]])
[18:03:57.565]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:57.565]                           info)
[18:03:57.565]                         info <- base::paste(info, collapse = "; ")
[18:03:57.565]                         if (!has_future) {
[18:03:57.565]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:57.565]                             info)
[18:03:57.565]                         }
[18:03:57.565]                         else {
[18:03:57.565]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:57.565]                             info, version)
[18:03:57.565]                         }
[18:03:57.565]                         base::stop(msg)
[18:03:57.565]                       }
[18:03:57.565]                     })
[18:03:57.565]                   }
[18:03:57.565]                   ...future.strategy.old <- future::plan("list")
[18:03:57.565]                   options(future.plan = NULL)
[18:03:57.565]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:57.565]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:57.565]                 }
[18:03:57.565]                 ...future.workdir <- getwd()
[18:03:57.565]             }
[18:03:57.565]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:57.565]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:57.565]         }
[18:03:57.565]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:57.565]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:57.565]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:57.565]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:57.565]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:57.565]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:57.565]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:57.565]             base::names(...future.oldOptions))
[18:03:57.565]     }
[18:03:57.565]     if (FALSE) {
[18:03:57.565]     }
[18:03:57.565]     else {
[18:03:57.565]         if (TRUE) {
[18:03:57.565]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:57.565]                 open = "w")
[18:03:57.565]         }
[18:03:57.565]         else {
[18:03:57.565]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:57.565]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:57.565]         }
[18:03:57.565]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:57.565]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:57.565]             base::sink(type = "output", split = FALSE)
[18:03:57.565]             base::close(...future.stdout)
[18:03:57.565]         }, add = TRUE)
[18:03:57.565]     }
[18:03:57.565]     ...future.frame <- base::sys.nframe()
[18:03:57.565]     ...future.conditions <- base::list()
[18:03:57.565]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:57.565]     if (FALSE) {
[18:03:57.565]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:57.565]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:57.565]     }
[18:03:57.565]     ...future.result <- base::tryCatch({
[18:03:57.565]         base::withCallingHandlers({
[18:03:57.565]             ...future.value <- base::withVisible(base::local({
[18:03:57.565]                 2
[18:03:57.565]             }))
[18:03:57.565]             future::FutureResult(value = ...future.value$value, 
[18:03:57.565]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:57.565]                   ...future.rng), globalenv = if (FALSE) 
[18:03:57.565]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:57.565]                     ...future.globalenv.names))
[18:03:57.565]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:57.565]         }, condition = base::local({
[18:03:57.565]             c <- base::c
[18:03:57.565]             inherits <- base::inherits
[18:03:57.565]             invokeRestart <- base::invokeRestart
[18:03:57.565]             length <- base::length
[18:03:57.565]             list <- base::list
[18:03:57.565]             seq.int <- base::seq.int
[18:03:57.565]             signalCondition <- base::signalCondition
[18:03:57.565]             sys.calls <- base::sys.calls
[18:03:57.565]             `[[` <- base::`[[`
[18:03:57.565]             `+` <- base::`+`
[18:03:57.565]             `<<-` <- base::`<<-`
[18:03:57.565]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:57.565]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:57.565]                   3L)]
[18:03:57.565]             }
[18:03:57.565]             function(cond) {
[18:03:57.565]                 is_error <- inherits(cond, "error")
[18:03:57.565]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:57.565]                   NULL)
[18:03:57.565]                 if (is_error) {
[18:03:57.565]                   sessionInformation <- function() {
[18:03:57.565]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:57.565]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:57.565]                       search = base::search(), system = base::Sys.info())
[18:03:57.565]                   }
[18:03:57.565]                   ...future.conditions[[length(...future.conditions) + 
[18:03:57.565]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:57.565]                     cond$call), session = sessionInformation(), 
[18:03:57.565]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:57.565]                   signalCondition(cond)
[18:03:57.565]                 }
[18:03:57.565]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:57.565]                 "immediateCondition"))) {
[18:03:57.565]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:57.565]                   ...future.conditions[[length(...future.conditions) + 
[18:03:57.565]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:57.565]                   if (TRUE && !signal) {
[18:03:57.565]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:57.565]                     {
[18:03:57.565]                       inherits <- base::inherits
[18:03:57.565]                       invokeRestart <- base::invokeRestart
[18:03:57.565]                       is.null <- base::is.null
[18:03:57.565]                       muffled <- FALSE
[18:03:57.565]                       if (inherits(cond, "message")) {
[18:03:57.565]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:57.565]                         if (muffled) 
[18:03:57.565]                           invokeRestart("muffleMessage")
[18:03:57.565]                       }
[18:03:57.565]                       else if (inherits(cond, "warning")) {
[18:03:57.565]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:57.565]                         if (muffled) 
[18:03:57.565]                           invokeRestart("muffleWarning")
[18:03:57.565]                       }
[18:03:57.565]                       else if (inherits(cond, "condition")) {
[18:03:57.565]                         if (!is.null(pattern)) {
[18:03:57.565]                           computeRestarts <- base::computeRestarts
[18:03:57.565]                           grepl <- base::grepl
[18:03:57.565]                           restarts <- computeRestarts(cond)
[18:03:57.565]                           for (restart in restarts) {
[18:03:57.565]                             name <- restart$name
[18:03:57.565]                             if (is.null(name)) 
[18:03:57.565]                               next
[18:03:57.565]                             if (!grepl(pattern, name)) 
[18:03:57.565]                               next
[18:03:57.565]                             invokeRestart(restart)
[18:03:57.565]                             muffled <- TRUE
[18:03:57.565]                             break
[18:03:57.565]                           }
[18:03:57.565]                         }
[18:03:57.565]                       }
[18:03:57.565]                       invisible(muffled)
[18:03:57.565]                     }
[18:03:57.565]                     muffleCondition(cond, pattern = "^muffle")
[18:03:57.565]                   }
[18:03:57.565]                 }
[18:03:57.565]                 else {
[18:03:57.565]                   if (TRUE) {
[18:03:57.565]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:57.565]                     {
[18:03:57.565]                       inherits <- base::inherits
[18:03:57.565]                       invokeRestart <- base::invokeRestart
[18:03:57.565]                       is.null <- base::is.null
[18:03:57.565]                       muffled <- FALSE
[18:03:57.565]                       if (inherits(cond, "message")) {
[18:03:57.565]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:57.565]                         if (muffled) 
[18:03:57.565]                           invokeRestart("muffleMessage")
[18:03:57.565]                       }
[18:03:57.565]                       else if (inherits(cond, "warning")) {
[18:03:57.565]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:57.565]                         if (muffled) 
[18:03:57.565]                           invokeRestart("muffleWarning")
[18:03:57.565]                       }
[18:03:57.565]                       else if (inherits(cond, "condition")) {
[18:03:57.565]                         if (!is.null(pattern)) {
[18:03:57.565]                           computeRestarts <- base::computeRestarts
[18:03:57.565]                           grepl <- base::grepl
[18:03:57.565]                           restarts <- computeRestarts(cond)
[18:03:57.565]                           for (restart in restarts) {
[18:03:57.565]                             name <- restart$name
[18:03:57.565]                             if (is.null(name)) 
[18:03:57.565]                               next
[18:03:57.565]                             if (!grepl(pattern, name)) 
[18:03:57.565]                               next
[18:03:57.565]                             invokeRestart(restart)
[18:03:57.565]                             muffled <- TRUE
[18:03:57.565]                             break
[18:03:57.565]                           }
[18:03:57.565]                         }
[18:03:57.565]                       }
[18:03:57.565]                       invisible(muffled)
[18:03:57.565]                     }
[18:03:57.565]                     muffleCondition(cond, pattern = "^muffle")
[18:03:57.565]                   }
[18:03:57.565]                 }
[18:03:57.565]             }
[18:03:57.565]         }))
[18:03:57.565]     }, error = function(ex) {
[18:03:57.565]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:57.565]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:57.565]                 ...future.rng), started = ...future.startTime, 
[18:03:57.565]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:57.565]             version = "1.8"), class = "FutureResult")
[18:03:57.565]     }, finally = {
[18:03:57.565]         if (!identical(...future.workdir, getwd())) 
[18:03:57.565]             setwd(...future.workdir)
[18:03:57.565]         {
[18:03:57.565]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:57.565]                 ...future.oldOptions$nwarnings <- NULL
[18:03:57.565]             }
[18:03:57.565]             base::options(...future.oldOptions)
[18:03:57.565]             if (.Platform$OS.type == "windows") {
[18:03:57.565]                 old_names <- names(...future.oldEnvVars)
[18:03:57.565]                 envs <- base::Sys.getenv()
[18:03:57.565]                 names <- names(envs)
[18:03:57.565]                 common <- intersect(names, old_names)
[18:03:57.565]                 added <- setdiff(names, old_names)
[18:03:57.565]                 removed <- setdiff(old_names, names)
[18:03:57.565]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:57.565]                   envs[common]]
[18:03:57.565]                 NAMES <- toupper(changed)
[18:03:57.565]                 args <- list()
[18:03:57.565]                 for (kk in seq_along(NAMES)) {
[18:03:57.565]                   name <- changed[[kk]]
[18:03:57.565]                   NAME <- NAMES[[kk]]
[18:03:57.565]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.565]                     next
[18:03:57.565]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:57.565]                 }
[18:03:57.565]                 NAMES <- toupper(added)
[18:03:57.565]                 for (kk in seq_along(NAMES)) {
[18:03:57.565]                   name <- added[[kk]]
[18:03:57.565]                   NAME <- NAMES[[kk]]
[18:03:57.565]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.565]                     next
[18:03:57.565]                   args[[name]] <- ""
[18:03:57.565]                 }
[18:03:57.565]                 NAMES <- toupper(removed)
[18:03:57.565]                 for (kk in seq_along(NAMES)) {
[18:03:57.565]                   name <- removed[[kk]]
[18:03:57.565]                   NAME <- NAMES[[kk]]
[18:03:57.565]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:57.565]                     next
[18:03:57.565]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:57.565]                 }
[18:03:57.565]                 if (length(args) > 0) 
[18:03:57.565]                   base::do.call(base::Sys.setenv, args = args)
[18:03:57.565]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:57.565]             }
[18:03:57.565]             else {
[18:03:57.565]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:57.565]             }
[18:03:57.565]             {
[18:03:57.565]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:57.565]                   0L) {
[18:03:57.565]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:57.565]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:57.565]                   base::options(opts)
[18:03:57.565]                 }
[18:03:57.565]                 {
[18:03:57.565]                   {
[18:03:57.565]                     NULL
[18:03:57.565]                     RNGkind("Mersenne-Twister")
[18:03:57.565]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:57.565]                       inherits = FALSE)
[18:03:57.565]                   }
[18:03:57.565]                   options(future.plan = NULL)
[18:03:57.565]                   if (is.na(NA_character_)) 
[18:03:57.565]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:57.565]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:57.565]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:57.565]                     .init = FALSE)
[18:03:57.565]                 }
[18:03:57.565]             }
[18:03:57.565]         }
[18:03:57.565]     })
[18:03:57.565]     if (TRUE) {
[18:03:57.565]         base::sink(type = "output", split = FALSE)
[18:03:57.565]         if (TRUE) {
[18:03:57.565]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:57.565]         }
[18:03:57.565]         else {
[18:03:57.565]             ...future.result["stdout"] <- base::list(NULL)
[18:03:57.565]         }
[18:03:57.565]         base::close(...future.stdout)
[18:03:57.565]         ...future.stdout <- NULL
[18:03:57.565]     }
[18:03:57.565]     ...future.result$conditions <- ...future.conditions
[18:03:57.565]     ...future.result$finished <- base::Sys.time()
[18:03:57.565]     ...future.result
[18:03:57.565] }
[18:03:57.569] plan(): Setting new future strategy stack:
[18:03:57.570] List of future strategies:
[18:03:57.570] 1. sequential:
[18:03:57.570]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.570]    - tweaked: FALSE
[18:03:57.570]    - call: NULL
[18:03:57.571] plan(): nbrOfWorkers() = 1
[18:03:57.572] plan(): Setting new future strategy stack:
[18:03:57.573] List of future strategies:
[18:03:57.573] 1. sequential:
[18:03:57.573]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.573]    - tweaked: FALSE
[18:03:57.573]    - call: future::plan("sequential")
[18:03:57.574] plan(): nbrOfWorkers() = 1
[18:03:57.574] SequentialFuture started (and completed)
[18:03:57.575] - Launch lazy future ... done
[18:03:57.575] run() for ‘SequentialFuture’ ... done
> 
> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
> 
> source("incl/end.R")
[18:03:57.576] plan(): Setting new future strategy stack:
[18:03:57.576] List of future strategies:
[18:03:57.576] 1. FutureStrategy:
[18:03:57.576]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.576]    - tweaked: FALSE
[18:03:57.576]    - call: future::plan(oplan)
[18:03:57.605] plan(): nbrOfWorkers() = 1
> 
