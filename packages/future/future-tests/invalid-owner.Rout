
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:47:15.606] plan(): Setting new future strategy stack:
[17:47:15.606] List of future strategies:
[17:47:15.606] 1. sequential:
[17:47:15.606]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:15.606]    - tweaked: FALSE
[17:47:15.606]    - call: future::plan("sequential")
[17:47:15.617] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[17:47:15.632] plan(): Setting new future strategy stack:
[17:47:15.632] List of future strategies:
[17:47:15.632] 1. multisession:
[17:47:15.632]    - args: function (..., workers = 2L, envir = parent.frame())
[17:47:15.632]    - tweaked: TRUE
[17:47:15.632]    - call: plan(multisession, workers = 2L)
[17:47:15.643] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:15.643] multisession:
[17:47:15.643] - args: function (..., workers = 2L, envir = parent.frame())
[17:47:15.643] - tweaked: TRUE
[17:47:15.643] - call: plan(multisession, workers = 2L)
[17:47:15.644] getGlobalsAndPackages() ...
[17:47:15.644] Not searching for globals
[17:47:15.645] - globals: [0] <none>
[17:47:15.645] getGlobalsAndPackages() ... DONE
[17:47:15.645] [local output] makeClusterPSOCK() ...
[17:47:15.677] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:15.678] [local output] Base port: 11591
[17:47:15.678] [local output] Getting setup options for 2 cluster nodes ...
[17:47:15.679] [local output]  - Node 1 of 2 ...
[17:47:15.679] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:15.680] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqLWf20/worker.rank=1.parallelly.parent=45193.b08962113305.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpqLWf20/worker.rank=1.parallelly.parent=45193.b08962113305.pid")'’
[17:47:15.872] - Possible to infer worker's PID: TRUE
[17:47:15.873] [local output] Rscript port: 11591

[17:47:15.873] [local output]  - Node 2 of 2 ...
[17:47:15.873] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:15.874] [local output] Rscript port: 11591

[17:47:15.874] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:15.874] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:15.875] [local output] Setting up PSOCK nodes in parallel
[17:47:15.875] List of 36
[17:47:15.875]  $ worker          : chr "localhost"
[17:47:15.875]   ..- attr(*, "localhost")= logi TRUE
[17:47:15.875]  $ master          : chr "localhost"
[17:47:15.875]  $ port            : int 11591
[17:47:15.875]  $ connectTimeout  : num 120
[17:47:15.875]  $ timeout         : num 2592000
[17:47:15.875]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:15.875]  $ homogeneous     : logi TRUE
[17:47:15.875]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:15.875]  $ rscript_envs    : NULL
[17:47:15.875]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:15.875]  $ rscript_startup : NULL
[17:47:15.875]  $ rscript_sh      : chr "sh"
[17:47:15.875]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:15.875]  $ methods         : logi TRUE
[17:47:15.875]  $ socketOptions   : chr "no-delay"
[17:47:15.875]  $ useXDR          : logi FALSE
[17:47:15.875]  $ outfile         : chr "/dev/null"
[17:47:15.875]  $ renice          : int NA
[17:47:15.875]  $ rshcmd          : NULL
[17:47:15.875]  $ user            : chr(0) 
[17:47:15.875]  $ revtunnel       : logi FALSE
[17:47:15.875]  $ rshlogfile      : NULL
[17:47:15.875]  $ rshopts         : chr(0) 
[17:47:15.875]  $ rank            : int 1
[17:47:15.875]  $ manual          : logi FALSE
[17:47:15.875]  $ dryrun          : logi FALSE
[17:47:15.875]  $ quiet           : logi FALSE
[17:47:15.875]  $ setup_strategy  : chr "parallel"
[17:47:15.875]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:15.875]  $ pidfile         : chr "/tmp/RtmpqLWf20/worker.rank=1.parallelly.parent=45193.b08962113305.pid"
[17:47:15.875]  $ rshcmd_label    : NULL
[17:47:15.875]  $ rsh_call        : NULL
[17:47:15.875]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:15.875]  $ localMachine    : logi TRUE
[17:47:15.875]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:15.875]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:15.875]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:15.875]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:15.875]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:15.875]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:15.875]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:15.875]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:15.875]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:15.875]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:15.875]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:15.875]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:15.875]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:15.875]  $ arguments       :List of 28
[17:47:15.875]   ..$ worker          : chr "localhost"
[17:47:15.875]   ..$ master          : NULL
[17:47:15.875]   ..$ port            : int 11591
[17:47:15.875]   ..$ connectTimeout  : num 120
[17:47:15.875]   ..$ timeout         : num 2592000
[17:47:15.875]   ..$ rscript         : NULL
[17:47:15.875]   ..$ homogeneous     : NULL
[17:47:15.875]   ..$ rscript_args    : NULL
[17:47:15.875]   ..$ rscript_envs    : NULL
[17:47:15.875]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:15.875]   ..$ rscript_startup : NULL
[17:47:15.875]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:15.875]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:15.875]   ..$ methods         : logi TRUE
[17:47:15.875]   ..$ socketOptions   : chr "no-delay"
[17:47:15.875]   ..$ useXDR          : logi FALSE
[17:47:15.875]   ..$ outfile         : chr "/dev/null"
[17:47:15.875]   ..$ renice          : int NA
[17:47:15.875]   ..$ rshcmd          : NULL
[17:47:15.875]   ..$ user            : NULL
[17:47:15.875]   ..$ revtunnel       : logi NA
[17:47:15.875]   ..$ rshlogfile      : NULL
[17:47:15.875]   ..$ rshopts         : NULL
[17:47:15.875]   ..$ rank            : int 1
[17:47:15.875]   ..$ manual          : logi FALSE
[17:47:15.875]   ..$ dryrun          : logi FALSE
[17:47:15.875]   ..$ quiet           : logi FALSE
[17:47:15.875]   ..$ setup_strategy  : chr "parallel"
[17:47:15.875]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:15.895] [local output] System call to launch all workers:
[17:47:15.895] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqLWf20/worker.rank=1.parallelly.parent=45193.b08962113305.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11591 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:15.895] [local output] Starting PSOCK main server
[17:47:15.901] [local output] Workers launched
[17:47:15.901] [local output] Waiting for workers to connect back
[17:47:15.901]  - [local output] 0 workers out of 2 ready
[17:47:16.173]  - [local output] 0 workers out of 2 ready
[17:47:16.173]  - [local output] 1 workers out of 2 ready
[17:47:16.187]  - [local output] 1 workers out of 2 ready
[17:47:16.187]  - [local output] 2 workers out of 2 ready
[17:47:16.187] [local output] Launching of workers completed
[17:47:16.187] [local output] Collecting session information from workers
[17:47:16.188] [local output]  - Worker #1 of 2
[17:47:16.189] [local output]  - Worker #2 of 2
[17:47:16.189] [local output] makeClusterPSOCK() ... done
[17:47:16.201] Packages needed by the future expression (n = 0): <none>
[17:47:16.201] Packages needed by future strategies (n = 0): <none>
[17:47:16.202] {
[17:47:16.202]     {
[17:47:16.202]         {
[17:47:16.202]             ...future.startTime <- base::Sys.time()
[17:47:16.202]             {
[17:47:16.202]                 {
[17:47:16.202]                   {
[17:47:16.202]                     {
[17:47:16.202]                       base::local({
[17:47:16.202]                         has_future <- base::requireNamespace("future", 
[17:47:16.202]                           quietly = TRUE)
[17:47:16.202]                         if (has_future) {
[17:47:16.202]                           ns <- base::getNamespace("future")
[17:47:16.202]                           version <- ns[[".package"]][["version"]]
[17:47:16.202]                           if (is.null(version)) 
[17:47:16.202]                             version <- utils::packageVersion("future")
[17:47:16.202]                         }
[17:47:16.202]                         else {
[17:47:16.202]                           version <- NULL
[17:47:16.202]                         }
[17:47:16.202]                         if (!has_future || version < "1.8.0") {
[17:47:16.202]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.202]                             "", base::R.version$version.string), 
[17:47:16.202]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.202]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.202]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.202]                               "release", "version")], collapse = " "), 
[17:47:16.202]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.202]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.202]                             info)
[17:47:16.202]                           info <- base::paste(info, collapse = "; ")
[17:47:16.202]                           if (!has_future) {
[17:47:16.202]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.202]                               info)
[17:47:16.202]                           }
[17:47:16.202]                           else {
[17:47:16.202]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.202]                               info, version)
[17:47:16.202]                           }
[17:47:16.202]                           base::stop(msg)
[17:47:16.202]                         }
[17:47:16.202]                       })
[17:47:16.202]                     }
[17:47:16.202]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.202]                     base::options(mc.cores = 1L)
[17:47:16.202]                   }
[17:47:16.202]                   ...future.strategy.old <- future::plan("list")
[17:47:16.202]                   options(future.plan = NULL)
[17:47:16.202]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.202]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.202]                 }
[17:47:16.202]                 ...future.workdir <- getwd()
[17:47:16.202]             }
[17:47:16.202]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.202]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.202]         }
[17:47:16.202]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.202]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.202]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.202]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.202]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.202]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.202]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.202]             base::names(...future.oldOptions))
[17:47:16.202]     }
[17:47:16.202]     if (FALSE) {
[17:47:16.202]     }
[17:47:16.202]     else {
[17:47:16.202]         if (TRUE) {
[17:47:16.202]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.202]                 open = "w")
[17:47:16.202]         }
[17:47:16.202]         else {
[17:47:16.202]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.202]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.202]         }
[17:47:16.202]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.202]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.202]             base::sink(type = "output", split = FALSE)
[17:47:16.202]             base::close(...future.stdout)
[17:47:16.202]         }, add = TRUE)
[17:47:16.202]     }
[17:47:16.202]     ...future.frame <- base::sys.nframe()
[17:47:16.202]     ...future.conditions <- base::list()
[17:47:16.202]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.202]     if (FALSE) {
[17:47:16.202]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.202]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.202]     }
[17:47:16.202]     ...future.result <- base::tryCatch({
[17:47:16.202]         base::withCallingHandlers({
[17:47:16.202]             ...future.value <- base::withVisible(base::local({
[17:47:16.202]                 ...future.makeSendCondition <- base::local({
[17:47:16.202]                   sendCondition <- NULL
[17:47:16.202]                   function(frame = 1L) {
[17:47:16.202]                     if (is.function(sendCondition)) 
[17:47:16.202]                       return(sendCondition)
[17:47:16.202]                     ns <- getNamespace("parallel")
[17:47:16.202]                     if (exists("sendData", mode = "function", 
[17:47:16.202]                       envir = ns)) {
[17:47:16.202]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.202]                         envir = ns)
[17:47:16.202]                       envir <- sys.frame(frame)
[17:47:16.202]                       master <- NULL
[17:47:16.202]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.202]                         !identical(envir, emptyenv())) {
[17:47:16.202]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.202]                           inherits = FALSE)) {
[17:47:16.202]                           master <- get("master", mode = "list", 
[17:47:16.202]                             envir = envir, inherits = FALSE)
[17:47:16.202]                           if (inherits(master, c("SOCKnode", 
[17:47:16.202]                             "SOCK0node"))) {
[17:47:16.202]                             sendCondition <<- function(cond) {
[17:47:16.202]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.202]                                 success = TRUE)
[17:47:16.202]                               parallel_sendData(master, data)
[17:47:16.202]                             }
[17:47:16.202]                             return(sendCondition)
[17:47:16.202]                           }
[17:47:16.202]                         }
[17:47:16.202]                         frame <- frame + 1L
[17:47:16.202]                         envir <- sys.frame(frame)
[17:47:16.202]                       }
[17:47:16.202]                     }
[17:47:16.202]                     sendCondition <<- function(cond) NULL
[17:47:16.202]                   }
[17:47:16.202]                 })
[17:47:16.202]                 withCallingHandlers({
[17:47:16.202]                   NA
[17:47:16.202]                 }, immediateCondition = function(cond) {
[17:47:16.202]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.202]                   sendCondition(cond)
[17:47:16.202]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.202]                   {
[17:47:16.202]                     inherits <- base::inherits
[17:47:16.202]                     invokeRestart <- base::invokeRestart
[17:47:16.202]                     is.null <- base::is.null
[17:47:16.202]                     muffled <- FALSE
[17:47:16.202]                     if (inherits(cond, "message")) {
[17:47:16.202]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.202]                       if (muffled) 
[17:47:16.202]                         invokeRestart("muffleMessage")
[17:47:16.202]                     }
[17:47:16.202]                     else if (inherits(cond, "warning")) {
[17:47:16.202]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.202]                       if (muffled) 
[17:47:16.202]                         invokeRestart("muffleWarning")
[17:47:16.202]                     }
[17:47:16.202]                     else if (inherits(cond, "condition")) {
[17:47:16.202]                       if (!is.null(pattern)) {
[17:47:16.202]                         computeRestarts <- base::computeRestarts
[17:47:16.202]                         grepl <- base::grepl
[17:47:16.202]                         restarts <- computeRestarts(cond)
[17:47:16.202]                         for (restart in restarts) {
[17:47:16.202]                           name <- restart$name
[17:47:16.202]                           if (is.null(name)) 
[17:47:16.202]                             next
[17:47:16.202]                           if (!grepl(pattern, name)) 
[17:47:16.202]                             next
[17:47:16.202]                           invokeRestart(restart)
[17:47:16.202]                           muffled <- TRUE
[17:47:16.202]                           break
[17:47:16.202]                         }
[17:47:16.202]                       }
[17:47:16.202]                     }
[17:47:16.202]                     invisible(muffled)
[17:47:16.202]                   }
[17:47:16.202]                   muffleCondition(cond)
[17:47:16.202]                 })
[17:47:16.202]             }))
[17:47:16.202]             future::FutureResult(value = ...future.value$value, 
[17:47:16.202]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.202]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.202]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.202]                     ...future.globalenv.names))
[17:47:16.202]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.202]         }, condition = base::local({
[17:47:16.202]             c <- base::c
[17:47:16.202]             inherits <- base::inherits
[17:47:16.202]             invokeRestart <- base::invokeRestart
[17:47:16.202]             length <- base::length
[17:47:16.202]             list <- base::list
[17:47:16.202]             seq.int <- base::seq.int
[17:47:16.202]             signalCondition <- base::signalCondition
[17:47:16.202]             sys.calls <- base::sys.calls
[17:47:16.202]             `[[` <- base::`[[`
[17:47:16.202]             `+` <- base::`+`
[17:47:16.202]             `<<-` <- base::`<<-`
[17:47:16.202]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.202]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.202]                   3L)]
[17:47:16.202]             }
[17:47:16.202]             function(cond) {
[17:47:16.202]                 is_error <- inherits(cond, "error")
[17:47:16.202]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.202]                   NULL)
[17:47:16.202]                 if (is_error) {
[17:47:16.202]                   sessionInformation <- function() {
[17:47:16.202]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.202]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.202]                       search = base::search(), system = base::Sys.info())
[17:47:16.202]                   }
[17:47:16.202]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.202]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.202]                     cond$call), session = sessionInformation(), 
[17:47:16.202]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.202]                   signalCondition(cond)
[17:47:16.202]                 }
[17:47:16.202]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.202]                 "immediateCondition"))) {
[17:47:16.202]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.202]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.202]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.202]                   if (TRUE && !signal) {
[17:47:16.202]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.202]                     {
[17:47:16.202]                       inherits <- base::inherits
[17:47:16.202]                       invokeRestart <- base::invokeRestart
[17:47:16.202]                       is.null <- base::is.null
[17:47:16.202]                       muffled <- FALSE
[17:47:16.202]                       if (inherits(cond, "message")) {
[17:47:16.202]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.202]                         if (muffled) 
[17:47:16.202]                           invokeRestart("muffleMessage")
[17:47:16.202]                       }
[17:47:16.202]                       else if (inherits(cond, "warning")) {
[17:47:16.202]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.202]                         if (muffled) 
[17:47:16.202]                           invokeRestart("muffleWarning")
[17:47:16.202]                       }
[17:47:16.202]                       else if (inherits(cond, "condition")) {
[17:47:16.202]                         if (!is.null(pattern)) {
[17:47:16.202]                           computeRestarts <- base::computeRestarts
[17:47:16.202]                           grepl <- base::grepl
[17:47:16.202]                           restarts <- computeRestarts(cond)
[17:47:16.202]                           for (restart in restarts) {
[17:47:16.202]                             name <- restart$name
[17:47:16.202]                             if (is.null(name)) 
[17:47:16.202]                               next
[17:47:16.202]                             if (!grepl(pattern, name)) 
[17:47:16.202]                               next
[17:47:16.202]                             invokeRestart(restart)
[17:47:16.202]                             muffled <- TRUE
[17:47:16.202]                             break
[17:47:16.202]                           }
[17:47:16.202]                         }
[17:47:16.202]                       }
[17:47:16.202]                       invisible(muffled)
[17:47:16.202]                     }
[17:47:16.202]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.202]                   }
[17:47:16.202]                 }
[17:47:16.202]                 else {
[17:47:16.202]                   if (TRUE) {
[17:47:16.202]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.202]                     {
[17:47:16.202]                       inherits <- base::inherits
[17:47:16.202]                       invokeRestart <- base::invokeRestart
[17:47:16.202]                       is.null <- base::is.null
[17:47:16.202]                       muffled <- FALSE
[17:47:16.202]                       if (inherits(cond, "message")) {
[17:47:16.202]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.202]                         if (muffled) 
[17:47:16.202]                           invokeRestart("muffleMessage")
[17:47:16.202]                       }
[17:47:16.202]                       else if (inherits(cond, "warning")) {
[17:47:16.202]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.202]                         if (muffled) 
[17:47:16.202]                           invokeRestart("muffleWarning")
[17:47:16.202]                       }
[17:47:16.202]                       else if (inherits(cond, "condition")) {
[17:47:16.202]                         if (!is.null(pattern)) {
[17:47:16.202]                           computeRestarts <- base::computeRestarts
[17:47:16.202]                           grepl <- base::grepl
[17:47:16.202]                           restarts <- computeRestarts(cond)
[17:47:16.202]                           for (restart in restarts) {
[17:47:16.202]                             name <- restart$name
[17:47:16.202]                             if (is.null(name)) 
[17:47:16.202]                               next
[17:47:16.202]                             if (!grepl(pattern, name)) 
[17:47:16.202]                               next
[17:47:16.202]                             invokeRestart(restart)
[17:47:16.202]                             muffled <- TRUE
[17:47:16.202]                             break
[17:47:16.202]                           }
[17:47:16.202]                         }
[17:47:16.202]                       }
[17:47:16.202]                       invisible(muffled)
[17:47:16.202]                     }
[17:47:16.202]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.202]                   }
[17:47:16.202]                 }
[17:47:16.202]             }
[17:47:16.202]         }))
[17:47:16.202]     }, error = function(ex) {
[17:47:16.202]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.202]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.202]                 ...future.rng), started = ...future.startTime, 
[17:47:16.202]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.202]             version = "1.8"), class = "FutureResult")
[17:47:16.202]     }, finally = {
[17:47:16.202]         if (!identical(...future.workdir, getwd())) 
[17:47:16.202]             setwd(...future.workdir)
[17:47:16.202]         {
[17:47:16.202]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.202]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.202]             }
[17:47:16.202]             base::options(...future.oldOptions)
[17:47:16.202]             if (.Platform$OS.type == "windows") {
[17:47:16.202]                 old_names <- names(...future.oldEnvVars)
[17:47:16.202]                 envs <- base::Sys.getenv()
[17:47:16.202]                 names <- names(envs)
[17:47:16.202]                 common <- intersect(names, old_names)
[17:47:16.202]                 added <- setdiff(names, old_names)
[17:47:16.202]                 removed <- setdiff(old_names, names)
[17:47:16.202]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.202]                   envs[common]]
[17:47:16.202]                 NAMES <- toupper(changed)
[17:47:16.202]                 args <- list()
[17:47:16.202]                 for (kk in seq_along(NAMES)) {
[17:47:16.202]                   name <- changed[[kk]]
[17:47:16.202]                   NAME <- NAMES[[kk]]
[17:47:16.202]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.202]                     next
[17:47:16.202]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.202]                 }
[17:47:16.202]                 NAMES <- toupper(added)
[17:47:16.202]                 for (kk in seq_along(NAMES)) {
[17:47:16.202]                   name <- added[[kk]]
[17:47:16.202]                   NAME <- NAMES[[kk]]
[17:47:16.202]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.202]                     next
[17:47:16.202]                   args[[name]] <- ""
[17:47:16.202]                 }
[17:47:16.202]                 NAMES <- toupper(removed)
[17:47:16.202]                 for (kk in seq_along(NAMES)) {
[17:47:16.202]                   name <- removed[[kk]]
[17:47:16.202]                   NAME <- NAMES[[kk]]
[17:47:16.202]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.202]                     next
[17:47:16.202]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.202]                 }
[17:47:16.202]                 if (length(args) > 0) 
[17:47:16.202]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.202]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.202]             }
[17:47:16.202]             else {
[17:47:16.202]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.202]             }
[17:47:16.202]             {
[17:47:16.202]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.202]                   0L) {
[17:47:16.202]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.202]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.202]                   base::options(opts)
[17:47:16.202]                 }
[17:47:16.202]                 {
[17:47:16.202]                   {
[17:47:16.202]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.202]                     NULL
[17:47:16.202]                   }
[17:47:16.202]                   options(future.plan = NULL)
[17:47:16.202]                   if (is.na(NA_character_)) 
[17:47:16.202]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.202]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.202]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.202]                     .init = FALSE)
[17:47:16.202]                 }
[17:47:16.202]             }
[17:47:16.202]         }
[17:47:16.202]     })
[17:47:16.202]     if (TRUE) {
[17:47:16.202]         base::sink(type = "output", split = FALSE)
[17:47:16.202]         if (TRUE) {
[17:47:16.202]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.202]         }
[17:47:16.202]         else {
[17:47:16.202]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.202]         }
[17:47:16.202]         base::close(...future.stdout)
[17:47:16.202]         ...future.stdout <- NULL
[17:47:16.202]     }
[17:47:16.202]     ...future.result$conditions <- ...future.conditions
[17:47:16.202]     ...future.result$finished <- base::Sys.time()
[17:47:16.202]     ...future.result
[17:47:16.202] }
[17:47:16.254] MultisessionFuture started
[17:47:16.255] result() for ClusterFuture ...
[17:47:16.255] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.256] - Validating connection of MultisessionFuture
[17:47:16.287] - received message: FutureResult
[17:47:16.287] - Received FutureResult
[17:47:16.289] - Erased future from FutureRegistry
[17:47:16.290] result() for ClusterFuture ...
[17:47:16.290] - result already collected: FutureResult
[17:47:16.290] result() for ClusterFuture ... done
[17:47:16.290] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.290] result() for ClusterFuture ... done
[17:47:16.290] result() for ClusterFuture ...
[17:47:16.290] - result already collected: FutureResult
[17:47:16.290] result() for ClusterFuture ... done
[17:47:16.291] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:16.291] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 796262f2-ce5b-abb5-edee-15f9c7062d30
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[17:47:16.291] getGlobalsAndPackages() ...
[17:47:16.292] Searching for globals...
[17:47:16.299] - globals found: [2] ‘{’, ‘:::’
[17:47:16.300] Searching for globals ... DONE
[17:47:16.300] Resolving globals: FALSE
[17:47:16.300] 
[17:47:16.300] 
[17:47:16.301] getGlobalsAndPackages() ... DONE
[17:47:16.301] run() for ‘Future’ ...
[17:47:16.301] - state: ‘created’
[17:47:16.301] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.312] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.313] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.313]   - Field: ‘node’
[17:47:16.313]   - Field: ‘label’
[17:47:16.313]   - Field: ‘local’
[17:47:16.313]   - Field: ‘owner’
[17:47:16.313]   - Field: ‘envir’
[17:47:16.313]   - Field: ‘workers’
[17:47:16.313]   - Field: ‘packages’
[17:47:16.313]   - Field: ‘gc’
[17:47:16.314]   - Field: ‘conditions’
[17:47:16.314]   - Field: ‘persistent’
[17:47:16.314]   - Field: ‘expr’
[17:47:16.314]   - Field: ‘uuid’
[17:47:16.314]   - Field: ‘seed’
[17:47:16.314]   - Field: ‘version’
[17:47:16.314]   - Field: ‘result’
[17:47:16.314]   - Field: ‘asynchronous’
[17:47:16.314]   - Field: ‘calls’
[17:47:16.315]   - Field: ‘globals’
[17:47:16.315]   - Field: ‘stdout’
[17:47:16.315]   - Field: ‘earlySignal’
[17:47:16.315]   - Field: ‘lazy’
[17:47:16.315]   - Field: ‘state’
[17:47:16.315] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.315] - Launch lazy future ...
[17:47:16.316] Packages needed by the future expression (n = 0): <none>
[17:47:16.316] Packages needed by future strategies (n = 0): <none>
[17:47:16.316] {
[17:47:16.316]     {
[17:47:16.316]         {
[17:47:16.316]             ...future.startTime <- base::Sys.time()
[17:47:16.316]             {
[17:47:16.316]                 {
[17:47:16.316]                   {
[17:47:16.316]                     {
[17:47:16.316]                       base::local({
[17:47:16.316]                         has_future <- base::requireNamespace("future", 
[17:47:16.316]                           quietly = TRUE)
[17:47:16.316]                         if (has_future) {
[17:47:16.316]                           ns <- base::getNamespace("future")
[17:47:16.316]                           version <- ns[[".package"]][["version"]]
[17:47:16.316]                           if (is.null(version)) 
[17:47:16.316]                             version <- utils::packageVersion("future")
[17:47:16.316]                         }
[17:47:16.316]                         else {
[17:47:16.316]                           version <- NULL
[17:47:16.316]                         }
[17:47:16.316]                         if (!has_future || version < "1.8.0") {
[17:47:16.316]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.316]                             "", base::R.version$version.string), 
[17:47:16.316]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.316]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.316]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.316]                               "release", "version")], collapse = " "), 
[17:47:16.316]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.316]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.316]                             info)
[17:47:16.316]                           info <- base::paste(info, collapse = "; ")
[17:47:16.316]                           if (!has_future) {
[17:47:16.316]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.316]                               info)
[17:47:16.316]                           }
[17:47:16.316]                           else {
[17:47:16.316]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.316]                               info, version)
[17:47:16.316]                           }
[17:47:16.316]                           base::stop(msg)
[17:47:16.316]                         }
[17:47:16.316]                       })
[17:47:16.316]                     }
[17:47:16.316]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.316]                     base::options(mc.cores = 1L)
[17:47:16.316]                   }
[17:47:16.316]                   ...future.strategy.old <- future::plan("list")
[17:47:16.316]                   options(future.plan = NULL)
[17:47:16.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.316]                 }
[17:47:16.316]                 ...future.workdir <- getwd()
[17:47:16.316]             }
[17:47:16.316]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.316]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.316]         }
[17:47:16.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.316]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.316]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.316]             base::names(...future.oldOptions))
[17:47:16.316]     }
[17:47:16.316]     if (FALSE) {
[17:47:16.316]     }
[17:47:16.316]     else {
[17:47:16.316]         if (TRUE) {
[17:47:16.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.316]                 open = "w")
[17:47:16.316]         }
[17:47:16.316]         else {
[17:47:16.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.316]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.316]         }
[17:47:16.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.316]             base::sink(type = "output", split = FALSE)
[17:47:16.316]             base::close(...future.stdout)
[17:47:16.316]         }, add = TRUE)
[17:47:16.316]     }
[17:47:16.316]     ...future.frame <- base::sys.nframe()
[17:47:16.316]     ...future.conditions <- base::list()
[17:47:16.316]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.316]     if (FALSE) {
[17:47:16.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.316]     }
[17:47:16.316]     ...future.result <- base::tryCatch({
[17:47:16.316]         base::withCallingHandlers({
[17:47:16.316]             ...future.value <- base::withVisible(base::local({
[17:47:16.316]                 ...future.makeSendCondition <- base::local({
[17:47:16.316]                   sendCondition <- NULL
[17:47:16.316]                   function(frame = 1L) {
[17:47:16.316]                     if (is.function(sendCondition)) 
[17:47:16.316]                       return(sendCondition)
[17:47:16.316]                     ns <- getNamespace("parallel")
[17:47:16.316]                     if (exists("sendData", mode = "function", 
[17:47:16.316]                       envir = ns)) {
[17:47:16.316]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.316]                         envir = ns)
[17:47:16.316]                       envir <- sys.frame(frame)
[17:47:16.316]                       master <- NULL
[17:47:16.316]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.316]                         !identical(envir, emptyenv())) {
[17:47:16.316]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.316]                           inherits = FALSE)) {
[17:47:16.316]                           master <- get("master", mode = "list", 
[17:47:16.316]                             envir = envir, inherits = FALSE)
[17:47:16.316]                           if (inherits(master, c("SOCKnode", 
[17:47:16.316]                             "SOCK0node"))) {
[17:47:16.316]                             sendCondition <<- function(cond) {
[17:47:16.316]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.316]                                 success = TRUE)
[17:47:16.316]                               parallel_sendData(master, data)
[17:47:16.316]                             }
[17:47:16.316]                             return(sendCondition)
[17:47:16.316]                           }
[17:47:16.316]                         }
[17:47:16.316]                         frame <- frame + 1L
[17:47:16.316]                         envir <- sys.frame(frame)
[17:47:16.316]                       }
[17:47:16.316]                     }
[17:47:16.316]                     sendCondition <<- function(cond) NULL
[17:47:16.316]                   }
[17:47:16.316]                 })
[17:47:16.316]                 withCallingHandlers({
[17:47:16.316]                   {
[17:47:16.316]                     future:::session_uuid(attributes = TRUE)
[17:47:16.316]                   }
[17:47:16.316]                 }, immediateCondition = function(cond) {
[17:47:16.316]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.316]                   sendCondition(cond)
[17:47:16.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.316]                   {
[17:47:16.316]                     inherits <- base::inherits
[17:47:16.316]                     invokeRestart <- base::invokeRestart
[17:47:16.316]                     is.null <- base::is.null
[17:47:16.316]                     muffled <- FALSE
[17:47:16.316]                     if (inherits(cond, "message")) {
[17:47:16.316]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.316]                       if (muffled) 
[17:47:16.316]                         invokeRestart("muffleMessage")
[17:47:16.316]                     }
[17:47:16.316]                     else if (inherits(cond, "warning")) {
[17:47:16.316]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.316]                       if (muffled) 
[17:47:16.316]                         invokeRestart("muffleWarning")
[17:47:16.316]                     }
[17:47:16.316]                     else if (inherits(cond, "condition")) {
[17:47:16.316]                       if (!is.null(pattern)) {
[17:47:16.316]                         computeRestarts <- base::computeRestarts
[17:47:16.316]                         grepl <- base::grepl
[17:47:16.316]                         restarts <- computeRestarts(cond)
[17:47:16.316]                         for (restart in restarts) {
[17:47:16.316]                           name <- restart$name
[17:47:16.316]                           if (is.null(name)) 
[17:47:16.316]                             next
[17:47:16.316]                           if (!grepl(pattern, name)) 
[17:47:16.316]                             next
[17:47:16.316]                           invokeRestart(restart)
[17:47:16.316]                           muffled <- TRUE
[17:47:16.316]                           break
[17:47:16.316]                         }
[17:47:16.316]                       }
[17:47:16.316]                     }
[17:47:16.316]                     invisible(muffled)
[17:47:16.316]                   }
[17:47:16.316]                   muffleCondition(cond)
[17:47:16.316]                 })
[17:47:16.316]             }))
[17:47:16.316]             future::FutureResult(value = ...future.value$value, 
[17:47:16.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.316]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.316]                     ...future.globalenv.names))
[17:47:16.316]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.316]         }, condition = base::local({
[17:47:16.316]             c <- base::c
[17:47:16.316]             inherits <- base::inherits
[17:47:16.316]             invokeRestart <- base::invokeRestart
[17:47:16.316]             length <- base::length
[17:47:16.316]             list <- base::list
[17:47:16.316]             seq.int <- base::seq.int
[17:47:16.316]             signalCondition <- base::signalCondition
[17:47:16.316]             sys.calls <- base::sys.calls
[17:47:16.316]             `[[` <- base::`[[`
[17:47:16.316]             `+` <- base::`+`
[17:47:16.316]             `<<-` <- base::`<<-`
[17:47:16.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.316]                   3L)]
[17:47:16.316]             }
[17:47:16.316]             function(cond) {
[17:47:16.316]                 is_error <- inherits(cond, "error")
[17:47:16.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.316]                   NULL)
[17:47:16.316]                 if (is_error) {
[17:47:16.316]                   sessionInformation <- function() {
[17:47:16.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.316]                       search = base::search(), system = base::Sys.info())
[17:47:16.316]                   }
[17:47:16.316]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.316]                     cond$call), session = sessionInformation(), 
[17:47:16.316]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.316]                   signalCondition(cond)
[17:47:16.316]                 }
[17:47:16.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.316]                 "immediateCondition"))) {
[17:47:16.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.316]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.316]                   if (TRUE && !signal) {
[17:47:16.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.316]                     {
[17:47:16.316]                       inherits <- base::inherits
[17:47:16.316]                       invokeRestart <- base::invokeRestart
[17:47:16.316]                       is.null <- base::is.null
[17:47:16.316]                       muffled <- FALSE
[17:47:16.316]                       if (inherits(cond, "message")) {
[17:47:16.316]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.316]                         if (muffled) 
[17:47:16.316]                           invokeRestart("muffleMessage")
[17:47:16.316]                       }
[17:47:16.316]                       else if (inherits(cond, "warning")) {
[17:47:16.316]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.316]                         if (muffled) 
[17:47:16.316]                           invokeRestart("muffleWarning")
[17:47:16.316]                       }
[17:47:16.316]                       else if (inherits(cond, "condition")) {
[17:47:16.316]                         if (!is.null(pattern)) {
[17:47:16.316]                           computeRestarts <- base::computeRestarts
[17:47:16.316]                           grepl <- base::grepl
[17:47:16.316]                           restarts <- computeRestarts(cond)
[17:47:16.316]                           for (restart in restarts) {
[17:47:16.316]                             name <- restart$name
[17:47:16.316]                             if (is.null(name)) 
[17:47:16.316]                               next
[17:47:16.316]                             if (!grepl(pattern, name)) 
[17:47:16.316]                               next
[17:47:16.316]                             invokeRestart(restart)
[17:47:16.316]                             muffled <- TRUE
[17:47:16.316]                             break
[17:47:16.316]                           }
[17:47:16.316]                         }
[17:47:16.316]                       }
[17:47:16.316]                       invisible(muffled)
[17:47:16.316]                     }
[17:47:16.316]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.316]                   }
[17:47:16.316]                 }
[17:47:16.316]                 else {
[17:47:16.316]                   if (TRUE) {
[17:47:16.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.316]                     {
[17:47:16.316]                       inherits <- base::inherits
[17:47:16.316]                       invokeRestart <- base::invokeRestart
[17:47:16.316]                       is.null <- base::is.null
[17:47:16.316]                       muffled <- FALSE
[17:47:16.316]                       if (inherits(cond, "message")) {
[17:47:16.316]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.316]                         if (muffled) 
[17:47:16.316]                           invokeRestart("muffleMessage")
[17:47:16.316]                       }
[17:47:16.316]                       else if (inherits(cond, "warning")) {
[17:47:16.316]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.316]                         if (muffled) 
[17:47:16.316]                           invokeRestart("muffleWarning")
[17:47:16.316]                       }
[17:47:16.316]                       else if (inherits(cond, "condition")) {
[17:47:16.316]                         if (!is.null(pattern)) {
[17:47:16.316]                           computeRestarts <- base::computeRestarts
[17:47:16.316]                           grepl <- base::grepl
[17:47:16.316]                           restarts <- computeRestarts(cond)
[17:47:16.316]                           for (restart in restarts) {
[17:47:16.316]                             name <- restart$name
[17:47:16.316]                             if (is.null(name)) 
[17:47:16.316]                               next
[17:47:16.316]                             if (!grepl(pattern, name)) 
[17:47:16.316]                               next
[17:47:16.316]                             invokeRestart(restart)
[17:47:16.316]                             muffled <- TRUE
[17:47:16.316]                             break
[17:47:16.316]                           }
[17:47:16.316]                         }
[17:47:16.316]                       }
[17:47:16.316]                       invisible(muffled)
[17:47:16.316]                     }
[17:47:16.316]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.316]                   }
[17:47:16.316]                 }
[17:47:16.316]             }
[17:47:16.316]         }))
[17:47:16.316]     }, error = function(ex) {
[17:47:16.316]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.316]                 ...future.rng), started = ...future.startTime, 
[17:47:16.316]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.316]             version = "1.8"), class = "FutureResult")
[17:47:16.316]     }, finally = {
[17:47:16.316]         if (!identical(...future.workdir, getwd())) 
[17:47:16.316]             setwd(...future.workdir)
[17:47:16.316]         {
[17:47:16.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.316]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.316]             }
[17:47:16.316]             base::options(...future.oldOptions)
[17:47:16.316]             if (.Platform$OS.type == "windows") {
[17:47:16.316]                 old_names <- names(...future.oldEnvVars)
[17:47:16.316]                 envs <- base::Sys.getenv()
[17:47:16.316]                 names <- names(envs)
[17:47:16.316]                 common <- intersect(names, old_names)
[17:47:16.316]                 added <- setdiff(names, old_names)
[17:47:16.316]                 removed <- setdiff(old_names, names)
[17:47:16.316]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.316]                   envs[common]]
[17:47:16.316]                 NAMES <- toupper(changed)
[17:47:16.316]                 args <- list()
[17:47:16.316]                 for (kk in seq_along(NAMES)) {
[17:47:16.316]                   name <- changed[[kk]]
[17:47:16.316]                   NAME <- NAMES[[kk]]
[17:47:16.316]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.316]                     next
[17:47:16.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.316]                 }
[17:47:16.316]                 NAMES <- toupper(added)
[17:47:16.316]                 for (kk in seq_along(NAMES)) {
[17:47:16.316]                   name <- added[[kk]]
[17:47:16.316]                   NAME <- NAMES[[kk]]
[17:47:16.316]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.316]                     next
[17:47:16.316]                   args[[name]] <- ""
[17:47:16.316]                 }
[17:47:16.316]                 NAMES <- toupper(removed)
[17:47:16.316]                 for (kk in seq_along(NAMES)) {
[17:47:16.316]                   name <- removed[[kk]]
[17:47:16.316]                   NAME <- NAMES[[kk]]
[17:47:16.316]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.316]                     next
[17:47:16.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.316]                 }
[17:47:16.316]                 if (length(args) > 0) 
[17:47:16.316]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.316]             }
[17:47:16.316]             else {
[17:47:16.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.316]             }
[17:47:16.316]             {
[17:47:16.316]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.316]                   0L) {
[17:47:16.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.316]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.316]                   base::options(opts)
[17:47:16.316]                 }
[17:47:16.316]                 {
[17:47:16.316]                   {
[17:47:16.316]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.316]                     NULL
[17:47:16.316]                   }
[17:47:16.316]                   options(future.plan = NULL)
[17:47:16.316]                   if (is.na(NA_character_)) 
[17:47:16.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.316]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.316]                     .init = FALSE)
[17:47:16.316]                 }
[17:47:16.316]             }
[17:47:16.316]         }
[17:47:16.316]     })
[17:47:16.316]     if (TRUE) {
[17:47:16.316]         base::sink(type = "output", split = FALSE)
[17:47:16.316]         if (TRUE) {
[17:47:16.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.316]         }
[17:47:16.316]         else {
[17:47:16.316]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.316]         }
[17:47:16.316]         base::close(...future.stdout)
[17:47:16.316]         ...future.stdout <- NULL
[17:47:16.316]     }
[17:47:16.316]     ...future.result$conditions <- ...future.conditions
[17:47:16.316]     ...future.result$finished <- base::Sys.time()
[17:47:16.316]     ...future.result
[17:47:16.316] }
[17:47:16.320] MultisessionFuture started
[17:47:16.320] - Launch lazy future ... done
[17:47:16.320] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[17:47:16.320] result() for ClusterFuture ...
[17:47:16.321] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.321] - Validating connection of MultisessionFuture
[17:47:16.322] - received message: FutureResult
[17:47:16.322] - Received FutureResult
[17:47:16.322] - Erased future from FutureRegistry
[17:47:16.322] result() for ClusterFuture ...
[17:47:16.322] - result already collected: FutureResult
[17:47:16.322] result() for ClusterFuture ... done
[17:47:16.322] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.323] result() for ClusterFuture ... done
[17:47:16.323] result() for ClusterFuture ...
[17:47:16.323] - result already collected: FutureResult
[17:47:16.323] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: d784c500-6259-6ae5-fd1b-72327e2096d7
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[17:47:16.323] getGlobalsAndPackages() ...
[17:47:16.323] Searching for globals...
[17:47:16.324] - globals found: [2] ‘{’, ‘:::’
[17:47:16.325] Searching for globals ... DONE
[17:47:16.325] Resolving globals: FALSE
[17:47:16.325] 
[17:47:16.325] 
[17:47:16.325] getGlobalsAndPackages() ... DONE
[17:47:16.326] run() for ‘Future’ ...
[17:47:16.326] - state: ‘created’
[17:47:16.326] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.337] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.337] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.337]   - Field: ‘node’
[17:47:16.337]   - Field: ‘label’
[17:47:16.337]   - Field: ‘local’
[17:47:16.337]   - Field: ‘owner’
[17:47:16.337]   - Field: ‘envir’
[17:47:16.338]   - Field: ‘workers’
[17:47:16.338]   - Field: ‘packages’
[17:47:16.338]   - Field: ‘gc’
[17:47:16.338]   - Field: ‘conditions’
[17:47:16.338]   - Field: ‘persistent’
[17:47:16.338]   - Field: ‘expr’
[17:47:16.338]   - Field: ‘uuid’
[17:47:16.341]   - Field: ‘seed’
[17:47:16.341]   - Field: ‘version’
[17:47:16.341]   - Field: ‘result’
[17:47:16.341]   - Field: ‘asynchronous’
[17:47:16.341]   - Field: ‘calls’
[17:47:16.342]   - Field: ‘globals’
[17:47:16.342]   - Field: ‘stdout’
[17:47:16.342]   - Field: ‘earlySignal’
[17:47:16.342]   - Field: ‘lazy’
[17:47:16.342]   - Field: ‘state’
[17:47:16.342] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.342] - Launch lazy future ...
[17:47:16.342] Packages needed by the future expression (n = 0): <none>
[17:47:16.342] Packages needed by future strategies (n = 0): <none>
[17:47:16.343] {
[17:47:16.343]     {
[17:47:16.343]         {
[17:47:16.343]             ...future.startTime <- base::Sys.time()
[17:47:16.343]             {
[17:47:16.343]                 {
[17:47:16.343]                   {
[17:47:16.343]                     {
[17:47:16.343]                       base::local({
[17:47:16.343]                         has_future <- base::requireNamespace("future", 
[17:47:16.343]                           quietly = TRUE)
[17:47:16.343]                         if (has_future) {
[17:47:16.343]                           ns <- base::getNamespace("future")
[17:47:16.343]                           version <- ns[[".package"]][["version"]]
[17:47:16.343]                           if (is.null(version)) 
[17:47:16.343]                             version <- utils::packageVersion("future")
[17:47:16.343]                         }
[17:47:16.343]                         else {
[17:47:16.343]                           version <- NULL
[17:47:16.343]                         }
[17:47:16.343]                         if (!has_future || version < "1.8.0") {
[17:47:16.343]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.343]                             "", base::R.version$version.string), 
[17:47:16.343]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.343]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.343]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.343]                               "release", "version")], collapse = " "), 
[17:47:16.343]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.343]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.343]                             info)
[17:47:16.343]                           info <- base::paste(info, collapse = "; ")
[17:47:16.343]                           if (!has_future) {
[17:47:16.343]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.343]                               info)
[17:47:16.343]                           }
[17:47:16.343]                           else {
[17:47:16.343]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.343]                               info, version)
[17:47:16.343]                           }
[17:47:16.343]                           base::stop(msg)
[17:47:16.343]                         }
[17:47:16.343]                       })
[17:47:16.343]                     }
[17:47:16.343]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.343]                     base::options(mc.cores = 1L)
[17:47:16.343]                   }
[17:47:16.343]                   ...future.strategy.old <- future::plan("list")
[17:47:16.343]                   options(future.plan = NULL)
[17:47:16.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.343]                 }
[17:47:16.343]                 ...future.workdir <- getwd()
[17:47:16.343]             }
[17:47:16.343]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.343]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.343]         }
[17:47:16.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.343]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.343]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.343]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.343]             base::names(...future.oldOptions))
[17:47:16.343]     }
[17:47:16.343]     if (FALSE) {
[17:47:16.343]     }
[17:47:16.343]     else {
[17:47:16.343]         if (TRUE) {
[17:47:16.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.343]                 open = "w")
[17:47:16.343]         }
[17:47:16.343]         else {
[17:47:16.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.343]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.343]         }
[17:47:16.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.343]             base::sink(type = "output", split = FALSE)
[17:47:16.343]             base::close(...future.stdout)
[17:47:16.343]         }, add = TRUE)
[17:47:16.343]     }
[17:47:16.343]     ...future.frame <- base::sys.nframe()
[17:47:16.343]     ...future.conditions <- base::list()
[17:47:16.343]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.343]     if (FALSE) {
[17:47:16.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.343]     }
[17:47:16.343]     ...future.result <- base::tryCatch({
[17:47:16.343]         base::withCallingHandlers({
[17:47:16.343]             ...future.value <- base::withVisible(base::local({
[17:47:16.343]                 ...future.makeSendCondition <- base::local({
[17:47:16.343]                   sendCondition <- NULL
[17:47:16.343]                   function(frame = 1L) {
[17:47:16.343]                     if (is.function(sendCondition)) 
[17:47:16.343]                       return(sendCondition)
[17:47:16.343]                     ns <- getNamespace("parallel")
[17:47:16.343]                     if (exists("sendData", mode = "function", 
[17:47:16.343]                       envir = ns)) {
[17:47:16.343]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.343]                         envir = ns)
[17:47:16.343]                       envir <- sys.frame(frame)
[17:47:16.343]                       master <- NULL
[17:47:16.343]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.343]                         !identical(envir, emptyenv())) {
[17:47:16.343]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.343]                           inherits = FALSE)) {
[17:47:16.343]                           master <- get("master", mode = "list", 
[17:47:16.343]                             envir = envir, inherits = FALSE)
[17:47:16.343]                           if (inherits(master, c("SOCKnode", 
[17:47:16.343]                             "SOCK0node"))) {
[17:47:16.343]                             sendCondition <<- function(cond) {
[17:47:16.343]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.343]                                 success = TRUE)
[17:47:16.343]                               parallel_sendData(master, data)
[17:47:16.343]                             }
[17:47:16.343]                             return(sendCondition)
[17:47:16.343]                           }
[17:47:16.343]                         }
[17:47:16.343]                         frame <- frame + 1L
[17:47:16.343]                         envir <- sys.frame(frame)
[17:47:16.343]                       }
[17:47:16.343]                     }
[17:47:16.343]                     sendCondition <<- function(cond) NULL
[17:47:16.343]                   }
[17:47:16.343]                 })
[17:47:16.343]                 withCallingHandlers({
[17:47:16.343]                   {
[17:47:16.343]                     future:::session_uuid(attributes = TRUE)
[17:47:16.343]                   }
[17:47:16.343]                 }, immediateCondition = function(cond) {
[17:47:16.343]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.343]                   sendCondition(cond)
[17:47:16.343]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.343]                   {
[17:47:16.343]                     inherits <- base::inherits
[17:47:16.343]                     invokeRestart <- base::invokeRestart
[17:47:16.343]                     is.null <- base::is.null
[17:47:16.343]                     muffled <- FALSE
[17:47:16.343]                     if (inherits(cond, "message")) {
[17:47:16.343]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.343]                       if (muffled) 
[17:47:16.343]                         invokeRestart("muffleMessage")
[17:47:16.343]                     }
[17:47:16.343]                     else if (inherits(cond, "warning")) {
[17:47:16.343]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.343]                       if (muffled) 
[17:47:16.343]                         invokeRestart("muffleWarning")
[17:47:16.343]                     }
[17:47:16.343]                     else if (inherits(cond, "condition")) {
[17:47:16.343]                       if (!is.null(pattern)) {
[17:47:16.343]                         computeRestarts <- base::computeRestarts
[17:47:16.343]                         grepl <- base::grepl
[17:47:16.343]                         restarts <- computeRestarts(cond)
[17:47:16.343]                         for (restart in restarts) {
[17:47:16.343]                           name <- restart$name
[17:47:16.343]                           if (is.null(name)) 
[17:47:16.343]                             next
[17:47:16.343]                           if (!grepl(pattern, name)) 
[17:47:16.343]                             next
[17:47:16.343]                           invokeRestart(restart)
[17:47:16.343]                           muffled <- TRUE
[17:47:16.343]                           break
[17:47:16.343]                         }
[17:47:16.343]                       }
[17:47:16.343]                     }
[17:47:16.343]                     invisible(muffled)
[17:47:16.343]                   }
[17:47:16.343]                   muffleCondition(cond)
[17:47:16.343]                 })
[17:47:16.343]             }))
[17:47:16.343]             future::FutureResult(value = ...future.value$value, 
[17:47:16.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.343]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.343]                     ...future.globalenv.names))
[17:47:16.343]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.343]         }, condition = base::local({
[17:47:16.343]             c <- base::c
[17:47:16.343]             inherits <- base::inherits
[17:47:16.343]             invokeRestart <- base::invokeRestart
[17:47:16.343]             length <- base::length
[17:47:16.343]             list <- base::list
[17:47:16.343]             seq.int <- base::seq.int
[17:47:16.343]             signalCondition <- base::signalCondition
[17:47:16.343]             sys.calls <- base::sys.calls
[17:47:16.343]             `[[` <- base::`[[`
[17:47:16.343]             `+` <- base::`+`
[17:47:16.343]             `<<-` <- base::`<<-`
[17:47:16.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.343]                   3L)]
[17:47:16.343]             }
[17:47:16.343]             function(cond) {
[17:47:16.343]                 is_error <- inherits(cond, "error")
[17:47:16.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.343]                   NULL)
[17:47:16.343]                 if (is_error) {
[17:47:16.343]                   sessionInformation <- function() {
[17:47:16.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.343]                       search = base::search(), system = base::Sys.info())
[17:47:16.343]                   }
[17:47:16.343]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.343]                     cond$call), session = sessionInformation(), 
[17:47:16.343]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.343]                   signalCondition(cond)
[17:47:16.343]                 }
[17:47:16.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.343]                 "immediateCondition"))) {
[17:47:16.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.343]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.343]                   if (TRUE && !signal) {
[17:47:16.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.343]                     {
[17:47:16.343]                       inherits <- base::inherits
[17:47:16.343]                       invokeRestart <- base::invokeRestart
[17:47:16.343]                       is.null <- base::is.null
[17:47:16.343]                       muffled <- FALSE
[17:47:16.343]                       if (inherits(cond, "message")) {
[17:47:16.343]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.343]                         if (muffled) 
[17:47:16.343]                           invokeRestart("muffleMessage")
[17:47:16.343]                       }
[17:47:16.343]                       else if (inherits(cond, "warning")) {
[17:47:16.343]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.343]                         if (muffled) 
[17:47:16.343]                           invokeRestart("muffleWarning")
[17:47:16.343]                       }
[17:47:16.343]                       else if (inherits(cond, "condition")) {
[17:47:16.343]                         if (!is.null(pattern)) {
[17:47:16.343]                           computeRestarts <- base::computeRestarts
[17:47:16.343]                           grepl <- base::grepl
[17:47:16.343]                           restarts <- computeRestarts(cond)
[17:47:16.343]                           for (restart in restarts) {
[17:47:16.343]                             name <- restart$name
[17:47:16.343]                             if (is.null(name)) 
[17:47:16.343]                               next
[17:47:16.343]                             if (!grepl(pattern, name)) 
[17:47:16.343]                               next
[17:47:16.343]                             invokeRestart(restart)
[17:47:16.343]                             muffled <- TRUE
[17:47:16.343]                             break
[17:47:16.343]                           }
[17:47:16.343]                         }
[17:47:16.343]                       }
[17:47:16.343]                       invisible(muffled)
[17:47:16.343]                     }
[17:47:16.343]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.343]                   }
[17:47:16.343]                 }
[17:47:16.343]                 else {
[17:47:16.343]                   if (TRUE) {
[17:47:16.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.343]                     {
[17:47:16.343]                       inherits <- base::inherits
[17:47:16.343]                       invokeRestart <- base::invokeRestart
[17:47:16.343]                       is.null <- base::is.null
[17:47:16.343]                       muffled <- FALSE
[17:47:16.343]                       if (inherits(cond, "message")) {
[17:47:16.343]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.343]                         if (muffled) 
[17:47:16.343]                           invokeRestart("muffleMessage")
[17:47:16.343]                       }
[17:47:16.343]                       else if (inherits(cond, "warning")) {
[17:47:16.343]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.343]                         if (muffled) 
[17:47:16.343]                           invokeRestart("muffleWarning")
[17:47:16.343]                       }
[17:47:16.343]                       else if (inherits(cond, "condition")) {
[17:47:16.343]                         if (!is.null(pattern)) {
[17:47:16.343]                           computeRestarts <- base::computeRestarts
[17:47:16.343]                           grepl <- base::grepl
[17:47:16.343]                           restarts <- computeRestarts(cond)
[17:47:16.343]                           for (restart in restarts) {
[17:47:16.343]                             name <- restart$name
[17:47:16.343]                             if (is.null(name)) 
[17:47:16.343]                               next
[17:47:16.343]                             if (!grepl(pattern, name)) 
[17:47:16.343]                               next
[17:47:16.343]                             invokeRestart(restart)
[17:47:16.343]                             muffled <- TRUE
[17:47:16.343]                             break
[17:47:16.343]                           }
[17:47:16.343]                         }
[17:47:16.343]                       }
[17:47:16.343]                       invisible(muffled)
[17:47:16.343]                     }
[17:47:16.343]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.343]                   }
[17:47:16.343]                 }
[17:47:16.343]             }
[17:47:16.343]         }))
[17:47:16.343]     }, error = function(ex) {
[17:47:16.343]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.343]                 ...future.rng), started = ...future.startTime, 
[17:47:16.343]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.343]             version = "1.8"), class = "FutureResult")
[17:47:16.343]     }, finally = {
[17:47:16.343]         if (!identical(...future.workdir, getwd())) 
[17:47:16.343]             setwd(...future.workdir)
[17:47:16.343]         {
[17:47:16.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.343]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.343]             }
[17:47:16.343]             base::options(...future.oldOptions)
[17:47:16.343]             if (.Platform$OS.type == "windows") {
[17:47:16.343]                 old_names <- names(...future.oldEnvVars)
[17:47:16.343]                 envs <- base::Sys.getenv()
[17:47:16.343]                 names <- names(envs)
[17:47:16.343]                 common <- intersect(names, old_names)
[17:47:16.343]                 added <- setdiff(names, old_names)
[17:47:16.343]                 removed <- setdiff(old_names, names)
[17:47:16.343]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.343]                   envs[common]]
[17:47:16.343]                 NAMES <- toupper(changed)
[17:47:16.343]                 args <- list()
[17:47:16.343]                 for (kk in seq_along(NAMES)) {
[17:47:16.343]                   name <- changed[[kk]]
[17:47:16.343]                   NAME <- NAMES[[kk]]
[17:47:16.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.343]                     next
[17:47:16.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.343]                 }
[17:47:16.343]                 NAMES <- toupper(added)
[17:47:16.343]                 for (kk in seq_along(NAMES)) {
[17:47:16.343]                   name <- added[[kk]]
[17:47:16.343]                   NAME <- NAMES[[kk]]
[17:47:16.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.343]                     next
[17:47:16.343]                   args[[name]] <- ""
[17:47:16.343]                 }
[17:47:16.343]                 NAMES <- toupper(removed)
[17:47:16.343]                 for (kk in seq_along(NAMES)) {
[17:47:16.343]                   name <- removed[[kk]]
[17:47:16.343]                   NAME <- NAMES[[kk]]
[17:47:16.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.343]                     next
[17:47:16.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.343]                 }
[17:47:16.343]                 if (length(args) > 0) 
[17:47:16.343]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.343]             }
[17:47:16.343]             else {
[17:47:16.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.343]             }
[17:47:16.343]             {
[17:47:16.343]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.343]                   0L) {
[17:47:16.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.343]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.343]                   base::options(opts)
[17:47:16.343]                 }
[17:47:16.343]                 {
[17:47:16.343]                   {
[17:47:16.343]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.343]                     NULL
[17:47:16.343]                   }
[17:47:16.343]                   options(future.plan = NULL)
[17:47:16.343]                   if (is.na(NA_character_)) 
[17:47:16.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.343]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.343]                     .init = FALSE)
[17:47:16.343]                 }
[17:47:16.343]             }
[17:47:16.343]         }
[17:47:16.343]     })
[17:47:16.343]     if (TRUE) {
[17:47:16.343]         base::sink(type = "output", split = FALSE)
[17:47:16.343]         if (TRUE) {
[17:47:16.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.343]         }
[17:47:16.343]         else {
[17:47:16.343]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.343]         }
[17:47:16.343]         base::close(...future.stdout)
[17:47:16.343]         ...future.stdout <- NULL
[17:47:16.343]     }
[17:47:16.343]     ...future.result$conditions <- ...future.conditions
[17:47:16.343]     ...future.result$finished <- base::Sys.time()
[17:47:16.343]     ...future.result
[17:47:16.343] }
[17:47:16.346] MultisessionFuture started
[17:47:16.346] - Launch lazy future ... done
[17:47:16.346] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[17:47:16.346] result() for ClusterFuture ...
[17:47:16.347] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.347] - Validating connection of MultisessionFuture
[17:47:16.351] - received message: FutureResult
[17:47:16.351] - Received FutureResult
[17:47:16.351] - Erased future from FutureRegistry
[17:47:16.351] result() for ClusterFuture ...
[17:47:16.352] - result already collected: FutureResult
[17:47:16.352] result() for ClusterFuture ... done
[17:47:16.352] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.352] result() for ClusterFuture ... done
[17:47:16.352] result() for ClusterFuture ...
[17:47:16.352] - result already collected: FutureResult
[17:47:16.352] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: d784c500-6259-6ae5-fd1b-72327e2096d7
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[17:47:16.352] getGlobalsAndPackages() ...
[17:47:16.352] Searching for globals...
[17:47:16.353] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:47:16.353] Searching for globals ... DONE
[17:47:16.353] Resolving globals: FALSE
[17:47:16.356] The total size of the 1 globals is 1.56 MiB (1638048 bytes)
[17:47:16.357] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:47:16.357] - globals: [1] ‘f1’
[17:47:16.357] 
[17:47:16.357] getGlobalsAndPackages() ... DONE
[17:47:16.357] run() for ‘Future’ ...
[17:47:16.357] - state: ‘created’
[17:47:16.357] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.368] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.368] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.368]   - Field: ‘node’
[17:47:16.368]   - Field: ‘label’
[17:47:16.368]   - Field: ‘local’
[17:47:16.368]   - Field: ‘owner’
[17:47:16.368]   - Field: ‘envir’
[17:47:16.369]   - Field: ‘workers’
[17:47:16.369]   - Field: ‘packages’
[17:47:16.369]   - Field: ‘gc’
[17:47:16.369]   - Field: ‘conditions’
[17:47:16.369]   - Field: ‘persistent’
[17:47:16.369]   - Field: ‘expr’
[17:47:16.369]   - Field: ‘uuid’
[17:47:16.369]   - Field: ‘seed’
[17:47:16.369]   - Field: ‘version’
[17:47:16.369]   - Field: ‘result’
[17:47:16.369]   - Field: ‘asynchronous’
[17:47:16.370]   - Field: ‘calls’
[17:47:16.370]   - Field: ‘globals’
[17:47:16.370]   - Field: ‘stdout’
[17:47:16.370]   - Field: ‘earlySignal’
[17:47:16.370]   - Field: ‘lazy’
[17:47:16.370]   - Field: ‘state’
[17:47:16.370] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.370] - Launch lazy future ...
[17:47:16.370] Packages needed by the future expression (n = 0): <none>
[17:47:16.371] Packages needed by future strategies (n = 0): <none>
[17:47:16.371] {
[17:47:16.371]     {
[17:47:16.371]         {
[17:47:16.371]             ...future.startTime <- base::Sys.time()
[17:47:16.371]             {
[17:47:16.371]                 {
[17:47:16.371]                   {
[17:47:16.371]                     {
[17:47:16.371]                       base::local({
[17:47:16.371]                         has_future <- base::requireNamespace("future", 
[17:47:16.371]                           quietly = TRUE)
[17:47:16.371]                         if (has_future) {
[17:47:16.371]                           ns <- base::getNamespace("future")
[17:47:16.371]                           version <- ns[[".package"]][["version"]]
[17:47:16.371]                           if (is.null(version)) 
[17:47:16.371]                             version <- utils::packageVersion("future")
[17:47:16.371]                         }
[17:47:16.371]                         else {
[17:47:16.371]                           version <- NULL
[17:47:16.371]                         }
[17:47:16.371]                         if (!has_future || version < "1.8.0") {
[17:47:16.371]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.371]                             "", base::R.version$version.string), 
[17:47:16.371]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.371]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.371]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.371]                               "release", "version")], collapse = " "), 
[17:47:16.371]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.371]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.371]                             info)
[17:47:16.371]                           info <- base::paste(info, collapse = "; ")
[17:47:16.371]                           if (!has_future) {
[17:47:16.371]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.371]                               info)
[17:47:16.371]                           }
[17:47:16.371]                           else {
[17:47:16.371]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.371]                               info, version)
[17:47:16.371]                           }
[17:47:16.371]                           base::stop(msg)
[17:47:16.371]                         }
[17:47:16.371]                       })
[17:47:16.371]                     }
[17:47:16.371]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.371]                     base::options(mc.cores = 1L)
[17:47:16.371]                   }
[17:47:16.371]                   ...future.strategy.old <- future::plan("list")
[17:47:16.371]                   options(future.plan = NULL)
[17:47:16.371]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.371]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.371]                 }
[17:47:16.371]                 ...future.workdir <- getwd()
[17:47:16.371]             }
[17:47:16.371]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.371]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.371]         }
[17:47:16.371]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.371]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.371]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.371]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.371]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.371]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.371]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.371]             base::names(...future.oldOptions))
[17:47:16.371]     }
[17:47:16.371]     if (FALSE) {
[17:47:16.371]     }
[17:47:16.371]     else {
[17:47:16.371]         if (TRUE) {
[17:47:16.371]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.371]                 open = "w")
[17:47:16.371]         }
[17:47:16.371]         else {
[17:47:16.371]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.371]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.371]         }
[17:47:16.371]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.371]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.371]             base::sink(type = "output", split = FALSE)
[17:47:16.371]             base::close(...future.stdout)
[17:47:16.371]         }, add = TRUE)
[17:47:16.371]     }
[17:47:16.371]     ...future.frame <- base::sys.nframe()
[17:47:16.371]     ...future.conditions <- base::list()
[17:47:16.371]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.371]     if (FALSE) {
[17:47:16.371]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.371]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.371]     }
[17:47:16.371]     ...future.result <- base::tryCatch({
[17:47:16.371]         base::withCallingHandlers({
[17:47:16.371]             ...future.value <- base::withVisible(base::local({
[17:47:16.371]                 ...future.makeSendCondition <- base::local({
[17:47:16.371]                   sendCondition <- NULL
[17:47:16.371]                   function(frame = 1L) {
[17:47:16.371]                     if (is.function(sendCondition)) 
[17:47:16.371]                       return(sendCondition)
[17:47:16.371]                     ns <- getNamespace("parallel")
[17:47:16.371]                     if (exists("sendData", mode = "function", 
[17:47:16.371]                       envir = ns)) {
[17:47:16.371]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.371]                         envir = ns)
[17:47:16.371]                       envir <- sys.frame(frame)
[17:47:16.371]                       master <- NULL
[17:47:16.371]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.371]                         !identical(envir, emptyenv())) {
[17:47:16.371]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.371]                           inherits = FALSE)) {
[17:47:16.371]                           master <- get("master", mode = "list", 
[17:47:16.371]                             envir = envir, inherits = FALSE)
[17:47:16.371]                           if (inherits(master, c("SOCKnode", 
[17:47:16.371]                             "SOCK0node"))) {
[17:47:16.371]                             sendCondition <<- function(cond) {
[17:47:16.371]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.371]                                 success = TRUE)
[17:47:16.371]                               parallel_sendData(master, data)
[17:47:16.371]                             }
[17:47:16.371]                             return(sendCondition)
[17:47:16.371]                           }
[17:47:16.371]                         }
[17:47:16.371]                         frame <- frame + 1L
[17:47:16.371]                         envir <- sys.frame(frame)
[17:47:16.371]                       }
[17:47:16.371]                     }
[17:47:16.371]                     sendCondition <<- function(cond) NULL
[17:47:16.371]                   }
[17:47:16.371]                 })
[17:47:16.371]                 withCallingHandlers({
[17:47:16.371]                   {
[17:47:16.371]                     f1$owner
[17:47:16.371]                   }
[17:47:16.371]                 }, immediateCondition = function(cond) {
[17:47:16.371]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.371]                   sendCondition(cond)
[17:47:16.371]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.371]                   {
[17:47:16.371]                     inherits <- base::inherits
[17:47:16.371]                     invokeRestart <- base::invokeRestart
[17:47:16.371]                     is.null <- base::is.null
[17:47:16.371]                     muffled <- FALSE
[17:47:16.371]                     if (inherits(cond, "message")) {
[17:47:16.371]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.371]                       if (muffled) 
[17:47:16.371]                         invokeRestart("muffleMessage")
[17:47:16.371]                     }
[17:47:16.371]                     else if (inherits(cond, "warning")) {
[17:47:16.371]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.371]                       if (muffled) 
[17:47:16.371]                         invokeRestart("muffleWarning")
[17:47:16.371]                     }
[17:47:16.371]                     else if (inherits(cond, "condition")) {
[17:47:16.371]                       if (!is.null(pattern)) {
[17:47:16.371]                         computeRestarts <- base::computeRestarts
[17:47:16.371]                         grepl <- base::grepl
[17:47:16.371]                         restarts <- computeRestarts(cond)
[17:47:16.371]                         for (restart in restarts) {
[17:47:16.371]                           name <- restart$name
[17:47:16.371]                           if (is.null(name)) 
[17:47:16.371]                             next
[17:47:16.371]                           if (!grepl(pattern, name)) 
[17:47:16.371]                             next
[17:47:16.371]                           invokeRestart(restart)
[17:47:16.371]                           muffled <- TRUE
[17:47:16.371]                           break
[17:47:16.371]                         }
[17:47:16.371]                       }
[17:47:16.371]                     }
[17:47:16.371]                     invisible(muffled)
[17:47:16.371]                   }
[17:47:16.371]                   muffleCondition(cond)
[17:47:16.371]                 })
[17:47:16.371]             }))
[17:47:16.371]             future::FutureResult(value = ...future.value$value, 
[17:47:16.371]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.371]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.371]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.371]                     ...future.globalenv.names))
[17:47:16.371]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.371]         }, condition = base::local({
[17:47:16.371]             c <- base::c
[17:47:16.371]             inherits <- base::inherits
[17:47:16.371]             invokeRestart <- base::invokeRestart
[17:47:16.371]             length <- base::length
[17:47:16.371]             list <- base::list
[17:47:16.371]             seq.int <- base::seq.int
[17:47:16.371]             signalCondition <- base::signalCondition
[17:47:16.371]             sys.calls <- base::sys.calls
[17:47:16.371]             `[[` <- base::`[[`
[17:47:16.371]             `+` <- base::`+`
[17:47:16.371]             `<<-` <- base::`<<-`
[17:47:16.371]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.371]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.371]                   3L)]
[17:47:16.371]             }
[17:47:16.371]             function(cond) {
[17:47:16.371]                 is_error <- inherits(cond, "error")
[17:47:16.371]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.371]                   NULL)
[17:47:16.371]                 if (is_error) {
[17:47:16.371]                   sessionInformation <- function() {
[17:47:16.371]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.371]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.371]                       search = base::search(), system = base::Sys.info())
[17:47:16.371]                   }
[17:47:16.371]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.371]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.371]                     cond$call), session = sessionInformation(), 
[17:47:16.371]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.371]                   signalCondition(cond)
[17:47:16.371]                 }
[17:47:16.371]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.371]                 "immediateCondition"))) {
[17:47:16.371]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.371]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.371]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.371]                   if (TRUE && !signal) {
[17:47:16.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.371]                     {
[17:47:16.371]                       inherits <- base::inherits
[17:47:16.371]                       invokeRestart <- base::invokeRestart
[17:47:16.371]                       is.null <- base::is.null
[17:47:16.371]                       muffled <- FALSE
[17:47:16.371]                       if (inherits(cond, "message")) {
[17:47:16.371]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.371]                         if (muffled) 
[17:47:16.371]                           invokeRestart("muffleMessage")
[17:47:16.371]                       }
[17:47:16.371]                       else if (inherits(cond, "warning")) {
[17:47:16.371]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.371]                         if (muffled) 
[17:47:16.371]                           invokeRestart("muffleWarning")
[17:47:16.371]                       }
[17:47:16.371]                       else if (inherits(cond, "condition")) {
[17:47:16.371]                         if (!is.null(pattern)) {
[17:47:16.371]                           computeRestarts <- base::computeRestarts
[17:47:16.371]                           grepl <- base::grepl
[17:47:16.371]                           restarts <- computeRestarts(cond)
[17:47:16.371]                           for (restart in restarts) {
[17:47:16.371]                             name <- restart$name
[17:47:16.371]                             if (is.null(name)) 
[17:47:16.371]                               next
[17:47:16.371]                             if (!grepl(pattern, name)) 
[17:47:16.371]                               next
[17:47:16.371]                             invokeRestart(restart)
[17:47:16.371]                             muffled <- TRUE
[17:47:16.371]                             break
[17:47:16.371]                           }
[17:47:16.371]                         }
[17:47:16.371]                       }
[17:47:16.371]                       invisible(muffled)
[17:47:16.371]                     }
[17:47:16.371]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.371]                   }
[17:47:16.371]                 }
[17:47:16.371]                 else {
[17:47:16.371]                   if (TRUE) {
[17:47:16.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.371]                     {
[17:47:16.371]                       inherits <- base::inherits
[17:47:16.371]                       invokeRestart <- base::invokeRestart
[17:47:16.371]                       is.null <- base::is.null
[17:47:16.371]                       muffled <- FALSE
[17:47:16.371]                       if (inherits(cond, "message")) {
[17:47:16.371]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.371]                         if (muffled) 
[17:47:16.371]                           invokeRestart("muffleMessage")
[17:47:16.371]                       }
[17:47:16.371]                       else if (inherits(cond, "warning")) {
[17:47:16.371]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.371]                         if (muffled) 
[17:47:16.371]                           invokeRestart("muffleWarning")
[17:47:16.371]                       }
[17:47:16.371]                       else if (inherits(cond, "condition")) {
[17:47:16.371]                         if (!is.null(pattern)) {
[17:47:16.371]                           computeRestarts <- base::computeRestarts
[17:47:16.371]                           grepl <- base::grepl
[17:47:16.371]                           restarts <- computeRestarts(cond)
[17:47:16.371]                           for (restart in restarts) {
[17:47:16.371]                             name <- restart$name
[17:47:16.371]                             if (is.null(name)) 
[17:47:16.371]                               next
[17:47:16.371]                             if (!grepl(pattern, name)) 
[17:47:16.371]                               next
[17:47:16.371]                             invokeRestart(restart)
[17:47:16.371]                             muffled <- TRUE
[17:47:16.371]                             break
[17:47:16.371]                           }
[17:47:16.371]                         }
[17:47:16.371]                       }
[17:47:16.371]                       invisible(muffled)
[17:47:16.371]                     }
[17:47:16.371]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.371]                   }
[17:47:16.371]                 }
[17:47:16.371]             }
[17:47:16.371]         }))
[17:47:16.371]     }, error = function(ex) {
[17:47:16.371]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.371]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.371]                 ...future.rng), started = ...future.startTime, 
[17:47:16.371]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.371]             version = "1.8"), class = "FutureResult")
[17:47:16.371]     }, finally = {
[17:47:16.371]         if (!identical(...future.workdir, getwd())) 
[17:47:16.371]             setwd(...future.workdir)
[17:47:16.371]         {
[17:47:16.371]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.371]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.371]             }
[17:47:16.371]             base::options(...future.oldOptions)
[17:47:16.371]             if (.Platform$OS.type == "windows") {
[17:47:16.371]                 old_names <- names(...future.oldEnvVars)
[17:47:16.371]                 envs <- base::Sys.getenv()
[17:47:16.371]                 names <- names(envs)
[17:47:16.371]                 common <- intersect(names, old_names)
[17:47:16.371]                 added <- setdiff(names, old_names)
[17:47:16.371]                 removed <- setdiff(old_names, names)
[17:47:16.371]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.371]                   envs[common]]
[17:47:16.371]                 NAMES <- toupper(changed)
[17:47:16.371]                 args <- list()
[17:47:16.371]                 for (kk in seq_along(NAMES)) {
[17:47:16.371]                   name <- changed[[kk]]
[17:47:16.371]                   NAME <- NAMES[[kk]]
[17:47:16.371]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.371]                     next
[17:47:16.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.371]                 }
[17:47:16.371]                 NAMES <- toupper(added)
[17:47:16.371]                 for (kk in seq_along(NAMES)) {
[17:47:16.371]                   name <- added[[kk]]
[17:47:16.371]                   NAME <- NAMES[[kk]]
[17:47:16.371]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.371]                     next
[17:47:16.371]                   args[[name]] <- ""
[17:47:16.371]                 }
[17:47:16.371]                 NAMES <- toupper(removed)
[17:47:16.371]                 for (kk in seq_along(NAMES)) {
[17:47:16.371]                   name <- removed[[kk]]
[17:47:16.371]                   NAME <- NAMES[[kk]]
[17:47:16.371]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.371]                     next
[17:47:16.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.371]                 }
[17:47:16.371]                 if (length(args) > 0) 
[17:47:16.371]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.371]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.371]             }
[17:47:16.371]             else {
[17:47:16.371]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.371]             }
[17:47:16.371]             {
[17:47:16.371]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.371]                   0L) {
[17:47:16.371]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.371]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.371]                   base::options(opts)
[17:47:16.371]                 }
[17:47:16.371]                 {
[17:47:16.371]                   {
[17:47:16.371]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.371]                     NULL
[17:47:16.371]                   }
[17:47:16.371]                   options(future.plan = NULL)
[17:47:16.371]                   if (is.na(NA_character_)) 
[17:47:16.371]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.371]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.371]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.371]                     .init = FALSE)
[17:47:16.371]                 }
[17:47:16.371]             }
[17:47:16.371]         }
[17:47:16.371]     })
[17:47:16.371]     if (TRUE) {
[17:47:16.371]         base::sink(type = "output", split = FALSE)
[17:47:16.371]         if (TRUE) {
[17:47:16.371]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.371]         }
[17:47:16.371]         else {
[17:47:16.371]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.371]         }
[17:47:16.371]         base::close(...future.stdout)
[17:47:16.371]         ...future.stdout <- NULL
[17:47:16.371]     }
[17:47:16.371]     ...future.result$conditions <- ...future.conditions
[17:47:16.371]     ...future.result$finished <- base::Sys.time()
[17:47:16.371]     ...future.result
[17:47:16.371] }
[17:47:16.373] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[17:47:16.375] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[17:47:16.428] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[17:47:16.428] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[17:47:16.429] MultisessionFuture started
[17:47:16.429] - Launch lazy future ... done
[17:47:16.429] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[17:47:16.429] result() for ClusterFuture ...
[17:47:16.429] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.429] - Validating connection of MultisessionFuture
[17:47:16.473] - received message: FutureResult
[17:47:16.473] - Received FutureResult
[17:47:16.473] - Erased future from FutureRegistry
[17:47:16.473] result() for ClusterFuture ...
[17:47:16.474] - result already collected: FutureResult
[17:47:16.474] result() for ClusterFuture ... done
[17:47:16.474] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.474] result() for ClusterFuture ... done
[17:47:16.474] result() for ClusterFuture ...
[17:47:16.474] - result already collected: FutureResult
[17:47:16.474] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 796262f2-ce5b-abb5-edee-15f9c7062d30
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[17:47:16.474] getGlobalsAndPackages() ...
[17:47:16.474] Searching for globals...
[17:47:16.475] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:47:16.475] Searching for globals ... DONE
[17:47:16.476] Resolving globals: FALSE
[17:47:16.478] The total size of the 1 globals is 1.56 MiB (1640984 bytes)
[17:47:16.478] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:47:16.478] - globals: [1] ‘f1’
[17:47:16.478] 
[17:47:16.478] getGlobalsAndPackages() ... DONE
[17:47:16.479] run() for ‘Future’ ...
[17:47:16.479] - state: ‘created’
[17:47:16.479] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.489] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.489] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.489]   - Field: ‘node’
[17:47:16.489]   - Field: ‘label’
[17:47:16.489]   - Field: ‘local’
[17:47:16.490]   - Field: ‘owner’
[17:47:16.490]   - Field: ‘envir’
[17:47:16.490]   - Field: ‘workers’
[17:47:16.490]   - Field: ‘packages’
[17:47:16.490]   - Field: ‘gc’
[17:47:16.490]   - Field: ‘conditions’
[17:47:16.490]   - Field: ‘persistent’
[17:47:16.490]   - Field: ‘expr’
[17:47:16.490]   - Field: ‘uuid’
[17:47:16.490]   - Field: ‘seed’
[17:47:16.490]   - Field: ‘version’
[17:47:16.491]   - Field: ‘result’
[17:47:16.491]   - Field: ‘asynchronous’
[17:47:16.491]   - Field: ‘calls’
[17:47:16.491]   - Field: ‘globals’
[17:47:16.491]   - Field: ‘stdout’
[17:47:16.491]   - Field: ‘earlySignal’
[17:47:16.491]   - Field: ‘lazy’
[17:47:16.491]   - Field: ‘state’
[17:47:16.491] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.491] - Launch lazy future ...
[17:47:16.492] Packages needed by the future expression (n = 0): <none>
[17:47:16.492] Packages needed by future strategies (n = 0): <none>
[17:47:16.492] {
[17:47:16.492]     {
[17:47:16.492]         {
[17:47:16.492]             ...future.startTime <- base::Sys.time()
[17:47:16.492]             {
[17:47:16.492]                 {
[17:47:16.492]                   {
[17:47:16.492]                     {
[17:47:16.492]                       base::local({
[17:47:16.492]                         has_future <- base::requireNamespace("future", 
[17:47:16.492]                           quietly = TRUE)
[17:47:16.492]                         if (has_future) {
[17:47:16.492]                           ns <- base::getNamespace("future")
[17:47:16.492]                           version <- ns[[".package"]][["version"]]
[17:47:16.492]                           if (is.null(version)) 
[17:47:16.492]                             version <- utils::packageVersion("future")
[17:47:16.492]                         }
[17:47:16.492]                         else {
[17:47:16.492]                           version <- NULL
[17:47:16.492]                         }
[17:47:16.492]                         if (!has_future || version < "1.8.0") {
[17:47:16.492]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.492]                             "", base::R.version$version.string), 
[17:47:16.492]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.492]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.492]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.492]                               "release", "version")], collapse = " "), 
[17:47:16.492]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.492]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.492]                             info)
[17:47:16.492]                           info <- base::paste(info, collapse = "; ")
[17:47:16.492]                           if (!has_future) {
[17:47:16.492]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.492]                               info)
[17:47:16.492]                           }
[17:47:16.492]                           else {
[17:47:16.492]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.492]                               info, version)
[17:47:16.492]                           }
[17:47:16.492]                           base::stop(msg)
[17:47:16.492]                         }
[17:47:16.492]                       })
[17:47:16.492]                     }
[17:47:16.492]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.492]                     base::options(mc.cores = 1L)
[17:47:16.492]                   }
[17:47:16.492]                   ...future.strategy.old <- future::plan("list")
[17:47:16.492]                   options(future.plan = NULL)
[17:47:16.492]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.492]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.492]                 }
[17:47:16.492]                 ...future.workdir <- getwd()
[17:47:16.492]             }
[17:47:16.492]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.492]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.492]         }
[17:47:16.492]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.492]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.492]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.492]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.492]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.492]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.492]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.492]             base::names(...future.oldOptions))
[17:47:16.492]     }
[17:47:16.492]     if (FALSE) {
[17:47:16.492]     }
[17:47:16.492]     else {
[17:47:16.492]         if (TRUE) {
[17:47:16.492]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.492]                 open = "w")
[17:47:16.492]         }
[17:47:16.492]         else {
[17:47:16.492]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.492]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.492]         }
[17:47:16.492]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.492]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.492]             base::sink(type = "output", split = FALSE)
[17:47:16.492]             base::close(...future.stdout)
[17:47:16.492]         }, add = TRUE)
[17:47:16.492]     }
[17:47:16.492]     ...future.frame <- base::sys.nframe()
[17:47:16.492]     ...future.conditions <- base::list()
[17:47:16.492]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.492]     if (FALSE) {
[17:47:16.492]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.492]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.492]     }
[17:47:16.492]     ...future.result <- base::tryCatch({
[17:47:16.492]         base::withCallingHandlers({
[17:47:16.492]             ...future.value <- base::withVisible(base::local({
[17:47:16.492]                 ...future.makeSendCondition <- base::local({
[17:47:16.492]                   sendCondition <- NULL
[17:47:16.492]                   function(frame = 1L) {
[17:47:16.492]                     if (is.function(sendCondition)) 
[17:47:16.492]                       return(sendCondition)
[17:47:16.492]                     ns <- getNamespace("parallel")
[17:47:16.492]                     if (exists("sendData", mode = "function", 
[17:47:16.492]                       envir = ns)) {
[17:47:16.492]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.492]                         envir = ns)
[17:47:16.492]                       envir <- sys.frame(frame)
[17:47:16.492]                       master <- NULL
[17:47:16.492]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.492]                         !identical(envir, emptyenv())) {
[17:47:16.492]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.492]                           inherits = FALSE)) {
[17:47:16.492]                           master <- get("master", mode = "list", 
[17:47:16.492]                             envir = envir, inherits = FALSE)
[17:47:16.492]                           if (inherits(master, c("SOCKnode", 
[17:47:16.492]                             "SOCK0node"))) {
[17:47:16.492]                             sendCondition <<- function(cond) {
[17:47:16.492]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.492]                                 success = TRUE)
[17:47:16.492]                               parallel_sendData(master, data)
[17:47:16.492]                             }
[17:47:16.492]                             return(sendCondition)
[17:47:16.492]                           }
[17:47:16.492]                         }
[17:47:16.492]                         frame <- frame + 1L
[17:47:16.492]                         envir <- sys.frame(frame)
[17:47:16.492]                       }
[17:47:16.492]                     }
[17:47:16.492]                     sendCondition <<- function(cond) NULL
[17:47:16.492]                   }
[17:47:16.492]                 })
[17:47:16.492]                 withCallingHandlers({
[17:47:16.492]                   {
[17:47:16.492]                     f1$owner
[17:47:16.492]                   }
[17:47:16.492]                 }, immediateCondition = function(cond) {
[17:47:16.492]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.492]                   sendCondition(cond)
[17:47:16.492]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.492]                   {
[17:47:16.492]                     inherits <- base::inherits
[17:47:16.492]                     invokeRestart <- base::invokeRestart
[17:47:16.492]                     is.null <- base::is.null
[17:47:16.492]                     muffled <- FALSE
[17:47:16.492]                     if (inherits(cond, "message")) {
[17:47:16.492]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.492]                       if (muffled) 
[17:47:16.492]                         invokeRestart("muffleMessage")
[17:47:16.492]                     }
[17:47:16.492]                     else if (inherits(cond, "warning")) {
[17:47:16.492]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.492]                       if (muffled) 
[17:47:16.492]                         invokeRestart("muffleWarning")
[17:47:16.492]                     }
[17:47:16.492]                     else if (inherits(cond, "condition")) {
[17:47:16.492]                       if (!is.null(pattern)) {
[17:47:16.492]                         computeRestarts <- base::computeRestarts
[17:47:16.492]                         grepl <- base::grepl
[17:47:16.492]                         restarts <- computeRestarts(cond)
[17:47:16.492]                         for (restart in restarts) {
[17:47:16.492]                           name <- restart$name
[17:47:16.492]                           if (is.null(name)) 
[17:47:16.492]                             next
[17:47:16.492]                           if (!grepl(pattern, name)) 
[17:47:16.492]                             next
[17:47:16.492]                           invokeRestart(restart)
[17:47:16.492]                           muffled <- TRUE
[17:47:16.492]                           break
[17:47:16.492]                         }
[17:47:16.492]                       }
[17:47:16.492]                     }
[17:47:16.492]                     invisible(muffled)
[17:47:16.492]                   }
[17:47:16.492]                   muffleCondition(cond)
[17:47:16.492]                 })
[17:47:16.492]             }))
[17:47:16.492]             future::FutureResult(value = ...future.value$value, 
[17:47:16.492]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.492]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.492]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.492]                     ...future.globalenv.names))
[17:47:16.492]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.492]         }, condition = base::local({
[17:47:16.492]             c <- base::c
[17:47:16.492]             inherits <- base::inherits
[17:47:16.492]             invokeRestart <- base::invokeRestart
[17:47:16.492]             length <- base::length
[17:47:16.492]             list <- base::list
[17:47:16.492]             seq.int <- base::seq.int
[17:47:16.492]             signalCondition <- base::signalCondition
[17:47:16.492]             sys.calls <- base::sys.calls
[17:47:16.492]             `[[` <- base::`[[`
[17:47:16.492]             `+` <- base::`+`
[17:47:16.492]             `<<-` <- base::`<<-`
[17:47:16.492]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.492]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.492]                   3L)]
[17:47:16.492]             }
[17:47:16.492]             function(cond) {
[17:47:16.492]                 is_error <- inherits(cond, "error")
[17:47:16.492]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.492]                   NULL)
[17:47:16.492]                 if (is_error) {
[17:47:16.492]                   sessionInformation <- function() {
[17:47:16.492]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.492]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.492]                       search = base::search(), system = base::Sys.info())
[17:47:16.492]                   }
[17:47:16.492]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.492]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.492]                     cond$call), session = sessionInformation(), 
[17:47:16.492]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.492]                   signalCondition(cond)
[17:47:16.492]                 }
[17:47:16.492]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.492]                 "immediateCondition"))) {
[17:47:16.492]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.492]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.492]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.492]                   if (TRUE && !signal) {
[17:47:16.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.492]                     {
[17:47:16.492]                       inherits <- base::inherits
[17:47:16.492]                       invokeRestart <- base::invokeRestart
[17:47:16.492]                       is.null <- base::is.null
[17:47:16.492]                       muffled <- FALSE
[17:47:16.492]                       if (inherits(cond, "message")) {
[17:47:16.492]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.492]                         if (muffled) 
[17:47:16.492]                           invokeRestart("muffleMessage")
[17:47:16.492]                       }
[17:47:16.492]                       else if (inherits(cond, "warning")) {
[17:47:16.492]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.492]                         if (muffled) 
[17:47:16.492]                           invokeRestart("muffleWarning")
[17:47:16.492]                       }
[17:47:16.492]                       else if (inherits(cond, "condition")) {
[17:47:16.492]                         if (!is.null(pattern)) {
[17:47:16.492]                           computeRestarts <- base::computeRestarts
[17:47:16.492]                           grepl <- base::grepl
[17:47:16.492]                           restarts <- computeRestarts(cond)
[17:47:16.492]                           for (restart in restarts) {
[17:47:16.492]                             name <- restart$name
[17:47:16.492]                             if (is.null(name)) 
[17:47:16.492]                               next
[17:47:16.492]                             if (!grepl(pattern, name)) 
[17:47:16.492]                               next
[17:47:16.492]                             invokeRestart(restart)
[17:47:16.492]                             muffled <- TRUE
[17:47:16.492]                             break
[17:47:16.492]                           }
[17:47:16.492]                         }
[17:47:16.492]                       }
[17:47:16.492]                       invisible(muffled)
[17:47:16.492]                     }
[17:47:16.492]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.492]                   }
[17:47:16.492]                 }
[17:47:16.492]                 else {
[17:47:16.492]                   if (TRUE) {
[17:47:16.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.492]                     {
[17:47:16.492]                       inherits <- base::inherits
[17:47:16.492]                       invokeRestart <- base::invokeRestart
[17:47:16.492]                       is.null <- base::is.null
[17:47:16.492]                       muffled <- FALSE
[17:47:16.492]                       if (inherits(cond, "message")) {
[17:47:16.492]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.492]                         if (muffled) 
[17:47:16.492]                           invokeRestart("muffleMessage")
[17:47:16.492]                       }
[17:47:16.492]                       else if (inherits(cond, "warning")) {
[17:47:16.492]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.492]                         if (muffled) 
[17:47:16.492]                           invokeRestart("muffleWarning")
[17:47:16.492]                       }
[17:47:16.492]                       else if (inherits(cond, "condition")) {
[17:47:16.492]                         if (!is.null(pattern)) {
[17:47:16.492]                           computeRestarts <- base::computeRestarts
[17:47:16.492]                           grepl <- base::grepl
[17:47:16.492]                           restarts <- computeRestarts(cond)
[17:47:16.492]                           for (restart in restarts) {
[17:47:16.492]                             name <- restart$name
[17:47:16.492]                             if (is.null(name)) 
[17:47:16.492]                               next
[17:47:16.492]                             if (!grepl(pattern, name)) 
[17:47:16.492]                               next
[17:47:16.492]                             invokeRestart(restart)
[17:47:16.492]                             muffled <- TRUE
[17:47:16.492]                             break
[17:47:16.492]                           }
[17:47:16.492]                         }
[17:47:16.492]                       }
[17:47:16.492]                       invisible(muffled)
[17:47:16.492]                     }
[17:47:16.492]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.492]                   }
[17:47:16.492]                 }
[17:47:16.492]             }
[17:47:16.492]         }))
[17:47:16.492]     }, error = function(ex) {
[17:47:16.492]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.492]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.492]                 ...future.rng), started = ...future.startTime, 
[17:47:16.492]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.492]             version = "1.8"), class = "FutureResult")
[17:47:16.492]     }, finally = {
[17:47:16.492]         if (!identical(...future.workdir, getwd())) 
[17:47:16.492]             setwd(...future.workdir)
[17:47:16.492]         {
[17:47:16.492]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.492]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.492]             }
[17:47:16.492]             base::options(...future.oldOptions)
[17:47:16.492]             if (.Platform$OS.type == "windows") {
[17:47:16.492]                 old_names <- names(...future.oldEnvVars)
[17:47:16.492]                 envs <- base::Sys.getenv()
[17:47:16.492]                 names <- names(envs)
[17:47:16.492]                 common <- intersect(names, old_names)
[17:47:16.492]                 added <- setdiff(names, old_names)
[17:47:16.492]                 removed <- setdiff(old_names, names)
[17:47:16.492]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.492]                   envs[common]]
[17:47:16.492]                 NAMES <- toupper(changed)
[17:47:16.492]                 args <- list()
[17:47:16.492]                 for (kk in seq_along(NAMES)) {
[17:47:16.492]                   name <- changed[[kk]]
[17:47:16.492]                   NAME <- NAMES[[kk]]
[17:47:16.492]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.492]                     next
[17:47:16.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.492]                 }
[17:47:16.492]                 NAMES <- toupper(added)
[17:47:16.492]                 for (kk in seq_along(NAMES)) {
[17:47:16.492]                   name <- added[[kk]]
[17:47:16.492]                   NAME <- NAMES[[kk]]
[17:47:16.492]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.492]                     next
[17:47:16.492]                   args[[name]] <- ""
[17:47:16.492]                 }
[17:47:16.492]                 NAMES <- toupper(removed)
[17:47:16.492]                 for (kk in seq_along(NAMES)) {
[17:47:16.492]                   name <- removed[[kk]]
[17:47:16.492]                   NAME <- NAMES[[kk]]
[17:47:16.492]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.492]                     next
[17:47:16.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.492]                 }
[17:47:16.492]                 if (length(args) > 0) 
[17:47:16.492]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.492]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.492]             }
[17:47:16.492]             else {
[17:47:16.492]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.492]             }
[17:47:16.492]             {
[17:47:16.492]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.492]                   0L) {
[17:47:16.492]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.492]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.492]                   base::options(opts)
[17:47:16.492]                 }
[17:47:16.492]                 {
[17:47:16.492]                   {
[17:47:16.492]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.492]                     NULL
[17:47:16.492]                   }
[17:47:16.492]                   options(future.plan = NULL)
[17:47:16.492]                   if (is.na(NA_character_)) 
[17:47:16.492]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.492]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.492]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.492]                     .init = FALSE)
[17:47:16.492]                 }
[17:47:16.492]             }
[17:47:16.492]         }
[17:47:16.492]     })
[17:47:16.492]     if (TRUE) {
[17:47:16.492]         base::sink(type = "output", split = FALSE)
[17:47:16.492]         if (TRUE) {
[17:47:16.492]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.492]         }
[17:47:16.492]         else {
[17:47:16.492]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.492]         }
[17:47:16.492]         base::close(...future.stdout)
[17:47:16.492]         ...future.stdout <- NULL
[17:47:16.492]     }
[17:47:16.492]     ...future.result$conditions <- ...future.conditions
[17:47:16.492]     ...future.result$finished <- base::Sys.time()
[17:47:16.492]     ...future.result
[17:47:16.492] }
[17:47:16.495] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[17:47:16.496] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[17:47:16.548] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[17:47:16.548] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[17:47:16.548] MultisessionFuture started
[17:47:16.549] - Launch lazy future ... done
[17:47:16.549] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[17:47:16.549] result() for ClusterFuture ...
[17:47:16.549] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.549] - Validating connection of MultisessionFuture
[17:47:16.593] - received message: FutureResult
[17:47:16.593] - Received FutureResult
[17:47:16.593] - Erased future from FutureRegistry
[17:47:16.594] result() for ClusterFuture ...
[17:47:16.594] - result already collected: FutureResult
[17:47:16.594] result() for ClusterFuture ... done
[17:47:16.594] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.594] result() for ClusterFuture ... done
[17:47:16.594] result() for ClusterFuture ...
[17:47:16.594] - result already collected: FutureResult
[17:47:16.594] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 796262f2-ce5b-abb5-edee-15f9c7062d30
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[17:47:16.594] getGlobalsAndPackages() ...
[17:47:16.595] Searching for globals...
[17:47:16.596] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[17:47:16.596] Searching for globals ... DONE
[17:47:16.596] Resolving globals: FALSE
[17:47:16.598] The total size of the 1 globals is 1.57 MiB (1643920 bytes)
[17:47:16.599] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[17:47:16.599] - globals: [1] ‘f1’
[17:47:16.599] 
[17:47:16.599] getGlobalsAndPackages() ... DONE
[17:47:16.599] run() for ‘Future’ ...
[17:47:16.599] - state: ‘created’
[17:47:16.600] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.610] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.610] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.610]   - Field: ‘node’
[17:47:16.610]   - Field: ‘label’
[17:47:16.610]   - Field: ‘local’
[17:47:16.610]   - Field: ‘owner’
[17:47:16.610]   - Field: ‘envir’
[17:47:16.611]   - Field: ‘workers’
[17:47:16.611]   - Field: ‘packages’
[17:47:16.611]   - Field: ‘gc’
[17:47:16.611]   - Field: ‘conditions’
[17:47:16.611]   - Field: ‘persistent’
[17:47:16.611]   - Field: ‘expr’
[17:47:16.611]   - Field: ‘uuid’
[17:47:16.611]   - Field: ‘seed’
[17:47:16.611]   - Field: ‘version’
[17:47:16.611]   - Field: ‘result’
[17:47:16.611]   - Field: ‘asynchronous’
[17:47:16.612]   - Field: ‘calls’
[17:47:16.612]   - Field: ‘globals’
[17:47:16.612]   - Field: ‘stdout’
[17:47:16.612]   - Field: ‘earlySignal’
[17:47:16.612]   - Field: ‘lazy’
[17:47:16.612]   - Field: ‘state’
[17:47:16.612] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.612] - Launch lazy future ...
[17:47:16.612] Packages needed by the future expression (n = 0): <none>
[17:47:16.613] Packages needed by future strategies (n = 0): <none>
[17:47:16.613] {
[17:47:16.613]     {
[17:47:16.613]         {
[17:47:16.613]             ...future.startTime <- base::Sys.time()
[17:47:16.613]             {
[17:47:16.613]                 {
[17:47:16.613]                   {
[17:47:16.613]                     {
[17:47:16.613]                       base::local({
[17:47:16.613]                         has_future <- base::requireNamespace("future", 
[17:47:16.613]                           quietly = TRUE)
[17:47:16.613]                         if (has_future) {
[17:47:16.613]                           ns <- base::getNamespace("future")
[17:47:16.613]                           version <- ns[[".package"]][["version"]]
[17:47:16.613]                           if (is.null(version)) 
[17:47:16.613]                             version <- utils::packageVersion("future")
[17:47:16.613]                         }
[17:47:16.613]                         else {
[17:47:16.613]                           version <- NULL
[17:47:16.613]                         }
[17:47:16.613]                         if (!has_future || version < "1.8.0") {
[17:47:16.613]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.613]                             "", base::R.version$version.string), 
[17:47:16.613]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.613]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.613]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.613]                               "release", "version")], collapse = " "), 
[17:47:16.613]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.613]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.613]                             info)
[17:47:16.613]                           info <- base::paste(info, collapse = "; ")
[17:47:16.613]                           if (!has_future) {
[17:47:16.613]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.613]                               info)
[17:47:16.613]                           }
[17:47:16.613]                           else {
[17:47:16.613]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.613]                               info, version)
[17:47:16.613]                           }
[17:47:16.613]                           base::stop(msg)
[17:47:16.613]                         }
[17:47:16.613]                       })
[17:47:16.613]                     }
[17:47:16.613]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.613]                     base::options(mc.cores = 1L)
[17:47:16.613]                   }
[17:47:16.613]                   ...future.strategy.old <- future::plan("list")
[17:47:16.613]                   options(future.plan = NULL)
[17:47:16.613]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.613]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.613]                 }
[17:47:16.613]                 ...future.workdir <- getwd()
[17:47:16.613]             }
[17:47:16.613]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.613]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.613]         }
[17:47:16.613]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.613]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.613]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.613]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.613]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.613]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.613]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.613]             base::names(...future.oldOptions))
[17:47:16.613]     }
[17:47:16.613]     if (FALSE) {
[17:47:16.613]     }
[17:47:16.613]     else {
[17:47:16.613]         if (TRUE) {
[17:47:16.613]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.613]                 open = "w")
[17:47:16.613]         }
[17:47:16.613]         else {
[17:47:16.613]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.613]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.613]         }
[17:47:16.613]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.613]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.613]             base::sink(type = "output", split = FALSE)
[17:47:16.613]             base::close(...future.stdout)
[17:47:16.613]         }, add = TRUE)
[17:47:16.613]     }
[17:47:16.613]     ...future.frame <- base::sys.nframe()
[17:47:16.613]     ...future.conditions <- base::list()
[17:47:16.613]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.613]     if (FALSE) {
[17:47:16.613]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.613]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.613]     }
[17:47:16.613]     ...future.result <- base::tryCatch({
[17:47:16.613]         base::withCallingHandlers({
[17:47:16.613]             ...future.value <- base::withVisible(base::local({
[17:47:16.613]                 ...future.makeSendCondition <- base::local({
[17:47:16.613]                   sendCondition <- NULL
[17:47:16.613]                   function(frame = 1L) {
[17:47:16.613]                     if (is.function(sendCondition)) 
[17:47:16.613]                       return(sendCondition)
[17:47:16.613]                     ns <- getNamespace("parallel")
[17:47:16.613]                     if (exists("sendData", mode = "function", 
[17:47:16.613]                       envir = ns)) {
[17:47:16.613]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.613]                         envir = ns)
[17:47:16.613]                       envir <- sys.frame(frame)
[17:47:16.613]                       master <- NULL
[17:47:16.613]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.613]                         !identical(envir, emptyenv())) {
[17:47:16.613]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.613]                           inherits = FALSE)) {
[17:47:16.613]                           master <- get("master", mode = "list", 
[17:47:16.613]                             envir = envir, inherits = FALSE)
[17:47:16.613]                           if (inherits(master, c("SOCKnode", 
[17:47:16.613]                             "SOCK0node"))) {
[17:47:16.613]                             sendCondition <<- function(cond) {
[17:47:16.613]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.613]                                 success = TRUE)
[17:47:16.613]                               parallel_sendData(master, data)
[17:47:16.613]                             }
[17:47:16.613]                             return(sendCondition)
[17:47:16.613]                           }
[17:47:16.613]                         }
[17:47:16.613]                         frame <- frame + 1L
[17:47:16.613]                         envir <- sys.frame(frame)
[17:47:16.613]                       }
[17:47:16.613]                     }
[17:47:16.613]                     sendCondition <<- function(cond) NULL
[17:47:16.613]                   }
[17:47:16.613]                 })
[17:47:16.613]                 withCallingHandlers({
[17:47:16.613]                   {
[17:47:16.613]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[17:47:16.613]                     "not-owner"
[17:47:16.613]                   }
[17:47:16.613]                 }, immediateCondition = function(cond) {
[17:47:16.613]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.613]                   sendCondition(cond)
[17:47:16.613]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.613]                   {
[17:47:16.613]                     inherits <- base::inherits
[17:47:16.613]                     invokeRestart <- base::invokeRestart
[17:47:16.613]                     is.null <- base::is.null
[17:47:16.613]                     muffled <- FALSE
[17:47:16.613]                     if (inherits(cond, "message")) {
[17:47:16.613]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.613]                       if (muffled) 
[17:47:16.613]                         invokeRestart("muffleMessage")
[17:47:16.613]                     }
[17:47:16.613]                     else if (inherits(cond, "warning")) {
[17:47:16.613]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.613]                       if (muffled) 
[17:47:16.613]                         invokeRestart("muffleWarning")
[17:47:16.613]                     }
[17:47:16.613]                     else if (inherits(cond, "condition")) {
[17:47:16.613]                       if (!is.null(pattern)) {
[17:47:16.613]                         computeRestarts <- base::computeRestarts
[17:47:16.613]                         grepl <- base::grepl
[17:47:16.613]                         restarts <- computeRestarts(cond)
[17:47:16.613]                         for (restart in restarts) {
[17:47:16.613]                           name <- restart$name
[17:47:16.613]                           if (is.null(name)) 
[17:47:16.613]                             next
[17:47:16.613]                           if (!grepl(pattern, name)) 
[17:47:16.613]                             next
[17:47:16.613]                           invokeRestart(restart)
[17:47:16.613]                           muffled <- TRUE
[17:47:16.613]                           break
[17:47:16.613]                         }
[17:47:16.613]                       }
[17:47:16.613]                     }
[17:47:16.613]                     invisible(muffled)
[17:47:16.613]                   }
[17:47:16.613]                   muffleCondition(cond)
[17:47:16.613]                 })
[17:47:16.613]             }))
[17:47:16.613]             future::FutureResult(value = ...future.value$value, 
[17:47:16.613]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.613]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.613]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.613]                     ...future.globalenv.names))
[17:47:16.613]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.613]         }, condition = base::local({
[17:47:16.613]             c <- base::c
[17:47:16.613]             inherits <- base::inherits
[17:47:16.613]             invokeRestart <- base::invokeRestart
[17:47:16.613]             length <- base::length
[17:47:16.613]             list <- base::list
[17:47:16.613]             seq.int <- base::seq.int
[17:47:16.613]             signalCondition <- base::signalCondition
[17:47:16.613]             sys.calls <- base::sys.calls
[17:47:16.613]             `[[` <- base::`[[`
[17:47:16.613]             `+` <- base::`+`
[17:47:16.613]             `<<-` <- base::`<<-`
[17:47:16.613]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.613]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.613]                   3L)]
[17:47:16.613]             }
[17:47:16.613]             function(cond) {
[17:47:16.613]                 is_error <- inherits(cond, "error")
[17:47:16.613]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.613]                   NULL)
[17:47:16.613]                 if (is_error) {
[17:47:16.613]                   sessionInformation <- function() {
[17:47:16.613]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.613]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.613]                       search = base::search(), system = base::Sys.info())
[17:47:16.613]                   }
[17:47:16.613]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.613]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.613]                     cond$call), session = sessionInformation(), 
[17:47:16.613]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.613]                   signalCondition(cond)
[17:47:16.613]                 }
[17:47:16.613]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.613]                 "immediateCondition"))) {
[17:47:16.613]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.613]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.613]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.613]                   if (TRUE && !signal) {
[17:47:16.613]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.613]                     {
[17:47:16.613]                       inherits <- base::inherits
[17:47:16.613]                       invokeRestart <- base::invokeRestart
[17:47:16.613]                       is.null <- base::is.null
[17:47:16.613]                       muffled <- FALSE
[17:47:16.613]                       if (inherits(cond, "message")) {
[17:47:16.613]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.613]                         if (muffled) 
[17:47:16.613]                           invokeRestart("muffleMessage")
[17:47:16.613]                       }
[17:47:16.613]                       else if (inherits(cond, "warning")) {
[17:47:16.613]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.613]                         if (muffled) 
[17:47:16.613]                           invokeRestart("muffleWarning")
[17:47:16.613]                       }
[17:47:16.613]                       else if (inherits(cond, "condition")) {
[17:47:16.613]                         if (!is.null(pattern)) {
[17:47:16.613]                           computeRestarts <- base::computeRestarts
[17:47:16.613]                           grepl <- base::grepl
[17:47:16.613]                           restarts <- computeRestarts(cond)
[17:47:16.613]                           for (restart in restarts) {
[17:47:16.613]                             name <- restart$name
[17:47:16.613]                             if (is.null(name)) 
[17:47:16.613]                               next
[17:47:16.613]                             if (!grepl(pattern, name)) 
[17:47:16.613]                               next
[17:47:16.613]                             invokeRestart(restart)
[17:47:16.613]                             muffled <- TRUE
[17:47:16.613]                             break
[17:47:16.613]                           }
[17:47:16.613]                         }
[17:47:16.613]                       }
[17:47:16.613]                       invisible(muffled)
[17:47:16.613]                     }
[17:47:16.613]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.613]                   }
[17:47:16.613]                 }
[17:47:16.613]                 else {
[17:47:16.613]                   if (TRUE) {
[17:47:16.613]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.613]                     {
[17:47:16.613]                       inherits <- base::inherits
[17:47:16.613]                       invokeRestart <- base::invokeRestart
[17:47:16.613]                       is.null <- base::is.null
[17:47:16.613]                       muffled <- FALSE
[17:47:16.613]                       if (inherits(cond, "message")) {
[17:47:16.613]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.613]                         if (muffled) 
[17:47:16.613]                           invokeRestart("muffleMessage")
[17:47:16.613]                       }
[17:47:16.613]                       else if (inherits(cond, "warning")) {
[17:47:16.613]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.613]                         if (muffled) 
[17:47:16.613]                           invokeRestart("muffleWarning")
[17:47:16.613]                       }
[17:47:16.613]                       else if (inherits(cond, "condition")) {
[17:47:16.613]                         if (!is.null(pattern)) {
[17:47:16.613]                           computeRestarts <- base::computeRestarts
[17:47:16.613]                           grepl <- base::grepl
[17:47:16.613]                           restarts <- computeRestarts(cond)
[17:47:16.613]                           for (restart in restarts) {
[17:47:16.613]                             name <- restart$name
[17:47:16.613]                             if (is.null(name)) 
[17:47:16.613]                               next
[17:47:16.613]                             if (!grepl(pattern, name)) 
[17:47:16.613]                               next
[17:47:16.613]                             invokeRestart(restart)
[17:47:16.613]                             muffled <- TRUE
[17:47:16.613]                             break
[17:47:16.613]                           }
[17:47:16.613]                         }
[17:47:16.613]                       }
[17:47:16.613]                       invisible(muffled)
[17:47:16.613]                     }
[17:47:16.613]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.613]                   }
[17:47:16.613]                 }
[17:47:16.613]             }
[17:47:16.613]         }))
[17:47:16.613]     }, error = function(ex) {
[17:47:16.613]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.613]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.613]                 ...future.rng), started = ...future.startTime, 
[17:47:16.613]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.613]             version = "1.8"), class = "FutureResult")
[17:47:16.613]     }, finally = {
[17:47:16.613]         if (!identical(...future.workdir, getwd())) 
[17:47:16.613]             setwd(...future.workdir)
[17:47:16.613]         {
[17:47:16.613]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.613]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.613]             }
[17:47:16.613]             base::options(...future.oldOptions)
[17:47:16.613]             if (.Platform$OS.type == "windows") {
[17:47:16.613]                 old_names <- names(...future.oldEnvVars)
[17:47:16.613]                 envs <- base::Sys.getenv()
[17:47:16.613]                 names <- names(envs)
[17:47:16.613]                 common <- intersect(names, old_names)
[17:47:16.613]                 added <- setdiff(names, old_names)
[17:47:16.613]                 removed <- setdiff(old_names, names)
[17:47:16.613]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.613]                   envs[common]]
[17:47:16.613]                 NAMES <- toupper(changed)
[17:47:16.613]                 args <- list()
[17:47:16.613]                 for (kk in seq_along(NAMES)) {
[17:47:16.613]                   name <- changed[[kk]]
[17:47:16.613]                   NAME <- NAMES[[kk]]
[17:47:16.613]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.613]                     next
[17:47:16.613]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.613]                 }
[17:47:16.613]                 NAMES <- toupper(added)
[17:47:16.613]                 for (kk in seq_along(NAMES)) {
[17:47:16.613]                   name <- added[[kk]]
[17:47:16.613]                   NAME <- NAMES[[kk]]
[17:47:16.613]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.613]                     next
[17:47:16.613]                   args[[name]] <- ""
[17:47:16.613]                 }
[17:47:16.613]                 NAMES <- toupper(removed)
[17:47:16.613]                 for (kk in seq_along(NAMES)) {
[17:47:16.613]                   name <- removed[[kk]]
[17:47:16.613]                   NAME <- NAMES[[kk]]
[17:47:16.613]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.613]                     next
[17:47:16.613]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.613]                 }
[17:47:16.613]                 if (length(args) > 0) 
[17:47:16.613]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.613]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.613]             }
[17:47:16.613]             else {
[17:47:16.613]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.613]             }
[17:47:16.613]             {
[17:47:16.613]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.613]                   0L) {
[17:47:16.613]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.613]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.613]                   base::options(opts)
[17:47:16.613]                 }
[17:47:16.613]                 {
[17:47:16.613]                   {
[17:47:16.613]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.613]                     NULL
[17:47:16.613]                   }
[17:47:16.613]                   options(future.plan = NULL)
[17:47:16.613]                   if (is.na(NA_character_)) 
[17:47:16.613]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.613]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.613]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.613]                     .init = FALSE)
[17:47:16.613]                 }
[17:47:16.613]             }
[17:47:16.613]         }
[17:47:16.613]     })
[17:47:16.613]     if (TRUE) {
[17:47:16.613]         base::sink(type = "output", split = FALSE)
[17:47:16.613]         if (TRUE) {
[17:47:16.613]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.613]         }
[17:47:16.613]         else {
[17:47:16.613]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.613]         }
[17:47:16.613]         base::close(...future.stdout)
[17:47:16.613]         ...future.stdout <- NULL
[17:47:16.613]     }
[17:47:16.613]     ...future.result$conditions <- ...future.conditions
[17:47:16.613]     ...future.result$finished <- base::Sys.time()
[17:47:16.613]     ...future.result
[17:47:16.613] }
[17:47:16.616] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[17:47:16.618] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[17:47:16.672] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[17:47:16.672] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[17:47:16.672] MultisessionFuture started
[17:47:16.673] - Launch lazy future ... done
[17:47:16.673] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[17:47:16.673] result() for ClusterFuture ...
[17:47:16.673] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.673] - Validating connection of MultisessionFuture
[17:47:16.717] - received message: FutureResult
[17:47:16.717] - Received FutureResult
[17:47:16.717] - Erased future from FutureRegistry
[17:47:16.718] result() for ClusterFuture ...
[17:47:16.718] - result already collected: FutureResult
[17:47:16.718] result() for ClusterFuture ... done
[17:47:16.718] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.718] result() for ClusterFuture ... done
[17:47:16.718] result() for ClusterFuture ...
[17:47:16.718] - result already collected: FutureResult
[17:47:16.718] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[17:47:16.718] getGlobalsAndPackages() ...
[17:47:16.719] Searching for globals...
[17:47:16.719] - globals found: [1] ‘{’
[17:47:16.719] Searching for globals ... DONE
[17:47:16.719] Resolving globals: FALSE
[17:47:16.720] 
[17:47:16.720] 
[17:47:16.720] getGlobalsAndPackages() ... DONE
[17:47:16.720] run() for ‘Future’ ...
[17:47:16.720] - state: ‘created’
[17:47:16.720] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.731] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.731] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.731]   - Field: ‘node’
[17:47:16.731]   - Field: ‘label’
[17:47:16.731]   - Field: ‘local’
[17:47:16.731]   - Field: ‘owner’
[17:47:16.732]   - Field: ‘envir’
[17:47:16.732]   - Field: ‘workers’
[17:47:16.732]   - Field: ‘packages’
[17:47:16.732]   - Field: ‘gc’
[17:47:16.732]   - Field: ‘conditions’
[17:47:16.732]   - Field: ‘persistent’
[17:47:16.732]   - Field: ‘expr’
[17:47:16.732]   - Field: ‘uuid’
[17:47:16.732]   - Field: ‘seed’
[17:47:16.732]   - Field: ‘version’
[17:47:16.732]   - Field: ‘result’
[17:47:16.732]   - Field: ‘asynchronous’
[17:47:16.733]   - Field: ‘calls’
[17:47:16.733]   - Field: ‘globals’
[17:47:16.733]   - Field: ‘stdout’
[17:47:16.733]   - Field: ‘earlySignal’
[17:47:16.733]   - Field: ‘lazy’
[17:47:16.733]   - Field: ‘state’
[17:47:16.733] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.733] - Launch lazy future ...
[17:47:16.734] Packages needed by the future expression (n = 0): <none>
[17:47:16.734] Packages needed by future strategies (n = 0): <none>
[17:47:16.734] {
[17:47:16.734]     {
[17:47:16.734]         {
[17:47:16.734]             ...future.startTime <- base::Sys.time()
[17:47:16.734]             {
[17:47:16.734]                 {
[17:47:16.734]                   {
[17:47:16.734]                     {
[17:47:16.734]                       base::local({
[17:47:16.734]                         has_future <- base::requireNamespace("future", 
[17:47:16.734]                           quietly = TRUE)
[17:47:16.734]                         if (has_future) {
[17:47:16.734]                           ns <- base::getNamespace("future")
[17:47:16.734]                           version <- ns[[".package"]][["version"]]
[17:47:16.734]                           if (is.null(version)) 
[17:47:16.734]                             version <- utils::packageVersion("future")
[17:47:16.734]                         }
[17:47:16.734]                         else {
[17:47:16.734]                           version <- NULL
[17:47:16.734]                         }
[17:47:16.734]                         if (!has_future || version < "1.8.0") {
[17:47:16.734]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.734]                             "", base::R.version$version.string), 
[17:47:16.734]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:16.734]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:16.734]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.734]                               "release", "version")], collapse = " "), 
[17:47:16.734]                             hostname = base::Sys.info()[["nodename"]])
[17:47:16.734]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.734]                             info)
[17:47:16.734]                           info <- base::paste(info, collapse = "; ")
[17:47:16.734]                           if (!has_future) {
[17:47:16.734]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.734]                               info)
[17:47:16.734]                           }
[17:47:16.734]                           else {
[17:47:16.734]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.734]                               info, version)
[17:47:16.734]                           }
[17:47:16.734]                           base::stop(msg)
[17:47:16.734]                         }
[17:47:16.734]                       })
[17:47:16.734]                     }
[17:47:16.734]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.734]                     base::options(mc.cores = 1L)
[17:47:16.734]                   }
[17:47:16.734]                   ...future.strategy.old <- future::plan("list")
[17:47:16.734]                   options(future.plan = NULL)
[17:47:16.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.734]                 }
[17:47:16.734]                 ...future.workdir <- getwd()
[17:47:16.734]             }
[17:47:16.734]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.734]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.734]         }
[17:47:16.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.734]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.734]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.734]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.734]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.734]             base::names(...future.oldOptions))
[17:47:16.734]     }
[17:47:16.734]     if (FALSE) {
[17:47:16.734]     }
[17:47:16.734]     else {
[17:47:16.734]         if (TRUE) {
[17:47:16.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.734]                 open = "w")
[17:47:16.734]         }
[17:47:16.734]         else {
[17:47:16.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.734]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.734]         }
[17:47:16.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.734]             base::sink(type = "output", split = FALSE)
[17:47:16.734]             base::close(...future.stdout)
[17:47:16.734]         }, add = TRUE)
[17:47:16.734]     }
[17:47:16.734]     ...future.frame <- base::sys.nframe()
[17:47:16.734]     ...future.conditions <- base::list()
[17:47:16.734]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.734]     if (FALSE) {
[17:47:16.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.734]     }
[17:47:16.734]     ...future.result <- base::tryCatch({
[17:47:16.734]         base::withCallingHandlers({
[17:47:16.734]             ...future.value <- base::withVisible(base::local({
[17:47:16.734]                 ...future.makeSendCondition <- base::local({
[17:47:16.734]                   sendCondition <- NULL
[17:47:16.734]                   function(frame = 1L) {
[17:47:16.734]                     if (is.function(sendCondition)) 
[17:47:16.734]                       return(sendCondition)
[17:47:16.734]                     ns <- getNamespace("parallel")
[17:47:16.734]                     if (exists("sendData", mode = "function", 
[17:47:16.734]                       envir = ns)) {
[17:47:16.734]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.734]                         envir = ns)
[17:47:16.734]                       envir <- sys.frame(frame)
[17:47:16.734]                       master <- NULL
[17:47:16.734]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.734]                         !identical(envir, emptyenv())) {
[17:47:16.734]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.734]                           inherits = FALSE)) {
[17:47:16.734]                           master <- get("master", mode = "list", 
[17:47:16.734]                             envir = envir, inherits = FALSE)
[17:47:16.734]                           if (inherits(master, c("SOCKnode", 
[17:47:16.734]                             "SOCK0node"))) {
[17:47:16.734]                             sendCondition <<- function(cond) {
[17:47:16.734]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.734]                                 success = TRUE)
[17:47:16.734]                               parallel_sendData(master, data)
[17:47:16.734]                             }
[17:47:16.734]                             return(sendCondition)
[17:47:16.734]                           }
[17:47:16.734]                         }
[17:47:16.734]                         frame <- frame + 1L
[17:47:16.734]                         envir <- sys.frame(frame)
[17:47:16.734]                       }
[17:47:16.734]                     }
[17:47:16.734]                     sendCondition <<- function(cond) NULL
[17:47:16.734]                   }
[17:47:16.734]                 })
[17:47:16.734]                 withCallingHandlers({
[17:47:16.734]                   {
[17:47:16.734]                     42L
[17:47:16.734]                   }
[17:47:16.734]                 }, immediateCondition = function(cond) {
[17:47:16.734]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.734]                   sendCondition(cond)
[17:47:16.734]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.734]                   {
[17:47:16.734]                     inherits <- base::inherits
[17:47:16.734]                     invokeRestart <- base::invokeRestart
[17:47:16.734]                     is.null <- base::is.null
[17:47:16.734]                     muffled <- FALSE
[17:47:16.734]                     if (inherits(cond, "message")) {
[17:47:16.734]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.734]                       if (muffled) 
[17:47:16.734]                         invokeRestart("muffleMessage")
[17:47:16.734]                     }
[17:47:16.734]                     else if (inherits(cond, "warning")) {
[17:47:16.734]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.734]                       if (muffled) 
[17:47:16.734]                         invokeRestart("muffleWarning")
[17:47:16.734]                     }
[17:47:16.734]                     else if (inherits(cond, "condition")) {
[17:47:16.734]                       if (!is.null(pattern)) {
[17:47:16.734]                         computeRestarts <- base::computeRestarts
[17:47:16.734]                         grepl <- base::grepl
[17:47:16.734]                         restarts <- computeRestarts(cond)
[17:47:16.734]                         for (restart in restarts) {
[17:47:16.734]                           name <- restart$name
[17:47:16.734]                           if (is.null(name)) 
[17:47:16.734]                             next
[17:47:16.734]                           if (!grepl(pattern, name)) 
[17:47:16.734]                             next
[17:47:16.734]                           invokeRestart(restart)
[17:47:16.734]                           muffled <- TRUE
[17:47:16.734]                           break
[17:47:16.734]                         }
[17:47:16.734]                       }
[17:47:16.734]                     }
[17:47:16.734]                     invisible(muffled)
[17:47:16.734]                   }
[17:47:16.734]                   muffleCondition(cond)
[17:47:16.734]                 })
[17:47:16.734]             }))
[17:47:16.734]             future::FutureResult(value = ...future.value$value, 
[17:47:16.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.734]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.734]                     ...future.globalenv.names))
[17:47:16.734]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.734]         }, condition = base::local({
[17:47:16.734]             c <- base::c
[17:47:16.734]             inherits <- base::inherits
[17:47:16.734]             invokeRestart <- base::invokeRestart
[17:47:16.734]             length <- base::length
[17:47:16.734]             list <- base::list
[17:47:16.734]             seq.int <- base::seq.int
[17:47:16.734]             signalCondition <- base::signalCondition
[17:47:16.734]             sys.calls <- base::sys.calls
[17:47:16.734]             `[[` <- base::`[[`
[17:47:16.734]             `+` <- base::`+`
[17:47:16.734]             `<<-` <- base::`<<-`
[17:47:16.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.734]                   3L)]
[17:47:16.734]             }
[17:47:16.734]             function(cond) {
[17:47:16.734]                 is_error <- inherits(cond, "error")
[17:47:16.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.734]                   NULL)
[17:47:16.734]                 if (is_error) {
[17:47:16.734]                   sessionInformation <- function() {
[17:47:16.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.734]                       search = base::search(), system = base::Sys.info())
[17:47:16.734]                   }
[17:47:16.734]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.734]                     cond$call), session = sessionInformation(), 
[17:47:16.734]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.734]                   signalCondition(cond)
[17:47:16.734]                 }
[17:47:16.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.734]                 "immediateCondition"))) {
[17:47:16.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.734]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.734]                   if (TRUE && !signal) {
[17:47:16.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.734]                     {
[17:47:16.734]                       inherits <- base::inherits
[17:47:16.734]                       invokeRestart <- base::invokeRestart
[17:47:16.734]                       is.null <- base::is.null
[17:47:16.734]                       muffled <- FALSE
[17:47:16.734]                       if (inherits(cond, "message")) {
[17:47:16.734]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.734]                         if (muffled) 
[17:47:16.734]                           invokeRestart("muffleMessage")
[17:47:16.734]                       }
[17:47:16.734]                       else if (inherits(cond, "warning")) {
[17:47:16.734]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.734]                         if (muffled) 
[17:47:16.734]                           invokeRestart("muffleWarning")
[17:47:16.734]                       }
[17:47:16.734]                       else if (inherits(cond, "condition")) {
[17:47:16.734]                         if (!is.null(pattern)) {
[17:47:16.734]                           computeRestarts <- base::computeRestarts
[17:47:16.734]                           grepl <- base::grepl
[17:47:16.734]                           restarts <- computeRestarts(cond)
[17:47:16.734]                           for (restart in restarts) {
[17:47:16.734]                             name <- restart$name
[17:47:16.734]                             if (is.null(name)) 
[17:47:16.734]                               next
[17:47:16.734]                             if (!grepl(pattern, name)) 
[17:47:16.734]                               next
[17:47:16.734]                             invokeRestart(restart)
[17:47:16.734]                             muffled <- TRUE
[17:47:16.734]                             break
[17:47:16.734]                           }
[17:47:16.734]                         }
[17:47:16.734]                       }
[17:47:16.734]                       invisible(muffled)
[17:47:16.734]                     }
[17:47:16.734]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.734]                   }
[17:47:16.734]                 }
[17:47:16.734]                 else {
[17:47:16.734]                   if (TRUE) {
[17:47:16.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.734]                     {
[17:47:16.734]                       inherits <- base::inherits
[17:47:16.734]                       invokeRestart <- base::invokeRestart
[17:47:16.734]                       is.null <- base::is.null
[17:47:16.734]                       muffled <- FALSE
[17:47:16.734]                       if (inherits(cond, "message")) {
[17:47:16.734]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.734]                         if (muffled) 
[17:47:16.734]                           invokeRestart("muffleMessage")
[17:47:16.734]                       }
[17:47:16.734]                       else if (inherits(cond, "warning")) {
[17:47:16.734]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.734]                         if (muffled) 
[17:47:16.734]                           invokeRestart("muffleWarning")
[17:47:16.734]                       }
[17:47:16.734]                       else if (inherits(cond, "condition")) {
[17:47:16.734]                         if (!is.null(pattern)) {
[17:47:16.734]                           computeRestarts <- base::computeRestarts
[17:47:16.734]                           grepl <- base::grepl
[17:47:16.734]                           restarts <- computeRestarts(cond)
[17:47:16.734]                           for (restart in restarts) {
[17:47:16.734]                             name <- restart$name
[17:47:16.734]                             if (is.null(name)) 
[17:47:16.734]                               next
[17:47:16.734]                             if (!grepl(pattern, name)) 
[17:47:16.734]                               next
[17:47:16.734]                             invokeRestart(restart)
[17:47:16.734]                             muffled <- TRUE
[17:47:16.734]                             break
[17:47:16.734]                           }
[17:47:16.734]                         }
[17:47:16.734]                       }
[17:47:16.734]                       invisible(muffled)
[17:47:16.734]                     }
[17:47:16.734]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.734]                   }
[17:47:16.734]                 }
[17:47:16.734]             }
[17:47:16.734]         }))
[17:47:16.734]     }, error = function(ex) {
[17:47:16.734]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.734]                 ...future.rng), started = ...future.startTime, 
[17:47:16.734]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.734]             version = "1.8"), class = "FutureResult")
[17:47:16.734]     }, finally = {
[17:47:16.734]         if (!identical(...future.workdir, getwd())) 
[17:47:16.734]             setwd(...future.workdir)
[17:47:16.734]         {
[17:47:16.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.734]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.734]             }
[17:47:16.734]             base::options(...future.oldOptions)
[17:47:16.734]             if (.Platform$OS.type == "windows") {
[17:47:16.734]                 old_names <- names(...future.oldEnvVars)
[17:47:16.734]                 envs <- base::Sys.getenv()
[17:47:16.734]                 names <- names(envs)
[17:47:16.734]                 common <- intersect(names, old_names)
[17:47:16.734]                 added <- setdiff(names, old_names)
[17:47:16.734]                 removed <- setdiff(old_names, names)
[17:47:16.734]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.734]                   envs[common]]
[17:47:16.734]                 NAMES <- toupper(changed)
[17:47:16.734]                 args <- list()
[17:47:16.734]                 for (kk in seq_along(NAMES)) {
[17:47:16.734]                   name <- changed[[kk]]
[17:47:16.734]                   NAME <- NAMES[[kk]]
[17:47:16.734]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.734]                     next
[17:47:16.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.734]                 }
[17:47:16.734]                 NAMES <- toupper(added)
[17:47:16.734]                 for (kk in seq_along(NAMES)) {
[17:47:16.734]                   name <- added[[kk]]
[17:47:16.734]                   NAME <- NAMES[[kk]]
[17:47:16.734]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.734]                     next
[17:47:16.734]                   args[[name]] <- ""
[17:47:16.734]                 }
[17:47:16.734]                 NAMES <- toupper(removed)
[17:47:16.734]                 for (kk in seq_along(NAMES)) {
[17:47:16.734]                   name <- removed[[kk]]
[17:47:16.734]                   NAME <- NAMES[[kk]]
[17:47:16.734]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.734]                     next
[17:47:16.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.734]                 }
[17:47:16.734]                 if (length(args) > 0) 
[17:47:16.734]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.734]             }
[17:47:16.734]             else {
[17:47:16.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.734]             }
[17:47:16.734]             {
[17:47:16.734]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.734]                   0L) {
[17:47:16.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.734]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.734]                   base::options(opts)
[17:47:16.734]                 }
[17:47:16.734]                 {
[17:47:16.734]                   {
[17:47:16.734]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.734]                     NULL
[17:47:16.734]                   }
[17:47:16.734]                   options(future.plan = NULL)
[17:47:16.734]                   if (is.na(NA_character_)) 
[17:47:16.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.734]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.734]                     .init = FALSE)
[17:47:16.734]                 }
[17:47:16.734]             }
[17:47:16.734]         }
[17:47:16.734]     })
[17:47:16.734]     if (TRUE) {
[17:47:16.734]         base::sink(type = "output", split = FALSE)
[17:47:16.734]         if (TRUE) {
[17:47:16.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.734]         }
[17:47:16.734]         else {
[17:47:16.734]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.734]         }
[17:47:16.734]         base::close(...future.stdout)
[17:47:16.734]         ...future.stdout <- NULL
[17:47:16.734]     }
[17:47:16.734]     ...future.result$conditions <- ...future.conditions
[17:47:16.734]     ...future.result$finished <- base::Sys.time()
[17:47:16.734]     ...future.result
[17:47:16.734] }
[17:47:16.737] MultisessionFuture started
[17:47:16.737] - Launch lazy future ... done
[17:47:16.737] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[17:47:16.737] getGlobalsAndPackages() ...
[17:47:16.738] Searching for globals...
[17:47:16.738] - globals found: [3] ‘{’, ‘value’, ‘f1’
[17:47:16.738] Searching for globals ... DONE
[17:47:16.739] Resolving globals: FALSE
[17:47:16.740] The total size of the 1 globals is 1.56 MiB (1636072 bytes)
[17:47:16.741] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:47:16.741] - globals: [1] ‘f1’
[17:47:16.741] - packages: [1] ‘future’
[17:47:16.741] getGlobalsAndPackages() ... DONE
[17:47:16.741] run() for ‘Future’ ...
[17:47:16.742] - state: ‘created’
[17:47:16.742] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:16.752] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:16.752] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:16.752]   - Field: ‘node’
[17:47:16.752]   - Field: ‘label’
[17:47:16.752]   - Field: ‘local’
[17:47:16.753]   - Field: ‘owner’
[17:47:16.753]   - Field: ‘envir’
[17:47:16.753]   - Field: ‘workers’
[17:47:16.753]   - Field: ‘packages’
[17:47:16.753]   - Field: ‘gc’
[17:47:16.753]   - Field: ‘conditions’
[17:47:16.753]   - Field: ‘persistent’
[17:47:16.753]   - Field: ‘expr’
[17:47:16.753]   - Field: ‘uuid’
[17:47:16.753]   - Field: ‘seed’
[17:47:16.753]   - Field: ‘version’
[17:47:16.754]   - Field: ‘result’
[17:47:16.754]   - Field: ‘asynchronous’
[17:47:16.754]   - Field: ‘calls’
[17:47:16.754]   - Field: ‘globals’
[17:47:16.754]   - Field: ‘stdout’
[17:47:16.754]   - Field: ‘earlySignal’
[17:47:16.754]   - Field: ‘lazy’
[17:47:16.754]   - Field: ‘state’
[17:47:16.754] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:16.754] - Launch lazy future ...
[17:47:16.755] Packages needed by the future expression (n = 1): ‘future’
[17:47:16.755] Packages needed by future strategies (n = 0): <none>
[17:47:16.755] {
[17:47:16.755]     {
[17:47:16.755]         {
[17:47:16.755]             ...future.startTime <- base::Sys.time()
[17:47:16.755]             {
[17:47:16.755]                 {
[17:47:16.755]                   {
[17:47:16.755]                     {
[17:47:16.755]                       {
[17:47:16.755]                         base::local({
[17:47:16.755]                           has_future <- base::requireNamespace("future", 
[17:47:16.755]                             quietly = TRUE)
[17:47:16.755]                           if (has_future) {
[17:47:16.755]                             ns <- base::getNamespace("future")
[17:47:16.755]                             version <- ns[[".package"]][["version"]]
[17:47:16.755]                             if (is.null(version)) 
[17:47:16.755]                               version <- utils::packageVersion("future")
[17:47:16.755]                           }
[17:47:16.755]                           else {
[17:47:16.755]                             version <- NULL
[17:47:16.755]                           }
[17:47:16.755]                           if (!has_future || version < "1.8.0") {
[17:47:16.755]                             info <- base::c(r_version = base::gsub("R version ", 
[17:47:16.755]                               "", base::R.version$version.string), 
[17:47:16.755]                               platform = base::sprintf("%s (%s-bit)", 
[17:47:16.755]                                 base::R.version$platform, 8 * 
[17:47:16.755]                                   base::.Machine$sizeof.pointer), 
[17:47:16.755]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:16.755]                                 "release", "version")], collapse = " "), 
[17:47:16.755]                               hostname = base::Sys.info()[["nodename"]])
[17:47:16.755]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:47:16.755]                               info)
[17:47:16.755]                             info <- base::paste(info, collapse = "; ")
[17:47:16.755]                             if (!has_future) {
[17:47:16.755]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:16.755]                                 info)
[17:47:16.755]                             }
[17:47:16.755]                             else {
[17:47:16.755]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:16.755]                                 info, version)
[17:47:16.755]                             }
[17:47:16.755]                             base::stop(msg)
[17:47:16.755]                           }
[17:47:16.755]                         })
[17:47:16.755]                       }
[17:47:16.755]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:16.755]                       base::options(mc.cores = 1L)
[17:47:16.755]                     }
[17:47:16.755]                     base::local({
[17:47:16.755]                       for (pkg in "future") {
[17:47:16.755]                         base::loadNamespace(pkg)
[17:47:16.755]                         base::library(pkg, character.only = TRUE)
[17:47:16.755]                       }
[17:47:16.755]                     })
[17:47:16.755]                   }
[17:47:16.755]                   ...future.strategy.old <- future::plan("list")
[17:47:16.755]                   options(future.plan = NULL)
[17:47:16.755]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.755]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:16.755]                 }
[17:47:16.755]                 ...future.workdir <- getwd()
[17:47:16.755]             }
[17:47:16.755]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:16.755]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:16.755]         }
[17:47:16.755]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:16.755]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:16.755]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:16.755]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:16.755]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:16.755]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:16.755]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:16.755]             base::names(...future.oldOptions))
[17:47:16.755]     }
[17:47:16.755]     if (FALSE) {
[17:47:16.755]     }
[17:47:16.755]     else {
[17:47:16.755]         if (TRUE) {
[17:47:16.755]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:16.755]                 open = "w")
[17:47:16.755]         }
[17:47:16.755]         else {
[17:47:16.755]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:16.755]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:16.755]         }
[17:47:16.755]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:16.755]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:16.755]             base::sink(type = "output", split = FALSE)
[17:47:16.755]             base::close(...future.stdout)
[17:47:16.755]         }, add = TRUE)
[17:47:16.755]     }
[17:47:16.755]     ...future.frame <- base::sys.nframe()
[17:47:16.755]     ...future.conditions <- base::list()
[17:47:16.755]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:16.755]     if (FALSE) {
[17:47:16.755]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:16.755]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:16.755]     }
[17:47:16.755]     ...future.result <- base::tryCatch({
[17:47:16.755]         base::withCallingHandlers({
[17:47:16.755]             ...future.value <- base::withVisible(base::local({
[17:47:16.755]                 ...future.makeSendCondition <- base::local({
[17:47:16.755]                   sendCondition <- NULL
[17:47:16.755]                   function(frame = 1L) {
[17:47:16.755]                     if (is.function(sendCondition)) 
[17:47:16.755]                       return(sendCondition)
[17:47:16.755]                     ns <- getNamespace("parallel")
[17:47:16.755]                     if (exists("sendData", mode = "function", 
[17:47:16.755]                       envir = ns)) {
[17:47:16.755]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:16.755]                         envir = ns)
[17:47:16.755]                       envir <- sys.frame(frame)
[17:47:16.755]                       master <- NULL
[17:47:16.755]                       while (!identical(envir, .GlobalEnv) && 
[17:47:16.755]                         !identical(envir, emptyenv())) {
[17:47:16.755]                         if (exists("master", mode = "list", envir = envir, 
[17:47:16.755]                           inherits = FALSE)) {
[17:47:16.755]                           master <- get("master", mode = "list", 
[17:47:16.755]                             envir = envir, inherits = FALSE)
[17:47:16.755]                           if (inherits(master, c("SOCKnode", 
[17:47:16.755]                             "SOCK0node"))) {
[17:47:16.755]                             sendCondition <<- function(cond) {
[17:47:16.755]                               data <- list(type = "VALUE", value = cond, 
[17:47:16.755]                                 success = TRUE)
[17:47:16.755]                               parallel_sendData(master, data)
[17:47:16.755]                             }
[17:47:16.755]                             return(sendCondition)
[17:47:16.755]                           }
[17:47:16.755]                         }
[17:47:16.755]                         frame <- frame + 1L
[17:47:16.755]                         envir <- sys.frame(frame)
[17:47:16.755]                       }
[17:47:16.755]                     }
[17:47:16.755]                     sendCondition <<- function(cond) NULL
[17:47:16.755]                   }
[17:47:16.755]                 })
[17:47:16.755]                 withCallingHandlers({
[17:47:16.755]                   {
[17:47:16.755]                     value(f1)
[17:47:16.755]                   }
[17:47:16.755]                 }, immediateCondition = function(cond) {
[17:47:16.755]                   sendCondition <- ...future.makeSendCondition()
[17:47:16.755]                   sendCondition(cond)
[17:47:16.755]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.755]                   {
[17:47:16.755]                     inherits <- base::inherits
[17:47:16.755]                     invokeRestart <- base::invokeRestart
[17:47:16.755]                     is.null <- base::is.null
[17:47:16.755]                     muffled <- FALSE
[17:47:16.755]                     if (inherits(cond, "message")) {
[17:47:16.755]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:16.755]                       if (muffled) 
[17:47:16.755]                         invokeRestart("muffleMessage")
[17:47:16.755]                     }
[17:47:16.755]                     else if (inherits(cond, "warning")) {
[17:47:16.755]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:16.755]                       if (muffled) 
[17:47:16.755]                         invokeRestart("muffleWarning")
[17:47:16.755]                     }
[17:47:16.755]                     else if (inherits(cond, "condition")) {
[17:47:16.755]                       if (!is.null(pattern)) {
[17:47:16.755]                         computeRestarts <- base::computeRestarts
[17:47:16.755]                         grepl <- base::grepl
[17:47:16.755]                         restarts <- computeRestarts(cond)
[17:47:16.755]                         for (restart in restarts) {
[17:47:16.755]                           name <- restart$name
[17:47:16.755]                           if (is.null(name)) 
[17:47:16.755]                             next
[17:47:16.755]                           if (!grepl(pattern, name)) 
[17:47:16.755]                             next
[17:47:16.755]                           invokeRestart(restart)
[17:47:16.755]                           muffled <- TRUE
[17:47:16.755]                           break
[17:47:16.755]                         }
[17:47:16.755]                       }
[17:47:16.755]                     }
[17:47:16.755]                     invisible(muffled)
[17:47:16.755]                   }
[17:47:16.755]                   muffleCondition(cond)
[17:47:16.755]                 })
[17:47:16.755]             }))
[17:47:16.755]             future::FutureResult(value = ...future.value$value, 
[17:47:16.755]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.755]                   ...future.rng), globalenv = if (FALSE) 
[17:47:16.755]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:16.755]                     ...future.globalenv.names))
[17:47:16.755]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:16.755]         }, condition = base::local({
[17:47:16.755]             c <- base::c
[17:47:16.755]             inherits <- base::inherits
[17:47:16.755]             invokeRestart <- base::invokeRestart
[17:47:16.755]             length <- base::length
[17:47:16.755]             list <- base::list
[17:47:16.755]             seq.int <- base::seq.int
[17:47:16.755]             signalCondition <- base::signalCondition
[17:47:16.755]             sys.calls <- base::sys.calls
[17:47:16.755]             `[[` <- base::`[[`
[17:47:16.755]             `+` <- base::`+`
[17:47:16.755]             `<<-` <- base::`<<-`
[17:47:16.755]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:16.755]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:16.755]                   3L)]
[17:47:16.755]             }
[17:47:16.755]             function(cond) {
[17:47:16.755]                 is_error <- inherits(cond, "error")
[17:47:16.755]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:16.755]                   NULL)
[17:47:16.755]                 if (is_error) {
[17:47:16.755]                   sessionInformation <- function() {
[17:47:16.755]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:16.755]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:16.755]                       search = base::search(), system = base::Sys.info())
[17:47:16.755]                   }
[17:47:16.755]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.755]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:16.755]                     cond$call), session = sessionInformation(), 
[17:47:16.755]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:16.755]                   signalCondition(cond)
[17:47:16.755]                 }
[17:47:16.755]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:16.755]                 "immediateCondition"))) {
[17:47:16.755]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:16.755]                   ...future.conditions[[length(...future.conditions) + 
[17:47:16.755]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:16.755]                   if (TRUE && !signal) {
[17:47:16.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.755]                     {
[17:47:16.755]                       inherits <- base::inherits
[17:47:16.755]                       invokeRestart <- base::invokeRestart
[17:47:16.755]                       is.null <- base::is.null
[17:47:16.755]                       muffled <- FALSE
[17:47:16.755]                       if (inherits(cond, "message")) {
[17:47:16.755]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.755]                         if (muffled) 
[17:47:16.755]                           invokeRestart("muffleMessage")
[17:47:16.755]                       }
[17:47:16.755]                       else if (inherits(cond, "warning")) {
[17:47:16.755]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.755]                         if (muffled) 
[17:47:16.755]                           invokeRestart("muffleWarning")
[17:47:16.755]                       }
[17:47:16.755]                       else if (inherits(cond, "condition")) {
[17:47:16.755]                         if (!is.null(pattern)) {
[17:47:16.755]                           computeRestarts <- base::computeRestarts
[17:47:16.755]                           grepl <- base::grepl
[17:47:16.755]                           restarts <- computeRestarts(cond)
[17:47:16.755]                           for (restart in restarts) {
[17:47:16.755]                             name <- restart$name
[17:47:16.755]                             if (is.null(name)) 
[17:47:16.755]                               next
[17:47:16.755]                             if (!grepl(pattern, name)) 
[17:47:16.755]                               next
[17:47:16.755]                             invokeRestart(restart)
[17:47:16.755]                             muffled <- TRUE
[17:47:16.755]                             break
[17:47:16.755]                           }
[17:47:16.755]                         }
[17:47:16.755]                       }
[17:47:16.755]                       invisible(muffled)
[17:47:16.755]                     }
[17:47:16.755]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.755]                   }
[17:47:16.755]                 }
[17:47:16.755]                 else {
[17:47:16.755]                   if (TRUE) {
[17:47:16.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:16.755]                     {
[17:47:16.755]                       inherits <- base::inherits
[17:47:16.755]                       invokeRestart <- base::invokeRestart
[17:47:16.755]                       is.null <- base::is.null
[17:47:16.755]                       muffled <- FALSE
[17:47:16.755]                       if (inherits(cond, "message")) {
[17:47:16.755]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:16.755]                         if (muffled) 
[17:47:16.755]                           invokeRestart("muffleMessage")
[17:47:16.755]                       }
[17:47:16.755]                       else if (inherits(cond, "warning")) {
[17:47:16.755]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:16.755]                         if (muffled) 
[17:47:16.755]                           invokeRestart("muffleWarning")
[17:47:16.755]                       }
[17:47:16.755]                       else if (inherits(cond, "condition")) {
[17:47:16.755]                         if (!is.null(pattern)) {
[17:47:16.755]                           computeRestarts <- base::computeRestarts
[17:47:16.755]                           grepl <- base::grepl
[17:47:16.755]                           restarts <- computeRestarts(cond)
[17:47:16.755]                           for (restart in restarts) {
[17:47:16.755]                             name <- restart$name
[17:47:16.755]                             if (is.null(name)) 
[17:47:16.755]                               next
[17:47:16.755]                             if (!grepl(pattern, name)) 
[17:47:16.755]                               next
[17:47:16.755]                             invokeRestart(restart)
[17:47:16.755]                             muffled <- TRUE
[17:47:16.755]                             break
[17:47:16.755]                           }
[17:47:16.755]                         }
[17:47:16.755]                       }
[17:47:16.755]                       invisible(muffled)
[17:47:16.755]                     }
[17:47:16.755]                     muffleCondition(cond, pattern = "^muffle")
[17:47:16.755]                   }
[17:47:16.755]                 }
[17:47:16.755]             }
[17:47:16.755]         }))
[17:47:16.755]     }, error = function(ex) {
[17:47:16.755]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:16.755]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:16.755]                 ...future.rng), started = ...future.startTime, 
[17:47:16.755]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:16.755]             version = "1.8"), class = "FutureResult")
[17:47:16.755]     }, finally = {
[17:47:16.755]         if (!identical(...future.workdir, getwd())) 
[17:47:16.755]             setwd(...future.workdir)
[17:47:16.755]         {
[17:47:16.755]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:16.755]                 ...future.oldOptions$nwarnings <- NULL
[17:47:16.755]             }
[17:47:16.755]             base::options(...future.oldOptions)
[17:47:16.755]             if (.Platform$OS.type == "windows") {
[17:47:16.755]                 old_names <- names(...future.oldEnvVars)
[17:47:16.755]                 envs <- base::Sys.getenv()
[17:47:16.755]                 names <- names(envs)
[17:47:16.755]                 common <- intersect(names, old_names)
[17:47:16.755]                 added <- setdiff(names, old_names)
[17:47:16.755]                 removed <- setdiff(old_names, names)
[17:47:16.755]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:16.755]                   envs[common]]
[17:47:16.755]                 NAMES <- toupper(changed)
[17:47:16.755]                 args <- list()
[17:47:16.755]                 for (kk in seq_along(NAMES)) {
[17:47:16.755]                   name <- changed[[kk]]
[17:47:16.755]                   NAME <- NAMES[[kk]]
[17:47:16.755]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.755]                     next
[17:47:16.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.755]                 }
[17:47:16.755]                 NAMES <- toupper(added)
[17:47:16.755]                 for (kk in seq_along(NAMES)) {
[17:47:16.755]                   name <- added[[kk]]
[17:47:16.755]                   NAME <- NAMES[[kk]]
[17:47:16.755]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.755]                     next
[17:47:16.755]                   args[[name]] <- ""
[17:47:16.755]                 }
[17:47:16.755]                 NAMES <- toupper(removed)
[17:47:16.755]                 for (kk in seq_along(NAMES)) {
[17:47:16.755]                   name <- removed[[kk]]
[17:47:16.755]                   NAME <- NAMES[[kk]]
[17:47:16.755]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:16.755]                     next
[17:47:16.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:16.755]                 }
[17:47:16.755]                 if (length(args) > 0) 
[17:47:16.755]                   base::do.call(base::Sys.setenv, args = args)
[17:47:16.755]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:16.755]             }
[17:47:16.755]             else {
[17:47:16.755]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:16.755]             }
[17:47:16.755]             {
[17:47:16.755]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:16.755]                   0L) {
[17:47:16.755]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:16.755]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:16.755]                   base::options(opts)
[17:47:16.755]                 }
[17:47:16.755]                 {
[17:47:16.755]                   {
[17:47:16.755]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:16.755]                     NULL
[17:47:16.755]                   }
[17:47:16.755]                   options(future.plan = NULL)
[17:47:16.755]                   if (is.na(NA_character_)) 
[17:47:16.755]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:16.755]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:16.755]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:16.755]                     .init = FALSE)
[17:47:16.755]                 }
[17:47:16.755]             }
[17:47:16.755]         }
[17:47:16.755]     })
[17:47:16.755]     if (TRUE) {
[17:47:16.755]         base::sink(type = "output", split = FALSE)
[17:47:16.755]         if (TRUE) {
[17:47:16.755]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:16.755]         }
[17:47:16.755]         else {
[17:47:16.755]             ...future.result["stdout"] <- base::list(NULL)
[17:47:16.755]         }
[17:47:16.755]         base::close(...future.stdout)
[17:47:16.755]         ...future.stdout <- NULL
[17:47:16.755]     }
[17:47:16.755]     ...future.result$conditions <- ...future.conditions
[17:47:16.755]     ...future.result$finished <- base::Sys.time()
[17:47:16.755]     ...future.result
[17:47:16.755] }
[17:47:16.807] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[17:47:16.809] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[17:47:16.820] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[17:47:16.820] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[17:47:16.820] MultisessionFuture started
[17:47:16.820] - Launch lazy future ... done
[17:47:16.820] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 796262f2-ce5b-abb5-edee-15f9c7062d30
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[17:47:16.837] result() for ClusterFuture ...
[17:47:16.837] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.837] - Validating connection of MultisessionFuture
[17:47:16.915] - received message: FutureResult
[17:47:16.916] - Received FutureResult
[17:47:16.916] - Erased future from FutureRegistry
[17:47:16.916] result() for ClusterFuture ...
[17:47:16.916] - result already collected: FutureResult
[17:47:16.916] result() for ClusterFuture ... done
[17:47:16.916] signalConditions() ...
[17:47:16.916]  - include = ‘immediateCondition’
[17:47:16.916]  - exclude = 
[17:47:16.916]  - resignal = FALSE
[17:47:16.916]  - Number of conditions: 1
[17:47:16.917] signalConditions() ... done
[17:47:16.917] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.917] result() for ClusterFuture ... done
[17:47:16.917] result() for ClusterFuture ...
[17:47:16.917] - result already collected: FutureResult
[17:47:16.917] result() for ClusterFuture ... done
[17:47:16.917] signalConditions() ...
[17:47:16.917]  - include = ‘immediateCondition’
[17:47:16.917]  - exclude = 
[17:47:16.917]  - resignal = FALSE
[17:47:16.917]  - Number of conditions: 1
[17:47:16.918] signalConditions() ... done
[17:47:16.918] Future state: ‘finished’
[17:47:16.918] result() for ClusterFuture ...
[17:47:16.918] - result already collected: FutureResult
[17:47:16.918] result() for ClusterFuture ... done
[17:47:16.918] signalConditions() ...
[17:47:16.918]  - include = ‘condition’
[17:47:16.918]  - exclude = ‘immediateCondition’
[17:47:16.918]  - resignal = TRUE
[17:47:16.918]  - Number of conditions: 1
[17:47:16.918]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[17:47:16.919] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (796262f2-ce5b-abb5-edee-15f9c7062d30; pid 45193 on 2570bfddfbfd) that created it, not by any other R processes (600fcd38-af88-3f0e-6e28-f9702b1470a7; pid 45246 on 2570bfddfbfd): {; 42L; }>


Future UUID: 0b5e6009-f776-64d2-1a3d-3b4c2f9b7fea


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 796262f2-ce5b-abb5-edee-15f9c7062d30
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[17:47:16.920] result() for ClusterFuture ...
[17:47:16.920] receiveMessageFromWorker() for ClusterFuture ...
[17:47:16.920] - Validating connection of MultisessionFuture
[17:47:16.920] - received message: FutureResult
[17:47:16.920] - Received FutureResult
[17:47:16.920] - Erased future from FutureRegistry
[17:47:16.920] result() for ClusterFuture ...
[17:47:16.920] - result already collected: FutureResult
[17:47:16.920] result() for ClusterFuture ... done
[17:47:16.921] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:16.921] result() for ClusterFuture ... done
[17:47:16.921] result() for ClusterFuture ...
[17:47:16.921] - result already collected: FutureResult
[17:47:16.921] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[17:47:16.922] plan(): Setting new future strategy stack:
[17:47:16.922] List of future strategies:
[17:47:16.922] 1. FutureStrategy:
[17:47:16.922]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:16.922]    - tweaked: FALSE
[17:47:16.922]    - call: future::plan(oplan)
[17:47:16.923] plan(): nbrOfWorkers() = 1
> 
