
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:05:09.094] plan(): Setting new future strategy stack:
[18:05:09.095] List of future strategies:
[18:05:09.095] 1. sequential:
[18:05:09.095]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:09.095]    - tweaked: FALSE
[18:05:09.095]    - call: future::plan("sequential")
[18:05:09.118] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[18:05:09.142] plan(): Setting new future strategy stack:
[18:05:09.143] List of future strategies:
[18:05:09.143] 1. multisession:
[18:05:09.143]    - args: function (..., workers = 2L, envir = parent.frame())
[18:05:09.143]    - tweaked: TRUE
[18:05:09.143]    - call: plan(multisession, workers = 2L)
[18:05:09.166] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:05:09.166] multisession:
[18:05:09.166] - args: function (..., workers = 2L, envir = parent.frame())
[18:05:09.166] - tweaked: TRUE
[18:05:09.166] - call: plan(multisession, workers = 2L)
[18:05:09.169] getGlobalsAndPackages() ...
[18:05:09.169] Not searching for globals
[18:05:09.169] - globals: [0] <none>
[18:05:09.170] getGlobalsAndPackages() ... DONE
[18:05:09.171] [local output] makeClusterPSOCK() ...
[18:05:09.220] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:05:09.222] [local output] Base port: 11994
[18:05:09.222] [local output] Getting setup options for 2 cluster nodes ...
[18:05:09.222] [local output]  - Node 1 of 2 ...
[18:05:09.223] [local output] localMachine=TRUE => revtunnel=FALSE

[18:05:09.225] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpd6mHsM/worker.rank=1.parallelly.parent=325678.4f82e3b06cef2.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpd6mHsM/worker.rank=1.parallelly.parent=325678.4f82e3b06cef2.pid")'’
[18:05:09.484] - Possible to infer worker's PID: TRUE
[18:05:09.485] [local output] Rscript port: 11994

[18:05:09.485] [local output]  - Node 2 of 2 ...
[18:05:09.486] [local output] localMachine=TRUE => revtunnel=FALSE

[18:05:09.487] [local output] Rscript port: 11994

[18:05:09.488] [local output] Getting setup options for 2 cluster nodes ... done
[18:05:09.488] [local output]  - Parallel setup requested for some PSOCK nodes
[18:05:09.489] [local output] Setting up PSOCK nodes in parallel
[18:05:09.489] List of 36
[18:05:09.489]  $ worker          : chr "localhost"
[18:05:09.489]   ..- attr(*, "localhost")= logi TRUE
[18:05:09.489]  $ master          : chr "localhost"
[18:05:09.489]  $ port            : int 11994
[18:05:09.489]  $ connectTimeout  : num 120
[18:05:09.489]  $ timeout         : num 2592000
[18:05:09.489]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:05:09.489]  $ homogeneous     : logi TRUE
[18:05:09.489]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:05:09.489]  $ rscript_envs    : NULL
[18:05:09.489]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:05:09.489]  $ rscript_startup : NULL
[18:05:09.489]  $ rscript_sh      : chr "sh"
[18:05:09.489]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:05:09.489]  $ methods         : logi TRUE
[18:05:09.489]  $ socketOptions   : chr "no-delay"
[18:05:09.489]  $ useXDR          : logi FALSE
[18:05:09.489]  $ outfile         : chr "/dev/null"
[18:05:09.489]  $ renice          : int NA
[18:05:09.489]  $ rshcmd          : NULL
[18:05:09.489]  $ user            : chr(0) 
[18:05:09.489]  $ revtunnel       : logi FALSE
[18:05:09.489]  $ rshlogfile      : NULL
[18:05:09.489]  $ rshopts         : chr(0) 
[18:05:09.489]  $ rank            : int 1
[18:05:09.489]  $ manual          : logi FALSE
[18:05:09.489]  $ dryrun          : logi FALSE
[18:05:09.489]  $ quiet           : logi FALSE
[18:05:09.489]  $ setup_strategy  : chr "parallel"
[18:05:09.489]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:05:09.489]  $ pidfile         : chr "/tmp/Rtmpd6mHsM/worker.rank=1.parallelly.parent=325678.4f82e3b06cef2.pid"
[18:05:09.489]  $ rshcmd_label    : NULL
[18:05:09.489]  $ rsh_call        : NULL
[18:05:09.489]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:05:09.489]  $ localMachine    : logi TRUE
[18:05:09.489]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:05:09.489]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:05:09.489]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:05:09.489]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:05:09.489]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:05:09.489]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:05:09.489]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:05:09.489]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:05:09.489]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:05:09.489]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:05:09.489]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:05:09.489]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:05:09.489]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:05:09.489]  $ arguments       :List of 28
[18:05:09.489]   ..$ worker          : chr "localhost"
[18:05:09.489]   ..$ master          : NULL
[18:05:09.489]   ..$ port            : int 11994
[18:05:09.489]   ..$ connectTimeout  : num 120
[18:05:09.489]   ..$ timeout         : num 2592000
[18:05:09.489]   ..$ rscript         : NULL
[18:05:09.489]   ..$ homogeneous     : NULL
[18:05:09.489]   ..$ rscript_args    : NULL
[18:05:09.489]   ..$ rscript_envs    : NULL
[18:05:09.489]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:05:09.489]   ..$ rscript_startup : NULL
[18:05:09.489]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:05:09.489]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:05:09.489]   ..$ methods         : logi TRUE
[18:05:09.489]   ..$ socketOptions   : chr "no-delay"
[18:05:09.489]   ..$ useXDR          : logi FALSE
[18:05:09.489]   ..$ outfile         : chr "/dev/null"
[18:05:09.489]   ..$ renice          : int NA
[18:05:09.489]   ..$ rshcmd          : NULL
[18:05:09.489]   ..$ user            : NULL
[18:05:09.489]   ..$ revtunnel       : logi NA
[18:05:09.489]   ..$ rshlogfile      : NULL
[18:05:09.489]   ..$ rshopts         : NULL
[18:05:09.489]   ..$ rank            : int 1
[18:05:09.489]   ..$ manual          : logi FALSE
[18:05:09.489]   ..$ dryrun          : logi FALSE
[18:05:09.489]   ..$ quiet           : logi FALSE
[18:05:09.489]   ..$ setup_strategy  : chr "parallel"
[18:05:09.489]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:05:09.529] [local output] System call to launch all workers:
[18:05:09.529] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpd6mHsM/worker.rank=1.parallelly.parent=325678.4f82e3b06cef2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11994 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:05:09.529] [local output] Starting PSOCK main server
[18:05:09.537] [local output] Workers launched
[18:05:09.537] [local output] Waiting for workers to connect back
[18:05:09.538]  - [local output] 0 workers out of 2 ready
[18:05:09.889]  - [local output] 0 workers out of 2 ready
[18:05:09.891]  - [local output] 1 workers out of 2 ready
[18:05:09.903]  - [local output] 1 workers out of 2 ready
[18:05:09.903]  - [local output] 2 workers out of 2 ready
[18:05:09.904] [local output] Launching of workers completed
[18:05:09.904] [local output] Collecting session information from workers
[18:05:09.905] [local output]  - Worker #1 of 2
[18:05:09.907] [local output]  - Worker #2 of 2
[18:05:09.907] [local output] makeClusterPSOCK() ... done
[18:05:09.926] Packages needed by the future expression (n = 0): <none>
[18:05:09.926] Packages needed by future strategies (n = 0): <none>
[18:05:09.928] {
[18:05:09.928]     {
[18:05:09.928]         {
[18:05:09.928]             ...future.startTime <- base::Sys.time()
[18:05:09.928]             {
[18:05:09.928]                 {
[18:05:09.928]                   {
[18:05:09.928]                     {
[18:05:09.928]                       base::local({
[18:05:09.928]                         has_future <- base::requireNamespace("future", 
[18:05:09.928]                           quietly = TRUE)
[18:05:09.928]                         if (has_future) {
[18:05:09.928]                           ns <- base::getNamespace("future")
[18:05:09.928]                           version <- ns[[".package"]][["version"]]
[18:05:09.928]                           if (is.null(version)) 
[18:05:09.928]                             version <- utils::packageVersion("future")
[18:05:09.928]                         }
[18:05:09.928]                         else {
[18:05:09.928]                           version <- NULL
[18:05:09.928]                         }
[18:05:09.928]                         if (!has_future || version < "1.8.0") {
[18:05:09.928]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:09.928]                             "", base::R.version$version.string), 
[18:05:09.928]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:09.928]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:09.928]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:09.928]                               "release", "version")], collapse = " "), 
[18:05:09.928]                             hostname = base::Sys.info()[["nodename"]])
[18:05:09.928]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:09.928]                             info)
[18:05:09.928]                           info <- base::paste(info, collapse = "; ")
[18:05:09.928]                           if (!has_future) {
[18:05:09.928]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:09.928]                               info)
[18:05:09.928]                           }
[18:05:09.928]                           else {
[18:05:09.928]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:09.928]                               info, version)
[18:05:09.928]                           }
[18:05:09.928]                           base::stop(msg)
[18:05:09.928]                         }
[18:05:09.928]                       })
[18:05:09.928]                     }
[18:05:09.928]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:09.928]                     base::options(mc.cores = 1L)
[18:05:09.928]                   }
[18:05:09.928]                   ...future.strategy.old <- future::plan("list")
[18:05:09.928]                   options(future.plan = NULL)
[18:05:09.928]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:09.928]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:09.928]                 }
[18:05:09.928]                 ...future.workdir <- getwd()
[18:05:09.928]             }
[18:05:09.928]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:09.928]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:09.928]         }
[18:05:09.928]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:09.928]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:09.928]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:09.928]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:09.928]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:09.928]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:09.928]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:09.928]             base::names(...future.oldOptions))
[18:05:09.928]     }
[18:05:09.928]     if (FALSE) {
[18:05:09.928]     }
[18:05:09.928]     else {
[18:05:09.928]         if (TRUE) {
[18:05:09.928]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:09.928]                 open = "w")
[18:05:09.928]         }
[18:05:09.928]         else {
[18:05:09.928]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:09.928]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:09.928]         }
[18:05:09.928]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:09.928]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:09.928]             base::sink(type = "output", split = FALSE)
[18:05:09.928]             base::close(...future.stdout)
[18:05:09.928]         }, add = TRUE)
[18:05:09.928]     }
[18:05:09.928]     ...future.frame <- base::sys.nframe()
[18:05:09.928]     ...future.conditions <- base::list()
[18:05:09.928]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:09.928]     if (FALSE) {
[18:05:09.928]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:09.928]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:09.928]     }
[18:05:09.928]     ...future.result <- base::tryCatch({
[18:05:09.928]         base::withCallingHandlers({
[18:05:09.928]             ...future.value <- base::withVisible(base::local({
[18:05:09.928]                 ...future.makeSendCondition <- base::local({
[18:05:09.928]                   sendCondition <- NULL
[18:05:09.928]                   function(frame = 1L) {
[18:05:09.928]                     if (is.function(sendCondition)) 
[18:05:09.928]                       return(sendCondition)
[18:05:09.928]                     ns <- getNamespace("parallel")
[18:05:09.928]                     if (exists("sendData", mode = "function", 
[18:05:09.928]                       envir = ns)) {
[18:05:09.928]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:09.928]                         envir = ns)
[18:05:09.928]                       envir <- sys.frame(frame)
[18:05:09.928]                       master <- NULL
[18:05:09.928]                       while (!identical(envir, .GlobalEnv) && 
[18:05:09.928]                         !identical(envir, emptyenv())) {
[18:05:09.928]                         if (exists("master", mode = "list", envir = envir, 
[18:05:09.928]                           inherits = FALSE)) {
[18:05:09.928]                           master <- get("master", mode = "list", 
[18:05:09.928]                             envir = envir, inherits = FALSE)
[18:05:09.928]                           if (inherits(master, c("SOCKnode", 
[18:05:09.928]                             "SOCK0node"))) {
[18:05:09.928]                             sendCondition <<- function(cond) {
[18:05:09.928]                               data <- list(type = "VALUE", value = cond, 
[18:05:09.928]                                 success = TRUE)
[18:05:09.928]                               parallel_sendData(master, data)
[18:05:09.928]                             }
[18:05:09.928]                             return(sendCondition)
[18:05:09.928]                           }
[18:05:09.928]                         }
[18:05:09.928]                         frame <- frame + 1L
[18:05:09.928]                         envir <- sys.frame(frame)
[18:05:09.928]                       }
[18:05:09.928]                     }
[18:05:09.928]                     sendCondition <<- function(cond) NULL
[18:05:09.928]                   }
[18:05:09.928]                 })
[18:05:09.928]                 withCallingHandlers({
[18:05:09.928]                   NA
[18:05:09.928]                 }, immediateCondition = function(cond) {
[18:05:09.928]                   sendCondition <- ...future.makeSendCondition()
[18:05:09.928]                   sendCondition(cond)
[18:05:09.928]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:09.928]                   {
[18:05:09.928]                     inherits <- base::inherits
[18:05:09.928]                     invokeRestart <- base::invokeRestart
[18:05:09.928]                     is.null <- base::is.null
[18:05:09.928]                     muffled <- FALSE
[18:05:09.928]                     if (inherits(cond, "message")) {
[18:05:09.928]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:09.928]                       if (muffled) 
[18:05:09.928]                         invokeRestart("muffleMessage")
[18:05:09.928]                     }
[18:05:09.928]                     else if (inherits(cond, "warning")) {
[18:05:09.928]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:09.928]                       if (muffled) 
[18:05:09.928]                         invokeRestart("muffleWarning")
[18:05:09.928]                     }
[18:05:09.928]                     else if (inherits(cond, "condition")) {
[18:05:09.928]                       if (!is.null(pattern)) {
[18:05:09.928]                         computeRestarts <- base::computeRestarts
[18:05:09.928]                         grepl <- base::grepl
[18:05:09.928]                         restarts <- computeRestarts(cond)
[18:05:09.928]                         for (restart in restarts) {
[18:05:09.928]                           name <- restart$name
[18:05:09.928]                           if (is.null(name)) 
[18:05:09.928]                             next
[18:05:09.928]                           if (!grepl(pattern, name)) 
[18:05:09.928]                             next
[18:05:09.928]                           invokeRestart(restart)
[18:05:09.928]                           muffled <- TRUE
[18:05:09.928]                           break
[18:05:09.928]                         }
[18:05:09.928]                       }
[18:05:09.928]                     }
[18:05:09.928]                     invisible(muffled)
[18:05:09.928]                   }
[18:05:09.928]                   muffleCondition(cond)
[18:05:09.928]                 })
[18:05:09.928]             }))
[18:05:09.928]             future::FutureResult(value = ...future.value$value, 
[18:05:09.928]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:09.928]                   ...future.rng), globalenv = if (FALSE) 
[18:05:09.928]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:09.928]                     ...future.globalenv.names))
[18:05:09.928]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:09.928]         }, condition = base::local({
[18:05:09.928]             c <- base::c
[18:05:09.928]             inherits <- base::inherits
[18:05:09.928]             invokeRestart <- base::invokeRestart
[18:05:09.928]             length <- base::length
[18:05:09.928]             list <- base::list
[18:05:09.928]             seq.int <- base::seq.int
[18:05:09.928]             signalCondition <- base::signalCondition
[18:05:09.928]             sys.calls <- base::sys.calls
[18:05:09.928]             `[[` <- base::`[[`
[18:05:09.928]             `+` <- base::`+`
[18:05:09.928]             `<<-` <- base::`<<-`
[18:05:09.928]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:09.928]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:09.928]                   3L)]
[18:05:09.928]             }
[18:05:09.928]             function(cond) {
[18:05:09.928]                 is_error <- inherits(cond, "error")
[18:05:09.928]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:09.928]                   NULL)
[18:05:09.928]                 if (is_error) {
[18:05:09.928]                   sessionInformation <- function() {
[18:05:09.928]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:09.928]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:09.928]                       search = base::search(), system = base::Sys.info())
[18:05:09.928]                   }
[18:05:09.928]                   ...future.conditions[[length(...future.conditions) + 
[18:05:09.928]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:09.928]                     cond$call), session = sessionInformation(), 
[18:05:09.928]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:09.928]                   signalCondition(cond)
[18:05:09.928]                 }
[18:05:09.928]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:09.928]                 "immediateCondition"))) {
[18:05:09.928]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:09.928]                   ...future.conditions[[length(...future.conditions) + 
[18:05:09.928]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:09.928]                   if (TRUE && !signal) {
[18:05:09.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:09.928]                     {
[18:05:09.928]                       inherits <- base::inherits
[18:05:09.928]                       invokeRestart <- base::invokeRestart
[18:05:09.928]                       is.null <- base::is.null
[18:05:09.928]                       muffled <- FALSE
[18:05:09.928]                       if (inherits(cond, "message")) {
[18:05:09.928]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:09.928]                         if (muffled) 
[18:05:09.928]                           invokeRestart("muffleMessage")
[18:05:09.928]                       }
[18:05:09.928]                       else if (inherits(cond, "warning")) {
[18:05:09.928]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:09.928]                         if (muffled) 
[18:05:09.928]                           invokeRestart("muffleWarning")
[18:05:09.928]                       }
[18:05:09.928]                       else if (inherits(cond, "condition")) {
[18:05:09.928]                         if (!is.null(pattern)) {
[18:05:09.928]                           computeRestarts <- base::computeRestarts
[18:05:09.928]                           grepl <- base::grepl
[18:05:09.928]                           restarts <- computeRestarts(cond)
[18:05:09.928]                           for (restart in restarts) {
[18:05:09.928]                             name <- restart$name
[18:05:09.928]                             if (is.null(name)) 
[18:05:09.928]                               next
[18:05:09.928]                             if (!grepl(pattern, name)) 
[18:05:09.928]                               next
[18:05:09.928]                             invokeRestart(restart)
[18:05:09.928]                             muffled <- TRUE
[18:05:09.928]                             break
[18:05:09.928]                           }
[18:05:09.928]                         }
[18:05:09.928]                       }
[18:05:09.928]                       invisible(muffled)
[18:05:09.928]                     }
[18:05:09.928]                     muffleCondition(cond, pattern = "^muffle")
[18:05:09.928]                   }
[18:05:09.928]                 }
[18:05:09.928]                 else {
[18:05:09.928]                   if (TRUE) {
[18:05:09.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:09.928]                     {
[18:05:09.928]                       inherits <- base::inherits
[18:05:09.928]                       invokeRestart <- base::invokeRestart
[18:05:09.928]                       is.null <- base::is.null
[18:05:09.928]                       muffled <- FALSE
[18:05:09.928]                       if (inherits(cond, "message")) {
[18:05:09.928]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:09.928]                         if (muffled) 
[18:05:09.928]                           invokeRestart("muffleMessage")
[18:05:09.928]                       }
[18:05:09.928]                       else if (inherits(cond, "warning")) {
[18:05:09.928]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:09.928]                         if (muffled) 
[18:05:09.928]                           invokeRestart("muffleWarning")
[18:05:09.928]                       }
[18:05:09.928]                       else if (inherits(cond, "condition")) {
[18:05:09.928]                         if (!is.null(pattern)) {
[18:05:09.928]                           computeRestarts <- base::computeRestarts
[18:05:09.928]                           grepl <- base::grepl
[18:05:09.928]                           restarts <- computeRestarts(cond)
[18:05:09.928]                           for (restart in restarts) {
[18:05:09.928]                             name <- restart$name
[18:05:09.928]                             if (is.null(name)) 
[18:05:09.928]                               next
[18:05:09.928]                             if (!grepl(pattern, name)) 
[18:05:09.928]                               next
[18:05:09.928]                             invokeRestart(restart)
[18:05:09.928]                             muffled <- TRUE
[18:05:09.928]                             break
[18:05:09.928]                           }
[18:05:09.928]                         }
[18:05:09.928]                       }
[18:05:09.928]                       invisible(muffled)
[18:05:09.928]                     }
[18:05:09.928]                     muffleCondition(cond, pattern = "^muffle")
[18:05:09.928]                   }
[18:05:09.928]                 }
[18:05:09.928]             }
[18:05:09.928]         }))
[18:05:09.928]     }, error = function(ex) {
[18:05:09.928]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:09.928]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:09.928]                 ...future.rng), started = ...future.startTime, 
[18:05:09.928]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:09.928]             version = "1.8"), class = "FutureResult")
[18:05:09.928]     }, finally = {
[18:05:09.928]         if (!identical(...future.workdir, getwd())) 
[18:05:09.928]             setwd(...future.workdir)
[18:05:09.928]         {
[18:05:09.928]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:09.928]                 ...future.oldOptions$nwarnings <- NULL
[18:05:09.928]             }
[18:05:09.928]             base::options(...future.oldOptions)
[18:05:09.928]             if (.Platform$OS.type == "windows") {
[18:05:09.928]                 old_names <- names(...future.oldEnvVars)
[18:05:09.928]                 envs <- base::Sys.getenv()
[18:05:09.928]                 names <- names(envs)
[18:05:09.928]                 common <- intersect(names, old_names)
[18:05:09.928]                 added <- setdiff(names, old_names)
[18:05:09.928]                 removed <- setdiff(old_names, names)
[18:05:09.928]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:09.928]                   envs[common]]
[18:05:09.928]                 NAMES <- toupper(changed)
[18:05:09.928]                 args <- list()
[18:05:09.928]                 for (kk in seq_along(NAMES)) {
[18:05:09.928]                   name <- changed[[kk]]
[18:05:09.928]                   NAME <- NAMES[[kk]]
[18:05:09.928]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:09.928]                     next
[18:05:09.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:09.928]                 }
[18:05:09.928]                 NAMES <- toupper(added)
[18:05:09.928]                 for (kk in seq_along(NAMES)) {
[18:05:09.928]                   name <- added[[kk]]
[18:05:09.928]                   NAME <- NAMES[[kk]]
[18:05:09.928]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:09.928]                     next
[18:05:09.928]                   args[[name]] <- ""
[18:05:09.928]                 }
[18:05:09.928]                 NAMES <- toupper(removed)
[18:05:09.928]                 for (kk in seq_along(NAMES)) {
[18:05:09.928]                   name <- removed[[kk]]
[18:05:09.928]                   NAME <- NAMES[[kk]]
[18:05:09.928]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:09.928]                     next
[18:05:09.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:09.928]                 }
[18:05:09.928]                 if (length(args) > 0) 
[18:05:09.928]                   base::do.call(base::Sys.setenv, args = args)
[18:05:09.928]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:09.928]             }
[18:05:09.928]             else {
[18:05:09.928]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:09.928]             }
[18:05:09.928]             {
[18:05:09.928]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:09.928]                   0L) {
[18:05:09.928]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:09.928]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:09.928]                   base::options(opts)
[18:05:09.928]                 }
[18:05:09.928]                 {
[18:05:09.928]                   {
[18:05:09.928]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:09.928]                     NULL
[18:05:09.928]                   }
[18:05:09.928]                   options(future.plan = NULL)
[18:05:09.928]                   if (is.na(NA_character_)) 
[18:05:09.928]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:09.928]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:09.928]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:09.928]                     .init = FALSE)
[18:05:09.928]                 }
[18:05:09.928]             }
[18:05:09.928]         }
[18:05:09.928]     })
[18:05:09.928]     if (TRUE) {
[18:05:09.928]         base::sink(type = "output", split = FALSE)
[18:05:09.928]         if (TRUE) {
[18:05:09.928]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:09.928]         }
[18:05:09.928]         else {
[18:05:09.928]             ...future.result["stdout"] <- base::list(NULL)
[18:05:09.928]         }
[18:05:09.928]         base::close(...future.stdout)
[18:05:09.928]         ...future.stdout <- NULL
[18:05:09.928]     }
[18:05:09.928]     ...future.result$conditions <- ...future.conditions
[18:05:09.928]     ...future.result$finished <- base::Sys.time()
[18:05:09.928]     ...future.result
[18:05:09.928] }
[18:05:10.027] MultisessionFuture started
[18:05:10.030] result() for ClusterFuture ...
[18:05:10.031] receiveMessageFromWorker() for ClusterFuture ...
[18:05:10.031] - Validating connection of MultisessionFuture
[18:05:10.094] - received message: FutureResult
[18:05:10.095] - Received FutureResult
[18:05:10.102] - Erased future from FutureRegistry
[18:05:10.103] result() for ClusterFuture ...
[18:05:10.104] - result already collected: FutureResult
[18:05:10.104] result() for ClusterFuture ... done
[18:05:10.104] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:10.105] result() for ClusterFuture ... done
[18:05:10.105] result() for ClusterFuture ...
[18:05:10.106] - result already collected: FutureResult
[18:05:10.106] result() for ClusterFuture ... done
[18:05:10.106] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:05:10.107] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 7eb5673d-359f-728d-ba93-f4dfbb7cb730
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[18:05:10.109] getGlobalsAndPackages() ...
[18:05:10.109] Searching for globals...
[18:05:10.132] - globals found: [2] ‘{’, ‘:::’
[18:05:10.132] Searching for globals ... DONE
[18:05:10.133] Resolving globals: FALSE
[18:05:10.135] 
[18:05:10.135] 
[18:05:10.136] getGlobalsAndPackages() ... DONE
[18:05:10.137] run() for ‘Future’ ...
[18:05:10.137] - state: ‘created’
[18:05:10.138] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.165] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.166] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.166]   - Field: ‘node’
[18:05:10.166]   - Field: ‘label’
[18:05:10.166]   - Field: ‘local’
[18:05:10.167]   - Field: ‘owner’
[18:05:10.167]   - Field: ‘envir’
[18:05:10.167]   - Field: ‘workers’
[18:05:10.167]   - Field: ‘packages’
[18:05:10.168]   - Field: ‘gc’
[18:05:10.168]   - Field: ‘conditions’
[18:05:10.168]   - Field: ‘persistent’
[18:05:10.168]   - Field: ‘expr’
[18:05:10.169]   - Field: ‘uuid’
[18:05:10.169]   - Field: ‘seed’
[18:05:10.169]   - Field: ‘version’
[18:05:10.170]   - Field: ‘result’
[18:05:10.170]   - Field: ‘asynchronous’
[18:05:10.170]   - Field: ‘calls’
[18:05:10.170]   - Field: ‘globals’
[18:05:10.171]   - Field: ‘stdout’
[18:05:10.171]   - Field: ‘earlySignal’
[18:05:10.171]   - Field: ‘lazy’
[18:05:10.171]   - Field: ‘state’
[18:05:10.172] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.172] - Launch lazy future ...
[18:05:10.173] Packages needed by the future expression (n = 0): <none>
[18:05:10.173] Packages needed by future strategies (n = 0): <none>
[18:05:10.174] {
[18:05:10.174]     {
[18:05:10.174]         {
[18:05:10.174]             ...future.startTime <- base::Sys.time()
[18:05:10.174]             {
[18:05:10.174]                 {
[18:05:10.174]                   {
[18:05:10.174]                     {
[18:05:10.174]                       base::local({
[18:05:10.174]                         has_future <- base::requireNamespace("future", 
[18:05:10.174]                           quietly = TRUE)
[18:05:10.174]                         if (has_future) {
[18:05:10.174]                           ns <- base::getNamespace("future")
[18:05:10.174]                           version <- ns[[".package"]][["version"]]
[18:05:10.174]                           if (is.null(version)) 
[18:05:10.174]                             version <- utils::packageVersion("future")
[18:05:10.174]                         }
[18:05:10.174]                         else {
[18:05:10.174]                           version <- NULL
[18:05:10.174]                         }
[18:05:10.174]                         if (!has_future || version < "1.8.0") {
[18:05:10.174]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.174]                             "", base::R.version$version.string), 
[18:05:10.174]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:10.174]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:10.174]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.174]                               "release", "version")], collapse = " "), 
[18:05:10.174]                             hostname = base::Sys.info()[["nodename"]])
[18:05:10.174]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.174]                             info)
[18:05:10.174]                           info <- base::paste(info, collapse = "; ")
[18:05:10.174]                           if (!has_future) {
[18:05:10.174]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.174]                               info)
[18:05:10.174]                           }
[18:05:10.174]                           else {
[18:05:10.174]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.174]                               info, version)
[18:05:10.174]                           }
[18:05:10.174]                           base::stop(msg)
[18:05:10.174]                         }
[18:05:10.174]                       })
[18:05:10.174]                     }
[18:05:10.174]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.174]                     base::options(mc.cores = 1L)
[18:05:10.174]                   }
[18:05:10.174]                   ...future.strategy.old <- future::plan("list")
[18:05:10.174]                   options(future.plan = NULL)
[18:05:10.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.174]                 }
[18:05:10.174]                 ...future.workdir <- getwd()
[18:05:10.174]             }
[18:05:10.174]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.174]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.174]         }
[18:05:10.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.174]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.174]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.174]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.174]             base::names(...future.oldOptions))
[18:05:10.174]     }
[18:05:10.174]     if (FALSE) {
[18:05:10.174]     }
[18:05:10.174]     else {
[18:05:10.174]         if (TRUE) {
[18:05:10.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.174]                 open = "w")
[18:05:10.174]         }
[18:05:10.174]         else {
[18:05:10.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.174]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.174]         }
[18:05:10.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.174]             base::sink(type = "output", split = FALSE)
[18:05:10.174]             base::close(...future.stdout)
[18:05:10.174]         }, add = TRUE)
[18:05:10.174]     }
[18:05:10.174]     ...future.frame <- base::sys.nframe()
[18:05:10.174]     ...future.conditions <- base::list()
[18:05:10.174]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.174]     if (FALSE) {
[18:05:10.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.174]     }
[18:05:10.174]     ...future.result <- base::tryCatch({
[18:05:10.174]         base::withCallingHandlers({
[18:05:10.174]             ...future.value <- base::withVisible(base::local({
[18:05:10.174]                 ...future.makeSendCondition <- base::local({
[18:05:10.174]                   sendCondition <- NULL
[18:05:10.174]                   function(frame = 1L) {
[18:05:10.174]                     if (is.function(sendCondition)) 
[18:05:10.174]                       return(sendCondition)
[18:05:10.174]                     ns <- getNamespace("parallel")
[18:05:10.174]                     if (exists("sendData", mode = "function", 
[18:05:10.174]                       envir = ns)) {
[18:05:10.174]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.174]                         envir = ns)
[18:05:10.174]                       envir <- sys.frame(frame)
[18:05:10.174]                       master <- NULL
[18:05:10.174]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.174]                         !identical(envir, emptyenv())) {
[18:05:10.174]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.174]                           inherits = FALSE)) {
[18:05:10.174]                           master <- get("master", mode = "list", 
[18:05:10.174]                             envir = envir, inherits = FALSE)
[18:05:10.174]                           if (inherits(master, c("SOCKnode", 
[18:05:10.174]                             "SOCK0node"))) {
[18:05:10.174]                             sendCondition <<- function(cond) {
[18:05:10.174]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.174]                                 success = TRUE)
[18:05:10.174]                               parallel_sendData(master, data)
[18:05:10.174]                             }
[18:05:10.174]                             return(sendCondition)
[18:05:10.174]                           }
[18:05:10.174]                         }
[18:05:10.174]                         frame <- frame + 1L
[18:05:10.174]                         envir <- sys.frame(frame)
[18:05:10.174]                       }
[18:05:10.174]                     }
[18:05:10.174]                     sendCondition <<- function(cond) NULL
[18:05:10.174]                   }
[18:05:10.174]                 })
[18:05:10.174]                 withCallingHandlers({
[18:05:10.174]                   {
[18:05:10.174]                     future:::session_uuid(attributes = TRUE)
[18:05:10.174]                   }
[18:05:10.174]                 }, immediateCondition = function(cond) {
[18:05:10.174]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.174]                   sendCondition(cond)
[18:05:10.174]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.174]                   {
[18:05:10.174]                     inherits <- base::inherits
[18:05:10.174]                     invokeRestart <- base::invokeRestart
[18:05:10.174]                     is.null <- base::is.null
[18:05:10.174]                     muffled <- FALSE
[18:05:10.174]                     if (inherits(cond, "message")) {
[18:05:10.174]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.174]                       if (muffled) 
[18:05:10.174]                         invokeRestart("muffleMessage")
[18:05:10.174]                     }
[18:05:10.174]                     else if (inherits(cond, "warning")) {
[18:05:10.174]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.174]                       if (muffled) 
[18:05:10.174]                         invokeRestart("muffleWarning")
[18:05:10.174]                     }
[18:05:10.174]                     else if (inherits(cond, "condition")) {
[18:05:10.174]                       if (!is.null(pattern)) {
[18:05:10.174]                         computeRestarts <- base::computeRestarts
[18:05:10.174]                         grepl <- base::grepl
[18:05:10.174]                         restarts <- computeRestarts(cond)
[18:05:10.174]                         for (restart in restarts) {
[18:05:10.174]                           name <- restart$name
[18:05:10.174]                           if (is.null(name)) 
[18:05:10.174]                             next
[18:05:10.174]                           if (!grepl(pattern, name)) 
[18:05:10.174]                             next
[18:05:10.174]                           invokeRestart(restart)
[18:05:10.174]                           muffled <- TRUE
[18:05:10.174]                           break
[18:05:10.174]                         }
[18:05:10.174]                       }
[18:05:10.174]                     }
[18:05:10.174]                     invisible(muffled)
[18:05:10.174]                   }
[18:05:10.174]                   muffleCondition(cond)
[18:05:10.174]                 })
[18:05:10.174]             }))
[18:05:10.174]             future::FutureResult(value = ...future.value$value, 
[18:05:10.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.174]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.174]                     ...future.globalenv.names))
[18:05:10.174]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.174]         }, condition = base::local({
[18:05:10.174]             c <- base::c
[18:05:10.174]             inherits <- base::inherits
[18:05:10.174]             invokeRestart <- base::invokeRestart
[18:05:10.174]             length <- base::length
[18:05:10.174]             list <- base::list
[18:05:10.174]             seq.int <- base::seq.int
[18:05:10.174]             signalCondition <- base::signalCondition
[18:05:10.174]             sys.calls <- base::sys.calls
[18:05:10.174]             `[[` <- base::`[[`
[18:05:10.174]             `+` <- base::`+`
[18:05:10.174]             `<<-` <- base::`<<-`
[18:05:10.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.174]                   3L)]
[18:05:10.174]             }
[18:05:10.174]             function(cond) {
[18:05:10.174]                 is_error <- inherits(cond, "error")
[18:05:10.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.174]                   NULL)
[18:05:10.174]                 if (is_error) {
[18:05:10.174]                   sessionInformation <- function() {
[18:05:10.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.174]                       search = base::search(), system = base::Sys.info())
[18:05:10.174]                   }
[18:05:10.174]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.174]                     cond$call), session = sessionInformation(), 
[18:05:10.174]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.174]                   signalCondition(cond)
[18:05:10.174]                 }
[18:05:10.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.174]                 "immediateCondition"))) {
[18:05:10.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.174]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.174]                   if (TRUE && !signal) {
[18:05:10.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.174]                     {
[18:05:10.174]                       inherits <- base::inherits
[18:05:10.174]                       invokeRestart <- base::invokeRestart
[18:05:10.174]                       is.null <- base::is.null
[18:05:10.174]                       muffled <- FALSE
[18:05:10.174]                       if (inherits(cond, "message")) {
[18:05:10.174]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.174]                         if (muffled) 
[18:05:10.174]                           invokeRestart("muffleMessage")
[18:05:10.174]                       }
[18:05:10.174]                       else if (inherits(cond, "warning")) {
[18:05:10.174]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.174]                         if (muffled) 
[18:05:10.174]                           invokeRestart("muffleWarning")
[18:05:10.174]                       }
[18:05:10.174]                       else if (inherits(cond, "condition")) {
[18:05:10.174]                         if (!is.null(pattern)) {
[18:05:10.174]                           computeRestarts <- base::computeRestarts
[18:05:10.174]                           grepl <- base::grepl
[18:05:10.174]                           restarts <- computeRestarts(cond)
[18:05:10.174]                           for (restart in restarts) {
[18:05:10.174]                             name <- restart$name
[18:05:10.174]                             if (is.null(name)) 
[18:05:10.174]                               next
[18:05:10.174]                             if (!grepl(pattern, name)) 
[18:05:10.174]                               next
[18:05:10.174]                             invokeRestart(restart)
[18:05:10.174]                             muffled <- TRUE
[18:05:10.174]                             break
[18:05:10.174]                           }
[18:05:10.174]                         }
[18:05:10.174]                       }
[18:05:10.174]                       invisible(muffled)
[18:05:10.174]                     }
[18:05:10.174]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.174]                   }
[18:05:10.174]                 }
[18:05:10.174]                 else {
[18:05:10.174]                   if (TRUE) {
[18:05:10.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.174]                     {
[18:05:10.174]                       inherits <- base::inherits
[18:05:10.174]                       invokeRestart <- base::invokeRestart
[18:05:10.174]                       is.null <- base::is.null
[18:05:10.174]                       muffled <- FALSE
[18:05:10.174]                       if (inherits(cond, "message")) {
[18:05:10.174]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.174]                         if (muffled) 
[18:05:10.174]                           invokeRestart("muffleMessage")
[18:05:10.174]                       }
[18:05:10.174]                       else if (inherits(cond, "warning")) {
[18:05:10.174]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.174]                         if (muffled) 
[18:05:10.174]                           invokeRestart("muffleWarning")
[18:05:10.174]                       }
[18:05:10.174]                       else if (inherits(cond, "condition")) {
[18:05:10.174]                         if (!is.null(pattern)) {
[18:05:10.174]                           computeRestarts <- base::computeRestarts
[18:05:10.174]                           grepl <- base::grepl
[18:05:10.174]                           restarts <- computeRestarts(cond)
[18:05:10.174]                           for (restart in restarts) {
[18:05:10.174]                             name <- restart$name
[18:05:10.174]                             if (is.null(name)) 
[18:05:10.174]                               next
[18:05:10.174]                             if (!grepl(pattern, name)) 
[18:05:10.174]                               next
[18:05:10.174]                             invokeRestart(restart)
[18:05:10.174]                             muffled <- TRUE
[18:05:10.174]                             break
[18:05:10.174]                           }
[18:05:10.174]                         }
[18:05:10.174]                       }
[18:05:10.174]                       invisible(muffled)
[18:05:10.174]                     }
[18:05:10.174]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.174]                   }
[18:05:10.174]                 }
[18:05:10.174]             }
[18:05:10.174]         }))
[18:05:10.174]     }, error = function(ex) {
[18:05:10.174]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.174]                 ...future.rng), started = ...future.startTime, 
[18:05:10.174]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.174]             version = "1.8"), class = "FutureResult")
[18:05:10.174]     }, finally = {
[18:05:10.174]         if (!identical(...future.workdir, getwd())) 
[18:05:10.174]             setwd(...future.workdir)
[18:05:10.174]         {
[18:05:10.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.174]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.174]             }
[18:05:10.174]             base::options(...future.oldOptions)
[18:05:10.174]             if (.Platform$OS.type == "windows") {
[18:05:10.174]                 old_names <- names(...future.oldEnvVars)
[18:05:10.174]                 envs <- base::Sys.getenv()
[18:05:10.174]                 names <- names(envs)
[18:05:10.174]                 common <- intersect(names, old_names)
[18:05:10.174]                 added <- setdiff(names, old_names)
[18:05:10.174]                 removed <- setdiff(old_names, names)
[18:05:10.174]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.174]                   envs[common]]
[18:05:10.174]                 NAMES <- toupper(changed)
[18:05:10.174]                 args <- list()
[18:05:10.174]                 for (kk in seq_along(NAMES)) {
[18:05:10.174]                   name <- changed[[kk]]
[18:05:10.174]                   NAME <- NAMES[[kk]]
[18:05:10.174]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.174]                     next
[18:05:10.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.174]                 }
[18:05:10.174]                 NAMES <- toupper(added)
[18:05:10.174]                 for (kk in seq_along(NAMES)) {
[18:05:10.174]                   name <- added[[kk]]
[18:05:10.174]                   NAME <- NAMES[[kk]]
[18:05:10.174]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.174]                     next
[18:05:10.174]                   args[[name]] <- ""
[18:05:10.174]                 }
[18:05:10.174]                 NAMES <- toupper(removed)
[18:05:10.174]                 for (kk in seq_along(NAMES)) {
[18:05:10.174]                   name <- removed[[kk]]
[18:05:10.174]                   NAME <- NAMES[[kk]]
[18:05:10.174]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.174]                     next
[18:05:10.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.174]                 }
[18:05:10.174]                 if (length(args) > 0) 
[18:05:10.174]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.174]             }
[18:05:10.174]             else {
[18:05:10.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.174]             }
[18:05:10.174]             {
[18:05:10.174]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.174]                   0L) {
[18:05:10.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.174]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.174]                   base::options(opts)
[18:05:10.174]                 }
[18:05:10.174]                 {
[18:05:10.174]                   {
[18:05:10.174]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.174]                     NULL
[18:05:10.174]                   }
[18:05:10.174]                   options(future.plan = NULL)
[18:05:10.174]                   if (is.na(NA_character_)) 
[18:05:10.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.174]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.174]                     .init = FALSE)
[18:05:10.174]                 }
[18:05:10.174]             }
[18:05:10.174]         }
[18:05:10.174]     })
[18:05:10.174]     if (TRUE) {
[18:05:10.174]         base::sink(type = "output", split = FALSE)
[18:05:10.174]         if (TRUE) {
[18:05:10.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.174]         }
[18:05:10.174]         else {
[18:05:10.174]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.174]         }
[18:05:10.174]         base::close(...future.stdout)
[18:05:10.174]         ...future.stdout <- NULL
[18:05:10.174]     }
[18:05:10.174]     ...future.result$conditions <- ...future.conditions
[18:05:10.174]     ...future.result$finished <- base::Sys.time()
[18:05:10.174]     ...future.result
[18:05:10.174] }
[18:05:10.181] MultisessionFuture started
[18:05:10.181] - Launch lazy future ... done
[18:05:10.181] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[18:05:10.182] result() for ClusterFuture ...
[18:05:10.182] receiveMessageFromWorker() for ClusterFuture ...
[18:05:10.182] - Validating connection of MultisessionFuture
[18:05:10.225] - received message: FutureResult
[18:05:10.225] - Received FutureResult
[18:05:10.225] - Erased future from FutureRegistry
[18:05:10.226] result() for ClusterFuture ...
[18:05:10.226] - result already collected: FutureResult
[18:05:10.226] result() for ClusterFuture ... done
[18:05:10.226] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:10.227] result() for ClusterFuture ... done
[18:05:10.227] result() for ClusterFuture ...
[18:05:10.227] - result already collected: FutureResult
[18:05:10.228] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 9b2031f9-e8db-f100-39bf-5281deaa4904
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[18:05:10.228] getGlobalsAndPackages() ...
[18:05:10.229] Searching for globals...
[18:05:10.231] - globals found: [2] ‘{’, ‘:::’
[18:05:10.232] Searching for globals ... DONE
[18:05:10.232] Resolving globals: FALSE
[18:05:10.233] 
[18:05:10.233] 
[18:05:10.233] getGlobalsAndPackages() ... DONE
[18:05:10.234] run() for ‘Future’ ...
[18:05:10.234] - state: ‘created’
[18:05:10.235] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.259] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.259] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.259]   - Field: ‘node’
[18:05:10.260]   - Field: ‘label’
[18:05:10.260]   - Field: ‘local’
[18:05:10.260]   - Field: ‘owner’
[18:05:10.260]   - Field: ‘envir’
[18:05:10.261]   - Field: ‘workers’
[18:05:10.261]   - Field: ‘packages’
[18:05:10.261]   - Field: ‘gc’
[18:05:10.261]   - Field: ‘conditions’
[18:05:10.262]   - Field: ‘persistent’
[18:05:10.262]   - Field: ‘expr’
[18:05:10.262]   - Field: ‘uuid’
[18:05:10.267]   - Field: ‘seed’
[18:05:10.267]   - Field: ‘version’
[18:05:10.267]   - Field: ‘result’
[18:05:10.268]   - Field: ‘asynchronous’
[18:05:10.268]   - Field: ‘calls’
[18:05:10.268]   - Field: ‘globals’
[18:05:10.268]   - Field: ‘stdout’
[18:05:10.268]   - Field: ‘earlySignal’
[18:05:10.269]   - Field: ‘lazy’
[18:05:10.269]   - Field: ‘state’
[18:05:10.269] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.269] - Launch lazy future ...
[18:05:10.270] Packages needed by the future expression (n = 0): <none>
[18:05:10.270] Packages needed by future strategies (n = 0): <none>
[18:05:10.271] {
[18:05:10.271]     {
[18:05:10.271]         {
[18:05:10.271]             ...future.startTime <- base::Sys.time()
[18:05:10.271]             {
[18:05:10.271]                 {
[18:05:10.271]                   {
[18:05:10.271]                     {
[18:05:10.271]                       base::local({
[18:05:10.271]                         has_future <- base::requireNamespace("future", 
[18:05:10.271]                           quietly = TRUE)
[18:05:10.271]                         if (has_future) {
[18:05:10.271]                           ns <- base::getNamespace("future")
[18:05:10.271]                           version <- ns[[".package"]][["version"]]
[18:05:10.271]                           if (is.null(version)) 
[18:05:10.271]                             version <- utils::packageVersion("future")
[18:05:10.271]                         }
[18:05:10.271]                         else {
[18:05:10.271]                           version <- NULL
[18:05:10.271]                         }
[18:05:10.271]                         if (!has_future || version < "1.8.0") {
[18:05:10.271]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.271]                             "", base::R.version$version.string), 
[18:05:10.271]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:10.271]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:10.271]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.271]                               "release", "version")], collapse = " "), 
[18:05:10.271]                             hostname = base::Sys.info()[["nodename"]])
[18:05:10.271]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.271]                             info)
[18:05:10.271]                           info <- base::paste(info, collapse = "; ")
[18:05:10.271]                           if (!has_future) {
[18:05:10.271]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.271]                               info)
[18:05:10.271]                           }
[18:05:10.271]                           else {
[18:05:10.271]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.271]                               info, version)
[18:05:10.271]                           }
[18:05:10.271]                           base::stop(msg)
[18:05:10.271]                         }
[18:05:10.271]                       })
[18:05:10.271]                     }
[18:05:10.271]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.271]                     base::options(mc.cores = 1L)
[18:05:10.271]                   }
[18:05:10.271]                   ...future.strategy.old <- future::plan("list")
[18:05:10.271]                   options(future.plan = NULL)
[18:05:10.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.271]                 }
[18:05:10.271]                 ...future.workdir <- getwd()
[18:05:10.271]             }
[18:05:10.271]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.271]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.271]         }
[18:05:10.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.271]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.271]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.271]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.271]             base::names(...future.oldOptions))
[18:05:10.271]     }
[18:05:10.271]     if (FALSE) {
[18:05:10.271]     }
[18:05:10.271]     else {
[18:05:10.271]         if (TRUE) {
[18:05:10.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.271]                 open = "w")
[18:05:10.271]         }
[18:05:10.271]         else {
[18:05:10.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.271]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.271]         }
[18:05:10.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.271]             base::sink(type = "output", split = FALSE)
[18:05:10.271]             base::close(...future.stdout)
[18:05:10.271]         }, add = TRUE)
[18:05:10.271]     }
[18:05:10.271]     ...future.frame <- base::sys.nframe()
[18:05:10.271]     ...future.conditions <- base::list()
[18:05:10.271]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.271]     if (FALSE) {
[18:05:10.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.271]     }
[18:05:10.271]     ...future.result <- base::tryCatch({
[18:05:10.271]         base::withCallingHandlers({
[18:05:10.271]             ...future.value <- base::withVisible(base::local({
[18:05:10.271]                 ...future.makeSendCondition <- base::local({
[18:05:10.271]                   sendCondition <- NULL
[18:05:10.271]                   function(frame = 1L) {
[18:05:10.271]                     if (is.function(sendCondition)) 
[18:05:10.271]                       return(sendCondition)
[18:05:10.271]                     ns <- getNamespace("parallel")
[18:05:10.271]                     if (exists("sendData", mode = "function", 
[18:05:10.271]                       envir = ns)) {
[18:05:10.271]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.271]                         envir = ns)
[18:05:10.271]                       envir <- sys.frame(frame)
[18:05:10.271]                       master <- NULL
[18:05:10.271]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.271]                         !identical(envir, emptyenv())) {
[18:05:10.271]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.271]                           inherits = FALSE)) {
[18:05:10.271]                           master <- get("master", mode = "list", 
[18:05:10.271]                             envir = envir, inherits = FALSE)
[18:05:10.271]                           if (inherits(master, c("SOCKnode", 
[18:05:10.271]                             "SOCK0node"))) {
[18:05:10.271]                             sendCondition <<- function(cond) {
[18:05:10.271]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.271]                                 success = TRUE)
[18:05:10.271]                               parallel_sendData(master, data)
[18:05:10.271]                             }
[18:05:10.271]                             return(sendCondition)
[18:05:10.271]                           }
[18:05:10.271]                         }
[18:05:10.271]                         frame <- frame + 1L
[18:05:10.271]                         envir <- sys.frame(frame)
[18:05:10.271]                       }
[18:05:10.271]                     }
[18:05:10.271]                     sendCondition <<- function(cond) NULL
[18:05:10.271]                   }
[18:05:10.271]                 })
[18:05:10.271]                 withCallingHandlers({
[18:05:10.271]                   {
[18:05:10.271]                     future:::session_uuid(attributes = TRUE)
[18:05:10.271]                   }
[18:05:10.271]                 }, immediateCondition = function(cond) {
[18:05:10.271]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.271]                   sendCondition(cond)
[18:05:10.271]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.271]                   {
[18:05:10.271]                     inherits <- base::inherits
[18:05:10.271]                     invokeRestart <- base::invokeRestart
[18:05:10.271]                     is.null <- base::is.null
[18:05:10.271]                     muffled <- FALSE
[18:05:10.271]                     if (inherits(cond, "message")) {
[18:05:10.271]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.271]                       if (muffled) 
[18:05:10.271]                         invokeRestart("muffleMessage")
[18:05:10.271]                     }
[18:05:10.271]                     else if (inherits(cond, "warning")) {
[18:05:10.271]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.271]                       if (muffled) 
[18:05:10.271]                         invokeRestart("muffleWarning")
[18:05:10.271]                     }
[18:05:10.271]                     else if (inherits(cond, "condition")) {
[18:05:10.271]                       if (!is.null(pattern)) {
[18:05:10.271]                         computeRestarts <- base::computeRestarts
[18:05:10.271]                         grepl <- base::grepl
[18:05:10.271]                         restarts <- computeRestarts(cond)
[18:05:10.271]                         for (restart in restarts) {
[18:05:10.271]                           name <- restart$name
[18:05:10.271]                           if (is.null(name)) 
[18:05:10.271]                             next
[18:05:10.271]                           if (!grepl(pattern, name)) 
[18:05:10.271]                             next
[18:05:10.271]                           invokeRestart(restart)
[18:05:10.271]                           muffled <- TRUE
[18:05:10.271]                           break
[18:05:10.271]                         }
[18:05:10.271]                       }
[18:05:10.271]                     }
[18:05:10.271]                     invisible(muffled)
[18:05:10.271]                   }
[18:05:10.271]                   muffleCondition(cond)
[18:05:10.271]                 })
[18:05:10.271]             }))
[18:05:10.271]             future::FutureResult(value = ...future.value$value, 
[18:05:10.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.271]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.271]                     ...future.globalenv.names))
[18:05:10.271]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.271]         }, condition = base::local({
[18:05:10.271]             c <- base::c
[18:05:10.271]             inherits <- base::inherits
[18:05:10.271]             invokeRestart <- base::invokeRestart
[18:05:10.271]             length <- base::length
[18:05:10.271]             list <- base::list
[18:05:10.271]             seq.int <- base::seq.int
[18:05:10.271]             signalCondition <- base::signalCondition
[18:05:10.271]             sys.calls <- base::sys.calls
[18:05:10.271]             `[[` <- base::`[[`
[18:05:10.271]             `+` <- base::`+`
[18:05:10.271]             `<<-` <- base::`<<-`
[18:05:10.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.271]                   3L)]
[18:05:10.271]             }
[18:05:10.271]             function(cond) {
[18:05:10.271]                 is_error <- inherits(cond, "error")
[18:05:10.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.271]                   NULL)
[18:05:10.271]                 if (is_error) {
[18:05:10.271]                   sessionInformation <- function() {
[18:05:10.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.271]                       search = base::search(), system = base::Sys.info())
[18:05:10.271]                   }
[18:05:10.271]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.271]                     cond$call), session = sessionInformation(), 
[18:05:10.271]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.271]                   signalCondition(cond)
[18:05:10.271]                 }
[18:05:10.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.271]                 "immediateCondition"))) {
[18:05:10.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.271]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.271]                   if (TRUE && !signal) {
[18:05:10.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.271]                     {
[18:05:10.271]                       inherits <- base::inherits
[18:05:10.271]                       invokeRestart <- base::invokeRestart
[18:05:10.271]                       is.null <- base::is.null
[18:05:10.271]                       muffled <- FALSE
[18:05:10.271]                       if (inherits(cond, "message")) {
[18:05:10.271]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.271]                         if (muffled) 
[18:05:10.271]                           invokeRestart("muffleMessage")
[18:05:10.271]                       }
[18:05:10.271]                       else if (inherits(cond, "warning")) {
[18:05:10.271]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.271]                         if (muffled) 
[18:05:10.271]                           invokeRestart("muffleWarning")
[18:05:10.271]                       }
[18:05:10.271]                       else if (inherits(cond, "condition")) {
[18:05:10.271]                         if (!is.null(pattern)) {
[18:05:10.271]                           computeRestarts <- base::computeRestarts
[18:05:10.271]                           grepl <- base::grepl
[18:05:10.271]                           restarts <- computeRestarts(cond)
[18:05:10.271]                           for (restart in restarts) {
[18:05:10.271]                             name <- restart$name
[18:05:10.271]                             if (is.null(name)) 
[18:05:10.271]                               next
[18:05:10.271]                             if (!grepl(pattern, name)) 
[18:05:10.271]                               next
[18:05:10.271]                             invokeRestart(restart)
[18:05:10.271]                             muffled <- TRUE
[18:05:10.271]                             break
[18:05:10.271]                           }
[18:05:10.271]                         }
[18:05:10.271]                       }
[18:05:10.271]                       invisible(muffled)
[18:05:10.271]                     }
[18:05:10.271]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.271]                   }
[18:05:10.271]                 }
[18:05:10.271]                 else {
[18:05:10.271]                   if (TRUE) {
[18:05:10.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.271]                     {
[18:05:10.271]                       inherits <- base::inherits
[18:05:10.271]                       invokeRestart <- base::invokeRestart
[18:05:10.271]                       is.null <- base::is.null
[18:05:10.271]                       muffled <- FALSE
[18:05:10.271]                       if (inherits(cond, "message")) {
[18:05:10.271]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.271]                         if (muffled) 
[18:05:10.271]                           invokeRestart("muffleMessage")
[18:05:10.271]                       }
[18:05:10.271]                       else if (inherits(cond, "warning")) {
[18:05:10.271]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.271]                         if (muffled) 
[18:05:10.271]                           invokeRestart("muffleWarning")
[18:05:10.271]                       }
[18:05:10.271]                       else if (inherits(cond, "condition")) {
[18:05:10.271]                         if (!is.null(pattern)) {
[18:05:10.271]                           computeRestarts <- base::computeRestarts
[18:05:10.271]                           grepl <- base::grepl
[18:05:10.271]                           restarts <- computeRestarts(cond)
[18:05:10.271]                           for (restart in restarts) {
[18:05:10.271]                             name <- restart$name
[18:05:10.271]                             if (is.null(name)) 
[18:05:10.271]                               next
[18:05:10.271]                             if (!grepl(pattern, name)) 
[18:05:10.271]                               next
[18:05:10.271]                             invokeRestart(restart)
[18:05:10.271]                             muffled <- TRUE
[18:05:10.271]                             break
[18:05:10.271]                           }
[18:05:10.271]                         }
[18:05:10.271]                       }
[18:05:10.271]                       invisible(muffled)
[18:05:10.271]                     }
[18:05:10.271]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.271]                   }
[18:05:10.271]                 }
[18:05:10.271]             }
[18:05:10.271]         }))
[18:05:10.271]     }, error = function(ex) {
[18:05:10.271]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.271]                 ...future.rng), started = ...future.startTime, 
[18:05:10.271]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.271]             version = "1.8"), class = "FutureResult")
[18:05:10.271]     }, finally = {
[18:05:10.271]         if (!identical(...future.workdir, getwd())) 
[18:05:10.271]             setwd(...future.workdir)
[18:05:10.271]         {
[18:05:10.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.271]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.271]             }
[18:05:10.271]             base::options(...future.oldOptions)
[18:05:10.271]             if (.Platform$OS.type == "windows") {
[18:05:10.271]                 old_names <- names(...future.oldEnvVars)
[18:05:10.271]                 envs <- base::Sys.getenv()
[18:05:10.271]                 names <- names(envs)
[18:05:10.271]                 common <- intersect(names, old_names)
[18:05:10.271]                 added <- setdiff(names, old_names)
[18:05:10.271]                 removed <- setdiff(old_names, names)
[18:05:10.271]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.271]                   envs[common]]
[18:05:10.271]                 NAMES <- toupper(changed)
[18:05:10.271]                 args <- list()
[18:05:10.271]                 for (kk in seq_along(NAMES)) {
[18:05:10.271]                   name <- changed[[kk]]
[18:05:10.271]                   NAME <- NAMES[[kk]]
[18:05:10.271]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.271]                     next
[18:05:10.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.271]                 }
[18:05:10.271]                 NAMES <- toupper(added)
[18:05:10.271]                 for (kk in seq_along(NAMES)) {
[18:05:10.271]                   name <- added[[kk]]
[18:05:10.271]                   NAME <- NAMES[[kk]]
[18:05:10.271]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.271]                     next
[18:05:10.271]                   args[[name]] <- ""
[18:05:10.271]                 }
[18:05:10.271]                 NAMES <- toupper(removed)
[18:05:10.271]                 for (kk in seq_along(NAMES)) {
[18:05:10.271]                   name <- removed[[kk]]
[18:05:10.271]                   NAME <- NAMES[[kk]]
[18:05:10.271]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.271]                     next
[18:05:10.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.271]                 }
[18:05:10.271]                 if (length(args) > 0) 
[18:05:10.271]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.271]             }
[18:05:10.271]             else {
[18:05:10.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.271]             }
[18:05:10.271]             {
[18:05:10.271]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.271]                   0L) {
[18:05:10.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.271]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.271]                   base::options(opts)
[18:05:10.271]                 }
[18:05:10.271]                 {
[18:05:10.271]                   {
[18:05:10.271]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.271]                     NULL
[18:05:10.271]                   }
[18:05:10.271]                   options(future.plan = NULL)
[18:05:10.271]                   if (is.na(NA_character_)) 
[18:05:10.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.271]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.271]                     .init = FALSE)
[18:05:10.271]                 }
[18:05:10.271]             }
[18:05:10.271]         }
[18:05:10.271]     })
[18:05:10.271]     if (TRUE) {
[18:05:10.271]         base::sink(type = "output", split = FALSE)
[18:05:10.271]         if (TRUE) {
[18:05:10.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.271]         }
[18:05:10.271]         else {
[18:05:10.271]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.271]         }
[18:05:10.271]         base::close(...future.stdout)
[18:05:10.271]         ...future.stdout <- NULL
[18:05:10.271]     }
[18:05:10.271]     ...future.result$conditions <- ...future.conditions
[18:05:10.271]     ...future.result$finished <- base::Sys.time()
[18:05:10.271]     ...future.result
[18:05:10.271] }
[18:05:10.278] MultisessionFuture started
[18:05:10.278] - Launch lazy future ... done
[18:05:10.278] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[18:05:10.279] result() for ClusterFuture ...
[18:05:10.279] receiveMessageFromWorker() for ClusterFuture ...
[18:05:10.279] - Validating connection of MultisessionFuture
[18:05:10.326] - received message: FutureResult
[18:05:10.327] - Received FutureResult
[18:05:10.327] - Erased future from FutureRegistry
[18:05:10.327] result() for ClusterFuture ...
[18:05:10.327] - result already collected: FutureResult
[18:05:10.328] result() for ClusterFuture ... done
[18:05:10.328] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:10.328] result() for ClusterFuture ... done
[18:05:10.328] result() for ClusterFuture ...
[18:05:10.328] - result already collected: FutureResult
[18:05:10.328] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 9b2031f9-e8db-f100-39bf-5281deaa4904
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[18:05:10.329] getGlobalsAndPackages() ...
[18:05:10.329] Searching for globals...
[18:05:10.331] - globals found: [3] ‘{’, ‘$’, ‘f1’
[18:05:10.331] Searching for globals ... DONE
[18:05:10.331] Resolving globals: FALSE
[18:05:10.337] The total size of the 1 globals is 1.56 MiB (1640512 bytes)
[18:05:10.338] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[18:05:10.338] - globals: [1] ‘f1’
[18:05:10.338] 
[18:05:10.339] getGlobalsAndPackages() ... DONE
[18:05:10.339] run() for ‘Future’ ...
[18:05:10.339] - state: ‘created’
[18:05:10.339] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.357] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.358] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.358]   - Field: ‘node’
[18:05:10.358]   - Field: ‘label’
[18:05:10.358]   - Field: ‘local’
[18:05:10.358]   - Field: ‘owner’
[18:05:10.359]   - Field: ‘envir’
[18:05:10.359]   - Field: ‘workers’
[18:05:10.359]   - Field: ‘packages’
[18:05:10.359]   - Field: ‘gc’
[18:05:10.359]   - Field: ‘conditions’
[18:05:10.360]   - Field: ‘persistent’
[18:05:10.360]   - Field: ‘expr’
[18:05:10.360]   - Field: ‘uuid’
[18:05:10.360]   - Field: ‘seed’
[18:05:10.360]   - Field: ‘version’
[18:05:10.361]   - Field: ‘result’
[18:05:10.361]   - Field: ‘asynchronous’
[18:05:10.361]   - Field: ‘calls’
[18:05:10.361]   - Field: ‘globals’
[18:05:10.361]   - Field: ‘stdout’
[18:05:10.362]   - Field: ‘earlySignal’
[18:05:10.362]   - Field: ‘lazy’
[18:05:10.362]   - Field: ‘state’
[18:05:10.362] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.362] - Launch lazy future ...
[18:05:10.363] Packages needed by the future expression (n = 0): <none>
[18:05:10.363] Packages needed by future strategies (n = 0): <none>
[18:05:10.364] {
[18:05:10.364]     {
[18:05:10.364]         {
[18:05:10.364]             ...future.startTime <- base::Sys.time()
[18:05:10.364]             {
[18:05:10.364]                 {
[18:05:10.364]                   {
[18:05:10.364]                     {
[18:05:10.364]                       base::local({
[18:05:10.364]                         has_future <- base::requireNamespace("future", 
[18:05:10.364]                           quietly = TRUE)
[18:05:10.364]                         if (has_future) {
[18:05:10.364]                           ns <- base::getNamespace("future")
[18:05:10.364]                           version <- ns[[".package"]][["version"]]
[18:05:10.364]                           if (is.null(version)) 
[18:05:10.364]                             version <- utils::packageVersion("future")
[18:05:10.364]                         }
[18:05:10.364]                         else {
[18:05:10.364]                           version <- NULL
[18:05:10.364]                         }
[18:05:10.364]                         if (!has_future || version < "1.8.0") {
[18:05:10.364]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.364]                             "", base::R.version$version.string), 
[18:05:10.364]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:10.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:10.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.364]                               "release", "version")], collapse = " "), 
[18:05:10.364]                             hostname = base::Sys.info()[["nodename"]])
[18:05:10.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.364]                             info)
[18:05:10.364]                           info <- base::paste(info, collapse = "; ")
[18:05:10.364]                           if (!has_future) {
[18:05:10.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.364]                               info)
[18:05:10.364]                           }
[18:05:10.364]                           else {
[18:05:10.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.364]                               info, version)
[18:05:10.364]                           }
[18:05:10.364]                           base::stop(msg)
[18:05:10.364]                         }
[18:05:10.364]                       })
[18:05:10.364]                     }
[18:05:10.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.364]                     base::options(mc.cores = 1L)
[18:05:10.364]                   }
[18:05:10.364]                   ...future.strategy.old <- future::plan("list")
[18:05:10.364]                   options(future.plan = NULL)
[18:05:10.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.364]                 }
[18:05:10.364]                 ...future.workdir <- getwd()
[18:05:10.364]             }
[18:05:10.364]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.364]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.364]         }
[18:05:10.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.364]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.364]             base::names(...future.oldOptions))
[18:05:10.364]     }
[18:05:10.364]     if (FALSE) {
[18:05:10.364]     }
[18:05:10.364]     else {
[18:05:10.364]         if (TRUE) {
[18:05:10.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.364]                 open = "w")
[18:05:10.364]         }
[18:05:10.364]         else {
[18:05:10.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.364]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.364]         }
[18:05:10.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.364]             base::sink(type = "output", split = FALSE)
[18:05:10.364]             base::close(...future.stdout)
[18:05:10.364]         }, add = TRUE)
[18:05:10.364]     }
[18:05:10.364]     ...future.frame <- base::sys.nframe()
[18:05:10.364]     ...future.conditions <- base::list()
[18:05:10.364]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.364]     if (FALSE) {
[18:05:10.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.364]     }
[18:05:10.364]     ...future.result <- base::tryCatch({
[18:05:10.364]         base::withCallingHandlers({
[18:05:10.364]             ...future.value <- base::withVisible(base::local({
[18:05:10.364]                 ...future.makeSendCondition <- base::local({
[18:05:10.364]                   sendCondition <- NULL
[18:05:10.364]                   function(frame = 1L) {
[18:05:10.364]                     if (is.function(sendCondition)) 
[18:05:10.364]                       return(sendCondition)
[18:05:10.364]                     ns <- getNamespace("parallel")
[18:05:10.364]                     if (exists("sendData", mode = "function", 
[18:05:10.364]                       envir = ns)) {
[18:05:10.364]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.364]                         envir = ns)
[18:05:10.364]                       envir <- sys.frame(frame)
[18:05:10.364]                       master <- NULL
[18:05:10.364]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.364]                         !identical(envir, emptyenv())) {
[18:05:10.364]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.364]                           inherits = FALSE)) {
[18:05:10.364]                           master <- get("master", mode = "list", 
[18:05:10.364]                             envir = envir, inherits = FALSE)
[18:05:10.364]                           if (inherits(master, c("SOCKnode", 
[18:05:10.364]                             "SOCK0node"))) {
[18:05:10.364]                             sendCondition <<- function(cond) {
[18:05:10.364]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.364]                                 success = TRUE)
[18:05:10.364]                               parallel_sendData(master, data)
[18:05:10.364]                             }
[18:05:10.364]                             return(sendCondition)
[18:05:10.364]                           }
[18:05:10.364]                         }
[18:05:10.364]                         frame <- frame + 1L
[18:05:10.364]                         envir <- sys.frame(frame)
[18:05:10.364]                       }
[18:05:10.364]                     }
[18:05:10.364]                     sendCondition <<- function(cond) NULL
[18:05:10.364]                   }
[18:05:10.364]                 })
[18:05:10.364]                 withCallingHandlers({
[18:05:10.364]                   {
[18:05:10.364]                     f1$owner
[18:05:10.364]                   }
[18:05:10.364]                 }, immediateCondition = function(cond) {
[18:05:10.364]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.364]                   sendCondition(cond)
[18:05:10.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.364]                   {
[18:05:10.364]                     inherits <- base::inherits
[18:05:10.364]                     invokeRestart <- base::invokeRestart
[18:05:10.364]                     is.null <- base::is.null
[18:05:10.364]                     muffled <- FALSE
[18:05:10.364]                     if (inherits(cond, "message")) {
[18:05:10.364]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.364]                       if (muffled) 
[18:05:10.364]                         invokeRestart("muffleMessage")
[18:05:10.364]                     }
[18:05:10.364]                     else if (inherits(cond, "warning")) {
[18:05:10.364]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.364]                       if (muffled) 
[18:05:10.364]                         invokeRestart("muffleWarning")
[18:05:10.364]                     }
[18:05:10.364]                     else if (inherits(cond, "condition")) {
[18:05:10.364]                       if (!is.null(pattern)) {
[18:05:10.364]                         computeRestarts <- base::computeRestarts
[18:05:10.364]                         grepl <- base::grepl
[18:05:10.364]                         restarts <- computeRestarts(cond)
[18:05:10.364]                         for (restart in restarts) {
[18:05:10.364]                           name <- restart$name
[18:05:10.364]                           if (is.null(name)) 
[18:05:10.364]                             next
[18:05:10.364]                           if (!grepl(pattern, name)) 
[18:05:10.364]                             next
[18:05:10.364]                           invokeRestart(restart)
[18:05:10.364]                           muffled <- TRUE
[18:05:10.364]                           break
[18:05:10.364]                         }
[18:05:10.364]                       }
[18:05:10.364]                     }
[18:05:10.364]                     invisible(muffled)
[18:05:10.364]                   }
[18:05:10.364]                   muffleCondition(cond)
[18:05:10.364]                 })
[18:05:10.364]             }))
[18:05:10.364]             future::FutureResult(value = ...future.value$value, 
[18:05:10.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.364]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.364]                     ...future.globalenv.names))
[18:05:10.364]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.364]         }, condition = base::local({
[18:05:10.364]             c <- base::c
[18:05:10.364]             inherits <- base::inherits
[18:05:10.364]             invokeRestart <- base::invokeRestart
[18:05:10.364]             length <- base::length
[18:05:10.364]             list <- base::list
[18:05:10.364]             seq.int <- base::seq.int
[18:05:10.364]             signalCondition <- base::signalCondition
[18:05:10.364]             sys.calls <- base::sys.calls
[18:05:10.364]             `[[` <- base::`[[`
[18:05:10.364]             `+` <- base::`+`
[18:05:10.364]             `<<-` <- base::`<<-`
[18:05:10.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.364]                   3L)]
[18:05:10.364]             }
[18:05:10.364]             function(cond) {
[18:05:10.364]                 is_error <- inherits(cond, "error")
[18:05:10.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.364]                   NULL)
[18:05:10.364]                 if (is_error) {
[18:05:10.364]                   sessionInformation <- function() {
[18:05:10.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.364]                       search = base::search(), system = base::Sys.info())
[18:05:10.364]                   }
[18:05:10.364]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.364]                     cond$call), session = sessionInformation(), 
[18:05:10.364]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.364]                   signalCondition(cond)
[18:05:10.364]                 }
[18:05:10.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.364]                 "immediateCondition"))) {
[18:05:10.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.364]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.364]                   if (TRUE && !signal) {
[18:05:10.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.364]                     {
[18:05:10.364]                       inherits <- base::inherits
[18:05:10.364]                       invokeRestart <- base::invokeRestart
[18:05:10.364]                       is.null <- base::is.null
[18:05:10.364]                       muffled <- FALSE
[18:05:10.364]                       if (inherits(cond, "message")) {
[18:05:10.364]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.364]                         if (muffled) 
[18:05:10.364]                           invokeRestart("muffleMessage")
[18:05:10.364]                       }
[18:05:10.364]                       else if (inherits(cond, "warning")) {
[18:05:10.364]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.364]                         if (muffled) 
[18:05:10.364]                           invokeRestart("muffleWarning")
[18:05:10.364]                       }
[18:05:10.364]                       else if (inherits(cond, "condition")) {
[18:05:10.364]                         if (!is.null(pattern)) {
[18:05:10.364]                           computeRestarts <- base::computeRestarts
[18:05:10.364]                           grepl <- base::grepl
[18:05:10.364]                           restarts <- computeRestarts(cond)
[18:05:10.364]                           for (restart in restarts) {
[18:05:10.364]                             name <- restart$name
[18:05:10.364]                             if (is.null(name)) 
[18:05:10.364]                               next
[18:05:10.364]                             if (!grepl(pattern, name)) 
[18:05:10.364]                               next
[18:05:10.364]                             invokeRestart(restart)
[18:05:10.364]                             muffled <- TRUE
[18:05:10.364]                             break
[18:05:10.364]                           }
[18:05:10.364]                         }
[18:05:10.364]                       }
[18:05:10.364]                       invisible(muffled)
[18:05:10.364]                     }
[18:05:10.364]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.364]                   }
[18:05:10.364]                 }
[18:05:10.364]                 else {
[18:05:10.364]                   if (TRUE) {
[18:05:10.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.364]                     {
[18:05:10.364]                       inherits <- base::inherits
[18:05:10.364]                       invokeRestart <- base::invokeRestart
[18:05:10.364]                       is.null <- base::is.null
[18:05:10.364]                       muffled <- FALSE
[18:05:10.364]                       if (inherits(cond, "message")) {
[18:05:10.364]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.364]                         if (muffled) 
[18:05:10.364]                           invokeRestart("muffleMessage")
[18:05:10.364]                       }
[18:05:10.364]                       else if (inherits(cond, "warning")) {
[18:05:10.364]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.364]                         if (muffled) 
[18:05:10.364]                           invokeRestart("muffleWarning")
[18:05:10.364]                       }
[18:05:10.364]                       else if (inherits(cond, "condition")) {
[18:05:10.364]                         if (!is.null(pattern)) {
[18:05:10.364]                           computeRestarts <- base::computeRestarts
[18:05:10.364]                           grepl <- base::grepl
[18:05:10.364]                           restarts <- computeRestarts(cond)
[18:05:10.364]                           for (restart in restarts) {
[18:05:10.364]                             name <- restart$name
[18:05:10.364]                             if (is.null(name)) 
[18:05:10.364]                               next
[18:05:10.364]                             if (!grepl(pattern, name)) 
[18:05:10.364]                               next
[18:05:10.364]                             invokeRestart(restart)
[18:05:10.364]                             muffled <- TRUE
[18:05:10.364]                             break
[18:05:10.364]                           }
[18:05:10.364]                         }
[18:05:10.364]                       }
[18:05:10.364]                       invisible(muffled)
[18:05:10.364]                     }
[18:05:10.364]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.364]                   }
[18:05:10.364]                 }
[18:05:10.364]             }
[18:05:10.364]         }))
[18:05:10.364]     }, error = function(ex) {
[18:05:10.364]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.364]                 ...future.rng), started = ...future.startTime, 
[18:05:10.364]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.364]             version = "1.8"), class = "FutureResult")
[18:05:10.364]     }, finally = {
[18:05:10.364]         if (!identical(...future.workdir, getwd())) 
[18:05:10.364]             setwd(...future.workdir)
[18:05:10.364]         {
[18:05:10.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.364]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.364]             }
[18:05:10.364]             base::options(...future.oldOptions)
[18:05:10.364]             if (.Platform$OS.type == "windows") {
[18:05:10.364]                 old_names <- names(...future.oldEnvVars)
[18:05:10.364]                 envs <- base::Sys.getenv()
[18:05:10.364]                 names <- names(envs)
[18:05:10.364]                 common <- intersect(names, old_names)
[18:05:10.364]                 added <- setdiff(names, old_names)
[18:05:10.364]                 removed <- setdiff(old_names, names)
[18:05:10.364]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.364]                   envs[common]]
[18:05:10.364]                 NAMES <- toupper(changed)
[18:05:10.364]                 args <- list()
[18:05:10.364]                 for (kk in seq_along(NAMES)) {
[18:05:10.364]                   name <- changed[[kk]]
[18:05:10.364]                   NAME <- NAMES[[kk]]
[18:05:10.364]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.364]                     next
[18:05:10.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.364]                 }
[18:05:10.364]                 NAMES <- toupper(added)
[18:05:10.364]                 for (kk in seq_along(NAMES)) {
[18:05:10.364]                   name <- added[[kk]]
[18:05:10.364]                   NAME <- NAMES[[kk]]
[18:05:10.364]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.364]                     next
[18:05:10.364]                   args[[name]] <- ""
[18:05:10.364]                 }
[18:05:10.364]                 NAMES <- toupper(removed)
[18:05:10.364]                 for (kk in seq_along(NAMES)) {
[18:05:10.364]                   name <- removed[[kk]]
[18:05:10.364]                   NAME <- NAMES[[kk]]
[18:05:10.364]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.364]                     next
[18:05:10.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.364]                 }
[18:05:10.364]                 if (length(args) > 0) 
[18:05:10.364]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.364]             }
[18:05:10.364]             else {
[18:05:10.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.364]             }
[18:05:10.364]             {
[18:05:10.364]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.364]                   0L) {
[18:05:10.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.364]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.364]                   base::options(opts)
[18:05:10.364]                 }
[18:05:10.364]                 {
[18:05:10.364]                   {
[18:05:10.364]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.364]                     NULL
[18:05:10.364]                   }
[18:05:10.364]                   options(future.plan = NULL)
[18:05:10.364]                   if (is.na(NA_character_)) 
[18:05:10.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.364]                     .init = FALSE)
[18:05:10.364]                 }
[18:05:10.364]             }
[18:05:10.364]         }
[18:05:10.364]     })
[18:05:10.364]     if (TRUE) {
[18:05:10.364]         base::sink(type = "output", split = FALSE)
[18:05:10.364]         if (TRUE) {
[18:05:10.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.364]         }
[18:05:10.364]         else {
[18:05:10.364]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.364]         }
[18:05:10.364]         base::close(...future.stdout)
[18:05:10.364]         ...future.stdout <- NULL
[18:05:10.364]     }
[18:05:10.364]     ...future.result$conditions <- ...future.conditions
[18:05:10.364]     ...future.result$finished <- base::Sys.time()
[18:05:10.364]     ...future.result
[18:05:10.364] }
[18:05:10.369] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[18:05:10.373] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[18:05:10.430] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[18:05:10.430] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[18:05:10.431] MultisessionFuture started
[18:05:10.431] - Launch lazy future ... done
[18:05:10.431] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[18:05:10.432] result() for ClusterFuture ...
[18:05:10.432] receiveMessageFromWorker() for ClusterFuture ...
[18:05:10.432] - Validating connection of MultisessionFuture
[18:05:10.475] - received message: FutureResult
[18:05:10.476] - Received FutureResult
[18:05:10.476] - Erased future from FutureRegistry
[18:05:10.476] result() for ClusterFuture ...
[18:05:10.476] - result already collected: FutureResult
[18:05:10.477] result() for ClusterFuture ... done
[18:05:10.477] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:10.477] result() for ClusterFuture ... done
[18:05:10.477] result() for ClusterFuture ...
[18:05:10.478] - result already collected: FutureResult
[18:05:10.478] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 7eb5673d-359f-728d-ba93-f4dfbb7cb730
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[18:05:10.478] getGlobalsAndPackages() ...
[18:05:10.479] Searching for globals...
[18:05:10.481] - globals found: [3] ‘{’, ‘$’, ‘f1’
[18:05:10.481] Searching for globals ... DONE
[18:05:10.481] Resolving globals: FALSE
[18:05:10.486] The total size of the 1 globals is 1.57 MiB (1643448 bytes)
[18:05:10.487] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[18:05:10.487] - globals: [1] ‘f1’
[18:05:10.487] 
[18:05:10.488] getGlobalsAndPackages() ... DONE
[18:05:10.488] run() for ‘Future’ ...
[18:05:10.488] - state: ‘created’
[18:05:10.489] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.509] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.509] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.509]   - Field: ‘node’
[18:05:10.509]   - Field: ‘label’
[18:05:10.510]   - Field: ‘local’
[18:05:10.510]   - Field: ‘owner’
[18:05:10.510]   - Field: ‘envir’
[18:05:10.510]   - Field: ‘workers’
[18:05:10.511]   - Field: ‘packages’
[18:05:10.511]   - Field: ‘gc’
[18:05:10.511]   - Field: ‘conditions’
[18:05:10.511]   - Field: ‘persistent’
[18:05:10.511]   - Field: ‘expr’
[18:05:10.512]   - Field: ‘uuid’
[18:05:10.512]   - Field: ‘seed’
[18:05:10.512]   - Field: ‘version’
[18:05:10.512]   - Field: ‘result’
[18:05:10.513]   - Field: ‘asynchronous’
[18:05:10.513]   - Field: ‘calls’
[18:05:10.513]   - Field: ‘globals’
[18:05:10.513]   - Field: ‘stdout’
[18:05:10.513]   - Field: ‘earlySignal’
[18:05:10.514]   - Field: ‘lazy’
[18:05:10.514]   - Field: ‘state’
[18:05:10.514] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.514] - Launch lazy future ...
[18:05:10.515] Packages needed by the future expression (n = 0): <none>
[18:05:10.515] Packages needed by future strategies (n = 0): <none>
[18:05:10.516] {
[18:05:10.516]     {
[18:05:10.516]         {
[18:05:10.516]             ...future.startTime <- base::Sys.time()
[18:05:10.516]             {
[18:05:10.516]                 {
[18:05:10.516]                   {
[18:05:10.516]                     {
[18:05:10.516]                       base::local({
[18:05:10.516]                         has_future <- base::requireNamespace("future", 
[18:05:10.516]                           quietly = TRUE)
[18:05:10.516]                         if (has_future) {
[18:05:10.516]                           ns <- base::getNamespace("future")
[18:05:10.516]                           version <- ns[[".package"]][["version"]]
[18:05:10.516]                           if (is.null(version)) 
[18:05:10.516]                             version <- utils::packageVersion("future")
[18:05:10.516]                         }
[18:05:10.516]                         else {
[18:05:10.516]                           version <- NULL
[18:05:10.516]                         }
[18:05:10.516]                         if (!has_future || version < "1.8.0") {
[18:05:10.516]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.516]                             "", base::R.version$version.string), 
[18:05:10.516]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:10.516]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:10.516]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.516]                               "release", "version")], collapse = " "), 
[18:05:10.516]                             hostname = base::Sys.info()[["nodename"]])
[18:05:10.516]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.516]                             info)
[18:05:10.516]                           info <- base::paste(info, collapse = "; ")
[18:05:10.516]                           if (!has_future) {
[18:05:10.516]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.516]                               info)
[18:05:10.516]                           }
[18:05:10.516]                           else {
[18:05:10.516]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.516]                               info, version)
[18:05:10.516]                           }
[18:05:10.516]                           base::stop(msg)
[18:05:10.516]                         }
[18:05:10.516]                       })
[18:05:10.516]                     }
[18:05:10.516]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.516]                     base::options(mc.cores = 1L)
[18:05:10.516]                   }
[18:05:10.516]                   ...future.strategy.old <- future::plan("list")
[18:05:10.516]                   options(future.plan = NULL)
[18:05:10.516]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.516]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.516]                 }
[18:05:10.516]                 ...future.workdir <- getwd()
[18:05:10.516]             }
[18:05:10.516]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.516]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.516]         }
[18:05:10.516]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.516]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.516]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.516]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.516]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.516]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.516]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.516]             base::names(...future.oldOptions))
[18:05:10.516]     }
[18:05:10.516]     if (FALSE) {
[18:05:10.516]     }
[18:05:10.516]     else {
[18:05:10.516]         if (TRUE) {
[18:05:10.516]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.516]                 open = "w")
[18:05:10.516]         }
[18:05:10.516]         else {
[18:05:10.516]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.516]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.516]         }
[18:05:10.516]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.516]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.516]             base::sink(type = "output", split = FALSE)
[18:05:10.516]             base::close(...future.stdout)
[18:05:10.516]         }, add = TRUE)
[18:05:10.516]     }
[18:05:10.516]     ...future.frame <- base::sys.nframe()
[18:05:10.516]     ...future.conditions <- base::list()
[18:05:10.516]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.516]     if (FALSE) {
[18:05:10.516]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.516]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.516]     }
[18:05:10.516]     ...future.result <- base::tryCatch({
[18:05:10.516]         base::withCallingHandlers({
[18:05:10.516]             ...future.value <- base::withVisible(base::local({
[18:05:10.516]                 ...future.makeSendCondition <- base::local({
[18:05:10.516]                   sendCondition <- NULL
[18:05:10.516]                   function(frame = 1L) {
[18:05:10.516]                     if (is.function(sendCondition)) 
[18:05:10.516]                       return(sendCondition)
[18:05:10.516]                     ns <- getNamespace("parallel")
[18:05:10.516]                     if (exists("sendData", mode = "function", 
[18:05:10.516]                       envir = ns)) {
[18:05:10.516]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.516]                         envir = ns)
[18:05:10.516]                       envir <- sys.frame(frame)
[18:05:10.516]                       master <- NULL
[18:05:10.516]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.516]                         !identical(envir, emptyenv())) {
[18:05:10.516]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.516]                           inherits = FALSE)) {
[18:05:10.516]                           master <- get("master", mode = "list", 
[18:05:10.516]                             envir = envir, inherits = FALSE)
[18:05:10.516]                           if (inherits(master, c("SOCKnode", 
[18:05:10.516]                             "SOCK0node"))) {
[18:05:10.516]                             sendCondition <<- function(cond) {
[18:05:10.516]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.516]                                 success = TRUE)
[18:05:10.516]                               parallel_sendData(master, data)
[18:05:10.516]                             }
[18:05:10.516]                             return(sendCondition)
[18:05:10.516]                           }
[18:05:10.516]                         }
[18:05:10.516]                         frame <- frame + 1L
[18:05:10.516]                         envir <- sys.frame(frame)
[18:05:10.516]                       }
[18:05:10.516]                     }
[18:05:10.516]                     sendCondition <<- function(cond) NULL
[18:05:10.516]                   }
[18:05:10.516]                 })
[18:05:10.516]                 withCallingHandlers({
[18:05:10.516]                   {
[18:05:10.516]                     f1$owner
[18:05:10.516]                   }
[18:05:10.516]                 }, immediateCondition = function(cond) {
[18:05:10.516]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.516]                   sendCondition(cond)
[18:05:10.516]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.516]                   {
[18:05:10.516]                     inherits <- base::inherits
[18:05:10.516]                     invokeRestart <- base::invokeRestart
[18:05:10.516]                     is.null <- base::is.null
[18:05:10.516]                     muffled <- FALSE
[18:05:10.516]                     if (inherits(cond, "message")) {
[18:05:10.516]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.516]                       if (muffled) 
[18:05:10.516]                         invokeRestart("muffleMessage")
[18:05:10.516]                     }
[18:05:10.516]                     else if (inherits(cond, "warning")) {
[18:05:10.516]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.516]                       if (muffled) 
[18:05:10.516]                         invokeRestart("muffleWarning")
[18:05:10.516]                     }
[18:05:10.516]                     else if (inherits(cond, "condition")) {
[18:05:10.516]                       if (!is.null(pattern)) {
[18:05:10.516]                         computeRestarts <- base::computeRestarts
[18:05:10.516]                         grepl <- base::grepl
[18:05:10.516]                         restarts <- computeRestarts(cond)
[18:05:10.516]                         for (restart in restarts) {
[18:05:10.516]                           name <- restart$name
[18:05:10.516]                           if (is.null(name)) 
[18:05:10.516]                             next
[18:05:10.516]                           if (!grepl(pattern, name)) 
[18:05:10.516]                             next
[18:05:10.516]                           invokeRestart(restart)
[18:05:10.516]                           muffled <- TRUE
[18:05:10.516]                           break
[18:05:10.516]                         }
[18:05:10.516]                       }
[18:05:10.516]                     }
[18:05:10.516]                     invisible(muffled)
[18:05:10.516]                   }
[18:05:10.516]                   muffleCondition(cond)
[18:05:10.516]                 })
[18:05:10.516]             }))
[18:05:10.516]             future::FutureResult(value = ...future.value$value, 
[18:05:10.516]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.516]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.516]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.516]                     ...future.globalenv.names))
[18:05:10.516]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.516]         }, condition = base::local({
[18:05:10.516]             c <- base::c
[18:05:10.516]             inherits <- base::inherits
[18:05:10.516]             invokeRestart <- base::invokeRestart
[18:05:10.516]             length <- base::length
[18:05:10.516]             list <- base::list
[18:05:10.516]             seq.int <- base::seq.int
[18:05:10.516]             signalCondition <- base::signalCondition
[18:05:10.516]             sys.calls <- base::sys.calls
[18:05:10.516]             `[[` <- base::`[[`
[18:05:10.516]             `+` <- base::`+`
[18:05:10.516]             `<<-` <- base::`<<-`
[18:05:10.516]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.516]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.516]                   3L)]
[18:05:10.516]             }
[18:05:10.516]             function(cond) {
[18:05:10.516]                 is_error <- inherits(cond, "error")
[18:05:10.516]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.516]                   NULL)
[18:05:10.516]                 if (is_error) {
[18:05:10.516]                   sessionInformation <- function() {
[18:05:10.516]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.516]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.516]                       search = base::search(), system = base::Sys.info())
[18:05:10.516]                   }
[18:05:10.516]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.516]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.516]                     cond$call), session = sessionInformation(), 
[18:05:10.516]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.516]                   signalCondition(cond)
[18:05:10.516]                 }
[18:05:10.516]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.516]                 "immediateCondition"))) {
[18:05:10.516]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.516]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.516]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.516]                   if (TRUE && !signal) {
[18:05:10.516]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.516]                     {
[18:05:10.516]                       inherits <- base::inherits
[18:05:10.516]                       invokeRestart <- base::invokeRestart
[18:05:10.516]                       is.null <- base::is.null
[18:05:10.516]                       muffled <- FALSE
[18:05:10.516]                       if (inherits(cond, "message")) {
[18:05:10.516]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.516]                         if (muffled) 
[18:05:10.516]                           invokeRestart("muffleMessage")
[18:05:10.516]                       }
[18:05:10.516]                       else if (inherits(cond, "warning")) {
[18:05:10.516]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.516]                         if (muffled) 
[18:05:10.516]                           invokeRestart("muffleWarning")
[18:05:10.516]                       }
[18:05:10.516]                       else if (inherits(cond, "condition")) {
[18:05:10.516]                         if (!is.null(pattern)) {
[18:05:10.516]                           computeRestarts <- base::computeRestarts
[18:05:10.516]                           grepl <- base::grepl
[18:05:10.516]                           restarts <- computeRestarts(cond)
[18:05:10.516]                           for (restart in restarts) {
[18:05:10.516]                             name <- restart$name
[18:05:10.516]                             if (is.null(name)) 
[18:05:10.516]                               next
[18:05:10.516]                             if (!grepl(pattern, name)) 
[18:05:10.516]                               next
[18:05:10.516]                             invokeRestart(restart)
[18:05:10.516]                             muffled <- TRUE
[18:05:10.516]                             break
[18:05:10.516]                           }
[18:05:10.516]                         }
[18:05:10.516]                       }
[18:05:10.516]                       invisible(muffled)
[18:05:10.516]                     }
[18:05:10.516]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.516]                   }
[18:05:10.516]                 }
[18:05:10.516]                 else {
[18:05:10.516]                   if (TRUE) {
[18:05:10.516]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.516]                     {
[18:05:10.516]                       inherits <- base::inherits
[18:05:10.516]                       invokeRestart <- base::invokeRestart
[18:05:10.516]                       is.null <- base::is.null
[18:05:10.516]                       muffled <- FALSE
[18:05:10.516]                       if (inherits(cond, "message")) {
[18:05:10.516]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.516]                         if (muffled) 
[18:05:10.516]                           invokeRestart("muffleMessage")
[18:05:10.516]                       }
[18:05:10.516]                       else if (inherits(cond, "warning")) {
[18:05:10.516]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.516]                         if (muffled) 
[18:05:10.516]                           invokeRestart("muffleWarning")
[18:05:10.516]                       }
[18:05:10.516]                       else if (inherits(cond, "condition")) {
[18:05:10.516]                         if (!is.null(pattern)) {
[18:05:10.516]                           computeRestarts <- base::computeRestarts
[18:05:10.516]                           grepl <- base::grepl
[18:05:10.516]                           restarts <- computeRestarts(cond)
[18:05:10.516]                           for (restart in restarts) {
[18:05:10.516]                             name <- restart$name
[18:05:10.516]                             if (is.null(name)) 
[18:05:10.516]                               next
[18:05:10.516]                             if (!grepl(pattern, name)) 
[18:05:10.516]                               next
[18:05:10.516]                             invokeRestart(restart)
[18:05:10.516]                             muffled <- TRUE
[18:05:10.516]                             break
[18:05:10.516]                           }
[18:05:10.516]                         }
[18:05:10.516]                       }
[18:05:10.516]                       invisible(muffled)
[18:05:10.516]                     }
[18:05:10.516]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.516]                   }
[18:05:10.516]                 }
[18:05:10.516]             }
[18:05:10.516]         }))
[18:05:10.516]     }, error = function(ex) {
[18:05:10.516]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.516]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.516]                 ...future.rng), started = ...future.startTime, 
[18:05:10.516]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.516]             version = "1.8"), class = "FutureResult")
[18:05:10.516]     }, finally = {
[18:05:10.516]         if (!identical(...future.workdir, getwd())) 
[18:05:10.516]             setwd(...future.workdir)
[18:05:10.516]         {
[18:05:10.516]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.516]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.516]             }
[18:05:10.516]             base::options(...future.oldOptions)
[18:05:10.516]             if (.Platform$OS.type == "windows") {
[18:05:10.516]                 old_names <- names(...future.oldEnvVars)
[18:05:10.516]                 envs <- base::Sys.getenv()
[18:05:10.516]                 names <- names(envs)
[18:05:10.516]                 common <- intersect(names, old_names)
[18:05:10.516]                 added <- setdiff(names, old_names)
[18:05:10.516]                 removed <- setdiff(old_names, names)
[18:05:10.516]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.516]                   envs[common]]
[18:05:10.516]                 NAMES <- toupper(changed)
[18:05:10.516]                 args <- list()
[18:05:10.516]                 for (kk in seq_along(NAMES)) {
[18:05:10.516]                   name <- changed[[kk]]
[18:05:10.516]                   NAME <- NAMES[[kk]]
[18:05:10.516]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.516]                     next
[18:05:10.516]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.516]                 }
[18:05:10.516]                 NAMES <- toupper(added)
[18:05:10.516]                 for (kk in seq_along(NAMES)) {
[18:05:10.516]                   name <- added[[kk]]
[18:05:10.516]                   NAME <- NAMES[[kk]]
[18:05:10.516]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.516]                     next
[18:05:10.516]                   args[[name]] <- ""
[18:05:10.516]                 }
[18:05:10.516]                 NAMES <- toupper(removed)
[18:05:10.516]                 for (kk in seq_along(NAMES)) {
[18:05:10.516]                   name <- removed[[kk]]
[18:05:10.516]                   NAME <- NAMES[[kk]]
[18:05:10.516]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.516]                     next
[18:05:10.516]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.516]                 }
[18:05:10.516]                 if (length(args) > 0) 
[18:05:10.516]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.516]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.516]             }
[18:05:10.516]             else {
[18:05:10.516]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.516]             }
[18:05:10.516]             {
[18:05:10.516]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.516]                   0L) {
[18:05:10.516]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.516]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.516]                   base::options(opts)
[18:05:10.516]                 }
[18:05:10.516]                 {
[18:05:10.516]                   {
[18:05:10.516]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.516]                     NULL
[18:05:10.516]                   }
[18:05:10.516]                   options(future.plan = NULL)
[18:05:10.516]                   if (is.na(NA_character_)) 
[18:05:10.516]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.516]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.516]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.516]                     .init = FALSE)
[18:05:10.516]                 }
[18:05:10.516]             }
[18:05:10.516]         }
[18:05:10.516]     })
[18:05:10.516]     if (TRUE) {
[18:05:10.516]         base::sink(type = "output", split = FALSE)
[18:05:10.516]         if (TRUE) {
[18:05:10.516]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.516]         }
[18:05:10.516]         else {
[18:05:10.516]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.516]         }
[18:05:10.516]         base::close(...future.stdout)
[18:05:10.516]         ...future.stdout <- NULL
[18:05:10.516]     }
[18:05:10.516]     ...future.result$conditions <- ...future.conditions
[18:05:10.516]     ...future.result$finished <- base::Sys.time()
[18:05:10.516]     ...future.result
[18:05:10.516] }
[18:05:10.522] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[18:05:10.526] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[18:05:10.591] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[18:05:10.591] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[18:05:10.592] MultisessionFuture started
[18:05:10.592] - Launch lazy future ... done
[18:05:10.592] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[18:05:10.593] result() for ClusterFuture ...
[18:05:10.593] receiveMessageFromWorker() for ClusterFuture ...
[18:05:10.593] - Validating connection of MultisessionFuture
[18:05:10.636] - received message: FutureResult
[18:05:10.637] - Received FutureResult
[18:05:10.637] - Erased future from FutureRegistry
[18:05:10.637] result() for ClusterFuture ...
[18:05:10.637] - result already collected: FutureResult
[18:05:10.638] result() for ClusterFuture ... done
[18:05:10.638] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:10.638] result() for ClusterFuture ... done
[18:05:10.638] result() for ClusterFuture ...
[18:05:10.638] - result already collected: FutureResult
[18:05:10.639] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 7eb5673d-359f-728d-ba93-f4dfbb7cb730
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[18:05:10.639] getGlobalsAndPackages() ...
[18:05:10.639] Searching for globals...
[18:05:10.643] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[18:05:10.643] Searching for globals ... DONE
[18:05:10.644] Resolving globals: FALSE
[18:05:10.649] The total size of the 1 globals is 1.57 MiB (1646384 bytes)
[18:05:10.650] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[18:05:10.650] - globals: [1] ‘f1’
[18:05:10.650] 
[18:05:10.650] getGlobalsAndPackages() ... DONE
[18:05:10.651] run() for ‘Future’ ...
[18:05:10.651] - state: ‘created’
[18:05:10.651] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.674] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.675] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.675]   - Field: ‘node’
[18:05:10.675]   - Field: ‘label’
[18:05:10.676]   - Field: ‘local’
[18:05:10.676]   - Field: ‘owner’
[18:05:10.676]   - Field: ‘envir’
[18:05:10.676]   - Field: ‘workers’
[18:05:10.677]   - Field: ‘packages’
[18:05:10.677]   - Field: ‘gc’
[18:05:10.677]   - Field: ‘conditions’
[18:05:10.677]   - Field: ‘persistent’
[18:05:10.677]   - Field: ‘expr’
[18:05:10.678]   - Field: ‘uuid’
[18:05:10.678]   - Field: ‘seed’
[18:05:10.678]   - Field: ‘version’
[18:05:10.678]   - Field: ‘result’
[18:05:10.679]   - Field: ‘asynchronous’
[18:05:10.679]   - Field: ‘calls’
[18:05:10.679]   - Field: ‘globals’
[18:05:10.679]   - Field: ‘stdout’
[18:05:10.680]   - Field: ‘earlySignal’
[18:05:10.680]   - Field: ‘lazy’
[18:05:10.680]   - Field: ‘state’
[18:05:10.680] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.680] - Launch lazy future ...
[18:05:10.681] Packages needed by the future expression (n = 0): <none>
[18:05:10.681] Packages needed by future strategies (n = 0): <none>
[18:05:10.682] {
[18:05:10.682]     {
[18:05:10.682]         {
[18:05:10.682]             ...future.startTime <- base::Sys.time()
[18:05:10.682]             {
[18:05:10.682]                 {
[18:05:10.682]                   {
[18:05:10.682]                     {
[18:05:10.682]                       base::local({
[18:05:10.682]                         has_future <- base::requireNamespace("future", 
[18:05:10.682]                           quietly = TRUE)
[18:05:10.682]                         if (has_future) {
[18:05:10.682]                           ns <- base::getNamespace("future")
[18:05:10.682]                           version <- ns[[".package"]][["version"]]
[18:05:10.682]                           if (is.null(version)) 
[18:05:10.682]                             version <- utils::packageVersion("future")
[18:05:10.682]                         }
[18:05:10.682]                         else {
[18:05:10.682]                           version <- NULL
[18:05:10.682]                         }
[18:05:10.682]                         if (!has_future || version < "1.8.0") {
[18:05:10.682]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.682]                             "", base::R.version$version.string), 
[18:05:10.682]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:10.682]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:10.682]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.682]                               "release", "version")], collapse = " "), 
[18:05:10.682]                             hostname = base::Sys.info()[["nodename"]])
[18:05:10.682]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.682]                             info)
[18:05:10.682]                           info <- base::paste(info, collapse = "; ")
[18:05:10.682]                           if (!has_future) {
[18:05:10.682]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.682]                               info)
[18:05:10.682]                           }
[18:05:10.682]                           else {
[18:05:10.682]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.682]                               info, version)
[18:05:10.682]                           }
[18:05:10.682]                           base::stop(msg)
[18:05:10.682]                         }
[18:05:10.682]                       })
[18:05:10.682]                     }
[18:05:10.682]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.682]                     base::options(mc.cores = 1L)
[18:05:10.682]                   }
[18:05:10.682]                   ...future.strategy.old <- future::plan("list")
[18:05:10.682]                   options(future.plan = NULL)
[18:05:10.682]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.682]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.682]                 }
[18:05:10.682]                 ...future.workdir <- getwd()
[18:05:10.682]             }
[18:05:10.682]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.682]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.682]         }
[18:05:10.682]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.682]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.682]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.682]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.682]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.682]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.682]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.682]             base::names(...future.oldOptions))
[18:05:10.682]     }
[18:05:10.682]     if (FALSE) {
[18:05:10.682]     }
[18:05:10.682]     else {
[18:05:10.682]         if (TRUE) {
[18:05:10.682]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.682]                 open = "w")
[18:05:10.682]         }
[18:05:10.682]         else {
[18:05:10.682]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.682]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.682]         }
[18:05:10.682]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.682]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.682]             base::sink(type = "output", split = FALSE)
[18:05:10.682]             base::close(...future.stdout)
[18:05:10.682]         }, add = TRUE)
[18:05:10.682]     }
[18:05:10.682]     ...future.frame <- base::sys.nframe()
[18:05:10.682]     ...future.conditions <- base::list()
[18:05:10.682]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.682]     if (FALSE) {
[18:05:10.682]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.682]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.682]     }
[18:05:10.682]     ...future.result <- base::tryCatch({
[18:05:10.682]         base::withCallingHandlers({
[18:05:10.682]             ...future.value <- base::withVisible(base::local({
[18:05:10.682]                 ...future.makeSendCondition <- base::local({
[18:05:10.682]                   sendCondition <- NULL
[18:05:10.682]                   function(frame = 1L) {
[18:05:10.682]                     if (is.function(sendCondition)) 
[18:05:10.682]                       return(sendCondition)
[18:05:10.682]                     ns <- getNamespace("parallel")
[18:05:10.682]                     if (exists("sendData", mode = "function", 
[18:05:10.682]                       envir = ns)) {
[18:05:10.682]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.682]                         envir = ns)
[18:05:10.682]                       envir <- sys.frame(frame)
[18:05:10.682]                       master <- NULL
[18:05:10.682]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.682]                         !identical(envir, emptyenv())) {
[18:05:10.682]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.682]                           inherits = FALSE)) {
[18:05:10.682]                           master <- get("master", mode = "list", 
[18:05:10.682]                             envir = envir, inherits = FALSE)
[18:05:10.682]                           if (inherits(master, c("SOCKnode", 
[18:05:10.682]                             "SOCK0node"))) {
[18:05:10.682]                             sendCondition <<- function(cond) {
[18:05:10.682]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.682]                                 success = TRUE)
[18:05:10.682]                               parallel_sendData(master, data)
[18:05:10.682]                             }
[18:05:10.682]                             return(sendCondition)
[18:05:10.682]                           }
[18:05:10.682]                         }
[18:05:10.682]                         frame <- frame + 1L
[18:05:10.682]                         envir <- sys.frame(frame)
[18:05:10.682]                       }
[18:05:10.682]                     }
[18:05:10.682]                     sendCondition <<- function(cond) NULL
[18:05:10.682]                   }
[18:05:10.682]                 })
[18:05:10.682]                 withCallingHandlers({
[18:05:10.682]                   {
[18:05:10.682]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[18:05:10.682]                     "not-owner"
[18:05:10.682]                   }
[18:05:10.682]                 }, immediateCondition = function(cond) {
[18:05:10.682]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.682]                   sendCondition(cond)
[18:05:10.682]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.682]                   {
[18:05:10.682]                     inherits <- base::inherits
[18:05:10.682]                     invokeRestart <- base::invokeRestart
[18:05:10.682]                     is.null <- base::is.null
[18:05:10.682]                     muffled <- FALSE
[18:05:10.682]                     if (inherits(cond, "message")) {
[18:05:10.682]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.682]                       if (muffled) 
[18:05:10.682]                         invokeRestart("muffleMessage")
[18:05:10.682]                     }
[18:05:10.682]                     else if (inherits(cond, "warning")) {
[18:05:10.682]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.682]                       if (muffled) 
[18:05:10.682]                         invokeRestart("muffleWarning")
[18:05:10.682]                     }
[18:05:10.682]                     else if (inherits(cond, "condition")) {
[18:05:10.682]                       if (!is.null(pattern)) {
[18:05:10.682]                         computeRestarts <- base::computeRestarts
[18:05:10.682]                         grepl <- base::grepl
[18:05:10.682]                         restarts <- computeRestarts(cond)
[18:05:10.682]                         for (restart in restarts) {
[18:05:10.682]                           name <- restart$name
[18:05:10.682]                           if (is.null(name)) 
[18:05:10.682]                             next
[18:05:10.682]                           if (!grepl(pattern, name)) 
[18:05:10.682]                             next
[18:05:10.682]                           invokeRestart(restart)
[18:05:10.682]                           muffled <- TRUE
[18:05:10.682]                           break
[18:05:10.682]                         }
[18:05:10.682]                       }
[18:05:10.682]                     }
[18:05:10.682]                     invisible(muffled)
[18:05:10.682]                   }
[18:05:10.682]                   muffleCondition(cond)
[18:05:10.682]                 })
[18:05:10.682]             }))
[18:05:10.682]             future::FutureResult(value = ...future.value$value, 
[18:05:10.682]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.682]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.682]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.682]                     ...future.globalenv.names))
[18:05:10.682]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.682]         }, condition = base::local({
[18:05:10.682]             c <- base::c
[18:05:10.682]             inherits <- base::inherits
[18:05:10.682]             invokeRestart <- base::invokeRestart
[18:05:10.682]             length <- base::length
[18:05:10.682]             list <- base::list
[18:05:10.682]             seq.int <- base::seq.int
[18:05:10.682]             signalCondition <- base::signalCondition
[18:05:10.682]             sys.calls <- base::sys.calls
[18:05:10.682]             `[[` <- base::`[[`
[18:05:10.682]             `+` <- base::`+`
[18:05:10.682]             `<<-` <- base::`<<-`
[18:05:10.682]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.682]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.682]                   3L)]
[18:05:10.682]             }
[18:05:10.682]             function(cond) {
[18:05:10.682]                 is_error <- inherits(cond, "error")
[18:05:10.682]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.682]                   NULL)
[18:05:10.682]                 if (is_error) {
[18:05:10.682]                   sessionInformation <- function() {
[18:05:10.682]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.682]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.682]                       search = base::search(), system = base::Sys.info())
[18:05:10.682]                   }
[18:05:10.682]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.682]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.682]                     cond$call), session = sessionInformation(), 
[18:05:10.682]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.682]                   signalCondition(cond)
[18:05:10.682]                 }
[18:05:10.682]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.682]                 "immediateCondition"))) {
[18:05:10.682]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.682]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.682]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.682]                   if (TRUE && !signal) {
[18:05:10.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.682]                     {
[18:05:10.682]                       inherits <- base::inherits
[18:05:10.682]                       invokeRestart <- base::invokeRestart
[18:05:10.682]                       is.null <- base::is.null
[18:05:10.682]                       muffled <- FALSE
[18:05:10.682]                       if (inherits(cond, "message")) {
[18:05:10.682]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.682]                         if (muffled) 
[18:05:10.682]                           invokeRestart("muffleMessage")
[18:05:10.682]                       }
[18:05:10.682]                       else if (inherits(cond, "warning")) {
[18:05:10.682]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.682]                         if (muffled) 
[18:05:10.682]                           invokeRestart("muffleWarning")
[18:05:10.682]                       }
[18:05:10.682]                       else if (inherits(cond, "condition")) {
[18:05:10.682]                         if (!is.null(pattern)) {
[18:05:10.682]                           computeRestarts <- base::computeRestarts
[18:05:10.682]                           grepl <- base::grepl
[18:05:10.682]                           restarts <- computeRestarts(cond)
[18:05:10.682]                           for (restart in restarts) {
[18:05:10.682]                             name <- restart$name
[18:05:10.682]                             if (is.null(name)) 
[18:05:10.682]                               next
[18:05:10.682]                             if (!grepl(pattern, name)) 
[18:05:10.682]                               next
[18:05:10.682]                             invokeRestart(restart)
[18:05:10.682]                             muffled <- TRUE
[18:05:10.682]                             break
[18:05:10.682]                           }
[18:05:10.682]                         }
[18:05:10.682]                       }
[18:05:10.682]                       invisible(muffled)
[18:05:10.682]                     }
[18:05:10.682]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.682]                   }
[18:05:10.682]                 }
[18:05:10.682]                 else {
[18:05:10.682]                   if (TRUE) {
[18:05:10.682]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.682]                     {
[18:05:10.682]                       inherits <- base::inherits
[18:05:10.682]                       invokeRestart <- base::invokeRestart
[18:05:10.682]                       is.null <- base::is.null
[18:05:10.682]                       muffled <- FALSE
[18:05:10.682]                       if (inherits(cond, "message")) {
[18:05:10.682]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.682]                         if (muffled) 
[18:05:10.682]                           invokeRestart("muffleMessage")
[18:05:10.682]                       }
[18:05:10.682]                       else if (inherits(cond, "warning")) {
[18:05:10.682]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.682]                         if (muffled) 
[18:05:10.682]                           invokeRestart("muffleWarning")
[18:05:10.682]                       }
[18:05:10.682]                       else if (inherits(cond, "condition")) {
[18:05:10.682]                         if (!is.null(pattern)) {
[18:05:10.682]                           computeRestarts <- base::computeRestarts
[18:05:10.682]                           grepl <- base::grepl
[18:05:10.682]                           restarts <- computeRestarts(cond)
[18:05:10.682]                           for (restart in restarts) {
[18:05:10.682]                             name <- restart$name
[18:05:10.682]                             if (is.null(name)) 
[18:05:10.682]                               next
[18:05:10.682]                             if (!grepl(pattern, name)) 
[18:05:10.682]                               next
[18:05:10.682]                             invokeRestart(restart)
[18:05:10.682]                             muffled <- TRUE
[18:05:10.682]                             break
[18:05:10.682]                           }
[18:05:10.682]                         }
[18:05:10.682]                       }
[18:05:10.682]                       invisible(muffled)
[18:05:10.682]                     }
[18:05:10.682]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.682]                   }
[18:05:10.682]                 }
[18:05:10.682]             }
[18:05:10.682]         }))
[18:05:10.682]     }, error = function(ex) {
[18:05:10.682]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.682]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.682]                 ...future.rng), started = ...future.startTime, 
[18:05:10.682]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.682]             version = "1.8"), class = "FutureResult")
[18:05:10.682]     }, finally = {
[18:05:10.682]         if (!identical(...future.workdir, getwd())) 
[18:05:10.682]             setwd(...future.workdir)
[18:05:10.682]         {
[18:05:10.682]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.682]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.682]             }
[18:05:10.682]             base::options(...future.oldOptions)
[18:05:10.682]             if (.Platform$OS.type == "windows") {
[18:05:10.682]                 old_names <- names(...future.oldEnvVars)
[18:05:10.682]                 envs <- base::Sys.getenv()
[18:05:10.682]                 names <- names(envs)
[18:05:10.682]                 common <- intersect(names, old_names)
[18:05:10.682]                 added <- setdiff(names, old_names)
[18:05:10.682]                 removed <- setdiff(old_names, names)
[18:05:10.682]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.682]                   envs[common]]
[18:05:10.682]                 NAMES <- toupper(changed)
[18:05:10.682]                 args <- list()
[18:05:10.682]                 for (kk in seq_along(NAMES)) {
[18:05:10.682]                   name <- changed[[kk]]
[18:05:10.682]                   NAME <- NAMES[[kk]]
[18:05:10.682]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.682]                     next
[18:05:10.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.682]                 }
[18:05:10.682]                 NAMES <- toupper(added)
[18:05:10.682]                 for (kk in seq_along(NAMES)) {
[18:05:10.682]                   name <- added[[kk]]
[18:05:10.682]                   NAME <- NAMES[[kk]]
[18:05:10.682]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.682]                     next
[18:05:10.682]                   args[[name]] <- ""
[18:05:10.682]                 }
[18:05:10.682]                 NAMES <- toupper(removed)
[18:05:10.682]                 for (kk in seq_along(NAMES)) {
[18:05:10.682]                   name <- removed[[kk]]
[18:05:10.682]                   NAME <- NAMES[[kk]]
[18:05:10.682]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.682]                     next
[18:05:10.682]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.682]                 }
[18:05:10.682]                 if (length(args) > 0) 
[18:05:10.682]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.682]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.682]             }
[18:05:10.682]             else {
[18:05:10.682]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.682]             }
[18:05:10.682]             {
[18:05:10.682]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.682]                   0L) {
[18:05:10.682]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.682]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.682]                   base::options(opts)
[18:05:10.682]                 }
[18:05:10.682]                 {
[18:05:10.682]                   {
[18:05:10.682]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.682]                     NULL
[18:05:10.682]                   }
[18:05:10.682]                   options(future.plan = NULL)
[18:05:10.682]                   if (is.na(NA_character_)) 
[18:05:10.682]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.682]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.682]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.682]                     .init = FALSE)
[18:05:10.682]                 }
[18:05:10.682]             }
[18:05:10.682]         }
[18:05:10.682]     })
[18:05:10.682]     if (TRUE) {
[18:05:10.682]         base::sink(type = "output", split = FALSE)
[18:05:10.682]         if (TRUE) {
[18:05:10.682]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.682]         }
[18:05:10.682]         else {
[18:05:10.682]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.682]         }
[18:05:10.682]         base::close(...future.stdout)
[18:05:10.682]         ...future.stdout <- NULL
[18:05:10.682]     }
[18:05:10.682]     ...future.result$conditions <- ...future.conditions
[18:05:10.682]     ...future.result$finished <- base::Sys.time()
[18:05:10.682]     ...future.result
[18:05:10.682] }
[18:05:10.688] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[18:05:10.692] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[18:05:10.753] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[18:05:10.753] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[18:05:10.754] MultisessionFuture started
[18:05:10.754] - Launch lazy future ... done
[18:05:10.754] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[18:05:10.755] result() for ClusterFuture ...
[18:05:10.755] receiveMessageFromWorker() for ClusterFuture ...
[18:05:10.755] - Validating connection of MultisessionFuture
[18:05:10.798] - received message: FutureResult
[18:05:10.799] - Received FutureResult
[18:05:10.799] - Erased future from FutureRegistry
[18:05:10.799] result() for ClusterFuture ...
[18:05:10.799] - result already collected: FutureResult
[18:05:10.800] result() for ClusterFuture ... done
[18:05:10.800] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:10.800] result() for ClusterFuture ... done
[18:05:10.800] result() for ClusterFuture ...
[18:05:10.801] - result already collected: FutureResult
[18:05:10.801] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[18:05:10.802] getGlobalsAndPackages() ...
[18:05:10.802] Searching for globals...
[18:05:10.803] - globals found: [1] ‘{’
[18:05:10.804] Searching for globals ... DONE
[18:05:10.804] Resolving globals: FALSE
[18:05:10.804] 
[18:05:10.805] 
[18:05:10.805] getGlobalsAndPackages() ... DONE
[18:05:10.805] run() for ‘Future’ ...
[18:05:10.806] - state: ‘created’
[18:05:10.806] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.825] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.826] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.826]   - Field: ‘node’
[18:05:10.826]   - Field: ‘label’
[18:05:10.826]   - Field: ‘local’
[18:05:10.827]   - Field: ‘owner’
[18:05:10.827]   - Field: ‘envir’
[18:05:10.827]   - Field: ‘workers’
[18:05:10.827]   - Field: ‘packages’
[18:05:10.828]   - Field: ‘gc’
[18:05:10.828]   - Field: ‘conditions’
[18:05:10.828]   - Field: ‘persistent’
[18:05:10.828]   - Field: ‘expr’
[18:05:10.828]   - Field: ‘uuid’
[18:05:10.829]   - Field: ‘seed’
[18:05:10.829]   - Field: ‘version’
[18:05:10.829]   - Field: ‘result’
[18:05:10.829]   - Field: ‘asynchronous’
[18:05:10.829]   - Field: ‘calls’
[18:05:10.830]   - Field: ‘globals’
[18:05:10.830]   - Field: ‘stdout’
[18:05:10.830]   - Field: ‘earlySignal’
[18:05:10.830]   - Field: ‘lazy’
[18:05:10.830]   - Field: ‘state’
[18:05:10.831] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.831] - Launch lazy future ...
[18:05:10.831] Packages needed by the future expression (n = 0): <none>
[18:05:10.832] Packages needed by future strategies (n = 0): <none>
[18:05:10.833] {
[18:05:10.833]     {
[18:05:10.833]         {
[18:05:10.833]             ...future.startTime <- base::Sys.time()
[18:05:10.833]             {
[18:05:10.833]                 {
[18:05:10.833]                   {
[18:05:10.833]                     {
[18:05:10.833]                       base::local({
[18:05:10.833]                         has_future <- base::requireNamespace("future", 
[18:05:10.833]                           quietly = TRUE)
[18:05:10.833]                         if (has_future) {
[18:05:10.833]                           ns <- base::getNamespace("future")
[18:05:10.833]                           version <- ns[[".package"]][["version"]]
[18:05:10.833]                           if (is.null(version)) 
[18:05:10.833]                             version <- utils::packageVersion("future")
[18:05:10.833]                         }
[18:05:10.833]                         else {
[18:05:10.833]                           version <- NULL
[18:05:10.833]                         }
[18:05:10.833]                         if (!has_future || version < "1.8.0") {
[18:05:10.833]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.833]                             "", base::R.version$version.string), 
[18:05:10.833]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:10.833]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:10.833]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.833]                               "release", "version")], collapse = " "), 
[18:05:10.833]                             hostname = base::Sys.info()[["nodename"]])
[18:05:10.833]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.833]                             info)
[18:05:10.833]                           info <- base::paste(info, collapse = "; ")
[18:05:10.833]                           if (!has_future) {
[18:05:10.833]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.833]                               info)
[18:05:10.833]                           }
[18:05:10.833]                           else {
[18:05:10.833]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.833]                               info, version)
[18:05:10.833]                           }
[18:05:10.833]                           base::stop(msg)
[18:05:10.833]                         }
[18:05:10.833]                       })
[18:05:10.833]                     }
[18:05:10.833]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.833]                     base::options(mc.cores = 1L)
[18:05:10.833]                   }
[18:05:10.833]                   ...future.strategy.old <- future::plan("list")
[18:05:10.833]                   options(future.plan = NULL)
[18:05:10.833]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.833]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.833]                 }
[18:05:10.833]                 ...future.workdir <- getwd()
[18:05:10.833]             }
[18:05:10.833]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.833]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.833]         }
[18:05:10.833]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.833]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.833]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.833]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.833]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.833]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.833]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.833]             base::names(...future.oldOptions))
[18:05:10.833]     }
[18:05:10.833]     if (FALSE) {
[18:05:10.833]     }
[18:05:10.833]     else {
[18:05:10.833]         if (TRUE) {
[18:05:10.833]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.833]                 open = "w")
[18:05:10.833]         }
[18:05:10.833]         else {
[18:05:10.833]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.833]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.833]         }
[18:05:10.833]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.833]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.833]             base::sink(type = "output", split = FALSE)
[18:05:10.833]             base::close(...future.stdout)
[18:05:10.833]         }, add = TRUE)
[18:05:10.833]     }
[18:05:10.833]     ...future.frame <- base::sys.nframe()
[18:05:10.833]     ...future.conditions <- base::list()
[18:05:10.833]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.833]     if (FALSE) {
[18:05:10.833]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.833]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.833]     }
[18:05:10.833]     ...future.result <- base::tryCatch({
[18:05:10.833]         base::withCallingHandlers({
[18:05:10.833]             ...future.value <- base::withVisible(base::local({
[18:05:10.833]                 ...future.makeSendCondition <- base::local({
[18:05:10.833]                   sendCondition <- NULL
[18:05:10.833]                   function(frame = 1L) {
[18:05:10.833]                     if (is.function(sendCondition)) 
[18:05:10.833]                       return(sendCondition)
[18:05:10.833]                     ns <- getNamespace("parallel")
[18:05:10.833]                     if (exists("sendData", mode = "function", 
[18:05:10.833]                       envir = ns)) {
[18:05:10.833]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.833]                         envir = ns)
[18:05:10.833]                       envir <- sys.frame(frame)
[18:05:10.833]                       master <- NULL
[18:05:10.833]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.833]                         !identical(envir, emptyenv())) {
[18:05:10.833]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.833]                           inherits = FALSE)) {
[18:05:10.833]                           master <- get("master", mode = "list", 
[18:05:10.833]                             envir = envir, inherits = FALSE)
[18:05:10.833]                           if (inherits(master, c("SOCKnode", 
[18:05:10.833]                             "SOCK0node"))) {
[18:05:10.833]                             sendCondition <<- function(cond) {
[18:05:10.833]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.833]                                 success = TRUE)
[18:05:10.833]                               parallel_sendData(master, data)
[18:05:10.833]                             }
[18:05:10.833]                             return(sendCondition)
[18:05:10.833]                           }
[18:05:10.833]                         }
[18:05:10.833]                         frame <- frame + 1L
[18:05:10.833]                         envir <- sys.frame(frame)
[18:05:10.833]                       }
[18:05:10.833]                     }
[18:05:10.833]                     sendCondition <<- function(cond) NULL
[18:05:10.833]                   }
[18:05:10.833]                 })
[18:05:10.833]                 withCallingHandlers({
[18:05:10.833]                   {
[18:05:10.833]                     42L
[18:05:10.833]                   }
[18:05:10.833]                 }, immediateCondition = function(cond) {
[18:05:10.833]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.833]                   sendCondition(cond)
[18:05:10.833]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.833]                   {
[18:05:10.833]                     inherits <- base::inherits
[18:05:10.833]                     invokeRestart <- base::invokeRestart
[18:05:10.833]                     is.null <- base::is.null
[18:05:10.833]                     muffled <- FALSE
[18:05:10.833]                     if (inherits(cond, "message")) {
[18:05:10.833]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.833]                       if (muffled) 
[18:05:10.833]                         invokeRestart("muffleMessage")
[18:05:10.833]                     }
[18:05:10.833]                     else if (inherits(cond, "warning")) {
[18:05:10.833]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.833]                       if (muffled) 
[18:05:10.833]                         invokeRestart("muffleWarning")
[18:05:10.833]                     }
[18:05:10.833]                     else if (inherits(cond, "condition")) {
[18:05:10.833]                       if (!is.null(pattern)) {
[18:05:10.833]                         computeRestarts <- base::computeRestarts
[18:05:10.833]                         grepl <- base::grepl
[18:05:10.833]                         restarts <- computeRestarts(cond)
[18:05:10.833]                         for (restart in restarts) {
[18:05:10.833]                           name <- restart$name
[18:05:10.833]                           if (is.null(name)) 
[18:05:10.833]                             next
[18:05:10.833]                           if (!grepl(pattern, name)) 
[18:05:10.833]                             next
[18:05:10.833]                           invokeRestart(restart)
[18:05:10.833]                           muffled <- TRUE
[18:05:10.833]                           break
[18:05:10.833]                         }
[18:05:10.833]                       }
[18:05:10.833]                     }
[18:05:10.833]                     invisible(muffled)
[18:05:10.833]                   }
[18:05:10.833]                   muffleCondition(cond)
[18:05:10.833]                 })
[18:05:10.833]             }))
[18:05:10.833]             future::FutureResult(value = ...future.value$value, 
[18:05:10.833]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.833]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.833]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.833]                     ...future.globalenv.names))
[18:05:10.833]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.833]         }, condition = base::local({
[18:05:10.833]             c <- base::c
[18:05:10.833]             inherits <- base::inherits
[18:05:10.833]             invokeRestart <- base::invokeRestart
[18:05:10.833]             length <- base::length
[18:05:10.833]             list <- base::list
[18:05:10.833]             seq.int <- base::seq.int
[18:05:10.833]             signalCondition <- base::signalCondition
[18:05:10.833]             sys.calls <- base::sys.calls
[18:05:10.833]             `[[` <- base::`[[`
[18:05:10.833]             `+` <- base::`+`
[18:05:10.833]             `<<-` <- base::`<<-`
[18:05:10.833]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.833]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.833]                   3L)]
[18:05:10.833]             }
[18:05:10.833]             function(cond) {
[18:05:10.833]                 is_error <- inherits(cond, "error")
[18:05:10.833]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.833]                   NULL)
[18:05:10.833]                 if (is_error) {
[18:05:10.833]                   sessionInformation <- function() {
[18:05:10.833]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.833]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.833]                       search = base::search(), system = base::Sys.info())
[18:05:10.833]                   }
[18:05:10.833]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.833]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.833]                     cond$call), session = sessionInformation(), 
[18:05:10.833]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.833]                   signalCondition(cond)
[18:05:10.833]                 }
[18:05:10.833]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.833]                 "immediateCondition"))) {
[18:05:10.833]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.833]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.833]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.833]                   if (TRUE && !signal) {
[18:05:10.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.833]                     {
[18:05:10.833]                       inherits <- base::inherits
[18:05:10.833]                       invokeRestart <- base::invokeRestart
[18:05:10.833]                       is.null <- base::is.null
[18:05:10.833]                       muffled <- FALSE
[18:05:10.833]                       if (inherits(cond, "message")) {
[18:05:10.833]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.833]                         if (muffled) 
[18:05:10.833]                           invokeRestart("muffleMessage")
[18:05:10.833]                       }
[18:05:10.833]                       else if (inherits(cond, "warning")) {
[18:05:10.833]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.833]                         if (muffled) 
[18:05:10.833]                           invokeRestart("muffleWarning")
[18:05:10.833]                       }
[18:05:10.833]                       else if (inherits(cond, "condition")) {
[18:05:10.833]                         if (!is.null(pattern)) {
[18:05:10.833]                           computeRestarts <- base::computeRestarts
[18:05:10.833]                           grepl <- base::grepl
[18:05:10.833]                           restarts <- computeRestarts(cond)
[18:05:10.833]                           for (restart in restarts) {
[18:05:10.833]                             name <- restart$name
[18:05:10.833]                             if (is.null(name)) 
[18:05:10.833]                               next
[18:05:10.833]                             if (!grepl(pattern, name)) 
[18:05:10.833]                               next
[18:05:10.833]                             invokeRestart(restart)
[18:05:10.833]                             muffled <- TRUE
[18:05:10.833]                             break
[18:05:10.833]                           }
[18:05:10.833]                         }
[18:05:10.833]                       }
[18:05:10.833]                       invisible(muffled)
[18:05:10.833]                     }
[18:05:10.833]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.833]                   }
[18:05:10.833]                 }
[18:05:10.833]                 else {
[18:05:10.833]                   if (TRUE) {
[18:05:10.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.833]                     {
[18:05:10.833]                       inherits <- base::inherits
[18:05:10.833]                       invokeRestart <- base::invokeRestart
[18:05:10.833]                       is.null <- base::is.null
[18:05:10.833]                       muffled <- FALSE
[18:05:10.833]                       if (inherits(cond, "message")) {
[18:05:10.833]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.833]                         if (muffled) 
[18:05:10.833]                           invokeRestart("muffleMessage")
[18:05:10.833]                       }
[18:05:10.833]                       else if (inherits(cond, "warning")) {
[18:05:10.833]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.833]                         if (muffled) 
[18:05:10.833]                           invokeRestart("muffleWarning")
[18:05:10.833]                       }
[18:05:10.833]                       else if (inherits(cond, "condition")) {
[18:05:10.833]                         if (!is.null(pattern)) {
[18:05:10.833]                           computeRestarts <- base::computeRestarts
[18:05:10.833]                           grepl <- base::grepl
[18:05:10.833]                           restarts <- computeRestarts(cond)
[18:05:10.833]                           for (restart in restarts) {
[18:05:10.833]                             name <- restart$name
[18:05:10.833]                             if (is.null(name)) 
[18:05:10.833]                               next
[18:05:10.833]                             if (!grepl(pattern, name)) 
[18:05:10.833]                               next
[18:05:10.833]                             invokeRestart(restart)
[18:05:10.833]                             muffled <- TRUE
[18:05:10.833]                             break
[18:05:10.833]                           }
[18:05:10.833]                         }
[18:05:10.833]                       }
[18:05:10.833]                       invisible(muffled)
[18:05:10.833]                     }
[18:05:10.833]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.833]                   }
[18:05:10.833]                 }
[18:05:10.833]             }
[18:05:10.833]         }))
[18:05:10.833]     }, error = function(ex) {
[18:05:10.833]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.833]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.833]                 ...future.rng), started = ...future.startTime, 
[18:05:10.833]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.833]             version = "1.8"), class = "FutureResult")
[18:05:10.833]     }, finally = {
[18:05:10.833]         if (!identical(...future.workdir, getwd())) 
[18:05:10.833]             setwd(...future.workdir)
[18:05:10.833]         {
[18:05:10.833]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.833]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.833]             }
[18:05:10.833]             base::options(...future.oldOptions)
[18:05:10.833]             if (.Platform$OS.type == "windows") {
[18:05:10.833]                 old_names <- names(...future.oldEnvVars)
[18:05:10.833]                 envs <- base::Sys.getenv()
[18:05:10.833]                 names <- names(envs)
[18:05:10.833]                 common <- intersect(names, old_names)
[18:05:10.833]                 added <- setdiff(names, old_names)
[18:05:10.833]                 removed <- setdiff(old_names, names)
[18:05:10.833]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.833]                   envs[common]]
[18:05:10.833]                 NAMES <- toupper(changed)
[18:05:10.833]                 args <- list()
[18:05:10.833]                 for (kk in seq_along(NAMES)) {
[18:05:10.833]                   name <- changed[[kk]]
[18:05:10.833]                   NAME <- NAMES[[kk]]
[18:05:10.833]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.833]                     next
[18:05:10.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.833]                 }
[18:05:10.833]                 NAMES <- toupper(added)
[18:05:10.833]                 for (kk in seq_along(NAMES)) {
[18:05:10.833]                   name <- added[[kk]]
[18:05:10.833]                   NAME <- NAMES[[kk]]
[18:05:10.833]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.833]                     next
[18:05:10.833]                   args[[name]] <- ""
[18:05:10.833]                 }
[18:05:10.833]                 NAMES <- toupper(removed)
[18:05:10.833]                 for (kk in seq_along(NAMES)) {
[18:05:10.833]                   name <- removed[[kk]]
[18:05:10.833]                   NAME <- NAMES[[kk]]
[18:05:10.833]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.833]                     next
[18:05:10.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.833]                 }
[18:05:10.833]                 if (length(args) > 0) 
[18:05:10.833]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.833]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.833]             }
[18:05:10.833]             else {
[18:05:10.833]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.833]             }
[18:05:10.833]             {
[18:05:10.833]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.833]                   0L) {
[18:05:10.833]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.833]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.833]                   base::options(opts)
[18:05:10.833]                 }
[18:05:10.833]                 {
[18:05:10.833]                   {
[18:05:10.833]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.833]                     NULL
[18:05:10.833]                   }
[18:05:10.833]                   options(future.plan = NULL)
[18:05:10.833]                   if (is.na(NA_character_)) 
[18:05:10.833]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.833]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.833]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.833]                     .init = FALSE)
[18:05:10.833]                 }
[18:05:10.833]             }
[18:05:10.833]         }
[18:05:10.833]     })
[18:05:10.833]     if (TRUE) {
[18:05:10.833]         base::sink(type = "output", split = FALSE)
[18:05:10.833]         if (TRUE) {
[18:05:10.833]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.833]         }
[18:05:10.833]         else {
[18:05:10.833]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.833]         }
[18:05:10.833]         base::close(...future.stdout)
[18:05:10.833]         ...future.stdout <- NULL
[18:05:10.833]     }
[18:05:10.833]     ...future.result$conditions <- ...future.conditions
[18:05:10.833]     ...future.result$finished <- base::Sys.time()
[18:05:10.833]     ...future.result
[18:05:10.833] }
[18:05:10.838] MultisessionFuture started
[18:05:10.839] - Launch lazy future ... done
[18:05:10.839] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[18:05:10.840] getGlobalsAndPackages() ...
[18:05:10.840] Searching for globals...
[18:05:10.842] - globals found: [3] ‘{’, ‘value’, ‘f1’
[18:05:10.842] Searching for globals ... DONE
[18:05:10.842] Resolving globals: FALSE
[18:05:10.847] The total size of the 1 globals is 1.56 MiB (1638536 bytes)
[18:05:10.847] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[18:05:10.848] - globals: [1] ‘f1’
[18:05:10.848] - packages: [1] ‘future’
[18:05:10.848] getGlobalsAndPackages() ... DONE
[18:05:10.849] run() for ‘Future’ ...
[18:05:10.849] - state: ‘created’
[18:05:10.849] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:10.866] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:10.867] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:05:10.867]   - Field: ‘node’
[18:05:10.867]   - Field: ‘label’
[18:05:10.867]   - Field: ‘local’
[18:05:10.867]   - Field: ‘owner’
[18:05:10.868]   - Field: ‘envir’
[18:05:10.868]   - Field: ‘workers’
[18:05:10.868]   - Field: ‘packages’
[18:05:10.868]   - Field: ‘gc’
[18:05:10.868]   - Field: ‘conditions’
[18:05:10.869]   - Field: ‘persistent’
[18:05:10.869]   - Field: ‘expr’
[18:05:10.869]   - Field: ‘uuid’
[18:05:10.869]   - Field: ‘seed’
[18:05:10.869]   - Field: ‘version’
[18:05:10.870]   - Field: ‘result’
[18:05:10.870]   - Field: ‘asynchronous’
[18:05:10.870]   - Field: ‘calls’
[18:05:10.870]   - Field: ‘globals’
[18:05:10.870]   - Field: ‘stdout’
[18:05:10.871]   - Field: ‘earlySignal’
[18:05:10.871]   - Field: ‘lazy’
[18:05:10.871]   - Field: ‘state’
[18:05:10.871] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:05:10.871] - Launch lazy future ...
[18:05:10.872] Packages needed by the future expression (n = 1): ‘future’
[18:05:10.872] Packages needed by future strategies (n = 0): <none>
[18:05:10.873] {
[18:05:10.873]     {
[18:05:10.873]         {
[18:05:10.873]             ...future.startTime <- base::Sys.time()
[18:05:10.873]             {
[18:05:10.873]                 {
[18:05:10.873]                   {
[18:05:10.873]                     {
[18:05:10.873]                       {
[18:05:10.873]                         base::local({
[18:05:10.873]                           has_future <- base::requireNamespace("future", 
[18:05:10.873]                             quietly = TRUE)
[18:05:10.873]                           if (has_future) {
[18:05:10.873]                             ns <- base::getNamespace("future")
[18:05:10.873]                             version <- ns[[".package"]][["version"]]
[18:05:10.873]                             if (is.null(version)) 
[18:05:10.873]                               version <- utils::packageVersion("future")
[18:05:10.873]                           }
[18:05:10.873]                           else {
[18:05:10.873]                             version <- NULL
[18:05:10.873]                           }
[18:05:10.873]                           if (!has_future || version < "1.8.0") {
[18:05:10.873]                             info <- base::c(r_version = base::gsub("R version ", 
[18:05:10.873]                               "", base::R.version$version.string), 
[18:05:10.873]                               platform = base::sprintf("%s (%s-bit)", 
[18:05:10.873]                                 base::R.version$platform, 8 * 
[18:05:10.873]                                   base::.Machine$sizeof.pointer), 
[18:05:10.873]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:10.873]                                 "release", "version")], collapse = " "), 
[18:05:10.873]                               hostname = base::Sys.info()[["nodename"]])
[18:05:10.873]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:05:10.873]                               info)
[18:05:10.873]                             info <- base::paste(info, collapse = "; ")
[18:05:10.873]                             if (!has_future) {
[18:05:10.873]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:10.873]                                 info)
[18:05:10.873]                             }
[18:05:10.873]                             else {
[18:05:10.873]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:10.873]                                 info, version)
[18:05:10.873]                             }
[18:05:10.873]                             base::stop(msg)
[18:05:10.873]                           }
[18:05:10.873]                         })
[18:05:10.873]                       }
[18:05:10.873]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:10.873]                       base::options(mc.cores = 1L)
[18:05:10.873]                     }
[18:05:10.873]                     base::local({
[18:05:10.873]                       for (pkg in "future") {
[18:05:10.873]                         base::loadNamespace(pkg)
[18:05:10.873]                         base::library(pkg, character.only = TRUE)
[18:05:10.873]                       }
[18:05:10.873]                     })
[18:05:10.873]                   }
[18:05:10.873]                   ...future.strategy.old <- future::plan("list")
[18:05:10.873]                   options(future.plan = NULL)
[18:05:10.873]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.873]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:10.873]                 }
[18:05:10.873]                 ...future.workdir <- getwd()
[18:05:10.873]             }
[18:05:10.873]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:10.873]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:10.873]         }
[18:05:10.873]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:10.873]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:10.873]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:10.873]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:10.873]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:10.873]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:10.873]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:10.873]             base::names(...future.oldOptions))
[18:05:10.873]     }
[18:05:10.873]     if (FALSE) {
[18:05:10.873]     }
[18:05:10.873]     else {
[18:05:10.873]         if (TRUE) {
[18:05:10.873]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:10.873]                 open = "w")
[18:05:10.873]         }
[18:05:10.873]         else {
[18:05:10.873]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:10.873]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:10.873]         }
[18:05:10.873]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:10.873]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:10.873]             base::sink(type = "output", split = FALSE)
[18:05:10.873]             base::close(...future.stdout)
[18:05:10.873]         }, add = TRUE)
[18:05:10.873]     }
[18:05:10.873]     ...future.frame <- base::sys.nframe()
[18:05:10.873]     ...future.conditions <- base::list()
[18:05:10.873]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:10.873]     if (FALSE) {
[18:05:10.873]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:10.873]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:10.873]     }
[18:05:10.873]     ...future.result <- base::tryCatch({
[18:05:10.873]         base::withCallingHandlers({
[18:05:10.873]             ...future.value <- base::withVisible(base::local({
[18:05:10.873]                 ...future.makeSendCondition <- base::local({
[18:05:10.873]                   sendCondition <- NULL
[18:05:10.873]                   function(frame = 1L) {
[18:05:10.873]                     if (is.function(sendCondition)) 
[18:05:10.873]                       return(sendCondition)
[18:05:10.873]                     ns <- getNamespace("parallel")
[18:05:10.873]                     if (exists("sendData", mode = "function", 
[18:05:10.873]                       envir = ns)) {
[18:05:10.873]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:10.873]                         envir = ns)
[18:05:10.873]                       envir <- sys.frame(frame)
[18:05:10.873]                       master <- NULL
[18:05:10.873]                       while (!identical(envir, .GlobalEnv) && 
[18:05:10.873]                         !identical(envir, emptyenv())) {
[18:05:10.873]                         if (exists("master", mode = "list", envir = envir, 
[18:05:10.873]                           inherits = FALSE)) {
[18:05:10.873]                           master <- get("master", mode = "list", 
[18:05:10.873]                             envir = envir, inherits = FALSE)
[18:05:10.873]                           if (inherits(master, c("SOCKnode", 
[18:05:10.873]                             "SOCK0node"))) {
[18:05:10.873]                             sendCondition <<- function(cond) {
[18:05:10.873]                               data <- list(type = "VALUE", value = cond, 
[18:05:10.873]                                 success = TRUE)
[18:05:10.873]                               parallel_sendData(master, data)
[18:05:10.873]                             }
[18:05:10.873]                             return(sendCondition)
[18:05:10.873]                           }
[18:05:10.873]                         }
[18:05:10.873]                         frame <- frame + 1L
[18:05:10.873]                         envir <- sys.frame(frame)
[18:05:10.873]                       }
[18:05:10.873]                     }
[18:05:10.873]                     sendCondition <<- function(cond) NULL
[18:05:10.873]                   }
[18:05:10.873]                 })
[18:05:10.873]                 withCallingHandlers({
[18:05:10.873]                   {
[18:05:10.873]                     value(f1)
[18:05:10.873]                   }
[18:05:10.873]                 }, immediateCondition = function(cond) {
[18:05:10.873]                   sendCondition <- ...future.makeSendCondition()
[18:05:10.873]                   sendCondition(cond)
[18:05:10.873]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.873]                   {
[18:05:10.873]                     inherits <- base::inherits
[18:05:10.873]                     invokeRestart <- base::invokeRestart
[18:05:10.873]                     is.null <- base::is.null
[18:05:10.873]                     muffled <- FALSE
[18:05:10.873]                     if (inherits(cond, "message")) {
[18:05:10.873]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:10.873]                       if (muffled) 
[18:05:10.873]                         invokeRestart("muffleMessage")
[18:05:10.873]                     }
[18:05:10.873]                     else if (inherits(cond, "warning")) {
[18:05:10.873]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:10.873]                       if (muffled) 
[18:05:10.873]                         invokeRestart("muffleWarning")
[18:05:10.873]                     }
[18:05:10.873]                     else if (inherits(cond, "condition")) {
[18:05:10.873]                       if (!is.null(pattern)) {
[18:05:10.873]                         computeRestarts <- base::computeRestarts
[18:05:10.873]                         grepl <- base::grepl
[18:05:10.873]                         restarts <- computeRestarts(cond)
[18:05:10.873]                         for (restart in restarts) {
[18:05:10.873]                           name <- restart$name
[18:05:10.873]                           if (is.null(name)) 
[18:05:10.873]                             next
[18:05:10.873]                           if (!grepl(pattern, name)) 
[18:05:10.873]                             next
[18:05:10.873]                           invokeRestart(restart)
[18:05:10.873]                           muffled <- TRUE
[18:05:10.873]                           break
[18:05:10.873]                         }
[18:05:10.873]                       }
[18:05:10.873]                     }
[18:05:10.873]                     invisible(muffled)
[18:05:10.873]                   }
[18:05:10.873]                   muffleCondition(cond)
[18:05:10.873]                 })
[18:05:10.873]             }))
[18:05:10.873]             future::FutureResult(value = ...future.value$value, 
[18:05:10.873]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.873]                   ...future.rng), globalenv = if (FALSE) 
[18:05:10.873]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:10.873]                     ...future.globalenv.names))
[18:05:10.873]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:10.873]         }, condition = base::local({
[18:05:10.873]             c <- base::c
[18:05:10.873]             inherits <- base::inherits
[18:05:10.873]             invokeRestart <- base::invokeRestart
[18:05:10.873]             length <- base::length
[18:05:10.873]             list <- base::list
[18:05:10.873]             seq.int <- base::seq.int
[18:05:10.873]             signalCondition <- base::signalCondition
[18:05:10.873]             sys.calls <- base::sys.calls
[18:05:10.873]             `[[` <- base::`[[`
[18:05:10.873]             `+` <- base::`+`
[18:05:10.873]             `<<-` <- base::`<<-`
[18:05:10.873]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:10.873]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:10.873]                   3L)]
[18:05:10.873]             }
[18:05:10.873]             function(cond) {
[18:05:10.873]                 is_error <- inherits(cond, "error")
[18:05:10.873]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:10.873]                   NULL)
[18:05:10.873]                 if (is_error) {
[18:05:10.873]                   sessionInformation <- function() {
[18:05:10.873]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:10.873]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:10.873]                       search = base::search(), system = base::Sys.info())
[18:05:10.873]                   }
[18:05:10.873]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.873]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:10.873]                     cond$call), session = sessionInformation(), 
[18:05:10.873]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:10.873]                   signalCondition(cond)
[18:05:10.873]                 }
[18:05:10.873]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:10.873]                 "immediateCondition"))) {
[18:05:10.873]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:10.873]                   ...future.conditions[[length(...future.conditions) + 
[18:05:10.873]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:10.873]                   if (TRUE && !signal) {
[18:05:10.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.873]                     {
[18:05:10.873]                       inherits <- base::inherits
[18:05:10.873]                       invokeRestart <- base::invokeRestart
[18:05:10.873]                       is.null <- base::is.null
[18:05:10.873]                       muffled <- FALSE
[18:05:10.873]                       if (inherits(cond, "message")) {
[18:05:10.873]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.873]                         if (muffled) 
[18:05:10.873]                           invokeRestart("muffleMessage")
[18:05:10.873]                       }
[18:05:10.873]                       else if (inherits(cond, "warning")) {
[18:05:10.873]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.873]                         if (muffled) 
[18:05:10.873]                           invokeRestart("muffleWarning")
[18:05:10.873]                       }
[18:05:10.873]                       else if (inherits(cond, "condition")) {
[18:05:10.873]                         if (!is.null(pattern)) {
[18:05:10.873]                           computeRestarts <- base::computeRestarts
[18:05:10.873]                           grepl <- base::grepl
[18:05:10.873]                           restarts <- computeRestarts(cond)
[18:05:10.873]                           for (restart in restarts) {
[18:05:10.873]                             name <- restart$name
[18:05:10.873]                             if (is.null(name)) 
[18:05:10.873]                               next
[18:05:10.873]                             if (!grepl(pattern, name)) 
[18:05:10.873]                               next
[18:05:10.873]                             invokeRestart(restart)
[18:05:10.873]                             muffled <- TRUE
[18:05:10.873]                             break
[18:05:10.873]                           }
[18:05:10.873]                         }
[18:05:10.873]                       }
[18:05:10.873]                       invisible(muffled)
[18:05:10.873]                     }
[18:05:10.873]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.873]                   }
[18:05:10.873]                 }
[18:05:10.873]                 else {
[18:05:10.873]                   if (TRUE) {
[18:05:10.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:10.873]                     {
[18:05:10.873]                       inherits <- base::inherits
[18:05:10.873]                       invokeRestart <- base::invokeRestart
[18:05:10.873]                       is.null <- base::is.null
[18:05:10.873]                       muffled <- FALSE
[18:05:10.873]                       if (inherits(cond, "message")) {
[18:05:10.873]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:10.873]                         if (muffled) 
[18:05:10.873]                           invokeRestart("muffleMessage")
[18:05:10.873]                       }
[18:05:10.873]                       else if (inherits(cond, "warning")) {
[18:05:10.873]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:10.873]                         if (muffled) 
[18:05:10.873]                           invokeRestart("muffleWarning")
[18:05:10.873]                       }
[18:05:10.873]                       else if (inherits(cond, "condition")) {
[18:05:10.873]                         if (!is.null(pattern)) {
[18:05:10.873]                           computeRestarts <- base::computeRestarts
[18:05:10.873]                           grepl <- base::grepl
[18:05:10.873]                           restarts <- computeRestarts(cond)
[18:05:10.873]                           for (restart in restarts) {
[18:05:10.873]                             name <- restart$name
[18:05:10.873]                             if (is.null(name)) 
[18:05:10.873]                               next
[18:05:10.873]                             if (!grepl(pattern, name)) 
[18:05:10.873]                               next
[18:05:10.873]                             invokeRestart(restart)
[18:05:10.873]                             muffled <- TRUE
[18:05:10.873]                             break
[18:05:10.873]                           }
[18:05:10.873]                         }
[18:05:10.873]                       }
[18:05:10.873]                       invisible(muffled)
[18:05:10.873]                     }
[18:05:10.873]                     muffleCondition(cond, pattern = "^muffle")
[18:05:10.873]                   }
[18:05:10.873]                 }
[18:05:10.873]             }
[18:05:10.873]         }))
[18:05:10.873]     }, error = function(ex) {
[18:05:10.873]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:10.873]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:10.873]                 ...future.rng), started = ...future.startTime, 
[18:05:10.873]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:10.873]             version = "1.8"), class = "FutureResult")
[18:05:10.873]     }, finally = {
[18:05:10.873]         if (!identical(...future.workdir, getwd())) 
[18:05:10.873]             setwd(...future.workdir)
[18:05:10.873]         {
[18:05:10.873]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:10.873]                 ...future.oldOptions$nwarnings <- NULL
[18:05:10.873]             }
[18:05:10.873]             base::options(...future.oldOptions)
[18:05:10.873]             if (.Platform$OS.type == "windows") {
[18:05:10.873]                 old_names <- names(...future.oldEnvVars)
[18:05:10.873]                 envs <- base::Sys.getenv()
[18:05:10.873]                 names <- names(envs)
[18:05:10.873]                 common <- intersect(names, old_names)
[18:05:10.873]                 added <- setdiff(names, old_names)
[18:05:10.873]                 removed <- setdiff(old_names, names)
[18:05:10.873]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:10.873]                   envs[common]]
[18:05:10.873]                 NAMES <- toupper(changed)
[18:05:10.873]                 args <- list()
[18:05:10.873]                 for (kk in seq_along(NAMES)) {
[18:05:10.873]                   name <- changed[[kk]]
[18:05:10.873]                   NAME <- NAMES[[kk]]
[18:05:10.873]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.873]                     next
[18:05:10.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.873]                 }
[18:05:10.873]                 NAMES <- toupper(added)
[18:05:10.873]                 for (kk in seq_along(NAMES)) {
[18:05:10.873]                   name <- added[[kk]]
[18:05:10.873]                   NAME <- NAMES[[kk]]
[18:05:10.873]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.873]                     next
[18:05:10.873]                   args[[name]] <- ""
[18:05:10.873]                 }
[18:05:10.873]                 NAMES <- toupper(removed)
[18:05:10.873]                 for (kk in seq_along(NAMES)) {
[18:05:10.873]                   name <- removed[[kk]]
[18:05:10.873]                   NAME <- NAMES[[kk]]
[18:05:10.873]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:10.873]                     next
[18:05:10.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:10.873]                 }
[18:05:10.873]                 if (length(args) > 0) 
[18:05:10.873]                   base::do.call(base::Sys.setenv, args = args)
[18:05:10.873]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:10.873]             }
[18:05:10.873]             else {
[18:05:10.873]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:10.873]             }
[18:05:10.873]             {
[18:05:10.873]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:10.873]                   0L) {
[18:05:10.873]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:10.873]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:10.873]                   base::options(opts)
[18:05:10.873]                 }
[18:05:10.873]                 {
[18:05:10.873]                   {
[18:05:10.873]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:10.873]                     NULL
[18:05:10.873]                   }
[18:05:10.873]                   options(future.plan = NULL)
[18:05:10.873]                   if (is.na(NA_character_)) 
[18:05:10.873]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:10.873]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:10.873]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:10.873]                     .init = FALSE)
[18:05:10.873]                 }
[18:05:10.873]             }
[18:05:10.873]         }
[18:05:10.873]     })
[18:05:10.873]     if (TRUE) {
[18:05:10.873]         base::sink(type = "output", split = FALSE)
[18:05:10.873]         if (TRUE) {
[18:05:10.873]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:10.873]         }
[18:05:10.873]         else {
[18:05:10.873]             ...future.result["stdout"] <- base::list(NULL)
[18:05:10.873]         }
[18:05:10.873]         base::close(...future.stdout)
[18:05:10.873]         ...future.stdout <- NULL
[18:05:10.873]     }
[18:05:10.873]     ...future.result$conditions <- ...future.conditions
[18:05:10.873]     ...future.result$finished <- base::Sys.time()
[18:05:10.873]     ...future.result
[18:05:10.873] }
[18:05:10.970] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[18:05:10.974] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[18:05:11.031] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[18:05:11.031] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[18:05:11.032] MultisessionFuture started
[18:05:11.032] - Launch lazy future ... done
[18:05:11.033] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7eb5673d-359f-728d-ba93-f4dfbb7cb730
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[18:05:11.059] result() for ClusterFuture ...
[18:05:11.059] receiveMessageFromWorker() for ClusterFuture ...
[18:05:11.059] - Validating connection of MultisessionFuture
[18:05:11.174] - received message: FutureResult
[18:05:11.175] - Received FutureResult
[18:05:11.175] - Erased future from FutureRegistry
[18:05:11.176] result() for ClusterFuture ...
[18:05:11.176] - result already collected: FutureResult
[18:05:11.176] result() for ClusterFuture ... done
[18:05:11.176] signalConditions() ...
[18:05:11.177]  - include = ‘immediateCondition’
[18:05:11.177]  - exclude = 
[18:05:11.177]  - resignal = FALSE
[18:05:11.178]  - Number of conditions: 1
[18:05:11.178] signalConditions() ... done
[18:05:11.178] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:11.179] result() for ClusterFuture ... done
[18:05:11.179] result() for ClusterFuture ...
[18:05:11.179] - result already collected: FutureResult
[18:05:11.180] result() for ClusterFuture ... done
[18:05:11.180] signalConditions() ...
[18:05:11.180]  - include = ‘immediateCondition’
[18:05:11.180]  - exclude = 
[18:05:11.181]  - resignal = FALSE
[18:05:11.181]  - Number of conditions: 1
[18:05:11.181] signalConditions() ... done
[18:05:11.182] Future state: ‘finished’
[18:05:11.182] result() for ClusterFuture ...
[18:05:11.182] - result already collected: FutureResult
[18:05:11.183] result() for ClusterFuture ... done
[18:05:11.183] signalConditions() ...
[18:05:11.183]  - include = ‘condition’
[18:05:11.184]  - exclude = ‘immediateCondition’
[18:05:11.184]  - resignal = TRUE
[18:05:11.184]  - Number of conditions: 1
[18:05:11.184]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[18:05:11.185] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (7eb5673d-359f-728d-ba93-f4dfbb7cb730; pid 325678 on 99adafdbb12a) that created it, not by any other R processes (9303d46a-4eb3-9fe4-6e07-c0661f74c959; pid 325734 on 99adafdbb12a): {; 42L; }>


Future UUID: fc218f07-f2b7-05e2-d564-f940330b7d06


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7eb5673d-359f-728d-ba93-f4dfbb7cb730
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[18:05:11.188] result() for ClusterFuture ...
[18:05:11.188] receiveMessageFromWorker() for ClusterFuture ...
[18:05:11.188] - Validating connection of MultisessionFuture
[18:05:11.189] - received message: FutureResult
[18:05:11.189] - Received FutureResult
[18:05:11.190] - Erased future from FutureRegistry
[18:05:11.190] result() for ClusterFuture ...
[18:05:11.190] - result already collected: FutureResult
[18:05:11.190] result() for ClusterFuture ... done
[18:05:11.191] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:11.191] result() for ClusterFuture ... done
[18:05:11.191] result() for ClusterFuture ...
[18:05:11.192] - result already collected: FutureResult
[18:05:11.192] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[18:05:11.194] plan(): Setting new future strategy stack:
[18:05:11.194] List of future strategies:
[18:05:11.194] 1. FutureStrategy:
[18:05:11.194]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:11.194]    - tweaked: FALSE
[18:05:11.194]    - call: future::plan(oplan)
[18:05:11.197] plan(): nbrOfWorkers() = 1
> 
