
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:04:11.010] plan(): Setting new future strategy stack:
[18:04:11.011] List of future strategies:
[18:04:11.011] 1. sequential:
[18:04:11.011]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:11.011]    - tweaked: FALSE
[18:04:11.011]    - call: future::plan("sequential")
[18:04:11.034] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureGlobals() ...")
*** FutureGlobals() ...
> 
> fg1 <- FutureGlobals()
> print(fg1)
list()
attr(,"where")
list()
attr(,"class")
[1] "FutureGlobals" "Globals"       "list"         
attr(,"resolved")
[1] FALSE
attr(,"total_size")
[1] NA
> 
> fg2 <- FutureGlobals(fg1)
> print(fg2)
list()
attr(,"where")
list()
attr(,"class")
[1] "FutureGlobals" "FutureGlobals" "Globals"       "list"         
attr(,"resolved")
[1] FALSE
attr(,"total_size")
[1] NA
> 
> g <- globals::as.Globals(list(a = 1, b = 1:3))
> print(g)
$a
[1] 1

$b
[1] 1 2 3

attr(,"where")
attr(,"where")$a
<environment: R_EmptyEnv>

attr(,"where")$b
<environment: R_EmptyEnv>

attr(,"class")
[1] "Globals" "list"   
> 
> fg3 <- FutureGlobals(g)
> print(fg3)
$a
[1] 1

$b
[1] 1 2 3

attr(,"where")
attr(,"where")$a
<environment: R_EmptyEnv>

attr(,"where")$b
<environment: R_EmptyEnv>

attr(,"class")
[1] "FutureGlobals" "Globals"       "list"         
attr(,"resolved")
[1] FALSE
attr(,"total_size")
[1] NA
> 
> fg4 <- as.FutureGlobals(g)
> print(fg4)
$a
[1] 1

$b
[1] 1 2 3

attr(,"where")
attr(,"where")$a
<environment: R_EmptyEnv>

attr(,"where")$b
<environment: R_EmptyEnv>

attr(,"class")
[1] "FutureGlobals" "Globals"       "list"         
attr(,"resolved")
[1] FALSE
attr(,"total_size")
[1] NA
> 
> print(resolved(fg3))
[1] FALSE
> 
> fg <- fg4
> 
> fg_unique <- unique(fg)
> print(fg_unique)
$a
[1] 1

$b
[1] 1 2 3

attr(,"where")
attr(,"where")$a
<environment: R_EmptyEnv>

attr(,"where")$b
<environment: R_EmptyEnv>

attr(,"class")
[1] "FutureGlobals" "Globals"       "list"         
attr(,"resolved")
[1] FALSE
attr(,"total_size")
[1] NA
> 
> fg_resolved <- resolve(fg)
[18:04:11.059] resolve() on list ...
[18:04:11.059]  recursive: 0
[18:04:11.059]  length: 2
[18:04:11.060]  elements: ‘a’, ‘b’
[18:04:11.060]  length: 1 (resolved future 1)
[18:04:11.060]  length: 0 (resolved future 2)
[18:04:11.060] resolve() on list ... DONE
> print(fg_resolved)
$a
[1] 1

$b
[1] 1 2 3

attr(,"where")
attr(,"where")$a
<environment: R_EmptyEnv>

attr(,"where")$b
<environment: R_EmptyEnv>

attr(,"class")
[1] "FutureGlobals" "Globals"       "list"         
attr(,"resolved")
[1] TRUE
attr(,"total_size")
[1] NA
> 
> message("- FutureGlobals() - exceptions ...")
- FutureGlobals() - exceptions ...
> 
> res <- tryCatch(g <- FutureGlobals(NULL), error = identity)
> print(res)
<simpleError: Argument 'object' is not a list: NULL>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureGlobals() ... DONE")
*** FutureGlobals() ... DONE
> 
> source("incl/end.R")
[18:04:11.062] plan(): Setting new future strategy stack:
[18:04:11.062] List of future strategies:
[18:04:11.062] 1. FutureStrategy:
[18:04:11.062]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:11.062]    - tweaked: FALSE
[18:04:11.062]    - call: future::plan(oplan)
[18:04:11.086] plan(): nbrOfWorkers() = 1
> 
