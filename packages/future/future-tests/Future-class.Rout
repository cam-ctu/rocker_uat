
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:51.020] plan(): Setting new future strategy stack:
[18:03:51.021] List of future strategies:
[18:03:51.021] 1. sequential:
[18:03:51.021]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:51.021]    - tweaked: FALSE
[18:03:51.021]    - call: future::plan("sequential")
[18:03:51.044] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[18:03:51.066] getGlobalsAndPackages() ...
[18:03:51.066] 
[18:03:51.067] - globals: [0] <none>
[18:03:51.067] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 30349bb1-bc12-0709-ef6b-eafcbd06dcd9
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[18:03:51.069] run() for ‘Future’ ...
[18:03:51.070] - state: ‘created’
[18:03:51.070] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[18:03:51.075] plan(): Setting new future strategy stack:
[18:03:51.075] List of future strategies:
[18:03:51.075] 1. future:
[18:03:51.075]    - args: function (..., workers = "<NULL>")
[18:03:51.075]    - tweaked: FALSE
[18:03:51.075]    - call: plan(foo)
[18:03:51.099] plan(): nbrOfWorkers() = Inf
> f <- Future()
[18:03:51.099] getGlobalsAndPackages() ...
[18:03:51.099] 
[18:03:51.099] - globals: [0] <none>
[18:03:51.100] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[18:03:51.101] Packages needed by the future expression (n = 0): <none>
[18:03:51.101] Packages needed by future strategies (n = 0): <none>
[18:03:51.102] {
[18:03:51.102]     {
[18:03:51.102]         {
[18:03:51.102]             ...future.startTime <- base::Sys.time()
[18:03:51.102]             {
[18:03:51.102]                 {
[18:03:51.102]                   {
[18:03:51.102]                     base::local({
[18:03:51.102]                       has_future <- base::requireNamespace("future", 
[18:03:51.102]                         quietly = TRUE)
[18:03:51.102]                       if (has_future) {
[18:03:51.102]                         ns <- base::getNamespace("future")
[18:03:51.102]                         version <- ns[[".package"]][["version"]]
[18:03:51.102]                         if (is.null(version)) 
[18:03:51.102]                           version <- utils::packageVersion("future")
[18:03:51.102]                       }
[18:03:51.102]                       else {
[18:03:51.102]                         version <- NULL
[18:03:51.102]                       }
[18:03:51.102]                       if (!has_future || version < "1.8.0") {
[18:03:51.102]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:51.102]                           "", base::R.version$version.string), 
[18:03:51.102]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:51.102]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:51.102]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:51.102]                             "release", "version")], collapse = " "), 
[18:03:51.102]                           hostname = base::Sys.info()[["nodename"]])
[18:03:51.102]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:51.102]                           info)
[18:03:51.102]                         info <- base::paste(info, collapse = "; ")
[18:03:51.102]                         if (!has_future) {
[18:03:51.102]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:51.102]                             info)
[18:03:51.102]                         }
[18:03:51.102]                         else {
[18:03:51.102]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:51.102]                             info, version)
[18:03:51.102]                         }
[18:03:51.102]                         base::stop(msg)
[18:03:51.102]                       }
[18:03:51.102]                     })
[18:03:51.102]                   }
[18:03:51.102]                   ...future.strategy.old <- future::plan("list")
[18:03:51.102]                   options(future.plan = NULL)
[18:03:51.102]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.102]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:51.102]                 }
[18:03:51.102]                 ...future.workdir <- getwd()
[18:03:51.102]             }
[18:03:51.102]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:51.102]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:51.102]         }
[18:03:51.102]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:51.102]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:51.102]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:51.102]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:51.102]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:51.102]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:51.102]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:51.102]             base::names(...future.oldOptions))
[18:03:51.102]     }
[18:03:51.102]     if (FALSE) {
[18:03:51.102]     }
[18:03:51.102]     else {
[18:03:51.102]         if (TRUE) {
[18:03:51.102]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:51.102]                 open = "w")
[18:03:51.102]         }
[18:03:51.102]         else {
[18:03:51.102]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:51.102]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:51.102]         }
[18:03:51.102]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:51.102]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:51.102]             base::sink(type = "output", split = FALSE)
[18:03:51.102]             base::close(...future.stdout)
[18:03:51.102]         }, add = TRUE)
[18:03:51.102]     }
[18:03:51.102]     ...future.frame <- base::sys.nframe()
[18:03:51.102]     ...future.conditions <- base::list()
[18:03:51.102]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:51.102]     if (FALSE) {
[18:03:51.102]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:51.102]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:51.102]     }
[18:03:51.102]     ...future.result <- base::tryCatch({
[18:03:51.102]         base::withCallingHandlers({
[18:03:51.102]             ...future.value <- base::withVisible(base::local(NULL))
[18:03:51.102]             future::FutureResult(value = ...future.value$value, 
[18:03:51.102]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.102]                   ...future.rng), globalenv = if (FALSE) 
[18:03:51.102]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:51.102]                     ...future.globalenv.names))
[18:03:51.102]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:51.102]         }, condition = base::local({
[18:03:51.102]             c <- base::c
[18:03:51.102]             inherits <- base::inherits
[18:03:51.102]             invokeRestart <- base::invokeRestart
[18:03:51.102]             length <- base::length
[18:03:51.102]             list <- base::list
[18:03:51.102]             seq.int <- base::seq.int
[18:03:51.102]             signalCondition <- base::signalCondition
[18:03:51.102]             sys.calls <- base::sys.calls
[18:03:51.102]             `[[` <- base::`[[`
[18:03:51.102]             `+` <- base::`+`
[18:03:51.102]             `<<-` <- base::`<<-`
[18:03:51.102]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:51.102]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:51.102]                   3L)]
[18:03:51.102]             }
[18:03:51.102]             function(cond) {
[18:03:51.102]                 is_error <- inherits(cond, "error")
[18:03:51.102]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:51.102]                   NULL)
[18:03:51.102]                 if (is_error) {
[18:03:51.102]                   sessionInformation <- function() {
[18:03:51.102]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:51.102]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:51.102]                       search = base::search(), system = base::Sys.info())
[18:03:51.102]                   }
[18:03:51.102]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.102]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:51.102]                     cond$call), session = sessionInformation(), 
[18:03:51.102]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:51.102]                   signalCondition(cond)
[18:03:51.102]                 }
[18:03:51.102]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[18:03:51.102]                   signal <- FALSE && inherits(cond, character(0))
[18:03:51.102]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.102]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:51.102]                   if (FALSE && !signal) {
[18:03:51.102]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.102]                     {
[18:03:51.102]                       inherits <- base::inherits
[18:03:51.102]                       invokeRestart <- base::invokeRestart
[18:03:51.102]                       is.null <- base::is.null
[18:03:51.102]                       muffled <- FALSE
[18:03:51.102]                       if (inherits(cond, "message")) {
[18:03:51.102]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.102]                         if (muffled) 
[18:03:51.102]                           invokeRestart("muffleMessage")
[18:03:51.102]                       }
[18:03:51.102]                       else if (inherits(cond, "warning")) {
[18:03:51.102]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.102]                         if (muffled) 
[18:03:51.102]                           invokeRestart("muffleWarning")
[18:03:51.102]                       }
[18:03:51.102]                       else if (inherits(cond, "condition")) {
[18:03:51.102]                         if (!is.null(pattern)) {
[18:03:51.102]                           computeRestarts <- base::computeRestarts
[18:03:51.102]                           grepl <- base::grepl
[18:03:51.102]                           restarts <- computeRestarts(cond)
[18:03:51.102]                           for (restart in restarts) {
[18:03:51.102]                             name <- restart$name
[18:03:51.102]                             if (is.null(name)) 
[18:03:51.102]                               next
[18:03:51.102]                             if (!grepl(pattern, name)) 
[18:03:51.102]                               next
[18:03:51.102]                             invokeRestart(restart)
[18:03:51.102]                             muffled <- TRUE
[18:03:51.102]                             break
[18:03:51.102]                           }
[18:03:51.102]                         }
[18:03:51.102]                       }
[18:03:51.102]                       invisible(muffled)
[18:03:51.102]                     }
[18:03:51.102]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.102]                   }
[18:03:51.102]                 }
[18:03:51.102]                 else {
[18:03:51.102]                   if (TRUE) {
[18:03:51.102]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.102]                     {
[18:03:51.102]                       inherits <- base::inherits
[18:03:51.102]                       invokeRestart <- base::invokeRestart
[18:03:51.102]                       is.null <- base::is.null
[18:03:51.102]                       muffled <- FALSE
[18:03:51.102]                       if (inherits(cond, "message")) {
[18:03:51.102]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.102]                         if (muffled) 
[18:03:51.102]                           invokeRestart("muffleMessage")
[18:03:51.102]                       }
[18:03:51.102]                       else if (inherits(cond, "warning")) {
[18:03:51.102]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.102]                         if (muffled) 
[18:03:51.102]                           invokeRestart("muffleWarning")
[18:03:51.102]                       }
[18:03:51.102]                       else if (inherits(cond, "condition")) {
[18:03:51.102]                         if (!is.null(pattern)) {
[18:03:51.102]                           computeRestarts <- base::computeRestarts
[18:03:51.102]                           grepl <- base::grepl
[18:03:51.102]                           restarts <- computeRestarts(cond)
[18:03:51.102]                           for (restart in restarts) {
[18:03:51.102]                             name <- restart$name
[18:03:51.102]                             if (is.null(name)) 
[18:03:51.102]                               next
[18:03:51.102]                             if (!grepl(pattern, name)) 
[18:03:51.102]                               next
[18:03:51.102]                             invokeRestart(restart)
[18:03:51.102]                             muffled <- TRUE
[18:03:51.102]                             break
[18:03:51.102]                           }
[18:03:51.102]                         }
[18:03:51.102]                       }
[18:03:51.102]                       invisible(muffled)
[18:03:51.102]                     }
[18:03:51.102]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.102]                   }
[18:03:51.102]                 }
[18:03:51.102]             }
[18:03:51.102]         }))
[18:03:51.102]     }, error = function(ex) {
[18:03:51.102]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:51.102]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.102]                 ...future.rng), started = ...future.startTime, 
[18:03:51.102]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:51.102]             version = "1.8"), class = "FutureResult")
[18:03:51.102]     }, finally = {
[18:03:51.102]         if (!identical(...future.workdir, getwd())) 
[18:03:51.102]             setwd(...future.workdir)
[18:03:51.102]         {
[18:03:51.102]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:51.102]                 ...future.oldOptions$nwarnings <- NULL
[18:03:51.102]             }
[18:03:51.102]             base::options(...future.oldOptions)
[18:03:51.102]             if (.Platform$OS.type == "windows") {
[18:03:51.102]                 old_names <- names(...future.oldEnvVars)
[18:03:51.102]                 envs <- base::Sys.getenv()
[18:03:51.102]                 names <- names(envs)
[18:03:51.102]                 common <- intersect(names, old_names)
[18:03:51.102]                 added <- setdiff(names, old_names)
[18:03:51.102]                 removed <- setdiff(old_names, names)
[18:03:51.102]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:51.102]                   envs[common]]
[18:03:51.102]                 NAMES <- toupper(changed)
[18:03:51.102]                 args <- list()
[18:03:51.102]                 for (kk in seq_along(NAMES)) {
[18:03:51.102]                   name <- changed[[kk]]
[18:03:51.102]                   NAME <- NAMES[[kk]]
[18:03:51.102]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.102]                     next
[18:03:51.102]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.102]                 }
[18:03:51.102]                 NAMES <- toupper(added)
[18:03:51.102]                 for (kk in seq_along(NAMES)) {
[18:03:51.102]                   name <- added[[kk]]
[18:03:51.102]                   NAME <- NAMES[[kk]]
[18:03:51.102]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.102]                     next
[18:03:51.102]                   args[[name]] <- ""
[18:03:51.102]                 }
[18:03:51.102]                 NAMES <- toupper(removed)
[18:03:51.102]                 for (kk in seq_along(NAMES)) {
[18:03:51.102]                   name <- removed[[kk]]
[18:03:51.102]                   NAME <- NAMES[[kk]]
[18:03:51.102]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.102]                     next
[18:03:51.102]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.102]                 }
[18:03:51.102]                 if (length(args) > 0) 
[18:03:51.102]                   base::do.call(base::Sys.setenv, args = args)
[18:03:51.102]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:51.102]             }
[18:03:51.102]             else {
[18:03:51.102]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:51.102]             }
[18:03:51.102]             {
[18:03:51.102]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:51.102]                   0L) {
[18:03:51.102]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:51.102]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:51.102]                   base::options(opts)
[18:03:51.102]                 }
[18:03:51.102]                 {
[18:03:51.102]                   NULL
[18:03:51.102]                   options(future.plan = NULL)
[18:03:51.102]                   if (is.na(NA_character_)) 
[18:03:51.102]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.102]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:51.102]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:51.102]                     .init = FALSE)
[18:03:51.102]                 }
[18:03:51.102]             }
[18:03:51.102]         }
[18:03:51.102]     })
[18:03:51.102]     if (TRUE) {
[18:03:51.102]         base::sink(type = "output", split = FALSE)
[18:03:51.102]         if (TRUE) {
[18:03:51.102]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:51.102]         }
[18:03:51.102]         else {
[18:03:51.102]             ...future.result["stdout"] <- base::list(NULL)
[18:03:51.102]         }
[18:03:51.102]         base::close(...future.stdout)
[18:03:51.102]         ...future.stdout <- NULL
[18:03:51.102]     }
[18:03:51.102]     ...future.result$conditions <- ...future.conditions
[18:03:51.102]     ...future.result$finished <- base::Sys.time()
[18:03:51.102]     ...future.result
[18:03:51.102] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[18:03:51.123] getGlobalsAndPackages() ...
[18:03:51.124] Searching for globals...
[18:03:51.133] - globals found: [1] ‘{’
[18:03:51.133] Searching for globals ... DONE
[18:03:51.133] Resolving globals: FALSE
[18:03:51.134] 
[18:03:51.134] 
[18:03:51.134] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 30349bb1-bc12-0709-ef6b-eafcbd06dcd9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:51.136] Packages needed by the future expression (n = 0): <none>
[18:03:51.136] Packages needed by future strategies (n = 0): <none>
[18:03:51.137] {
[18:03:51.137]     {
[18:03:51.137]         {
[18:03:51.137]             ...future.startTime <- base::Sys.time()
[18:03:51.137]             {
[18:03:51.137]                 {
[18:03:51.137]                   {
[18:03:51.137]                     base::local({
[18:03:51.137]                       has_future <- base::requireNamespace("future", 
[18:03:51.137]                         quietly = TRUE)
[18:03:51.137]                       if (has_future) {
[18:03:51.137]                         ns <- base::getNamespace("future")
[18:03:51.137]                         version <- ns[[".package"]][["version"]]
[18:03:51.137]                         if (is.null(version)) 
[18:03:51.137]                           version <- utils::packageVersion("future")
[18:03:51.137]                       }
[18:03:51.137]                       else {
[18:03:51.137]                         version <- NULL
[18:03:51.137]                       }
[18:03:51.137]                       if (!has_future || version < "1.8.0") {
[18:03:51.137]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:51.137]                           "", base::R.version$version.string), 
[18:03:51.137]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:51.137]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:51.137]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:51.137]                             "release", "version")], collapse = " "), 
[18:03:51.137]                           hostname = base::Sys.info()[["nodename"]])
[18:03:51.137]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:51.137]                           info)
[18:03:51.137]                         info <- base::paste(info, collapse = "; ")
[18:03:51.137]                         if (!has_future) {
[18:03:51.137]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:51.137]                             info)
[18:03:51.137]                         }
[18:03:51.137]                         else {
[18:03:51.137]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:51.137]                             info, version)
[18:03:51.137]                         }
[18:03:51.137]                         base::stop(msg)
[18:03:51.137]                       }
[18:03:51.137]                     })
[18:03:51.137]                   }
[18:03:51.137]                   ...future.strategy.old <- future::plan("list")
[18:03:51.137]                   options(future.plan = NULL)
[18:03:51.137]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.137]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:51.137]                 }
[18:03:51.137]                 ...future.workdir <- getwd()
[18:03:51.137]             }
[18:03:51.137]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:51.137]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:51.137]         }
[18:03:51.137]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:51.137]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:51.137]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:51.137]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:51.137]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:51.137]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:51.137]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:51.137]             base::names(...future.oldOptions))
[18:03:51.137]     }
[18:03:51.137]     if (FALSE) {
[18:03:51.137]     }
[18:03:51.137]     else {
[18:03:51.137]         if (TRUE) {
[18:03:51.137]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:51.137]                 open = "w")
[18:03:51.137]         }
[18:03:51.137]         else {
[18:03:51.137]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:51.137]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:51.137]         }
[18:03:51.137]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:51.137]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:51.137]             base::sink(type = "output", split = FALSE)
[18:03:51.137]             base::close(...future.stdout)
[18:03:51.137]         }, add = TRUE)
[18:03:51.137]     }
[18:03:51.137]     ...future.frame <- base::sys.nframe()
[18:03:51.137]     ...future.conditions <- base::list()
[18:03:51.137]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:51.137]     if (FALSE) {
[18:03:51.137]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:51.137]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:51.137]     }
[18:03:51.137]     ...future.result <- base::tryCatch({
[18:03:51.137]         base::withCallingHandlers({
[18:03:51.137]             ...future.value <- base::withVisible(base::local({
[18:03:51.137]                 42L
[18:03:51.137]             }))
[18:03:51.137]             future::FutureResult(value = ...future.value$value, 
[18:03:51.137]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.137]                   ...future.rng), globalenv = if (FALSE) 
[18:03:51.137]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:51.137]                     ...future.globalenv.names))
[18:03:51.137]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:51.137]         }, condition = base::local({
[18:03:51.137]             c <- base::c
[18:03:51.137]             inherits <- base::inherits
[18:03:51.137]             invokeRestart <- base::invokeRestart
[18:03:51.137]             length <- base::length
[18:03:51.137]             list <- base::list
[18:03:51.137]             seq.int <- base::seq.int
[18:03:51.137]             signalCondition <- base::signalCondition
[18:03:51.137]             sys.calls <- base::sys.calls
[18:03:51.137]             `[[` <- base::`[[`
[18:03:51.137]             `+` <- base::`+`
[18:03:51.137]             `<<-` <- base::`<<-`
[18:03:51.137]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:51.137]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:51.137]                   3L)]
[18:03:51.137]             }
[18:03:51.137]             function(cond) {
[18:03:51.137]                 is_error <- inherits(cond, "error")
[18:03:51.137]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:51.137]                   NULL)
[18:03:51.137]                 if (is_error) {
[18:03:51.137]                   sessionInformation <- function() {
[18:03:51.137]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:51.137]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:51.137]                       search = base::search(), system = base::Sys.info())
[18:03:51.137]                   }
[18:03:51.137]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.137]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:51.137]                     cond$call), session = sessionInformation(), 
[18:03:51.137]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:51.137]                   signalCondition(cond)
[18:03:51.137]                 }
[18:03:51.137]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:51.137]                 "immediateCondition"))) {
[18:03:51.137]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:51.137]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.137]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:51.137]                   if (TRUE && !signal) {
[18:03:51.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.137]                     {
[18:03:51.137]                       inherits <- base::inherits
[18:03:51.137]                       invokeRestart <- base::invokeRestart
[18:03:51.137]                       is.null <- base::is.null
[18:03:51.137]                       muffled <- FALSE
[18:03:51.137]                       if (inherits(cond, "message")) {
[18:03:51.137]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.137]                         if (muffled) 
[18:03:51.137]                           invokeRestart("muffleMessage")
[18:03:51.137]                       }
[18:03:51.137]                       else if (inherits(cond, "warning")) {
[18:03:51.137]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.137]                         if (muffled) 
[18:03:51.137]                           invokeRestart("muffleWarning")
[18:03:51.137]                       }
[18:03:51.137]                       else if (inherits(cond, "condition")) {
[18:03:51.137]                         if (!is.null(pattern)) {
[18:03:51.137]                           computeRestarts <- base::computeRestarts
[18:03:51.137]                           grepl <- base::grepl
[18:03:51.137]                           restarts <- computeRestarts(cond)
[18:03:51.137]                           for (restart in restarts) {
[18:03:51.137]                             name <- restart$name
[18:03:51.137]                             if (is.null(name)) 
[18:03:51.137]                               next
[18:03:51.137]                             if (!grepl(pattern, name)) 
[18:03:51.137]                               next
[18:03:51.137]                             invokeRestart(restart)
[18:03:51.137]                             muffled <- TRUE
[18:03:51.137]                             break
[18:03:51.137]                           }
[18:03:51.137]                         }
[18:03:51.137]                       }
[18:03:51.137]                       invisible(muffled)
[18:03:51.137]                     }
[18:03:51.137]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.137]                   }
[18:03:51.137]                 }
[18:03:51.137]                 else {
[18:03:51.137]                   if (TRUE) {
[18:03:51.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.137]                     {
[18:03:51.137]                       inherits <- base::inherits
[18:03:51.137]                       invokeRestart <- base::invokeRestart
[18:03:51.137]                       is.null <- base::is.null
[18:03:51.137]                       muffled <- FALSE
[18:03:51.137]                       if (inherits(cond, "message")) {
[18:03:51.137]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.137]                         if (muffled) 
[18:03:51.137]                           invokeRestart("muffleMessage")
[18:03:51.137]                       }
[18:03:51.137]                       else if (inherits(cond, "warning")) {
[18:03:51.137]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.137]                         if (muffled) 
[18:03:51.137]                           invokeRestart("muffleWarning")
[18:03:51.137]                       }
[18:03:51.137]                       else if (inherits(cond, "condition")) {
[18:03:51.137]                         if (!is.null(pattern)) {
[18:03:51.137]                           computeRestarts <- base::computeRestarts
[18:03:51.137]                           grepl <- base::grepl
[18:03:51.137]                           restarts <- computeRestarts(cond)
[18:03:51.137]                           for (restart in restarts) {
[18:03:51.137]                             name <- restart$name
[18:03:51.137]                             if (is.null(name)) 
[18:03:51.137]                               next
[18:03:51.137]                             if (!grepl(pattern, name)) 
[18:03:51.137]                               next
[18:03:51.137]                             invokeRestart(restart)
[18:03:51.137]                             muffled <- TRUE
[18:03:51.137]                             break
[18:03:51.137]                           }
[18:03:51.137]                         }
[18:03:51.137]                       }
[18:03:51.137]                       invisible(muffled)
[18:03:51.137]                     }
[18:03:51.137]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.137]                   }
[18:03:51.137]                 }
[18:03:51.137]             }
[18:03:51.137]         }))
[18:03:51.137]     }, error = function(ex) {
[18:03:51.137]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:51.137]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.137]                 ...future.rng), started = ...future.startTime, 
[18:03:51.137]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:51.137]             version = "1.8"), class = "FutureResult")
[18:03:51.137]     }, finally = {
[18:03:51.137]         if (!identical(...future.workdir, getwd())) 
[18:03:51.137]             setwd(...future.workdir)
[18:03:51.137]         {
[18:03:51.137]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:51.137]                 ...future.oldOptions$nwarnings <- NULL
[18:03:51.137]             }
[18:03:51.137]             base::options(...future.oldOptions)
[18:03:51.137]             if (.Platform$OS.type == "windows") {
[18:03:51.137]                 old_names <- names(...future.oldEnvVars)
[18:03:51.137]                 envs <- base::Sys.getenv()
[18:03:51.137]                 names <- names(envs)
[18:03:51.137]                 common <- intersect(names, old_names)
[18:03:51.137]                 added <- setdiff(names, old_names)
[18:03:51.137]                 removed <- setdiff(old_names, names)
[18:03:51.137]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:51.137]                   envs[common]]
[18:03:51.137]                 NAMES <- toupper(changed)
[18:03:51.137]                 args <- list()
[18:03:51.137]                 for (kk in seq_along(NAMES)) {
[18:03:51.137]                   name <- changed[[kk]]
[18:03:51.137]                   NAME <- NAMES[[kk]]
[18:03:51.137]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.137]                     next
[18:03:51.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.137]                 }
[18:03:51.137]                 NAMES <- toupper(added)
[18:03:51.137]                 for (kk in seq_along(NAMES)) {
[18:03:51.137]                   name <- added[[kk]]
[18:03:51.137]                   NAME <- NAMES[[kk]]
[18:03:51.137]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.137]                     next
[18:03:51.137]                   args[[name]] <- ""
[18:03:51.137]                 }
[18:03:51.137]                 NAMES <- toupper(removed)
[18:03:51.137]                 for (kk in seq_along(NAMES)) {
[18:03:51.137]                   name <- removed[[kk]]
[18:03:51.137]                   NAME <- NAMES[[kk]]
[18:03:51.137]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.137]                     next
[18:03:51.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.137]                 }
[18:03:51.137]                 if (length(args) > 0) 
[18:03:51.137]                   base::do.call(base::Sys.setenv, args = args)
[18:03:51.137]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:51.137]             }
[18:03:51.137]             else {
[18:03:51.137]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:51.137]             }
[18:03:51.137]             {
[18:03:51.137]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:51.137]                   0L) {
[18:03:51.137]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:51.137]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:51.137]                   base::options(opts)
[18:03:51.137]                 }
[18:03:51.137]                 {
[18:03:51.137]                   {
[18:03:51.137]                     NULL
[18:03:51.137]                     RNGkind("Mersenne-Twister")
[18:03:51.137]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:51.137]                       inherits = FALSE)
[18:03:51.137]                   }
[18:03:51.137]                   options(future.plan = NULL)
[18:03:51.137]                   if (is.na(NA_character_)) 
[18:03:51.137]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.137]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:51.137]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:51.137]                     .init = FALSE)
[18:03:51.137]                 }
[18:03:51.137]             }
[18:03:51.137]         }
[18:03:51.137]     })
[18:03:51.137]     if (TRUE) {
[18:03:51.137]         base::sink(type = "output", split = FALSE)
[18:03:51.137]         if (TRUE) {
[18:03:51.137]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:51.137]         }
[18:03:51.137]         else {
[18:03:51.137]             ...future.result["stdout"] <- base::list(NULL)
[18:03:51.137]         }
[18:03:51.137]         base::close(...future.stdout)
[18:03:51.137]         ...future.stdout <- NULL
[18:03:51.137]     }
[18:03:51.137]     ...future.result$conditions <- ...future.conditions
[18:03:51.137]     ...future.result$finished <- base::Sys.time()
[18:03:51.137]     ...future.result
[18:03:51.137] }
[18:03:51.141] plan(): Setting new future strategy stack:
[18:03:51.141] List of future strategies:
[18:03:51.141] 1. sequential:
[18:03:51.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:51.141]    - tweaked: FALSE
[18:03:51.141]    - call: NULL
[18:03:51.142] plan(): nbrOfWorkers() = 1
[18:03:51.144] plan(): Setting new future strategy stack:
[18:03:51.144] List of future strategies:
[18:03:51.144] 1. future:
[18:03:51.144]    - args: function (..., workers = "<NULL>")
[18:03:51.144]    - tweaked: FALSE
[18:03:51.144]    - call: plan(foo)
[18:03:51.145] plan(): nbrOfWorkers() = Inf
[18:03:51.145] SequentialFuture started (and completed)
[1] 42
[18:03:51.147] getGlobalsAndPackages() ...
[18:03:51.147] Searching for globals...
[18:03:51.148] - globals found: [1] ‘{’
[18:03:51.148] Searching for globals ... DONE
[18:03:51.149] Resolving globals: FALSE
[18:03:51.149] 
[18:03:51.149] 
[18:03:51.149] getGlobalsAndPackages() ... DONE
[18:03:51.150] Packages needed by the future expression (n = 0): <none>
[18:03:51.150] Packages needed by future strategies (n = 0): <none>
[18:03:51.151] {
[18:03:51.151]     {
[18:03:51.151]         {
[18:03:51.151]             ...future.startTime <- base::Sys.time()
[18:03:51.151]             {
[18:03:51.151]                 {
[18:03:51.151]                   {
[18:03:51.151]                     base::local({
[18:03:51.151]                       has_future <- base::requireNamespace("future", 
[18:03:51.151]                         quietly = TRUE)
[18:03:51.151]                       if (has_future) {
[18:03:51.151]                         ns <- base::getNamespace("future")
[18:03:51.151]                         version <- ns[[".package"]][["version"]]
[18:03:51.151]                         if (is.null(version)) 
[18:03:51.151]                           version <- utils::packageVersion("future")
[18:03:51.151]                       }
[18:03:51.151]                       else {
[18:03:51.151]                         version <- NULL
[18:03:51.151]                       }
[18:03:51.151]                       if (!has_future || version < "1.8.0") {
[18:03:51.151]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:51.151]                           "", base::R.version$version.string), 
[18:03:51.151]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:51.151]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:51.151]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:51.151]                             "release", "version")], collapse = " "), 
[18:03:51.151]                           hostname = base::Sys.info()[["nodename"]])
[18:03:51.151]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:51.151]                           info)
[18:03:51.151]                         info <- base::paste(info, collapse = "; ")
[18:03:51.151]                         if (!has_future) {
[18:03:51.151]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:51.151]                             info)
[18:03:51.151]                         }
[18:03:51.151]                         else {
[18:03:51.151]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:51.151]                             info, version)
[18:03:51.151]                         }
[18:03:51.151]                         base::stop(msg)
[18:03:51.151]                       }
[18:03:51.151]                     })
[18:03:51.151]                   }
[18:03:51.151]                   ...future.strategy.old <- future::plan("list")
[18:03:51.151]                   options(future.plan = NULL)
[18:03:51.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:51.151]                 }
[18:03:51.151]                 ...future.workdir <- getwd()
[18:03:51.151]             }
[18:03:51.151]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:51.151]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:51.151]         }
[18:03:51.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:51.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:51.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:51.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:51.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:51.151]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:51.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:51.151]             base::names(...future.oldOptions))
[18:03:51.151]     }
[18:03:51.151]     if (FALSE) {
[18:03:51.151]     }
[18:03:51.151]     else {
[18:03:51.151]         if (TRUE) {
[18:03:51.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:51.151]                 open = "w")
[18:03:51.151]         }
[18:03:51.151]         else {
[18:03:51.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:51.151]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:51.151]         }
[18:03:51.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:51.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:51.151]             base::sink(type = "output", split = FALSE)
[18:03:51.151]             base::close(...future.stdout)
[18:03:51.151]         }, add = TRUE)
[18:03:51.151]     }
[18:03:51.151]     ...future.frame <- base::sys.nframe()
[18:03:51.151]     ...future.conditions <- base::list()
[18:03:51.151]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:51.151]     if (FALSE) {
[18:03:51.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:51.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:51.151]     }
[18:03:51.151]     ...future.result <- base::tryCatch({
[18:03:51.151]         base::withCallingHandlers({
[18:03:51.151]             ...future.value <- base::withVisible(base::local({
[18:03:51.151]                 42L
[18:03:51.151]             }))
[18:03:51.151]             future::FutureResult(value = ...future.value$value, 
[18:03:51.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.151]                   ...future.rng), globalenv = if (FALSE) 
[18:03:51.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:51.151]                     ...future.globalenv.names))
[18:03:51.151]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:51.151]         }, condition = base::local({
[18:03:51.151]             c <- base::c
[18:03:51.151]             inherits <- base::inherits
[18:03:51.151]             invokeRestart <- base::invokeRestart
[18:03:51.151]             length <- base::length
[18:03:51.151]             list <- base::list
[18:03:51.151]             seq.int <- base::seq.int
[18:03:51.151]             signalCondition <- base::signalCondition
[18:03:51.151]             sys.calls <- base::sys.calls
[18:03:51.151]             `[[` <- base::`[[`
[18:03:51.151]             `+` <- base::`+`
[18:03:51.151]             `<<-` <- base::`<<-`
[18:03:51.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:51.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:51.151]                   3L)]
[18:03:51.151]             }
[18:03:51.151]             function(cond) {
[18:03:51.151]                 is_error <- inherits(cond, "error")
[18:03:51.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:51.151]                   NULL)
[18:03:51.151]                 if (is_error) {
[18:03:51.151]                   sessionInformation <- function() {
[18:03:51.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:51.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:51.151]                       search = base::search(), system = base::Sys.info())
[18:03:51.151]                   }
[18:03:51.151]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:51.151]                     cond$call), session = sessionInformation(), 
[18:03:51.151]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:51.151]                   signalCondition(cond)
[18:03:51.151]                 }
[18:03:51.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:51.151]                 "immediateCondition"))) {
[18:03:51.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:51.151]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:51.151]                   if (TRUE && !signal) {
[18:03:51.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.151]                     {
[18:03:51.151]                       inherits <- base::inherits
[18:03:51.151]                       invokeRestart <- base::invokeRestart
[18:03:51.151]                       is.null <- base::is.null
[18:03:51.151]                       muffled <- FALSE
[18:03:51.151]                       if (inherits(cond, "message")) {
[18:03:51.151]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.151]                         if (muffled) 
[18:03:51.151]                           invokeRestart("muffleMessage")
[18:03:51.151]                       }
[18:03:51.151]                       else if (inherits(cond, "warning")) {
[18:03:51.151]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.151]                         if (muffled) 
[18:03:51.151]                           invokeRestart("muffleWarning")
[18:03:51.151]                       }
[18:03:51.151]                       else if (inherits(cond, "condition")) {
[18:03:51.151]                         if (!is.null(pattern)) {
[18:03:51.151]                           computeRestarts <- base::computeRestarts
[18:03:51.151]                           grepl <- base::grepl
[18:03:51.151]                           restarts <- computeRestarts(cond)
[18:03:51.151]                           for (restart in restarts) {
[18:03:51.151]                             name <- restart$name
[18:03:51.151]                             if (is.null(name)) 
[18:03:51.151]                               next
[18:03:51.151]                             if (!grepl(pattern, name)) 
[18:03:51.151]                               next
[18:03:51.151]                             invokeRestart(restart)
[18:03:51.151]                             muffled <- TRUE
[18:03:51.151]                             break
[18:03:51.151]                           }
[18:03:51.151]                         }
[18:03:51.151]                       }
[18:03:51.151]                       invisible(muffled)
[18:03:51.151]                     }
[18:03:51.151]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.151]                   }
[18:03:51.151]                 }
[18:03:51.151]                 else {
[18:03:51.151]                   if (TRUE) {
[18:03:51.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.151]                     {
[18:03:51.151]                       inherits <- base::inherits
[18:03:51.151]                       invokeRestart <- base::invokeRestart
[18:03:51.151]                       is.null <- base::is.null
[18:03:51.151]                       muffled <- FALSE
[18:03:51.151]                       if (inherits(cond, "message")) {
[18:03:51.151]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.151]                         if (muffled) 
[18:03:51.151]                           invokeRestart("muffleMessage")
[18:03:51.151]                       }
[18:03:51.151]                       else if (inherits(cond, "warning")) {
[18:03:51.151]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.151]                         if (muffled) 
[18:03:51.151]                           invokeRestart("muffleWarning")
[18:03:51.151]                       }
[18:03:51.151]                       else if (inherits(cond, "condition")) {
[18:03:51.151]                         if (!is.null(pattern)) {
[18:03:51.151]                           computeRestarts <- base::computeRestarts
[18:03:51.151]                           grepl <- base::grepl
[18:03:51.151]                           restarts <- computeRestarts(cond)
[18:03:51.151]                           for (restart in restarts) {
[18:03:51.151]                             name <- restart$name
[18:03:51.151]                             if (is.null(name)) 
[18:03:51.151]                               next
[18:03:51.151]                             if (!grepl(pattern, name)) 
[18:03:51.151]                               next
[18:03:51.151]                             invokeRestart(restart)
[18:03:51.151]                             muffled <- TRUE
[18:03:51.151]                             break
[18:03:51.151]                           }
[18:03:51.151]                         }
[18:03:51.151]                       }
[18:03:51.151]                       invisible(muffled)
[18:03:51.151]                     }
[18:03:51.151]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.151]                   }
[18:03:51.151]                 }
[18:03:51.151]             }
[18:03:51.151]         }))
[18:03:51.151]     }, error = function(ex) {
[18:03:51.151]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:51.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.151]                 ...future.rng), started = ...future.startTime, 
[18:03:51.151]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:51.151]             version = "1.8"), class = "FutureResult")
[18:03:51.151]     }, finally = {
[18:03:51.151]         if (!identical(...future.workdir, getwd())) 
[18:03:51.151]             setwd(...future.workdir)
[18:03:51.151]         {
[18:03:51.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:51.151]                 ...future.oldOptions$nwarnings <- NULL
[18:03:51.151]             }
[18:03:51.151]             base::options(...future.oldOptions)
[18:03:51.151]             if (.Platform$OS.type == "windows") {
[18:03:51.151]                 old_names <- names(...future.oldEnvVars)
[18:03:51.151]                 envs <- base::Sys.getenv()
[18:03:51.151]                 names <- names(envs)
[18:03:51.151]                 common <- intersect(names, old_names)
[18:03:51.151]                 added <- setdiff(names, old_names)
[18:03:51.151]                 removed <- setdiff(old_names, names)
[18:03:51.151]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:51.151]                   envs[common]]
[18:03:51.151]                 NAMES <- toupper(changed)
[18:03:51.151]                 args <- list()
[18:03:51.151]                 for (kk in seq_along(NAMES)) {
[18:03:51.151]                   name <- changed[[kk]]
[18:03:51.151]                   NAME <- NAMES[[kk]]
[18:03:51.151]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.151]                     next
[18:03:51.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.151]                 }
[18:03:51.151]                 NAMES <- toupper(added)
[18:03:51.151]                 for (kk in seq_along(NAMES)) {
[18:03:51.151]                   name <- added[[kk]]
[18:03:51.151]                   NAME <- NAMES[[kk]]
[18:03:51.151]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.151]                     next
[18:03:51.151]                   args[[name]] <- ""
[18:03:51.151]                 }
[18:03:51.151]                 NAMES <- toupper(removed)
[18:03:51.151]                 for (kk in seq_along(NAMES)) {
[18:03:51.151]                   name <- removed[[kk]]
[18:03:51.151]                   NAME <- NAMES[[kk]]
[18:03:51.151]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.151]                     next
[18:03:51.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.151]                 }
[18:03:51.151]                 if (length(args) > 0) 
[18:03:51.151]                   base::do.call(base::Sys.setenv, args = args)
[18:03:51.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:51.151]             }
[18:03:51.151]             else {
[18:03:51.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:51.151]             }
[18:03:51.151]             {
[18:03:51.151]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:51.151]                   0L) {
[18:03:51.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:51.151]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:51.151]                   base::options(opts)
[18:03:51.151]                 }
[18:03:51.151]                 {
[18:03:51.151]                   {
[18:03:51.151]                     NULL
[18:03:51.151]                     RNGkind("Mersenne-Twister")
[18:03:51.151]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:51.151]                       inherits = FALSE)
[18:03:51.151]                   }
[18:03:51.151]                   options(future.plan = NULL)
[18:03:51.151]                   if (is.na(NA_character_)) 
[18:03:51.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:51.151]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:51.151]                     .init = FALSE)
[18:03:51.151]                 }
[18:03:51.151]             }
[18:03:51.151]         }
[18:03:51.151]     })
[18:03:51.151]     if (TRUE) {
[18:03:51.151]         base::sink(type = "output", split = FALSE)
[18:03:51.151]         if (TRUE) {
[18:03:51.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:51.151]         }
[18:03:51.151]         else {
[18:03:51.151]             ...future.result["stdout"] <- base::list(NULL)
[18:03:51.151]         }
[18:03:51.151]         base::close(...future.stdout)
[18:03:51.151]         ...future.stdout <- NULL
[18:03:51.151]     }
[18:03:51.151]     ...future.result$conditions <- ...future.conditions
[18:03:51.151]     ...future.result$finished <- base::Sys.time()
[18:03:51.151]     ...future.result
[18:03:51.151] }
[18:03:51.155] plan(): Setting new future strategy stack:
[18:03:51.155] List of future strategies:
[18:03:51.155] 1. sequential:
[18:03:51.155]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:51.155]    - tweaked: FALSE
[18:03:51.155]    - call: NULL
[18:03:51.156] plan(): nbrOfWorkers() = 1
[18:03:51.157] plan(): Setting new future strategy stack:
[18:03:51.157] List of future strategies:
[18:03:51.157] 1. future:
[18:03:51.157]    - args: function (..., workers = "<NULL>")
[18:03:51.157]    - tweaked: FALSE
[18:03:51.157]    - call: plan(foo)
[18:03:51.158] plan(): nbrOfWorkers() = Inf
[18:03:51.159] SequentialFuture started (and completed)
[1] 42
[18:03:51.162] getGlobalsAndPackages() ...
[18:03:51.162] 
[18:03:51.162] - globals: [0] <none>
[18:03:51.163] getGlobalsAndPackages() ... DONE
[18:03:51.163] [local output] makeClusterPSOCK() ...
[18:03:51.215] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:03:51.217] [local output] Base port: 11672
[18:03:51.217] [local output] Getting setup options for 2 cluster nodes ...
[18:03:51.217] [local output]  - Node 1 of 2 ...
[18:03:51.218] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:51.219] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmptiRTxa/worker.rank=1.parallelly.parent=320831.4e53f30737bbb.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmptiRTxa/worker.rank=1.parallelly.parent=320831.4e53f30737bbb.pid")'’
[18:03:51.473] - Possible to infer worker's PID: TRUE
[18:03:51.473] [local output] Rscript port: 11672

[18:03:51.474] [local output]  - Node 2 of 2 ...
[18:03:51.476] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:51.477] [local output] Rscript port: 11672

[18:03:51.478] [local output] Getting setup options for 2 cluster nodes ... done
[18:03:51.478] [local output]  - Parallel setup requested for some PSOCK nodes
[18:03:51.479] [local output] Setting up PSOCK nodes in parallel
[18:03:51.479] List of 36
[18:03:51.479]  $ worker          : chr "localhost"
[18:03:51.479]   ..- attr(*, "localhost")= logi TRUE
[18:03:51.479]  $ master          : chr "localhost"
[18:03:51.479]  $ port            : int 11672
[18:03:51.479]  $ connectTimeout  : num 120
[18:03:51.479]  $ timeout         : num 2592000
[18:03:51.479]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:03:51.479]  $ homogeneous     : logi TRUE
[18:03:51.479]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:03:51.479]  $ rscript_envs    : NULL
[18:03:51.479]  $ rscript_libs    : NULL
[18:03:51.479]  $ rscript_startup : NULL
[18:03:51.479]  $ rscript_sh      : chr "sh"
[18:03:51.479]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:51.479]  $ methods         : logi TRUE
[18:03:51.479]  $ socketOptions   : chr "no-delay"
[18:03:51.479]  $ useXDR          : logi FALSE
[18:03:51.479]  $ outfile         : chr "/dev/null"
[18:03:51.479]  $ renice          : int NA
[18:03:51.479]  $ rshcmd          : NULL
[18:03:51.479]  $ user            : chr(0) 
[18:03:51.479]  $ revtunnel       : logi FALSE
[18:03:51.479]  $ rshlogfile      : NULL
[18:03:51.479]  $ rshopts         : chr(0) 
[18:03:51.479]  $ rank            : int 1
[18:03:51.479]  $ manual          : logi FALSE
[18:03:51.479]  $ dryrun          : logi FALSE
[18:03:51.479]  $ quiet           : logi FALSE
[18:03:51.479]  $ setup_strategy  : chr "parallel"
[18:03:51.479]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:51.479]  $ pidfile         : chr "/tmp/RtmptiRTxa/worker.rank=1.parallelly.parent=320831.4e53f30737bbb.pid"
[18:03:51.479]  $ rshcmd_label    : NULL
[18:03:51.479]  $ rsh_call        : NULL
[18:03:51.479]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:51.479]  $ localMachine    : logi TRUE
[18:03:51.479]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:03:51.479]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:03:51.479]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:03:51.479]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:03:51.479]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:03:51.479]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:03:51.479]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:03:51.479]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:03:51.479]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:03:51.479]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:03:51.479]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:03:51.479]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:03:51.479]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:03:51.479]  $ arguments       :List of 28
[18:03:51.479]   ..$ worker          : chr "localhost"
[18:03:51.479]   ..$ master          : NULL
[18:03:51.479]   ..$ port            : int 11672
[18:03:51.479]   ..$ connectTimeout  : num 120
[18:03:51.479]   ..$ timeout         : num 2592000
[18:03:51.479]   ..$ rscript         : NULL
[18:03:51.479]   ..$ homogeneous     : NULL
[18:03:51.479]   ..$ rscript_args    : NULL
[18:03:51.479]   ..$ rscript_envs    : NULL
[18:03:51.479]   ..$ rscript_libs    : NULL
[18:03:51.479]   ..$ rscript_startup : NULL
[18:03:51.479]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:03:51.479]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:51.479]   ..$ methods         : logi TRUE
[18:03:51.479]   ..$ socketOptions   : chr "no-delay"
[18:03:51.479]   ..$ useXDR          : logi FALSE
[18:03:51.479]   ..$ outfile         : chr "/dev/null"
[18:03:51.479]   ..$ renice          : int NA
[18:03:51.479]   ..$ rshcmd          : NULL
[18:03:51.479]   ..$ user            : NULL
[18:03:51.479]   ..$ revtunnel       : logi NA
[18:03:51.479]   ..$ rshlogfile      : NULL
[18:03:51.479]   ..$ rshopts         : NULL
[18:03:51.479]   ..$ rank            : int 1
[18:03:51.479]   ..$ manual          : logi FALSE
[18:03:51.479]   ..$ dryrun          : logi FALSE
[18:03:51.479]   ..$ quiet           : logi FALSE
[18:03:51.479]   ..$ setup_strategy  : chr "parallel"
[18:03:51.479]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:03:51.512] [local output] System call to launch all workers:
[18:03:51.512] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmptiRTxa/worker.rank=1.parallelly.parent=320831.4e53f30737bbb.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11672 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:03:51.513] [local output] Starting PSOCK main server
[18:03:51.521] [local output] Workers launched
[18:03:51.521] [local output] Waiting for workers to connect back
[18:03:51.521]  - [local output] 0 workers out of 2 ready
[18:03:51.869]  - [local output] 0 workers out of 2 ready
[18:03:51.870]  - [local output] 1 workers out of 2 ready
[18:03:51.873]  - [local output] 1 workers out of 2 ready
[18:03:51.873]  - [local output] 2 workers out of 2 ready
[18:03:51.873] [local output] Launching of workers completed
[18:03:51.874] [local output] Collecting session information from workers
[18:03:51.875] [local output]  - Worker #1 of 2
[18:03:51.876] [local output]  - Worker #2 of 2
[18:03:51.877] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x64a16b751710
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 30349bb1-bc12-0709-ef6b-eafcbd06dcd9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:51.896] Packages needed by the future expression (n = 0): <none>
[18:03:51.896] Packages needed by future strategies (n = 0): <none>
[18:03:51.897] {
[18:03:51.897]     {
[18:03:51.897]         {
[18:03:51.897]             ...future.startTime <- base::Sys.time()
[18:03:51.897]             {
[18:03:51.897]                 {
[18:03:51.897]                   {
[18:03:51.897]                     {
[18:03:51.897]                       base::local({
[18:03:51.897]                         has_future <- base::requireNamespace("future", 
[18:03:51.897]                           quietly = TRUE)
[18:03:51.897]                         if (has_future) {
[18:03:51.897]                           ns <- base::getNamespace("future")
[18:03:51.897]                           version <- ns[[".package"]][["version"]]
[18:03:51.897]                           if (is.null(version)) 
[18:03:51.897]                             version <- utils::packageVersion("future")
[18:03:51.897]                         }
[18:03:51.897]                         else {
[18:03:51.897]                           version <- NULL
[18:03:51.897]                         }
[18:03:51.897]                         if (!has_future || version < "1.8.0") {
[18:03:51.897]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:51.897]                             "", base::R.version$version.string), 
[18:03:51.897]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:51.897]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:51.897]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:51.897]                               "release", "version")], collapse = " "), 
[18:03:51.897]                             hostname = base::Sys.info()[["nodename"]])
[18:03:51.897]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:51.897]                             info)
[18:03:51.897]                           info <- base::paste(info, collapse = "; ")
[18:03:51.897]                           if (!has_future) {
[18:03:51.897]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:51.897]                               info)
[18:03:51.897]                           }
[18:03:51.897]                           else {
[18:03:51.897]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:51.897]                               info, version)
[18:03:51.897]                           }
[18:03:51.897]                           base::stop(msg)
[18:03:51.897]                         }
[18:03:51.897]                       })
[18:03:51.897]                     }
[18:03:51.897]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:51.897]                     base::options(mc.cores = 1L)
[18:03:51.897]                   }
[18:03:51.897]                   ...future.strategy.old <- future::plan("list")
[18:03:51.897]                   options(future.plan = NULL)
[18:03:51.897]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.897]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:51.897]                 }
[18:03:51.897]                 ...future.workdir <- getwd()
[18:03:51.897]             }
[18:03:51.897]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:51.897]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:51.897]         }
[18:03:51.897]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:51.897]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:51.897]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:51.897]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:51.897]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:51.897]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:51.897]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:51.897]             base::names(...future.oldOptions))
[18:03:51.897]     }
[18:03:51.897]     if (FALSE) {
[18:03:51.897]     }
[18:03:51.897]     else {
[18:03:51.897]         if (TRUE) {
[18:03:51.897]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:51.897]                 open = "w")
[18:03:51.897]         }
[18:03:51.897]         else {
[18:03:51.897]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:51.897]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:51.897]         }
[18:03:51.897]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:51.897]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:51.897]             base::sink(type = "output", split = FALSE)
[18:03:51.897]             base::close(...future.stdout)
[18:03:51.897]         }, add = TRUE)
[18:03:51.897]     }
[18:03:51.897]     ...future.frame <- base::sys.nframe()
[18:03:51.897]     ...future.conditions <- base::list()
[18:03:51.897]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:51.897]     if (FALSE) {
[18:03:51.897]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:51.897]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:51.897]     }
[18:03:51.897]     ...future.result <- base::tryCatch({
[18:03:51.897]         base::withCallingHandlers({
[18:03:51.897]             ...future.value <- base::withVisible(base::local({
[18:03:51.897]                 ...future.makeSendCondition <- base::local({
[18:03:51.897]                   sendCondition <- NULL
[18:03:51.897]                   function(frame = 1L) {
[18:03:51.897]                     if (is.function(sendCondition)) 
[18:03:51.897]                       return(sendCondition)
[18:03:51.897]                     ns <- getNamespace("parallel")
[18:03:51.897]                     if (exists("sendData", mode = "function", 
[18:03:51.897]                       envir = ns)) {
[18:03:51.897]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:51.897]                         envir = ns)
[18:03:51.897]                       envir <- sys.frame(frame)
[18:03:51.897]                       master <- NULL
[18:03:51.897]                       while (!identical(envir, .GlobalEnv) && 
[18:03:51.897]                         !identical(envir, emptyenv())) {
[18:03:51.897]                         if (exists("master", mode = "list", envir = envir, 
[18:03:51.897]                           inherits = FALSE)) {
[18:03:51.897]                           master <- get("master", mode = "list", 
[18:03:51.897]                             envir = envir, inherits = FALSE)
[18:03:51.897]                           if (inherits(master, c("SOCKnode", 
[18:03:51.897]                             "SOCK0node"))) {
[18:03:51.897]                             sendCondition <<- function(cond) {
[18:03:51.897]                               data <- list(type = "VALUE", value = cond, 
[18:03:51.897]                                 success = TRUE)
[18:03:51.897]                               parallel_sendData(master, data)
[18:03:51.897]                             }
[18:03:51.897]                             return(sendCondition)
[18:03:51.897]                           }
[18:03:51.897]                         }
[18:03:51.897]                         frame <- frame + 1L
[18:03:51.897]                         envir <- sys.frame(frame)
[18:03:51.897]                       }
[18:03:51.897]                     }
[18:03:51.897]                     sendCondition <<- function(cond) NULL
[18:03:51.897]                   }
[18:03:51.897]                 })
[18:03:51.897]                 withCallingHandlers({
[18:03:51.897]                   {
[18:03:51.897]                     42L
[18:03:51.897]                   }
[18:03:51.897]                 }, immediateCondition = function(cond) {
[18:03:51.897]                   sendCondition <- ...future.makeSendCondition()
[18:03:51.897]                   sendCondition(cond)
[18:03:51.897]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.897]                   {
[18:03:51.897]                     inherits <- base::inherits
[18:03:51.897]                     invokeRestart <- base::invokeRestart
[18:03:51.897]                     is.null <- base::is.null
[18:03:51.897]                     muffled <- FALSE
[18:03:51.897]                     if (inherits(cond, "message")) {
[18:03:51.897]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:51.897]                       if (muffled) 
[18:03:51.897]                         invokeRestart("muffleMessage")
[18:03:51.897]                     }
[18:03:51.897]                     else if (inherits(cond, "warning")) {
[18:03:51.897]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:51.897]                       if (muffled) 
[18:03:51.897]                         invokeRestart("muffleWarning")
[18:03:51.897]                     }
[18:03:51.897]                     else if (inherits(cond, "condition")) {
[18:03:51.897]                       if (!is.null(pattern)) {
[18:03:51.897]                         computeRestarts <- base::computeRestarts
[18:03:51.897]                         grepl <- base::grepl
[18:03:51.897]                         restarts <- computeRestarts(cond)
[18:03:51.897]                         for (restart in restarts) {
[18:03:51.897]                           name <- restart$name
[18:03:51.897]                           if (is.null(name)) 
[18:03:51.897]                             next
[18:03:51.897]                           if (!grepl(pattern, name)) 
[18:03:51.897]                             next
[18:03:51.897]                           invokeRestart(restart)
[18:03:51.897]                           muffled <- TRUE
[18:03:51.897]                           break
[18:03:51.897]                         }
[18:03:51.897]                       }
[18:03:51.897]                     }
[18:03:51.897]                     invisible(muffled)
[18:03:51.897]                   }
[18:03:51.897]                   muffleCondition(cond)
[18:03:51.897]                 })
[18:03:51.897]             }))
[18:03:51.897]             future::FutureResult(value = ...future.value$value, 
[18:03:51.897]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.897]                   ...future.rng), globalenv = if (FALSE) 
[18:03:51.897]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:51.897]                     ...future.globalenv.names))
[18:03:51.897]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:51.897]         }, condition = base::local({
[18:03:51.897]             c <- base::c
[18:03:51.897]             inherits <- base::inherits
[18:03:51.897]             invokeRestart <- base::invokeRestart
[18:03:51.897]             length <- base::length
[18:03:51.897]             list <- base::list
[18:03:51.897]             seq.int <- base::seq.int
[18:03:51.897]             signalCondition <- base::signalCondition
[18:03:51.897]             sys.calls <- base::sys.calls
[18:03:51.897]             `[[` <- base::`[[`
[18:03:51.897]             `+` <- base::`+`
[18:03:51.897]             `<<-` <- base::`<<-`
[18:03:51.897]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:51.897]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:51.897]                   3L)]
[18:03:51.897]             }
[18:03:51.897]             function(cond) {
[18:03:51.897]                 is_error <- inherits(cond, "error")
[18:03:51.897]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:51.897]                   NULL)
[18:03:51.897]                 if (is_error) {
[18:03:51.897]                   sessionInformation <- function() {
[18:03:51.897]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:51.897]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:51.897]                       search = base::search(), system = base::Sys.info())
[18:03:51.897]                   }
[18:03:51.897]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.897]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:51.897]                     cond$call), session = sessionInformation(), 
[18:03:51.897]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:51.897]                   signalCondition(cond)
[18:03:51.897]                 }
[18:03:51.897]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:51.897]                 "immediateCondition"))) {
[18:03:51.897]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:51.897]                   ...future.conditions[[length(...future.conditions) + 
[18:03:51.897]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:51.897]                   if (TRUE && !signal) {
[18:03:51.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.897]                     {
[18:03:51.897]                       inherits <- base::inherits
[18:03:51.897]                       invokeRestart <- base::invokeRestart
[18:03:51.897]                       is.null <- base::is.null
[18:03:51.897]                       muffled <- FALSE
[18:03:51.897]                       if (inherits(cond, "message")) {
[18:03:51.897]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.897]                         if (muffled) 
[18:03:51.897]                           invokeRestart("muffleMessage")
[18:03:51.897]                       }
[18:03:51.897]                       else if (inherits(cond, "warning")) {
[18:03:51.897]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.897]                         if (muffled) 
[18:03:51.897]                           invokeRestart("muffleWarning")
[18:03:51.897]                       }
[18:03:51.897]                       else if (inherits(cond, "condition")) {
[18:03:51.897]                         if (!is.null(pattern)) {
[18:03:51.897]                           computeRestarts <- base::computeRestarts
[18:03:51.897]                           grepl <- base::grepl
[18:03:51.897]                           restarts <- computeRestarts(cond)
[18:03:51.897]                           for (restart in restarts) {
[18:03:51.897]                             name <- restart$name
[18:03:51.897]                             if (is.null(name)) 
[18:03:51.897]                               next
[18:03:51.897]                             if (!grepl(pattern, name)) 
[18:03:51.897]                               next
[18:03:51.897]                             invokeRestart(restart)
[18:03:51.897]                             muffled <- TRUE
[18:03:51.897]                             break
[18:03:51.897]                           }
[18:03:51.897]                         }
[18:03:51.897]                       }
[18:03:51.897]                       invisible(muffled)
[18:03:51.897]                     }
[18:03:51.897]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.897]                   }
[18:03:51.897]                 }
[18:03:51.897]                 else {
[18:03:51.897]                   if (TRUE) {
[18:03:51.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:51.897]                     {
[18:03:51.897]                       inherits <- base::inherits
[18:03:51.897]                       invokeRestart <- base::invokeRestart
[18:03:51.897]                       is.null <- base::is.null
[18:03:51.897]                       muffled <- FALSE
[18:03:51.897]                       if (inherits(cond, "message")) {
[18:03:51.897]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:51.897]                         if (muffled) 
[18:03:51.897]                           invokeRestart("muffleMessage")
[18:03:51.897]                       }
[18:03:51.897]                       else if (inherits(cond, "warning")) {
[18:03:51.897]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:51.897]                         if (muffled) 
[18:03:51.897]                           invokeRestart("muffleWarning")
[18:03:51.897]                       }
[18:03:51.897]                       else if (inherits(cond, "condition")) {
[18:03:51.897]                         if (!is.null(pattern)) {
[18:03:51.897]                           computeRestarts <- base::computeRestarts
[18:03:51.897]                           grepl <- base::grepl
[18:03:51.897]                           restarts <- computeRestarts(cond)
[18:03:51.897]                           for (restart in restarts) {
[18:03:51.897]                             name <- restart$name
[18:03:51.897]                             if (is.null(name)) 
[18:03:51.897]                               next
[18:03:51.897]                             if (!grepl(pattern, name)) 
[18:03:51.897]                               next
[18:03:51.897]                             invokeRestart(restart)
[18:03:51.897]                             muffled <- TRUE
[18:03:51.897]                             break
[18:03:51.897]                           }
[18:03:51.897]                         }
[18:03:51.897]                       }
[18:03:51.897]                       invisible(muffled)
[18:03:51.897]                     }
[18:03:51.897]                     muffleCondition(cond, pattern = "^muffle")
[18:03:51.897]                   }
[18:03:51.897]                 }
[18:03:51.897]             }
[18:03:51.897]         }))
[18:03:51.897]     }, error = function(ex) {
[18:03:51.897]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:51.897]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:51.897]                 ...future.rng), started = ...future.startTime, 
[18:03:51.897]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:51.897]             version = "1.8"), class = "FutureResult")
[18:03:51.897]     }, finally = {
[18:03:51.897]         if (!identical(...future.workdir, getwd())) 
[18:03:51.897]             setwd(...future.workdir)
[18:03:51.897]         {
[18:03:51.897]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:51.897]                 ...future.oldOptions$nwarnings <- NULL
[18:03:51.897]             }
[18:03:51.897]             base::options(...future.oldOptions)
[18:03:51.897]             if (.Platform$OS.type == "windows") {
[18:03:51.897]                 old_names <- names(...future.oldEnvVars)
[18:03:51.897]                 envs <- base::Sys.getenv()
[18:03:51.897]                 names <- names(envs)
[18:03:51.897]                 common <- intersect(names, old_names)
[18:03:51.897]                 added <- setdiff(names, old_names)
[18:03:51.897]                 removed <- setdiff(old_names, names)
[18:03:51.897]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:51.897]                   envs[common]]
[18:03:51.897]                 NAMES <- toupper(changed)
[18:03:51.897]                 args <- list()
[18:03:51.897]                 for (kk in seq_along(NAMES)) {
[18:03:51.897]                   name <- changed[[kk]]
[18:03:51.897]                   NAME <- NAMES[[kk]]
[18:03:51.897]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.897]                     next
[18:03:51.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.897]                 }
[18:03:51.897]                 NAMES <- toupper(added)
[18:03:51.897]                 for (kk in seq_along(NAMES)) {
[18:03:51.897]                   name <- added[[kk]]
[18:03:51.897]                   NAME <- NAMES[[kk]]
[18:03:51.897]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.897]                     next
[18:03:51.897]                   args[[name]] <- ""
[18:03:51.897]                 }
[18:03:51.897]                 NAMES <- toupper(removed)
[18:03:51.897]                 for (kk in seq_along(NAMES)) {
[18:03:51.897]                   name <- removed[[kk]]
[18:03:51.897]                   NAME <- NAMES[[kk]]
[18:03:51.897]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:51.897]                     next
[18:03:51.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:51.897]                 }
[18:03:51.897]                 if (length(args) > 0) 
[18:03:51.897]                   base::do.call(base::Sys.setenv, args = args)
[18:03:51.897]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:51.897]             }
[18:03:51.897]             else {
[18:03:51.897]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:51.897]             }
[18:03:51.897]             {
[18:03:51.897]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:51.897]                   0L) {
[18:03:51.897]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:51.897]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:51.897]                   base::options(opts)
[18:03:51.897]                 }
[18:03:51.897]                 {
[18:03:51.897]                   {
[18:03:51.897]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:51.897]                     NULL
[18:03:51.897]                   }
[18:03:51.897]                   options(future.plan = NULL)
[18:03:51.897]                   if (is.na(NA_character_)) 
[18:03:51.897]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:51.897]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:51.897]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:51.897]                     .init = FALSE)
[18:03:51.897]                 }
[18:03:51.897]             }
[18:03:51.897]         }
[18:03:51.897]     })
[18:03:51.897]     if (TRUE) {
[18:03:51.897]         base::sink(type = "output", split = FALSE)
[18:03:51.897]         if (TRUE) {
[18:03:51.897]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:51.897]         }
[18:03:51.897]         else {
[18:03:51.897]             ...future.result["stdout"] <- base::list(NULL)
[18:03:51.897]         }
[18:03:51.897]         base::close(...future.stdout)
[18:03:51.897]         ...future.stdout <- NULL
[18:03:51.897]     }
[18:03:51.897]     ...future.result$conditions <- ...future.conditions
[18:03:51.897]     ...future.result$finished <- base::Sys.time()
[18:03:51.897]     ...future.result
[18:03:51.897] }
[18:03:51.998] MultisessionFuture started
[18:03:51.998] result() for ClusterFuture ...
[18:03:51.999] receiveMessageFromWorker() for ClusterFuture ...
[18:03:51.999] - Validating connection of MultisessionFuture
[18:03:52.063] - received message: FutureResult
[18:03:52.063] - Received FutureResult
[18:03:52.071] - Erased future from FutureRegistry
[18:03:52.072] result() for ClusterFuture ...
[18:03:52.072] - result already collected: FutureResult
[18:03:52.072] result() for ClusterFuture ... done
[18:03:52.073] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:52.073] result() for ClusterFuture ... done
[18:03:52.074] result() for ClusterFuture ...
[18:03:52.074] - result already collected: FutureResult
[18:03:52.074] result() for ClusterFuture ... done
[1] 42
[18:03:52.078] getGlobalsAndPackages() ...
[18:03:52.078] 
[18:03:52.079] - globals: [0] <none>
[18:03:52.079] getGlobalsAndPackages() ... DONE
[18:03:52.111] Packages needed by the future expression (n = 0): <none>
[18:03:52.112] Packages needed by future strategies (n = 0): <none>
[18:03:52.113] {
[18:03:52.113]     {
[18:03:52.113]         {
[18:03:52.113]             ...future.startTime <- base::Sys.time()
[18:03:52.113]             {
[18:03:52.113]                 {
[18:03:52.113]                   {
[18:03:52.113]                     {
[18:03:52.113]                       base::local({
[18:03:52.113]                         has_future <- base::requireNamespace("future", 
[18:03:52.113]                           quietly = TRUE)
[18:03:52.113]                         if (has_future) {
[18:03:52.113]                           ns <- base::getNamespace("future")
[18:03:52.113]                           version <- ns[[".package"]][["version"]]
[18:03:52.113]                           if (is.null(version)) 
[18:03:52.113]                             version <- utils::packageVersion("future")
[18:03:52.113]                         }
[18:03:52.113]                         else {
[18:03:52.113]                           version <- NULL
[18:03:52.113]                         }
[18:03:52.113]                         if (!has_future || version < "1.8.0") {
[18:03:52.113]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.113]                             "", base::R.version$version.string), 
[18:03:52.113]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:52.113]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.113]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.113]                               "release", "version")], collapse = " "), 
[18:03:52.113]                             hostname = base::Sys.info()[["nodename"]])
[18:03:52.113]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.113]                             info)
[18:03:52.113]                           info <- base::paste(info, collapse = "; ")
[18:03:52.113]                           if (!has_future) {
[18:03:52.113]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.113]                               info)
[18:03:52.113]                           }
[18:03:52.113]                           else {
[18:03:52.113]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.113]                               info, version)
[18:03:52.113]                           }
[18:03:52.113]                           base::stop(msg)
[18:03:52.113]                         }
[18:03:52.113]                       })
[18:03:52.113]                     }
[18:03:52.113]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:52.113]                     base::options(mc.cores = 1L)
[18:03:52.113]                   }
[18:03:52.113]                   ...future.strategy.old <- future::plan("list")
[18:03:52.113]                   options(future.plan = NULL)
[18:03:52.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.113]                 }
[18:03:52.113]                 ...future.workdir <- getwd()
[18:03:52.113]             }
[18:03:52.113]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.113]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.113]         }
[18:03:52.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.113]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.113]             base::names(...future.oldOptions))
[18:03:52.113]     }
[18:03:52.113]     if (FALSE) {
[18:03:52.113]     }
[18:03:52.113]     else {
[18:03:52.113]         if (TRUE) {
[18:03:52.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.113]                 open = "w")
[18:03:52.113]         }
[18:03:52.113]         else {
[18:03:52.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.113]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.113]         }
[18:03:52.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.113]             base::sink(type = "output", split = FALSE)
[18:03:52.113]             base::close(...future.stdout)
[18:03:52.113]         }, add = TRUE)
[18:03:52.113]     }
[18:03:52.113]     ...future.frame <- base::sys.nframe()
[18:03:52.113]     ...future.conditions <- base::list()
[18:03:52.113]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.113]     if (FALSE) {
[18:03:52.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.113]     }
[18:03:52.113]     ...future.result <- base::tryCatch({
[18:03:52.113]         base::withCallingHandlers({
[18:03:52.113]             ...future.value <- base::withVisible(base::local({
[18:03:52.113]                 ...future.makeSendCondition <- base::local({
[18:03:52.113]                   sendCondition <- NULL
[18:03:52.113]                   function(frame = 1L) {
[18:03:52.113]                     if (is.function(sendCondition)) 
[18:03:52.113]                       return(sendCondition)
[18:03:52.113]                     ns <- getNamespace("parallel")
[18:03:52.113]                     if (exists("sendData", mode = "function", 
[18:03:52.113]                       envir = ns)) {
[18:03:52.113]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:52.113]                         envir = ns)
[18:03:52.113]                       envir <- sys.frame(frame)
[18:03:52.113]                       master <- NULL
[18:03:52.113]                       while (!identical(envir, .GlobalEnv) && 
[18:03:52.113]                         !identical(envir, emptyenv())) {
[18:03:52.113]                         if (exists("master", mode = "list", envir = envir, 
[18:03:52.113]                           inherits = FALSE)) {
[18:03:52.113]                           master <- get("master", mode = "list", 
[18:03:52.113]                             envir = envir, inherits = FALSE)
[18:03:52.113]                           if (inherits(master, c("SOCKnode", 
[18:03:52.113]                             "SOCK0node"))) {
[18:03:52.113]                             sendCondition <<- function(cond) {
[18:03:52.113]                               data <- list(type = "VALUE", value = cond, 
[18:03:52.113]                                 success = TRUE)
[18:03:52.113]                               parallel_sendData(master, data)
[18:03:52.113]                             }
[18:03:52.113]                             return(sendCondition)
[18:03:52.113]                           }
[18:03:52.113]                         }
[18:03:52.113]                         frame <- frame + 1L
[18:03:52.113]                         envir <- sys.frame(frame)
[18:03:52.113]                       }
[18:03:52.113]                     }
[18:03:52.113]                     sendCondition <<- function(cond) NULL
[18:03:52.113]                   }
[18:03:52.113]                 })
[18:03:52.113]                 withCallingHandlers({
[18:03:52.113]                   {
[18:03:52.113]                     42L
[18:03:52.113]                   }
[18:03:52.113]                 }, immediateCondition = function(cond) {
[18:03:52.113]                   sendCondition <- ...future.makeSendCondition()
[18:03:52.113]                   sendCondition(cond)
[18:03:52.113]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.113]                   {
[18:03:52.113]                     inherits <- base::inherits
[18:03:52.113]                     invokeRestart <- base::invokeRestart
[18:03:52.113]                     is.null <- base::is.null
[18:03:52.113]                     muffled <- FALSE
[18:03:52.113]                     if (inherits(cond, "message")) {
[18:03:52.113]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:52.113]                       if (muffled) 
[18:03:52.113]                         invokeRestart("muffleMessage")
[18:03:52.113]                     }
[18:03:52.113]                     else if (inherits(cond, "warning")) {
[18:03:52.113]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:52.113]                       if (muffled) 
[18:03:52.113]                         invokeRestart("muffleWarning")
[18:03:52.113]                     }
[18:03:52.113]                     else if (inherits(cond, "condition")) {
[18:03:52.113]                       if (!is.null(pattern)) {
[18:03:52.113]                         computeRestarts <- base::computeRestarts
[18:03:52.113]                         grepl <- base::grepl
[18:03:52.113]                         restarts <- computeRestarts(cond)
[18:03:52.113]                         for (restart in restarts) {
[18:03:52.113]                           name <- restart$name
[18:03:52.113]                           if (is.null(name)) 
[18:03:52.113]                             next
[18:03:52.113]                           if (!grepl(pattern, name)) 
[18:03:52.113]                             next
[18:03:52.113]                           invokeRestart(restart)
[18:03:52.113]                           muffled <- TRUE
[18:03:52.113]                           break
[18:03:52.113]                         }
[18:03:52.113]                       }
[18:03:52.113]                     }
[18:03:52.113]                     invisible(muffled)
[18:03:52.113]                   }
[18:03:52.113]                   muffleCondition(cond)
[18:03:52.113]                 })
[18:03:52.113]             }))
[18:03:52.113]             future::FutureResult(value = ...future.value$value, 
[18:03:52.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.113]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.113]                     ...future.globalenv.names))
[18:03:52.113]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.113]         }, condition = base::local({
[18:03:52.113]             c <- base::c
[18:03:52.113]             inherits <- base::inherits
[18:03:52.113]             invokeRestart <- base::invokeRestart
[18:03:52.113]             length <- base::length
[18:03:52.113]             list <- base::list
[18:03:52.113]             seq.int <- base::seq.int
[18:03:52.113]             signalCondition <- base::signalCondition
[18:03:52.113]             sys.calls <- base::sys.calls
[18:03:52.113]             `[[` <- base::`[[`
[18:03:52.113]             `+` <- base::`+`
[18:03:52.113]             `<<-` <- base::`<<-`
[18:03:52.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.113]                   3L)]
[18:03:52.113]             }
[18:03:52.113]             function(cond) {
[18:03:52.113]                 is_error <- inherits(cond, "error")
[18:03:52.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.113]                   NULL)
[18:03:52.113]                 if (is_error) {
[18:03:52.113]                   sessionInformation <- function() {
[18:03:52.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.113]                       search = base::search(), system = base::Sys.info())
[18:03:52.113]                   }
[18:03:52.113]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.113]                     cond$call), session = sessionInformation(), 
[18:03:52.113]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.113]                   signalCondition(cond)
[18:03:52.113]                 }
[18:03:52.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.113]                 "immediateCondition"))) {
[18:03:52.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.113]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.113]                   if (TRUE && !signal) {
[18:03:52.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.113]                     {
[18:03:52.113]                       inherits <- base::inherits
[18:03:52.113]                       invokeRestart <- base::invokeRestart
[18:03:52.113]                       is.null <- base::is.null
[18:03:52.113]                       muffled <- FALSE
[18:03:52.113]                       if (inherits(cond, "message")) {
[18:03:52.113]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.113]                         if (muffled) 
[18:03:52.113]                           invokeRestart("muffleMessage")
[18:03:52.113]                       }
[18:03:52.113]                       else if (inherits(cond, "warning")) {
[18:03:52.113]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.113]                         if (muffled) 
[18:03:52.113]                           invokeRestart("muffleWarning")
[18:03:52.113]                       }
[18:03:52.113]                       else if (inherits(cond, "condition")) {
[18:03:52.113]                         if (!is.null(pattern)) {
[18:03:52.113]                           computeRestarts <- base::computeRestarts
[18:03:52.113]                           grepl <- base::grepl
[18:03:52.113]                           restarts <- computeRestarts(cond)
[18:03:52.113]                           for (restart in restarts) {
[18:03:52.113]                             name <- restart$name
[18:03:52.113]                             if (is.null(name)) 
[18:03:52.113]                               next
[18:03:52.113]                             if (!grepl(pattern, name)) 
[18:03:52.113]                               next
[18:03:52.113]                             invokeRestart(restart)
[18:03:52.113]                             muffled <- TRUE
[18:03:52.113]                             break
[18:03:52.113]                           }
[18:03:52.113]                         }
[18:03:52.113]                       }
[18:03:52.113]                       invisible(muffled)
[18:03:52.113]                     }
[18:03:52.113]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.113]                   }
[18:03:52.113]                 }
[18:03:52.113]                 else {
[18:03:52.113]                   if (TRUE) {
[18:03:52.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.113]                     {
[18:03:52.113]                       inherits <- base::inherits
[18:03:52.113]                       invokeRestart <- base::invokeRestart
[18:03:52.113]                       is.null <- base::is.null
[18:03:52.113]                       muffled <- FALSE
[18:03:52.113]                       if (inherits(cond, "message")) {
[18:03:52.113]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.113]                         if (muffled) 
[18:03:52.113]                           invokeRestart("muffleMessage")
[18:03:52.113]                       }
[18:03:52.113]                       else if (inherits(cond, "warning")) {
[18:03:52.113]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.113]                         if (muffled) 
[18:03:52.113]                           invokeRestart("muffleWarning")
[18:03:52.113]                       }
[18:03:52.113]                       else if (inherits(cond, "condition")) {
[18:03:52.113]                         if (!is.null(pattern)) {
[18:03:52.113]                           computeRestarts <- base::computeRestarts
[18:03:52.113]                           grepl <- base::grepl
[18:03:52.113]                           restarts <- computeRestarts(cond)
[18:03:52.113]                           for (restart in restarts) {
[18:03:52.113]                             name <- restart$name
[18:03:52.113]                             if (is.null(name)) 
[18:03:52.113]                               next
[18:03:52.113]                             if (!grepl(pattern, name)) 
[18:03:52.113]                               next
[18:03:52.113]                             invokeRestart(restart)
[18:03:52.113]                             muffled <- TRUE
[18:03:52.113]                             break
[18:03:52.113]                           }
[18:03:52.113]                         }
[18:03:52.113]                       }
[18:03:52.113]                       invisible(muffled)
[18:03:52.113]                     }
[18:03:52.113]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.113]                   }
[18:03:52.113]                 }
[18:03:52.113]             }
[18:03:52.113]         }))
[18:03:52.113]     }, error = function(ex) {
[18:03:52.113]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.113]                 ...future.rng), started = ...future.startTime, 
[18:03:52.113]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.113]             version = "1.8"), class = "FutureResult")
[18:03:52.113]     }, finally = {
[18:03:52.113]         if (!identical(...future.workdir, getwd())) 
[18:03:52.113]             setwd(...future.workdir)
[18:03:52.113]         {
[18:03:52.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.113]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.113]             }
[18:03:52.113]             base::options(...future.oldOptions)
[18:03:52.113]             if (.Platform$OS.type == "windows") {
[18:03:52.113]                 old_names <- names(...future.oldEnvVars)
[18:03:52.113]                 envs <- base::Sys.getenv()
[18:03:52.113]                 names <- names(envs)
[18:03:52.113]                 common <- intersect(names, old_names)
[18:03:52.113]                 added <- setdiff(names, old_names)
[18:03:52.113]                 removed <- setdiff(old_names, names)
[18:03:52.113]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.113]                   envs[common]]
[18:03:52.113]                 NAMES <- toupper(changed)
[18:03:52.113]                 args <- list()
[18:03:52.113]                 for (kk in seq_along(NAMES)) {
[18:03:52.113]                   name <- changed[[kk]]
[18:03:52.113]                   NAME <- NAMES[[kk]]
[18:03:52.113]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.113]                     next
[18:03:52.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.113]                 }
[18:03:52.113]                 NAMES <- toupper(added)
[18:03:52.113]                 for (kk in seq_along(NAMES)) {
[18:03:52.113]                   name <- added[[kk]]
[18:03:52.113]                   NAME <- NAMES[[kk]]
[18:03:52.113]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.113]                     next
[18:03:52.113]                   args[[name]] <- ""
[18:03:52.113]                 }
[18:03:52.113]                 NAMES <- toupper(removed)
[18:03:52.113]                 for (kk in seq_along(NAMES)) {
[18:03:52.113]                   name <- removed[[kk]]
[18:03:52.113]                   NAME <- NAMES[[kk]]
[18:03:52.113]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.113]                     next
[18:03:52.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.113]                 }
[18:03:52.113]                 if (length(args) > 0) 
[18:03:52.113]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.113]             }
[18:03:52.113]             else {
[18:03:52.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.113]             }
[18:03:52.113]             {
[18:03:52.113]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.113]                   0L) {
[18:03:52.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.113]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.113]                   base::options(opts)
[18:03:52.113]                 }
[18:03:52.113]                 {
[18:03:52.113]                   {
[18:03:52.113]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:52.113]                     NULL
[18:03:52.113]                   }
[18:03:52.113]                   options(future.plan = NULL)
[18:03:52.113]                   if (is.na(NA_character_)) 
[18:03:52.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.113]                     .init = FALSE)
[18:03:52.113]                 }
[18:03:52.113]             }
[18:03:52.113]         }
[18:03:52.113]     })
[18:03:52.113]     if (TRUE) {
[18:03:52.113]         base::sink(type = "output", split = FALSE)
[18:03:52.113]         if (TRUE) {
[18:03:52.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.113]         }
[18:03:52.113]         else {
[18:03:52.113]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.113]         }
[18:03:52.113]         base::close(...future.stdout)
[18:03:52.113]         ...future.stdout <- NULL
[18:03:52.113]     }
[18:03:52.113]     ...future.result$conditions <- ...future.conditions
[18:03:52.113]     ...future.result$finished <- base::Sys.time()
[18:03:52.113]     ...future.result
[18:03:52.113] }
[18:03:52.122] MultisessionFuture started
[18:03:52.123] result() for ClusterFuture ...
[18:03:52.123] receiveMessageFromWorker() for ClusterFuture ...
[18:03:52.123] - Validating connection of MultisessionFuture
[18:03:52.166] - received message: FutureResult
[18:03:52.166] - Received FutureResult
[18:03:52.167] - Erased future from FutureRegistry
[18:03:52.167] result() for ClusterFuture ...
[18:03:52.167] - result already collected: FutureResult
[18:03:52.168] result() for ClusterFuture ... done
[18:03:52.168] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:52.168] result() for ClusterFuture ... done
[18:03:52.168] result() for ClusterFuture ...
[18:03:52.169] - result already collected: FutureResult
[18:03:52.169] result() for ClusterFuture ... done
[1] 42
[18:03:52.169] getGlobalsAndPackages() ...
[18:03:52.170] Searching for globals...
[18:03:52.171] - globals found: [1] ‘{’
[18:03:52.171] Searching for globals ... DONE
[18:03:52.172] Resolving globals: FALSE
[18:03:52.172] 
[18:03:52.173] 
[18:03:52.173] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 30349bb1-bc12-0709-ef6b-eafcbd06dcd9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.174] Packages needed by the future expression (n = 0): <none>
[18:03:52.176] Packages needed by future strategies (n = 0): <none>
[18:03:52.178] {
[18:03:52.178]     {
[18:03:52.178]         {
[18:03:52.178]             ...future.startTime <- base::Sys.time()
[18:03:52.178]             {
[18:03:52.178]                 {
[18:03:52.178]                   {
[18:03:52.178]                     base::local({
[18:03:52.178]                       has_future <- base::requireNamespace("future", 
[18:03:52.178]                         quietly = TRUE)
[18:03:52.178]                       if (has_future) {
[18:03:52.178]                         ns <- base::getNamespace("future")
[18:03:52.178]                         version <- ns[[".package"]][["version"]]
[18:03:52.178]                         if (is.null(version)) 
[18:03:52.178]                           version <- utils::packageVersion("future")
[18:03:52.178]                       }
[18:03:52.178]                       else {
[18:03:52.178]                         version <- NULL
[18:03:52.178]                       }
[18:03:52.178]                       if (!has_future || version < "1.8.0") {
[18:03:52.178]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.178]                           "", base::R.version$version.string), 
[18:03:52.178]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.178]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.178]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.178]                             "release", "version")], collapse = " "), 
[18:03:52.178]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.178]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.178]                           info)
[18:03:52.178]                         info <- base::paste(info, collapse = "; ")
[18:03:52.178]                         if (!has_future) {
[18:03:52.178]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.178]                             info)
[18:03:52.178]                         }
[18:03:52.178]                         else {
[18:03:52.178]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.178]                             info, version)
[18:03:52.178]                         }
[18:03:52.178]                         base::stop(msg)
[18:03:52.178]                       }
[18:03:52.178]                     })
[18:03:52.178]                   }
[18:03:52.178]                   ...future.strategy.old <- future::plan("list")
[18:03:52.178]                   options(future.plan = NULL)
[18:03:52.178]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.178]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.178]                 }
[18:03:52.178]                 ...future.workdir <- getwd()
[18:03:52.178]             }
[18:03:52.178]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.178]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.178]         }
[18:03:52.178]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.178]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.178]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.178]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.178]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.178]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.178]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.178]             base::names(...future.oldOptions))
[18:03:52.178]     }
[18:03:52.178]     if (FALSE) {
[18:03:52.178]     }
[18:03:52.178]     else {
[18:03:52.178]         if (TRUE) {
[18:03:52.178]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.178]                 open = "w")
[18:03:52.178]         }
[18:03:52.178]         else {
[18:03:52.178]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.178]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.178]         }
[18:03:52.178]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.178]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.178]             base::sink(type = "output", split = FALSE)
[18:03:52.178]             base::close(...future.stdout)
[18:03:52.178]         }, add = TRUE)
[18:03:52.178]     }
[18:03:52.178]     ...future.frame <- base::sys.nframe()
[18:03:52.178]     ...future.conditions <- base::list()
[18:03:52.178]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.178]     if (FALSE) {
[18:03:52.178]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.178]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.178]     }
[18:03:52.178]     ...future.result <- base::tryCatch({
[18:03:52.178]         base::withCallingHandlers({
[18:03:52.178]             ...future.value <- base::withVisible(base::local({
[18:03:52.178]                 42L
[18:03:52.178]             }))
[18:03:52.178]             future::FutureResult(value = ...future.value$value, 
[18:03:52.178]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.178]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.178]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.178]                     ...future.globalenv.names))
[18:03:52.178]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.178]         }, condition = base::local({
[18:03:52.178]             c <- base::c
[18:03:52.178]             inherits <- base::inherits
[18:03:52.178]             invokeRestart <- base::invokeRestart
[18:03:52.178]             length <- base::length
[18:03:52.178]             list <- base::list
[18:03:52.178]             seq.int <- base::seq.int
[18:03:52.178]             signalCondition <- base::signalCondition
[18:03:52.178]             sys.calls <- base::sys.calls
[18:03:52.178]             `[[` <- base::`[[`
[18:03:52.178]             `+` <- base::`+`
[18:03:52.178]             `<<-` <- base::`<<-`
[18:03:52.178]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.178]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.178]                   3L)]
[18:03:52.178]             }
[18:03:52.178]             function(cond) {
[18:03:52.178]                 is_error <- inherits(cond, "error")
[18:03:52.178]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.178]                   NULL)
[18:03:52.178]                 if (is_error) {
[18:03:52.178]                   sessionInformation <- function() {
[18:03:52.178]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.178]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.178]                       search = base::search(), system = base::Sys.info())
[18:03:52.178]                   }
[18:03:52.178]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.178]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.178]                     cond$call), session = sessionInformation(), 
[18:03:52.178]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.178]                   signalCondition(cond)
[18:03:52.178]                 }
[18:03:52.178]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.178]                 "immediateCondition"))) {
[18:03:52.178]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.178]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.178]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.178]                   if (TRUE && !signal) {
[18:03:52.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.178]                     {
[18:03:52.178]                       inherits <- base::inherits
[18:03:52.178]                       invokeRestart <- base::invokeRestart
[18:03:52.178]                       is.null <- base::is.null
[18:03:52.178]                       muffled <- FALSE
[18:03:52.178]                       if (inherits(cond, "message")) {
[18:03:52.178]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.178]                         if (muffled) 
[18:03:52.178]                           invokeRestart("muffleMessage")
[18:03:52.178]                       }
[18:03:52.178]                       else if (inherits(cond, "warning")) {
[18:03:52.178]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.178]                         if (muffled) 
[18:03:52.178]                           invokeRestart("muffleWarning")
[18:03:52.178]                       }
[18:03:52.178]                       else if (inherits(cond, "condition")) {
[18:03:52.178]                         if (!is.null(pattern)) {
[18:03:52.178]                           computeRestarts <- base::computeRestarts
[18:03:52.178]                           grepl <- base::grepl
[18:03:52.178]                           restarts <- computeRestarts(cond)
[18:03:52.178]                           for (restart in restarts) {
[18:03:52.178]                             name <- restart$name
[18:03:52.178]                             if (is.null(name)) 
[18:03:52.178]                               next
[18:03:52.178]                             if (!grepl(pattern, name)) 
[18:03:52.178]                               next
[18:03:52.178]                             invokeRestart(restart)
[18:03:52.178]                             muffled <- TRUE
[18:03:52.178]                             break
[18:03:52.178]                           }
[18:03:52.178]                         }
[18:03:52.178]                       }
[18:03:52.178]                       invisible(muffled)
[18:03:52.178]                     }
[18:03:52.178]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.178]                   }
[18:03:52.178]                 }
[18:03:52.178]                 else {
[18:03:52.178]                   if (TRUE) {
[18:03:52.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.178]                     {
[18:03:52.178]                       inherits <- base::inherits
[18:03:52.178]                       invokeRestart <- base::invokeRestart
[18:03:52.178]                       is.null <- base::is.null
[18:03:52.178]                       muffled <- FALSE
[18:03:52.178]                       if (inherits(cond, "message")) {
[18:03:52.178]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.178]                         if (muffled) 
[18:03:52.178]                           invokeRestart("muffleMessage")
[18:03:52.178]                       }
[18:03:52.178]                       else if (inherits(cond, "warning")) {
[18:03:52.178]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.178]                         if (muffled) 
[18:03:52.178]                           invokeRestart("muffleWarning")
[18:03:52.178]                       }
[18:03:52.178]                       else if (inherits(cond, "condition")) {
[18:03:52.178]                         if (!is.null(pattern)) {
[18:03:52.178]                           computeRestarts <- base::computeRestarts
[18:03:52.178]                           grepl <- base::grepl
[18:03:52.178]                           restarts <- computeRestarts(cond)
[18:03:52.178]                           for (restart in restarts) {
[18:03:52.178]                             name <- restart$name
[18:03:52.178]                             if (is.null(name)) 
[18:03:52.178]                               next
[18:03:52.178]                             if (!grepl(pattern, name)) 
[18:03:52.178]                               next
[18:03:52.178]                             invokeRestart(restart)
[18:03:52.178]                             muffled <- TRUE
[18:03:52.178]                             break
[18:03:52.178]                           }
[18:03:52.178]                         }
[18:03:52.178]                       }
[18:03:52.178]                       invisible(muffled)
[18:03:52.178]                     }
[18:03:52.178]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.178]                   }
[18:03:52.178]                 }
[18:03:52.178]             }
[18:03:52.178]         }))
[18:03:52.178]     }, error = function(ex) {
[18:03:52.178]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.178]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.178]                 ...future.rng), started = ...future.startTime, 
[18:03:52.178]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.178]             version = "1.8"), class = "FutureResult")
[18:03:52.178]     }, finally = {
[18:03:52.178]         if (!identical(...future.workdir, getwd())) 
[18:03:52.178]             setwd(...future.workdir)
[18:03:52.178]         {
[18:03:52.178]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.178]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.178]             }
[18:03:52.178]             base::options(...future.oldOptions)
[18:03:52.178]             if (.Platform$OS.type == "windows") {
[18:03:52.178]                 old_names <- names(...future.oldEnvVars)
[18:03:52.178]                 envs <- base::Sys.getenv()
[18:03:52.178]                 names <- names(envs)
[18:03:52.178]                 common <- intersect(names, old_names)
[18:03:52.178]                 added <- setdiff(names, old_names)
[18:03:52.178]                 removed <- setdiff(old_names, names)
[18:03:52.178]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.178]                   envs[common]]
[18:03:52.178]                 NAMES <- toupper(changed)
[18:03:52.178]                 args <- list()
[18:03:52.178]                 for (kk in seq_along(NAMES)) {
[18:03:52.178]                   name <- changed[[kk]]
[18:03:52.178]                   NAME <- NAMES[[kk]]
[18:03:52.178]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.178]                     next
[18:03:52.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.178]                 }
[18:03:52.178]                 NAMES <- toupper(added)
[18:03:52.178]                 for (kk in seq_along(NAMES)) {
[18:03:52.178]                   name <- added[[kk]]
[18:03:52.178]                   NAME <- NAMES[[kk]]
[18:03:52.178]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.178]                     next
[18:03:52.178]                   args[[name]] <- ""
[18:03:52.178]                 }
[18:03:52.178]                 NAMES <- toupper(removed)
[18:03:52.178]                 for (kk in seq_along(NAMES)) {
[18:03:52.178]                   name <- removed[[kk]]
[18:03:52.178]                   NAME <- NAMES[[kk]]
[18:03:52.178]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.178]                     next
[18:03:52.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.178]                 }
[18:03:52.178]                 if (length(args) > 0) 
[18:03:52.178]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.178]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.178]             }
[18:03:52.178]             else {
[18:03:52.178]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.178]             }
[18:03:52.178]             {
[18:03:52.178]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.178]                   0L) {
[18:03:52.178]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.178]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.178]                   base::options(opts)
[18:03:52.178]                 }
[18:03:52.178]                 {
[18:03:52.178]                   {
[18:03:52.178]                     NULL
[18:03:52.178]                     RNGkind("Mersenne-Twister")
[18:03:52.178]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.178]                       inherits = FALSE)
[18:03:52.178]                   }
[18:03:52.178]                   options(future.plan = NULL)
[18:03:52.178]                   if (is.na(NA_character_)) 
[18:03:52.178]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.178]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.178]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.178]                     .init = FALSE)
[18:03:52.178]                 }
[18:03:52.178]             }
[18:03:52.178]         }
[18:03:52.178]     })
[18:03:52.178]     if (TRUE) {
[18:03:52.178]         base::sink(type = "output", split = FALSE)
[18:03:52.178]         if (TRUE) {
[18:03:52.178]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.178]         }
[18:03:52.178]         else {
[18:03:52.178]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.178]         }
[18:03:52.178]         base::close(...future.stdout)
[18:03:52.178]         ...future.stdout <- NULL
[18:03:52.178]     }
[18:03:52.178]     ...future.result$conditions <- ...future.conditions
[18:03:52.178]     ...future.result$finished <- base::Sys.time()
[18:03:52.178]     ...future.result
[18:03:52.178] }
[18:03:52.182] plan(): Setting new future strategy stack:
[18:03:52.183] List of future strategies:
[18:03:52.183] 1. sequential:
[18:03:52.183]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.183]    - tweaked: FALSE
[18:03:52.183]    - call: NULL
[18:03:52.184] plan(): nbrOfWorkers() = 1
[18:03:52.186] plan(): Setting new future strategy stack:
[18:03:52.186] List of future strategies:
[18:03:52.186] 1. future:
[18:03:52.186]    - args: function (..., workers = "<NULL>")
[18:03:52.186]    - tweaked: FALSE
[18:03:52.186]    - call: plan(foo)
[18:03:52.187] plan(): nbrOfWorkers() = Inf
[18:03:52.188] SequentialFuture started (and completed)
[1] 42
[18:03:52.189] getGlobalsAndPackages() ...
[18:03:52.189] Searching for globals...
[18:03:52.191] - globals found: [1] ‘{’
[18:03:52.191] Searching for globals ... DONE
[18:03:52.191] Resolving globals: FALSE
[18:03:52.192] 
[18:03:52.192] 
[18:03:52.192] getGlobalsAndPackages() ... DONE
[18:03:52.193] Packages needed by the future expression (n = 0): <none>
[18:03:52.194] Packages needed by future strategies (n = 0): <none>
[18:03:52.195] {
[18:03:52.195]     {
[18:03:52.195]         {
[18:03:52.195]             ...future.startTime <- base::Sys.time()
[18:03:52.195]             {
[18:03:52.195]                 {
[18:03:52.195]                   {
[18:03:52.195]                     base::local({
[18:03:52.195]                       has_future <- base::requireNamespace("future", 
[18:03:52.195]                         quietly = TRUE)
[18:03:52.195]                       if (has_future) {
[18:03:52.195]                         ns <- base::getNamespace("future")
[18:03:52.195]                         version <- ns[[".package"]][["version"]]
[18:03:52.195]                         if (is.null(version)) 
[18:03:52.195]                           version <- utils::packageVersion("future")
[18:03:52.195]                       }
[18:03:52.195]                       else {
[18:03:52.195]                         version <- NULL
[18:03:52.195]                       }
[18:03:52.195]                       if (!has_future || version < "1.8.0") {
[18:03:52.195]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.195]                           "", base::R.version$version.string), 
[18:03:52.195]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.195]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.195]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.195]                             "release", "version")], collapse = " "), 
[18:03:52.195]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.195]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.195]                           info)
[18:03:52.195]                         info <- base::paste(info, collapse = "; ")
[18:03:52.195]                         if (!has_future) {
[18:03:52.195]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.195]                             info)
[18:03:52.195]                         }
[18:03:52.195]                         else {
[18:03:52.195]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.195]                             info, version)
[18:03:52.195]                         }
[18:03:52.195]                         base::stop(msg)
[18:03:52.195]                       }
[18:03:52.195]                     })
[18:03:52.195]                   }
[18:03:52.195]                   ...future.strategy.old <- future::plan("list")
[18:03:52.195]                   options(future.plan = NULL)
[18:03:52.195]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.195]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.195]                 }
[18:03:52.195]                 ...future.workdir <- getwd()
[18:03:52.195]             }
[18:03:52.195]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.195]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.195]         }
[18:03:52.195]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.195]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.195]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.195]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.195]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.195]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.195]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.195]             base::names(...future.oldOptions))
[18:03:52.195]     }
[18:03:52.195]     if (FALSE) {
[18:03:52.195]     }
[18:03:52.195]     else {
[18:03:52.195]         if (TRUE) {
[18:03:52.195]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.195]                 open = "w")
[18:03:52.195]         }
[18:03:52.195]         else {
[18:03:52.195]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.195]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.195]         }
[18:03:52.195]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.195]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.195]             base::sink(type = "output", split = FALSE)
[18:03:52.195]             base::close(...future.stdout)
[18:03:52.195]         }, add = TRUE)
[18:03:52.195]     }
[18:03:52.195]     ...future.frame <- base::sys.nframe()
[18:03:52.195]     ...future.conditions <- base::list()
[18:03:52.195]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.195]     if (FALSE) {
[18:03:52.195]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.195]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.195]     }
[18:03:52.195]     ...future.result <- base::tryCatch({
[18:03:52.195]         base::withCallingHandlers({
[18:03:52.195]             ...future.value <- base::withVisible(base::local({
[18:03:52.195]                 42L
[18:03:52.195]             }))
[18:03:52.195]             future::FutureResult(value = ...future.value$value, 
[18:03:52.195]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.195]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.195]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.195]                     ...future.globalenv.names))
[18:03:52.195]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.195]         }, condition = base::local({
[18:03:52.195]             c <- base::c
[18:03:52.195]             inherits <- base::inherits
[18:03:52.195]             invokeRestart <- base::invokeRestart
[18:03:52.195]             length <- base::length
[18:03:52.195]             list <- base::list
[18:03:52.195]             seq.int <- base::seq.int
[18:03:52.195]             signalCondition <- base::signalCondition
[18:03:52.195]             sys.calls <- base::sys.calls
[18:03:52.195]             `[[` <- base::`[[`
[18:03:52.195]             `+` <- base::`+`
[18:03:52.195]             `<<-` <- base::`<<-`
[18:03:52.195]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.195]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.195]                   3L)]
[18:03:52.195]             }
[18:03:52.195]             function(cond) {
[18:03:52.195]                 is_error <- inherits(cond, "error")
[18:03:52.195]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.195]                   NULL)
[18:03:52.195]                 if (is_error) {
[18:03:52.195]                   sessionInformation <- function() {
[18:03:52.195]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.195]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.195]                       search = base::search(), system = base::Sys.info())
[18:03:52.195]                   }
[18:03:52.195]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.195]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.195]                     cond$call), session = sessionInformation(), 
[18:03:52.195]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.195]                   signalCondition(cond)
[18:03:52.195]                 }
[18:03:52.195]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.195]                 "immediateCondition"))) {
[18:03:52.195]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.195]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.195]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.195]                   if (TRUE && !signal) {
[18:03:52.195]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.195]                     {
[18:03:52.195]                       inherits <- base::inherits
[18:03:52.195]                       invokeRestart <- base::invokeRestart
[18:03:52.195]                       is.null <- base::is.null
[18:03:52.195]                       muffled <- FALSE
[18:03:52.195]                       if (inherits(cond, "message")) {
[18:03:52.195]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.195]                         if (muffled) 
[18:03:52.195]                           invokeRestart("muffleMessage")
[18:03:52.195]                       }
[18:03:52.195]                       else if (inherits(cond, "warning")) {
[18:03:52.195]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.195]                         if (muffled) 
[18:03:52.195]                           invokeRestart("muffleWarning")
[18:03:52.195]                       }
[18:03:52.195]                       else if (inherits(cond, "condition")) {
[18:03:52.195]                         if (!is.null(pattern)) {
[18:03:52.195]                           computeRestarts <- base::computeRestarts
[18:03:52.195]                           grepl <- base::grepl
[18:03:52.195]                           restarts <- computeRestarts(cond)
[18:03:52.195]                           for (restart in restarts) {
[18:03:52.195]                             name <- restart$name
[18:03:52.195]                             if (is.null(name)) 
[18:03:52.195]                               next
[18:03:52.195]                             if (!grepl(pattern, name)) 
[18:03:52.195]                               next
[18:03:52.195]                             invokeRestart(restart)
[18:03:52.195]                             muffled <- TRUE
[18:03:52.195]                             break
[18:03:52.195]                           }
[18:03:52.195]                         }
[18:03:52.195]                       }
[18:03:52.195]                       invisible(muffled)
[18:03:52.195]                     }
[18:03:52.195]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.195]                   }
[18:03:52.195]                 }
[18:03:52.195]                 else {
[18:03:52.195]                   if (TRUE) {
[18:03:52.195]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.195]                     {
[18:03:52.195]                       inherits <- base::inherits
[18:03:52.195]                       invokeRestart <- base::invokeRestart
[18:03:52.195]                       is.null <- base::is.null
[18:03:52.195]                       muffled <- FALSE
[18:03:52.195]                       if (inherits(cond, "message")) {
[18:03:52.195]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.195]                         if (muffled) 
[18:03:52.195]                           invokeRestart("muffleMessage")
[18:03:52.195]                       }
[18:03:52.195]                       else if (inherits(cond, "warning")) {
[18:03:52.195]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.195]                         if (muffled) 
[18:03:52.195]                           invokeRestart("muffleWarning")
[18:03:52.195]                       }
[18:03:52.195]                       else if (inherits(cond, "condition")) {
[18:03:52.195]                         if (!is.null(pattern)) {
[18:03:52.195]                           computeRestarts <- base::computeRestarts
[18:03:52.195]                           grepl <- base::grepl
[18:03:52.195]                           restarts <- computeRestarts(cond)
[18:03:52.195]                           for (restart in restarts) {
[18:03:52.195]                             name <- restart$name
[18:03:52.195]                             if (is.null(name)) 
[18:03:52.195]                               next
[18:03:52.195]                             if (!grepl(pattern, name)) 
[18:03:52.195]                               next
[18:03:52.195]                             invokeRestart(restart)
[18:03:52.195]                             muffled <- TRUE
[18:03:52.195]                             break
[18:03:52.195]                           }
[18:03:52.195]                         }
[18:03:52.195]                       }
[18:03:52.195]                       invisible(muffled)
[18:03:52.195]                     }
[18:03:52.195]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.195]                   }
[18:03:52.195]                 }
[18:03:52.195]             }
[18:03:52.195]         }))
[18:03:52.195]     }, error = function(ex) {
[18:03:52.195]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.195]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.195]                 ...future.rng), started = ...future.startTime, 
[18:03:52.195]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.195]             version = "1.8"), class = "FutureResult")
[18:03:52.195]     }, finally = {
[18:03:52.195]         if (!identical(...future.workdir, getwd())) 
[18:03:52.195]             setwd(...future.workdir)
[18:03:52.195]         {
[18:03:52.195]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.195]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.195]             }
[18:03:52.195]             base::options(...future.oldOptions)
[18:03:52.195]             if (.Platform$OS.type == "windows") {
[18:03:52.195]                 old_names <- names(...future.oldEnvVars)
[18:03:52.195]                 envs <- base::Sys.getenv()
[18:03:52.195]                 names <- names(envs)
[18:03:52.195]                 common <- intersect(names, old_names)
[18:03:52.195]                 added <- setdiff(names, old_names)
[18:03:52.195]                 removed <- setdiff(old_names, names)
[18:03:52.195]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.195]                   envs[common]]
[18:03:52.195]                 NAMES <- toupper(changed)
[18:03:52.195]                 args <- list()
[18:03:52.195]                 for (kk in seq_along(NAMES)) {
[18:03:52.195]                   name <- changed[[kk]]
[18:03:52.195]                   NAME <- NAMES[[kk]]
[18:03:52.195]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.195]                     next
[18:03:52.195]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.195]                 }
[18:03:52.195]                 NAMES <- toupper(added)
[18:03:52.195]                 for (kk in seq_along(NAMES)) {
[18:03:52.195]                   name <- added[[kk]]
[18:03:52.195]                   NAME <- NAMES[[kk]]
[18:03:52.195]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.195]                     next
[18:03:52.195]                   args[[name]] <- ""
[18:03:52.195]                 }
[18:03:52.195]                 NAMES <- toupper(removed)
[18:03:52.195]                 for (kk in seq_along(NAMES)) {
[18:03:52.195]                   name <- removed[[kk]]
[18:03:52.195]                   NAME <- NAMES[[kk]]
[18:03:52.195]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.195]                     next
[18:03:52.195]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.195]                 }
[18:03:52.195]                 if (length(args) > 0) 
[18:03:52.195]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.195]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.195]             }
[18:03:52.195]             else {
[18:03:52.195]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.195]             }
[18:03:52.195]             {
[18:03:52.195]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.195]                   0L) {
[18:03:52.195]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.195]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.195]                   base::options(opts)
[18:03:52.195]                 }
[18:03:52.195]                 {
[18:03:52.195]                   {
[18:03:52.195]                     NULL
[18:03:52.195]                     RNGkind("Mersenne-Twister")
[18:03:52.195]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.195]                       inherits = FALSE)
[18:03:52.195]                   }
[18:03:52.195]                   options(future.plan = NULL)
[18:03:52.195]                   if (is.na(NA_character_)) 
[18:03:52.195]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.195]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.195]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.195]                     .init = FALSE)
[18:03:52.195]                 }
[18:03:52.195]             }
[18:03:52.195]         }
[18:03:52.195]     })
[18:03:52.195]     if (TRUE) {
[18:03:52.195]         base::sink(type = "output", split = FALSE)
[18:03:52.195]         if (TRUE) {
[18:03:52.195]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.195]         }
[18:03:52.195]         else {
[18:03:52.195]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.195]         }
[18:03:52.195]         base::close(...future.stdout)
[18:03:52.195]         ...future.stdout <- NULL
[18:03:52.195]     }
[18:03:52.195]     ...future.result$conditions <- ...future.conditions
[18:03:52.195]     ...future.result$finished <- base::Sys.time()
[18:03:52.195]     ...future.result
[18:03:52.195] }
[18:03:52.199] plan(): Setting new future strategy stack:
[18:03:52.199] List of future strategies:
[18:03:52.199] 1. sequential:
[18:03:52.199]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.199]    - tweaked: FALSE
[18:03:52.199]    - call: NULL
[18:03:52.200] plan(): nbrOfWorkers() = 1
[18:03:52.202] plan(): Setting new future strategy stack:
[18:03:52.203] List of future strategies:
[18:03:52.203] 1. future:
[18:03:52.203]    - args: function (..., workers = "<NULL>")
[18:03:52.203]    - tweaked: FALSE
[18:03:52.203]    - call: plan(foo)
[18:03:52.204] plan(): nbrOfWorkers() = Inf
[18:03:52.204] SequentialFuture started (and completed)
[1] 42
[18:03:52.205] getGlobalsAndPackages() ...
[18:03:52.205] 
[18:03:52.206] - globals: [0] <none>
[18:03:52.206] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x64a16d6d3df0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 30349bb1-bc12-0709-ef6b-eafcbd06dcd9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:52.210] Packages needed by the future expression (n = 0): <none>
[18:03:52.210] Packages needed by future strategies (n = 0): <none>
[18:03:52.211] {
[18:03:52.211]     {
[18:03:52.211]         {
[18:03:52.211]             ...future.startTime <- base::Sys.time()
[18:03:52.211]             {
[18:03:52.211]                 {
[18:03:52.211]                   {
[18:03:52.211]                     {
[18:03:52.211]                       base::local({
[18:03:52.211]                         has_future <- base::requireNamespace("future", 
[18:03:52.211]                           quietly = TRUE)
[18:03:52.211]                         if (has_future) {
[18:03:52.211]                           ns <- base::getNamespace("future")
[18:03:52.211]                           version <- ns[[".package"]][["version"]]
[18:03:52.211]                           if (is.null(version)) 
[18:03:52.211]                             version <- utils::packageVersion("future")
[18:03:52.211]                         }
[18:03:52.211]                         else {
[18:03:52.211]                           version <- NULL
[18:03:52.211]                         }
[18:03:52.211]                         if (!has_future || version < "1.8.0") {
[18:03:52.211]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.211]                             "", base::R.version$version.string), 
[18:03:52.211]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:52.211]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.211]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.211]                               "release", "version")], collapse = " "), 
[18:03:52.211]                             hostname = base::Sys.info()[["nodename"]])
[18:03:52.211]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.211]                             info)
[18:03:52.211]                           info <- base::paste(info, collapse = "; ")
[18:03:52.211]                           if (!has_future) {
[18:03:52.211]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.211]                               info)
[18:03:52.211]                           }
[18:03:52.211]                           else {
[18:03:52.211]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.211]                               info, version)
[18:03:52.211]                           }
[18:03:52.211]                           base::stop(msg)
[18:03:52.211]                         }
[18:03:52.211]                       })
[18:03:52.211]                     }
[18:03:52.211]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:52.211]                     base::options(mc.cores = 1L)
[18:03:52.211]                   }
[18:03:52.211]                   ...future.strategy.old <- future::plan("list")
[18:03:52.211]                   options(future.plan = NULL)
[18:03:52.211]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.211]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.211]                 }
[18:03:52.211]                 ...future.workdir <- getwd()
[18:03:52.211]             }
[18:03:52.211]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.211]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.211]         }
[18:03:52.211]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.211]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.211]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.211]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.211]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.211]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.211]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.211]             base::names(...future.oldOptions))
[18:03:52.211]     }
[18:03:52.211]     if (FALSE) {
[18:03:52.211]     }
[18:03:52.211]     else {
[18:03:52.211]         if (TRUE) {
[18:03:52.211]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.211]                 open = "w")
[18:03:52.211]         }
[18:03:52.211]         else {
[18:03:52.211]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.211]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.211]         }
[18:03:52.211]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.211]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.211]             base::sink(type = "output", split = FALSE)
[18:03:52.211]             base::close(...future.stdout)
[18:03:52.211]         }, add = TRUE)
[18:03:52.211]     }
[18:03:52.211]     ...future.frame <- base::sys.nframe()
[18:03:52.211]     ...future.conditions <- base::list()
[18:03:52.211]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.211]     if (FALSE) {
[18:03:52.211]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.211]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.211]     }
[18:03:52.211]     ...future.result <- base::tryCatch({
[18:03:52.211]         base::withCallingHandlers({
[18:03:52.211]             ...future.value <- base::withVisible(base::local({
[18:03:52.211]                 withCallingHandlers({
[18:03:52.211]                   {
[18:03:52.211]                     42L
[18:03:52.211]                   }
[18:03:52.211]                 }, immediateCondition = function(cond) {
[18:03:52.211]                   save_rds <- function (object, pathname, ...) 
[18:03:52.211]                   {
[18:03:52.211]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:52.211]                     if (file_test("-f", pathname_tmp)) {
[18:03:52.211]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.211]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:52.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.211]                         fi_tmp[["mtime"]])
[18:03:52.211]                     }
[18:03:52.211]                     tryCatch({
[18:03:52.211]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:52.211]                     }, error = function(ex) {
[18:03:52.211]                       msg <- conditionMessage(ex)
[18:03:52.211]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.211]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:52.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.211]                         fi_tmp[["mtime"]], msg)
[18:03:52.211]                       ex$message <- msg
[18:03:52.211]                       stop(ex)
[18:03:52.211]                     })
[18:03:52.211]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:52.211]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:52.211]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:52.211]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.211]                       fi <- file.info(pathname)
[18:03:52.211]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:52.211]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.211]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:52.211]                         fi[["size"]], fi[["mtime"]])
[18:03:52.211]                       stop(msg)
[18:03:52.211]                     }
[18:03:52.211]                     invisible(pathname)
[18:03:52.211]                   }
[18:03:52.211]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:52.211]                     rootPath = tempdir()) 
[18:03:52.211]                   {
[18:03:52.211]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:52.211]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:52.211]                       tmpdir = path, fileext = ".rds")
[18:03:52.211]                     save_rds(obj, file)
[18:03:52.211]                   }
[18:03:52.211]                   saveImmediateCondition(cond, path = "/tmp/RtmptiRTxa/.future/immediateConditions")
[18:03:52.211]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.211]                   {
[18:03:52.211]                     inherits <- base::inherits
[18:03:52.211]                     invokeRestart <- base::invokeRestart
[18:03:52.211]                     is.null <- base::is.null
[18:03:52.211]                     muffled <- FALSE
[18:03:52.211]                     if (inherits(cond, "message")) {
[18:03:52.211]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:52.211]                       if (muffled) 
[18:03:52.211]                         invokeRestart("muffleMessage")
[18:03:52.211]                     }
[18:03:52.211]                     else if (inherits(cond, "warning")) {
[18:03:52.211]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:52.211]                       if (muffled) 
[18:03:52.211]                         invokeRestart("muffleWarning")
[18:03:52.211]                     }
[18:03:52.211]                     else if (inherits(cond, "condition")) {
[18:03:52.211]                       if (!is.null(pattern)) {
[18:03:52.211]                         computeRestarts <- base::computeRestarts
[18:03:52.211]                         grepl <- base::grepl
[18:03:52.211]                         restarts <- computeRestarts(cond)
[18:03:52.211]                         for (restart in restarts) {
[18:03:52.211]                           name <- restart$name
[18:03:52.211]                           if (is.null(name)) 
[18:03:52.211]                             next
[18:03:52.211]                           if (!grepl(pattern, name)) 
[18:03:52.211]                             next
[18:03:52.211]                           invokeRestart(restart)
[18:03:52.211]                           muffled <- TRUE
[18:03:52.211]                           break
[18:03:52.211]                         }
[18:03:52.211]                       }
[18:03:52.211]                     }
[18:03:52.211]                     invisible(muffled)
[18:03:52.211]                   }
[18:03:52.211]                   muffleCondition(cond)
[18:03:52.211]                 })
[18:03:52.211]             }))
[18:03:52.211]             future::FutureResult(value = ...future.value$value, 
[18:03:52.211]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.211]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.211]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.211]                     ...future.globalenv.names))
[18:03:52.211]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.211]         }, condition = base::local({
[18:03:52.211]             c <- base::c
[18:03:52.211]             inherits <- base::inherits
[18:03:52.211]             invokeRestart <- base::invokeRestart
[18:03:52.211]             length <- base::length
[18:03:52.211]             list <- base::list
[18:03:52.211]             seq.int <- base::seq.int
[18:03:52.211]             signalCondition <- base::signalCondition
[18:03:52.211]             sys.calls <- base::sys.calls
[18:03:52.211]             `[[` <- base::`[[`
[18:03:52.211]             `+` <- base::`+`
[18:03:52.211]             `<<-` <- base::`<<-`
[18:03:52.211]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.211]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.211]                   3L)]
[18:03:52.211]             }
[18:03:52.211]             function(cond) {
[18:03:52.211]                 is_error <- inherits(cond, "error")
[18:03:52.211]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.211]                   NULL)
[18:03:52.211]                 if (is_error) {
[18:03:52.211]                   sessionInformation <- function() {
[18:03:52.211]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.211]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.211]                       search = base::search(), system = base::Sys.info())
[18:03:52.211]                   }
[18:03:52.211]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.211]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.211]                     cond$call), session = sessionInformation(), 
[18:03:52.211]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.211]                   signalCondition(cond)
[18:03:52.211]                 }
[18:03:52.211]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.211]                 "immediateCondition"))) {
[18:03:52.211]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.211]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.211]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.211]                   if (TRUE && !signal) {
[18:03:52.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.211]                     {
[18:03:52.211]                       inherits <- base::inherits
[18:03:52.211]                       invokeRestart <- base::invokeRestart
[18:03:52.211]                       is.null <- base::is.null
[18:03:52.211]                       muffled <- FALSE
[18:03:52.211]                       if (inherits(cond, "message")) {
[18:03:52.211]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.211]                         if (muffled) 
[18:03:52.211]                           invokeRestart("muffleMessage")
[18:03:52.211]                       }
[18:03:52.211]                       else if (inherits(cond, "warning")) {
[18:03:52.211]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.211]                         if (muffled) 
[18:03:52.211]                           invokeRestart("muffleWarning")
[18:03:52.211]                       }
[18:03:52.211]                       else if (inherits(cond, "condition")) {
[18:03:52.211]                         if (!is.null(pattern)) {
[18:03:52.211]                           computeRestarts <- base::computeRestarts
[18:03:52.211]                           grepl <- base::grepl
[18:03:52.211]                           restarts <- computeRestarts(cond)
[18:03:52.211]                           for (restart in restarts) {
[18:03:52.211]                             name <- restart$name
[18:03:52.211]                             if (is.null(name)) 
[18:03:52.211]                               next
[18:03:52.211]                             if (!grepl(pattern, name)) 
[18:03:52.211]                               next
[18:03:52.211]                             invokeRestart(restart)
[18:03:52.211]                             muffled <- TRUE
[18:03:52.211]                             break
[18:03:52.211]                           }
[18:03:52.211]                         }
[18:03:52.211]                       }
[18:03:52.211]                       invisible(muffled)
[18:03:52.211]                     }
[18:03:52.211]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.211]                   }
[18:03:52.211]                 }
[18:03:52.211]                 else {
[18:03:52.211]                   if (TRUE) {
[18:03:52.211]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.211]                     {
[18:03:52.211]                       inherits <- base::inherits
[18:03:52.211]                       invokeRestart <- base::invokeRestart
[18:03:52.211]                       is.null <- base::is.null
[18:03:52.211]                       muffled <- FALSE
[18:03:52.211]                       if (inherits(cond, "message")) {
[18:03:52.211]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.211]                         if (muffled) 
[18:03:52.211]                           invokeRestart("muffleMessage")
[18:03:52.211]                       }
[18:03:52.211]                       else if (inherits(cond, "warning")) {
[18:03:52.211]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.211]                         if (muffled) 
[18:03:52.211]                           invokeRestart("muffleWarning")
[18:03:52.211]                       }
[18:03:52.211]                       else if (inherits(cond, "condition")) {
[18:03:52.211]                         if (!is.null(pattern)) {
[18:03:52.211]                           computeRestarts <- base::computeRestarts
[18:03:52.211]                           grepl <- base::grepl
[18:03:52.211]                           restarts <- computeRestarts(cond)
[18:03:52.211]                           for (restart in restarts) {
[18:03:52.211]                             name <- restart$name
[18:03:52.211]                             if (is.null(name)) 
[18:03:52.211]                               next
[18:03:52.211]                             if (!grepl(pattern, name)) 
[18:03:52.211]                               next
[18:03:52.211]                             invokeRestart(restart)
[18:03:52.211]                             muffled <- TRUE
[18:03:52.211]                             break
[18:03:52.211]                           }
[18:03:52.211]                         }
[18:03:52.211]                       }
[18:03:52.211]                       invisible(muffled)
[18:03:52.211]                     }
[18:03:52.211]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.211]                   }
[18:03:52.211]                 }
[18:03:52.211]             }
[18:03:52.211]         }))
[18:03:52.211]     }, error = function(ex) {
[18:03:52.211]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.211]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.211]                 ...future.rng), started = ...future.startTime, 
[18:03:52.211]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.211]             version = "1.8"), class = "FutureResult")
[18:03:52.211]     }, finally = {
[18:03:52.211]         if (!identical(...future.workdir, getwd())) 
[18:03:52.211]             setwd(...future.workdir)
[18:03:52.211]         {
[18:03:52.211]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.211]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.211]             }
[18:03:52.211]             base::options(...future.oldOptions)
[18:03:52.211]             if (.Platform$OS.type == "windows") {
[18:03:52.211]                 old_names <- names(...future.oldEnvVars)
[18:03:52.211]                 envs <- base::Sys.getenv()
[18:03:52.211]                 names <- names(envs)
[18:03:52.211]                 common <- intersect(names, old_names)
[18:03:52.211]                 added <- setdiff(names, old_names)
[18:03:52.211]                 removed <- setdiff(old_names, names)
[18:03:52.211]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.211]                   envs[common]]
[18:03:52.211]                 NAMES <- toupper(changed)
[18:03:52.211]                 args <- list()
[18:03:52.211]                 for (kk in seq_along(NAMES)) {
[18:03:52.211]                   name <- changed[[kk]]
[18:03:52.211]                   NAME <- NAMES[[kk]]
[18:03:52.211]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.211]                     next
[18:03:52.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.211]                 }
[18:03:52.211]                 NAMES <- toupper(added)
[18:03:52.211]                 for (kk in seq_along(NAMES)) {
[18:03:52.211]                   name <- added[[kk]]
[18:03:52.211]                   NAME <- NAMES[[kk]]
[18:03:52.211]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.211]                     next
[18:03:52.211]                   args[[name]] <- ""
[18:03:52.211]                 }
[18:03:52.211]                 NAMES <- toupper(removed)
[18:03:52.211]                 for (kk in seq_along(NAMES)) {
[18:03:52.211]                   name <- removed[[kk]]
[18:03:52.211]                   NAME <- NAMES[[kk]]
[18:03:52.211]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.211]                     next
[18:03:52.211]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.211]                 }
[18:03:52.211]                 if (length(args) > 0) 
[18:03:52.211]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.211]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.211]             }
[18:03:52.211]             else {
[18:03:52.211]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.211]             }
[18:03:52.211]             {
[18:03:52.211]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.211]                   0L) {
[18:03:52.211]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.211]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.211]                   base::options(opts)
[18:03:52.211]                 }
[18:03:52.211]                 {
[18:03:52.211]                   {
[18:03:52.211]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:52.211]                     NULL
[18:03:52.211]                   }
[18:03:52.211]                   options(future.plan = NULL)
[18:03:52.211]                   if (is.na(NA_character_)) 
[18:03:52.211]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.211]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.211]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.211]                     .init = FALSE)
[18:03:52.211]                 }
[18:03:52.211]             }
[18:03:52.211]         }
[18:03:52.211]     })
[18:03:52.211]     if (TRUE) {
[18:03:52.211]         base::sink(type = "output", split = FALSE)
[18:03:52.211]         if (TRUE) {
[18:03:52.211]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.211]         }
[18:03:52.211]         else {
[18:03:52.211]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.211]         }
[18:03:52.211]         base::close(...future.stdout)
[18:03:52.211]         ...future.stdout <- NULL
[18:03:52.211]     }
[18:03:52.211]     ...future.result$conditions <- ...future.conditions
[18:03:52.211]     ...future.result$finished <- base::Sys.time()
[18:03:52.211]     ...future.result
[18:03:52.211] }
[18:03:52.217] requestCore(): workers = 2
[18:03:52.222] MulticoreFuture started
[18:03:52.225] plan(): Setting new future strategy stack:
[18:03:52.228] result() for MulticoreFuture ...
[18:03:52.227] List of future strategies:
[18:03:52.227] 1. sequential:
[18:03:52.227]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.227]    - tweaked: FALSE
[18:03:52.227]    - call: NULL
[18:03:52.232] plan(): nbrOfWorkers() = 1
[18:03:52.236] plan(): Setting new future strategy stack:
[18:03:52.237] List of future strategies:
[18:03:52.237] 1. future:
[18:03:52.237]    - args: function (..., workers = "<NULL>")
[18:03:52.237]    - tweaked: FALSE
[18:03:52.237]    - call: plan(foo)
[18:03:52.238] plan(): nbrOfWorkers() = Inf
[18:03:52.244] result() for MulticoreFuture ...
[18:03:52.244] result() for MulticoreFuture ... done
[18:03:52.245] result() for MulticoreFuture ... done
[18:03:52.245] result() for MulticoreFuture ...
[18:03:52.245] result() for MulticoreFuture ... done
[1] 42
[18:03:52.248] getGlobalsAndPackages() ...
[18:03:52.248] 
[18:03:52.249] - globals: [0] <none>
[18:03:52.249] getGlobalsAndPackages() ... DONE
[18:03:52.250] Packages needed by the future expression (n = 0): <none>
[18:03:52.251] Packages needed by future strategies (n = 0): <none>
[18:03:52.252] {
[18:03:52.252]     {
[18:03:52.252]         {
[18:03:52.252]             ...future.startTime <- base::Sys.time()
[18:03:52.252]             {
[18:03:52.252]                 {
[18:03:52.252]                   {
[18:03:52.252]                     {
[18:03:52.252]                       base::local({
[18:03:52.252]                         has_future <- base::requireNamespace("future", 
[18:03:52.252]                           quietly = TRUE)
[18:03:52.252]                         if (has_future) {
[18:03:52.252]                           ns <- base::getNamespace("future")
[18:03:52.252]                           version <- ns[[".package"]][["version"]]
[18:03:52.252]                           if (is.null(version)) 
[18:03:52.252]                             version <- utils::packageVersion("future")
[18:03:52.252]                         }
[18:03:52.252]                         else {
[18:03:52.252]                           version <- NULL
[18:03:52.252]                         }
[18:03:52.252]                         if (!has_future || version < "1.8.0") {
[18:03:52.252]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.252]                             "", base::R.version$version.string), 
[18:03:52.252]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:52.252]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.252]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.252]                               "release", "version")], collapse = " "), 
[18:03:52.252]                             hostname = base::Sys.info()[["nodename"]])
[18:03:52.252]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.252]                             info)
[18:03:52.252]                           info <- base::paste(info, collapse = "; ")
[18:03:52.252]                           if (!has_future) {
[18:03:52.252]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.252]                               info)
[18:03:52.252]                           }
[18:03:52.252]                           else {
[18:03:52.252]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.252]                               info, version)
[18:03:52.252]                           }
[18:03:52.252]                           base::stop(msg)
[18:03:52.252]                         }
[18:03:52.252]                       })
[18:03:52.252]                     }
[18:03:52.252]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:52.252]                     base::options(mc.cores = 1L)
[18:03:52.252]                   }
[18:03:52.252]                   ...future.strategy.old <- future::plan("list")
[18:03:52.252]                   options(future.plan = NULL)
[18:03:52.252]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.252]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.252]                 }
[18:03:52.252]                 ...future.workdir <- getwd()
[18:03:52.252]             }
[18:03:52.252]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.252]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.252]         }
[18:03:52.252]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.252]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.252]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.252]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.252]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.252]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.252]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.252]             base::names(...future.oldOptions))
[18:03:52.252]     }
[18:03:52.252]     if (FALSE) {
[18:03:52.252]     }
[18:03:52.252]     else {
[18:03:52.252]         if (TRUE) {
[18:03:52.252]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.252]                 open = "w")
[18:03:52.252]         }
[18:03:52.252]         else {
[18:03:52.252]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.252]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.252]         }
[18:03:52.252]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.252]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.252]             base::sink(type = "output", split = FALSE)
[18:03:52.252]             base::close(...future.stdout)
[18:03:52.252]         }, add = TRUE)
[18:03:52.252]     }
[18:03:52.252]     ...future.frame <- base::sys.nframe()
[18:03:52.252]     ...future.conditions <- base::list()
[18:03:52.252]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.252]     if (FALSE) {
[18:03:52.252]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.252]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.252]     }
[18:03:52.252]     ...future.result <- base::tryCatch({
[18:03:52.252]         base::withCallingHandlers({
[18:03:52.252]             ...future.value <- base::withVisible(base::local({
[18:03:52.252]                 withCallingHandlers({
[18:03:52.252]                   {
[18:03:52.252]                     42L
[18:03:52.252]                   }
[18:03:52.252]                 }, immediateCondition = function(cond) {
[18:03:52.252]                   save_rds <- function (object, pathname, ...) 
[18:03:52.252]                   {
[18:03:52.252]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:52.252]                     if (file_test("-f", pathname_tmp)) {
[18:03:52.252]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.252]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:52.252]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.252]                         fi_tmp[["mtime"]])
[18:03:52.252]                     }
[18:03:52.252]                     tryCatch({
[18:03:52.252]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:52.252]                     }, error = function(ex) {
[18:03:52.252]                       msg <- conditionMessage(ex)
[18:03:52.252]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.252]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:52.252]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.252]                         fi_tmp[["mtime"]], msg)
[18:03:52.252]                       ex$message <- msg
[18:03:52.252]                       stop(ex)
[18:03:52.252]                     })
[18:03:52.252]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:52.252]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:52.252]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:52.252]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.252]                       fi <- file.info(pathname)
[18:03:52.252]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:52.252]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.252]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:52.252]                         fi[["size"]], fi[["mtime"]])
[18:03:52.252]                       stop(msg)
[18:03:52.252]                     }
[18:03:52.252]                     invisible(pathname)
[18:03:52.252]                   }
[18:03:52.252]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:52.252]                     rootPath = tempdir()) 
[18:03:52.252]                   {
[18:03:52.252]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:52.252]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:52.252]                       tmpdir = path, fileext = ".rds")
[18:03:52.252]                     save_rds(obj, file)
[18:03:52.252]                   }
[18:03:52.252]                   saveImmediateCondition(cond, path = "/tmp/RtmptiRTxa/.future/immediateConditions")
[18:03:52.252]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.252]                   {
[18:03:52.252]                     inherits <- base::inherits
[18:03:52.252]                     invokeRestart <- base::invokeRestart
[18:03:52.252]                     is.null <- base::is.null
[18:03:52.252]                     muffled <- FALSE
[18:03:52.252]                     if (inherits(cond, "message")) {
[18:03:52.252]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:52.252]                       if (muffled) 
[18:03:52.252]                         invokeRestart("muffleMessage")
[18:03:52.252]                     }
[18:03:52.252]                     else if (inherits(cond, "warning")) {
[18:03:52.252]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:52.252]                       if (muffled) 
[18:03:52.252]                         invokeRestart("muffleWarning")
[18:03:52.252]                     }
[18:03:52.252]                     else if (inherits(cond, "condition")) {
[18:03:52.252]                       if (!is.null(pattern)) {
[18:03:52.252]                         computeRestarts <- base::computeRestarts
[18:03:52.252]                         grepl <- base::grepl
[18:03:52.252]                         restarts <- computeRestarts(cond)
[18:03:52.252]                         for (restart in restarts) {
[18:03:52.252]                           name <- restart$name
[18:03:52.252]                           if (is.null(name)) 
[18:03:52.252]                             next
[18:03:52.252]                           if (!grepl(pattern, name)) 
[18:03:52.252]                             next
[18:03:52.252]                           invokeRestart(restart)
[18:03:52.252]                           muffled <- TRUE
[18:03:52.252]                           break
[18:03:52.252]                         }
[18:03:52.252]                       }
[18:03:52.252]                     }
[18:03:52.252]                     invisible(muffled)
[18:03:52.252]                   }
[18:03:52.252]                   muffleCondition(cond)
[18:03:52.252]                 })
[18:03:52.252]             }))
[18:03:52.252]             future::FutureResult(value = ...future.value$value, 
[18:03:52.252]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.252]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.252]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.252]                     ...future.globalenv.names))
[18:03:52.252]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.252]         }, condition = base::local({
[18:03:52.252]             c <- base::c
[18:03:52.252]             inherits <- base::inherits
[18:03:52.252]             invokeRestart <- base::invokeRestart
[18:03:52.252]             length <- base::length
[18:03:52.252]             list <- base::list
[18:03:52.252]             seq.int <- base::seq.int
[18:03:52.252]             signalCondition <- base::signalCondition
[18:03:52.252]             sys.calls <- base::sys.calls
[18:03:52.252]             `[[` <- base::`[[`
[18:03:52.252]             `+` <- base::`+`
[18:03:52.252]             `<<-` <- base::`<<-`
[18:03:52.252]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.252]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.252]                   3L)]
[18:03:52.252]             }
[18:03:52.252]             function(cond) {
[18:03:52.252]                 is_error <- inherits(cond, "error")
[18:03:52.252]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.252]                   NULL)
[18:03:52.252]                 if (is_error) {
[18:03:52.252]                   sessionInformation <- function() {
[18:03:52.252]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.252]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.252]                       search = base::search(), system = base::Sys.info())
[18:03:52.252]                   }
[18:03:52.252]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.252]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.252]                     cond$call), session = sessionInformation(), 
[18:03:52.252]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.252]                   signalCondition(cond)
[18:03:52.252]                 }
[18:03:52.252]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.252]                 "immediateCondition"))) {
[18:03:52.252]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.252]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.252]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.252]                   if (TRUE && !signal) {
[18:03:52.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.252]                     {
[18:03:52.252]                       inherits <- base::inherits
[18:03:52.252]                       invokeRestart <- base::invokeRestart
[18:03:52.252]                       is.null <- base::is.null
[18:03:52.252]                       muffled <- FALSE
[18:03:52.252]                       if (inherits(cond, "message")) {
[18:03:52.252]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.252]                         if (muffled) 
[18:03:52.252]                           invokeRestart("muffleMessage")
[18:03:52.252]                       }
[18:03:52.252]                       else if (inherits(cond, "warning")) {
[18:03:52.252]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.252]                         if (muffled) 
[18:03:52.252]                           invokeRestart("muffleWarning")
[18:03:52.252]                       }
[18:03:52.252]                       else if (inherits(cond, "condition")) {
[18:03:52.252]                         if (!is.null(pattern)) {
[18:03:52.252]                           computeRestarts <- base::computeRestarts
[18:03:52.252]                           grepl <- base::grepl
[18:03:52.252]                           restarts <- computeRestarts(cond)
[18:03:52.252]                           for (restart in restarts) {
[18:03:52.252]                             name <- restart$name
[18:03:52.252]                             if (is.null(name)) 
[18:03:52.252]                               next
[18:03:52.252]                             if (!grepl(pattern, name)) 
[18:03:52.252]                               next
[18:03:52.252]                             invokeRestart(restart)
[18:03:52.252]                             muffled <- TRUE
[18:03:52.252]                             break
[18:03:52.252]                           }
[18:03:52.252]                         }
[18:03:52.252]                       }
[18:03:52.252]                       invisible(muffled)
[18:03:52.252]                     }
[18:03:52.252]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.252]                   }
[18:03:52.252]                 }
[18:03:52.252]                 else {
[18:03:52.252]                   if (TRUE) {
[18:03:52.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.252]                     {
[18:03:52.252]                       inherits <- base::inherits
[18:03:52.252]                       invokeRestart <- base::invokeRestart
[18:03:52.252]                       is.null <- base::is.null
[18:03:52.252]                       muffled <- FALSE
[18:03:52.252]                       if (inherits(cond, "message")) {
[18:03:52.252]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.252]                         if (muffled) 
[18:03:52.252]                           invokeRestart("muffleMessage")
[18:03:52.252]                       }
[18:03:52.252]                       else if (inherits(cond, "warning")) {
[18:03:52.252]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.252]                         if (muffled) 
[18:03:52.252]                           invokeRestart("muffleWarning")
[18:03:52.252]                       }
[18:03:52.252]                       else if (inherits(cond, "condition")) {
[18:03:52.252]                         if (!is.null(pattern)) {
[18:03:52.252]                           computeRestarts <- base::computeRestarts
[18:03:52.252]                           grepl <- base::grepl
[18:03:52.252]                           restarts <- computeRestarts(cond)
[18:03:52.252]                           for (restart in restarts) {
[18:03:52.252]                             name <- restart$name
[18:03:52.252]                             if (is.null(name)) 
[18:03:52.252]                               next
[18:03:52.252]                             if (!grepl(pattern, name)) 
[18:03:52.252]                               next
[18:03:52.252]                             invokeRestart(restart)
[18:03:52.252]                             muffled <- TRUE
[18:03:52.252]                             break
[18:03:52.252]                           }
[18:03:52.252]                         }
[18:03:52.252]                       }
[18:03:52.252]                       invisible(muffled)
[18:03:52.252]                     }
[18:03:52.252]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.252]                   }
[18:03:52.252]                 }
[18:03:52.252]             }
[18:03:52.252]         }))
[18:03:52.252]     }, error = function(ex) {
[18:03:52.252]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.252]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.252]                 ...future.rng), started = ...future.startTime, 
[18:03:52.252]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.252]             version = "1.8"), class = "FutureResult")
[18:03:52.252]     }, finally = {
[18:03:52.252]         if (!identical(...future.workdir, getwd())) 
[18:03:52.252]             setwd(...future.workdir)
[18:03:52.252]         {
[18:03:52.252]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.252]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.252]             }
[18:03:52.252]             base::options(...future.oldOptions)
[18:03:52.252]             if (.Platform$OS.type == "windows") {
[18:03:52.252]                 old_names <- names(...future.oldEnvVars)
[18:03:52.252]                 envs <- base::Sys.getenv()
[18:03:52.252]                 names <- names(envs)
[18:03:52.252]                 common <- intersect(names, old_names)
[18:03:52.252]                 added <- setdiff(names, old_names)
[18:03:52.252]                 removed <- setdiff(old_names, names)
[18:03:52.252]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.252]                   envs[common]]
[18:03:52.252]                 NAMES <- toupper(changed)
[18:03:52.252]                 args <- list()
[18:03:52.252]                 for (kk in seq_along(NAMES)) {
[18:03:52.252]                   name <- changed[[kk]]
[18:03:52.252]                   NAME <- NAMES[[kk]]
[18:03:52.252]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.252]                     next
[18:03:52.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.252]                 }
[18:03:52.252]                 NAMES <- toupper(added)
[18:03:52.252]                 for (kk in seq_along(NAMES)) {
[18:03:52.252]                   name <- added[[kk]]
[18:03:52.252]                   NAME <- NAMES[[kk]]
[18:03:52.252]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.252]                     next
[18:03:52.252]                   args[[name]] <- ""
[18:03:52.252]                 }
[18:03:52.252]                 NAMES <- toupper(removed)
[18:03:52.252]                 for (kk in seq_along(NAMES)) {
[18:03:52.252]                   name <- removed[[kk]]
[18:03:52.252]                   NAME <- NAMES[[kk]]
[18:03:52.252]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.252]                     next
[18:03:52.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.252]                 }
[18:03:52.252]                 if (length(args) > 0) 
[18:03:52.252]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.252]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.252]             }
[18:03:52.252]             else {
[18:03:52.252]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.252]             }
[18:03:52.252]             {
[18:03:52.252]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.252]                   0L) {
[18:03:52.252]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.252]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.252]                   base::options(opts)
[18:03:52.252]                 }
[18:03:52.252]                 {
[18:03:52.252]                   {
[18:03:52.252]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:52.252]                     NULL
[18:03:52.252]                   }
[18:03:52.252]                   options(future.plan = NULL)
[18:03:52.252]                   if (is.na(NA_character_)) 
[18:03:52.252]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.252]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.252]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.252]                     .init = FALSE)
[18:03:52.252]                 }
[18:03:52.252]             }
[18:03:52.252]         }
[18:03:52.252]     })
[18:03:52.252]     if (TRUE) {
[18:03:52.252]         base::sink(type = "output", split = FALSE)
[18:03:52.252]         if (TRUE) {
[18:03:52.252]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.252]         }
[18:03:52.252]         else {
[18:03:52.252]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.252]         }
[18:03:52.252]         base::close(...future.stdout)
[18:03:52.252]         ...future.stdout <- NULL
[18:03:52.252]     }
[18:03:52.252]     ...future.result$conditions <- ...future.conditions
[18:03:52.252]     ...future.result$finished <- base::Sys.time()
[18:03:52.252]     ...future.result
[18:03:52.252] }
[18:03:52.257] requestCore(): workers = 2
[18:03:52.261] MulticoreFuture started
[18:03:52.262] result() for MulticoreFuture ...
[18:03:52.265] plan(): Setting new future strategy stack:
[18:03:52.267] List of future strategies:
[18:03:52.267] 1. sequential:
[18:03:52.267]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.267]    - tweaked: FALSE
[18:03:52.267]    - call: NULL
[18:03:52.269] plan(): nbrOfWorkers() = 1
[18:03:52.273] plan(): Setting new future strategy stack:
[18:03:52.273] List of future strategies:
[18:03:52.273] 1. future:
[18:03:52.273]    - args: function (..., workers = "<NULL>")
[18:03:52.273]    - tweaked: FALSE
[18:03:52.273]    - call: plan(foo)
[18:03:52.275] plan(): nbrOfWorkers() = Inf
[18:03:52.278] result() for MulticoreFuture ...
[18:03:52.279] result() for MulticoreFuture ... done
[18:03:52.279] result() for MulticoreFuture ... done
[18:03:52.279] result() for MulticoreFuture ...
[18:03:52.279] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[18:03:52.283] plan(): Setting new future strategy stack:
[18:03:52.283] List of future strategies:
[18:03:52.283] 1. FutureStrategy:
[18:03:52.283]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.283]    - tweaked: FALSE
[18:03:52.283]    - call: future::plan(oplan)
[18:03:52.288] plan(): nbrOfWorkers() = 1
> 
