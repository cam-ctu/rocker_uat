
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:31.862] plan(): Setting new future strategy stack:
[17:46:31.863] List of future strategies:
[17:46:31.863] 1. sequential:
[17:46:31.863]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:31.863]    - tweaked: FALSE
[17:46:31.863]    - call: future::plan("sequential")
[17:46:31.874] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[17:46:31.888] getGlobalsAndPackages() ...
[17:46:31.888] 
[17:46:31.888] - globals: [0] <none>
[17:46:31.888] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 37694b06-d304-4af9-3b2d-cdcb45dbd068
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[17:46:31.889] run() for ‘Future’ ...
[17:46:31.889] - state: ‘created’
[17:46:31.890] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[17:46:31.892] plan(): Setting new future strategy stack:
[17:46:31.893] List of future strategies:
[17:46:31.893] 1. future:
[17:46:31.893]    - args: function (..., workers = "<NULL>")
[17:46:31.893]    - tweaked: FALSE
[17:46:31.893]    - call: plan(foo)
[17:46:31.904] plan(): nbrOfWorkers() = Inf
> f <- Future()
[17:46:31.904] getGlobalsAndPackages() ...
[17:46:31.904] 
[17:46:31.904] - globals: [0] <none>
[17:46:31.904] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[17:46:31.905] Packages needed by the future expression (n = 0): <none>
[17:46:31.905] Packages needed by future strategies (n = 0): <none>
[17:46:31.906] {
[17:46:31.906]     {
[17:46:31.906]         {
[17:46:31.906]             ...future.startTime <- base::Sys.time()
[17:46:31.906]             {
[17:46:31.906]                 {
[17:46:31.906]                   {
[17:46:31.906]                     base::local({
[17:46:31.906]                       has_future <- base::requireNamespace("future", 
[17:46:31.906]                         quietly = TRUE)
[17:46:31.906]                       if (has_future) {
[17:46:31.906]                         ns <- base::getNamespace("future")
[17:46:31.906]                         version <- ns[[".package"]][["version"]]
[17:46:31.906]                         if (is.null(version)) 
[17:46:31.906]                           version <- utils::packageVersion("future")
[17:46:31.906]                       }
[17:46:31.906]                       else {
[17:46:31.906]                         version <- NULL
[17:46:31.906]                       }
[17:46:31.906]                       if (!has_future || version < "1.8.0") {
[17:46:31.906]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:31.906]                           "", base::R.version$version.string), 
[17:46:31.906]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:31.906]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:31.906]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:31.906]                             "release", "version")], collapse = " "), 
[17:46:31.906]                           hostname = base::Sys.info()[["nodename"]])
[17:46:31.906]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:31.906]                           info)
[17:46:31.906]                         info <- base::paste(info, collapse = "; ")
[17:46:31.906]                         if (!has_future) {
[17:46:31.906]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:31.906]                             info)
[17:46:31.906]                         }
[17:46:31.906]                         else {
[17:46:31.906]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:31.906]                             info, version)
[17:46:31.906]                         }
[17:46:31.906]                         base::stop(msg)
[17:46:31.906]                       }
[17:46:31.906]                     })
[17:46:31.906]                   }
[17:46:31.906]                   ...future.strategy.old <- future::plan("list")
[17:46:31.906]                   options(future.plan = NULL)
[17:46:31.906]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:31.906]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:31.906]                 }
[17:46:31.906]                 ...future.workdir <- getwd()
[17:46:31.906]             }
[17:46:31.906]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:31.906]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:31.906]         }
[17:46:31.906]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:31.906]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:31.906]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:31.906]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:31.906]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:31.906]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:31.906]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:31.906]             base::names(...future.oldOptions))
[17:46:31.906]     }
[17:46:31.906]     if (FALSE) {
[17:46:31.906]     }
[17:46:31.906]     else {
[17:46:31.906]         if (TRUE) {
[17:46:31.906]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:31.906]                 open = "w")
[17:46:31.906]         }
[17:46:31.906]         else {
[17:46:31.906]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:31.906]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:31.906]         }
[17:46:31.906]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:31.906]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:31.906]             base::sink(type = "output", split = FALSE)
[17:46:31.906]             base::close(...future.stdout)
[17:46:31.906]         }, add = TRUE)
[17:46:31.906]     }
[17:46:31.906]     ...future.frame <- base::sys.nframe()
[17:46:31.906]     ...future.conditions <- base::list()
[17:46:31.906]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:31.906]     if (FALSE) {
[17:46:31.906]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:31.906]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:31.906]     }
[17:46:31.906]     ...future.result <- base::tryCatch({
[17:46:31.906]         base::withCallingHandlers({
[17:46:31.906]             ...future.value <- base::withVisible(base::local(NULL))
[17:46:31.906]             future::FutureResult(value = ...future.value$value, 
[17:46:31.906]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:31.906]                   ...future.rng), globalenv = if (FALSE) 
[17:46:31.906]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:31.906]                     ...future.globalenv.names))
[17:46:31.906]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:31.906]         }, condition = base::local({
[17:46:31.906]             c <- base::c
[17:46:31.906]             inherits <- base::inherits
[17:46:31.906]             invokeRestart <- base::invokeRestart
[17:46:31.906]             length <- base::length
[17:46:31.906]             list <- base::list
[17:46:31.906]             seq.int <- base::seq.int
[17:46:31.906]             signalCondition <- base::signalCondition
[17:46:31.906]             sys.calls <- base::sys.calls
[17:46:31.906]             `[[` <- base::`[[`
[17:46:31.906]             `+` <- base::`+`
[17:46:31.906]             `<<-` <- base::`<<-`
[17:46:31.906]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:31.906]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:31.906]                   3L)]
[17:46:31.906]             }
[17:46:31.906]             function(cond) {
[17:46:31.906]                 is_error <- inherits(cond, "error")
[17:46:31.906]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:31.906]                   NULL)
[17:46:31.906]                 if (is_error) {
[17:46:31.906]                   sessionInformation <- function() {
[17:46:31.906]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:31.906]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:31.906]                       search = base::search(), system = base::Sys.info())
[17:46:31.906]                   }
[17:46:31.906]                   ...future.conditions[[length(...future.conditions) + 
[17:46:31.906]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:31.906]                     cond$call), session = sessionInformation(), 
[17:46:31.906]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:31.906]                   signalCondition(cond)
[17:46:31.906]                 }
[17:46:31.906]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[17:46:31.906]                   signal <- FALSE && inherits(cond, character(0))
[17:46:31.906]                   ...future.conditions[[length(...future.conditions) + 
[17:46:31.906]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:31.906]                   if (FALSE && !signal) {
[17:46:31.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:31.906]                     {
[17:46:31.906]                       inherits <- base::inherits
[17:46:31.906]                       invokeRestart <- base::invokeRestart
[17:46:31.906]                       is.null <- base::is.null
[17:46:31.906]                       muffled <- FALSE
[17:46:31.906]                       if (inherits(cond, "message")) {
[17:46:31.906]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:31.906]                         if (muffled) 
[17:46:31.906]                           invokeRestart("muffleMessage")
[17:46:31.906]                       }
[17:46:31.906]                       else if (inherits(cond, "warning")) {
[17:46:31.906]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:31.906]                         if (muffled) 
[17:46:31.906]                           invokeRestart("muffleWarning")
[17:46:31.906]                       }
[17:46:31.906]                       else if (inherits(cond, "condition")) {
[17:46:31.906]                         if (!is.null(pattern)) {
[17:46:31.906]                           computeRestarts <- base::computeRestarts
[17:46:31.906]                           grepl <- base::grepl
[17:46:31.906]                           restarts <- computeRestarts(cond)
[17:46:31.906]                           for (restart in restarts) {
[17:46:31.906]                             name <- restart$name
[17:46:31.906]                             if (is.null(name)) 
[17:46:31.906]                               next
[17:46:31.906]                             if (!grepl(pattern, name)) 
[17:46:31.906]                               next
[17:46:31.906]                             invokeRestart(restart)
[17:46:31.906]                             muffled <- TRUE
[17:46:31.906]                             break
[17:46:31.906]                           }
[17:46:31.906]                         }
[17:46:31.906]                       }
[17:46:31.906]                       invisible(muffled)
[17:46:31.906]                     }
[17:46:31.906]                     muffleCondition(cond, pattern = "^muffle")
[17:46:31.906]                   }
[17:46:31.906]                 }
[17:46:31.906]                 else {
[17:46:31.906]                   if (TRUE) {
[17:46:31.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:31.906]                     {
[17:46:31.906]                       inherits <- base::inherits
[17:46:31.906]                       invokeRestart <- base::invokeRestart
[17:46:31.906]                       is.null <- base::is.null
[17:46:31.906]                       muffled <- FALSE
[17:46:31.906]                       if (inherits(cond, "message")) {
[17:46:31.906]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:31.906]                         if (muffled) 
[17:46:31.906]                           invokeRestart("muffleMessage")
[17:46:31.906]                       }
[17:46:31.906]                       else if (inherits(cond, "warning")) {
[17:46:31.906]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:31.906]                         if (muffled) 
[17:46:31.906]                           invokeRestart("muffleWarning")
[17:46:31.906]                       }
[17:46:31.906]                       else if (inherits(cond, "condition")) {
[17:46:31.906]                         if (!is.null(pattern)) {
[17:46:31.906]                           computeRestarts <- base::computeRestarts
[17:46:31.906]                           grepl <- base::grepl
[17:46:31.906]                           restarts <- computeRestarts(cond)
[17:46:31.906]                           for (restart in restarts) {
[17:46:31.906]                             name <- restart$name
[17:46:31.906]                             if (is.null(name)) 
[17:46:31.906]                               next
[17:46:31.906]                             if (!grepl(pattern, name)) 
[17:46:31.906]                               next
[17:46:31.906]                             invokeRestart(restart)
[17:46:31.906]                             muffled <- TRUE
[17:46:31.906]                             break
[17:46:31.906]                           }
[17:46:31.906]                         }
[17:46:31.906]                       }
[17:46:31.906]                       invisible(muffled)
[17:46:31.906]                     }
[17:46:31.906]                     muffleCondition(cond, pattern = "^muffle")
[17:46:31.906]                   }
[17:46:31.906]                 }
[17:46:31.906]             }
[17:46:31.906]         }))
[17:46:31.906]     }, error = function(ex) {
[17:46:31.906]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:31.906]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:31.906]                 ...future.rng), started = ...future.startTime, 
[17:46:31.906]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:31.906]             version = "1.8"), class = "FutureResult")
[17:46:31.906]     }, finally = {
[17:46:31.906]         if (!identical(...future.workdir, getwd())) 
[17:46:31.906]             setwd(...future.workdir)
[17:46:31.906]         {
[17:46:31.906]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:31.906]                 ...future.oldOptions$nwarnings <- NULL
[17:46:31.906]             }
[17:46:31.906]             base::options(...future.oldOptions)
[17:46:31.906]             if (.Platform$OS.type == "windows") {
[17:46:31.906]                 old_names <- names(...future.oldEnvVars)
[17:46:31.906]                 envs <- base::Sys.getenv()
[17:46:31.906]                 names <- names(envs)
[17:46:31.906]                 common <- intersect(names, old_names)
[17:46:31.906]                 added <- setdiff(names, old_names)
[17:46:31.906]                 removed <- setdiff(old_names, names)
[17:46:31.906]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:31.906]                   envs[common]]
[17:46:31.906]                 NAMES <- toupper(changed)
[17:46:31.906]                 args <- list()
[17:46:31.906]                 for (kk in seq_along(NAMES)) {
[17:46:31.906]                   name <- changed[[kk]]
[17:46:31.906]                   NAME <- NAMES[[kk]]
[17:46:31.906]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.906]                     next
[17:46:31.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:31.906]                 }
[17:46:31.906]                 NAMES <- toupper(added)
[17:46:31.906]                 for (kk in seq_along(NAMES)) {
[17:46:31.906]                   name <- added[[kk]]
[17:46:31.906]                   NAME <- NAMES[[kk]]
[17:46:31.906]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.906]                     next
[17:46:31.906]                   args[[name]] <- ""
[17:46:31.906]                 }
[17:46:31.906]                 NAMES <- toupper(removed)
[17:46:31.906]                 for (kk in seq_along(NAMES)) {
[17:46:31.906]                   name <- removed[[kk]]
[17:46:31.906]                   NAME <- NAMES[[kk]]
[17:46:31.906]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.906]                     next
[17:46:31.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:31.906]                 }
[17:46:31.906]                 if (length(args) > 0) 
[17:46:31.906]                   base::do.call(base::Sys.setenv, args = args)
[17:46:31.906]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:31.906]             }
[17:46:31.906]             else {
[17:46:31.906]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:31.906]             }
[17:46:31.906]             {
[17:46:31.906]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:31.906]                   0L) {
[17:46:31.906]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:31.906]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:31.906]                   base::options(opts)
[17:46:31.906]                 }
[17:46:31.906]                 {
[17:46:31.906]                   NULL
[17:46:31.906]                   options(future.plan = NULL)
[17:46:31.906]                   if (is.na(NA_character_)) 
[17:46:31.906]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:31.906]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:31.906]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:31.906]                     .init = FALSE)
[17:46:31.906]                 }
[17:46:31.906]             }
[17:46:31.906]         }
[17:46:31.906]     })
[17:46:31.906]     if (TRUE) {
[17:46:31.906]         base::sink(type = "output", split = FALSE)
[17:46:31.906]         if (TRUE) {
[17:46:31.906]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:31.906]         }
[17:46:31.906]         else {
[17:46:31.906]             ...future.result["stdout"] <- base::list(NULL)
[17:46:31.906]         }
[17:46:31.906]         base::close(...future.stdout)
[17:46:31.906]         ...future.stdout <- NULL
[17:46:31.906]     }
[17:46:31.906]     ...future.result$conditions <- ...future.conditions
[17:46:31.906]     ...future.result$finished <- base::Sys.time()
[17:46:31.906]     ...future.result
[17:46:31.906] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[17:46:31.916] getGlobalsAndPackages() ...
[17:46:31.916] Searching for globals...
[17:46:31.921] - globals found: [1] ‘{’
[17:46:31.921] Searching for globals ... DONE
[17:46:31.921] Resolving globals: FALSE
[17:46:31.922] 
[17:46:31.922] 
[17:46:31.922] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 37694b06-d304-4af9-3b2d-cdcb45dbd068
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:31.923] Packages needed by the future expression (n = 0): <none>
[17:46:31.923] Packages needed by future strategies (n = 0): <none>
[17:46:31.924] {
[17:46:31.924]     {
[17:46:31.924]         {
[17:46:31.924]             ...future.startTime <- base::Sys.time()
[17:46:31.924]             {
[17:46:31.924]                 {
[17:46:31.924]                   {
[17:46:31.924]                     base::local({
[17:46:31.924]                       has_future <- base::requireNamespace("future", 
[17:46:31.924]                         quietly = TRUE)
[17:46:31.924]                       if (has_future) {
[17:46:31.924]                         ns <- base::getNamespace("future")
[17:46:31.924]                         version <- ns[[".package"]][["version"]]
[17:46:31.924]                         if (is.null(version)) 
[17:46:31.924]                           version <- utils::packageVersion("future")
[17:46:31.924]                       }
[17:46:31.924]                       else {
[17:46:31.924]                         version <- NULL
[17:46:31.924]                       }
[17:46:31.924]                       if (!has_future || version < "1.8.0") {
[17:46:31.924]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:31.924]                           "", base::R.version$version.string), 
[17:46:31.924]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:31.924]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:31.924]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:31.924]                             "release", "version")], collapse = " "), 
[17:46:31.924]                           hostname = base::Sys.info()[["nodename"]])
[17:46:31.924]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:31.924]                           info)
[17:46:31.924]                         info <- base::paste(info, collapse = "; ")
[17:46:31.924]                         if (!has_future) {
[17:46:31.924]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:31.924]                             info)
[17:46:31.924]                         }
[17:46:31.924]                         else {
[17:46:31.924]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:31.924]                             info, version)
[17:46:31.924]                         }
[17:46:31.924]                         base::stop(msg)
[17:46:31.924]                       }
[17:46:31.924]                     })
[17:46:31.924]                   }
[17:46:31.924]                   ...future.strategy.old <- future::plan("list")
[17:46:31.924]                   options(future.plan = NULL)
[17:46:31.924]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:31.924]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:31.924]                 }
[17:46:31.924]                 ...future.workdir <- getwd()
[17:46:31.924]             }
[17:46:31.924]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:31.924]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:31.924]         }
[17:46:31.924]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:31.924]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:31.924]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:31.924]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:31.924]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:31.924]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:31.924]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:31.924]             base::names(...future.oldOptions))
[17:46:31.924]     }
[17:46:31.924]     if (FALSE) {
[17:46:31.924]     }
[17:46:31.924]     else {
[17:46:31.924]         if (TRUE) {
[17:46:31.924]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:31.924]                 open = "w")
[17:46:31.924]         }
[17:46:31.924]         else {
[17:46:31.924]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:31.924]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:31.924]         }
[17:46:31.924]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:31.924]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:31.924]             base::sink(type = "output", split = FALSE)
[17:46:31.924]             base::close(...future.stdout)
[17:46:31.924]         }, add = TRUE)
[17:46:31.924]     }
[17:46:31.924]     ...future.frame <- base::sys.nframe()
[17:46:31.924]     ...future.conditions <- base::list()
[17:46:31.924]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:31.924]     if (FALSE) {
[17:46:31.924]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:31.924]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:31.924]     }
[17:46:31.924]     ...future.result <- base::tryCatch({
[17:46:31.924]         base::withCallingHandlers({
[17:46:31.924]             ...future.value <- base::withVisible(base::local({
[17:46:31.924]                 42L
[17:46:31.924]             }))
[17:46:31.924]             future::FutureResult(value = ...future.value$value, 
[17:46:31.924]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:31.924]                   ...future.rng), globalenv = if (FALSE) 
[17:46:31.924]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:31.924]                     ...future.globalenv.names))
[17:46:31.924]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:31.924]         }, condition = base::local({
[17:46:31.924]             c <- base::c
[17:46:31.924]             inherits <- base::inherits
[17:46:31.924]             invokeRestart <- base::invokeRestart
[17:46:31.924]             length <- base::length
[17:46:31.924]             list <- base::list
[17:46:31.924]             seq.int <- base::seq.int
[17:46:31.924]             signalCondition <- base::signalCondition
[17:46:31.924]             sys.calls <- base::sys.calls
[17:46:31.924]             `[[` <- base::`[[`
[17:46:31.924]             `+` <- base::`+`
[17:46:31.924]             `<<-` <- base::`<<-`
[17:46:31.924]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:31.924]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:31.924]                   3L)]
[17:46:31.924]             }
[17:46:31.924]             function(cond) {
[17:46:31.924]                 is_error <- inherits(cond, "error")
[17:46:31.924]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:31.924]                   NULL)
[17:46:31.924]                 if (is_error) {
[17:46:31.924]                   sessionInformation <- function() {
[17:46:31.924]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:31.924]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:31.924]                       search = base::search(), system = base::Sys.info())
[17:46:31.924]                   }
[17:46:31.924]                   ...future.conditions[[length(...future.conditions) + 
[17:46:31.924]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:31.924]                     cond$call), session = sessionInformation(), 
[17:46:31.924]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:31.924]                   signalCondition(cond)
[17:46:31.924]                 }
[17:46:31.924]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:31.924]                 "immediateCondition"))) {
[17:46:31.924]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:31.924]                   ...future.conditions[[length(...future.conditions) + 
[17:46:31.924]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:31.924]                   if (TRUE && !signal) {
[17:46:31.924]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:31.924]                     {
[17:46:31.924]                       inherits <- base::inherits
[17:46:31.924]                       invokeRestart <- base::invokeRestart
[17:46:31.924]                       is.null <- base::is.null
[17:46:31.924]                       muffled <- FALSE
[17:46:31.924]                       if (inherits(cond, "message")) {
[17:46:31.924]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:31.924]                         if (muffled) 
[17:46:31.924]                           invokeRestart("muffleMessage")
[17:46:31.924]                       }
[17:46:31.924]                       else if (inherits(cond, "warning")) {
[17:46:31.924]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:31.924]                         if (muffled) 
[17:46:31.924]                           invokeRestart("muffleWarning")
[17:46:31.924]                       }
[17:46:31.924]                       else if (inherits(cond, "condition")) {
[17:46:31.924]                         if (!is.null(pattern)) {
[17:46:31.924]                           computeRestarts <- base::computeRestarts
[17:46:31.924]                           grepl <- base::grepl
[17:46:31.924]                           restarts <- computeRestarts(cond)
[17:46:31.924]                           for (restart in restarts) {
[17:46:31.924]                             name <- restart$name
[17:46:31.924]                             if (is.null(name)) 
[17:46:31.924]                               next
[17:46:31.924]                             if (!grepl(pattern, name)) 
[17:46:31.924]                               next
[17:46:31.924]                             invokeRestart(restart)
[17:46:31.924]                             muffled <- TRUE
[17:46:31.924]                             break
[17:46:31.924]                           }
[17:46:31.924]                         }
[17:46:31.924]                       }
[17:46:31.924]                       invisible(muffled)
[17:46:31.924]                     }
[17:46:31.924]                     muffleCondition(cond, pattern = "^muffle")
[17:46:31.924]                   }
[17:46:31.924]                 }
[17:46:31.924]                 else {
[17:46:31.924]                   if (TRUE) {
[17:46:31.924]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:31.924]                     {
[17:46:31.924]                       inherits <- base::inherits
[17:46:31.924]                       invokeRestart <- base::invokeRestart
[17:46:31.924]                       is.null <- base::is.null
[17:46:31.924]                       muffled <- FALSE
[17:46:31.924]                       if (inherits(cond, "message")) {
[17:46:31.924]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:31.924]                         if (muffled) 
[17:46:31.924]                           invokeRestart("muffleMessage")
[17:46:31.924]                       }
[17:46:31.924]                       else if (inherits(cond, "warning")) {
[17:46:31.924]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:31.924]                         if (muffled) 
[17:46:31.924]                           invokeRestart("muffleWarning")
[17:46:31.924]                       }
[17:46:31.924]                       else if (inherits(cond, "condition")) {
[17:46:31.924]                         if (!is.null(pattern)) {
[17:46:31.924]                           computeRestarts <- base::computeRestarts
[17:46:31.924]                           grepl <- base::grepl
[17:46:31.924]                           restarts <- computeRestarts(cond)
[17:46:31.924]                           for (restart in restarts) {
[17:46:31.924]                             name <- restart$name
[17:46:31.924]                             if (is.null(name)) 
[17:46:31.924]                               next
[17:46:31.924]                             if (!grepl(pattern, name)) 
[17:46:31.924]                               next
[17:46:31.924]                             invokeRestart(restart)
[17:46:31.924]                             muffled <- TRUE
[17:46:31.924]                             break
[17:46:31.924]                           }
[17:46:31.924]                         }
[17:46:31.924]                       }
[17:46:31.924]                       invisible(muffled)
[17:46:31.924]                     }
[17:46:31.924]                     muffleCondition(cond, pattern = "^muffle")
[17:46:31.924]                   }
[17:46:31.924]                 }
[17:46:31.924]             }
[17:46:31.924]         }))
[17:46:31.924]     }, error = function(ex) {
[17:46:31.924]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:31.924]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:31.924]                 ...future.rng), started = ...future.startTime, 
[17:46:31.924]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:31.924]             version = "1.8"), class = "FutureResult")
[17:46:31.924]     }, finally = {
[17:46:31.924]         if (!identical(...future.workdir, getwd())) 
[17:46:31.924]             setwd(...future.workdir)
[17:46:31.924]         {
[17:46:31.924]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:31.924]                 ...future.oldOptions$nwarnings <- NULL
[17:46:31.924]             }
[17:46:31.924]             base::options(...future.oldOptions)
[17:46:31.924]             if (.Platform$OS.type == "windows") {
[17:46:31.924]                 old_names <- names(...future.oldEnvVars)
[17:46:31.924]                 envs <- base::Sys.getenv()
[17:46:31.924]                 names <- names(envs)
[17:46:31.924]                 common <- intersect(names, old_names)
[17:46:31.924]                 added <- setdiff(names, old_names)
[17:46:31.924]                 removed <- setdiff(old_names, names)
[17:46:31.924]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:31.924]                   envs[common]]
[17:46:31.924]                 NAMES <- toupper(changed)
[17:46:31.924]                 args <- list()
[17:46:31.924]                 for (kk in seq_along(NAMES)) {
[17:46:31.924]                   name <- changed[[kk]]
[17:46:31.924]                   NAME <- NAMES[[kk]]
[17:46:31.924]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.924]                     next
[17:46:31.924]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:31.924]                 }
[17:46:31.924]                 NAMES <- toupper(added)
[17:46:31.924]                 for (kk in seq_along(NAMES)) {
[17:46:31.924]                   name <- added[[kk]]
[17:46:31.924]                   NAME <- NAMES[[kk]]
[17:46:31.924]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.924]                     next
[17:46:31.924]                   args[[name]] <- ""
[17:46:31.924]                 }
[17:46:31.924]                 NAMES <- toupper(removed)
[17:46:31.924]                 for (kk in seq_along(NAMES)) {
[17:46:31.924]                   name <- removed[[kk]]
[17:46:31.924]                   NAME <- NAMES[[kk]]
[17:46:31.924]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.924]                     next
[17:46:31.924]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:31.924]                 }
[17:46:31.924]                 if (length(args) > 0) 
[17:46:31.924]                   base::do.call(base::Sys.setenv, args = args)
[17:46:31.924]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:31.924]             }
[17:46:31.924]             else {
[17:46:31.924]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:31.924]             }
[17:46:31.924]             {
[17:46:31.924]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:31.924]                   0L) {
[17:46:31.924]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:31.924]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:31.924]                   base::options(opts)
[17:46:31.924]                 }
[17:46:31.924]                 {
[17:46:31.924]                   {
[17:46:31.924]                     NULL
[17:46:31.924]                     RNGkind("Mersenne-Twister")
[17:46:31.924]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:31.924]                       inherits = FALSE)
[17:46:31.924]                   }
[17:46:31.924]                   options(future.plan = NULL)
[17:46:31.924]                   if (is.na(NA_character_)) 
[17:46:31.924]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:31.924]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:31.924]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:31.924]                     .init = FALSE)
[17:46:31.924]                 }
[17:46:31.924]             }
[17:46:31.924]         }
[17:46:31.924]     })
[17:46:31.924]     if (TRUE) {
[17:46:31.924]         base::sink(type = "output", split = FALSE)
[17:46:31.924]         if (TRUE) {
[17:46:31.924]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:31.924]         }
[17:46:31.924]         else {
[17:46:31.924]             ...future.result["stdout"] <- base::list(NULL)
[17:46:31.924]         }
[17:46:31.924]         base::close(...future.stdout)
[17:46:31.924]         ...future.stdout <- NULL
[17:46:31.924]     }
[17:46:31.924]     ...future.result$conditions <- ...future.conditions
[17:46:31.924]     ...future.result$finished <- base::Sys.time()
[17:46:31.924]     ...future.result
[17:46:31.924] }
[17:46:31.926] plan(): Setting new future strategy stack:
[17:46:31.926] List of future strategies:
[17:46:31.926] 1. sequential:
[17:46:31.926]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:31.926]    - tweaked: FALSE
[17:46:31.926]    - call: NULL
[17:46:31.926] plan(): nbrOfWorkers() = 1
[17:46:31.927] plan(): Setting new future strategy stack:
[17:46:31.927] List of future strategies:
[17:46:31.927] 1. future:
[17:46:31.927]    - args: function (..., workers = "<NULL>")
[17:46:31.927]    - tweaked: FALSE
[17:46:31.927]    - call: plan(foo)
[17:46:31.928] plan(): nbrOfWorkers() = Inf
[17:46:31.928] SequentialFuture started (and completed)
[1] 42
[17:46:31.929] getGlobalsAndPackages() ...
[17:46:31.929] Searching for globals...
[17:46:31.929] - globals found: [1] ‘{’
[17:46:31.930] Searching for globals ... DONE
[17:46:31.930] Resolving globals: FALSE
[17:46:31.930] 
[17:46:31.930] 
[17:46:31.930] getGlobalsAndPackages() ... DONE
[17:46:31.930] Packages needed by the future expression (n = 0): <none>
[17:46:31.931] Packages needed by future strategies (n = 0): <none>
[17:46:31.931] {
[17:46:31.931]     {
[17:46:31.931]         {
[17:46:31.931]             ...future.startTime <- base::Sys.time()
[17:46:31.931]             {
[17:46:31.931]                 {
[17:46:31.931]                   {
[17:46:31.931]                     base::local({
[17:46:31.931]                       has_future <- base::requireNamespace("future", 
[17:46:31.931]                         quietly = TRUE)
[17:46:31.931]                       if (has_future) {
[17:46:31.931]                         ns <- base::getNamespace("future")
[17:46:31.931]                         version <- ns[[".package"]][["version"]]
[17:46:31.931]                         if (is.null(version)) 
[17:46:31.931]                           version <- utils::packageVersion("future")
[17:46:31.931]                       }
[17:46:31.931]                       else {
[17:46:31.931]                         version <- NULL
[17:46:31.931]                       }
[17:46:31.931]                       if (!has_future || version < "1.8.0") {
[17:46:31.931]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:31.931]                           "", base::R.version$version.string), 
[17:46:31.931]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:31.931]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:31.931]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:31.931]                             "release", "version")], collapse = " "), 
[17:46:31.931]                           hostname = base::Sys.info()[["nodename"]])
[17:46:31.931]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:31.931]                           info)
[17:46:31.931]                         info <- base::paste(info, collapse = "; ")
[17:46:31.931]                         if (!has_future) {
[17:46:31.931]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:31.931]                             info)
[17:46:31.931]                         }
[17:46:31.931]                         else {
[17:46:31.931]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:31.931]                             info, version)
[17:46:31.931]                         }
[17:46:31.931]                         base::stop(msg)
[17:46:31.931]                       }
[17:46:31.931]                     })
[17:46:31.931]                   }
[17:46:31.931]                   ...future.strategy.old <- future::plan("list")
[17:46:31.931]                   options(future.plan = NULL)
[17:46:31.931]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:31.931]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:31.931]                 }
[17:46:31.931]                 ...future.workdir <- getwd()
[17:46:31.931]             }
[17:46:31.931]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:31.931]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:31.931]         }
[17:46:31.931]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:31.931]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:31.931]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:31.931]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:31.931]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:31.931]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:31.931]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:31.931]             base::names(...future.oldOptions))
[17:46:31.931]     }
[17:46:31.931]     if (FALSE) {
[17:46:31.931]     }
[17:46:31.931]     else {
[17:46:31.931]         if (TRUE) {
[17:46:31.931]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:31.931]                 open = "w")
[17:46:31.931]         }
[17:46:31.931]         else {
[17:46:31.931]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:31.931]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:31.931]         }
[17:46:31.931]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:31.931]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:31.931]             base::sink(type = "output", split = FALSE)
[17:46:31.931]             base::close(...future.stdout)
[17:46:31.931]         }, add = TRUE)
[17:46:31.931]     }
[17:46:31.931]     ...future.frame <- base::sys.nframe()
[17:46:31.931]     ...future.conditions <- base::list()
[17:46:31.931]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:31.931]     if (FALSE) {
[17:46:31.931]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:31.931]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:31.931]     }
[17:46:31.931]     ...future.result <- base::tryCatch({
[17:46:31.931]         base::withCallingHandlers({
[17:46:31.931]             ...future.value <- base::withVisible(base::local({
[17:46:31.931]                 42L
[17:46:31.931]             }))
[17:46:31.931]             future::FutureResult(value = ...future.value$value, 
[17:46:31.931]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:31.931]                   ...future.rng), globalenv = if (FALSE) 
[17:46:31.931]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:31.931]                     ...future.globalenv.names))
[17:46:31.931]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:31.931]         }, condition = base::local({
[17:46:31.931]             c <- base::c
[17:46:31.931]             inherits <- base::inherits
[17:46:31.931]             invokeRestart <- base::invokeRestart
[17:46:31.931]             length <- base::length
[17:46:31.931]             list <- base::list
[17:46:31.931]             seq.int <- base::seq.int
[17:46:31.931]             signalCondition <- base::signalCondition
[17:46:31.931]             sys.calls <- base::sys.calls
[17:46:31.931]             `[[` <- base::`[[`
[17:46:31.931]             `+` <- base::`+`
[17:46:31.931]             `<<-` <- base::`<<-`
[17:46:31.931]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:31.931]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:31.931]                   3L)]
[17:46:31.931]             }
[17:46:31.931]             function(cond) {
[17:46:31.931]                 is_error <- inherits(cond, "error")
[17:46:31.931]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:31.931]                   NULL)
[17:46:31.931]                 if (is_error) {
[17:46:31.931]                   sessionInformation <- function() {
[17:46:31.931]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:31.931]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:31.931]                       search = base::search(), system = base::Sys.info())
[17:46:31.931]                   }
[17:46:31.931]                   ...future.conditions[[length(...future.conditions) + 
[17:46:31.931]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:31.931]                     cond$call), session = sessionInformation(), 
[17:46:31.931]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:31.931]                   signalCondition(cond)
[17:46:31.931]                 }
[17:46:31.931]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:31.931]                 "immediateCondition"))) {
[17:46:31.931]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:31.931]                   ...future.conditions[[length(...future.conditions) + 
[17:46:31.931]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:31.931]                   if (TRUE && !signal) {
[17:46:31.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:31.931]                     {
[17:46:31.931]                       inherits <- base::inherits
[17:46:31.931]                       invokeRestart <- base::invokeRestart
[17:46:31.931]                       is.null <- base::is.null
[17:46:31.931]                       muffled <- FALSE
[17:46:31.931]                       if (inherits(cond, "message")) {
[17:46:31.931]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:31.931]                         if (muffled) 
[17:46:31.931]                           invokeRestart("muffleMessage")
[17:46:31.931]                       }
[17:46:31.931]                       else if (inherits(cond, "warning")) {
[17:46:31.931]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:31.931]                         if (muffled) 
[17:46:31.931]                           invokeRestart("muffleWarning")
[17:46:31.931]                       }
[17:46:31.931]                       else if (inherits(cond, "condition")) {
[17:46:31.931]                         if (!is.null(pattern)) {
[17:46:31.931]                           computeRestarts <- base::computeRestarts
[17:46:31.931]                           grepl <- base::grepl
[17:46:31.931]                           restarts <- computeRestarts(cond)
[17:46:31.931]                           for (restart in restarts) {
[17:46:31.931]                             name <- restart$name
[17:46:31.931]                             if (is.null(name)) 
[17:46:31.931]                               next
[17:46:31.931]                             if (!grepl(pattern, name)) 
[17:46:31.931]                               next
[17:46:31.931]                             invokeRestart(restart)
[17:46:31.931]                             muffled <- TRUE
[17:46:31.931]                             break
[17:46:31.931]                           }
[17:46:31.931]                         }
[17:46:31.931]                       }
[17:46:31.931]                       invisible(muffled)
[17:46:31.931]                     }
[17:46:31.931]                     muffleCondition(cond, pattern = "^muffle")
[17:46:31.931]                   }
[17:46:31.931]                 }
[17:46:31.931]                 else {
[17:46:31.931]                   if (TRUE) {
[17:46:31.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:31.931]                     {
[17:46:31.931]                       inherits <- base::inherits
[17:46:31.931]                       invokeRestart <- base::invokeRestart
[17:46:31.931]                       is.null <- base::is.null
[17:46:31.931]                       muffled <- FALSE
[17:46:31.931]                       if (inherits(cond, "message")) {
[17:46:31.931]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:31.931]                         if (muffled) 
[17:46:31.931]                           invokeRestart("muffleMessage")
[17:46:31.931]                       }
[17:46:31.931]                       else if (inherits(cond, "warning")) {
[17:46:31.931]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:31.931]                         if (muffled) 
[17:46:31.931]                           invokeRestart("muffleWarning")
[17:46:31.931]                       }
[17:46:31.931]                       else if (inherits(cond, "condition")) {
[17:46:31.931]                         if (!is.null(pattern)) {
[17:46:31.931]                           computeRestarts <- base::computeRestarts
[17:46:31.931]                           grepl <- base::grepl
[17:46:31.931]                           restarts <- computeRestarts(cond)
[17:46:31.931]                           for (restart in restarts) {
[17:46:31.931]                             name <- restart$name
[17:46:31.931]                             if (is.null(name)) 
[17:46:31.931]                               next
[17:46:31.931]                             if (!grepl(pattern, name)) 
[17:46:31.931]                               next
[17:46:31.931]                             invokeRestart(restart)
[17:46:31.931]                             muffled <- TRUE
[17:46:31.931]                             break
[17:46:31.931]                           }
[17:46:31.931]                         }
[17:46:31.931]                       }
[17:46:31.931]                       invisible(muffled)
[17:46:31.931]                     }
[17:46:31.931]                     muffleCondition(cond, pattern = "^muffle")
[17:46:31.931]                   }
[17:46:31.931]                 }
[17:46:31.931]             }
[17:46:31.931]         }))
[17:46:31.931]     }, error = function(ex) {
[17:46:31.931]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:31.931]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:31.931]                 ...future.rng), started = ...future.startTime, 
[17:46:31.931]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:31.931]             version = "1.8"), class = "FutureResult")
[17:46:31.931]     }, finally = {
[17:46:31.931]         if (!identical(...future.workdir, getwd())) 
[17:46:31.931]             setwd(...future.workdir)
[17:46:31.931]         {
[17:46:31.931]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:31.931]                 ...future.oldOptions$nwarnings <- NULL
[17:46:31.931]             }
[17:46:31.931]             base::options(...future.oldOptions)
[17:46:31.931]             if (.Platform$OS.type == "windows") {
[17:46:31.931]                 old_names <- names(...future.oldEnvVars)
[17:46:31.931]                 envs <- base::Sys.getenv()
[17:46:31.931]                 names <- names(envs)
[17:46:31.931]                 common <- intersect(names, old_names)
[17:46:31.931]                 added <- setdiff(names, old_names)
[17:46:31.931]                 removed <- setdiff(old_names, names)
[17:46:31.931]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:31.931]                   envs[common]]
[17:46:31.931]                 NAMES <- toupper(changed)
[17:46:31.931]                 args <- list()
[17:46:31.931]                 for (kk in seq_along(NAMES)) {
[17:46:31.931]                   name <- changed[[kk]]
[17:46:31.931]                   NAME <- NAMES[[kk]]
[17:46:31.931]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.931]                     next
[17:46:31.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:31.931]                 }
[17:46:31.931]                 NAMES <- toupper(added)
[17:46:31.931]                 for (kk in seq_along(NAMES)) {
[17:46:31.931]                   name <- added[[kk]]
[17:46:31.931]                   NAME <- NAMES[[kk]]
[17:46:31.931]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.931]                     next
[17:46:31.931]                   args[[name]] <- ""
[17:46:31.931]                 }
[17:46:31.931]                 NAMES <- toupper(removed)
[17:46:31.931]                 for (kk in seq_along(NAMES)) {
[17:46:31.931]                   name <- removed[[kk]]
[17:46:31.931]                   NAME <- NAMES[[kk]]
[17:46:31.931]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:31.931]                     next
[17:46:31.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:31.931]                 }
[17:46:31.931]                 if (length(args) > 0) 
[17:46:31.931]                   base::do.call(base::Sys.setenv, args = args)
[17:46:31.931]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:31.931]             }
[17:46:31.931]             else {
[17:46:31.931]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:31.931]             }
[17:46:31.931]             {
[17:46:31.931]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:31.931]                   0L) {
[17:46:31.931]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:31.931]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:31.931]                   base::options(opts)
[17:46:31.931]                 }
[17:46:31.931]                 {
[17:46:31.931]                   {
[17:46:31.931]                     NULL
[17:46:31.931]                     RNGkind("Mersenne-Twister")
[17:46:31.931]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:31.931]                       inherits = FALSE)
[17:46:31.931]                   }
[17:46:31.931]                   options(future.plan = NULL)
[17:46:31.931]                   if (is.na(NA_character_)) 
[17:46:31.931]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:31.931]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:31.931]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:31.931]                     .init = FALSE)
[17:46:31.931]                 }
[17:46:31.931]             }
[17:46:31.931]         }
[17:46:31.931]     })
[17:46:31.931]     if (TRUE) {
[17:46:31.931]         base::sink(type = "output", split = FALSE)
[17:46:31.931]         if (TRUE) {
[17:46:31.931]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:31.931]         }
[17:46:31.931]         else {
[17:46:31.931]             ...future.result["stdout"] <- base::list(NULL)
[17:46:31.931]         }
[17:46:31.931]         base::close(...future.stdout)
[17:46:31.931]         ...future.stdout <- NULL
[17:46:31.931]     }
[17:46:31.931]     ...future.result$conditions <- ...future.conditions
[17:46:31.931]     ...future.result$finished <- base::Sys.time()
[17:46:31.931]     ...future.result
[17:46:31.931] }
[17:46:31.933] plan(): Setting new future strategy stack:
[17:46:31.933] List of future strategies:
[17:46:31.933] 1. sequential:
[17:46:31.933]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:31.933]    - tweaked: FALSE
[17:46:31.933]    - call: NULL
[17:46:31.933] plan(): nbrOfWorkers() = 1
[17:46:31.934] plan(): Setting new future strategy stack:
[17:46:31.934] List of future strategies:
[17:46:31.934] 1. future:
[17:46:31.934]    - args: function (..., workers = "<NULL>")
[17:46:31.934]    - tweaked: FALSE
[17:46:31.934]    - call: plan(foo)
[17:46:31.935] plan(): nbrOfWorkers() = Inf
[17:46:31.935] SequentialFuture started (and completed)
[1] 42
[17:46:31.937] getGlobalsAndPackages() ...
[17:46:31.937] 
[17:46:31.937] - globals: [0] <none>
[17:46:31.937] getGlobalsAndPackages() ... DONE
[17:46:31.938] [local output] makeClusterPSOCK() ...
[17:46:31.973] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:31.975] [local output] Base port: 11480
[17:46:31.975] [local output] Getting setup options for 2 cluster nodes ...
[17:46:31.975] [local output]  - Node 1 of 2 ...
[17:46:31.975] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:31.976] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp1ir5gT/worker.rank=1.parallelly.parent=40640.9ec0571650d9.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp1ir5gT/worker.rank=1.parallelly.parent=40640.9ec0571650d9.pid")'’
[17:46:32.164] - Possible to infer worker's PID: TRUE
[17:46:32.165] [local output] Rscript port: 11480

[17:46:32.165] [local output]  - Node 2 of 2 ...
[17:46:32.165] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:32.166] [local output] Rscript port: 11480

[17:46:32.166] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:32.166] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:32.167] [local output] Setting up PSOCK nodes in parallel
[17:46:32.167] List of 36
[17:46:32.167]  $ worker          : chr "localhost"
[17:46:32.167]   ..- attr(*, "localhost")= logi TRUE
[17:46:32.167]  $ master          : chr "localhost"
[17:46:32.167]  $ port            : int 11480
[17:46:32.167]  $ connectTimeout  : num 120
[17:46:32.167]  $ timeout         : num 2592000
[17:46:32.167]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:32.167]  $ homogeneous     : logi TRUE
[17:46:32.167]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:32.167]  $ rscript_envs    : NULL
[17:46:32.167]  $ rscript_libs    : NULL
[17:46:32.167]  $ rscript_startup : NULL
[17:46:32.167]  $ rscript_sh      : chr "sh"
[17:46:32.167]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:32.167]  $ methods         : logi TRUE
[17:46:32.167]  $ socketOptions   : chr "no-delay"
[17:46:32.167]  $ useXDR          : logi FALSE
[17:46:32.167]  $ outfile         : chr "/dev/null"
[17:46:32.167]  $ renice          : int NA
[17:46:32.167]  $ rshcmd          : NULL
[17:46:32.167]  $ user            : chr(0) 
[17:46:32.167]  $ revtunnel       : logi FALSE
[17:46:32.167]  $ rshlogfile      : NULL
[17:46:32.167]  $ rshopts         : chr(0) 
[17:46:32.167]  $ rank            : int 1
[17:46:32.167]  $ manual          : logi FALSE
[17:46:32.167]  $ dryrun          : logi FALSE
[17:46:32.167]  $ quiet           : logi FALSE
[17:46:32.167]  $ setup_strategy  : chr "parallel"
[17:46:32.167]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:32.167]  $ pidfile         : chr "/tmp/Rtmp1ir5gT/worker.rank=1.parallelly.parent=40640.9ec0571650d9.pid"
[17:46:32.167]  $ rshcmd_label    : NULL
[17:46:32.167]  $ rsh_call        : NULL
[17:46:32.167]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:32.167]  $ localMachine    : logi TRUE
[17:46:32.167]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:32.167]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:32.167]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:32.167]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:32.167]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:32.167]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:32.167]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:32.167]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:32.167]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:32.167]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:32.167]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:32.167]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:32.167]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:32.167]  $ arguments       :List of 28
[17:46:32.167]   ..$ worker          : chr "localhost"
[17:46:32.167]   ..$ master          : NULL
[17:46:32.167]   ..$ port            : int 11480
[17:46:32.167]   ..$ connectTimeout  : num 120
[17:46:32.167]   ..$ timeout         : num 2592000
[17:46:32.167]   ..$ rscript         : NULL
[17:46:32.167]   ..$ homogeneous     : NULL
[17:46:32.167]   ..$ rscript_args    : NULL
[17:46:32.167]   ..$ rscript_envs    : NULL
[17:46:32.167]   ..$ rscript_libs    : NULL
[17:46:32.167]   ..$ rscript_startup : NULL
[17:46:32.167]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:32.167]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:32.167]   ..$ methods         : logi TRUE
[17:46:32.167]   ..$ socketOptions   : chr "no-delay"
[17:46:32.167]   ..$ useXDR          : logi FALSE
[17:46:32.167]   ..$ outfile         : chr "/dev/null"
[17:46:32.167]   ..$ renice          : int NA
[17:46:32.167]   ..$ rshcmd          : NULL
[17:46:32.167]   ..$ user            : NULL
[17:46:32.167]   ..$ revtunnel       : logi NA
[17:46:32.167]   ..$ rshlogfile      : NULL
[17:46:32.167]   ..$ rshopts         : NULL
[17:46:32.167]   ..$ rank            : int 1
[17:46:32.167]   ..$ manual          : logi FALSE
[17:46:32.167]   ..$ dryrun          : logi FALSE
[17:46:32.167]   ..$ quiet           : logi FALSE
[17:46:32.167]   ..$ setup_strategy  : chr "parallel"
[17:46:32.167]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:32.183] [local output] System call to launch all workers:
[17:46:32.183] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp1ir5gT/worker.rank=1.parallelly.parent=40640.9ec0571650d9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11480 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:32.183] [local output] Starting PSOCK main server
[17:46:32.189] [local output] Workers launched
[17:46:32.189] [local output] Waiting for workers to connect back
[17:46:32.189]  - [local output] 0 workers out of 2 ready
[17:46:32.427]  - [local output] 0 workers out of 2 ready
[17:46:32.428]  - [local output] 1 workers out of 2 ready
[17:46:32.429]  - [local output] 1 workers out of 2 ready
[17:46:32.430]  - [local output] 2 workers out of 2 ready
[17:46:32.430] [local output] Launching of workers completed
[17:46:32.430] [local output] Collecting session information from workers
[17:46:32.431] [local output]  - Worker #1 of 2
[17:46:32.431] [local output]  - Worker #2 of 2
[17:46:32.431] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562d991da900
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 37694b06-d304-4af9-3b2d-cdcb45dbd068
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:32.443] Packages needed by the future expression (n = 0): <none>
[17:46:32.444] Packages needed by future strategies (n = 0): <none>
[17:46:32.444] {
[17:46:32.444]     {
[17:46:32.444]         {
[17:46:32.444]             ...future.startTime <- base::Sys.time()
[17:46:32.444]             {
[17:46:32.444]                 {
[17:46:32.444]                   {
[17:46:32.444]                     {
[17:46:32.444]                       base::local({
[17:46:32.444]                         has_future <- base::requireNamespace("future", 
[17:46:32.444]                           quietly = TRUE)
[17:46:32.444]                         if (has_future) {
[17:46:32.444]                           ns <- base::getNamespace("future")
[17:46:32.444]                           version <- ns[[".package"]][["version"]]
[17:46:32.444]                           if (is.null(version)) 
[17:46:32.444]                             version <- utils::packageVersion("future")
[17:46:32.444]                         }
[17:46:32.444]                         else {
[17:46:32.444]                           version <- NULL
[17:46:32.444]                         }
[17:46:32.444]                         if (!has_future || version < "1.8.0") {
[17:46:32.444]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.444]                             "", base::R.version$version.string), 
[17:46:32.444]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:32.444]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.444]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.444]                               "release", "version")], collapse = " "), 
[17:46:32.444]                             hostname = base::Sys.info()[["nodename"]])
[17:46:32.444]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.444]                             info)
[17:46:32.444]                           info <- base::paste(info, collapse = "; ")
[17:46:32.444]                           if (!has_future) {
[17:46:32.444]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.444]                               info)
[17:46:32.444]                           }
[17:46:32.444]                           else {
[17:46:32.444]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.444]                               info, version)
[17:46:32.444]                           }
[17:46:32.444]                           base::stop(msg)
[17:46:32.444]                         }
[17:46:32.444]                       })
[17:46:32.444]                     }
[17:46:32.444]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:32.444]                     base::options(mc.cores = 1L)
[17:46:32.444]                   }
[17:46:32.444]                   ...future.strategy.old <- future::plan("list")
[17:46:32.444]                   options(future.plan = NULL)
[17:46:32.444]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.444]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.444]                 }
[17:46:32.444]                 ...future.workdir <- getwd()
[17:46:32.444]             }
[17:46:32.444]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.444]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.444]         }
[17:46:32.444]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.444]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.444]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.444]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.444]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.444]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.444]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.444]             base::names(...future.oldOptions))
[17:46:32.444]     }
[17:46:32.444]     if (FALSE) {
[17:46:32.444]     }
[17:46:32.444]     else {
[17:46:32.444]         if (TRUE) {
[17:46:32.444]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.444]                 open = "w")
[17:46:32.444]         }
[17:46:32.444]         else {
[17:46:32.444]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.444]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.444]         }
[17:46:32.444]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.444]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.444]             base::sink(type = "output", split = FALSE)
[17:46:32.444]             base::close(...future.stdout)
[17:46:32.444]         }, add = TRUE)
[17:46:32.444]     }
[17:46:32.444]     ...future.frame <- base::sys.nframe()
[17:46:32.444]     ...future.conditions <- base::list()
[17:46:32.444]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.444]     if (FALSE) {
[17:46:32.444]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.444]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.444]     }
[17:46:32.444]     ...future.result <- base::tryCatch({
[17:46:32.444]         base::withCallingHandlers({
[17:46:32.444]             ...future.value <- base::withVisible(base::local({
[17:46:32.444]                 ...future.makeSendCondition <- base::local({
[17:46:32.444]                   sendCondition <- NULL
[17:46:32.444]                   function(frame = 1L) {
[17:46:32.444]                     if (is.function(sendCondition)) 
[17:46:32.444]                       return(sendCondition)
[17:46:32.444]                     ns <- getNamespace("parallel")
[17:46:32.444]                     if (exists("sendData", mode = "function", 
[17:46:32.444]                       envir = ns)) {
[17:46:32.444]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:32.444]                         envir = ns)
[17:46:32.444]                       envir <- sys.frame(frame)
[17:46:32.444]                       master <- NULL
[17:46:32.444]                       while (!identical(envir, .GlobalEnv) && 
[17:46:32.444]                         !identical(envir, emptyenv())) {
[17:46:32.444]                         if (exists("master", mode = "list", envir = envir, 
[17:46:32.444]                           inherits = FALSE)) {
[17:46:32.444]                           master <- get("master", mode = "list", 
[17:46:32.444]                             envir = envir, inherits = FALSE)
[17:46:32.444]                           if (inherits(master, c("SOCKnode", 
[17:46:32.444]                             "SOCK0node"))) {
[17:46:32.444]                             sendCondition <<- function(cond) {
[17:46:32.444]                               data <- list(type = "VALUE", value = cond, 
[17:46:32.444]                                 success = TRUE)
[17:46:32.444]                               parallel_sendData(master, data)
[17:46:32.444]                             }
[17:46:32.444]                             return(sendCondition)
[17:46:32.444]                           }
[17:46:32.444]                         }
[17:46:32.444]                         frame <- frame + 1L
[17:46:32.444]                         envir <- sys.frame(frame)
[17:46:32.444]                       }
[17:46:32.444]                     }
[17:46:32.444]                     sendCondition <<- function(cond) NULL
[17:46:32.444]                   }
[17:46:32.444]                 })
[17:46:32.444]                 withCallingHandlers({
[17:46:32.444]                   {
[17:46:32.444]                     42L
[17:46:32.444]                   }
[17:46:32.444]                 }, immediateCondition = function(cond) {
[17:46:32.444]                   sendCondition <- ...future.makeSendCondition()
[17:46:32.444]                   sendCondition(cond)
[17:46:32.444]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.444]                   {
[17:46:32.444]                     inherits <- base::inherits
[17:46:32.444]                     invokeRestart <- base::invokeRestart
[17:46:32.444]                     is.null <- base::is.null
[17:46:32.444]                     muffled <- FALSE
[17:46:32.444]                     if (inherits(cond, "message")) {
[17:46:32.444]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:32.444]                       if (muffled) 
[17:46:32.444]                         invokeRestart("muffleMessage")
[17:46:32.444]                     }
[17:46:32.444]                     else if (inherits(cond, "warning")) {
[17:46:32.444]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:32.444]                       if (muffled) 
[17:46:32.444]                         invokeRestart("muffleWarning")
[17:46:32.444]                     }
[17:46:32.444]                     else if (inherits(cond, "condition")) {
[17:46:32.444]                       if (!is.null(pattern)) {
[17:46:32.444]                         computeRestarts <- base::computeRestarts
[17:46:32.444]                         grepl <- base::grepl
[17:46:32.444]                         restarts <- computeRestarts(cond)
[17:46:32.444]                         for (restart in restarts) {
[17:46:32.444]                           name <- restart$name
[17:46:32.444]                           if (is.null(name)) 
[17:46:32.444]                             next
[17:46:32.444]                           if (!grepl(pattern, name)) 
[17:46:32.444]                             next
[17:46:32.444]                           invokeRestart(restart)
[17:46:32.444]                           muffled <- TRUE
[17:46:32.444]                           break
[17:46:32.444]                         }
[17:46:32.444]                       }
[17:46:32.444]                     }
[17:46:32.444]                     invisible(muffled)
[17:46:32.444]                   }
[17:46:32.444]                   muffleCondition(cond)
[17:46:32.444]                 })
[17:46:32.444]             }))
[17:46:32.444]             future::FutureResult(value = ...future.value$value, 
[17:46:32.444]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.444]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.444]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.444]                     ...future.globalenv.names))
[17:46:32.444]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.444]         }, condition = base::local({
[17:46:32.444]             c <- base::c
[17:46:32.444]             inherits <- base::inherits
[17:46:32.444]             invokeRestart <- base::invokeRestart
[17:46:32.444]             length <- base::length
[17:46:32.444]             list <- base::list
[17:46:32.444]             seq.int <- base::seq.int
[17:46:32.444]             signalCondition <- base::signalCondition
[17:46:32.444]             sys.calls <- base::sys.calls
[17:46:32.444]             `[[` <- base::`[[`
[17:46:32.444]             `+` <- base::`+`
[17:46:32.444]             `<<-` <- base::`<<-`
[17:46:32.444]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.444]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.444]                   3L)]
[17:46:32.444]             }
[17:46:32.444]             function(cond) {
[17:46:32.444]                 is_error <- inherits(cond, "error")
[17:46:32.444]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.444]                   NULL)
[17:46:32.444]                 if (is_error) {
[17:46:32.444]                   sessionInformation <- function() {
[17:46:32.444]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.444]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.444]                       search = base::search(), system = base::Sys.info())
[17:46:32.444]                   }
[17:46:32.444]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.444]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.444]                     cond$call), session = sessionInformation(), 
[17:46:32.444]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.444]                   signalCondition(cond)
[17:46:32.444]                 }
[17:46:32.444]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.444]                 "immediateCondition"))) {
[17:46:32.444]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.444]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.444]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.444]                   if (TRUE && !signal) {
[17:46:32.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.444]                     {
[17:46:32.444]                       inherits <- base::inherits
[17:46:32.444]                       invokeRestart <- base::invokeRestart
[17:46:32.444]                       is.null <- base::is.null
[17:46:32.444]                       muffled <- FALSE
[17:46:32.444]                       if (inherits(cond, "message")) {
[17:46:32.444]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.444]                         if (muffled) 
[17:46:32.444]                           invokeRestart("muffleMessage")
[17:46:32.444]                       }
[17:46:32.444]                       else if (inherits(cond, "warning")) {
[17:46:32.444]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.444]                         if (muffled) 
[17:46:32.444]                           invokeRestart("muffleWarning")
[17:46:32.444]                       }
[17:46:32.444]                       else if (inherits(cond, "condition")) {
[17:46:32.444]                         if (!is.null(pattern)) {
[17:46:32.444]                           computeRestarts <- base::computeRestarts
[17:46:32.444]                           grepl <- base::grepl
[17:46:32.444]                           restarts <- computeRestarts(cond)
[17:46:32.444]                           for (restart in restarts) {
[17:46:32.444]                             name <- restart$name
[17:46:32.444]                             if (is.null(name)) 
[17:46:32.444]                               next
[17:46:32.444]                             if (!grepl(pattern, name)) 
[17:46:32.444]                               next
[17:46:32.444]                             invokeRestart(restart)
[17:46:32.444]                             muffled <- TRUE
[17:46:32.444]                             break
[17:46:32.444]                           }
[17:46:32.444]                         }
[17:46:32.444]                       }
[17:46:32.444]                       invisible(muffled)
[17:46:32.444]                     }
[17:46:32.444]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.444]                   }
[17:46:32.444]                 }
[17:46:32.444]                 else {
[17:46:32.444]                   if (TRUE) {
[17:46:32.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.444]                     {
[17:46:32.444]                       inherits <- base::inherits
[17:46:32.444]                       invokeRestart <- base::invokeRestart
[17:46:32.444]                       is.null <- base::is.null
[17:46:32.444]                       muffled <- FALSE
[17:46:32.444]                       if (inherits(cond, "message")) {
[17:46:32.444]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.444]                         if (muffled) 
[17:46:32.444]                           invokeRestart("muffleMessage")
[17:46:32.444]                       }
[17:46:32.444]                       else if (inherits(cond, "warning")) {
[17:46:32.444]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.444]                         if (muffled) 
[17:46:32.444]                           invokeRestart("muffleWarning")
[17:46:32.444]                       }
[17:46:32.444]                       else if (inherits(cond, "condition")) {
[17:46:32.444]                         if (!is.null(pattern)) {
[17:46:32.444]                           computeRestarts <- base::computeRestarts
[17:46:32.444]                           grepl <- base::grepl
[17:46:32.444]                           restarts <- computeRestarts(cond)
[17:46:32.444]                           for (restart in restarts) {
[17:46:32.444]                             name <- restart$name
[17:46:32.444]                             if (is.null(name)) 
[17:46:32.444]                               next
[17:46:32.444]                             if (!grepl(pattern, name)) 
[17:46:32.444]                               next
[17:46:32.444]                             invokeRestart(restart)
[17:46:32.444]                             muffled <- TRUE
[17:46:32.444]                             break
[17:46:32.444]                           }
[17:46:32.444]                         }
[17:46:32.444]                       }
[17:46:32.444]                       invisible(muffled)
[17:46:32.444]                     }
[17:46:32.444]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.444]                   }
[17:46:32.444]                 }
[17:46:32.444]             }
[17:46:32.444]         }))
[17:46:32.444]     }, error = function(ex) {
[17:46:32.444]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.444]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.444]                 ...future.rng), started = ...future.startTime, 
[17:46:32.444]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.444]             version = "1.8"), class = "FutureResult")
[17:46:32.444]     }, finally = {
[17:46:32.444]         if (!identical(...future.workdir, getwd())) 
[17:46:32.444]             setwd(...future.workdir)
[17:46:32.444]         {
[17:46:32.444]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.444]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.444]             }
[17:46:32.444]             base::options(...future.oldOptions)
[17:46:32.444]             if (.Platform$OS.type == "windows") {
[17:46:32.444]                 old_names <- names(...future.oldEnvVars)
[17:46:32.444]                 envs <- base::Sys.getenv()
[17:46:32.444]                 names <- names(envs)
[17:46:32.444]                 common <- intersect(names, old_names)
[17:46:32.444]                 added <- setdiff(names, old_names)
[17:46:32.444]                 removed <- setdiff(old_names, names)
[17:46:32.444]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.444]                   envs[common]]
[17:46:32.444]                 NAMES <- toupper(changed)
[17:46:32.444]                 args <- list()
[17:46:32.444]                 for (kk in seq_along(NAMES)) {
[17:46:32.444]                   name <- changed[[kk]]
[17:46:32.444]                   NAME <- NAMES[[kk]]
[17:46:32.444]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.444]                     next
[17:46:32.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.444]                 }
[17:46:32.444]                 NAMES <- toupper(added)
[17:46:32.444]                 for (kk in seq_along(NAMES)) {
[17:46:32.444]                   name <- added[[kk]]
[17:46:32.444]                   NAME <- NAMES[[kk]]
[17:46:32.444]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.444]                     next
[17:46:32.444]                   args[[name]] <- ""
[17:46:32.444]                 }
[17:46:32.444]                 NAMES <- toupper(removed)
[17:46:32.444]                 for (kk in seq_along(NAMES)) {
[17:46:32.444]                   name <- removed[[kk]]
[17:46:32.444]                   NAME <- NAMES[[kk]]
[17:46:32.444]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.444]                     next
[17:46:32.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.444]                 }
[17:46:32.444]                 if (length(args) > 0) 
[17:46:32.444]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.444]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.444]             }
[17:46:32.444]             else {
[17:46:32.444]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.444]             }
[17:46:32.444]             {
[17:46:32.444]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.444]                   0L) {
[17:46:32.444]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.444]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.444]                   base::options(opts)
[17:46:32.444]                 }
[17:46:32.444]                 {
[17:46:32.444]                   {
[17:46:32.444]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:32.444]                     NULL
[17:46:32.444]                   }
[17:46:32.444]                   options(future.plan = NULL)
[17:46:32.444]                   if (is.na(NA_character_)) 
[17:46:32.444]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.444]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.444]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.444]                     .init = FALSE)
[17:46:32.444]                 }
[17:46:32.444]             }
[17:46:32.444]         }
[17:46:32.444]     })
[17:46:32.444]     if (TRUE) {
[17:46:32.444]         base::sink(type = "output", split = FALSE)
[17:46:32.444]         if (TRUE) {
[17:46:32.444]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.444]         }
[17:46:32.444]         else {
[17:46:32.444]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.444]         }
[17:46:32.444]         base::close(...future.stdout)
[17:46:32.444]         ...future.stdout <- NULL
[17:46:32.444]     }
[17:46:32.444]     ...future.result$conditions <- ...future.conditions
[17:46:32.444]     ...future.result$finished <- base::Sys.time()
[17:46:32.444]     ...future.result
[17:46:32.444] }
[17:46:32.497] MultisessionFuture started
[17:46:32.497] result() for ClusterFuture ...
[17:46:32.498] receiveMessageFromWorker() for ClusterFuture ...
[17:46:32.498] - Validating connection of MultisessionFuture
[17:46:32.529] - received message: FutureResult
[17:46:32.530] - Received FutureResult
[17:46:32.532] - Erased future from FutureRegistry
[17:46:32.532] result() for ClusterFuture ...
[17:46:32.532] - result already collected: FutureResult
[17:46:32.533] result() for ClusterFuture ... done
[17:46:32.533] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:32.533] result() for ClusterFuture ... done
[17:46:32.533] result() for ClusterFuture ...
[17:46:32.533] - result already collected: FutureResult
[17:46:32.533] result() for ClusterFuture ... done
[1] 42
[17:46:32.534] getGlobalsAndPackages() ...
[17:46:32.534] 
[17:46:32.535] - globals: [0] <none>
[17:46:32.535] getGlobalsAndPackages() ... DONE
[17:46:32.546] Packages needed by the future expression (n = 0): <none>
[17:46:32.546] Packages needed by future strategies (n = 0): <none>
[17:46:32.546] {
[17:46:32.546]     {
[17:46:32.546]         {
[17:46:32.546]             ...future.startTime <- base::Sys.time()
[17:46:32.546]             {
[17:46:32.546]                 {
[17:46:32.546]                   {
[17:46:32.546]                     {
[17:46:32.546]                       base::local({
[17:46:32.546]                         has_future <- base::requireNamespace("future", 
[17:46:32.546]                           quietly = TRUE)
[17:46:32.546]                         if (has_future) {
[17:46:32.546]                           ns <- base::getNamespace("future")
[17:46:32.546]                           version <- ns[[".package"]][["version"]]
[17:46:32.546]                           if (is.null(version)) 
[17:46:32.546]                             version <- utils::packageVersion("future")
[17:46:32.546]                         }
[17:46:32.546]                         else {
[17:46:32.546]                           version <- NULL
[17:46:32.546]                         }
[17:46:32.546]                         if (!has_future || version < "1.8.0") {
[17:46:32.546]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.546]                             "", base::R.version$version.string), 
[17:46:32.546]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:32.546]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.546]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.546]                               "release", "version")], collapse = " "), 
[17:46:32.546]                             hostname = base::Sys.info()[["nodename"]])
[17:46:32.546]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.546]                             info)
[17:46:32.546]                           info <- base::paste(info, collapse = "; ")
[17:46:32.546]                           if (!has_future) {
[17:46:32.546]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.546]                               info)
[17:46:32.546]                           }
[17:46:32.546]                           else {
[17:46:32.546]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.546]                               info, version)
[17:46:32.546]                           }
[17:46:32.546]                           base::stop(msg)
[17:46:32.546]                         }
[17:46:32.546]                       })
[17:46:32.546]                     }
[17:46:32.546]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:32.546]                     base::options(mc.cores = 1L)
[17:46:32.546]                   }
[17:46:32.546]                   ...future.strategy.old <- future::plan("list")
[17:46:32.546]                   options(future.plan = NULL)
[17:46:32.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.546]                 }
[17:46:32.546]                 ...future.workdir <- getwd()
[17:46:32.546]             }
[17:46:32.546]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.546]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.546]         }
[17:46:32.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.546]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.546]             base::names(...future.oldOptions))
[17:46:32.546]     }
[17:46:32.546]     if (FALSE) {
[17:46:32.546]     }
[17:46:32.546]     else {
[17:46:32.546]         if (TRUE) {
[17:46:32.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.546]                 open = "w")
[17:46:32.546]         }
[17:46:32.546]         else {
[17:46:32.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.546]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.546]         }
[17:46:32.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.546]             base::sink(type = "output", split = FALSE)
[17:46:32.546]             base::close(...future.stdout)
[17:46:32.546]         }, add = TRUE)
[17:46:32.546]     }
[17:46:32.546]     ...future.frame <- base::sys.nframe()
[17:46:32.546]     ...future.conditions <- base::list()
[17:46:32.546]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.546]     if (FALSE) {
[17:46:32.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.546]     }
[17:46:32.546]     ...future.result <- base::tryCatch({
[17:46:32.546]         base::withCallingHandlers({
[17:46:32.546]             ...future.value <- base::withVisible(base::local({
[17:46:32.546]                 ...future.makeSendCondition <- base::local({
[17:46:32.546]                   sendCondition <- NULL
[17:46:32.546]                   function(frame = 1L) {
[17:46:32.546]                     if (is.function(sendCondition)) 
[17:46:32.546]                       return(sendCondition)
[17:46:32.546]                     ns <- getNamespace("parallel")
[17:46:32.546]                     if (exists("sendData", mode = "function", 
[17:46:32.546]                       envir = ns)) {
[17:46:32.546]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:32.546]                         envir = ns)
[17:46:32.546]                       envir <- sys.frame(frame)
[17:46:32.546]                       master <- NULL
[17:46:32.546]                       while (!identical(envir, .GlobalEnv) && 
[17:46:32.546]                         !identical(envir, emptyenv())) {
[17:46:32.546]                         if (exists("master", mode = "list", envir = envir, 
[17:46:32.546]                           inherits = FALSE)) {
[17:46:32.546]                           master <- get("master", mode = "list", 
[17:46:32.546]                             envir = envir, inherits = FALSE)
[17:46:32.546]                           if (inherits(master, c("SOCKnode", 
[17:46:32.546]                             "SOCK0node"))) {
[17:46:32.546]                             sendCondition <<- function(cond) {
[17:46:32.546]                               data <- list(type = "VALUE", value = cond, 
[17:46:32.546]                                 success = TRUE)
[17:46:32.546]                               parallel_sendData(master, data)
[17:46:32.546]                             }
[17:46:32.546]                             return(sendCondition)
[17:46:32.546]                           }
[17:46:32.546]                         }
[17:46:32.546]                         frame <- frame + 1L
[17:46:32.546]                         envir <- sys.frame(frame)
[17:46:32.546]                       }
[17:46:32.546]                     }
[17:46:32.546]                     sendCondition <<- function(cond) NULL
[17:46:32.546]                   }
[17:46:32.546]                 })
[17:46:32.546]                 withCallingHandlers({
[17:46:32.546]                   {
[17:46:32.546]                     42L
[17:46:32.546]                   }
[17:46:32.546]                 }, immediateCondition = function(cond) {
[17:46:32.546]                   sendCondition <- ...future.makeSendCondition()
[17:46:32.546]                   sendCondition(cond)
[17:46:32.546]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.546]                   {
[17:46:32.546]                     inherits <- base::inherits
[17:46:32.546]                     invokeRestart <- base::invokeRestart
[17:46:32.546]                     is.null <- base::is.null
[17:46:32.546]                     muffled <- FALSE
[17:46:32.546]                     if (inherits(cond, "message")) {
[17:46:32.546]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:32.546]                       if (muffled) 
[17:46:32.546]                         invokeRestart("muffleMessage")
[17:46:32.546]                     }
[17:46:32.546]                     else if (inherits(cond, "warning")) {
[17:46:32.546]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:32.546]                       if (muffled) 
[17:46:32.546]                         invokeRestart("muffleWarning")
[17:46:32.546]                     }
[17:46:32.546]                     else if (inherits(cond, "condition")) {
[17:46:32.546]                       if (!is.null(pattern)) {
[17:46:32.546]                         computeRestarts <- base::computeRestarts
[17:46:32.546]                         grepl <- base::grepl
[17:46:32.546]                         restarts <- computeRestarts(cond)
[17:46:32.546]                         for (restart in restarts) {
[17:46:32.546]                           name <- restart$name
[17:46:32.546]                           if (is.null(name)) 
[17:46:32.546]                             next
[17:46:32.546]                           if (!grepl(pattern, name)) 
[17:46:32.546]                             next
[17:46:32.546]                           invokeRestart(restart)
[17:46:32.546]                           muffled <- TRUE
[17:46:32.546]                           break
[17:46:32.546]                         }
[17:46:32.546]                       }
[17:46:32.546]                     }
[17:46:32.546]                     invisible(muffled)
[17:46:32.546]                   }
[17:46:32.546]                   muffleCondition(cond)
[17:46:32.546]                 })
[17:46:32.546]             }))
[17:46:32.546]             future::FutureResult(value = ...future.value$value, 
[17:46:32.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.546]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.546]                     ...future.globalenv.names))
[17:46:32.546]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.546]         }, condition = base::local({
[17:46:32.546]             c <- base::c
[17:46:32.546]             inherits <- base::inherits
[17:46:32.546]             invokeRestart <- base::invokeRestart
[17:46:32.546]             length <- base::length
[17:46:32.546]             list <- base::list
[17:46:32.546]             seq.int <- base::seq.int
[17:46:32.546]             signalCondition <- base::signalCondition
[17:46:32.546]             sys.calls <- base::sys.calls
[17:46:32.546]             `[[` <- base::`[[`
[17:46:32.546]             `+` <- base::`+`
[17:46:32.546]             `<<-` <- base::`<<-`
[17:46:32.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.546]                   3L)]
[17:46:32.546]             }
[17:46:32.546]             function(cond) {
[17:46:32.546]                 is_error <- inherits(cond, "error")
[17:46:32.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.546]                   NULL)
[17:46:32.546]                 if (is_error) {
[17:46:32.546]                   sessionInformation <- function() {
[17:46:32.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.546]                       search = base::search(), system = base::Sys.info())
[17:46:32.546]                   }
[17:46:32.546]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.546]                     cond$call), session = sessionInformation(), 
[17:46:32.546]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.546]                   signalCondition(cond)
[17:46:32.546]                 }
[17:46:32.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.546]                 "immediateCondition"))) {
[17:46:32.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.546]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.546]                   if (TRUE && !signal) {
[17:46:32.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.546]                     {
[17:46:32.546]                       inherits <- base::inherits
[17:46:32.546]                       invokeRestart <- base::invokeRestart
[17:46:32.546]                       is.null <- base::is.null
[17:46:32.546]                       muffled <- FALSE
[17:46:32.546]                       if (inherits(cond, "message")) {
[17:46:32.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.546]                         if (muffled) 
[17:46:32.546]                           invokeRestart("muffleMessage")
[17:46:32.546]                       }
[17:46:32.546]                       else if (inherits(cond, "warning")) {
[17:46:32.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.546]                         if (muffled) 
[17:46:32.546]                           invokeRestart("muffleWarning")
[17:46:32.546]                       }
[17:46:32.546]                       else if (inherits(cond, "condition")) {
[17:46:32.546]                         if (!is.null(pattern)) {
[17:46:32.546]                           computeRestarts <- base::computeRestarts
[17:46:32.546]                           grepl <- base::grepl
[17:46:32.546]                           restarts <- computeRestarts(cond)
[17:46:32.546]                           for (restart in restarts) {
[17:46:32.546]                             name <- restart$name
[17:46:32.546]                             if (is.null(name)) 
[17:46:32.546]                               next
[17:46:32.546]                             if (!grepl(pattern, name)) 
[17:46:32.546]                               next
[17:46:32.546]                             invokeRestart(restart)
[17:46:32.546]                             muffled <- TRUE
[17:46:32.546]                             break
[17:46:32.546]                           }
[17:46:32.546]                         }
[17:46:32.546]                       }
[17:46:32.546]                       invisible(muffled)
[17:46:32.546]                     }
[17:46:32.546]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.546]                   }
[17:46:32.546]                 }
[17:46:32.546]                 else {
[17:46:32.546]                   if (TRUE) {
[17:46:32.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.546]                     {
[17:46:32.546]                       inherits <- base::inherits
[17:46:32.546]                       invokeRestart <- base::invokeRestart
[17:46:32.546]                       is.null <- base::is.null
[17:46:32.546]                       muffled <- FALSE
[17:46:32.546]                       if (inherits(cond, "message")) {
[17:46:32.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.546]                         if (muffled) 
[17:46:32.546]                           invokeRestart("muffleMessage")
[17:46:32.546]                       }
[17:46:32.546]                       else if (inherits(cond, "warning")) {
[17:46:32.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.546]                         if (muffled) 
[17:46:32.546]                           invokeRestart("muffleWarning")
[17:46:32.546]                       }
[17:46:32.546]                       else if (inherits(cond, "condition")) {
[17:46:32.546]                         if (!is.null(pattern)) {
[17:46:32.546]                           computeRestarts <- base::computeRestarts
[17:46:32.546]                           grepl <- base::grepl
[17:46:32.546]                           restarts <- computeRestarts(cond)
[17:46:32.546]                           for (restart in restarts) {
[17:46:32.546]                             name <- restart$name
[17:46:32.546]                             if (is.null(name)) 
[17:46:32.546]                               next
[17:46:32.546]                             if (!grepl(pattern, name)) 
[17:46:32.546]                               next
[17:46:32.546]                             invokeRestart(restart)
[17:46:32.546]                             muffled <- TRUE
[17:46:32.546]                             break
[17:46:32.546]                           }
[17:46:32.546]                         }
[17:46:32.546]                       }
[17:46:32.546]                       invisible(muffled)
[17:46:32.546]                     }
[17:46:32.546]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.546]                   }
[17:46:32.546]                 }
[17:46:32.546]             }
[17:46:32.546]         }))
[17:46:32.546]     }, error = function(ex) {
[17:46:32.546]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.546]                 ...future.rng), started = ...future.startTime, 
[17:46:32.546]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.546]             version = "1.8"), class = "FutureResult")
[17:46:32.546]     }, finally = {
[17:46:32.546]         if (!identical(...future.workdir, getwd())) 
[17:46:32.546]             setwd(...future.workdir)
[17:46:32.546]         {
[17:46:32.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.546]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.546]             }
[17:46:32.546]             base::options(...future.oldOptions)
[17:46:32.546]             if (.Platform$OS.type == "windows") {
[17:46:32.546]                 old_names <- names(...future.oldEnvVars)
[17:46:32.546]                 envs <- base::Sys.getenv()
[17:46:32.546]                 names <- names(envs)
[17:46:32.546]                 common <- intersect(names, old_names)
[17:46:32.546]                 added <- setdiff(names, old_names)
[17:46:32.546]                 removed <- setdiff(old_names, names)
[17:46:32.546]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.546]                   envs[common]]
[17:46:32.546]                 NAMES <- toupper(changed)
[17:46:32.546]                 args <- list()
[17:46:32.546]                 for (kk in seq_along(NAMES)) {
[17:46:32.546]                   name <- changed[[kk]]
[17:46:32.546]                   NAME <- NAMES[[kk]]
[17:46:32.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.546]                     next
[17:46:32.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.546]                 }
[17:46:32.546]                 NAMES <- toupper(added)
[17:46:32.546]                 for (kk in seq_along(NAMES)) {
[17:46:32.546]                   name <- added[[kk]]
[17:46:32.546]                   NAME <- NAMES[[kk]]
[17:46:32.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.546]                     next
[17:46:32.546]                   args[[name]] <- ""
[17:46:32.546]                 }
[17:46:32.546]                 NAMES <- toupper(removed)
[17:46:32.546]                 for (kk in seq_along(NAMES)) {
[17:46:32.546]                   name <- removed[[kk]]
[17:46:32.546]                   NAME <- NAMES[[kk]]
[17:46:32.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.546]                     next
[17:46:32.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.546]                 }
[17:46:32.546]                 if (length(args) > 0) 
[17:46:32.546]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.546]             }
[17:46:32.546]             else {
[17:46:32.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.546]             }
[17:46:32.546]             {
[17:46:32.546]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.546]                   0L) {
[17:46:32.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.546]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.546]                   base::options(opts)
[17:46:32.546]                 }
[17:46:32.546]                 {
[17:46:32.546]                   {
[17:46:32.546]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:32.546]                     NULL
[17:46:32.546]                   }
[17:46:32.546]                   options(future.plan = NULL)
[17:46:32.546]                   if (is.na(NA_character_)) 
[17:46:32.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.546]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.546]                     .init = FALSE)
[17:46:32.546]                 }
[17:46:32.546]             }
[17:46:32.546]         }
[17:46:32.546]     })
[17:46:32.546]     if (TRUE) {
[17:46:32.546]         base::sink(type = "output", split = FALSE)
[17:46:32.546]         if (TRUE) {
[17:46:32.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.546]         }
[17:46:32.546]         else {
[17:46:32.546]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.546]         }
[17:46:32.546]         base::close(...future.stdout)
[17:46:32.546]         ...future.stdout <- NULL
[17:46:32.546]     }
[17:46:32.546]     ...future.result$conditions <- ...future.conditions
[17:46:32.546]     ...future.result$finished <- base::Sys.time()
[17:46:32.546]     ...future.result
[17:46:32.546] }
[17:46:32.550] MultisessionFuture started
[17:46:32.550] result() for ClusterFuture ...
[17:46:32.550] receiveMessageFromWorker() for ClusterFuture ...
[17:46:32.550] - Validating connection of MultisessionFuture
[17:46:32.552] - received message: FutureResult
[17:46:32.552] - Received FutureResult
[17:46:32.552] - Erased future from FutureRegistry
[17:46:32.552] result() for ClusterFuture ...
[17:46:32.552] - result already collected: FutureResult
[17:46:32.552] result() for ClusterFuture ... done
[17:46:32.552] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:32.553] result() for ClusterFuture ... done
[17:46:32.553] result() for ClusterFuture ...
[17:46:32.553] - result already collected: FutureResult
[17:46:32.553] result() for ClusterFuture ... done
[1] 42
[17:46:32.553] getGlobalsAndPackages() ...
[17:46:32.553] Searching for globals...
[17:46:32.554] - globals found: [1] ‘{’
[17:46:32.554] Searching for globals ... DONE
[17:46:32.554] Resolving globals: FALSE
[17:46:32.555] 
[17:46:32.555] 
[17:46:32.555] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 37694b06-d304-4af9-3b2d-cdcb45dbd068
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:32.556] Packages needed by the future expression (n = 0): <none>
[17:46:32.556] Packages needed by future strategies (n = 0): <none>
[17:46:32.556] {
[17:46:32.556]     {
[17:46:32.556]         {
[17:46:32.556]             ...future.startTime <- base::Sys.time()
[17:46:32.556]             {
[17:46:32.556]                 {
[17:46:32.556]                   {
[17:46:32.556]                     base::local({
[17:46:32.556]                       has_future <- base::requireNamespace("future", 
[17:46:32.556]                         quietly = TRUE)
[17:46:32.556]                       if (has_future) {
[17:46:32.556]                         ns <- base::getNamespace("future")
[17:46:32.556]                         version <- ns[[".package"]][["version"]]
[17:46:32.556]                         if (is.null(version)) 
[17:46:32.556]                           version <- utils::packageVersion("future")
[17:46:32.556]                       }
[17:46:32.556]                       else {
[17:46:32.556]                         version <- NULL
[17:46:32.556]                       }
[17:46:32.556]                       if (!has_future || version < "1.8.0") {
[17:46:32.556]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.556]                           "", base::R.version$version.string), 
[17:46:32.556]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.556]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.556]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.556]                             "release", "version")], collapse = " "), 
[17:46:32.556]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.556]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.556]                           info)
[17:46:32.556]                         info <- base::paste(info, collapse = "; ")
[17:46:32.556]                         if (!has_future) {
[17:46:32.556]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.556]                             info)
[17:46:32.556]                         }
[17:46:32.556]                         else {
[17:46:32.556]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.556]                             info, version)
[17:46:32.556]                         }
[17:46:32.556]                         base::stop(msg)
[17:46:32.556]                       }
[17:46:32.556]                     })
[17:46:32.556]                   }
[17:46:32.556]                   ...future.strategy.old <- future::plan("list")
[17:46:32.556]                   options(future.plan = NULL)
[17:46:32.556]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.556]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.556]                 }
[17:46:32.556]                 ...future.workdir <- getwd()
[17:46:32.556]             }
[17:46:32.556]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.556]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.556]         }
[17:46:32.556]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.556]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.556]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.556]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.556]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.556]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.556]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.556]             base::names(...future.oldOptions))
[17:46:32.556]     }
[17:46:32.556]     if (FALSE) {
[17:46:32.556]     }
[17:46:32.556]     else {
[17:46:32.556]         if (TRUE) {
[17:46:32.556]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.556]                 open = "w")
[17:46:32.556]         }
[17:46:32.556]         else {
[17:46:32.556]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.556]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.556]         }
[17:46:32.556]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.556]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.556]             base::sink(type = "output", split = FALSE)
[17:46:32.556]             base::close(...future.stdout)
[17:46:32.556]         }, add = TRUE)
[17:46:32.556]     }
[17:46:32.556]     ...future.frame <- base::sys.nframe()
[17:46:32.556]     ...future.conditions <- base::list()
[17:46:32.556]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.556]     if (FALSE) {
[17:46:32.556]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.556]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.556]     }
[17:46:32.556]     ...future.result <- base::tryCatch({
[17:46:32.556]         base::withCallingHandlers({
[17:46:32.556]             ...future.value <- base::withVisible(base::local({
[17:46:32.556]                 42L
[17:46:32.556]             }))
[17:46:32.556]             future::FutureResult(value = ...future.value$value, 
[17:46:32.556]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.556]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.556]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.556]                     ...future.globalenv.names))
[17:46:32.556]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.556]         }, condition = base::local({
[17:46:32.556]             c <- base::c
[17:46:32.556]             inherits <- base::inherits
[17:46:32.556]             invokeRestart <- base::invokeRestart
[17:46:32.556]             length <- base::length
[17:46:32.556]             list <- base::list
[17:46:32.556]             seq.int <- base::seq.int
[17:46:32.556]             signalCondition <- base::signalCondition
[17:46:32.556]             sys.calls <- base::sys.calls
[17:46:32.556]             `[[` <- base::`[[`
[17:46:32.556]             `+` <- base::`+`
[17:46:32.556]             `<<-` <- base::`<<-`
[17:46:32.556]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.556]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.556]                   3L)]
[17:46:32.556]             }
[17:46:32.556]             function(cond) {
[17:46:32.556]                 is_error <- inherits(cond, "error")
[17:46:32.556]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.556]                   NULL)
[17:46:32.556]                 if (is_error) {
[17:46:32.556]                   sessionInformation <- function() {
[17:46:32.556]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.556]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.556]                       search = base::search(), system = base::Sys.info())
[17:46:32.556]                   }
[17:46:32.556]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.556]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.556]                     cond$call), session = sessionInformation(), 
[17:46:32.556]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.556]                   signalCondition(cond)
[17:46:32.556]                 }
[17:46:32.556]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.556]                 "immediateCondition"))) {
[17:46:32.556]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.556]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.556]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.556]                   if (TRUE && !signal) {
[17:46:32.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.556]                     {
[17:46:32.556]                       inherits <- base::inherits
[17:46:32.556]                       invokeRestart <- base::invokeRestart
[17:46:32.556]                       is.null <- base::is.null
[17:46:32.556]                       muffled <- FALSE
[17:46:32.556]                       if (inherits(cond, "message")) {
[17:46:32.556]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.556]                         if (muffled) 
[17:46:32.556]                           invokeRestart("muffleMessage")
[17:46:32.556]                       }
[17:46:32.556]                       else if (inherits(cond, "warning")) {
[17:46:32.556]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.556]                         if (muffled) 
[17:46:32.556]                           invokeRestart("muffleWarning")
[17:46:32.556]                       }
[17:46:32.556]                       else if (inherits(cond, "condition")) {
[17:46:32.556]                         if (!is.null(pattern)) {
[17:46:32.556]                           computeRestarts <- base::computeRestarts
[17:46:32.556]                           grepl <- base::grepl
[17:46:32.556]                           restarts <- computeRestarts(cond)
[17:46:32.556]                           for (restart in restarts) {
[17:46:32.556]                             name <- restart$name
[17:46:32.556]                             if (is.null(name)) 
[17:46:32.556]                               next
[17:46:32.556]                             if (!grepl(pattern, name)) 
[17:46:32.556]                               next
[17:46:32.556]                             invokeRestart(restart)
[17:46:32.556]                             muffled <- TRUE
[17:46:32.556]                             break
[17:46:32.556]                           }
[17:46:32.556]                         }
[17:46:32.556]                       }
[17:46:32.556]                       invisible(muffled)
[17:46:32.556]                     }
[17:46:32.556]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.556]                   }
[17:46:32.556]                 }
[17:46:32.556]                 else {
[17:46:32.556]                   if (TRUE) {
[17:46:32.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.556]                     {
[17:46:32.556]                       inherits <- base::inherits
[17:46:32.556]                       invokeRestart <- base::invokeRestart
[17:46:32.556]                       is.null <- base::is.null
[17:46:32.556]                       muffled <- FALSE
[17:46:32.556]                       if (inherits(cond, "message")) {
[17:46:32.556]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.556]                         if (muffled) 
[17:46:32.556]                           invokeRestart("muffleMessage")
[17:46:32.556]                       }
[17:46:32.556]                       else if (inherits(cond, "warning")) {
[17:46:32.556]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.556]                         if (muffled) 
[17:46:32.556]                           invokeRestart("muffleWarning")
[17:46:32.556]                       }
[17:46:32.556]                       else if (inherits(cond, "condition")) {
[17:46:32.556]                         if (!is.null(pattern)) {
[17:46:32.556]                           computeRestarts <- base::computeRestarts
[17:46:32.556]                           grepl <- base::grepl
[17:46:32.556]                           restarts <- computeRestarts(cond)
[17:46:32.556]                           for (restart in restarts) {
[17:46:32.556]                             name <- restart$name
[17:46:32.556]                             if (is.null(name)) 
[17:46:32.556]                               next
[17:46:32.556]                             if (!grepl(pattern, name)) 
[17:46:32.556]                               next
[17:46:32.556]                             invokeRestart(restart)
[17:46:32.556]                             muffled <- TRUE
[17:46:32.556]                             break
[17:46:32.556]                           }
[17:46:32.556]                         }
[17:46:32.556]                       }
[17:46:32.556]                       invisible(muffled)
[17:46:32.556]                     }
[17:46:32.556]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.556]                   }
[17:46:32.556]                 }
[17:46:32.556]             }
[17:46:32.556]         }))
[17:46:32.556]     }, error = function(ex) {
[17:46:32.556]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.556]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.556]                 ...future.rng), started = ...future.startTime, 
[17:46:32.556]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.556]             version = "1.8"), class = "FutureResult")
[17:46:32.556]     }, finally = {
[17:46:32.556]         if (!identical(...future.workdir, getwd())) 
[17:46:32.556]             setwd(...future.workdir)
[17:46:32.556]         {
[17:46:32.556]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.556]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.556]             }
[17:46:32.556]             base::options(...future.oldOptions)
[17:46:32.556]             if (.Platform$OS.type == "windows") {
[17:46:32.556]                 old_names <- names(...future.oldEnvVars)
[17:46:32.556]                 envs <- base::Sys.getenv()
[17:46:32.556]                 names <- names(envs)
[17:46:32.556]                 common <- intersect(names, old_names)
[17:46:32.556]                 added <- setdiff(names, old_names)
[17:46:32.556]                 removed <- setdiff(old_names, names)
[17:46:32.556]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.556]                   envs[common]]
[17:46:32.556]                 NAMES <- toupper(changed)
[17:46:32.556]                 args <- list()
[17:46:32.556]                 for (kk in seq_along(NAMES)) {
[17:46:32.556]                   name <- changed[[kk]]
[17:46:32.556]                   NAME <- NAMES[[kk]]
[17:46:32.556]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.556]                     next
[17:46:32.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.556]                 }
[17:46:32.556]                 NAMES <- toupper(added)
[17:46:32.556]                 for (kk in seq_along(NAMES)) {
[17:46:32.556]                   name <- added[[kk]]
[17:46:32.556]                   NAME <- NAMES[[kk]]
[17:46:32.556]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.556]                     next
[17:46:32.556]                   args[[name]] <- ""
[17:46:32.556]                 }
[17:46:32.556]                 NAMES <- toupper(removed)
[17:46:32.556]                 for (kk in seq_along(NAMES)) {
[17:46:32.556]                   name <- removed[[kk]]
[17:46:32.556]                   NAME <- NAMES[[kk]]
[17:46:32.556]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.556]                     next
[17:46:32.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.556]                 }
[17:46:32.556]                 if (length(args) > 0) 
[17:46:32.556]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.556]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.556]             }
[17:46:32.556]             else {
[17:46:32.556]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.556]             }
[17:46:32.556]             {
[17:46:32.556]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.556]                   0L) {
[17:46:32.556]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.556]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.556]                   base::options(opts)
[17:46:32.556]                 }
[17:46:32.556]                 {
[17:46:32.556]                   {
[17:46:32.556]                     NULL
[17:46:32.556]                     RNGkind("Mersenne-Twister")
[17:46:32.556]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.556]                       inherits = FALSE)
[17:46:32.556]                   }
[17:46:32.556]                   options(future.plan = NULL)
[17:46:32.556]                   if (is.na(NA_character_)) 
[17:46:32.556]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.556]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.556]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.556]                     .init = FALSE)
[17:46:32.556]                 }
[17:46:32.556]             }
[17:46:32.556]         }
[17:46:32.556]     })
[17:46:32.556]     if (TRUE) {
[17:46:32.556]         base::sink(type = "output", split = FALSE)
[17:46:32.556]         if (TRUE) {
[17:46:32.556]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.556]         }
[17:46:32.556]         else {
[17:46:32.556]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.556]         }
[17:46:32.556]         base::close(...future.stdout)
[17:46:32.556]         ...future.stdout <- NULL
[17:46:32.556]     }
[17:46:32.556]     ...future.result$conditions <- ...future.conditions
[17:46:32.556]     ...future.result$finished <- base::Sys.time()
[17:46:32.556]     ...future.result
[17:46:32.556] }
[17:46:32.558] plan(): Setting new future strategy stack:
[17:46:32.558] List of future strategies:
[17:46:32.558] 1. sequential:
[17:46:32.558]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.558]    - tweaked: FALSE
[17:46:32.558]    - call: NULL
[17:46:32.559] plan(): nbrOfWorkers() = 1
[17:46:32.560] plan(): Setting new future strategy stack:
[17:46:32.560] List of future strategies:
[17:46:32.560] 1. future:
[17:46:32.560]    - args: function (..., workers = "<NULL>")
[17:46:32.560]    - tweaked: FALSE
[17:46:32.560]    - call: plan(foo)
[17:46:32.561] plan(): nbrOfWorkers() = Inf
[17:46:32.561] SequentialFuture started (and completed)
[1] 42
[17:46:32.561] getGlobalsAndPackages() ...
[17:46:32.561] Searching for globals...
[17:46:32.562] - globals found: [1] ‘{’
[17:46:32.562] Searching for globals ... DONE
[17:46:32.562] Resolving globals: FALSE
[17:46:32.563] 
[17:46:32.563] 
[17:46:32.563] getGlobalsAndPackages() ... DONE
[17:46:32.563] Packages needed by the future expression (n = 0): <none>
[17:46:32.563] Packages needed by future strategies (n = 0): <none>
[17:46:32.564] {
[17:46:32.564]     {
[17:46:32.564]         {
[17:46:32.564]             ...future.startTime <- base::Sys.time()
[17:46:32.564]             {
[17:46:32.564]                 {
[17:46:32.564]                   {
[17:46:32.564]                     base::local({
[17:46:32.564]                       has_future <- base::requireNamespace("future", 
[17:46:32.564]                         quietly = TRUE)
[17:46:32.564]                       if (has_future) {
[17:46:32.564]                         ns <- base::getNamespace("future")
[17:46:32.564]                         version <- ns[[".package"]][["version"]]
[17:46:32.564]                         if (is.null(version)) 
[17:46:32.564]                           version <- utils::packageVersion("future")
[17:46:32.564]                       }
[17:46:32.564]                       else {
[17:46:32.564]                         version <- NULL
[17:46:32.564]                       }
[17:46:32.564]                       if (!has_future || version < "1.8.0") {
[17:46:32.564]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.564]                           "", base::R.version$version.string), 
[17:46:32.564]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:32.564]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.564]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.564]                             "release", "version")], collapse = " "), 
[17:46:32.564]                           hostname = base::Sys.info()[["nodename"]])
[17:46:32.564]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.564]                           info)
[17:46:32.564]                         info <- base::paste(info, collapse = "; ")
[17:46:32.564]                         if (!has_future) {
[17:46:32.564]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.564]                             info)
[17:46:32.564]                         }
[17:46:32.564]                         else {
[17:46:32.564]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.564]                             info, version)
[17:46:32.564]                         }
[17:46:32.564]                         base::stop(msg)
[17:46:32.564]                       }
[17:46:32.564]                     })
[17:46:32.564]                   }
[17:46:32.564]                   ...future.strategy.old <- future::plan("list")
[17:46:32.564]                   options(future.plan = NULL)
[17:46:32.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.564]                 }
[17:46:32.564]                 ...future.workdir <- getwd()
[17:46:32.564]             }
[17:46:32.564]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.564]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.564]         }
[17:46:32.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.564]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.564]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.564]             base::names(...future.oldOptions))
[17:46:32.564]     }
[17:46:32.564]     if (FALSE) {
[17:46:32.564]     }
[17:46:32.564]     else {
[17:46:32.564]         if (TRUE) {
[17:46:32.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.564]                 open = "w")
[17:46:32.564]         }
[17:46:32.564]         else {
[17:46:32.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.564]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.564]         }
[17:46:32.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.564]             base::sink(type = "output", split = FALSE)
[17:46:32.564]             base::close(...future.stdout)
[17:46:32.564]         }, add = TRUE)
[17:46:32.564]     }
[17:46:32.564]     ...future.frame <- base::sys.nframe()
[17:46:32.564]     ...future.conditions <- base::list()
[17:46:32.564]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.564]     if (FALSE) {
[17:46:32.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.564]     }
[17:46:32.564]     ...future.result <- base::tryCatch({
[17:46:32.564]         base::withCallingHandlers({
[17:46:32.564]             ...future.value <- base::withVisible(base::local({
[17:46:32.564]                 42L
[17:46:32.564]             }))
[17:46:32.564]             future::FutureResult(value = ...future.value$value, 
[17:46:32.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.564]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.564]                     ...future.globalenv.names))
[17:46:32.564]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.564]         }, condition = base::local({
[17:46:32.564]             c <- base::c
[17:46:32.564]             inherits <- base::inherits
[17:46:32.564]             invokeRestart <- base::invokeRestart
[17:46:32.564]             length <- base::length
[17:46:32.564]             list <- base::list
[17:46:32.564]             seq.int <- base::seq.int
[17:46:32.564]             signalCondition <- base::signalCondition
[17:46:32.564]             sys.calls <- base::sys.calls
[17:46:32.564]             `[[` <- base::`[[`
[17:46:32.564]             `+` <- base::`+`
[17:46:32.564]             `<<-` <- base::`<<-`
[17:46:32.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.564]                   3L)]
[17:46:32.564]             }
[17:46:32.564]             function(cond) {
[17:46:32.564]                 is_error <- inherits(cond, "error")
[17:46:32.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.564]                   NULL)
[17:46:32.564]                 if (is_error) {
[17:46:32.564]                   sessionInformation <- function() {
[17:46:32.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.564]                       search = base::search(), system = base::Sys.info())
[17:46:32.564]                   }
[17:46:32.564]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.564]                     cond$call), session = sessionInformation(), 
[17:46:32.564]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.564]                   signalCondition(cond)
[17:46:32.564]                 }
[17:46:32.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.564]                 "immediateCondition"))) {
[17:46:32.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.564]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.564]                   if (TRUE && !signal) {
[17:46:32.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.564]                     {
[17:46:32.564]                       inherits <- base::inherits
[17:46:32.564]                       invokeRestart <- base::invokeRestart
[17:46:32.564]                       is.null <- base::is.null
[17:46:32.564]                       muffled <- FALSE
[17:46:32.564]                       if (inherits(cond, "message")) {
[17:46:32.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.564]                         if (muffled) 
[17:46:32.564]                           invokeRestart("muffleMessage")
[17:46:32.564]                       }
[17:46:32.564]                       else if (inherits(cond, "warning")) {
[17:46:32.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.564]                         if (muffled) 
[17:46:32.564]                           invokeRestart("muffleWarning")
[17:46:32.564]                       }
[17:46:32.564]                       else if (inherits(cond, "condition")) {
[17:46:32.564]                         if (!is.null(pattern)) {
[17:46:32.564]                           computeRestarts <- base::computeRestarts
[17:46:32.564]                           grepl <- base::grepl
[17:46:32.564]                           restarts <- computeRestarts(cond)
[17:46:32.564]                           for (restart in restarts) {
[17:46:32.564]                             name <- restart$name
[17:46:32.564]                             if (is.null(name)) 
[17:46:32.564]                               next
[17:46:32.564]                             if (!grepl(pattern, name)) 
[17:46:32.564]                               next
[17:46:32.564]                             invokeRestart(restart)
[17:46:32.564]                             muffled <- TRUE
[17:46:32.564]                             break
[17:46:32.564]                           }
[17:46:32.564]                         }
[17:46:32.564]                       }
[17:46:32.564]                       invisible(muffled)
[17:46:32.564]                     }
[17:46:32.564]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.564]                   }
[17:46:32.564]                 }
[17:46:32.564]                 else {
[17:46:32.564]                   if (TRUE) {
[17:46:32.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.564]                     {
[17:46:32.564]                       inherits <- base::inherits
[17:46:32.564]                       invokeRestart <- base::invokeRestart
[17:46:32.564]                       is.null <- base::is.null
[17:46:32.564]                       muffled <- FALSE
[17:46:32.564]                       if (inherits(cond, "message")) {
[17:46:32.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.564]                         if (muffled) 
[17:46:32.564]                           invokeRestart("muffleMessage")
[17:46:32.564]                       }
[17:46:32.564]                       else if (inherits(cond, "warning")) {
[17:46:32.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.564]                         if (muffled) 
[17:46:32.564]                           invokeRestart("muffleWarning")
[17:46:32.564]                       }
[17:46:32.564]                       else if (inherits(cond, "condition")) {
[17:46:32.564]                         if (!is.null(pattern)) {
[17:46:32.564]                           computeRestarts <- base::computeRestarts
[17:46:32.564]                           grepl <- base::grepl
[17:46:32.564]                           restarts <- computeRestarts(cond)
[17:46:32.564]                           for (restart in restarts) {
[17:46:32.564]                             name <- restart$name
[17:46:32.564]                             if (is.null(name)) 
[17:46:32.564]                               next
[17:46:32.564]                             if (!grepl(pattern, name)) 
[17:46:32.564]                               next
[17:46:32.564]                             invokeRestart(restart)
[17:46:32.564]                             muffled <- TRUE
[17:46:32.564]                             break
[17:46:32.564]                           }
[17:46:32.564]                         }
[17:46:32.564]                       }
[17:46:32.564]                       invisible(muffled)
[17:46:32.564]                     }
[17:46:32.564]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.564]                   }
[17:46:32.564]                 }
[17:46:32.564]             }
[17:46:32.564]         }))
[17:46:32.564]     }, error = function(ex) {
[17:46:32.564]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.564]                 ...future.rng), started = ...future.startTime, 
[17:46:32.564]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.564]             version = "1.8"), class = "FutureResult")
[17:46:32.564]     }, finally = {
[17:46:32.564]         if (!identical(...future.workdir, getwd())) 
[17:46:32.564]             setwd(...future.workdir)
[17:46:32.564]         {
[17:46:32.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.564]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.564]             }
[17:46:32.564]             base::options(...future.oldOptions)
[17:46:32.564]             if (.Platform$OS.type == "windows") {
[17:46:32.564]                 old_names <- names(...future.oldEnvVars)
[17:46:32.564]                 envs <- base::Sys.getenv()
[17:46:32.564]                 names <- names(envs)
[17:46:32.564]                 common <- intersect(names, old_names)
[17:46:32.564]                 added <- setdiff(names, old_names)
[17:46:32.564]                 removed <- setdiff(old_names, names)
[17:46:32.564]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.564]                   envs[common]]
[17:46:32.564]                 NAMES <- toupper(changed)
[17:46:32.564]                 args <- list()
[17:46:32.564]                 for (kk in seq_along(NAMES)) {
[17:46:32.564]                   name <- changed[[kk]]
[17:46:32.564]                   NAME <- NAMES[[kk]]
[17:46:32.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.564]                     next
[17:46:32.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.564]                 }
[17:46:32.564]                 NAMES <- toupper(added)
[17:46:32.564]                 for (kk in seq_along(NAMES)) {
[17:46:32.564]                   name <- added[[kk]]
[17:46:32.564]                   NAME <- NAMES[[kk]]
[17:46:32.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.564]                     next
[17:46:32.564]                   args[[name]] <- ""
[17:46:32.564]                 }
[17:46:32.564]                 NAMES <- toupper(removed)
[17:46:32.564]                 for (kk in seq_along(NAMES)) {
[17:46:32.564]                   name <- removed[[kk]]
[17:46:32.564]                   NAME <- NAMES[[kk]]
[17:46:32.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.564]                     next
[17:46:32.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.564]                 }
[17:46:32.564]                 if (length(args) > 0) 
[17:46:32.564]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.564]             }
[17:46:32.564]             else {
[17:46:32.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.564]             }
[17:46:32.564]             {
[17:46:32.564]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.564]                   0L) {
[17:46:32.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.564]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.564]                   base::options(opts)
[17:46:32.564]                 }
[17:46:32.564]                 {
[17:46:32.564]                   {
[17:46:32.564]                     NULL
[17:46:32.564]                     RNGkind("Mersenne-Twister")
[17:46:32.564]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:32.564]                       inherits = FALSE)
[17:46:32.564]                   }
[17:46:32.564]                   options(future.plan = NULL)
[17:46:32.564]                   if (is.na(NA_character_)) 
[17:46:32.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.564]                     .init = FALSE)
[17:46:32.564]                 }
[17:46:32.564]             }
[17:46:32.564]         }
[17:46:32.564]     })
[17:46:32.564]     if (TRUE) {
[17:46:32.564]         base::sink(type = "output", split = FALSE)
[17:46:32.564]         if (TRUE) {
[17:46:32.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.564]         }
[17:46:32.564]         else {
[17:46:32.564]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.564]         }
[17:46:32.564]         base::close(...future.stdout)
[17:46:32.564]         ...future.stdout <- NULL
[17:46:32.564]     }
[17:46:32.564]     ...future.result$conditions <- ...future.conditions
[17:46:32.564]     ...future.result$finished <- base::Sys.time()
[17:46:32.564]     ...future.result
[17:46:32.564] }
[17:46:32.566] plan(): Setting new future strategy stack:
[17:46:32.566] List of future strategies:
[17:46:32.566] 1. sequential:
[17:46:32.566]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.566]    - tweaked: FALSE
[17:46:32.566]    - call: NULL
[17:46:32.567] plan(): nbrOfWorkers() = 1
[17:46:32.568] plan(): Setting new future strategy stack:
[17:46:32.568] List of future strategies:
[17:46:32.568] 1. future:
[17:46:32.568]    - args: function (..., workers = "<NULL>")
[17:46:32.568]    - tweaked: FALSE
[17:46:32.568]    - call: plan(foo)
[17:46:32.568] plan(): nbrOfWorkers() = Inf
[17:46:32.568] SequentialFuture started (and completed)
[1] 42
[17:46:32.569] getGlobalsAndPackages() ...
[17:46:32.569] 
[17:46:32.569] - globals: [0] <none>
[17:46:32.569] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x562d9b15cb00
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 37694b06-d304-4af9-3b2d-cdcb45dbd068
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:32.571] Packages needed by the future expression (n = 0): <none>
[17:46:32.571] Packages needed by future strategies (n = 0): <none>
[17:46:32.572] {
[17:46:32.572]     {
[17:46:32.572]         {
[17:46:32.572]             ...future.startTime <- base::Sys.time()
[17:46:32.572]             {
[17:46:32.572]                 {
[17:46:32.572]                   {
[17:46:32.572]                     {
[17:46:32.572]                       base::local({
[17:46:32.572]                         has_future <- base::requireNamespace("future", 
[17:46:32.572]                           quietly = TRUE)
[17:46:32.572]                         if (has_future) {
[17:46:32.572]                           ns <- base::getNamespace("future")
[17:46:32.572]                           version <- ns[[".package"]][["version"]]
[17:46:32.572]                           if (is.null(version)) 
[17:46:32.572]                             version <- utils::packageVersion("future")
[17:46:32.572]                         }
[17:46:32.572]                         else {
[17:46:32.572]                           version <- NULL
[17:46:32.572]                         }
[17:46:32.572]                         if (!has_future || version < "1.8.0") {
[17:46:32.572]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.572]                             "", base::R.version$version.string), 
[17:46:32.572]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:32.572]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.572]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.572]                               "release", "version")], collapse = " "), 
[17:46:32.572]                             hostname = base::Sys.info()[["nodename"]])
[17:46:32.572]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.572]                             info)
[17:46:32.572]                           info <- base::paste(info, collapse = "; ")
[17:46:32.572]                           if (!has_future) {
[17:46:32.572]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.572]                               info)
[17:46:32.572]                           }
[17:46:32.572]                           else {
[17:46:32.572]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.572]                               info, version)
[17:46:32.572]                           }
[17:46:32.572]                           base::stop(msg)
[17:46:32.572]                         }
[17:46:32.572]                       })
[17:46:32.572]                     }
[17:46:32.572]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:32.572]                     base::options(mc.cores = 1L)
[17:46:32.572]                   }
[17:46:32.572]                   ...future.strategy.old <- future::plan("list")
[17:46:32.572]                   options(future.plan = NULL)
[17:46:32.572]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.572]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.572]                 }
[17:46:32.572]                 ...future.workdir <- getwd()
[17:46:32.572]             }
[17:46:32.572]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.572]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.572]         }
[17:46:32.572]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.572]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.572]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.572]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.572]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.572]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.572]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.572]             base::names(...future.oldOptions))
[17:46:32.572]     }
[17:46:32.572]     if (FALSE) {
[17:46:32.572]     }
[17:46:32.572]     else {
[17:46:32.572]         if (TRUE) {
[17:46:32.572]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.572]                 open = "w")
[17:46:32.572]         }
[17:46:32.572]         else {
[17:46:32.572]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.572]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.572]         }
[17:46:32.572]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.572]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.572]             base::sink(type = "output", split = FALSE)
[17:46:32.572]             base::close(...future.stdout)
[17:46:32.572]         }, add = TRUE)
[17:46:32.572]     }
[17:46:32.572]     ...future.frame <- base::sys.nframe()
[17:46:32.572]     ...future.conditions <- base::list()
[17:46:32.572]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.572]     if (FALSE) {
[17:46:32.572]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.572]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.572]     }
[17:46:32.572]     ...future.result <- base::tryCatch({
[17:46:32.572]         base::withCallingHandlers({
[17:46:32.572]             ...future.value <- base::withVisible(base::local({
[17:46:32.572]                 withCallingHandlers({
[17:46:32.572]                   {
[17:46:32.572]                     42L
[17:46:32.572]                   }
[17:46:32.572]                 }, immediateCondition = function(cond) {
[17:46:32.572]                   save_rds <- function (object, pathname, ...) 
[17:46:32.572]                   {
[17:46:32.572]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:32.572]                     if (file_test("-f", pathname_tmp)) {
[17:46:32.572]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.572]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:32.572]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.572]                         fi_tmp[["mtime"]])
[17:46:32.572]                     }
[17:46:32.572]                     tryCatch({
[17:46:32.572]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:32.572]                     }, error = function(ex) {
[17:46:32.572]                       msg <- conditionMessage(ex)
[17:46:32.572]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.572]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:32.572]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.572]                         fi_tmp[["mtime"]], msg)
[17:46:32.572]                       ex$message <- msg
[17:46:32.572]                       stop(ex)
[17:46:32.572]                     })
[17:46:32.572]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:32.572]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:32.572]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:32.572]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.572]                       fi <- file.info(pathname)
[17:46:32.572]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:32.572]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.572]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:32.572]                         fi[["size"]], fi[["mtime"]])
[17:46:32.572]                       stop(msg)
[17:46:32.572]                     }
[17:46:32.572]                     invisible(pathname)
[17:46:32.572]                   }
[17:46:32.572]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:32.572]                     rootPath = tempdir()) 
[17:46:32.572]                   {
[17:46:32.572]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:32.572]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:32.572]                       tmpdir = path, fileext = ".rds")
[17:46:32.572]                     save_rds(obj, file)
[17:46:32.572]                   }
[17:46:32.572]                   saveImmediateCondition(cond, path = "/tmp/Rtmp1ir5gT/.future/immediateConditions")
[17:46:32.572]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.572]                   {
[17:46:32.572]                     inherits <- base::inherits
[17:46:32.572]                     invokeRestart <- base::invokeRestart
[17:46:32.572]                     is.null <- base::is.null
[17:46:32.572]                     muffled <- FALSE
[17:46:32.572]                     if (inherits(cond, "message")) {
[17:46:32.572]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:32.572]                       if (muffled) 
[17:46:32.572]                         invokeRestart("muffleMessage")
[17:46:32.572]                     }
[17:46:32.572]                     else if (inherits(cond, "warning")) {
[17:46:32.572]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:32.572]                       if (muffled) 
[17:46:32.572]                         invokeRestart("muffleWarning")
[17:46:32.572]                     }
[17:46:32.572]                     else if (inherits(cond, "condition")) {
[17:46:32.572]                       if (!is.null(pattern)) {
[17:46:32.572]                         computeRestarts <- base::computeRestarts
[17:46:32.572]                         grepl <- base::grepl
[17:46:32.572]                         restarts <- computeRestarts(cond)
[17:46:32.572]                         for (restart in restarts) {
[17:46:32.572]                           name <- restart$name
[17:46:32.572]                           if (is.null(name)) 
[17:46:32.572]                             next
[17:46:32.572]                           if (!grepl(pattern, name)) 
[17:46:32.572]                             next
[17:46:32.572]                           invokeRestart(restart)
[17:46:32.572]                           muffled <- TRUE
[17:46:32.572]                           break
[17:46:32.572]                         }
[17:46:32.572]                       }
[17:46:32.572]                     }
[17:46:32.572]                     invisible(muffled)
[17:46:32.572]                   }
[17:46:32.572]                   muffleCondition(cond)
[17:46:32.572]                 })
[17:46:32.572]             }))
[17:46:32.572]             future::FutureResult(value = ...future.value$value, 
[17:46:32.572]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.572]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.572]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.572]                     ...future.globalenv.names))
[17:46:32.572]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.572]         }, condition = base::local({
[17:46:32.572]             c <- base::c
[17:46:32.572]             inherits <- base::inherits
[17:46:32.572]             invokeRestart <- base::invokeRestart
[17:46:32.572]             length <- base::length
[17:46:32.572]             list <- base::list
[17:46:32.572]             seq.int <- base::seq.int
[17:46:32.572]             signalCondition <- base::signalCondition
[17:46:32.572]             sys.calls <- base::sys.calls
[17:46:32.572]             `[[` <- base::`[[`
[17:46:32.572]             `+` <- base::`+`
[17:46:32.572]             `<<-` <- base::`<<-`
[17:46:32.572]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.572]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.572]                   3L)]
[17:46:32.572]             }
[17:46:32.572]             function(cond) {
[17:46:32.572]                 is_error <- inherits(cond, "error")
[17:46:32.572]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.572]                   NULL)
[17:46:32.572]                 if (is_error) {
[17:46:32.572]                   sessionInformation <- function() {
[17:46:32.572]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.572]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.572]                       search = base::search(), system = base::Sys.info())
[17:46:32.572]                   }
[17:46:32.572]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.572]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.572]                     cond$call), session = sessionInformation(), 
[17:46:32.572]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.572]                   signalCondition(cond)
[17:46:32.572]                 }
[17:46:32.572]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.572]                 "immediateCondition"))) {
[17:46:32.572]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.572]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.572]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.572]                   if (TRUE && !signal) {
[17:46:32.572]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.572]                     {
[17:46:32.572]                       inherits <- base::inherits
[17:46:32.572]                       invokeRestart <- base::invokeRestart
[17:46:32.572]                       is.null <- base::is.null
[17:46:32.572]                       muffled <- FALSE
[17:46:32.572]                       if (inherits(cond, "message")) {
[17:46:32.572]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.572]                         if (muffled) 
[17:46:32.572]                           invokeRestart("muffleMessage")
[17:46:32.572]                       }
[17:46:32.572]                       else if (inherits(cond, "warning")) {
[17:46:32.572]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.572]                         if (muffled) 
[17:46:32.572]                           invokeRestart("muffleWarning")
[17:46:32.572]                       }
[17:46:32.572]                       else if (inherits(cond, "condition")) {
[17:46:32.572]                         if (!is.null(pattern)) {
[17:46:32.572]                           computeRestarts <- base::computeRestarts
[17:46:32.572]                           grepl <- base::grepl
[17:46:32.572]                           restarts <- computeRestarts(cond)
[17:46:32.572]                           for (restart in restarts) {
[17:46:32.572]                             name <- restart$name
[17:46:32.572]                             if (is.null(name)) 
[17:46:32.572]                               next
[17:46:32.572]                             if (!grepl(pattern, name)) 
[17:46:32.572]                               next
[17:46:32.572]                             invokeRestart(restart)
[17:46:32.572]                             muffled <- TRUE
[17:46:32.572]                             break
[17:46:32.572]                           }
[17:46:32.572]                         }
[17:46:32.572]                       }
[17:46:32.572]                       invisible(muffled)
[17:46:32.572]                     }
[17:46:32.572]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.572]                   }
[17:46:32.572]                 }
[17:46:32.572]                 else {
[17:46:32.572]                   if (TRUE) {
[17:46:32.572]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.572]                     {
[17:46:32.572]                       inherits <- base::inherits
[17:46:32.572]                       invokeRestart <- base::invokeRestart
[17:46:32.572]                       is.null <- base::is.null
[17:46:32.572]                       muffled <- FALSE
[17:46:32.572]                       if (inherits(cond, "message")) {
[17:46:32.572]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.572]                         if (muffled) 
[17:46:32.572]                           invokeRestart("muffleMessage")
[17:46:32.572]                       }
[17:46:32.572]                       else if (inherits(cond, "warning")) {
[17:46:32.572]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.572]                         if (muffled) 
[17:46:32.572]                           invokeRestart("muffleWarning")
[17:46:32.572]                       }
[17:46:32.572]                       else if (inherits(cond, "condition")) {
[17:46:32.572]                         if (!is.null(pattern)) {
[17:46:32.572]                           computeRestarts <- base::computeRestarts
[17:46:32.572]                           grepl <- base::grepl
[17:46:32.572]                           restarts <- computeRestarts(cond)
[17:46:32.572]                           for (restart in restarts) {
[17:46:32.572]                             name <- restart$name
[17:46:32.572]                             if (is.null(name)) 
[17:46:32.572]                               next
[17:46:32.572]                             if (!grepl(pattern, name)) 
[17:46:32.572]                               next
[17:46:32.572]                             invokeRestart(restart)
[17:46:32.572]                             muffled <- TRUE
[17:46:32.572]                             break
[17:46:32.572]                           }
[17:46:32.572]                         }
[17:46:32.572]                       }
[17:46:32.572]                       invisible(muffled)
[17:46:32.572]                     }
[17:46:32.572]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.572]                   }
[17:46:32.572]                 }
[17:46:32.572]             }
[17:46:32.572]         }))
[17:46:32.572]     }, error = function(ex) {
[17:46:32.572]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.572]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.572]                 ...future.rng), started = ...future.startTime, 
[17:46:32.572]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.572]             version = "1.8"), class = "FutureResult")
[17:46:32.572]     }, finally = {
[17:46:32.572]         if (!identical(...future.workdir, getwd())) 
[17:46:32.572]             setwd(...future.workdir)
[17:46:32.572]         {
[17:46:32.572]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.572]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.572]             }
[17:46:32.572]             base::options(...future.oldOptions)
[17:46:32.572]             if (.Platform$OS.type == "windows") {
[17:46:32.572]                 old_names <- names(...future.oldEnvVars)
[17:46:32.572]                 envs <- base::Sys.getenv()
[17:46:32.572]                 names <- names(envs)
[17:46:32.572]                 common <- intersect(names, old_names)
[17:46:32.572]                 added <- setdiff(names, old_names)
[17:46:32.572]                 removed <- setdiff(old_names, names)
[17:46:32.572]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.572]                   envs[common]]
[17:46:32.572]                 NAMES <- toupper(changed)
[17:46:32.572]                 args <- list()
[17:46:32.572]                 for (kk in seq_along(NAMES)) {
[17:46:32.572]                   name <- changed[[kk]]
[17:46:32.572]                   NAME <- NAMES[[kk]]
[17:46:32.572]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.572]                     next
[17:46:32.572]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.572]                 }
[17:46:32.572]                 NAMES <- toupper(added)
[17:46:32.572]                 for (kk in seq_along(NAMES)) {
[17:46:32.572]                   name <- added[[kk]]
[17:46:32.572]                   NAME <- NAMES[[kk]]
[17:46:32.572]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.572]                     next
[17:46:32.572]                   args[[name]] <- ""
[17:46:32.572]                 }
[17:46:32.572]                 NAMES <- toupper(removed)
[17:46:32.572]                 for (kk in seq_along(NAMES)) {
[17:46:32.572]                   name <- removed[[kk]]
[17:46:32.572]                   NAME <- NAMES[[kk]]
[17:46:32.572]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.572]                     next
[17:46:32.572]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.572]                 }
[17:46:32.572]                 if (length(args) > 0) 
[17:46:32.572]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.572]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.572]             }
[17:46:32.572]             else {
[17:46:32.572]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.572]             }
[17:46:32.572]             {
[17:46:32.572]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.572]                   0L) {
[17:46:32.572]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.572]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.572]                   base::options(opts)
[17:46:32.572]                 }
[17:46:32.572]                 {
[17:46:32.572]                   {
[17:46:32.572]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:32.572]                     NULL
[17:46:32.572]                   }
[17:46:32.572]                   options(future.plan = NULL)
[17:46:32.572]                   if (is.na(NA_character_)) 
[17:46:32.572]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.572]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.572]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.572]                     .init = FALSE)
[17:46:32.572]                 }
[17:46:32.572]             }
[17:46:32.572]         }
[17:46:32.572]     })
[17:46:32.572]     if (TRUE) {
[17:46:32.572]         base::sink(type = "output", split = FALSE)
[17:46:32.572]         if (TRUE) {
[17:46:32.572]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.572]         }
[17:46:32.572]         else {
[17:46:32.572]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.572]         }
[17:46:32.572]         base::close(...future.stdout)
[17:46:32.572]         ...future.stdout <- NULL
[17:46:32.572]     }
[17:46:32.572]     ...future.result$conditions <- ...future.conditions
[17:46:32.572]     ...future.result$finished <- base::Sys.time()
[17:46:32.572]     ...future.result
[17:46:32.572] }
[17:46:32.574] requestCore(): workers = 2
[17:46:32.577] MulticoreFuture started
[17:46:32.578] plan(): Setting new future strategy stack:
[17:46:32.578] List of future strategies:
[17:46:32.578] 1. sequential:
[17:46:32.578]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.578]    - tweaked: FALSE
[17:46:32.578]    - call: NULL
[17:46:32.579] result() for MulticoreFuture ...
[17:46:32.579] plan(): nbrOfWorkers() = 1
[17:46:32.581] plan(): Setting new future strategy stack:
[17:46:32.581] List of future strategies:
[17:46:32.581] 1. future:
[17:46:32.581]    - args: function (..., workers = "<NULL>")
[17:46:32.581]    - tweaked: FALSE
[17:46:32.581]    - call: plan(foo)
[17:46:32.582] plan(): nbrOfWorkers() = Inf
[17:46:32.583] result() for MulticoreFuture ...
[17:46:32.583] result() for MulticoreFuture ... done
[17:46:32.583] result() for MulticoreFuture ... done
[17:46:32.583] result() for MulticoreFuture ...
[17:46:32.583] result() for MulticoreFuture ... done
[1] 42
[17:46:32.585] getGlobalsAndPackages() ...
[17:46:32.585] 
[17:46:32.585] - globals: [0] <none>
[17:46:32.585] getGlobalsAndPackages() ... DONE
[17:46:32.586] Packages needed by the future expression (n = 0): <none>
[17:46:32.586] Packages needed by future strategies (n = 0): <none>
[17:46:32.587] {
[17:46:32.587]     {
[17:46:32.587]         {
[17:46:32.587]             ...future.startTime <- base::Sys.time()
[17:46:32.587]             {
[17:46:32.587]                 {
[17:46:32.587]                   {
[17:46:32.587]                     {
[17:46:32.587]                       base::local({
[17:46:32.587]                         has_future <- base::requireNamespace("future", 
[17:46:32.587]                           quietly = TRUE)
[17:46:32.587]                         if (has_future) {
[17:46:32.587]                           ns <- base::getNamespace("future")
[17:46:32.587]                           version <- ns[[".package"]][["version"]]
[17:46:32.587]                           if (is.null(version)) 
[17:46:32.587]                             version <- utils::packageVersion("future")
[17:46:32.587]                         }
[17:46:32.587]                         else {
[17:46:32.587]                           version <- NULL
[17:46:32.587]                         }
[17:46:32.587]                         if (!has_future || version < "1.8.0") {
[17:46:32.587]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:32.587]                             "", base::R.version$version.string), 
[17:46:32.587]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:32.587]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:32.587]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:32.587]                               "release", "version")], collapse = " "), 
[17:46:32.587]                             hostname = base::Sys.info()[["nodename"]])
[17:46:32.587]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:32.587]                             info)
[17:46:32.587]                           info <- base::paste(info, collapse = "; ")
[17:46:32.587]                           if (!has_future) {
[17:46:32.587]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:32.587]                               info)
[17:46:32.587]                           }
[17:46:32.587]                           else {
[17:46:32.587]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:32.587]                               info, version)
[17:46:32.587]                           }
[17:46:32.587]                           base::stop(msg)
[17:46:32.587]                         }
[17:46:32.587]                       })
[17:46:32.587]                     }
[17:46:32.587]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:32.587]                     base::options(mc.cores = 1L)
[17:46:32.587]                   }
[17:46:32.587]                   ...future.strategy.old <- future::plan("list")
[17:46:32.587]                   options(future.plan = NULL)
[17:46:32.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:32.587]                 }
[17:46:32.587]                 ...future.workdir <- getwd()
[17:46:32.587]             }
[17:46:32.587]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:32.587]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:32.587]         }
[17:46:32.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:32.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:32.587]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:32.587]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:32.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:32.587]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:32.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:32.587]             base::names(...future.oldOptions))
[17:46:32.587]     }
[17:46:32.587]     if (FALSE) {
[17:46:32.587]     }
[17:46:32.587]     else {
[17:46:32.587]         if (TRUE) {
[17:46:32.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:32.587]                 open = "w")
[17:46:32.587]         }
[17:46:32.587]         else {
[17:46:32.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:32.587]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:32.587]         }
[17:46:32.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:32.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:32.587]             base::sink(type = "output", split = FALSE)
[17:46:32.587]             base::close(...future.stdout)
[17:46:32.587]         }, add = TRUE)
[17:46:32.587]     }
[17:46:32.587]     ...future.frame <- base::sys.nframe()
[17:46:32.587]     ...future.conditions <- base::list()
[17:46:32.587]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:32.587]     if (FALSE) {
[17:46:32.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:32.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:32.587]     }
[17:46:32.587]     ...future.result <- base::tryCatch({
[17:46:32.587]         base::withCallingHandlers({
[17:46:32.587]             ...future.value <- base::withVisible(base::local({
[17:46:32.587]                 withCallingHandlers({
[17:46:32.587]                   {
[17:46:32.587]                     42L
[17:46:32.587]                   }
[17:46:32.587]                 }, immediateCondition = function(cond) {
[17:46:32.587]                   save_rds <- function (object, pathname, ...) 
[17:46:32.587]                   {
[17:46:32.587]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:32.587]                     if (file_test("-f", pathname_tmp)) {
[17:46:32.587]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.587]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:32.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.587]                         fi_tmp[["mtime"]])
[17:46:32.587]                     }
[17:46:32.587]                     tryCatch({
[17:46:32.587]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:32.587]                     }, error = function(ex) {
[17:46:32.587]                       msg <- conditionMessage(ex)
[17:46:32.587]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.587]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:32.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.587]                         fi_tmp[["mtime"]], msg)
[17:46:32.587]                       ex$message <- msg
[17:46:32.587]                       stop(ex)
[17:46:32.587]                     })
[17:46:32.587]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:32.587]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:32.587]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:32.587]                       fi_tmp <- file.info(pathname_tmp)
[17:46:32.587]                       fi <- file.info(pathname)
[17:46:32.587]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:32.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:32.587]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:32.587]                         fi[["size"]], fi[["mtime"]])
[17:46:32.587]                       stop(msg)
[17:46:32.587]                     }
[17:46:32.587]                     invisible(pathname)
[17:46:32.587]                   }
[17:46:32.587]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:32.587]                     rootPath = tempdir()) 
[17:46:32.587]                   {
[17:46:32.587]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:32.587]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:32.587]                       tmpdir = path, fileext = ".rds")
[17:46:32.587]                     save_rds(obj, file)
[17:46:32.587]                   }
[17:46:32.587]                   saveImmediateCondition(cond, path = "/tmp/Rtmp1ir5gT/.future/immediateConditions")
[17:46:32.587]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.587]                   {
[17:46:32.587]                     inherits <- base::inherits
[17:46:32.587]                     invokeRestart <- base::invokeRestart
[17:46:32.587]                     is.null <- base::is.null
[17:46:32.587]                     muffled <- FALSE
[17:46:32.587]                     if (inherits(cond, "message")) {
[17:46:32.587]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:32.587]                       if (muffled) 
[17:46:32.587]                         invokeRestart("muffleMessage")
[17:46:32.587]                     }
[17:46:32.587]                     else if (inherits(cond, "warning")) {
[17:46:32.587]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:32.587]                       if (muffled) 
[17:46:32.587]                         invokeRestart("muffleWarning")
[17:46:32.587]                     }
[17:46:32.587]                     else if (inherits(cond, "condition")) {
[17:46:32.587]                       if (!is.null(pattern)) {
[17:46:32.587]                         computeRestarts <- base::computeRestarts
[17:46:32.587]                         grepl <- base::grepl
[17:46:32.587]                         restarts <- computeRestarts(cond)
[17:46:32.587]                         for (restart in restarts) {
[17:46:32.587]                           name <- restart$name
[17:46:32.587]                           if (is.null(name)) 
[17:46:32.587]                             next
[17:46:32.587]                           if (!grepl(pattern, name)) 
[17:46:32.587]                             next
[17:46:32.587]                           invokeRestart(restart)
[17:46:32.587]                           muffled <- TRUE
[17:46:32.587]                           break
[17:46:32.587]                         }
[17:46:32.587]                       }
[17:46:32.587]                     }
[17:46:32.587]                     invisible(muffled)
[17:46:32.587]                   }
[17:46:32.587]                   muffleCondition(cond)
[17:46:32.587]                 })
[17:46:32.587]             }))
[17:46:32.587]             future::FutureResult(value = ...future.value$value, 
[17:46:32.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.587]                   ...future.rng), globalenv = if (FALSE) 
[17:46:32.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:32.587]                     ...future.globalenv.names))
[17:46:32.587]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:32.587]         }, condition = base::local({
[17:46:32.587]             c <- base::c
[17:46:32.587]             inherits <- base::inherits
[17:46:32.587]             invokeRestart <- base::invokeRestart
[17:46:32.587]             length <- base::length
[17:46:32.587]             list <- base::list
[17:46:32.587]             seq.int <- base::seq.int
[17:46:32.587]             signalCondition <- base::signalCondition
[17:46:32.587]             sys.calls <- base::sys.calls
[17:46:32.587]             `[[` <- base::`[[`
[17:46:32.587]             `+` <- base::`+`
[17:46:32.587]             `<<-` <- base::`<<-`
[17:46:32.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:32.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:32.587]                   3L)]
[17:46:32.587]             }
[17:46:32.587]             function(cond) {
[17:46:32.587]                 is_error <- inherits(cond, "error")
[17:46:32.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:32.587]                   NULL)
[17:46:32.587]                 if (is_error) {
[17:46:32.587]                   sessionInformation <- function() {
[17:46:32.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:32.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:32.587]                       search = base::search(), system = base::Sys.info())
[17:46:32.587]                   }
[17:46:32.587]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:32.587]                     cond$call), session = sessionInformation(), 
[17:46:32.587]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:32.587]                   signalCondition(cond)
[17:46:32.587]                 }
[17:46:32.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:32.587]                 "immediateCondition"))) {
[17:46:32.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:32.587]                   ...future.conditions[[length(...future.conditions) + 
[17:46:32.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:32.587]                   if (TRUE && !signal) {
[17:46:32.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.587]                     {
[17:46:32.587]                       inherits <- base::inherits
[17:46:32.587]                       invokeRestart <- base::invokeRestart
[17:46:32.587]                       is.null <- base::is.null
[17:46:32.587]                       muffled <- FALSE
[17:46:32.587]                       if (inherits(cond, "message")) {
[17:46:32.587]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.587]                         if (muffled) 
[17:46:32.587]                           invokeRestart("muffleMessage")
[17:46:32.587]                       }
[17:46:32.587]                       else if (inherits(cond, "warning")) {
[17:46:32.587]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.587]                         if (muffled) 
[17:46:32.587]                           invokeRestart("muffleWarning")
[17:46:32.587]                       }
[17:46:32.587]                       else if (inherits(cond, "condition")) {
[17:46:32.587]                         if (!is.null(pattern)) {
[17:46:32.587]                           computeRestarts <- base::computeRestarts
[17:46:32.587]                           grepl <- base::grepl
[17:46:32.587]                           restarts <- computeRestarts(cond)
[17:46:32.587]                           for (restart in restarts) {
[17:46:32.587]                             name <- restart$name
[17:46:32.587]                             if (is.null(name)) 
[17:46:32.587]                               next
[17:46:32.587]                             if (!grepl(pattern, name)) 
[17:46:32.587]                               next
[17:46:32.587]                             invokeRestart(restart)
[17:46:32.587]                             muffled <- TRUE
[17:46:32.587]                             break
[17:46:32.587]                           }
[17:46:32.587]                         }
[17:46:32.587]                       }
[17:46:32.587]                       invisible(muffled)
[17:46:32.587]                     }
[17:46:32.587]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.587]                   }
[17:46:32.587]                 }
[17:46:32.587]                 else {
[17:46:32.587]                   if (TRUE) {
[17:46:32.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:32.587]                     {
[17:46:32.587]                       inherits <- base::inherits
[17:46:32.587]                       invokeRestart <- base::invokeRestart
[17:46:32.587]                       is.null <- base::is.null
[17:46:32.587]                       muffled <- FALSE
[17:46:32.587]                       if (inherits(cond, "message")) {
[17:46:32.587]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:32.587]                         if (muffled) 
[17:46:32.587]                           invokeRestart("muffleMessage")
[17:46:32.587]                       }
[17:46:32.587]                       else if (inherits(cond, "warning")) {
[17:46:32.587]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:32.587]                         if (muffled) 
[17:46:32.587]                           invokeRestart("muffleWarning")
[17:46:32.587]                       }
[17:46:32.587]                       else if (inherits(cond, "condition")) {
[17:46:32.587]                         if (!is.null(pattern)) {
[17:46:32.587]                           computeRestarts <- base::computeRestarts
[17:46:32.587]                           grepl <- base::grepl
[17:46:32.587]                           restarts <- computeRestarts(cond)
[17:46:32.587]                           for (restart in restarts) {
[17:46:32.587]                             name <- restart$name
[17:46:32.587]                             if (is.null(name)) 
[17:46:32.587]                               next
[17:46:32.587]                             if (!grepl(pattern, name)) 
[17:46:32.587]                               next
[17:46:32.587]                             invokeRestart(restart)
[17:46:32.587]                             muffled <- TRUE
[17:46:32.587]                             break
[17:46:32.587]                           }
[17:46:32.587]                         }
[17:46:32.587]                       }
[17:46:32.587]                       invisible(muffled)
[17:46:32.587]                     }
[17:46:32.587]                     muffleCondition(cond, pattern = "^muffle")
[17:46:32.587]                   }
[17:46:32.587]                 }
[17:46:32.587]             }
[17:46:32.587]         }))
[17:46:32.587]     }, error = function(ex) {
[17:46:32.587]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:32.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:32.587]                 ...future.rng), started = ...future.startTime, 
[17:46:32.587]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:32.587]             version = "1.8"), class = "FutureResult")
[17:46:32.587]     }, finally = {
[17:46:32.587]         if (!identical(...future.workdir, getwd())) 
[17:46:32.587]             setwd(...future.workdir)
[17:46:32.587]         {
[17:46:32.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:32.587]                 ...future.oldOptions$nwarnings <- NULL
[17:46:32.587]             }
[17:46:32.587]             base::options(...future.oldOptions)
[17:46:32.587]             if (.Platform$OS.type == "windows") {
[17:46:32.587]                 old_names <- names(...future.oldEnvVars)
[17:46:32.587]                 envs <- base::Sys.getenv()
[17:46:32.587]                 names <- names(envs)
[17:46:32.587]                 common <- intersect(names, old_names)
[17:46:32.587]                 added <- setdiff(names, old_names)
[17:46:32.587]                 removed <- setdiff(old_names, names)
[17:46:32.587]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:32.587]                   envs[common]]
[17:46:32.587]                 NAMES <- toupper(changed)
[17:46:32.587]                 args <- list()
[17:46:32.587]                 for (kk in seq_along(NAMES)) {
[17:46:32.587]                   name <- changed[[kk]]
[17:46:32.587]                   NAME <- NAMES[[kk]]
[17:46:32.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.587]                     next
[17:46:32.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.587]                 }
[17:46:32.587]                 NAMES <- toupper(added)
[17:46:32.587]                 for (kk in seq_along(NAMES)) {
[17:46:32.587]                   name <- added[[kk]]
[17:46:32.587]                   NAME <- NAMES[[kk]]
[17:46:32.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.587]                     next
[17:46:32.587]                   args[[name]] <- ""
[17:46:32.587]                 }
[17:46:32.587]                 NAMES <- toupper(removed)
[17:46:32.587]                 for (kk in seq_along(NAMES)) {
[17:46:32.587]                   name <- removed[[kk]]
[17:46:32.587]                   NAME <- NAMES[[kk]]
[17:46:32.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:32.587]                     next
[17:46:32.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:32.587]                 }
[17:46:32.587]                 if (length(args) > 0) 
[17:46:32.587]                   base::do.call(base::Sys.setenv, args = args)
[17:46:32.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:32.587]             }
[17:46:32.587]             else {
[17:46:32.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:32.587]             }
[17:46:32.587]             {
[17:46:32.587]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:32.587]                   0L) {
[17:46:32.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:32.587]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:32.587]                   base::options(opts)
[17:46:32.587]                 }
[17:46:32.587]                 {
[17:46:32.587]                   {
[17:46:32.587]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:32.587]                     NULL
[17:46:32.587]                   }
[17:46:32.587]                   options(future.plan = NULL)
[17:46:32.587]                   if (is.na(NA_character_)) 
[17:46:32.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:32.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:32.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:32.587]                     .init = FALSE)
[17:46:32.587]                 }
[17:46:32.587]             }
[17:46:32.587]         }
[17:46:32.587]     })
[17:46:32.587]     if (TRUE) {
[17:46:32.587]         base::sink(type = "output", split = FALSE)
[17:46:32.587]         if (TRUE) {
[17:46:32.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:32.587]         }
[17:46:32.587]         else {
[17:46:32.587]             ...future.result["stdout"] <- base::list(NULL)
[17:46:32.587]         }
[17:46:32.587]         base::close(...future.stdout)
[17:46:32.587]         ...future.stdout <- NULL
[17:46:32.587]     }
[17:46:32.587]     ...future.result$conditions <- ...future.conditions
[17:46:32.587]     ...future.result$finished <- base::Sys.time()
[17:46:32.587]     ...future.result
[17:46:32.587] }
[17:46:32.589] requestCore(): workers = 2
[17:46:32.591] MulticoreFuture started
[17:46:32.592] result() for MulticoreFuture ...
[17:46:32.592] plan(): Setting new future strategy stack:
[17:46:32.592] List of future strategies:
[17:46:32.592] 1. sequential:
[17:46:32.592]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.592]    - tweaked: FALSE
[17:46:32.592]    - call: NULL
[17:46:32.593] plan(): nbrOfWorkers() = 1
[17:46:32.595] plan(): Setting new future strategy stack:
[17:46:32.595] List of future strategies:
[17:46:32.595] 1. future:
[17:46:32.595]    - args: function (..., workers = "<NULL>")
[17:46:32.595]    - tweaked: FALSE
[17:46:32.595]    - call: plan(foo)
[17:46:32.596] plan(): nbrOfWorkers() = Inf
[17:46:32.597] result() for MulticoreFuture ...
[17:46:32.597] result() for MulticoreFuture ... done
[17:46:32.597] result() for MulticoreFuture ... done
[17:46:32.597] result() for MulticoreFuture ...
[17:46:32.597] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[17:46:32.599] plan(): Setting new future strategy stack:
[17:46:32.599] List of future strategies:
[17:46:32.599] 1. FutureStrategy:
[17:46:32.599]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:32.599]    - tweaked: FALSE
[17:46:32.599]    - call: future::plan(oplan)
[17:46:32.600] plan(): nbrOfWorkers() = 1
> 
