
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:03:22.442] plan(): Setting new future strategy stack:
[17:03:22.443] List of future strategies:
[17:03:22.443] 1. sequential:
[17:03:22.443]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:22.443]    - tweaked: FALSE
[17:03:22.443]    - call: future::plan("sequential")
[17:03:22.454] plan(): nbrOfWorkers() = 1
> 
> options(future.debug = FALSE)
> 
> message("*** Relaying and split standard output and conditions ...")
*** Relaying and split standard output and conditions ...
> 
> message(" - default (implicit split = FALSE)")
 - default (implicit split = FALSE)
> 
> plan(sequential)
> 
> relay <- recordRelay({
+   f <- future({
+     cat("O\n")
+     message("M")
+     1L
+   })
+ })
> message("  class: ", paste(sQuote(class(f)), collapse = ", "))
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
> stopifnot(length(relay$stdout) == 0L)
> stopifnot(length(relay$msgs) == 0L)
> relay <- recordRelay(v <- value(f))
O
M
> stopifnot(identical(relay$stdout, "O\n"))
> stopifnot(identical(relay$msgs, "M\n"))
> 
> 
> message(" - split = FALSE")
 - split = FALSE
> 
> plan(sequential, split = FALSE)
> 
> relay <- recordRelay({
+   f <- future({
+     cat("O\n")
+     message("M")
+     1L
+   })
+ })
> message("  class: ", paste(sQuote(class(f)), collapse = ", "))
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
> stopifnot(length(relay$stdout) == 0L)
> stopifnot(length(relay$msgs) == 0L)
> relay <- recordRelay(v <- value(f))
O
M
> stopifnot(identical(relay$stdout, "O\n"))
> stopifnot(identical(relay$msgs, "M\n"))
> 
> 
> message(" - split = TRUE")
 - split = TRUE
> 
> plan(sequential, split = TRUE)
> 
> relay <- recordRelay({
+   f <- future({
+     cat("O\n")
+     message("M")
+     1L
+   })
+ })
O
M
> message("  class: ", paste(sQuote(class(f)), collapse = ", "))
  class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
> stopifnot(identical(relay$stdout, "O\n"))
> stopifnot(identical(relay$msgs, "M\n"))
> relay <- recordRelay(v <- value(f))
O
M
> stopifnot(identical(relay$stdout, "O\n"))
> stopifnot(identical(relay$msgs, "M\n"))
> 
> 
> message("*** Relaying and split standard output and conditions ... DONE")
*** Relaying and split standard output and conditions ... DONE
> 
> source("incl/end.R")
> 
