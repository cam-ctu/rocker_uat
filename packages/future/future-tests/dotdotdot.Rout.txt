
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:04.503] plan(): Setting new future strategy stack:
[17:02:04.503] List of future strategies:
[17:02:04.503] 1. sequential:
[17:02:04.503]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.503]    - tweaked: FALSE
[17:02:04.503]    - call: future::plan("sequential")
[17:02:04.515] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[17:02:04.567] plan(): Setting new future strategy stack:
[17:02:04.567] List of future strategies:
[17:02:04.567] 1. sequential:
[17:02:04.567]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.567]    - tweaked: FALSE
[17:02:04.567]    - call: plan(strategy, substitute = FALSE)
[17:02:04.578] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5572d19ab998>
Arguments '...' exists: TRUE
[17:02:04.580] getGlobalsAndPackages() ...
[17:02:04.580] Searching for globals...
[17:02:04.589] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:02:04.590] Searching for globals ... DONE
[17:02:04.590] Resolving globals: FALSE
[17:02:04.590] Tweak future expression to call with '...' arguments ...
[17:02:04.590] {
[17:02:04.590]     do.call(function(...) {
[17:02:04.590]         sum(x, ...)
[17:02:04.590]     }, args = future.call.arguments)
[17:02:04.590] }
[17:02:04.590] Tweak future expression to call with '...' arguments ... DONE
[17:02:04.592] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.592] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:02:04.592] - globals: [2] ‘x’, ‘future.call.arguments’
[17:02:04.592] 
[17:02:04.592] getGlobalsAndPackages() ... DONE
[17:02:04.593] run() for ‘Future’ ...
[17:02:04.593] - state: ‘created’
[17:02:04.593] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:04.594] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:04.594] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:04.594]   - Field: ‘label’
[17:02:04.594]   - Field: ‘local’
[17:02:04.594]   - Field: ‘owner’
[17:02:04.594]   - Field: ‘envir’
[17:02:04.594]   - Field: ‘packages’
[17:02:04.594]   - Field: ‘gc’
[17:02:04.595]   - Field: ‘conditions’
[17:02:04.595]   - Field: ‘expr’
[17:02:04.595]   - Field: ‘uuid’
[17:02:04.595]   - Field: ‘seed’
[17:02:04.595]   - Field: ‘version’
[17:02:04.595]   - Field: ‘result’
[17:02:04.595]   - Field: ‘asynchronous’
[17:02:04.595]   - Field: ‘calls’
[17:02:04.595]   - Field: ‘globals’
[17:02:04.595]   - Field: ‘stdout’
[17:02:04.595]   - Field: ‘earlySignal’
[17:02:04.596]   - Field: ‘lazy’
[17:02:04.596]   - Field: ‘state’
[17:02:04.596] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:04.596] - Launch lazy future ...
[17:02:04.597] Packages needed by the future expression (n = 0): <none>
[17:02:04.597] Packages needed by future strategies (n = 0): <none>
[17:02:04.597] {
[17:02:04.597]     {
[17:02:04.597]         {
[17:02:04.597]             ...future.startTime <- base::Sys.time()
[17:02:04.597]             {
[17:02:04.597]                 {
[17:02:04.597]                   {
[17:02:04.597]                     base::local({
[17:02:04.597]                       has_future <- base::requireNamespace("future", 
[17:02:04.597]                         quietly = TRUE)
[17:02:04.597]                       if (has_future) {
[17:02:04.597]                         ns <- base::getNamespace("future")
[17:02:04.597]                         version <- ns[[".package"]][["version"]]
[17:02:04.597]                         if (is.null(version)) 
[17:02:04.597]                           version <- utils::packageVersion("future")
[17:02:04.597]                       }
[17:02:04.597]                       else {
[17:02:04.597]                         version <- NULL
[17:02:04.597]                       }
[17:02:04.597]                       if (!has_future || version < "1.8.0") {
[17:02:04.597]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.597]                           "", base::R.version$version.string), 
[17:02:04.597]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:04.597]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.597]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.597]                             "release", "version")], collapse = " "), 
[17:02:04.597]                           hostname = base::Sys.info()[["nodename"]])
[17:02:04.597]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.597]                           info)
[17:02:04.597]                         info <- base::paste(info, collapse = "; ")
[17:02:04.597]                         if (!has_future) {
[17:02:04.597]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.597]                             info)
[17:02:04.597]                         }
[17:02:04.597]                         else {
[17:02:04.597]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.597]                             info, version)
[17:02:04.597]                         }
[17:02:04.597]                         base::stop(msg)
[17:02:04.597]                       }
[17:02:04.597]                     })
[17:02:04.597]                   }
[17:02:04.597]                   ...future.strategy.old <- future::plan("list")
[17:02:04.597]                   options(future.plan = NULL)
[17:02:04.597]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.597]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.597]                 }
[17:02:04.597]                 ...future.workdir <- getwd()
[17:02:04.597]             }
[17:02:04.597]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.597]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.597]         }
[17:02:04.597]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.597]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.597]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.597]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.597]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.597]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.597]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.597]             base::names(...future.oldOptions))
[17:02:04.597]     }
[17:02:04.597]     if (FALSE) {
[17:02:04.597]     }
[17:02:04.597]     else {
[17:02:04.597]         if (TRUE) {
[17:02:04.597]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.597]                 open = "w")
[17:02:04.597]         }
[17:02:04.597]         else {
[17:02:04.597]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.597]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.597]         }
[17:02:04.597]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.597]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.597]             base::sink(type = "output", split = FALSE)
[17:02:04.597]             base::close(...future.stdout)
[17:02:04.597]         }, add = TRUE)
[17:02:04.597]     }
[17:02:04.597]     ...future.frame <- base::sys.nframe()
[17:02:04.597]     ...future.conditions <- base::list()
[17:02:04.597]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.597]     if (FALSE) {
[17:02:04.597]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.597]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.597]     }
[17:02:04.597]     ...future.result <- base::tryCatch({
[17:02:04.597]         base::withCallingHandlers({
[17:02:04.597]             ...future.value <- base::withVisible(base::local({
[17:02:04.597]                 do.call(function(...) {
[17:02:04.597]                   sum(x, ...)
[17:02:04.597]                 }, args = future.call.arguments)
[17:02:04.597]             }))
[17:02:04.597]             future::FutureResult(value = ...future.value$value, 
[17:02:04.597]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.597]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.597]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.597]                     ...future.globalenv.names))
[17:02:04.597]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.597]         }, condition = base::local({
[17:02:04.597]             c <- base::c
[17:02:04.597]             inherits <- base::inherits
[17:02:04.597]             invokeRestart <- base::invokeRestart
[17:02:04.597]             length <- base::length
[17:02:04.597]             list <- base::list
[17:02:04.597]             seq.int <- base::seq.int
[17:02:04.597]             signalCondition <- base::signalCondition
[17:02:04.597]             sys.calls <- base::sys.calls
[17:02:04.597]             `[[` <- base::`[[`
[17:02:04.597]             `+` <- base::`+`
[17:02:04.597]             `<<-` <- base::`<<-`
[17:02:04.597]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.597]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.597]                   3L)]
[17:02:04.597]             }
[17:02:04.597]             function(cond) {
[17:02:04.597]                 is_error <- inherits(cond, "error")
[17:02:04.597]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.597]                   NULL)
[17:02:04.597]                 if (is_error) {
[17:02:04.597]                   sessionInformation <- function() {
[17:02:04.597]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.597]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.597]                       search = base::search(), system = base::Sys.info())
[17:02:04.597]                   }
[17:02:04.597]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.597]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.597]                     cond$call), session = sessionInformation(), 
[17:02:04.597]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.597]                   signalCondition(cond)
[17:02:04.597]                 }
[17:02:04.597]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.597]                 "immediateCondition"))) {
[17:02:04.597]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.597]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.597]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.597]                   if (TRUE && !signal) {
[17:02:04.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.597]                     {
[17:02:04.597]                       inherits <- base::inherits
[17:02:04.597]                       invokeRestart <- base::invokeRestart
[17:02:04.597]                       is.null <- base::is.null
[17:02:04.597]                       muffled <- FALSE
[17:02:04.597]                       if (inherits(cond, "message")) {
[17:02:04.597]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.597]                         if (muffled) 
[17:02:04.597]                           invokeRestart("muffleMessage")
[17:02:04.597]                       }
[17:02:04.597]                       else if (inherits(cond, "warning")) {
[17:02:04.597]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.597]                         if (muffled) 
[17:02:04.597]                           invokeRestart("muffleWarning")
[17:02:04.597]                       }
[17:02:04.597]                       else if (inherits(cond, "condition")) {
[17:02:04.597]                         if (!is.null(pattern)) {
[17:02:04.597]                           computeRestarts <- base::computeRestarts
[17:02:04.597]                           grepl <- base::grepl
[17:02:04.597]                           restarts <- computeRestarts(cond)
[17:02:04.597]                           for (restart in restarts) {
[17:02:04.597]                             name <- restart$name
[17:02:04.597]                             if (is.null(name)) 
[17:02:04.597]                               next
[17:02:04.597]                             if (!grepl(pattern, name)) 
[17:02:04.597]                               next
[17:02:04.597]                             invokeRestart(restart)
[17:02:04.597]                             muffled <- TRUE
[17:02:04.597]                             break
[17:02:04.597]                           }
[17:02:04.597]                         }
[17:02:04.597]                       }
[17:02:04.597]                       invisible(muffled)
[17:02:04.597]                     }
[17:02:04.597]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.597]                   }
[17:02:04.597]                 }
[17:02:04.597]                 else {
[17:02:04.597]                   if (TRUE) {
[17:02:04.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.597]                     {
[17:02:04.597]                       inherits <- base::inherits
[17:02:04.597]                       invokeRestart <- base::invokeRestart
[17:02:04.597]                       is.null <- base::is.null
[17:02:04.597]                       muffled <- FALSE
[17:02:04.597]                       if (inherits(cond, "message")) {
[17:02:04.597]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.597]                         if (muffled) 
[17:02:04.597]                           invokeRestart("muffleMessage")
[17:02:04.597]                       }
[17:02:04.597]                       else if (inherits(cond, "warning")) {
[17:02:04.597]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.597]                         if (muffled) 
[17:02:04.597]                           invokeRestart("muffleWarning")
[17:02:04.597]                       }
[17:02:04.597]                       else if (inherits(cond, "condition")) {
[17:02:04.597]                         if (!is.null(pattern)) {
[17:02:04.597]                           computeRestarts <- base::computeRestarts
[17:02:04.597]                           grepl <- base::grepl
[17:02:04.597]                           restarts <- computeRestarts(cond)
[17:02:04.597]                           for (restart in restarts) {
[17:02:04.597]                             name <- restart$name
[17:02:04.597]                             if (is.null(name)) 
[17:02:04.597]                               next
[17:02:04.597]                             if (!grepl(pattern, name)) 
[17:02:04.597]                               next
[17:02:04.597]                             invokeRestart(restart)
[17:02:04.597]                             muffled <- TRUE
[17:02:04.597]                             break
[17:02:04.597]                           }
[17:02:04.597]                         }
[17:02:04.597]                       }
[17:02:04.597]                       invisible(muffled)
[17:02:04.597]                     }
[17:02:04.597]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.597]                   }
[17:02:04.597]                 }
[17:02:04.597]             }
[17:02:04.597]         }))
[17:02:04.597]     }, error = function(ex) {
[17:02:04.597]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.597]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.597]                 ...future.rng), started = ...future.startTime, 
[17:02:04.597]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.597]             version = "1.8"), class = "FutureResult")
[17:02:04.597]     }, finally = {
[17:02:04.597]         if (!identical(...future.workdir, getwd())) 
[17:02:04.597]             setwd(...future.workdir)
[17:02:04.597]         {
[17:02:04.597]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.597]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.597]             }
[17:02:04.597]             base::options(...future.oldOptions)
[17:02:04.597]             if (.Platform$OS.type == "windows") {
[17:02:04.597]                 old_names <- names(...future.oldEnvVars)
[17:02:04.597]                 envs <- base::Sys.getenv()
[17:02:04.597]                 names <- names(envs)
[17:02:04.597]                 common <- intersect(names, old_names)
[17:02:04.597]                 added <- setdiff(names, old_names)
[17:02:04.597]                 removed <- setdiff(old_names, names)
[17:02:04.597]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.597]                   envs[common]]
[17:02:04.597]                 NAMES <- toupper(changed)
[17:02:04.597]                 args <- list()
[17:02:04.597]                 for (kk in seq_along(NAMES)) {
[17:02:04.597]                   name <- changed[[kk]]
[17:02:04.597]                   NAME <- NAMES[[kk]]
[17:02:04.597]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.597]                     next
[17:02:04.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.597]                 }
[17:02:04.597]                 NAMES <- toupper(added)
[17:02:04.597]                 for (kk in seq_along(NAMES)) {
[17:02:04.597]                   name <- added[[kk]]
[17:02:04.597]                   NAME <- NAMES[[kk]]
[17:02:04.597]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.597]                     next
[17:02:04.597]                   args[[name]] <- ""
[17:02:04.597]                 }
[17:02:04.597]                 NAMES <- toupper(removed)
[17:02:04.597]                 for (kk in seq_along(NAMES)) {
[17:02:04.597]                   name <- removed[[kk]]
[17:02:04.597]                   NAME <- NAMES[[kk]]
[17:02:04.597]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.597]                     next
[17:02:04.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.597]                 }
[17:02:04.597]                 if (length(args) > 0) 
[17:02:04.597]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.597]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.597]             }
[17:02:04.597]             else {
[17:02:04.597]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.597]             }
[17:02:04.597]             {
[17:02:04.597]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.597]                   0L) {
[17:02:04.597]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.597]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.597]                   base::options(opts)
[17:02:04.597]                 }
[17:02:04.597]                 {
[17:02:04.597]                   {
[17:02:04.597]                     NULL
[17:02:04.597]                     RNGkind("Mersenne-Twister")
[17:02:04.597]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:04.597]                       inherits = FALSE)
[17:02:04.597]                   }
[17:02:04.597]                   options(future.plan = NULL)
[17:02:04.597]                   if (is.na(NA_character_)) 
[17:02:04.597]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.597]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.597]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.597]                     .init = FALSE)
[17:02:04.597]                 }
[17:02:04.597]             }
[17:02:04.597]         }
[17:02:04.597]     })
[17:02:04.597]     if (TRUE) {
[17:02:04.597]         base::sink(type = "output", split = FALSE)
[17:02:04.597]         if (TRUE) {
[17:02:04.597]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.597]         }
[17:02:04.597]         else {
[17:02:04.597]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.597]         }
[17:02:04.597]         base::close(...future.stdout)
[17:02:04.597]         ...future.stdout <- NULL
[17:02:04.597]     }
[17:02:04.597]     ...future.result$conditions <- ...future.conditions
[17:02:04.597]     ...future.result$finished <- base::Sys.time()
[17:02:04.597]     ...future.result
[17:02:04.597] }
[17:02:04.599] assign_globals() ...
[17:02:04.599] List of 2
[17:02:04.599]  $ x                    : int [1:2] 1 2
[17:02:04.599]  $ future.call.arguments:List of 1
[17:02:04.599]   ..$ : num 3
[17:02:04.599]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:02:04.599]  - attr(*, "where")=List of 2
[17:02:04.599]   ..$ x                    :<environment: R_EmptyEnv> 
[17:02:04.599]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:02:04.599]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.599]  - attr(*, "resolved")= logi FALSE
[17:02:04.599]  - attr(*, "total_size")= num 112
[17:02:04.599]  - attr(*, "already-done")= logi TRUE
[17:02:04.605] - copied ‘x’ to environment
[17:02:04.605] - copied ‘future.call.arguments’ to environment
[17:02:04.605] assign_globals() ... done
[17:02:04.606] plan(): Setting new future strategy stack:
[17:02:04.606] List of future strategies:
[17:02:04.606] 1. sequential:
[17:02:04.606]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.606]    - tweaked: FALSE
[17:02:04.606]    - call: NULL
[17:02:04.606] plan(): nbrOfWorkers() = 1
[17:02:04.607] plan(): Setting new future strategy stack:
[17:02:04.607] List of future strategies:
[17:02:04.607] 1. sequential:
[17:02:04.607]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.607]    - tweaked: FALSE
[17:02:04.607]    - call: plan(strategy, substitute = FALSE)
[17:02:04.608] plan(): nbrOfWorkers() = 1
[17:02:04.608] SequentialFuture started (and completed)
[17:02:04.609] - Launch lazy future ... done
[17:02:04.609] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5572d1d33410>
Arguments '...' exists: TRUE
[17:02:04.610] getGlobalsAndPackages() ...
[17:02:04.610] Searching for globals...
[17:02:04.611] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:02:04.611] Searching for globals ... DONE
[17:02:04.611] Resolving globals: FALSE
[17:02:04.611] Tweak future expression to call with '...' arguments ...
[17:02:04.611] {
[17:02:04.611]     do.call(function(...) {
[17:02:04.611]         sum(x, ...)
[17:02:04.611]     }, args = future.call.arguments)
[17:02:04.611] }
[17:02:04.612] Tweak future expression to call with '...' arguments ... DONE
[17:02:04.612] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.613] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:02:04.613] - globals: [2] ‘x’, ‘future.call.arguments’
[17:02:04.613] 
[17:02:04.613] getGlobalsAndPackages() ... DONE
[17:02:04.613] run() for ‘Future’ ...
[17:02:04.613] - state: ‘created’
[17:02:04.613] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:04.614] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:04.614] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:04.614]   - Field: ‘label’
[17:02:04.614]   - Field: ‘local’
[17:02:04.614]   - Field: ‘owner’
[17:02:04.614]   - Field: ‘envir’
[17:02:04.614]   - Field: ‘packages’
[17:02:04.614]   - Field: ‘gc’
[17:02:04.614]   - Field: ‘conditions’
[17:02:04.614]   - Field: ‘expr’
[17:02:04.615]   - Field: ‘uuid’
[17:02:04.615]   - Field: ‘seed’
[17:02:04.615]   - Field: ‘version’
[17:02:04.615]   - Field: ‘result’
[17:02:04.615]   - Field: ‘asynchronous’
[17:02:04.615]   - Field: ‘calls’
[17:02:04.615]   - Field: ‘globals’
[17:02:04.615]   - Field: ‘stdout’
[17:02:04.615]   - Field: ‘earlySignal’
[17:02:04.615]   - Field: ‘lazy’
[17:02:04.616]   - Field: ‘state’
[17:02:04.616] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:04.616] - Launch lazy future ...
[17:02:04.616] Packages needed by the future expression (n = 0): <none>
[17:02:04.616] Packages needed by future strategies (n = 0): <none>
[17:02:04.616] {
[17:02:04.616]     {
[17:02:04.616]         {
[17:02:04.616]             ...future.startTime <- base::Sys.time()
[17:02:04.616]             {
[17:02:04.616]                 {
[17:02:04.616]                   {
[17:02:04.616]                     base::local({
[17:02:04.616]                       has_future <- base::requireNamespace("future", 
[17:02:04.616]                         quietly = TRUE)
[17:02:04.616]                       if (has_future) {
[17:02:04.616]                         ns <- base::getNamespace("future")
[17:02:04.616]                         version <- ns[[".package"]][["version"]]
[17:02:04.616]                         if (is.null(version)) 
[17:02:04.616]                           version <- utils::packageVersion("future")
[17:02:04.616]                       }
[17:02:04.616]                       else {
[17:02:04.616]                         version <- NULL
[17:02:04.616]                       }
[17:02:04.616]                       if (!has_future || version < "1.8.0") {
[17:02:04.616]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.616]                           "", base::R.version$version.string), 
[17:02:04.616]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:04.616]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.616]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.616]                             "release", "version")], collapse = " "), 
[17:02:04.616]                           hostname = base::Sys.info()[["nodename"]])
[17:02:04.616]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.616]                           info)
[17:02:04.616]                         info <- base::paste(info, collapse = "; ")
[17:02:04.616]                         if (!has_future) {
[17:02:04.616]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.616]                             info)
[17:02:04.616]                         }
[17:02:04.616]                         else {
[17:02:04.616]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.616]                             info, version)
[17:02:04.616]                         }
[17:02:04.616]                         base::stop(msg)
[17:02:04.616]                       }
[17:02:04.616]                     })
[17:02:04.616]                   }
[17:02:04.616]                   ...future.strategy.old <- future::plan("list")
[17:02:04.616]                   options(future.plan = NULL)
[17:02:04.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.616]                 }
[17:02:04.616]                 ...future.workdir <- getwd()
[17:02:04.616]             }
[17:02:04.616]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.616]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.616]         }
[17:02:04.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.616]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.616]             base::names(...future.oldOptions))
[17:02:04.616]     }
[17:02:04.616]     if (FALSE) {
[17:02:04.616]     }
[17:02:04.616]     else {
[17:02:04.616]         if (TRUE) {
[17:02:04.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.616]                 open = "w")
[17:02:04.616]         }
[17:02:04.616]         else {
[17:02:04.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.616]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.616]         }
[17:02:04.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.616]             base::sink(type = "output", split = FALSE)
[17:02:04.616]             base::close(...future.stdout)
[17:02:04.616]         }, add = TRUE)
[17:02:04.616]     }
[17:02:04.616]     ...future.frame <- base::sys.nframe()
[17:02:04.616]     ...future.conditions <- base::list()
[17:02:04.616]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.616]     if (FALSE) {
[17:02:04.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.616]     }
[17:02:04.616]     ...future.result <- base::tryCatch({
[17:02:04.616]         base::withCallingHandlers({
[17:02:04.616]             ...future.value <- base::withVisible(base::local({
[17:02:04.616]                 do.call(function(...) {
[17:02:04.616]                   sum(x, ...)
[17:02:04.616]                 }, args = future.call.arguments)
[17:02:04.616]             }))
[17:02:04.616]             future::FutureResult(value = ...future.value$value, 
[17:02:04.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.616]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.616]                     ...future.globalenv.names))
[17:02:04.616]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.616]         }, condition = base::local({
[17:02:04.616]             c <- base::c
[17:02:04.616]             inherits <- base::inherits
[17:02:04.616]             invokeRestart <- base::invokeRestart
[17:02:04.616]             length <- base::length
[17:02:04.616]             list <- base::list
[17:02:04.616]             seq.int <- base::seq.int
[17:02:04.616]             signalCondition <- base::signalCondition
[17:02:04.616]             sys.calls <- base::sys.calls
[17:02:04.616]             `[[` <- base::`[[`
[17:02:04.616]             `+` <- base::`+`
[17:02:04.616]             `<<-` <- base::`<<-`
[17:02:04.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.616]                   3L)]
[17:02:04.616]             }
[17:02:04.616]             function(cond) {
[17:02:04.616]                 is_error <- inherits(cond, "error")
[17:02:04.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.616]                   NULL)
[17:02:04.616]                 if (is_error) {
[17:02:04.616]                   sessionInformation <- function() {
[17:02:04.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.616]                       search = base::search(), system = base::Sys.info())
[17:02:04.616]                   }
[17:02:04.616]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.616]                     cond$call), session = sessionInformation(), 
[17:02:04.616]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.616]                   signalCondition(cond)
[17:02:04.616]                 }
[17:02:04.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.616]                 "immediateCondition"))) {
[17:02:04.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.616]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.616]                   if (TRUE && !signal) {
[17:02:04.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.616]                     {
[17:02:04.616]                       inherits <- base::inherits
[17:02:04.616]                       invokeRestart <- base::invokeRestart
[17:02:04.616]                       is.null <- base::is.null
[17:02:04.616]                       muffled <- FALSE
[17:02:04.616]                       if (inherits(cond, "message")) {
[17:02:04.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.616]                         if (muffled) 
[17:02:04.616]                           invokeRestart("muffleMessage")
[17:02:04.616]                       }
[17:02:04.616]                       else if (inherits(cond, "warning")) {
[17:02:04.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.616]                         if (muffled) 
[17:02:04.616]                           invokeRestart("muffleWarning")
[17:02:04.616]                       }
[17:02:04.616]                       else if (inherits(cond, "condition")) {
[17:02:04.616]                         if (!is.null(pattern)) {
[17:02:04.616]                           computeRestarts <- base::computeRestarts
[17:02:04.616]                           grepl <- base::grepl
[17:02:04.616]                           restarts <- computeRestarts(cond)
[17:02:04.616]                           for (restart in restarts) {
[17:02:04.616]                             name <- restart$name
[17:02:04.616]                             if (is.null(name)) 
[17:02:04.616]                               next
[17:02:04.616]                             if (!grepl(pattern, name)) 
[17:02:04.616]                               next
[17:02:04.616]                             invokeRestart(restart)
[17:02:04.616]                             muffled <- TRUE
[17:02:04.616]                             break
[17:02:04.616]                           }
[17:02:04.616]                         }
[17:02:04.616]                       }
[17:02:04.616]                       invisible(muffled)
[17:02:04.616]                     }
[17:02:04.616]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.616]                   }
[17:02:04.616]                 }
[17:02:04.616]                 else {
[17:02:04.616]                   if (TRUE) {
[17:02:04.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.616]                     {
[17:02:04.616]                       inherits <- base::inherits
[17:02:04.616]                       invokeRestart <- base::invokeRestart
[17:02:04.616]                       is.null <- base::is.null
[17:02:04.616]                       muffled <- FALSE
[17:02:04.616]                       if (inherits(cond, "message")) {
[17:02:04.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.616]                         if (muffled) 
[17:02:04.616]                           invokeRestart("muffleMessage")
[17:02:04.616]                       }
[17:02:04.616]                       else if (inherits(cond, "warning")) {
[17:02:04.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.616]                         if (muffled) 
[17:02:04.616]                           invokeRestart("muffleWarning")
[17:02:04.616]                       }
[17:02:04.616]                       else if (inherits(cond, "condition")) {
[17:02:04.616]                         if (!is.null(pattern)) {
[17:02:04.616]                           computeRestarts <- base::computeRestarts
[17:02:04.616]                           grepl <- base::grepl
[17:02:04.616]                           restarts <- computeRestarts(cond)
[17:02:04.616]                           for (restart in restarts) {
[17:02:04.616]                             name <- restart$name
[17:02:04.616]                             if (is.null(name)) 
[17:02:04.616]                               next
[17:02:04.616]                             if (!grepl(pattern, name)) 
[17:02:04.616]                               next
[17:02:04.616]                             invokeRestart(restart)
[17:02:04.616]                             muffled <- TRUE
[17:02:04.616]                             break
[17:02:04.616]                           }
[17:02:04.616]                         }
[17:02:04.616]                       }
[17:02:04.616]                       invisible(muffled)
[17:02:04.616]                     }
[17:02:04.616]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.616]                   }
[17:02:04.616]                 }
[17:02:04.616]             }
[17:02:04.616]         }))
[17:02:04.616]     }, error = function(ex) {
[17:02:04.616]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.616]                 ...future.rng), started = ...future.startTime, 
[17:02:04.616]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.616]             version = "1.8"), class = "FutureResult")
[17:02:04.616]     }, finally = {
[17:02:04.616]         if (!identical(...future.workdir, getwd())) 
[17:02:04.616]             setwd(...future.workdir)
[17:02:04.616]         {
[17:02:04.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.616]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.616]             }
[17:02:04.616]             base::options(...future.oldOptions)
[17:02:04.616]             if (.Platform$OS.type == "windows") {
[17:02:04.616]                 old_names <- names(...future.oldEnvVars)
[17:02:04.616]                 envs <- base::Sys.getenv()
[17:02:04.616]                 names <- names(envs)
[17:02:04.616]                 common <- intersect(names, old_names)
[17:02:04.616]                 added <- setdiff(names, old_names)
[17:02:04.616]                 removed <- setdiff(old_names, names)
[17:02:04.616]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.616]                   envs[common]]
[17:02:04.616]                 NAMES <- toupper(changed)
[17:02:04.616]                 args <- list()
[17:02:04.616]                 for (kk in seq_along(NAMES)) {
[17:02:04.616]                   name <- changed[[kk]]
[17:02:04.616]                   NAME <- NAMES[[kk]]
[17:02:04.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.616]                     next
[17:02:04.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.616]                 }
[17:02:04.616]                 NAMES <- toupper(added)
[17:02:04.616]                 for (kk in seq_along(NAMES)) {
[17:02:04.616]                   name <- added[[kk]]
[17:02:04.616]                   NAME <- NAMES[[kk]]
[17:02:04.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.616]                     next
[17:02:04.616]                   args[[name]] <- ""
[17:02:04.616]                 }
[17:02:04.616]                 NAMES <- toupper(removed)
[17:02:04.616]                 for (kk in seq_along(NAMES)) {
[17:02:04.616]                   name <- removed[[kk]]
[17:02:04.616]                   NAME <- NAMES[[kk]]
[17:02:04.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.616]                     next
[17:02:04.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.616]                 }
[17:02:04.616]                 if (length(args) > 0) 
[17:02:04.616]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.616]             }
[17:02:04.616]             else {
[17:02:04.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.616]             }
[17:02:04.616]             {
[17:02:04.616]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.616]                   0L) {
[17:02:04.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.616]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.616]                   base::options(opts)
[17:02:04.616]                 }
[17:02:04.616]                 {
[17:02:04.616]                   {
[17:02:04.616]                     NULL
[17:02:04.616]                     RNGkind("Mersenne-Twister")
[17:02:04.616]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:04.616]                       inherits = FALSE)
[17:02:04.616]                   }
[17:02:04.616]                   options(future.plan = NULL)
[17:02:04.616]                   if (is.na(NA_character_)) 
[17:02:04.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.616]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.616]                     .init = FALSE)
[17:02:04.616]                 }
[17:02:04.616]             }
[17:02:04.616]         }
[17:02:04.616]     })
[17:02:04.616]     if (TRUE) {
[17:02:04.616]         base::sink(type = "output", split = FALSE)
[17:02:04.616]         if (TRUE) {
[17:02:04.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.616]         }
[17:02:04.616]         else {
[17:02:04.616]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.616]         }
[17:02:04.616]         base::close(...future.stdout)
[17:02:04.616]         ...future.stdout <- NULL
[17:02:04.616]     }
[17:02:04.616]     ...future.result$conditions <- ...future.conditions
[17:02:04.616]     ...future.result$finished <- base::Sys.time()
[17:02:04.616]     ...future.result
[17:02:04.616] }
[17:02:04.618] assign_globals() ...
[17:02:04.618] List of 2
[17:02:04.618]  $ x                    : int [1:2] 1 2
[17:02:04.618]  $ future.call.arguments:List of 1
[17:02:04.618]   ..$ : num 3
[17:02:04.618]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:02:04.618]  - attr(*, "where")=List of 2
[17:02:04.618]   ..$ x                    :<environment: R_EmptyEnv> 
[17:02:04.618]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:02:04.618]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.618]  - attr(*, "resolved")= logi FALSE
[17:02:04.618]  - attr(*, "total_size")= num 112
[17:02:04.618]  - attr(*, "already-done")= logi TRUE
[17:02:04.622] - copied ‘x’ to environment
[17:02:04.622] - copied ‘future.call.arguments’ to environment
[17:02:04.622] assign_globals() ... done
[17:02:04.622] plan(): Setting new future strategy stack:
[17:02:04.622] List of future strategies:
[17:02:04.622] 1. sequential:
[17:02:04.622]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.622]    - tweaked: FALSE
[17:02:04.622]    - call: NULL
[17:02:04.623] plan(): nbrOfWorkers() = 1
[17:02:04.623] plan(): Setting new future strategy stack:
[17:02:04.623] List of future strategies:
[17:02:04.623] 1. sequential:
[17:02:04.623]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.623]    - tweaked: FALSE
[17:02:04.623]    - call: plan(strategy, substitute = FALSE)
[17:02:04.624] plan(): nbrOfWorkers() = 1
[17:02:04.624] SequentialFuture started (and completed)
[17:02:04.624] - Launch lazy future ... done
[17:02:04.624] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5572d1f014a0>
Arguments '...' exists: FALSE
[17:02:04.627] getGlobalsAndPackages() ...
[17:02:04.627] Searching for globals...
[17:02:04.628] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[17:02:04.628] Searching for globals ... DONE
[17:02:04.629] Resolving globals: FALSE
[17:02:04.629] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.629] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:04.629] - globals: [2] ‘x’, ‘y’
[17:02:04.630] 
[17:02:04.630] getGlobalsAndPackages() ... DONE
[17:02:04.630] run() for ‘Future’ ...
[17:02:04.630] - state: ‘created’
[17:02:04.630] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:04.630] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:04.631] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:04.631]   - Field: ‘label’
[17:02:04.631]   - Field: ‘local’
[17:02:04.631]   - Field: ‘owner’
[17:02:04.631]   - Field: ‘envir’
[17:02:04.631]   - Field: ‘packages’
[17:02:04.631]   - Field: ‘gc’
[17:02:04.631]   - Field: ‘conditions’
[17:02:04.631]   - Field: ‘expr’
[17:02:04.631]   - Field: ‘uuid’
[17:02:04.631]   - Field: ‘seed’
[17:02:04.632]   - Field: ‘version’
[17:02:04.632]   - Field: ‘result’
[17:02:04.632]   - Field: ‘asynchronous’
[17:02:04.632]   - Field: ‘calls’
[17:02:04.632]   - Field: ‘globals’
[17:02:04.632]   - Field: ‘stdout’
[17:02:04.632]   - Field: ‘earlySignal’
[17:02:04.632]   - Field: ‘lazy’
[17:02:04.632]   - Field: ‘state’
[17:02:04.632] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:04.633] - Launch lazy future ...
[17:02:04.633] Packages needed by the future expression (n = 0): <none>
[17:02:04.633] Packages needed by future strategies (n = 0): <none>
[17:02:04.633] {
[17:02:04.633]     {
[17:02:04.633]         {
[17:02:04.633]             ...future.startTime <- base::Sys.time()
[17:02:04.633]             {
[17:02:04.633]                 {
[17:02:04.633]                   {
[17:02:04.633]                     base::local({
[17:02:04.633]                       has_future <- base::requireNamespace("future", 
[17:02:04.633]                         quietly = TRUE)
[17:02:04.633]                       if (has_future) {
[17:02:04.633]                         ns <- base::getNamespace("future")
[17:02:04.633]                         version <- ns[[".package"]][["version"]]
[17:02:04.633]                         if (is.null(version)) 
[17:02:04.633]                           version <- utils::packageVersion("future")
[17:02:04.633]                       }
[17:02:04.633]                       else {
[17:02:04.633]                         version <- NULL
[17:02:04.633]                       }
[17:02:04.633]                       if (!has_future || version < "1.8.0") {
[17:02:04.633]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.633]                           "", base::R.version$version.string), 
[17:02:04.633]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:04.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.633]                             "release", "version")], collapse = " "), 
[17:02:04.633]                           hostname = base::Sys.info()[["nodename"]])
[17:02:04.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.633]                           info)
[17:02:04.633]                         info <- base::paste(info, collapse = "; ")
[17:02:04.633]                         if (!has_future) {
[17:02:04.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.633]                             info)
[17:02:04.633]                         }
[17:02:04.633]                         else {
[17:02:04.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.633]                             info, version)
[17:02:04.633]                         }
[17:02:04.633]                         base::stop(msg)
[17:02:04.633]                       }
[17:02:04.633]                     })
[17:02:04.633]                   }
[17:02:04.633]                   ...future.strategy.old <- future::plan("list")
[17:02:04.633]                   options(future.plan = NULL)
[17:02:04.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.633]                 }
[17:02:04.633]                 ...future.workdir <- getwd()
[17:02:04.633]             }
[17:02:04.633]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.633]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.633]         }
[17:02:04.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.633]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.633]             base::names(...future.oldOptions))
[17:02:04.633]     }
[17:02:04.633]     if (FALSE) {
[17:02:04.633]     }
[17:02:04.633]     else {
[17:02:04.633]         if (TRUE) {
[17:02:04.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.633]                 open = "w")
[17:02:04.633]         }
[17:02:04.633]         else {
[17:02:04.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.633]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.633]         }
[17:02:04.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.633]             base::sink(type = "output", split = FALSE)
[17:02:04.633]             base::close(...future.stdout)
[17:02:04.633]         }, add = TRUE)
[17:02:04.633]     }
[17:02:04.633]     ...future.frame <- base::sys.nframe()
[17:02:04.633]     ...future.conditions <- base::list()
[17:02:04.633]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.633]     if (FALSE) {
[17:02:04.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.633]     }
[17:02:04.633]     ...future.result <- base::tryCatch({
[17:02:04.633]         base::withCallingHandlers({
[17:02:04.633]             ...future.value <- base::withVisible(base::local({
[17:02:04.633]                 sum(x, y)
[17:02:04.633]             }))
[17:02:04.633]             future::FutureResult(value = ...future.value$value, 
[17:02:04.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.633]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.633]                     ...future.globalenv.names))
[17:02:04.633]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.633]         }, condition = base::local({
[17:02:04.633]             c <- base::c
[17:02:04.633]             inherits <- base::inherits
[17:02:04.633]             invokeRestart <- base::invokeRestart
[17:02:04.633]             length <- base::length
[17:02:04.633]             list <- base::list
[17:02:04.633]             seq.int <- base::seq.int
[17:02:04.633]             signalCondition <- base::signalCondition
[17:02:04.633]             sys.calls <- base::sys.calls
[17:02:04.633]             `[[` <- base::`[[`
[17:02:04.633]             `+` <- base::`+`
[17:02:04.633]             `<<-` <- base::`<<-`
[17:02:04.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.633]                   3L)]
[17:02:04.633]             }
[17:02:04.633]             function(cond) {
[17:02:04.633]                 is_error <- inherits(cond, "error")
[17:02:04.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.633]                   NULL)
[17:02:04.633]                 if (is_error) {
[17:02:04.633]                   sessionInformation <- function() {
[17:02:04.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.633]                       search = base::search(), system = base::Sys.info())
[17:02:04.633]                   }
[17:02:04.633]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.633]                     cond$call), session = sessionInformation(), 
[17:02:04.633]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.633]                   signalCondition(cond)
[17:02:04.633]                 }
[17:02:04.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.633]                 "immediateCondition"))) {
[17:02:04.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.633]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.633]                   if (TRUE && !signal) {
[17:02:04.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.633]                     {
[17:02:04.633]                       inherits <- base::inherits
[17:02:04.633]                       invokeRestart <- base::invokeRestart
[17:02:04.633]                       is.null <- base::is.null
[17:02:04.633]                       muffled <- FALSE
[17:02:04.633]                       if (inherits(cond, "message")) {
[17:02:04.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.633]                         if (muffled) 
[17:02:04.633]                           invokeRestart("muffleMessage")
[17:02:04.633]                       }
[17:02:04.633]                       else if (inherits(cond, "warning")) {
[17:02:04.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.633]                         if (muffled) 
[17:02:04.633]                           invokeRestart("muffleWarning")
[17:02:04.633]                       }
[17:02:04.633]                       else if (inherits(cond, "condition")) {
[17:02:04.633]                         if (!is.null(pattern)) {
[17:02:04.633]                           computeRestarts <- base::computeRestarts
[17:02:04.633]                           grepl <- base::grepl
[17:02:04.633]                           restarts <- computeRestarts(cond)
[17:02:04.633]                           for (restart in restarts) {
[17:02:04.633]                             name <- restart$name
[17:02:04.633]                             if (is.null(name)) 
[17:02:04.633]                               next
[17:02:04.633]                             if (!grepl(pattern, name)) 
[17:02:04.633]                               next
[17:02:04.633]                             invokeRestart(restart)
[17:02:04.633]                             muffled <- TRUE
[17:02:04.633]                             break
[17:02:04.633]                           }
[17:02:04.633]                         }
[17:02:04.633]                       }
[17:02:04.633]                       invisible(muffled)
[17:02:04.633]                     }
[17:02:04.633]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.633]                   }
[17:02:04.633]                 }
[17:02:04.633]                 else {
[17:02:04.633]                   if (TRUE) {
[17:02:04.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.633]                     {
[17:02:04.633]                       inherits <- base::inherits
[17:02:04.633]                       invokeRestart <- base::invokeRestart
[17:02:04.633]                       is.null <- base::is.null
[17:02:04.633]                       muffled <- FALSE
[17:02:04.633]                       if (inherits(cond, "message")) {
[17:02:04.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.633]                         if (muffled) 
[17:02:04.633]                           invokeRestart("muffleMessage")
[17:02:04.633]                       }
[17:02:04.633]                       else if (inherits(cond, "warning")) {
[17:02:04.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.633]                         if (muffled) 
[17:02:04.633]                           invokeRestart("muffleWarning")
[17:02:04.633]                       }
[17:02:04.633]                       else if (inherits(cond, "condition")) {
[17:02:04.633]                         if (!is.null(pattern)) {
[17:02:04.633]                           computeRestarts <- base::computeRestarts
[17:02:04.633]                           grepl <- base::grepl
[17:02:04.633]                           restarts <- computeRestarts(cond)
[17:02:04.633]                           for (restart in restarts) {
[17:02:04.633]                             name <- restart$name
[17:02:04.633]                             if (is.null(name)) 
[17:02:04.633]                               next
[17:02:04.633]                             if (!grepl(pattern, name)) 
[17:02:04.633]                               next
[17:02:04.633]                             invokeRestart(restart)
[17:02:04.633]                             muffled <- TRUE
[17:02:04.633]                             break
[17:02:04.633]                           }
[17:02:04.633]                         }
[17:02:04.633]                       }
[17:02:04.633]                       invisible(muffled)
[17:02:04.633]                     }
[17:02:04.633]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.633]                   }
[17:02:04.633]                 }
[17:02:04.633]             }
[17:02:04.633]         }))
[17:02:04.633]     }, error = function(ex) {
[17:02:04.633]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.633]                 ...future.rng), started = ...future.startTime, 
[17:02:04.633]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.633]             version = "1.8"), class = "FutureResult")
[17:02:04.633]     }, finally = {
[17:02:04.633]         if (!identical(...future.workdir, getwd())) 
[17:02:04.633]             setwd(...future.workdir)
[17:02:04.633]         {
[17:02:04.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.633]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.633]             }
[17:02:04.633]             base::options(...future.oldOptions)
[17:02:04.633]             if (.Platform$OS.type == "windows") {
[17:02:04.633]                 old_names <- names(...future.oldEnvVars)
[17:02:04.633]                 envs <- base::Sys.getenv()
[17:02:04.633]                 names <- names(envs)
[17:02:04.633]                 common <- intersect(names, old_names)
[17:02:04.633]                 added <- setdiff(names, old_names)
[17:02:04.633]                 removed <- setdiff(old_names, names)
[17:02:04.633]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.633]                   envs[common]]
[17:02:04.633]                 NAMES <- toupper(changed)
[17:02:04.633]                 args <- list()
[17:02:04.633]                 for (kk in seq_along(NAMES)) {
[17:02:04.633]                   name <- changed[[kk]]
[17:02:04.633]                   NAME <- NAMES[[kk]]
[17:02:04.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.633]                     next
[17:02:04.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.633]                 }
[17:02:04.633]                 NAMES <- toupper(added)
[17:02:04.633]                 for (kk in seq_along(NAMES)) {
[17:02:04.633]                   name <- added[[kk]]
[17:02:04.633]                   NAME <- NAMES[[kk]]
[17:02:04.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.633]                     next
[17:02:04.633]                   args[[name]] <- ""
[17:02:04.633]                 }
[17:02:04.633]                 NAMES <- toupper(removed)
[17:02:04.633]                 for (kk in seq_along(NAMES)) {
[17:02:04.633]                   name <- removed[[kk]]
[17:02:04.633]                   NAME <- NAMES[[kk]]
[17:02:04.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.633]                     next
[17:02:04.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.633]                 }
[17:02:04.633]                 if (length(args) > 0) 
[17:02:04.633]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.633]             }
[17:02:04.633]             else {
[17:02:04.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.633]             }
[17:02:04.633]             {
[17:02:04.633]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.633]                   0L) {
[17:02:04.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.633]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.633]                   base::options(opts)
[17:02:04.633]                 }
[17:02:04.633]                 {
[17:02:04.633]                   {
[17:02:04.633]                     NULL
[17:02:04.633]                     RNGkind("Mersenne-Twister")
[17:02:04.633]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:04.633]                       inherits = FALSE)
[17:02:04.633]                   }
[17:02:04.633]                   options(future.plan = NULL)
[17:02:04.633]                   if (is.na(NA_character_)) 
[17:02:04.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.633]                     .init = FALSE)
[17:02:04.633]                 }
[17:02:04.633]             }
[17:02:04.633]         }
[17:02:04.633]     })
[17:02:04.633]     if (TRUE) {
[17:02:04.633]         base::sink(type = "output", split = FALSE)
[17:02:04.633]         if (TRUE) {
[17:02:04.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.633]         }
[17:02:04.633]         else {
[17:02:04.633]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.633]         }
[17:02:04.633]         base::close(...future.stdout)
[17:02:04.633]         ...future.stdout <- NULL
[17:02:04.633]     }
[17:02:04.633]     ...future.result$conditions <- ...future.conditions
[17:02:04.633]     ...future.result$finished <- base::Sys.time()
[17:02:04.633]     ...future.result
[17:02:04.633] }
[17:02:04.635] assign_globals() ...
[17:02:04.635] List of 2
[17:02:04.635]  $ x: int [1:2] 1 2
[17:02:04.635]  $ y: num 3
[17:02:04.635]  - attr(*, "where")=List of 2
[17:02:04.635]   ..$ x:<environment: R_EmptyEnv> 
[17:02:04.635]   ..$ y:<environment: R_EmptyEnv> 
[17:02:04.635]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.635]  - attr(*, "resolved")= logi FALSE
[17:02:04.635]  - attr(*, "total_size")= num 112
[17:02:04.635]  - attr(*, "already-done")= logi TRUE
[17:02:04.638] - copied ‘x’ to environment
[17:02:04.638] - copied ‘y’ to environment
[17:02:04.638] assign_globals() ... done
[17:02:04.638] plan(): Setting new future strategy stack:
[17:02:04.638] List of future strategies:
[17:02:04.638] 1. sequential:
[17:02:04.638]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.638]    - tweaked: FALSE
[17:02:04.638]    - call: NULL
[17:02:04.639] plan(): nbrOfWorkers() = 1
[17:02:04.639] plan(): Setting new future strategy stack:
[17:02:04.640] List of future strategies:
[17:02:04.640] 1. sequential:
[17:02:04.640]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.640]    - tweaked: FALSE
[17:02:04.640]    - call: plan(strategy, substitute = FALSE)
[17:02:04.640] plan(): nbrOfWorkers() = 1
[17:02:04.640] SequentialFuture started (and completed)
[17:02:04.640] - Launch lazy future ... done
[17:02:04.640] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5572d209d0f8>
Arguments '...' exists: FALSE
[17:02:04.641] getGlobalsAndPackages() ...
[17:02:04.641] Searching for globals...
[17:02:04.642] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[17:02:04.642] Searching for globals ... DONE
[17:02:04.643] Resolving globals: FALSE
[17:02:04.643] Tweak future expression to call with '...' arguments ...
[17:02:04.643] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.644] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:04.644] - globals: [2] ‘x’, ‘y’
[17:02:04.644] 
[17:02:04.644] getGlobalsAndPackages() ... DONE
[17:02:04.644] run() for ‘Future’ ...
[17:02:04.644] - state: ‘created’
[17:02:04.644] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:04.645] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:04.645] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:04.645]   - Field: ‘label’
[17:02:04.645]   - Field: ‘local’
[17:02:04.645]   - Field: ‘owner’
[17:02:04.645]   - Field: ‘envir’
[17:02:04.645]   - Field: ‘packages’
[17:02:04.645]   - Field: ‘gc’
[17:02:04.645]   - Field: ‘conditions’
[17:02:04.645]   - Field: ‘expr’
[17:02:04.645]   - Field: ‘uuid’
[17:02:04.646]   - Field: ‘seed’
[17:02:04.646]   - Field: ‘version’
[17:02:04.646]   - Field: ‘result’
[17:02:04.646]   - Field: ‘asynchronous’
[17:02:04.646]   - Field: ‘calls’
[17:02:04.646]   - Field: ‘globals’
[17:02:04.646]   - Field: ‘stdout’
[17:02:04.646]   - Field: ‘earlySignal’
[17:02:04.646]   - Field: ‘lazy’
[17:02:04.646]   - Field: ‘state’
[17:02:04.646] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:04.647] - Launch lazy future ...
[17:02:04.647] Packages needed by the future expression (n = 0): <none>
[17:02:04.647] Packages needed by future strategies (n = 0): <none>
[17:02:04.647] {
[17:02:04.647]     {
[17:02:04.647]         {
[17:02:04.647]             ...future.startTime <- base::Sys.time()
[17:02:04.647]             {
[17:02:04.647]                 {
[17:02:04.647]                   {
[17:02:04.647]                     base::local({
[17:02:04.647]                       has_future <- base::requireNamespace("future", 
[17:02:04.647]                         quietly = TRUE)
[17:02:04.647]                       if (has_future) {
[17:02:04.647]                         ns <- base::getNamespace("future")
[17:02:04.647]                         version <- ns[[".package"]][["version"]]
[17:02:04.647]                         if (is.null(version)) 
[17:02:04.647]                           version <- utils::packageVersion("future")
[17:02:04.647]                       }
[17:02:04.647]                       else {
[17:02:04.647]                         version <- NULL
[17:02:04.647]                       }
[17:02:04.647]                       if (!has_future || version < "1.8.0") {
[17:02:04.647]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.647]                           "", base::R.version$version.string), 
[17:02:04.647]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:04.647]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.647]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.647]                             "release", "version")], collapse = " "), 
[17:02:04.647]                           hostname = base::Sys.info()[["nodename"]])
[17:02:04.647]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.647]                           info)
[17:02:04.647]                         info <- base::paste(info, collapse = "; ")
[17:02:04.647]                         if (!has_future) {
[17:02:04.647]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.647]                             info)
[17:02:04.647]                         }
[17:02:04.647]                         else {
[17:02:04.647]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.647]                             info, version)
[17:02:04.647]                         }
[17:02:04.647]                         base::stop(msg)
[17:02:04.647]                       }
[17:02:04.647]                     })
[17:02:04.647]                   }
[17:02:04.647]                   ...future.strategy.old <- future::plan("list")
[17:02:04.647]                   options(future.plan = NULL)
[17:02:04.647]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.647]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.647]                 }
[17:02:04.647]                 ...future.workdir <- getwd()
[17:02:04.647]             }
[17:02:04.647]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.647]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.647]         }
[17:02:04.647]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.647]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.647]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.647]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.647]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.647]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.647]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.647]             base::names(...future.oldOptions))
[17:02:04.647]     }
[17:02:04.647]     if (FALSE) {
[17:02:04.647]     }
[17:02:04.647]     else {
[17:02:04.647]         if (TRUE) {
[17:02:04.647]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.647]                 open = "w")
[17:02:04.647]         }
[17:02:04.647]         else {
[17:02:04.647]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.647]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.647]         }
[17:02:04.647]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.647]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.647]             base::sink(type = "output", split = FALSE)
[17:02:04.647]             base::close(...future.stdout)
[17:02:04.647]         }, add = TRUE)
[17:02:04.647]     }
[17:02:04.647]     ...future.frame <- base::sys.nframe()
[17:02:04.647]     ...future.conditions <- base::list()
[17:02:04.647]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.647]     if (FALSE) {
[17:02:04.647]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.647]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.647]     }
[17:02:04.647]     ...future.result <- base::tryCatch({
[17:02:04.647]         base::withCallingHandlers({
[17:02:04.647]             ...future.value <- base::withVisible(base::local({
[17:02:04.647]                 sum(x, y, ...)
[17:02:04.647]             }))
[17:02:04.647]             future::FutureResult(value = ...future.value$value, 
[17:02:04.647]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.647]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.647]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.647]                     ...future.globalenv.names))
[17:02:04.647]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.647]         }, condition = base::local({
[17:02:04.647]             c <- base::c
[17:02:04.647]             inherits <- base::inherits
[17:02:04.647]             invokeRestart <- base::invokeRestart
[17:02:04.647]             length <- base::length
[17:02:04.647]             list <- base::list
[17:02:04.647]             seq.int <- base::seq.int
[17:02:04.647]             signalCondition <- base::signalCondition
[17:02:04.647]             sys.calls <- base::sys.calls
[17:02:04.647]             `[[` <- base::`[[`
[17:02:04.647]             `+` <- base::`+`
[17:02:04.647]             `<<-` <- base::`<<-`
[17:02:04.647]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.647]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.647]                   3L)]
[17:02:04.647]             }
[17:02:04.647]             function(cond) {
[17:02:04.647]                 is_error <- inherits(cond, "error")
[17:02:04.647]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.647]                   NULL)
[17:02:04.647]                 if (is_error) {
[17:02:04.647]                   sessionInformation <- function() {
[17:02:04.647]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.647]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.647]                       search = base::search(), system = base::Sys.info())
[17:02:04.647]                   }
[17:02:04.647]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.647]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.647]                     cond$call), session = sessionInformation(), 
[17:02:04.647]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.647]                   signalCondition(cond)
[17:02:04.647]                 }
[17:02:04.647]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.647]                 "immediateCondition"))) {
[17:02:04.647]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.647]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.647]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.647]                   if (TRUE && !signal) {
[17:02:04.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.647]                     {
[17:02:04.647]                       inherits <- base::inherits
[17:02:04.647]                       invokeRestart <- base::invokeRestart
[17:02:04.647]                       is.null <- base::is.null
[17:02:04.647]                       muffled <- FALSE
[17:02:04.647]                       if (inherits(cond, "message")) {
[17:02:04.647]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.647]                         if (muffled) 
[17:02:04.647]                           invokeRestart("muffleMessage")
[17:02:04.647]                       }
[17:02:04.647]                       else if (inherits(cond, "warning")) {
[17:02:04.647]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.647]                         if (muffled) 
[17:02:04.647]                           invokeRestart("muffleWarning")
[17:02:04.647]                       }
[17:02:04.647]                       else if (inherits(cond, "condition")) {
[17:02:04.647]                         if (!is.null(pattern)) {
[17:02:04.647]                           computeRestarts <- base::computeRestarts
[17:02:04.647]                           grepl <- base::grepl
[17:02:04.647]                           restarts <- computeRestarts(cond)
[17:02:04.647]                           for (restart in restarts) {
[17:02:04.647]                             name <- restart$name
[17:02:04.647]                             if (is.null(name)) 
[17:02:04.647]                               next
[17:02:04.647]                             if (!grepl(pattern, name)) 
[17:02:04.647]                               next
[17:02:04.647]                             invokeRestart(restart)
[17:02:04.647]                             muffled <- TRUE
[17:02:04.647]                             break
[17:02:04.647]                           }
[17:02:04.647]                         }
[17:02:04.647]                       }
[17:02:04.647]                       invisible(muffled)
[17:02:04.647]                     }
[17:02:04.647]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.647]                   }
[17:02:04.647]                 }
[17:02:04.647]                 else {
[17:02:04.647]                   if (TRUE) {
[17:02:04.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.647]                     {
[17:02:04.647]                       inherits <- base::inherits
[17:02:04.647]                       invokeRestart <- base::invokeRestart
[17:02:04.647]                       is.null <- base::is.null
[17:02:04.647]                       muffled <- FALSE
[17:02:04.647]                       if (inherits(cond, "message")) {
[17:02:04.647]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.647]                         if (muffled) 
[17:02:04.647]                           invokeRestart("muffleMessage")
[17:02:04.647]                       }
[17:02:04.647]                       else if (inherits(cond, "warning")) {
[17:02:04.647]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.647]                         if (muffled) 
[17:02:04.647]                           invokeRestart("muffleWarning")
[17:02:04.647]                       }
[17:02:04.647]                       else if (inherits(cond, "condition")) {
[17:02:04.647]                         if (!is.null(pattern)) {
[17:02:04.647]                           computeRestarts <- base::computeRestarts
[17:02:04.647]                           grepl <- base::grepl
[17:02:04.647]                           restarts <- computeRestarts(cond)
[17:02:04.647]                           for (restart in restarts) {
[17:02:04.647]                             name <- restart$name
[17:02:04.647]                             if (is.null(name)) 
[17:02:04.647]                               next
[17:02:04.647]                             if (!grepl(pattern, name)) 
[17:02:04.647]                               next
[17:02:04.647]                             invokeRestart(restart)
[17:02:04.647]                             muffled <- TRUE
[17:02:04.647]                             break
[17:02:04.647]                           }
[17:02:04.647]                         }
[17:02:04.647]                       }
[17:02:04.647]                       invisible(muffled)
[17:02:04.647]                     }
[17:02:04.647]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.647]                   }
[17:02:04.647]                 }
[17:02:04.647]             }
[17:02:04.647]         }))
[17:02:04.647]     }, error = function(ex) {
[17:02:04.647]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.647]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.647]                 ...future.rng), started = ...future.startTime, 
[17:02:04.647]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.647]             version = "1.8"), class = "FutureResult")
[17:02:04.647]     }, finally = {
[17:02:04.647]         if (!identical(...future.workdir, getwd())) 
[17:02:04.647]             setwd(...future.workdir)
[17:02:04.647]         {
[17:02:04.647]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.647]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.647]             }
[17:02:04.647]             base::options(...future.oldOptions)
[17:02:04.647]             if (.Platform$OS.type == "windows") {
[17:02:04.647]                 old_names <- names(...future.oldEnvVars)
[17:02:04.647]                 envs <- base::Sys.getenv()
[17:02:04.647]                 names <- names(envs)
[17:02:04.647]                 common <- intersect(names, old_names)
[17:02:04.647]                 added <- setdiff(names, old_names)
[17:02:04.647]                 removed <- setdiff(old_names, names)
[17:02:04.647]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.647]                   envs[common]]
[17:02:04.647]                 NAMES <- toupper(changed)
[17:02:04.647]                 args <- list()
[17:02:04.647]                 for (kk in seq_along(NAMES)) {
[17:02:04.647]                   name <- changed[[kk]]
[17:02:04.647]                   NAME <- NAMES[[kk]]
[17:02:04.647]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.647]                     next
[17:02:04.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.647]                 }
[17:02:04.647]                 NAMES <- toupper(added)
[17:02:04.647]                 for (kk in seq_along(NAMES)) {
[17:02:04.647]                   name <- added[[kk]]
[17:02:04.647]                   NAME <- NAMES[[kk]]
[17:02:04.647]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.647]                     next
[17:02:04.647]                   args[[name]] <- ""
[17:02:04.647]                 }
[17:02:04.647]                 NAMES <- toupper(removed)
[17:02:04.647]                 for (kk in seq_along(NAMES)) {
[17:02:04.647]                   name <- removed[[kk]]
[17:02:04.647]                   NAME <- NAMES[[kk]]
[17:02:04.647]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.647]                     next
[17:02:04.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.647]                 }
[17:02:04.647]                 if (length(args) > 0) 
[17:02:04.647]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.647]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.647]             }
[17:02:04.647]             else {
[17:02:04.647]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.647]             }
[17:02:04.647]             {
[17:02:04.647]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.647]                   0L) {
[17:02:04.647]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.647]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.647]                   base::options(opts)
[17:02:04.647]                 }
[17:02:04.647]                 {
[17:02:04.647]                   {
[17:02:04.647]                     NULL
[17:02:04.647]                     RNGkind("Mersenne-Twister")
[17:02:04.647]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:04.647]                       inherits = FALSE)
[17:02:04.647]                   }
[17:02:04.647]                   options(future.plan = NULL)
[17:02:04.647]                   if (is.na(NA_character_)) 
[17:02:04.647]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.647]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.647]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.647]                     .init = FALSE)
[17:02:04.647]                 }
[17:02:04.647]             }
[17:02:04.647]         }
[17:02:04.647]     })
[17:02:04.647]     if (TRUE) {
[17:02:04.647]         base::sink(type = "output", split = FALSE)
[17:02:04.647]         if (TRUE) {
[17:02:04.647]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.647]         }
[17:02:04.647]         else {
[17:02:04.647]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.647]         }
[17:02:04.647]         base::close(...future.stdout)
[17:02:04.647]         ...future.stdout <- NULL
[17:02:04.647]     }
[17:02:04.647]     ...future.result$conditions <- ...future.conditions
[17:02:04.647]     ...future.result$finished <- base::Sys.time()
[17:02:04.647]     ...future.result
[17:02:04.647] }
[17:02:04.649] assign_globals() ...
[17:02:04.649] List of 2
[17:02:04.649]  $ x: int [1:2] 1 2
[17:02:04.649]  $ y: num 3
[17:02:04.649]  - attr(*, "where")=List of 2
[17:02:04.649]   ..$ x:<environment: R_EmptyEnv> 
[17:02:04.649]   ..$ y:<environment: R_EmptyEnv> 
[17:02:04.649]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.649]  - attr(*, "resolved")= logi FALSE
[17:02:04.649]  - attr(*, "total_size")= num 112
[17:02:04.649]  - attr(*, "already-done")= logi TRUE
[17:02:04.652] - copied ‘x’ to environment
[17:02:04.652] - copied ‘y’ to environment
[17:02:04.652] assign_globals() ... done
[17:02:04.652] plan(): Setting new future strategy stack:
[17:02:04.652] List of future strategies:
[17:02:04.652] 1. sequential:
[17:02:04.652]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.652]    - tweaked: FALSE
[17:02:04.652]    - call: NULL
[17:02:04.653] plan(): nbrOfWorkers() = 1
[17:02:04.654] plan(): Setting new future strategy stack:
[17:02:04.654] List of future strategies:
[17:02:04.654] 1. sequential:
[17:02:04.654]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.654]    - tweaked: FALSE
[17:02:04.654]    - call: plan(strategy, substitute = FALSE)
[17:02:04.654] plan(): nbrOfWorkers() = 1
[17:02:04.654] SequentialFuture started (and completed)
[17:02:04.654] signalConditions() ...
[17:02:04.655]  - include = ‘immediateCondition’
[17:02:04.655]  - exclude = 
[17:02:04.655]  - resignal = FALSE
[17:02:04.655]  - Number of conditions: 1
[17:02:04.655] signalConditions() ... done
[17:02:04.655] - Launch lazy future ... done
[17:02:04.655] run() for ‘SequentialFuture’ ... done
[17:02:04.655] signalConditions() ...
[17:02:04.655]  - include = ‘immediateCondition’
[17:02:04.655]  - exclude = 
[17:02:04.656]  - resignal = FALSE
[17:02:04.656]  - Number of conditions: 1
[17:02:04.656] signalConditions() ... done
[17:02:04.657] Future state: ‘finished’
[17:02:04.658] signalConditions() ...
[17:02:04.658]  - include = ‘condition’
[17:02:04.658]  - exclude = ‘immediateCondition’
[17:02:04.658]  - resignal = TRUE
[17:02:04.658]  - Number of conditions: 1
[17:02:04.658]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:04.658] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5572d26887d0>
Arguments '...' exists: TRUE
[17:02:04.659] getGlobalsAndPackages() ...
[17:02:04.659] - globals passed as-is: [1] ‘...’
[17:02:04.659] Resolving globals: FALSE
[17:02:04.659] Tweak future expression to call with '...' arguments ...
[17:02:04.659] {
[17:02:04.659]     do.call(function(...) {
[17:02:04.659]         fcn <- function() sum(...)
[17:02:04.659]         fcn()
[17:02:04.659]     }, args = future.call.arguments)
[17:02:04.659] }
[17:02:04.660] Tweak future expression to call with '...' arguments ... DONE
[17:02:04.660] The total size of the 1 globals is 112 bytes (112 bytes)
[17:02:04.660] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[17:02:04.660] - globals: [1] ‘future.call.arguments’
[17:02:04.660] 
[17:02:04.661] getGlobalsAndPackages() ... DONE
[17:02:04.661] run() for ‘Future’ ...
[17:02:04.661] - state: ‘created’
[17:02:04.661] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:04.661] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:04.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:04.661]   - Field: ‘label’
[17:02:04.662]   - Field: ‘local’
[17:02:04.662]   - Field: ‘owner’
[17:02:04.662]   - Field: ‘envir’
[17:02:04.662]   - Field: ‘packages’
[17:02:04.662]   - Field: ‘gc’
[17:02:04.662]   - Field: ‘conditions’
[17:02:04.662]   - Field: ‘expr’
[17:02:04.662]   - Field: ‘uuid’
[17:02:04.662]   - Field: ‘seed’
[17:02:04.662]   - Field: ‘version’
[17:02:04.662]   - Field: ‘result’
[17:02:04.663]   - Field: ‘asynchronous’
[17:02:04.663]   - Field: ‘calls’
[17:02:04.663]   - Field: ‘globals’
[17:02:04.663]   - Field: ‘stdout’
[17:02:04.663]   - Field: ‘earlySignal’
[17:02:04.663]   - Field: ‘lazy’
[17:02:04.663]   - Field: ‘state’
[17:02:04.663] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:04.663] - Launch lazy future ...
[17:02:04.664] Packages needed by the future expression (n = 0): <none>
[17:02:04.664] Packages needed by future strategies (n = 0): <none>
[17:02:04.664] {
[17:02:04.664]     {
[17:02:04.664]         {
[17:02:04.664]             ...future.startTime <- base::Sys.time()
[17:02:04.664]             {
[17:02:04.664]                 {
[17:02:04.664]                   {
[17:02:04.664]                     base::local({
[17:02:04.664]                       has_future <- base::requireNamespace("future", 
[17:02:04.664]                         quietly = TRUE)
[17:02:04.664]                       if (has_future) {
[17:02:04.664]                         ns <- base::getNamespace("future")
[17:02:04.664]                         version <- ns[[".package"]][["version"]]
[17:02:04.664]                         if (is.null(version)) 
[17:02:04.664]                           version <- utils::packageVersion("future")
[17:02:04.664]                       }
[17:02:04.664]                       else {
[17:02:04.664]                         version <- NULL
[17:02:04.664]                       }
[17:02:04.664]                       if (!has_future || version < "1.8.0") {
[17:02:04.664]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.664]                           "", base::R.version$version.string), 
[17:02:04.664]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:04.664]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.664]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.664]                             "release", "version")], collapse = " "), 
[17:02:04.664]                           hostname = base::Sys.info()[["nodename"]])
[17:02:04.664]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.664]                           info)
[17:02:04.664]                         info <- base::paste(info, collapse = "; ")
[17:02:04.664]                         if (!has_future) {
[17:02:04.664]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.664]                             info)
[17:02:04.664]                         }
[17:02:04.664]                         else {
[17:02:04.664]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.664]                             info, version)
[17:02:04.664]                         }
[17:02:04.664]                         base::stop(msg)
[17:02:04.664]                       }
[17:02:04.664]                     })
[17:02:04.664]                   }
[17:02:04.664]                   ...future.strategy.old <- future::plan("list")
[17:02:04.664]                   options(future.plan = NULL)
[17:02:04.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.664]                 }
[17:02:04.664]                 ...future.workdir <- getwd()
[17:02:04.664]             }
[17:02:04.664]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.664]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.664]         }
[17:02:04.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.664]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.664]             base::names(...future.oldOptions))
[17:02:04.664]     }
[17:02:04.664]     if (FALSE) {
[17:02:04.664]     }
[17:02:04.664]     else {
[17:02:04.664]         if (TRUE) {
[17:02:04.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.664]                 open = "w")
[17:02:04.664]         }
[17:02:04.664]         else {
[17:02:04.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.664]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.664]         }
[17:02:04.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.664]             base::sink(type = "output", split = FALSE)
[17:02:04.664]             base::close(...future.stdout)
[17:02:04.664]         }, add = TRUE)
[17:02:04.664]     }
[17:02:04.664]     ...future.frame <- base::sys.nframe()
[17:02:04.664]     ...future.conditions <- base::list()
[17:02:04.664]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.664]     if (FALSE) {
[17:02:04.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.664]     }
[17:02:04.664]     ...future.result <- base::tryCatch({
[17:02:04.664]         base::withCallingHandlers({
[17:02:04.664]             ...future.value <- base::withVisible(base::local({
[17:02:04.664]                 do.call(function(...) {
[17:02:04.664]                   fcn <- function() sum(...)
[17:02:04.664]                   fcn()
[17:02:04.664]                 }, args = future.call.arguments)
[17:02:04.664]             }))
[17:02:04.664]             future::FutureResult(value = ...future.value$value, 
[17:02:04.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.664]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.664]                     ...future.globalenv.names))
[17:02:04.664]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.664]         }, condition = base::local({
[17:02:04.664]             c <- base::c
[17:02:04.664]             inherits <- base::inherits
[17:02:04.664]             invokeRestart <- base::invokeRestart
[17:02:04.664]             length <- base::length
[17:02:04.664]             list <- base::list
[17:02:04.664]             seq.int <- base::seq.int
[17:02:04.664]             signalCondition <- base::signalCondition
[17:02:04.664]             sys.calls <- base::sys.calls
[17:02:04.664]             `[[` <- base::`[[`
[17:02:04.664]             `+` <- base::`+`
[17:02:04.664]             `<<-` <- base::`<<-`
[17:02:04.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.664]                   3L)]
[17:02:04.664]             }
[17:02:04.664]             function(cond) {
[17:02:04.664]                 is_error <- inherits(cond, "error")
[17:02:04.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.664]                   NULL)
[17:02:04.664]                 if (is_error) {
[17:02:04.664]                   sessionInformation <- function() {
[17:02:04.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.664]                       search = base::search(), system = base::Sys.info())
[17:02:04.664]                   }
[17:02:04.664]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.664]                     cond$call), session = sessionInformation(), 
[17:02:04.664]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.664]                   signalCondition(cond)
[17:02:04.664]                 }
[17:02:04.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.664]                 "immediateCondition"))) {
[17:02:04.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.664]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.664]                   if (TRUE && !signal) {
[17:02:04.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.664]                     {
[17:02:04.664]                       inherits <- base::inherits
[17:02:04.664]                       invokeRestart <- base::invokeRestart
[17:02:04.664]                       is.null <- base::is.null
[17:02:04.664]                       muffled <- FALSE
[17:02:04.664]                       if (inherits(cond, "message")) {
[17:02:04.664]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.664]                         if (muffled) 
[17:02:04.664]                           invokeRestart("muffleMessage")
[17:02:04.664]                       }
[17:02:04.664]                       else if (inherits(cond, "warning")) {
[17:02:04.664]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.664]                         if (muffled) 
[17:02:04.664]                           invokeRestart("muffleWarning")
[17:02:04.664]                       }
[17:02:04.664]                       else if (inherits(cond, "condition")) {
[17:02:04.664]                         if (!is.null(pattern)) {
[17:02:04.664]                           computeRestarts <- base::computeRestarts
[17:02:04.664]                           grepl <- base::grepl
[17:02:04.664]                           restarts <- computeRestarts(cond)
[17:02:04.664]                           for (restart in restarts) {
[17:02:04.664]                             name <- restart$name
[17:02:04.664]                             if (is.null(name)) 
[17:02:04.664]                               next
[17:02:04.664]                             if (!grepl(pattern, name)) 
[17:02:04.664]                               next
[17:02:04.664]                             invokeRestart(restart)
[17:02:04.664]                             muffled <- TRUE
[17:02:04.664]                             break
[17:02:04.664]                           }
[17:02:04.664]                         }
[17:02:04.664]                       }
[17:02:04.664]                       invisible(muffled)
[17:02:04.664]                     }
[17:02:04.664]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.664]                   }
[17:02:04.664]                 }
[17:02:04.664]                 else {
[17:02:04.664]                   if (TRUE) {
[17:02:04.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.664]                     {
[17:02:04.664]                       inherits <- base::inherits
[17:02:04.664]                       invokeRestart <- base::invokeRestart
[17:02:04.664]                       is.null <- base::is.null
[17:02:04.664]                       muffled <- FALSE
[17:02:04.664]                       if (inherits(cond, "message")) {
[17:02:04.664]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.664]                         if (muffled) 
[17:02:04.664]                           invokeRestart("muffleMessage")
[17:02:04.664]                       }
[17:02:04.664]                       else if (inherits(cond, "warning")) {
[17:02:04.664]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.664]                         if (muffled) 
[17:02:04.664]                           invokeRestart("muffleWarning")
[17:02:04.664]                       }
[17:02:04.664]                       else if (inherits(cond, "condition")) {
[17:02:04.664]                         if (!is.null(pattern)) {
[17:02:04.664]                           computeRestarts <- base::computeRestarts
[17:02:04.664]                           grepl <- base::grepl
[17:02:04.664]                           restarts <- computeRestarts(cond)
[17:02:04.664]                           for (restart in restarts) {
[17:02:04.664]                             name <- restart$name
[17:02:04.664]                             if (is.null(name)) 
[17:02:04.664]                               next
[17:02:04.664]                             if (!grepl(pattern, name)) 
[17:02:04.664]                               next
[17:02:04.664]                             invokeRestart(restart)
[17:02:04.664]                             muffled <- TRUE
[17:02:04.664]                             break
[17:02:04.664]                           }
[17:02:04.664]                         }
[17:02:04.664]                       }
[17:02:04.664]                       invisible(muffled)
[17:02:04.664]                     }
[17:02:04.664]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.664]                   }
[17:02:04.664]                 }
[17:02:04.664]             }
[17:02:04.664]         }))
[17:02:04.664]     }, error = function(ex) {
[17:02:04.664]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.664]                 ...future.rng), started = ...future.startTime, 
[17:02:04.664]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.664]             version = "1.8"), class = "FutureResult")
[17:02:04.664]     }, finally = {
[17:02:04.664]         if (!identical(...future.workdir, getwd())) 
[17:02:04.664]             setwd(...future.workdir)
[17:02:04.664]         {
[17:02:04.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.664]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.664]             }
[17:02:04.664]             base::options(...future.oldOptions)
[17:02:04.664]             if (.Platform$OS.type == "windows") {
[17:02:04.664]                 old_names <- names(...future.oldEnvVars)
[17:02:04.664]                 envs <- base::Sys.getenv()
[17:02:04.664]                 names <- names(envs)
[17:02:04.664]                 common <- intersect(names, old_names)
[17:02:04.664]                 added <- setdiff(names, old_names)
[17:02:04.664]                 removed <- setdiff(old_names, names)
[17:02:04.664]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.664]                   envs[common]]
[17:02:04.664]                 NAMES <- toupper(changed)
[17:02:04.664]                 args <- list()
[17:02:04.664]                 for (kk in seq_along(NAMES)) {
[17:02:04.664]                   name <- changed[[kk]]
[17:02:04.664]                   NAME <- NAMES[[kk]]
[17:02:04.664]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.664]                     next
[17:02:04.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.664]                 }
[17:02:04.664]                 NAMES <- toupper(added)
[17:02:04.664]                 for (kk in seq_along(NAMES)) {
[17:02:04.664]                   name <- added[[kk]]
[17:02:04.664]                   NAME <- NAMES[[kk]]
[17:02:04.664]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.664]                     next
[17:02:04.664]                   args[[name]] <- ""
[17:02:04.664]                 }
[17:02:04.664]                 NAMES <- toupper(removed)
[17:02:04.664]                 for (kk in seq_along(NAMES)) {
[17:02:04.664]                   name <- removed[[kk]]
[17:02:04.664]                   NAME <- NAMES[[kk]]
[17:02:04.664]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.664]                     next
[17:02:04.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.664]                 }
[17:02:04.664]                 if (length(args) > 0) 
[17:02:04.664]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.664]             }
[17:02:04.664]             else {
[17:02:04.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.664]             }
[17:02:04.664]             {
[17:02:04.664]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.664]                   0L) {
[17:02:04.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.664]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.664]                   base::options(opts)
[17:02:04.664]                 }
[17:02:04.664]                 {
[17:02:04.664]                   {
[17:02:04.664]                     NULL
[17:02:04.664]                     RNGkind("Mersenne-Twister")
[17:02:04.664]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:04.664]                       inherits = FALSE)
[17:02:04.664]                   }
[17:02:04.664]                   options(future.plan = NULL)
[17:02:04.664]                   if (is.na(NA_character_)) 
[17:02:04.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.664]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.664]                     .init = FALSE)
[17:02:04.664]                 }
[17:02:04.664]             }
[17:02:04.664]         }
[17:02:04.664]     })
[17:02:04.664]     if (TRUE) {
[17:02:04.664]         base::sink(type = "output", split = FALSE)
[17:02:04.664]         if (TRUE) {
[17:02:04.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.664]         }
[17:02:04.664]         else {
[17:02:04.664]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.664]         }
[17:02:04.664]         base::close(...future.stdout)
[17:02:04.664]         ...future.stdout <- NULL
[17:02:04.664]     }
[17:02:04.664]     ...future.result$conditions <- ...future.conditions
[17:02:04.664]     ...future.result$finished <- base::Sys.time()
[17:02:04.664]     ...future.result
[17:02:04.664] }
[17:02:04.666] assign_globals() ...
[17:02:04.666] List of 1
[17:02:04.666]  $ future.call.arguments:List of 2
[17:02:04.666]   ..$ : int [1:2] 1 2
[17:02:04.666]   ..$ : num 3
[17:02:04.666]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:02:04.666]  - attr(*, "where")=List of 1
[17:02:04.666]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:02:04.666]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.666]  - attr(*, "resolved")= logi FALSE
[17:02:04.666]  - attr(*, "total_size")= num 112
[17:02:04.666]  - attr(*, "already-done")= logi TRUE
[17:02:04.669] - copied ‘future.call.arguments’ to environment
[17:02:04.669] assign_globals() ... done
[17:02:04.669] plan(): Setting new future strategy stack:
[17:02:04.669] List of future strategies:
[17:02:04.669] 1. sequential:
[17:02:04.669]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.669]    - tweaked: FALSE
[17:02:04.669]    - call: NULL
[17:02:04.670] plan(): nbrOfWorkers() = 1
[17:02:04.670] plan(): Setting new future strategy stack:
[17:02:04.670] List of future strategies:
[17:02:04.670] 1. sequential:
[17:02:04.670]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.670]    - tweaked: FALSE
[17:02:04.670]    - call: plan(strategy, substitute = FALSE)
[17:02:04.671] plan(): nbrOfWorkers() = 1
[17:02:04.671] SequentialFuture started (and completed)
[17:02:04.671] - Launch lazy future ... done
[17:02:04.671] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5572d06cecc0>
Using '...' in a formula
[17:02:04.672] getGlobalsAndPackages() ...
[17:02:04.672] Searching for globals...
[17:02:04.675] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[17:02:04.675] Searching for globals ... DONE
[17:02:04.675] Resolving globals: FALSE
[17:02:04.675] Tweak future expression to call with '...' arguments ...
[17:02:04.676] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[17:02:04.676] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:04.676] - globals: [3] ‘fcn’, ‘x’, ‘y’
[17:02:04.676] 
[17:02:04.676] getGlobalsAndPackages() ... DONE
[17:02:04.677] run() for ‘Future’ ...
[17:02:04.677] - state: ‘created’
[17:02:04.677] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:04.677] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:04.677] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:04.677]   - Field: ‘label’
[17:02:04.677]   - Field: ‘local’
[17:02:04.677]   - Field: ‘owner’
[17:02:04.677]   - Field: ‘envir’
[17:02:04.678]   - Field: ‘packages’
[17:02:04.678]   - Field: ‘gc’
[17:02:04.678]   - Field: ‘conditions’
[17:02:04.678]   - Field: ‘expr’
[17:02:04.678]   - Field: ‘uuid’
[17:02:04.678]   - Field: ‘seed’
[17:02:04.678]   - Field: ‘version’
[17:02:04.678]   - Field: ‘result’
[17:02:04.678]   - Field: ‘asynchronous’
[17:02:04.678]   - Field: ‘calls’
[17:02:04.678]   - Field: ‘globals’
[17:02:04.679]   - Field: ‘stdout’
[17:02:04.679]   - Field: ‘earlySignal’
[17:02:04.679]   - Field: ‘lazy’
[17:02:04.679]   - Field: ‘state’
[17:02:04.679] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:04.679] - Launch lazy future ...
[17:02:04.679] Packages needed by the future expression (n = 0): <none>
[17:02:04.679] Packages needed by future strategies (n = 0): <none>
[17:02:04.680] {
[17:02:04.680]     {
[17:02:04.680]         {
[17:02:04.680]             ...future.startTime <- base::Sys.time()
[17:02:04.680]             {
[17:02:04.680]                 {
[17:02:04.680]                   {
[17:02:04.680]                     base::local({
[17:02:04.680]                       has_future <- base::requireNamespace("future", 
[17:02:04.680]                         quietly = TRUE)
[17:02:04.680]                       if (has_future) {
[17:02:04.680]                         ns <- base::getNamespace("future")
[17:02:04.680]                         version <- ns[[".package"]][["version"]]
[17:02:04.680]                         if (is.null(version)) 
[17:02:04.680]                           version <- utils::packageVersion("future")
[17:02:04.680]                       }
[17:02:04.680]                       else {
[17:02:04.680]                         version <- NULL
[17:02:04.680]                       }
[17:02:04.680]                       if (!has_future || version < "1.8.0") {
[17:02:04.680]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.680]                           "", base::R.version$version.string), 
[17:02:04.680]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:04.680]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.680]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.680]                             "release", "version")], collapse = " "), 
[17:02:04.680]                           hostname = base::Sys.info()[["nodename"]])
[17:02:04.680]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.680]                           info)
[17:02:04.680]                         info <- base::paste(info, collapse = "; ")
[17:02:04.680]                         if (!has_future) {
[17:02:04.680]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.680]                             info)
[17:02:04.680]                         }
[17:02:04.680]                         else {
[17:02:04.680]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.680]                             info, version)
[17:02:04.680]                         }
[17:02:04.680]                         base::stop(msg)
[17:02:04.680]                       }
[17:02:04.680]                     })
[17:02:04.680]                   }
[17:02:04.680]                   ...future.strategy.old <- future::plan("list")
[17:02:04.680]                   options(future.plan = NULL)
[17:02:04.680]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.680]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.680]                 }
[17:02:04.680]                 ...future.workdir <- getwd()
[17:02:04.680]             }
[17:02:04.680]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.680]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.680]         }
[17:02:04.680]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.680]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.680]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.680]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.680]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.680]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.680]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.680]             base::names(...future.oldOptions))
[17:02:04.680]     }
[17:02:04.680]     if (FALSE) {
[17:02:04.680]     }
[17:02:04.680]     else {
[17:02:04.680]         if (TRUE) {
[17:02:04.680]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.680]                 open = "w")
[17:02:04.680]         }
[17:02:04.680]         else {
[17:02:04.680]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.680]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.680]         }
[17:02:04.680]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.680]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.680]             base::sink(type = "output", split = FALSE)
[17:02:04.680]             base::close(...future.stdout)
[17:02:04.680]         }, add = TRUE)
[17:02:04.680]     }
[17:02:04.680]     ...future.frame <- base::sys.nframe()
[17:02:04.680]     ...future.conditions <- base::list()
[17:02:04.680]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.680]     if (FALSE) {
[17:02:04.680]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.680]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.680]     }
[17:02:04.680]     ...future.result <- base::tryCatch({
[17:02:04.680]         base::withCallingHandlers({
[17:02:04.680]             ...future.value <- base::withVisible(base::local(fcn(x, 
[17:02:04.680]                 y)))
[17:02:04.680]             future::FutureResult(value = ...future.value$value, 
[17:02:04.680]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.680]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.680]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.680]                     ...future.globalenv.names))
[17:02:04.680]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.680]         }, condition = base::local({
[17:02:04.680]             c <- base::c
[17:02:04.680]             inherits <- base::inherits
[17:02:04.680]             invokeRestart <- base::invokeRestart
[17:02:04.680]             length <- base::length
[17:02:04.680]             list <- base::list
[17:02:04.680]             seq.int <- base::seq.int
[17:02:04.680]             signalCondition <- base::signalCondition
[17:02:04.680]             sys.calls <- base::sys.calls
[17:02:04.680]             `[[` <- base::`[[`
[17:02:04.680]             `+` <- base::`+`
[17:02:04.680]             `<<-` <- base::`<<-`
[17:02:04.680]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.680]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.680]                   3L)]
[17:02:04.680]             }
[17:02:04.680]             function(cond) {
[17:02:04.680]                 is_error <- inherits(cond, "error")
[17:02:04.680]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.680]                   NULL)
[17:02:04.680]                 if (is_error) {
[17:02:04.680]                   sessionInformation <- function() {
[17:02:04.680]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.680]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.680]                       search = base::search(), system = base::Sys.info())
[17:02:04.680]                   }
[17:02:04.680]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.680]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.680]                     cond$call), session = sessionInformation(), 
[17:02:04.680]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.680]                   signalCondition(cond)
[17:02:04.680]                 }
[17:02:04.680]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.680]                 "immediateCondition"))) {
[17:02:04.680]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.680]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.680]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.680]                   if (TRUE && !signal) {
[17:02:04.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.680]                     {
[17:02:04.680]                       inherits <- base::inherits
[17:02:04.680]                       invokeRestart <- base::invokeRestart
[17:02:04.680]                       is.null <- base::is.null
[17:02:04.680]                       muffled <- FALSE
[17:02:04.680]                       if (inherits(cond, "message")) {
[17:02:04.680]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.680]                         if (muffled) 
[17:02:04.680]                           invokeRestart("muffleMessage")
[17:02:04.680]                       }
[17:02:04.680]                       else if (inherits(cond, "warning")) {
[17:02:04.680]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.680]                         if (muffled) 
[17:02:04.680]                           invokeRestart("muffleWarning")
[17:02:04.680]                       }
[17:02:04.680]                       else if (inherits(cond, "condition")) {
[17:02:04.680]                         if (!is.null(pattern)) {
[17:02:04.680]                           computeRestarts <- base::computeRestarts
[17:02:04.680]                           grepl <- base::grepl
[17:02:04.680]                           restarts <- computeRestarts(cond)
[17:02:04.680]                           for (restart in restarts) {
[17:02:04.680]                             name <- restart$name
[17:02:04.680]                             if (is.null(name)) 
[17:02:04.680]                               next
[17:02:04.680]                             if (!grepl(pattern, name)) 
[17:02:04.680]                               next
[17:02:04.680]                             invokeRestart(restart)
[17:02:04.680]                             muffled <- TRUE
[17:02:04.680]                             break
[17:02:04.680]                           }
[17:02:04.680]                         }
[17:02:04.680]                       }
[17:02:04.680]                       invisible(muffled)
[17:02:04.680]                     }
[17:02:04.680]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.680]                   }
[17:02:04.680]                 }
[17:02:04.680]                 else {
[17:02:04.680]                   if (TRUE) {
[17:02:04.680]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.680]                     {
[17:02:04.680]                       inherits <- base::inherits
[17:02:04.680]                       invokeRestart <- base::invokeRestart
[17:02:04.680]                       is.null <- base::is.null
[17:02:04.680]                       muffled <- FALSE
[17:02:04.680]                       if (inherits(cond, "message")) {
[17:02:04.680]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.680]                         if (muffled) 
[17:02:04.680]                           invokeRestart("muffleMessage")
[17:02:04.680]                       }
[17:02:04.680]                       else if (inherits(cond, "warning")) {
[17:02:04.680]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.680]                         if (muffled) 
[17:02:04.680]                           invokeRestart("muffleWarning")
[17:02:04.680]                       }
[17:02:04.680]                       else if (inherits(cond, "condition")) {
[17:02:04.680]                         if (!is.null(pattern)) {
[17:02:04.680]                           computeRestarts <- base::computeRestarts
[17:02:04.680]                           grepl <- base::grepl
[17:02:04.680]                           restarts <- computeRestarts(cond)
[17:02:04.680]                           for (restart in restarts) {
[17:02:04.680]                             name <- restart$name
[17:02:04.680]                             if (is.null(name)) 
[17:02:04.680]                               next
[17:02:04.680]                             if (!grepl(pattern, name)) 
[17:02:04.680]                               next
[17:02:04.680]                             invokeRestart(restart)
[17:02:04.680]                             muffled <- TRUE
[17:02:04.680]                             break
[17:02:04.680]                           }
[17:02:04.680]                         }
[17:02:04.680]                       }
[17:02:04.680]                       invisible(muffled)
[17:02:04.680]                     }
[17:02:04.680]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.680]                   }
[17:02:04.680]                 }
[17:02:04.680]             }
[17:02:04.680]         }))
[17:02:04.680]     }, error = function(ex) {
[17:02:04.680]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.680]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.680]                 ...future.rng), started = ...future.startTime, 
[17:02:04.680]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.680]             version = "1.8"), class = "FutureResult")
[17:02:04.680]     }, finally = {
[17:02:04.680]         if (!identical(...future.workdir, getwd())) 
[17:02:04.680]             setwd(...future.workdir)
[17:02:04.680]         {
[17:02:04.680]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.680]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.680]             }
[17:02:04.680]             base::options(...future.oldOptions)
[17:02:04.680]             if (.Platform$OS.type == "windows") {
[17:02:04.680]                 old_names <- names(...future.oldEnvVars)
[17:02:04.680]                 envs <- base::Sys.getenv()
[17:02:04.680]                 names <- names(envs)
[17:02:04.680]                 common <- intersect(names, old_names)
[17:02:04.680]                 added <- setdiff(names, old_names)
[17:02:04.680]                 removed <- setdiff(old_names, names)
[17:02:04.680]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.680]                   envs[common]]
[17:02:04.680]                 NAMES <- toupper(changed)
[17:02:04.680]                 args <- list()
[17:02:04.680]                 for (kk in seq_along(NAMES)) {
[17:02:04.680]                   name <- changed[[kk]]
[17:02:04.680]                   NAME <- NAMES[[kk]]
[17:02:04.680]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.680]                     next
[17:02:04.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.680]                 }
[17:02:04.680]                 NAMES <- toupper(added)
[17:02:04.680]                 for (kk in seq_along(NAMES)) {
[17:02:04.680]                   name <- added[[kk]]
[17:02:04.680]                   NAME <- NAMES[[kk]]
[17:02:04.680]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.680]                     next
[17:02:04.680]                   args[[name]] <- ""
[17:02:04.680]                 }
[17:02:04.680]                 NAMES <- toupper(removed)
[17:02:04.680]                 for (kk in seq_along(NAMES)) {
[17:02:04.680]                   name <- removed[[kk]]
[17:02:04.680]                   NAME <- NAMES[[kk]]
[17:02:04.680]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.680]                     next
[17:02:04.680]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.680]                 }
[17:02:04.680]                 if (length(args) > 0) 
[17:02:04.680]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.680]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.680]             }
[17:02:04.680]             else {
[17:02:04.680]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.680]             }
[17:02:04.680]             {
[17:02:04.680]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.680]                   0L) {
[17:02:04.680]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.680]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.680]                   base::options(opts)
[17:02:04.680]                 }
[17:02:04.680]                 {
[17:02:04.680]                   {
[17:02:04.680]                     NULL
[17:02:04.680]                     RNGkind("Mersenne-Twister")
[17:02:04.680]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:04.680]                       inherits = FALSE)
[17:02:04.680]                   }
[17:02:04.680]                   options(future.plan = NULL)
[17:02:04.680]                   if (is.na(NA_character_)) 
[17:02:04.680]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.680]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.680]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.680]                     .init = FALSE)
[17:02:04.680]                 }
[17:02:04.680]             }
[17:02:04.680]         }
[17:02:04.680]     })
[17:02:04.680]     if (TRUE) {
[17:02:04.680]         base::sink(type = "output", split = FALSE)
[17:02:04.680]         if (TRUE) {
[17:02:04.680]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.680]         }
[17:02:04.680]         else {
[17:02:04.680]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.680]         }
[17:02:04.680]         base::close(...future.stdout)
[17:02:04.680]         ...future.stdout <- NULL
[17:02:04.680]     }
[17:02:04.680]     ...future.result$conditions <- ...future.conditions
[17:02:04.680]     ...future.result$finished <- base::Sys.time()
[17:02:04.680]     ...future.result
[17:02:04.680] }
[17:02:04.681] assign_globals() ...
[17:02:04.681] List of 3
[17:02:04.681]  $ fcn:function (x, y)  
[17:02:04.681]  $ x  : int [1:2] 1 2
[17:02:04.681]  $ y  : num 3
[17:02:04.681]  - attr(*, "where")=List of 3
[17:02:04.681]   ..$ fcn:<environment: R_EmptyEnv> 
[17:02:04.681]   ..$ x  :<environment: R_EmptyEnv> 
[17:02:04.681]   ..$ y  :<environment: R_EmptyEnv> 
[17:02:04.681]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.681]  - attr(*, "resolved")= logi FALSE
[17:02:04.681]  - attr(*, "total_size")= num 4280
[17:02:04.681]  - attr(*, "already-done")= logi TRUE
[17:02:04.685] - reassign environment for ‘fcn’
[17:02:04.685] - copied ‘fcn’ to environment
[17:02:04.685] - copied ‘x’ to environment
[17:02:04.685] - copied ‘y’ to environment
[17:02:04.685] assign_globals() ... done
[17:02:04.685] plan(): Setting new future strategy stack:
[17:02:04.685] List of future strategies:
[17:02:04.685] 1. sequential:
[17:02:04.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.685]    - tweaked: FALSE
[17:02:04.685]    - call: NULL
[17:02:04.688] plan(): nbrOfWorkers() = 1
[17:02:04.688] plan(): Setting new future strategy stack:
[17:02:04.688] List of future strategies:
[17:02:04.688] 1. sequential:
[17:02:04.688]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.688]    - tweaked: FALSE
[17:02:04.688]    - call: plan(strategy, substitute = FALSE)
[17:02:04.689] plan(): nbrOfWorkers() = 1
[17:02:04.689] SequentialFuture started (and completed)
[17:02:04.689] - Launch lazy future ... done
[17:02:04.689] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[17:02:04.695] plan(): Setting new future strategy stack:
[17:02:04.695] List of future strategies:
[17:02:04.695] 1. multicore:
[17:02:04.695]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.695]    - tweaked: FALSE
[17:02:04.695]    - call: plan(strategy, substitute = FALSE)
[17:02:04.699] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5572d19ab998>
Arguments '...' exists: TRUE
[17:02:04.699] getGlobalsAndPackages() ...
[17:02:04.699] Searching for globals...
[17:02:04.701] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:02:04.701] Searching for globals ... DONE
[17:02:04.701] Resolving globals: FALSE
[17:02:04.701] Tweak future expression to call with '...' arguments ...
[17:02:04.701] {
[17:02:04.701]     do.call(function(...) {
[17:02:04.701]         sum(x, ...)
[17:02:04.701]     }, args = future.call.arguments)
[17:02:04.701] }
[17:02:04.701] Tweak future expression to call with '...' arguments ... DONE
[17:02:04.702] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.702] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:02:04.702] - globals: [2] ‘x’, ‘future.call.arguments’
[17:02:04.702] 
[17:02:04.702] getGlobalsAndPackages() ... DONE
[17:02:04.703] run() for ‘Future’ ...
[17:02:04.703] - state: ‘created’
[17:02:04.703] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.706] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.707] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:04.707]   - Field: ‘label’
[17:02:04.707]   - Field: ‘local’
[17:02:04.707]   - Field: ‘owner’
[17:02:04.707]   - Field: ‘envir’
[17:02:04.707]   - Field: ‘workers’
[17:02:04.707]   - Field: ‘packages’
[17:02:04.707]   - Field: ‘gc’
[17:02:04.707]   - Field: ‘job’
[17:02:04.708]   - Field: ‘conditions’
[17:02:04.708]   - Field: ‘expr’
[17:02:04.708]   - Field: ‘uuid’
[17:02:04.708]   - Field: ‘seed’
[17:02:04.708]   - Field: ‘version’
[17:02:04.708]   - Field: ‘result’
[17:02:04.708]   - Field: ‘asynchronous’
[17:02:04.708]   - Field: ‘calls’
[17:02:04.708]   - Field: ‘globals’
[17:02:04.708]   - Field: ‘stdout’
[17:02:04.708]   - Field: ‘earlySignal’
[17:02:04.708]   - Field: ‘lazy’
[17:02:04.709]   - Field: ‘state’
[17:02:04.709] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:04.709] - Launch lazy future ...
[17:02:04.710] Packages needed by the future expression (n = 0): <none>
[17:02:04.710] Packages needed by future strategies (n = 0): <none>
[17:02:04.710] {
[17:02:04.710]     {
[17:02:04.710]         {
[17:02:04.710]             ...future.startTime <- base::Sys.time()
[17:02:04.710]             {
[17:02:04.710]                 {
[17:02:04.710]                   {
[17:02:04.710]                     {
[17:02:04.710]                       base::local({
[17:02:04.710]                         has_future <- base::requireNamespace("future", 
[17:02:04.710]                           quietly = TRUE)
[17:02:04.710]                         if (has_future) {
[17:02:04.710]                           ns <- base::getNamespace("future")
[17:02:04.710]                           version <- ns[[".package"]][["version"]]
[17:02:04.710]                           if (is.null(version)) 
[17:02:04.710]                             version <- utils::packageVersion("future")
[17:02:04.710]                         }
[17:02:04.710]                         else {
[17:02:04.710]                           version <- NULL
[17:02:04.710]                         }
[17:02:04.710]                         if (!has_future || version < "1.8.0") {
[17:02:04.710]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.710]                             "", base::R.version$version.string), 
[17:02:04.710]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:04.710]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.710]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.710]                               "release", "version")], collapse = " "), 
[17:02:04.710]                             hostname = base::Sys.info()[["nodename"]])
[17:02:04.710]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.710]                             info)
[17:02:04.710]                           info <- base::paste(info, collapse = "; ")
[17:02:04.710]                           if (!has_future) {
[17:02:04.710]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.710]                               info)
[17:02:04.710]                           }
[17:02:04.710]                           else {
[17:02:04.710]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.710]                               info, version)
[17:02:04.710]                           }
[17:02:04.710]                           base::stop(msg)
[17:02:04.710]                         }
[17:02:04.710]                       })
[17:02:04.710]                     }
[17:02:04.710]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.710]                     base::options(mc.cores = 1L)
[17:02:04.710]                   }
[17:02:04.710]                   ...future.strategy.old <- future::plan("list")
[17:02:04.710]                   options(future.plan = NULL)
[17:02:04.710]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.710]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.710]                 }
[17:02:04.710]                 ...future.workdir <- getwd()
[17:02:04.710]             }
[17:02:04.710]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.710]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.710]         }
[17:02:04.710]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.710]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.710]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.710]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.710]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.710]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.710]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.710]             base::names(...future.oldOptions))
[17:02:04.710]     }
[17:02:04.710]     if (FALSE) {
[17:02:04.710]     }
[17:02:04.710]     else {
[17:02:04.710]         if (TRUE) {
[17:02:04.710]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.710]                 open = "w")
[17:02:04.710]         }
[17:02:04.710]         else {
[17:02:04.710]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.710]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.710]         }
[17:02:04.710]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.710]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.710]             base::sink(type = "output", split = FALSE)
[17:02:04.710]             base::close(...future.stdout)
[17:02:04.710]         }, add = TRUE)
[17:02:04.710]     }
[17:02:04.710]     ...future.frame <- base::sys.nframe()
[17:02:04.710]     ...future.conditions <- base::list()
[17:02:04.710]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.710]     if (FALSE) {
[17:02:04.710]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.710]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.710]     }
[17:02:04.710]     ...future.result <- base::tryCatch({
[17:02:04.710]         base::withCallingHandlers({
[17:02:04.710]             ...future.value <- base::withVisible(base::local({
[17:02:04.710]                 withCallingHandlers({
[17:02:04.710]                   {
[17:02:04.710]                     do.call(function(...) {
[17:02:04.710]                       sum(x, ...)
[17:02:04.710]                     }, args = future.call.arguments)
[17:02:04.710]                   }
[17:02:04.710]                 }, immediateCondition = function(cond) {
[17:02:04.710]                   save_rds <- function (object, pathname, ...) 
[17:02:04.710]                   {
[17:02:04.710]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:04.710]                     if (file_test("-f", pathname_tmp)) {
[17:02:04.710]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.710]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:04.710]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.710]                         fi_tmp[["mtime"]])
[17:02:04.710]                     }
[17:02:04.710]                     tryCatch({
[17:02:04.710]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:04.710]                     }, error = function(ex) {
[17:02:04.710]                       msg <- conditionMessage(ex)
[17:02:04.710]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.710]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:04.710]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.710]                         fi_tmp[["mtime"]], msg)
[17:02:04.710]                       ex$message <- msg
[17:02:04.710]                       stop(ex)
[17:02:04.710]                     })
[17:02:04.710]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:04.710]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:04.710]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:04.710]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.710]                       fi <- file.info(pathname)
[17:02:04.710]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:04.710]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.710]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:04.710]                         fi[["size"]], fi[["mtime"]])
[17:02:04.710]                       stop(msg)
[17:02:04.710]                     }
[17:02:04.710]                     invisible(pathname)
[17:02:04.710]                   }
[17:02:04.710]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:04.710]                     rootPath = tempdir()) 
[17:02:04.710]                   {
[17:02:04.710]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:04.710]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:04.710]                       tmpdir = path, fileext = ".rds")
[17:02:04.710]                     save_rds(obj, file)
[17:02:04.710]                   }
[17:02:04.710]                   saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")
[17:02:04.710]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.710]                   {
[17:02:04.710]                     inherits <- base::inherits
[17:02:04.710]                     invokeRestart <- base::invokeRestart
[17:02:04.710]                     is.null <- base::is.null
[17:02:04.710]                     muffled <- FALSE
[17:02:04.710]                     if (inherits(cond, "message")) {
[17:02:04.710]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.710]                       if (muffled) 
[17:02:04.710]                         invokeRestart("muffleMessage")
[17:02:04.710]                     }
[17:02:04.710]                     else if (inherits(cond, "warning")) {
[17:02:04.710]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.710]                       if (muffled) 
[17:02:04.710]                         invokeRestart("muffleWarning")
[17:02:04.710]                     }
[17:02:04.710]                     else if (inherits(cond, "condition")) {
[17:02:04.710]                       if (!is.null(pattern)) {
[17:02:04.710]                         computeRestarts <- base::computeRestarts
[17:02:04.710]                         grepl <- base::grepl
[17:02:04.710]                         restarts <- computeRestarts(cond)
[17:02:04.710]                         for (restart in restarts) {
[17:02:04.710]                           name <- restart$name
[17:02:04.710]                           if (is.null(name)) 
[17:02:04.710]                             next
[17:02:04.710]                           if (!grepl(pattern, name)) 
[17:02:04.710]                             next
[17:02:04.710]                           invokeRestart(restart)
[17:02:04.710]                           muffled <- TRUE
[17:02:04.710]                           break
[17:02:04.710]                         }
[17:02:04.710]                       }
[17:02:04.710]                     }
[17:02:04.710]                     invisible(muffled)
[17:02:04.710]                   }
[17:02:04.710]                   muffleCondition(cond)
[17:02:04.710]                 })
[17:02:04.710]             }))
[17:02:04.710]             future::FutureResult(value = ...future.value$value, 
[17:02:04.710]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.710]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.710]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.710]                     ...future.globalenv.names))
[17:02:04.710]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.710]         }, condition = base::local({
[17:02:04.710]             c <- base::c
[17:02:04.710]             inherits <- base::inherits
[17:02:04.710]             invokeRestart <- base::invokeRestart
[17:02:04.710]             length <- base::length
[17:02:04.710]             list <- base::list
[17:02:04.710]             seq.int <- base::seq.int
[17:02:04.710]             signalCondition <- base::signalCondition
[17:02:04.710]             sys.calls <- base::sys.calls
[17:02:04.710]             `[[` <- base::`[[`
[17:02:04.710]             `+` <- base::`+`
[17:02:04.710]             `<<-` <- base::`<<-`
[17:02:04.710]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.710]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.710]                   3L)]
[17:02:04.710]             }
[17:02:04.710]             function(cond) {
[17:02:04.710]                 is_error <- inherits(cond, "error")
[17:02:04.710]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.710]                   NULL)
[17:02:04.710]                 if (is_error) {
[17:02:04.710]                   sessionInformation <- function() {
[17:02:04.710]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.710]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.710]                       search = base::search(), system = base::Sys.info())
[17:02:04.710]                   }
[17:02:04.710]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.710]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.710]                     cond$call), session = sessionInformation(), 
[17:02:04.710]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.710]                   signalCondition(cond)
[17:02:04.710]                 }
[17:02:04.710]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.710]                 "immediateCondition"))) {
[17:02:04.710]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.710]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.710]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.710]                   if (TRUE && !signal) {
[17:02:04.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.710]                     {
[17:02:04.710]                       inherits <- base::inherits
[17:02:04.710]                       invokeRestart <- base::invokeRestart
[17:02:04.710]                       is.null <- base::is.null
[17:02:04.710]                       muffled <- FALSE
[17:02:04.710]                       if (inherits(cond, "message")) {
[17:02:04.710]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.710]                         if (muffled) 
[17:02:04.710]                           invokeRestart("muffleMessage")
[17:02:04.710]                       }
[17:02:04.710]                       else if (inherits(cond, "warning")) {
[17:02:04.710]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.710]                         if (muffled) 
[17:02:04.710]                           invokeRestart("muffleWarning")
[17:02:04.710]                       }
[17:02:04.710]                       else if (inherits(cond, "condition")) {
[17:02:04.710]                         if (!is.null(pattern)) {
[17:02:04.710]                           computeRestarts <- base::computeRestarts
[17:02:04.710]                           grepl <- base::grepl
[17:02:04.710]                           restarts <- computeRestarts(cond)
[17:02:04.710]                           for (restart in restarts) {
[17:02:04.710]                             name <- restart$name
[17:02:04.710]                             if (is.null(name)) 
[17:02:04.710]                               next
[17:02:04.710]                             if (!grepl(pattern, name)) 
[17:02:04.710]                               next
[17:02:04.710]                             invokeRestart(restart)
[17:02:04.710]                             muffled <- TRUE
[17:02:04.710]                             break
[17:02:04.710]                           }
[17:02:04.710]                         }
[17:02:04.710]                       }
[17:02:04.710]                       invisible(muffled)
[17:02:04.710]                     }
[17:02:04.710]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.710]                   }
[17:02:04.710]                 }
[17:02:04.710]                 else {
[17:02:04.710]                   if (TRUE) {
[17:02:04.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.710]                     {
[17:02:04.710]                       inherits <- base::inherits
[17:02:04.710]                       invokeRestart <- base::invokeRestart
[17:02:04.710]                       is.null <- base::is.null
[17:02:04.710]                       muffled <- FALSE
[17:02:04.710]                       if (inherits(cond, "message")) {
[17:02:04.710]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.710]                         if (muffled) 
[17:02:04.710]                           invokeRestart("muffleMessage")
[17:02:04.710]                       }
[17:02:04.710]                       else if (inherits(cond, "warning")) {
[17:02:04.710]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.710]                         if (muffled) 
[17:02:04.710]                           invokeRestart("muffleWarning")
[17:02:04.710]                       }
[17:02:04.710]                       else if (inherits(cond, "condition")) {
[17:02:04.710]                         if (!is.null(pattern)) {
[17:02:04.710]                           computeRestarts <- base::computeRestarts
[17:02:04.710]                           grepl <- base::grepl
[17:02:04.710]                           restarts <- computeRestarts(cond)
[17:02:04.710]                           for (restart in restarts) {
[17:02:04.710]                             name <- restart$name
[17:02:04.710]                             if (is.null(name)) 
[17:02:04.710]                               next
[17:02:04.710]                             if (!grepl(pattern, name)) 
[17:02:04.710]                               next
[17:02:04.710]                             invokeRestart(restart)
[17:02:04.710]                             muffled <- TRUE
[17:02:04.710]                             break
[17:02:04.710]                           }
[17:02:04.710]                         }
[17:02:04.710]                       }
[17:02:04.710]                       invisible(muffled)
[17:02:04.710]                     }
[17:02:04.710]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.710]                   }
[17:02:04.710]                 }
[17:02:04.710]             }
[17:02:04.710]         }))
[17:02:04.710]     }, error = function(ex) {
[17:02:04.710]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.710]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.710]                 ...future.rng), started = ...future.startTime, 
[17:02:04.710]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.710]             version = "1.8"), class = "FutureResult")
[17:02:04.710]     }, finally = {
[17:02:04.710]         if (!identical(...future.workdir, getwd())) 
[17:02:04.710]             setwd(...future.workdir)
[17:02:04.710]         {
[17:02:04.710]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.710]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.710]             }
[17:02:04.710]             base::options(...future.oldOptions)
[17:02:04.710]             if (.Platform$OS.type == "windows") {
[17:02:04.710]                 old_names <- names(...future.oldEnvVars)
[17:02:04.710]                 envs <- base::Sys.getenv()
[17:02:04.710]                 names <- names(envs)
[17:02:04.710]                 common <- intersect(names, old_names)
[17:02:04.710]                 added <- setdiff(names, old_names)
[17:02:04.710]                 removed <- setdiff(old_names, names)
[17:02:04.710]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.710]                   envs[common]]
[17:02:04.710]                 NAMES <- toupper(changed)
[17:02:04.710]                 args <- list()
[17:02:04.710]                 for (kk in seq_along(NAMES)) {
[17:02:04.710]                   name <- changed[[kk]]
[17:02:04.710]                   NAME <- NAMES[[kk]]
[17:02:04.710]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.710]                     next
[17:02:04.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.710]                 }
[17:02:04.710]                 NAMES <- toupper(added)
[17:02:04.710]                 for (kk in seq_along(NAMES)) {
[17:02:04.710]                   name <- added[[kk]]
[17:02:04.710]                   NAME <- NAMES[[kk]]
[17:02:04.710]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.710]                     next
[17:02:04.710]                   args[[name]] <- ""
[17:02:04.710]                 }
[17:02:04.710]                 NAMES <- toupper(removed)
[17:02:04.710]                 for (kk in seq_along(NAMES)) {
[17:02:04.710]                   name <- removed[[kk]]
[17:02:04.710]                   NAME <- NAMES[[kk]]
[17:02:04.710]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.710]                     next
[17:02:04.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.710]                 }
[17:02:04.710]                 if (length(args) > 0) 
[17:02:04.710]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.710]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.710]             }
[17:02:04.710]             else {
[17:02:04.710]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.710]             }
[17:02:04.710]             {
[17:02:04.710]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.710]                   0L) {
[17:02:04.710]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.710]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.710]                   base::options(opts)
[17:02:04.710]                 }
[17:02:04.710]                 {
[17:02:04.710]                   {
[17:02:04.710]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.710]                     NULL
[17:02:04.710]                   }
[17:02:04.710]                   options(future.plan = NULL)
[17:02:04.710]                   if (is.na(NA_character_)) 
[17:02:04.710]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.710]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.710]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.710]                     .init = FALSE)
[17:02:04.710]                 }
[17:02:04.710]             }
[17:02:04.710]         }
[17:02:04.710]     })
[17:02:04.710]     if (TRUE) {
[17:02:04.710]         base::sink(type = "output", split = FALSE)
[17:02:04.710]         if (TRUE) {
[17:02:04.710]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.710]         }
[17:02:04.710]         else {
[17:02:04.710]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.710]         }
[17:02:04.710]         base::close(...future.stdout)
[17:02:04.710]         ...future.stdout <- NULL
[17:02:04.710]     }
[17:02:04.710]     ...future.result$conditions <- ...future.conditions
[17:02:04.710]     ...future.result$finished <- base::Sys.time()
[17:02:04.710]     ...future.result
[17:02:04.710] }
[17:02:04.712] assign_globals() ...
[17:02:04.713] List of 2
[17:02:04.713]  $ x                    : int [1:2] 1 2
[17:02:04.713]  $ future.call.arguments:List of 1
[17:02:04.713]   ..$ : num 3
[17:02:04.713]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:02:04.713]  - attr(*, "where")=List of 2
[17:02:04.713]   ..$ x                    :<environment: R_EmptyEnv> 
[17:02:04.713]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:02:04.713]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.713]  - attr(*, "resolved")= logi FALSE
[17:02:04.713]  - attr(*, "total_size")= num 112
[17:02:04.713]  - attr(*, "already-done")= logi TRUE
[17:02:04.716] - copied ‘x’ to environment
[17:02:04.716] - copied ‘future.call.arguments’ to environment
[17:02:04.716] assign_globals() ... done
[17:02:04.716] requestCore(): workers = 2
[17:02:04.719] MulticoreFuture started
[17:02:04.720] - Launch lazy future ... done
[17:02:04.720] plan(): Setting new future strategy stack:
[17:02:04.720] run() for ‘MulticoreFuture’ ... done
[17:02:04.720] List of future strategies:
[17:02:04.720] 1. sequential:
[17:02:04.720]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.720]    - tweaked: FALSE
[17:02:04.720]    - call: NULL
[17:02:04.721] result() for MulticoreFuture ...
[17:02:04.721] plan(): nbrOfWorkers() = 1
[17:02:04.723] plan(): Setting new future strategy stack:
[17:02:04.723] List of future strategies:
[17:02:04.723] 1. multicore:
[17:02:04.723]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.723]    - tweaked: FALSE
[17:02:04.723]    - call: plan(strategy, substitute = FALSE)
[17:02:04.733] plan(): nbrOfWorkers() = 2
[17:02:04.740] result() for MulticoreFuture ...
[17:02:04.741] result() for MulticoreFuture ... done
[17:02:04.741] result() for MulticoreFuture ... done
[17:02:04.741] result() for MulticoreFuture ...
[17:02:04.741] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5572d1d33410>
Arguments '...' exists: TRUE
[17:02:04.742] getGlobalsAndPackages() ...
[17:02:04.742] Searching for globals...
[17:02:04.744] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:02:04.744] Searching for globals ... DONE
[17:02:04.744] Resolving globals: FALSE
[17:02:04.744] Tweak future expression to call with '...' arguments ...
[17:02:04.744] {
[17:02:04.744]     do.call(function(...) {
[17:02:04.744]         sum(x, ...)
[17:02:04.744]     }, args = future.call.arguments)
[17:02:04.744] }
[17:02:04.745] Tweak future expression to call with '...' arguments ... DONE
[17:02:04.745] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.746] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:02:04.746] - globals: [2] ‘x’, ‘future.call.arguments’
[17:02:04.746] 
[17:02:04.746] getGlobalsAndPackages() ... DONE
[17:02:04.746] run() for ‘Future’ ...
[17:02:04.747] - state: ‘created’
[17:02:04.747] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.751] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.751] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:04.751]   - Field: ‘label’
[17:02:04.751]   - Field: ‘local’
[17:02:04.751]   - Field: ‘owner’
[17:02:04.751]   - Field: ‘envir’
[17:02:04.751]   - Field: ‘workers’
[17:02:04.752]   - Field: ‘packages’
[17:02:04.752]   - Field: ‘gc’
[17:02:04.752]   - Field: ‘job’
[17:02:04.752]   - Field: ‘conditions’
[17:02:04.752]   - Field: ‘expr’
[17:02:04.752]   - Field: ‘uuid’
[17:02:04.752]   - Field: ‘seed’
[17:02:04.752]   - Field: ‘version’
[17:02:04.752]   - Field: ‘result’
[17:02:04.752]   - Field: ‘asynchronous’
[17:02:04.753]   - Field: ‘calls’
[17:02:04.753]   - Field: ‘globals’
[17:02:04.753]   - Field: ‘stdout’
[17:02:04.753]   - Field: ‘earlySignal’
[17:02:04.753]   - Field: ‘lazy’
[17:02:04.753]   - Field: ‘state’
[17:02:04.753] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:04.753] - Launch lazy future ...
[17:02:04.754] Packages needed by the future expression (n = 0): <none>
[17:02:04.754] Packages needed by future strategies (n = 0): <none>
[17:02:04.754] {
[17:02:04.754]     {
[17:02:04.754]         {
[17:02:04.754]             ...future.startTime <- base::Sys.time()
[17:02:04.754]             {
[17:02:04.754]                 {
[17:02:04.754]                   {
[17:02:04.754]                     {
[17:02:04.754]                       base::local({
[17:02:04.754]                         has_future <- base::requireNamespace("future", 
[17:02:04.754]                           quietly = TRUE)
[17:02:04.754]                         if (has_future) {
[17:02:04.754]                           ns <- base::getNamespace("future")
[17:02:04.754]                           version <- ns[[".package"]][["version"]]
[17:02:04.754]                           if (is.null(version)) 
[17:02:04.754]                             version <- utils::packageVersion("future")
[17:02:04.754]                         }
[17:02:04.754]                         else {
[17:02:04.754]                           version <- NULL
[17:02:04.754]                         }
[17:02:04.754]                         if (!has_future || version < "1.8.0") {
[17:02:04.754]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.754]                             "", base::R.version$version.string), 
[17:02:04.754]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:04.754]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.754]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.754]                               "release", "version")], collapse = " "), 
[17:02:04.754]                             hostname = base::Sys.info()[["nodename"]])
[17:02:04.754]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.754]                             info)
[17:02:04.754]                           info <- base::paste(info, collapse = "; ")
[17:02:04.754]                           if (!has_future) {
[17:02:04.754]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.754]                               info)
[17:02:04.754]                           }
[17:02:04.754]                           else {
[17:02:04.754]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.754]                               info, version)
[17:02:04.754]                           }
[17:02:04.754]                           base::stop(msg)
[17:02:04.754]                         }
[17:02:04.754]                       })
[17:02:04.754]                     }
[17:02:04.754]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.754]                     base::options(mc.cores = 1L)
[17:02:04.754]                   }
[17:02:04.754]                   ...future.strategy.old <- future::plan("list")
[17:02:04.754]                   options(future.plan = NULL)
[17:02:04.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.754]                 }
[17:02:04.754]                 ...future.workdir <- getwd()
[17:02:04.754]             }
[17:02:04.754]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.754]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.754]         }
[17:02:04.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.754]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.754]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.754]             base::names(...future.oldOptions))
[17:02:04.754]     }
[17:02:04.754]     if (FALSE) {
[17:02:04.754]     }
[17:02:04.754]     else {
[17:02:04.754]         if (TRUE) {
[17:02:04.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.754]                 open = "w")
[17:02:04.754]         }
[17:02:04.754]         else {
[17:02:04.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.754]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.754]         }
[17:02:04.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.754]             base::sink(type = "output", split = FALSE)
[17:02:04.754]             base::close(...future.stdout)
[17:02:04.754]         }, add = TRUE)
[17:02:04.754]     }
[17:02:04.754]     ...future.frame <- base::sys.nframe()
[17:02:04.754]     ...future.conditions <- base::list()
[17:02:04.754]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.754]     if (FALSE) {
[17:02:04.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.754]     }
[17:02:04.754]     ...future.result <- base::tryCatch({
[17:02:04.754]         base::withCallingHandlers({
[17:02:04.754]             ...future.value <- base::withVisible(base::local({
[17:02:04.754]                 withCallingHandlers({
[17:02:04.754]                   {
[17:02:04.754]                     do.call(function(...) {
[17:02:04.754]                       sum(x, ...)
[17:02:04.754]                     }, args = future.call.arguments)
[17:02:04.754]                   }
[17:02:04.754]                 }, immediateCondition = function(cond) {
[17:02:04.754]                   save_rds <- function (object, pathname, ...) 
[17:02:04.754]                   {
[17:02:04.754]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:04.754]                     if (file_test("-f", pathname_tmp)) {
[17:02:04.754]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.754]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:04.754]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.754]                         fi_tmp[["mtime"]])
[17:02:04.754]                     }
[17:02:04.754]                     tryCatch({
[17:02:04.754]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:04.754]                     }, error = function(ex) {
[17:02:04.754]                       msg <- conditionMessage(ex)
[17:02:04.754]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.754]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:04.754]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.754]                         fi_tmp[["mtime"]], msg)
[17:02:04.754]                       ex$message <- msg
[17:02:04.754]                       stop(ex)
[17:02:04.754]                     })
[17:02:04.754]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:04.754]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:04.754]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:04.754]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.754]                       fi <- file.info(pathname)
[17:02:04.754]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:04.754]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.754]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:04.754]                         fi[["size"]], fi[["mtime"]])
[17:02:04.754]                       stop(msg)
[17:02:04.754]                     }
[17:02:04.754]                     invisible(pathname)
[17:02:04.754]                   }
[17:02:04.754]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:04.754]                     rootPath = tempdir()) 
[17:02:04.754]                   {
[17:02:04.754]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:04.754]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:04.754]                       tmpdir = path, fileext = ".rds")
[17:02:04.754]                     save_rds(obj, file)
[17:02:04.754]                   }
[17:02:04.754]                   saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")
[17:02:04.754]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.754]                   {
[17:02:04.754]                     inherits <- base::inherits
[17:02:04.754]                     invokeRestart <- base::invokeRestart
[17:02:04.754]                     is.null <- base::is.null
[17:02:04.754]                     muffled <- FALSE
[17:02:04.754]                     if (inherits(cond, "message")) {
[17:02:04.754]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.754]                       if (muffled) 
[17:02:04.754]                         invokeRestart("muffleMessage")
[17:02:04.754]                     }
[17:02:04.754]                     else if (inherits(cond, "warning")) {
[17:02:04.754]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.754]                       if (muffled) 
[17:02:04.754]                         invokeRestart("muffleWarning")
[17:02:04.754]                     }
[17:02:04.754]                     else if (inherits(cond, "condition")) {
[17:02:04.754]                       if (!is.null(pattern)) {
[17:02:04.754]                         computeRestarts <- base::computeRestarts
[17:02:04.754]                         grepl <- base::grepl
[17:02:04.754]                         restarts <- computeRestarts(cond)
[17:02:04.754]                         for (restart in restarts) {
[17:02:04.754]                           name <- restart$name
[17:02:04.754]                           if (is.null(name)) 
[17:02:04.754]                             next
[17:02:04.754]                           if (!grepl(pattern, name)) 
[17:02:04.754]                             next
[17:02:04.754]                           invokeRestart(restart)
[17:02:04.754]                           muffled <- TRUE
[17:02:04.754]                           break
[17:02:04.754]                         }
[17:02:04.754]                       }
[17:02:04.754]                     }
[17:02:04.754]                     invisible(muffled)
[17:02:04.754]                   }
[17:02:04.754]                   muffleCondition(cond)
[17:02:04.754]                 })
[17:02:04.754]             }))
[17:02:04.754]             future::FutureResult(value = ...future.value$value, 
[17:02:04.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.754]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.754]                     ...future.globalenv.names))
[17:02:04.754]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.754]         }, condition = base::local({
[17:02:04.754]             c <- base::c
[17:02:04.754]             inherits <- base::inherits
[17:02:04.754]             invokeRestart <- base::invokeRestart
[17:02:04.754]             length <- base::length
[17:02:04.754]             list <- base::list
[17:02:04.754]             seq.int <- base::seq.int
[17:02:04.754]             signalCondition <- base::signalCondition
[17:02:04.754]             sys.calls <- base::sys.calls
[17:02:04.754]             `[[` <- base::`[[`
[17:02:04.754]             `+` <- base::`+`
[17:02:04.754]             `<<-` <- base::`<<-`
[17:02:04.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.754]                   3L)]
[17:02:04.754]             }
[17:02:04.754]             function(cond) {
[17:02:04.754]                 is_error <- inherits(cond, "error")
[17:02:04.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.754]                   NULL)
[17:02:04.754]                 if (is_error) {
[17:02:04.754]                   sessionInformation <- function() {
[17:02:04.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.754]                       search = base::search(), system = base::Sys.info())
[17:02:04.754]                   }
[17:02:04.754]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.754]                     cond$call), session = sessionInformation(), 
[17:02:04.754]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.754]                   signalCondition(cond)
[17:02:04.754]                 }
[17:02:04.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.754]                 "immediateCondition"))) {
[17:02:04.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.754]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.754]                   if (TRUE && !signal) {
[17:02:04.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.754]                     {
[17:02:04.754]                       inherits <- base::inherits
[17:02:04.754]                       invokeRestart <- base::invokeRestart
[17:02:04.754]                       is.null <- base::is.null
[17:02:04.754]                       muffled <- FALSE
[17:02:04.754]                       if (inherits(cond, "message")) {
[17:02:04.754]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.754]                         if (muffled) 
[17:02:04.754]                           invokeRestart("muffleMessage")
[17:02:04.754]                       }
[17:02:04.754]                       else if (inherits(cond, "warning")) {
[17:02:04.754]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.754]                         if (muffled) 
[17:02:04.754]                           invokeRestart("muffleWarning")
[17:02:04.754]                       }
[17:02:04.754]                       else if (inherits(cond, "condition")) {
[17:02:04.754]                         if (!is.null(pattern)) {
[17:02:04.754]                           computeRestarts <- base::computeRestarts
[17:02:04.754]                           grepl <- base::grepl
[17:02:04.754]                           restarts <- computeRestarts(cond)
[17:02:04.754]                           for (restart in restarts) {
[17:02:04.754]                             name <- restart$name
[17:02:04.754]                             if (is.null(name)) 
[17:02:04.754]                               next
[17:02:04.754]                             if (!grepl(pattern, name)) 
[17:02:04.754]                               next
[17:02:04.754]                             invokeRestart(restart)
[17:02:04.754]                             muffled <- TRUE
[17:02:04.754]                             break
[17:02:04.754]                           }
[17:02:04.754]                         }
[17:02:04.754]                       }
[17:02:04.754]                       invisible(muffled)
[17:02:04.754]                     }
[17:02:04.754]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.754]                   }
[17:02:04.754]                 }
[17:02:04.754]                 else {
[17:02:04.754]                   if (TRUE) {
[17:02:04.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.754]                     {
[17:02:04.754]                       inherits <- base::inherits
[17:02:04.754]                       invokeRestart <- base::invokeRestart
[17:02:04.754]                       is.null <- base::is.null
[17:02:04.754]                       muffled <- FALSE
[17:02:04.754]                       if (inherits(cond, "message")) {
[17:02:04.754]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.754]                         if (muffled) 
[17:02:04.754]                           invokeRestart("muffleMessage")
[17:02:04.754]                       }
[17:02:04.754]                       else if (inherits(cond, "warning")) {
[17:02:04.754]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.754]                         if (muffled) 
[17:02:04.754]                           invokeRestart("muffleWarning")
[17:02:04.754]                       }
[17:02:04.754]                       else if (inherits(cond, "condition")) {
[17:02:04.754]                         if (!is.null(pattern)) {
[17:02:04.754]                           computeRestarts <- base::computeRestarts
[17:02:04.754]                           grepl <- base::grepl
[17:02:04.754]                           restarts <- computeRestarts(cond)
[17:02:04.754]                           for (restart in restarts) {
[17:02:04.754]                             name <- restart$name
[17:02:04.754]                             if (is.null(name)) 
[17:02:04.754]                               next
[17:02:04.754]                             if (!grepl(pattern, name)) 
[17:02:04.754]                               next
[17:02:04.754]                             invokeRestart(restart)
[17:02:04.754]                             muffled <- TRUE
[17:02:04.754]                             break
[17:02:04.754]                           }
[17:02:04.754]                         }
[17:02:04.754]                       }
[17:02:04.754]                       invisible(muffled)
[17:02:04.754]                     }
[17:02:04.754]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.754]                   }
[17:02:04.754]                 }
[17:02:04.754]             }
[17:02:04.754]         }))
[17:02:04.754]     }, error = function(ex) {
[17:02:04.754]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.754]                 ...future.rng), started = ...future.startTime, 
[17:02:04.754]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.754]             version = "1.8"), class = "FutureResult")
[17:02:04.754]     }, finally = {
[17:02:04.754]         if (!identical(...future.workdir, getwd())) 
[17:02:04.754]             setwd(...future.workdir)
[17:02:04.754]         {
[17:02:04.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.754]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.754]             }
[17:02:04.754]             base::options(...future.oldOptions)
[17:02:04.754]             if (.Platform$OS.type == "windows") {
[17:02:04.754]                 old_names <- names(...future.oldEnvVars)
[17:02:04.754]                 envs <- base::Sys.getenv()
[17:02:04.754]                 names <- names(envs)
[17:02:04.754]                 common <- intersect(names, old_names)
[17:02:04.754]                 added <- setdiff(names, old_names)
[17:02:04.754]                 removed <- setdiff(old_names, names)
[17:02:04.754]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.754]                   envs[common]]
[17:02:04.754]                 NAMES <- toupper(changed)
[17:02:04.754]                 args <- list()
[17:02:04.754]                 for (kk in seq_along(NAMES)) {
[17:02:04.754]                   name <- changed[[kk]]
[17:02:04.754]                   NAME <- NAMES[[kk]]
[17:02:04.754]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.754]                     next
[17:02:04.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.754]                 }
[17:02:04.754]                 NAMES <- toupper(added)
[17:02:04.754]                 for (kk in seq_along(NAMES)) {
[17:02:04.754]                   name <- added[[kk]]
[17:02:04.754]                   NAME <- NAMES[[kk]]
[17:02:04.754]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.754]                     next
[17:02:04.754]                   args[[name]] <- ""
[17:02:04.754]                 }
[17:02:04.754]                 NAMES <- toupper(removed)
[17:02:04.754]                 for (kk in seq_along(NAMES)) {
[17:02:04.754]                   name <- removed[[kk]]
[17:02:04.754]                   NAME <- NAMES[[kk]]
[17:02:04.754]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.754]                     next
[17:02:04.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.754]                 }
[17:02:04.754]                 if (length(args) > 0) 
[17:02:04.754]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.754]             }
[17:02:04.754]             else {
[17:02:04.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.754]             }
[17:02:04.754]             {
[17:02:04.754]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.754]                   0L) {
[17:02:04.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.754]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.754]                   base::options(opts)
[17:02:04.754]                 }
[17:02:04.754]                 {
[17:02:04.754]                   {
[17:02:04.754]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.754]                     NULL
[17:02:04.754]                   }
[17:02:04.754]                   options(future.plan = NULL)
[17:02:04.754]                   if (is.na(NA_character_)) 
[17:02:04.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.754]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.754]                     .init = FALSE)
[17:02:04.754]                 }
[17:02:04.754]             }
[17:02:04.754]         }
[17:02:04.754]     })
[17:02:04.754]     if (TRUE) {
[17:02:04.754]         base::sink(type = "output", split = FALSE)
[17:02:04.754]         if (TRUE) {
[17:02:04.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.754]         }
[17:02:04.754]         else {
[17:02:04.754]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.754]         }
[17:02:04.754]         base::close(...future.stdout)
[17:02:04.754]         ...future.stdout <- NULL
[17:02:04.754]     }
[17:02:04.754]     ...future.result$conditions <- ...future.conditions
[17:02:04.754]     ...future.result$finished <- base::Sys.time()
[17:02:04.754]     ...future.result
[17:02:04.754] }
[17:02:04.757] assign_globals() ...
[17:02:04.757] List of 2
[17:02:04.757]  $ x                    : int [1:2] 1 2
[17:02:04.757]  $ future.call.arguments:List of 1
[17:02:04.757]   ..$ : num 3
[17:02:04.757]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:02:04.757]  - attr(*, "where")=List of 2
[17:02:04.757]   ..$ x                    :<environment: R_EmptyEnv> 
[17:02:04.757]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:02:04.757]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.757]  - attr(*, "resolved")= logi FALSE
[17:02:04.757]  - attr(*, "total_size")= num 112
[17:02:04.757]  - attr(*, "already-done")= logi TRUE
[17:02:04.761] - copied ‘x’ to environment
[17:02:04.761] - copied ‘future.call.arguments’ to environment
[17:02:04.761] assign_globals() ... done
[17:02:04.761] requestCore(): workers = 2
[17:02:04.763] MulticoreFuture started
[17:02:04.764] - Launch lazy future ... done
[17:02:04.764] run() for ‘MulticoreFuture’ ... done
[17:02:04.764] result() for MulticoreFuture ...
[17:02:04.764] plan(): Setting new future strategy stack:
[17:02:04.765] List of future strategies:
[17:02:04.765] 1. sequential:
[17:02:04.765]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.765]    - tweaked: FALSE
[17:02:04.765]    - call: NULL
[17:02:04.766] plan(): nbrOfWorkers() = 1
[17:02:04.768] plan(): Setting new future strategy stack:
[17:02:04.768] List of future strategies:
[17:02:04.768] 1. multicore:
[17:02:04.768]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.768]    - tweaked: FALSE
[17:02:04.768]    - call: plan(strategy, substitute = FALSE)
[17:02:04.774] plan(): nbrOfWorkers() = 2
[17:02:04.775] result() for MulticoreFuture ...
[17:02:04.775] result() for MulticoreFuture ... done
[17:02:04.775] result() for MulticoreFuture ... done
[17:02:04.775] result() for MulticoreFuture ...
[17:02:04.775] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5572d1f014a0>
Arguments '...' exists: FALSE
[17:02:04.776] getGlobalsAndPackages() ...
[17:02:04.776] Searching for globals...
[17:02:04.778] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[17:02:04.778] Searching for globals ... DONE
[17:02:04.778] Resolving globals: FALSE
[17:02:04.779] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.780] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:04.780] - globals: [2] ‘x’, ‘y’
[17:02:04.780] 
[17:02:04.780] getGlobalsAndPackages() ... DONE
[17:02:04.780] run() for ‘Future’ ...
[17:02:04.780] - state: ‘created’
[17:02:04.781] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.785] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.785] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:04.785]   - Field: ‘label’
[17:02:04.785]   - Field: ‘local’
[17:02:04.785]   - Field: ‘owner’
[17:02:04.785]   - Field: ‘envir’
[17:02:04.786]   - Field: ‘workers’
[17:02:04.786]   - Field: ‘packages’
[17:02:04.786]   - Field: ‘gc’
[17:02:04.786]   - Field: ‘job’
[17:02:04.786]   - Field: ‘conditions’
[17:02:04.786]   - Field: ‘expr’
[17:02:04.786]   - Field: ‘uuid’
[17:02:04.786]   - Field: ‘seed’
[17:02:04.786]   - Field: ‘version’
[17:02:04.786]   - Field: ‘result’
[17:02:04.787]   - Field: ‘asynchronous’
[17:02:04.787]   - Field: ‘calls’
[17:02:04.787]   - Field: ‘globals’
[17:02:04.787]   - Field: ‘stdout’
[17:02:04.787]   - Field: ‘earlySignal’
[17:02:04.787]   - Field: ‘lazy’
[17:02:04.787]   - Field: ‘state’
[17:02:04.787] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:04.787] - Launch lazy future ...
[17:02:04.788] Packages needed by the future expression (n = 0): <none>
[17:02:04.788] Packages needed by future strategies (n = 0): <none>
[17:02:04.789] {
[17:02:04.789]     {
[17:02:04.789]         {
[17:02:04.789]             ...future.startTime <- base::Sys.time()
[17:02:04.789]             {
[17:02:04.789]                 {
[17:02:04.789]                   {
[17:02:04.789]                     {
[17:02:04.789]                       base::local({
[17:02:04.789]                         has_future <- base::requireNamespace("future", 
[17:02:04.789]                           quietly = TRUE)
[17:02:04.789]                         if (has_future) {
[17:02:04.789]                           ns <- base::getNamespace("future")
[17:02:04.789]                           version <- ns[[".package"]][["version"]]
[17:02:04.789]                           if (is.null(version)) 
[17:02:04.789]                             version <- utils::packageVersion("future")
[17:02:04.789]                         }
[17:02:04.789]                         else {
[17:02:04.789]                           version <- NULL
[17:02:04.789]                         }
[17:02:04.789]                         if (!has_future || version < "1.8.0") {
[17:02:04.789]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.789]                             "", base::R.version$version.string), 
[17:02:04.789]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:04.789]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.789]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.789]                               "release", "version")], collapse = " "), 
[17:02:04.789]                             hostname = base::Sys.info()[["nodename"]])
[17:02:04.789]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.789]                             info)
[17:02:04.789]                           info <- base::paste(info, collapse = "; ")
[17:02:04.789]                           if (!has_future) {
[17:02:04.789]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.789]                               info)
[17:02:04.789]                           }
[17:02:04.789]                           else {
[17:02:04.789]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.789]                               info, version)
[17:02:04.789]                           }
[17:02:04.789]                           base::stop(msg)
[17:02:04.789]                         }
[17:02:04.789]                       })
[17:02:04.789]                     }
[17:02:04.789]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.789]                     base::options(mc.cores = 1L)
[17:02:04.789]                   }
[17:02:04.789]                   ...future.strategy.old <- future::plan("list")
[17:02:04.789]                   options(future.plan = NULL)
[17:02:04.789]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.789]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.789]                 }
[17:02:04.789]                 ...future.workdir <- getwd()
[17:02:04.789]             }
[17:02:04.789]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.789]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.789]         }
[17:02:04.789]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.789]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.789]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.789]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.789]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.789]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.789]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.789]             base::names(...future.oldOptions))
[17:02:04.789]     }
[17:02:04.789]     if (FALSE) {
[17:02:04.789]     }
[17:02:04.789]     else {
[17:02:04.789]         if (TRUE) {
[17:02:04.789]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.789]                 open = "w")
[17:02:04.789]         }
[17:02:04.789]         else {
[17:02:04.789]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.789]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.789]         }
[17:02:04.789]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.789]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.789]             base::sink(type = "output", split = FALSE)
[17:02:04.789]             base::close(...future.stdout)
[17:02:04.789]         }, add = TRUE)
[17:02:04.789]     }
[17:02:04.789]     ...future.frame <- base::sys.nframe()
[17:02:04.789]     ...future.conditions <- base::list()
[17:02:04.789]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.789]     if (FALSE) {
[17:02:04.789]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.789]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.789]     }
[17:02:04.789]     ...future.result <- base::tryCatch({
[17:02:04.789]         base::withCallingHandlers({
[17:02:04.789]             ...future.value <- base::withVisible(base::local({
[17:02:04.789]                 withCallingHandlers({
[17:02:04.789]                   {
[17:02:04.789]                     sum(x, y)
[17:02:04.789]                   }
[17:02:04.789]                 }, immediateCondition = function(cond) {
[17:02:04.789]                   save_rds <- function (object, pathname, ...) 
[17:02:04.789]                   {
[17:02:04.789]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:04.789]                     if (file_test("-f", pathname_tmp)) {
[17:02:04.789]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.789]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:04.789]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.789]                         fi_tmp[["mtime"]])
[17:02:04.789]                     }
[17:02:04.789]                     tryCatch({
[17:02:04.789]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:04.789]                     }, error = function(ex) {
[17:02:04.789]                       msg <- conditionMessage(ex)
[17:02:04.789]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.789]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:04.789]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.789]                         fi_tmp[["mtime"]], msg)
[17:02:04.789]                       ex$message <- msg
[17:02:04.789]                       stop(ex)
[17:02:04.789]                     })
[17:02:04.789]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:04.789]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:04.789]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:04.789]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.789]                       fi <- file.info(pathname)
[17:02:04.789]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:04.789]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.789]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:04.789]                         fi[["size"]], fi[["mtime"]])
[17:02:04.789]                       stop(msg)
[17:02:04.789]                     }
[17:02:04.789]                     invisible(pathname)
[17:02:04.789]                   }
[17:02:04.789]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:04.789]                     rootPath = tempdir()) 
[17:02:04.789]                   {
[17:02:04.789]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:04.789]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:04.789]                       tmpdir = path, fileext = ".rds")
[17:02:04.789]                     save_rds(obj, file)
[17:02:04.789]                   }
[17:02:04.789]                   saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")
[17:02:04.789]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.789]                   {
[17:02:04.789]                     inherits <- base::inherits
[17:02:04.789]                     invokeRestart <- base::invokeRestart
[17:02:04.789]                     is.null <- base::is.null
[17:02:04.789]                     muffled <- FALSE
[17:02:04.789]                     if (inherits(cond, "message")) {
[17:02:04.789]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.789]                       if (muffled) 
[17:02:04.789]                         invokeRestart("muffleMessage")
[17:02:04.789]                     }
[17:02:04.789]                     else if (inherits(cond, "warning")) {
[17:02:04.789]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.789]                       if (muffled) 
[17:02:04.789]                         invokeRestart("muffleWarning")
[17:02:04.789]                     }
[17:02:04.789]                     else if (inherits(cond, "condition")) {
[17:02:04.789]                       if (!is.null(pattern)) {
[17:02:04.789]                         computeRestarts <- base::computeRestarts
[17:02:04.789]                         grepl <- base::grepl
[17:02:04.789]                         restarts <- computeRestarts(cond)
[17:02:04.789]                         for (restart in restarts) {
[17:02:04.789]                           name <- restart$name
[17:02:04.789]                           if (is.null(name)) 
[17:02:04.789]                             next
[17:02:04.789]                           if (!grepl(pattern, name)) 
[17:02:04.789]                             next
[17:02:04.789]                           invokeRestart(restart)
[17:02:04.789]                           muffled <- TRUE
[17:02:04.789]                           break
[17:02:04.789]                         }
[17:02:04.789]                       }
[17:02:04.789]                     }
[17:02:04.789]                     invisible(muffled)
[17:02:04.789]                   }
[17:02:04.789]                   muffleCondition(cond)
[17:02:04.789]                 })
[17:02:04.789]             }))
[17:02:04.789]             future::FutureResult(value = ...future.value$value, 
[17:02:04.789]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.789]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.789]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.789]                     ...future.globalenv.names))
[17:02:04.789]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.789]         }, condition = base::local({
[17:02:04.789]             c <- base::c
[17:02:04.789]             inherits <- base::inherits
[17:02:04.789]             invokeRestart <- base::invokeRestart
[17:02:04.789]             length <- base::length
[17:02:04.789]             list <- base::list
[17:02:04.789]             seq.int <- base::seq.int
[17:02:04.789]             signalCondition <- base::signalCondition
[17:02:04.789]             sys.calls <- base::sys.calls
[17:02:04.789]             `[[` <- base::`[[`
[17:02:04.789]             `+` <- base::`+`
[17:02:04.789]             `<<-` <- base::`<<-`
[17:02:04.789]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.789]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.789]                   3L)]
[17:02:04.789]             }
[17:02:04.789]             function(cond) {
[17:02:04.789]                 is_error <- inherits(cond, "error")
[17:02:04.789]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.789]                   NULL)
[17:02:04.789]                 if (is_error) {
[17:02:04.789]                   sessionInformation <- function() {
[17:02:04.789]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.789]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.789]                       search = base::search(), system = base::Sys.info())
[17:02:04.789]                   }
[17:02:04.789]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.789]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.789]                     cond$call), session = sessionInformation(), 
[17:02:04.789]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.789]                   signalCondition(cond)
[17:02:04.789]                 }
[17:02:04.789]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.789]                 "immediateCondition"))) {
[17:02:04.789]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.789]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.789]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.789]                   if (TRUE && !signal) {
[17:02:04.789]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.789]                     {
[17:02:04.789]                       inherits <- base::inherits
[17:02:04.789]                       invokeRestart <- base::invokeRestart
[17:02:04.789]                       is.null <- base::is.null
[17:02:04.789]                       muffled <- FALSE
[17:02:04.789]                       if (inherits(cond, "message")) {
[17:02:04.789]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.789]                         if (muffled) 
[17:02:04.789]                           invokeRestart("muffleMessage")
[17:02:04.789]                       }
[17:02:04.789]                       else if (inherits(cond, "warning")) {
[17:02:04.789]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.789]                         if (muffled) 
[17:02:04.789]                           invokeRestart("muffleWarning")
[17:02:04.789]                       }
[17:02:04.789]                       else if (inherits(cond, "condition")) {
[17:02:04.789]                         if (!is.null(pattern)) {
[17:02:04.789]                           computeRestarts <- base::computeRestarts
[17:02:04.789]                           grepl <- base::grepl
[17:02:04.789]                           restarts <- computeRestarts(cond)
[17:02:04.789]                           for (restart in restarts) {
[17:02:04.789]                             name <- restart$name
[17:02:04.789]                             if (is.null(name)) 
[17:02:04.789]                               next
[17:02:04.789]                             if (!grepl(pattern, name)) 
[17:02:04.789]                               next
[17:02:04.789]                             invokeRestart(restart)
[17:02:04.789]                             muffled <- TRUE
[17:02:04.789]                             break
[17:02:04.789]                           }
[17:02:04.789]                         }
[17:02:04.789]                       }
[17:02:04.789]                       invisible(muffled)
[17:02:04.789]                     }
[17:02:04.789]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.789]                   }
[17:02:04.789]                 }
[17:02:04.789]                 else {
[17:02:04.789]                   if (TRUE) {
[17:02:04.789]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.789]                     {
[17:02:04.789]                       inherits <- base::inherits
[17:02:04.789]                       invokeRestart <- base::invokeRestart
[17:02:04.789]                       is.null <- base::is.null
[17:02:04.789]                       muffled <- FALSE
[17:02:04.789]                       if (inherits(cond, "message")) {
[17:02:04.789]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.789]                         if (muffled) 
[17:02:04.789]                           invokeRestart("muffleMessage")
[17:02:04.789]                       }
[17:02:04.789]                       else if (inherits(cond, "warning")) {
[17:02:04.789]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.789]                         if (muffled) 
[17:02:04.789]                           invokeRestart("muffleWarning")
[17:02:04.789]                       }
[17:02:04.789]                       else if (inherits(cond, "condition")) {
[17:02:04.789]                         if (!is.null(pattern)) {
[17:02:04.789]                           computeRestarts <- base::computeRestarts
[17:02:04.789]                           grepl <- base::grepl
[17:02:04.789]                           restarts <- computeRestarts(cond)
[17:02:04.789]                           for (restart in restarts) {
[17:02:04.789]                             name <- restart$name
[17:02:04.789]                             if (is.null(name)) 
[17:02:04.789]                               next
[17:02:04.789]                             if (!grepl(pattern, name)) 
[17:02:04.789]                               next
[17:02:04.789]                             invokeRestart(restart)
[17:02:04.789]                             muffled <- TRUE
[17:02:04.789]                             break
[17:02:04.789]                           }
[17:02:04.789]                         }
[17:02:04.789]                       }
[17:02:04.789]                       invisible(muffled)
[17:02:04.789]                     }
[17:02:04.789]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.789]                   }
[17:02:04.789]                 }
[17:02:04.789]             }
[17:02:04.789]         }))
[17:02:04.789]     }, error = function(ex) {
[17:02:04.789]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.789]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.789]                 ...future.rng), started = ...future.startTime, 
[17:02:04.789]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.789]             version = "1.8"), class = "FutureResult")
[17:02:04.789]     }, finally = {
[17:02:04.789]         if (!identical(...future.workdir, getwd())) 
[17:02:04.789]             setwd(...future.workdir)
[17:02:04.789]         {
[17:02:04.789]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.789]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.789]             }
[17:02:04.789]             base::options(...future.oldOptions)
[17:02:04.789]             if (.Platform$OS.type == "windows") {
[17:02:04.789]                 old_names <- names(...future.oldEnvVars)
[17:02:04.789]                 envs <- base::Sys.getenv()
[17:02:04.789]                 names <- names(envs)
[17:02:04.789]                 common <- intersect(names, old_names)
[17:02:04.789]                 added <- setdiff(names, old_names)
[17:02:04.789]                 removed <- setdiff(old_names, names)
[17:02:04.789]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.789]                   envs[common]]
[17:02:04.789]                 NAMES <- toupper(changed)
[17:02:04.789]                 args <- list()
[17:02:04.789]                 for (kk in seq_along(NAMES)) {
[17:02:04.789]                   name <- changed[[kk]]
[17:02:04.789]                   NAME <- NAMES[[kk]]
[17:02:04.789]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.789]                     next
[17:02:04.789]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.789]                 }
[17:02:04.789]                 NAMES <- toupper(added)
[17:02:04.789]                 for (kk in seq_along(NAMES)) {
[17:02:04.789]                   name <- added[[kk]]
[17:02:04.789]                   NAME <- NAMES[[kk]]
[17:02:04.789]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.789]                     next
[17:02:04.789]                   args[[name]] <- ""
[17:02:04.789]                 }
[17:02:04.789]                 NAMES <- toupper(removed)
[17:02:04.789]                 for (kk in seq_along(NAMES)) {
[17:02:04.789]                   name <- removed[[kk]]
[17:02:04.789]                   NAME <- NAMES[[kk]]
[17:02:04.789]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.789]                     next
[17:02:04.789]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.789]                 }
[17:02:04.789]                 if (length(args) > 0) 
[17:02:04.789]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.789]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.789]             }
[17:02:04.789]             else {
[17:02:04.789]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.789]             }
[17:02:04.789]             {
[17:02:04.789]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.789]                   0L) {
[17:02:04.789]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.789]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.789]                   base::options(opts)
[17:02:04.789]                 }
[17:02:04.789]                 {
[17:02:04.789]                   {
[17:02:04.789]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.789]                     NULL
[17:02:04.789]                   }
[17:02:04.789]                   options(future.plan = NULL)
[17:02:04.789]                   if (is.na(NA_character_)) 
[17:02:04.789]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.789]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.789]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.789]                     .init = FALSE)
[17:02:04.789]                 }
[17:02:04.789]             }
[17:02:04.789]         }
[17:02:04.789]     })
[17:02:04.789]     if (TRUE) {
[17:02:04.789]         base::sink(type = "output", split = FALSE)
[17:02:04.789]         if (TRUE) {
[17:02:04.789]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.789]         }
[17:02:04.789]         else {
[17:02:04.789]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.789]         }
[17:02:04.789]         base::close(...future.stdout)
[17:02:04.789]         ...future.stdout <- NULL
[17:02:04.789]     }
[17:02:04.789]     ...future.result$conditions <- ...future.conditions
[17:02:04.789]     ...future.result$finished <- base::Sys.time()
[17:02:04.789]     ...future.result
[17:02:04.789] }
[17:02:04.791] assign_globals() ...
[17:02:04.791] List of 2
[17:02:04.791]  $ x: int [1:2] 1 2
[17:02:04.791]  $ y: num 3
[17:02:04.791]  - attr(*, "where")=List of 2
[17:02:04.791]   ..$ x:<environment: R_EmptyEnv> 
[17:02:04.791]   ..$ y:<environment: R_EmptyEnv> 
[17:02:04.791]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.791]  - attr(*, "resolved")= logi FALSE
[17:02:04.791]  - attr(*, "total_size")= num 112
[17:02:04.791]  - attr(*, "already-done")= logi TRUE
[17:02:04.797] - copied ‘x’ to environment
[17:02:04.797] - copied ‘y’ to environment
[17:02:04.798] assign_globals() ... done
[17:02:04.798] requestCore(): workers = 2
[17:02:04.800] MulticoreFuture started
[17:02:04.800] - Launch lazy future ... done
[17:02:04.800] run() for ‘MulticoreFuture’ ... done
[17:02:04.801] result() for MulticoreFuture ...
[17:02:04.801] plan(): Setting new future strategy stack:
[17:02:04.801] List of future strategies:
[17:02:04.801] 1. sequential:
[17:02:04.801]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.801]    - tweaked: FALSE
[17:02:04.801]    - call: NULL
[17:02:04.802] plan(): nbrOfWorkers() = 1
[17:02:04.804] plan(): Setting new future strategy stack:
[17:02:04.805] List of future strategies:
[17:02:04.805] 1. multicore:
[17:02:04.805]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.805]    - tweaked: FALSE
[17:02:04.805]    - call: plan(strategy, substitute = FALSE)
[17:02:04.810] plan(): nbrOfWorkers() = 2
[17:02:04.811] result() for MulticoreFuture ...
[17:02:04.811] result() for MulticoreFuture ... done
[17:02:04.811] result() for MulticoreFuture ... done
[17:02:04.811] result() for MulticoreFuture ...
[17:02:04.811] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5572d209d0f8>
Arguments '...' exists: FALSE
[17:02:04.812] getGlobalsAndPackages() ...
[17:02:04.812] Searching for globals...
[17:02:04.815] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[17:02:04.815] Searching for globals ... DONE
[17:02:04.815] Resolving globals: FALSE
[17:02:04.815] Tweak future expression to call with '...' arguments ...
[17:02:04.816] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:04.816] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:04.816] - globals: [2] ‘x’, ‘y’
[17:02:04.816] 
[17:02:04.817] getGlobalsAndPackages() ... DONE
[17:02:04.817] run() for ‘Future’ ...
[17:02:04.817] - state: ‘created’
[17:02:04.817] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.821] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.822] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:04.822]   - Field: ‘label’
[17:02:04.822]   - Field: ‘local’
[17:02:04.822]   - Field: ‘owner’
[17:02:04.822]   - Field: ‘envir’
[17:02:04.822]   - Field: ‘workers’
[17:02:04.822]   - Field: ‘packages’
[17:02:04.822]   - Field: ‘gc’
[17:02:04.823]   - Field: ‘job’
[17:02:04.823]   - Field: ‘conditions’
[17:02:04.823]   - Field: ‘expr’
[17:02:04.823]   - Field: ‘uuid’
[17:02:04.823]   - Field: ‘seed’
[17:02:04.823]   - Field: ‘version’
[17:02:04.823]   - Field: ‘result’
[17:02:04.823]   - Field: ‘asynchronous’
[17:02:04.824]   - Field: ‘calls’
[17:02:04.824]   - Field: ‘globals’
[17:02:04.824]   - Field: ‘stdout’
[17:02:04.824]   - Field: ‘earlySignal’
[17:02:04.824]   - Field: ‘lazy’
[17:02:04.824]   - Field: ‘state’
[17:02:04.824] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:04.824] - Launch lazy future ...
[17:02:04.825] Packages needed by the future expression (n = 0): <none>
[17:02:04.825] Packages needed by future strategies (n = 0): <none>
[17:02:04.825] {
[17:02:04.825]     {
[17:02:04.825]         {
[17:02:04.825]             ...future.startTime <- base::Sys.time()
[17:02:04.825]             {
[17:02:04.825]                 {
[17:02:04.825]                   {
[17:02:04.825]                     {
[17:02:04.825]                       base::local({
[17:02:04.825]                         has_future <- base::requireNamespace("future", 
[17:02:04.825]                           quietly = TRUE)
[17:02:04.825]                         if (has_future) {
[17:02:04.825]                           ns <- base::getNamespace("future")
[17:02:04.825]                           version <- ns[[".package"]][["version"]]
[17:02:04.825]                           if (is.null(version)) 
[17:02:04.825]                             version <- utils::packageVersion("future")
[17:02:04.825]                         }
[17:02:04.825]                         else {
[17:02:04.825]                           version <- NULL
[17:02:04.825]                         }
[17:02:04.825]                         if (!has_future || version < "1.8.0") {
[17:02:04.825]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.825]                             "", base::R.version$version.string), 
[17:02:04.825]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:04.825]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.825]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.825]                               "release", "version")], collapse = " "), 
[17:02:04.825]                             hostname = base::Sys.info()[["nodename"]])
[17:02:04.825]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.825]                             info)
[17:02:04.825]                           info <- base::paste(info, collapse = "; ")
[17:02:04.825]                           if (!has_future) {
[17:02:04.825]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.825]                               info)
[17:02:04.825]                           }
[17:02:04.825]                           else {
[17:02:04.825]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.825]                               info, version)
[17:02:04.825]                           }
[17:02:04.825]                           base::stop(msg)
[17:02:04.825]                         }
[17:02:04.825]                       })
[17:02:04.825]                     }
[17:02:04.825]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.825]                     base::options(mc.cores = 1L)
[17:02:04.825]                   }
[17:02:04.825]                   ...future.strategy.old <- future::plan("list")
[17:02:04.825]                   options(future.plan = NULL)
[17:02:04.825]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.825]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.825]                 }
[17:02:04.825]                 ...future.workdir <- getwd()
[17:02:04.825]             }
[17:02:04.825]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.825]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.825]         }
[17:02:04.825]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.825]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.825]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.825]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.825]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.825]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.825]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.825]             base::names(...future.oldOptions))
[17:02:04.825]     }
[17:02:04.825]     if (FALSE) {
[17:02:04.825]     }
[17:02:04.825]     else {
[17:02:04.825]         if (TRUE) {
[17:02:04.825]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.825]                 open = "w")
[17:02:04.825]         }
[17:02:04.825]         else {
[17:02:04.825]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.825]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.825]         }
[17:02:04.825]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.825]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.825]             base::sink(type = "output", split = FALSE)
[17:02:04.825]             base::close(...future.stdout)
[17:02:04.825]         }, add = TRUE)
[17:02:04.825]     }
[17:02:04.825]     ...future.frame <- base::sys.nframe()
[17:02:04.825]     ...future.conditions <- base::list()
[17:02:04.825]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.825]     if (FALSE) {
[17:02:04.825]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.825]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.825]     }
[17:02:04.825]     ...future.result <- base::tryCatch({
[17:02:04.825]         base::withCallingHandlers({
[17:02:04.825]             ...future.value <- base::withVisible(base::local({
[17:02:04.825]                 withCallingHandlers({
[17:02:04.825]                   {
[17:02:04.825]                     sum(x, y, ...)
[17:02:04.825]                   }
[17:02:04.825]                 }, immediateCondition = function(cond) {
[17:02:04.825]                   save_rds <- function (object, pathname, ...) 
[17:02:04.825]                   {
[17:02:04.825]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:04.825]                     if (file_test("-f", pathname_tmp)) {
[17:02:04.825]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.825]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:04.825]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.825]                         fi_tmp[["mtime"]])
[17:02:04.825]                     }
[17:02:04.825]                     tryCatch({
[17:02:04.825]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:04.825]                     }, error = function(ex) {
[17:02:04.825]                       msg <- conditionMessage(ex)
[17:02:04.825]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.825]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:04.825]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.825]                         fi_tmp[["mtime"]], msg)
[17:02:04.825]                       ex$message <- msg
[17:02:04.825]                       stop(ex)
[17:02:04.825]                     })
[17:02:04.825]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:04.825]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:04.825]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:04.825]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.825]                       fi <- file.info(pathname)
[17:02:04.825]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:04.825]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.825]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:04.825]                         fi[["size"]], fi[["mtime"]])
[17:02:04.825]                       stop(msg)
[17:02:04.825]                     }
[17:02:04.825]                     invisible(pathname)
[17:02:04.825]                   }
[17:02:04.825]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:04.825]                     rootPath = tempdir()) 
[17:02:04.825]                   {
[17:02:04.825]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:04.825]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:04.825]                       tmpdir = path, fileext = ".rds")
[17:02:04.825]                     save_rds(obj, file)
[17:02:04.825]                   }
[17:02:04.825]                   saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")
[17:02:04.825]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.825]                   {
[17:02:04.825]                     inherits <- base::inherits
[17:02:04.825]                     invokeRestart <- base::invokeRestart
[17:02:04.825]                     is.null <- base::is.null
[17:02:04.825]                     muffled <- FALSE
[17:02:04.825]                     if (inherits(cond, "message")) {
[17:02:04.825]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.825]                       if (muffled) 
[17:02:04.825]                         invokeRestart("muffleMessage")
[17:02:04.825]                     }
[17:02:04.825]                     else if (inherits(cond, "warning")) {
[17:02:04.825]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.825]                       if (muffled) 
[17:02:04.825]                         invokeRestart("muffleWarning")
[17:02:04.825]                     }
[17:02:04.825]                     else if (inherits(cond, "condition")) {
[17:02:04.825]                       if (!is.null(pattern)) {
[17:02:04.825]                         computeRestarts <- base::computeRestarts
[17:02:04.825]                         grepl <- base::grepl
[17:02:04.825]                         restarts <- computeRestarts(cond)
[17:02:04.825]                         for (restart in restarts) {
[17:02:04.825]                           name <- restart$name
[17:02:04.825]                           if (is.null(name)) 
[17:02:04.825]                             next
[17:02:04.825]                           if (!grepl(pattern, name)) 
[17:02:04.825]                             next
[17:02:04.825]                           invokeRestart(restart)
[17:02:04.825]                           muffled <- TRUE
[17:02:04.825]                           break
[17:02:04.825]                         }
[17:02:04.825]                       }
[17:02:04.825]                     }
[17:02:04.825]                     invisible(muffled)
[17:02:04.825]                   }
[17:02:04.825]                   muffleCondition(cond)
[17:02:04.825]                 })
[17:02:04.825]             }))
[17:02:04.825]             future::FutureResult(value = ...future.value$value, 
[17:02:04.825]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.825]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.825]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.825]                     ...future.globalenv.names))
[17:02:04.825]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.825]         }, condition = base::local({
[17:02:04.825]             c <- base::c
[17:02:04.825]             inherits <- base::inherits
[17:02:04.825]             invokeRestart <- base::invokeRestart
[17:02:04.825]             length <- base::length
[17:02:04.825]             list <- base::list
[17:02:04.825]             seq.int <- base::seq.int
[17:02:04.825]             signalCondition <- base::signalCondition
[17:02:04.825]             sys.calls <- base::sys.calls
[17:02:04.825]             `[[` <- base::`[[`
[17:02:04.825]             `+` <- base::`+`
[17:02:04.825]             `<<-` <- base::`<<-`
[17:02:04.825]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.825]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.825]                   3L)]
[17:02:04.825]             }
[17:02:04.825]             function(cond) {
[17:02:04.825]                 is_error <- inherits(cond, "error")
[17:02:04.825]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.825]                   NULL)
[17:02:04.825]                 if (is_error) {
[17:02:04.825]                   sessionInformation <- function() {
[17:02:04.825]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.825]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.825]                       search = base::search(), system = base::Sys.info())
[17:02:04.825]                   }
[17:02:04.825]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.825]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.825]                     cond$call), session = sessionInformation(), 
[17:02:04.825]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.825]                   signalCondition(cond)
[17:02:04.825]                 }
[17:02:04.825]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.825]                 "immediateCondition"))) {
[17:02:04.825]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.825]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.825]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.825]                   if (TRUE && !signal) {
[17:02:04.825]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.825]                     {
[17:02:04.825]                       inherits <- base::inherits
[17:02:04.825]                       invokeRestart <- base::invokeRestart
[17:02:04.825]                       is.null <- base::is.null
[17:02:04.825]                       muffled <- FALSE
[17:02:04.825]                       if (inherits(cond, "message")) {
[17:02:04.825]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.825]                         if (muffled) 
[17:02:04.825]                           invokeRestart("muffleMessage")
[17:02:04.825]                       }
[17:02:04.825]                       else if (inherits(cond, "warning")) {
[17:02:04.825]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.825]                         if (muffled) 
[17:02:04.825]                           invokeRestart("muffleWarning")
[17:02:04.825]                       }
[17:02:04.825]                       else if (inherits(cond, "condition")) {
[17:02:04.825]                         if (!is.null(pattern)) {
[17:02:04.825]                           computeRestarts <- base::computeRestarts
[17:02:04.825]                           grepl <- base::grepl
[17:02:04.825]                           restarts <- computeRestarts(cond)
[17:02:04.825]                           for (restart in restarts) {
[17:02:04.825]                             name <- restart$name
[17:02:04.825]                             if (is.null(name)) 
[17:02:04.825]                               next
[17:02:04.825]                             if (!grepl(pattern, name)) 
[17:02:04.825]                               next
[17:02:04.825]                             invokeRestart(restart)
[17:02:04.825]                             muffled <- TRUE
[17:02:04.825]                             break
[17:02:04.825]                           }
[17:02:04.825]                         }
[17:02:04.825]                       }
[17:02:04.825]                       invisible(muffled)
[17:02:04.825]                     }
[17:02:04.825]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.825]                   }
[17:02:04.825]                 }
[17:02:04.825]                 else {
[17:02:04.825]                   if (TRUE) {
[17:02:04.825]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.825]                     {
[17:02:04.825]                       inherits <- base::inherits
[17:02:04.825]                       invokeRestart <- base::invokeRestart
[17:02:04.825]                       is.null <- base::is.null
[17:02:04.825]                       muffled <- FALSE
[17:02:04.825]                       if (inherits(cond, "message")) {
[17:02:04.825]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.825]                         if (muffled) 
[17:02:04.825]                           invokeRestart("muffleMessage")
[17:02:04.825]                       }
[17:02:04.825]                       else if (inherits(cond, "warning")) {
[17:02:04.825]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.825]                         if (muffled) 
[17:02:04.825]                           invokeRestart("muffleWarning")
[17:02:04.825]                       }
[17:02:04.825]                       else if (inherits(cond, "condition")) {
[17:02:04.825]                         if (!is.null(pattern)) {
[17:02:04.825]                           computeRestarts <- base::computeRestarts
[17:02:04.825]                           grepl <- base::grepl
[17:02:04.825]                           restarts <- computeRestarts(cond)
[17:02:04.825]                           for (restart in restarts) {
[17:02:04.825]                             name <- restart$name
[17:02:04.825]                             if (is.null(name)) 
[17:02:04.825]                               next
[17:02:04.825]                             if (!grepl(pattern, name)) 
[17:02:04.825]                               next
[17:02:04.825]                             invokeRestart(restart)
[17:02:04.825]                             muffled <- TRUE
[17:02:04.825]                             break
[17:02:04.825]                           }
[17:02:04.825]                         }
[17:02:04.825]                       }
[17:02:04.825]                       invisible(muffled)
[17:02:04.825]                     }
[17:02:04.825]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.825]                   }
[17:02:04.825]                 }
[17:02:04.825]             }
[17:02:04.825]         }))
[17:02:04.825]     }, error = function(ex) {
[17:02:04.825]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.825]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.825]                 ...future.rng), started = ...future.startTime, 
[17:02:04.825]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.825]             version = "1.8"), class = "FutureResult")
[17:02:04.825]     }, finally = {
[17:02:04.825]         if (!identical(...future.workdir, getwd())) 
[17:02:04.825]             setwd(...future.workdir)
[17:02:04.825]         {
[17:02:04.825]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.825]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.825]             }
[17:02:04.825]             base::options(...future.oldOptions)
[17:02:04.825]             if (.Platform$OS.type == "windows") {
[17:02:04.825]                 old_names <- names(...future.oldEnvVars)
[17:02:04.825]                 envs <- base::Sys.getenv()
[17:02:04.825]                 names <- names(envs)
[17:02:04.825]                 common <- intersect(names, old_names)
[17:02:04.825]                 added <- setdiff(names, old_names)
[17:02:04.825]                 removed <- setdiff(old_names, names)
[17:02:04.825]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.825]                   envs[common]]
[17:02:04.825]                 NAMES <- toupper(changed)
[17:02:04.825]                 args <- list()
[17:02:04.825]                 for (kk in seq_along(NAMES)) {
[17:02:04.825]                   name <- changed[[kk]]
[17:02:04.825]                   NAME <- NAMES[[kk]]
[17:02:04.825]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.825]                     next
[17:02:04.825]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.825]                 }
[17:02:04.825]                 NAMES <- toupper(added)
[17:02:04.825]                 for (kk in seq_along(NAMES)) {
[17:02:04.825]                   name <- added[[kk]]
[17:02:04.825]                   NAME <- NAMES[[kk]]
[17:02:04.825]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.825]                     next
[17:02:04.825]                   args[[name]] <- ""
[17:02:04.825]                 }
[17:02:04.825]                 NAMES <- toupper(removed)
[17:02:04.825]                 for (kk in seq_along(NAMES)) {
[17:02:04.825]                   name <- removed[[kk]]
[17:02:04.825]                   NAME <- NAMES[[kk]]
[17:02:04.825]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.825]                     next
[17:02:04.825]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.825]                 }
[17:02:04.825]                 if (length(args) > 0) 
[17:02:04.825]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.825]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.825]             }
[17:02:04.825]             else {
[17:02:04.825]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.825]             }
[17:02:04.825]             {
[17:02:04.825]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.825]                   0L) {
[17:02:04.825]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.825]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.825]                   base::options(opts)
[17:02:04.825]                 }
[17:02:04.825]                 {
[17:02:04.825]                   {
[17:02:04.825]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.825]                     NULL
[17:02:04.825]                   }
[17:02:04.825]                   options(future.plan = NULL)
[17:02:04.825]                   if (is.na(NA_character_)) 
[17:02:04.825]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.825]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.825]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.825]                     .init = FALSE)
[17:02:04.825]                 }
[17:02:04.825]             }
[17:02:04.825]         }
[17:02:04.825]     })
[17:02:04.825]     if (TRUE) {
[17:02:04.825]         base::sink(type = "output", split = FALSE)
[17:02:04.825]         if (TRUE) {
[17:02:04.825]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.825]         }
[17:02:04.825]         else {
[17:02:04.825]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.825]         }
[17:02:04.825]         base::close(...future.stdout)
[17:02:04.825]         ...future.stdout <- NULL
[17:02:04.825]     }
[17:02:04.825]     ...future.result$conditions <- ...future.conditions
[17:02:04.825]     ...future.result$finished <- base::Sys.time()
[17:02:04.825]     ...future.result
[17:02:04.825] }
[17:02:04.828] assign_globals() ...
[17:02:04.828] List of 2
[17:02:04.828]  $ x: int [1:2] 1 2
[17:02:04.828]  $ y: num 3
[17:02:04.828]  - attr(*, "where")=List of 2
[17:02:04.828]   ..$ x:<environment: R_EmptyEnv> 
[17:02:04.828]   ..$ y:<environment: R_EmptyEnv> 
[17:02:04.828]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.828]  - attr(*, "resolved")= logi FALSE
[17:02:04.828]  - attr(*, "total_size")= num 112
[17:02:04.828]  - attr(*, "already-done")= logi TRUE
[17:02:04.832] - copied ‘x’ to environment
[17:02:04.832] - copied ‘y’ to environment
[17:02:04.832] assign_globals() ... done
[17:02:04.832] requestCore(): workers = 2
[17:02:04.834] MulticoreFuture started
[17:02:04.835] - Launch lazy future ... done
[17:02:04.835] run() for ‘MulticoreFuture’ ... done
[17:02:04.835] result() for MulticoreFuture ...
[17:02:04.835] plan(): Setting new future strategy stack:
[17:02:04.836] List of future strategies:
[17:02:04.836] 1. sequential:
[17:02:04.836]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.836]    - tweaked: FALSE
[17:02:04.836]    - call: NULL
[17:02:04.837] plan(): nbrOfWorkers() = 1
[17:02:04.839] plan(): Setting new future strategy stack:
[17:02:04.839] List of future strategies:
[17:02:04.839] 1. multicore:
[17:02:04.839]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.839]    - tweaked: FALSE
[17:02:04.839]    - call: plan(strategy, substitute = FALSE)
[17:02:04.844] plan(): nbrOfWorkers() = 2
[17:02:04.850] result() for MulticoreFuture ...
[17:02:04.850] result() for MulticoreFuture ... done
[17:02:04.850] signalConditions() ...
[17:02:04.850]  - include = ‘immediateCondition’
[17:02:04.850]  - exclude = 
[17:02:04.851]  - resignal = FALSE
[17:02:04.851]  - Number of conditions: 1
[17:02:04.851] signalConditions() ... done
[17:02:04.851] result() for MulticoreFuture ... done
[17:02:04.851] result() for MulticoreFuture ...
[17:02:04.851] result() for MulticoreFuture ... done
[17:02:04.852] signalConditions() ...
[17:02:04.852]  - include = ‘immediateCondition’
[17:02:04.852]  - exclude = 
[17:02:04.852]  - resignal = FALSE
[17:02:04.852]  - Number of conditions: 1
[17:02:04.852] signalConditions() ... done
[17:02:04.853] Future state: ‘finished’
[17:02:04.853] result() for MulticoreFuture ...
[17:02:04.853] result() for MulticoreFuture ... done
[17:02:04.853] signalConditions() ...
[17:02:04.853]  - include = ‘condition’
[17:02:04.853]  - exclude = ‘immediateCondition’
[17:02:04.853]  - resignal = TRUE
[17:02:04.853]  - Number of conditions: 1
[17:02:04.853]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:04.854] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5572d26887d0>
Arguments '...' exists: TRUE
[17:02:04.855] getGlobalsAndPackages() ...
[17:02:04.855] - globals passed as-is: [1] ‘...’
[17:02:04.855] Resolving globals: FALSE
[17:02:04.856] Tweak future expression to call with '...' arguments ...
[17:02:04.856] {
[17:02:04.856]     do.call(function(...) {
[17:02:04.856]         fcn <- function() sum(...)
[17:02:04.856]         fcn()
[17:02:04.856]     }, args = future.call.arguments)
[17:02:04.856] }
[17:02:04.856] Tweak future expression to call with '...' arguments ... DONE
[17:02:04.857] The total size of the 1 globals is 112 bytes (112 bytes)
[17:02:04.857] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[17:02:04.857] - globals: [1] ‘future.call.arguments’
[17:02:04.857] 
[17:02:04.857] getGlobalsAndPackages() ... DONE
[17:02:04.858] run() for ‘Future’ ...
[17:02:04.858] - state: ‘created’
[17:02:04.858] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.865] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.865] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:04.865]   - Field: ‘label’
[17:02:04.865]   - Field: ‘local’
[17:02:04.865]   - Field: ‘owner’
[17:02:04.866]   - Field: ‘envir’
[17:02:04.866]   - Field: ‘workers’
[17:02:04.866]   - Field: ‘packages’
[17:02:04.866]   - Field: ‘gc’
[17:02:04.866]   - Field: ‘job’
[17:02:04.866]   - Field: ‘conditions’
[17:02:04.866]   - Field: ‘expr’
[17:02:04.866]   - Field: ‘uuid’
[17:02:04.867]   - Field: ‘seed’
[17:02:04.867]   - Field: ‘version’
[17:02:04.867]   - Field: ‘result’
[17:02:04.867]   - Field: ‘asynchronous’
[17:02:04.867]   - Field: ‘calls’
[17:02:04.867]   - Field: ‘globals’
[17:02:04.867]   - Field: ‘stdout’
[17:02:04.867]   - Field: ‘earlySignal’
[17:02:04.868]   - Field: ‘lazy’
[17:02:04.868]   - Field: ‘state’
[17:02:04.868] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:04.868] - Launch lazy future ...
[17:02:04.868] Packages needed by the future expression (n = 0): <none>
[17:02:04.868] Packages needed by future strategies (n = 0): <none>
[17:02:04.869] {
[17:02:04.869]     {
[17:02:04.869]         {
[17:02:04.869]             ...future.startTime <- base::Sys.time()
[17:02:04.869]             {
[17:02:04.869]                 {
[17:02:04.869]                   {
[17:02:04.869]                     {
[17:02:04.869]                       base::local({
[17:02:04.869]                         has_future <- base::requireNamespace("future", 
[17:02:04.869]                           quietly = TRUE)
[17:02:04.869]                         if (has_future) {
[17:02:04.869]                           ns <- base::getNamespace("future")
[17:02:04.869]                           version <- ns[[".package"]][["version"]]
[17:02:04.869]                           if (is.null(version)) 
[17:02:04.869]                             version <- utils::packageVersion("future")
[17:02:04.869]                         }
[17:02:04.869]                         else {
[17:02:04.869]                           version <- NULL
[17:02:04.869]                         }
[17:02:04.869]                         if (!has_future || version < "1.8.0") {
[17:02:04.869]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.869]                             "", base::R.version$version.string), 
[17:02:04.869]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:04.869]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.869]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.869]                               "release", "version")], collapse = " "), 
[17:02:04.869]                             hostname = base::Sys.info()[["nodename"]])
[17:02:04.869]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.869]                             info)
[17:02:04.869]                           info <- base::paste(info, collapse = "; ")
[17:02:04.869]                           if (!has_future) {
[17:02:04.869]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.869]                               info)
[17:02:04.869]                           }
[17:02:04.869]                           else {
[17:02:04.869]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.869]                               info, version)
[17:02:04.869]                           }
[17:02:04.869]                           base::stop(msg)
[17:02:04.869]                         }
[17:02:04.869]                       })
[17:02:04.869]                     }
[17:02:04.869]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.869]                     base::options(mc.cores = 1L)
[17:02:04.869]                   }
[17:02:04.869]                   ...future.strategy.old <- future::plan("list")
[17:02:04.869]                   options(future.plan = NULL)
[17:02:04.869]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.869]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.869]                 }
[17:02:04.869]                 ...future.workdir <- getwd()
[17:02:04.869]             }
[17:02:04.869]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.869]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.869]         }
[17:02:04.869]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.869]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.869]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.869]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.869]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.869]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.869]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.869]             base::names(...future.oldOptions))
[17:02:04.869]     }
[17:02:04.869]     if (FALSE) {
[17:02:04.869]     }
[17:02:04.869]     else {
[17:02:04.869]         if (TRUE) {
[17:02:04.869]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.869]                 open = "w")
[17:02:04.869]         }
[17:02:04.869]         else {
[17:02:04.869]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.869]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.869]         }
[17:02:04.869]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.869]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.869]             base::sink(type = "output", split = FALSE)
[17:02:04.869]             base::close(...future.stdout)
[17:02:04.869]         }, add = TRUE)
[17:02:04.869]     }
[17:02:04.869]     ...future.frame <- base::sys.nframe()
[17:02:04.869]     ...future.conditions <- base::list()
[17:02:04.869]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.869]     if (FALSE) {
[17:02:04.869]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.869]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.869]     }
[17:02:04.869]     ...future.result <- base::tryCatch({
[17:02:04.869]         base::withCallingHandlers({
[17:02:04.869]             ...future.value <- base::withVisible(base::local({
[17:02:04.869]                 withCallingHandlers({
[17:02:04.869]                   {
[17:02:04.869]                     do.call(function(...) {
[17:02:04.869]                       fcn <- function() sum(...)
[17:02:04.869]                       fcn()
[17:02:04.869]                     }, args = future.call.arguments)
[17:02:04.869]                   }
[17:02:04.869]                 }, immediateCondition = function(cond) {
[17:02:04.869]                   save_rds <- function (object, pathname, ...) 
[17:02:04.869]                   {
[17:02:04.869]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:04.869]                     if (file_test("-f", pathname_tmp)) {
[17:02:04.869]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.869]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:04.869]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.869]                         fi_tmp[["mtime"]])
[17:02:04.869]                     }
[17:02:04.869]                     tryCatch({
[17:02:04.869]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:04.869]                     }, error = function(ex) {
[17:02:04.869]                       msg <- conditionMessage(ex)
[17:02:04.869]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.869]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:04.869]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.869]                         fi_tmp[["mtime"]], msg)
[17:02:04.869]                       ex$message <- msg
[17:02:04.869]                       stop(ex)
[17:02:04.869]                     })
[17:02:04.869]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:04.869]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:04.869]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:04.869]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.869]                       fi <- file.info(pathname)
[17:02:04.869]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:04.869]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.869]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:04.869]                         fi[["size"]], fi[["mtime"]])
[17:02:04.869]                       stop(msg)
[17:02:04.869]                     }
[17:02:04.869]                     invisible(pathname)
[17:02:04.869]                   }
[17:02:04.869]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:04.869]                     rootPath = tempdir()) 
[17:02:04.869]                   {
[17:02:04.869]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:04.869]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:04.869]                       tmpdir = path, fileext = ".rds")
[17:02:04.869]                     save_rds(obj, file)
[17:02:04.869]                   }
[17:02:04.869]                   saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")
[17:02:04.869]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.869]                   {
[17:02:04.869]                     inherits <- base::inherits
[17:02:04.869]                     invokeRestart <- base::invokeRestart
[17:02:04.869]                     is.null <- base::is.null
[17:02:04.869]                     muffled <- FALSE
[17:02:04.869]                     if (inherits(cond, "message")) {
[17:02:04.869]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.869]                       if (muffled) 
[17:02:04.869]                         invokeRestart("muffleMessage")
[17:02:04.869]                     }
[17:02:04.869]                     else if (inherits(cond, "warning")) {
[17:02:04.869]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.869]                       if (muffled) 
[17:02:04.869]                         invokeRestart("muffleWarning")
[17:02:04.869]                     }
[17:02:04.869]                     else if (inherits(cond, "condition")) {
[17:02:04.869]                       if (!is.null(pattern)) {
[17:02:04.869]                         computeRestarts <- base::computeRestarts
[17:02:04.869]                         grepl <- base::grepl
[17:02:04.869]                         restarts <- computeRestarts(cond)
[17:02:04.869]                         for (restart in restarts) {
[17:02:04.869]                           name <- restart$name
[17:02:04.869]                           if (is.null(name)) 
[17:02:04.869]                             next
[17:02:04.869]                           if (!grepl(pattern, name)) 
[17:02:04.869]                             next
[17:02:04.869]                           invokeRestart(restart)
[17:02:04.869]                           muffled <- TRUE
[17:02:04.869]                           break
[17:02:04.869]                         }
[17:02:04.869]                       }
[17:02:04.869]                     }
[17:02:04.869]                     invisible(muffled)
[17:02:04.869]                   }
[17:02:04.869]                   muffleCondition(cond)
[17:02:04.869]                 })
[17:02:04.869]             }))
[17:02:04.869]             future::FutureResult(value = ...future.value$value, 
[17:02:04.869]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.869]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.869]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.869]                     ...future.globalenv.names))
[17:02:04.869]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.869]         }, condition = base::local({
[17:02:04.869]             c <- base::c
[17:02:04.869]             inherits <- base::inherits
[17:02:04.869]             invokeRestart <- base::invokeRestart
[17:02:04.869]             length <- base::length
[17:02:04.869]             list <- base::list
[17:02:04.869]             seq.int <- base::seq.int
[17:02:04.869]             signalCondition <- base::signalCondition
[17:02:04.869]             sys.calls <- base::sys.calls
[17:02:04.869]             `[[` <- base::`[[`
[17:02:04.869]             `+` <- base::`+`
[17:02:04.869]             `<<-` <- base::`<<-`
[17:02:04.869]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.869]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.869]                   3L)]
[17:02:04.869]             }
[17:02:04.869]             function(cond) {
[17:02:04.869]                 is_error <- inherits(cond, "error")
[17:02:04.869]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.869]                   NULL)
[17:02:04.869]                 if (is_error) {
[17:02:04.869]                   sessionInformation <- function() {
[17:02:04.869]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.869]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.869]                       search = base::search(), system = base::Sys.info())
[17:02:04.869]                   }
[17:02:04.869]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.869]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.869]                     cond$call), session = sessionInformation(), 
[17:02:04.869]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.869]                   signalCondition(cond)
[17:02:04.869]                 }
[17:02:04.869]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.869]                 "immediateCondition"))) {
[17:02:04.869]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.869]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.869]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.869]                   if (TRUE && !signal) {
[17:02:04.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.869]                     {
[17:02:04.869]                       inherits <- base::inherits
[17:02:04.869]                       invokeRestart <- base::invokeRestart
[17:02:04.869]                       is.null <- base::is.null
[17:02:04.869]                       muffled <- FALSE
[17:02:04.869]                       if (inherits(cond, "message")) {
[17:02:04.869]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.869]                         if (muffled) 
[17:02:04.869]                           invokeRestart("muffleMessage")
[17:02:04.869]                       }
[17:02:04.869]                       else if (inherits(cond, "warning")) {
[17:02:04.869]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.869]                         if (muffled) 
[17:02:04.869]                           invokeRestart("muffleWarning")
[17:02:04.869]                       }
[17:02:04.869]                       else if (inherits(cond, "condition")) {
[17:02:04.869]                         if (!is.null(pattern)) {
[17:02:04.869]                           computeRestarts <- base::computeRestarts
[17:02:04.869]                           grepl <- base::grepl
[17:02:04.869]                           restarts <- computeRestarts(cond)
[17:02:04.869]                           for (restart in restarts) {
[17:02:04.869]                             name <- restart$name
[17:02:04.869]                             if (is.null(name)) 
[17:02:04.869]                               next
[17:02:04.869]                             if (!grepl(pattern, name)) 
[17:02:04.869]                               next
[17:02:04.869]                             invokeRestart(restart)
[17:02:04.869]                             muffled <- TRUE
[17:02:04.869]                             break
[17:02:04.869]                           }
[17:02:04.869]                         }
[17:02:04.869]                       }
[17:02:04.869]                       invisible(muffled)
[17:02:04.869]                     }
[17:02:04.869]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.869]                   }
[17:02:04.869]                 }
[17:02:04.869]                 else {
[17:02:04.869]                   if (TRUE) {
[17:02:04.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.869]                     {
[17:02:04.869]                       inherits <- base::inherits
[17:02:04.869]                       invokeRestart <- base::invokeRestart
[17:02:04.869]                       is.null <- base::is.null
[17:02:04.869]                       muffled <- FALSE
[17:02:04.869]                       if (inherits(cond, "message")) {
[17:02:04.869]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.869]                         if (muffled) 
[17:02:04.869]                           invokeRestart("muffleMessage")
[17:02:04.869]                       }
[17:02:04.869]                       else if (inherits(cond, "warning")) {
[17:02:04.869]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.869]                         if (muffled) 
[17:02:04.869]                           invokeRestart("muffleWarning")
[17:02:04.869]                       }
[17:02:04.869]                       else if (inherits(cond, "condition")) {
[17:02:04.869]                         if (!is.null(pattern)) {
[17:02:04.869]                           computeRestarts <- base::computeRestarts
[17:02:04.869]                           grepl <- base::grepl
[17:02:04.869]                           restarts <- computeRestarts(cond)
[17:02:04.869]                           for (restart in restarts) {
[17:02:04.869]                             name <- restart$name
[17:02:04.869]                             if (is.null(name)) 
[17:02:04.869]                               next
[17:02:04.869]                             if (!grepl(pattern, name)) 
[17:02:04.869]                               next
[17:02:04.869]                             invokeRestart(restart)
[17:02:04.869]                             muffled <- TRUE
[17:02:04.869]                             break
[17:02:04.869]                           }
[17:02:04.869]                         }
[17:02:04.869]                       }
[17:02:04.869]                       invisible(muffled)
[17:02:04.869]                     }
[17:02:04.869]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.869]                   }
[17:02:04.869]                 }
[17:02:04.869]             }
[17:02:04.869]         }))
[17:02:04.869]     }, error = function(ex) {
[17:02:04.869]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.869]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.869]                 ...future.rng), started = ...future.startTime, 
[17:02:04.869]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.869]             version = "1.8"), class = "FutureResult")
[17:02:04.869]     }, finally = {
[17:02:04.869]         if (!identical(...future.workdir, getwd())) 
[17:02:04.869]             setwd(...future.workdir)
[17:02:04.869]         {
[17:02:04.869]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.869]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.869]             }
[17:02:04.869]             base::options(...future.oldOptions)
[17:02:04.869]             if (.Platform$OS.type == "windows") {
[17:02:04.869]                 old_names <- names(...future.oldEnvVars)
[17:02:04.869]                 envs <- base::Sys.getenv()
[17:02:04.869]                 names <- names(envs)
[17:02:04.869]                 common <- intersect(names, old_names)
[17:02:04.869]                 added <- setdiff(names, old_names)
[17:02:04.869]                 removed <- setdiff(old_names, names)
[17:02:04.869]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.869]                   envs[common]]
[17:02:04.869]                 NAMES <- toupper(changed)
[17:02:04.869]                 args <- list()
[17:02:04.869]                 for (kk in seq_along(NAMES)) {
[17:02:04.869]                   name <- changed[[kk]]
[17:02:04.869]                   NAME <- NAMES[[kk]]
[17:02:04.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.869]                     next
[17:02:04.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.869]                 }
[17:02:04.869]                 NAMES <- toupper(added)
[17:02:04.869]                 for (kk in seq_along(NAMES)) {
[17:02:04.869]                   name <- added[[kk]]
[17:02:04.869]                   NAME <- NAMES[[kk]]
[17:02:04.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.869]                     next
[17:02:04.869]                   args[[name]] <- ""
[17:02:04.869]                 }
[17:02:04.869]                 NAMES <- toupper(removed)
[17:02:04.869]                 for (kk in seq_along(NAMES)) {
[17:02:04.869]                   name <- removed[[kk]]
[17:02:04.869]                   NAME <- NAMES[[kk]]
[17:02:04.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.869]                     next
[17:02:04.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.869]                 }
[17:02:04.869]                 if (length(args) > 0) 
[17:02:04.869]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.869]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.869]             }
[17:02:04.869]             else {
[17:02:04.869]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.869]             }
[17:02:04.869]             {
[17:02:04.869]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.869]                   0L) {
[17:02:04.869]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.869]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.869]                   base::options(opts)
[17:02:04.869]                 }
[17:02:04.869]                 {
[17:02:04.869]                   {
[17:02:04.869]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.869]                     NULL
[17:02:04.869]                   }
[17:02:04.869]                   options(future.plan = NULL)
[17:02:04.869]                   if (is.na(NA_character_)) 
[17:02:04.869]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.869]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.869]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.869]                     .init = FALSE)
[17:02:04.869]                 }
[17:02:04.869]             }
[17:02:04.869]         }
[17:02:04.869]     })
[17:02:04.869]     if (TRUE) {
[17:02:04.869]         base::sink(type = "output", split = FALSE)
[17:02:04.869]         if (TRUE) {
[17:02:04.869]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.869]         }
[17:02:04.869]         else {
[17:02:04.869]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.869]         }
[17:02:04.869]         base::close(...future.stdout)
[17:02:04.869]         ...future.stdout <- NULL
[17:02:04.869]     }
[17:02:04.869]     ...future.result$conditions <- ...future.conditions
[17:02:04.869]     ...future.result$finished <- base::Sys.time()
[17:02:04.869]     ...future.result
[17:02:04.869] }
[17:02:04.871] assign_globals() ...
[17:02:04.871] List of 1
[17:02:04.871]  $ future.call.arguments:List of 2
[17:02:04.871]   ..$ : int [1:2] 1 2
[17:02:04.871]   ..$ : num 3
[17:02:04.871]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[17:02:04.871]  - attr(*, "where")=List of 1
[17:02:04.871]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[17:02:04.871]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.871]  - attr(*, "resolved")= logi FALSE
[17:02:04.871]  - attr(*, "total_size")= num 112
[17:02:04.871]  - attr(*, "already-done")= logi TRUE
[17:02:04.875] - copied ‘future.call.arguments’ to environment
[17:02:04.875] assign_globals() ... done
[17:02:04.875] requestCore(): workers = 2
[17:02:04.878] MulticoreFuture started
[17:02:04.878] - Launch lazy future ... done
[17:02:04.878] run() for ‘MulticoreFuture’ ... done
[17:02:04.878] result() for MulticoreFuture ...
[17:02:04.879] plan(): Setting new future strategy stack:
[17:02:04.879] List of future strategies:
[17:02:04.879] 1. sequential:
[17:02:04.879]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.879]    - tweaked: FALSE
[17:02:04.879]    - call: NULL
[17:02:04.880] plan(): nbrOfWorkers() = 1
[17:02:04.882] plan(): Setting new future strategy stack:
[17:02:04.882] List of future strategies:
[17:02:04.882] 1. multicore:
[17:02:04.882]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.882]    - tweaked: FALSE
[17:02:04.882]    - call: plan(strategy, substitute = FALSE)
[17:02:04.887] plan(): nbrOfWorkers() = 2
[17:02:04.888] result() for MulticoreFuture ...
[17:02:04.888] result() for MulticoreFuture ... done
[17:02:04.889] result() for MulticoreFuture ... done
[17:02:04.889] result() for MulticoreFuture ...
[17:02:04.889] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5572d06cecc0>
Using '...' in a formula
[17:02:04.889] getGlobalsAndPackages() ...
[17:02:04.889] Searching for globals...
[17:02:04.893] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[17:02:04.893] Searching for globals ... DONE
[17:02:04.893] Resolving globals: FALSE
[17:02:04.894] Tweak future expression to call with '...' arguments ...
[17:02:04.894] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[17:02:04.895] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:04.895] - globals: [3] ‘fcn’, ‘x’, ‘y’
[17:02:04.895] 
[17:02:04.895] getGlobalsAndPackages() ... DONE
[17:02:04.896] run() for ‘Future’ ...
[17:02:04.896] - state: ‘created’
[17:02:04.896] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:04.900] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:04.900] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:04.900]   - Field: ‘label’
[17:02:04.900]   - Field: ‘local’
[17:02:04.900]   - Field: ‘owner’
[17:02:04.901]   - Field: ‘envir’
[17:02:04.901]   - Field: ‘workers’
[17:02:04.901]   - Field: ‘packages’
[17:02:04.901]   - Field: ‘gc’
[17:02:04.901]   - Field: ‘job’
[17:02:04.901]   - Field: ‘conditions’
[17:02:04.901]   - Field: ‘expr’
[17:02:04.901]   - Field: ‘uuid’
[17:02:04.901]   - Field: ‘seed’
[17:02:04.902]   - Field: ‘version’
[17:02:04.902]   - Field: ‘result’
[17:02:04.902]   - Field: ‘asynchronous’
[17:02:04.902]   - Field: ‘calls’
[17:02:04.902]   - Field: ‘globals’
[17:02:04.902]   - Field: ‘stdout’
[17:02:04.902]   - Field: ‘earlySignal’
[17:02:04.902]   - Field: ‘lazy’
[17:02:04.902]   - Field: ‘state’
[17:02:04.903] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:04.903] - Launch lazy future ...
[17:02:04.903] Packages needed by the future expression (n = 0): <none>
[17:02:04.903] Packages needed by future strategies (n = 0): <none>
[17:02:04.904] {
[17:02:04.904]     {
[17:02:04.904]         {
[17:02:04.904]             ...future.startTime <- base::Sys.time()
[17:02:04.904]             {
[17:02:04.904]                 {
[17:02:04.904]                   {
[17:02:04.904]                     {
[17:02:04.904]                       base::local({
[17:02:04.904]                         has_future <- base::requireNamespace("future", 
[17:02:04.904]                           quietly = TRUE)
[17:02:04.904]                         if (has_future) {
[17:02:04.904]                           ns <- base::getNamespace("future")
[17:02:04.904]                           version <- ns[[".package"]][["version"]]
[17:02:04.904]                           if (is.null(version)) 
[17:02:04.904]                             version <- utils::packageVersion("future")
[17:02:04.904]                         }
[17:02:04.904]                         else {
[17:02:04.904]                           version <- NULL
[17:02:04.904]                         }
[17:02:04.904]                         if (!has_future || version < "1.8.0") {
[17:02:04.904]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:04.904]                             "", base::R.version$version.string), 
[17:02:04.904]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:04.904]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:04.904]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:04.904]                               "release", "version")], collapse = " "), 
[17:02:04.904]                             hostname = base::Sys.info()[["nodename"]])
[17:02:04.904]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:04.904]                             info)
[17:02:04.904]                           info <- base::paste(info, collapse = "; ")
[17:02:04.904]                           if (!has_future) {
[17:02:04.904]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:04.904]                               info)
[17:02:04.904]                           }
[17:02:04.904]                           else {
[17:02:04.904]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:04.904]                               info, version)
[17:02:04.904]                           }
[17:02:04.904]                           base::stop(msg)
[17:02:04.904]                         }
[17:02:04.904]                       })
[17:02:04.904]                     }
[17:02:04.904]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:04.904]                     base::options(mc.cores = 1L)
[17:02:04.904]                   }
[17:02:04.904]                   ...future.strategy.old <- future::plan("list")
[17:02:04.904]                   options(future.plan = NULL)
[17:02:04.904]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.904]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:04.904]                 }
[17:02:04.904]                 ...future.workdir <- getwd()
[17:02:04.904]             }
[17:02:04.904]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:04.904]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:04.904]         }
[17:02:04.904]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:04.904]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:04.904]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:04.904]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:04.904]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:04.904]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:04.904]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:04.904]             base::names(...future.oldOptions))
[17:02:04.904]     }
[17:02:04.904]     if (FALSE) {
[17:02:04.904]     }
[17:02:04.904]     else {
[17:02:04.904]         if (TRUE) {
[17:02:04.904]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:04.904]                 open = "w")
[17:02:04.904]         }
[17:02:04.904]         else {
[17:02:04.904]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:04.904]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:04.904]         }
[17:02:04.904]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:04.904]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:04.904]             base::sink(type = "output", split = FALSE)
[17:02:04.904]             base::close(...future.stdout)
[17:02:04.904]         }, add = TRUE)
[17:02:04.904]     }
[17:02:04.904]     ...future.frame <- base::sys.nframe()
[17:02:04.904]     ...future.conditions <- base::list()
[17:02:04.904]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:04.904]     if (FALSE) {
[17:02:04.904]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:04.904]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:04.904]     }
[17:02:04.904]     ...future.result <- base::tryCatch({
[17:02:04.904]         base::withCallingHandlers({
[17:02:04.904]             ...future.value <- base::withVisible(base::local({
[17:02:04.904]                 withCallingHandlers({
[17:02:04.904]                   fcn(x, y)
[17:02:04.904]                 }, immediateCondition = function(cond) {
[17:02:04.904]                   save_rds <- function (object, pathname, ...) 
[17:02:04.904]                   {
[17:02:04.904]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:04.904]                     if (file_test("-f", pathname_tmp)) {
[17:02:04.904]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.904]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:04.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.904]                         fi_tmp[["mtime"]])
[17:02:04.904]                     }
[17:02:04.904]                     tryCatch({
[17:02:04.904]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:04.904]                     }, error = function(ex) {
[17:02:04.904]                       msg <- conditionMessage(ex)
[17:02:04.904]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.904]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:04.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.904]                         fi_tmp[["mtime"]], msg)
[17:02:04.904]                       ex$message <- msg
[17:02:04.904]                       stop(ex)
[17:02:04.904]                     })
[17:02:04.904]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:04.904]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:04.904]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:04.904]                       fi_tmp <- file.info(pathname_tmp)
[17:02:04.904]                       fi <- file.info(pathname)
[17:02:04.904]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:04.904]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:04.904]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:04.904]                         fi[["size"]], fi[["mtime"]])
[17:02:04.904]                       stop(msg)
[17:02:04.904]                     }
[17:02:04.904]                     invisible(pathname)
[17:02:04.904]                   }
[17:02:04.904]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:04.904]                     rootPath = tempdir()) 
[17:02:04.904]                   {
[17:02:04.904]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:04.904]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:04.904]                       tmpdir = path, fileext = ".rds")
[17:02:04.904]                     save_rds(obj, file)
[17:02:04.904]                   }
[17:02:04.904]                   saveImmediateCondition(cond, path = "/tmp/RtmpOIC9Rb/.future/immediateConditions")
[17:02:04.904]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.904]                   {
[17:02:04.904]                     inherits <- base::inherits
[17:02:04.904]                     invokeRestart <- base::invokeRestart
[17:02:04.904]                     is.null <- base::is.null
[17:02:04.904]                     muffled <- FALSE
[17:02:04.904]                     if (inherits(cond, "message")) {
[17:02:04.904]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:04.904]                       if (muffled) 
[17:02:04.904]                         invokeRestart("muffleMessage")
[17:02:04.904]                     }
[17:02:04.904]                     else if (inherits(cond, "warning")) {
[17:02:04.904]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:04.904]                       if (muffled) 
[17:02:04.904]                         invokeRestart("muffleWarning")
[17:02:04.904]                     }
[17:02:04.904]                     else if (inherits(cond, "condition")) {
[17:02:04.904]                       if (!is.null(pattern)) {
[17:02:04.904]                         computeRestarts <- base::computeRestarts
[17:02:04.904]                         grepl <- base::grepl
[17:02:04.904]                         restarts <- computeRestarts(cond)
[17:02:04.904]                         for (restart in restarts) {
[17:02:04.904]                           name <- restart$name
[17:02:04.904]                           if (is.null(name)) 
[17:02:04.904]                             next
[17:02:04.904]                           if (!grepl(pattern, name)) 
[17:02:04.904]                             next
[17:02:04.904]                           invokeRestart(restart)
[17:02:04.904]                           muffled <- TRUE
[17:02:04.904]                           break
[17:02:04.904]                         }
[17:02:04.904]                       }
[17:02:04.904]                     }
[17:02:04.904]                     invisible(muffled)
[17:02:04.904]                   }
[17:02:04.904]                   muffleCondition(cond)
[17:02:04.904]                 })
[17:02:04.904]             }))
[17:02:04.904]             future::FutureResult(value = ...future.value$value, 
[17:02:04.904]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.904]                   ...future.rng), globalenv = if (FALSE) 
[17:02:04.904]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:04.904]                     ...future.globalenv.names))
[17:02:04.904]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:04.904]         }, condition = base::local({
[17:02:04.904]             c <- base::c
[17:02:04.904]             inherits <- base::inherits
[17:02:04.904]             invokeRestart <- base::invokeRestart
[17:02:04.904]             length <- base::length
[17:02:04.904]             list <- base::list
[17:02:04.904]             seq.int <- base::seq.int
[17:02:04.904]             signalCondition <- base::signalCondition
[17:02:04.904]             sys.calls <- base::sys.calls
[17:02:04.904]             `[[` <- base::`[[`
[17:02:04.904]             `+` <- base::`+`
[17:02:04.904]             `<<-` <- base::`<<-`
[17:02:04.904]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:04.904]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:04.904]                   3L)]
[17:02:04.904]             }
[17:02:04.904]             function(cond) {
[17:02:04.904]                 is_error <- inherits(cond, "error")
[17:02:04.904]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:04.904]                   NULL)
[17:02:04.904]                 if (is_error) {
[17:02:04.904]                   sessionInformation <- function() {
[17:02:04.904]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:04.904]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:04.904]                       search = base::search(), system = base::Sys.info())
[17:02:04.904]                   }
[17:02:04.904]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.904]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:04.904]                     cond$call), session = sessionInformation(), 
[17:02:04.904]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:04.904]                   signalCondition(cond)
[17:02:04.904]                 }
[17:02:04.904]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:04.904]                 "immediateCondition"))) {
[17:02:04.904]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:04.904]                   ...future.conditions[[length(...future.conditions) + 
[17:02:04.904]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:04.904]                   if (TRUE && !signal) {
[17:02:04.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.904]                     {
[17:02:04.904]                       inherits <- base::inherits
[17:02:04.904]                       invokeRestart <- base::invokeRestart
[17:02:04.904]                       is.null <- base::is.null
[17:02:04.904]                       muffled <- FALSE
[17:02:04.904]                       if (inherits(cond, "message")) {
[17:02:04.904]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.904]                         if (muffled) 
[17:02:04.904]                           invokeRestart("muffleMessage")
[17:02:04.904]                       }
[17:02:04.904]                       else if (inherits(cond, "warning")) {
[17:02:04.904]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.904]                         if (muffled) 
[17:02:04.904]                           invokeRestart("muffleWarning")
[17:02:04.904]                       }
[17:02:04.904]                       else if (inherits(cond, "condition")) {
[17:02:04.904]                         if (!is.null(pattern)) {
[17:02:04.904]                           computeRestarts <- base::computeRestarts
[17:02:04.904]                           grepl <- base::grepl
[17:02:04.904]                           restarts <- computeRestarts(cond)
[17:02:04.904]                           for (restart in restarts) {
[17:02:04.904]                             name <- restart$name
[17:02:04.904]                             if (is.null(name)) 
[17:02:04.904]                               next
[17:02:04.904]                             if (!grepl(pattern, name)) 
[17:02:04.904]                               next
[17:02:04.904]                             invokeRestart(restart)
[17:02:04.904]                             muffled <- TRUE
[17:02:04.904]                             break
[17:02:04.904]                           }
[17:02:04.904]                         }
[17:02:04.904]                       }
[17:02:04.904]                       invisible(muffled)
[17:02:04.904]                     }
[17:02:04.904]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.904]                   }
[17:02:04.904]                 }
[17:02:04.904]                 else {
[17:02:04.904]                   if (TRUE) {
[17:02:04.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:04.904]                     {
[17:02:04.904]                       inherits <- base::inherits
[17:02:04.904]                       invokeRestart <- base::invokeRestart
[17:02:04.904]                       is.null <- base::is.null
[17:02:04.904]                       muffled <- FALSE
[17:02:04.904]                       if (inherits(cond, "message")) {
[17:02:04.904]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:04.904]                         if (muffled) 
[17:02:04.904]                           invokeRestart("muffleMessage")
[17:02:04.904]                       }
[17:02:04.904]                       else if (inherits(cond, "warning")) {
[17:02:04.904]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:04.904]                         if (muffled) 
[17:02:04.904]                           invokeRestart("muffleWarning")
[17:02:04.904]                       }
[17:02:04.904]                       else if (inherits(cond, "condition")) {
[17:02:04.904]                         if (!is.null(pattern)) {
[17:02:04.904]                           computeRestarts <- base::computeRestarts
[17:02:04.904]                           grepl <- base::grepl
[17:02:04.904]                           restarts <- computeRestarts(cond)
[17:02:04.904]                           for (restart in restarts) {
[17:02:04.904]                             name <- restart$name
[17:02:04.904]                             if (is.null(name)) 
[17:02:04.904]                               next
[17:02:04.904]                             if (!grepl(pattern, name)) 
[17:02:04.904]                               next
[17:02:04.904]                             invokeRestart(restart)
[17:02:04.904]                             muffled <- TRUE
[17:02:04.904]                             break
[17:02:04.904]                           }
[17:02:04.904]                         }
[17:02:04.904]                       }
[17:02:04.904]                       invisible(muffled)
[17:02:04.904]                     }
[17:02:04.904]                     muffleCondition(cond, pattern = "^muffle")
[17:02:04.904]                   }
[17:02:04.904]                 }
[17:02:04.904]             }
[17:02:04.904]         }))
[17:02:04.904]     }, error = function(ex) {
[17:02:04.904]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:04.904]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:04.904]                 ...future.rng), started = ...future.startTime, 
[17:02:04.904]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:04.904]             version = "1.8"), class = "FutureResult")
[17:02:04.904]     }, finally = {
[17:02:04.904]         if (!identical(...future.workdir, getwd())) 
[17:02:04.904]             setwd(...future.workdir)
[17:02:04.904]         {
[17:02:04.904]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:04.904]                 ...future.oldOptions$nwarnings <- NULL
[17:02:04.904]             }
[17:02:04.904]             base::options(...future.oldOptions)
[17:02:04.904]             if (.Platform$OS.type == "windows") {
[17:02:04.904]                 old_names <- names(...future.oldEnvVars)
[17:02:04.904]                 envs <- base::Sys.getenv()
[17:02:04.904]                 names <- names(envs)
[17:02:04.904]                 common <- intersect(names, old_names)
[17:02:04.904]                 added <- setdiff(names, old_names)
[17:02:04.904]                 removed <- setdiff(old_names, names)
[17:02:04.904]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:04.904]                   envs[common]]
[17:02:04.904]                 NAMES <- toupper(changed)
[17:02:04.904]                 args <- list()
[17:02:04.904]                 for (kk in seq_along(NAMES)) {
[17:02:04.904]                   name <- changed[[kk]]
[17:02:04.904]                   NAME <- NAMES[[kk]]
[17:02:04.904]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.904]                     next
[17:02:04.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.904]                 }
[17:02:04.904]                 NAMES <- toupper(added)
[17:02:04.904]                 for (kk in seq_along(NAMES)) {
[17:02:04.904]                   name <- added[[kk]]
[17:02:04.904]                   NAME <- NAMES[[kk]]
[17:02:04.904]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.904]                     next
[17:02:04.904]                   args[[name]] <- ""
[17:02:04.904]                 }
[17:02:04.904]                 NAMES <- toupper(removed)
[17:02:04.904]                 for (kk in seq_along(NAMES)) {
[17:02:04.904]                   name <- removed[[kk]]
[17:02:04.904]                   NAME <- NAMES[[kk]]
[17:02:04.904]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:04.904]                     next
[17:02:04.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:04.904]                 }
[17:02:04.904]                 if (length(args) > 0) 
[17:02:04.904]                   base::do.call(base::Sys.setenv, args = args)
[17:02:04.904]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:04.904]             }
[17:02:04.904]             else {
[17:02:04.904]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:04.904]             }
[17:02:04.904]             {
[17:02:04.904]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:04.904]                   0L) {
[17:02:04.904]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:04.904]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:04.904]                   base::options(opts)
[17:02:04.904]                 }
[17:02:04.904]                 {
[17:02:04.904]                   {
[17:02:04.904]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:04.904]                     NULL
[17:02:04.904]                   }
[17:02:04.904]                   options(future.plan = NULL)
[17:02:04.904]                   if (is.na(NA_character_)) 
[17:02:04.904]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:04.904]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:04.904]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:04.904]                     .init = FALSE)
[17:02:04.904]                 }
[17:02:04.904]             }
[17:02:04.904]         }
[17:02:04.904]     })
[17:02:04.904]     if (TRUE) {
[17:02:04.904]         base::sink(type = "output", split = FALSE)
[17:02:04.904]         if (TRUE) {
[17:02:04.904]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:04.904]         }
[17:02:04.904]         else {
[17:02:04.904]             ...future.result["stdout"] <- base::list(NULL)
[17:02:04.904]         }
[17:02:04.904]         base::close(...future.stdout)
[17:02:04.904]         ...future.stdout <- NULL
[17:02:04.904]     }
[17:02:04.904]     ...future.result$conditions <- ...future.conditions
[17:02:04.904]     ...future.result$finished <- base::Sys.time()
[17:02:04.904]     ...future.result
[17:02:04.904] }
[17:02:04.906] assign_globals() ...
[17:02:04.906] List of 3
[17:02:04.906]  $ fcn:function (x, y)  
[17:02:04.906]  $ x  : int [1:2] 1 2
[17:02:04.906]  $ y  : num 3
[17:02:04.906]  - attr(*, "where")=List of 3
[17:02:04.906]   ..$ fcn:<environment: R_EmptyEnv> 
[17:02:04.906]   ..$ x  :<environment: R_EmptyEnv> 
[17:02:04.906]   ..$ y  :<environment: R_EmptyEnv> 
[17:02:04.906]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:04.906]  - attr(*, "resolved")= logi FALSE
[17:02:04.906]  - attr(*, "total_size")= num 4280
[17:02:04.906]  - attr(*, "already-done")= logi TRUE
[17:02:04.911] - reassign environment for ‘fcn’
[17:02:04.911] - copied ‘fcn’ to environment
[17:02:04.911] - copied ‘x’ to environment
[17:02:04.911] - copied ‘y’ to environment
[17:02:04.913] assign_globals() ... done
[17:02:04.913] requestCore(): workers = 2
[17:02:04.915] MulticoreFuture started
[17:02:04.916] - Launch lazy future ... done
[17:02:04.916] run() for ‘MulticoreFuture’ ... done
[17:02:04.917] result() for MulticoreFuture ...
[17:02:04.917] plan(): Setting new future strategy stack:
[17:02:04.917] List of future strategies:
[17:02:04.917] 1. sequential:
[17:02:04.917]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:04.917]    - tweaked: FALSE
[17:02:04.917]    - call: NULL
[17:02:04.918] plan(): nbrOfWorkers() = 1
[17:02:04.921] plan(): Setting new future strategy stack:
[17:02:04.921] List of future strategies:
[17:02:04.921] 1. multicore:
[17:02:04.921]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:04.921]    - tweaked: FALSE
[17:02:04.921]    - call: plan(strategy, substitute = FALSE)
[17:02:04.926] plan(): nbrOfWorkers() = 2
[17:02:04.927] result() for MulticoreFuture ...
[17:02:04.927] result() for MulticoreFuture ... done
[17:02:04.927] result() for MulticoreFuture ... done
[17:02:04.928] result() for MulticoreFuture ...
[17:02:04.928] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[17:02:04.928] plan(): Setting new future strategy stack:
[17:02:04.929] List of future strategies:
[17:02:04.929] 1. multisession:
[17:02:04.929]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:04.929]    - tweaked: FALSE
[17:02:04.929]    - call: plan(strategy, substitute = FALSE)
[17:02:04.929] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:04.929] multisession:
[17:02:04.929] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:04.929] - tweaked: FALSE
[17:02:04.929] - call: plan(strategy, substitute = FALSE)
[17:02:04.936] getGlobalsAndPackages() ...
[17:02:04.936] Not searching for globals
[17:02:04.937] - globals: [0] <none>
[17:02:04.937] getGlobalsAndPackages() ... DONE
[17:02:04.937] [local output] makeClusterPSOCK() ...
[17:02:04.983] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:04.984] [local output] Base port: 11013
[17:02:04.984] [local output] Getting setup options for 2 cluster nodes ...
[17:02:04.984] [local output]  - Node 1 of 2 ...
[17:02:04.985] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:04.985] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpOIC9Rb/worker.rank=1.parallelly.parent=40156.9cdc591e9318.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpOIC9Rb/worker.rank=1.parallelly.parent=40156.9cdc591e9318.pid")'’
[17:02:05.175] - Possible to infer worker's PID: TRUE
[17:02:05.175] [local output] Rscript port: 11013

[17:02:05.176] [local output]  - Node 2 of 2 ...
[17:02:05.176] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:05.177] [local output] Rscript port: 11013

[17:02:05.177] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:05.177] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:05.178] [local output] Setting up PSOCK nodes in parallel
[17:02:05.178] List of 36
[17:02:05.178]  $ worker          : chr "localhost"
[17:02:05.178]   ..- attr(*, "localhost")= logi TRUE
[17:02:05.178]  $ master          : chr "localhost"
[17:02:05.178]  $ port            : int 11013
[17:02:05.178]  $ connectTimeout  : num 120
[17:02:05.178]  $ timeout         : num 2592000
[17:02:05.178]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:05.178]  $ homogeneous     : logi TRUE
[17:02:05.178]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:05.178]  $ rscript_envs    : NULL
[17:02:05.178]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:05.178]  $ rscript_startup : NULL
[17:02:05.178]  $ rscript_sh      : chr "sh"
[17:02:05.178]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:05.178]  $ methods         : logi TRUE
[17:02:05.178]  $ socketOptions   : chr "no-delay"
[17:02:05.178]  $ useXDR          : logi FALSE
[17:02:05.178]  $ outfile         : chr "/dev/null"
[17:02:05.178]  $ renice          : int NA
[17:02:05.178]  $ rshcmd          : NULL
[17:02:05.178]  $ user            : chr(0) 
[17:02:05.178]  $ revtunnel       : logi FALSE
[17:02:05.178]  $ rshlogfile      : NULL
[17:02:05.178]  $ rshopts         : chr(0) 
[17:02:05.178]  $ rank            : int 1
[17:02:05.178]  $ manual          : logi FALSE
[17:02:05.178]  $ dryrun          : logi FALSE
[17:02:05.178]  $ quiet           : logi FALSE
[17:02:05.178]  $ setup_strategy  : chr "parallel"
[17:02:05.178]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:05.178]  $ pidfile         : chr "/tmp/RtmpOIC9Rb/worker.rank=1.parallelly.parent=40156.9cdc591e9318.pid"
[17:02:05.178]  $ rshcmd_label    : NULL
[17:02:05.178]  $ rsh_call        : NULL
[17:02:05.178]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:05.178]  $ localMachine    : logi TRUE
[17:02:05.178]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:05.178]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:05.178]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:05.178]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:05.178]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:05.178]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:05.178]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:05.178]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:05.178]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:05.178]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:05.178]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:05.178]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:05.178]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:05.178]  $ arguments       :List of 28
[17:02:05.178]   ..$ worker          : chr "localhost"
[17:02:05.178]   ..$ master          : NULL
[17:02:05.178]   ..$ port            : int 11013
[17:02:05.178]   ..$ connectTimeout  : num 120
[17:02:05.178]   ..$ timeout         : num 2592000
[17:02:05.178]   ..$ rscript         : NULL
[17:02:05.178]   ..$ homogeneous     : NULL
[17:02:05.178]   ..$ rscript_args    : NULL
[17:02:05.178]   ..$ rscript_envs    : NULL
[17:02:05.178]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:05.178]   ..$ rscript_startup : NULL
[17:02:05.178]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:05.178]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:05.178]   ..$ methods         : logi TRUE
[17:02:05.178]   ..$ socketOptions   : chr "no-delay"
[17:02:05.178]   ..$ useXDR          : logi FALSE
[17:02:05.178]   ..$ outfile         : chr "/dev/null"
[17:02:05.178]   ..$ renice          : int NA
[17:02:05.178]   ..$ rshcmd          : NULL
[17:02:05.178]   ..$ user            : NULL
[17:02:05.178]   ..$ revtunnel       : logi NA
[17:02:05.178]   ..$ rshlogfile      : NULL
[17:02:05.178]   ..$ rshopts         : NULL
[17:02:05.178]   ..$ rank            : int 1
[17:02:05.178]   ..$ manual          : logi FALSE
[17:02:05.178]   ..$ dryrun          : logi FALSE
[17:02:05.178]   ..$ quiet           : logi FALSE
[17:02:05.178]   ..$ setup_strategy  : chr "parallel"
[17:02:05.178]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:05.194] [local output] System call to launch all workers:
[17:02:05.194] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpOIC9Rb/worker.rank=1.parallelly.parent=40156.9cdc591e9318.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11013 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:05.194] [local output] Starting PSOCK main server
[17:02:05.200] [local output] Workers launched
[17:02:05.200] [local output] Waiting for workers to connect back
[17:02:05.201]  - [local output] 0 workers out of 2 ready
[17:02:05.448]  - [local output] 0 workers out of 2 ready
[17:02:05.448]  - [local output] 1 workers out of 2 ready
[17:02:05.451]  - [local output] 1 workers out of 2 ready
[17:02:05.452]  - [local output] 2 workers out of 2 ready
[17:02:05.452] [local output] Launching of workers completed
[17:02:05.452] [local output] Collecting session information from workers
[17:02:05.453] [local output]  - Worker #1 of 2
[17:02:05.453] [local output]  - Worker #2 of 2
[17:02:05.454] [local output] makeClusterPSOCK() ... done
[17:02:05.466] Packages needed by the future expression (n = 0): <none>
[17:02:05.466] Packages needed by future strategies (n = 0): <none>
[17:02:05.466] {
[17:02:05.466]     {
[17:02:05.466]         {
[17:02:05.466]             ...future.startTime <- base::Sys.time()
[17:02:05.466]             {
[17:02:05.466]                 {
[17:02:05.466]                   {
[17:02:05.466]                     {
[17:02:05.466]                       base::local({
[17:02:05.466]                         has_future <- base::requireNamespace("future", 
[17:02:05.466]                           quietly = TRUE)
[17:02:05.466]                         if (has_future) {
[17:02:05.466]                           ns <- base::getNamespace("future")
[17:02:05.466]                           version <- ns[[".package"]][["version"]]
[17:02:05.466]                           if (is.null(version)) 
[17:02:05.466]                             version <- utils::packageVersion("future")
[17:02:05.466]                         }
[17:02:05.466]                         else {
[17:02:05.466]                           version <- NULL
[17:02:05.466]                         }
[17:02:05.466]                         if (!has_future || version < "1.8.0") {
[17:02:05.466]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.466]                             "", base::R.version$version.string), 
[17:02:05.466]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.466]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.466]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.466]                               "release", "version")], collapse = " "), 
[17:02:05.466]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.466]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.466]                             info)
[17:02:05.466]                           info <- base::paste(info, collapse = "; ")
[17:02:05.466]                           if (!has_future) {
[17:02:05.466]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.466]                               info)
[17:02:05.466]                           }
[17:02:05.466]                           else {
[17:02:05.466]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.466]                               info, version)
[17:02:05.466]                           }
[17:02:05.466]                           base::stop(msg)
[17:02:05.466]                         }
[17:02:05.466]                       })
[17:02:05.466]                     }
[17:02:05.466]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.466]                     base::options(mc.cores = 1L)
[17:02:05.466]                   }
[17:02:05.466]                   ...future.strategy.old <- future::plan("list")
[17:02:05.466]                   options(future.plan = NULL)
[17:02:05.466]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.466]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.466]                 }
[17:02:05.466]                 ...future.workdir <- getwd()
[17:02:05.466]             }
[17:02:05.466]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.466]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.466]         }
[17:02:05.466]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.466]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.466]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.466]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.466]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.466]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.466]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.466]             base::names(...future.oldOptions))
[17:02:05.466]     }
[17:02:05.466]     if (FALSE) {
[17:02:05.466]     }
[17:02:05.466]     else {
[17:02:05.466]         if (TRUE) {
[17:02:05.466]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.466]                 open = "w")
[17:02:05.466]         }
[17:02:05.466]         else {
[17:02:05.466]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.466]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.466]         }
[17:02:05.466]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.466]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.466]             base::sink(type = "output", split = FALSE)
[17:02:05.466]             base::close(...future.stdout)
[17:02:05.466]         }, add = TRUE)
[17:02:05.466]     }
[17:02:05.466]     ...future.frame <- base::sys.nframe()
[17:02:05.466]     ...future.conditions <- base::list()
[17:02:05.466]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.466]     if (FALSE) {
[17:02:05.466]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.466]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.466]     }
[17:02:05.466]     ...future.result <- base::tryCatch({
[17:02:05.466]         base::withCallingHandlers({
[17:02:05.466]             ...future.value <- base::withVisible(base::local({
[17:02:05.466]                 ...future.makeSendCondition <- base::local({
[17:02:05.466]                   sendCondition <- NULL
[17:02:05.466]                   function(frame = 1L) {
[17:02:05.466]                     if (is.function(sendCondition)) 
[17:02:05.466]                       return(sendCondition)
[17:02:05.466]                     ns <- getNamespace("parallel")
[17:02:05.466]                     if (exists("sendData", mode = "function", 
[17:02:05.466]                       envir = ns)) {
[17:02:05.466]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.466]                         envir = ns)
[17:02:05.466]                       envir <- sys.frame(frame)
[17:02:05.466]                       master <- NULL
[17:02:05.466]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.466]                         !identical(envir, emptyenv())) {
[17:02:05.466]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.466]                           inherits = FALSE)) {
[17:02:05.466]                           master <- get("master", mode = "list", 
[17:02:05.466]                             envir = envir, inherits = FALSE)
[17:02:05.466]                           if (inherits(master, c("SOCKnode", 
[17:02:05.466]                             "SOCK0node"))) {
[17:02:05.466]                             sendCondition <<- function(cond) {
[17:02:05.466]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.466]                                 success = TRUE)
[17:02:05.466]                               parallel_sendData(master, data)
[17:02:05.466]                             }
[17:02:05.466]                             return(sendCondition)
[17:02:05.466]                           }
[17:02:05.466]                         }
[17:02:05.466]                         frame <- frame + 1L
[17:02:05.466]                         envir <- sys.frame(frame)
[17:02:05.466]                       }
[17:02:05.466]                     }
[17:02:05.466]                     sendCondition <<- function(cond) NULL
[17:02:05.466]                   }
[17:02:05.466]                 })
[17:02:05.466]                 withCallingHandlers({
[17:02:05.466]                   NA
[17:02:05.466]                 }, immediateCondition = function(cond) {
[17:02:05.466]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.466]                   sendCondition(cond)
[17:02:05.466]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.466]                   {
[17:02:05.466]                     inherits <- base::inherits
[17:02:05.466]                     invokeRestart <- base::invokeRestart
[17:02:05.466]                     is.null <- base::is.null
[17:02:05.466]                     muffled <- FALSE
[17:02:05.466]                     if (inherits(cond, "message")) {
[17:02:05.466]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.466]                       if (muffled) 
[17:02:05.466]                         invokeRestart("muffleMessage")
[17:02:05.466]                     }
[17:02:05.466]                     else if (inherits(cond, "warning")) {
[17:02:05.466]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.466]                       if (muffled) 
[17:02:05.466]                         invokeRestart("muffleWarning")
[17:02:05.466]                     }
[17:02:05.466]                     else if (inherits(cond, "condition")) {
[17:02:05.466]                       if (!is.null(pattern)) {
[17:02:05.466]                         computeRestarts <- base::computeRestarts
[17:02:05.466]                         grepl <- base::grepl
[17:02:05.466]                         restarts <- computeRestarts(cond)
[17:02:05.466]                         for (restart in restarts) {
[17:02:05.466]                           name <- restart$name
[17:02:05.466]                           if (is.null(name)) 
[17:02:05.466]                             next
[17:02:05.466]                           if (!grepl(pattern, name)) 
[17:02:05.466]                             next
[17:02:05.466]                           invokeRestart(restart)
[17:02:05.466]                           muffled <- TRUE
[17:02:05.466]                           break
[17:02:05.466]                         }
[17:02:05.466]                       }
[17:02:05.466]                     }
[17:02:05.466]                     invisible(muffled)
[17:02:05.466]                   }
[17:02:05.466]                   muffleCondition(cond)
[17:02:05.466]                 })
[17:02:05.466]             }))
[17:02:05.466]             future::FutureResult(value = ...future.value$value, 
[17:02:05.466]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.466]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.466]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.466]                     ...future.globalenv.names))
[17:02:05.466]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.466]         }, condition = base::local({
[17:02:05.466]             c <- base::c
[17:02:05.466]             inherits <- base::inherits
[17:02:05.466]             invokeRestart <- base::invokeRestart
[17:02:05.466]             length <- base::length
[17:02:05.466]             list <- base::list
[17:02:05.466]             seq.int <- base::seq.int
[17:02:05.466]             signalCondition <- base::signalCondition
[17:02:05.466]             sys.calls <- base::sys.calls
[17:02:05.466]             `[[` <- base::`[[`
[17:02:05.466]             `+` <- base::`+`
[17:02:05.466]             `<<-` <- base::`<<-`
[17:02:05.466]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.466]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.466]                   3L)]
[17:02:05.466]             }
[17:02:05.466]             function(cond) {
[17:02:05.466]                 is_error <- inherits(cond, "error")
[17:02:05.466]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.466]                   NULL)
[17:02:05.466]                 if (is_error) {
[17:02:05.466]                   sessionInformation <- function() {
[17:02:05.466]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.466]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.466]                       search = base::search(), system = base::Sys.info())
[17:02:05.466]                   }
[17:02:05.466]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.466]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.466]                     cond$call), session = sessionInformation(), 
[17:02:05.466]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.466]                   signalCondition(cond)
[17:02:05.466]                 }
[17:02:05.466]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.466]                 "immediateCondition"))) {
[17:02:05.466]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.466]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.466]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.466]                   if (TRUE && !signal) {
[17:02:05.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.466]                     {
[17:02:05.466]                       inherits <- base::inherits
[17:02:05.466]                       invokeRestart <- base::invokeRestart
[17:02:05.466]                       is.null <- base::is.null
[17:02:05.466]                       muffled <- FALSE
[17:02:05.466]                       if (inherits(cond, "message")) {
[17:02:05.466]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.466]                         if (muffled) 
[17:02:05.466]                           invokeRestart("muffleMessage")
[17:02:05.466]                       }
[17:02:05.466]                       else if (inherits(cond, "warning")) {
[17:02:05.466]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.466]                         if (muffled) 
[17:02:05.466]                           invokeRestart("muffleWarning")
[17:02:05.466]                       }
[17:02:05.466]                       else if (inherits(cond, "condition")) {
[17:02:05.466]                         if (!is.null(pattern)) {
[17:02:05.466]                           computeRestarts <- base::computeRestarts
[17:02:05.466]                           grepl <- base::grepl
[17:02:05.466]                           restarts <- computeRestarts(cond)
[17:02:05.466]                           for (restart in restarts) {
[17:02:05.466]                             name <- restart$name
[17:02:05.466]                             if (is.null(name)) 
[17:02:05.466]                               next
[17:02:05.466]                             if (!grepl(pattern, name)) 
[17:02:05.466]                               next
[17:02:05.466]                             invokeRestart(restart)
[17:02:05.466]                             muffled <- TRUE
[17:02:05.466]                             break
[17:02:05.466]                           }
[17:02:05.466]                         }
[17:02:05.466]                       }
[17:02:05.466]                       invisible(muffled)
[17:02:05.466]                     }
[17:02:05.466]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.466]                   }
[17:02:05.466]                 }
[17:02:05.466]                 else {
[17:02:05.466]                   if (TRUE) {
[17:02:05.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.466]                     {
[17:02:05.466]                       inherits <- base::inherits
[17:02:05.466]                       invokeRestart <- base::invokeRestart
[17:02:05.466]                       is.null <- base::is.null
[17:02:05.466]                       muffled <- FALSE
[17:02:05.466]                       if (inherits(cond, "message")) {
[17:02:05.466]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.466]                         if (muffled) 
[17:02:05.466]                           invokeRestart("muffleMessage")
[17:02:05.466]                       }
[17:02:05.466]                       else if (inherits(cond, "warning")) {
[17:02:05.466]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.466]                         if (muffled) 
[17:02:05.466]                           invokeRestart("muffleWarning")
[17:02:05.466]                       }
[17:02:05.466]                       else if (inherits(cond, "condition")) {
[17:02:05.466]                         if (!is.null(pattern)) {
[17:02:05.466]                           computeRestarts <- base::computeRestarts
[17:02:05.466]                           grepl <- base::grepl
[17:02:05.466]                           restarts <- computeRestarts(cond)
[17:02:05.466]                           for (restart in restarts) {
[17:02:05.466]                             name <- restart$name
[17:02:05.466]                             if (is.null(name)) 
[17:02:05.466]                               next
[17:02:05.466]                             if (!grepl(pattern, name)) 
[17:02:05.466]                               next
[17:02:05.466]                             invokeRestart(restart)
[17:02:05.466]                             muffled <- TRUE
[17:02:05.466]                             break
[17:02:05.466]                           }
[17:02:05.466]                         }
[17:02:05.466]                       }
[17:02:05.466]                       invisible(muffled)
[17:02:05.466]                     }
[17:02:05.466]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.466]                   }
[17:02:05.466]                 }
[17:02:05.466]             }
[17:02:05.466]         }))
[17:02:05.466]     }, error = function(ex) {
[17:02:05.466]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.466]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.466]                 ...future.rng), started = ...future.startTime, 
[17:02:05.466]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.466]             version = "1.8"), class = "FutureResult")
[17:02:05.466]     }, finally = {
[17:02:05.466]         if (!identical(...future.workdir, getwd())) 
[17:02:05.466]             setwd(...future.workdir)
[17:02:05.466]         {
[17:02:05.466]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.466]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.466]             }
[17:02:05.466]             base::options(...future.oldOptions)
[17:02:05.466]             if (.Platform$OS.type == "windows") {
[17:02:05.466]                 old_names <- names(...future.oldEnvVars)
[17:02:05.466]                 envs <- base::Sys.getenv()
[17:02:05.466]                 names <- names(envs)
[17:02:05.466]                 common <- intersect(names, old_names)
[17:02:05.466]                 added <- setdiff(names, old_names)
[17:02:05.466]                 removed <- setdiff(old_names, names)
[17:02:05.466]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.466]                   envs[common]]
[17:02:05.466]                 NAMES <- toupper(changed)
[17:02:05.466]                 args <- list()
[17:02:05.466]                 for (kk in seq_along(NAMES)) {
[17:02:05.466]                   name <- changed[[kk]]
[17:02:05.466]                   NAME <- NAMES[[kk]]
[17:02:05.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.466]                     next
[17:02:05.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.466]                 }
[17:02:05.466]                 NAMES <- toupper(added)
[17:02:05.466]                 for (kk in seq_along(NAMES)) {
[17:02:05.466]                   name <- added[[kk]]
[17:02:05.466]                   NAME <- NAMES[[kk]]
[17:02:05.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.466]                     next
[17:02:05.466]                   args[[name]] <- ""
[17:02:05.466]                 }
[17:02:05.466]                 NAMES <- toupper(removed)
[17:02:05.466]                 for (kk in seq_along(NAMES)) {
[17:02:05.466]                   name <- removed[[kk]]
[17:02:05.466]                   NAME <- NAMES[[kk]]
[17:02:05.466]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.466]                     next
[17:02:05.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.466]                 }
[17:02:05.466]                 if (length(args) > 0) 
[17:02:05.466]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.466]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.466]             }
[17:02:05.466]             else {
[17:02:05.466]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.466]             }
[17:02:05.466]             {
[17:02:05.466]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.466]                   0L) {
[17:02:05.466]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.466]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.466]                   base::options(opts)
[17:02:05.466]                 }
[17:02:05.466]                 {
[17:02:05.466]                   {
[17:02:05.466]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.466]                     NULL
[17:02:05.466]                   }
[17:02:05.466]                   options(future.plan = NULL)
[17:02:05.466]                   if (is.na(NA_character_)) 
[17:02:05.466]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.466]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.466]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.466]                     .init = FALSE)
[17:02:05.466]                 }
[17:02:05.466]             }
[17:02:05.466]         }
[17:02:05.466]     })
[17:02:05.466]     if (TRUE) {
[17:02:05.466]         base::sink(type = "output", split = FALSE)
[17:02:05.466]         if (TRUE) {
[17:02:05.466]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.466]         }
[17:02:05.466]         else {
[17:02:05.466]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.466]         }
[17:02:05.466]         base::close(...future.stdout)
[17:02:05.466]         ...future.stdout <- NULL
[17:02:05.466]     }
[17:02:05.466]     ...future.result$conditions <- ...future.conditions
[17:02:05.466]     ...future.result$finished <- base::Sys.time()
[17:02:05.466]     ...future.result
[17:02:05.466] }
[17:02:05.521] MultisessionFuture started
[17:02:05.521] result() for ClusterFuture ...
[17:02:05.522] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.522] - Validating connection of MultisessionFuture
[17:02:05.554] - received message: FutureResult
[17:02:05.554] - Received FutureResult
[17:02:05.555] - Erased future from FutureRegistry
[17:02:05.555] result() for ClusterFuture ...
[17:02:05.555] - result already collected: FutureResult
[17:02:05.555] result() for ClusterFuture ... done
[17:02:05.555] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.555] result() for ClusterFuture ... done
[17:02:05.555] result() for ClusterFuture ...
[17:02:05.555] - result already collected: FutureResult
[17:02:05.556] result() for ClusterFuture ... done
[17:02:05.556] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:05.560] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5572d19ab998>
Arguments '...' exists: TRUE
[17:02:05.560] getGlobalsAndPackages() ...
[17:02:05.561] Searching for globals...
[17:02:05.563] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:02:05.563] Searching for globals ... DONE
[17:02:05.563] Resolving globals: FALSE
[17:02:05.563] Tweak future expression to call with '...' arguments ...
[17:02:05.563] {
[17:02:05.563]     do.call(function(...) {
[17:02:05.563]         sum(x, ...)
[17:02:05.563]     }, args = future.call.arguments)
[17:02:05.563] }
[17:02:05.563] Tweak future expression to call with '...' arguments ... DONE
[17:02:05.564] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:05.565] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:02:05.565] - globals: [2] ‘x’, ‘future.call.arguments’
[17:02:05.565] 
[17:02:05.565] getGlobalsAndPackages() ... DONE
[17:02:05.565] run() for ‘Future’ ...
[17:02:05.565] - state: ‘created’
[17:02:05.566] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:05.580] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:05.580] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:05.580]   - Field: ‘node’
[17:02:05.580]   - Field: ‘label’
[17:02:05.580]   - Field: ‘local’
[17:02:05.580]   - Field: ‘owner’
[17:02:05.581]   - Field: ‘envir’
[17:02:05.581]   - Field: ‘workers’
[17:02:05.581]   - Field: ‘packages’
[17:02:05.581]   - Field: ‘gc’
[17:02:05.581]   - Field: ‘conditions’
[17:02:05.581]   - Field: ‘persistent’
[17:02:05.581]   - Field: ‘expr’
[17:02:05.581]   - Field: ‘uuid’
[17:02:05.581]   - Field: ‘seed’
[17:02:05.581]   - Field: ‘version’
[17:02:05.582]   - Field: ‘result’
[17:02:05.582]   - Field: ‘asynchronous’
[17:02:05.582]   - Field: ‘calls’
[17:02:05.582]   - Field: ‘globals’
[17:02:05.582]   - Field: ‘stdout’
[17:02:05.582]   - Field: ‘earlySignal’
[17:02:05.582]   - Field: ‘lazy’
[17:02:05.582]   - Field: ‘state’
[17:02:05.583] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:05.583] - Launch lazy future ...
[17:02:05.583] Packages needed by the future expression (n = 0): <none>
[17:02:05.583] Packages needed by future strategies (n = 0): <none>
[17:02:05.584] {
[17:02:05.584]     {
[17:02:05.584]         {
[17:02:05.584]             ...future.startTime <- base::Sys.time()
[17:02:05.584]             {
[17:02:05.584]                 {
[17:02:05.584]                   {
[17:02:05.584]                     {
[17:02:05.584]                       base::local({
[17:02:05.584]                         has_future <- base::requireNamespace("future", 
[17:02:05.584]                           quietly = TRUE)
[17:02:05.584]                         if (has_future) {
[17:02:05.584]                           ns <- base::getNamespace("future")
[17:02:05.584]                           version <- ns[[".package"]][["version"]]
[17:02:05.584]                           if (is.null(version)) 
[17:02:05.584]                             version <- utils::packageVersion("future")
[17:02:05.584]                         }
[17:02:05.584]                         else {
[17:02:05.584]                           version <- NULL
[17:02:05.584]                         }
[17:02:05.584]                         if (!has_future || version < "1.8.0") {
[17:02:05.584]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.584]                             "", base::R.version$version.string), 
[17:02:05.584]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.584]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.584]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.584]                               "release", "version")], collapse = " "), 
[17:02:05.584]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.584]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.584]                             info)
[17:02:05.584]                           info <- base::paste(info, collapse = "; ")
[17:02:05.584]                           if (!has_future) {
[17:02:05.584]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.584]                               info)
[17:02:05.584]                           }
[17:02:05.584]                           else {
[17:02:05.584]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.584]                               info, version)
[17:02:05.584]                           }
[17:02:05.584]                           base::stop(msg)
[17:02:05.584]                         }
[17:02:05.584]                       })
[17:02:05.584]                     }
[17:02:05.584]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.584]                     base::options(mc.cores = 1L)
[17:02:05.584]                   }
[17:02:05.584]                   ...future.strategy.old <- future::plan("list")
[17:02:05.584]                   options(future.plan = NULL)
[17:02:05.584]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.584]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.584]                 }
[17:02:05.584]                 ...future.workdir <- getwd()
[17:02:05.584]             }
[17:02:05.584]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.584]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.584]         }
[17:02:05.584]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.584]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.584]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.584]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.584]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.584]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.584]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.584]             base::names(...future.oldOptions))
[17:02:05.584]     }
[17:02:05.584]     if (FALSE) {
[17:02:05.584]     }
[17:02:05.584]     else {
[17:02:05.584]         if (TRUE) {
[17:02:05.584]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.584]                 open = "w")
[17:02:05.584]         }
[17:02:05.584]         else {
[17:02:05.584]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.584]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.584]         }
[17:02:05.584]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.584]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.584]             base::sink(type = "output", split = FALSE)
[17:02:05.584]             base::close(...future.stdout)
[17:02:05.584]         }, add = TRUE)
[17:02:05.584]     }
[17:02:05.584]     ...future.frame <- base::sys.nframe()
[17:02:05.584]     ...future.conditions <- base::list()
[17:02:05.584]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.584]     if (FALSE) {
[17:02:05.584]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.584]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.584]     }
[17:02:05.584]     ...future.result <- base::tryCatch({
[17:02:05.584]         base::withCallingHandlers({
[17:02:05.584]             ...future.value <- base::withVisible(base::local({
[17:02:05.584]                 ...future.makeSendCondition <- base::local({
[17:02:05.584]                   sendCondition <- NULL
[17:02:05.584]                   function(frame = 1L) {
[17:02:05.584]                     if (is.function(sendCondition)) 
[17:02:05.584]                       return(sendCondition)
[17:02:05.584]                     ns <- getNamespace("parallel")
[17:02:05.584]                     if (exists("sendData", mode = "function", 
[17:02:05.584]                       envir = ns)) {
[17:02:05.584]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.584]                         envir = ns)
[17:02:05.584]                       envir <- sys.frame(frame)
[17:02:05.584]                       master <- NULL
[17:02:05.584]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.584]                         !identical(envir, emptyenv())) {
[17:02:05.584]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.584]                           inherits = FALSE)) {
[17:02:05.584]                           master <- get("master", mode = "list", 
[17:02:05.584]                             envir = envir, inherits = FALSE)
[17:02:05.584]                           if (inherits(master, c("SOCKnode", 
[17:02:05.584]                             "SOCK0node"))) {
[17:02:05.584]                             sendCondition <<- function(cond) {
[17:02:05.584]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.584]                                 success = TRUE)
[17:02:05.584]                               parallel_sendData(master, data)
[17:02:05.584]                             }
[17:02:05.584]                             return(sendCondition)
[17:02:05.584]                           }
[17:02:05.584]                         }
[17:02:05.584]                         frame <- frame + 1L
[17:02:05.584]                         envir <- sys.frame(frame)
[17:02:05.584]                       }
[17:02:05.584]                     }
[17:02:05.584]                     sendCondition <<- function(cond) NULL
[17:02:05.584]                   }
[17:02:05.584]                 })
[17:02:05.584]                 withCallingHandlers({
[17:02:05.584]                   {
[17:02:05.584]                     do.call(function(...) {
[17:02:05.584]                       sum(x, ...)
[17:02:05.584]                     }, args = future.call.arguments)
[17:02:05.584]                   }
[17:02:05.584]                 }, immediateCondition = function(cond) {
[17:02:05.584]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.584]                   sendCondition(cond)
[17:02:05.584]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.584]                   {
[17:02:05.584]                     inherits <- base::inherits
[17:02:05.584]                     invokeRestart <- base::invokeRestart
[17:02:05.584]                     is.null <- base::is.null
[17:02:05.584]                     muffled <- FALSE
[17:02:05.584]                     if (inherits(cond, "message")) {
[17:02:05.584]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.584]                       if (muffled) 
[17:02:05.584]                         invokeRestart("muffleMessage")
[17:02:05.584]                     }
[17:02:05.584]                     else if (inherits(cond, "warning")) {
[17:02:05.584]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.584]                       if (muffled) 
[17:02:05.584]                         invokeRestart("muffleWarning")
[17:02:05.584]                     }
[17:02:05.584]                     else if (inherits(cond, "condition")) {
[17:02:05.584]                       if (!is.null(pattern)) {
[17:02:05.584]                         computeRestarts <- base::computeRestarts
[17:02:05.584]                         grepl <- base::grepl
[17:02:05.584]                         restarts <- computeRestarts(cond)
[17:02:05.584]                         for (restart in restarts) {
[17:02:05.584]                           name <- restart$name
[17:02:05.584]                           if (is.null(name)) 
[17:02:05.584]                             next
[17:02:05.584]                           if (!grepl(pattern, name)) 
[17:02:05.584]                             next
[17:02:05.584]                           invokeRestart(restart)
[17:02:05.584]                           muffled <- TRUE
[17:02:05.584]                           break
[17:02:05.584]                         }
[17:02:05.584]                       }
[17:02:05.584]                     }
[17:02:05.584]                     invisible(muffled)
[17:02:05.584]                   }
[17:02:05.584]                   muffleCondition(cond)
[17:02:05.584]                 })
[17:02:05.584]             }))
[17:02:05.584]             future::FutureResult(value = ...future.value$value, 
[17:02:05.584]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.584]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.584]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.584]                     ...future.globalenv.names))
[17:02:05.584]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.584]         }, condition = base::local({
[17:02:05.584]             c <- base::c
[17:02:05.584]             inherits <- base::inherits
[17:02:05.584]             invokeRestart <- base::invokeRestart
[17:02:05.584]             length <- base::length
[17:02:05.584]             list <- base::list
[17:02:05.584]             seq.int <- base::seq.int
[17:02:05.584]             signalCondition <- base::signalCondition
[17:02:05.584]             sys.calls <- base::sys.calls
[17:02:05.584]             `[[` <- base::`[[`
[17:02:05.584]             `+` <- base::`+`
[17:02:05.584]             `<<-` <- base::`<<-`
[17:02:05.584]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.584]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.584]                   3L)]
[17:02:05.584]             }
[17:02:05.584]             function(cond) {
[17:02:05.584]                 is_error <- inherits(cond, "error")
[17:02:05.584]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.584]                   NULL)
[17:02:05.584]                 if (is_error) {
[17:02:05.584]                   sessionInformation <- function() {
[17:02:05.584]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.584]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.584]                       search = base::search(), system = base::Sys.info())
[17:02:05.584]                   }
[17:02:05.584]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.584]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.584]                     cond$call), session = sessionInformation(), 
[17:02:05.584]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.584]                   signalCondition(cond)
[17:02:05.584]                 }
[17:02:05.584]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.584]                 "immediateCondition"))) {
[17:02:05.584]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.584]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.584]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.584]                   if (TRUE && !signal) {
[17:02:05.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.584]                     {
[17:02:05.584]                       inherits <- base::inherits
[17:02:05.584]                       invokeRestart <- base::invokeRestart
[17:02:05.584]                       is.null <- base::is.null
[17:02:05.584]                       muffled <- FALSE
[17:02:05.584]                       if (inherits(cond, "message")) {
[17:02:05.584]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.584]                         if (muffled) 
[17:02:05.584]                           invokeRestart("muffleMessage")
[17:02:05.584]                       }
[17:02:05.584]                       else if (inherits(cond, "warning")) {
[17:02:05.584]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.584]                         if (muffled) 
[17:02:05.584]                           invokeRestart("muffleWarning")
[17:02:05.584]                       }
[17:02:05.584]                       else if (inherits(cond, "condition")) {
[17:02:05.584]                         if (!is.null(pattern)) {
[17:02:05.584]                           computeRestarts <- base::computeRestarts
[17:02:05.584]                           grepl <- base::grepl
[17:02:05.584]                           restarts <- computeRestarts(cond)
[17:02:05.584]                           for (restart in restarts) {
[17:02:05.584]                             name <- restart$name
[17:02:05.584]                             if (is.null(name)) 
[17:02:05.584]                               next
[17:02:05.584]                             if (!grepl(pattern, name)) 
[17:02:05.584]                               next
[17:02:05.584]                             invokeRestart(restart)
[17:02:05.584]                             muffled <- TRUE
[17:02:05.584]                             break
[17:02:05.584]                           }
[17:02:05.584]                         }
[17:02:05.584]                       }
[17:02:05.584]                       invisible(muffled)
[17:02:05.584]                     }
[17:02:05.584]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.584]                   }
[17:02:05.584]                 }
[17:02:05.584]                 else {
[17:02:05.584]                   if (TRUE) {
[17:02:05.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.584]                     {
[17:02:05.584]                       inherits <- base::inherits
[17:02:05.584]                       invokeRestart <- base::invokeRestart
[17:02:05.584]                       is.null <- base::is.null
[17:02:05.584]                       muffled <- FALSE
[17:02:05.584]                       if (inherits(cond, "message")) {
[17:02:05.584]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.584]                         if (muffled) 
[17:02:05.584]                           invokeRestart("muffleMessage")
[17:02:05.584]                       }
[17:02:05.584]                       else if (inherits(cond, "warning")) {
[17:02:05.584]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.584]                         if (muffled) 
[17:02:05.584]                           invokeRestart("muffleWarning")
[17:02:05.584]                       }
[17:02:05.584]                       else if (inherits(cond, "condition")) {
[17:02:05.584]                         if (!is.null(pattern)) {
[17:02:05.584]                           computeRestarts <- base::computeRestarts
[17:02:05.584]                           grepl <- base::grepl
[17:02:05.584]                           restarts <- computeRestarts(cond)
[17:02:05.584]                           for (restart in restarts) {
[17:02:05.584]                             name <- restart$name
[17:02:05.584]                             if (is.null(name)) 
[17:02:05.584]                               next
[17:02:05.584]                             if (!grepl(pattern, name)) 
[17:02:05.584]                               next
[17:02:05.584]                             invokeRestart(restart)
[17:02:05.584]                             muffled <- TRUE
[17:02:05.584]                             break
[17:02:05.584]                           }
[17:02:05.584]                         }
[17:02:05.584]                       }
[17:02:05.584]                       invisible(muffled)
[17:02:05.584]                     }
[17:02:05.584]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.584]                   }
[17:02:05.584]                 }
[17:02:05.584]             }
[17:02:05.584]         }))
[17:02:05.584]     }, error = function(ex) {
[17:02:05.584]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.584]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.584]                 ...future.rng), started = ...future.startTime, 
[17:02:05.584]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.584]             version = "1.8"), class = "FutureResult")
[17:02:05.584]     }, finally = {
[17:02:05.584]         if (!identical(...future.workdir, getwd())) 
[17:02:05.584]             setwd(...future.workdir)
[17:02:05.584]         {
[17:02:05.584]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.584]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.584]             }
[17:02:05.584]             base::options(...future.oldOptions)
[17:02:05.584]             if (.Platform$OS.type == "windows") {
[17:02:05.584]                 old_names <- names(...future.oldEnvVars)
[17:02:05.584]                 envs <- base::Sys.getenv()
[17:02:05.584]                 names <- names(envs)
[17:02:05.584]                 common <- intersect(names, old_names)
[17:02:05.584]                 added <- setdiff(names, old_names)
[17:02:05.584]                 removed <- setdiff(old_names, names)
[17:02:05.584]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.584]                   envs[common]]
[17:02:05.584]                 NAMES <- toupper(changed)
[17:02:05.584]                 args <- list()
[17:02:05.584]                 for (kk in seq_along(NAMES)) {
[17:02:05.584]                   name <- changed[[kk]]
[17:02:05.584]                   NAME <- NAMES[[kk]]
[17:02:05.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.584]                     next
[17:02:05.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.584]                 }
[17:02:05.584]                 NAMES <- toupper(added)
[17:02:05.584]                 for (kk in seq_along(NAMES)) {
[17:02:05.584]                   name <- added[[kk]]
[17:02:05.584]                   NAME <- NAMES[[kk]]
[17:02:05.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.584]                     next
[17:02:05.584]                   args[[name]] <- ""
[17:02:05.584]                 }
[17:02:05.584]                 NAMES <- toupper(removed)
[17:02:05.584]                 for (kk in seq_along(NAMES)) {
[17:02:05.584]                   name <- removed[[kk]]
[17:02:05.584]                   NAME <- NAMES[[kk]]
[17:02:05.584]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.584]                     next
[17:02:05.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.584]                 }
[17:02:05.584]                 if (length(args) > 0) 
[17:02:05.584]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.584]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.584]             }
[17:02:05.584]             else {
[17:02:05.584]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.584]             }
[17:02:05.584]             {
[17:02:05.584]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.584]                   0L) {
[17:02:05.584]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.584]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.584]                   base::options(opts)
[17:02:05.584]                 }
[17:02:05.584]                 {
[17:02:05.584]                   {
[17:02:05.584]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.584]                     NULL
[17:02:05.584]                   }
[17:02:05.584]                   options(future.plan = NULL)
[17:02:05.584]                   if (is.na(NA_character_)) 
[17:02:05.584]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.584]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.584]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.584]                     .init = FALSE)
[17:02:05.584]                 }
[17:02:05.584]             }
[17:02:05.584]         }
[17:02:05.584]     })
[17:02:05.584]     if (TRUE) {
[17:02:05.584]         base::sink(type = "output", split = FALSE)
[17:02:05.584]         if (TRUE) {
[17:02:05.584]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.584]         }
[17:02:05.584]         else {
[17:02:05.584]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.584]         }
[17:02:05.584]         base::close(...future.stdout)
[17:02:05.584]         ...future.stdout <- NULL
[17:02:05.584]     }
[17:02:05.584]     ...future.result$conditions <- ...future.conditions
[17:02:05.584]     ...future.result$finished <- base::Sys.time()
[17:02:05.584]     ...future.result
[17:02:05.584] }
[17:02:05.587] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:02:05.587] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:02:05.587] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.588] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[17:02:05.588] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.588] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:02:05.589] MultisessionFuture started
[17:02:05.589] - Launch lazy future ... done
[17:02:05.589] run() for ‘MultisessionFuture’ ... done
[17:02:05.589] result() for ClusterFuture ...
[17:02:05.589] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.590] - Validating connection of MultisessionFuture
[17:02:05.590] - received message: FutureResult
[17:02:05.591] - Received FutureResult
[17:02:05.591] - Erased future from FutureRegistry
[17:02:05.591] result() for ClusterFuture ...
[17:02:05.591] - result already collected: FutureResult
[17:02:05.591] result() for ClusterFuture ... done
[17:02:05.591] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.591] result() for ClusterFuture ... done
[17:02:05.592] result() for ClusterFuture ...
[17:02:05.592] - result already collected: FutureResult
[17:02:05.592] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5572d1d33410>
Arguments '...' exists: TRUE
[17:02:05.592] getGlobalsAndPackages() ...
[17:02:05.593] Searching for globals...
[17:02:05.594] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[17:02:05.594] Searching for globals ... DONE
[17:02:05.595] Resolving globals: FALSE
[17:02:05.595] Tweak future expression to call with '...' arguments ...
[17:02:05.595] {
[17:02:05.595]     do.call(function(...) {
[17:02:05.595]         sum(x, ...)
[17:02:05.595]     }, args = future.call.arguments)
[17:02:05.595] }
[17:02:05.595] Tweak future expression to call with '...' arguments ... DONE
[17:02:05.596] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:05.596] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[17:02:05.597] - globals: [2] ‘x’, ‘future.call.arguments’
[17:02:05.597] 
[17:02:05.597] getGlobalsAndPackages() ... DONE
[17:02:05.597] run() for ‘Future’ ...
[17:02:05.597] - state: ‘created’
[17:02:05.597] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:05.612] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:05.612] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:05.612]   - Field: ‘node’
[17:02:05.612]   - Field: ‘label’
[17:02:05.613]   - Field: ‘local’
[17:02:05.613]   - Field: ‘owner’
[17:02:05.613]   - Field: ‘envir’
[17:02:05.613]   - Field: ‘workers’
[17:02:05.613]   - Field: ‘packages’
[17:02:05.613]   - Field: ‘gc’
[17:02:05.613]   - Field: ‘conditions’
[17:02:05.613]   - Field: ‘persistent’
[17:02:05.613]   - Field: ‘expr’
[17:02:05.613]   - Field: ‘uuid’
[17:02:05.614]   - Field: ‘seed’
[17:02:05.614]   - Field: ‘version’
[17:02:05.614]   - Field: ‘result’
[17:02:05.614]   - Field: ‘asynchronous’
[17:02:05.614]   - Field: ‘calls’
[17:02:05.614]   - Field: ‘globals’
[17:02:05.614]   - Field: ‘stdout’
[17:02:05.614]   - Field: ‘earlySignal’
[17:02:05.614]   - Field: ‘lazy’
[17:02:05.615]   - Field: ‘state’
[17:02:05.615] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:05.615] - Launch lazy future ...
[17:02:05.615] Packages needed by the future expression (n = 0): <none>
[17:02:05.615] Packages needed by future strategies (n = 0): <none>
[17:02:05.616] {
[17:02:05.616]     {
[17:02:05.616]         {
[17:02:05.616]             ...future.startTime <- base::Sys.time()
[17:02:05.616]             {
[17:02:05.616]                 {
[17:02:05.616]                   {
[17:02:05.616]                     {
[17:02:05.616]                       base::local({
[17:02:05.616]                         has_future <- base::requireNamespace("future", 
[17:02:05.616]                           quietly = TRUE)
[17:02:05.616]                         if (has_future) {
[17:02:05.616]                           ns <- base::getNamespace("future")
[17:02:05.616]                           version <- ns[[".package"]][["version"]]
[17:02:05.616]                           if (is.null(version)) 
[17:02:05.616]                             version <- utils::packageVersion("future")
[17:02:05.616]                         }
[17:02:05.616]                         else {
[17:02:05.616]                           version <- NULL
[17:02:05.616]                         }
[17:02:05.616]                         if (!has_future || version < "1.8.0") {
[17:02:05.616]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.616]                             "", base::R.version$version.string), 
[17:02:05.616]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.616]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.616]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.616]                               "release", "version")], collapse = " "), 
[17:02:05.616]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.616]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.616]                             info)
[17:02:05.616]                           info <- base::paste(info, collapse = "; ")
[17:02:05.616]                           if (!has_future) {
[17:02:05.616]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.616]                               info)
[17:02:05.616]                           }
[17:02:05.616]                           else {
[17:02:05.616]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.616]                               info, version)
[17:02:05.616]                           }
[17:02:05.616]                           base::stop(msg)
[17:02:05.616]                         }
[17:02:05.616]                       })
[17:02:05.616]                     }
[17:02:05.616]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.616]                     base::options(mc.cores = 1L)
[17:02:05.616]                   }
[17:02:05.616]                   ...future.strategy.old <- future::plan("list")
[17:02:05.616]                   options(future.plan = NULL)
[17:02:05.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.616]                 }
[17:02:05.616]                 ...future.workdir <- getwd()
[17:02:05.616]             }
[17:02:05.616]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.616]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.616]         }
[17:02:05.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.616]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.616]             base::names(...future.oldOptions))
[17:02:05.616]     }
[17:02:05.616]     if (FALSE) {
[17:02:05.616]     }
[17:02:05.616]     else {
[17:02:05.616]         if (TRUE) {
[17:02:05.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.616]                 open = "w")
[17:02:05.616]         }
[17:02:05.616]         else {
[17:02:05.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.616]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.616]         }
[17:02:05.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.616]             base::sink(type = "output", split = FALSE)
[17:02:05.616]             base::close(...future.stdout)
[17:02:05.616]         }, add = TRUE)
[17:02:05.616]     }
[17:02:05.616]     ...future.frame <- base::sys.nframe()
[17:02:05.616]     ...future.conditions <- base::list()
[17:02:05.616]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.616]     if (FALSE) {
[17:02:05.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.616]     }
[17:02:05.616]     ...future.result <- base::tryCatch({
[17:02:05.616]         base::withCallingHandlers({
[17:02:05.616]             ...future.value <- base::withVisible(base::local({
[17:02:05.616]                 ...future.makeSendCondition <- base::local({
[17:02:05.616]                   sendCondition <- NULL
[17:02:05.616]                   function(frame = 1L) {
[17:02:05.616]                     if (is.function(sendCondition)) 
[17:02:05.616]                       return(sendCondition)
[17:02:05.616]                     ns <- getNamespace("parallel")
[17:02:05.616]                     if (exists("sendData", mode = "function", 
[17:02:05.616]                       envir = ns)) {
[17:02:05.616]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.616]                         envir = ns)
[17:02:05.616]                       envir <- sys.frame(frame)
[17:02:05.616]                       master <- NULL
[17:02:05.616]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.616]                         !identical(envir, emptyenv())) {
[17:02:05.616]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.616]                           inherits = FALSE)) {
[17:02:05.616]                           master <- get("master", mode = "list", 
[17:02:05.616]                             envir = envir, inherits = FALSE)
[17:02:05.616]                           if (inherits(master, c("SOCKnode", 
[17:02:05.616]                             "SOCK0node"))) {
[17:02:05.616]                             sendCondition <<- function(cond) {
[17:02:05.616]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.616]                                 success = TRUE)
[17:02:05.616]                               parallel_sendData(master, data)
[17:02:05.616]                             }
[17:02:05.616]                             return(sendCondition)
[17:02:05.616]                           }
[17:02:05.616]                         }
[17:02:05.616]                         frame <- frame + 1L
[17:02:05.616]                         envir <- sys.frame(frame)
[17:02:05.616]                       }
[17:02:05.616]                     }
[17:02:05.616]                     sendCondition <<- function(cond) NULL
[17:02:05.616]                   }
[17:02:05.616]                 })
[17:02:05.616]                 withCallingHandlers({
[17:02:05.616]                   {
[17:02:05.616]                     do.call(function(...) {
[17:02:05.616]                       sum(x, ...)
[17:02:05.616]                     }, args = future.call.arguments)
[17:02:05.616]                   }
[17:02:05.616]                 }, immediateCondition = function(cond) {
[17:02:05.616]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.616]                   sendCondition(cond)
[17:02:05.616]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.616]                   {
[17:02:05.616]                     inherits <- base::inherits
[17:02:05.616]                     invokeRestart <- base::invokeRestart
[17:02:05.616]                     is.null <- base::is.null
[17:02:05.616]                     muffled <- FALSE
[17:02:05.616]                     if (inherits(cond, "message")) {
[17:02:05.616]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.616]                       if (muffled) 
[17:02:05.616]                         invokeRestart("muffleMessage")
[17:02:05.616]                     }
[17:02:05.616]                     else if (inherits(cond, "warning")) {
[17:02:05.616]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.616]                       if (muffled) 
[17:02:05.616]                         invokeRestart("muffleWarning")
[17:02:05.616]                     }
[17:02:05.616]                     else if (inherits(cond, "condition")) {
[17:02:05.616]                       if (!is.null(pattern)) {
[17:02:05.616]                         computeRestarts <- base::computeRestarts
[17:02:05.616]                         grepl <- base::grepl
[17:02:05.616]                         restarts <- computeRestarts(cond)
[17:02:05.616]                         for (restart in restarts) {
[17:02:05.616]                           name <- restart$name
[17:02:05.616]                           if (is.null(name)) 
[17:02:05.616]                             next
[17:02:05.616]                           if (!grepl(pattern, name)) 
[17:02:05.616]                             next
[17:02:05.616]                           invokeRestart(restart)
[17:02:05.616]                           muffled <- TRUE
[17:02:05.616]                           break
[17:02:05.616]                         }
[17:02:05.616]                       }
[17:02:05.616]                     }
[17:02:05.616]                     invisible(muffled)
[17:02:05.616]                   }
[17:02:05.616]                   muffleCondition(cond)
[17:02:05.616]                 })
[17:02:05.616]             }))
[17:02:05.616]             future::FutureResult(value = ...future.value$value, 
[17:02:05.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.616]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.616]                     ...future.globalenv.names))
[17:02:05.616]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.616]         }, condition = base::local({
[17:02:05.616]             c <- base::c
[17:02:05.616]             inherits <- base::inherits
[17:02:05.616]             invokeRestart <- base::invokeRestart
[17:02:05.616]             length <- base::length
[17:02:05.616]             list <- base::list
[17:02:05.616]             seq.int <- base::seq.int
[17:02:05.616]             signalCondition <- base::signalCondition
[17:02:05.616]             sys.calls <- base::sys.calls
[17:02:05.616]             `[[` <- base::`[[`
[17:02:05.616]             `+` <- base::`+`
[17:02:05.616]             `<<-` <- base::`<<-`
[17:02:05.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.616]                   3L)]
[17:02:05.616]             }
[17:02:05.616]             function(cond) {
[17:02:05.616]                 is_error <- inherits(cond, "error")
[17:02:05.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.616]                   NULL)
[17:02:05.616]                 if (is_error) {
[17:02:05.616]                   sessionInformation <- function() {
[17:02:05.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.616]                       search = base::search(), system = base::Sys.info())
[17:02:05.616]                   }
[17:02:05.616]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.616]                     cond$call), session = sessionInformation(), 
[17:02:05.616]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.616]                   signalCondition(cond)
[17:02:05.616]                 }
[17:02:05.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.616]                 "immediateCondition"))) {
[17:02:05.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.616]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.616]                   if (TRUE && !signal) {
[17:02:05.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.616]                     {
[17:02:05.616]                       inherits <- base::inherits
[17:02:05.616]                       invokeRestart <- base::invokeRestart
[17:02:05.616]                       is.null <- base::is.null
[17:02:05.616]                       muffled <- FALSE
[17:02:05.616]                       if (inherits(cond, "message")) {
[17:02:05.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.616]                         if (muffled) 
[17:02:05.616]                           invokeRestart("muffleMessage")
[17:02:05.616]                       }
[17:02:05.616]                       else if (inherits(cond, "warning")) {
[17:02:05.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.616]                         if (muffled) 
[17:02:05.616]                           invokeRestart("muffleWarning")
[17:02:05.616]                       }
[17:02:05.616]                       else if (inherits(cond, "condition")) {
[17:02:05.616]                         if (!is.null(pattern)) {
[17:02:05.616]                           computeRestarts <- base::computeRestarts
[17:02:05.616]                           grepl <- base::grepl
[17:02:05.616]                           restarts <- computeRestarts(cond)
[17:02:05.616]                           for (restart in restarts) {
[17:02:05.616]                             name <- restart$name
[17:02:05.616]                             if (is.null(name)) 
[17:02:05.616]                               next
[17:02:05.616]                             if (!grepl(pattern, name)) 
[17:02:05.616]                               next
[17:02:05.616]                             invokeRestart(restart)
[17:02:05.616]                             muffled <- TRUE
[17:02:05.616]                             break
[17:02:05.616]                           }
[17:02:05.616]                         }
[17:02:05.616]                       }
[17:02:05.616]                       invisible(muffled)
[17:02:05.616]                     }
[17:02:05.616]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.616]                   }
[17:02:05.616]                 }
[17:02:05.616]                 else {
[17:02:05.616]                   if (TRUE) {
[17:02:05.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.616]                     {
[17:02:05.616]                       inherits <- base::inherits
[17:02:05.616]                       invokeRestart <- base::invokeRestart
[17:02:05.616]                       is.null <- base::is.null
[17:02:05.616]                       muffled <- FALSE
[17:02:05.616]                       if (inherits(cond, "message")) {
[17:02:05.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.616]                         if (muffled) 
[17:02:05.616]                           invokeRestart("muffleMessage")
[17:02:05.616]                       }
[17:02:05.616]                       else if (inherits(cond, "warning")) {
[17:02:05.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.616]                         if (muffled) 
[17:02:05.616]                           invokeRestart("muffleWarning")
[17:02:05.616]                       }
[17:02:05.616]                       else if (inherits(cond, "condition")) {
[17:02:05.616]                         if (!is.null(pattern)) {
[17:02:05.616]                           computeRestarts <- base::computeRestarts
[17:02:05.616]                           grepl <- base::grepl
[17:02:05.616]                           restarts <- computeRestarts(cond)
[17:02:05.616]                           for (restart in restarts) {
[17:02:05.616]                             name <- restart$name
[17:02:05.616]                             if (is.null(name)) 
[17:02:05.616]                               next
[17:02:05.616]                             if (!grepl(pattern, name)) 
[17:02:05.616]                               next
[17:02:05.616]                             invokeRestart(restart)
[17:02:05.616]                             muffled <- TRUE
[17:02:05.616]                             break
[17:02:05.616]                           }
[17:02:05.616]                         }
[17:02:05.616]                       }
[17:02:05.616]                       invisible(muffled)
[17:02:05.616]                     }
[17:02:05.616]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.616]                   }
[17:02:05.616]                 }
[17:02:05.616]             }
[17:02:05.616]         }))
[17:02:05.616]     }, error = function(ex) {
[17:02:05.616]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.616]                 ...future.rng), started = ...future.startTime, 
[17:02:05.616]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.616]             version = "1.8"), class = "FutureResult")
[17:02:05.616]     }, finally = {
[17:02:05.616]         if (!identical(...future.workdir, getwd())) 
[17:02:05.616]             setwd(...future.workdir)
[17:02:05.616]         {
[17:02:05.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.616]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.616]             }
[17:02:05.616]             base::options(...future.oldOptions)
[17:02:05.616]             if (.Platform$OS.type == "windows") {
[17:02:05.616]                 old_names <- names(...future.oldEnvVars)
[17:02:05.616]                 envs <- base::Sys.getenv()
[17:02:05.616]                 names <- names(envs)
[17:02:05.616]                 common <- intersect(names, old_names)
[17:02:05.616]                 added <- setdiff(names, old_names)
[17:02:05.616]                 removed <- setdiff(old_names, names)
[17:02:05.616]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.616]                   envs[common]]
[17:02:05.616]                 NAMES <- toupper(changed)
[17:02:05.616]                 args <- list()
[17:02:05.616]                 for (kk in seq_along(NAMES)) {
[17:02:05.616]                   name <- changed[[kk]]
[17:02:05.616]                   NAME <- NAMES[[kk]]
[17:02:05.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.616]                     next
[17:02:05.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.616]                 }
[17:02:05.616]                 NAMES <- toupper(added)
[17:02:05.616]                 for (kk in seq_along(NAMES)) {
[17:02:05.616]                   name <- added[[kk]]
[17:02:05.616]                   NAME <- NAMES[[kk]]
[17:02:05.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.616]                     next
[17:02:05.616]                   args[[name]] <- ""
[17:02:05.616]                 }
[17:02:05.616]                 NAMES <- toupper(removed)
[17:02:05.616]                 for (kk in seq_along(NAMES)) {
[17:02:05.616]                   name <- removed[[kk]]
[17:02:05.616]                   NAME <- NAMES[[kk]]
[17:02:05.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.616]                     next
[17:02:05.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.616]                 }
[17:02:05.616]                 if (length(args) > 0) 
[17:02:05.616]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.616]             }
[17:02:05.616]             else {
[17:02:05.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.616]             }
[17:02:05.616]             {
[17:02:05.616]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.616]                   0L) {
[17:02:05.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.616]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.616]                   base::options(opts)
[17:02:05.616]                 }
[17:02:05.616]                 {
[17:02:05.616]                   {
[17:02:05.616]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.616]                     NULL
[17:02:05.616]                   }
[17:02:05.616]                   options(future.plan = NULL)
[17:02:05.616]                   if (is.na(NA_character_)) 
[17:02:05.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.616]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.616]                     .init = FALSE)
[17:02:05.616]                 }
[17:02:05.616]             }
[17:02:05.616]         }
[17:02:05.616]     })
[17:02:05.616]     if (TRUE) {
[17:02:05.616]         base::sink(type = "output", split = FALSE)
[17:02:05.616]         if (TRUE) {
[17:02:05.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.616]         }
[17:02:05.616]         else {
[17:02:05.616]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.616]         }
[17:02:05.616]         base::close(...future.stdout)
[17:02:05.616]         ...future.stdout <- NULL
[17:02:05.616]     }
[17:02:05.616]     ...future.result$conditions <- ...future.conditions
[17:02:05.616]     ...future.result$finished <- base::Sys.time()
[17:02:05.616]     ...future.result
[17:02:05.616] }
[17:02:05.619] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:02:05.619] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:02:05.620] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.620] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[17:02:05.620] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.621] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:02:05.621] MultisessionFuture started
[17:02:05.621] - Launch lazy future ... done
[17:02:05.622] run() for ‘MultisessionFuture’ ... done
[17:02:05.622] result() for ClusterFuture ...
[17:02:05.622] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.622] - Validating connection of MultisessionFuture
[17:02:05.627] - received message: FutureResult
[17:02:05.627] - Received FutureResult
[17:02:05.627] - Erased future from FutureRegistry
[17:02:05.627] result() for ClusterFuture ...
[17:02:05.627] - result already collected: FutureResult
[17:02:05.628] result() for ClusterFuture ... done
[17:02:05.628] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.628] result() for ClusterFuture ... done
[17:02:05.628] result() for ClusterFuture ...
[17:02:05.628] - result already collected: FutureResult
[17:02:05.628] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5572d1f014a0>
Arguments '...' exists: FALSE
[17:02:05.629] getGlobalsAndPackages() ...
[17:02:05.629] Searching for globals...
[17:02:05.630] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[17:02:05.631] Searching for globals ... DONE
[17:02:05.631] Resolving globals: FALSE
[17:02:05.631] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:05.632] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:05.632] - globals: [2] ‘x’, ‘y’
[17:02:05.632] 
[17:02:05.632] getGlobalsAndPackages() ... DONE
[17:02:05.632] run() for ‘Future’ ...
[17:02:05.633] - state: ‘created’
[17:02:05.633] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:05.648] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:05.648] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:05.648]   - Field: ‘node’
[17:02:05.648]   - Field: ‘label’
[17:02:05.648]   - Field: ‘local’
[17:02:05.649]   - Field: ‘owner’
[17:02:05.649]   - Field: ‘envir’
[17:02:05.649]   - Field: ‘workers’
[17:02:05.649]   - Field: ‘packages’
[17:02:05.649]   - Field: ‘gc’
[17:02:05.649]   - Field: ‘conditions’
[17:02:05.649]   - Field: ‘persistent’
[17:02:05.649]   - Field: ‘expr’
[17:02:05.649]   - Field: ‘uuid’
[17:02:05.649]   - Field: ‘seed’
[17:02:05.650]   - Field: ‘version’
[17:02:05.650]   - Field: ‘result’
[17:02:05.650]   - Field: ‘asynchronous’
[17:02:05.650]   - Field: ‘calls’
[17:02:05.650]   - Field: ‘globals’
[17:02:05.650]   - Field: ‘stdout’
[17:02:05.650]   - Field: ‘earlySignal’
[17:02:05.650]   - Field: ‘lazy’
[17:02:05.651]   - Field: ‘state’
[17:02:05.651] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:05.651] - Launch lazy future ...
[17:02:05.651] Packages needed by the future expression (n = 0): <none>
[17:02:05.651] Packages needed by future strategies (n = 0): <none>
[17:02:05.652] {
[17:02:05.652]     {
[17:02:05.652]         {
[17:02:05.652]             ...future.startTime <- base::Sys.time()
[17:02:05.652]             {
[17:02:05.652]                 {
[17:02:05.652]                   {
[17:02:05.652]                     {
[17:02:05.652]                       base::local({
[17:02:05.652]                         has_future <- base::requireNamespace("future", 
[17:02:05.652]                           quietly = TRUE)
[17:02:05.652]                         if (has_future) {
[17:02:05.652]                           ns <- base::getNamespace("future")
[17:02:05.652]                           version <- ns[[".package"]][["version"]]
[17:02:05.652]                           if (is.null(version)) 
[17:02:05.652]                             version <- utils::packageVersion("future")
[17:02:05.652]                         }
[17:02:05.652]                         else {
[17:02:05.652]                           version <- NULL
[17:02:05.652]                         }
[17:02:05.652]                         if (!has_future || version < "1.8.0") {
[17:02:05.652]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.652]                             "", base::R.version$version.string), 
[17:02:05.652]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.652]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.652]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.652]                               "release", "version")], collapse = " "), 
[17:02:05.652]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.652]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.652]                             info)
[17:02:05.652]                           info <- base::paste(info, collapse = "; ")
[17:02:05.652]                           if (!has_future) {
[17:02:05.652]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.652]                               info)
[17:02:05.652]                           }
[17:02:05.652]                           else {
[17:02:05.652]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.652]                               info, version)
[17:02:05.652]                           }
[17:02:05.652]                           base::stop(msg)
[17:02:05.652]                         }
[17:02:05.652]                       })
[17:02:05.652]                     }
[17:02:05.652]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.652]                     base::options(mc.cores = 1L)
[17:02:05.652]                   }
[17:02:05.652]                   ...future.strategy.old <- future::plan("list")
[17:02:05.652]                   options(future.plan = NULL)
[17:02:05.652]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.652]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.652]                 }
[17:02:05.652]                 ...future.workdir <- getwd()
[17:02:05.652]             }
[17:02:05.652]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.652]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.652]         }
[17:02:05.652]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.652]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.652]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.652]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.652]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.652]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.652]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.652]             base::names(...future.oldOptions))
[17:02:05.652]     }
[17:02:05.652]     if (FALSE) {
[17:02:05.652]     }
[17:02:05.652]     else {
[17:02:05.652]         if (TRUE) {
[17:02:05.652]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.652]                 open = "w")
[17:02:05.652]         }
[17:02:05.652]         else {
[17:02:05.652]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.652]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.652]         }
[17:02:05.652]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.652]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.652]             base::sink(type = "output", split = FALSE)
[17:02:05.652]             base::close(...future.stdout)
[17:02:05.652]         }, add = TRUE)
[17:02:05.652]     }
[17:02:05.652]     ...future.frame <- base::sys.nframe()
[17:02:05.652]     ...future.conditions <- base::list()
[17:02:05.652]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.652]     if (FALSE) {
[17:02:05.652]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.652]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.652]     }
[17:02:05.652]     ...future.result <- base::tryCatch({
[17:02:05.652]         base::withCallingHandlers({
[17:02:05.652]             ...future.value <- base::withVisible(base::local({
[17:02:05.652]                 ...future.makeSendCondition <- base::local({
[17:02:05.652]                   sendCondition <- NULL
[17:02:05.652]                   function(frame = 1L) {
[17:02:05.652]                     if (is.function(sendCondition)) 
[17:02:05.652]                       return(sendCondition)
[17:02:05.652]                     ns <- getNamespace("parallel")
[17:02:05.652]                     if (exists("sendData", mode = "function", 
[17:02:05.652]                       envir = ns)) {
[17:02:05.652]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.652]                         envir = ns)
[17:02:05.652]                       envir <- sys.frame(frame)
[17:02:05.652]                       master <- NULL
[17:02:05.652]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.652]                         !identical(envir, emptyenv())) {
[17:02:05.652]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.652]                           inherits = FALSE)) {
[17:02:05.652]                           master <- get("master", mode = "list", 
[17:02:05.652]                             envir = envir, inherits = FALSE)
[17:02:05.652]                           if (inherits(master, c("SOCKnode", 
[17:02:05.652]                             "SOCK0node"))) {
[17:02:05.652]                             sendCondition <<- function(cond) {
[17:02:05.652]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.652]                                 success = TRUE)
[17:02:05.652]                               parallel_sendData(master, data)
[17:02:05.652]                             }
[17:02:05.652]                             return(sendCondition)
[17:02:05.652]                           }
[17:02:05.652]                         }
[17:02:05.652]                         frame <- frame + 1L
[17:02:05.652]                         envir <- sys.frame(frame)
[17:02:05.652]                       }
[17:02:05.652]                     }
[17:02:05.652]                     sendCondition <<- function(cond) NULL
[17:02:05.652]                   }
[17:02:05.652]                 })
[17:02:05.652]                 withCallingHandlers({
[17:02:05.652]                   {
[17:02:05.652]                     sum(x, y)
[17:02:05.652]                   }
[17:02:05.652]                 }, immediateCondition = function(cond) {
[17:02:05.652]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.652]                   sendCondition(cond)
[17:02:05.652]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.652]                   {
[17:02:05.652]                     inherits <- base::inherits
[17:02:05.652]                     invokeRestart <- base::invokeRestart
[17:02:05.652]                     is.null <- base::is.null
[17:02:05.652]                     muffled <- FALSE
[17:02:05.652]                     if (inherits(cond, "message")) {
[17:02:05.652]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.652]                       if (muffled) 
[17:02:05.652]                         invokeRestart("muffleMessage")
[17:02:05.652]                     }
[17:02:05.652]                     else if (inherits(cond, "warning")) {
[17:02:05.652]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.652]                       if (muffled) 
[17:02:05.652]                         invokeRestart("muffleWarning")
[17:02:05.652]                     }
[17:02:05.652]                     else if (inherits(cond, "condition")) {
[17:02:05.652]                       if (!is.null(pattern)) {
[17:02:05.652]                         computeRestarts <- base::computeRestarts
[17:02:05.652]                         grepl <- base::grepl
[17:02:05.652]                         restarts <- computeRestarts(cond)
[17:02:05.652]                         for (restart in restarts) {
[17:02:05.652]                           name <- restart$name
[17:02:05.652]                           if (is.null(name)) 
[17:02:05.652]                             next
[17:02:05.652]                           if (!grepl(pattern, name)) 
[17:02:05.652]                             next
[17:02:05.652]                           invokeRestart(restart)
[17:02:05.652]                           muffled <- TRUE
[17:02:05.652]                           break
[17:02:05.652]                         }
[17:02:05.652]                       }
[17:02:05.652]                     }
[17:02:05.652]                     invisible(muffled)
[17:02:05.652]                   }
[17:02:05.652]                   muffleCondition(cond)
[17:02:05.652]                 })
[17:02:05.652]             }))
[17:02:05.652]             future::FutureResult(value = ...future.value$value, 
[17:02:05.652]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.652]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.652]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.652]                     ...future.globalenv.names))
[17:02:05.652]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.652]         }, condition = base::local({
[17:02:05.652]             c <- base::c
[17:02:05.652]             inherits <- base::inherits
[17:02:05.652]             invokeRestart <- base::invokeRestart
[17:02:05.652]             length <- base::length
[17:02:05.652]             list <- base::list
[17:02:05.652]             seq.int <- base::seq.int
[17:02:05.652]             signalCondition <- base::signalCondition
[17:02:05.652]             sys.calls <- base::sys.calls
[17:02:05.652]             `[[` <- base::`[[`
[17:02:05.652]             `+` <- base::`+`
[17:02:05.652]             `<<-` <- base::`<<-`
[17:02:05.652]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.652]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.652]                   3L)]
[17:02:05.652]             }
[17:02:05.652]             function(cond) {
[17:02:05.652]                 is_error <- inherits(cond, "error")
[17:02:05.652]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.652]                   NULL)
[17:02:05.652]                 if (is_error) {
[17:02:05.652]                   sessionInformation <- function() {
[17:02:05.652]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.652]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.652]                       search = base::search(), system = base::Sys.info())
[17:02:05.652]                   }
[17:02:05.652]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.652]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.652]                     cond$call), session = sessionInformation(), 
[17:02:05.652]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.652]                   signalCondition(cond)
[17:02:05.652]                 }
[17:02:05.652]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.652]                 "immediateCondition"))) {
[17:02:05.652]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.652]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.652]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.652]                   if (TRUE && !signal) {
[17:02:05.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.652]                     {
[17:02:05.652]                       inherits <- base::inherits
[17:02:05.652]                       invokeRestart <- base::invokeRestart
[17:02:05.652]                       is.null <- base::is.null
[17:02:05.652]                       muffled <- FALSE
[17:02:05.652]                       if (inherits(cond, "message")) {
[17:02:05.652]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.652]                         if (muffled) 
[17:02:05.652]                           invokeRestart("muffleMessage")
[17:02:05.652]                       }
[17:02:05.652]                       else if (inherits(cond, "warning")) {
[17:02:05.652]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.652]                         if (muffled) 
[17:02:05.652]                           invokeRestart("muffleWarning")
[17:02:05.652]                       }
[17:02:05.652]                       else if (inherits(cond, "condition")) {
[17:02:05.652]                         if (!is.null(pattern)) {
[17:02:05.652]                           computeRestarts <- base::computeRestarts
[17:02:05.652]                           grepl <- base::grepl
[17:02:05.652]                           restarts <- computeRestarts(cond)
[17:02:05.652]                           for (restart in restarts) {
[17:02:05.652]                             name <- restart$name
[17:02:05.652]                             if (is.null(name)) 
[17:02:05.652]                               next
[17:02:05.652]                             if (!grepl(pattern, name)) 
[17:02:05.652]                               next
[17:02:05.652]                             invokeRestart(restart)
[17:02:05.652]                             muffled <- TRUE
[17:02:05.652]                             break
[17:02:05.652]                           }
[17:02:05.652]                         }
[17:02:05.652]                       }
[17:02:05.652]                       invisible(muffled)
[17:02:05.652]                     }
[17:02:05.652]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.652]                   }
[17:02:05.652]                 }
[17:02:05.652]                 else {
[17:02:05.652]                   if (TRUE) {
[17:02:05.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.652]                     {
[17:02:05.652]                       inherits <- base::inherits
[17:02:05.652]                       invokeRestart <- base::invokeRestart
[17:02:05.652]                       is.null <- base::is.null
[17:02:05.652]                       muffled <- FALSE
[17:02:05.652]                       if (inherits(cond, "message")) {
[17:02:05.652]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.652]                         if (muffled) 
[17:02:05.652]                           invokeRestart("muffleMessage")
[17:02:05.652]                       }
[17:02:05.652]                       else if (inherits(cond, "warning")) {
[17:02:05.652]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.652]                         if (muffled) 
[17:02:05.652]                           invokeRestart("muffleWarning")
[17:02:05.652]                       }
[17:02:05.652]                       else if (inherits(cond, "condition")) {
[17:02:05.652]                         if (!is.null(pattern)) {
[17:02:05.652]                           computeRestarts <- base::computeRestarts
[17:02:05.652]                           grepl <- base::grepl
[17:02:05.652]                           restarts <- computeRestarts(cond)
[17:02:05.652]                           for (restart in restarts) {
[17:02:05.652]                             name <- restart$name
[17:02:05.652]                             if (is.null(name)) 
[17:02:05.652]                               next
[17:02:05.652]                             if (!grepl(pattern, name)) 
[17:02:05.652]                               next
[17:02:05.652]                             invokeRestart(restart)
[17:02:05.652]                             muffled <- TRUE
[17:02:05.652]                             break
[17:02:05.652]                           }
[17:02:05.652]                         }
[17:02:05.652]                       }
[17:02:05.652]                       invisible(muffled)
[17:02:05.652]                     }
[17:02:05.652]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.652]                   }
[17:02:05.652]                 }
[17:02:05.652]             }
[17:02:05.652]         }))
[17:02:05.652]     }, error = function(ex) {
[17:02:05.652]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.652]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.652]                 ...future.rng), started = ...future.startTime, 
[17:02:05.652]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.652]             version = "1.8"), class = "FutureResult")
[17:02:05.652]     }, finally = {
[17:02:05.652]         if (!identical(...future.workdir, getwd())) 
[17:02:05.652]             setwd(...future.workdir)
[17:02:05.652]         {
[17:02:05.652]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.652]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.652]             }
[17:02:05.652]             base::options(...future.oldOptions)
[17:02:05.652]             if (.Platform$OS.type == "windows") {
[17:02:05.652]                 old_names <- names(...future.oldEnvVars)
[17:02:05.652]                 envs <- base::Sys.getenv()
[17:02:05.652]                 names <- names(envs)
[17:02:05.652]                 common <- intersect(names, old_names)
[17:02:05.652]                 added <- setdiff(names, old_names)
[17:02:05.652]                 removed <- setdiff(old_names, names)
[17:02:05.652]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.652]                   envs[common]]
[17:02:05.652]                 NAMES <- toupper(changed)
[17:02:05.652]                 args <- list()
[17:02:05.652]                 for (kk in seq_along(NAMES)) {
[17:02:05.652]                   name <- changed[[kk]]
[17:02:05.652]                   NAME <- NAMES[[kk]]
[17:02:05.652]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.652]                     next
[17:02:05.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.652]                 }
[17:02:05.652]                 NAMES <- toupper(added)
[17:02:05.652]                 for (kk in seq_along(NAMES)) {
[17:02:05.652]                   name <- added[[kk]]
[17:02:05.652]                   NAME <- NAMES[[kk]]
[17:02:05.652]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.652]                     next
[17:02:05.652]                   args[[name]] <- ""
[17:02:05.652]                 }
[17:02:05.652]                 NAMES <- toupper(removed)
[17:02:05.652]                 for (kk in seq_along(NAMES)) {
[17:02:05.652]                   name <- removed[[kk]]
[17:02:05.652]                   NAME <- NAMES[[kk]]
[17:02:05.652]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.652]                     next
[17:02:05.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.652]                 }
[17:02:05.652]                 if (length(args) > 0) 
[17:02:05.652]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.652]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.652]             }
[17:02:05.652]             else {
[17:02:05.652]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.652]             }
[17:02:05.652]             {
[17:02:05.652]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.652]                   0L) {
[17:02:05.652]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.652]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.652]                   base::options(opts)
[17:02:05.652]                 }
[17:02:05.652]                 {
[17:02:05.652]                   {
[17:02:05.652]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.652]                     NULL
[17:02:05.652]                   }
[17:02:05.652]                   options(future.plan = NULL)
[17:02:05.652]                   if (is.na(NA_character_)) 
[17:02:05.652]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.652]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.652]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.652]                     .init = FALSE)
[17:02:05.652]                 }
[17:02:05.652]             }
[17:02:05.652]         }
[17:02:05.652]     })
[17:02:05.652]     if (TRUE) {
[17:02:05.652]         base::sink(type = "output", split = FALSE)
[17:02:05.652]         if (TRUE) {
[17:02:05.652]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.652]         }
[17:02:05.652]         else {
[17:02:05.652]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.652]         }
[17:02:05.652]         base::close(...future.stdout)
[17:02:05.652]         ...future.stdout <- NULL
[17:02:05.652]     }
[17:02:05.652]     ...future.result$conditions <- ...future.conditions
[17:02:05.652]     ...future.result$finished <- base::Sys.time()
[17:02:05.652]     ...future.result
[17:02:05.652] }
[17:02:05.655] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:02:05.655] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:02:05.656] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.656] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[17:02:05.656] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.656] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:02:05.659] MultisessionFuture started
[17:02:05.659] - Launch lazy future ... done
[17:02:05.659] run() for ‘MultisessionFuture’ ... done
[17:02:05.660] result() for ClusterFuture ...
[17:02:05.660] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.660] - Validating connection of MultisessionFuture
[17:02:05.661] - received message: FutureResult
[17:02:05.661] - Received FutureResult
[17:02:05.661] - Erased future from FutureRegistry
[17:02:05.661] result() for ClusterFuture ...
[17:02:05.661] - result already collected: FutureResult
[17:02:05.661] result() for ClusterFuture ... done
[17:02:05.662] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.662] result() for ClusterFuture ... done
[17:02:05.662] result() for ClusterFuture ...
[17:02:05.662] - result already collected: FutureResult
[17:02:05.662] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5572d209d0f8>
Arguments '...' exists: FALSE
[17:02:05.662] getGlobalsAndPackages() ...
[17:02:05.663] Searching for globals...
[17:02:05.664] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[17:02:05.664] Searching for globals ... DONE
[17:02:05.664] Resolving globals: FALSE
[17:02:05.664] Tweak future expression to call with '...' arguments ...
[17:02:05.665] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:05.665] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:05.665] - globals: [2] ‘x’, ‘y’
[17:02:05.665] 
[17:02:05.666] getGlobalsAndPackages() ... DONE
[17:02:05.666] run() for ‘Future’ ...
[17:02:05.666] - state: ‘created’
[17:02:05.666] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:05.680] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:05.681] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:05.681]   - Field: ‘node’
[17:02:05.681]   - Field: ‘label’
[17:02:05.681]   - Field: ‘local’
[17:02:05.681]   - Field: ‘owner’
[17:02:05.681]   - Field: ‘envir’
[17:02:05.681]   - Field: ‘workers’
[17:02:05.681]   - Field: ‘packages’
[17:02:05.681]   - Field: ‘gc’
[17:02:05.681]   - Field: ‘conditions’
[17:02:05.682]   - Field: ‘persistent’
[17:02:05.682]   - Field: ‘expr’
[17:02:05.682]   - Field: ‘uuid’
[17:02:05.682]   - Field: ‘seed’
[17:02:05.682]   - Field: ‘version’
[17:02:05.682]   - Field: ‘result’
[17:02:05.682]   - Field: ‘asynchronous’
[17:02:05.682]   - Field: ‘calls’
[17:02:05.682]   - Field: ‘globals’
[17:02:05.682]   - Field: ‘stdout’
[17:02:05.682]   - Field: ‘earlySignal’
[17:02:05.683]   - Field: ‘lazy’
[17:02:05.683]   - Field: ‘state’
[17:02:05.683] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:05.683] - Launch lazy future ...
[17:02:05.683] Packages needed by the future expression (n = 0): <none>
[17:02:05.683] Packages needed by future strategies (n = 0): <none>
[17:02:05.684] {
[17:02:05.684]     {
[17:02:05.684]         {
[17:02:05.684]             ...future.startTime <- base::Sys.time()
[17:02:05.684]             {
[17:02:05.684]                 {
[17:02:05.684]                   {
[17:02:05.684]                     {
[17:02:05.684]                       base::local({
[17:02:05.684]                         has_future <- base::requireNamespace("future", 
[17:02:05.684]                           quietly = TRUE)
[17:02:05.684]                         if (has_future) {
[17:02:05.684]                           ns <- base::getNamespace("future")
[17:02:05.684]                           version <- ns[[".package"]][["version"]]
[17:02:05.684]                           if (is.null(version)) 
[17:02:05.684]                             version <- utils::packageVersion("future")
[17:02:05.684]                         }
[17:02:05.684]                         else {
[17:02:05.684]                           version <- NULL
[17:02:05.684]                         }
[17:02:05.684]                         if (!has_future || version < "1.8.0") {
[17:02:05.684]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.684]                             "", base::R.version$version.string), 
[17:02:05.684]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.684]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.684]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.684]                               "release", "version")], collapse = " "), 
[17:02:05.684]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.684]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.684]                             info)
[17:02:05.684]                           info <- base::paste(info, collapse = "; ")
[17:02:05.684]                           if (!has_future) {
[17:02:05.684]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.684]                               info)
[17:02:05.684]                           }
[17:02:05.684]                           else {
[17:02:05.684]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.684]                               info, version)
[17:02:05.684]                           }
[17:02:05.684]                           base::stop(msg)
[17:02:05.684]                         }
[17:02:05.684]                       })
[17:02:05.684]                     }
[17:02:05.684]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.684]                     base::options(mc.cores = 1L)
[17:02:05.684]                   }
[17:02:05.684]                   ...future.strategy.old <- future::plan("list")
[17:02:05.684]                   options(future.plan = NULL)
[17:02:05.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.684]                 }
[17:02:05.684]                 ...future.workdir <- getwd()
[17:02:05.684]             }
[17:02:05.684]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.684]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.684]         }
[17:02:05.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.684]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.684]             base::names(...future.oldOptions))
[17:02:05.684]     }
[17:02:05.684]     if (FALSE) {
[17:02:05.684]     }
[17:02:05.684]     else {
[17:02:05.684]         if (TRUE) {
[17:02:05.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.684]                 open = "w")
[17:02:05.684]         }
[17:02:05.684]         else {
[17:02:05.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.684]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.684]         }
[17:02:05.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.684]             base::sink(type = "output", split = FALSE)
[17:02:05.684]             base::close(...future.stdout)
[17:02:05.684]         }, add = TRUE)
[17:02:05.684]     }
[17:02:05.684]     ...future.frame <- base::sys.nframe()
[17:02:05.684]     ...future.conditions <- base::list()
[17:02:05.684]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.684]     if (FALSE) {
[17:02:05.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.684]     }
[17:02:05.684]     ...future.result <- base::tryCatch({
[17:02:05.684]         base::withCallingHandlers({
[17:02:05.684]             ...future.value <- base::withVisible(base::local({
[17:02:05.684]                 ...future.makeSendCondition <- base::local({
[17:02:05.684]                   sendCondition <- NULL
[17:02:05.684]                   function(frame = 1L) {
[17:02:05.684]                     if (is.function(sendCondition)) 
[17:02:05.684]                       return(sendCondition)
[17:02:05.684]                     ns <- getNamespace("parallel")
[17:02:05.684]                     if (exists("sendData", mode = "function", 
[17:02:05.684]                       envir = ns)) {
[17:02:05.684]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.684]                         envir = ns)
[17:02:05.684]                       envir <- sys.frame(frame)
[17:02:05.684]                       master <- NULL
[17:02:05.684]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.684]                         !identical(envir, emptyenv())) {
[17:02:05.684]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.684]                           inherits = FALSE)) {
[17:02:05.684]                           master <- get("master", mode = "list", 
[17:02:05.684]                             envir = envir, inherits = FALSE)
[17:02:05.684]                           if (inherits(master, c("SOCKnode", 
[17:02:05.684]                             "SOCK0node"))) {
[17:02:05.684]                             sendCondition <<- function(cond) {
[17:02:05.684]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.684]                                 success = TRUE)
[17:02:05.684]                               parallel_sendData(master, data)
[17:02:05.684]                             }
[17:02:05.684]                             return(sendCondition)
[17:02:05.684]                           }
[17:02:05.684]                         }
[17:02:05.684]                         frame <- frame + 1L
[17:02:05.684]                         envir <- sys.frame(frame)
[17:02:05.684]                       }
[17:02:05.684]                     }
[17:02:05.684]                     sendCondition <<- function(cond) NULL
[17:02:05.684]                   }
[17:02:05.684]                 })
[17:02:05.684]                 withCallingHandlers({
[17:02:05.684]                   {
[17:02:05.684]                     sum(x, y, ...)
[17:02:05.684]                   }
[17:02:05.684]                 }, immediateCondition = function(cond) {
[17:02:05.684]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.684]                   sendCondition(cond)
[17:02:05.684]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.684]                   {
[17:02:05.684]                     inherits <- base::inherits
[17:02:05.684]                     invokeRestart <- base::invokeRestart
[17:02:05.684]                     is.null <- base::is.null
[17:02:05.684]                     muffled <- FALSE
[17:02:05.684]                     if (inherits(cond, "message")) {
[17:02:05.684]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.684]                       if (muffled) 
[17:02:05.684]                         invokeRestart("muffleMessage")
[17:02:05.684]                     }
[17:02:05.684]                     else if (inherits(cond, "warning")) {
[17:02:05.684]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.684]                       if (muffled) 
[17:02:05.684]                         invokeRestart("muffleWarning")
[17:02:05.684]                     }
[17:02:05.684]                     else if (inherits(cond, "condition")) {
[17:02:05.684]                       if (!is.null(pattern)) {
[17:02:05.684]                         computeRestarts <- base::computeRestarts
[17:02:05.684]                         grepl <- base::grepl
[17:02:05.684]                         restarts <- computeRestarts(cond)
[17:02:05.684]                         for (restart in restarts) {
[17:02:05.684]                           name <- restart$name
[17:02:05.684]                           if (is.null(name)) 
[17:02:05.684]                             next
[17:02:05.684]                           if (!grepl(pattern, name)) 
[17:02:05.684]                             next
[17:02:05.684]                           invokeRestart(restart)
[17:02:05.684]                           muffled <- TRUE
[17:02:05.684]                           break
[17:02:05.684]                         }
[17:02:05.684]                       }
[17:02:05.684]                     }
[17:02:05.684]                     invisible(muffled)
[17:02:05.684]                   }
[17:02:05.684]                   muffleCondition(cond)
[17:02:05.684]                 })
[17:02:05.684]             }))
[17:02:05.684]             future::FutureResult(value = ...future.value$value, 
[17:02:05.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.684]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.684]                     ...future.globalenv.names))
[17:02:05.684]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.684]         }, condition = base::local({
[17:02:05.684]             c <- base::c
[17:02:05.684]             inherits <- base::inherits
[17:02:05.684]             invokeRestart <- base::invokeRestart
[17:02:05.684]             length <- base::length
[17:02:05.684]             list <- base::list
[17:02:05.684]             seq.int <- base::seq.int
[17:02:05.684]             signalCondition <- base::signalCondition
[17:02:05.684]             sys.calls <- base::sys.calls
[17:02:05.684]             `[[` <- base::`[[`
[17:02:05.684]             `+` <- base::`+`
[17:02:05.684]             `<<-` <- base::`<<-`
[17:02:05.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.684]                   3L)]
[17:02:05.684]             }
[17:02:05.684]             function(cond) {
[17:02:05.684]                 is_error <- inherits(cond, "error")
[17:02:05.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.684]                   NULL)
[17:02:05.684]                 if (is_error) {
[17:02:05.684]                   sessionInformation <- function() {
[17:02:05.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.684]                       search = base::search(), system = base::Sys.info())
[17:02:05.684]                   }
[17:02:05.684]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.684]                     cond$call), session = sessionInformation(), 
[17:02:05.684]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.684]                   signalCondition(cond)
[17:02:05.684]                 }
[17:02:05.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.684]                 "immediateCondition"))) {
[17:02:05.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.684]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.684]                   if (TRUE && !signal) {
[17:02:05.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.684]                     {
[17:02:05.684]                       inherits <- base::inherits
[17:02:05.684]                       invokeRestart <- base::invokeRestart
[17:02:05.684]                       is.null <- base::is.null
[17:02:05.684]                       muffled <- FALSE
[17:02:05.684]                       if (inherits(cond, "message")) {
[17:02:05.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.684]                         if (muffled) 
[17:02:05.684]                           invokeRestart("muffleMessage")
[17:02:05.684]                       }
[17:02:05.684]                       else if (inherits(cond, "warning")) {
[17:02:05.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.684]                         if (muffled) 
[17:02:05.684]                           invokeRestart("muffleWarning")
[17:02:05.684]                       }
[17:02:05.684]                       else if (inherits(cond, "condition")) {
[17:02:05.684]                         if (!is.null(pattern)) {
[17:02:05.684]                           computeRestarts <- base::computeRestarts
[17:02:05.684]                           grepl <- base::grepl
[17:02:05.684]                           restarts <- computeRestarts(cond)
[17:02:05.684]                           for (restart in restarts) {
[17:02:05.684]                             name <- restart$name
[17:02:05.684]                             if (is.null(name)) 
[17:02:05.684]                               next
[17:02:05.684]                             if (!grepl(pattern, name)) 
[17:02:05.684]                               next
[17:02:05.684]                             invokeRestart(restart)
[17:02:05.684]                             muffled <- TRUE
[17:02:05.684]                             break
[17:02:05.684]                           }
[17:02:05.684]                         }
[17:02:05.684]                       }
[17:02:05.684]                       invisible(muffled)
[17:02:05.684]                     }
[17:02:05.684]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.684]                   }
[17:02:05.684]                 }
[17:02:05.684]                 else {
[17:02:05.684]                   if (TRUE) {
[17:02:05.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.684]                     {
[17:02:05.684]                       inherits <- base::inherits
[17:02:05.684]                       invokeRestart <- base::invokeRestart
[17:02:05.684]                       is.null <- base::is.null
[17:02:05.684]                       muffled <- FALSE
[17:02:05.684]                       if (inherits(cond, "message")) {
[17:02:05.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.684]                         if (muffled) 
[17:02:05.684]                           invokeRestart("muffleMessage")
[17:02:05.684]                       }
[17:02:05.684]                       else if (inherits(cond, "warning")) {
[17:02:05.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.684]                         if (muffled) 
[17:02:05.684]                           invokeRestart("muffleWarning")
[17:02:05.684]                       }
[17:02:05.684]                       else if (inherits(cond, "condition")) {
[17:02:05.684]                         if (!is.null(pattern)) {
[17:02:05.684]                           computeRestarts <- base::computeRestarts
[17:02:05.684]                           grepl <- base::grepl
[17:02:05.684]                           restarts <- computeRestarts(cond)
[17:02:05.684]                           for (restart in restarts) {
[17:02:05.684]                             name <- restart$name
[17:02:05.684]                             if (is.null(name)) 
[17:02:05.684]                               next
[17:02:05.684]                             if (!grepl(pattern, name)) 
[17:02:05.684]                               next
[17:02:05.684]                             invokeRestart(restart)
[17:02:05.684]                             muffled <- TRUE
[17:02:05.684]                             break
[17:02:05.684]                           }
[17:02:05.684]                         }
[17:02:05.684]                       }
[17:02:05.684]                       invisible(muffled)
[17:02:05.684]                     }
[17:02:05.684]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.684]                   }
[17:02:05.684]                 }
[17:02:05.684]             }
[17:02:05.684]         }))
[17:02:05.684]     }, error = function(ex) {
[17:02:05.684]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.684]                 ...future.rng), started = ...future.startTime, 
[17:02:05.684]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.684]             version = "1.8"), class = "FutureResult")
[17:02:05.684]     }, finally = {
[17:02:05.684]         if (!identical(...future.workdir, getwd())) 
[17:02:05.684]             setwd(...future.workdir)
[17:02:05.684]         {
[17:02:05.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.684]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.684]             }
[17:02:05.684]             base::options(...future.oldOptions)
[17:02:05.684]             if (.Platform$OS.type == "windows") {
[17:02:05.684]                 old_names <- names(...future.oldEnvVars)
[17:02:05.684]                 envs <- base::Sys.getenv()
[17:02:05.684]                 names <- names(envs)
[17:02:05.684]                 common <- intersect(names, old_names)
[17:02:05.684]                 added <- setdiff(names, old_names)
[17:02:05.684]                 removed <- setdiff(old_names, names)
[17:02:05.684]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.684]                   envs[common]]
[17:02:05.684]                 NAMES <- toupper(changed)
[17:02:05.684]                 args <- list()
[17:02:05.684]                 for (kk in seq_along(NAMES)) {
[17:02:05.684]                   name <- changed[[kk]]
[17:02:05.684]                   NAME <- NAMES[[kk]]
[17:02:05.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.684]                     next
[17:02:05.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.684]                 }
[17:02:05.684]                 NAMES <- toupper(added)
[17:02:05.684]                 for (kk in seq_along(NAMES)) {
[17:02:05.684]                   name <- added[[kk]]
[17:02:05.684]                   NAME <- NAMES[[kk]]
[17:02:05.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.684]                     next
[17:02:05.684]                   args[[name]] <- ""
[17:02:05.684]                 }
[17:02:05.684]                 NAMES <- toupper(removed)
[17:02:05.684]                 for (kk in seq_along(NAMES)) {
[17:02:05.684]                   name <- removed[[kk]]
[17:02:05.684]                   NAME <- NAMES[[kk]]
[17:02:05.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.684]                     next
[17:02:05.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.684]                 }
[17:02:05.684]                 if (length(args) > 0) 
[17:02:05.684]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.684]             }
[17:02:05.684]             else {
[17:02:05.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.684]             }
[17:02:05.684]             {
[17:02:05.684]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.684]                   0L) {
[17:02:05.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.684]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.684]                   base::options(opts)
[17:02:05.684]                 }
[17:02:05.684]                 {
[17:02:05.684]                   {
[17:02:05.684]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.684]                     NULL
[17:02:05.684]                   }
[17:02:05.684]                   options(future.plan = NULL)
[17:02:05.684]                   if (is.na(NA_character_)) 
[17:02:05.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.684]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.684]                     .init = FALSE)
[17:02:05.684]                 }
[17:02:05.684]             }
[17:02:05.684]         }
[17:02:05.684]     })
[17:02:05.684]     if (TRUE) {
[17:02:05.684]         base::sink(type = "output", split = FALSE)
[17:02:05.684]         if (TRUE) {
[17:02:05.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.684]         }
[17:02:05.684]         else {
[17:02:05.684]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.684]         }
[17:02:05.684]         base::close(...future.stdout)
[17:02:05.684]         ...future.stdout <- NULL
[17:02:05.684]     }
[17:02:05.684]     ...future.result$conditions <- ...future.conditions
[17:02:05.684]     ...future.result$finished <- base::Sys.time()
[17:02:05.684]     ...future.result
[17:02:05.684] }
[17:02:05.686] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[17:02:05.687] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:02:05.687] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.687] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[17:02:05.687] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.688] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[17:02:05.688] MultisessionFuture started
[17:02:05.688] - Launch lazy future ... done
[17:02:05.688] run() for ‘MultisessionFuture’ ... done
[17:02:05.689] result() for ClusterFuture ...
[17:02:05.689] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.689] - Validating connection of MultisessionFuture
[17:02:05.691] - received message: FutureResult
[17:02:05.691] - Received FutureResult
[17:02:05.691] - Erased future from FutureRegistry
[17:02:05.691] result() for ClusterFuture ...
[17:02:05.691] - result already collected: FutureResult
[17:02:05.691] result() for ClusterFuture ... done
[17:02:05.691] signalConditions() ...
[17:02:05.692]  - include = ‘immediateCondition’
[17:02:05.692]  - exclude = 
[17:02:05.692]  - resignal = FALSE
[17:02:05.692]  - Number of conditions: 1
[17:02:05.692] signalConditions() ... done
[17:02:05.692] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.692] result() for ClusterFuture ... done
[17:02:05.692] result() for ClusterFuture ...
[17:02:05.692] - result already collected: FutureResult
[17:02:05.692] result() for ClusterFuture ... done
[17:02:05.692] signalConditions() ...
[17:02:05.692]  - include = ‘immediateCondition’
[17:02:05.693]  - exclude = 
[17:02:05.693]  - resignal = FALSE
[17:02:05.693]  - Number of conditions: 1
[17:02:05.693] signalConditions() ... done
[17:02:05.693] Future state: ‘finished’
[17:02:05.693] result() for ClusterFuture ...
[17:02:05.693] - result already collected: FutureResult
[17:02:05.693] result() for ClusterFuture ... done
[17:02:05.693] signalConditions() ...
[17:02:05.693]  - include = ‘condition’
[17:02:05.693]  - exclude = ‘immediateCondition’
[17:02:05.694]  - resignal = TRUE
[17:02:05.694]  - Number of conditions: 1
[17:02:05.694]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:05.694] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5572d26887d0>
Arguments '...' exists: TRUE
[17:02:05.695] getGlobalsAndPackages() ...
[17:02:05.695] - globals passed as-is: [1] ‘...’
[17:02:05.695] Resolving globals: FALSE
[17:02:05.695] Tweak future expression to call with '...' arguments ...
[17:02:05.695] {
[17:02:05.695]     do.call(function(...) {
[17:02:05.695]         fcn <- function() sum(...)
[17:02:05.695]         fcn()
[17:02:05.695]     }, args = future.call.arguments)
[17:02:05.695] }
[17:02:05.695] Tweak future expression to call with '...' arguments ... DONE
[17:02:05.696] The total size of the 1 globals is 112 bytes (112 bytes)
[17:02:05.696] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[17:02:05.696] - globals: [1] ‘future.call.arguments’
[17:02:05.696] 
[17:02:05.696] getGlobalsAndPackages() ... DONE
[17:02:05.697] run() for ‘Future’ ...
[17:02:05.697] - state: ‘created’
[17:02:05.697] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:05.711] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:05.712] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:05.712]   - Field: ‘node’
[17:02:05.712]   - Field: ‘label’
[17:02:05.712]   - Field: ‘local’
[17:02:05.712]   - Field: ‘owner’
[17:02:05.712]   - Field: ‘envir’
[17:02:05.712]   - Field: ‘workers’
[17:02:05.712]   - Field: ‘packages’
[17:02:05.712]   - Field: ‘gc’
[17:02:05.713]   - Field: ‘conditions’
[17:02:05.713]   - Field: ‘persistent’
[17:02:05.713]   - Field: ‘expr’
[17:02:05.713]   - Field: ‘uuid’
[17:02:05.713]   - Field: ‘seed’
[17:02:05.713]   - Field: ‘version’
[17:02:05.713]   - Field: ‘result’
[17:02:05.713]   - Field: ‘asynchronous’
[17:02:05.713]   - Field: ‘calls’
[17:02:05.713]   - Field: ‘globals’
[17:02:05.713]   - Field: ‘stdout’
[17:02:05.714]   - Field: ‘earlySignal’
[17:02:05.714]   - Field: ‘lazy’
[17:02:05.714]   - Field: ‘state’
[17:02:05.714] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:05.714] - Launch lazy future ...
[17:02:05.714] Packages needed by the future expression (n = 0): <none>
[17:02:05.714] Packages needed by future strategies (n = 0): <none>
[17:02:05.715] {
[17:02:05.715]     {
[17:02:05.715]         {
[17:02:05.715]             ...future.startTime <- base::Sys.time()
[17:02:05.715]             {
[17:02:05.715]                 {
[17:02:05.715]                   {
[17:02:05.715]                     {
[17:02:05.715]                       base::local({
[17:02:05.715]                         has_future <- base::requireNamespace("future", 
[17:02:05.715]                           quietly = TRUE)
[17:02:05.715]                         if (has_future) {
[17:02:05.715]                           ns <- base::getNamespace("future")
[17:02:05.715]                           version <- ns[[".package"]][["version"]]
[17:02:05.715]                           if (is.null(version)) 
[17:02:05.715]                             version <- utils::packageVersion("future")
[17:02:05.715]                         }
[17:02:05.715]                         else {
[17:02:05.715]                           version <- NULL
[17:02:05.715]                         }
[17:02:05.715]                         if (!has_future || version < "1.8.0") {
[17:02:05.715]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.715]                             "", base::R.version$version.string), 
[17:02:05.715]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.715]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.715]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.715]                               "release", "version")], collapse = " "), 
[17:02:05.715]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.715]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.715]                             info)
[17:02:05.715]                           info <- base::paste(info, collapse = "; ")
[17:02:05.715]                           if (!has_future) {
[17:02:05.715]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.715]                               info)
[17:02:05.715]                           }
[17:02:05.715]                           else {
[17:02:05.715]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.715]                               info, version)
[17:02:05.715]                           }
[17:02:05.715]                           base::stop(msg)
[17:02:05.715]                         }
[17:02:05.715]                       })
[17:02:05.715]                     }
[17:02:05.715]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.715]                     base::options(mc.cores = 1L)
[17:02:05.715]                   }
[17:02:05.715]                   ...future.strategy.old <- future::plan("list")
[17:02:05.715]                   options(future.plan = NULL)
[17:02:05.715]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.715]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.715]                 }
[17:02:05.715]                 ...future.workdir <- getwd()
[17:02:05.715]             }
[17:02:05.715]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.715]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.715]         }
[17:02:05.715]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.715]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.715]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.715]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.715]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.715]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.715]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.715]             base::names(...future.oldOptions))
[17:02:05.715]     }
[17:02:05.715]     if (FALSE) {
[17:02:05.715]     }
[17:02:05.715]     else {
[17:02:05.715]         if (TRUE) {
[17:02:05.715]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.715]                 open = "w")
[17:02:05.715]         }
[17:02:05.715]         else {
[17:02:05.715]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.715]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.715]         }
[17:02:05.715]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.715]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.715]             base::sink(type = "output", split = FALSE)
[17:02:05.715]             base::close(...future.stdout)
[17:02:05.715]         }, add = TRUE)
[17:02:05.715]     }
[17:02:05.715]     ...future.frame <- base::sys.nframe()
[17:02:05.715]     ...future.conditions <- base::list()
[17:02:05.715]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.715]     if (FALSE) {
[17:02:05.715]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.715]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.715]     }
[17:02:05.715]     ...future.result <- base::tryCatch({
[17:02:05.715]         base::withCallingHandlers({
[17:02:05.715]             ...future.value <- base::withVisible(base::local({
[17:02:05.715]                 ...future.makeSendCondition <- base::local({
[17:02:05.715]                   sendCondition <- NULL
[17:02:05.715]                   function(frame = 1L) {
[17:02:05.715]                     if (is.function(sendCondition)) 
[17:02:05.715]                       return(sendCondition)
[17:02:05.715]                     ns <- getNamespace("parallel")
[17:02:05.715]                     if (exists("sendData", mode = "function", 
[17:02:05.715]                       envir = ns)) {
[17:02:05.715]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.715]                         envir = ns)
[17:02:05.715]                       envir <- sys.frame(frame)
[17:02:05.715]                       master <- NULL
[17:02:05.715]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.715]                         !identical(envir, emptyenv())) {
[17:02:05.715]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.715]                           inherits = FALSE)) {
[17:02:05.715]                           master <- get("master", mode = "list", 
[17:02:05.715]                             envir = envir, inherits = FALSE)
[17:02:05.715]                           if (inherits(master, c("SOCKnode", 
[17:02:05.715]                             "SOCK0node"))) {
[17:02:05.715]                             sendCondition <<- function(cond) {
[17:02:05.715]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.715]                                 success = TRUE)
[17:02:05.715]                               parallel_sendData(master, data)
[17:02:05.715]                             }
[17:02:05.715]                             return(sendCondition)
[17:02:05.715]                           }
[17:02:05.715]                         }
[17:02:05.715]                         frame <- frame + 1L
[17:02:05.715]                         envir <- sys.frame(frame)
[17:02:05.715]                       }
[17:02:05.715]                     }
[17:02:05.715]                     sendCondition <<- function(cond) NULL
[17:02:05.715]                   }
[17:02:05.715]                 })
[17:02:05.715]                 withCallingHandlers({
[17:02:05.715]                   {
[17:02:05.715]                     do.call(function(...) {
[17:02:05.715]                       fcn <- function() sum(...)
[17:02:05.715]                       fcn()
[17:02:05.715]                     }, args = future.call.arguments)
[17:02:05.715]                   }
[17:02:05.715]                 }, immediateCondition = function(cond) {
[17:02:05.715]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.715]                   sendCondition(cond)
[17:02:05.715]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.715]                   {
[17:02:05.715]                     inherits <- base::inherits
[17:02:05.715]                     invokeRestart <- base::invokeRestart
[17:02:05.715]                     is.null <- base::is.null
[17:02:05.715]                     muffled <- FALSE
[17:02:05.715]                     if (inherits(cond, "message")) {
[17:02:05.715]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.715]                       if (muffled) 
[17:02:05.715]                         invokeRestart("muffleMessage")
[17:02:05.715]                     }
[17:02:05.715]                     else if (inherits(cond, "warning")) {
[17:02:05.715]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.715]                       if (muffled) 
[17:02:05.715]                         invokeRestart("muffleWarning")
[17:02:05.715]                     }
[17:02:05.715]                     else if (inherits(cond, "condition")) {
[17:02:05.715]                       if (!is.null(pattern)) {
[17:02:05.715]                         computeRestarts <- base::computeRestarts
[17:02:05.715]                         grepl <- base::grepl
[17:02:05.715]                         restarts <- computeRestarts(cond)
[17:02:05.715]                         for (restart in restarts) {
[17:02:05.715]                           name <- restart$name
[17:02:05.715]                           if (is.null(name)) 
[17:02:05.715]                             next
[17:02:05.715]                           if (!grepl(pattern, name)) 
[17:02:05.715]                             next
[17:02:05.715]                           invokeRestart(restart)
[17:02:05.715]                           muffled <- TRUE
[17:02:05.715]                           break
[17:02:05.715]                         }
[17:02:05.715]                       }
[17:02:05.715]                     }
[17:02:05.715]                     invisible(muffled)
[17:02:05.715]                   }
[17:02:05.715]                   muffleCondition(cond)
[17:02:05.715]                 })
[17:02:05.715]             }))
[17:02:05.715]             future::FutureResult(value = ...future.value$value, 
[17:02:05.715]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.715]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.715]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.715]                     ...future.globalenv.names))
[17:02:05.715]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.715]         }, condition = base::local({
[17:02:05.715]             c <- base::c
[17:02:05.715]             inherits <- base::inherits
[17:02:05.715]             invokeRestart <- base::invokeRestart
[17:02:05.715]             length <- base::length
[17:02:05.715]             list <- base::list
[17:02:05.715]             seq.int <- base::seq.int
[17:02:05.715]             signalCondition <- base::signalCondition
[17:02:05.715]             sys.calls <- base::sys.calls
[17:02:05.715]             `[[` <- base::`[[`
[17:02:05.715]             `+` <- base::`+`
[17:02:05.715]             `<<-` <- base::`<<-`
[17:02:05.715]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.715]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.715]                   3L)]
[17:02:05.715]             }
[17:02:05.715]             function(cond) {
[17:02:05.715]                 is_error <- inherits(cond, "error")
[17:02:05.715]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.715]                   NULL)
[17:02:05.715]                 if (is_error) {
[17:02:05.715]                   sessionInformation <- function() {
[17:02:05.715]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.715]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.715]                       search = base::search(), system = base::Sys.info())
[17:02:05.715]                   }
[17:02:05.715]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.715]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.715]                     cond$call), session = sessionInformation(), 
[17:02:05.715]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.715]                   signalCondition(cond)
[17:02:05.715]                 }
[17:02:05.715]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.715]                 "immediateCondition"))) {
[17:02:05.715]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.715]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.715]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.715]                   if (TRUE && !signal) {
[17:02:05.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.715]                     {
[17:02:05.715]                       inherits <- base::inherits
[17:02:05.715]                       invokeRestart <- base::invokeRestart
[17:02:05.715]                       is.null <- base::is.null
[17:02:05.715]                       muffled <- FALSE
[17:02:05.715]                       if (inherits(cond, "message")) {
[17:02:05.715]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.715]                         if (muffled) 
[17:02:05.715]                           invokeRestart("muffleMessage")
[17:02:05.715]                       }
[17:02:05.715]                       else if (inherits(cond, "warning")) {
[17:02:05.715]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.715]                         if (muffled) 
[17:02:05.715]                           invokeRestart("muffleWarning")
[17:02:05.715]                       }
[17:02:05.715]                       else if (inherits(cond, "condition")) {
[17:02:05.715]                         if (!is.null(pattern)) {
[17:02:05.715]                           computeRestarts <- base::computeRestarts
[17:02:05.715]                           grepl <- base::grepl
[17:02:05.715]                           restarts <- computeRestarts(cond)
[17:02:05.715]                           for (restart in restarts) {
[17:02:05.715]                             name <- restart$name
[17:02:05.715]                             if (is.null(name)) 
[17:02:05.715]                               next
[17:02:05.715]                             if (!grepl(pattern, name)) 
[17:02:05.715]                               next
[17:02:05.715]                             invokeRestart(restart)
[17:02:05.715]                             muffled <- TRUE
[17:02:05.715]                             break
[17:02:05.715]                           }
[17:02:05.715]                         }
[17:02:05.715]                       }
[17:02:05.715]                       invisible(muffled)
[17:02:05.715]                     }
[17:02:05.715]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.715]                   }
[17:02:05.715]                 }
[17:02:05.715]                 else {
[17:02:05.715]                   if (TRUE) {
[17:02:05.715]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.715]                     {
[17:02:05.715]                       inherits <- base::inherits
[17:02:05.715]                       invokeRestart <- base::invokeRestart
[17:02:05.715]                       is.null <- base::is.null
[17:02:05.715]                       muffled <- FALSE
[17:02:05.715]                       if (inherits(cond, "message")) {
[17:02:05.715]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.715]                         if (muffled) 
[17:02:05.715]                           invokeRestart("muffleMessage")
[17:02:05.715]                       }
[17:02:05.715]                       else if (inherits(cond, "warning")) {
[17:02:05.715]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.715]                         if (muffled) 
[17:02:05.715]                           invokeRestart("muffleWarning")
[17:02:05.715]                       }
[17:02:05.715]                       else if (inherits(cond, "condition")) {
[17:02:05.715]                         if (!is.null(pattern)) {
[17:02:05.715]                           computeRestarts <- base::computeRestarts
[17:02:05.715]                           grepl <- base::grepl
[17:02:05.715]                           restarts <- computeRestarts(cond)
[17:02:05.715]                           for (restart in restarts) {
[17:02:05.715]                             name <- restart$name
[17:02:05.715]                             if (is.null(name)) 
[17:02:05.715]                               next
[17:02:05.715]                             if (!grepl(pattern, name)) 
[17:02:05.715]                               next
[17:02:05.715]                             invokeRestart(restart)
[17:02:05.715]                             muffled <- TRUE
[17:02:05.715]                             break
[17:02:05.715]                           }
[17:02:05.715]                         }
[17:02:05.715]                       }
[17:02:05.715]                       invisible(muffled)
[17:02:05.715]                     }
[17:02:05.715]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.715]                   }
[17:02:05.715]                 }
[17:02:05.715]             }
[17:02:05.715]         }))
[17:02:05.715]     }, error = function(ex) {
[17:02:05.715]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.715]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.715]                 ...future.rng), started = ...future.startTime, 
[17:02:05.715]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.715]             version = "1.8"), class = "FutureResult")
[17:02:05.715]     }, finally = {
[17:02:05.715]         if (!identical(...future.workdir, getwd())) 
[17:02:05.715]             setwd(...future.workdir)
[17:02:05.715]         {
[17:02:05.715]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.715]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.715]             }
[17:02:05.715]             base::options(...future.oldOptions)
[17:02:05.715]             if (.Platform$OS.type == "windows") {
[17:02:05.715]                 old_names <- names(...future.oldEnvVars)
[17:02:05.715]                 envs <- base::Sys.getenv()
[17:02:05.715]                 names <- names(envs)
[17:02:05.715]                 common <- intersect(names, old_names)
[17:02:05.715]                 added <- setdiff(names, old_names)
[17:02:05.715]                 removed <- setdiff(old_names, names)
[17:02:05.715]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.715]                   envs[common]]
[17:02:05.715]                 NAMES <- toupper(changed)
[17:02:05.715]                 args <- list()
[17:02:05.715]                 for (kk in seq_along(NAMES)) {
[17:02:05.715]                   name <- changed[[kk]]
[17:02:05.715]                   NAME <- NAMES[[kk]]
[17:02:05.715]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.715]                     next
[17:02:05.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.715]                 }
[17:02:05.715]                 NAMES <- toupper(added)
[17:02:05.715]                 for (kk in seq_along(NAMES)) {
[17:02:05.715]                   name <- added[[kk]]
[17:02:05.715]                   NAME <- NAMES[[kk]]
[17:02:05.715]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.715]                     next
[17:02:05.715]                   args[[name]] <- ""
[17:02:05.715]                 }
[17:02:05.715]                 NAMES <- toupper(removed)
[17:02:05.715]                 for (kk in seq_along(NAMES)) {
[17:02:05.715]                   name <- removed[[kk]]
[17:02:05.715]                   NAME <- NAMES[[kk]]
[17:02:05.715]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.715]                     next
[17:02:05.715]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.715]                 }
[17:02:05.715]                 if (length(args) > 0) 
[17:02:05.715]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.715]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.715]             }
[17:02:05.715]             else {
[17:02:05.715]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.715]             }
[17:02:05.715]             {
[17:02:05.715]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.715]                   0L) {
[17:02:05.715]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.715]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.715]                   base::options(opts)
[17:02:05.715]                 }
[17:02:05.715]                 {
[17:02:05.715]                   {
[17:02:05.715]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.715]                     NULL
[17:02:05.715]                   }
[17:02:05.715]                   options(future.plan = NULL)
[17:02:05.715]                   if (is.na(NA_character_)) 
[17:02:05.715]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.715]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.715]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.715]                     .init = FALSE)
[17:02:05.715]                 }
[17:02:05.715]             }
[17:02:05.715]         }
[17:02:05.715]     })
[17:02:05.715]     if (TRUE) {
[17:02:05.715]         base::sink(type = "output", split = FALSE)
[17:02:05.715]         if (TRUE) {
[17:02:05.715]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.715]         }
[17:02:05.715]         else {
[17:02:05.715]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.715]         }
[17:02:05.715]         base::close(...future.stdout)
[17:02:05.715]         ...future.stdout <- NULL
[17:02:05.715]     }
[17:02:05.715]     ...future.result$conditions <- ...future.conditions
[17:02:05.715]     ...future.result$finished <- base::Sys.time()
[17:02:05.715]     ...future.result
[17:02:05.715] }
[17:02:05.718] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[17:02:05.718] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[17:02:05.718] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[17:02:05.718] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[17:02:05.719] MultisessionFuture started
[17:02:05.719] - Launch lazy future ... done
[17:02:05.719] run() for ‘MultisessionFuture’ ... done
[17:02:05.719] result() for ClusterFuture ...
[17:02:05.719] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.719] - Validating connection of MultisessionFuture
[17:02:05.720] - received message: FutureResult
[17:02:05.721] - Received FutureResult
[17:02:05.721] - Erased future from FutureRegistry
[17:02:05.721] result() for ClusterFuture ...
[17:02:05.721] - result already collected: FutureResult
[17:02:05.721] result() for ClusterFuture ... done
[17:02:05.721] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.721] result() for ClusterFuture ... done
[17:02:05.721] result() for ClusterFuture ...
[17:02:05.721] - result already collected: FutureResult
[17:02:05.721] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5572d06cecc0>
Using '...' in a formula
[17:02:05.722] getGlobalsAndPackages() ...
[17:02:05.722] Searching for globals...
[17:02:05.725] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[17:02:05.725] Searching for globals ... DONE
[17:02:05.725] Resolving globals: FALSE
[17:02:05.725] Tweak future expression to call with '...' arguments ...
[17:02:05.725] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[17:02:05.726] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[17:02:05.726] - globals: [3] ‘fcn’, ‘x’, ‘y’
[17:02:05.726] 
[17:02:05.726] getGlobalsAndPackages() ... DONE
[17:02:05.726] run() for ‘Future’ ...
[17:02:05.727] - state: ‘created’
[17:02:05.727] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:05.741] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:05.741] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:05.741]   - Field: ‘node’
[17:02:05.741]   - Field: ‘label’
[17:02:05.741]   - Field: ‘local’
[17:02:05.741]   - Field: ‘owner’
[17:02:05.741]   - Field: ‘envir’
[17:02:05.741]   - Field: ‘workers’
[17:02:05.741]   - Field: ‘packages’
[17:02:05.742]   - Field: ‘gc’
[17:02:05.742]   - Field: ‘conditions’
[17:02:05.742]   - Field: ‘persistent’
[17:02:05.742]   - Field: ‘expr’
[17:02:05.742]   - Field: ‘uuid’
[17:02:05.742]   - Field: ‘seed’
[17:02:05.742]   - Field: ‘version’
[17:02:05.742]   - Field: ‘result’
[17:02:05.742]   - Field: ‘asynchronous’
[17:02:05.742]   - Field: ‘calls’
[17:02:05.742]   - Field: ‘globals’
[17:02:05.743]   - Field: ‘stdout’
[17:02:05.743]   - Field: ‘earlySignal’
[17:02:05.743]   - Field: ‘lazy’
[17:02:05.743]   - Field: ‘state’
[17:02:05.743] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:05.743] - Launch lazy future ...
[17:02:05.743] Packages needed by the future expression (n = 0): <none>
[17:02:05.743] Packages needed by future strategies (n = 0): <none>
[17:02:05.744] {
[17:02:05.744]     {
[17:02:05.744]         {
[17:02:05.744]             ...future.startTime <- base::Sys.time()
[17:02:05.744]             {
[17:02:05.744]                 {
[17:02:05.744]                   {
[17:02:05.744]                     {
[17:02:05.744]                       base::local({
[17:02:05.744]                         has_future <- base::requireNamespace("future", 
[17:02:05.744]                           quietly = TRUE)
[17:02:05.744]                         if (has_future) {
[17:02:05.744]                           ns <- base::getNamespace("future")
[17:02:05.744]                           version <- ns[[".package"]][["version"]]
[17:02:05.744]                           if (is.null(version)) 
[17:02:05.744]                             version <- utils::packageVersion("future")
[17:02:05.744]                         }
[17:02:05.744]                         else {
[17:02:05.744]                           version <- NULL
[17:02:05.744]                         }
[17:02:05.744]                         if (!has_future || version < "1.8.0") {
[17:02:05.744]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:05.744]                             "", base::R.version$version.string), 
[17:02:05.744]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:05.744]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:05.744]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:05.744]                               "release", "version")], collapse = " "), 
[17:02:05.744]                             hostname = base::Sys.info()[["nodename"]])
[17:02:05.744]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:05.744]                             info)
[17:02:05.744]                           info <- base::paste(info, collapse = "; ")
[17:02:05.744]                           if (!has_future) {
[17:02:05.744]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:05.744]                               info)
[17:02:05.744]                           }
[17:02:05.744]                           else {
[17:02:05.744]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:05.744]                               info, version)
[17:02:05.744]                           }
[17:02:05.744]                           base::stop(msg)
[17:02:05.744]                         }
[17:02:05.744]                       })
[17:02:05.744]                     }
[17:02:05.744]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:05.744]                     base::options(mc.cores = 1L)
[17:02:05.744]                   }
[17:02:05.744]                   ...future.strategy.old <- future::plan("list")
[17:02:05.744]                   options(future.plan = NULL)
[17:02:05.744]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.744]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:05.744]                 }
[17:02:05.744]                 ...future.workdir <- getwd()
[17:02:05.744]             }
[17:02:05.744]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:05.744]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:05.744]         }
[17:02:05.744]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:05.744]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:05.744]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:05.744]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:05.744]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:05.744]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:05.744]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:05.744]             base::names(...future.oldOptions))
[17:02:05.744]     }
[17:02:05.744]     if (FALSE) {
[17:02:05.744]     }
[17:02:05.744]     else {
[17:02:05.744]         if (TRUE) {
[17:02:05.744]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:05.744]                 open = "w")
[17:02:05.744]         }
[17:02:05.744]         else {
[17:02:05.744]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:05.744]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:05.744]         }
[17:02:05.744]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:05.744]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:05.744]             base::sink(type = "output", split = FALSE)
[17:02:05.744]             base::close(...future.stdout)
[17:02:05.744]         }, add = TRUE)
[17:02:05.744]     }
[17:02:05.744]     ...future.frame <- base::sys.nframe()
[17:02:05.744]     ...future.conditions <- base::list()
[17:02:05.744]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:05.744]     if (FALSE) {
[17:02:05.744]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:05.744]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:05.744]     }
[17:02:05.744]     ...future.result <- base::tryCatch({
[17:02:05.744]         base::withCallingHandlers({
[17:02:05.744]             ...future.value <- base::withVisible(base::local({
[17:02:05.744]                 ...future.makeSendCondition <- base::local({
[17:02:05.744]                   sendCondition <- NULL
[17:02:05.744]                   function(frame = 1L) {
[17:02:05.744]                     if (is.function(sendCondition)) 
[17:02:05.744]                       return(sendCondition)
[17:02:05.744]                     ns <- getNamespace("parallel")
[17:02:05.744]                     if (exists("sendData", mode = "function", 
[17:02:05.744]                       envir = ns)) {
[17:02:05.744]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:05.744]                         envir = ns)
[17:02:05.744]                       envir <- sys.frame(frame)
[17:02:05.744]                       master <- NULL
[17:02:05.744]                       while (!identical(envir, .GlobalEnv) && 
[17:02:05.744]                         !identical(envir, emptyenv())) {
[17:02:05.744]                         if (exists("master", mode = "list", envir = envir, 
[17:02:05.744]                           inherits = FALSE)) {
[17:02:05.744]                           master <- get("master", mode = "list", 
[17:02:05.744]                             envir = envir, inherits = FALSE)
[17:02:05.744]                           if (inherits(master, c("SOCKnode", 
[17:02:05.744]                             "SOCK0node"))) {
[17:02:05.744]                             sendCondition <<- function(cond) {
[17:02:05.744]                               data <- list(type = "VALUE", value = cond, 
[17:02:05.744]                                 success = TRUE)
[17:02:05.744]                               parallel_sendData(master, data)
[17:02:05.744]                             }
[17:02:05.744]                             return(sendCondition)
[17:02:05.744]                           }
[17:02:05.744]                         }
[17:02:05.744]                         frame <- frame + 1L
[17:02:05.744]                         envir <- sys.frame(frame)
[17:02:05.744]                       }
[17:02:05.744]                     }
[17:02:05.744]                     sendCondition <<- function(cond) NULL
[17:02:05.744]                   }
[17:02:05.744]                 })
[17:02:05.744]                 withCallingHandlers({
[17:02:05.744]                   fcn(x, y)
[17:02:05.744]                 }, immediateCondition = function(cond) {
[17:02:05.744]                   sendCondition <- ...future.makeSendCondition()
[17:02:05.744]                   sendCondition(cond)
[17:02:05.744]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.744]                   {
[17:02:05.744]                     inherits <- base::inherits
[17:02:05.744]                     invokeRestart <- base::invokeRestart
[17:02:05.744]                     is.null <- base::is.null
[17:02:05.744]                     muffled <- FALSE
[17:02:05.744]                     if (inherits(cond, "message")) {
[17:02:05.744]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:05.744]                       if (muffled) 
[17:02:05.744]                         invokeRestart("muffleMessage")
[17:02:05.744]                     }
[17:02:05.744]                     else if (inherits(cond, "warning")) {
[17:02:05.744]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:05.744]                       if (muffled) 
[17:02:05.744]                         invokeRestart("muffleWarning")
[17:02:05.744]                     }
[17:02:05.744]                     else if (inherits(cond, "condition")) {
[17:02:05.744]                       if (!is.null(pattern)) {
[17:02:05.744]                         computeRestarts <- base::computeRestarts
[17:02:05.744]                         grepl <- base::grepl
[17:02:05.744]                         restarts <- computeRestarts(cond)
[17:02:05.744]                         for (restart in restarts) {
[17:02:05.744]                           name <- restart$name
[17:02:05.744]                           if (is.null(name)) 
[17:02:05.744]                             next
[17:02:05.744]                           if (!grepl(pattern, name)) 
[17:02:05.744]                             next
[17:02:05.744]                           invokeRestart(restart)
[17:02:05.744]                           muffled <- TRUE
[17:02:05.744]                           break
[17:02:05.744]                         }
[17:02:05.744]                       }
[17:02:05.744]                     }
[17:02:05.744]                     invisible(muffled)
[17:02:05.744]                   }
[17:02:05.744]                   muffleCondition(cond)
[17:02:05.744]                 })
[17:02:05.744]             }))
[17:02:05.744]             future::FutureResult(value = ...future.value$value, 
[17:02:05.744]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.744]                   ...future.rng), globalenv = if (FALSE) 
[17:02:05.744]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:05.744]                     ...future.globalenv.names))
[17:02:05.744]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:05.744]         }, condition = base::local({
[17:02:05.744]             c <- base::c
[17:02:05.744]             inherits <- base::inherits
[17:02:05.744]             invokeRestart <- base::invokeRestart
[17:02:05.744]             length <- base::length
[17:02:05.744]             list <- base::list
[17:02:05.744]             seq.int <- base::seq.int
[17:02:05.744]             signalCondition <- base::signalCondition
[17:02:05.744]             sys.calls <- base::sys.calls
[17:02:05.744]             `[[` <- base::`[[`
[17:02:05.744]             `+` <- base::`+`
[17:02:05.744]             `<<-` <- base::`<<-`
[17:02:05.744]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:05.744]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:05.744]                   3L)]
[17:02:05.744]             }
[17:02:05.744]             function(cond) {
[17:02:05.744]                 is_error <- inherits(cond, "error")
[17:02:05.744]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:05.744]                   NULL)
[17:02:05.744]                 if (is_error) {
[17:02:05.744]                   sessionInformation <- function() {
[17:02:05.744]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:05.744]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:05.744]                       search = base::search(), system = base::Sys.info())
[17:02:05.744]                   }
[17:02:05.744]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.744]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:05.744]                     cond$call), session = sessionInformation(), 
[17:02:05.744]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:05.744]                   signalCondition(cond)
[17:02:05.744]                 }
[17:02:05.744]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:05.744]                 "immediateCondition"))) {
[17:02:05.744]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:05.744]                   ...future.conditions[[length(...future.conditions) + 
[17:02:05.744]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:05.744]                   if (TRUE && !signal) {
[17:02:05.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.744]                     {
[17:02:05.744]                       inherits <- base::inherits
[17:02:05.744]                       invokeRestart <- base::invokeRestart
[17:02:05.744]                       is.null <- base::is.null
[17:02:05.744]                       muffled <- FALSE
[17:02:05.744]                       if (inherits(cond, "message")) {
[17:02:05.744]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.744]                         if (muffled) 
[17:02:05.744]                           invokeRestart("muffleMessage")
[17:02:05.744]                       }
[17:02:05.744]                       else if (inherits(cond, "warning")) {
[17:02:05.744]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.744]                         if (muffled) 
[17:02:05.744]                           invokeRestart("muffleWarning")
[17:02:05.744]                       }
[17:02:05.744]                       else if (inherits(cond, "condition")) {
[17:02:05.744]                         if (!is.null(pattern)) {
[17:02:05.744]                           computeRestarts <- base::computeRestarts
[17:02:05.744]                           grepl <- base::grepl
[17:02:05.744]                           restarts <- computeRestarts(cond)
[17:02:05.744]                           for (restart in restarts) {
[17:02:05.744]                             name <- restart$name
[17:02:05.744]                             if (is.null(name)) 
[17:02:05.744]                               next
[17:02:05.744]                             if (!grepl(pattern, name)) 
[17:02:05.744]                               next
[17:02:05.744]                             invokeRestart(restart)
[17:02:05.744]                             muffled <- TRUE
[17:02:05.744]                             break
[17:02:05.744]                           }
[17:02:05.744]                         }
[17:02:05.744]                       }
[17:02:05.744]                       invisible(muffled)
[17:02:05.744]                     }
[17:02:05.744]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.744]                   }
[17:02:05.744]                 }
[17:02:05.744]                 else {
[17:02:05.744]                   if (TRUE) {
[17:02:05.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:05.744]                     {
[17:02:05.744]                       inherits <- base::inherits
[17:02:05.744]                       invokeRestart <- base::invokeRestart
[17:02:05.744]                       is.null <- base::is.null
[17:02:05.744]                       muffled <- FALSE
[17:02:05.744]                       if (inherits(cond, "message")) {
[17:02:05.744]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:05.744]                         if (muffled) 
[17:02:05.744]                           invokeRestart("muffleMessage")
[17:02:05.744]                       }
[17:02:05.744]                       else if (inherits(cond, "warning")) {
[17:02:05.744]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:05.744]                         if (muffled) 
[17:02:05.744]                           invokeRestart("muffleWarning")
[17:02:05.744]                       }
[17:02:05.744]                       else if (inherits(cond, "condition")) {
[17:02:05.744]                         if (!is.null(pattern)) {
[17:02:05.744]                           computeRestarts <- base::computeRestarts
[17:02:05.744]                           grepl <- base::grepl
[17:02:05.744]                           restarts <- computeRestarts(cond)
[17:02:05.744]                           for (restart in restarts) {
[17:02:05.744]                             name <- restart$name
[17:02:05.744]                             if (is.null(name)) 
[17:02:05.744]                               next
[17:02:05.744]                             if (!grepl(pattern, name)) 
[17:02:05.744]                               next
[17:02:05.744]                             invokeRestart(restart)
[17:02:05.744]                             muffled <- TRUE
[17:02:05.744]                             break
[17:02:05.744]                           }
[17:02:05.744]                         }
[17:02:05.744]                       }
[17:02:05.744]                       invisible(muffled)
[17:02:05.744]                     }
[17:02:05.744]                     muffleCondition(cond, pattern = "^muffle")
[17:02:05.744]                   }
[17:02:05.744]                 }
[17:02:05.744]             }
[17:02:05.744]         }))
[17:02:05.744]     }, error = function(ex) {
[17:02:05.744]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:05.744]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:05.744]                 ...future.rng), started = ...future.startTime, 
[17:02:05.744]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:05.744]             version = "1.8"), class = "FutureResult")
[17:02:05.744]     }, finally = {
[17:02:05.744]         if (!identical(...future.workdir, getwd())) 
[17:02:05.744]             setwd(...future.workdir)
[17:02:05.744]         {
[17:02:05.744]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:05.744]                 ...future.oldOptions$nwarnings <- NULL
[17:02:05.744]             }
[17:02:05.744]             base::options(...future.oldOptions)
[17:02:05.744]             if (.Platform$OS.type == "windows") {
[17:02:05.744]                 old_names <- names(...future.oldEnvVars)
[17:02:05.744]                 envs <- base::Sys.getenv()
[17:02:05.744]                 names <- names(envs)
[17:02:05.744]                 common <- intersect(names, old_names)
[17:02:05.744]                 added <- setdiff(names, old_names)
[17:02:05.744]                 removed <- setdiff(old_names, names)
[17:02:05.744]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:05.744]                   envs[common]]
[17:02:05.744]                 NAMES <- toupper(changed)
[17:02:05.744]                 args <- list()
[17:02:05.744]                 for (kk in seq_along(NAMES)) {
[17:02:05.744]                   name <- changed[[kk]]
[17:02:05.744]                   NAME <- NAMES[[kk]]
[17:02:05.744]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.744]                     next
[17:02:05.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.744]                 }
[17:02:05.744]                 NAMES <- toupper(added)
[17:02:05.744]                 for (kk in seq_along(NAMES)) {
[17:02:05.744]                   name <- added[[kk]]
[17:02:05.744]                   NAME <- NAMES[[kk]]
[17:02:05.744]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.744]                     next
[17:02:05.744]                   args[[name]] <- ""
[17:02:05.744]                 }
[17:02:05.744]                 NAMES <- toupper(removed)
[17:02:05.744]                 for (kk in seq_along(NAMES)) {
[17:02:05.744]                   name <- removed[[kk]]
[17:02:05.744]                   NAME <- NAMES[[kk]]
[17:02:05.744]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:05.744]                     next
[17:02:05.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:05.744]                 }
[17:02:05.744]                 if (length(args) > 0) 
[17:02:05.744]                   base::do.call(base::Sys.setenv, args = args)
[17:02:05.744]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:05.744]             }
[17:02:05.744]             else {
[17:02:05.744]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:05.744]             }
[17:02:05.744]             {
[17:02:05.744]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:05.744]                   0L) {
[17:02:05.744]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:05.744]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:05.744]                   base::options(opts)
[17:02:05.744]                 }
[17:02:05.744]                 {
[17:02:05.744]                   {
[17:02:05.744]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:05.744]                     NULL
[17:02:05.744]                   }
[17:02:05.744]                   options(future.plan = NULL)
[17:02:05.744]                   if (is.na(NA_character_)) 
[17:02:05.744]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:05.744]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:05.744]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:05.744]                     .init = FALSE)
[17:02:05.744]                 }
[17:02:05.744]             }
[17:02:05.744]         }
[17:02:05.744]     })
[17:02:05.744]     if (TRUE) {
[17:02:05.744]         base::sink(type = "output", split = FALSE)
[17:02:05.744]         if (TRUE) {
[17:02:05.744]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:05.744]         }
[17:02:05.744]         else {
[17:02:05.744]             ...future.result["stdout"] <- base::list(NULL)
[17:02:05.744]         }
[17:02:05.744]         base::close(...future.stdout)
[17:02:05.744]         ...future.stdout <- NULL
[17:02:05.744]     }
[17:02:05.744]     ...future.result$conditions <- ...future.conditions
[17:02:05.744]     ...future.result$finished <- base::Sys.time()
[17:02:05.744]     ...future.result
[17:02:05.744] }
[17:02:05.747] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[17:02:05.747] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[17:02:05.747] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[17:02:05.747] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:02:05.748] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.748] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[17:02:05.748] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[17:02:05.748] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[17:02:05.749] MultisessionFuture started
[17:02:05.749] - Launch lazy future ... done
[17:02:05.749] run() for ‘MultisessionFuture’ ... done
[17:02:05.749] result() for ClusterFuture ...
[17:02:05.749] receiveMessageFromWorker() for ClusterFuture ...
[17:02:05.749] - Validating connection of MultisessionFuture
[17:02:05.750] - received message: FutureResult
[17:02:05.750] - Received FutureResult
[17:02:05.751] - Erased future from FutureRegistry
[17:02:05.751] result() for ClusterFuture ...
[17:02:05.751] - result already collected: FutureResult
[17:02:05.751] result() for ClusterFuture ... done
[17:02:05.751] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:05.751] result() for ClusterFuture ... done
[17:02:05.751] result() for ClusterFuture ...
[17:02:05.751] - result already collected: FutureResult
[17:02:05.751] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[17:02:05.752] plan(): Setting new future strategy stack:
[17:02:05.752] List of future strategies:
[17:02:05.752] 1. FutureStrategy:
[17:02:05.752]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:05.752]    - tweaked: FALSE
[17:02:05.752]    - call: future::plan(oplan)
[17:02:05.753] plan(): nbrOfWorkers() = 1
> 
