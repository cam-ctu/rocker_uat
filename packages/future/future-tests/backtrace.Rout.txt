
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:01:42.737] plan(): Setting new future strategy stack:
[17:01:42.738] List of future strategies:
[17:01:42.738] 1. sequential:
[17:01:42.738]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.738]    - tweaked: FALSE
[17:01:42.738]    - call: future::plan("sequential")
[17:01:42.749] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[17:01:42.764] getGlobalsAndPackages() ...
[17:01:42.764] Searching for globals...
[17:01:42.770] - globals found: [2] ‘{’, ‘stop’
[17:01:42.771] Searching for globals ... DONE
[17:01:42.771] Resolving globals: FALSE
[17:01:42.771] 
[17:01:42.771] 
[17:01:42.771] getGlobalsAndPackages() ... DONE
[17:01:42.772] run() for ‘Future’ ...
[17:01:42.772] - state: ‘created’
[17:01:42.772] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.773] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.773] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.773]   - Field: ‘label’
[17:01:42.773]   - Field: ‘local’
[17:01:42.773]   - Field: ‘owner’
[17:01:42.773]   - Field: ‘envir’
[17:01:42.773]   - Field: ‘packages’
[17:01:42.773]   - Field: ‘gc’
[17:01:42.774]   - Field: ‘conditions’
[17:01:42.774]   - Field: ‘expr’
[17:01:42.774]   - Field: ‘uuid’
[17:01:42.774]   - Field: ‘seed’
[17:01:42.774]   - Field: ‘version’
[17:01:42.774]   - Field: ‘result’
[17:01:42.774]   - Field: ‘asynchronous’
[17:01:42.774]   - Field: ‘calls’
[17:01:42.774]   - Field: ‘globals’
[17:01:42.774]   - Field: ‘stdout’
[17:01:42.774]   - Field: ‘earlySignal’
[17:01:42.774]   - Field: ‘lazy’
[17:01:42.775]   - Field: ‘state’
[17:01:42.775] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.775] - Launch lazy future ...
[17:01:42.776] Packages needed by the future expression (n = 0): <none>
[17:01:42.776] Packages needed by future strategies (n = 0): <none>
[17:01:42.776] {
[17:01:42.776]     {
[17:01:42.776]         {
[17:01:42.776]             ...future.startTime <- base::Sys.time()
[17:01:42.776]             {
[17:01:42.776]                 {
[17:01:42.776]                   {
[17:01:42.776]                     base::local({
[17:01:42.776]                       has_future <- base::requireNamespace("future", 
[17:01:42.776]                         quietly = TRUE)
[17:01:42.776]                       if (has_future) {
[17:01:42.776]                         ns <- base::getNamespace("future")
[17:01:42.776]                         version <- ns[[".package"]][["version"]]
[17:01:42.776]                         if (is.null(version)) 
[17:01:42.776]                           version <- utils::packageVersion("future")
[17:01:42.776]                       }
[17:01:42.776]                       else {
[17:01:42.776]                         version <- NULL
[17:01:42.776]                       }
[17:01:42.776]                       if (!has_future || version < "1.8.0") {
[17:01:42.776]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.776]                           "", base::R.version$version.string), 
[17:01:42.776]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.776]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.776]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.776]                             "release", "version")], collapse = " "), 
[17:01:42.776]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.776]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.776]                           info)
[17:01:42.776]                         info <- base::paste(info, collapse = "; ")
[17:01:42.776]                         if (!has_future) {
[17:01:42.776]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.776]                             info)
[17:01:42.776]                         }
[17:01:42.776]                         else {
[17:01:42.776]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.776]                             info, version)
[17:01:42.776]                         }
[17:01:42.776]                         base::stop(msg)
[17:01:42.776]                       }
[17:01:42.776]                     })
[17:01:42.776]                   }
[17:01:42.776]                   ...future.strategy.old <- future::plan("list")
[17:01:42.776]                   options(future.plan = NULL)
[17:01:42.776]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.776]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.776]                 }
[17:01:42.776]                 ...future.workdir <- getwd()
[17:01:42.776]             }
[17:01:42.776]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.776]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.776]         }
[17:01:42.776]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.776]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.776]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.776]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.776]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.776]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.776]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.776]             base::names(...future.oldOptions))
[17:01:42.776]     }
[17:01:42.776]     if (FALSE) {
[17:01:42.776]     }
[17:01:42.776]     else {
[17:01:42.776]         if (TRUE) {
[17:01:42.776]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.776]                 open = "w")
[17:01:42.776]         }
[17:01:42.776]         else {
[17:01:42.776]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.776]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.776]         }
[17:01:42.776]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.776]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.776]             base::sink(type = "output", split = FALSE)
[17:01:42.776]             base::close(...future.stdout)
[17:01:42.776]         }, add = TRUE)
[17:01:42.776]     }
[17:01:42.776]     ...future.frame <- base::sys.nframe()
[17:01:42.776]     ...future.conditions <- base::list()
[17:01:42.776]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.776]     if (FALSE) {
[17:01:42.776]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.776]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.776]     }
[17:01:42.776]     ...future.result <- base::tryCatch({
[17:01:42.776]         base::withCallingHandlers({
[17:01:42.776]             ...future.value <- base::withVisible(base::local({
[17:01:42.776]                 42L
[17:01:42.776]                 stop("Woops")
[17:01:42.776]             }))
[17:01:42.776]             future::FutureResult(value = ...future.value$value, 
[17:01:42.776]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.776]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.776]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.776]                     ...future.globalenv.names))
[17:01:42.776]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.776]         }, condition = base::local({
[17:01:42.776]             c <- base::c
[17:01:42.776]             inherits <- base::inherits
[17:01:42.776]             invokeRestart <- base::invokeRestart
[17:01:42.776]             length <- base::length
[17:01:42.776]             list <- base::list
[17:01:42.776]             seq.int <- base::seq.int
[17:01:42.776]             signalCondition <- base::signalCondition
[17:01:42.776]             sys.calls <- base::sys.calls
[17:01:42.776]             `[[` <- base::`[[`
[17:01:42.776]             `+` <- base::`+`
[17:01:42.776]             `<<-` <- base::`<<-`
[17:01:42.776]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.776]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.776]                   3L)]
[17:01:42.776]             }
[17:01:42.776]             function(cond) {
[17:01:42.776]                 is_error <- inherits(cond, "error")
[17:01:42.776]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.776]                   NULL)
[17:01:42.776]                 if (is_error) {
[17:01:42.776]                   sessionInformation <- function() {
[17:01:42.776]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.776]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.776]                       search = base::search(), system = base::Sys.info())
[17:01:42.776]                   }
[17:01:42.776]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.776]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.776]                     cond$call), session = sessionInformation(), 
[17:01:42.776]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.776]                   signalCondition(cond)
[17:01:42.776]                 }
[17:01:42.776]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.776]                 "immediateCondition"))) {
[17:01:42.776]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.776]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.776]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.776]                   if (TRUE && !signal) {
[17:01:42.776]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.776]                     {
[17:01:42.776]                       inherits <- base::inherits
[17:01:42.776]                       invokeRestart <- base::invokeRestart
[17:01:42.776]                       is.null <- base::is.null
[17:01:42.776]                       muffled <- FALSE
[17:01:42.776]                       if (inherits(cond, "message")) {
[17:01:42.776]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.776]                         if (muffled) 
[17:01:42.776]                           invokeRestart("muffleMessage")
[17:01:42.776]                       }
[17:01:42.776]                       else if (inherits(cond, "warning")) {
[17:01:42.776]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.776]                         if (muffled) 
[17:01:42.776]                           invokeRestart("muffleWarning")
[17:01:42.776]                       }
[17:01:42.776]                       else if (inherits(cond, "condition")) {
[17:01:42.776]                         if (!is.null(pattern)) {
[17:01:42.776]                           computeRestarts <- base::computeRestarts
[17:01:42.776]                           grepl <- base::grepl
[17:01:42.776]                           restarts <- computeRestarts(cond)
[17:01:42.776]                           for (restart in restarts) {
[17:01:42.776]                             name <- restart$name
[17:01:42.776]                             if (is.null(name)) 
[17:01:42.776]                               next
[17:01:42.776]                             if (!grepl(pattern, name)) 
[17:01:42.776]                               next
[17:01:42.776]                             invokeRestart(restart)
[17:01:42.776]                             muffled <- TRUE
[17:01:42.776]                             break
[17:01:42.776]                           }
[17:01:42.776]                         }
[17:01:42.776]                       }
[17:01:42.776]                       invisible(muffled)
[17:01:42.776]                     }
[17:01:42.776]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.776]                   }
[17:01:42.776]                 }
[17:01:42.776]                 else {
[17:01:42.776]                   if (TRUE) {
[17:01:42.776]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.776]                     {
[17:01:42.776]                       inherits <- base::inherits
[17:01:42.776]                       invokeRestart <- base::invokeRestart
[17:01:42.776]                       is.null <- base::is.null
[17:01:42.776]                       muffled <- FALSE
[17:01:42.776]                       if (inherits(cond, "message")) {
[17:01:42.776]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.776]                         if (muffled) 
[17:01:42.776]                           invokeRestart("muffleMessage")
[17:01:42.776]                       }
[17:01:42.776]                       else if (inherits(cond, "warning")) {
[17:01:42.776]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.776]                         if (muffled) 
[17:01:42.776]                           invokeRestart("muffleWarning")
[17:01:42.776]                       }
[17:01:42.776]                       else if (inherits(cond, "condition")) {
[17:01:42.776]                         if (!is.null(pattern)) {
[17:01:42.776]                           computeRestarts <- base::computeRestarts
[17:01:42.776]                           grepl <- base::grepl
[17:01:42.776]                           restarts <- computeRestarts(cond)
[17:01:42.776]                           for (restart in restarts) {
[17:01:42.776]                             name <- restart$name
[17:01:42.776]                             if (is.null(name)) 
[17:01:42.776]                               next
[17:01:42.776]                             if (!grepl(pattern, name)) 
[17:01:42.776]                               next
[17:01:42.776]                             invokeRestart(restart)
[17:01:42.776]                             muffled <- TRUE
[17:01:42.776]                             break
[17:01:42.776]                           }
[17:01:42.776]                         }
[17:01:42.776]                       }
[17:01:42.776]                       invisible(muffled)
[17:01:42.776]                     }
[17:01:42.776]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.776]                   }
[17:01:42.776]                 }
[17:01:42.776]             }
[17:01:42.776]         }))
[17:01:42.776]     }, error = function(ex) {
[17:01:42.776]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.776]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.776]                 ...future.rng), started = ...future.startTime, 
[17:01:42.776]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.776]             version = "1.8"), class = "FutureResult")
[17:01:42.776]     }, finally = {
[17:01:42.776]         if (!identical(...future.workdir, getwd())) 
[17:01:42.776]             setwd(...future.workdir)
[17:01:42.776]         {
[17:01:42.776]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.776]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.776]             }
[17:01:42.776]             base::options(...future.oldOptions)
[17:01:42.776]             if (.Platform$OS.type == "windows") {
[17:01:42.776]                 old_names <- names(...future.oldEnvVars)
[17:01:42.776]                 envs <- base::Sys.getenv()
[17:01:42.776]                 names <- names(envs)
[17:01:42.776]                 common <- intersect(names, old_names)
[17:01:42.776]                 added <- setdiff(names, old_names)
[17:01:42.776]                 removed <- setdiff(old_names, names)
[17:01:42.776]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.776]                   envs[common]]
[17:01:42.776]                 NAMES <- toupper(changed)
[17:01:42.776]                 args <- list()
[17:01:42.776]                 for (kk in seq_along(NAMES)) {
[17:01:42.776]                   name <- changed[[kk]]
[17:01:42.776]                   NAME <- NAMES[[kk]]
[17:01:42.776]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.776]                     next
[17:01:42.776]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.776]                 }
[17:01:42.776]                 NAMES <- toupper(added)
[17:01:42.776]                 for (kk in seq_along(NAMES)) {
[17:01:42.776]                   name <- added[[kk]]
[17:01:42.776]                   NAME <- NAMES[[kk]]
[17:01:42.776]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.776]                     next
[17:01:42.776]                   args[[name]] <- ""
[17:01:42.776]                 }
[17:01:42.776]                 NAMES <- toupper(removed)
[17:01:42.776]                 for (kk in seq_along(NAMES)) {
[17:01:42.776]                   name <- removed[[kk]]
[17:01:42.776]                   NAME <- NAMES[[kk]]
[17:01:42.776]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.776]                     next
[17:01:42.776]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.776]                 }
[17:01:42.776]                 if (length(args) > 0) 
[17:01:42.776]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.776]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.776]             }
[17:01:42.776]             else {
[17:01:42.776]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.776]             }
[17:01:42.776]             {
[17:01:42.776]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.776]                   0L) {
[17:01:42.776]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.776]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.776]                   base::options(opts)
[17:01:42.776]                 }
[17:01:42.776]                 {
[17:01:42.776]                   {
[17:01:42.776]                     NULL
[17:01:42.776]                     RNGkind("Mersenne-Twister")
[17:01:42.776]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.776]                       inherits = FALSE)
[17:01:42.776]                   }
[17:01:42.776]                   options(future.plan = NULL)
[17:01:42.776]                   if (is.na(NA_character_)) 
[17:01:42.776]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.776]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.776]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.776]                     .init = FALSE)
[17:01:42.776]                 }
[17:01:42.776]             }
[17:01:42.776]         }
[17:01:42.776]     })
[17:01:42.776]     if (TRUE) {
[17:01:42.776]         base::sink(type = "output", split = FALSE)
[17:01:42.776]         if (TRUE) {
[17:01:42.776]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.776]         }
[17:01:42.776]         else {
[17:01:42.776]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.776]         }
[17:01:42.776]         base::close(...future.stdout)
[17:01:42.776]         ...future.stdout <- NULL
[17:01:42.776]     }
[17:01:42.776]     ...future.result$conditions <- ...future.conditions
[17:01:42.776]     ...future.result$finished <- base::Sys.time()
[17:01:42.776]     ...future.result
[17:01:42.776] }
[17:01:42.778] plan(): Setting new future strategy stack:
[17:01:42.778] List of future strategies:
[17:01:42.778] 1. sequential:
[17:01:42.778]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.778]    - tweaked: FALSE
[17:01:42.778]    - call: NULL
[17:01:42.779] plan(): nbrOfWorkers() = 1
[17:01:42.780] plan(): Setting new future strategy stack:
[17:01:42.780] List of future strategies:
[17:01:42.780] 1. sequential:
[17:01:42.780]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.780]    - tweaked: FALSE
[17:01:42.780]    - call: future::plan("sequential")
[17:01:42.781] plan(): nbrOfWorkers() = 1
[17:01:42.781] SequentialFuture started (and completed)
[17:01:42.781] signalConditions() ...
[17:01:42.781]  - include = ‘immediateCondition’
[17:01:42.781]  - exclude = 
[17:01:42.781]  - resignal = FALSE
[17:01:42.781]  - Number of conditions: 1
[17:01:42.782] signalConditions() ... done
[17:01:42.782] - Launch lazy future ... done
[17:01:42.782] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:01:42.782] signalConditions() ...
[17:01:42.782]  - include = ‘immediateCondition’
[17:01:42.782]  - exclude = 
[17:01:42.783]  - resignal = FALSE
[17:01:42.783]  - Number of conditions: 1
[17:01:42.783] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[17:01:42.784] resolved() for ‘SequentialFuture’ ...
[17:01:42.784] - state: ‘finished’
[17:01:42.784] - run: TRUE
[17:01:42.784] - result: ‘FutureResult’
[17:01:42.784] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[17:01:42.785] getGlobalsAndPackages() ...
[17:01:42.785] Searching for globals...
[17:01:42.786] - globals found: [2] ‘{’, ‘stop’
[17:01:42.786] Searching for globals ... DONE
[17:01:42.786] Resolving globals: FALSE
[17:01:42.787] 
[17:01:42.787] 
[17:01:42.787] getGlobalsAndPackages() ... DONE
[17:01:42.787] run() for ‘Future’ ...
[17:01:42.787] - state: ‘created’
[17:01:42.787] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.788] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.788] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.788]   - Field: ‘label’
[17:01:42.788]   - Field: ‘local’
[17:01:42.788]   - Field: ‘owner’
[17:01:42.788]   - Field: ‘envir’
[17:01:42.788]   - Field: ‘packages’
[17:01:42.788]   - Field: ‘gc’
[17:01:42.788]   - Field: ‘conditions’
[17:01:42.788]   - Field: ‘expr’
[17:01:42.788]   - Field: ‘uuid’
[17:01:42.789]   - Field: ‘seed’
[17:01:42.789]   - Field: ‘version’
[17:01:42.789]   - Field: ‘result’
[17:01:42.789]   - Field: ‘asynchronous’
[17:01:42.789]   - Field: ‘calls’
[17:01:42.789]   - Field: ‘globals’
[17:01:42.789]   - Field: ‘stdout’
[17:01:42.789]   - Field: ‘earlySignal’
[17:01:42.789]   - Field: ‘lazy’
[17:01:42.789]   - Field: ‘state’
[17:01:42.789] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.790] - Launch lazy future ...
[17:01:42.790] Packages needed by the future expression (n = 0): <none>
[17:01:42.790] Packages needed by future strategies (n = 0): <none>
[17:01:42.790] {
[17:01:42.790]     {
[17:01:42.790]         {
[17:01:42.790]             ...future.startTime <- base::Sys.time()
[17:01:42.790]             {
[17:01:42.790]                 {
[17:01:42.790]                   {
[17:01:42.790]                     base::local({
[17:01:42.790]                       has_future <- base::requireNamespace("future", 
[17:01:42.790]                         quietly = TRUE)
[17:01:42.790]                       if (has_future) {
[17:01:42.790]                         ns <- base::getNamespace("future")
[17:01:42.790]                         version <- ns[[".package"]][["version"]]
[17:01:42.790]                         if (is.null(version)) 
[17:01:42.790]                           version <- utils::packageVersion("future")
[17:01:42.790]                       }
[17:01:42.790]                       else {
[17:01:42.790]                         version <- NULL
[17:01:42.790]                       }
[17:01:42.790]                       if (!has_future || version < "1.8.0") {
[17:01:42.790]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.790]                           "", base::R.version$version.string), 
[17:01:42.790]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.790]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.790]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.790]                             "release", "version")], collapse = " "), 
[17:01:42.790]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.790]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.790]                           info)
[17:01:42.790]                         info <- base::paste(info, collapse = "; ")
[17:01:42.790]                         if (!has_future) {
[17:01:42.790]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.790]                             info)
[17:01:42.790]                         }
[17:01:42.790]                         else {
[17:01:42.790]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.790]                             info, version)
[17:01:42.790]                         }
[17:01:42.790]                         base::stop(msg)
[17:01:42.790]                       }
[17:01:42.790]                     })
[17:01:42.790]                   }
[17:01:42.790]                   ...future.strategy.old <- future::plan("list")
[17:01:42.790]                   options(future.plan = NULL)
[17:01:42.790]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.790]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.790]                 }
[17:01:42.790]                 ...future.workdir <- getwd()
[17:01:42.790]             }
[17:01:42.790]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.790]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.790]         }
[17:01:42.790]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.790]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.790]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.790]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.790]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.790]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.790]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.790]             base::names(...future.oldOptions))
[17:01:42.790]     }
[17:01:42.790]     if (FALSE) {
[17:01:42.790]     }
[17:01:42.790]     else {
[17:01:42.790]         if (TRUE) {
[17:01:42.790]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.790]                 open = "w")
[17:01:42.790]         }
[17:01:42.790]         else {
[17:01:42.790]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.790]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.790]         }
[17:01:42.790]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.790]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.790]             base::sink(type = "output", split = FALSE)
[17:01:42.790]             base::close(...future.stdout)
[17:01:42.790]         }, add = TRUE)
[17:01:42.790]     }
[17:01:42.790]     ...future.frame <- base::sys.nframe()
[17:01:42.790]     ...future.conditions <- base::list()
[17:01:42.790]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.790]     if (FALSE) {
[17:01:42.790]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.790]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.790]     }
[17:01:42.790]     ...future.result <- base::tryCatch({
[17:01:42.790]         base::withCallingHandlers({
[17:01:42.790]             ...future.value <- base::withVisible(base::local({
[17:01:42.790]                 42L
[17:01:42.790]                 stop("Woops")
[17:01:42.790]             }))
[17:01:42.790]             future::FutureResult(value = ...future.value$value, 
[17:01:42.790]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.790]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.790]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.790]                     ...future.globalenv.names))
[17:01:42.790]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.790]         }, condition = base::local({
[17:01:42.790]             c <- base::c
[17:01:42.790]             inherits <- base::inherits
[17:01:42.790]             invokeRestart <- base::invokeRestart
[17:01:42.790]             length <- base::length
[17:01:42.790]             list <- base::list
[17:01:42.790]             seq.int <- base::seq.int
[17:01:42.790]             signalCondition <- base::signalCondition
[17:01:42.790]             sys.calls <- base::sys.calls
[17:01:42.790]             `[[` <- base::`[[`
[17:01:42.790]             `+` <- base::`+`
[17:01:42.790]             `<<-` <- base::`<<-`
[17:01:42.790]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.790]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.790]                   3L)]
[17:01:42.790]             }
[17:01:42.790]             function(cond) {
[17:01:42.790]                 is_error <- inherits(cond, "error")
[17:01:42.790]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.790]                   NULL)
[17:01:42.790]                 if (is_error) {
[17:01:42.790]                   sessionInformation <- function() {
[17:01:42.790]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.790]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.790]                       search = base::search(), system = base::Sys.info())
[17:01:42.790]                   }
[17:01:42.790]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.790]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.790]                     cond$call), session = sessionInformation(), 
[17:01:42.790]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.790]                   signalCondition(cond)
[17:01:42.790]                 }
[17:01:42.790]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.790]                 "immediateCondition"))) {
[17:01:42.790]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.790]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.790]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.790]                   if (TRUE && !signal) {
[17:01:42.790]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.790]                     {
[17:01:42.790]                       inherits <- base::inherits
[17:01:42.790]                       invokeRestart <- base::invokeRestart
[17:01:42.790]                       is.null <- base::is.null
[17:01:42.790]                       muffled <- FALSE
[17:01:42.790]                       if (inherits(cond, "message")) {
[17:01:42.790]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.790]                         if (muffled) 
[17:01:42.790]                           invokeRestart("muffleMessage")
[17:01:42.790]                       }
[17:01:42.790]                       else if (inherits(cond, "warning")) {
[17:01:42.790]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.790]                         if (muffled) 
[17:01:42.790]                           invokeRestart("muffleWarning")
[17:01:42.790]                       }
[17:01:42.790]                       else if (inherits(cond, "condition")) {
[17:01:42.790]                         if (!is.null(pattern)) {
[17:01:42.790]                           computeRestarts <- base::computeRestarts
[17:01:42.790]                           grepl <- base::grepl
[17:01:42.790]                           restarts <- computeRestarts(cond)
[17:01:42.790]                           for (restart in restarts) {
[17:01:42.790]                             name <- restart$name
[17:01:42.790]                             if (is.null(name)) 
[17:01:42.790]                               next
[17:01:42.790]                             if (!grepl(pattern, name)) 
[17:01:42.790]                               next
[17:01:42.790]                             invokeRestart(restart)
[17:01:42.790]                             muffled <- TRUE
[17:01:42.790]                             break
[17:01:42.790]                           }
[17:01:42.790]                         }
[17:01:42.790]                       }
[17:01:42.790]                       invisible(muffled)
[17:01:42.790]                     }
[17:01:42.790]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.790]                   }
[17:01:42.790]                 }
[17:01:42.790]                 else {
[17:01:42.790]                   if (TRUE) {
[17:01:42.790]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.790]                     {
[17:01:42.790]                       inherits <- base::inherits
[17:01:42.790]                       invokeRestart <- base::invokeRestart
[17:01:42.790]                       is.null <- base::is.null
[17:01:42.790]                       muffled <- FALSE
[17:01:42.790]                       if (inherits(cond, "message")) {
[17:01:42.790]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.790]                         if (muffled) 
[17:01:42.790]                           invokeRestart("muffleMessage")
[17:01:42.790]                       }
[17:01:42.790]                       else if (inherits(cond, "warning")) {
[17:01:42.790]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.790]                         if (muffled) 
[17:01:42.790]                           invokeRestart("muffleWarning")
[17:01:42.790]                       }
[17:01:42.790]                       else if (inherits(cond, "condition")) {
[17:01:42.790]                         if (!is.null(pattern)) {
[17:01:42.790]                           computeRestarts <- base::computeRestarts
[17:01:42.790]                           grepl <- base::grepl
[17:01:42.790]                           restarts <- computeRestarts(cond)
[17:01:42.790]                           for (restart in restarts) {
[17:01:42.790]                             name <- restart$name
[17:01:42.790]                             if (is.null(name)) 
[17:01:42.790]                               next
[17:01:42.790]                             if (!grepl(pattern, name)) 
[17:01:42.790]                               next
[17:01:42.790]                             invokeRestart(restart)
[17:01:42.790]                             muffled <- TRUE
[17:01:42.790]                             break
[17:01:42.790]                           }
[17:01:42.790]                         }
[17:01:42.790]                       }
[17:01:42.790]                       invisible(muffled)
[17:01:42.790]                     }
[17:01:42.790]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.790]                   }
[17:01:42.790]                 }
[17:01:42.790]             }
[17:01:42.790]         }))
[17:01:42.790]     }, error = function(ex) {
[17:01:42.790]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.790]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.790]                 ...future.rng), started = ...future.startTime, 
[17:01:42.790]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.790]             version = "1.8"), class = "FutureResult")
[17:01:42.790]     }, finally = {
[17:01:42.790]         if (!identical(...future.workdir, getwd())) 
[17:01:42.790]             setwd(...future.workdir)
[17:01:42.790]         {
[17:01:42.790]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.790]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.790]             }
[17:01:42.790]             base::options(...future.oldOptions)
[17:01:42.790]             if (.Platform$OS.type == "windows") {
[17:01:42.790]                 old_names <- names(...future.oldEnvVars)
[17:01:42.790]                 envs <- base::Sys.getenv()
[17:01:42.790]                 names <- names(envs)
[17:01:42.790]                 common <- intersect(names, old_names)
[17:01:42.790]                 added <- setdiff(names, old_names)
[17:01:42.790]                 removed <- setdiff(old_names, names)
[17:01:42.790]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.790]                   envs[common]]
[17:01:42.790]                 NAMES <- toupper(changed)
[17:01:42.790]                 args <- list()
[17:01:42.790]                 for (kk in seq_along(NAMES)) {
[17:01:42.790]                   name <- changed[[kk]]
[17:01:42.790]                   NAME <- NAMES[[kk]]
[17:01:42.790]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.790]                     next
[17:01:42.790]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.790]                 }
[17:01:42.790]                 NAMES <- toupper(added)
[17:01:42.790]                 for (kk in seq_along(NAMES)) {
[17:01:42.790]                   name <- added[[kk]]
[17:01:42.790]                   NAME <- NAMES[[kk]]
[17:01:42.790]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.790]                     next
[17:01:42.790]                   args[[name]] <- ""
[17:01:42.790]                 }
[17:01:42.790]                 NAMES <- toupper(removed)
[17:01:42.790]                 for (kk in seq_along(NAMES)) {
[17:01:42.790]                   name <- removed[[kk]]
[17:01:42.790]                   NAME <- NAMES[[kk]]
[17:01:42.790]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.790]                     next
[17:01:42.790]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.790]                 }
[17:01:42.790]                 if (length(args) > 0) 
[17:01:42.790]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.790]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.790]             }
[17:01:42.790]             else {
[17:01:42.790]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.790]             }
[17:01:42.790]             {
[17:01:42.790]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.790]                   0L) {
[17:01:42.790]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.790]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.790]                   base::options(opts)
[17:01:42.790]                 }
[17:01:42.790]                 {
[17:01:42.790]                   {
[17:01:42.790]                     NULL
[17:01:42.790]                     RNGkind("Mersenne-Twister")
[17:01:42.790]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.790]                       inherits = FALSE)
[17:01:42.790]                   }
[17:01:42.790]                   options(future.plan = NULL)
[17:01:42.790]                   if (is.na(NA_character_)) 
[17:01:42.790]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.790]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.790]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.790]                     .init = FALSE)
[17:01:42.790]                 }
[17:01:42.790]             }
[17:01:42.790]         }
[17:01:42.790]     })
[17:01:42.790]     if (TRUE) {
[17:01:42.790]         base::sink(type = "output", split = FALSE)
[17:01:42.790]         if (TRUE) {
[17:01:42.790]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.790]         }
[17:01:42.790]         else {
[17:01:42.790]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.790]         }
[17:01:42.790]         base::close(...future.stdout)
[17:01:42.790]         ...future.stdout <- NULL
[17:01:42.790]     }
[17:01:42.790]     ...future.result$conditions <- ...future.conditions
[17:01:42.790]     ...future.result$finished <- base::Sys.time()
[17:01:42.790]     ...future.result
[17:01:42.790] }
[17:01:42.792] plan(): Setting new future strategy stack:
[17:01:42.792] List of future strategies:
[17:01:42.792] 1. sequential:
[17:01:42.792]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.792]    - tweaked: FALSE
[17:01:42.792]    - call: NULL
[17:01:42.793] plan(): nbrOfWorkers() = 1
[17:01:42.794] plan(): Setting new future strategy stack:
[17:01:42.794] List of future strategies:
[17:01:42.794] 1. sequential:
[17:01:42.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.794]    - tweaked: FALSE
[17:01:42.794]    - call: future::plan("sequential")
[17:01:42.794] plan(): nbrOfWorkers() = 1
[17:01:42.794] SequentialFuture started (and completed)
[17:01:42.794] signalConditions() ...
[17:01:42.795]  - include = ‘immediateCondition’
[17:01:42.795]  - exclude = 
[17:01:42.795]  - resignal = FALSE
[17:01:42.795]  - Number of conditions: 1
[17:01:42.795] signalConditions() ... done
[17:01:42.795] - Launch lazy future ... done
[17:01:42.795] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[17:01:42.795] resolved() for ‘SequentialFuture’ ...
[17:01:42.796] - state: ‘finished’
[17:01:42.796] - run: TRUE
[17:01:42.796] - result: ‘FutureResult’
[17:01:42.796] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[17:01:42.797] getGlobalsAndPackages() ...
[17:01:42.797] Searching for globals...
[17:01:42.798] - globals found: [2] ‘{’, ‘stop’
[17:01:42.798] Searching for globals ... DONE
[17:01:42.798] Resolving globals: FALSE
[17:01:42.798] 
[17:01:42.798] 
[17:01:42.799] getGlobalsAndPackages() ... DONE
[17:01:42.799] run() for ‘Future’ ...
[17:01:42.799] - state: ‘created’
[17:01:42.799] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.799] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.799] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.800]   - Field: ‘label’
[17:01:42.800]   - Field: ‘local’
[17:01:42.800]   - Field: ‘owner’
[17:01:42.800]   - Field: ‘envir’
[17:01:42.800]   - Field: ‘packages’
[17:01:42.800]   - Field: ‘gc’
[17:01:42.800]   - Field: ‘conditions’
[17:01:42.800]   - Field: ‘expr’
[17:01:42.800]   - Field: ‘uuid’
[17:01:42.800]   - Field: ‘seed’
[17:01:42.800]   - Field: ‘version’
[17:01:42.801]   - Field: ‘result’
[17:01:42.801]   - Field: ‘asynchronous’
[17:01:42.801]   - Field: ‘calls’
[17:01:42.801]   - Field: ‘globals’
[17:01:42.801]   - Field: ‘stdout’
[17:01:42.804]   - Field: ‘earlySignal’
[17:01:42.804]   - Field: ‘lazy’
[17:01:42.804]   - Field: ‘state’
[17:01:42.804] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.805] - Launch lazy future ...
[17:01:42.805] Packages needed by the future expression (n = 0): <none>
[17:01:42.805] Packages needed by future strategies (n = 0): <none>
[17:01:42.805] {
[17:01:42.805]     {
[17:01:42.805]         {
[17:01:42.805]             ...future.startTime <- base::Sys.time()
[17:01:42.805]             {
[17:01:42.805]                 {
[17:01:42.805]                   {
[17:01:42.805]                     base::local({
[17:01:42.805]                       has_future <- base::requireNamespace("future", 
[17:01:42.805]                         quietly = TRUE)
[17:01:42.805]                       if (has_future) {
[17:01:42.805]                         ns <- base::getNamespace("future")
[17:01:42.805]                         version <- ns[[".package"]][["version"]]
[17:01:42.805]                         if (is.null(version)) 
[17:01:42.805]                           version <- utils::packageVersion("future")
[17:01:42.805]                       }
[17:01:42.805]                       else {
[17:01:42.805]                         version <- NULL
[17:01:42.805]                       }
[17:01:42.805]                       if (!has_future || version < "1.8.0") {
[17:01:42.805]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.805]                           "", base::R.version$version.string), 
[17:01:42.805]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.805]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.805]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.805]                             "release", "version")], collapse = " "), 
[17:01:42.805]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.805]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.805]                           info)
[17:01:42.805]                         info <- base::paste(info, collapse = "; ")
[17:01:42.805]                         if (!has_future) {
[17:01:42.805]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.805]                             info)
[17:01:42.805]                         }
[17:01:42.805]                         else {
[17:01:42.805]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.805]                             info, version)
[17:01:42.805]                         }
[17:01:42.805]                         base::stop(msg)
[17:01:42.805]                       }
[17:01:42.805]                     })
[17:01:42.805]                   }
[17:01:42.805]                   ...future.strategy.old <- future::plan("list")
[17:01:42.805]                   options(future.plan = NULL)
[17:01:42.805]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.805]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.805]                 }
[17:01:42.805]                 ...future.workdir <- getwd()
[17:01:42.805]             }
[17:01:42.805]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.805]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.805]         }
[17:01:42.805]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.805]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.805]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.805]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.805]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.805]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.805]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.805]             base::names(...future.oldOptions))
[17:01:42.805]     }
[17:01:42.805]     if (FALSE) {
[17:01:42.805]     }
[17:01:42.805]     else {
[17:01:42.805]         if (TRUE) {
[17:01:42.805]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.805]                 open = "w")
[17:01:42.805]         }
[17:01:42.805]         else {
[17:01:42.805]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.805]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.805]         }
[17:01:42.805]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.805]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.805]             base::sink(type = "output", split = FALSE)
[17:01:42.805]             base::close(...future.stdout)
[17:01:42.805]         }, add = TRUE)
[17:01:42.805]     }
[17:01:42.805]     ...future.frame <- base::sys.nframe()
[17:01:42.805]     ...future.conditions <- base::list()
[17:01:42.805]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.805]     if (FALSE) {
[17:01:42.805]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.805]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.805]     }
[17:01:42.805]     ...future.result <- base::tryCatch({
[17:01:42.805]         base::withCallingHandlers({
[17:01:42.805]             ...future.value <- base::withVisible(base::local({
[17:01:42.805]                 42L
[17:01:42.805]                 stop("Woops")
[17:01:42.805]             }))
[17:01:42.805]             future::FutureResult(value = ...future.value$value, 
[17:01:42.805]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.805]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.805]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.805]                     ...future.globalenv.names))
[17:01:42.805]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.805]         }, condition = base::local({
[17:01:42.805]             c <- base::c
[17:01:42.805]             inherits <- base::inherits
[17:01:42.805]             invokeRestart <- base::invokeRestart
[17:01:42.805]             length <- base::length
[17:01:42.805]             list <- base::list
[17:01:42.805]             seq.int <- base::seq.int
[17:01:42.805]             signalCondition <- base::signalCondition
[17:01:42.805]             sys.calls <- base::sys.calls
[17:01:42.805]             `[[` <- base::`[[`
[17:01:42.805]             `+` <- base::`+`
[17:01:42.805]             `<<-` <- base::`<<-`
[17:01:42.805]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.805]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.805]                   3L)]
[17:01:42.805]             }
[17:01:42.805]             function(cond) {
[17:01:42.805]                 is_error <- inherits(cond, "error")
[17:01:42.805]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.805]                   NULL)
[17:01:42.805]                 if (is_error) {
[17:01:42.805]                   sessionInformation <- function() {
[17:01:42.805]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.805]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.805]                       search = base::search(), system = base::Sys.info())
[17:01:42.805]                   }
[17:01:42.805]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.805]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.805]                     cond$call), session = sessionInformation(), 
[17:01:42.805]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.805]                   signalCondition(cond)
[17:01:42.805]                 }
[17:01:42.805]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.805]                 "immediateCondition"))) {
[17:01:42.805]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.805]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.805]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.805]                   if (TRUE && !signal) {
[17:01:42.805]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.805]                     {
[17:01:42.805]                       inherits <- base::inherits
[17:01:42.805]                       invokeRestart <- base::invokeRestart
[17:01:42.805]                       is.null <- base::is.null
[17:01:42.805]                       muffled <- FALSE
[17:01:42.805]                       if (inherits(cond, "message")) {
[17:01:42.805]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.805]                         if (muffled) 
[17:01:42.805]                           invokeRestart("muffleMessage")
[17:01:42.805]                       }
[17:01:42.805]                       else if (inherits(cond, "warning")) {
[17:01:42.805]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.805]                         if (muffled) 
[17:01:42.805]                           invokeRestart("muffleWarning")
[17:01:42.805]                       }
[17:01:42.805]                       else if (inherits(cond, "condition")) {
[17:01:42.805]                         if (!is.null(pattern)) {
[17:01:42.805]                           computeRestarts <- base::computeRestarts
[17:01:42.805]                           grepl <- base::grepl
[17:01:42.805]                           restarts <- computeRestarts(cond)
[17:01:42.805]                           for (restart in restarts) {
[17:01:42.805]                             name <- restart$name
[17:01:42.805]                             if (is.null(name)) 
[17:01:42.805]                               next
[17:01:42.805]                             if (!grepl(pattern, name)) 
[17:01:42.805]                               next
[17:01:42.805]                             invokeRestart(restart)
[17:01:42.805]                             muffled <- TRUE
[17:01:42.805]                             break
[17:01:42.805]                           }
[17:01:42.805]                         }
[17:01:42.805]                       }
[17:01:42.805]                       invisible(muffled)
[17:01:42.805]                     }
[17:01:42.805]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.805]                   }
[17:01:42.805]                 }
[17:01:42.805]                 else {
[17:01:42.805]                   if (TRUE) {
[17:01:42.805]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.805]                     {
[17:01:42.805]                       inherits <- base::inherits
[17:01:42.805]                       invokeRestart <- base::invokeRestart
[17:01:42.805]                       is.null <- base::is.null
[17:01:42.805]                       muffled <- FALSE
[17:01:42.805]                       if (inherits(cond, "message")) {
[17:01:42.805]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.805]                         if (muffled) 
[17:01:42.805]                           invokeRestart("muffleMessage")
[17:01:42.805]                       }
[17:01:42.805]                       else if (inherits(cond, "warning")) {
[17:01:42.805]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.805]                         if (muffled) 
[17:01:42.805]                           invokeRestart("muffleWarning")
[17:01:42.805]                       }
[17:01:42.805]                       else if (inherits(cond, "condition")) {
[17:01:42.805]                         if (!is.null(pattern)) {
[17:01:42.805]                           computeRestarts <- base::computeRestarts
[17:01:42.805]                           grepl <- base::grepl
[17:01:42.805]                           restarts <- computeRestarts(cond)
[17:01:42.805]                           for (restart in restarts) {
[17:01:42.805]                             name <- restart$name
[17:01:42.805]                             if (is.null(name)) 
[17:01:42.805]                               next
[17:01:42.805]                             if (!grepl(pattern, name)) 
[17:01:42.805]                               next
[17:01:42.805]                             invokeRestart(restart)
[17:01:42.805]                             muffled <- TRUE
[17:01:42.805]                             break
[17:01:42.805]                           }
[17:01:42.805]                         }
[17:01:42.805]                       }
[17:01:42.805]                       invisible(muffled)
[17:01:42.805]                     }
[17:01:42.805]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.805]                   }
[17:01:42.805]                 }
[17:01:42.805]             }
[17:01:42.805]         }))
[17:01:42.805]     }, error = function(ex) {
[17:01:42.805]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.805]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.805]                 ...future.rng), started = ...future.startTime, 
[17:01:42.805]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.805]             version = "1.8"), class = "FutureResult")
[17:01:42.805]     }, finally = {
[17:01:42.805]         if (!identical(...future.workdir, getwd())) 
[17:01:42.805]             setwd(...future.workdir)
[17:01:42.805]         {
[17:01:42.805]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.805]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.805]             }
[17:01:42.805]             base::options(...future.oldOptions)
[17:01:42.805]             if (.Platform$OS.type == "windows") {
[17:01:42.805]                 old_names <- names(...future.oldEnvVars)
[17:01:42.805]                 envs <- base::Sys.getenv()
[17:01:42.805]                 names <- names(envs)
[17:01:42.805]                 common <- intersect(names, old_names)
[17:01:42.805]                 added <- setdiff(names, old_names)
[17:01:42.805]                 removed <- setdiff(old_names, names)
[17:01:42.805]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.805]                   envs[common]]
[17:01:42.805]                 NAMES <- toupper(changed)
[17:01:42.805]                 args <- list()
[17:01:42.805]                 for (kk in seq_along(NAMES)) {
[17:01:42.805]                   name <- changed[[kk]]
[17:01:42.805]                   NAME <- NAMES[[kk]]
[17:01:42.805]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.805]                     next
[17:01:42.805]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.805]                 }
[17:01:42.805]                 NAMES <- toupper(added)
[17:01:42.805]                 for (kk in seq_along(NAMES)) {
[17:01:42.805]                   name <- added[[kk]]
[17:01:42.805]                   NAME <- NAMES[[kk]]
[17:01:42.805]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.805]                     next
[17:01:42.805]                   args[[name]] <- ""
[17:01:42.805]                 }
[17:01:42.805]                 NAMES <- toupper(removed)
[17:01:42.805]                 for (kk in seq_along(NAMES)) {
[17:01:42.805]                   name <- removed[[kk]]
[17:01:42.805]                   NAME <- NAMES[[kk]]
[17:01:42.805]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.805]                     next
[17:01:42.805]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.805]                 }
[17:01:42.805]                 if (length(args) > 0) 
[17:01:42.805]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.805]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.805]             }
[17:01:42.805]             else {
[17:01:42.805]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.805]             }
[17:01:42.805]             {
[17:01:42.805]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.805]                   0L) {
[17:01:42.805]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.805]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.805]                   base::options(opts)
[17:01:42.805]                 }
[17:01:42.805]                 {
[17:01:42.805]                   {
[17:01:42.805]                     NULL
[17:01:42.805]                     RNGkind("Mersenne-Twister")
[17:01:42.805]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.805]                       inherits = FALSE)
[17:01:42.805]                   }
[17:01:42.805]                   options(future.plan = NULL)
[17:01:42.805]                   if (is.na(NA_character_)) 
[17:01:42.805]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.805]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.805]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.805]                     .init = FALSE)
[17:01:42.805]                 }
[17:01:42.805]             }
[17:01:42.805]         }
[17:01:42.805]     })
[17:01:42.805]     if (TRUE) {
[17:01:42.805]         base::sink(type = "output", split = FALSE)
[17:01:42.805]         if (TRUE) {
[17:01:42.805]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.805]         }
[17:01:42.805]         else {
[17:01:42.805]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.805]         }
[17:01:42.805]         base::close(...future.stdout)
[17:01:42.805]         ...future.stdout <- NULL
[17:01:42.805]     }
[17:01:42.805]     ...future.result$conditions <- ...future.conditions
[17:01:42.805]     ...future.result$finished <- base::Sys.time()
[17:01:42.805]     ...future.result
[17:01:42.805] }
[17:01:42.807] plan(): Setting new future strategy stack:
[17:01:42.807] List of future strategies:
[17:01:42.807] 1. sequential:
[17:01:42.807]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.807]    - tweaked: FALSE
[17:01:42.807]    - call: NULL
[17:01:42.808] plan(): nbrOfWorkers() = 1
[17:01:42.809] plan(): Setting new future strategy stack:
[17:01:42.809] List of future strategies:
[17:01:42.809] 1. sequential:
[17:01:42.809]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.809]    - tweaked: FALSE
[17:01:42.809]    - call: future::plan("sequential")
[17:01:42.809] plan(): nbrOfWorkers() = 1
[17:01:42.810] SequentialFuture started (and completed)
[17:01:42.810] signalConditions() ...
[17:01:42.810]  - include = ‘immediateCondition’
[17:01:42.810]  - exclude = 
[17:01:42.810]  - resignal = FALSE
[17:01:42.810]  - Number of conditions: 1
[17:01:42.810] signalConditions() ... done
[17:01:42.810] - Launch lazy future ... done
[17:01:42.810] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[17:01:42.811] getGlobalsAndPackages() ...
[17:01:42.811] Searching for globals...
[17:01:42.812] - globals found: [2] ‘{’, ‘stop’
[17:01:42.812] Searching for globals ... DONE
[17:01:42.812] Resolving globals: FALSE
[17:01:42.812] 
[17:01:42.813] 
[17:01:42.813] getGlobalsAndPackages() ... DONE
[17:01:42.813] run() for ‘Future’ ...
[17:01:42.813] - state: ‘created’
[17:01:42.813] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.813] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.813] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.814]   - Field: ‘label’
[17:01:42.814]   - Field: ‘local’
[17:01:42.814]   - Field: ‘owner’
[17:01:42.814]   - Field: ‘envir’
[17:01:42.814]   - Field: ‘packages’
[17:01:42.814]   - Field: ‘gc’
[17:01:42.814]   - Field: ‘conditions’
[17:01:42.814]   - Field: ‘expr’
[17:01:42.814]   - Field: ‘uuid’
[17:01:42.814]   - Field: ‘seed’
[17:01:42.814]   - Field: ‘version’
[17:01:42.815]   - Field: ‘result’
[17:01:42.815]   - Field: ‘asynchronous’
[17:01:42.815]   - Field: ‘calls’
[17:01:42.815]   - Field: ‘globals’
[17:01:42.815]   - Field: ‘stdout’
[17:01:42.815]   - Field: ‘earlySignal’
[17:01:42.815]   - Field: ‘lazy’
[17:01:42.815]   - Field: ‘state’
[17:01:42.815] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.815] - Launch lazy future ...
[17:01:42.816] Packages needed by the future expression (n = 0): <none>
[17:01:42.816] Packages needed by future strategies (n = 0): <none>
[17:01:42.816] {
[17:01:42.816]     {
[17:01:42.816]         {
[17:01:42.816]             ...future.startTime <- base::Sys.time()
[17:01:42.816]             {
[17:01:42.816]                 {
[17:01:42.816]                   {
[17:01:42.816]                     base::local({
[17:01:42.816]                       has_future <- base::requireNamespace("future", 
[17:01:42.816]                         quietly = TRUE)
[17:01:42.816]                       if (has_future) {
[17:01:42.816]                         ns <- base::getNamespace("future")
[17:01:42.816]                         version <- ns[[".package"]][["version"]]
[17:01:42.816]                         if (is.null(version)) 
[17:01:42.816]                           version <- utils::packageVersion("future")
[17:01:42.816]                       }
[17:01:42.816]                       else {
[17:01:42.816]                         version <- NULL
[17:01:42.816]                       }
[17:01:42.816]                       if (!has_future || version < "1.8.0") {
[17:01:42.816]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.816]                           "", base::R.version$version.string), 
[17:01:42.816]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.816]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.816]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.816]                             "release", "version")], collapse = " "), 
[17:01:42.816]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.816]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.816]                           info)
[17:01:42.816]                         info <- base::paste(info, collapse = "; ")
[17:01:42.816]                         if (!has_future) {
[17:01:42.816]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.816]                             info)
[17:01:42.816]                         }
[17:01:42.816]                         else {
[17:01:42.816]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.816]                             info, version)
[17:01:42.816]                         }
[17:01:42.816]                         base::stop(msg)
[17:01:42.816]                       }
[17:01:42.816]                     })
[17:01:42.816]                   }
[17:01:42.816]                   ...future.strategy.old <- future::plan("list")
[17:01:42.816]                   options(future.plan = NULL)
[17:01:42.816]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.816]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.816]                 }
[17:01:42.816]                 ...future.workdir <- getwd()
[17:01:42.816]             }
[17:01:42.816]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.816]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.816]         }
[17:01:42.816]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.816]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.816]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.816]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.816]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.816]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.816]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.816]             base::names(...future.oldOptions))
[17:01:42.816]     }
[17:01:42.816]     if (FALSE) {
[17:01:42.816]     }
[17:01:42.816]     else {
[17:01:42.816]         if (TRUE) {
[17:01:42.816]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.816]                 open = "w")
[17:01:42.816]         }
[17:01:42.816]         else {
[17:01:42.816]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.816]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.816]         }
[17:01:42.816]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.816]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.816]             base::sink(type = "output", split = FALSE)
[17:01:42.816]             base::close(...future.stdout)
[17:01:42.816]         }, add = TRUE)
[17:01:42.816]     }
[17:01:42.816]     ...future.frame <- base::sys.nframe()
[17:01:42.816]     ...future.conditions <- base::list()
[17:01:42.816]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.816]     if (FALSE) {
[17:01:42.816]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.816]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.816]     }
[17:01:42.816]     ...future.result <- base::tryCatch({
[17:01:42.816]         base::withCallingHandlers({
[17:01:42.816]             ...future.value <- base::withVisible(base::local({
[17:01:42.816]                 42L
[17:01:42.816]                 stop("Woops")
[17:01:42.816]             }))
[17:01:42.816]             future::FutureResult(value = ...future.value$value, 
[17:01:42.816]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.816]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.816]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.816]                     ...future.globalenv.names))
[17:01:42.816]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.816]         }, condition = base::local({
[17:01:42.816]             c <- base::c
[17:01:42.816]             inherits <- base::inherits
[17:01:42.816]             invokeRestart <- base::invokeRestart
[17:01:42.816]             length <- base::length
[17:01:42.816]             list <- base::list
[17:01:42.816]             seq.int <- base::seq.int
[17:01:42.816]             signalCondition <- base::signalCondition
[17:01:42.816]             sys.calls <- base::sys.calls
[17:01:42.816]             `[[` <- base::`[[`
[17:01:42.816]             `+` <- base::`+`
[17:01:42.816]             `<<-` <- base::`<<-`
[17:01:42.816]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.816]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.816]                   3L)]
[17:01:42.816]             }
[17:01:42.816]             function(cond) {
[17:01:42.816]                 is_error <- inherits(cond, "error")
[17:01:42.816]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.816]                   NULL)
[17:01:42.816]                 if (is_error) {
[17:01:42.816]                   sessionInformation <- function() {
[17:01:42.816]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.816]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.816]                       search = base::search(), system = base::Sys.info())
[17:01:42.816]                   }
[17:01:42.816]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.816]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.816]                     cond$call), session = sessionInformation(), 
[17:01:42.816]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.816]                   signalCondition(cond)
[17:01:42.816]                 }
[17:01:42.816]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.816]                 "immediateCondition"))) {
[17:01:42.816]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.816]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.816]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.816]                   if (TRUE && !signal) {
[17:01:42.816]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.816]                     {
[17:01:42.816]                       inherits <- base::inherits
[17:01:42.816]                       invokeRestart <- base::invokeRestart
[17:01:42.816]                       is.null <- base::is.null
[17:01:42.816]                       muffled <- FALSE
[17:01:42.816]                       if (inherits(cond, "message")) {
[17:01:42.816]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.816]                         if (muffled) 
[17:01:42.816]                           invokeRestart("muffleMessage")
[17:01:42.816]                       }
[17:01:42.816]                       else if (inherits(cond, "warning")) {
[17:01:42.816]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.816]                         if (muffled) 
[17:01:42.816]                           invokeRestart("muffleWarning")
[17:01:42.816]                       }
[17:01:42.816]                       else if (inherits(cond, "condition")) {
[17:01:42.816]                         if (!is.null(pattern)) {
[17:01:42.816]                           computeRestarts <- base::computeRestarts
[17:01:42.816]                           grepl <- base::grepl
[17:01:42.816]                           restarts <- computeRestarts(cond)
[17:01:42.816]                           for (restart in restarts) {
[17:01:42.816]                             name <- restart$name
[17:01:42.816]                             if (is.null(name)) 
[17:01:42.816]                               next
[17:01:42.816]                             if (!grepl(pattern, name)) 
[17:01:42.816]                               next
[17:01:42.816]                             invokeRestart(restart)
[17:01:42.816]                             muffled <- TRUE
[17:01:42.816]                             break
[17:01:42.816]                           }
[17:01:42.816]                         }
[17:01:42.816]                       }
[17:01:42.816]                       invisible(muffled)
[17:01:42.816]                     }
[17:01:42.816]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.816]                   }
[17:01:42.816]                 }
[17:01:42.816]                 else {
[17:01:42.816]                   if (TRUE) {
[17:01:42.816]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.816]                     {
[17:01:42.816]                       inherits <- base::inherits
[17:01:42.816]                       invokeRestart <- base::invokeRestart
[17:01:42.816]                       is.null <- base::is.null
[17:01:42.816]                       muffled <- FALSE
[17:01:42.816]                       if (inherits(cond, "message")) {
[17:01:42.816]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.816]                         if (muffled) 
[17:01:42.816]                           invokeRestart("muffleMessage")
[17:01:42.816]                       }
[17:01:42.816]                       else if (inherits(cond, "warning")) {
[17:01:42.816]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.816]                         if (muffled) 
[17:01:42.816]                           invokeRestart("muffleWarning")
[17:01:42.816]                       }
[17:01:42.816]                       else if (inherits(cond, "condition")) {
[17:01:42.816]                         if (!is.null(pattern)) {
[17:01:42.816]                           computeRestarts <- base::computeRestarts
[17:01:42.816]                           grepl <- base::grepl
[17:01:42.816]                           restarts <- computeRestarts(cond)
[17:01:42.816]                           for (restart in restarts) {
[17:01:42.816]                             name <- restart$name
[17:01:42.816]                             if (is.null(name)) 
[17:01:42.816]                               next
[17:01:42.816]                             if (!grepl(pattern, name)) 
[17:01:42.816]                               next
[17:01:42.816]                             invokeRestart(restart)
[17:01:42.816]                             muffled <- TRUE
[17:01:42.816]                             break
[17:01:42.816]                           }
[17:01:42.816]                         }
[17:01:42.816]                       }
[17:01:42.816]                       invisible(muffled)
[17:01:42.816]                     }
[17:01:42.816]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.816]                   }
[17:01:42.816]                 }
[17:01:42.816]             }
[17:01:42.816]         }))
[17:01:42.816]     }, error = function(ex) {
[17:01:42.816]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.816]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.816]                 ...future.rng), started = ...future.startTime, 
[17:01:42.816]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.816]             version = "1.8"), class = "FutureResult")
[17:01:42.816]     }, finally = {
[17:01:42.816]         if (!identical(...future.workdir, getwd())) 
[17:01:42.816]             setwd(...future.workdir)
[17:01:42.816]         {
[17:01:42.816]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.816]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.816]             }
[17:01:42.816]             base::options(...future.oldOptions)
[17:01:42.816]             if (.Platform$OS.type == "windows") {
[17:01:42.816]                 old_names <- names(...future.oldEnvVars)
[17:01:42.816]                 envs <- base::Sys.getenv()
[17:01:42.816]                 names <- names(envs)
[17:01:42.816]                 common <- intersect(names, old_names)
[17:01:42.816]                 added <- setdiff(names, old_names)
[17:01:42.816]                 removed <- setdiff(old_names, names)
[17:01:42.816]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.816]                   envs[common]]
[17:01:42.816]                 NAMES <- toupper(changed)
[17:01:42.816]                 args <- list()
[17:01:42.816]                 for (kk in seq_along(NAMES)) {
[17:01:42.816]                   name <- changed[[kk]]
[17:01:42.816]                   NAME <- NAMES[[kk]]
[17:01:42.816]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.816]                     next
[17:01:42.816]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.816]                 }
[17:01:42.816]                 NAMES <- toupper(added)
[17:01:42.816]                 for (kk in seq_along(NAMES)) {
[17:01:42.816]                   name <- added[[kk]]
[17:01:42.816]                   NAME <- NAMES[[kk]]
[17:01:42.816]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.816]                     next
[17:01:42.816]                   args[[name]] <- ""
[17:01:42.816]                 }
[17:01:42.816]                 NAMES <- toupper(removed)
[17:01:42.816]                 for (kk in seq_along(NAMES)) {
[17:01:42.816]                   name <- removed[[kk]]
[17:01:42.816]                   NAME <- NAMES[[kk]]
[17:01:42.816]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.816]                     next
[17:01:42.816]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.816]                 }
[17:01:42.816]                 if (length(args) > 0) 
[17:01:42.816]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.816]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.816]             }
[17:01:42.816]             else {
[17:01:42.816]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.816]             }
[17:01:42.816]             {
[17:01:42.816]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.816]                   0L) {
[17:01:42.816]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.816]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.816]                   base::options(opts)
[17:01:42.816]                 }
[17:01:42.816]                 {
[17:01:42.816]                   {
[17:01:42.816]                     NULL
[17:01:42.816]                     RNGkind("Mersenne-Twister")
[17:01:42.816]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.816]                       inherits = FALSE)
[17:01:42.816]                   }
[17:01:42.816]                   options(future.plan = NULL)
[17:01:42.816]                   if (is.na(NA_character_)) 
[17:01:42.816]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.816]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.816]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.816]                     .init = FALSE)
[17:01:42.816]                 }
[17:01:42.816]             }
[17:01:42.816]         }
[17:01:42.816]     })
[17:01:42.816]     if (TRUE) {
[17:01:42.816]         base::sink(type = "output", split = FALSE)
[17:01:42.816]         if (TRUE) {
[17:01:42.816]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.816]         }
[17:01:42.816]         else {
[17:01:42.816]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.816]         }
[17:01:42.816]         base::close(...future.stdout)
[17:01:42.816]         ...future.stdout <- NULL
[17:01:42.816]     }
[17:01:42.816]     ...future.result$conditions <- ...future.conditions
[17:01:42.816]     ...future.result$finished <- base::Sys.time()
[17:01:42.816]     ...future.result
[17:01:42.816] }
[17:01:42.818] plan(): Setting new future strategy stack:
[17:01:42.818] List of future strategies:
[17:01:42.818] 1. sequential:
[17:01:42.818]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.818]    - tweaked: FALSE
[17:01:42.818]    - call: NULL
[17:01:42.818] plan(): nbrOfWorkers() = 1
[17:01:42.819] plan(): Setting new future strategy stack:
[17:01:42.819] List of future strategies:
[17:01:42.819] 1. sequential:
[17:01:42.819]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.819]    - tweaked: FALSE
[17:01:42.819]    - call: future::plan("sequential")
[17:01:42.820] plan(): nbrOfWorkers() = 1
[17:01:42.820] SequentialFuture started (and completed)
[17:01:42.820] signalConditions() ...
[17:01:42.820]  - include = ‘immediateCondition’
[17:01:42.820]  - exclude = 
[17:01:42.820]  - resignal = FALSE
[17:01:42.821]  - Number of conditions: 1
[17:01:42.821] signalConditions() ... done
[17:01:42.821] - Launch lazy future ... done
[17:01:42.821] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[17:01:42.821] resolved() for ‘SequentialFuture’ ...
[17:01:42.821] - state: ‘finished’
[17:01:42.821] - run: TRUE
[17:01:42.821] - result: ‘FutureResult’
[17:01:42.822] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[17:01:42.823] getGlobalsAndPackages() ...
[17:01:42.823] Searching for globals...
[17:01:42.824] - globals found: [2] ‘{’, ‘stop’
[17:01:42.824] Searching for globals ... DONE
[17:01:42.824] Resolving globals: FALSE
[17:01:42.824] 
[17:01:42.824] 
[17:01:42.824] getGlobalsAndPackages() ... DONE
[17:01:42.825] run() for ‘Future’ ...
[17:01:42.825] - state: ‘created’
[17:01:42.825] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.825] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.825] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.825]   - Field: ‘label’
[17:01:42.825]   - Field: ‘local’
[17:01:42.826]   - Field: ‘owner’
[17:01:42.826]   - Field: ‘envir’
[17:01:42.826]   - Field: ‘packages’
[17:01:42.826]   - Field: ‘gc’
[17:01:42.826]   - Field: ‘conditions’
[17:01:42.826]   - Field: ‘expr’
[17:01:42.826]   - Field: ‘uuid’
[17:01:42.826]   - Field: ‘seed’
[17:01:42.826]   - Field: ‘version’
[17:01:42.826]   - Field: ‘result’
[17:01:42.826]   - Field: ‘asynchronous’
[17:01:42.827]   - Field: ‘calls’
[17:01:42.827]   - Field: ‘globals’
[17:01:42.827]   - Field: ‘stdout’
[17:01:42.827]   - Field: ‘earlySignal’
[17:01:42.827]   - Field: ‘lazy’
[17:01:42.827]   - Field: ‘state’
[17:01:42.827] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.827] - Launch lazy future ...
[17:01:42.827] Packages needed by the future expression (n = 0): <none>
[17:01:42.827] Packages needed by future strategies (n = 0): <none>
[17:01:42.828] {
[17:01:42.828]     {
[17:01:42.828]         {
[17:01:42.828]             ...future.startTime <- base::Sys.time()
[17:01:42.828]             {
[17:01:42.828]                 {
[17:01:42.828]                   {
[17:01:42.828]                     base::local({
[17:01:42.828]                       has_future <- base::requireNamespace("future", 
[17:01:42.828]                         quietly = TRUE)
[17:01:42.828]                       if (has_future) {
[17:01:42.828]                         ns <- base::getNamespace("future")
[17:01:42.828]                         version <- ns[[".package"]][["version"]]
[17:01:42.828]                         if (is.null(version)) 
[17:01:42.828]                           version <- utils::packageVersion("future")
[17:01:42.828]                       }
[17:01:42.828]                       else {
[17:01:42.828]                         version <- NULL
[17:01:42.828]                       }
[17:01:42.828]                       if (!has_future || version < "1.8.0") {
[17:01:42.828]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.828]                           "", base::R.version$version.string), 
[17:01:42.828]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.828]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.828]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.828]                             "release", "version")], collapse = " "), 
[17:01:42.828]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.828]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.828]                           info)
[17:01:42.828]                         info <- base::paste(info, collapse = "; ")
[17:01:42.828]                         if (!has_future) {
[17:01:42.828]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.828]                             info)
[17:01:42.828]                         }
[17:01:42.828]                         else {
[17:01:42.828]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.828]                             info, version)
[17:01:42.828]                         }
[17:01:42.828]                         base::stop(msg)
[17:01:42.828]                       }
[17:01:42.828]                     })
[17:01:42.828]                   }
[17:01:42.828]                   ...future.strategy.old <- future::plan("list")
[17:01:42.828]                   options(future.plan = NULL)
[17:01:42.828]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.828]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.828]                 }
[17:01:42.828]                 ...future.workdir <- getwd()
[17:01:42.828]             }
[17:01:42.828]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.828]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.828]         }
[17:01:42.828]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.828]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.828]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.828]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.828]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.828]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.828]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.828]             base::names(...future.oldOptions))
[17:01:42.828]     }
[17:01:42.828]     if (FALSE) {
[17:01:42.828]     }
[17:01:42.828]     else {
[17:01:42.828]         if (TRUE) {
[17:01:42.828]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.828]                 open = "w")
[17:01:42.828]         }
[17:01:42.828]         else {
[17:01:42.828]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.828]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.828]         }
[17:01:42.828]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.828]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.828]             base::sink(type = "output", split = FALSE)
[17:01:42.828]             base::close(...future.stdout)
[17:01:42.828]         }, add = TRUE)
[17:01:42.828]     }
[17:01:42.828]     ...future.frame <- base::sys.nframe()
[17:01:42.828]     ...future.conditions <- base::list()
[17:01:42.828]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.828]     if (FALSE) {
[17:01:42.828]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.828]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.828]     }
[17:01:42.828]     ...future.result <- base::tryCatch({
[17:01:42.828]         base::withCallingHandlers({
[17:01:42.828]             ...future.value <- base::withVisible(base::local({
[17:01:42.828]                 42L
[17:01:42.828]                 stop("Woops")
[17:01:42.828]             }))
[17:01:42.828]             future::FutureResult(value = ...future.value$value, 
[17:01:42.828]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.828]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.828]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.828]                     ...future.globalenv.names))
[17:01:42.828]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.828]         }, condition = base::local({
[17:01:42.828]             c <- base::c
[17:01:42.828]             inherits <- base::inherits
[17:01:42.828]             invokeRestart <- base::invokeRestart
[17:01:42.828]             length <- base::length
[17:01:42.828]             list <- base::list
[17:01:42.828]             seq.int <- base::seq.int
[17:01:42.828]             signalCondition <- base::signalCondition
[17:01:42.828]             sys.calls <- base::sys.calls
[17:01:42.828]             `[[` <- base::`[[`
[17:01:42.828]             `+` <- base::`+`
[17:01:42.828]             `<<-` <- base::`<<-`
[17:01:42.828]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.828]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.828]                   3L)]
[17:01:42.828]             }
[17:01:42.828]             function(cond) {
[17:01:42.828]                 is_error <- inherits(cond, "error")
[17:01:42.828]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.828]                   NULL)
[17:01:42.828]                 if (is_error) {
[17:01:42.828]                   sessionInformation <- function() {
[17:01:42.828]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.828]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.828]                       search = base::search(), system = base::Sys.info())
[17:01:42.828]                   }
[17:01:42.828]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.828]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.828]                     cond$call), session = sessionInformation(), 
[17:01:42.828]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.828]                   signalCondition(cond)
[17:01:42.828]                 }
[17:01:42.828]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.828]                 "immediateCondition"))) {
[17:01:42.828]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.828]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.828]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.828]                   if (TRUE && !signal) {
[17:01:42.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.828]                     {
[17:01:42.828]                       inherits <- base::inherits
[17:01:42.828]                       invokeRestart <- base::invokeRestart
[17:01:42.828]                       is.null <- base::is.null
[17:01:42.828]                       muffled <- FALSE
[17:01:42.828]                       if (inherits(cond, "message")) {
[17:01:42.828]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.828]                         if (muffled) 
[17:01:42.828]                           invokeRestart("muffleMessage")
[17:01:42.828]                       }
[17:01:42.828]                       else if (inherits(cond, "warning")) {
[17:01:42.828]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.828]                         if (muffled) 
[17:01:42.828]                           invokeRestart("muffleWarning")
[17:01:42.828]                       }
[17:01:42.828]                       else if (inherits(cond, "condition")) {
[17:01:42.828]                         if (!is.null(pattern)) {
[17:01:42.828]                           computeRestarts <- base::computeRestarts
[17:01:42.828]                           grepl <- base::grepl
[17:01:42.828]                           restarts <- computeRestarts(cond)
[17:01:42.828]                           for (restart in restarts) {
[17:01:42.828]                             name <- restart$name
[17:01:42.828]                             if (is.null(name)) 
[17:01:42.828]                               next
[17:01:42.828]                             if (!grepl(pattern, name)) 
[17:01:42.828]                               next
[17:01:42.828]                             invokeRestart(restart)
[17:01:42.828]                             muffled <- TRUE
[17:01:42.828]                             break
[17:01:42.828]                           }
[17:01:42.828]                         }
[17:01:42.828]                       }
[17:01:42.828]                       invisible(muffled)
[17:01:42.828]                     }
[17:01:42.828]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.828]                   }
[17:01:42.828]                 }
[17:01:42.828]                 else {
[17:01:42.828]                   if (TRUE) {
[17:01:42.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.828]                     {
[17:01:42.828]                       inherits <- base::inherits
[17:01:42.828]                       invokeRestart <- base::invokeRestart
[17:01:42.828]                       is.null <- base::is.null
[17:01:42.828]                       muffled <- FALSE
[17:01:42.828]                       if (inherits(cond, "message")) {
[17:01:42.828]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.828]                         if (muffled) 
[17:01:42.828]                           invokeRestart("muffleMessage")
[17:01:42.828]                       }
[17:01:42.828]                       else if (inherits(cond, "warning")) {
[17:01:42.828]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.828]                         if (muffled) 
[17:01:42.828]                           invokeRestart("muffleWarning")
[17:01:42.828]                       }
[17:01:42.828]                       else if (inherits(cond, "condition")) {
[17:01:42.828]                         if (!is.null(pattern)) {
[17:01:42.828]                           computeRestarts <- base::computeRestarts
[17:01:42.828]                           grepl <- base::grepl
[17:01:42.828]                           restarts <- computeRestarts(cond)
[17:01:42.828]                           for (restart in restarts) {
[17:01:42.828]                             name <- restart$name
[17:01:42.828]                             if (is.null(name)) 
[17:01:42.828]                               next
[17:01:42.828]                             if (!grepl(pattern, name)) 
[17:01:42.828]                               next
[17:01:42.828]                             invokeRestart(restart)
[17:01:42.828]                             muffled <- TRUE
[17:01:42.828]                             break
[17:01:42.828]                           }
[17:01:42.828]                         }
[17:01:42.828]                       }
[17:01:42.828]                       invisible(muffled)
[17:01:42.828]                     }
[17:01:42.828]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.828]                   }
[17:01:42.828]                 }
[17:01:42.828]             }
[17:01:42.828]         }))
[17:01:42.828]     }, error = function(ex) {
[17:01:42.828]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.828]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.828]                 ...future.rng), started = ...future.startTime, 
[17:01:42.828]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.828]             version = "1.8"), class = "FutureResult")
[17:01:42.828]     }, finally = {
[17:01:42.828]         if (!identical(...future.workdir, getwd())) 
[17:01:42.828]             setwd(...future.workdir)
[17:01:42.828]         {
[17:01:42.828]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.828]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.828]             }
[17:01:42.828]             base::options(...future.oldOptions)
[17:01:42.828]             if (.Platform$OS.type == "windows") {
[17:01:42.828]                 old_names <- names(...future.oldEnvVars)
[17:01:42.828]                 envs <- base::Sys.getenv()
[17:01:42.828]                 names <- names(envs)
[17:01:42.828]                 common <- intersect(names, old_names)
[17:01:42.828]                 added <- setdiff(names, old_names)
[17:01:42.828]                 removed <- setdiff(old_names, names)
[17:01:42.828]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.828]                   envs[common]]
[17:01:42.828]                 NAMES <- toupper(changed)
[17:01:42.828]                 args <- list()
[17:01:42.828]                 for (kk in seq_along(NAMES)) {
[17:01:42.828]                   name <- changed[[kk]]
[17:01:42.828]                   NAME <- NAMES[[kk]]
[17:01:42.828]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.828]                     next
[17:01:42.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.828]                 }
[17:01:42.828]                 NAMES <- toupper(added)
[17:01:42.828]                 for (kk in seq_along(NAMES)) {
[17:01:42.828]                   name <- added[[kk]]
[17:01:42.828]                   NAME <- NAMES[[kk]]
[17:01:42.828]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.828]                     next
[17:01:42.828]                   args[[name]] <- ""
[17:01:42.828]                 }
[17:01:42.828]                 NAMES <- toupper(removed)
[17:01:42.828]                 for (kk in seq_along(NAMES)) {
[17:01:42.828]                   name <- removed[[kk]]
[17:01:42.828]                   NAME <- NAMES[[kk]]
[17:01:42.828]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.828]                     next
[17:01:42.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.828]                 }
[17:01:42.828]                 if (length(args) > 0) 
[17:01:42.828]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.828]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.828]             }
[17:01:42.828]             else {
[17:01:42.828]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.828]             }
[17:01:42.828]             {
[17:01:42.828]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.828]                   0L) {
[17:01:42.828]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.828]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.828]                   base::options(opts)
[17:01:42.828]                 }
[17:01:42.828]                 {
[17:01:42.828]                   {
[17:01:42.828]                     NULL
[17:01:42.828]                     RNGkind("Mersenne-Twister")
[17:01:42.828]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.828]                       inherits = FALSE)
[17:01:42.828]                   }
[17:01:42.828]                   options(future.plan = NULL)
[17:01:42.828]                   if (is.na(NA_character_)) 
[17:01:42.828]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.828]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.828]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.828]                     .init = FALSE)
[17:01:42.828]                 }
[17:01:42.828]             }
[17:01:42.828]         }
[17:01:42.828]     })
[17:01:42.828]     if (TRUE) {
[17:01:42.828]         base::sink(type = "output", split = FALSE)
[17:01:42.828]         if (TRUE) {
[17:01:42.828]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.828]         }
[17:01:42.828]         else {
[17:01:42.828]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.828]         }
[17:01:42.828]         base::close(...future.stdout)
[17:01:42.828]         ...future.stdout <- NULL
[17:01:42.828]     }
[17:01:42.828]     ...future.result$conditions <- ...future.conditions
[17:01:42.828]     ...future.result$finished <- base::Sys.time()
[17:01:42.828]     ...future.result
[17:01:42.828] }
[17:01:42.830] plan(): Setting new future strategy stack:
[17:01:42.830] List of future strategies:
[17:01:42.830] 1. sequential:
[17:01:42.830]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.830]    - tweaked: FALSE
[17:01:42.830]    - call: NULL
[17:01:42.830] plan(): nbrOfWorkers() = 1
[17:01:42.831] plan(): Setting new future strategy stack:
[17:01:42.831] List of future strategies:
[17:01:42.831] 1. sequential:
[17:01:42.831]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.831]    - tweaked: FALSE
[17:01:42.831]    - call: future::plan("sequential")
[17:01:42.832] plan(): nbrOfWorkers() = 1
[17:01:42.832] SequentialFuture started (and completed)
[17:01:42.832] signalConditions() ...
[17:01:42.832]  - include = ‘immediateCondition’
[17:01:42.832]  - exclude = 
[17:01:42.832]  - resignal = FALSE
[17:01:42.832]  - Number of conditions: 1
[17:01:42.832] signalConditions() ... done
[17:01:42.833] - Launch lazy future ... done
[17:01:42.833] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[17:01:42.833] getGlobalsAndPackages() ...
[17:01:42.833] Searching for globals...
[17:01:42.834] - globals found: [2] ‘{’, ‘stop’
[17:01:42.834] Searching for globals ... DONE
[17:01:42.834] Resolving globals: FALSE
[17:01:42.835] 
[17:01:42.835] 
[17:01:42.835] getGlobalsAndPackages() ... DONE
[17:01:42.835] run() for ‘Future’ ...
[17:01:42.835] - state: ‘created’
[17:01:42.835] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.836] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.836] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.836]   - Field: ‘label’
[17:01:42.836]   - Field: ‘local’
[17:01:42.836]   - Field: ‘owner’
[17:01:42.836]   - Field: ‘envir’
[17:01:42.836]   - Field: ‘packages’
[17:01:42.836]   - Field: ‘gc’
[17:01:42.836]   - Field: ‘conditions’
[17:01:42.836]   - Field: ‘expr’
[17:01:42.836]   - Field: ‘uuid’
[17:01:42.837]   - Field: ‘seed’
[17:01:42.837]   - Field: ‘version’
[17:01:42.837]   - Field: ‘result’
[17:01:42.837]   - Field: ‘asynchronous’
[17:01:42.837]   - Field: ‘calls’
[17:01:42.837]   - Field: ‘globals’
[17:01:42.837]   - Field: ‘stdout’
[17:01:42.837]   - Field: ‘earlySignal’
[17:01:42.837]   - Field: ‘lazy’
[17:01:42.837]   - Field: ‘state’
[17:01:42.837] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.837] - Launch lazy future ...
[17:01:42.838] Packages needed by the future expression (n = 0): <none>
[17:01:42.838] Packages needed by future strategies (n = 0): <none>
[17:01:42.838] {
[17:01:42.838]     {
[17:01:42.838]         {
[17:01:42.838]             ...future.startTime <- base::Sys.time()
[17:01:42.838]             {
[17:01:42.838]                 {
[17:01:42.838]                   {
[17:01:42.838]                     base::local({
[17:01:42.838]                       has_future <- base::requireNamespace("future", 
[17:01:42.838]                         quietly = TRUE)
[17:01:42.838]                       if (has_future) {
[17:01:42.838]                         ns <- base::getNamespace("future")
[17:01:42.838]                         version <- ns[[".package"]][["version"]]
[17:01:42.838]                         if (is.null(version)) 
[17:01:42.838]                           version <- utils::packageVersion("future")
[17:01:42.838]                       }
[17:01:42.838]                       else {
[17:01:42.838]                         version <- NULL
[17:01:42.838]                       }
[17:01:42.838]                       if (!has_future || version < "1.8.0") {
[17:01:42.838]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.838]                           "", base::R.version$version.string), 
[17:01:42.838]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.838]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.838]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.838]                             "release", "version")], collapse = " "), 
[17:01:42.838]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.838]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.838]                           info)
[17:01:42.838]                         info <- base::paste(info, collapse = "; ")
[17:01:42.838]                         if (!has_future) {
[17:01:42.838]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.838]                             info)
[17:01:42.838]                         }
[17:01:42.838]                         else {
[17:01:42.838]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.838]                             info, version)
[17:01:42.838]                         }
[17:01:42.838]                         base::stop(msg)
[17:01:42.838]                       }
[17:01:42.838]                     })
[17:01:42.838]                   }
[17:01:42.838]                   ...future.strategy.old <- future::plan("list")
[17:01:42.838]                   options(future.plan = NULL)
[17:01:42.838]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.838]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.838]                 }
[17:01:42.838]                 ...future.workdir <- getwd()
[17:01:42.838]             }
[17:01:42.838]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.838]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.838]         }
[17:01:42.838]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.838]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.838]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.838]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.838]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.838]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.838]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.838]             base::names(...future.oldOptions))
[17:01:42.838]     }
[17:01:42.838]     if (FALSE) {
[17:01:42.838]     }
[17:01:42.838]     else {
[17:01:42.838]         if (TRUE) {
[17:01:42.838]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.838]                 open = "w")
[17:01:42.838]         }
[17:01:42.838]         else {
[17:01:42.838]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.838]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.838]         }
[17:01:42.838]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.838]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.838]             base::sink(type = "output", split = FALSE)
[17:01:42.838]             base::close(...future.stdout)
[17:01:42.838]         }, add = TRUE)
[17:01:42.838]     }
[17:01:42.838]     ...future.frame <- base::sys.nframe()
[17:01:42.838]     ...future.conditions <- base::list()
[17:01:42.838]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.838]     if (FALSE) {
[17:01:42.838]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.838]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.838]     }
[17:01:42.838]     ...future.result <- base::tryCatch({
[17:01:42.838]         base::withCallingHandlers({
[17:01:42.838]             ...future.value <- base::withVisible(base::local({
[17:01:42.838]                 42L
[17:01:42.838]                 stop("Woops")
[17:01:42.838]             }))
[17:01:42.838]             future::FutureResult(value = ...future.value$value, 
[17:01:42.838]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.838]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.838]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.838]                     ...future.globalenv.names))
[17:01:42.838]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.838]         }, condition = base::local({
[17:01:42.838]             c <- base::c
[17:01:42.838]             inherits <- base::inherits
[17:01:42.838]             invokeRestart <- base::invokeRestart
[17:01:42.838]             length <- base::length
[17:01:42.838]             list <- base::list
[17:01:42.838]             seq.int <- base::seq.int
[17:01:42.838]             signalCondition <- base::signalCondition
[17:01:42.838]             sys.calls <- base::sys.calls
[17:01:42.838]             `[[` <- base::`[[`
[17:01:42.838]             `+` <- base::`+`
[17:01:42.838]             `<<-` <- base::`<<-`
[17:01:42.838]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.838]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.838]                   3L)]
[17:01:42.838]             }
[17:01:42.838]             function(cond) {
[17:01:42.838]                 is_error <- inherits(cond, "error")
[17:01:42.838]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.838]                   NULL)
[17:01:42.838]                 if (is_error) {
[17:01:42.838]                   sessionInformation <- function() {
[17:01:42.838]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.838]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.838]                       search = base::search(), system = base::Sys.info())
[17:01:42.838]                   }
[17:01:42.838]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.838]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.838]                     cond$call), session = sessionInformation(), 
[17:01:42.838]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.838]                   signalCondition(cond)
[17:01:42.838]                 }
[17:01:42.838]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.838]                 "immediateCondition"))) {
[17:01:42.838]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.838]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.838]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.838]                   if (TRUE && !signal) {
[17:01:42.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.838]                     {
[17:01:42.838]                       inherits <- base::inherits
[17:01:42.838]                       invokeRestart <- base::invokeRestart
[17:01:42.838]                       is.null <- base::is.null
[17:01:42.838]                       muffled <- FALSE
[17:01:42.838]                       if (inherits(cond, "message")) {
[17:01:42.838]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.838]                         if (muffled) 
[17:01:42.838]                           invokeRestart("muffleMessage")
[17:01:42.838]                       }
[17:01:42.838]                       else if (inherits(cond, "warning")) {
[17:01:42.838]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.838]                         if (muffled) 
[17:01:42.838]                           invokeRestart("muffleWarning")
[17:01:42.838]                       }
[17:01:42.838]                       else if (inherits(cond, "condition")) {
[17:01:42.838]                         if (!is.null(pattern)) {
[17:01:42.838]                           computeRestarts <- base::computeRestarts
[17:01:42.838]                           grepl <- base::grepl
[17:01:42.838]                           restarts <- computeRestarts(cond)
[17:01:42.838]                           for (restart in restarts) {
[17:01:42.838]                             name <- restart$name
[17:01:42.838]                             if (is.null(name)) 
[17:01:42.838]                               next
[17:01:42.838]                             if (!grepl(pattern, name)) 
[17:01:42.838]                               next
[17:01:42.838]                             invokeRestart(restart)
[17:01:42.838]                             muffled <- TRUE
[17:01:42.838]                             break
[17:01:42.838]                           }
[17:01:42.838]                         }
[17:01:42.838]                       }
[17:01:42.838]                       invisible(muffled)
[17:01:42.838]                     }
[17:01:42.838]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.838]                   }
[17:01:42.838]                 }
[17:01:42.838]                 else {
[17:01:42.838]                   if (TRUE) {
[17:01:42.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.838]                     {
[17:01:42.838]                       inherits <- base::inherits
[17:01:42.838]                       invokeRestart <- base::invokeRestart
[17:01:42.838]                       is.null <- base::is.null
[17:01:42.838]                       muffled <- FALSE
[17:01:42.838]                       if (inherits(cond, "message")) {
[17:01:42.838]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.838]                         if (muffled) 
[17:01:42.838]                           invokeRestart("muffleMessage")
[17:01:42.838]                       }
[17:01:42.838]                       else if (inherits(cond, "warning")) {
[17:01:42.838]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.838]                         if (muffled) 
[17:01:42.838]                           invokeRestart("muffleWarning")
[17:01:42.838]                       }
[17:01:42.838]                       else if (inherits(cond, "condition")) {
[17:01:42.838]                         if (!is.null(pattern)) {
[17:01:42.838]                           computeRestarts <- base::computeRestarts
[17:01:42.838]                           grepl <- base::grepl
[17:01:42.838]                           restarts <- computeRestarts(cond)
[17:01:42.838]                           for (restart in restarts) {
[17:01:42.838]                             name <- restart$name
[17:01:42.838]                             if (is.null(name)) 
[17:01:42.838]                               next
[17:01:42.838]                             if (!grepl(pattern, name)) 
[17:01:42.838]                               next
[17:01:42.838]                             invokeRestart(restart)
[17:01:42.838]                             muffled <- TRUE
[17:01:42.838]                             break
[17:01:42.838]                           }
[17:01:42.838]                         }
[17:01:42.838]                       }
[17:01:42.838]                       invisible(muffled)
[17:01:42.838]                     }
[17:01:42.838]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.838]                   }
[17:01:42.838]                 }
[17:01:42.838]             }
[17:01:42.838]         }))
[17:01:42.838]     }, error = function(ex) {
[17:01:42.838]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.838]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.838]                 ...future.rng), started = ...future.startTime, 
[17:01:42.838]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.838]             version = "1.8"), class = "FutureResult")
[17:01:42.838]     }, finally = {
[17:01:42.838]         if (!identical(...future.workdir, getwd())) 
[17:01:42.838]             setwd(...future.workdir)
[17:01:42.838]         {
[17:01:42.838]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.838]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.838]             }
[17:01:42.838]             base::options(...future.oldOptions)
[17:01:42.838]             if (.Platform$OS.type == "windows") {
[17:01:42.838]                 old_names <- names(...future.oldEnvVars)
[17:01:42.838]                 envs <- base::Sys.getenv()
[17:01:42.838]                 names <- names(envs)
[17:01:42.838]                 common <- intersect(names, old_names)
[17:01:42.838]                 added <- setdiff(names, old_names)
[17:01:42.838]                 removed <- setdiff(old_names, names)
[17:01:42.838]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.838]                   envs[common]]
[17:01:42.838]                 NAMES <- toupper(changed)
[17:01:42.838]                 args <- list()
[17:01:42.838]                 for (kk in seq_along(NAMES)) {
[17:01:42.838]                   name <- changed[[kk]]
[17:01:42.838]                   NAME <- NAMES[[kk]]
[17:01:42.838]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.838]                     next
[17:01:42.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.838]                 }
[17:01:42.838]                 NAMES <- toupper(added)
[17:01:42.838]                 for (kk in seq_along(NAMES)) {
[17:01:42.838]                   name <- added[[kk]]
[17:01:42.838]                   NAME <- NAMES[[kk]]
[17:01:42.838]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.838]                     next
[17:01:42.838]                   args[[name]] <- ""
[17:01:42.838]                 }
[17:01:42.838]                 NAMES <- toupper(removed)
[17:01:42.838]                 for (kk in seq_along(NAMES)) {
[17:01:42.838]                   name <- removed[[kk]]
[17:01:42.838]                   NAME <- NAMES[[kk]]
[17:01:42.838]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.838]                     next
[17:01:42.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.838]                 }
[17:01:42.838]                 if (length(args) > 0) 
[17:01:42.838]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.838]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.838]             }
[17:01:42.838]             else {
[17:01:42.838]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.838]             }
[17:01:42.838]             {
[17:01:42.838]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.838]                   0L) {
[17:01:42.838]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.838]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.838]                   base::options(opts)
[17:01:42.838]                 }
[17:01:42.838]                 {
[17:01:42.838]                   {
[17:01:42.838]                     NULL
[17:01:42.838]                     RNGkind("Mersenne-Twister")
[17:01:42.838]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.838]                       inherits = FALSE)
[17:01:42.838]                   }
[17:01:42.838]                   options(future.plan = NULL)
[17:01:42.838]                   if (is.na(NA_character_)) 
[17:01:42.838]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.838]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.838]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.838]                     .init = FALSE)
[17:01:42.838]                 }
[17:01:42.838]             }
[17:01:42.838]         }
[17:01:42.838]     })
[17:01:42.838]     if (TRUE) {
[17:01:42.838]         base::sink(type = "output", split = FALSE)
[17:01:42.838]         if (TRUE) {
[17:01:42.838]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.838]         }
[17:01:42.838]         else {
[17:01:42.838]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.838]         }
[17:01:42.838]         base::close(...future.stdout)
[17:01:42.838]         ...future.stdout <- NULL
[17:01:42.838]     }
[17:01:42.838]     ...future.result$conditions <- ...future.conditions
[17:01:42.838]     ...future.result$finished <- base::Sys.time()
[17:01:42.838]     ...future.result
[17:01:42.838] }
[17:01:42.842] plan(): Setting new future strategy stack:
[17:01:42.842] List of future strategies:
[17:01:42.842] 1. sequential:
[17:01:42.842]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.842]    - tweaked: FALSE
[17:01:42.842]    - call: NULL
[17:01:42.843] plan(): nbrOfWorkers() = 1
[17:01:42.844] plan(): Setting new future strategy stack:
[17:01:42.844] List of future strategies:
[17:01:42.844] 1. sequential:
[17:01:42.844]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.844]    - tweaked: FALSE
[17:01:42.844]    - call: future::plan("sequential")
[17:01:42.844] plan(): nbrOfWorkers() = 1
[17:01:42.844] SequentialFuture started (and completed)
[17:01:42.844] signalConditions() ...
[17:01:42.845]  - include = ‘immediateCondition’
[17:01:42.845]  - exclude = 
[17:01:42.845]  - resignal = FALSE
[17:01:42.845]  - Number of conditions: 1
[17:01:42.845] signalConditions() ... done
[17:01:42.845] - Launch lazy future ... done
[17:01:42.845] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[17:01:42.845] resolved() for ‘SequentialFuture’ ...
[17:01:42.846] - state: ‘finished’
[17:01:42.846] - run: TRUE
[17:01:42.846] - result: ‘FutureResult’
[17:01:42.846] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[17:01:42.846] getGlobalsAndPackages() ...
[17:01:42.847] Searching for globals...
[17:01:42.847] - globals found: [2] ‘{’, ‘stop’
[17:01:42.848] Searching for globals ... DONE
[17:01:42.848] Resolving globals: FALSE
[17:01:42.848] 
[17:01:42.848] 
[17:01:42.848] getGlobalsAndPackages() ... DONE
[17:01:42.848] run() for ‘Future’ ...
[17:01:42.849] - state: ‘created’
[17:01:42.849] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.849] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.849] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.849]   - Field: ‘label’
[17:01:42.849]   - Field: ‘local’
[17:01:42.849]   - Field: ‘owner’
[17:01:42.849]   - Field: ‘envir’
[17:01:42.849]   - Field: ‘packages’
[17:01:42.850]   - Field: ‘gc’
[17:01:42.850]   - Field: ‘conditions’
[17:01:42.850]   - Field: ‘expr’
[17:01:42.850]   - Field: ‘uuid’
[17:01:42.850]   - Field: ‘seed’
[17:01:42.850]   - Field: ‘version’
[17:01:42.850]   - Field: ‘result’
[17:01:42.850]   - Field: ‘asynchronous’
[17:01:42.850]   - Field: ‘calls’
[17:01:42.850]   - Field: ‘globals’
[17:01:42.850]   - Field: ‘stdout’
[17:01:42.851]   - Field: ‘earlySignal’
[17:01:42.851]   - Field: ‘lazy’
[17:01:42.851]   - Field: ‘state’
[17:01:42.851] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.851] - Launch lazy future ...
[17:01:42.851] Packages needed by the future expression (n = 0): <none>
[17:01:42.851] Packages needed by future strategies (n = 0): <none>
[17:01:42.852] {
[17:01:42.852]     {
[17:01:42.852]         {
[17:01:42.852]             ...future.startTime <- base::Sys.time()
[17:01:42.852]             {
[17:01:42.852]                 {
[17:01:42.852]                   {
[17:01:42.852]                     base::local({
[17:01:42.852]                       has_future <- base::requireNamespace("future", 
[17:01:42.852]                         quietly = TRUE)
[17:01:42.852]                       if (has_future) {
[17:01:42.852]                         ns <- base::getNamespace("future")
[17:01:42.852]                         version <- ns[[".package"]][["version"]]
[17:01:42.852]                         if (is.null(version)) 
[17:01:42.852]                           version <- utils::packageVersion("future")
[17:01:42.852]                       }
[17:01:42.852]                       else {
[17:01:42.852]                         version <- NULL
[17:01:42.852]                       }
[17:01:42.852]                       if (!has_future || version < "1.8.0") {
[17:01:42.852]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.852]                           "", base::R.version$version.string), 
[17:01:42.852]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.852]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.852]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.852]                             "release", "version")], collapse = " "), 
[17:01:42.852]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.852]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.852]                           info)
[17:01:42.852]                         info <- base::paste(info, collapse = "; ")
[17:01:42.852]                         if (!has_future) {
[17:01:42.852]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.852]                             info)
[17:01:42.852]                         }
[17:01:42.852]                         else {
[17:01:42.852]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.852]                             info, version)
[17:01:42.852]                         }
[17:01:42.852]                         base::stop(msg)
[17:01:42.852]                       }
[17:01:42.852]                     })
[17:01:42.852]                   }
[17:01:42.852]                   ...future.strategy.old <- future::plan("list")
[17:01:42.852]                   options(future.plan = NULL)
[17:01:42.852]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.852]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.852]                 }
[17:01:42.852]                 ...future.workdir <- getwd()
[17:01:42.852]             }
[17:01:42.852]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.852]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.852]         }
[17:01:42.852]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.852]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.852]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.852]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.852]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.852]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.852]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.852]             base::names(...future.oldOptions))
[17:01:42.852]     }
[17:01:42.852]     if (FALSE) {
[17:01:42.852]     }
[17:01:42.852]     else {
[17:01:42.852]         if (TRUE) {
[17:01:42.852]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.852]                 open = "w")
[17:01:42.852]         }
[17:01:42.852]         else {
[17:01:42.852]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.852]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.852]         }
[17:01:42.852]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.852]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.852]             base::sink(type = "output", split = FALSE)
[17:01:42.852]             base::close(...future.stdout)
[17:01:42.852]         }, add = TRUE)
[17:01:42.852]     }
[17:01:42.852]     ...future.frame <- base::sys.nframe()
[17:01:42.852]     ...future.conditions <- base::list()
[17:01:42.852]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.852]     if (FALSE) {
[17:01:42.852]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.852]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.852]     }
[17:01:42.852]     ...future.result <- base::tryCatch({
[17:01:42.852]         base::withCallingHandlers({
[17:01:42.852]             ...future.value <- base::withVisible(base::local({
[17:01:42.852]                 42L
[17:01:42.852]                 stop("Woops")
[17:01:42.852]             }))
[17:01:42.852]             future::FutureResult(value = ...future.value$value, 
[17:01:42.852]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.852]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.852]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.852]                     ...future.globalenv.names))
[17:01:42.852]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.852]         }, condition = base::local({
[17:01:42.852]             c <- base::c
[17:01:42.852]             inherits <- base::inherits
[17:01:42.852]             invokeRestart <- base::invokeRestart
[17:01:42.852]             length <- base::length
[17:01:42.852]             list <- base::list
[17:01:42.852]             seq.int <- base::seq.int
[17:01:42.852]             signalCondition <- base::signalCondition
[17:01:42.852]             sys.calls <- base::sys.calls
[17:01:42.852]             `[[` <- base::`[[`
[17:01:42.852]             `+` <- base::`+`
[17:01:42.852]             `<<-` <- base::`<<-`
[17:01:42.852]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.852]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.852]                   3L)]
[17:01:42.852]             }
[17:01:42.852]             function(cond) {
[17:01:42.852]                 is_error <- inherits(cond, "error")
[17:01:42.852]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.852]                   NULL)
[17:01:42.852]                 if (is_error) {
[17:01:42.852]                   sessionInformation <- function() {
[17:01:42.852]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.852]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.852]                       search = base::search(), system = base::Sys.info())
[17:01:42.852]                   }
[17:01:42.852]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.852]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.852]                     cond$call), session = sessionInformation(), 
[17:01:42.852]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.852]                   signalCondition(cond)
[17:01:42.852]                 }
[17:01:42.852]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.852]                 "immediateCondition"))) {
[17:01:42.852]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.852]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.852]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.852]                   if (TRUE && !signal) {
[17:01:42.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.852]                     {
[17:01:42.852]                       inherits <- base::inherits
[17:01:42.852]                       invokeRestart <- base::invokeRestart
[17:01:42.852]                       is.null <- base::is.null
[17:01:42.852]                       muffled <- FALSE
[17:01:42.852]                       if (inherits(cond, "message")) {
[17:01:42.852]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.852]                         if (muffled) 
[17:01:42.852]                           invokeRestart("muffleMessage")
[17:01:42.852]                       }
[17:01:42.852]                       else if (inherits(cond, "warning")) {
[17:01:42.852]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.852]                         if (muffled) 
[17:01:42.852]                           invokeRestart("muffleWarning")
[17:01:42.852]                       }
[17:01:42.852]                       else if (inherits(cond, "condition")) {
[17:01:42.852]                         if (!is.null(pattern)) {
[17:01:42.852]                           computeRestarts <- base::computeRestarts
[17:01:42.852]                           grepl <- base::grepl
[17:01:42.852]                           restarts <- computeRestarts(cond)
[17:01:42.852]                           for (restart in restarts) {
[17:01:42.852]                             name <- restart$name
[17:01:42.852]                             if (is.null(name)) 
[17:01:42.852]                               next
[17:01:42.852]                             if (!grepl(pattern, name)) 
[17:01:42.852]                               next
[17:01:42.852]                             invokeRestart(restart)
[17:01:42.852]                             muffled <- TRUE
[17:01:42.852]                             break
[17:01:42.852]                           }
[17:01:42.852]                         }
[17:01:42.852]                       }
[17:01:42.852]                       invisible(muffled)
[17:01:42.852]                     }
[17:01:42.852]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.852]                   }
[17:01:42.852]                 }
[17:01:42.852]                 else {
[17:01:42.852]                   if (TRUE) {
[17:01:42.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.852]                     {
[17:01:42.852]                       inherits <- base::inherits
[17:01:42.852]                       invokeRestart <- base::invokeRestart
[17:01:42.852]                       is.null <- base::is.null
[17:01:42.852]                       muffled <- FALSE
[17:01:42.852]                       if (inherits(cond, "message")) {
[17:01:42.852]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.852]                         if (muffled) 
[17:01:42.852]                           invokeRestart("muffleMessage")
[17:01:42.852]                       }
[17:01:42.852]                       else if (inherits(cond, "warning")) {
[17:01:42.852]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.852]                         if (muffled) 
[17:01:42.852]                           invokeRestart("muffleWarning")
[17:01:42.852]                       }
[17:01:42.852]                       else if (inherits(cond, "condition")) {
[17:01:42.852]                         if (!is.null(pattern)) {
[17:01:42.852]                           computeRestarts <- base::computeRestarts
[17:01:42.852]                           grepl <- base::grepl
[17:01:42.852]                           restarts <- computeRestarts(cond)
[17:01:42.852]                           for (restart in restarts) {
[17:01:42.852]                             name <- restart$name
[17:01:42.852]                             if (is.null(name)) 
[17:01:42.852]                               next
[17:01:42.852]                             if (!grepl(pattern, name)) 
[17:01:42.852]                               next
[17:01:42.852]                             invokeRestart(restart)
[17:01:42.852]                             muffled <- TRUE
[17:01:42.852]                             break
[17:01:42.852]                           }
[17:01:42.852]                         }
[17:01:42.852]                       }
[17:01:42.852]                       invisible(muffled)
[17:01:42.852]                     }
[17:01:42.852]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.852]                   }
[17:01:42.852]                 }
[17:01:42.852]             }
[17:01:42.852]         }))
[17:01:42.852]     }, error = function(ex) {
[17:01:42.852]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.852]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.852]                 ...future.rng), started = ...future.startTime, 
[17:01:42.852]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.852]             version = "1.8"), class = "FutureResult")
[17:01:42.852]     }, finally = {
[17:01:42.852]         if (!identical(...future.workdir, getwd())) 
[17:01:42.852]             setwd(...future.workdir)
[17:01:42.852]         {
[17:01:42.852]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.852]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.852]             }
[17:01:42.852]             base::options(...future.oldOptions)
[17:01:42.852]             if (.Platform$OS.type == "windows") {
[17:01:42.852]                 old_names <- names(...future.oldEnvVars)
[17:01:42.852]                 envs <- base::Sys.getenv()
[17:01:42.852]                 names <- names(envs)
[17:01:42.852]                 common <- intersect(names, old_names)
[17:01:42.852]                 added <- setdiff(names, old_names)
[17:01:42.852]                 removed <- setdiff(old_names, names)
[17:01:42.852]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.852]                   envs[common]]
[17:01:42.852]                 NAMES <- toupper(changed)
[17:01:42.852]                 args <- list()
[17:01:42.852]                 for (kk in seq_along(NAMES)) {
[17:01:42.852]                   name <- changed[[kk]]
[17:01:42.852]                   NAME <- NAMES[[kk]]
[17:01:42.852]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.852]                     next
[17:01:42.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.852]                 }
[17:01:42.852]                 NAMES <- toupper(added)
[17:01:42.852]                 for (kk in seq_along(NAMES)) {
[17:01:42.852]                   name <- added[[kk]]
[17:01:42.852]                   NAME <- NAMES[[kk]]
[17:01:42.852]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.852]                     next
[17:01:42.852]                   args[[name]] <- ""
[17:01:42.852]                 }
[17:01:42.852]                 NAMES <- toupper(removed)
[17:01:42.852]                 for (kk in seq_along(NAMES)) {
[17:01:42.852]                   name <- removed[[kk]]
[17:01:42.852]                   NAME <- NAMES[[kk]]
[17:01:42.852]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.852]                     next
[17:01:42.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.852]                 }
[17:01:42.852]                 if (length(args) > 0) 
[17:01:42.852]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.852]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.852]             }
[17:01:42.852]             else {
[17:01:42.852]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.852]             }
[17:01:42.852]             {
[17:01:42.852]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.852]                   0L) {
[17:01:42.852]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.852]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.852]                   base::options(opts)
[17:01:42.852]                 }
[17:01:42.852]                 {
[17:01:42.852]                   {
[17:01:42.852]                     NULL
[17:01:42.852]                     RNGkind("Mersenne-Twister")
[17:01:42.852]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.852]                       inherits = FALSE)
[17:01:42.852]                   }
[17:01:42.852]                   options(future.plan = NULL)
[17:01:42.852]                   if (is.na(NA_character_)) 
[17:01:42.852]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.852]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.852]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.852]                     .init = FALSE)
[17:01:42.852]                 }
[17:01:42.852]             }
[17:01:42.852]         }
[17:01:42.852]     })
[17:01:42.852]     if (TRUE) {
[17:01:42.852]         base::sink(type = "output", split = FALSE)
[17:01:42.852]         if (TRUE) {
[17:01:42.852]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.852]         }
[17:01:42.852]         else {
[17:01:42.852]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.852]         }
[17:01:42.852]         base::close(...future.stdout)
[17:01:42.852]         ...future.stdout <- NULL
[17:01:42.852]     }
[17:01:42.852]     ...future.result$conditions <- ...future.conditions
[17:01:42.852]     ...future.result$finished <- base::Sys.time()
[17:01:42.852]     ...future.result
[17:01:42.852] }
[17:01:42.853] plan(): Setting new future strategy stack:
[17:01:42.853] List of future strategies:
[17:01:42.853] 1. sequential:
[17:01:42.853]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.853]    - tweaked: FALSE
[17:01:42.853]    - call: NULL
[17:01:42.854] plan(): nbrOfWorkers() = 1
[17:01:42.855] plan(): Setting new future strategy stack:
[17:01:42.855] List of future strategies:
[17:01:42.855] 1. sequential:
[17:01:42.855]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.855]    - tweaked: FALSE
[17:01:42.855]    - call: future::plan("sequential")
[17:01:42.855] plan(): nbrOfWorkers() = 1
[17:01:42.856] SequentialFuture started (and completed)
[17:01:42.856] signalConditions() ...
[17:01:42.856]  - include = ‘immediateCondition’
[17:01:42.856]  - exclude = 
[17:01:42.856]  - resignal = FALSE
[17:01:42.856]  - Number of conditions: 1
[17:01:42.856] signalConditions() ... done
[17:01:42.856] - Launch lazy future ... done
[17:01:42.856] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[17:01:42.856] getGlobalsAndPackages() ...
[17:01:42.857] Searching for globals...
[17:01:42.857] - globals found: [2] ‘{’, ‘stop’
[17:01:42.858] Searching for globals ... DONE
[17:01:42.858] Resolving globals: FALSE
[17:01:42.858] 
[17:01:42.858] 
[17:01:42.858] getGlobalsAndPackages() ... DONE
[17:01:42.858] run() for ‘Future’ ...
[17:01:42.859] - state: ‘created’
[17:01:42.859] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.859] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.859] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.859]   - Field: ‘label’
[17:01:42.859]   - Field: ‘local’
[17:01:42.859]   - Field: ‘owner’
[17:01:42.859]   - Field: ‘envir’
[17:01:42.860]   - Field: ‘packages’
[17:01:42.860]   - Field: ‘gc’
[17:01:42.860]   - Field: ‘conditions’
[17:01:42.860]   - Field: ‘expr’
[17:01:42.860]   - Field: ‘uuid’
[17:01:42.860]   - Field: ‘seed’
[17:01:42.860]   - Field: ‘version’
[17:01:42.860]   - Field: ‘result’
[17:01:42.860]   - Field: ‘asynchronous’
[17:01:42.860]   - Field: ‘calls’
[17:01:42.860]   - Field: ‘globals’
[17:01:42.860]   - Field: ‘stdout’
[17:01:42.861]   - Field: ‘earlySignal’
[17:01:42.861]   - Field: ‘lazy’
[17:01:42.861]   - Field: ‘state’
[17:01:42.861] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.861] - Launch lazy future ...
[17:01:42.861] Packages needed by the future expression (n = 0): <none>
[17:01:42.861] Packages needed by future strategies (n = 0): <none>
[17:01:42.862] {
[17:01:42.862]     {
[17:01:42.862]         {
[17:01:42.862]             ...future.startTime <- base::Sys.time()
[17:01:42.862]             {
[17:01:42.862]                 {
[17:01:42.862]                   {
[17:01:42.862]                     base::local({
[17:01:42.862]                       has_future <- base::requireNamespace("future", 
[17:01:42.862]                         quietly = TRUE)
[17:01:42.862]                       if (has_future) {
[17:01:42.862]                         ns <- base::getNamespace("future")
[17:01:42.862]                         version <- ns[[".package"]][["version"]]
[17:01:42.862]                         if (is.null(version)) 
[17:01:42.862]                           version <- utils::packageVersion("future")
[17:01:42.862]                       }
[17:01:42.862]                       else {
[17:01:42.862]                         version <- NULL
[17:01:42.862]                       }
[17:01:42.862]                       if (!has_future || version < "1.8.0") {
[17:01:42.862]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.862]                           "", base::R.version$version.string), 
[17:01:42.862]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.862]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.862]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.862]                             "release", "version")], collapse = " "), 
[17:01:42.862]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.862]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.862]                           info)
[17:01:42.862]                         info <- base::paste(info, collapse = "; ")
[17:01:42.862]                         if (!has_future) {
[17:01:42.862]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.862]                             info)
[17:01:42.862]                         }
[17:01:42.862]                         else {
[17:01:42.862]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.862]                             info, version)
[17:01:42.862]                         }
[17:01:42.862]                         base::stop(msg)
[17:01:42.862]                       }
[17:01:42.862]                     })
[17:01:42.862]                   }
[17:01:42.862]                   ...future.strategy.old <- future::plan("list")
[17:01:42.862]                   options(future.plan = NULL)
[17:01:42.862]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.862]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.862]                 }
[17:01:42.862]                 ...future.workdir <- getwd()
[17:01:42.862]             }
[17:01:42.862]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.862]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.862]         }
[17:01:42.862]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.862]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.862]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.862]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.862]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.862]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.862]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.862]             base::names(...future.oldOptions))
[17:01:42.862]     }
[17:01:42.862]     if (FALSE) {
[17:01:42.862]     }
[17:01:42.862]     else {
[17:01:42.862]         if (TRUE) {
[17:01:42.862]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.862]                 open = "w")
[17:01:42.862]         }
[17:01:42.862]         else {
[17:01:42.862]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.862]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.862]         }
[17:01:42.862]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.862]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.862]             base::sink(type = "output", split = FALSE)
[17:01:42.862]             base::close(...future.stdout)
[17:01:42.862]         }, add = TRUE)
[17:01:42.862]     }
[17:01:42.862]     ...future.frame <- base::sys.nframe()
[17:01:42.862]     ...future.conditions <- base::list()
[17:01:42.862]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.862]     if (FALSE) {
[17:01:42.862]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.862]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.862]     }
[17:01:42.862]     ...future.result <- base::tryCatch({
[17:01:42.862]         base::withCallingHandlers({
[17:01:42.862]             ...future.value <- base::withVisible(base::local({
[17:01:42.862]                 42L
[17:01:42.862]                 stop("Woops")
[17:01:42.862]             }))
[17:01:42.862]             future::FutureResult(value = ...future.value$value, 
[17:01:42.862]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.862]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.862]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.862]                     ...future.globalenv.names))
[17:01:42.862]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.862]         }, condition = base::local({
[17:01:42.862]             c <- base::c
[17:01:42.862]             inherits <- base::inherits
[17:01:42.862]             invokeRestart <- base::invokeRestart
[17:01:42.862]             length <- base::length
[17:01:42.862]             list <- base::list
[17:01:42.862]             seq.int <- base::seq.int
[17:01:42.862]             signalCondition <- base::signalCondition
[17:01:42.862]             sys.calls <- base::sys.calls
[17:01:42.862]             `[[` <- base::`[[`
[17:01:42.862]             `+` <- base::`+`
[17:01:42.862]             `<<-` <- base::`<<-`
[17:01:42.862]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.862]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.862]                   3L)]
[17:01:42.862]             }
[17:01:42.862]             function(cond) {
[17:01:42.862]                 is_error <- inherits(cond, "error")
[17:01:42.862]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.862]                   NULL)
[17:01:42.862]                 if (is_error) {
[17:01:42.862]                   sessionInformation <- function() {
[17:01:42.862]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.862]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.862]                       search = base::search(), system = base::Sys.info())
[17:01:42.862]                   }
[17:01:42.862]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.862]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.862]                     cond$call), session = sessionInformation(), 
[17:01:42.862]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.862]                   signalCondition(cond)
[17:01:42.862]                 }
[17:01:42.862]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.862]                 "immediateCondition"))) {
[17:01:42.862]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.862]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.862]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.862]                   if (TRUE && !signal) {
[17:01:42.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.862]                     {
[17:01:42.862]                       inherits <- base::inherits
[17:01:42.862]                       invokeRestart <- base::invokeRestart
[17:01:42.862]                       is.null <- base::is.null
[17:01:42.862]                       muffled <- FALSE
[17:01:42.862]                       if (inherits(cond, "message")) {
[17:01:42.862]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.862]                         if (muffled) 
[17:01:42.862]                           invokeRestart("muffleMessage")
[17:01:42.862]                       }
[17:01:42.862]                       else if (inherits(cond, "warning")) {
[17:01:42.862]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.862]                         if (muffled) 
[17:01:42.862]                           invokeRestart("muffleWarning")
[17:01:42.862]                       }
[17:01:42.862]                       else if (inherits(cond, "condition")) {
[17:01:42.862]                         if (!is.null(pattern)) {
[17:01:42.862]                           computeRestarts <- base::computeRestarts
[17:01:42.862]                           grepl <- base::grepl
[17:01:42.862]                           restarts <- computeRestarts(cond)
[17:01:42.862]                           for (restart in restarts) {
[17:01:42.862]                             name <- restart$name
[17:01:42.862]                             if (is.null(name)) 
[17:01:42.862]                               next
[17:01:42.862]                             if (!grepl(pattern, name)) 
[17:01:42.862]                               next
[17:01:42.862]                             invokeRestart(restart)
[17:01:42.862]                             muffled <- TRUE
[17:01:42.862]                             break
[17:01:42.862]                           }
[17:01:42.862]                         }
[17:01:42.862]                       }
[17:01:42.862]                       invisible(muffled)
[17:01:42.862]                     }
[17:01:42.862]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.862]                   }
[17:01:42.862]                 }
[17:01:42.862]                 else {
[17:01:42.862]                   if (TRUE) {
[17:01:42.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.862]                     {
[17:01:42.862]                       inherits <- base::inherits
[17:01:42.862]                       invokeRestart <- base::invokeRestart
[17:01:42.862]                       is.null <- base::is.null
[17:01:42.862]                       muffled <- FALSE
[17:01:42.862]                       if (inherits(cond, "message")) {
[17:01:42.862]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.862]                         if (muffled) 
[17:01:42.862]                           invokeRestart("muffleMessage")
[17:01:42.862]                       }
[17:01:42.862]                       else if (inherits(cond, "warning")) {
[17:01:42.862]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.862]                         if (muffled) 
[17:01:42.862]                           invokeRestart("muffleWarning")
[17:01:42.862]                       }
[17:01:42.862]                       else if (inherits(cond, "condition")) {
[17:01:42.862]                         if (!is.null(pattern)) {
[17:01:42.862]                           computeRestarts <- base::computeRestarts
[17:01:42.862]                           grepl <- base::grepl
[17:01:42.862]                           restarts <- computeRestarts(cond)
[17:01:42.862]                           for (restart in restarts) {
[17:01:42.862]                             name <- restart$name
[17:01:42.862]                             if (is.null(name)) 
[17:01:42.862]                               next
[17:01:42.862]                             if (!grepl(pattern, name)) 
[17:01:42.862]                               next
[17:01:42.862]                             invokeRestart(restart)
[17:01:42.862]                             muffled <- TRUE
[17:01:42.862]                             break
[17:01:42.862]                           }
[17:01:42.862]                         }
[17:01:42.862]                       }
[17:01:42.862]                       invisible(muffled)
[17:01:42.862]                     }
[17:01:42.862]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.862]                   }
[17:01:42.862]                 }
[17:01:42.862]             }
[17:01:42.862]         }))
[17:01:42.862]     }, error = function(ex) {
[17:01:42.862]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.862]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.862]                 ...future.rng), started = ...future.startTime, 
[17:01:42.862]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.862]             version = "1.8"), class = "FutureResult")
[17:01:42.862]     }, finally = {
[17:01:42.862]         if (!identical(...future.workdir, getwd())) 
[17:01:42.862]             setwd(...future.workdir)
[17:01:42.862]         {
[17:01:42.862]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.862]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.862]             }
[17:01:42.862]             base::options(...future.oldOptions)
[17:01:42.862]             if (.Platform$OS.type == "windows") {
[17:01:42.862]                 old_names <- names(...future.oldEnvVars)
[17:01:42.862]                 envs <- base::Sys.getenv()
[17:01:42.862]                 names <- names(envs)
[17:01:42.862]                 common <- intersect(names, old_names)
[17:01:42.862]                 added <- setdiff(names, old_names)
[17:01:42.862]                 removed <- setdiff(old_names, names)
[17:01:42.862]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.862]                   envs[common]]
[17:01:42.862]                 NAMES <- toupper(changed)
[17:01:42.862]                 args <- list()
[17:01:42.862]                 for (kk in seq_along(NAMES)) {
[17:01:42.862]                   name <- changed[[kk]]
[17:01:42.862]                   NAME <- NAMES[[kk]]
[17:01:42.862]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.862]                     next
[17:01:42.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.862]                 }
[17:01:42.862]                 NAMES <- toupper(added)
[17:01:42.862]                 for (kk in seq_along(NAMES)) {
[17:01:42.862]                   name <- added[[kk]]
[17:01:42.862]                   NAME <- NAMES[[kk]]
[17:01:42.862]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.862]                     next
[17:01:42.862]                   args[[name]] <- ""
[17:01:42.862]                 }
[17:01:42.862]                 NAMES <- toupper(removed)
[17:01:42.862]                 for (kk in seq_along(NAMES)) {
[17:01:42.862]                   name <- removed[[kk]]
[17:01:42.862]                   NAME <- NAMES[[kk]]
[17:01:42.862]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.862]                     next
[17:01:42.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.862]                 }
[17:01:42.862]                 if (length(args) > 0) 
[17:01:42.862]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.862]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.862]             }
[17:01:42.862]             else {
[17:01:42.862]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.862]             }
[17:01:42.862]             {
[17:01:42.862]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.862]                   0L) {
[17:01:42.862]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.862]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.862]                   base::options(opts)
[17:01:42.862]                 }
[17:01:42.862]                 {
[17:01:42.862]                   {
[17:01:42.862]                     NULL
[17:01:42.862]                     RNGkind("Mersenne-Twister")
[17:01:42.862]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.862]                       inherits = FALSE)
[17:01:42.862]                   }
[17:01:42.862]                   options(future.plan = NULL)
[17:01:42.862]                   if (is.na(NA_character_)) 
[17:01:42.862]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.862]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.862]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.862]                     .init = FALSE)
[17:01:42.862]                 }
[17:01:42.862]             }
[17:01:42.862]         }
[17:01:42.862]     })
[17:01:42.862]     if (TRUE) {
[17:01:42.862]         base::sink(type = "output", split = FALSE)
[17:01:42.862]         if (TRUE) {
[17:01:42.862]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.862]         }
[17:01:42.862]         else {
[17:01:42.862]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.862]         }
[17:01:42.862]         base::close(...future.stdout)
[17:01:42.862]         ...future.stdout <- NULL
[17:01:42.862]     }
[17:01:42.862]     ...future.result$conditions <- ...future.conditions
[17:01:42.862]     ...future.result$finished <- base::Sys.time()
[17:01:42.862]     ...future.result
[17:01:42.862] }
[17:01:42.863] plan(): Setting new future strategy stack:
[17:01:42.863] List of future strategies:
[17:01:42.863] 1. sequential:
[17:01:42.863]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.863]    - tweaked: FALSE
[17:01:42.863]    - call: NULL
[17:01:42.864] plan(): nbrOfWorkers() = 1
[17:01:42.865] plan(): Setting new future strategy stack:
[17:01:42.865] List of future strategies:
[17:01:42.865] 1. sequential:
[17:01:42.865]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.865]    - tweaked: FALSE
[17:01:42.865]    - call: future::plan("sequential")
[17:01:42.865] plan(): nbrOfWorkers() = 1
[17:01:42.866] SequentialFuture started (and completed)
[17:01:42.866] signalConditions() ...
[17:01:42.866]  - include = ‘immediateCondition’
[17:01:42.866]  - exclude = 
[17:01:42.866]  - resignal = FALSE
[17:01:42.866]  - Number of conditions: 1
[17:01:42.866] signalConditions() ... done
[17:01:42.866] - Launch lazy future ... done
[17:01:42.866] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[17:01:42.867] resolve() on list ...
[17:01:42.867]  recursive: 0
[17:01:42.867]  length: 2
[17:01:42.867] 
[17:01:42.867] resolved() for ‘SequentialFuture’ ...
[17:01:42.867] - state: ‘finished’
[17:01:42.868] - run: TRUE
[17:01:42.868] - result: ‘FutureResult’
[17:01:42.868] resolved() for ‘SequentialFuture’ ... done
[17:01:42.868] Future #1
[17:01:42.868] signalConditions() ...
[17:01:42.868]  - include = ‘immediateCondition’
[17:01:42.868]  - exclude = 
[17:01:42.868]  - resignal = FALSE
[17:01:42.868]  - Number of conditions: 1
[17:01:42.868] signalConditions() ... done
[17:01:42.868] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:01:42.869] - nx: 2
[17:01:42.869] - relay: TRUE
[17:01:42.869] - stdout: TRUE
[17:01:42.869] - signal: FALSE
[17:01:42.869] - resignal: FALSE
[17:01:42.869] - force: TRUE
[17:01:42.869] - relayed: [n=2] FALSE, FALSE
[17:01:42.869] - queued futures: [n=2] FALSE, FALSE
[17:01:42.869]  - until=1
[17:01:42.869]  - relaying element #1
[17:01:42.869] signalConditions() ...
[17:01:42.869]  - include = ‘immediateCondition’
[17:01:42.870]  - exclude = 
[17:01:42.870]  - resignal = FALSE
[17:01:42.870]  - Number of conditions: 1
[17:01:42.870] signalConditions() ... done
[17:01:42.870] - relayed: [n=2] TRUE, FALSE
[17:01:42.870] - queued futures: [n=2] TRUE, FALSE
[17:01:42.870] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:01:42.870]  length: 1 (resolved future 1)
[17:01:42.870] resolved() for ‘SequentialFuture’ ...
[17:01:42.871] - state: ‘finished’
[17:01:42.871] - run: TRUE
[17:01:42.871] - result: ‘FutureResult’
[17:01:42.871] resolved() for ‘SequentialFuture’ ... done
[17:01:42.871] Future #2
[17:01:42.871] signalConditions() ...
[17:01:42.871]  - include = ‘immediateCondition’
[17:01:42.871]  - exclude = 
[17:01:42.871]  - resignal = FALSE
[17:01:42.871]  - Number of conditions: 1
[17:01:42.871] signalConditions() ... done
[17:01:42.872] signalConditionsASAP(SequentialFuture, pos=2) ...
[17:01:42.872] - nx: 2
[17:01:42.872] - relay: TRUE
[17:01:42.872] - stdout: TRUE
[17:01:42.872] - signal: FALSE
[17:01:42.872] - resignal: FALSE
[17:01:42.872] - force: TRUE
[17:01:42.872] - relayed: [n=2] TRUE, FALSE
[17:01:42.872] - queued futures: [n=2] TRUE, FALSE
[17:01:42.872]  - until=2
[17:01:42.872]  - relaying element #2
[17:01:42.873] signalConditions() ...
[17:01:42.873]  - include = ‘immediateCondition’
[17:01:42.873]  - exclude = 
[17:01:42.873]  - resignal = FALSE
[17:01:42.873]  - Number of conditions: 1
[17:01:42.873] signalConditions() ... done
[17:01:42.873] - relayed: [n=2] TRUE, TRUE
[17:01:42.873] - queued futures: [n=2] TRUE, TRUE
[17:01:42.873] signalConditionsASAP(SequentialFuture, pos=2) ... done
[17:01:42.873]  length: 0 (resolved future 2)
[17:01:42.873] Relaying remaining futures
[17:01:42.873] signalConditionsASAP(NULL, pos=0) ...
[17:01:42.874] - nx: 2
[17:01:42.874] - relay: TRUE
[17:01:42.874] - stdout: TRUE
[17:01:42.874] - signal: FALSE
[17:01:42.874] - resignal: FALSE
[17:01:42.876] - force: TRUE
[17:01:42.876] - relayed: [n=2] TRUE, TRUE
[17:01:42.876] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:01:42.876] - relayed: [n=2] TRUE, TRUE
[17:01:42.876] - queued futures: [n=2] TRUE, TRUE
[17:01:42.876] signalConditionsASAP(NULL, pos=0) ... done
[17:01:42.876] resolve() on list ... DONE
[17:01:42.877] signalConditions() ...
[17:01:42.877]  - include = ‘immediateCondition’
[17:01:42.877]  - exclude = 
[17:01:42.877]  - resignal = FALSE
[17:01:42.877]  - Number of conditions: 1
[17:01:42.877] signalConditions() ... done
[17:01:42.877] signalConditions() ...
[17:01:42.877]  - include = ‘immediateCondition’
[17:01:42.877]  - exclude = 
[17:01:42.877]  - resignal = FALSE
[17:01:42.878]  - Number of conditions: 1
[17:01:42.878] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[17:01:42.878] resolved() for ‘SequentialFuture’ ...
[17:01:42.878] - state: ‘finished’
[17:01:42.878] - run: TRUE
[17:01:42.878] - result: ‘FutureResult’
[17:01:42.878] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[17:01:42.879] getGlobalsAndPackages() ...
[17:01:42.879] Searching for globals...
[17:01:42.879] 
[17:01:42.880] Searching for globals ... DONE
[17:01:42.880] - globals: [0] <none>
[17:01:42.880] getGlobalsAndPackages() ... DONE
[17:01:42.880] run() for ‘Future’ ...
[17:01:42.880] - state: ‘created’
[17:01:42.880] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.880] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.881] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.881]   - Field: ‘label’
[17:01:42.881]   - Field: ‘local’
[17:01:42.881]   - Field: ‘owner’
[17:01:42.881]   - Field: ‘envir’
[17:01:42.881]   - Field: ‘packages’
[17:01:42.881]   - Field: ‘gc’
[17:01:42.881]   - Field: ‘conditions’
[17:01:42.881]   - Field: ‘expr’
[17:01:42.881]   - Field: ‘uuid’
[17:01:42.881]   - Field: ‘seed’
[17:01:42.882]   - Field: ‘version’
[17:01:42.882]   - Field: ‘result’
[17:01:42.882]   - Field: ‘asynchronous’
[17:01:42.882]   - Field: ‘calls’
[17:01:42.882]   - Field: ‘globals’
[17:01:42.882]   - Field: ‘stdout’
[17:01:42.882]   - Field: ‘earlySignal’
[17:01:42.882]   - Field: ‘lazy’
[17:01:42.882]   - Field: ‘state’
[17:01:42.882] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.882] - Launch lazy future ...
[17:01:42.883] Packages needed by the future expression (n = 0): <none>
[17:01:42.883] Packages needed by future strategies (n = 0): <none>
[17:01:42.883] {
[17:01:42.883]     {
[17:01:42.883]         {
[17:01:42.883]             ...future.startTime <- base::Sys.time()
[17:01:42.883]             {
[17:01:42.883]                 {
[17:01:42.883]                   {
[17:01:42.883]                     base::local({
[17:01:42.883]                       has_future <- base::requireNamespace("future", 
[17:01:42.883]                         quietly = TRUE)
[17:01:42.883]                       if (has_future) {
[17:01:42.883]                         ns <- base::getNamespace("future")
[17:01:42.883]                         version <- ns[[".package"]][["version"]]
[17:01:42.883]                         if (is.null(version)) 
[17:01:42.883]                           version <- utils::packageVersion("future")
[17:01:42.883]                       }
[17:01:42.883]                       else {
[17:01:42.883]                         version <- NULL
[17:01:42.883]                       }
[17:01:42.883]                       if (!has_future || version < "1.8.0") {
[17:01:42.883]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.883]                           "", base::R.version$version.string), 
[17:01:42.883]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.883]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.883]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.883]                             "release", "version")], collapse = " "), 
[17:01:42.883]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.883]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.883]                           info)
[17:01:42.883]                         info <- base::paste(info, collapse = "; ")
[17:01:42.883]                         if (!has_future) {
[17:01:42.883]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.883]                             info)
[17:01:42.883]                         }
[17:01:42.883]                         else {
[17:01:42.883]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.883]                             info, version)
[17:01:42.883]                         }
[17:01:42.883]                         base::stop(msg)
[17:01:42.883]                       }
[17:01:42.883]                     })
[17:01:42.883]                   }
[17:01:42.883]                   ...future.strategy.old <- future::plan("list")
[17:01:42.883]                   options(future.plan = NULL)
[17:01:42.883]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.883]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.883]                 }
[17:01:42.883]                 ...future.workdir <- getwd()
[17:01:42.883]             }
[17:01:42.883]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.883]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.883]         }
[17:01:42.883]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.883]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.883]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.883]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.883]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.883]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.883]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.883]             base::names(...future.oldOptions))
[17:01:42.883]     }
[17:01:42.883]     if (FALSE) {
[17:01:42.883]     }
[17:01:42.883]     else {
[17:01:42.883]         if (TRUE) {
[17:01:42.883]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.883]                 open = "w")
[17:01:42.883]         }
[17:01:42.883]         else {
[17:01:42.883]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.883]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.883]         }
[17:01:42.883]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.883]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.883]             base::sink(type = "output", split = FALSE)
[17:01:42.883]             base::close(...future.stdout)
[17:01:42.883]         }, add = TRUE)
[17:01:42.883]     }
[17:01:42.883]     ...future.frame <- base::sys.nframe()
[17:01:42.883]     ...future.conditions <- base::list()
[17:01:42.883]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.883]     if (FALSE) {
[17:01:42.883]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.883]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.883]     }
[17:01:42.883]     ...future.result <- base::tryCatch({
[17:01:42.883]         base::withCallingHandlers({
[17:01:42.883]             ...future.value <- base::withVisible(base::local(42L))
[17:01:42.883]             future::FutureResult(value = ...future.value$value, 
[17:01:42.883]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.883]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.883]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.883]                     ...future.globalenv.names))
[17:01:42.883]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.883]         }, condition = base::local({
[17:01:42.883]             c <- base::c
[17:01:42.883]             inherits <- base::inherits
[17:01:42.883]             invokeRestart <- base::invokeRestart
[17:01:42.883]             length <- base::length
[17:01:42.883]             list <- base::list
[17:01:42.883]             seq.int <- base::seq.int
[17:01:42.883]             signalCondition <- base::signalCondition
[17:01:42.883]             sys.calls <- base::sys.calls
[17:01:42.883]             `[[` <- base::`[[`
[17:01:42.883]             `+` <- base::`+`
[17:01:42.883]             `<<-` <- base::`<<-`
[17:01:42.883]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.883]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.883]                   3L)]
[17:01:42.883]             }
[17:01:42.883]             function(cond) {
[17:01:42.883]                 is_error <- inherits(cond, "error")
[17:01:42.883]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.883]                   NULL)
[17:01:42.883]                 if (is_error) {
[17:01:42.883]                   sessionInformation <- function() {
[17:01:42.883]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.883]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.883]                       search = base::search(), system = base::Sys.info())
[17:01:42.883]                   }
[17:01:42.883]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.883]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.883]                     cond$call), session = sessionInformation(), 
[17:01:42.883]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.883]                   signalCondition(cond)
[17:01:42.883]                 }
[17:01:42.883]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.883]                 "immediateCondition"))) {
[17:01:42.883]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.883]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.883]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.883]                   if (TRUE && !signal) {
[17:01:42.883]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.883]                     {
[17:01:42.883]                       inherits <- base::inherits
[17:01:42.883]                       invokeRestart <- base::invokeRestart
[17:01:42.883]                       is.null <- base::is.null
[17:01:42.883]                       muffled <- FALSE
[17:01:42.883]                       if (inherits(cond, "message")) {
[17:01:42.883]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.883]                         if (muffled) 
[17:01:42.883]                           invokeRestart("muffleMessage")
[17:01:42.883]                       }
[17:01:42.883]                       else if (inherits(cond, "warning")) {
[17:01:42.883]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.883]                         if (muffled) 
[17:01:42.883]                           invokeRestart("muffleWarning")
[17:01:42.883]                       }
[17:01:42.883]                       else if (inherits(cond, "condition")) {
[17:01:42.883]                         if (!is.null(pattern)) {
[17:01:42.883]                           computeRestarts <- base::computeRestarts
[17:01:42.883]                           grepl <- base::grepl
[17:01:42.883]                           restarts <- computeRestarts(cond)
[17:01:42.883]                           for (restart in restarts) {
[17:01:42.883]                             name <- restart$name
[17:01:42.883]                             if (is.null(name)) 
[17:01:42.883]                               next
[17:01:42.883]                             if (!grepl(pattern, name)) 
[17:01:42.883]                               next
[17:01:42.883]                             invokeRestart(restart)
[17:01:42.883]                             muffled <- TRUE
[17:01:42.883]                             break
[17:01:42.883]                           }
[17:01:42.883]                         }
[17:01:42.883]                       }
[17:01:42.883]                       invisible(muffled)
[17:01:42.883]                     }
[17:01:42.883]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.883]                   }
[17:01:42.883]                 }
[17:01:42.883]                 else {
[17:01:42.883]                   if (TRUE) {
[17:01:42.883]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.883]                     {
[17:01:42.883]                       inherits <- base::inherits
[17:01:42.883]                       invokeRestart <- base::invokeRestart
[17:01:42.883]                       is.null <- base::is.null
[17:01:42.883]                       muffled <- FALSE
[17:01:42.883]                       if (inherits(cond, "message")) {
[17:01:42.883]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.883]                         if (muffled) 
[17:01:42.883]                           invokeRestart("muffleMessage")
[17:01:42.883]                       }
[17:01:42.883]                       else if (inherits(cond, "warning")) {
[17:01:42.883]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.883]                         if (muffled) 
[17:01:42.883]                           invokeRestart("muffleWarning")
[17:01:42.883]                       }
[17:01:42.883]                       else if (inherits(cond, "condition")) {
[17:01:42.883]                         if (!is.null(pattern)) {
[17:01:42.883]                           computeRestarts <- base::computeRestarts
[17:01:42.883]                           grepl <- base::grepl
[17:01:42.883]                           restarts <- computeRestarts(cond)
[17:01:42.883]                           for (restart in restarts) {
[17:01:42.883]                             name <- restart$name
[17:01:42.883]                             if (is.null(name)) 
[17:01:42.883]                               next
[17:01:42.883]                             if (!grepl(pattern, name)) 
[17:01:42.883]                               next
[17:01:42.883]                             invokeRestart(restart)
[17:01:42.883]                             muffled <- TRUE
[17:01:42.883]                             break
[17:01:42.883]                           }
[17:01:42.883]                         }
[17:01:42.883]                       }
[17:01:42.883]                       invisible(muffled)
[17:01:42.883]                     }
[17:01:42.883]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.883]                   }
[17:01:42.883]                 }
[17:01:42.883]             }
[17:01:42.883]         }))
[17:01:42.883]     }, error = function(ex) {
[17:01:42.883]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.883]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.883]                 ...future.rng), started = ...future.startTime, 
[17:01:42.883]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.883]             version = "1.8"), class = "FutureResult")
[17:01:42.883]     }, finally = {
[17:01:42.883]         if (!identical(...future.workdir, getwd())) 
[17:01:42.883]             setwd(...future.workdir)
[17:01:42.883]         {
[17:01:42.883]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.883]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.883]             }
[17:01:42.883]             base::options(...future.oldOptions)
[17:01:42.883]             if (.Platform$OS.type == "windows") {
[17:01:42.883]                 old_names <- names(...future.oldEnvVars)
[17:01:42.883]                 envs <- base::Sys.getenv()
[17:01:42.883]                 names <- names(envs)
[17:01:42.883]                 common <- intersect(names, old_names)
[17:01:42.883]                 added <- setdiff(names, old_names)
[17:01:42.883]                 removed <- setdiff(old_names, names)
[17:01:42.883]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.883]                   envs[common]]
[17:01:42.883]                 NAMES <- toupper(changed)
[17:01:42.883]                 args <- list()
[17:01:42.883]                 for (kk in seq_along(NAMES)) {
[17:01:42.883]                   name <- changed[[kk]]
[17:01:42.883]                   NAME <- NAMES[[kk]]
[17:01:42.883]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.883]                     next
[17:01:42.883]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.883]                 }
[17:01:42.883]                 NAMES <- toupper(added)
[17:01:42.883]                 for (kk in seq_along(NAMES)) {
[17:01:42.883]                   name <- added[[kk]]
[17:01:42.883]                   NAME <- NAMES[[kk]]
[17:01:42.883]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.883]                     next
[17:01:42.883]                   args[[name]] <- ""
[17:01:42.883]                 }
[17:01:42.883]                 NAMES <- toupper(removed)
[17:01:42.883]                 for (kk in seq_along(NAMES)) {
[17:01:42.883]                   name <- removed[[kk]]
[17:01:42.883]                   NAME <- NAMES[[kk]]
[17:01:42.883]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.883]                     next
[17:01:42.883]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.883]                 }
[17:01:42.883]                 if (length(args) > 0) 
[17:01:42.883]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.883]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.883]             }
[17:01:42.883]             else {
[17:01:42.883]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.883]             }
[17:01:42.883]             {
[17:01:42.883]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.883]                   0L) {
[17:01:42.883]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.883]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.883]                   base::options(opts)
[17:01:42.883]                 }
[17:01:42.883]                 {
[17:01:42.883]                   {
[17:01:42.883]                     NULL
[17:01:42.883]                     RNGkind("Mersenne-Twister")
[17:01:42.883]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.883]                       inherits = FALSE)
[17:01:42.883]                   }
[17:01:42.883]                   options(future.plan = NULL)
[17:01:42.883]                   if (is.na(NA_character_)) 
[17:01:42.883]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.883]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.883]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.883]                     .init = FALSE)
[17:01:42.883]                 }
[17:01:42.883]             }
[17:01:42.883]         }
[17:01:42.883]     })
[17:01:42.883]     if (TRUE) {
[17:01:42.883]         base::sink(type = "output", split = FALSE)
[17:01:42.883]         if (TRUE) {
[17:01:42.883]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.883]         }
[17:01:42.883]         else {
[17:01:42.883]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.883]         }
[17:01:42.883]         base::close(...future.stdout)
[17:01:42.883]         ...future.stdout <- NULL
[17:01:42.883]     }
[17:01:42.883]     ...future.result$conditions <- ...future.conditions
[17:01:42.883]     ...future.result$finished <- base::Sys.time()
[17:01:42.883]     ...future.result
[17:01:42.883] }
[17:01:42.885] plan(): Setting new future strategy stack:
[17:01:42.885] List of future strategies:
[17:01:42.885] 1. sequential:
[17:01:42.885]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.885]    - tweaked: FALSE
[17:01:42.885]    - call: NULL
[17:01:42.885] plan(): nbrOfWorkers() = 1
[17:01:42.887] plan(): Setting new future strategy stack:
[17:01:42.887] List of future strategies:
[17:01:42.887] 1. sequential:
[17:01:42.887]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.887]    - tweaked: FALSE
[17:01:42.887]    - call: future::plan("sequential")
[17:01:42.887] plan(): nbrOfWorkers() = 1
[17:01:42.887] SequentialFuture started (and completed)
[17:01:42.887] - Launch lazy future ... done
[17:01:42.888] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[17:01:42.888] resolved() for ‘SequentialFuture’ ...
[17:01:42.888] - state: ‘finished’
[17:01:42.888] - run: TRUE
[17:01:42.888] - result: ‘FutureResult’
[17:01:42.888] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[17:01:42.889] getGlobalsAndPackages() ...
[17:01:42.889] Searching for globals...
[17:01:42.890] - globals found: [2] ‘{’, ‘stop’
[17:01:42.890] Searching for globals ... DONE
[17:01:42.890] Resolving globals: FALSE
[17:01:42.890] 
[17:01:42.890] 
[17:01:42.890] getGlobalsAndPackages() ... DONE
[17:01:42.891] run() for ‘Future’ ...
[17:01:42.891] - state: ‘created’
[17:01:42.891] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:01:42.891] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:01:42.891] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:01:42.891]   - Field: ‘label’
[17:01:42.891]   - Field: ‘local’
[17:01:42.891]   - Field: ‘owner’
[17:01:42.892]   - Field: ‘envir’
[17:01:42.892]   - Field: ‘packages’
[17:01:42.892]   - Field: ‘gc’
[17:01:42.892]   - Field: ‘conditions’
[17:01:42.892]   - Field: ‘expr’
[17:01:42.892]   - Field: ‘uuid’
[17:01:42.892]   - Field: ‘seed’
[17:01:42.892]   - Field: ‘version’
[17:01:42.892]   - Field: ‘result’
[17:01:42.892]   - Field: ‘asynchronous’
[17:01:42.892]   - Field: ‘calls’
[17:01:42.893]   - Field: ‘globals’
[17:01:42.893]   - Field: ‘stdout’
[17:01:42.893]   - Field: ‘earlySignal’
[17:01:42.893]   - Field: ‘lazy’
[17:01:42.893]   - Field: ‘state’
[17:01:42.893] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:01:42.893] - Launch lazy future ...
[17:01:42.893] Packages needed by the future expression (n = 0): <none>
[17:01:42.893] Packages needed by future strategies (n = 0): <none>
[17:01:42.894] {
[17:01:42.894]     {
[17:01:42.894]         {
[17:01:42.894]             ...future.startTime <- base::Sys.time()
[17:01:42.894]             {
[17:01:42.894]                 {
[17:01:42.894]                   {
[17:01:42.894]                     base::local({
[17:01:42.894]                       has_future <- base::requireNamespace("future", 
[17:01:42.894]                         quietly = TRUE)
[17:01:42.894]                       if (has_future) {
[17:01:42.894]                         ns <- base::getNamespace("future")
[17:01:42.894]                         version <- ns[[".package"]][["version"]]
[17:01:42.894]                         if (is.null(version)) 
[17:01:42.894]                           version <- utils::packageVersion("future")
[17:01:42.894]                       }
[17:01:42.894]                       else {
[17:01:42.894]                         version <- NULL
[17:01:42.894]                       }
[17:01:42.894]                       if (!has_future || version < "1.8.0") {
[17:01:42.894]                         info <- base::c(r_version = base::gsub("R version ", 
[17:01:42.894]                           "", base::R.version$version.string), 
[17:01:42.894]                           platform = base::sprintf("%s (%s-bit)", 
[17:01:42.894]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:42.894]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:42.894]                             "release", "version")], collapse = " "), 
[17:01:42.894]                           hostname = base::Sys.info()[["nodename"]])
[17:01:42.894]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:01:42.894]                           info)
[17:01:42.894]                         info <- base::paste(info, collapse = "; ")
[17:01:42.894]                         if (!has_future) {
[17:01:42.894]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:42.894]                             info)
[17:01:42.894]                         }
[17:01:42.894]                         else {
[17:01:42.894]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:42.894]                             info, version)
[17:01:42.894]                         }
[17:01:42.894]                         base::stop(msg)
[17:01:42.894]                       }
[17:01:42.894]                     })
[17:01:42.894]                   }
[17:01:42.894]                   ...future.strategy.old <- future::plan("list")
[17:01:42.894]                   options(future.plan = NULL)
[17:01:42.894]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.894]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:42.894]                 }
[17:01:42.894]                 ...future.workdir <- getwd()
[17:01:42.894]             }
[17:01:42.894]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:42.894]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:42.894]         }
[17:01:42.894]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:42.894]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:42.894]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:42.894]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:42.894]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:42.894]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:42.894]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:42.894]             base::names(...future.oldOptions))
[17:01:42.894]     }
[17:01:42.894]     if (FALSE) {
[17:01:42.894]     }
[17:01:42.894]     else {
[17:01:42.894]         if (TRUE) {
[17:01:42.894]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:42.894]                 open = "w")
[17:01:42.894]         }
[17:01:42.894]         else {
[17:01:42.894]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:42.894]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:42.894]         }
[17:01:42.894]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:42.894]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:42.894]             base::sink(type = "output", split = FALSE)
[17:01:42.894]             base::close(...future.stdout)
[17:01:42.894]         }, add = TRUE)
[17:01:42.894]     }
[17:01:42.894]     ...future.frame <- base::sys.nframe()
[17:01:42.894]     ...future.conditions <- base::list()
[17:01:42.894]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:42.894]     if (FALSE) {
[17:01:42.894]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:42.894]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:42.894]     }
[17:01:42.894]     ...future.result <- base::tryCatch({
[17:01:42.894]         base::withCallingHandlers({
[17:01:42.894]             ...future.value <- base::withVisible(base::local({
[17:01:42.894]                 42L
[17:01:42.894]                 stop("Woops")
[17:01:42.894]             }))
[17:01:42.894]             future::FutureResult(value = ...future.value$value, 
[17:01:42.894]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.894]                   ...future.rng), globalenv = if (FALSE) 
[17:01:42.894]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:42.894]                     ...future.globalenv.names))
[17:01:42.894]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:42.894]         }, condition = base::local({
[17:01:42.894]             c <- base::c
[17:01:42.894]             inherits <- base::inherits
[17:01:42.894]             invokeRestart <- base::invokeRestart
[17:01:42.894]             length <- base::length
[17:01:42.894]             list <- base::list
[17:01:42.894]             seq.int <- base::seq.int
[17:01:42.894]             signalCondition <- base::signalCondition
[17:01:42.894]             sys.calls <- base::sys.calls
[17:01:42.894]             `[[` <- base::`[[`
[17:01:42.894]             `+` <- base::`+`
[17:01:42.894]             `<<-` <- base::`<<-`
[17:01:42.894]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:42.894]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:42.894]                   3L)]
[17:01:42.894]             }
[17:01:42.894]             function(cond) {
[17:01:42.894]                 is_error <- inherits(cond, "error")
[17:01:42.894]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:42.894]                   NULL)
[17:01:42.894]                 if (is_error) {
[17:01:42.894]                   sessionInformation <- function() {
[17:01:42.894]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:42.894]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:42.894]                       search = base::search(), system = base::Sys.info())
[17:01:42.894]                   }
[17:01:42.894]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.894]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:42.894]                     cond$call), session = sessionInformation(), 
[17:01:42.894]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:42.894]                   signalCondition(cond)
[17:01:42.894]                 }
[17:01:42.894]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:42.894]                 "immediateCondition"))) {
[17:01:42.894]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:42.894]                   ...future.conditions[[length(...future.conditions) + 
[17:01:42.894]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:42.894]                   if (TRUE && !signal) {
[17:01:42.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.894]                     {
[17:01:42.894]                       inherits <- base::inherits
[17:01:42.894]                       invokeRestart <- base::invokeRestart
[17:01:42.894]                       is.null <- base::is.null
[17:01:42.894]                       muffled <- FALSE
[17:01:42.894]                       if (inherits(cond, "message")) {
[17:01:42.894]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.894]                         if (muffled) 
[17:01:42.894]                           invokeRestart("muffleMessage")
[17:01:42.894]                       }
[17:01:42.894]                       else if (inherits(cond, "warning")) {
[17:01:42.894]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.894]                         if (muffled) 
[17:01:42.894]                           invokeRestart("muffleWarning")
[17:01:42.894]                       }
[17:01:42.894]                       else if (inherits(cond, "condition")) {
[17:01:42.894]                         if (!is.null(pattern)) {
[17:01:42.894]                           computeRestarts <- base::computeRestarts
[17:01:42.894]                           grepl <- base::grepl
[17:01:42.894]                           restarts <- computeRestarts(cond)
[17:01:42.894]                           for (restart in restarts) {
[17:01:42.894]                             name <- restart$name
[17:01:42.894]                             if (is.null(name)) 
[17:01:42.894]                               next
[17:01:42.894]                             if (!grepl(pattern, name)) 
[17:01:42.894]                               next
[17:01:42.894]                             invokeRestart(restart)
[17:01:42.894]                             muffled <- TRUE
[17:01:42.894]                             break
[17:01:42.894]                           }
[17:01:42.894]                         }
[17:01:42.894]                       }
[17:01:42.894]                       invisible(muffled)
[17:01:42.894]                     }
[17:01:42.894]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.894]                   }
[17:01:42.894]                 }
[17:01:42.894]                 else {
[17:01:42.894]                   if (TRUE) {
[17:01:42.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:42.894]                     {
[17:01:42.894]                       inherits <- base::inherits
[17:01:42.894]                       invokeRestart <- base::invokeRestart
[17:01:42.894]                       is.null <- base::is.null
[17:01:42.894]                       muffled <- FALSE
[17:01:42.894]                       if (inherits(cond, "message")) {
[17:01:42.894]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:42.894]                         if (muffled) 
[17:01:42.894]                           invokeRestart("muffleMessage")
[17:01:42.894]                       }
[17:01:42.894]                       else if (inherits(cond, "warning")) {
[17:01:42.894]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:42.894]                         if (muffled) 
[17:01:42.894]                           invokeRestart("muffleWarning")
[17:01:42.894]                       }
[17:01:42.894]                       else if (inherits(cond, "condition")) {
[17:01:42.894]                         if (!is.null(pattern)) {
[17:01:42.894]                           computeRestarts <- base::computeRestarts
[17:01:42.894]                           grepl <- base::grepl
[17:01:42.894]                           restarts <- computeRestarts(cond)
[17:01:42.894]                           for (restart in restarts) {
[17:01:42.894]                             name <- restart$name
[17:01:42.894]                             if (is.null(name)) 
[17:01:42.894]                               next
[17:01:42.894]                             if (!grepl(pattern, name)) 
[17:01:42.894]                               next
[17:01:42.894]                             invokeRestart(restart)
[17:01:42.894]                             muffled <- TRUE
[17:01:42.894]                             break
[17:01:42.894]                           }
[17:01:42.894]                         }
[17:01:42.894]                       }
[17:01:42.894]                       invisible(muffled)
[17:01:42.894]                     }
[17:01:42.894]                     muffleCondition(cond, pattern = "^muffle")
[17:01:42.894]                   }
[17:01:42.894]                 }
[17:01:42.894]             }
[17:01:42.894]         }))
[17:01:42.894]     }, error = function(ex) {
[17:01:42.894]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:42.894]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:42.894]                 ...future.rng), started = ...future.startTime, 
[17:01:42.894]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:42.894]             version = "1.8"), class = "FutureResult")
[17:01:42.894]     }, finally = {
[17:01:42.894]         if (!identical(...future.workdir, getwd())) 
[17:01:42.894]             setwd(...future.workdir)
[17:01:42.894]         {
[17:01:42.894]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:42.894]                 ...future.oldOptions$nwarnings <- NULL
[17:01:42.894]             }
[17:01:42.894]             base::options(...future.oldOptions)
[17:01:42.894]             if (.Platform$OS.type == "windows") {
[17:01:42.894]                 old_names <- names(...future.oldEnvVars)
[17:01:42.894]                 envs <- base::Sys.getenv()
[17:01:42.894]                 names <- names(envs)
[17:01:42.894]                 common <- intersect(names, old_names)
[17:01:42.894]                 added <- setdiff(names, old_names)
[17:01:42.894]                 removed <- setdiff(old_names, names)
[17:01:42.894]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:42.894]                   envs[common]]
[17:01:42.894]                 NAMES <- toupper(changed)
[17:01:42.894]                 args <- list()
[17:01:42.894]                 for (kk in seq_along(NAMES)) {
[17:01:42.894]                   name <- changed[[kk]]
[17:01:42.894]                   NAME <- NAMES[[kk]]
[17:01:42.894]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.894]                     next
[17:01:42.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.894]                 }
[17:01:42.894]                 NAMES <- toupper(added)
[17:01:42.894]                 for (kk in seq_along(NAMES)) {
[17:01:42.894]                   name <- added[[kk]]
[17:01:42.894]                   NAME <- NAMES[[kk]]
[17:01:42.894]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.894]                     next
[17:01:42.894]                   args[[name]] <- ""
[17:01:42.894]                 }
[17:01:42.894]                 NAMES <- toupper(removed)
[17:01:42.894]                 for (kk in seq_along(NAMES)) {
[17:01:42.894]                   name <- removed[[kk]]
[17:01:42.894]                   NAME <- NAMES[[kk]]
[17:01:42.894]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:42.894]                     next
[17:01:42.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:42.894]                 }
[17:01:42.894]                 if (length(args) > 0) 
[17:01:42.894]                   base::do.call(base::Sys.setenv, args = args)
[17:01:42.894]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:42.894]             }
[17:01:42.894]             else {
[17:01:42.894]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:42.894]             }
[17:01:42.894]             {
[17:01:42.894]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:42.894]                   0L) {
[17:01:42.894]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:42.894]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:42.894]                   base::options(opts)
[17:01:42.894]                 }
[17:01:42.894]                 {
[17:01:42.894]                   {
[17:01:42.894]                     NULL
[17:01:42.894]                     RNGkind("Mersenne-Twister")
[17:01:42.894]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:01:42.894]                       inherits = FALSE)
[17:01:42.894]                   }
[17:01:42.894]                   options(future.plan = NULL)
[17:01:42.894]                   if (is.na(NA_character_)) 
[17:01:42.894]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:42.894]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:42.894]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:42.894]                     .init = FALSE)
[17:01:42.894]                 }
[17:01:42.894]             }
[17:01:42.894]         }
[17:01:42.894]     })
[17:01:42.894]     if (TRUE) {
[17:01:42.894]         base::sink(type = "output", split = FALSE)
[17:01:42.894]         if (TRUE) {
[17:01:42.894]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:42.894]         }
[17:01:42.894]         else {
[17:01:42.894]             ...future.result["stdout"] <- base::list(NULL)
[17:01:42.894]         }
[17:01:42.894]         base::close(...future.stdout)
[17:01:42.894]         ...future.stdout <- NULL
[17:01:42.894]     }
[17:01:42.894]     ...future.result$conditions <- ...future.conditions
[17:01:42.894]     ...future.result$finished <- base::Sys.time()
[17:01:42.894]     ...future.result
[17:01:42.894] }
[17:01:42.896] plan(): Setting new future strategy stack:
[17:01:42.896] List of future strategies:
[17:01:42.896] 1. sequential:
[17:01:42.896]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.896]    - tweaked: FALSE
[17:01:42.896]    - call: NULL
[17:01:42.896] plan(): nbrOfWorkers() = 1
[17:01:42.897] plan(): Setting new future strategy stack:
[17:01:42.897] List of future strategies:
[17:01:42.897] 1. sequential:
[17:01:42.897]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:42.897]    - tweaked: FALSE
[17:01:42.897]    - call: future::plan("sequential")
[17:01:42.898] plan(): nbrOfWorkers() = 1
[17:01:42.898] SequentialFuture started (and completed)
[17:01:42.898] signalConditions() ...
[17:01:42.898]  - include = ‘immediateCondition’
[17:01:42.898]  - exclude = 
[17:01:42.898]  - resignal = FALSE
[17:01:42.898]  - Number of conditions: 1
[17:01:42.898] signalConditions() ... done
[17:01:42.898] - Launch lazy future ... done
[17:01:42.898] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:01:42.899] signalConditions() ...
[17:01:42.899]  - include = ‘immediateCondition’
[17:01:42.899]  - exclude = 
[17:01:42.899]  - resignal = FALSE
[17:01:42.899]  - Number of conditions: 1
[17:01:42.899] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[17:01:42.905] plan(): Setting new future strategy stack:
[17:01:42.905] List of future strategies:
[17:01:42.905] 1. multisession:
[17:01:42.905]    - args: function (..., workers = 2L, envir = parent.frame())
[17:01:42.905]    - tweaked: TRUE
[17:01:42.905]    - call: plan(multisession, workers = 2L)
[17:01:42.919] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:01:42.919] multisession:
[17:01:42.919] - args: function (..., workers = 2L, envir = parent.frame())
[17:01:42.919] - tweaked: TRUE
[17:01:42.919] - call: plan(multisession, workers = 2L)
[17:01:42.919] getGlobalsAndPackages() ...
[17:01:42.920] Not searching for globals
[17:01:42.920] - globals: [0] <none>
[17:01:42.920] getGlobalsAndPackages() ... DONE
[17:01:42.920] [local output] makeClusterPSOCK() ...
[17:01:42.958] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:01:42.959] [local output] Base port: 11544
[17:01:42.959] [local output] Getting setup options for 2 cluster nodes ...
[17:01:42.959] [local output]  - Node 1 of 2 ...
[17:01:42.960] [local output] localMachine=TRUE => revtunnel=FALSE

[17:01:42.960] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK1lsv4/worker.rank=1.parallelly.parent=38801.9791311af88d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpK1lsv4/worker.rank=1.parallelly.parent=38801.9791311af88d.pid")'’
[17:01:43.155] - Possible to infer worker's PID: TRUE
[17:01:43.155] [local output] Rscript port: 11544

[17:01:43.156] [local output]  - Node 2 of 2 ...
[17:01:43.156] [local output] localMachine=TRUE => revtunnel=FALSE

[17:01:43.157] [local output] Rscript port: 11544

[17:01:43.157] [local output] Getting setup options for 2 cluster nodes ... done
[17:01:43.157] [local output]  - Parallel setup requested for some PSOCK nodes
[17:01:43.158] [local output] Setting up PSOCK nodes in parallel
[17:01:43.158] List of 36
[17:01:43.158]  $ worker          : chr "localhost"
[17:01:43.158]   ..- attr(*, "localhost")= logi TRUE
[17:01:43.158]  $ master          : chr "localhost"
[17:01:43.158]  $ port            : int 11544
[17:01:43.158]  $ connectTimeout  : num 120
[17:01:43.158]  $ timeout         : num 2592000
[17:01:43.158]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:01:43.158]  $ homogeneous     : logi TRUE
[17:01:43.158]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:01:43.158]  $ rscript_envs    : NULL
[17:01:43.158]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:01:43.158]  $ rscript_startup : NULL
[17:01:43.158]  $ rscript_sh      : chr "sh"
[17:01:43.158]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:01:43.158]  $ methods         : logi TRUE
[17:01:43.158]  $ socketOptions   : chr "no-delay"
[17:01:43.158]  $ useXDR          : logi FALSE
[17:01:43.158]  $ outfile         : chr "/dev/null"
[17:01:43.158]  $ renice          : int NA
[17:01:43.158]  $ rshcmd          : NULL
[17:01:43.158]  $ user            : chr(0) 
[17:01:43.158]  $ revtunnel       : logi FALSE
[17:01:43.158]  $ rshlogfile      : NULL
[17:01:43.158]  $ rshopts         : chr(0) 
[17:01:43.158]  $ rank            : int 1
[17:01:43.158]  $ manual          : logi FALSE
[17:01:43.158]  $ dryrun          : logi FALSE
[17:01:43.158]  $ quiet           : logi FALSE
[17:01:43.158]  $ setup_strategy  : chr "parallel"
[17:01:43.158]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:01:43.158]  $ pidfile         : chr "/tmp/RtmpK1lsv4/worker.rank=1.parallelly.parent=38801.9791311af88d.pid"
[17:01:43.158]  $ rshcmd_label    : NULL
[17:01:43.158]  $ rsh_call        : NULL
[17:01:43.158]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:01:43.158]  $ localMachine    : logi TRUE
[17:01:43.158]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:01:43.158]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:01:43.158]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:01:43.158]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:01:43.158]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:01:43.158]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:01:43.158]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:01:43.158]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:01:43.158]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:01:43.158]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:01:43.158]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:01:43.158]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:01:43.158]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:01:43.158]  $ arguments       :List of 28
[17:01:43.158]   ..$ worker          : chr "localhost"
[17:01:43.158]   ..$ master          : NULL
[17:01:43.158]   ..$ port            : int 11544
[17:01:43.158]   ..$ connectTimeout  : num 120
[17:01:43.158]   ..$ timeout         : num 2592000
[17:01:43.158]   ..$ rscript         : NULL
[17:01:43.158]   ..$ homogeneous     : NULL
[17:01:43.158]   ..$ rscript_args    : NULL
[17:01:43.158]   ..$ rscript_envs    : NULL
[17:01:43.158]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:01:43.158]   ..$ rscript_startup : NULL
[17:01:43.158]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:01:43.158]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:01:43.158]   ..$ methods         : logi TRUE
[17:01:43.158]   ..$ socketOptions   : chr "no-delay"
[17:01:43.158]   ..$ useXDR          : logi FALSE
[17:01:43.158]   ..$ outfile         : chr "/dev/null"
[17:01:43.158]   ..$ renice          : int NA
[17:01:43.158]   ..$ rshcmd          : NULL
[17:01:43.158]   ..$ user            : NULL
[17:01:43.158]   ..$ revtunnel       : logi NA
[17:01:43.158]   ..$ rshlogfile      : NULL
[17:01:43.158]   ..$ rshopts         : NULL
[17:01:43.158]   ..$ rank            : int 1
[17:01:43.158]   ..$ manual          : logi FALSE
[17:01:43.158]   ..$ dryrun          : logi FALSE
[17:01:43.158]   ..$ quiet           : logi FALSE
[17:01:43.158]   ..$ setup_strategy  : chr "parallel"
[17:01:43.158]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:01:43.177] [local output] System call to launch all workers:
[17:01:43.177] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpK1lsv4/worker.rank=1.parallelly.parent=38801.9791311af88d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11544 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:01:43.177] [local output] Starting PSOCK main server
[17:01:43.183] [local output] Workers launched
[17:01:43.184] [local output] Waiting for workers to connect back
[17:01:43.184]  - [local output] 0 workers out of 2 ready
[17:01:43.428]  - [local output] 0 workers out of 2 ready
[17:01:43.428]  - [local output] 1 workers out of 2 ready
[17:01:43.433]  - [local output] 1 workers out of 2 ready
[17:01:43.433]  - [local output] 2 workers out of 2 ready
[17:01:43.433] [local output] Launching of workers completed
[17:01:43.433] [local output] Collecting session information from workers
[17:01:43.434] [local output]  - Worker #1 of 2
[17:01:43.435] [local output]  - Worker #2 of 2
[17:01:43.435] [local output] makeClusterPSOCK() ... done
[17:01:43.447] Packages needed by the future expression (n = 0): <none>
[17:01:43.447] Packages needed by future strategies (n = 0): <none>
[17:01:43.448] {
[17:01:43.448]     {
[17:01:43.448]         {
[17:01:43.448]             ...future.startTime <- base::Sys.time()
[17:01:43.448]             {
[17:01:43.448]                 {
[17:01:43.448]                   {
[17:01:43.448]                     {
[17:01:43.448]                       base::local({
[17:01:43.448]                         has_future <- base::requireNamespace("future", 
[17:01:43.448]                           quietly = TRUE)
[17:01:43.448]                         if (has_future) {
[17:01:43.448]                           ns <- base::getNamespace("future")
[17:01:43.448]                           version <- ns[[".package"]][["version"]]
[17:01:43.448]                           if (is.null(version)) 
[17:01:43.448]                             version <- utils::packageVersion("future")
[17:01:43.448]                         }
[17:01:43.448]                         else {
[17:01:43.448]                           version <- NULL
[17:01:43.448]                         }
[17:01:43.448]                         if (!has_future || version < "1.8.0") {
[17:01:43.448]                           info <- base::c(r_version = base::gsub("R version ", 
[17:01:43.448]                             "", base::R.version$version.string), 
[17:01:43.448]                             platform = base::sprintf("%s (%s-bit)", 
[17:01:43.448]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:43.448]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:43.448]                               "release", "version")], collapse = " "), 
[17:01:43.448]                             hostname = base::Sys.info()[["nodename"]])
[17:01:43.448]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:01:43.448]                             info)
[17:01:43.448]                           info <- base::paste(info, collapse = "; ")
[17:01:43.448]                           if (!has_future) {
[17:01:43.448]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:43.448]                               info)
[17:01:43.448]                           }
[17:01:43.448]                           else {
[17:01:43.448]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:43.448]                               info, version)
[17:01:43.448]                           }
[17:01:43.448]                           base::stop(msg)
[17:01:43.448]                         }
[17:01:43.448]                       })
[17:01:43.448]                     }
[17:01:43.448]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:01:43.448]                     base::options(mc.cores = 1L)
[17:01:43.448]                   }
[17:01:43.448]                   ...future.strategy.old <- future::plan("list")
[17:01:43.448]                   options(future.plan = NULL)
[17:01:43.448]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:43.448]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:43.448]                 }
[17:01:43.448]                 ...future.workdir <- getwd()
[17:01:43.448]             }
[17:01:43.448]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:43.448]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:43.448]         }
[17:01:43.448]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:43.448]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:43.448]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:43.448]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:43.448]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:43.448]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:43.448]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:43.448]             base::names(...future.oldOptions))
[17:01:43.448]     }
[17:01:43.448]     if (FALSE) {
[17:01:43.448]     }
[17:01:43.448]     else {
[17:01:43.448]         if (TRUE) {
[17:01:43.448]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:43.448]                 open = "w")
[17:01:43.448]         }
[17:01:43.448]         else {
[17:01:43.448]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:43.448]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:43.448]         }
[17:01:43.448]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:43.448]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:43.448]             base::sink(type = "output", split = FALSE)
[17:01:43.448]             base::close(...future.stdout)
[17:01:43.448]         }, add = TRUE)
[17:01:43.448]     }
[17:01:43.448]     ...future.frame <- base::sys.nframe()
[17:01:43.448]     ...future.conditions <- base::list()
[17:01:43.448]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:43.448]     if (FALSE) {
[17:01:43.448]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:43.448]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:43.448]     }
[17:01:43.448]     ...future.result <- base::tryCatch({
[17:01:43.448]         base::withCallingHandlers({
[17:01:43.448]             ...future.value <- base::withVisible(base::local({
[17:01:43.448]                 ...future.makeSendCondition <- base::local({
[17:01:43.448]                   sendCondition <- NULL
[17:01:43.448]                   function(frame = 1L) {
[17:01:43.448]                     if (is.function(sendCondition)) 
[17:01:43.448]                       return(sendCondition)
[17:01:43.448]                     ns <- getNamespace("parallel")
[17:01:43.448]                     if (exists("sendData", mode = "function", 
[17:01:43.448]                       envir = ns)) {
[17:01:43.448]                       parallel_sendData <- get("sendData", mode = "function", 
[17:01:43.448]                         envir = ns)
[17:01:43.448]                       envir <- sys.frame(frame)
[17:01:43.448]                       master <- NULL
[17:01:43.448]                       while (!identical(envir, .GlobalEnv) && 
[17:01:43.448]                         !identical(envir, emptyenv())) {
[17:01:43.448]                         if (exists("master", mode = "list", envir = envir, 
[17:01:43.448]                           inherits = FALSE)) {
[17:01:43.448]                           master <- get("master", mode = "list", 
[17:01:43.448]                             envir = envir, inherits = FALSE)
[17:01:43.448]                           if (inherits(master, c("SOCKnode", 
[17:01:43.448]                             "SOCK0node"))) {
[17:01:43.448]                             sendCondition <<- function(cond) {
[17:01:43.448]                               data <- list(type = "VALUE", value = cond, 
[17:01:43.448]                                 success = TRUE)
[17:01:43.448]                               parallel_sendData(master, data)
[17:01:43.448]                             }
[17:01:43.448]                             return(sendCondition)
[17:01:43.448]                           }
[17:01:43.448]                         }
[17:01:43.448]                         frame <- frame + 1L
[17:01:43.448]                         envir <- sys.frame(frame)
[17:01:43.448]                       }
[17:01:43.448]                     }
[17:01:43.448]                     sendCondition <<- function(cond) NULL
[17:01:43.448]                   }
[17:01:43.448]                 })
[17:01:43.448]                 withCallingHandlers({
[17:01:43.448]                   NA
[17:01:43.448]                 }, immediateCondition = function(cond) {
[17:01:43.448]                   sendCondition <- ...future.makeSendCondition()
[17:01:43.448]                   sendCondition(cond)
[17:01:43.448]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:43.448]                   {
[17:01:43.448]                     inherits <- base::inherits
[17:01:43.448]                     invokeRestart <- base::invokeRestart
[17:01:43.448]                     is.null <- base::is.null
[17:01:43.448]                     muffled <- FALSE
[17:01:43.448]                     if (inherits(cond, "message")) {
[17:01:43.448]                       muffled <- grepl(pattern, "muffleMessage")
[17:01:43.448]                       if (muffled) 
[17:01:43.448]                         invokeRestart("muffleMessage")
[17:01:43.448]                     }
[17:01:43.448]                     else if (inherits(cond, "warning")) {
[17:01:43.448]                       muffled <- grepl(pattern, "muffleWarning")
[17:01:43.448]                       if (muffled) 
[17:01:43.448]                         invokeRestart("muffleWarning")
[17:01:43.448]                     }
[17:01:43.448]                     else if (inherits(cond, "condition")) {
[17:01:43.448]                       if (!is.null(pattern)) {
[17:01:43.448]                         computeRestarts <- base::computeRestarts
[17:01:43.448]                         grepl <- base::grepl
[17:01:43.448]                         restarts <- computeRestarts(cond)
[17:01:43.448]                         for (restart in restarts) {
[17:01:43.448]                           name <- restart$name
[17:01:43.448]                           if (is.null(name)) 
[17:01:43.448]                             next
[17:01:43.448]                           if (!grepl(pattern, name)) 
[17:01:43.448]                             next
[17:01:43.448]                           invokeRestart(restart)
[17:01:43.448]                           muffled <- TRUE
[17:01:43.448]                           break
[17:01:43.448]                         }
[17:01:43.448]                       }
[17:01:43.448]                     }
[17:01:43.448]                     invisible(muffled)
[17:01:43.448]                   }
[17:01:43.448]                   muffleCondition(cond)
[17:01:43.448]                 })
[17:01:43.448]             }))
[17:01:43.448]             future::FutureResult(value = ...future.value$value, 
[17:01:43.448]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:43.448]                   ...future.rng), globalenv = if (FALSE) 
[17:01:43.448]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:43.448]                     ...future.globalenv.names))
[17:01:43.448]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:43.448]         }, condition = base::local({
[17:01:43.448]             c <- base::c
[17:01:43.448]             inherits <- base::inherits
[17:01:43.448]             invokeRestart <- base::invokeRestart
[17:01:43.448]             length <- base::length
[17:01:43.448]             list <- base::list
[17:01:43.448]             seq.int <- base::seq.int
[17:01:43.448]             signalCondition <- base::signalCondition
[17:01:43.448]             sys.calls <- base::sys.calls
[17:01:43.448]             `[[` <- base::`[[`
[17:01:43.448]             `+` <- base::`+`
[17:01:43.448]             `<<-` <- base::`<<-`
[17:01:43.448]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:43.448]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:43.448]                   3L)]
[17:01:43.448]             }
[17:01:43.448]             function(cond) {
[17:01:43.448]                 is_error <- inherits(cond, "error")
[17:01:43.448]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:43.448]                   NULL)
[17:01:43.448]                 if (is_error) {
[17:01:43.448]                   sessionInformation <- function() {
[17:01:43.448]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:43.448]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:43.448]                       search = base::search(), system = base::Sys.info())
[17:01:43.448]                   }
[17:01:43.448]                   ...future.conditions[[length(...future.conditions) + 
[17:01:43.448]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:43.448]                     cond$call), session = sessionInformation(), 
[17:01:43.448]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:43.448]                   signalCondition(cond)
[17:01:43.448]                 }
[17:01:43.448]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:43.448]                 "immediateCondition"))) {
[17:01:43.448]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:43.448]                   ...future.conditions[[length(...future.conditions) + 
[17:01:43.448]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:43.448]                   if (TRUE && !signal) {
[17:01:43.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:43.448]                     {
[17:01:43.448]                       inherits <- base::inherits
[17:01:43.448]                       invokeRestart <- base::invokeRestart
[17:01:43.448]                       is.null <- base::is.null
[17:01:43.448]                       muffled <- FALSE
[17:01:43.448]                       if (inherits(cond, "message")) {
[17:01:43.448]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:43.448]                         if (muffled) 
[17:01:43.448]                           invokeRestart("muffleMessage")
[17:01:43.448]                       }
[17:01:43.448]                       else if (inherits(cond, "warning")) {
[17:01:43.448]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:43.448]                         if (muffled) 
[17:01:43.448]                           invokeRestart("muffleWarning")
[17:01:43.448]                       }
[17:01:43.448]                       else if (inherits(cond, "condition")) {
[17:01:43.448]                         if (!is.null(pattern)) {
[17:01:43.448]                           computeRestarts <- base::computeRestarts
[17:01:43.448]                           grepl <- base::grepl
[17:01:43.448]                           restarts <- computeRestarts(cond)
[17:01:43.448]                           for (restart in restarts) {
[17:01:43.448]                             name <- restart$name
[17:01:43.448]                             if (is.null(name)) 
[17:01:43.448]                               next
[17:01:43.448]                             if (!grepl(pattern, name)) 
[17:01:43.448]                               next
[17:01:43.448]                             invokeRestart(restart)
[17:01:43.448]                             muffled <- TRUE
[17:01:43.448]                             break
[17:01:43.448]                           }
[17:01:43.448]                         }
[17:01:43.448]                       }
[17:01:43.448]                       invisible(muffled)
[17:01:43.448]                     }
[17:01:43.448]                     muffleCondition(cond, pattern = "^muffle")
[17:01:43.448]                   }
[17:01:43.448]                 }
[17:01:43.448]                 else {
[17:01:43.448]                   if (TRUE) {
[17:01:43.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:43.448]                     {
[17:01:43.448]                       inherits <- base::inherits
[17:01:43.448]                       invokeRestart <- base::invokeRestart
[17:01:43.448]                       is.null <- base::is.null
[17:01:43.448]                       muffled <- FALSE
[17:01:43.448]                       if (inherits(cond, "message")) {
[17:01:43.448]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:43.448]                         if (muffled) 
[17:01:43.448]                           invokeRestart("muffleMessage")
[17:01:43.448]                       }
[17:01:43.448]                       else if (inherits(cond, "warning")) {
[17:01:43.448]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:43.448]                         if (muffled) 
[17:01:43.448]                           invokeRestart("muffleWarning")
[17:01:43.448]                       }
[17:01:43.448]                       else if (inherits(cond, "condition")) {
[17:01:43.448]                         if (!is.null(pattern)) {
[17:01:43.448]                           computeRestarts <- base::computeRestarts
[17:01:43.448]                           grepl <- base::grepl
[17:01:43.448]                           restarts <- computeRestarts(cond)
[17:01:43.448]                           for (restart in restarts) {
[17:01:43.448]                             name <- restart$name
[17:01:43.448]                             if (is.null(name)) 
[17:01:43.448]                               next
[17:01:43.448]                             if (!grepl(pattern, name)) 
[17:01:43.448]                               next
[17:01:43.448]                             invokeRestart(restart)
[17:01:43.448]                             muffled <- TRUE
[17:01:43.448]                             break
[17:01:43.448]                           }
[17:01:43.448]                         }
[17:01:43.448]                       }
[17:01:43.448]                       invisible(muffled)
[17:01:43.448]                     }
[17:01:43.448]                     muffleCondition(cond, pattern = "^muffle")
[17:01:43.448]                   }
[17:01:43.448]                 }
[17:01:43.448]             }
[17:01:43.448]         }))
[17:01:43.448]     }, error = function(ex) {
[17:01:43.448]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:43.448]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:43.448]                 ...future.rng), started = ...future.startTime, 
[17:01:43.448]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:43.448]             version = "1.8"), class = "FutureResult")
[17:01:43.448]     }, finally = {
[17:01:43.448]         if (!identical(...future.workdir, getwd())) 
[17:01:43.448]             setwd(...future.workdir)
[17:01:43.448]         {
[17:01:43.448]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:43.448]                 ...future.oldOptions$nwarnings <- NULL
[17:01:43.448]             }
[17:01:43.448]             base::options(...future.oldOptions)
[17:01:43.448]             if (.Platform$OS.type == "windows") {
[17:01:43.448]                 old_names <- names(...future.oldEnvVars)
[17:01:43.448]                 envs <- base::Sys.getenv()
[17:01:43.448]                 names <- names(envs)
[17:01:43.448]                 common <- intersect(names, old_names)
[17:01:43.448]                 added <- setdiff(names, old_names)
[17:01:43.448]                 removed <- setdiff(old_names, names)
[17:01:43.448]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:43.448]                   envs[common]]
[17:01:43.448]                 NAMES <- toupper(changed)
[17:01:43.448]                 args <- list()
[17:01:43.448]                 for (kk in seq_along(NAMES)) {
[17:01:43.448]                   name <- changed[[kk]]
[17:01:43.448]                   NAME <- NAMES[[kk]]
[17:01:43.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:43.448]                     next
[17:01:43.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:43.448]                 }
[17:01:43.448]                 NAMES <- toupper(added)
[17:01:43.448]                 for (kk in seq_along(NAMES)) {
[17:01:43.448]                   name <- added[[kk]]
[17:01:43.448]                   NAME <- NAMES[[kk]]
[17:01:43.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:43.448]                     next
[17:01:43.448]                   args[[name]] <- ""
[17:01:43.448]                 }
[17:01:43.448]                 NAMES <- toupper(removed)
[17:01:43.448]                 for (kk in seq_along(NAMES)) {
[17:01:43.448]                   name <- removed[[kk]]
[17:01:43.448]                   NAME <- NAMES[[kk]]
[17:01:43.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:43.448]                     next
[17:01:43.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:43.448]                 }
[17:01:43.448]                 if (length(args) > 0) 
[17:01:43.448]                   base::do.call(base::Sys.setenv, args = args)
[17:01:43.448]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:43.448]             }
[17:01:43.448]             else {
[17:01:43.448]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:43.448]             }
[17:01:43.448]             {
[17:01:43.448]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:43.448]                   0L) {
[17:01:43.448]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:43.448]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:43.448]                   base::options(opts)
[17:01:43.448]                 }
[17:01:43.448]                 {
[17:01:43.448]                   {
[17:01:43.448]                     base::options(mc.cores = ...future.mc.cores.old)
[17:01:43.448]                     NULL
[17:01:43.448]                   }
[17:01:43.448]                   options(future.plan = NULL)
[17:01:43.448]                   if (is.na(NA_character_)) 
[17:01:43.448]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:43.448]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:43.448]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:43.448]                     .init = FALSE)
[17:01:43.448]                 }
[17:01:43.448]             }
[17:01:43.448]         }
[17:01:43.448]     })
[17:01:43.448]     if (TRUE) {
[17:01:43.448]         base::sink(type = "output", split = FALSE)
[17:01:43.448]         if (TRUE) {
[17:01:43.448]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:43.448]         }
[17:01:43.448]         else {
[17:01:43.448]             ...future.result["stdout"] <- base::list(NULL)
[17:01:43.448]         }
[17:01:43.448]         base::close(...future.stdout)
[17:01:43.448]         ...future.stdout <- NULL
[17:01:43.448]     }
[17:01:43.448]     ...future.result$conditions <- ...future.conditions
[17:01:43.448]     ...future.result$finished <- base::Sys.time()
[17:01:43.448]     ...future.result
[17:01:43.448] }
[17:01:43.501] MultisessionFuture started
[17:01:43.502] result() for ClusterFuture ...
[17:01:43.503] receiveMessageFromWorker() for ClusterFuture ...
[17:01:43.503] - Validating connection of MultisessionFuture
[17:01:43.535] - received message: FutureResult
[17:01:43.535] - Received FutureResult
[17:01:43.538] - Erased future from FutureRegistry
[17:01:43.538] result() for ClusterFuture ...
[17:01:43.538] - result already collected: FutureResult
[17:01:43.539] result() for ClusterFuture ... done
[17:01:43.539] receiveMessageFromWorker() for ClusterFuture ... done
[17:01:43.539] result() for ClusterFuture ... done
[17:01:43.539] result() for ClusterFuture ...
[17:01:43.539] - result already collected: FutureResult
[17:01:43.539] result() for ClusterFuture ... done
[17:01:43.539] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:01:43.540] plan(): nbrOfWorkers() = 2
[17:01:43.540] getGlobalsAndPackages() ...
[17:01:43.540] Searching for globals...
[17:01:43.542] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[17:01:43.542] Searching for globals ... DONE
[17:01:43.542] Resolving globals: FALSE
[17:01:43.542] 
[17:01:43.542] 
[17:01:43.543] getGlobalsAndPackages() ... DONE
[17:01:43.543] run() for ‘Future’ ...
[17:01:43.543] - state: ‘created’
[17:01:43.543] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:01:43.554] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:01:43.554] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:01:43.555]   - Field: ‘node’
[17:01:43.555]   - Field: ‘label’
[17:01:43.555]   - Field: ‘local’
[17:01:43.555]   - Field: ‘owner’
[17:01:43.555]   - Field: ‘envir’
[17:01:43.555]   - Field: ‘workers’
[17:01:43.555]   - Field: ‘packages’
[17:01:43.555]   - Field: ‘gc’
[17:01:43.555]   - Field: ‘conditions’
[17:01:43.555]   - Field: ‘persistent’
[17:01:43.556]   - Field: ‘expr’
[17:01:43.556]   - Field: ‘uuid’
[17:01:43.556]   - Field: ‘seed’
[17:01:43.556]   - Field: ‘version’
[17:01:43.556]   - Field: ‘result’
[17:01:43.556]   - Field: ‘asynchronous’
[17:01:43.556]   - Field: ‘calls’
[17:01:43.556]   - Field: ‘globals’
[17:01:43.557]   - Field: ‘stdout’
[17:01:43.557]   - Field: ‘earlySignal’
[17:01:43.557]   - Field: ‘lazy’
[17:01:43.557]   - Field: ‘state’
[17:01:43.557] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:01:43.557] - Launch lazy future ...
[17:01:43.557] Packages needed by the future expression (n = 0): <none>
[17:01:43.558] Packages needed by future strategies (n = 0): <none>
[17:01:43.558] {
[17:01:43.558]     {
[17:01:43.558]         {
[17:01:43.558]             ...future.startTime <- base::Sys.time()
[17:01:43.558]             {
[17:01:43.558]                 {
[17:01:43.558]                   {
[17:01:43.558]                     {
[17:01:43.558]                       base::local({
[17:01:43.558]                         has_future <- base::requireNamespace("future", 
[17:01:43.558]                           quietly = TRUE)
[17:01:43.558]                         if (has_future) {
[17:01:43.558]                           ns <- base::getNamespace("future")
[17:01:43.558]                           version <- ns[[".package"]][["version"]]
[17:01:43.558]                           if (is.null(version)) 
[17:01:43.558]                             version <- utils::packageVersion("future")
[17:01:43.558]                         }
[17:01:43.558]                         else {
[17:01:43.558]                           version <- NULL
[17:01:43.558]                         }
[17:01:43.558]                         if (!has_future || version < "1.8.0") {
[17:01:43.558]                           info <- base::c(r_version = base::gsub("R version ", 
[17:01:43.558]                             "", base::R.version$version.string), 
[17:01:43.558]                             platform = base::sprintf("%s (%s-bit)", 
[17:01:43.558]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:43.558]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:43.558]                               "release", "version")], collapse = " "), 
[17:01:43.558]                             hostname = base::Sys.info()[["nodename"]])
[17:01:43.558]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:01:43.558]                             info)
[17:01:43.558]                           info <- base::paste(info, collapse = "; ")
[17:01:43.558]                           if (!has_future) {
[17:01:43.558]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:43.558]                               info)
[17:01:43.558]                           }
[17:01:43.558]                           else {
[17:01:43.558]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:43.558]                               info, version)
[17:01:43.558]                           }
[17:01:43.558]                           base::stop(msg)
[17:01:43.558]                         }
[17:01:43.558]                       })
[17:01:43.558]                     }
[17:01:43.558]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:01:43.558]                     base::options(mc.cores = 1L)
[17:01:43.558]                   }
[17:01:43.558]                   ...future.strategy.old <- future::plan("list")
[17:01:43.558]                   options(future.plan = NULL)
[17:01:43.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:43.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:43.558]                 }
[17:01:43.558]                 ...future.workdir <- getwd()
[17:01:43.558]             }
[17:01:43.558]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:43.558]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:43.558]         }
[17:01:43.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:43.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:43.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:43.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:43.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:43.558]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:43.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:43.558]             base::names(...future.oldOptions))
[17:01:43.558]     }
[17:01:43.558]     if (FALSE) {
[17:01:43.558]     }
[17:01:43.558]     else {
[17:01:43.558]         if (TRUE) {
[17:01:43.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:43.558]                 open = "w")
[17:01:43.558]         }
[17:01:43.558]         else {
[17:01:43.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:43.558]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:43.558]         }
[17:01:43.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:43.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:43.558]             base::sink(type = "output", split = FALSE)
[17:01:43.558]             base::close(...future.stdout)
[17:01:43.558]         }, add = TRUE)
[17:01:43.558]     }
[17:01:43.558]     ...future.frame <- base::sys.nframe()
[17:01:43.558]     ...future.conditions <- base::list()
[17:01:43.558]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:43.558]     if (FALSE) {
[17:01:43.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:43.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:43.558]     }
[17:01:43.558]     ...future.result <- base::tryCatch({
[17:01:43.558]         base::withCallingHandlers({
[17:01:43.558]             ...future.value <- base::withVisible(base::local({
[17:01:43.558]                 ...future.makeSendCondition <- base::local({
[17:01:43.558]                   sendCondition <- NULL
[17:01:43.558]                   function(frame = 1L) {
[17:01:43.558]                     if (is.function(sendCondition)) 
[17:01:43.558]                       return(sendCondition)
[17:01:43.558]                     ns <- getNamespace("parallel")
[17:01:43.558]                     if (exists("sendData", mode = "function", 
[17:01:43.558]                       envir = ns)) {
[17:01:43.558]                       parallel_sendData <- get("sendData", mode = "function", 
[17:01:43.558]                         envir = ns)
[17:01:43.558]                       envir <- sys.frame(frame)
[17:01:43.558]                       master <- NULL
[17:01:43.558]                       while (!identical(envir, .GlobalEnv) && 
[17:01:43.558]                         !identical(envir, emptyenv())) {
[17:01:43.558]                         if (exists("master", mode = "list", envir = envir, 
[17:01:43.558]                           inherits = FALSE)) {
[17:01:43.558]                           master <- get("master", mode = "list", 
[17:01:43.558]                             envir = envir, inherits = FALSE)
[17:01:43.558]                           if (inherits(master, c("SOCKnode", 
[17:01:43.558]                             "SOCK0node"))) {
[17:01:43.558]                             sendCondition <<- function(cond) {
[17:01:43.558]                               data <- list(type = "VALUE", value = cond, 
[17:01:43.558]                                 success = TRUE)
[17:01:43.558]                               parallel_sendData(master, data)
[17:01:43.558]                             }
[17:01:43.558]                             return(sendCondition)
[17:01:43.558]                           }
[17:01:43.558]                         }
[17:01:43.558]                         frame <- frame + 1L
[17:01:43.558]                         envir <- sys.frame(frame)
[17:01:43.558]                       }
[17:01:43.558]                     }
[17:01:43.558]                     sendCondition <<- function(cond) NULL
[17:01:43.558]                   }
[17:01:43.558]                 })
[17:01:43.558]                 withCallingHandlers({
[17:01:43.558]                   {
[17:01:43.558]                     Sys.sleep(3)
[17:01:43.558]                     42L
[17:01:43.558]                     stop("Woops")
[17:01:43.558]                   }
[17:01:43.558]                 }, immediateCondition = function(cond) {
[17:01:43.558]                   sendCondition <- ...future.makeSendCondition()
[17:01:43.558]                   sendCondition(cond)
[17:01:43.558]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:43.558]                   {
[17:01:43.558]                     inherits <- base::inherits
[17:01:43.558]                     invokeRestart <- base::invokeRestart
[17:01:43.558]                     is.null <- base::is.null
[17:01:43.558]                     muffled <- FALSE
[17:01:43.558]                     if (inherits(cond, "message")) {
[17:01:43.558]                       muffled <- grepl(pattern, "muffleMessage")
[17:01:43.558]                       if (muffled) 
[17:01:43.558]                         invokeRestart("muffleMessage")
[17:01:43.558]                     }
[17:01:43.558]                     else if (inherits(cond, "warning")) {
[17:01:43.558]                       muffled <- grepl(pattern, "muffleWarning")
[17:01:43.558]                       if (muffled) 
[17:01:43.558]                         invokeRestart("muffleWarning")
[17:01:43.558]                     }
[17:01:43.558]                     else if (inherits(cond, "condition")) {
[17:01:43.558]                       if (!is.null(pattern)) {
[17:01:43.558]                         computeRestarts <- base::computeRestarts
[17:01:43.558]                         grepl <- base::grepl
[17:01:43.558]                         restarts <- computeRestarts(cond)
[17:01:43.558]                         for (restart in restarts) {
[17:01:43.558]                           name <- restart$name
[17:01:43.558]                           if (is.null(name)) 
[17:01:43.558]                             next
[17:01:43.558]                           if (!grepl(pattern, name)) 
[17:01:43.558]                             next
[17:01:43.558]                           invokeRestart(restart)
[17:01:43.558]                           muffled <- TRUE
[17:01:43.558]                           break
[17:01:43.558]                         }
[17:01:43.558]                       }
[17:01:43.558]                     }
[17:01:43.558]                     invisible(muffled)
[17:01:43.558]                   }
[17:01:43.558]                   muffleCondition(cond)
[17:01:43.558]                 })
[17:01:43.558]             }))
[17:01:43.558]             future::FutureResult(value = ...future.value$value, 
[17:01:43.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:43.558]                   ...future.rng), globalenv = if (FALSE) 
[17:01:43.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:43.558]                     ...future.globalenv.names))
[17:01:43.558]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:43.558]         }, condition = base::local({
[17:01:43.558]             c <- base::c
[17:01:43.558]             inherits <- base::inherits
[17:01:43.558]             invokeRestart <- base::invokeRestart
[17:01:43.558]             length <- base::length
[17:01:43.558]             list <- base::list
[17:01:43.558]             seq.int <- base::seq.int
[17:01:43.558]             signalCondition <- base::signalCondition
[17:01:43.558]             sys.calls <- base::sys.calls
[17:01:43.558]             `[[` <- base::`[[`
[17:01:43.558]             `+` <- base::`+`
[17:01:43.558]             `<<-` <- base::`<<-`
[17:01:43.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:43.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:43.558]                   3L)]
[17:01:43.558]             }
[17:01:43.558]             function(cond) {
[17:01:43.558]                 is_error <- inherits(cond, "error")
[17:01:43.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:43.558]                   NULL)
[17:01:43.558]                 if (is_error) {
[17:01:43.558]                   sessionInformation <- function() {
[17:01:43.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:43.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:43.558]                       search = base::search(), system = base::Sys.info())
[17:01:43.558]                   }
[17:01:43.558]                   ...future.conditions[[length(...future.conditions) + 
[17:01:43.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:43.558]                     cond$call), session = sessionInformation(), 
[17:01:43.558]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:43.558]                   signalCondition(cond)
[17:01:43.558]                 }
[17:01:43.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:43.558]                 "immediateCondition"))) {
[17:01:43.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:43.558]                   ...future.conditions[[length(...future.conditions) + 
[17:01:43.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:43.558]                   if (TRUE && !signal) {
[17:01:43.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:43.558]                     {
[17:01:43.558]                       inherits <- base::inherits
[17:01:43.558]                       invokeRestart <- base::invokeRestart
[17:01:43.558]                       is.null <- base::is.null
[17:01:43.558]                       muffled <- FALSE
[17:01:43.558]                       if (inherits(cond, "message")) {
[17:01:43.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:43.558]                         if (muffled) 
[17:01:43.558]                           invokeRestart("muffleMessage")
[17:01:43.558]                       }
[17:01:43.558]                       else if (inherits(cond, "warning")) {
[17:01:43.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:43.558]                         if (muffled) 
[17:01:43.558]                           invokeRestart("muffleWarning")
[17:01:43.558]                       }
[17:01:43.558]                       else if (inherits(cond, "condition")) {
[17:01:43.558]                         if (!is.null(pattern)) {
[17:01:43.558]                           computeRestarts <- base::computeRestarts
[17:01:43.558]                           grepl <- base::grepl
[17:01:43.558]                           restarts <- computeRestarts(cond)
[17:01:43.558]                           for (restart in restarts) {
[17:01:43.558]                             name <- restart$name
[17:01:43.558]                             if (is.null(name)) 
[17:01:43.558]                               next
[17:01:43.558]                             if (!grepl(pattern, name)) 
[17:01:43.558]                               next
[17:01:43.558]                             invokeRestart(restart)
[17:01:43.558]                             muffled <- TRUE
[17:01:43.558]                             break
[17:01:43.558]                           }
[17:01:43.558]                         }
[17:01:43.558]                       }
[17:01:43.558]                       invisible(muffled)
[17:01:43.558]                     }
[17:01:43.558]                     muffleCondition(cond, pattern = "^muffle")
[17:01:43.558]                   }
[17:01:43.558]                 }
[17:01:43.558]                 else {
[17:01:43.558]                   if (TRUE) {
[17:01:43.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:43.558]                     {
[17:01:43.558]                       inherits <- base::inherits
[17:01:43.558]                       invokeRestart <- base::invokeRestart
[17:01:43.558]                       is.null <- base::is.null
[17:01:43.558]                       muffled <- FALSE
[17:01:43.558]                       if (inherits(cond, "message")) {
[17:01:43.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:43.558]                         if (muffled) 
[17:01:43.558]                           invokeRestart("muffleMessage")
[17:01:43.558]                       }
[17:01:43.558]                       else if (inherits(cond, "warning")) {
[17:01:43.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:43.558]                         if (muffled) 
[17:01:43.558]                           invokeRestart("muffleWarning")
[17:01:43.558]                       }
[17:01:43.558]                       else if (inherits(cond, "condition")) {
[17:01:43.558]                         if (!is.null(pattern)) {
[17:01:43.558]                           computeRestarts <- base::computeRestarts
[17:01:43.558]                           grepl <- base::grepl
[17:01:43.558]                           restarts <- computeRestarts(cond)
[17:01:43.558]                           for (restart in restarts) {
[17:01:43.558]                             name <- restart$name
[17:01:43.558]                             if (is.null(name)) 
[17:01:43.558]                               next
[17:01:43.558]                             if (!grepl(pattern, name)) 
[17:01:43.558]                               next
[17:01:43.558]                             invokeRestart(restart)
[17:01:43.558]                             muffled <- TRUE
[17:01:43.558]                             break
[17:01:43.558]                           }
[17:01:43.558]                         }
[17:01:43.558]                       }
[17:01:43.558]                       invisible(muffled)
[17:01:43.558]                     }
[17:01:43.558]                     muffleCondition(cond, pattern = "^muffle")
[17:01:43.558]                   }
[17:01:43.558]                 }
[17:01:43.558]             }
[17:01:43.558]         }))
[17:01:43.558]     }, error = function(ex) {
[17:01:43.558]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:43.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:43.558]                 ...future.rng), started = ...future.startTime, 
[17:01:43.558]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:43.558]             version = "1.8"), class = "FutureResult")
[17:01:43.558]     }, finally = {
[17:01:43.558]         if (!identical(...future.workdir, getwd())) 
[17:01:43.558]             setwd(...future.workdir)
[17:01:43.558]         {
[17:01:43.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:43.558]                 ...future.oldOptions$nwarnings <- NULL
[17:01:43.558]             }
[17:01:43.558]             base::options(...future.oldOptions)
[17:01:43.558]             if (.Platform$OS.type == "windows") {
[17:01:43.558]                 old_names <- names(...future.oldEnvVars)
[17:01:43.558]                 envs <- base::Sys.getenv()
[17:01:43.558]                 names <- names(envs)
[17:01:43.558]                 common <- intersect(names, old_names)
[17:01:43.558]                 added <- setdiff(names, old_names)
[17:01:43.558]                 removed <- setdiff(old_names, names)
[17:01:43.558]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:43.558]                   envs[common]]
[17:01:43.558]                 NAMES <- toupper(changed)
[17:01:43.558]                 args <- list()
[17:01:43.558]                 for (kk in seq_along(NAMES)) {
[17:01:43.558]                   name <- changed[[kk]]
[17:01:43.558]                   NAME <- NAMES[[kk]]
[17:01:43.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:43.558]                     next
[17:01:43.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:43.558]                 }
[17:01:43.558]                 NAMES <- toupper(added)
[17:01:43.558]                 for (kk in seq_along(NAMES)) {
[17:01:43.558]                   name <- added[[kk]]
[17:01:43.558]                   NAME <- NAMES[[kk]]
[17:01:43.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:43.558]                     next
[17:01:43.558]                   args[[name]] <- ""
[17:01:43.558]                 }
[17:01:43.558]                 NAMES <- toupper(removed)
[17:01:43.558]                 for (kk in seq_along(NAMES)) {
[17:01:43.558]                   name <- removed[[kk]]
[17:01:43.558]                   NAME <- NAMES[[kk]]
[17:01:43.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:43.558]                     next
[17:01:43.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:43.558]                 }
[17:01:43.558]                 if (length(args) > 0) 
[17:01:43.558]                   base::do.call(base::Sys.setenv, args = args)
[17:01:43.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:43.558]             }
[17:01:43.558]             else {
[17:01:43.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:43.558]             }
[17:01:43.558]             {
[17:01:43.558]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:43.558]                   0L) {
[17:01:43.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:43.558]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:43.558]                   base::options(opts)
[17:01:43.558]                 }
[17:01:43.558]                 {
[17:01:43.558]                   {
[17:01:43.558]                     base::options(mc.cores = ...future.mc.cores.old)
[17:01:43.558]                     NULL
[17:01:43.558]                   }
[17:01:43.558]                   options(future.plan = NULL)
[17:01:43.558]                   if (is.na(NA_character_)) 
[17:01:43.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:43.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:43.558]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:43.558]                     .init = FALSE)
[17:01:43.558]                 }
[17:01:43.558]             }
[17:01:43.558]         }
[17:01:43.558]     })
[17:01:43.558]     if (TRUE) {
[17:01:43.558]         base::sink(type = "output", split = FALSE)
[17:01:43.558]         if (TRUE) {
[17:01:43.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:43.558]         }
[17:01:43.558]         else {
[17:01:43.558]             ...future.result["stdout"] <- base::list(NULL)
[17:01:43.558]         }
[17:01:43.558]         base::close(...future.stdout)
[17:01:43.558]         ...future.stdout <- NULL
[17:01:43.558]     }
[17:01:43.558]     ...future.result$conditions <- ...future.conditions
[17:01:43.558]     ...future.result$finished <- base::Sys.time()
[17:01:43.558]     ...future.result
[17:01:43.558] }
[17:01:43.562] MultisessionFuture started
[17:01:43.562] - Launch lazy future ... done
[17:01:43.562] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[17:01:46.570] receiveMessageFromWorker() for ClusterFuture ...
[17:01:46.570] - Validating connection of MultisessionFuture
[17:01:46.571] - received message: FutureResult
[17:01:46.571] - Received FutureResult
[17:01:46.571] - Erased future from FutureRegistry
[17:01:46.571] result() for ClusterFuture ...
[17:01:46.571] - result already collected: FutureResult
[17:01:46.571] result() for ClusterFuture ... done
[17:01:46.571] signalConditions() ...
[17:01:46.571]  - include = ‘immediateCondition’
[17:01:46.571]  - exclude = 
[17:01:46.572]  - resignal = FALSE
[17:01:46.572]  - Number of conditions: 1
[17:01:46.572] signalConditions() ... done
[17:01:46.572] receiveMessageFromWorker() for ClusterFuture ... done
[17:01:46.572] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: c409cf02-0cea-d597-cbf5-4c8bf3e886bb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[17:01:46.574] plan(): Setting new future strategy stack:
[17:01:46.574] List of future strategies:
[17:01:46.574] 1. FutureStrategy:
[17:01:46.574]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:46.574]    - tweaked: FALSE
[17:01:46.574]    - call: future::plan(oplan)
[17:01:46.574] plan(): nbrOfWorkers() = 1
> 
