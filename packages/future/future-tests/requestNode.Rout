
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:05:55.606] plan(): Setting new future strategy stack:
[18:05:55.607] List of future strategies:
[18:05:55.607] 1. sequential:
[18:05:55.607]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:55.607]    - tweaked: FALSE
[18:05:55.607]    - call: future::plan("sequential")
[18:05:55.631] plan(): nbrOfWorkers() = 1
> 
> message("*** requestNode() ...")
*** requestNode() ...
> 
> message("*** requestNode() - exceptions ...")
*** requestNode() - exceptions ...
> 
> workers <- makeClusterPSOCK(2L)
[18:05:55.653] [local output] makeClusterPSOCK() ...
[18:05:55.701] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:05:55.703] [local output] Base port: 11661
[18:05:55.703] [local output] Getting setup options for 2 cluster nodes ...
[18:05:55.703] [local output]  - Node 1 of 2 ...
[18:05:55.704] [local output] localMachine=TRUE => revtunnel=FALSE

[18:05:55.706] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp19thpj/worker.rank=1.parallelly.parent=329122.505a23f0e5808.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp19thpj/worker.rank=1.parallelly.parent=329122.505a23f0e5808.pid")'’
[18:05:55.960] - Possible to infer worker's PID: TRUE
[18:05:55.960] [local output] Rscript port: 11661

[18:05:55.961] [local output]  - Node 2 of 2 ...
[18:05:55.961] [local output] localMachine=TRUE => revtunnel=FALSE

[18:05:55.963] [local output] Rscript port: 11661

[18:05:55.963] [local output] Getting setup options for 2 cluster nodes ... done
[18:05:55.963] [local output]  - Parallel setup requested for some PSOCK nodes
[18:05:55.964] [local output] Setting up PSOCK nodes in parallel
[18:05:55.965] List of 36
[18:05:55.965]  $ worker          : chr "localhost"
[18:05:55.965]   ..- attr(*, "localhost")= logi TRUE
[18:05:55.965]  $ master          : chr "localhost"
[18:05:55.965]  $ port            : int 11661
[18:05:55.965]  $ connectTimeout  : num 120
[18:05:55.965]  $ timeout         : num 2592000
[18:05:55.965]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:05:55.965]  $ homogeneous     : logi TRUE
[18:05:55.965]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:05:55.965]  $ rscript_envs    : NULL
[18:05:55.965]  $ rscript_libs    : NULL
[18:05:55.965]  $ rscript_startup : NULL
[18:05:55.965]  $ rscript_sh      : chr "sh"
[18:05:55.965]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:05:55.965]  $ methods         : logi TRUE
[18:05:55.965]  $ socketOptions   : chr "no-delay"
[18:05:55.965]  $ useXDR          : logi FALSE
[18:05:55.965]  $ outfile         : chr "/dev/null"
[18:05:55.965]  $ renice          : int NA
[18:05:55.965]  $ rshcmd          : NULL
[18:05:55.965]  $ user            : chr(0) 
[18:05:55.965]  $ revtunnel       : logi FALSE
[18:05:55.965]  $ rshlogfile      : NULL
[18:05:55.965]  $ rshopts         : chr(0) 
[18:05:55.965]  $ rank            : int 1
[18:05:55.965]  $ manual          : logi FALSE
[18:05:55.965]  $ dryrun          : logi FALSE
[18:05:55.965]  $ quiet           : logi FALSE
[18:05:55.965]  $ setup_strategy  : chr "parallel"
[18:05:55.965]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:05:55.965]  $ pidfile         : chr "/tmp/Rtmp19thpj/worker.rank=1.parallelly.parent=329122.505a23f0e5808.pid"
[18:05:55.965]  $ rshcmd_label    : NULL
[18:05:55.965]  $ rsh_call        : NULL
[18:05:55.965]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:05:55.965]  $ localMachine    : logi TRUE
[18:05:55.965]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:05:55.965]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:05:55.965]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:05:55.965]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:05:55.965]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:05:55.965]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:05:55.965]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:05:55.965]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:05:55.965]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:05:55.965]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:05:55.965]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:05:55.965]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:05:55.965]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:05:55.965]  $ arguments       :List of 28
[18:05:55.965]   ..$ worker          : chr "localhost"
[18:05:55.965]   ..$ master          : NULL
[18:05:55.965]   ..$ port            : int 11661
[18:05:55.965]   ..$ connectTimeout  : num 120
[18:05:55.965]   ..$ timeout         : num 2592000
[18:05:55.965]   ..$ rscript         : NULL
[18:05:55.965]   ..$ homogeneous     : NULL
[18:05:55.965]   ..$ rscript_args    : NULL
[18:05:55.965]   ..$ rscript_envs    : NULL
[18:05:55.965]   ..$ rscript_libs    : NULL
[18:05:55.965]   ..$ rscript_startup : NULL
[18:05:55.965]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:05:55.965]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:05:55.965]   ..$ methods         : logi TRUE
[18:05:55.965]   ..$ socketOptions   : chr "no-delay"
[18:05:55.965]   ..$ useXDR          : logi FALSE
[18:05:55.965]   ..$ outfile         : chr "/dev/null"
[18:05:55.965]   ..$ renice          : int NA
[18:05:55.965]   ..$ rshcmd          : NULL
[18:05:55.965]   ..$ user            : NULL
[18:05:55.965]   ..$ revtunnel       : logi NA
[18:05:55.965]   ..$ rshlogfile      : NULL
[18:05:55.965]   ..$ rshopts         : NULL
[18:05:55.965]   ..$ rank            : int 1
[18:05:55.965]   ..$ manual          : logi FALSE
[18:05:55.965]   ..$ dryrun          : logi FALSE
[18:05:55.965]   ..$ quiet           : logi FALSE
[18:05:55.965]   ..$ setup_strategy  : chr "parallel"
[18:05:55.965]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:05:56.001] [local output] System call to launch all workers:
[18:05:56.002] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp19thpj/worker.rank=1.parallelly.parent=329122.505a23f0e5808.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11661 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:05:56.002] [local output] Starting PSOCK main server
[18:05:56.010] [local output] Workers launched
[18:05:56.010] [local output] Waiting for workers to connect back
[18:05:56.010]  - [local output] 0 workers out of 2 ready
[18:05:56.351]  - [local output] 0 workers out of 2 ready
[18:05:56.352]  - [local output] 1 workers out of 2 ready
[18:05:56.367]  - [local output] 1 workers out of 2 ready
[18:05:56.368]  - [local output] 2 workers out of 2 ready
[18:05:56.368] [local output] Launching of workers completed
[18:05:56.368] [local output] Collecting session information from workers
[18:05:56.370] [local output]  - Worker #1 of 2
[18:05:56.371] [local output]  - Worker #2 of 2
[18:05:56.372] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)
> 
> res <- tryCatch({
+   requestNode(function() {}, workers = workers, timeout = -1.0)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch({
+   requestNode(function() {}, workers = workers, alpha = 0)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> parallel::stopCluster(workers)
> 
> message("*** requestNode() - exceptions ... DONE")
*** requestNode() - exceptions ... DONE
> 
> message("*** requestNode() - timeout ...")
*** requestNode() - timeout ...
> 
> plan(cluster, workers = "localhost")
[18:05:56.381] plan(): Setting new future strategy stack:
[18:05:56.382] List of future strategies:
[18:05:56.382] 1. cluster:
[18:05:56.382]    - args: function (..., workers = "localhost", envir = parent.frame())
[18:05:56.382]    - tweaked: TRUE
[18:05:56.382]    - call: plan(cluster, workers = "localhost")
[18:05:56.425] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:05:56.426] cluster:
[18:05:56.426] - args: function (..., workers = "localhost", envir = parent.frame())
[18:05:56.426] - tweaked: TRUE
[18:05:56.426] - call: plan(cluster, workers = "localhost")
[18:05:56.429] getGlobalsAndPackages() ...
[18:05:56.429] Not searching for globals
[18:05:56.429] - globals: [0] <none>
[18:05:56.430] getGlobalsAndPackages() ... DONE
[18:05:56.431] [local output] makeClusterPSOCK() ...
[18:05:56.432] [local output] Workers: [n = 1] ‘localhost’
[18:05:56.433] [local output] Base port: 11522
[18:05:56.433] [local output] Getting setup options for 1 cluster nodes ...
[18:05:56.433] [local output]  - Node 1 of 1 ...
[18:05:56.434] [local output] localMachine=TRUE => revtunnel=FALSE

[18:05:56.435] [local output] Rscript port: 11522

[18:05:56.436] [local output] Getting setup options for 1 cluster nodes ... done
[18:05:56.436] [local output]  - Parallel setup requested for some PSOCK nodes
[18:05:56.437] [local output] Setting up PSOCK nodes in parallel
[18:05:56.437] List of 36
[18:05:56.437]  $ worker          : chr "localhost"
[18:05:56.437]   ..- attr(*, "localhost")= logi TRUE
[18:05:56.437]  $ master          : chr "localhost"
[18:05:56.437]  $ port            : int 11522
[18:05:56.437]  $ connectTimeout  : num 120
[18:05:56.437]  $ timeout         : num 2592000
[18:05:56.437]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:05:56.437]  $ homogeneous     : logi TRUE
[18:05:56.437]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:05:56.437]  $ rscript_envs    : NULL
[18:05:56.437]  $ rscript_libs    : NULL
[18:05:56.437]  $ rscript_startup : NULL
[18:05:56.437]  $ rscript_sh      : chr "sh"
[18:05:56.437]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:05:56.437]  $ methods         : logi TRUE
[18:05:56.437]  $ socketOptions   : chr "no-delay"
[18:05:56.437]  $ useXDR          : logi FALSE
[18:05:56.437]  $ outfile         : chr "/dev/null"
[18:05:56.437]  $ renice          : int NA
[18:05:56.437]  $ rshcmd          : NULL
[18:05:56.437]  $ user            : chr(0) 
[18:05:56.437]  $ revtunnel       : logi FALSE
[18:05:56.437]  $ rshlogfile      : NULL
[18:05:56.437]  $ rshopts         : chr(0) 
[18:05:56.437]  $ rank            : int 1
[18:05:56.437]  $ manual          : logi FALSE
[18:05:56.437]  $ dryrun          : logi FALSE
[18:05:56.437]  $ quiet           : logi FALSE
[18:05:56.437]  $ setup_strategy  : chr "parallel"
[18:05:56.437]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:05:56.437]  $ pidfile         : chr "/tmp/Rtmp19thpj/worker.rank=1.parallelly.parent=329122.505a22c7e3a7d.pid"
[18:05:56.437]  $ rshcmd_label    : NULL
[18:05:56.437]  $ rsh_call        : NULL
[18:05:56.437]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:05:56.437]  $ localMachine    : logi TRUE
[18:05:56.437]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:05:56.437]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:05:56.437]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:05:56.437]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:05:56.437]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:05:56.437]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:05:56.437]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:05:56.437]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:05:56.437]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:05:56.437]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:05:56.437]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:05:56.437]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:05:56.437]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:05:56.437]  $ arguments       :List of 28
[18:05:56.437]   ..$ worker          : chr "localhost"
[18:05:56.437]   ..$ master          : NULL
[18:05:56.437]   ..$ port            : int 11522
[18:05:56.437]   ..$ connectTimeout  : num 120
[18:05:56.437]   ..$ timeout         : num 2592000
[18:05:56.437]   ..$ rscript         : NULL
[18:05:56.437]   ..$ homogeneous     : NULL
[18:05:56.437]   ..$ rscript_args    : NULL
[18:05:56.437]   ..$ rscript_envs    : NULL
[18:05:56.437]   ..$ rscript_libs    : NULL
[18:05:56.437]   ..$ rscript_startup : NULL
[18:05:56.437]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:05:56.437]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:05:56.437]   ..$ methods         : logi TRUE
[18:05:56.437]   ..$ socketOptions   : chr "no-delay"
[18:05:56.437]   ..$ useXDR          : logi FALSE
[18:05:56.437]   ..$ outfile         : chr "/dev/null"
[18:05:56.437]   ..$ renice          : int NA
[18:05:56.437]   ..$ rshcmd          : NULL
[18:05:56.437]   ..$ user            : NULL
[18:05:56.437]   ..$ revtunnel       : logi NA
[18:05:56.437]   ..$ rshlogfile      : NULL
[18:05:56.437]   ..$ rshopts         : NULL
[18:05:56.437]   ..$ rank            : int 1
[18:05:56.437]   ..$ manual          : logi FALSE
[18:05:56.437]   ..$ dryrun          : logi FALSE
[18:05:56.437]   ..$ quiet           : logi FALSE
[18:05:56.437]   ..$ setup_strategy  : chr "parallel"
[18:05:56.437]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:05:56.476] [local output] System call to launch all workers:
[18:05:56.477] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp19thpj/worker.rank=1.parallelly.parent=329122.505a22c7e3a7d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11522 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:05:56.477] [local output] Starting PSOCK main server
[18:05:56.479] [local output] Workers launched
[18:05:56.479] [local output] Waiting for workers to connect back
[18:05:56.479]  - [local output] 0 workers out of 1 ready
[18:05:56.751]  - [local output] 0 workers out of 1 ready
[18:05:56.751]  - [local output] 1 workers out of 1 ready
[18:05:56.751] [local output] Launching of workers completed
[18:05:56.752] [local output] Collecting session information from workers
[18:05:56.753] [local output]  - Worker #1 of 1
[18:05:56.753] [local output] makeClusterPSOCK() ... done
[18:05:56.763] Packages needed by the future expression (n = 0): <none>
[18:05:56.764] Packages needed by future strategies (n = 0): <none>
[18:05:56.765] {
[18:05:56.765]     {
[18:05:56.765]         {
[18:05:56.765]             ...future.startTime <- base::Sys.time()
[18:05:56.765]             {
[18:05:56.765]                 {
[18:05:56.765]                   {
[18:05:56.765]                     base::local({
[18:05:56.765]                       has_future <- base::requireNamespace("future", 
[18:05:56.765]                         quietly = TRUE)
[18:05:56.765]                       if (has_future) {
[18:05:56.765]                         ns <- base::getNamespace("future")
[18:05:56.765]                         version <- ns[[".package"]][["version"]]
[18:05:56.765]                         if (is.null(version)) 
[18:05:56.765]                           version <- utils::packageVersion("future")
[18:05:56.765]                       }
[18:05:56.765]                       else {
[18:05:56.765]                         version <- NULL
[18:05:56.765]                       }
[18:05:56.765]                       if (!has_future || version < "1.8.0") {
[18:05:56.765]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:56.765]                           "", base::R.version$version.string), 
[18:05:56.765]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:56.765]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:56.765]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:56.765]                             "release", "version")], collapse = " "), 
[18:05:56.765]                           hostname = base::Sys.info()[["nodename"]])
[18:05:56.765]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:56.765]                           info)
[18:05:56.765]                         info <- base::paste(info, collapse = "; ")
[18:05:56.765]                         if (!has_future) {
[18:05:56.765]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:56.765]                             info)
[18:05:56.765]                         }
[18:05:56.765]                         else {
[18:05:56.765]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:56.765]                             info, version)
[18:05:56.765]                         }
[18:05:56.765]                         base::stop(msg)
[18:05:56.765]                       }
[18:05:56.765]                     })
[18:05:56.765]                   }
[18:05:56.765]                   ...future.strategy.old <- future::plan("list")
[18:05:56.765]                   options(future.plan = NULL)
[18:05:56.765]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:56.765]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:56.765]                 }
[18:05:56.765]                 ...future.workdir <- getwd()
[18:05:56.765]             }
[18:05:56.765]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:56.765]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:56.765]         }
[18:05:56.765]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:56.765]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:56.765]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:56.765]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:56.765]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:56.765]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:56.765]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:56.765]             base::names(...future.oldOptions))
[18:05:56.765]     }
[18:05:56.765]     if (FALSE) {
[18:05:56.765]     }
[18:05:56.765]     else {
[18:05:56.765]         if (TRUE) {
[18:05:56.765]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:56.765]                 open = "w")
[18:05:56.765]         }
[18:05:56.765]         else {
[18:05:56.765]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:56.765]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:56.765]         }
[18:05:56.765]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:56.765]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:56.765]             base::sink(type = "output", split = FALSE)
[18:05:56.765]             base::close(...future.stdout)
[18:05:56.765]         }, add = TRUE)
[18:05:56.765]     }
[18:05:56.765]     ...future.frame <- base::sys.nframe()
[18:05:56.765]     ...future.conditions <- base::list()
[18:05:56.765]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:56.765]     if (FALSE) {
[18:05:56.765]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:56.765]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:56.765]     }
[18:05:56.765]     ...future.result <- base::tryCatch({
[18:05:56.765]         base::withCallingHandlers({
[18:05:56.765]             ...future.value <- base::withVisible(base::local({
[18:05:56.765]                 ...future.makeSendCondition <- base::local({
[18:05:56.765]                   sendCondition <- NULL
[18:05:56.765]                   function(frame = 1L) {
[18:05:56.765]                     if (is.function(sendCondition)) 
[18:05:56.765]                       return(sendCondition)
[18:05:56.765]                     ns <- getNamespace("parallel")
[18:05:56.765]                     if (exists("sendData", mode = "function", 
[18:05:56.765]                       envir = ns)) {
[18:05:56.765]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:56.765]                         envir = ns)
[18:05:56.765]                       envir <- sys.frame(frame)
[18:05:56.765]                       master <- NULL
[18:05:56.765]                       while (!identical(envir, .GlobalEnv) && 
[18:05:56.765]                         !identical(envir, emptyenv())) {
[18:05:56.765]                         if (exists("master", mode = "list", envir = envir, 
[18:05:56.765]                           inherits = FALSE)) {
[18:05:56.765]                           master <- get("master", mode = "list", 
[18:05:56.765]                             envir = envir, inherits = FALSE)
[18:05:56.765]                           if (inherits(master, c("SOCKnode", 
[18:05:56.765]                             "SOCK0node"))) {
[18:05:56.765]                             sendCondition <<- function(cond) {
[18:05:56.765]                               data <- list(type = "VALUE", value = cond, 
[18:05:56.765]                                 success = TRUE)
[18:05:56.765]                               parallel_sendData(master, data)
[18:05:56.765]                             }
[18:05:56.765]                             return(sendCondition)
[18:05:56.765]                           }
[18:05:56.765]                         }
[18:05:56.765]                         frame <- frame + 1L
[18:05:56.765]                         envir <- sys.frame(frame)
[18:05:56.765]                       }
[18:05:56.765]                     }
[18:05:56.765]                     sendCondition <<- function(cond) NULL
[18:05:56.765]                   }
[18:05:56.765]                 })
[18:05:56.765]                 withCallingHandlers({
[18:05:56.765]                   NA
[18:05:56.765]                 }, immediateCondition = function(cond) {
[18:05:56.765]                   sendCondition <- ...future.makeSendCondition()
[18:05:56.765]                   sendCondition(cond)
[18:05:56.765]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:56.765]                   {
[18:05:56.765]                     inherits <- base::inherits
[18:05:56.765]                     invokeRestart <- base::invokeRestart
[18:05:56.765]                     is.null <- base::is.null
[18:05:56.765]                     muffled <- FALSE
[18:05:56.765]                     if (inherits(cond, "message")) {
[18:05:56.765]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:56.765]                       if (muffled) 
[18:05:56.765]                         invokeRestart("muffleMessage")
[18:05:56.765]                     }
[18:05:56.765]                     else if (inherits(cond, "warning")) {
[18:05:56.765]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:56.765]                       if (muffled) 
[18:05:56.765]                         invokeRestart("muffleWarning")
[18:05:56.765]                     }
[18:05:56.765]                     else if (inherits(cond, "condition")) {
[18:05:56.765]                       if (!is.null(pattern)) {
[18:05:56.765]                         computeRestarts <- base::computeRestarts
[18:05:56.765]                         grepl <- base::grepl
[18:05:56.765]                         restarts <- computeRestarts(cond)
[18:05:56.765]                         for (restart in restarts) {
[18:05:56.765]                           name <- restart$name
[18:05:56.765]                           if (is.null(name)) 
[18:05:56.765]                             next
[18:05:56.765]                           if (!grepl(pattern, name)) 
[18:05:56.765]                             next
[18:05:56.765]                           invokeRestart(restart)
[18:05:56.765]                           muffled <- TRUE
[18:05:56.765]                           break
[18:05:56.765]                         }
[18:05:56.765]                       }
[18:05:56.765]                     }
[18:05:56.765]                     invisible(muffled)
[18:05:56.765]                   }
[18:05:56.765]                   muffleCondition(cond)
[18:05:56.765]                 })
[18:05:56.765]             }))
[18:05:56.765]             future::FutureResult(value = ...future.value$value, 
[18:05:56.765]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:56.765]                   ...future.rng), globalenv = if (FALSE) 
[18:05:56.765]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:56.765]                     ...future.globalenv.names))
[18:05:56.765]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:56.765]         }, condition = base::local({
[18:05:56.765]             c <- base::c
[18:05:56.765]             inherits <- base::inherits
[18:05:56.765]             invokeRestart <- base::invokeRestart
[18:05:56.765]             length <- base::length
[18:05:56.765]             list <- base::list
[18:05:56.765]             seq.int <- base::seq.int
[18:05:56.765]             signalCondition <- base::signalCondition
[18:05:56.765]             sys.calls <- base::sys.calls
[18:05:56.765]             `[[` <- base::`[[`
[18:05:56.765]             `+` <- base::`+`
[18:05:56.765]             `<<-` <- base::`<<-`
[18:05:56.765]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:56.765]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:56.765]                   3L)]
[18:05:56.765]             }
[18:05:56.765]             function(cond) {
[18:05:56.765]                 is_error <- inherits(cond, "error")
[18:05:56.765]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:56.765]                   NULL)
[18:05:56.765]                 if (is_error) {
[18:05:56.765]                   sessionInformation <- function() {
[18:05:56.765]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:56.765]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:56.765]                       search = base::search(), system = base::Sys.info())
[18:05:56.765]                   }
[18:05:56.765]                   ...future.conditions[[length(...future.conditions) + 
[18:05:56.765]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:56.765]                     cond$call), session = sessionInformation(), 
[18:05:56.765]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:56.765]                   signalCondition(cond)
[18:05:56.765]                 }
[18:05:56.765]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:56.765]                 "immediateCondition"))) {
[18:05:56.765]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:56.765]                   ...future.conditions[[length(...future.conditions) + 
[18:05:56.765]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:56.765]                   if (TRUE && !signal) {
[18:05:56.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:56.765]                     {
[18:05:56.765]                       inherits <- base::inherits
[18:05:56.765]                       invokeRestart <- base::invokeRestart
[18:05:56.765]                       is.null <- base::is.null
[18:05:56.765]                       muffled <- FALSE
[18:05:56.765]                       if (inherits(cond, "message")) {
[18:05:56.765]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:56.765]                         if (muffled) 
[18:05:56.765]                           invokeRestart("muffleMessage")
[18:05:56.765]                       }
[18:05:56.765]                       else if (inherits(cond, "warning")) {
[18:05:56.765]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:56.765]                         if (muffled) 
[18:05:56.765]                           invokeRestart("muffleWarning")
[18:05:56.765]                       }
[18:05:56.765]                       else if (inherits(cond, "condition")) {
[18:05:56.765]                         if (!is.null(pattern)) {
[18:05:56.765]                           computeRestarts <- base::computeRestarts
[18:05:56.765]                           grepl <- base::grepl
[18:05:56.765]                           restarts <- computeRestarts(cond)
[18:05:56.765]                           for (restart in restarts) {
[18:05:56.765]                             name <- restart$name
[18:05:56.765]                             if (is.null(name)) 
[18:05:56.765]                               next
[18:05:56.765]                             if (!grepl(pattern, name)) 
[18:05:56.765]                               next
[18:05:56.765]                             invokeRestart(restart)
[18:05:56.765]                             muffled <- TRUE
[18:05:56.765]                             break
[18:05:56.765]                           }
[18:05:56.765]                         }
[18:05:56.765]                       }
[18:05:56.765]                       invisible(muffled)
[18:05:56.765]                     }
[18:05:56.765]                     muffleCondition(cond, pattern = "^muffle")
[18:05:56.765]                   }
[18:05:56.765]                 }
[18:05:56.765]                 else {
[18:05:56.765]                   if (TRUE) {
[18:05:56.765]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:56.765]                     {
[18:05:56.765]                       inherits <- base::inherits
[18:05:56.765]                       invokeRestart <- base::invokeRestart
[18:05:56.765]                       is.null <- base::is.null
[18:05:56.765]                       muffled <- FALSE
[18:05:56.765]                       if (inherits(cond, "message")) {
[18:05:56.765]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:56.765]                         if (muffled) 
[18:05:56.765]                           invokeRestart("muffleMessage")
[18:05:56.765]                       }
[18:05:56.765]                       else if (inherits(cond, "warning")) {
[18:05:56.765]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:56.765]                         if (muffled) 
[18:05:56.765]                           invokeRestart("muffleWarning")
[18:05:56.765]                       }
[18:05:56.765]                       else if (inherits(cond, "condition")) {
[18:05:56.765]                         if (!is.null(pattern)) {
[18:05:56.765]                           computeRestarts <- base::computeRestarts
[18:05:56.765]                           grepl <- base::grepl
[18:05:56.765]                           restarts <- computeRestarts(cond)
[18:05:56.765]                           for (restart in restarts) {
[18:05:56.765]                             name <- restart$name
[18:05:56.765]                             if (is.null(name)) 
[18:05:56.765]                               next
[18:05:56.765]                             if (!grepl(pattern, name)) 
[18:05:56.765]                               next
[18:05:56.765]                             invokeRestart(restart)
[18:05:56.765]                             muffled <- TRUE
[18:05:56.765]                             break
[18:05:56.765]                           }
[18:05:56.765]                         }
[18:05:56.765]                       }
[18:05:56.765]                       invisible(muffled)
[18:05:56.765]                     }
[18:05:56.765]                     muffleCondition(cond, pattern = "^muffle")
[18:05:56.765]                   }
[18:05:56.765]                 }
[18:05:56.765]             }
[18:05:56.765]         }))
[18:05:56.765]     }, error = function(ex) {
[18:05:56.765]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:56.765]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:56.765]                 ...future.rng), started = ...future.startTime, 
[18:05:56.765]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:56.765]             version = "1.8"), class = "FutureResult")
[18:05:56.765]     }, finally = {
[18:05:56.765]         if (!identical(...future.workdir, getwd())) 
[18:05:56.765]             setwd(...future.workdir)
[18:05:56.765]         {
[18:05:56.765]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:56.765]                 ...future.oldOptions$nwarnings <- NULL
[18:05:56.765]             }
[18:05:56.765]             base::options(...future.oldOptions)
[18:05:56.765]             if (.Platform$OS.type == "windows") {
[18:05:56.765]                 old_names <- names(...future.oldEnvVars)
[18:05:56.765]                 envs <- base::Sys.getenv()
[18:05:56.765]                 names <- names(envs)
[18:05:56.765]                 common <- intersect(names, old_names)
[18:05:56.765]                 added <- setdiff(names, old_names)
[18:05:56.765]                 removed <- setdiff(old_names, names)
[18:05:56.765]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:56.765]                   envs[common]]
[18:05:56.765]                 NAMES <- toupper(changed)
[18:05:56.765]                 args <- list()
[18:05:56.765]                 for (kk in seq_along(NAMES)) {
[18:05:56.765]                   name <- changed[[kk]]
[18:05:56.765]                   NAME <- NAMES[[kk]]
[18:05:56.765]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:56.765]                     next
[18:05:56.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:56.765]                 }
[18:05:56.765]                 NAMES <- toupper(added)
[18:05:56.765]                 for (kk in seq_along(NAMES)) {
[18:05:56.765]                   name <- added[[kk]]
[18:05:56.765]                   NAME <- NAMES[[kk]]
[18:05:56.765]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:56.765]                     next
[18:05:56.765]                   args[[name]] <- ""
[18:05:56.765]                 }
[18:05:56.765]                 NAMES <- toupper(removed)
[18:05:56.765]                 for (kk in seq_along(NAMES)) {
[18:05:56.765]                   name <- removed[[kk]]
[18:05:56.765]                   NAME <- NAMES[[kk]]
[18:05:56.765]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:56.765]                     next
[18:05:56.765]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:56.765]                 }
[18:05:56.765]                 if (length(args) > 0) 
[18:05:56.765]                   base::do.call(base::Sys.setenv, args = args)
[18:05:56.765]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:56.765]             }
[18:05:56.765]             else {
[18:05:56.765]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:56.765]             }
[18:05:56.765]             {
[18:05:56.765]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:56.765]                   0L) {
[18:05:56.765]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:56.765]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:56.765]                   base::options(opts)
[18:05:56.765]                 }
[18:05:56.765]                 {
[18:05:56.765]                   NULL
[18:05:56.765]                   options(future.plan = NULL)
[18:05:56.765]                   if (is.na(NA_character_)) 
[18:05:56.765]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:56.765]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:56.765]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:56.765]                     .init = FALSE)
[18:05:56.765]                 }
[18:05:56.765]             }
[18:05:56.765]         }
[18:05:56.765]     })
[18:05:56.765]     if (TRUE) {
[18:05:56.765]         base::sink(type = "output", split = FALSE)
[18:05:56.765]         if (TRUE) {
[18:05:56.765]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:56.765]         }
[18:05:56.765]         else {
[18:05:56.765]             ...future.result["stdout"] <- base::list(NULL)
[18:05:56.765]         }
[18:05:56.765]         base::close(...future.stdout)
[18:05:56.765]         ...future.stdout <- NULL
[18:05:56.765]     }
[18:05:56.765]     ...future.result$conditions <- ...future.conditions
[18:05:56.765]     ...future.result$finished <- base::Sys.time()
[18:05:56.765]     ...future.result
[18:05:56.765] }
[18:05:56.864] ClusterFuture started
[18:05:56.865] result() for ClusterFuture ...
[18:05:56.866] receiveMessageFromWorker() for ClusterFuture ...
[18:05:56.866] - Validating connection of ClusterFuture
[18:05:56.931] - received message: FutureResult
[18:05:56.931] - Received FutureResult
[18:05:56.935] - Erased future from FutureRegistry
[18:05:56.936] result() for ClusterFuture ...
[18:05:56.936] - result already collected: FutureResult
[18:05:56.936] result() for ClusterFuture ... done
[18:05:56.937] receiveMessageFromWorker() for ClusterFuture ... done
[18:05:56.937] result() for ClusterFuture ... done
[18:05:56.937] result() for ClusterFuture ...
[18:05:56.937] - result already collected: FutureResult
[18:05:56.937] result() for ClusterFuture ... done
[18:05:56.938] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:05:56.938] plan(): nbrOfWorkers() = 1
> f <- future({ Sys.sleep(5); 1 })
[18:05:56.938] getGlobalsAndPackages() ...
[18:05:56.939] Searching for globals...
[18:05:56.950] - globals found: [2] ‘{’, ‘Sys.sleep’
[18:05:56.951] Searching for globals ... DONE
[18:05:56.951] Resolving globals: FALSE
[18:05:56.952] 
[18:05:56.952] 
[18:05:56.952] getGlobalsAndPackages() ... DONE
[18:05:56.953] run() for ‘Future’ ...
[18:05:56.953] - state: ‘created’
[18:05:56.954] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:05:56.963] - Future class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:56.963] - Copy elements of temporary ‘ClusterFuture’ to final ‘Future’ object ...
[18:05:56.964]   - Field: ‘node’
[18:05:56.964]   - Field: ‘label’
[18:05:56.964]   - Field: ‘local’
[18:05:56.964]   - Field: ‘owner’
[18:05:56.965]   - Field: ‘envir’
[18:05:56.965]   - Field: ‘workers’
[18:05:56.965]   - Field: ‘packages’
[18:05:56.965]   - Field: ‘gc’
[18:05:56.965]   - Field: ‘conditions’
[18:05:56.966]   - Field: ‘persistent’
[18:05:56.966]   - Field: ‘expr’
[18:05:56.966]   - Field: ‘uuid’
[18:05:56.966]   - Field: ‘seed’
[18:05:56.966]   - Field: ‘version’
[18:05:56.967]   - Field: ‘result’
[18:05:56.967]   - Field: ‘asynchronous’
[18:05:56.967]   - Field: ‘calls’
[18:05:56.967]   - Field: ‘globals’
[18:05:56.967]   - Field: ‘stdout’
[18:05:56.968]   - Field: ‘earlySignal’
[18:05:56.968]   - Field: ‘lazy’
[18:05:56.968]   - Field: ‘state’
[18:05:56.968] - Copy elements of temporary ‘ClusterFuture’ to final ‘Future’ object ... done
[18:05:56.968] - Launch lazy future ...
[18:05:56.969] Packages needed by the future expression (n = 0): <none>
[18:05:56.969] Packages needed by future strategies (n = 0): <none>
[18:05:56.970] {
[18:05:56.970]     {
[18:05:56.970]         {
[18:05:56.970]             ...future.startTime <- base::Sys.time()
[18:05:56.970]             {
[18:05:56.970]                 {
[18:05:56.970]                   {
[18:05:56.970]                     base::local({
[18:05:56.970]                       has_future <- base::requireNamespace("future", 
[18:05:56.970]                         quietly = TRUE)
[18:05:56.970]                       if (has_future) {
[18:05:56.970]                         ns <- base::getNamespace("future")
[18:05:56.970]                         version <- ns[[".package"]][["version"]]
[18:05:56.970]                         if (is.null(version)) 
[18:05:56.970]                           version <- utils::packageVersion("future")
[18:05:56.970]                       }
[18:05:56.970]                       else {
[18:05:56.970]                         version <- NULL
[18:05:56.970]                       }
[18:05:56.970]                       if (!has_future || version < "1.8.0") {
[18:05:56.970]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:56.970]                           "", base::R.version$version.string), 
[18:05:56.970]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:56.970]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:56.970]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:56.970]                             "release", "version")], collapse = " "), 
[18:05:56.970]                           hostname = base::Sys.info()[["nodename"]])
[18:05:56.970]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:56.970]                           info)
[18:05:56.970]                         info <- base::paste(info, collapse = "; ")
[18:05:56.970]                         if (!has_future) {
[18:05:56.970]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:56.970]                             info)
[18:05:56.970]                         }
[18:05:56.970]                         else {
[18:05:56.970]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:56.970]                             info, version)
[18:05:56.970]                         }
[18:05:56.970]                         base::stop(msg)
[18:05:56.970]                       }
[18:05:56.970]                     })
[18:05:56.970]                   }
[18:05:56.970]                   ...future.strategy.old <- future::plan("list")
[18:05:56.970]                   options(future.plan = NULL)
[18:05:56.970]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:56.970]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:56.970]                 }
[18:05:56.970]                 ...future.workdir <- getwd()
[18:05:56.970]             }
[18:05:56.970]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:56.970]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:56.970]         }
[18:05:56.970]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:56.970]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:56.970]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:56.970]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:56.970]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:56.970]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:56.970]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:56.970]             base::names(...future.oldOptions))
[18:05:56.970]     }
[18:05:56.970]     if (FALSE) {
[18:05:56.970]     }
[18:05:56.970]     else {
[18:05:56.970]         if (TRUE) {
[18:05:56.970]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:56.970]                 open = "w")
[18:05:56.970]         }
[18:05:56.970]         else {
[18:05:56.970]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:56.970]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:56.970]         }
[18:05:56.970]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:56.970]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:56.970]             base::sink(type = "output", split = FALSE)
[18:05:56.970]             base::close(...future.stdout)
[18:05:56.970]         }, add = TRUE)
[18:05:56.970]     }
[18:05:56.970]     ...future.frame <- base::sys.nframe()
[18:05:56.970]     ...future.conditions <- base::list()
[18:05:56.970]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:56.970]     if (FALSE) {
[18:05:56.970]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:56.970]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:56.970]     }
[18:05:56.970]     ...future.result <- base::tryCatch({
[18:05:56.970]         base::withCallingHandlers({
[18:05:56.970]             ...future.value <- base::withVisible(base::local({
[18:05:56.970]                 ...future.makeSendCondition <- base::local({
[18:05:56.970]                   sendCondition <- NULL
[18:05:56.970]                   function(frame = 1L) {
[18:05:56.970]                     if (is.function(sendCondition)) 
[18:05:56.970]                       return(sendCondition)
[18:05:56.970]                     ns <- getNamespace("parallel")
[18:05:56.970]                     if (exists("sendData", mode = "function", 
[18:05:56.970]                       envir = ns)) {
[18:05:56.970]                       parallel_sendData <- get("sendData", mode = "function", 
[18:05:56.970]                         envir = ns)
[18:05:56.970]                       envir <- sys.frame(frame)
[18:05:56.970]                       master <- NULL
[18:05:56.970]                       while (!identical(envir, .GlobalEnv) && 
[18:05:56.970]                         !identical(envir, emptyenv())) {
[18:05:56.970]                         if (exists("master", mode = "list", envir = envir, 
[18:05:56.970]                           inherits = FALSE)) {
[18:05:56.970]                           master <- get("master", mode = "list", 
[18:05:56.970]                             envir = envir, inherits = FALSE)
[18:05:56.970]                           if (inherits(master, c("SOCKnode", 
[18:05:56.970]                             "SOCK0node"))) {
[18:05:56.970]                             sendCondition <<- function(cond) {
[18:05:56.970]                               data <- list(type = "VALUE", value = cond, 
[18:05:56.970]                                 success = TRUE)
[18:05:56.970]                               parallel_sendData(master, data)
[18:05:56.970]                             }
[18:05:56.970]                             return(sendCondition)
[18:05:56.970]                           }
[18:05:56.970]                         }
[18:05:56.970]                         frame <- frame + 1L
[18:05:56.970]                         envir <- sys.frame(frame)
[18:05:56.970]                       }
[18:05:56.970]                     }
[18:05:56.970]                     sendCondition <<- function(cond) NULL
[18:05:56.970]                   }
[18:05:56.970]                 })
[18:05:56.970]                 withCallingHandlers({
[18:05:56.970]                   {
[18:05:56.970]                     Sys.sleep(5)
[18:05:56.970]                     1
[18:05:56.970]                   }
[18:05:56.970]                 }, immediateCondition = function(cond) {
[18:05:56.970]                   sendCondition <- ...future.makeSendCondition()
[18:05:56.970]                   sendCondition(cond)
[18:05:56.970]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:56.970]                   {
[18:05:56.970]                     inherits <- base::inherits
[18:05:56.970]                     invokeRestart <- base::invokeRestart
[18:05:56.970]                     is.null <- base::is.null
[18:05:56.970]                     muffled <- FALSE
[18:05:56.970]                     if (inherits(cond, "message")) {
[18:05:56.970]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:56.970]                       if (muffled) 
[18:05:56.970]                         invokeRestart("muffleMessage")
[18:05:56.970]                     }
[18:05:56.970]                     else if (inherits(cond, "warning")) {
[18:05:56.970]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:56.970]                       if (muffled) 
[18:05:56.970]                         invokeRestart("muffleWarning")
[18:05:56.970]                     }
[18:05:56.970]                     else if (inherits(cond, "condition")) {
[18:05:56.970]                       if (!is.null(pattern)) {
[18:05:56.970]                         computeRestarts <- base::computeRestarts
[18:05:56.970]                         grepl <- base::grepl
[18:05:56.970]                         restarts <- computeRestarts(cond)
[18:05:56.970]                         for (restart in restarts) {
[18:05:56.970]                           name <- restart$name
[18:05:56.970]                           if (is.null(name)) 
[18:05:56.970]                             next
[18:05:56.970]                           if (!grepl(pattern, name)) 
[18:05:56.970]                             next
[18:05:56.970]                           invokeRestart(restart)
[18:05:56.970]                           muffled <- TRUE
[18:05:56.970]                           break
[18:05:56.970]                         }
[18:05:56.970]                       }
[18:05:56.970]                     }
[18:05:56.970]                     invisible(muffled)
[18:05:56.970]                   }
[18:05:56.970]                   muffleCondition(cond)
[18:05:56.970]                 })
[18:05:56.970]             }))
[18:05:56.970]             future::FutureResult(value = ...future.value$value, 
[18:05:56.970]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:56.970]                   ...future.rng), globalenv = if (FALSE) 
[18:05:56.970]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:56.970]                     ...future.globalenv.names))
[18:05:56.970]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:56.970]         }, condition = base::local({
[18:05:56.970]             c <- base::c
[18:05:56.970]             inherits <- base::inherits
[18:05:56.970]             invokeRestart <- base::invokeRestart
[18:05:56.970]             length <- base::length
[18:05:56.970]             list <- base::list
[18:05:56.970]             seq.int <- base::seq.int
[18:05:56.970]             signalCondition <- base::signalCondition
[18:05:56.970]             sys.calls <- base::sys.calls
[18:05:56.970]             `[[` <- base::`[[`
[18:05:56.970]             `+` <- base::`+`
[18:05:56.970]             `<<-` <- base::`<<-`
[18:05:56.970]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:56.970]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:56.970]                   3L)]
[18:05:56.970]             }
[18:05:56.970]             function(cond) {
[18:05:56.970]                 is_error <- inherits(cond, "error")
[18:05:56.970]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:56.970]                   NULL)
[18:05:56.970]                 if (is_error) {
[18:05:56.970]                   sessionInformation <- function() {
[18:05:56.970]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:56.970]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:56.970]                       search = base::search(), system = base::Sys.info())
[18:05:56.970]                   }
[18:05:56.970]                   ...future.conditions[[length(...future.conditions) + 
[18:05:56.970]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:56.970]                     cond$call), session = sessionInformation(), 
[18:05:56.970]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:56.970]                   signalCondition(cond)
[18:05:56.970]                 }
[18:05:56.970]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:56.970]                 "immediateCondition"))) {
[18:05:56.970]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:56.970]                   ...future.conditions[[length(...future.conditions) + 
[18:05:56.970]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:56.970]                   if (TRUE && !signal) {
[18:05:56.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:56.970]                     {
[18:05:56.970]                       inherits <- base::inherits
[18:05:56.970]                       invokeRestart <- base::invokeRestart
[18:05:56.970]                       is.null <- base::is.null
[18:05:56.970]                       muffled <- FALSE
[18:05:56.970]                       if (inherits(cond, "message")) {
[18:05:56.970]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:56.970]                         if (muffled) 
[18:05:56.970]                           invokeRestart("muffleMessage")
[18:05:56.970]                       }
[18:05:56.970]                       else if (inherits(cond, "warning")) {
[18:05:56.970]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:56.970]                         if (muffled) 
[18:05:56.970]                           invokeRestart("muffleWarning")
[18:05:56.970]                       }
[18:05:56.970]                       else if (inherits(cond, "condition")) {
[18:05:56.970]                         if (!is.null(pattern)) {
[18:05:56.970]                           computeRestarts <- base::computeRestarts
[18:05:56.970]                           grepl <- base::grepl
[18:05:56.970]                           restarts <- computeRestarts(cond)
[18:05:56.970]                           for (restart in restarts) {
[18:05:56.970]                             name <- restart$name
[18:05:56.970]                             if (is.null(name)) 
[18:05:56.970]                               next
[18:05:56.970]                             if (!grepl(pattern, name)) 
[18:05:56.970]                               next
[18:05:56.970]                             invokeRestart(restart)
[18:05:56.970]                             muffled <- TRUE
[18:05:56.970]                             break
[18:05:56.970]                           }
[18:05:56.970]                         }
[18:05:56.970]                       }
[18:05:56.970]                       invisible(muffled)
[18:05:56.970]                     }
[18:05:56.970]                     muffleCondition(cond, pattern = "^muffle")
[18:05:56.970]                   }
[18:05:56.970]                 }
[18:05:56.970]                 else {
[18:05:56.970]                   if (TRUE) {
[18:05:56.970]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:56.970]                     {
[18:05:56.970]                       inherits <- base::inherits
[18:05:56.970]                       invokeRestart <- base::invokeRestart
[18:05:56.970]                       is.null <- base::is.null
[18:05:56.970]                       muffled <- FALSE
[18:05:56.970]                       if (inherits(cond, "message")) {
[18:05:56.970]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:56.970]                         if (muffled) 
[18:05:56.970]                           invokeRestart("muffleMessage")
[18:05:56.970]                       }
[18:05:56.970]                       else if (inherits(cond, "warning")) {
[18:05:56.970]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:56.970]                         if (muffled) 
[18:05:56.970]                           invokeRestart("muffleWarning")
[18:05:56.970]                       }
[18:05:56.970]                       else if (inherits(cond, "condition")) {
[18:05:56.970]                         if (!is.null(pattern)) {
[18:05:56.970]                           computeRestarts <- base::computeRestarts
[18:05:56.970]                           grepl <- base::grepl
[18:05:56.970]                           restarts <- computeRestarts(cond)
[18:05:56.970]                           for (restart in restarts) {
[18:05:56.970]                             name <- restart$name
[18:05:56.970]                             if (is.null(name)) 
[18:05:56.970]                               next
[18:05:56.970]                             if (!grepl(pattern, name)) 
[18:05:56.970]                               next
[18:05:56.970]                             invokeRestart(restart)
[18:05:56.970]                             muffled <- TRUE
[18:05:56.970]                             break
[18:05:56.970]                           }
[18:05:56.970]                         }
[18:05:56.970]                       }
[18:05:56.970]                       invisible(muffled)
[18:05:56.970]                     }
[18:05:56.970]                     muffleCondition(cond, pattern = "^muffle")
[18:05:56.970]                   }
[18:05:56.970]                 }
[18:05:56.970]             }
[18:05:56.970]         }))
[18:05:56.970]     }, error = function(ex) {
[18:05:56.970]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:56.970]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:56.970]                 ...future.rng), started = ...future.startTime, 
[18:05:56.970]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:56.970]             version = "1.8"), class = "FutureResult")
[18:05:56.970]     }, finally = {
[18:05:56.970]         if (!identical(...future.workdir, getwd())) 
[18:05:56.970]             setwd(...future.workdir)
[18:05:56.970]         {
[18:05:56.970]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:56.970]                 ...future.oldOptions$nwarnings <- NULL
[18:05:56.970]             }
[18:05:56.970]             base::options(...future.oldOptions)
[18:05:56.970]             if (.Platform$OS.type == "windows") {
[18:05:56.970]                 old_names <- names(...future.oldEnvVars)
[18:05:56.970]                 envs <- base::Sys.getenv()
[18:05:56.970]                 names <- names(envs)
[18:05:56.970]                 common <- intersect(names, old_names)
[18:05:56.970]                 added <- setdiff(names, old_names)
[18:05:56.970]                 removed <- setdiff(old_names, names)
[18:05:56.970]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:56.970]                   envs[common]]
[18:05:56.970]                 NAMES <- toupper(changed)
[18:05:56.970]                 args <- list()
[18:05:56.970]                 for (kk in seq_along(NAMES)) {
[18:05:56.970]                   name <- changed[[kk]]
[18:05:56.970]                   NAME <- NAMES[[kk]]
[18:05:56.970]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:56.970]                     next
[18:05:56.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:56.970]                 }
[18:05:56.970]                 NAMES <- toupper(added)
[18:05:56.970]                 for (kk in seq_along(NAMES)) {
[18:05:56.970]                   name <- added[[kk]]
[18:05:56.970]                   NAME <- NAMES[[kk]]
[18:05:56.970]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:56.970]                     next
[18:05:56.970]                   args[[name]] <- ""
[18:05:56.970]                 }
[18:05:56.970]                 NAMES <- toupper(removed)
[18:05:56.970]                 for (kk in seq_along(NAMES)) {
[18:05:56.970]                   name <- removed[[kk]]
[18:05:56.970]                   NAME <- NAMES[[kk]]
[18:05:56.970]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:56.970]                     next
[18:05:56.970]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:56.970]                 }
[18:05:56.970]                 if (length(args) > 0) 
[18:05:56.970]                   base::do.call(base::Sys.setenv, args = args)
[18:05:56.970]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:56.970]             }
[18:05:56.970]             else {
[18:05:56.970]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:56.970]             }
[18:05:56.970]             {
[18:05:56.970]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:56.970]                   0L) {
[18:05:56.970]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:56.970]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:56.970]                   base::options(opts)
[18:05:56.970]                 }
[18:05:56.970]                 {
[18:05:56.970]                   NULL
[18:05:56.970]                   options(future.plan = NULL)
[18:05:56.970]                   if (is.na(NA_character_)) 
[18:05:56.970]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:56.970]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:56.970]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:56.970]                     .init = FALSE)
[18:05:56.970]                 }
[18:05:56.970]             }
[18:05:56.970]         }
[18:05:56.970]     })
[18:05:56.970]     if (TRUE) {
[18:05:56.970]         base::sink(type = "output", split = FALSE)
[18:05:56.970]         if (TRUE) {
[18:05:56.970]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:56.970]         }
[18:05:56.970]         else {
[18:05:56.970]             ...future.result["stdout"] <- base::list(NULL)
[18:05:56.970]         }
[18:05:56.970]         base::close(...future.stdout)
[18:05:56.970]         ...future.stdout <- NULL
[18:05:56.970]     }
[18:05:56.970]     ...future.result$conditions <- ...future.conditions
[18:05:56.970]     ...future.result$finished <- base::Sys.time()
[18:05:56.970]     ...future.result
[18:05:56.970] }
[18:05:56.976] ClusterFuture started
[18:05:56.976] - Launch lazy future ... done
[18:05:56.976] run() for ‘ClusterFuture’ ... done
> 
> res <- tryCatch({
+   requestNode(function() { }, workers = f$workers, timeout = 0.5, delta = 0.1)
+ }, error = identity)
[18:05:56.977] Poll #1 (0): usedNodes() = 1, workers = 1
[18:05:57.077] Poll #2 (0.1 secs): usedNodes() = 1, workers = 1
[18:05:57.181] Poll #3 (0.2 secs): usedNodes() = 1, workers = 1
[18:05:57.284] Poll #4 (0.31 secs): usedNodes() = 1, workers = 1
[18:05:57.388] Poll #5 (0.41 secs): usedNodes() = 1, workers = 1
[18:05:57.494] TIMEOUT: All 1 cluster nodes are still occupied after 0.52 secs (polled 6 times)
> stopifnot(inherits(res, "error"))
> 
> v <- value(f)
[18:05:57.495] result() for ClusterFuture ...
[18:05:57.495] receiveMessageFromWorker() for ClusterFuture ...
[18:05:57.495] - Validating connection of ClusterFuture
[18:06:01.984] - received message: FutureResult
[18:06:01.984] - Received FutureResult
[18:06:01.985] - Erased future from FutureRegistry
[18:06:01.985] result() for ClusterFuture ...
[18:06:01.986] - result already collected: FutureResult
[18:06:01.986] result() for ClusterFuture ... done
[18:06:01.986] receiveMessageFromWorker() for ClusterFuture ... done
[18:06:01.986] result() for ClusterFuture ... done
[18:06:01.987] result() for ClusterFuture ...
[18:06:01.987] - result already collected: FutureResult
[18:06:01.987] result() for ClusterFuture ... done
> print(v)
[1] 1
> stopifnot(v == 1L)
> 
> message("*** requestNode() - timeout ... DONE")
*** requestNode() - timeout ... DONE
> 
> message("*** requestNode() ... DONE")
*** requestNode() ... DONE
> 
> source("incl/end.R")
[18:06:01.990] plan(): Setting new future strategy stack:
[18:06:01.990] List of future strategies:
[18:06:01.990] 1. FutureStrategy:
[18:06:01.990]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:06:01.990]    - tweaked: FALSE
[18:06:01.990]    - call: future::plan(oplan)
[18:06:01.992] plan(): nbrOfWorkers() = 1
> 
