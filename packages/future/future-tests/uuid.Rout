
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:07:12.476] plan(): Setting new future strategy stack:
[18:07:12.477] List of future strategies:
[18:07:12.477] 1. sequential:
[18:07:12.477]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:12.477]    - tweaked: FALSE
[18:07:12.477]    - call: future::plan("sequential")
[18:07:12.501] plan(): nbrOfWorkers() = 1
> session_uuid <- future:::session_uuid
> 
> message("*** session_uuid() ...")
*** session_uuid() ...
> 
> id0 <- session_uuid()
> print(id0)
[1] "64d32d94-a08d-60aa-6668-50216ebab240"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"99adafdbb12a" 

attr(,"source")$info
                                                      sysname 
                                                      "Linux" 
                                                      release 
                                           "6.8.0-48-generic" 
                                                      version 
"#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" 
                                                     nodename 
                                               "99adafdbb12a" 
                                                      machine 
                                                     "x86_64" 
                                                        login 
                                                    "unknown" 
                                                         user 
                                                    "rstudio" 
                                               effective_user 
                                                    "rstudio" 

attr(,"source")$pid
[1] 331624

attr(,"source")$time
[1] "2024-11-21 18:07:12 GMT"

attr(,"source")$random
[1] 2147483647

> 
> ## Reset session UUID (hack)
> environment(session_uuid)$uuids <- list()
> 
> id <- session_uuid()
> print(id)
[1] "5deb14a4-9046-ef3c-85c9-5c08b830addd"
attr(,"source")
attr(,"source")$host
      HOSTNAME 
"99adafdbb12a" 

attr(,"source")$info
                                                      sysname 
                                                      "Linux" 
                                                      release 
                                           "6.8.0-48-generic" 
                                                      version 
"#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" 
                                                     nodename 
                                               "99adafdbb12a" 
                                                      machine 
                                                     "x86_64" 
                                                        login 
                                                    "unknown" 
                                                         user 
                                                    "rstudio" 
                                               effective_user 
                                                    "rstudio" 

attr(,"source")$pid
[1] 331624

attr(,"source")$time
[1] "2024-11-21 18:07:12 GMT"

attr(,"source")$random
[1] 2147483647

> stopifnot(id != id0)
> 
> ## Assert that forked child processes get a unique session id
> ## Issue: https://github.com/HenrikBengtsson/future/issues/187
> if (supportsMulticore()) {
+   plan(multicore, workers = 2L)
+   fs <- lapply(1:2, FUN = function(i) {
+     future({
+       Sys.sleep(0.2)
+       session_uuid()
+     })
+   })
+   ids <- unlist(value(fs))
+   print(ids)
+   stopifnot(all(ids != id), length(unique(ids)) == 2L)
+ }
[18:07:12.527] plan(): Setting new future strategy stack:
[18:07:12.527] List of future strategies:
[18:07:12.527] 1. multicore:
[18:07:12.527]    - args: function (..., workers = 2L, envir = parent.frame())
[18:07:12.527]    - tweaked: TRUE
[18:07:12.527]    - call: plan(multicore, workers = 2L)
[18:07:12.553] plan(): nbrOfWorkers() = 2
[18:07:12.554] getGlobalsAndPackages() ...
[18:07:12.554] Searching for globals...
[18:07:12.579] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[18:07:12.580] Searching for globals ... DONE
[18:07:12.580] Resolving globals: FALSE
[18:07:12.586] The total size of the 3 globals is 77.30 KiB (79160 bytes)
[18:07:12.587] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 77.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (61.89 KiB of class ‘function’), ‘session_uuid’ (12.55 KiB of class ‘function’) and ‘uuids’ (2.87 KiB of class ‘list’)
[18:07:12.588] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[18:07:12.588] - packages: [1] ‘future’
[18:07:12.588] getGlobalsAndPackages() ... DONE
[18:07:12.589] run() for ‘Future’ ...
[18:07:12.589] - state: ‘created’
[18:07:12.590] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:12.591] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:12.591] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:12.591]   - Field: ‘label’
[18:07:12.591]   - Field: ‘local’
[18:07:12.592]   - Field: ‘owner’
[18:07:12.592]   - Field: ‘envir’
[18:07:12.592]   - Field: ‘workers’
[18:07:12.592]   - Field: ‘packages’
[18:07:12.592]   - Field: ‘gc’
[18:07:12.593]   - Field: ‘job’
[18:07:12.593]   - Field: ‘conditions’
[18:07:12.593]   - Field: ‘expr’
[18:07:12.593]   - Field: ‘uuid’
[18:07:12.593]   - Field: ‘seed’
[18:07:12.594]   - Field: ‘version’
[18:07:12.594]   - Field: ‘result’
[18:07:12.594]   - Field: ‘asynchronous’
[18:07:12.594]   - Field: ‘calls’
[18:07:12.594]   - Field: ‘globals’
[18:07:12.595]   - Field: ‘stdout’
[18:07:12.595]   - Field: ‘earlySignal’
[18:07:12.595]   - Field: ‘lazy’
[18:07:12.595]   - Field: ‘state’
[18:07:12.595] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:12.596] - Launch lazy future ...
[18:07:12.598] Packages needed by the future expression (n = 1): ‘future’
[18:07:12.598] Packages needed by future strategies (n = 0): <none>
[18:07:12.599] {
[18:07:12.599]     {
[18:07:12.599]         {
[18:07:12.599]             ...future.startTime <- base::Sys.time()
[18:07:12.599]             {
[18:07:12.599]                 {
[18:07:12.599]                   {
[18:07:12.599]                     {
[18:07:12.599]                       {
[18:07:12.599]                         base::local({
[18:07:12.599]                           has_future <- base::requireNamespace("future", 
[18:07:12.599]                             quietly = TRUE)
[18:07:12.599]                           if (has_future) {
[18:07:12.599]                             ns <- base::getNamespace("future")
[18:07:12.599]                             version <- ns[[".package"]][["version"]]
[18:07:12.599]                             if (is.null(version)) 
[18:07:12.599]                               version <- utils::packageVersion("future")
[18:07:12.599]                           }
[18:07:12.599]                           else {
[18:07:12.599]                             version <- NULL
[18:07:12.599]                           }
[18:07:12.599]                           if (!has_future || version < "1.8.0") {
[18:07:12.599]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:12.599]                               "", base::R.version$version.string), 
[18:07:12.599]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:12.599]                                 base::R.version$platform, 8 * 
[18:07:12.599]                                   base::.Machine$sizeof.pointer), 
[18:07:12.599]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:12.599]                                 "release", "version")], collapse = " "), 
[18:07:12.599]                               hostname = base::Sys.info()[["nodename"]])
[18:07:12.599]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:12.599]                               info)
[18:07:12.599]                             info <- base::paste(info, collapse = "; ")
[18:07:12.599]                             if (!has_future) {
[18:07:12.599]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:12.599]                                 info)
[18:07:12.599]                             }
[18:07:12.599]                             else {
[18:07:12.599]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:12.599]                                 info, version)
[18:07:12.599]                             }
[18:07:12.599]                             base::stop(msg)
[18:07:12.599]                           }
[18:07:12.599]                         })
[18:07:12.599]                       }
[18:07:12.599]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:12.599]                       base::options(mc.cores = 1L)
[18:07:12.599]                     }
[18:07:12.599]                     base::local({
[18:07:12.599]                       for (pkg in "future") {
[18:07:12.599]                         base::loadNamespace(pkg)
[18:07:12.599]                         base::library(pkg, character.only = TRUE)
[18:07:12.599]                       }
[18:07:12.599]                     })
[18:07:12.599]                   }
[18:07:12.599]                   ...future.strategy.old <- future::plan("list")
[18:07:12.599]                   options(future.plan = NULL)
[18:07:12.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:12.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:12.599]                 }
[18:07:12.599]                 ...future.workdir <- getwd()
[18:07:12.599]             }
[18:07:12.599]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:12.599]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:12.599]         }
[18:07:12.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:12.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:12.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:12.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:12.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:12.599]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:12.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:12.599]             base::names(...future.oldOptions))
[18:07:12.599]     }
[18:07:12.599]     if (FALSE) {
[18:07:12.599]     }
[18:07:12.599]     else {
[18:07:12.599]         if (TRUE) {
[18:07:12.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:12.599]                 open = "w")
[18:07:12.599]         }
[18:07:12.599]         else {
[18:07:12.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:12.599]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:12.599]         }
[18:07:12.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:12.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:12.599]             base::sink(type = "output", split = FALSE)
[18:07:12.599]             base::close(...future.stdout)
[18:07:12.599]         }, add = TRUE)
[18:07:12.599]     }
[18:07:12.599]     ...future.frame <- base::sys.nframe()
[18:07:12.599]     ...future.conditions <- base::list()
[18:07:12.599]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:12.599]     if (FALSE) {
[18:07:12.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:12.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:12.599]     }
[18:07:12.599]     ...future.result <- base::tryCatch({
[18:07:12.599]         base::withCallingHandlers({
[18:07:12.599]             ...future.value <- base::withVisible(base::local({
[18:07:12.599]                 withCallingHandlers({
[18:07:12.599]                   {
[18:07:12.599]                     Sys.sleep(0.2)
[18:07:12.599]                     session_uuid()
[18:07:12.599]                   }
[18:07:12.599]                 }, immediateCondition = function(cond) {
[18:07:12.599]                   save_rds <- function (object, pathname, ...) 
[18:07:12.599]                   {
[18:07:12.599]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:12.599]                     if (file_test("-f", pathname_tmp)) {
[18:07:12.599]                       fi_tmp <- file.info(pathname_tmp)
[18:07:12.599]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:12.599]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:12.599]                         fi_tmp[["mtime"]])
[18:07:12.599]                     }
[18:07:12.599]                     tryCatch({
[18:07:12.599]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:12.599]                     }, error = function(ex) {
[18:07:12.599]                       msg <- conditionMessage(ex)
[18:07:12.599]                       fi_tmp <- file.info(pathname_tmp)
[18:07:12.599]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:12.599]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:12.599]                         fi_tmp[["mtime"]], msg)
[18:07:12.599]                       ex$message <- msg
[18:07:12.599]                       stop(ex)
[18:07:12.599]                     })
[18:07:12.599]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:12.599]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:12.599]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:12.599]                       fi_tmp <- file.info(pathname_tmp)
[18:07:12.599]                       fi <- file.info(pathname)
[18:07:12.599]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:12.599]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:12.599]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:12.599]                         fi[["size"]], fi[["mtime"]])
[18:07:12.599]                       stop(msg)
[18:07:12.599]                     }
[18:07:12.599]                     invisible(pathname)
[18:07:12.599]                   }
[18:07:12.599]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:12.599]                     rootPath = tempdir()) 
[18:07:12.599]                   {
[18:07:12.599]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:12.599]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:12.599]                       tmpdir = path, fileext = ".rds")
[18:07:12.599]                     save_rds(obj, file)
[18:07:12.599]                   }
[18:07:12.599]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2DphJj/.future/immediateConditions")
[18:07:12.599]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:12.599]                   {
[18:07:12.599]                     inherits <- base::inherits
[18:07:12.599]                     invokeRestart <- base::invokeRestart
[18:07:12.599]                     is.null <- base::is.null
[18:07:12.599]                     muffled <- FALSE
[18:07:12.599]                     if (inherits(cond, "message")) {
[18:07:12.599]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:12.599]                       if (muffled) 
[18:07:12.599]                         invokeRestart("muffleMessage")
[18:07:12.599]                     }
[18:07:12.599]                     else if (inherits(cond, "warning")) {
[18:07:12.599]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:12.599]                       if (muffled) 
[18:07:12.599]                         invokeRestart("muffleWarning")
[18:07:12.599]                     }
[18:07:12.599]                     else if (inherits(cond, "condition")) {
[18:07:12.599]                       if (!is.null(pattern)) {
[18:07:12.599]                         computeRestarts <- base::computeRestarts
[18:07:12.599]                         grepl <- base::grepl
[18:07:12.599]                         restarts <- computeRestarts(cond)
[18:07:12.599]                         for (restart in restarts) {
[18:07:12.599]                           name <- restart$name
[18:07:12.599]                           if (is.null(name)) 
[18:07:12.599]                             next
[18:07:12.599]                           if (!grepl(pattern, name)) 
[18:07:12.599]                             next
[18:07:12.599]                           invokeRestart(restart)
[18:07:12.599]                           muffled <- TRUE
[18:07:12.599]                           break
[18:07:12.599]                         }
[18:07:12.599]                       }
[18:07:12.599]                     }
[18:07:12.599]                     invisible(muffled)
[18:07:12.599]                   }
[18:07:12.599]                   muffleCondition(cond)
[18:07:12.599]                 })
[18:07:12.599]             }))
[18:07:12.599]             future::FutureResult(value = ...future.value$value, 
[18:07:12.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:12.599]                   ...future.rng), globalenv = if (FALSE) 
[18:07:12.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:12.599]                     ...future.globalenv.names))
[18:07:12.599]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:12.599]         }, condition = base::local({
[18:07:12.599]             c <- base::c
[18:07:12.599]             inherits <- base::inherits
[18:07:12.599]             invokeRestart <- base::invokeRestart
[18:07:12.599]             length <- base::length
[18:07:12.599]             list <- base::list
[18:07:12.599]             seq.int <- base::seq.int
[18:07:12.599]             signalCondition <- base::signalCondition
[18:07:12.599]             sys.calls <- base::sys.calls
[18:07:12.599]             `[[` <- base::`[[`
[18:07:12.599]             `+` <- base::`+`
[18:07:12.599]             `<<-` <- base::`<<-`
[18:07:12.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:12.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:12.599]                   3L)]
[18:07:12.599]             }
[18:07:12.599]             function(cond) {
[18:07:12.599]                 is_error <- inherits(cond, "error")
[18:07:12.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:12.599]                   NULL)
[18:07:12.599]                 if (is_error) {
[18:07:12.599]                   sessionInformation <- function() {
[18:07:12.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:12.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:12.599]                       search = base::search(), system = base::Sys.info())
[18:07:12.599]                   }
[18:07:12.599]                   ...future.conditions[[length(...future.conditions) + 
[18:07:12.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:12.599]                     cond$call), session = sessionInformation(), 
[18:07:12.599]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:12.599]                   signalCondition(cond)
[18:07:12.599]                 }
[18:07:12.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:12.599]                 "immediateCondition"))) {
[18:07:12.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:12.599]                   ...future.conditions[[length(...future.conditions) + 
[18:07:12.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:12.599]                   if (TRUE && !signal) {
[18:07:12.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:12.599]                     {
[18:07:12.599]                       inherits <- base::inherits
[18:07:12.599]                       invokeRestart <- base::invokeRestart
[18:07:12.599]                       is.null <- base::is.null
[18:07:12.599]                       muffled <- FALSE
[18:07:12.599]                       if (inherits(cond, "message")) {
[18:07:12.599]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:12.599]                         if (muffled) 
[18:07:12.599]                           invokeRestart("muffleMessage")
[18:07:12.599]                       }
[18:07:12.599]                       else if (inherits(cond, "warning")) {
[18:07:12.599]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:12.599]                         if (muffled) 
[18:07:12.599]                           invokeRestart("muffleWarning")
[18:07:12.599]                       }
[18:07:12.599]                       else if (inherits(cond, "condition")) {
[18:07:12.599]                         if (!is.null(pattern)) {
[18:07:12.599]                           computeRestarts <- base::computeRestarts
[18:07:12.599]                           grepl <- base::grepl
[18:07:12.599]                           restarts <- computeRestarts(cond)
[18:07:12.599]                           for (restart in restarts) {
[18:07:12.599]                             name <- restart$name
[18:07:12.599]                             if (is.null(name)) 
[18:07:12.599]                               next
[18:07:12.599]                             if (!grepl(pattern, name)) 
[18:07:12.599]                               next
[18:07:12.599]                             invokeRestart(restart)
[18:07:12.599]                             muffled <- TRUE
[18:07:12.599]                             break
[18:07:12.599]                           }
[18:07:12.599]                         }
[18:07:12.599]                       }
[18:07:12.599]                       invisible(muffled)
[18:07:12.599]                     }
[18:07:12.599]                     muffleCondition(cond, pattern = "^muffle")
[18:07:12.599]                   }
[18:07:12.599]                 }
[18:07:12.599]                 else {
[18:07:12.599]                   if (TRUE) {
[18:07:12.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:12.599]                     {
[18:07:12.599]                       inherits <- base::inherits
[18:07:12.599]                       invokeRestart <- base::invokeRestart
[18:07:12.599]                       is.null <- base::is.null
[18:07:12.599]                       muffled <- FALSE
[18:07:12.599]                       if (inherits(cond, "message")) {
[18:07:12.599]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:12.599]                         if (muffled) 
[18:07:12.599]                           invokeRestart("muffleMessage")
[18:07:12.599]                       }
[18:07:12.599]                       else if (inherits(cond, "warning")) {
[18:07:12.599]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:12.599]                         if (muffled) 
[18:07:12.599]                           invokeRestart("muffleWarning")
[18:07:12.599]                       }
[18:07:12.599]                       else if (inherits(cond, "condition")) {
[18:07:12.599]                         if (!is.null(pattern)) {
[18:07:12.599]                           computeRestarts <- base::computeRestarts
[18:07:12.599]                           grepl <- base::grepl
[18:07:12.599]                           restarts <- computeRestarts(cond)
[18:07:12.599]                           for (restart in restarts) {
[18:07:12.599]                             name <- restart$name
[18:07:12.599]                             if (is.null(name)) 
[18:07:12.599]                               next
[18:07:12.599]                             if (!grepl(pattern, name)) 
[18:07:12.599]                               next
[18:07:12.599]                             invokeRestart(restart)
[18:07:12.599]                             muffled <- TRUE
[18:07:12.599]                             break
[18:07:12.599]                           }
[18:07:12.599]                         }
[18:07:12.599]                       }
[18:07:12.599]                       invisible(muffled)
[18:07:12.599]                     }
[18:07:12.599]                     muffleCondition(cond, pattern = "^muffle")
[18:07:12.599]                   }
[18:07:12.599]                 }
[18:07:12.599]             }
[18:07:12.599]         }))
[18:07:12.599]     }, error = function(ex) {
[18:07:12.599]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:12.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:12.599]                 ...future.rng), started = ...future.startTime, 
[18:07:12.599]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:12.599]             version = "1.8"), class = "FutureResult")
[18:07:12.599]     }, finally = {
[18:07:12.599]         if (!identical(...future.workdir, getwd())) 
[18:07:12.599]             setwd(...future.workdir)
[18:07:12.599]         {
[18:07:12.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:12.599]                 ...future.oldOptions$nwarnings <- NULL
[18:07:12.599]             }
[18:07:12.599]             base::options(...future.oldOptions)
[18:07:12.599]             if (.Platform$OS.type == "windows") {
[18:07:12.599]                 old_names <- names(...future.oldEnvVars)
[18:07:12.599]                 envs <- base::Sys.getenv()
[18:07:12.599]                 names <- names(envs)
[18:07:12.599]                 common <- intersect(names, old_names)
[18:07:12.599]                 added <- setdiff(names, old_names)
[18:07:12.599]                 removed <- setdiff(old_names, names)
[18:07:12.599]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:12.599]                   envs[common]]
[18:07:12.599]                 NAMES <- toupper(changed)
[18:07:12.599]                 args <- list()
[18:07:12.599]                 for (kk in seq_along(NAMES)) {
[18:07:12.599]                   name <- changed[[kk]]
[18:07:12.599]                   NAME <- NAMES[[kk]]
[18:07:12.599]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:12.599]                     next
[18:07:12.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:12.599]                 }
[18:07:12.599]                 NAMES <- toupper(added)
[18:07:12.599]                 for (kk in seq_along(NAMES)) {
[18:07:12.599]                   name <- added[[kk]]
[18:07:12.599]                   NAME <- NAMES[[kk]]
[18:07:12.599]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:12.599]                     next
[18:07:12.599]                   args[[name]] <- ""
[18:07:12.599]                 }
[18:07:12.599]                 NAMES <- toupper(removed)
[18:07:12.599]                 for (kk in seq_along(NAMES)) {
[18:07:12.599]                   name <- removed[[kk]]
[18:07:12.599]                   NAME <- NAMES[[kk]]
[18:07:12.599]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:12.599]                     next
[18:07:12.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:12.599]                 }
[18:07:12.599]                 if (length(args) > 0) 
[18:07:12.599]                   base::do.call(base::Sys.setenv, args = args)
[18:07:12.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:12.599]             }
[18:07:12.599]             else {
[18:07:12.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:12.599]             }
[18:07:12.599]             {
[18:07:12.599]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:12.599]                   0L) {
[18:07:12.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:12.599]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:12.599]                   base::options(opts)
[18:07:12.599]                 }
[18:07:12.599]                 {
[18:07:12.599]                   {
[18:07:12.599]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:12.599]                     NULL
[18:07:12.599]                   }
[18:07:12.599]                   options(future.plan = NULL)
[18:07:12.599]                   if (is.na(NA_character_)) 
[18:07:12.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:12.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:12.599]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:12.599]                     .init = FALSE)
[18:07:12.599]                 }
[18:07:12.599]             }
[18:07:12.599]         }
[18:07:12.599]     })
[18:07:12.599]     if (TRUE) {
[18:07:12.599]         base::sink(type = "output", split = FALSE)
[18:07:12.599]         if (TRUE) {
[18:07:12.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:12.599]         }
[18:07:12.599]         else {
[18:07:12.599]             ...future.result["stdout"] <- base::list(NULL)
[18:07:12.599]         }
[18:07:12.599]         base::close(...future.stdout)
[18:07:12.599]         ...future.stdout <- NULL
[18:07:12.599]     }
[18:07:12.599]     ...future.result$conditions <- ...future.conditions
[18:07:12.599]     ...future.result$finished <- base::Sys.time()
[18:07:12.599]     ...future.result
[18:07:12.599] }
[18:07:12.604] assign_globals() ...
[18:07:12.604] List of 3
[18:07:12.604]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[18:07:12.604]  $ uuids         :List of 1
[18:07:12.604]   ..$ 331624: chr "5deb14a4-9046-ef3c-85c9-5c08b830addd"
[18:07:12.604]   .. ..- attr(*, "source")=List of 5
[18:07:12.604]   .. .. ..$ host  : Named chr "99adafdbb12a"
[18:07:12.604]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[18:07:12.604]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
[18:07:12.604]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[18:07:12.604]   .. .. ..$ pid   : int 331624
[18:07:12.604]   .. .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:12"
[18:07:12.604]   .. .. ..$ random: int 2147483647
[18:07:12.604]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[18:07:12.604]  - attr(*, "where")=List of 3
[18:07:12.604]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[18:07:12.604]   ..$ uuids         :<environment: R_EmptyEnv> 
[18:07:12.604]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[18:07:12.604]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:07:12.604]  - attr(*, "resolved")= logi FALSE
[18:07:12.604]  - attr(*, "total_size")= num 79160
[18:07:12.604]  - attr(*, "already-done")= logi TRUE
[18:07:12.620] - copied ‘session_uuid’ to environment
[18:07:12.620] - copied ‘uuids’ to environment
[18:07:12.620] - copied ‘stealth_sample’ to environment
[18:07:12.620] assign_globals() ... done
[18:07:12.621] requestCore(): workers = 2
[18:07:12.625] MulticoreFuture started
[18:07:12.626] - Launch lazy future ... done
[18:07:12.626] run() for ‘MulticoreFuture’ ... done
[18:07:12.628] plan(): Setting new future strategy stack:
[18:07:12.628] List of future strategies:
[18:07:12.628] 1. sequential:
[18:07:12.628]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:12.628]    - tweaked: FALSE
[18:07:12.628]    - call: NULL
[18:07:12.630] plan(): nbrOfWorkers() = 1
[18:07:12.633] getGlobalsAndPackages() ...
[18:07:12.633] Searching for globals...
[18:07:12.657] - globals found: [28] ‘{’, ‘Sys.sleep’, ‘session_uuid’, ‘Sys.getpid’, ‘<-’, ‘as.character’, ‘[[’, ‘uuids’, ‘if’, ‘!’, ‘is.null’, ‘attr’, ‘attr<-’, ‘return’, ‘Sys.info’, ‘Sys.getenv’, ‘c’, ‘[’, ‘nzchar’, ‘==’, ‘length’, ‘list’, ‘Sys.time’, ‘stealth_sample’, ‘$’, ‘.Machine’, ‘<<-’, ‘[[<-’
[18:07:12.657] Searching for globals ... DONE
[18:07:12.658] Resolving globals: FALSE
[18:07:12.661] The total size of the 3 globals is 77.30 KiB (79160 bytes)
[18:07:12.663] The total size of the 3 globals exported for future expression (‘{; Sys.sleep(0.2); session_uuid(); }’) is 77.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘stealth_sample’ (61.89 KiB of class ‘function’), ‘session_uuid’ (12.55 KiB of class ‘function’) and ‘uuids’ (2.87 KiB of class ‘list’)
[18:07:12.663] - globals: [3] ‘session_uuid’, ‘uuids’, ‘stealth_sample’
[18:07:12.664] - packages: [1] ‘future’
[18:07:12.664] getGlobalsAndPackages() ... DONE
[18:07:12.665] run() for ‘Future’ ...
[18:07:12.665] - state: ‘created’
[18:07:12.666] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:12.667] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:12.667] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:12.668]   - Field: ‘label’
[18:07:12.668]   - Field: ‘local’
[18:07:12.668]   - Field: ‘owner’
[18:07:12.668]   - Field: ‘envir’
[18:07:12.669]   - Field: ‘workers’
[18:07:12.669]   - Field: ‘packages’
[18:07:12.669]   - Field: ‘gc’
[18:07:12.677]   - Field: ‘job’
[18:07:12.678]   - Field: ‘conditions’
[18:07:12.678]   - Field: ‘expr’
[18:07:12.678]   - Field: ‘uuid’
[18:07:12.679]   - Field: ‘seed’
[18:07:12.679]   - Field: ‘version’
[18:07:12.679]   - Field: ‘result’
[18:07:12.680]   - Field: ‘asynchronous’
[18:07:12.680]   - Field: ‘calls’
[18:07:12.681]   - Field: ‘globals’
[18:07:12.681]   - Field: ‘stdout’
[18:07:12.681]   - Field: ‘earlySignal’
[18:07:12.682]   - Field: ‘lazy’
[18:07:12.682]   - Field: ‘state’
[18:07:12.682] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:12.683] - Launch lazy future ...
[18:07:12.683] Packages needed by the future expression (n = 1): ‘future’
[18:07:12.684] Packages needed by future strategies (n = 0): <none>
[18:07:12.686] {
[18:07:12.686]     {
[18:07:12.686]         {
[18:07:12.686]             ...future.startTime <- base::Sys.time()
[18:07:12.686]             {
[18:07:12.686]                 {
[18:07:12.686]                   {
[18:07:12.686]                     {
[18:07:12.686]                       {
[18:07:12.686]                         base::local({
[18:07:12.686]                           has_future <- base::requireNamespace("future", 
[18:07:12.686]                             quietly = TRUE)
[18:07:12.686]                           if (has_future) {
[18:07:12.686]                             ns <- base::getNamespace("future")
[18:07:12.686]                             version <- ns[[".package"]][["version"]]
[18:07:12.686]                             if (is.null(version)) 
[18:07:12.686]                               version <- utils::packageVersion("future")
[18:07:12.686]                           }
[18:07:12.686]                           else {
[18:07:12.686]                             version <- NULL
[18:07:12.686]                           }
[18:07:12.686]                           if (!has_future || version < "1.8.0") {
[18:07:12.686]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:12.686]                               "", base::R.version$version.string), 
[18:07:12.686]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:12.686]                                 base::R.version$platform, 8 * 
[18:07:12.686]                                   base::.Machine$sizeof.pointer), 
[18:07:12.686]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:12.686]                                 "release", "version")], collapse = " "), 
[18:07:12.686]                               hostname = base::Sys.info()[["nodename"]])
[18:07:12.686]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:12.686]                               info)
[18:07:12.686]                             info <- base::paste(info, collapse = "; ")
[18:07:12.686]                             if (!has_future) {
[18:07:12.686]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:12.686]                                 info)
[18:07:12.686]                             }
[18:07:12.686]                             else {
[18:07:12.686]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:12.686]                                 info, version)
[18:07:12.686]                             }
[18:07:12.686]                             base::stop(msg)
[18:07:12.686]                           }
[18:07:12.686]                         })
[18:07:12.686]                       }
[18:07:12.686]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:12.686]                       base::options(mc.cores = 1L)
[18:07:12.686]                     }
[18:07:12.686]                     base::local({
[18:07:12.686]                       for (pkg in "future") {
[18:07:12.686]                         base::loadNamespace(pkg)
[18:07:12.686]                         base::library(pkg, character.only = TRUE)
[18:07:12.686]                       }
[18:07:12.686]                     })
[18:07:12.686]                   }
[18:07:12.686]                   ...future.strategy.old <- future::plan("list")
[18:07:12.686]                   options(future.plan = NULL)
[18:07:12.686]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:12.686]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:12.686]                 }
[18:07:12.686]                 ...future.workdir <- getwd()
[18:07:12.686]             }
[18:07:12.686]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:12.686]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:12.686]         }
[18:07:12.686]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:12.686]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:12.686]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:12.686]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:12.686]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:12.686]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:12.686]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:12.686]             base::names(...future.oldOptions))
[18:07:12.686]     }
[18:07:12.686]     if (FALSE) {
[18:07:12.686]     }
[18:07:12.686]     else {
[18:07:12.686]         if (TRUE) {
[18:07:12.686]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:12.686]                 open = "w")
[18:07:12.686]         }
[18:07:12.686]         else {
[18:07:12.686]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:12.686]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:12.686]         }
[18:07:12.686]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:12.686]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:12.686]             base::sink(type = "output", split = FALSE)
[18:07:12.686]             base::close(...future.stdout)
[18:07:12.686]         }, add = TRUE)
[18:07:12.686]     }
[18:07:12.686]     ...future.frame <- base::sys.nframe()
[18:07:12.686]     ...future.conditions <- base::list()
[18:07:12.686]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:12.686]     if (FALSE) {
[18:07:12.686]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:12.686]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:12.686]     }
[18:07:12.686]     ...future.result <- base::tryCatch({
[18:07:12.686]         base::withCallingHandlers({
[18:07:12.686]             ...future.value <- base::withVisible(base::local({
[18:07:12.686]                 withCallingHandlers({
[18:07:12.686]                   {
[18:07:12.686]                     Sys.sleep(0.2)
[18:07:12.686]                     session_uuid()
[18:07:12.686]                   }
[18:07:12.686]                 }, immediateCondition = function(cond) {
[18:07:12.686]                   save_rds <- function (object, pathname, ...) 
[18:07:12.686]                   {
[18:07:12.686]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:12.686]                     if (file_test("-f", pathname_tmp)) {
[18:07:12.686]                       fi_tmp <- file.info(pathname_tmp)
[18:07:12.686]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:12.686]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:12.686]                         fi_tmp[["mtime"]])
[18:07:12.686]                     }
[18:07:12.686]                     tryCatch({
[18:07:12.686]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:12.686]                     }, error = function(ex) {
[18:07:12.686]                       msg <- conditionMessage(ex)
[18:07:12.686]                       fi_tmp <- file.info(pathname_tmp)
[18:07:12.686]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:12.686]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:12.686]                         fi_tmp[["mtime"]], msg)
[18:07:12.686]                       ex$message <- msg
[18:07:12.686]                       stop(ex)
[18:07:12.686]                     })
[18:07:12.686]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:12.686]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:12.686]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:12.686]                       fi_tmp <- file.info(pathname_tmp)
[18:07:12.686]                       fi <- file.info(pathname)
[18:07:12.686]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:12.686]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:12.686]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:12.686]                         fi[["size"]], fi[["mtime"]])
[18:07:12.686]                       stop(msg)
[18:07:12.686]                     }
[18:07:12.686]                     invisible(pathname)
[18:07:12.686]                   }
[18:07:12.686]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:12.686]                     rootPath = tempdir()) 
[18:07:12.686]                   {
[18:07:12.686]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:12.686]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:12.686]                       tmpdir = path, fileext = ".rds")
[18:07:12.686]                     save_rds(obj, file)
[18:07:12.686]                   }
[18:07:12.686]                   saveImmediateCondition(cond, path = "/tmp/Rtmp2DphJj/.future/immediateConditions")
[18:07:12.686]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:12.686]                   {
[18:07:12.686]                     inherits <- base::inherits
[18:07:12.686]                     invokeRestart <- base::invokeRestart
[18:07:12.686]                     is.null <- base::is.null
[18:07:12.686]                     muffled <- FALSE
[18:07:12.686]                     if (inherits(cond, "message")) {
[18:07:12.686]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:12.686]                       if (muffled) 
[18:07:12.686]                         invokeRestart("muffleMessage")
[18:07:12.686]                     }
[18:07:12.686]                     else if (inherits(cond, "warning")) {
[18:07:12.686]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:12.686]                       if (muffled) 
[18:07:12.686]                         invokeRestart("muffleWarning")
[18:07:12.686]                     }
[18:07:12.686]                     else if (inherits(cond, "condition")) {
[18:07:12.686]                       if (!is.null(pattern)) {
[18:07:12.686]                         computeRestarts <- base::computeRestarts
[18:07:12.686]                         grepl <- base::grepl
[18:07:12.686]                         restarts <- computeRestarts(cond)
[18:07:12.686]                         for (restart in restarts) {
[18:07:12.686]                           name <- restart$name
[18:07:12.686]                           if (is.null(name)) 
[18:07:12.686]                             next
[18:07:12.686]                           if (!grepl(pattern, name)) 
[18:07:12.686]                             next
[18:07:12.686]                           invokeRestart(restart)
[18:07:12.686]                           muffled <- TRUE
[18:07:12.686]                           break
[18:07:12.686]                         }
[18:07:12.686]                       }
[18:07:12.686]                     }
[18:07:12.686]                     invisible(muffled)
[18:07:12.686]                   }
[18:07:12.686]                   muffleCondition(cond)
[18:07:12.686]                 })
[18:07:12.686]             }))
[18:07:12.686]             future::FutureResult(value = ...future.value$value, 
[18:07:12.686]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:12.686]                   ...future.rng), globalenv = if (FALSE) 
[18:07:12.686]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:12.686]                     ...future.globalenv.names))
[18:07:12.686]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:12.686]         }, condition = base::local({
[18:07:12.686]             c <- base::c
[18:07:12.686]             inherits <- base::inherits
[18:07:12.686]             invokeRestart <- base::invokeRestart
[18:07:12.686]             length <- base::length
[18:07:12.686]             list <- base::list
[18:07:12.686]             seq.int <- base::seq.int
[18:07:12.686]             signalCondition <- base::signalCondition
[18:07:12.686]             sys.calls <- base::sys.calls
[18:07:12.686]             `[[` <- base::`[[`
[18:07:12.686]             `+` <- base::`+`
[18:07:12.686]             `<<-` <- base::`<<-`
[18:07:12.686]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:12.686]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:12.686]                   3L)]
[18:07:12.686]             }
[18:07:12.686]             function(cond) {
[18:07:12.686]                 is_error <- inherits(cond, "error")
[18:07:12.686]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:12.686]                   NULL)
[18:07:12.686]                 if (is_error) {
[18:07:12.686]                   sessionInformation <- function() {
[18:07:12.686]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:12.686]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:12.686]                       search = base::search(), system = base::Sys.info())
[18:07:12.686]                   }
[18:07:12.686]                   ...future.conditions[[length(...future.conditions) + 
[18:07:12.686]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:12.686]                     cond$call), session = sessionInformation(), 
[18:07:12.686]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:12.686]                   signalCondition(cond)
[18:07:12.686]                 }
[18:07:12.686]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:12.686]                 "immediateCondition"))) {
[18:07:12.686]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:12.686]                   ...future.conditions[[length(...future.conditions) + 
[18:07:12.686]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:12.686]                   if (TRUE && !signal) {
[18:07:12.686]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:12.686]                     {
[18:07:12.686]                       inherits <- base::inherits
[18:07:12.686]                       invokeRestart <- base::invokeRestart
[18:07:12.686]                       is.null <- base::is.null
[18:07:12.686]                       muffled <- FALSE
[18:07:12.686]                       if (inherits(cond, "message")) {
[18:07:12.686]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:12.686]                         if (muffled) 
[18:07:12.686]                           invokeRestart("muffleMessage")
[18:07:12.686]                       }
[18:07:12.686]                       else if (inherits(cond, "warning")) {
[18:07:12.686]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:12.686]                         if (muffled) 
[18:07:12.686]                           invokeRestart("muffleWarning")
[18:07:12.686]                       }
[18:07:12.686]                       else if (inherits(cond, "condition")) {
[18:07:12.686]                         if (!is.null(pattern)) {
[18:07:12.686]                           computeRestarts <- base::computeRestarts
[18:07:12.686]                           grepl <- base::grepl
[18:07:12.686]                           restarts <- computeRestarts(cond)
[18:07:12.686]                           for (restart in restarts) {
[18:07:12.686]                             name <- restart$name
[18:07:12.686]                             if (is.null(name)) 
[18:07:12.686]                               next
[18:07:12.686]                             if (!grepl(pattern, name)) 
[18:07:12.686]                               next
[18:07:12.686]                             invokeRestart(restart)
[18:07:12.686]                             muffled <- TRUE
[18:07:12.686]                             break
[18:07:12.686]                           }
[18:07:12.686]                         }
[18:07:12.686]                       }
[18:07:12.686]                       invisible(muffled)
[18:07:12.686]                     }
[18:07:12.686]                     muffleCondition(cond, pattern = "^muffle")
[18:07:12.686]                   }
[18:07:12.686]                 }
[18:07:12.686]                 else {
[18:07:12.686]                   if (TRUE) {
[18:07:12.686]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:12.686]                     {
[18:07:12.686]                       inherits <- base::inherits
[18:07:12.686]                       invokeRestart <- base::invokeRestart
[18:07:12.686]                       is.null <- base::is.null
[18:07:12.686]                       muffled <- FALSE
[18:07:12.686]                       if (inherits(cond, "message")) {
[18:07:12.686]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:12.686]                         if (muffled) 
[18:07:12.686]                           invokeRestart("muffleMessage")
[18:07:12.686]                       }
[18:07:12.686]                       else if (inherits(cond, "warning")) {
[18:07:12.686]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:12.686]                         if (muffled) 
[18:07:12.686]                           invokeRestart("muffleWarning")
[18:07:12.686]                       }
[18:07:12.686]                       else if (inherits(cond, "condition")) {
[18:07:12.686]                         if (!is.null(pattern)) {
[18:07:12.686]                           computeRestarts <- base::computeRestarts
[18:07:12.686]                           grepl <- base::grepl
[18:07:12.686]                           restarts <- computeRestarts(cond)
[18:07:12.686]                           for (restart in restarts) {
[18:07:12.686]                             name <- restart$name
[18:07:12.686]                             if (is.null(name)) 
[18:07:12.686]                               next
[18:07:12.686]                             if (!grepl(pattern, name)) 
[18:07:12.686]                               next
[18:07:12.686]                             invokeRestart(restart)
[18:07:12.686]                             muffled <- TRUE
[18:07:12.686]                             break
[18:07:12.686]                           }
[18:07:12.686]                         }
[18:07:12.686]                       }
[18:07:12.686]                       invisible(muffled)
[18:07:12.686]                     }
[18:07:12.686]                     muffleCondition(cond, pattern = "^muffle")
[18:07:12.686]                   }
[18:07:12.686]                 }
[18:07:12.686]             }
[18:07:12.686]         }))
[18:07:12.686]     }, error = function(ex) {
[18:07:12.686]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:12.686]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:12.686]                 ...future.rng), started = ...future.startTime, 
[18:07:12.686]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:12.686]             version = "1.8"), class = "FutureResult")
[18:07:12.686]     }, finally = {
[18:07:12.686]         if (!identical(...future.workdir, getwd())) 
[18:07:12.686]             setwd(...future.workdir)
[18:07:12.686]         {
[18:07:12.686]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:12.686]                 ...future.oldOptions$nwarnings <- NULL
[18:07:12.686]             }
[18:07:12.686]             base::options(...future.oldOptions)
[18:07:12.686]             if (.Platform$OS.type == "windows") {
[18:07:12.686]                 old_names <- names(...future.oldEnvVars)
[18:07:12.686]                 envs <- base::Sys.getenv()
[18:07:12.686]                 names <- names(envs)
[18:07:12.686]                 common <- intersect(names, old_names)
[18:07:12.686]                 added <- setdiff(names, old_names)
[18:07:12.686]                 removed <- setdiff(old_names, names)
[18:07:12.686]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:12.686]                   envs[common]]
[18:07:12.686]                 NAMES <- toupper(changed)
[18:07:12.686]                 args <- list()
[18:07:12.686]                 for (kk in seq_along(NAMES)) {
[18:07:12.686]                   name <- changed[[kk]]
[18:07:12.686]                   NAME <- NAMES[[kk]]
[18:07:12.686]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:12.686]                     next
[18:07:12.686]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:12.686]                 }
[18:07:12.686]                 NAMES <- toupper(added)
[18:07:12.686]                 for (kk in seq_along(NAMES)) {
[18:07:12.686]                   name <- added[[kk]]
[18:07:12.686]                   NAME <- NAMES[[kk]]
[18:07:12.686]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:12.686]                     next
[18:07:12.686]                   args[[name]] <- ""
[18:07:12.686]                 }
[18:07:12.686]                 NAMES <- toupper(removed)
[18:07:12.686]                 for (kk in seq_along(NAMES)) {
[18:07:12.686]                   name <- removed[[kk]]
[18:07:12.686]                   NAME <- NAMES[[kk]]
[18:07:12.686]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:12.686]                     next
[18:07:12.686]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:12.686]                 }
[18:07:12.686]                 if (length(args) > 0) 
[18:07:12.686]                   base::do.call(base::Sys.setenv, args = args)
[18:07:12.686]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:12.686]             }
[18:07:12.686]             else {
[18:07:12.686]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:12.686]             }
[18:07:12.686]             {
[18:07:12.686]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:12.686]                   0L) {
[18:07:12.686]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:12.686]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:12.686]                   base::options(opts)
[18:07:12.686]                 }
[18:07:12.686]                 {
[18:07:12.686]                   {
[18:07:12.686]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:12.686]                     NULL
[18:07:12.686]                   }
[18:07:12.686]                   options(future.plan = NULL)
[18:07:12.686]                   if (is.na(NA_character_)) 
[18:07:12.686]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:12.686]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:12.686]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:12.686]                     .init = FALSE)
[18:07:12.686]                 }
[18:07:12.686]             }
[18:07:12.686]         }
[18:07:12.686]     })
[18:07:12.686]     if (TRUE) {
[18:07:12.686]         base::sink(type = "output", split = FALSE)
[18:07:12.686]         if (TRUE) {
[18:07:12.686]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:12.686]         }
[18:07:12.686]         else {
[18:07:12.686]             ...future.result["stdout"] <- base::list(NULL)
[18:07:12.686]         }
[18:07:12.686]         base::close(...future.stdout)
[18:07:12.686]         ...future.stdout <- NULL
[18:07:12.686]     }
[18:07:12.686]     ...future.result$conditions <- ...future.conditions
[18:07:12.686]     ...future.result$finished <- base::Sys.time()
[18:07:12.686]     ...future.result
[18:07:12.686] }
[18:07:12.690] assign_globals() ...
[18:07:12.691] List of 3
[18:07:12.691]  $ session_uuid  :function (pid = Sys.getpid(), attributes = TRUE)  
[18:07:12.691]  $ uuids         :List of 1
[18:07:12.691]   ..$ 331624: chr "5deb14a4-9046-ef3c-85c9-5c08b830addd"
[18:07:12.691]   .. ..- attr(*, "source")=List of 5
[18:07:12.691]   .. .. ..$ host  : Named chr "99adafdbb12a"
[18:07:12.691]   .. .. .. ..- attr(*, "names")= chr "HOSTNAME"
[18:07:12.691]   .. .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
[18:07:12.691]   .. .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
[18:07:12.691]   .. .. ..$ pid   : int 331624
[18:07:12.691]   .. .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:12"
[18:07:12.691]   .. .. ..$ random: int 2147483647
[18:07:12.691]  $ stealth_sample:function (x, size = length(x), replace = FALSE, ...)  
[18:07:12.691]  - attr(*, "where")=List of 3
[18:07:12.691]   ..$ session_uuid  :<environment: R_EmptyEnv> 
[18:07:12.691]   ..$ uuids         :<environment: R_EmptyEnv> 
[18:07:12.691]   ..$ stealth_sample:<environment: R_EmptyEnv> 
[18:07:12.691]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:07:12.691]  - attr(*, "resolved")= logi FALSE
[18:07:12.691]  - attr(*, "total_size")= num 79160
[18:07:12.691]  - attr(*, "already-done")= logi TRUE
[18:07:12.707] - copied ‘session_uuid’ to environment
[18:07:12.707] - copied ‘uuids’ to environment
[18:07:12.708] - copied ‘stealth_sample’ to environment
[18:07:12.708] assign_globals() ... done
[18:07:12.708] requestCore(): workers = 2
[18:07:12.718] MulticoreFuture started
[18:07:12.719] - Launch lazy future ... done
[18:07:12.719] run() for ‘MulticoreFuture’ ... done
[18:07:12.721] resolve() on list ...
[18:07:12.721] plan(): Setting new future strategy stack:
[18:07:12.721]  recursive: 0
[18:07:12.722]  length: 2
[18:07:12.723] 
[18:07:12.721] List of future strategies:
[18:07:12.721] 1. sequential:
[18:07:12.721]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:12.721]    - tweaked: FALSE
[18:07:12.721]    - call: NULL
[18:07:12.726] plan(): nbrOfWorkers() = 1
[18:07:12.836] plan(): Setting new future strategy stack:
[18:07:12.837] List of future strategies:
[18:07:12.837] 1. multicore:
[18:07:12.837]    - args: function (..., workers = 2L, envir = parent.frame())
[18:07:12.837]    - tweaked: TRUE
[18:07:12.837]    - call: plan(multicore, workers = 2L)
[18:07:12.838] plan(): nbrOfWorkers() = 2
[18:07:12.853] Future #1
[18:07:12.856] result() for MulticoreFuture ...
[18:07:12.863] result() for MulticoreFuture ...
[18:07:12.863] result() for MulticoreFuture ... done
[18:07:12.864] result() for MulticoreFuture ... done
[18:07:12.864] result() for MulticoreFuture ...
[18:07:12.865] result() for MulticoreFuture ... done
[18:07:12.865] signalConditionsASAP(MulticoreFuture, pos=1) ...
[18:07:12.866] - nx: 2
[18:07:12.866] - relay: TRUE
[18:07:12.867] - stdout: TRUE
[18:07:12.867] - signal: TRUE
[18:07:12.868] - resignal: FALSE
[18:07:12.868] - force: TRUE
[18:07:12.869] - relayed: [n=2] FALSE, FALSE
[18:07:12.869] - queued futures: [n=2] FALSE, FALSE
[18:07:12.870]  - until=1
[18:07:12.870]  - relaying element #1
[18:07:12.871] result() for MulticoreFuture ...
[18:07:12.871] result() for MulticoreFuture ... done
[18:07:12.872] result() for MulticoreFuture ...
[18:07:12.872] result() for MulticoreFuture ... done
[18:07:12.873] result() for MulticoreFuture ...
[18:07:12.873] result() for MulticoreFuture ... done
[18:07:12.874] result() for MulticoreFuture ...
[18:07:12.874] result() for MulticoreFuture ... done
[18:07:12.875] - relayed: [n=2] TRUE, FALSE
[18:07:12.875] - queued futures: [n=2] TRUE, FALSE
[18:07:12.876] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[18:07:12.877]  length: 1 (resolved future 1)
[18:07:12.932] plan(): Setting new future strategy stack:
[18:07:12.933] List of future strategies:
[18:07:12.933] 1. multicore:
[18:07:12.933]    - args: function (..., workers = 2L, envir = parent.frame())
[18:07:12.933]    - tweaked: TRUE
[18:07:12.933]    - call: plan(multicore, workers = 2L)
[18:07:12.934] plan(): nbrOfWorkers() = 2
[18:07:12.940] Future #2
[18:07:12.941] result() for MulticoreFuture ...
[18:07:12.943] result() for MulticoreFuture ...
[18:07:12.944] result() for MulticoreFuture ... done
[18:07:12.944] result() for MulticoreFuture ... done
[18:07:12.945] result() for MulticoreFuture ...
[18:07:12.945] result() for MulticoreFuture ... done
[18:07:12.946] signalConditionsASAP(MulticoreFuture, pos=2) ...
[18:07:12.946] - nx: 2
[18:07:12.947] - relay: TRUE
[18:07:12.947] - stdout: TRUE
[18:07:12.947] - signal: TRUE
[18:07:12.948] - resignal: FALSE
[18:07:12.948] - force: TRUE
[18:07:12.948] - relayed: [n=2] TRUE, FALSE
[18:07:12.949] - queued futures: [n=2] TRUE, FALSE
[18:07:12.949]  - until=2
[18:07:12.949]  - relaying element #2
[18:07:12.950] result() for MulticoreFuture ...
[18:07:12.950] result() for MulticoreFuture ... done
[18:07:12.951] result() for MulticoreFuture ...
[18:07:12.951] result() for MulticoreFuture ... done
[18:07:12.951] result() for MulticoreFuture ...
[18:07:12.952] result() for MulticoreFuture ... done
[18:07:12.952] result() for MulticoreFuture ...
[18:07:12.953] result() for MulticoreFuture ... done
[18:07:12.953] - relayed: [n=2] TRUE, TRUE
[18:07:12.953] - queued futures: [n=2] TRUE, TRUE
[18:07:12.954] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[18:07:12.955]  length: 0 (resolved future 2)
[18:07:12.955] Relaying remaining futures
[18:07:12.955] signalConditionsASAP(NULL, pos=0) ...
[18:07:12.956] - nx: 2
[18:07:12.956] - relay: TRUE
[18:07:12.957] - stdout: TRUE
[18:07:12.957] - signal: TRUE
[18:07:12.957] - resignal: FALSE
[18:07:12.958] - force: TRUE
[18:07:12.958] - relayed: [n=2] TRUE, TRUE
[18:07:12.958] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:07:12.959] - relayed: [n=2] TRUE, TRUE
[18:07:12.959] - queued futures: [n=2] TRUE, TRUE
[18:07:12.960] signalConditionsASAP(NULL, pos=0) ... done
[18:07:12.960] resolve() on list ... DONE
[18:07:12.960] result() for MulticoreFuture ...
[18:07:12.961] result() for MulticoreFuture ... done
[18:07:12.961] result() for MulticoreFuture ...
[18:07:12.961] result() for MulticoreFuture ... done
[18:07:12.962] result() for MulticoreFuture ...
[18:07:12.962] result() for MulticoreFuture ... done
[18:07:12.963] result() for MulticoreFuture ...
[18:07:12.963] result() for MulticoreFuture ... done
[1] "0b0f589e-4b55-b96e-6b22-d9ce3338777e"
[2] "541fb772-f8df-34a4-6a59-66cf2eacd04f"
> 
> message("*** session_uuid() ... DONE")
*** session_uuid() ... DONE
> 
> source("incl/end.R")
[18:07:12.965] plan(): Setting new future strategy stack:
[18:07:12.966] List of future strategies:
[18:07:12.966] 1. FutureStrategy:
[18:07:12.966]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:12.966]    - tweaked: FALSE
[18:07:12.966]    - call: future::plan(oplan)
[18:07:12.968] plan(): nbrOfWorkers() = 1
> 
