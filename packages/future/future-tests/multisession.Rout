
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:47:19.637] plan(): Setting new future strategy stack:
[17:47:19.638] List of future strategies:
[17:47:19.638] 1. sequential:
[17:47:19.638]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.638]    - tweaked: FALSE
[17:47:19.638]    - call: future::plan("sequential")
[17:47:19.649] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[17:47:19.705] getGlobalsAndPackages() ...
[17:47:19.705] Searching for globals...
[17:47:19.708] - globals found: [1] ‘{’
[17:47:19.708] Searching for globals ... DONE
[17:47:19.708] Resolving globals: FALSE
[17:47:19.709] 
[17:47:19.709] 
[17:47:19.709] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:19.711] Packages needed by the future expression (n = 0): <none>
[17:47:19.711] Packages needed by future strategies (n = 0): <none>
[17:47:19.712] {
[17:47:19.712]     {
[17:47:19.712]         {
[17:47:19.712]             ...future.startTime <- base::Sys.time()
[17:47:19.712]             {
[17:47:19.712]                 {
[17:47:19.712]                   {
[17:47:19.712]                     base::local({
[17:47:19.712]                       has_future <- base::requireNamespace("future", 
[17:47:19.712]                         quietly = TRUE)
[17:47:19.712]                       if (has_future) {
[17:47:19.712]                         ns <- base::getNamespace("future")
[17:47:19.712]                         version <- ns[[".package"]][["version"]]
[17:47:19.712]                         if (is.null(version)) 
[17:47:19.712]                           version <- utils::packageVersion("future")
[17:47:19.712]                       }
[17:47:19.712]                       else {
[17:47:19.712]                         version <- NULL
[17:47:19.712]                       }
[17:47:19.712]                       if (!has_future || version < "1.8.0") {
[17:47:19.712]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.712]                           "", base::R.version$version.string), 
[17:47:19.712]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.712]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.712]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.712]                             "release", "version")], collapse = " "), 
[17:47:19.712]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.712]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.712]                           info)
[17:47:19.712]                         info <- base::paste(info, collapse = "; ")
[17:47:19.712]                         if (!has_future) {
[17:47:19.712]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.712]                             info)
[17:47:19.712]                         }
[17:47:19.712]                         else {
[17:47:19.712]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.712]                             info, version)
[17:47:19.712]                         }
[17:47:19.712]                         base::stop(msg)
[17:47:19.712]                       }
[17:47:19.712]                     })
[17:47:19.712]                   }
[17:47:19.712]                   ...future.strategy.old <- future::plan("list")
[17:47:19.712]                   options(future.plan = NULL)
[17:47:19.712]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.712]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.712]                 }
[17:47:19.712]                 ...future.workdir <- getwd()
[17:47:19.712]             }
[17:47:19.712]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.712]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.712]         }
[17:47:19.712]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.712]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.712]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.712]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.712]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.712]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.712]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.712]             base::names(...future.oldOptions))
[17:47:19.712]     }
[17:47:19.712]     if (FALSE) {
[17:47:19.712]     }
[17:47:19.712]     else {
[17:47:19.712]         if (TRUE) {
[17:47:19.712]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.712]                 open = "w")
[17:47:19.712]         }
[17:47:19.712]         else {
[17:47:19.712]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.712]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.712]         }
[17:47:19.712]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.712]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.712]             base::sink(type = "output", split = FALSE)
[17:47:19.712]             base::close(...future.stdout)
[17:47:19.712]         }, add = TRUE)
[17:47:19.712]     }
[17:47:19.712]     ...future.frame <- base::sys.nframe()
[17:47:19.712]     ...future.conditions <- base::list()
[17:47:19.712]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.712]     if (FALSE) {
[17:47:19.712]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.712]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.712]     }
[17:47:19.712]     ...future.result <- base::tryCatch({
[17:47:19.712]         base::withCallingHandlers({
[17:47:19.712]             ...future.value <- base::withVisible(base::local({
[17:47:19.712]                 42L
[17:47:19.712]             }))
[17:47:19.712]             future::FutureResult(value = ...future.value$value, 
[17:47:19.712]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.712]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.712]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.712]                     ...future.globalenv.names))
[17:47:19.712]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.712]         }, condition = base::local({
[17:47:19.712]             c <- base::c
[17:47:19.712]             inherits <- base::inherits
[17:47:19.712]             invokeRestart <- base::invokeRestart
[17:47:19.712]             length <- base::length
[17:47:19.712]             list <- base::list
[17:47:19.712]             seq.int <- base::seq.int
[17:47:19.712]             signalCondition <- base::signalCondition
[17:47:19.712]             sys.calls <- base::sys.calls
[17:47:19.712]             `[[` <- base::`[[`
[17:47:19.712]             `+` <- base::`+`
[17:47:19.712]             `<<-` <- base::`<<-`
[17:47:19.712]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.712]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.712]                   3L)]
[17:47:19.712]             }
[17:47:19.712]             function(cond) {
[17:47:19.712]                 is_error <- inherits(cond, "error")
[17:47:19.712]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.712]                   NULL)
[17:47:19.712]                 if (is_error) {
[17:47:19.712]                   sessionInformation <- function() {
[17:47:19.712]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.712]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.712]                       search = base::search(), system = base::Sys.info())
[17:47:19.712]                   }
[17:47:19.712]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.712]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.712]                     cond$call), session = sessionInformation(), 
[17:47:19.712]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.712]                   signalCondition(cond)
[17:47:19.712]                 }
[17:47:19.712]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.712]                 "immediateCondition"))) {
[17:47:19.712]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.712]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.712]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.712]                   if (TRUE && !signal) {
[17:47:19.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.712]                     {
[17:47:19.712]                       inherits <- base::inherits
[17:47:19.712]                       invokeRestart <- base::invokeRestart
[17:47:19.712]                       is.null <- base::is.null
[17:47:19.712]                       muffled <- FALSE
[17:47:19.712]                       if (inherits(cond, "message")) {
[17:47:19.712]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.712]                         if (muffled) 
[17:47:19.712]                           invokeRestart("muffleMessage")
[17:47:19.712]                       }
[17:47:19.712]                       else if (inherits(cond, "warning")) {
[17:47:19.712]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.712]                         if (muffled) 
[17:47:19.712]                           invokeRestart("muffleWarning")
[17:47:19.712]                       }
[17:47:19.712]                       else if (inherits(cond, "condition")) {
[17:47:19.712]                         if (!is.null(pattern)) {
[17:47:19.712]                           computeRestarts <- base::computeRestarts
[17:47:19.712]                           grepl <- base::grepl
[17:47:19.712]                           restarts <- computeRestarts(cond)
[17:47:19.712]                           for (restart in restarts) {
[17:47:19.712]                             name <- restart$name
[17:47:19.712]                             if (is.null(name)) 
[17:47:19.712]                               next
[17:47:19.712]                             if (!grepl(pattern, name)) 
[17:47:19.712]                               next
[17:47:19.712]                             invokeRestart(restart)
[17:47:19.712]                             muffled <- TRUE
[17:47:19.712]                             break
[17:47:19.712]                           }
[17:47:19.712]                         }
[17:47:19.712]                       }
[17:47:19.712]                       invisible(muffled)
[17:47:19.712]                     }
[17:47:19.712]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.712]                   }
[17:47:19.712]                 }
[17:47:19.712]                 else {
[17:47:19.712]                   if (TRUE) {
[17:47:19.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.712]                     {
[17:47:19.712]                       inherits <- base::inherits
[17:47:19.712]                       invokeRestart <- base::invokeRestart
[17:47:19.712]                       is.null <- base::is.null
[17:47:19.712]                       muffled <- FALSE
[17:47:19.712]                       if (inherits(cond, "message")) {
[17:47:19.712]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.712]                         if (muffled) 
[17:47:19.712]                           invokeRestart("muffleMessage")
[17:47:19.712]                       }
[17:47:19.712]                       else if (inherits(cond, "warning")) {
[17:47:19.712]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.712]                         if (muffled) 
[17:47:19.712]                           invokeRestart("muffleWarning")
[17:47:19.712]                       }
[17:47:19.712]                       else if (inherits(cond, "condition")) {
[17:47:19.712]                         if (!is.null(pattern)) {
[17:47:19.712]                           computeRestarts <- base::computeRestarts
[17:47:19.712]                           grepl <- base::grepl
[17:47:19.712]                           restarts <- computeRestarts(cond)
[17:47:19.712]                           for (restart in restarts) {
[17:47:19.712]                             name <- restart$name
[17:47:19.712]                             if (is.null(name)) 
[17:47:19.712]                               next
[17:47:19.712]                             if (!grepl(pattern, name)) 
[17:47:19.712]                               next
[17:47:19.712]                             invokeRestart(restart)
[17:47:19.712]                             muffled <- TRUE
[17:47:19.712]                             break
[17:47:19.712]                           }
[17:47:19.712]                         }
[17:47:19.712]                       }
[17:47:19.712]                       invisible(muffled)
[17:47:19.712]                     }
[17:47:19.712]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.712]                   }
[17:47:19.712]                 }
[17:47:19.712]             }
[17:47:19.712]         }))
[17:47:19.712]     }, error = function(ex) {
[17:47:19.712]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.712]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.712]                 ...future.rng), started = ...future.startTime, 
[17:47:19.712]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.712]             version = "1.8"), class = "FutureResult")
[17:47:19.712]     }, finally = {
[17:47:19.712]         if (!identical(...future.workdir, getwd())) 
[17:47:19.712]             setwd(...future.workdir)
[17:47:19.712]         {
[17:47:19.712]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.712]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.712]             }
[17:47:19.712]             base::options(...future.oldOptions)
[17:47:19.712]             if (.Platform$OS.type == "windows") {
[17:47:19.712]                 old_names <- names(...future.oldEnvVars)
[17:47:19.712]                 envs <- base::Sys.getenv()
[17:47:19.712]                 names <- names(envs)
[17:47:19.712]                 common <- intersect(names, old_names)
[17:47:19.712]                 added <- setdiff(names, old_names)
[17:47:19.712]                 removed <- setdiff(old_names, names)
[17:47:19.712]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.712]                   envs[common]]
[17:47:19.712]                 NAMES <- toupper(changed)
[17:47:19.712]                 args <- list()
[17:47:19.712]                 for (kk in seq_along(NAMES)) {
[17:47:19.712]                   name <- changed[[kk]]
[17:47:19.712]                   NAME <- NAMES[[kk]]
[17:47:19.712]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.712]                     next
[17:47:19.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.712]                 }
[17:47:19.712]                 NAMES <- toupper(added)
[17:47:19.712]                 for (kk in seq_along(NAMES)) {
[17:47:19.712]                   name <- added[[kk]]
[17:47:19.712]                   NAME <- NAMES[[kk]]
[17:47:19.712]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.712]                     next
[17:47:19.712]                   args[[name]] <- ""
[17:47:19.712]                 }
[17:47:19.712]                 NAMES <- toupper(removed)
[17:47:19.712]                 for (kk in seq_along(NAMES)) {
[17:47:19.712]                   name <- removed[[kk]]
[17:47:19.712]                   NAME <- NAMES[[kk]]
[17:47:19.712]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.712]                     next
[17:47:19.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.712]                 }
[17:47:19.712]                 if (length(args) > 0) 
[17:47:19.712]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.712]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.712]             }
[17:47:19.712]             else {
[17:47:19.712]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.712]             }
[17:47:19.712]             {
[17:47:19.712]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.712]                   0L) {
[17:47:19.712]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.712]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.712]                   base::options(opts)
[17:47:19.712]                 }
[17:47:19.712]                 {
[17:47:19.712]                   {
[17:47:19.712]                     NULL
[17:47:19.712]                     RNGkind("Mersenne-Twister")
[17:47:19.712]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.712]                       inherits = FALSE)
[17:47:19.712]                   }
[17:47:19.712]                   options(future.plan = NULL)
[17:47:19.712]                   if (is.na(NA_character_)) 
[17:47:19.712]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.712]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.712]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.712]                     .init = FALSE)
[17:47:19.712]                 }
[17:47:19.712]             }
[17:47:19.712]         }
[17:47:19.712]     })
[17:47:19.712]     if (TRUE) {
[17:47:19.712]         base::sink(type = "output", split = FALSE)
[17:47:19.712]         if (TRUE) {
[17:47:19.712]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.712]         }
[17:47:19.712]         else {
[17:47:19.712]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.712]         }
[17:47:19.712]         base::close(...future.stdout)
[17:47:19.712]         ...future.stdout <- NULL
[17:47:19.712]     }
[17:47:19.712]     ...future.result$conditions <- ...future.conditions
[17:47:19.712]     ...future.result$finished <- base::Sys.time()
[17:47:19.712]     ...future.result
[17:47:19.712] }
[17:47:19.713] plan(): Setting new future strategy stack:
[17:47:19.714] List of future strategies:
[17:47:19.714] 1. sequential:
[17:47:19.714]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.714]    - tweaked: FALSE
[17:47:19.714]    - call: NULL
[17:47:19.714] plan(): nbrOfWorkers() = 1
[17:47:19.715] plan(): Setting new future strategy stack:
[17:47:19.715] List of future strategies:
[17:47:19.715] 1. sequential:
[17:47:19.715]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.715]    - tweaked: FALSE
[17:47:19.715]    - call: future::plan("sequential")
[17:47:19.716] plan(): nbrOfWorkers() = 1
[17:47:19.716] SequentialFuture started (and completed)
[17:47:19.716] resolved() for ‘SequentialFuture’ ...
[17:47:19.716] - state: ‘finished’
[17:47:19.717] - run: TRUE
[17:47:19.717] - result: ‘FutureResult’
[17:47:19.717] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[17:47:19.720] getGlobalsAndPackages() ...
[17:47:19.720] Searching for globals...
[17:47:19.725] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:47:19.725] Searching for globals ... DONE
[17:47:19.725] Resolving globals: FALSE
[17:47:19.726] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.726] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:47:19.727] - globals: [1] ‘a’
[17:47:19.727] 
[17:47:19.727] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:19.728] Packages needed by the future expression (n = 0): <none>
[17:47:19.728] Packages needed by future strategies (n = 0): <none>
[17:47:19.728] {
[17:47:19.728]     {
[17:47:19.728]         {
[17:47:19.728]             ...future.startTime <- base::Sys.time()
[17:47:19.728]             {
[17:47:19.728]                 {
[17:47:19.728]                   {
[17:47:19.728]                     base::local({
[17:47:19.728]                       has_future <- base::requireNamespace("future", 
[17:47:19.728]                         quietly = TRUE)
[17:47:19.728]                       if (has_future) {
[17:47:19.728]                         ns <- base::getNamespace("future")
[17:47:19.728]                         version <- ns[[".package"]][["version"]]
[17:47:19.728]                         if (is.null(version)) 
[17:47:19.728]                           version <- utils::packageVersion("future")
[17:47:19.728]                       }
[17:47:19.728]                       else {
[17:47:19.728]                         version <- NULL
[17:47:19.728]                       }
[17:47:19.728]                       if (!has_future || version < "1.8.0") {
[17:47:19.728]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.728]                           "", base::R.version$version.string), 
[17:47:19.728]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.728]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.728]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.728]                             "release", "version")], collapse = " "), 
[17:47:19.728]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.728]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.728]                           info)
[17:47:19.728]                         info <- base::paste(info, collapse = "; ")
[17:47:19.728]                         if (!has_future) {
[17:47:19.728]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.728]                             info)
[17:47:19.728]                         }
[17:47:19.728]                         else {
[17:47:19.728]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.728]                             info, version)
[17:47:19.728]                         }
[17:47:19.728]                         base::stop(msg)
[17:47:19.728]                       }
[17:47:19.728]                     })
[17:47:19.728]                   }
[17:47:19.728]                   ...future.strategy.old <- future::plan("list")
[17:47:19.728]                   options(future.plan = NULL)
[17:47:19.728]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.728]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.728]                 }
[17:47:19.728]                 ...future.workdir <- getwd()
[17:47:19.728]             }
[17:47:19.728]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.728]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.728]         }
[17:47:19.728]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.728]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.728]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.728]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.728]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.728]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.728]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.728]             base::names(...future.oldOptions))
[17:47:19.728]     }
[17:47:19.728]     if (FALSE) {
[17:47:19.728]     }
[17:47:19.728]     else {
[17:47:19.728]         if (TRUE) {
[17:47:19.728]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.728]                 open = "w")
[17:47:19.728]         }
[17:47:19.728]         else {
[17:47:19.728]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.728]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.728]         }
[17:47:19.728]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.728]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.728]             base::sink(type = "output", split = FALSE)
[17:47:19.728]             base::close(...future.stdout)
[17:47:19.728]         }, add = TRUE)
[17:47:19.728]     }
[17:47:19.728]     ...future.frame <- base::sys.nframe()
[17:47:19.728]     ...future.conditions <- base::list()
[17:47:19.728]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.728]     if (FALSE) {
[17:47:19.728]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.728]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.728]     }
[17:47:19.728]     ...future.result <- base::tryCatch({
[17:47:19.728]         base::withCallingHandlers({
[17:47:19.728]             ...future.value <- base::withVisible(base::local({
[17:47:19.728]                 b <- 3
[17:47:19.728]                 c <- 2
[17:47:19.728]                 a * b * c
[17:47:19.728]             }))
[17:47:19.728]             future::FutureResult(value = ...future.value$value, 
[17:47:19.728]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.728]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.728]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.728]                     ...future.globalenv.names))
[17:47:19.728]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.728]         }, condition = base::local({
[17:47:19.728]             c <- base::c
[17:47:19.728]             inherits <- base::inherits
[17:47:19.728]             invokeRestart <- base::invokeRestart
[17:47:19.728]             length <- base::length
[17:47:19.728]             list <- base::list
[17:47:19.728]             seq.int <- base::seq.int
[17:47:19.728]             signalCondition <- base::signalCondition
[17:47:19.728]             sys.calls <- base::sys.calls
[17:47:19.728]             `[[` <- base::`[[`
[17:47:19.728]             `+` <- base::`+`
[17:47:19.728]             `<<-` <- base::`<<-`
[17:47:19.728]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.728]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.728]                   3L)]
[17:47:19.728]             }
[17:47:19.728]             function(cond) {
[17:47:19.728]                 is_error <- inherits(cond, "error")
[17:47:19.728]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.728]                   NULL)
[17:47:19.728]                 if (is_error) {
[17:47:19.728]                   sessionInformation <- function() {
[17:47:19.728]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.728]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.728]                       search = base::search(), system = base::Sys.info())
[17:47:19.728]                   }
[17:47:19.728]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.728]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.728]                     cond$call), session = sessionInformation(), 
[17:47:19.728]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.728]                   signalCondition(cond)
[17:47:19.728]                 }
[17:47:19.728]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.728]                 "immediateCondition"))) {
[17:47:19.728]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.728]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.728]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.728]                   if (TRUE && !signal) {
[17:47:19.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.728]                     {
[17:47:19.728]                       inherits <- base::inherits
[17:47:19.728]                       invokeRestart <- base::invokeRestart
[17:47:19.728]                       is.null <- base::is.null
[17:47:19.728]                       muffled <- FALSE
[17:47:19.728]                       if (inherits(cond, "message")) {
[17:47:19.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.728]                         if (muffled) 
[17:47:19.728]                           invokeRestart("muffleMessage")
[17:47:19.728]                       }
[17:47:19.728]                       else if (inherits(cond, "warning")) {
[17:47:19.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.728]                         if (muffled) 
[17:47:19.728]                           invokeRestart("muffleWarning")
[17:47:19.728]                       }
[17:47:19.728]                       else if (inherits(cond, "condition")) {
[17:47:19.728]                         if (!is.null(pattern)) {
[17:47:19.728]                           computeRestarts <- base::computeRestarts
[17:47:19.728]                           grepl <- base::grepl
[17:47:19.728]                           restarts <- computeRestarts(cond)
[17:47:19.728]                           for (restart in restarts) {
[17:47:19.728]                             name <- restart$name
[17:47:19.728]                             if (is.null(name)) 
[17:47:19.728]                               next
[17:47:19.728]                             if (!grepl(pattern, name)) 
[17:47:19.728]                               next
[17:47:19.728]                             invokeRestart(restart)
[17:47:19.728]                             muffled <- TRUE
[17:47:19.728]                             break
[17:47:19.728]                           }
[17:47:19.728]                         }
[17:47:19.728]                       }
[17:47:19.728]                       invisible(muffled)
[17:47:19.728]                     }
[17:47:19.728]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.728]                   }
[17:47:19.728]                 }
[17:47:19.728]                 else {
[17:47:19.728]                   if (TRUE) {
[17:47:19.728]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.728]                     {
[17:47:19.728]                       inherits <- base::inherits
[17:47:19.728]                       invokeRestart <- base::invokeRestart
[17:47:19.728]                       is.null <- base::is.null
[17:47:19.728]                       muffled <- FALSE
[17:47:19.728]                       if (inherits(cond, "message")) {
[17:47:19.728]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.728]                         if (muffled) 
[17:47:19.728]                           invokeRestart("muffleMessage")
[17:47:19.728]                       }
[17:47:19.728]                       else if (inherits(cond, "warning")) {
[17:47:19.728]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.728]                         if (muffled) 
[17:47:19.728]                           invokeRestart("muffleWarning")
[17:47:19.728]                       }
[17:47:19.728]                       else if (inherits(cond, "condition")) {
[17:47:19.728]                         if (!is.null(pattern)) {
[17:47:19.728]                           computeRestarts <- base::computeRestarts
[17:47:19.728]                           grepl <- base::grepl
[17:47:19.728]                           restarts <- computeRestarts(cond)
[17:47:19.728]                           for (restart in restarts) {
[17:47:19.728]                             name <- restart$name
[17:47:19.728]                             if (is.null(name)) 
[17:47:19.728]                               next
[17:47:19.728]                             if (!grepl(pattern, name)) 
[17:47:19.728]                               next
[17:47:19.728]                             invokeRestart(restart)
[17:47:19.728]                             muffled <- TRUE
[17:47:19.728]                             break
[17:47:19.728]                           }
[17:47:19.728]                         }
[17:47:19.728]                       }
[17:47:19.728]                       invisible(muffled)
[17:47:19.728]                     }
[17:47:19.728]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.728]                   }
[17:47:19.728]                 }
[17:47:19.728]             }
[17:47:19.728]         }))
[17:47:19.728]     }, error = function(ex) {
[17:47:19.728]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.728]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.728]                 ...future.rng), started = ...future.startTime, 
[17:47:19.728]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.728]             version = "1.8"), class = "FutureResult")
[17:47:19.728]     }, finally = {
[17:47:19.728]         if (!identical(...future.workdir, getwd())) 
[17:47:19.728]             setwd(...future.workdir)
[17:47:19.728]         {
[17:47:19.728]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.728]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.728]             }
[17:47:19.728]             base::options(...future.oldOptions)
[17:47:19.728]             if (.Platform$OS.type == "windows") {
[17:47:19.728]                 old_names <- names(...future.oldEnvVars)
[17:47:19.728]                 envs <- base::Sys.getenv()
[17:47:19.728]                 names <- names(envs)
[17:47:19.728]                 common <- intersect(names, old_names)
[17:47:19.728]                 added <- setdiff(names, old_names)
[17:47:19.728]                 removed <- setdiff(old_names, names)
[17:47:19.728]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.728]                   envs[common]]
[17:47:19.728]                 NAMES <- toupper(changed)
[17:47:19.728]                 args <- list()
[17:47:19.728]                 for (kk in seq_along(NAMES)) {
[17:47:19.728]                   name <- changed[[kk]]
[17:47:19.728]                   NAME <- NAMES[[kk]]
[17:47:19.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.728]                     next
[17:47:19.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.728]                 }
[17:47:19.728]                 NAMES <- toupper(added)
[17:47:19.728]                 for (kk in seq_along(NAMES)) {
[17:47:19.728]                   name <- added[[kk]]
[17:47:19.728]                   NAME <- NAMES[[kk]]
[17:47:19.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.728]                     next
[17:47:19.728]                   args[[name]] <- ""
[17:47:19.728]                 }
[17:47:19.728]                 NAMES <- toupper(removed)
[17:47:19.728]                 for (kk in seq_along(NAMES)) {
[17:47:19.728]                   name <- removed[[kk]]
[17:47:19.728]                   NAME <- NAMES[[kk]]
[17:47:19.728]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.728]                     next
[17:47:19.728]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.728]                 }
[17:47:19.728]                 if (length(args) > 0) 
[17:47:19.728]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.728]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.728]             }
[17:47:19.728]             else {
[17:47:19.728]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.728]             }
[17:47:19.728]             {
[17:47:19.728]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.728]                   0L) {
[17:47:19.728]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.728]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.728]                   base::options(opts)
[17:47:19.728]                 }
[17:47:19.728]                 {
[17:47:19.728]                   {
[17:47:19.728]                     NULL
[17:47:19.728]                     RNGkind("Mersenne-Twister")
[17:47:19.728]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.728]                       inherits = FALSE)
[17:47:19.728]                   }
[17:47:19.728]                   options(future.plan = NULL)
[17:47:19.728]                   if (is.na(NA_character_)) 
[17:47:19.728]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.728]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.728]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.728]                     .init = FALSE)
[17:47:19.728]                 }
[17:47:19.728]             }
[17:47:19.728]         }
[17:47:19.728]     })
[17:47:19.728]     if (TRUE) {
[17:47:19.728]         base::sink(type = "output", split = FALSE)
[17:47:19.728]         if (TRUE) {
[17:47:19.728]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.728]         }
[17:47:19.728]         else {
[17:47:19.728]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.728]         }
[17:47:19.728]         base::close(...future.stdout)
[17:47:19.728]         ...future.stdout <- NULL
[17:47:19.728]     }
[17:47:19.728]     ...future.result$conditions <- ...future.conditions
[17:47:19.728]     ...future.result$finished <- base::Sys.time()
[17:47:19.728]     ...future.result
[17:47:19.728] }
[17:47:19.730] assign_globals() ...
[17:47:19.730] List of 1
[17:47:19.730]  $ a: num 0
[17:47:19.730]  - attr(*, "where")=List of 1
[17:47:19.730]   ..$ a:<environment: R_EmptyEnv> 
[17:47:19.730]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.730]  - attr(*, "resolved")= logi FALSE
[17:47:19.730]  - attr(*, "total_size")= num 56
[17:47:19.736] - copied ‘a’ to environment
[17:47:19.737] assign_globals() ... done
[17:47:19.737] plan(): Setting new future strategy stack:
[17:47:19.737] List of future strategies:
[17:47:19.737] 1. sequential:
[17:47:19.737]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.737]    - tweaked: FALSE
[17:47:19.737]    - call: NULL
[17:47:19.737] plan(): nbrOfWorkers() = 1
[17:47:19.738] plan(): Setting new future strategy stack:
[17:47:19.738] List of future strategies:
[17:47:19.738] 1. sequential:
[17:47:19.738]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.738]    - tweaked: FALSE
[17:47:19.738]    - call: future::plan("sequential")
[17:47:19.739] plan(): nbrOfWorkers() = 1
[17:47:19.739] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[17:47:19.742] getGlobalsAndPackages() ...
[17:47:19.742] Searching for globals...
[17:47:19.743] - globals found: [2] ‘{’, ‘ii’
[17:47:19.743] Searching for globals ... DONE
[17:47:19.743] Resolving globals: FALSE
[17:47:19.744] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.744] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:19.744] - globals: [1] ‘ii’
[17:47:19.744] 
[17:47:19.744] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[17:47:19.748] getGlobalsAndPackages() ...
[17:47:19.748] Searching for globals...
[17:47:19.749] - globals found: [2] ‘{’, ‘ii’
[17:47:19.749] Searching for globals ... DONE
[17:47:19.749] Resolving globals: FALSE
[17:47:19.749] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.749] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:19.749] - globals: [1] ‘ii’
[17:47:19.750] 
[17:47:19.750] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[17:47:19.750] Packages needed by the future expression (n = 0): <none>
[17:47:19.750] Packages needed by future strategies (n = 0): <none>
[17:47:19.751] {
[17:47:19.751]     {
[17:47:19.751]         {
[17:47:19.751]             ...future.startTime <- base::Sys.time()
[17:47:19.751]             {
[17:47:19.751]                 {
[17:47:19.751]                   {
[17:47:19.751]                     base::local({
[17:47:19.751]                       has_future <- base::requireNamespace("future", 
[17:47:19.751]                         quietly = TRUE)
[17:47:19.751]                       if (has_future) {
[17:47:19.751]                         ns <- base::getNamespace("future")
[17:47:19.751]                         version <- ns[[".package"]][["version"]]
[17:47:19.751]                         if (is.null(version)) 
[17:47:19.751]                           version <- utils::packageVersion("future")
[17:47:19.751]                       }
[17:47:19.751]                       else {
[17:47:19.751]                         version <- NULL
[17:47:19.751]                       }
[17:47:19.751]                       if (!has_future || version < "1.8.0") {
[17:47:19.751]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.751]                           "", base::R.version$version.string), 
[17:47:19.751]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.751]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.751]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.751]                             "release", "version")], collapse = " "), 
[17:47:19.751]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.751]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.751]                           info)
[17:47:19.751]                         info <- base::paste(info, collapse = "; ")
[17:47:19.751]                         if (!has_future) {
[17:47:19.751]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.751]                             info)
[17:47:19.751]                         }
[17:47:19.751]                         else {
[17:47:19.751]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.751]                             info, version)
[17:47:19.751]                         }
[17:47:19.751]                         base::stop(msg)
[17:47:19.751]                       }
[17:47:19.751]                     })
[17:47:19.751]                   }
[17:47:19.751]                   ...future.strategy.old <- future::plan("list")
[17:47:19.751]                   options(future.plan = NULL)
[17:47:19.751]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.751]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.751]                 }
[17:47:19.751]                 ...future.workdir <- getwd()
[17:47:19.751]             }
[17:47:19.751]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.751]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.751]         }
[17:47:19.751]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.751]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.751]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.751]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.751]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.751]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.751]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.751]             base::names(...future.oldOptions))
[17:47:19.751]     }
[17:47:19.751]     if (FALSE) {
[17:47:19.751]     }
[17:47:19.751]     else {
[17:47:19.751]         if (TRUE) {
[17:47:19.751]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.751]                 open = "w")
[17:47:19.751]         }
[17:47:19.751]         else {
[17:47:19.751]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.751]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.751]         }
[17:47:19.751]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.751]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.751]             base::sink(type = "output", split = FALSE)
[17:47:19.751]             base::close(...future.stdout)
[17:47:19.751]         }, add = TRUE)
[17:47:19.751]     }
[17:47:19.751]     ...future.frame <- base::sys.nframe()
[17:47:19.751]     ...future.conditions <- base::list()
[17:47:19.751]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.751]     if (FALSE) {
[17:47:19.751]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.751]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.751]     }
[17:47:19.751]     ...future.result <- base::tryCatch({
[17:47:19.751]         base::withCallingHandlers({
[17:47:19.751]             ...future.value <- base::withVisible(base::local({
[17:47:19.751]                 ii
[17:47:19.751]             }))
[17:47:19.751]             future::FutureResult(value = ...future.value$value, 
[17:47:19.751]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.751]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.751]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.751]                     ...future.globalenv.names))
[17:47:19.751]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.751]         }, condition = base::local({
[17:47:19.751]             c <- base::c
[17:47:19.751]             inherits <- base::inherits
[17:47:19.751]             invokeRestart <- base::invokeRestart
[17:47:19.751]             length <- base::length
[17:47:19.751]             list <- base::list
[17:47:19.751]             seq.int <- base::seq.int
[17:47:19.751]             signalCondition <- base::signalCondition
[17:47:19.751]             sys.calls <- base::sys.calls
[17:47:19.751]             `[[` <- base::`[[`
[17:47:19.751]             `+` <- base::`+`
[17:47:19.751]             `<<-` <- base::`<<-`
[17:47:19.751]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.751]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.751]                   3L)]
[17:47:19.751]             }
[17:47:19.751]             function(cond) {
[17:47:19.751]                 is_error <- inherits(cond, "error")
[17:47:19.751]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.751]                   NULL)
[17:47:19.751]                 if (is_error) {
[17:47:19.751]                   sessionInformation <- function() {
[17:47:19.751]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.751]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.751]                       search = base::search(), system = base::Sys.info())
[17:47:19.751]                   }
[17:47:19.751]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.751]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.751]                     cond$call), session = sessionInformation(), 
[17:47:19.751]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.751]                   signalCondition(cond)
[17:47:19.751]                 }
[17:47:19.751]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.751]                 "immediateCondition"))) {
[17:47:19.751]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.751]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.751]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.751]                   if (TRUE && !signal) {
[17:47:19.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.751]                     {
[17:47:19.751]                       inherits <- base::inherits
[17:47:19.751]                       invokeRestart <- base::invokeRestart
[17:47:19.751]                       is.null <- base::is.null
[17:47:19.751]                       muffled <- FALSE
[17:47:19.751]                       if (inherits(cond, "message")) {
[17:47:19.751]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.751]                         if (muffled) 
[17:47:19.751]                           invokeRestart("muffleMessage")
[17:47:19.751]                       }
[17:47:19.751]                       else if (inherits(cond, "warning")) {
[17:47:19.751]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.751]                         if (muffled) 
[17:47:19.751]                           invokeRestart("muffleWarning")
[17:47:19.751]                       }
[17:47:19.751]                       else if (inherits(cond, "condition")) {
[17:47:19.751]                         if (!is.null(pattern)) {
[17:47:19.751]                           computeRestarts <- base::computeRestarts
[17:47:19.751]                           grepl <- base::grepl
[17:47:19.751]                           restarts <- computeRestarts(cond)
[17:47:19.751]                           for (restart in restarts) {
[17:47:19.751]                             name <- restart$name
[17:47:19.751]                             if (is.null(name)) 
[17:47:19.751]                               next
[17:47:19.751]                             if (!grepl(pattern, name)) 
[17:47:19.751]                               next
[17:47:19.751]                             invokeRestart(restart)
[17:47:19.751]                             muffled <- TRUE
[17:47:19.751]                             break
[17:47:19.751]                           }
[17:47:19.751]                         }
[17:47:19.751]                       }
[17:47:19.751]                       invisible(muffled)
[17:47:19.751]                     }
[17:47:19.751]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.751]                   }
[17:47:19.751]                 }
[17:47:19.751]                 else {
[17:47:19.751]                   if (TRUE) {
[17:47:19.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.751]                     {
[17:47:19.751]                       inherits <- base::inherits
[17:47:19.751]                       invokeRestart <- base::invokeRestart
[17:47:19.751]                       is.null <- base::is.null
[17:47:19.751]                       muffled <- FALSE
[17:47:19.751]                       if (inherits(cond, "message")) {
[17:47:19.751]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.751]                         if (muffled) 
[17:47:19.751]                           invokeRestart("muffleMessage")
[17:47:19.751]                       }
[17:47:19.751]                       else if (inherits(cond, "warning")) {
[17:47:19.751]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.751]                         if (muffled) 
[17:47:19.751]                           invokeRestart("muffleWarning")
[17:47:19.751]                       }
[17:47:19.751]                       else if (inherits(cond, "condition")) {
[17:47:19.751]                         if (!is.null(pattern)) {
[17:47:19.751]                           computeRestarts <- base::computeRestarts
[17:47:19.751]                           grepl <- base::grepl
[17:47:19.751]                           restarts <- computeRestarts(cond)
[17:47:19.751]                           for (restart in restarts) {
[17:47:19.751]                             name <- restart$name
[17:47:19.751]                             if (is.null(name)) 
[17:47:19.751]                               next
[17:47:19.751]                             if (!grepl(pattern, name)) 
[17:47:19.751]                               next
[17:47:19.751]                             invokeRestart(restart)
[17:47:19.751]                             muffled <- TRUE
[17:47:19.751]                             break
[17:47:19.751]                           }
[17:47:19.751]                         }
[17:47:19.751]                       }
[17:47:19.751]                       invisible(muffled)
[17:47:19.751]                     }
[17:47:19.751]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.751]                   }
[17:47:19.751]                 }
[17:47:19.751]             }
[17:47:19.751]         }))
[17:47:19.751]     }, error = function(ex) {
[17:47:19.751]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.751]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.751]                 ...future.rng), started = ...future.startTime, 
[17:47:19.751]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.751]             version = "1.8"), class = "FutureResult")
[17:47:19.751]     }, finally = {
[17:47:19.751]         if (!identical(...future.workdir, getwd())) 
[17:47:19.751]             setwd(...future.workdir)
[17:47:19.751]         {
[17:47:19.751]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.751]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.751]             }
[17:47:19.751]             base::options(...future.oldOptions)
[17:47:19.751]             if (.Platform$OS.type == "windows") {
[17:47:19.751]                 old_names <- names(...future.oldEnvVars)
[17:47:19.751]                 envs <- base::Sys.getenv()
[17:47:19.751]                 names <- names(envs)
[17:47:19.751]                 common <- intersect(names, old_names)
[17:47:19.751]                 added <- setdiff(names, old_names)
[17:47:19.751]                 removed <- setdiff(old_names, names)
[17:47:19.751]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.751]                   envs[common]]
[17:47:19.751]                 NAMES <- toupper(changed)
[17:47:19.751]                 args <- list()
[17:47:19.751]                 for (kk in seq_along(NAMES)) {
[17:47:19.751]                   name <- changed[[kk]]
[17:47:19.751]                   NAME <- NAMES[[kk]]
[17:47:19.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.751]                     next
[17:47:19.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.751]                 }
[17:47:19.751]                 NAMES <- toupper(added)
[17:47:19.751]                 for (kk in seq_along(NAMES)) {
[17:47:19.751]                   name <- added[[kk]]
[17:47:19.751]                   NAME <- NAMES[[kk]]
[17:47:19.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.751]                     next
[17:47:19.751]                   args[[name]] <- ""
[17:47:19.751]                 }
[17:47:19.751]                 NAMES <- toupper(removed)
[17:47:19.751]                 for (kk in seq_along(NAMES)) {
[17:47:19.751]                   name <- removed[[kk]]
[17:47:19.751]                   NAME <- NAMES[[kk]]
[17:47:19.751]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.751]                     next
[17:47:19.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.751]                 }
[17:47:19.751]                 if (length(args) > 0) 
[17:47:19.751]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.751]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.751]             }
[17:47:19.751]             else {
[17:47:19.751]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.751]             }
[17:47:19.751]             {
[17:47:19.751]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.751]                   0L) {
[17:47:19.751]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.751]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.751]                   base::options(opts)
[17:47:19.751]                 }
[17:47:19.751]                 {
[17:47:19.751]                   {
[17:47:19.751]                     NULL
[17:47:19.751]                     RNGkind("Mersenne-Twister")
[17:47:19.751]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.751]                       inherits = FALSE)
[17:47:19.751]                   }
[17:47:19.751]                   options(future.plan = NULL)
[17:47:19.751]                   if (is.na(NA_character_)) 
[17:47:19.751]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.751]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.751]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.751]                     .init = FALSE)
[17:47:19.751]                 }
[17:47:19.751]             }
[17:47:19.751]         }
[17:47:19.751]     })
[17:47:19.751]     if (TRUE) {
[17:47:19.751]         base::sink(type = "output", split = FALSE)
[17:47:19.751]         if (TRUE) {
[17:47:19.751]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.751]         }
[17:47:19.751]         else {
[17:47:19.751]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.751]         }
[17:47:19.751]         base::close(...future.stdout)
[17:47:19.751]         ...future.stdout <- NULL
[17:47:19.751]     }
[17:47:19.751]     ...future.result$conditions <- ...future.conditions
[17:47:19.751]     ...future.result$finished <- base::Sys.time()
[17:47:19.751]     ...future.result
[17:47:19.751] }
[17:47:19.752] assign_globals() ...
[17:47:19.752] List of 1
[17:47:19.752]  $ ii: int 1
[17:47:19.752]  - attr(*, "where")=List of 1
[17:47:19.752]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:19.752]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.752]  - attr(*, "resolved")= logi FALSE
[17:47:19.752]  - attr(*, "total_size")= num 56
[17:47:19.754] - copied ‘ii’ to environment
[17:47:19.755] assign_globals() ... done
[17:47:19.755] plan(): Setting new future strategy stack:
[17:47:19.755] List of future strategies:
[17:47:19.755] 1. sequential:
[17:47:19.755]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.755]    - tweaked: FALSE
[17:47:19.755]    - call: NULL
[17:47:19.755] plan(): nbrOfWorkers() = 1
[17:47:19.756] plan(): Setting new future strategy stack:
[17:47:19.756] List of future strategies:
[17:47:19.756] 1. sequential:
[17:47:19.756]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.756]    - tweaked: FALSE
[17:47:19.756]    - call: future::plan("sequential")
[17:47:19.757] plan(): nbrOfWorkers() = 1
[17:47:19.757] SequentialFuture started (and completed)
[17:47:19.757] Packages needed by the future expression (n = 0): <none>
[17:47:19.757] Packages needed by future strategies (n = 0): <none>
[17:47:19.757] {
[17:47:19.757]     {
[17:47:19.757]         {
[17:47:19.757]             ...future.startTime <- base::Sys.time()
[17:47:19.757]             {
[17:47:19.757]                 {
[17:47:19.757]                   {
[17:47:19.757]                     base::local({
[17:47:19.757]                       has_future <- base::requireNamespace("future", 
[17:47:19.757]                         quietly = TRUE)
[17:47:19.757]                       if (has_future) {
[17:47:19.757]                         ns <- base::getNamespace("future")
[17:47:19.757]                         version <- ns[[".package"]][["version"]]
[17:47:19.757]                         if (is.null(version)) 
[17:47:19.757]                           version <- utils::packageVersion("future")
[17:47:19.757]                       }
[17:47:19.757]                       else {
[17:47:19.757]                         version <- NULL
[17:47:19.757]                       }
[17:47:19.757]                       if (!has_future || version < "1.8.0") {
[17:47:19.757]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.757]                           "", base::R.version$version.string), 
[17:47:19.757]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.757]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.757]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.757]                             "release", "version")], collapse = " "), 
[17:47:19.757]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.757]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.757]                           info)
[17:47:19.757]                         info <- base::paste(info, collapse = "; ")
[17:47:19.757]                         if (!has_future) {
[17:47:19.757]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.757]                             info)
[17:47:19.757]                         }
[17:47:19.757]                         else {
[17:47:19.757]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.757]                             info, version)
[17:47:19.757]                         }
[17:47:19.757]                         base::stop(msg)
[17:47:19.757]                       }
[17:47:19.757]                     })
[17:47:19.757]                   }
[17:47:19.757]                   ...future.strategy.old <- future::plan("list")
[17:47:19.757]                   options(future.plan = NULL)
[17:47:19.757]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.757]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.757]                 }
[17:47:19.757]                 ...future.workdir <- getwd()
[17:47:19.757]             }
[17:47:19.757]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.757]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.757]         }
[17:47:19.757]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.757]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.757]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.757]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.757]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.757]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.757]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.757]             base::names(...future.oldOptions))
[17:47:19.757]     }
[17:47:19.757]     if (FALSE) {
[17:47:19.757]     }
[17:47:19.757]     else {
[17:47:19.757]         if (TRUE) {
[17:47:19.757]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.757]                 open = "w")
[17:47:19.757]         }
[17:47:19.757]         else {
[17:47:19.757]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.757]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.757]         }
[17:47:19.757]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.757]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.757]             base::sink(type = "output", split = FALSE)
[17:47:19.757]             base::close(...future.stdout)
[17:47:19.757]         }, add = TRUE)
[17:47:19.757]     }
[17:47:19.757]     ...future.frame <- base::sys.nframe()
[17:47:19.757]     ...future.conditions <- base::list()
[17:47:19.757]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.757]     if (FALSE) {
[17:47:19.757]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.757]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.757]     }
[17:47:19.757]     ...future.result <- base::tryCatch({
[17:47:19.757]         base::withCallingHandlers({
[17:47:19.757]             ...future.value <- base::withVisible(base::local({
[17:47:19.757]                 ii
[17:47:19.757]             }))
[17:47:19.757]             future::FutureResult(value = ...future.value$value, 
[17:47:19.757]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.757]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.757]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.757]                     ...future.globalenv.names))
[17:47:19.757]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.757]         }, condition = base::local({
[17:47:19.757]             c <- base::c
[17:47:19.757]             inherits <- base::inherits
[17:47:19.757]             invokeRestart <- base::invokeRestart
[17:47:19.757]             length <- base::length
[17:47:19.757]             list <- base::list
[17:47:19.757]             seq.int <- base::seq.int
[17:47:19.757]             signalCondition <- base::signalCondition
[17:47:19.757]             sys.calls <- base::sys.calls
[17:47:19.757]             `[[` <- base::`[[`
[17:47:19.757]             `+` <- base::`+`
[17:47:19.757]             `<<-` <- base::`<<-`
[17:47:19.757]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.757]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.757]                   3L)]
[17:47:19.757]             }
[17:47:19.757]             function(cond) {
[17:47:19.757]                 is_error <- inherits(cond, "error")
[17:47:19.757]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.757]                   NULL)
[17:47:19.757]                 if (is_error) {
[17:47:19.757]                   sessionInformation <- function() {
[17:47:19.757]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.757]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.757]                       search = base::search(), system = base::Sys.info())
[17:47:19.757]                   }
[17:47:19.757]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.757]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.757]                     cond$call), session = sessionInformation(), 
[17:47:19.757]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.757]                   signalCondition(cond)
[17:47:19.757]                 }
[17:47:19.757]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.757]                 "immediateCondition"))) {
[17:47:19.757]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.757]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.757]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.757]                   if (TRUE && !signal) {
[17:47:19.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.757]                     {
[17:47:19.757]                       inherits <- base::inherits
[17:47:19.757]                       invokeRestart <- base::invokeRestart
[17:47:19.757]                       is.null <- base::is.null
[17:47:19.757]                       muffled <- FALSE
[17:47:19.757]                       if (inherits(cond, "message")) {
[17:47:19.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.757]                         if (muffled) 
[17:47:19.757]                           invokeRestart("muffleMessage")
[17:47:19.757]                       }
[17:47:19.757]                       else if (inherits(cond, "warning")) {
[17:47:19.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.757]                         if (muffled) 
[17:47:19.757]                           invokeRestart("muffleWarning")
[17:47:19.757]                       }
[17:47:19.757]                       else if (inherits(cond, "condition")) {
[17:47:19.757]                         if (!is.null(pattern)) {
[17:47:19.757]                           computeRestarts <- base::computeRestarts
[17:47:19.757]                           grepl <- base::grepl
[17:47:19.757]                           restarts <- computeRestarts(cond)
[17:47:19.757]                           for (restart in restarts) {
[17:47:19.757]                             name <- restart$name
[17:47:19.757]                             if (is.null(name)) 
[17:47:19.757]                               next
[17:47:19.757]                             if (!grepl(pattern, name)) 
[17:47:19.757]                               next
[17:47:19.757]                             invokeRestart(restart)
[17:47:19.757]                             muffled <- TRUE
[17:47:19.757]                             break
[17:47:19.757]                           }
[17:47:19.757]                         }
[17:47:19.757]                       }
[17:47:19.757]                       invisible(muffled)
[17:47:19.757]                     }
[17:47:19.757]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.757]                   }
[17:47:19.757]                 }
[17:47:19.757]                 else {
[17:47:19.757]                   if (TRUE) {
[17:47:19.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.757]                     {
[17:47:19.757]                       inherits <- base::inherits
[17:47:19.757]                       invokeRestart <- base::invokeRestart
[17:47:19.757]                       is.null <- base::is.null
[17:47:19.757]                       muffled <- FALSE
[17:47:19.757]                       if (inherits(cond, "message")) {
[17:47:19.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.757]                         if (muffled) 
[17:47:19.757]                           invokeRestart("muffleMessage")
[17:47:19.757]                       }
[17:47:19.757]                       else if (inherits(cond, "warning")) {
[17:47:19.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.757]                         if (muffled) 
[17:47:19.757]                           invokeRestart("muffleWarning")
[17:47:19.757]                       }
[17:47:19.757]                       else if (inherits(cond, "condition")) {
[17:47:19.757]                         if (!is.null(pattern)) {
[17:47:19.757]                           computeRestarts <- base::computeRestarts
[17:47:19.757]                           grepl <- base::grepl
[17:47:19.757]                           restarts <- computeRestarts(cond)
[17:47:19.757]                           for (restart in restarts) {
[17:47:19.757]                             name <- restart$name
[17:47:19.757]                             if (is.null(name)) 
[17:47:19.757]                               next
[17:47:19.757]                             if (!grepl(pattern, name)) 
[17:47:19.757]                               next
[17:47:19.757]                             invokeRestart(restart)
[17:47:19.757]                             muffled <- TRUE
[17:47:19.757]                             break
[17:47:19.757]                           }
[17:47:19.757]                         }
[17:47:19.757]                       }
[17:47:19.757]                       invisible(muffled)
[17:47:19.757]                     }
[17:47:19.757]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.757]                   }
[17:47:19.757]                 }
[17:47:19.757]             }
[17:47:19.757]         }))
[17:47:19.757]     }, error = function(ex) {
[17:47:19.757]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.757]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.757]                 ...future.rng), started = ...future.startTime, 
[17:47:19.757]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.757]             version = "1.8"), class = "FutureResult")
[17:47:19.757]     }, finally = {
[17:47:19.757]         if (!identical(...future.workdir, getwd())) 
[17:47:19.757]             setwd(...future.workdir)
[17:47:19.757]         {
[17:47:19.757]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.757]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.757]             }
[17:47:19.757]             base::options(...future.oldOptions)
[17:47:19.757]             if (.Platform$OS.type == "windows") {
[17:47:19.757]                 old_names <- names(...future.oldEnvVars)
[17:47:19.757]                 envs <- base::Sys.getenv()
[17:47:19.757]                 names <- names(envs)
[17:47:19.757]                 common <- intersect(names, old_names)
[17:47:19.757]                 added <- setdiff(names, old_names)
[17:47:19.757]                 removed <- setdiff(old_names, names)
[17:47:19.757]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.757]                   envs[common]]
[17:47:19.757]                 NAMES <- toupper(changed)
[17:47:19.757]                 args <- list()
[17:47:19.757]                 for (kk in seq_along(NAMES)) {
[17:47:19.757]                   name <- changed[[kk]]
[17:47:19.757]                   NAME <- NAMES[[kk]]
[17:47:19.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.757]                     next
[17:47:19.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.757]                 }
[17:47:19.757]                 NAMES <- toupper(added)
[17:47:19.757]                 for (kk in seq_along(NAMES)) {
[17:47:19.757]                   name <- added[[kk]]
[17:47:19.757]                   NAME <- NAMES[[kk]]
[17:47:19.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.757]                     next
[17:47:19.757]                   args[[name]] <- ""
[17:47:19.757]                 }
[17:47:19.757]                 NAMES <- toupper(removed)
[17:47:19.757]                 for (kk in seq_along(NAMES)) {
[17:47:19.757]                   name <- removed[[kk]]
[17:47:19.757]                   NAME <- NAMES[[kk]]
[17:47:19.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.757]                     next
[17:47:19.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.757]                 }
[17:47:19.757]                 if (length(args) > 0) 
[17:47:19.757]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.757]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.757]             }
[17:47:19.757]             else {
[17:47:19.757]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.757]             }
[17:47:19.757]             {
[17:47:19.757]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.757]                   0L) {
[17:47:19.757]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.757]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.757]                   base::options(opts)
[17:47:19.757]                 }
[17:47:19.757]                 {
[17:47:19.757]                   {
[17:47:19.757]                     NULL
[17:47:19.757]                     RNGkind("Mersenne-Twister")
[17:47:19.757]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.757]                       inherits = FALSE)
[17:47:19.757]                   }
[17:47:19.757]                   options(future.plan = NULL)
[17:47:19.757]                   if (is.na(NA_character_)) 
[17:47:19.757]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.757]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.757]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.757]                     .init = FALSE)
[17:47:19.757]                 }
[17:47:19.757]             }
[17:47:19.757]         }
[17:47:19.757]     })
[17:47:19.757]     if (TRUE) {
[17:47:19.757]         base::sink(type = "output", split = FALSE)
[17:47:19.757]         if (TRUE) {
[17:47:19.757]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.757]         }
[17:47:19.757]         else {
[17:47:19.757]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.757]         }
[17:47:19.757]         base::close(...future.stdout)
[17:47:19.757]         ...future.stdout <- NULL
[17:47:19.757]     }
[17:47:19.757]     ...future.result$conditions <- ...future.conditions
[17:47:19.757]     ...future.result$finished <- base::Sys.time()
[17:47:19.757]     ...future.result
[17:47:19.757] }
[17:47:19.759] assign_globals() ...
[17:47:19.759] List of 1
[17:47:19.759]  $ ii: int 2
[17:47:19.759]  - attr(*, "where")=List of 1
[17:47:19.759]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:19.759]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.759]  - attr(*, "resolved")= logi FALSE
[17:47:19.759]  - attr(*, "total_size")= num 56
[17:47:19.761] - copied ‘ii’ to environment
[17:47:19.761] assign_globals() ... done
[17:47:19.762] plan(): Setting new future strategy stack:
[17:47:19.762] List of future strategies:
[17:47:19.762] 1. sequential:
[17:47:19.762]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.762]    - tweaked: FALSE
[17:47:19.762]    - call: NULL
[17:47:19.762] plan(): nbrOfWorkers() = 1
[17:47:19.763] plan(): Setting new future strategy stack:
[17:47:19.763] List of future strategies:
[17:47:19.763] 1. sequential:
[17:47:19.763]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.763]    - tweaked: FALSE
[17:47:19.763]    - call: future::plan("sequential")
[17:47:19.763] plan(): nbrOfWorkers() = 1
[17:47:19.763] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[17:47:19.764] getGlobalsAndPackages() ...
[17:47:19.764] Searching for globals...
[17:47:19.764] - globals found: [1] ‘.libPaths’
[17:47:19.764] Searching for globals ... DONE
[17:47:19.764] Resolving globals: FALSE
[17:47:19.765] 
[17:47:19.765] 
[17:47:19.765] getGlobalsAndPackages() ... DONE
[17:47:19.765] run() for ‘Future’ ...
[17:47:19.765] - state: ‘created’
[17:47:19.766] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:47:19.766] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:19.766] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:47:19.766]   - Field: ‘label’
[17:47:19.766]   - Field: ‘local’
[17:47:19.766]   - Field: ‘owner’
[17:47:19.766]   - Field: ‘envir’
[17:47:19.766]   - Field: ‘packages’
[17:47:19.766]   - Field: ‘gc’
[17:47:19.767]   - Field: ‘conditions’
[17:47:19.767]   - Field: ‘expr’
[17:47:19.767]   - Field: ‘uuid’
[17:47:19.767]   - Field: ‘seed’
[17:47:19.767]   - Field: ‘version’
[17:47:19.767]   - Field: ‘result’
[17:47:19.767]   - Field: ‘asynchronous’
[17:47:19.767]   - Field: ‘calls’
[17:47:19.767]   - Field: ‘globals’
[17:47:19.767]   - Field: ‘stdout’
[17:47:19.768]   - Field: ‘earlySignal’
[17:47:19.768]   - Field: ‘lazy’
[17:47:19.768]   - Field: ‘state’
[17:47:19.768] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:47:19.768] - Launch lazy future ...
[17:47:19.768] Packages needed by the future expression (n = 0): <none>
[17:47:19.768] Packages needed by future strategies (n = 0): <none>
[17:47:19.769] {
[17:47:19.769]     {
[17:47:19.769]         {
[17:47:19.769]             ...future.startTime <- base::Sys.time()
[17:47:19.769]             {
[17:47:19.769]                 {
[17:47:19.769]                   {
[17:47:19.769]                     base::local({
[17:47:19.769]                       has_future <- base::requireNamespace("future", 
[17:47:19.769]                         quietly = TRUE)
[17:47:19.769]                       if (has_future) {
[17:47:19.769]                         ns <- base::getNamespace("future")
[17:47:19.769]                         version <- ns[[".package"]][["version"]]
[17:47:19.769]                         if (is.null(version)) 
[17:47:19.769]                           version <- utils::packageVersion("future")
[17:47:19.769]                       }
[17:47:19.769]                       else {
[17:47:19.769]                         version <- NULL
[17:47:19.769]                       }
[17:47:19.769]                       if (!has_future || version < "1.8.0") {
[17:47:19.769]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.769]                           "", base::R.version$version.string), 
[17:47:19.769]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.769]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.769]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.769]                             "release", "version")], collapse = " "), 
[17:47:19.769]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.769]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.769]                           info)
[17:47:19.769]                         info <- base::paste(info, collapse = "; ")
[17:47:19.769]                         if (!has_future) {
[17:47:19.769]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.769]                             info)
[17:47:19.769]                         }
[17:47:19.769]                         else {
[17:47:19.769]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.769]                             info, version)
[17:47:19.769]                         }
[17:47:19.769]                         base::stop(msg)
[17:47:19.769]                       }
[17:47:19.769]                     })
[17:47:19.769]                   }
[17:47:19.769]                   ...future.strategy.old <- future::plan("list")
[17:47:19.769]                   options(future.plan = NULL)
[17:47:19.769]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.769]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.769]                 }
[17:47:19.769]                 ...future.workdir <- getwd()
[17:47:19.769]             }
[17:47:19.769]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.769]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.769]         }
[17:47:19.769]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.769]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.769]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.769]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.769]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.769]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.769]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.769]             base::names(...future.oldOptions))
[17:47:19.769]     }
[17:47:19.769]     if (FALSE) {
[17:47:19.769]     }
[17:47:19.769]     else {
[17:47:19.769]         if (TRUE) {
[17:47:19.769]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.769]                 open = "w")
[17:47:19.769]         }
[17:47:19.769]         else {
[17:47:19.769]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.769]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.769]         }
[17:47:19.769]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.769]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.769]             base::sink(type = "output", split = FALSE)
[17:47:19.769]             base::close(...future.stdout)
[17:47:19.769]         }, add = TRUE)
[17:47:19.769]     }
[17:47:19.769]     ...future.frame <- base::sys.nframe()
[17:47:19.769]     ...future.conditions <- base::list()
[17:47:19.769]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.769]     if (FALSE) {
[17:47:19.769]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.769]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.769]     }
[17:47:19.769]     ...future.result <- base::tryCatch({
[17:47:19.769]         base::withCallingHandlers({
[17:47:19.769]             ...future.value <- base::withVisible(base::local(.libPaths()))
[17:47:19.769]             future::FutureResult(value = ...future.value$value, 
[17:47:19.769]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.769]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.769]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.769]                     ...future.globalenv.names))
[17:47:19.769]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.769]         }, condition = base::local({
[17:47:19.769]             c <- base::c
[17:47:19.769]             inherits <- base::inherits
[17:47:19.769]             invokeRestart <- base::invokeRestart
[17:47:19.769]             length <- base::length
[17:47:19.769]             list <- base::list
[17:47:19.769]             seq.int <- base::seq.int
[17:47:19.769]             signalCondition <- base::signalCondition
[17:47:19.769]             sys.calls <- base::sys.calls
[17:47:19.769]             `[[` <- base::`[[`
[17:47:19.769]             `+` <- base::`+`
[17:47:19.769]             `<<-` <- base::`<<-`
[17:47:19.769]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.769]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.769]                   3L)]
[17:47:19.769]             }
[17:47:19.769]             function(cond) {
[17:47:19.769]                 is_error <- inherits(cond, "error")
[17:47:19.769]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.769]                   NULL)
[17:47:19.769]                 if (is_error) {
[17:47:19.769]                   sessionInformation <- function() {
[17:47:19.769]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.769]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.769]                       search = base::search(), system = base::Sys.info())
[17:47:19.769]                   }
[17:47:19.769]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.769]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.769]                     cond$call), session = sessionInformation(), 
[17:47:19.769]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.769]                   signalCondition(cond)
[17:47:19.769]                 }
[17:47:19.769]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.769]                 "immediateCondition"))) {
[17:47:19.769]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.769]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.769]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.769]                   if (TRUE && !signal) {
[17:47:19.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.769]                     {
[17:47:19.769]                       inherits <- base::inherits
[17:47:19.769]                       invokeRestart <- base::invokeRestart
[17:47:19.769]                       is.null <- base::is.null
[17:47:19.769]                       muffled <- FALSE
[17:47:19.769]                       if (inherits(cond, "message")) {
[17:47:19.769]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.769]                         if (muffled) 
[17:47:19.769]                           invokeRestart("muffleMessage")
[17:47:19.769]                       }
[17:47:19.769]                       else if (inherits(cond, "warning")) {
[17:47:19.769]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.769]                         if (muffled) 
[17:47:19.769]                           invokeRestart("muffleWarning")
[17:47:19.769]                       }
[17:47:19.769]                       else if (inherits(cond, "condition")) {
[17:47:19.769]                         if (!is.null(pattern)) {
[17:47:19.769]                           computeRestarts <- base::computeRestarts
[17:47:19.769]                           grepl <- base::grepl
[17:47:19.769]                           restarts <- computeRestarts(cond)
[17:47:19.769]                           for (restart in restarts) {
[17:47:19.769]                             name <- restart$name
[17:47:19.769]                             if (is.null(name)) 
[17:47:19.769]                               next
[17:47:19.769]                             if (!grepl(pattern, name)) 
[17:47:19.769]                               next
[17:47:19.769]                             invokeRestart(restart)
[17:47:19.769]                             muffled <- TRUE
[17:47:19.769]                             break
[17:47:19.769]                           }
[17:47:19.769]                         }
[17:47:19.769]                       }
[17:47:19.769]                       invisible(muffled)
[17:47:19.769]                     }
[17:47:19.769]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.769]                   }
[17:47:19.769]                 }
[17:47:19.769]                 else {
[17:47:19.769]                   if (TRUE) {
[17:47:19.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.769]                     {
[17:47:19.769]                       inherits <- base::inherits
[17:47:19.769]                       invokeRestart <- base::invokeRestart
[17:47:19.769]                       is.null <- base::is.null
[17:47:19.769]                       muffled <- FALSE
[17:47:19.769]                       if (inherits(cond, "message")) {
[17:47:19.769]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.769]                         if (muffled) 
[17:47:19.769]                           invokeRestart("muffleMessage")
[17:47:19.769]                       }
[17:47:19.769]                       else if (inherits(cond, "warning")) {
[17:47:19.769]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.769]                         if (muffled) 
[17:47:19.769]                           invokeRestart("muffleWarning")
[17:47:19.769]                       }
[17:47:19.769]                       else if (inherits(cond, "condition")) {
[17:47:19.769]                         if (!is.null(pattern)) {
[17:47:19.769]                           computeRestarts <- base::computeRestarts
[17:47:19.769]                           grepl <- base::grepl
[17:47:19.769]                           restarts <- computeRestarts(cond)
[17:47:19.769]                           for (restart in restarts) {
[17:47:19.769]                             name <- restart$name
[17:47:19.769]                             if (is.null(name)) 
[17:47:19.769]                               next
[17:47:19.769]                             if (!grepl(pattern, name)) 
[17:47:19.769]                               next
[17:47:19.769]                             invokeRestart(restart)
[17:47:19.769]                             muffled <- TRUE
[17:47:19.769]                             break
[17:47:19.769]                           }
[17:47:19.769]                         }
[17:47:19.769]                       }
[17:47:19.769]                       invisible(muffled)
[17:47:19.769]                     }
[17:47:19.769]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.769]                   }
[17:47:19.769]                 }
[17:47:19.769]             }
[17:47:19.769]         }))
[17:47:19.769]     }, error = function(ex) {
[17:47:19.769]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.769]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.769]                 ...future.rng), started = ...future.startTime, 
[17:47:19.769]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.769]             version = "1.8"), class = "FutureResult")
[17:47:19.769]     }, finally = {
[17:47:19.769]         if (!identical(...future.workdir, getwd())) 
[17:47:19.769]             setwd(...future.workdir)
[17:47:19.769]         {
[17:47:19.769]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.769]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.769]             }
[17:47:19.769]             base::options(...future.oldOptions)
[17:47:19.769]             if (.Platform$OS.type == "windows") {
[17:47:19.769]                 old_names <- names(...future.oldEnvVars)
[17:47:19.769]                 envs <- base::Sys.getenv()
[17:47:19.769]                 names <- names(envs)
[17:47:19.769]                 common <- intersect(names, old_names)
[17:47:19.769]                 added <- setdiff(names, old_names)
[17:47:19.769]                 removed <- setdiff(old_names, names)
[17:47:19.769]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.769]                   envs[common]]
[17:47:19.769]                 NAMES <- toupper(changed)
[17:47:19.769]                 args <- list()
[17:47:19.769]                 for (kk in seq_along(NAMES)) {
[17:47:19.769]                   name <- changed[[kk]]
[17:47:19.769]                   NAME <- NAMES[[kk]]
[17:47:19.769]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.769]                     next
[17:47:19.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.769]                 }
[17:47:19.769]                 NAMES <- toupper(added)
[17:47:19.769]                 for (kk in seq_along(NAMES)) {
[17:47:19.769]                   name <- added[[kk]]
[17:47:19.769]                   NAME <- NAMES[[kk]]
[17:47:19.769]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.769]                     next
[17:47:19.769]                   args[[name]] <- ""
[17:47:19.769]                 }
[17:47:19.769]                 NAMES <- toupper(removed)
[17:47:19.769]                 for (kk in seq_along(NAMES)) {
[17:47:19.769]                   name <- removed[[kk]]
[17:47:19.769]                   NAME <- NAMES[[kk]]
[17:47:19.769]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.769]                     next
[17:47:19.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.769]                 }
[17:47:19.769]                 if (length(args) > 0) 
[17:47:19.769]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.769]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.769]             }
[17:47:19.769]             else {
[17:47:19.769]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.769]             }
[17:47:19.769]             {
[17:47:19.769]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.769]                   0L) {
[17:47:19.769]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.769]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.769]                   base::options(opts)
[17:47:19.769]                 }
[17:47:19.769]                 {
[17:47:19.769]                   {
[17:47:19.769]                     NULL
[17:47:19.769]                     RNGkind("Mersenne-Twister")
[17:47:19.769]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.769]                       inherits = FALSE)
[17:47:19.769]                   }
[17:47:19.769]                   options(future.plan = NULL)
[17:47:19.769]                   if (is.na(NA_character_)) 
[17:47:19.769]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.769]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.769]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.769]                     .init = FALSE)
[17:47:19.769]                 }
[17:47:19.769]             }
[17:47:19.769]         }
[17:47:19.769]     })
[17:47:19.769]     if (TRUE) {
[17:47:19.769]         base::sink(type = "output", split = FALSE)
[17:47:19.769]         if (TRUE) {
[17:47:19.769]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.769]         }
[17:47:19.769]         else {
[17:47:19.769]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.769]         }
[17:47:19.769]         base::close(...future.stdout)
[17:47:19.769]         ...future.stdout <- NULL
[17:47:19.769]     }
[17:47:19.769]     ...future.result$conditions <- ...future.conditions
[17:47:19.769]     ...future.result$finished <- base::Sys.time()
[17:47:19.769]     ...future.result
[17:47:19.769] }
[17:47:19.770] plan(): Setting new future strategy stack:
[17:47:19.770] List of future strategies:
[17:47:19.770] 1. sequential:
[17:47:19.770]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.770]    - tweaked: FALSE
[17:47:19.770]    - call: NULL
[17:47:19.772] plan(): nbrOfWorkers() = 1
[17:47:19.773] plan(): Setting new future strategy stack:
[17:47:19.773] List of future strategies:
[17:47:19.773] 1. sequential:
[17:47:19.773]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.773]    - tweaked: FALSE
[17:47:19.773]    - call: future::plan("sequential")
[17:47:19.774] plan(): nbrOfWorkers() = 1
[17:47:19.774] SequentialFuture started (and completed)
[17:47:19.774] - Launch lazy future ... done
[17:47:19.774] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[17:47:19.778] getGlobalsAndPackages() ...
[17:47:19.778] Searching for globals...
[17:47:19.779] - globals found: [2] ‘{’, ‘stop’
[17:47:19.779] Searching for globals ... DONE
[17:47:19.779] Resolving globals: FALSE
[17:47:19.780] 
[17:47:19.780] 
[17:47:19.780] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:19.780] Packages needed by the future expression (n = 0): <none>
[17:47:19.781] Packages needed by future strategies (n = 0): <none>
[17:47:19.781] {
[17:47:19.781]     {
[17:47:19.781]         {
[17:47:19.781]             ...future.startTime <- base::Sys.time()
[17:47:19.781]             {
[17:47:19.781]                 {
[17:47:19.781]                   {
[17:47:19.781]                     base::local({
[17:47:19.781]                       has_future <- base::requireNamespace("future", 
[17:47:19.781]                         quietly = TRUE)
[17:47:19.781]                       if (has_future) {
[17:47:19.781]                         ns <- base::getNamespace("future")
[17:47:19.781]                         version <- ns[[".package"]][["version"]]
[17:47:19.781]                         if (is.null(version)) 
[17:47:19.781]                           version <- utils::packageVersion("future")
[17:47:19.781]                       }
[17:47:19.781]                       else {
[17:47:19.781]                         version <- NULL
[17:47:19.781]                       }
[17:47:19.781]                       if (!has_future || version < "1.8.0") {
[17:47:19.781]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.781]                           "", base::R.version$version.string), 
[17:47:19.781]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.781]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.781]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.781]                             "release", "version")], collapse = " "), 
[17:47:19.781]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.781]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.781]                           info)
[17:47:19.781]                         info <- base::paste(info, collapse = "; ")
[17:47:19.781]                         if (!has_future) {
[17:47:19.781]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.781]                             info)
[17:47:19.781]                         }
[17:47:19.781]                         else {
[17:47:19.781]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.781]                             info, version)
[17:47:19.781]                         }
[17:47:19.781]                         base::stop(msg)
[17:47:19.781]                       }
[17:47:19.781]                     })
[17:47:19.781]                   }
[17:47:19.781]                   ...future.strategy.old <- future::plan("list")
[17:47:19.781]                   options(future.plan = NULL)
[17:47:19.781]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.781]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.781]                 }
[17:47:19.781]                 ...future.workdir <- getwd()
[17:47:19.781]             }
[17:47:19.781]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.781]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.781]         }
[17:47:19.781]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.781]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.781]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.781]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.781]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.781]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.781]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.781]             base::names(...future.oldOptions))
[17:47:19.781]     }
[17:47:19.781]     if (FALSE) {
[17:47:19.781]     }
[17:47:19.781]     else {
[17:47:19.781]         if (TRUE) {
[17:47:19.781]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.781]                 open = "w")
[17:47:19.781]         }
[17:47:19.781]         else {
[17:47:19.781]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.781]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.781]         }
[17:47:19.781]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.781]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.781]             base::sink(type = "output", split = FALSE)
[17:47:19.781]             base::close(...future.stdout)
[17:47:19.781]         }, add = TRUE)
[17:47:19.781]     }
[17:47:19.781]     ...future.frame <- base::sys.nframe()
[17:47:19.781]     ...future.conditions <- base::list()
[17:47:19.781]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.781]     if (FALSE) {
[17:47:19.781]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.781]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.781]     }
[17:47:19.781]     ...future.result <- base::tryCatch({
[17:47:19.781]         base::withCallingHandlers({
[17:47:19.781]             ...future.value <- base::withVisible(base::local({
[17:47:19.781]                 stop("Whoops!")
[17:47:19.781]                 1
[17:47:19.781]             }))
[17:47:19.781]             future::FutureResult(value = ...future.value$value, 
[17:47:19.781]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.781]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.781]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.781]                     ...future.globalenv.names))
[17:47:19.781]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.781]         }, condition = base::local({
[17:47:19.781]             c <- base::c
[17:47:19.781]             inherits <- base::inherits
[17:47:19.781]             invokeRestart <- base::invokeRestart
[17:47:19.781]             length <- base::length
[17:47:19.781]             list <- base::list
[17:47:19.781]             seq.int <- base::seq.int
[17:47:19.781]             signalCondition <- base::signalCondition
[17:47:19.781]             sys.calls <- base::sys.calls
[17:47:19.781]             `[[` <- base::`[[`
[17:47:19.781]             `+` <- base::`+`
[17:47:19.781]             `<<-` <- base::`<<-`
[17:47:19.781]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.781]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.781]                   3L)]
[17:47:19.781]             }
[17:47:19.781]             function(cond) {
[17:47:19.781]                 is_error <- inherits(cond, "error")
[17:47:19.781]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.781]                   NULL)
[17:47:19.781]                 if (is_error) {
[17:47:19.781]                   sessionInformation <- function() {
[17:47:19.781]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.781]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.781]                       search = base::search(), system = base::Sys.info())
[17:47:19.781]                   }
[17:47:19.781]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.781]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.781]                     cond$call), session = sessionInformation(), 
[17:47:19.781]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.781]                   signalCondition(cond)
[17:47:19.781]                 }
[17:47:19.781]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.781]                 "immediateCondition"))) {
[17:47:19.781]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.781]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.781]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.781]                   if (TRUE && !signal) {
[17:47:19.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.781]                     {
[17:47:19.781]                       inherits <- base::inherits
[17:47:19.781]                       invokeRestart <- base::invokeRestart
[17:47:19.781]                       is.null <- base::is.null
[17:47:19.781]                       muffled <- FALSE
[17:47:19.781]                       if (inherits(cond, "message")) {
[17:47:19.781]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.781]                         if (muffled) 
[17:47:19.781]                           invokeRestart("muffleMessage")
[17:47:19.781]                       }
[17:47:19.781]                       else if (inherits(cond, "warning")) {
[17:47:19.781]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.781]                         if (muffled) 
[17:47:19.781]                           invokeRestart("muffleWarning")
[17:47:19.781]                       }
[17:47:19.781]                       else if (inherits(cond, "condition")) {
[17:47:19.781]                         if (!is.null(pattern)) {
[17:47:19.781]                           computeRestarts <- base::computeRestarts
[17:47:19.781]                           grepl <- base::grepl
[17:47:19.781]                           restarts <- computeRestarts(cond)
[17:47:19.781]                           for (restart in restarts) {
[17:47:19.781]                             name <- restart$name
[17:47:19.781]                             if (is.null(name)) 
[17:47:19.781]                               next
[17:47:19.781]                             if (!grepl(pattern, name)) 
[17:47:19.781]                               next
[17:47:19.781]                             invokeRestart(restart)
[17:47:19.781]                             muffled <- TRUE
[17:47:19.781]                             break
[17:47:19.781]                           }
[17:47:19.781]                         }
[17:47:19.781]                       }
[17:47:19.781]                       invisible(muffled)
[17:47:19.781]                     }
[17:47:19.781]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.781]                   }
[17:47:19.781]                 }
[17:47:19.781]                 else {
[17:47:19.781]                   if (TRUE) {
[17:47:19.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.781]                     {
[17:47:19.781]                       inherits <- base::inherits
[17:47:19.781]                       invokeRestart <- base::invokeRestart
[17:47:19.781]                       is.null <- base::is.null
[17:47:19.781]                       muffled <- FALSE
[17:47:19.781]                       if (inherits(cond, "message")) {
[17:47:19.781]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.781]                         if (muffled) 
[17:47:19.781]                           invokeRestart("muffleMessage")
[17:47:19.781]                       }
[17:47:19.781]                       else if (inherits(cond, "warning")) {
[17:47:19.781]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.781]                         if (muffled) 
[17:47:19.781]                           invokeRestart("muffleWarning")
[17:47:19.781]                       }
[17:47:19.781]                       else if (inherits(cond, "condition")) {
[17:47:19.781]                         if (!is.null(pattern)) {
[17:47:19.781]                           computeRestarts <- base::computeRestarts
[17:47:19.781]                           grepl <- base::grepl
[17:47:19.781]                           restarts <- computeRestarts(cond)
[17:47:19.781]                           for (restart in restarts) {
[17:47:19.781]                             name <- restart$name
[17:47:19.781]                             if (is.null(name)) 
[17:47:19.781]                               next
[17:47:19.781]                             if (!grepl(pattern, name)) 
[17:47:19.781]                               next
[17:47:19.781]                             invokeRestart(restart)
[17:47:19.781]                             muffled <- TRUE
[17:47:19.781]                             break
[17:47:19.781]                           }
[17:47:19.781]                         }
[17:47:19.781]                       }
[17:47:19.781]                       invisible(muffled)
[17:47:19.781]                     }
[17:47:19.781]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.781]                   }
[17:47:19.781]                 }
[17:47:19.781]             }
[17:47:19.781]         }))
[17:47:19.781]     }, error = function(ex) {
[17:47:19.781]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.781]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.781]                 ...future.rng), started = ...future.startTime, 
[17:47:19.781]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.781]             version = "1.8"), class = "FutureResult")
[17:47:19.781]     }, finally = {
[17:47:19.781]         if (!identical(...future.workdir, getwd())) 
[17:47:19.781]             setwd(...future.workdir)
[17:47:19.781]         {
[17:47:19.781]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.781]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.781]             }
[17:47:19.781]             base::options(...future.oldOptions)
[17:47:19.781]             if (.Platform$OS.type == "windows") {
[17:47:19.781]                 old_names <- names(...future.oldEnvVars)
[17:47:19.781]                 envs <- base::Sys.getenv()
[17:47:19.781]                 names <- names(envs)
[17:47:19.781]                 common <- intersect(names, old_names)
[17:47:19.781]                 added <- setdiff(names, old_names)
[17:47:19.781]                 removed <- setdiff(old_names, names)
[17:47:19.781]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.781]                   envs[common]]
[17:47:19.781]                 NAMES <- toupper(changed)
[17:47:19.781]                 args <- list()
[17:47:19.781]                 for (kk in seq_along(NAMES)) {
[17:47:19.781]                   name <- changed[[kk]]
[17:47:19.781]                   NAME <- NAMES[[kk]]
[17:47:19.781]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.781]                     next
[17:47:19.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.781]                 }
[17:47:19.781]                 NAMES <- toupper(added)
[17:47:19.781]                 for (kk in seq_along(NAMES)) {
[17:47:19.781]                   name <- added[[kk]]
[17:47:19.781]                   NAME <- NAMES[[kk]]
[17:47:19.781]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.781]                     next
[17:47:19.781]                   args[[name]] <- ""
[17:47:19.781]                 }
[17:47:19.781]                 NAMES <- toupper(removed)
[17:47:19.781]                 for (kk in seq_along(NAMES)) {
[17:47:19.781]                   name <- removed[[kk]]
[17:47:19.781]                   NAME <- NAMES[[kk]]
[17:47:19.781]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.781]                     next
[17:47:19.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.781]                 }
[17:47:19.781]                 if (length(args) > 0) 
[17:47:19.781]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.781]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.781]             }
[17:47:19.781]             else {
[17:47:19.781]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.781]             }
[17:47:19.781]             {
[17:47:19.781]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.781]                   0L) {
[17:47:19.781]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.781]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.781]                   base::options(opts)
[17:47:19.781]                 }
[17:47:19.781]                 {
[17:47:19.781]                   {
[17:47:19.781]                     NULL
[17:47:19.781]                     RNGkind("Mersenne-Twister")
[17:47:19.781]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.781]                       inherits = FALSE)
[17:47:19.781]                   }
[17:47:19.781]                   options(future.plan = NULL)
[17:47:19.781]                   if (is.na(NA_character_)) 
[17:47:19.781]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.781]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.781]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.781]                     .init = FALSE)
[17:47:19.781]                 }
[17:47:19.781]             }
[17:47:19.781]         }
[17:47:19.781]     })
[17:47:19.781]     if (TRUE) {
[17:47:19.781]         base::sink(type = "output", split = FALSE)
[17:47:19.781]         if (TRUE) {
[17:47:19.781]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.781]         }
[17:47:19.781]         else {
[17:47:19.781]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.781]         }
[17:47:19.781]         base::close(...future.stdout)
[17:47:19.781]         ...future.stdout <- NULL
[17:47:19.781]     }
[17:47:19.781]     ...future.result$conditions <- ...future.conditions
[17:47:19.781]     ...future.result$finished <- base::Sys.time()
[17:47:19.781]     ...future.result
[17:47:19.781] }
[17:47:19.783] plan(): Setting new future strategy stack:
[17:47:19.783] List of future strategies:
[17:47:19.783] 1. sequential:
[17:47:19.783]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.783]    - tweaked: FALSE
[17:47:19.783]    - call: NULL
[17:47:19.783] plan(): nbrOfWorkers() = 1
[17:47:19.784] plan(): Setting new future strategy stack:
[17:47:19.784] List of future strategies:
[17:47:19.784] 1. sequential:
[17:47:19.784]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.784]    - tweaked: FALSE
[17:47:19.784]    - call: future::plan("sequential")
[17:47:19.785] plan(): nbrOfWorkers() = 1
[17:47:19.785] SequentialFuture started (and completed)
[17:47:19.785] signalConditions() ...
[17:47:19.785]  - include = ‘immediateCondition’
[17:47:19.785]  - exclude = 
[17:47:19.785]  - resignal = FALSE
[17:47:19.785]  - Number of conditions: 1
[17:47:19.785] signalConditions() ... done
[17:47:19.785] signalConditions() ...
[17:47:19.786]  - include = ‘immediateCondition’
[17:47:19.786]  - exclude = 
[17:47:19.786]  - resignal = FALSE
[17:47:19.786]  - Number of conditions: 1
[17:47:19.786] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:19.786] signalConditions() ...
[17:47:19.786]  - include = ‘immediateCondition’
[17:47:19.786]  - exclude = 
[17:47:19.786]  - resignal = FALSE
[17:47:19.787]  - Number of conditions: 1
[17:47:19.787] signalConditions() ... done
[17:47:19.787] Future state: ‘finished’
[17:47:19.787] signalConditions() ...
[17:47:19.787]  - include = ‘condition’
[17:47:19.787]  - exclude = ‘immediateCondition’
[17:47:19.787]  - resignal = TRUE
[17:47:19.787]  - Number of conditions: 1
[17:47:19.787]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:19.787] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:19.788] signalConditions() ...
[17:47:19.788]  - include = ‘immediateCondition’
[17:47:19.788]  - exclude = 
[17:47:19.788]  - resignal = FALSE
[17:47:19.788]  - Number of conditions: 1
[17:47:19.788] signalConditions() ... done
[17:47:19.788] Future state: ‘finished’
[17:47:19.788] signalConditions() ...
[17:47:19.789]  - include = ‘condition’
[17:47:19.789]  - exclude = ‘immediateCondition’
[17:47:19.789]  - resignal = TRUE
[17:47:19.789]  - Number of conditions: 1
[17:47:19.789]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:19.789] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:19.792] getGlobalsAndPackages() ...
[17:47:19.792] Searching for globals...
[17:47:19.794] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:47:19.794] Searching for globals ... DONE
[17:47:19.794] Resolving globals: FALSE
[17:47:19.794] 
[17:47:19.794] 
[17:47:19.794] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:19.795] Packages needed by the future expression (n = 0): <none>
[17:47:19.795] Packages needed by future strategies (n = 0): <none>
[17:47:19.796] {
[17:47:19.796]     {
[17:47:19.796]         {
[17:47:19.796]             ...future.startTime <- base::Sys.time()
[17:47:19.796]             {
[17:47:19.796]                 {
[17:47:19.796]                   {
[17:47:19.796]                     base::local({
[17:47:19.796]                       has_future <- base::requireNamespace("future", 
[17:47:19.796]                         quietly = TRUE)
[17:47:19.796]                       if (has_future) {
[17:47:19.796]                         ns <- base::getNamespace("future")
[17:47:19.796]                         version <- ns[[".package"]][["version"]]
[17:47:19.796]                         if (is.null(version)) 
[17:47:19.796]                           version <- utils::packageVersion("future")
[17:47:19.796]                       }
[17:47:19.796]                       else {
[17:47:19.796]                         version <- NULL
[17:47:19.796]                       }
[17:47:19.796]                       if (!has_future || version < "1.8.0") {
[17:47:19.796]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.796]                           "", base::R.version$version.string), 
[17:47:19.796]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.796]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.796]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.796]                             "release", "version")], collapse = " "), 
[17:47:19.796]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.796]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.796]                           info)
[17:47:19.796]                         info <- base::paste(info, collapse = "; ")
[17:47:19.796]                         if (!has_future) {
[17:47:19.796]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.796]                             info)
[17:47:19.796]                         }
[17:47:19.796]                         else {
[17:47:19.796]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.796]                             info, version)
[17:47:19.796]                         }
[17:47:19.796]                         base::stop(msg)
[17:47:19.796]                       }
[17:47:19.796]                     })
[17:47:19.796]                   }
[17:47:19.796]                   ...future.strategy.old <- future::plan("list")
[17:47:19.796]                   options(future.plan = NULL)
[17:47:19.796]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.796]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.796]                 }
[17:47:19.796]                 ...future.workdir <- getwd()
[17:47:19.796]             }
[17:47:19.796]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.796]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.796]         }
[17:47:19.796]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.796]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.796]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.796]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.796]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.796]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.796]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.796]             base::names(...future.oldOptions))
[17:47:19.796]     }
[17:47:19.796]     if (FALSE) {
[17:47:19.796]     }
[17:47:19.796]     else {
[17:47:19.796]         if (TRUE) {
[17:47:19.796]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.796]                 open = "w")
[17:47:19.796]         }
[17:47:19.796]         else {
[17:47:19.796]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.796]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.796]         }
[17:47:19.796]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.796]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.796]             base::sink(type = "output", split = FALSE)
[17:47:19.796]             base::close(...future.stdout)
[17:47:19.796]         }, add = TRUE)
[17:47:19.796]     }
[17:47:19.796]     ...future.frame <- base::sys.nframe()
[17:47:19.796]     ...future.conditions <- base::list()
[17:47:19.796]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.796]     if (FALSE) {
[17:47:19.796]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.796]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.796]     }
[17:47:19.796]     ...future.result <- base::tryCatch({
[17:47:19.796]         base::withCallingHandlers({
[17:47:19.796]             ...future.value <- base::withVisible(base::local({
[17:47:19.796]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:47:19.796]                   "error", "condition")))
[17:47:19.796]             }))
[17:47:19.796]             future::FutureResult(value = ...future.value$value, 
[17:47:19.796]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.796]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.796]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.796]                     ...future.globalenv.names))
[17:47:19.796]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.796]         }, condition = base::local({
[17:47:19.796]             c <- base::c
[17:47:19.796]             inherits <- base::inherits
[17:47:19.796]             invokeRestart <- base::invokeRestart
[17:47:19.796]             length <- base::length
[17:47:19.796]             list <- base::list
[17:47:19.796]             seq.int <- base::seq.int
[17:47:19.796]             signalCondition <- base::signalCondition
[17:47:19.796]             sys.calls <- base::sys.calls
[17:47:19.796]             `[[` <- base::`[[`
[17:47:19.796]             `+` <- base::`+`
[17:47:19.796]             `<<-` <- base::`<<-`
[17:47:19.796]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.796]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.796]                   3L)]
[17:47:19.796]             }
[17:47:19.796]             function(cond) {
[17:47:19.796]                 is_error <- inherits(cond, "error")
[17:47:19.796]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.796]                   NULL)
[17:47:19.796]                 if (is_error) {
[17:47:19.796]                   sessionInformation <- function() {
[17:47:19.796]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.796]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.796]                       search = base::search(), system = base::Sys.info())
[17:47:19.796]                   }
[17:47:19.796]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.796]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.796]                     cond$call), session = sessionInformation(), 
[17:47:19.796]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.796]                   signalCondition(cond)
[17:47:19.796]                 }
[17:47:19.796]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.796]                 "immediateCondition"))) {
[17:47:19.796]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.796]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.796]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.796]                   if (TRUE && !signal) {
[17:47:19.796]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.796]                     {
[17:47:19.796]                       inherits <- base::inherits
[17:47:19.796]                       invokeRestart <- base::invokeRestart
[17:47:19.796]                       is.null <- base::is.null
[17:47:19.796]                       muffled <- FALSE
[17:47:19.796]                       if (inherits(cond, "message")) {
[17:47:19.796]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.796]                         if (muffled) 
[17:47:19.796]                           invokeRestart("muffleMessage")
[17:47:19.796]                       }
[17:47:19.796]                       else if (inherits(cond, "warning")) {
[17:47:19.796]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.796]                         if (muffled) 
[17:47:19.796]                           invokeRestart("muffleWarning")
[17:47:19.796]                       }
[17:47:19.796]                       else if (inherits(cond, "condition")) {
[17:47:19.796]                         if (!is.null(pattern)) {
[17:47:19.796]                           computeRestarts <- base::computeRestarts
[17:47:19.796]                           grepl <- base::grepl
[17:47:19.796]                           restarts <- computeRestarts(cond)
[17:47:19.796]                           for (restart in restarts) {
[17:47:19.796]                             name <- restart$name
[17:47:19.796]                             if (is.null(name)) 
[17:47:19.796]                               next
[17:47:19.796]                             if (!grepl(pattern, name)) 
[17:47:19.796]                               next
[17:47:19.796]                             invokeRestart(restart)
[17:47:19.796]                             muffled <- TRUE
[17:47:19.796]                             break
[17:47:19.796]                           }
[17:47:19.796]                         }
[17:47:19.796]                       }
[17:47:19.796]                       invisible(muffled)
[17:47:19.796]                     }
[17:47:19.796]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.796]                   }
[17:47:19.796]                 }
[17:47:19.796]                 else {
[17:47:19.796]                   if (TRUE) {
[17:47:19.796]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.796]                     {
[17:47:19.796]                       inherits <- base::inherits
[17:47:19.796]                       invokeRestart <- base::invokeRestart
[17:47:19.796]                       is.null <- base::is.null
[17:47:19.796]                       muffled <- FALSE
[17:47:19.796]                       if (inherits(cond, "message")) {
[17:47:19.796]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.796]                         if (muffled) 
[17:47:19.796]                           invokeRestart("muffleMessage")
[17:47:19.796]                       }
[17:47:19.796]                       else if (inherits(cond, "warning")) {
[17:47:19.796]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.796]                         if (muffled) 
[17:47:19.796]                           invokeRestart("muffleWarning")
[17:47:19.796]                       }
[17:47:19.796]                       else if (inherits(cond, "condition")) {
[17:47:19.796]                         if (!is.null(pattern)) {
[17:47:19.796]                           computeRestarts <- base::computeRestarts
[17:47:19.796]                           grepl <- base::grepl
[17:47:19.796]                           restarts <- computeRestarts(cond)
[17:47:19.796]                           for (restart in restarts) {
[17:47:19.796]                             name <- restart$name
[17:47:19.796]                             if (is.null(name)) 
[17:47:19.796]                               next
[17:47:19.796]                             if (!grepl(pattern, name)) 
[17:47:19.796]                               next
[17:47:19.796]                             invokeRestart(restart)
[17:47:19.796]                             muffled <- TRUE
[17:47:19.796]                             break
[17:47:19.796]                           }
[17:47:19.796]                         }
[17:47:19.796]                       }
[17:47:19.796]                       invisible(muffled)
[17:47:19.796]                     }
[17:47:19.796]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.796]                   }
[17:47:19.796]                 }
[17:47:19.796]             }
[17:47:19.796]         }))
[17:47:19.796]     }, error = function(ex) {
[17:47:19.796]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.796]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.796]                 ...future.rng), started = ...future.startTime, 
[17:47:19.796]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.796]             version = "1.8"), class = "FutureResult")
[17:47:19.796]     }, finally = {
[17:47:19.796]         if (!identical(...future.workdir, getwd())) 
[17:47:19.796]             setwd(...future.workdir)
[17:47:19.796]         {
[17:47:19.796]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.796]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.796]             }
[17:47:19.796]             base::options(...future.oldOptions)
[17:47:19.796]             if (.Platform$OS.type == "windows") {
[17:47:19.796]                 old_names <- names(...future.oldEnvVars)
[17:47:19.796]                 envs <- base::Sys.getenv()
[17:47:19.796]                 names <- names(envs)
[17:47:19.796]                 common <- intersect(names, old_names)
[17:47:19.796]                 added <- setdiff(names, old_names)
[17:47:19.796]                 removed <- setdiff(old_names, names)
[17:47:19.796]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.796]                   envs[common]]
[17:47:19.796]                 NAMES <- toupper(changed)
[17:47:19.796]                 args <- list()
[17:47:19.796]                 for (kk in seq_along(NAMES)) {
[17:47:19.796]                   name <- changed[[kk]]
[17:47:19.796]                   NAME <- NAMES[[kk]]
[17:47:19.796]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.796]                     next
[17:47:19.796]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.796]                 }
[17:47:19.796]                 NAMES <- toupper(added)
[17:47:19.796]                 for (kk in seq_along(NAMES)) {
[17:47:19.796]                   name <- added[[kk]]
[17:47:19.796]                   NAME <- NAMES[[kk]]
[17:47:19.796]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.796]                     next
[17:47:19.796]                   args[[name]] <- ""
[17:47:19.796]                 }
[17:47:19.796]                 NAMES <- toupper(removed)
[17:47:19.796]                 for (kk in seq_along(NAMES)) {
[17:47:19.796]                   name <- removed[[kk]]
[17:47:19.796]                   NAME <- NAMES[[kk]]
[17:47:19.796]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.796]                     next
[17:47:19.796]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.796]                 }
[17:47:19.796]                 if (length(args) > 0) 
[17:47:19.796]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.796]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.796]             }
[17:47:19.796]             else {
[17:47:19.796]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.796]             }
[17:47:19.796]             {
[17:47:19.796]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.796]                   0L) {
[17:47:19.796]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.796]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.796]                   base::options(opts)
[17:47:19.796]                 }
[17:47:19.796]                 {
[17:47:19.796]                   {
[17:47:19.796]                     NULL
[17:47:19.796]                     RNGkind("Mersenne-Twister")
[17:47:19.796]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.796]                       inherits = FALSE)
[17:47:19.796]                   }
[17:47:19.796]                   options(future.plan = NULL)
[17:47:19.796]                   if (is.na(NA_character_)) 
[17:47:19.796]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.796]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.796]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.796]                     .init = FALSE)
[17:47:19.796]                 }
[17:47:19.796]             }
[17:47:19.796]         }
[17:47:19.796]     })
[17:47:19.796]     if (TRUE) {
[17:47:19.796]         base::sink(type = "output", split = FALSE)
[17:47:19.796]         if (TRUE) {
[17:47:19.796]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.796]         }
[17:47:19.796]         else {
[17:47:19.796]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.796]         }
[17:47:19.796]         base::close(...future.stdout)
[17:47:19.796]         ...future.stdout <- NULL
[17:47:19.796]     }
[17:47:19.796]     ...future.result$conditions <- ...future.conditions
[17:47:19.796]     ...future.result$finished <- base::Sys.time()
[17:47:19.796]     ...future.result
[17:47:19.796] }
[17:47:19.797] plan(): Setting new future strategy stack:
[17:47:19.797] List of future strategies:
[17:47:19.797] 1. sequential:
[17:47:19.797]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.797]    - tweaked: FALSE
[17:47:19.797]    - call: NULL
[17:47:19.798] plan(): nbrOfWorkers() = 1
[17:47:19.799] plan(): Setting new future strategy stack:
[17:47:19.799] List of future strategies:
[17:47:19.799] 1. sequential:
[17:47:19.799]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.799]    - tweaked: FALSE
[17:47:19.799]    - call: future::plan("sequential")
[17:47:19.799] plan(): nbrOfWorkers() = 1
[17:47:19.799] SequentialFuture started (and completed)
[17:47:19.799] signalConditions() ...
[17:47:19.800]  - include = ‘immediateCondition’
[17:47:19.800]  - exclude = 
[17:47:19.800]  - resignal = FALSE
[17:47:19.800]  - Number of conditions: 1
[17:47:19.800] signalConditions() ... done
[17:47:19.800] signalConditions() ...
[17:47:19.800]  - include = ‘immediateCondition’
[17:47:19.800]  - exclude = 
[17:47:19.800]  - resignal = FALSE
[17:47:19.800]  - Number of conditions: 1
[17:47:19.800] signalConditions() ... done
<MyError: boom>
[17:47:19.801] signalConditions() ...
[17:47:19.801]  - include = ‘immediateCondition’
[17:47:19.801]  - exclude = 
[17:47:19.801]  - resignal = FALSE
[17:47:19.801]  - Number of conditions: 1
[17:47:19.801] signalConditions() ... done
[17:47:19.801] Future state: ‘finished’
[17:47:19.801] signalConditions() ...
[17:47:19.801]  - include = ‘condition’
[17:47:19.801]  - exclude = ‘immediateCondition’
[17:47:19.802]  - resignal = TRUE
[17:47:19.802]  - Number of conditions: 1
[17:47:19.802]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:47:19.802] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[17:47:19.807] getGlobalsAndPackages() ...
[17:47:19.807] 
[17:47:19.808] - globals: [0] <none>
[17:47:19.808] getGlobalsAndPackages() ... DONE
[17:47:19.808] [local output] makeClusterPSOCK() ...
[17:47:19.849] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:19.850] [local output] Base port: 11460
[17:47:19.850] [local output] Getting setup options for 2 cluster nodes ...
[17:47:19.850] [local output]  - Node 1 of 2 ...
[17:47:19.851] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:19.852] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b2473cd4fb8c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b2473cd4fb8c.pid")'’
[17:47:20.046] - Possible to infer worker's PID: TRUE
[17:47:20.046] [local output] Rscript port: 11460

[17:47:20.047] [local output]  - Node 2 of 2 ...
[17:47:20.047] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:20.048] [local output] Rscript port: 11460

[17:47:20.048] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:20.048] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:20.049] [local output] Setting up PSOCK nodes in parallel
[17:47:20.049] List of 36
[17:47:20.049]  $ worker          : chr "localhost"
[17:47:20.049]   ..- attr(*, "localhost")= logi TRUE
[17:47:20.049]  $ master          : chr "localhost"
[17:47:20.049]  $ port            : int 11460
[17:47:20.049]  $ connectTimeout  : num 120
[17:47:20.049]  $ timeout         : num 2592000
[17:47:20.049]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:20.049]  $ homogeneous     : logi TRUE
[17:47:20.049]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:20.049]  $ rscript_envs    : NULL
[17:47:20.049]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:20.049]  $ rscript_startup : NULL
[17:47:20.049]  $ rscript_sh      : chr "sh"
[17:47:20.049]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:20.049]  $ methods         : logi TRUE
[17:47:20.049]  $ socketOptions   : chr "no-delay"
[17:47:20.049]  $ useXDR          : logi FALSE
[17:47:20.049]  $ outfile         : chr "/dev/null"
[17:47:20.049]  $ renice          : int NA
[17:47:20.049]  $ rshcmd          : NULL
[17:47:20.049]  $ user            : chr(0) 
[17:47:20.049]  $ revtunnel       : logi FALSE
[17:47:20.049]  $ rshlogfile      : NULL
[17:47:20.049]  $ rshopts         : chr(0) 
[17:47:20.049]  $ rank            : int 1
[17:47:20.049]  $ manual          : logi FALSE
[17:47:20.049]  $ dryrun          : logi FALSE
[17:47:20.049]  $ quiet           : logi FALSE
[17:47:20.049]  $ setup_strategy  : chr "parallel"
[17:47:20.049]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:20.049]  $ pidfile         : chr "/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b2473cd4fb8c.pid"
[17:47:20.049]  $ rshcmd_label    : NULL
[17:47:20.049]  $ rsh_call        : NULL
[17:47:20.049]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:20.049]  $ localMachine    : logi TRUE
[17:47:20.049]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:20.049]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:20.049]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:20.049]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:20.049]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:20.049]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:20.049]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:20.049]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:20.049]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:20.049]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:20.049]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:20.049]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:20.049]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:20.049]  $ arguments       :List of 28
[17:47:20.049]   ..$ worker          : chr "localhost"
[17:47:20.049]   ..$ master          : NULL
[17:47:20.049]   ..$ port            : int 11460
[17:47:20.049]   ..$ connectTimeout  : num 120
[17:47:20.049]   ..$ timeout         : num 2592000
[17:47:20.049]   ..$ rscript         : NULL
[17:47:20.049]   ..$ homogeneous     : NULL
[17:47:20.049]   ..$ rscript_args    : NULL
[17:47:20.049]   ..$ rscript_envs    : NULL
[17:47:20.049]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:20.049]   ..$ rscript_startup : NULL
[17:47:20.049]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:20.049]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:20.049]   ..$ methods         : logi TRUE
[17:47:20.049]   ..$ socketOptions   : chr "no-delay"
[17:47:20.049]   ..$ useXDR          : logi FALSE
[17:47:20.049]   ..$ outfile         : chr "/dev/null"
[17:47:20.049]   ..$ renice          : int NA
[17:47:20.049]   ..$ rshcmd          : NULL
[17:47:20.049]   ..$ user            : NULL
[17:47:20.049]   ..$ revtunnel       : logi NA
[17:47:20.049]   ..$ rshlogfile      : NULL
[17:47:20.049]   ..$ rshopts         : NULL
[17:47:20.049]   ..$ rank            : int 1
[17:47:20.049]   ..$ manual          : logi FALSE
[17:47:20.049]   ..$ dryrun          : logi FALSE
[17:47:20.049]   ..$ quiet           : logi FALSE
[17:47:20.049]   ..$ setup_strategy  : chr "parallel"
[17:47:20.049]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:20.065] [local output] System call to launch all workers:
[17:47:20.065] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b2473cd4fb8c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11460 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:20.065] [local output] Starting PSOCK main server
[17:47:20.071] [local output] Workers launched
[17:47:20.071] [local output] Waiting for workers to connect back
[17:47:20.071]  - [local output] 0 workers out of 2 ready
[17:47:20.362]  - [local output] 0 workers out of 2 ready
[17:47:20.362]  - [local output] 1 workers out of 2 ready
[17:47:20.365]  - [local output] 1 workers out of 2 ready
[17:47:20.366]  - [local output] 2 workers out of 2 ready
[17:47:20.366] [local output] Launching of workers completed
[17:47:20.366] [local output] Collecting session information from workers
[17:47:20.367] [local output]  - Worker #1 of 2
[17:47:20.367] [local output]  - Worker #2 of 2
[17:47:20.367] [local output] makeClusterPSOCK() ... done
[17:47:20.380] Packages needed by the future expression (n = 0): <none>
[17:47:20.380] Packages needed by future strategies (n = 0): <none>
[17:47:20.380] {
[17:47:20.380]     {
[17:47:20.380]         {
[17:47:20.380]             ...future.startTime <- base::Sys.time()
[17:47:20.380]             {
[17:47:20.380]                 {
[17:47:20.380]                   {
[17:47:20.380]                     {
[17:47:20.380]                       base::local({
[17:47:20.380]                         has_future <- base::requireNamespace("future", 
[17:47:20.380]                           quietly = TRUE)
[17:47:20.380]                         if (has_future) {
[17:47:20.380]                           ns <- base::getNamespace("future")
[17:47:20.380]                           version <- ns[[".package"]][["version"]]
[17:47:20.380]                           if (is.null(version)) 
[17:47:20.380]                             version <- utils::packageVersion("future")
[17:47:20.380]                         }
[17:47:20.380]                         else {
[17:47:20.380]                           version <- NULL
[17:47:20.380]                         }
[17:47:20.380]                         if (!has_future || version < "1.8.0") {
[17:47:20.380]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.380]                             "", base::R.version$version.string), 
[17:47:20.380]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.380]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.380]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.380]                               "release", "version")], collapse = " "), 
[17:47:20.380]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.380]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.380]                             info)
[17:47:20.380]                           info <- base::paste(info, collapse = "; ")
[17:47:20.380]                           if (!has_future) {
[17:47:20.380]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.380]                               info)
[17:47:20.380]                           }
[17:47:20.380]                           else {
[17:47:20.380]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.380]                               info, version)
[17:47:20.380]                           }
[17:47:20.380]                           base::stop(msg)
[17:47:20.380]                         }
[17:47:20.380]                       })
[17:47:20.380]                     }
[17:47:20.380]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.380]                     base::options(mc.cores = 1L)
[17:47:20.380]                   }
[17:47:20.380]                   ...future.strategy.old <- future::plan("list")
[17:47:20.380]                   options(future.plan = NULL)
[17:47:20.380]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.380]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.380]                 }
[17:47:20.380]                 ...future.workdir <- getwd()
[17:47:20.380]             }
[17:47:20.380]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.380]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.380]         }
[17:47:20.380]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.380]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.380]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.380]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.380]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.380]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.380]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.380]             base::names(...future.oldOptions))
[17:47:20.380]     }
[17:47:20.380]     if (FALSE) {
[17:47:20.380]     }
[17:47:20.380]     else {
[17:47:20.380]         if (TRUE) {
[17:47:20.380]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.380]                 open = "w")
[17:47:20.380]         }
[17:47:20.380]         else {
[17:47:20.380]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.380]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.380]         }
[17:47:20.380]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.380]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.380]             base::sink(type = "output", split = FALSE)
[17:47:20.380]             base::close(...future.stdout)
[17:47:20.380]         }, add = TRUE)
[17:47:20.380]     }
[17:47:20.380]     ...future.frame <- base::sys.nframe()
[17:47:20.380]     ...future.conditions <- base::list()
[17:47:20.380]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.380]     if (FALSE) {
[17:47:20.380]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.380]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.380]     }
[17:47:20.380]     ...future.result <- base::tryCatch({
[17:47:20.380]         base::withCallingHandlers({
[17:47:20.380]             ...future.value <- base::withVisible(base::local({
[17:47:20.380]                 ...future.makeSendCondition <- base::local({
[17:47:20.380]                   sendCondition <- NULL
[17:47:20.380]                   function(frame = 1L) {
[17:47:20.380]                     if (is.function(sendCondition)) 
[17:47:20.380]                       return(sendCondition)
[17:47:20.380]                     ns <- getNamespace("parallel")
[17:47:20.380]                     if (exists("sendData", mode = "function", 
[17:47:20.380]                       envir = ns)) {
[17:47:20.380]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.380]                         envir = ns)
[17:47:20.380]                       envir <- sys.frame(frame)
[17:47:20.380]                       master <- NULL
[17:47:20.380]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.380]                         !identical(envir, emptyenv())) {
[17:47:20.380]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.380]                           inherits = FALSE)) {
[17:47:20.380]                           master <- get("master", mode = "list", 
[17:47:20.380]                             envir = envir, inherits = FALSE)
[17:47:20.380]                           if (inherits(master, c("SOCKnode", 
[17:47:20.380]                             "SOCK0node"))) {
[17:47:20.380]                             sendCondition <<- function(cond) {
[17:47:20.380]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.380]                                 success = TRUE)
[17:47:20.380]                               parallel_sendData(master, data)
[17:47:20.380]                             }
[17:47:20.380]                             return(sendCondition)
[17:47:20.380]                           }
[17:47:20.380]                         }
[17:47:20.380]                         frame <- frame + 1L
[17:47:20.380]                         envir <- sys.frame(frame)
[17:47:20.380]                       }
[17:47:20.380]                     }
[17:47:20.380]                     sendCondition <<- function(cond) NULL
[17:47:20.380]                   }
[17:47:20.380]                 })
[17:47:20.380]                 withCallingHandlers({
[17:47:20.380]                   {
[17:47:20.380]                     42L
[17:47:20.380]                   }
[17:47:20.380]                 }, immediateCondition = function(cond) {
[17:47:20.380]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.380]                   sendCondition(cond)
[17:47:20.380]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.380]                   {
[17:47:20.380]                     inherits <- base::inherits
[17:47:20.380]                     invokeRestart <- base::invokeRestart
[17:47:20.380]                     is.null <- base::is.null
[17:47:20.380]                     muffled <- FALSE
[17:47:20.380]                     if (inherits(cond, "message")) {
[17:47:20.380]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.380]                       if (muffled) 
[17:47:20.380]                         invokeRestart("muffleMessage")
[17:47:20.380]                     }
[17:47:20.380]                     else if (inherits(cond, "warning")) {
[17:47:20.380]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.380]                       if (muffled) 
[17:47:20.380]                         invokeRestart("muffleWarning")
[17:47:20.380]                     }
[17:47:20.380]                     else if (inherits(cond, "condition")) {
[17:47:20.380]                       if (!is.null(pattern)) {
[17:47:20.380]                         computeRestarts <- base::computeRestarts
[17:47:20.380]                         grepl <- base::grepl
[17:47:20.380]                         restarts <- computeRestarts(cond)
[17:47:20.380]                         for (restart in restarts) {
[17:47:20.380]                           name <- restart$name
[17:47:20.380]                           if (is.null(name)) 
[17:47:20.380]                             next
[17:47:20.380]                           if (!grepl(pattern, name)) 
[17:47:20.380]                             next
[17:47:20.380]                           invokeRestart(restart)
[17:47:20.380]                           muffled <- TRUE
[17:47:20.380]                           break
[17:47:20.380]                         }
[17:47:20.380]                       }
[17:47:20.380]                     }
[17:47:20.380]                     invisible(muffled)
[17:47:20.380]                   }
[17:47:20.380]                   muffleCondition(cond)
[17:47:20.380]                 })
[17:47:20.380]             }))
[17:47:20.380]             future::FutureResult(value = ...future.value$value, 
[17:47:20.380]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.380]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.380]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.380]                     ...future.globalenv.names))
[17:47:20.380]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.380]         }, condition = base::local({
[17:47:20.380]             c <- base::c
[17:47:20.380]             inherits <- base::inherits
[17:47:20.380]             invokeRestart <- base::invokeRestart
[17:47:20.380]             length <- base::length
[17:47:20.380]             list <- base::list
[17:47:20.380]             seq.int <- base::seq.int
[17:47:20.380]             signalCondition <- base::signalCondition
[17:47:20.380]             sys.calls <- base::sys.calls
[17:47:20.380]             `[[` <- base::`[[`
[17:47:20.380]             `+` <- base::`+`
[17:47:20.380]             `<<-` <- base::`<<-`
[17:47:20.380]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.380]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.380]                   3L)]
[17:47:20.380]             }
[17:47:20.380]             function(cond) {
[17:47:20.380]                 is_error <- inherits(cond, "error")
[17:47:20.380]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.380]                   NULL)
[17:47:20.380]                 if (is_error) {
[17:47:20.380]                   sessionInformation <- function() {
[17:47:20.380]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.380]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.380]                       search = base::search(), system = base::Sys.info())
[17:47:20.380]                   }
[17:47:20.380]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.380]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.380]                     cond$call), session = sessionInformation(), 
[17:47:20.380]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.380]                   signalCondition(cond)
[17:47:20.380]                 }
[17:47:20.380]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.380]                 "immediateCondition"))) {
[17:47:20.380]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.380]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.380]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.380]                   if (TRUE && !signal) {
[17:47:20.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.380]                     {
[17:47:20.380]                       inherits <- base::inherits
[17:47:20.380]                       invokeRestart <- base::invokeRestart
[17:47:20.380]                       is.null <- base::is.null
[17:47:20.380]                       muffled <- FALSE
[17:47:20.380]                       if (inherits(cond, "message")) {
[17:47:20.380]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.380]                         if (muffled) 
[17:47:20.380]                           invokeRestart("muffleMessage")
[17:47:20.380]                       }
[17:47:20.380]                       else if (inherits(cond, "warning")) {
[17:47:20.380]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.380]                         if (muffled) 
[17:47:20.380]                           invokeRestart("muffleWarning")
[17:47:20.380]                       }
[17:47:20.380]                       else if (inherits(cond, "condition")) {
[17:47:20.380]                         if (!is.null(pattern)) {
[17:47:20.380]                           computeRestarts <- base::computeRestarts
[17:47:20.380]                           grepl <- base::grepl
[17:47:20.380]                           restarts <- computeRestarts(cond)
[17:47:20.380]                           for (restart in restarts) {
[17:47:20.380]                             name <- restart$name
[17:47:20.380]                             if (is.null(name)) 
[17:47:20.380]                               next
[17:47:20.380]                             if (!grepl(pattern, name)) 
[17:47:20.380]                               next
[17:47:20.380]                             invokeRestart(restart)
[17:47:20.380]                             muffled <- TRUE
[17:47:20.380]                             break
[17:47:20.380]                           }
[17:47:20.380]                         }
[17:47:20.380]                       }
[17:47:20.380]                       invisible(muffled)
[17:47:20.380]                     }
[17:47:20.380]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.380]                   }
[17:47:20.380]                 }
[17:47:20.380]                 else {
[17:47:20.380]                   if (TRUE) {
[17:47:20.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.380]                     {
[17:47:20.380]                       inherits <- base::inherits
[17:47:20.380]                       invokeRestart <- base::invokeRestart
[17:47:20.380]                       is.null <- base::is.null
[17:47:20.380]                       muffled <- FALSE
[17:47:20.380]                       if (inherits(cond, "message")) {
[17:47:20.380]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.380]                         if (muffled) 
[17:47:20.380]                           invokeRestart("muffleMessage")
[17:47:20.380]                       }
[17:47:20.380]                       else if (inherits(cond, "warning")) {
[17:47:20.380]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.380]                         if (muffled) 
[17:47:20.380]                           invokeRestart("muffleWarning")
[17:47:20.380]                       }
[17:47:20.380]                       else if (inherits(cond, "condition")) {
[17:47:20.380]                         if (!is.null(pattern)) {
[17:47:20.380]                           computeRestarts <- base::computeRestarts
[17:47:20.380]                           grepl <- base::grepl
[17:47:20.380]                           restarts <- computeRestarts(cond)
[17:47:20.380]                           for (restart in restarts) {
[17:47:20.380]                             name <- restart$name
[17:47:20.380]                             if (is.null(name)) 
[17:47:20.380]                               next
[17:47:20.380]                             if (!grepl(pattern, name)) 
[17:47:20.380]                               next
[17:47:20.380]                             invokeRestart(restart)
[17:47:20.380]                             muffled <- TRUE
[17:47:20.380]                             break
[17:47:20.380]                           }
[17:47:20.380]                         }
[17:47:20.380]                       }
[17:47:20.380]                       invisible(muffled)
[17:47:20.380]                     }
[17:47:20.380]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.380]                   }
[17:47:20.380]                 }
[17:47:20.380]             }
[17:47:20.380]         }))
[17:47:20.380]     }, error = function(ex) {
[17:47:20.380]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.380]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.380]                 ...future.rng), started = ...future.startTime, 
[17:47:20.380]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.380]             version = "1.8"), class = "FutureResult")
[17:47:20.380]     }, finally = {
[17:47:20.380]         if (!identical(...future.workdir, getwd())) 
[17:47:20.380]             setwd(...future.workdir)
[17:47:20.380]         {
[17:47:20.380]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.380]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.380]             }
[17:47:20.380]             base::options(...future.oldOptions)
[17:47:20.380]             if (.Platform$OS.type == "windows") {
[17:47:20.380]                 old_names <- names(...future.oldEnvVars)
[17:47:20.380]                 envs <- base::Sys.getenv()
[17:47:20.380]                 names <- names(envs)
[17:47:20.380]                 common <- intersect(names, old_names)
[17:47:20.380]                 added <- setdiff(names, old_names)
[17:47:20.380]                 removed <- setdiff(old_names, names)
[17:47:20.380]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.380]                   envs[common]]
[17:47:20.380]                 NAMES <- toupper(changed)
[17:47:20.380]                 args <- list()
[17:47:20.380]                 for (kk in seq_along(NAMES)) {
[17:47:20.380]                   name <- changed[[kk]]
[17:47:20.380]                   NAME <- NAMES[[kk]]
[17:47:20.380]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.380]                     next
[17:47:20.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.380]                 }
[17:47:20.380]                 NAMES <- toupper(added)
[17:47:20.380]                 for (kk in seq_along(NAMES)) {
[17:47:20.380]                   name <- added[[kk]]
[17:47:20.380]                   NAME <- NAMES[[kk]]
[17:47:20.380]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.380]                     next
[17:47:20.380]                   args[[name]] <- ""
[17:47:20.380]                 }
[17:47:20.380]                 NAMES <- toupper(removed)
[17:47:20.380]                 for (kk in seq_along(NAMES)) {
[17:47:20.380]                   name <- removed[[kk]]
[17:47:20.380]                   NAME <- NAMES[[kk]]
[17:47:20.380]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.380]                     next
[17:47:20.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.380]                 }
[17:47:20.380]                 if (length(args) > 0) 
[17:47:20.380]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.380]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.380]             }
[17:47:20.380]             else {
[17:47:20.380]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.380]             }
[17:47:20.380]             {
[17:47:20.380]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.380]                   0L) {
[17:47:20.380]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.380]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.380]                   base::options(opts)
[17:47:20.380]                 }
[17:47:20.380]                 {
[17:47:20.380]                   {
[17:47:20.380]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.380]                     NULL
[17:47:20.380]                   }
[17:47:20.380]                   options(future.plan = NULL)
[17:47:20.380]                   if (is.na(NA_character_)) 
[17:47:20.380]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.380]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.380]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.380]                     .init = FALSE)
[17:47:20.380]                 }
[17:47:20.380]             }
[17:47:20.380]         }
[17:47:20.380]     })
[17:47:20.380]     if (TRUE) {
[17:47:20.380]         base::sink(type = "output", split = FALSE)
[17:47:20.380]         if (TRUE) {
[17:47:20.380]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.380]         }
[17:47:20.380]         else {
[17:47:20.380]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.380]         }
[17:47:20.380]         base::close(...future.stdout)
[17:47:20.380]         ...future.stdout <- NULL
[17:47:20.380]     }
[17:47:20.380]     ...future.result$conditions <- ...future.conditions
[17:47:20.380]     ...future.result$finished <- base::Sys.time()
[17:47:20.380]     ...future.result
[17:47:20.380] }
[17:47:20.433] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[17:47:20.455] result() for ClusterFuture ...
[17:47:20.456] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.456] - Validating connection of MultisessionFuture
[17:47:20.465] - received message: FutureResult
[17:47:20.465] - Received FutureResult
[17:47:20.469] - Erased future from FutureRegistry
[17:47:20.469] result() for ClusterFuture ...
[17:47:20.469] - result already collected: FutureResult
[17:47:20.469] result() for ClusterFuture ... done
[17:47:20.469] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:20.469] result() for ClusterFuture ... done
[17:47:20.469] result() for ClusterFuture ...
[17:47:20.469] - result already collected: FutureResult
[17:47:20.470] result() for ClusterFuture ... done
[1] 42
[17:47:20.474] getGlobalsAndPackages() ...
[17:47:20.474] Searching for globals...
[17:47:20.476] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:47:20.476] Searching for globals ... DONE
[17:47:20.476] Resolving globals: FALSE
[17:47:20.477] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:20.477] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:47:20.477] - globals: [1] ‘a’
[17:47:20.478] 
[17:47:20.478] getGlobalsAndPackages() ... DONE
[17:47:20.489] Packages needed by the future expression (n = 0): <none>
[17:47:20.489] Packages needed by future strategies (n = 0): <none>
[17:47:20.489] {
[17:47:20.489]     {
[17:47:20.489]         {
[17:47:20.489]             ...future.startTime <- base::Sys.time()
[17:47:20.489]             {
[17:47:20.489]                 {
[17:47:20.489]                   {
[17:47:20.489]                     {
[17:47:20.489]                       base::local({
[17:47:20.489]                         has_future <- base::requireNamespace("future", 
[17:47:20.489]                           quietly = TRUE)
[17:47:20.489]                         if (has_future) {
[17:47:20.489]                           ns <- base::getNamespace("future")
[17:47:20.489]                           version <- ns[[".package"]][["version"]]
[17:47:20.489]                           if (is.null(version)) 
[17:47:20.489]                             version <- utils::packageVersion("future")
[17:47:20.489]                         }
[17:47:20.489]                         else {
[17:47:20.489]                           version <- NULL
[17:47:20.489]                         }
[17:47:20.489]                         if (!has_future || version < "1.8.0") {
[17:47:20.489]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.489]                             "", base::R.version$version.string), 
[17:47:20.489]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.489]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.489]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.489]                               "release", "version")], collapse = " "), 
[17:47:20.489]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.489]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.489]                             info)
[17:47:20.489]                           info <- base::paste(info, collapse = "; ")
[17:47:20.489]                           if (!has_future) {
[17:47:20.489]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.489]                               info)
[17:47:20.489]                           }
[17:47:20.489]                           else {
[17:47:20.489]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.489]                               info, version)
[17:47:20.489]                           }
[17:47:20.489]                           base::stop(msg)
[17:47:20.489]                         }
[17:47:20.489]                       })
[17:47:20.489]                     }
[17:47:20.489]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.489]                     base::options(mc.cores = 1L)
[17:47:20.489]                   }
[17:47:20.489]                   ...future.strategy.old <- future::plan("list")
[17:47:20.489]                   options(future.plan = NULL)
[17:47:20.489]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.489]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.489]                 }
[17:47:20.489]                 ...future.workdir <- getwd()
[17:47:20.489]             }
[17:47:20.489]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.489]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.489]         }
[17:47:20.489]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.489]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.489]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.489]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.489]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.489]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.489]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.489]             base::names(...future.oldOptions))
[17:47:20.489]     }
[17:47:20.489]     if (FALSE) {
[17:47:20.489]     }
[17:47:20.489]     else {
[17:47:20.489]         if (TRUE) {
[17:47:20.489]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.489]                 open = "w")
[17:47:20.489]         }
[17:47:20.489]         else {
[17:47:20.489]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.489]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.489]         }
[17:47:20.489]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.489]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.489]             base::sink(type = "output", split = FALSE)
[17:47:20.489]             base::close(...future.stdout)
[17:47:20.489]         }, add = TRUE)
[17:47:20.489]     }
[17:47:20.489]     ...future.frame <- base::sys.nframe()
[17:47:20.489]     ...future.conditions <- base::list()
[17:47:20.489]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.489]     if (FALSE) {
[17:47:20.489]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.489]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.489]     }
[17:47:20.489]     ...future.result <- base::tryCatch({
[17:47:20.489]         base::withCallingHandlers({
[17:47:20.489]             ...future.value <- base::withVisible(base::local({
[17:47:20.489]                 ...future.makeSendCondition <- base::local({
[17:47:20.489]                   sendCondition <- NULL
[17:47:20.489]                   function(frame = 1L) {
[17:47:20.489]                     if (is.function(sendCondition)) 
[17:47:20.489]                       return(sendCondition)
[17:47:20.489]                     ns <- getNamespace("parallel")
[17:47:20.489]                     if (exists("sendData", mode = "function", 
[17:47:20.489]                       envir = ns)) {
[17:47:20.489]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.489]                         envir = ns)
[17:47:20.489]                       envir <- sys.frame(frame)
[17:47:20.489]                       master <- NULL
[17:47:20.489]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.489]                         !identical(envir, emptyenv())) {
[17:47:20.489]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.489]                           inherits = FALSE)) {
[17:47:20.489]                           master <- get("master", mode = "list", 
[17:47:20.489]                             envir = envir, inherits = FALSE)
[17:47:20.489]                           if (inherits(master, c("SOCKnode", 
[17:47:20.489]                             "SOCK0node"))) {
[17:47:20.489]                             sendCondition <<- function(cond) {
[17:47:20.489]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.489]                                 success = TRUE)
[17:47:20.489]                               parallel_sendData(master, data)
[17:47:20.489]                             }
[17:47:20.489]                             return(sendCondition)
[17:47:20.489]                           }
[17:47:20.489]                         }
[17:47:20.489]                         frame <- frame + 1L
[17:47:20.489]                         envir <- sys.frame(frame)
[17:47:20.489]                       }
[17:47:20.489]                     }
[17:47:20.489]                     sendCondition <<- function(cond) NULL
[17:47:20.489]                   }
[17:47:20.489]                 })
[17:47:20.489]                 withCallingHandlers({
[17:47:20.489]                   {
[17:47:20.489]                     b <- 3
[17:47:20.489]                     c <- 2
[17:47:20.489]                     a * b * c
[17:47:20.489]                   }
[17:47:20.489]                 }, immediateCondition = function(cond) {
[17:47:20.489]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.489]                   sendCondition(cond)
[17:47:20.489]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.489]                   {
[17:47:20.489]                     inherits <- base::inherits
[17:47:20.489]                     invokeRestart <- base::invokeRestart
[17:47:20.489]                     is.null <- base::is.null
[17:47:20.489]                     muffled <- FALSE
[17:47:20.489]                     if (inherits(cond, "message")) {
[17:47:20.489]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.489]                       if (muffled) 
[17:47:20.489]                         invokeRestart("muffleMessage")
[17:47:20.489]                     }
[17:47:20.489]                     else if (inherits(cond, "warning")) {
[17:47:20.489]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.489]                       if (muffled) 
[17:47:20.489]                         invokeRestart("muffleWarning")
[17:47:20.489]                     }
[17:47:20.489]                     else if (inherits(cond, "condition")) {
[17:47:20.489]                       if (!is.null(pattern)) {
[17:47:20.489]                         computeRestarts <- base::computeRestarts
[17:47:20.489]                         grepl <- base::grepl
[17:47:20.489]                         restarts <- computeRestarts(cond)
[17:47:20.489]                         for (restart in restarts) {
[17:47:20.489]                           name <- restart$name
[17:47:20.489]                           if (is.null(name)) 
[17:47:20.489]                             next
[17:47:20.489]                           if (!grepl(pattern, name)) 
[17:47:20.489]                             next
[17:47:20.489]                           invokeRestart(restart)
[17:47:20.489]                           muffled <- TRUE
[17:47:20.489]                           break
[17:47:20.489]                         }
[17:47:20.489]                       }
[17:47:20.489]                     }
[17:47:20.489]                     invisible(muffled)
[17:47:20.489]                   }
[17:47:20.489]                   muffleCondition(cond)
[17:47:20.489]                 })
[17:47:20.489]             }))
[17:47:20.489]             future::FutureResult(value = ...future.value$value, 
[17:47:20.489]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.489]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.489]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.489]                     ...future.globalenv.names))
[17:47:20.489]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.489]         }, condition = base::local({
[17:47:20.489]             c <- base::c
[17:47:20.489]             inherits <- base::inherits
[17:47:20.489]             invokeRestart <- base::invokeRestart
[17:47:20.489]             length <- base::length
[17:47:20.489]             list <- base::list
[17:47:20.489]             seq.int <- base::seq.int
[17:47:20.489]             signalCondition <- base::signalCondition
[17:47:20.489]             sys.calls <- base::sys.calls
[17:47:20.489]             `[[` <- base::`[[`
[17:47:20.489]             `+` <- base::`+`
[17:47:20.489]             `<<-` <- base::`<<-`
[17:47:20.489]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.489]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.489]                   3L)]
[17:47:20.489]             }
[17:47:20.489]             function(cond) {
[17:47:20.489]                 is_error <- inherits(cond, "error")
[17:47:20.489]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.489]                   NULL)
[17:47:20.489]                 if (is_error) {
[17:47:20.489]                   sessionInformation <- function() {
[17:47:20.489]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.489]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.489]                       search = base::search(), system = base::Sys.info())
[17:47:20.489]                   }
[17:47:20.489]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.489]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.489]                     cond$call), session = sessionInformation(), 
[17:47:20.489]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.489]                   signalCondition(cond)
[17:47:20.489]                 }
[17:47:20.489]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.489]                 "immediateCondition"))) {
[17:47:20.489]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.489]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.489]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.489]                   if (TRUE && !signal) {
[17:47:20.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.489]                     {
[17:47:20.489]                       inherits <- base::inherits
[17:47:20.489]                       invokeRestart <- base::invokeRestart
[17:47:20.489]                       is.null <- base::is.null
[17:47:20.489]                       muffled <- FALSE
[17:47:20.489]                       if (inherits(cond, "message")) {
[17:47:20.489]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.489]                         if (muffled) 
[17:47:20.489]                           invokeRestart("muffleMessage")
[17:47:20.489]                       }
[17:47:20.489]                       else if (inherits(cond, "warning")) {
[17:47:20.489]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.489]                         if (muffled) 
[17:47:20.489]                           invokeRestart("muffleWarning")
[17:47:20.489]                       }
[17:47:20.489]                       else if (inherits(cond, "condition")) {
[17:47:20.489]                         if (!is.null(pattern)) {
[17:47:20.489]                           computeRestarts <- base::computeRestarts
[17:47:20.489]                           grepl <- base::grepl
[17:47:20.489]                           restarts <- computeRestarts(cond)
[17:47:20.489]                           for (restart in restarts) {
[17:47:20.489]                             name <- restart$name
[17:47:20.489]                             if (is.null(name)) 
[17:47:20.489]                               next
[17:47:20.489]                             if (!grepl(pattern, name)) 
[17:47:20.489]                               next
[17:47:20.489]                             invokeRestart(restart)
[17:47:20.489]                             muffled <- TRUE
[17:47:20.489]                             break
[17:47:20.489]                           }
[17:47:20.489]                         }
[17:47:20.489]                       }
[17:47:20.489]                       invisible(muffled)
[17:47:20.489]                     }
[17:47:20.489]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.489]                   }
[17:47:20.489]                 }
[17:47:20.489]                 else {
[17:47:20.489]                   if (TRUE) {
[17:47:20.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.489]                     {
[17:47:20.489]                       inherits <- base::inherits
[17:47:20.489]                       invokeRestart <- base::invokeRestart
[17:47:20.489]                       is.null <- base::is.null
[17:47:20.489]                       muffled <- FALSE
[17:47:20.489]                       if (inherits(cond, "message")) {
[17:47:20.489]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.489]                         if (muffled) 
[17:47:20.489]                           invokeRestart("muffleMessage")
[17:47:20.489]                       }
[17:47:20.489]                       else if (inherits(cond, "warning")) {
[17:47:20.489]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.489]                         if (muffled) 
[17:47:20.489]                           invokeRestart("muffleWarning")
[17:47:20.489]                       }
[17:47:20.489]                       else if (inherits(cond, "condition")) {
[17:47:20.489]                         if (!is.null(pattern)) {
[17:47:20.489]                           computeRestarts <- base::computeRestarts
[17:47:20.489]                           grepl <- base::grepl
[17:47:20.489]                           restarts <- computeRestarts(cond)
[17:47:20.489]                           for (restart in restarts) {
[17:47:20.489]                             name <- restart$name
[17:47:20.489]                             if (is.null(name)) 
[17:47:20.489]                               next
[17:47:20.489]                             if (!grepl(pattern, name)) 
[17:47:20.489]                               next
[17:47:20.489]                             invokeRestart(restart)
[17:47:20.489]                             muffled <- TRUE
[17:47:20.489]                             break
[17:47:20.489]                           }
[17:47:20.489]                         }
[17:47:20.489]                       }
[17:47:20.489]                       invisible(muffled)
[17:47:20.489]                     }
[17:47:20.489]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.489]                   }
[17:47:20.489]                 }
[17:47:20.489]             }
[17:47:20.489]         }))
[17:47:20.489]     }, error = function(ex) {
[17:47:20.489]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.489]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.489]                 ...future.rng), started = ...future.startTime, 
[17:47:20.489]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.489]             version = "1.8"), class = "FutureResult")
[17:47:20.489]     }, finally = {
[17:47:20.489]         if (!identical(...future.workdir, getwd())) 
[17:47:20.489]             setwd(...future.workdir)
[17:47:20.489]         {
[17:47:20.489]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.489]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.489]             }
[17:47:20.489]             base::options(...future.oldOptions)
[17:47:20.489]             if (.Platform$OS.type == "windows") {
[17:47:20.489]                 old_names <- names(...future.oldEnvVars)
[17:47:20.489]                 envs <- base::Sys.getenv()
[17:47:20.489]                 names <- names(envs)
[17:47:20.489]                 common <- intersect(names, old_names)
[17:47:20.489]                 added <- setdiff(names, old_names)
[17:47:20.489]                 removed <- setdiff(old_names, names)
[17:47:20.489]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.489]                   envs[common]]
[17:47:20.489]                 NAMES <- toupper(changed)
[17:47:20.489]                 args <- list()
[17:47:20.489]                 for (kk in seq_along(NAMES)) {
[17:47:20.489]                   name <- changed[[kk]]
[17:47:20.489]                   NAME <- NAMES[[kk]]
[17:47:20.489]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.489]                     next
[17:47:20.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.489]                 }
[17:47:20.489]                 NAMES <- toupper(added)
[17:47:20.489]                 for (kk in seq_along(NAMES)) {
[17:47:20.489]                   name <- added[[kk]]
[17:47:20.489]                   NAME <- NAMES[[kk]]
[17:47:20.489]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.489]                     next
[17:47:20.489]                   args[[name]] <- ""
[17:47:20.489]                 }
[17:47:20.489]                 NAMES <- toupper(removed)
[17:47:20.489]                 for (kk in seq_along(NAMES)) {
[17:47:20.489]                   name <- removed[[kk]]
[17:47:20.489]                   NAME <- NAMES[[kk]]
[17:47:20.489]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.489]                     next
[17:47:20.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.489]                 }
[17:47:20.489]                 if (length(args) > 0) 
[17:47:20.489]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.489]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.489]             }
[17:47:20.489]             else {
[17:47:20.489]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.489]             }
[17:47:20.489]             {
[17:47:20.489]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.489]                   0L) {
[17:47:20.489]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.489]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.489]                   base::options(opts)
[17:47:20.489]                 }
[17:47:20.489]                 {
[17:47:20.489]                   {
[17:47:20.489]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.489]                     NULL
[17:47:20.489]                   }
[17:47:20.489]                   options(future.plan = NULL)
[17:47:20.489]                   if (is.na(NA_character_)) 
[17:47:20.489]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.489]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.489]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.489]                     .init = FALSE)
[17:47:20.489]                 }
[17:47:20.489]             }
[17:47:20.489]         }
[17:47:20.489]     })
[17:47:20.489]     if (TRUE) {
[17:47:20.489]         base::sink(type = "output", split = FALSE)
[17:47:20.489]         if (TRUE) {
[17:47:20.489]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.489]         }
[17:47:20.489]         else {
[17:47:20.489]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.489]         }
[17:47:20.489]         base::close(...future.stdout)
[17:47:20.489]         ...future.stdout <- NULL
[17:47:20.489]     }
[17:47:20.489]     ...future.result$conditions <- ...future.conditions
[17:47:20.489]     ...future.result$finished <- base::Sys.time()
[17:47:20.489]     ...future.result
[17:47:20.489] }
[17:47:20.492] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:47:20.492] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:47:20.493] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:47:20.493] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:47:20.493] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:20.495] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.495] - Validating connection of MultisessionFuture
[17:47:20.495] - received message: FutureResult
[17:47:20.496] - Received FutureResult
[17:47:20.496] - Erased future from FutureRegistry
[17:47:20.496] result() for ClusterFuture ...
[17:47:20.496] - result already collected: FutureResult
[17:47:20.496] result() for ClusterFuture ... done
[17:47:20.496] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:20.496] result() for ClusterFuture ...
[17:47:20.497] - result already collected: FutureResult
[17:47:20.497] result() for ClusterFuture ... done
[17:47:20.497] result() for ClusterFuture ...
[17:47:20.497] - result already collected: FutureResult
[17:47:20.497] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[17:47:20.501] getGlobalsAndPackages() ...
[17:47:20.501] Searching for globals...
[17:47:20.502] - globals found: [2] ‘{’, ‘ii’
[17:47:20.502] Searching for globals ... DONE
[17:47:20.502] Resolving globals: FALSE
[17:47:20.503] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:20.503] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:20.503] - globals: [1] ‘ii’
[17:47:20.503] 
[17:47:20.503] getGlobalsAndPackages() ... DONE
[17:47:20.514] Packages needed by the future expression (n = 0): <none>
[17:47:20.514] Packages needed by future strategies (n = 0): <none>
[17:47:20.515] {
[17:47:20.515]     {
[17:47:20.515]         {
[17:47:20.515]             ...future.startTime <- base::Sys.time()
[17:47:20.515]             {
[17:47:20.515]                 {
[17:47:20.515]                   {
[17:47:20.515]                     {
[17:47:20.515]                       base::local({
[17:47:20.515]                         has_future <- base::requireNamespace("future", 
[17:47:20.515]                           quietly = TRUE)
[17:47:20.515]                         if (has_future) {
[17:47:20.515]                           ns <- base::getNamespace("future")
[17:47:20.515]                           version <- ns[[".package"]][["version"]]
[17:47:20.515]                           if (is.null(version)) 
[17:47:20.515]                             version <- utils::packageVersion("future")
[17:47:20.515]                         }
[17:47:20.515]                         else {
[17:47:20.515]                           version <- NULL
[17:47:20.515]                         }
[17:47:20.515]                         if (!has_future || version < "1.8.0") {
[17:47:20.515]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.515]                             "", base::R.version$version.string), 
[17:47:20.515]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.515]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.515]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.515]                               "release", "version")], collapse = " "), 
[17:47:20.515]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.515]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.515]                             info)
[17:47:20.515]                           info <- base::paste(info, collapse = "; ")
[17:47:20.515]                           if (!has_future) {
[17:47:20.515]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.515]                               info)
[17:47:20.515]                           }
[17:47:20.515]                           else {
[17:47:20.515]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.515]                               info, version)
[17:47:20.515]                           }
[17:47:20.515]                           base::stop(msg)
[17:47:20.515]                         }
[17:47:20.515]                       })
[17:47:20.515]                     }
[17:47:20.515]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.515]                     base::options(mc.cores = 1L)
[17:47:20.515]                   }
[17:47:20.515]                   ...future.strategy.old <- future::plan("list")
[17:47:20.515]                   options(future.plan = NULL)
[17:47:20.515]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.515]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.515]                 }
[17:47:20.515]                 ...future.workdir <- getwd()
[17:47:20.515]             }
[17:47:20.515]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.515]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.515]         }
[17:47:20.515]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.515]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.515]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.515]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.515]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.515]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.515]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.515]             base::names(...future.oldOptions))
[17:47:20.515]     }
[17:47:20.515]     if (FALSE) {
[17:47:20.515]     }
[17:47:20.515]     else {
[17:47:20.515]         if (TRUE) {
[17:47:20.515]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.515]                 open = "w")
[17:47:20.515]         }
[17:47:20.515]         else {
[17:47:20.515]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.515]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.515]         }
[17:47:20.515]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.515]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.515]             base::sink(type = "output", split = FALSE)
[17:47:20.515]             base::close(...future.stdout)
[17:47:20.515]         }, add = TRUE)
[17:47:20.515]     }
[17:47:20.515]     ...future.frame <- base::sys.nframe()
[17:47:20.515]     ...future.conditions <- base::list()
[17:47:20.515]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.515]     if (FALSE) {
[17:47:20.515]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.515]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.515]     }
[17:47:20.515]     ...future.result <- base::tryCatch({
[17:47:20.515]         base::withCallingHandlers({
[17:47:20.515]             ...future.value <- base::withVisible(base::local({
[17:47:20.515]                 ...future.makeSendCondition <- base::local({
[17:47:20.515]                   sendCondition <- NULL
[17:47:20.515]                   function(frame = 1L) {
[17:47:20.515]                     if (is.function(sendCondition)) 
[17:47:20.515]                       return(sendCondition)
[17:47:20.515]                     ns <- getNamespace("parallel")
[17:47:20.515]                     if (exists("sendData", mode = "function", 
[17:47:20.515]                       envir = ns)) {
[17:47:20.515]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.515]                         envir = ns)
[17:47:20.515]                       envir <- sys.frame(frame)
[17:47:20.515]                       master <- NULL
[17:47:20.515]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.515]                         !identical(envir, emptyenv())) {
[17:47:20.515]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.515]                           inherits = FALSE)) {
[17:47:20.515]                           master <- get("master", mode = "list", 
[17:47:20.515]                             envir = envir, inherits = FALSE)
[17:47:20.515]                           if (inherits(master, c("SOCKnode", 
[17:47:20.515]                             "SOCK0node"))) {
[17:47:20.515]                             sendCondition <<- function(cond) {
[17:47:20.515]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.515]                                 success = TRUE)
[17:47:20.515]                               parallel_sendData(master, data)
[17:47:20.515]                             }
[17:47:20.515]                             return(sendCondition)
[17:47:20.515]                           }
[17:47:20.515]                         }
[17:47:20.515]                         frame <- frame + 1L
[17:47:20.515]                         envir <- sys.frame(frame)
[17:47:20.515]                       }
[17:47:20.515]                     }
[17:47:20.515]                     sendCondition <<- function(cond) NULL
[17:47:20.515]                   }
[17:47:20.515]                 })
[17:47:20.515]                 withCallingHandlers({
[17:47:20.515]                   {
[17:47:20.515]                     ii
[17:47:20.515]                   }
[17:47:20.515]                 }, immediateCondition = function(cond) {
[17:47:20.515]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.515]                   sendCondition(cond)
[17:47:20.515]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.515]                   {
[17:47:20.515]                     inherits <- base::inherits
[17:47:20.515]                     invokeRestart <- base::invokeRestart
[17:47:20.515]                     is.null <- base::is.null
[17:47:20.515]                     muffled <- FALSE
[17:47:20.515]                     if (inherits(cond, "message")) {
[17:47:20.515]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.515]                       if (muffled) 
[17:47:20.515]                         invokeRestart("muffleMessage")
[17:47:20.515]                     }
[17:47:20.515]                     else if (inherits(cond, "warning")) {
[17:47:20.515]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.515]                       if (muffled) 
[17:47:20.515]                         invokeRestart("muffleWarning")
[17:47:20.515]                     }
[17:47:20.515]                     else if (inherits(cond, "condition")) {
[17:47:20.515]                       if (!is.null(pattern)) {
[17:47:20.515]                         computeRestarts <- base::computeRestarts
[17:47:20.515]                         grepl <- base::grepl
[17:47:20.515]                         restarts <- computeRestarts(cond)
[17:47:20.515]                         for (restart in restarts) {
[17:47:20.515]                           name <- restart$name
[17:47:20.515]                           if (is.null(name)) 
[17:47:20.515]                             next
[17:47:20.515]                           if (!grepl(pattern, name)) 
[17:47:20.515]                             next
[17:47:20.515]                           invokeRestart(restart)
[17:47:20.515]                           muffled <- TRUE
[17:47:20.515]                           break
[17:47:20.515]                         }
[17:47:20.515]                       }
[17:47:20.515]                     }
[17:47:20.515]                     invisible(muffled)
[17:47:20.515]                   }
[17:47:20.515]                   muffleCondition(cond)
[17:47:20.515]                 })
[17:47:20.515]             }))
[17:47:20.515]             future::FutureResult(value = ...future.value$value, 
[17:47:20.515]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.515]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.515]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.515]                     ...future.globalenv.names))
[17:47:20.515]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.515]         }, condition = base::local({
[17:47:20.515]             c <- base::c
[17:47:20.515]             inherits <- base::inherits
[17:47:20.515]             invokeRestart <- base::invokeRestart
[17:47:20.515]             length <- base::length
[17:47:20.515]             list <- base::list
[17:47:20.515]             seq.int <- base::seq.int
[17:47:20.515]             signalCondition <- base::signalCondition
[17:47:20.515]             sys.calls <- base::sys.calls
[17:47:20.515]             `[[` <- base::`[[`
[17:47:20.515]             `+` <- base::`+`
[17:47:20.515]             `<<-` <- base::`<<-`
[17:47:20.515]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.515]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.515]                   3L)]
[17:47:20.515]             }
[17:47:20.515]             function(cond) {
[17:47:20.515]                 is_error <- inherits(cond, "error")
[17:47:20.515]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.515]                   NULL)
[17:47:20.515]                 if (is_error) {
[17:47:20.515]                   sessionInformation <- function() {
[17:47:20.515]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.515]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.515]                       search = base::search(), system = base::Sys.info())
[17:47:20.515]                   }
[17:47:20.515]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.515]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.515]                     cond$call), session = sessionInformation(), 
[17:47:20.515]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.515]                   signalCondition(cond)
[17:47:20.515]                 }
[17:47:20.515]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.515]                 "immediateCondition"))) {
[17:47:20.515]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.515]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.515]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.515]                   if (TRUE && !signal) {
[17:47:20.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.515]                     {
[17:47:20.515]                       inherits <- base::inherits
[17:47:20.515]                       invokeRestart <- base::invokeRestart
[17:47:20.515]                       is.null <- base::is.null
[17:47:20.515]                       muffled <- FALSE
[17:47:20.515]                       if (inherits(cond, "message")) {
[17:47:20.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.515]                         if (muffled) 
[17:47:20.515]                           invokeRestart("muffleMessage")
[17:47:20.515]                       }
[17:47:20.515]                       else if (inherits(cond, "warning")) {
[17:47:20.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.515]                         if (muffled) 
[17:47:20.515]                           invokeRestart("muffleWarning")
[17:47:20.515]                       }
[17:47:20.515]                       else if (inherits(cond, "condition")) {
[17:47:20.515]                         if (!is.null(pattern)) {
[17:47:20.515]                           computeRestarts <- base::computeRestarts
[17:47:20.515]                           grepl <- base::grepl
[17:47:20.515]                           restarts <- computeRestarts(cond)
[17:47:20.515]                           for (restart in restarts) {
[17:47:20.515]                             name <- restart$name
[17:47:20.515]                             if (is.null(name)) 
[17:47:20.515]                               next
[17:47:20.515]                             if (!grepl(pattern, name)) 
[17:47:20.515]                               next
[17:47:20.515]                             invokeRestart(restart)
[17:47:20.515]                             muffled <- TRUE
[17:47:20.515]                             break
[17:47:20.515]                           }
[17:47:20.515]                         }
[17:47:20.515]                       }
[17:47:20.515]                       invisible(muffled)
[17:47:20.515]                     }
[17:47:20.515]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.515]                   }
[17:47:20.515]                 }
[17:47:20.515]                 else {
[17:47:20.515]                   if (TRUE) {
[17:47:20.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.515]                     {
[17:47:20.515]                       inherits <- base::inherits
[17:47:20.515]                       invokeRestart <- base::invokeRestart
[17:47:20.515]                       is.null <- base::is.null
[17:47:20.515]                       muffled <- FALSE
[17:47:20.515]                       if (inherits(cond, "message")) {
[17:47:20.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.515]                         if (muffled) 
[17:47:20.515]                           invokeRestart("muffleMessage")
[17:47:20.515]                       }
[17:47:20.515]                       else if (inherits(cond, "warning")) {
[17:47:20.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.515]                         if (muffled) 
[17:47:20.515]                           invokeRestart("muffleWarning")
[17:47:20.515]                       }
[17:47:20.515]                       else if (inherits(cond, "condition")) {
[17:47:20.515]                         if (!is.null(pattern)) {
[17:47:20.515]                           computeRestarts <- base::computeRestarts
[17:47:20.515]                           grepl <- base::grepl
[17:47:20.515]                           restarts <- computeRestarts(cond)
[17:47:20.515]                           for (restart in restarts) {
[17:47:20.515]                             name <- restart$name
[17:47:20.515]                             if (is.null(name)) 
[17:47:20.515]                               next
[17:47:20.515]                             if (!grepl(pattern, name)) 
[17:47:20.515]                               next
[17:47:20.515]                             invokeRestart(restart)
[17:47:20.515]                             muffled <- TRUE
[17:47:20.515]                             break
[17:47:20.515]                           }
[17:47:20.515]                         }
[17:47:20.515]                       }
[17:47:20.515]                       invisible(muffled)
[17:47:20.515]                     }
[17:47:20.515]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.515]                   }
[17:47:20.515]                 }
[17:47:20.515]             }
[17:47:20.515]         }))
[17:47:20.515]     }, error = function(ex) {
[17:47:20.515]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.515]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.515]                 ...future.rng), started = ...future.startTime, 
[17:47:20.515]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.515]             version = "1.8"), class = "FutureResult")
[17:47:20.515]     }, finally = {
[17:47:20.515]         if (!identical(...future.workdir, getwd())) 
[17:47:20.515]             setwd(...future.workdir)
[17:47:20.515]         {
[17:47:20.515]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.515]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.515]             }
[17:47:20.515]             base::options(...future.oldOptions)
[17:47:20.515]             if (.Platform$OS.type == "windows") {
[17:47:20.515]                 old_names <- names(...future.oldEnvVars)
[17:47:20.515]                 envs <- base::Sys.getenv()
[17:47:20.515]                 names <- names(envs)
[17:47:20.515]                 common <- intersect(names, old_names)
[17:47:20.515]                 added <- setdiff(names, old_names)
[17:47:20.515]                 removed <- setdiff(old_names, names)
[17:47:20.515]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.515]                   envs[common]]
[17:47:20.515]                 NAMES <- toupper(changed)
[17:47:20.515]                 args <- list()
[17:47:20.515]                 for (kk in seq_along(NAMES)) {
[17:47:20.515]                   name <- changed[[kk]]
[17:47:20.515]                   NAME <- NAMES[[kk]]
[17:47:20.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.515]                     next
[17:47:20.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.515]                 }
[17:47:20.515]                 NAMES <- toupper(added)
[17:47:20.515]                 for (kk in seq_along(NAMES)) {
[17:47:20.515]                   name <- added[[kk]]
[17:47:20.515]                   NAME <- NAMES[[kk]]
[17:47:20.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.515]                     next
[17:47:20.515]                   args[[name]] <- ""
[17:47:20.515]                 }
[17:47:20.515]                 NAMES <- toupper(removed)
[17:47:20.515]                 for (kk in seq_along(NAMES)) {
[17:47:20.515]                   name <- removed[[kk]]
[17:47:20.515]                   NAME <- NAMES[[kk]]
[17:47:20.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.515]                     next
[17:47:20.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.515]                 }
[17:47:20.515]                 if (length(args) > 0) 
[17:47:20.515]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.515]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.515]             }
[17:47:20.515]             else {
[17:47:20.515]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.515]             }
[17:47:20.515]             {
[17:47:20.515]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.515]                   0L) {
[17:47:20.515]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.515]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.515]                   base::options(opts)
[17:47:20.515]                 }
[17:47:20.515]                 {
[17:47:20.515]                   {
[17:47:20.515]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.515]                     NULL
[17:47:20.515]                   }
[17:47:20.515]                   options(future.plan = NULL)
[17:47:20.515]                   if (is.na(NA_character_)) 
[17:47:20.515]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.515]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.515]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.515]                     .init = FALSE)
[17:47:20.515]                 }
[17:47:20.515]             }
[17:47:20.515]         }
[17:47:20.515]     })
[17:47:20.515]     if (TRUE) {
[17:47:20.515]         base::sink(type = "output", split = FALSE)
[17:47:20.515]         if (TRUE) {
[17:47:20.515]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.515]         }
[17:47:20.515]         else {
[17:47:20.515]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.515]         }
[17:47:20.515]         base::close(...future.stdout)
[17:47:20.515]         ...future.stdout <- NULL
[17:47:20.515]     }
[17:47:20.515]     ...future.result$conditions <- ...future.conditions
[17:47:20.515]     ...future.result$finished <- base::Sys.time()
[17:47:20.515]     ...future.result
[17:47:20.515] }
[17:47:20.518] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:47:20.518] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:47:20.518] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:47:20.518] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:47:20.519] MultisessionFuture started
 - Creating multisession future #1 ...
[17:47:20.523] getGlobalsAndPackages() ...
[17:47:20.523] Searching for globals...
[17:47:20.524] - globals found: [2] ‘{’, ‘ii’
[17:47:20.524] Searching for globals ... DONE
[17:47:20.524] Resolving globals: FALSE
[17:47:20.524] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:20.525] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:20.525] - globals: [1] ‘ii’
[17:47:20.525] 
[17:47:20.525] getGlobalsAndPackages() ... DONE
[17:47:20.536] Packages needed by the future expression (n = 0): <none>
[17:47:20.536] Packages needed by future strategies (n = 0): <none>
[17:47:20.537] {
[17:47:20.537]     {
[17:47:20.537]         {
[17:47:20.537]             ...future.startTime <- base::Sys.time()
[17:47:20.537]             {
[17:47:20.537]                 {
[17:47:20.537]                   {
[17:47:20.537]                     {
[17:47:20.537]                       base::local({
[17:47:20.537]                         has_future <- base::requireNamespace("future", 
[17:47:20.537]                           quietly = TRUE)
[17:47:20.537]                         if (has_future) {
[17:47:20.537]                           ns <- base::getNamespace("future")
[17:47:20.537]                           version <- ns[[".package"]][["version"]]
[17:47:20.537]                           if (is.null(version)) 
[17:47:20.537]                             version <- utils::packageVersion("future")
[17:47:20.537]                         }
[17:47:20.537]                         else {
[17:47:20.537]                           version <- NULL
[17:47:20.537]                         }
[17:47:20.537]                         if (!has_future || version < "1.8.0") {
[17:47:20.537]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.537]                             "", base::R.version$version.string), 
[17:47:20.537]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.537]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.537]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.537]                               "release", "version")], collapse = " "), 
[17:47:20.537]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.537]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.537]                             info)
[17:47:20.537]                           info <- base::paste(info, collapse = "; ")
[17:47:20.537]                           if (!has_future) {
[17:47:20.537]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.537]                               info)
[17:47:20.537]                           }
[17:47:20.537]                           else {
[17:47:20.537]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.537]                               info, version)
[17:47:20.537]                           }
[17:47:20.537]                           base::stop(msg)
[17:47:20.537]                         }
[17:47:20.537]                       })
[17:47:20.537]                     }
[17:47:20.537]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.537]                     base::options(mc.cores = 1L)
[17:47:20.537]                   }
[17:47:20.537]                   ...future.strategy.old <- future::plan("list")
[17:47:20.537]                   options(future.plan = NULL)
[17:47:20.537]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.537]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.537]                 }
[17:47:20.537]                 ...future.workdir <- getwd()
[17:47:20.537]             }
[17:47:20.537]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.537]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.537]         }
[17:47:20.537]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.537]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.537]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.537]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.537]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.537]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.537]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.537]             base::names(...future.oldOptions))
[17:47:20.537]     }
[17:47:20.537]     if (FALSE) {
[17:47:20.537]     }
[17:47:20.537]     else {
[17:47:20.537]         if (TRUE) {
[17:47:20.537]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.537]                 open = "w")
[17:47:20.537]         }
[17:47:20.537]         else {
[17:47:20.537]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.537]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.537]         }
[17:47:20.537]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.537]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.537]             base::sink(type = "output", split = FALSE)
[17:47:20.537]             base::close(...future.stdout)
[17:47:20.537]         }, add = TRUE)
[17:47:20.537]     }
[17:47:20.537]     ...future.frame <- base::sys.nframe()
[17:47:20.537]     ...future.conditions <- base::list()
[17:47:20.537]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.537]     if (FALSE) {
[17:47:20.537]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.537]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.537]     }
[17:47:20.537]     ...future.result <- base::tryCatch({
[17:47:20.537]         base::withCallingHandlers({
[17:47:20.537]             ...future.value <- base::withVisible(base::local({
[17:47:20.537]                 ...future.makeSendCondition <- base::local({
[17:47:20.537]                   sendCondition <- NULL
[17:47:20.537]                   function(frame = 1L) {
[17:47:20.537]                     if (is.function(sendCondition)) 
[17:47:20.537]                       return(sendCondition)
[17:47:20.537]                     ns <- getNamespace("parallel")
[17:47:20.537]                     if (exists("sendData", mode = "function", 
[17:47:20.537]                       envir = ns)) {
[17:47:20.537]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.537]                         envir = ns)
[17:47:20.537]                       envir <- sys.frame(frame)
[17:47:20.537]                       master <- NULL
[17:47:20.537]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.537]                         !identical(envir, emptyenv())) {
[17:47:20.537]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.537]                           inherits = FALSE)) {
[17:47:20.537]                           master <- get("master", mode = "list", 
[17:47:20.537]                             envir = envir, inherits = FALSE)
[17:47:20.537]                           if (inherits(master, c("SOCKnode", 
[17:47:20.537]                             "SOCK0node"))) {
[17:47:20.537]                             sendCondition <<- function(cond) {
[17:47:20.537]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.537]                                 success = TRUE)
[17:47:20.537]                               parallel_sendData(master, data)
[17:47:20.537]                             }
[17:47:20.537]                             return(sendCondition)
[17:47:20.537]                           }
[17:47:20.537]                         }
[17:47:20.537]                         frame <- frame + 1L
[17:47:20.537]                         envir <- sys.frame(frame)
[17:47:20.537]                       }
[17:47:20.537]                     }
[17:47:20.537]                     sendCondition <<- function(cond) NULL
[17:47:20.537]                   }
[17:47:20.537]                 })
[17:47:20.537]                 withCallingHandlers({
[17:47:20.537]                   {
[17:47:20.537]                     ii
[17:47:20.537]                   }
[17:47:20.537]                 }, immediateCondition = function(cond) {
[17:47:20.537]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.537]                   sendCondition(cond)
[17:47:20.537]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.537]                   {
[17:47:20.537]                     inherits <- base::inherits
[17:47:20.537]                     invokeRestart <- base::invokeRestart
[17:47:20.537]                     is.null <- base::is.null
[17:47:20.537]                     muffled <- FALSE
[17:47:20.537]                     if (inherits(cond, "message")) {
[17:47:20.537]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.537]                       if (muffled) 
[17:47:20.537]                         invokeRestart("muffleMessage")
[17:47:20.537]                     }
[17:47:20.537]                     else if (inherits(cond, "warning")) {
[17:47:20.537]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.537]                       if (muffled) 
[17:47:20.537]                         invokeRestart("muffleWarning")
[17:47:20.537]                     }
[17:47:20.537]                     else if (inherits(cond, "condition")) {
[17:47:20.537]                       if (!is.null(pattern)) {
[17:47:20.537]                         computeRestarts <- base::computeRestarts
[17:47:20.537]                         grepl <- base::grepl
[17:47:20.537]                         restarts <- computeRestarts(cond)
[17:47:20.537]                         for (restart in restarts) {
[17:47:20.537]                           name <- restart$name
[17:47:20.537]                           if (is.null(name)) 
[17:47:20.537]                             next
[17:47:20.537]                           if (!grepl(pattern, name)) 
[17:47:20.537]                             next
[17:47:20.537]                           invokeRestart(restart)
[17:47:20.537]                           muffled <- TRUE
[17:47:20.537]                           break
[17:47:20.537]                         }
[17:47:20.537]                       }
[17:47:20.537]                     }
[17:47:20.537]                     invisible(muffled)
[17:47:20.537]                   }
[17:47:20.537]                   muffleCondition(cond)
[17:47:20.537]                 })
[17:47:20.537]             }))
[17:47:20.537]             future::FutureResult(value = ...future.value$value, 
[17:47:20.537]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.537]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.537]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.537]                     ...future.globalenv.names))
[17:47:20.537]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.537]         }, condition = base::local({
[17:47:20.537]             c <- base::c
[17:47:20.537]             inherits <- base::inherits
[17:47:20.537]             invokeRestart <- base::invokeRestart
[17:47:20.537]             length <- base::length
[17:47:20.537]             list <- base::list
[17:47:20.537]             seq.int <- base::seq.int
[17:47:20.537]             signalCondition <- base::signalCondition
[17:47:20.537]             sys.calls <- base::sys.calls
[17:47:20.537]             `[[` <- base::`[[`
[17:47:20.537]             `+` <- base::`+`
[17:47:20.537]             `<<-` <- base::`<<-`
[17:47:20.537]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.537]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.537]                   3L)]
[17:47:20.537]             }
[17:47:20.537]             function(cond) {
[17:47:20.537]                 is_error <- inherits(cond, "error")
[17:47:20.537]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.537]                   NULL)
[17:47:20.537]                 if (is_error) {
[17:47:20.537]                   sessionInformation <- function() {
[17:47:20.537]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.537]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.537]                       search = base::search(), system = base::Sys.info())
[17:47:20.537]                   }
[17:47:20.537]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.537]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.537]                     cond$call), session = sessionInformation(), 
[17:47:20.537]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.537]                   signalCondition(cond)
[17:47:20.537]                 }
[17:47:20.537]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.537]                 "immediateCondition"))) {
[17:47:20.537]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.537]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.537]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.537]                   if (TRUE && !signal) {
[17:47:20.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.537]                     {
[17:47:20.537]                       inherits <- base::inherits
[17:47:20.537]                       invokeRestart <- base::invokeRestart
[17:47:20.537]                       is.null <- base::is.null
[17:47:20.537]                       muffled <- FALSE
[17:47:20.537]                       if (inherits(cond, "message")) {
[17:47:20.537]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.537]                         if (muffled) 
[17:47:20.537]                           invokeRestart("muffleMessage")
[17:47:20.537]                       }
[17:47:20.537]                       else if (inherits(cond, "warning")) {
[17:47:20.537]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.537]                         if (muffled) 
[17:47:20.537]                           invokeRestart("muffleWarning")
[17:47:20.537]                       }
[17:47:20.537]                       else if (inherits(cond, "condition")) {
[17:47:20.537]                         if (!is.null(pattern)) {
[17:47:20.537]                           computeRestarts <- base::computeRestarts
[17:47:20.537]                           grepl <- base::grepl
[17:47:20.537]                           restarts <- computeRestarts(cond)
[17:47:20.537]                           for (restart in restarts) {
[17:47:20.537]                             name <- restart$name
[17:47:20.537]                             if (is.null(name)) 
[17:47:20.537]                               next
[17:47:20.537]                             if (!grepl(pattern, name)) 
[17:47:20.537]                               next
[17:47:20.537]                             invokeRestart(restart)
[17:47:20.537]                             muffled <- TRUE
[17:47:20.537]                             break
[17:47:20.537]                           }
[17:47:20.537]                         }
[17:47:20.537]                       }
[17:47:20.537]                       invisible(muffled)
[17:47:20.537]                     }
[17:47:20.537]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.537]                   }
[17:47:20.537]                 }
[17:47:20.537]                 else {
[17:47:20.537]                   if (TRUE) {
[17:47:20.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.537]                     {
[17:47:20.537]                       inherits <- base::inherits
[17:47:20.537]                       invokeRestart <- base::invokeRestart
[17:47:20.537]                       is.null <- base::is.null
[17:47:20.537]                       muffled <- FALSE
[17:47:20.537]                       if (inherits(cond, "message")) {
[17:47:20.537]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.537]                         if (muffled) 
[17:47:20.537]                           invokeRestart("muffleMessage")
[17:47:20.537]                       }
[17:47:20.537]                       else if (inherits(cond, "warning")) {
[17:47:20.537]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.537]                         if (muffled) 
[17:47:20.537]                           invokeRestart("muffleWarning")
[17:47:20.537]                       }
[17:47:20.537]                       else if (inherits(cond, "condition")) {
[17:47:20.537]                         if (!is.null(pattern)) {
[17:47:20.537]                           computeRestarts <- base::computeRestarts
[17:47:20.537]                           grepl <- base::grepl
[17:47:20.537]                           restarts <- computeRestarts(cond)
[17:47:20.537]                           for (restart in restarts) {
[17:47:20.537]                             name <- restart$name
[17:47:20.537]                             if (is.null(name)) 
[17:47:20.537]                               next
[17:47:20.537]                             if (!grepl(pattern, name)) 
[17:47:20.537]                               next
[17:47:20.537]                             invokeRestart(restart)
[17:47:20.537]                             muffled <- TRUE
[17:47:20.537]                             break
[17:47:20.537]                           }
[17:47:20.537]                         }
[17:47:20.537]                       }
[17:47:20.537]                       invisible(muffled)
[17:47:20.537]                     }
[17:47:20.537]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.537]                   }
[17:47:20.537]                 }
[17:47:20.537]             }
[17:47:20.537]         }))
[17:47:20.537]     }, error = function(ex) {
[17:47:20.537]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.537]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.537]                 ...future.rng), started = ...future.startTime, 
[17:47:20.537]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.537]             version = "1.8"), class = "FutureResult")
[17:47:20.537]     }, finally = {
[17:47:20.537]         if (!identical(...future.workdir, getwd())) 
[17:47:20.537]             setwd(...future.workdir)
[17:47:20.537]         {
[17:47:20.537]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.537]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.537]             }
[17:47:20.537]             base::options(...future.oldOptions)
[17:47:20.537]             if (.Platform$OS.type == "windows") {
[17:47:20.537]                 old_names <- names(...future.oldEnvVars)
[17:47:20.537]                 envs <- base::Sys.getenv()
[17:47:20.537]                 names <- names(envs)
[17:47:20.537]                 common <- intersect(names, old_names)
[17:47:20.537]                 added <- setdiff(names, old_names)
[17:47:20.537]                 removed <- setdiff(old_names, names)
[17:47:20.537]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.537]                   envs[common]]
[17:47:20.537]                 NAMES <- toupper(changed)
[17:47:20.537]                 args <- list()
[17:47:20.537]                 for (kk in seq_along(NAMES)) {
[17:47:20.537]                   name <- changed[[kk]]
[17:47:20.537]                   NAME <- NAMES[[kk]]
[17:47:20.537]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.537]                     next
[17:47:20.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.537]                 }
[17:47:20.537]                 NAMES <- toupper(added)
[17:47:20.537]                 for (kk in seq_along(NAMES)) {
[17:47:20.537]                   name <- added[[kk]]
[17:47:20.537]                   NAME <- NAMES[[kk]]
[17:47:20.537]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.537]                     next
[17:47:20.537]                   args[[name]] <- ""
[17:47:20.537]                 }
[17:47:20.537]                 NAMES <- toupper(removed)
[17:47:20.537]                 for (kk in seq_along(NAMES)) {
[17:47:20.537]                   name <- removed[[kk]]
[17:47:20.537]                   NAME <- NAMES[[kk]]
[17:47:20.537]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.537]                     next
[17:47:20.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.537]                 }
[17:47:20.537]                 if (length(args) > 0) 
[17:47:20.537]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.537]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.537]             }
[17:47:20.537]             else {
[17:47:20.537]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.537]             }
[17:47:20.537]             {
[17:47:20.537]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.537]                   0L) {
[17:47:20.537]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.537]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.537]                   base::options(opts)
[17:47:20.537]                 }
[17:47:20.537]                 {
[17:47:20.537]                   {
[17:47:20.537]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.537]                     NULL
[17:47:20.537]                   }
[17:47:20.537]                   options(future.plan = NULL)
[17:47:20.537]                   if (is.na(NA_character_)) 
[17:47:20.537]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.537]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.537]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.537]                     .init = FALSE)
[17:47:20.537]                 }
[17:47:20.537]             }
[17:47:20.537]         }
[17:47:20.537]     })
[17:47:20.537]     if (TRUE) {
[17:47:20.537]         base::sink(type = "output", split = FALSE)
[17:47:20.537]         if (TRUE) {
[17:47:20.537]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.537]         }
[17:47:20.537]         else {
[17:47:20.537]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.537]         }
[17:47:20.537]         base::close(...future.stdout)
[17:47:20.537]         ...future.stdout <- NULL
[17:47:20.537]     }
[17:47:20.537]     ...future.result$conditions <- ...future.conditions
[17:47:20.537]     ...future.result$finished <- base::Sys.time()
[17:47:20.537]     ...future.result
[17:47:20.537] }
[17:47:20.589] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[17:47:20.589] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:47:20.590] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:47:20.590] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[17:47:20.590] MultisessionFuture started
 - Resolving 2 multisession futures
[17:47:20.591] result() for ClusterFuture ...
[17:47:20.591] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.591] - Validating connection of MultisessionFuture
[17:47:20.623] - received message: FutureResult
[17:47:20.623] - Received FutureResult
[17:47:20.624] - Erased future from FutureRegistry
[17:47:20.624] result() for ClusterFuture ...
[17:47:20.624] - result already collected: FutureResult
[17:47:20.624] result() for ClusterFuture ... done
[17:47:20.624] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:20.624] result() for ClusterFuture ... done
[17:47:20.624] result() for ClusterFuture ...
[17:47:20.624] - result already collected: FutureResult
[17:47:20.625] result() for ClusterFuture ... done
[17:47:20.625] result() for ClusterFuture ...
[17:47:20.625] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.625] - Validating connection of MultisessionFuture
[17:47:20.625] - received message: FutureResult
[17:47:20.625] - Received FutureResult
[17:47:20.625] - Erased future from FutureRegistry
[17:47:20.626] result() for ClusterFuture ...
[17:47:20.626] - result already collected: FutureResult
[17:47:20.626] result() for ClusterFuture ... done
[17:47:20.626] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:20.626] result() for ClusterFuture ... done
[17:47:20.626] result() for ClusterFuture ...
[17:47:20.626] - result already collected: FutureResult
[17:47:20.626] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[17:47:20.627] getGlobalsAndPackages() ...
[17:47:20.627] Searching for globals...
[17:47:20.627] - globals found: [1] ‘.libPaths’
[17:47:20.628] Searching for globals ... DONE
[17:47:20.628] Resolving globals: FALSE
[17:47:20.628] 
[17:47:20.628] 
[17:47:20.628] getGlobalsAndPackages() ... DONE
[17:47:20.629] run() for ‘Future’ ...
[17:47:20.629] - state: ‘created’
[17:47:20.629] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:47:20.629] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:20.629] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:47:20.629]   - Field: ‘label’
[17:47:20.630]   - Field: ‘local’
[17:47:20.630]   - Field: ‘owner’
[17:47:20.630]   - Field: ‘envir’
[17:47:20.630]   - Field: ‘packages’
[17:47:20.630]   - Field: ‘gc’
[17:47:20.630]   - Field: ‘conditions’
[17:47:20.630]   - Field: ‘expr’
[17:47:20.630]   - Field: ‘uuid’
[17:47:20.630]   - Field: ‘seed’
[17:47:20.631]   - Field: ‘version’
[17:47:20.631]   - Field: ‘result’
[17:47:20.631]   - Field: ‘asynchronous’
[17:47:20.631]   - Field: ‘calls’
[17:47:20.631]   - Field: ‘globals’
[17:47:20.631]   - Field: ‘stdout’
[17:47:20.631]   - Field: ‘earlySignal’
[17:47:20.631]   - Field: ‘lazy’
[17:47:20.632]   - Field: ‘state’
[17:47:20.632] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:47:20.632] - Launch lazy future ...
[17:47:20.632] Packages needed by the future expression (n = 0): <none>
[17:47:20.632] Packages needed by future strategies (n = 0): <none>
[17:47:20.633] {
[17:47:20.633]     {
[17:47:20.633]         {
[17:47:20.633]             ...future.startTime <- base::Sys.time()
[17:47:20.633]             {
[17:47:20.633]                 {
[17:47:20.633]                   {
[17:47:20.633]                     base::local({
[17:47:20.633]                       has_future <- base::requireNamespace("future", 
[17:47:20.633]                         quietly = TRUE)
[17:47:20.633]                       if (has_future) {
[17:47:20.633]                         ns <- base::getNamespace("future")
[17:47:20.633]                         version <- ns[[".package"]][["version"]]
[17:47:20.633]                         if (is.null(version)) 
[17:47:20.633]                           version <- utils::packageVersion("future")
[17:47:20.633]                       }
[17:47:20.633]                       else {
[17:47:20.633]                         version <- NULL
[17:47:20.633]                       }
[17:47:20.633]                       if (!has_future || version < "1.8.0") {
[17:47:20.633]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.633]                           "", base::R.version$version.string), 
[17:47:20.633]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:20.633]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.633]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.633]                             "release", "version")], collapse = " "), 
[17:47:20.633]                           hostname = base::Sys.info()[["nodename"]])
[17:47:20.633]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.633]                           info)
[17:47:20.633]                         info <- base::paste(info, collapse = "; ")
[17:47:20.633]                         if (!has_future) {
[17:47:20.633]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.633]                             info)
[17:47:20.633]                         }
[17:47:20.633]                         else {
[17:47:20.633]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.633]                             info, version)
[17:47:20.633]                         }
[17:47:20.633]                         base::stop(msg)
[17:47:20.633]                       }
[17:47:20.633]                     })
[17:47:20.633]                   }
[17:47:20.633]                   ...future.strategy.old <- future::plan("list")
[17:47:20.633]                   options(future.plan = NULL)
[17:47:20.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.633]                 }
[17:47:20.633]                 ...future.workdir <- getwd()
[17:47:20.633]             }
[17:47:20.633]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.633]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.633]         }
[17:47:20.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.633]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.633]             base::names(...future.oldOptions))
[17:47:20.633]     }
[17:47:20.633]     if (FALSE) {
[17:47:20.633]     }
[17:47:20.633]     else {
[17:47:20.633]         if (TRUE) {
[17:47:20.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.633]                 open = "w")
[17:47:20.633]         }
[17:47:20.633]         else {
[17:47:20.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.633]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.633]         }
[17:47:20.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.633]             base::sink(type = "output", split = FALSE)
[17:47:20.633]             base::close(...future.stdout)
[17:47:20.633]         }, add = TRUE)
[17:47:20.633]     }
[17:47:20.633]     ...future.frame <- base::sys.nframe()
[17:47:20.633]     ...future.conditions <- base::list()
[17:47:20.633]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.633]     if (FALSE) {
[17:47:20.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.633]     }
[17:47:20.633]     ...future.result <- base::tryCatch({
[17:47:20.633]         base::withCallingHandlers({
[17:47:20.633]             ...future.value <- base::withVisible(base::local(.libPaths()))
[17:47:20.633]             future::FutureResult(value = ...future.value$value, 
[17:47:20.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.633]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.633]                     ...future.globalenv.names))
[17:47:20.633]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.633]         }, condition = base::local({
[17:47:20.633]             c <- base::c
[17:47:20.633]             inherits <- base::inherits
[17:47:20.633]             invokeRestart <- base::invokeRestart
[17:47:20.633]             length <- base::length
[17:47:20.633]             list <- base::list
[17:47:20.633]             seq.int <- base::seq.int
[17:47:20.633]             signalCondition <- base::signalCondition
[17:47:20.633]             sys.calls <- base::sys.calls
[17:47:20.633]             `[[` <- base::`[[`
[17:47:20.633]             `+` <- base::`+`
[17:47:20.633]             `<<-` <- base::`<<-`
[17:47:20.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.633]                   3L)]
[17:47:20.633]             }
[17:47:20.633]             function(cond) {
[17:47:20.633]                 is_error <- inherits(cond, "error")
[17:47:20.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.633]                   NULL)
[17:47:20.633]                 if (is_error) {
[17:47:20.633]                   sessionInformation <- function() {
[17:47:20.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.633]                       search = base::search(), system = base::Sys.info())
[17:47:20.633]                   }
[17:47:20.633]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.633]                     cond$call), session = sessionInformation(), 
[17:47:20.633]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.633]                   signalCondition(cond)
[17:47:20.633]                 }
[17:47:20.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.633]                 "immediateCondition"))) {
[17:47:20.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.633]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.633]                   if (TRUE && !signal) {
[17:47:20.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.633]                     {
[17:47:20.633]                       inherits <- base::inherits
[17:47:20.633]                       invokeRestart <- base::invokeRestart
[17:47:20.633]                       is.null <- base::is.null
[17:47:20.633]                       muffled <- FALSE
[17:47:20.633]                       if (inherits(cond, "message")) {
[17:47:20.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.633]                         if (muffled) 
[17:47:20.633]                           invokeRestart("muffleMessage")
[17:47:20.633]                       }
[17:47:20.633]                       else if (inherits(cond, "warning")) {
[17:47:20.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.633]                         if (muffled) 
[17:47:20.633]                           invokeRestart("muffleWarning")
[17:47:20.633]                       }
[17:47:20.633]                       else if (inherits(cond, "condition")) {
[17:47:20.633]                         if (!is.null(pattern)) {
[17:47:20.633]                           computeRestarts <- base::computeRestarts
[17:47:20.633]                           grepl <- base::grepl
[17:47:20.633]                           restarts <- computeRestarts(cond)
[17:47:20.633]                           for (restart in restarts) {
[17:47:20.633]                             name <- restart$name
[17:47:20.633]                             if (is.null(name)) 
[17:47:20.633]                               next
[17:47:20.633]                             if (!grepl(pattern, name)) 
[17:47:20.633]                               next
[17:47:20.633]                             invokeRestart(restart)
[17:47:20.633]                             muffled <- TRUE
[17:47:20.633]                             break
[17:47:20.633]                           }
[17:47:20.633]                         }
[17:47:20.633]                       }
[17:47:20.633]                       invisible(muffled)
[17:47:20.633]                     }
[17:47:20.633]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.633]                   }
[17:47:20.633]                 }
[17:47:20.633]                 else {
[17:47:20.633]                   if (TRUE) {
[17:47:20.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.633]                     {
[17:47:20.633]                       inherits <- base::inherits
[17:47:20.633]                       invokeRestart <- base::invokeRestart
[17:47:20.633]                       is.null <- base::is.null
[17:47:20.633]                       muffled <- FALSE
[17:47:20.633]                       if (inherits(cond, "message")) {
[17:47:20.633]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.633]                         if (muffled) 
[17:47:20.633]                           invokeRestart("muffleMessage")
[17:47:20.633]                       }
[17:47:20.633]                       else if (inherits(cond, "warning")) {
[17:47:20.633]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.633]                         if (muffled) 
[17:47:20.633]                           invokeRestart("muffleWarning")
[17:47:20.633]                       }
[17:47:20.633]                       else if (inherits(cond, "condition")) {
[17:47:20.633]                         if (!is.null(pattern)) {
[17:47:20.633]                           computeRestarts <- base::computeRestarts
[17:47:20.633]                           grepl <- base::grepl
[17:47:20.633]                           restarts <- computeRestarts(cond)
[17:47:20.633]                           for (restart in restarts) {
[17:47:20.633]                             name <- restart$name
[17:47:20.633]                             if (is.null(name)) 
[17:47:20.633]                               next
[17:47:20.633]                             if (!grepl(pattern, name)) 
[17:47:20.633]                               next
[17:47:20.633]                             invokeRestart(restart)
[17:47:20.633]                             muffled <- TRUE
[17:47:20.633]                             break
[17:47:20.633]                           }
[17:47:20.633]                         }
[17:47:20.633]                       }
[17:47:20.633]                       invisible(muffled)
[17:47:20.633]                     }
[17:47:20.633]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.633]                   }
[17:47:20.633]                 }
[17:47:20.633]             }
[17:47:20.633]         }))
[17:47:20.633]     }, error = function(ex) {
[17:47:20.633]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.633]                 ...future.rng), started = ...future.startTime, 
[17:47:20.633]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.633]             version = "1.8"), class = "FutureResult")
[17:47:20.633]     }, finally = {
[17:47:20.633]         if (!identical(...future.workdir, getwd())) 
[17:47:20.633]             setwd(...future.workdir)
[17:47:20.633]         {
[17:47:20.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.633]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.633]             }
[17:47:20.633]             base::options(...future.oldOptions)
[17:47:20.633]             if (.Platform$OS.type == "windows") {
[17:47:20.633]                 old_names <- names(...future.oldEnvVars)
[17:47:20.633]                 envs <- base::Sys.getenv()
[17:47:20.633]                 names <- names(envs)
[17:47:20.633]                 common <- intersect(names, old_names)
[17:47:20.633]                 added <- setdiff(names, old_names)
[17:47:20.633]                 removed <- setdiff(old_names, names)
[17:47:20.633]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.633]                   envs[common]]
[17:47:20.633]                 NAMES <- toupper(changed)
[17:47:20.633]                 args <- list()
[17:47:20.633]                 for (kk in seq_along(NAMES)) {
[17:47:20.633]                   name <- changed[[kk]]
[17:47:20.633]                   NAME <- NAMES[[kk]]
[17:47:20.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.633]                     next
[17:47:20.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.633]                 }
[17:47:20.633]                 NAMES <- toupper(added)
[17:47:20.633]                 for (kk in seq_along(NAMES)) {
[17:47:20.633]                   name <- added[[kk]]
[17:47:20.633]                   NAME <- NAMES[[kk]]
[17:47:20.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.633]                     next
[17:47:20.633]                   args[[name]] <- ""
[17:47:20.633]                 }
[17:47:20.633]                 NAMES <- toupper(removed)
[17:47:20.633]                 for (kk in seq_along(NAMES)) {
[17:47:20.633]                   name <- removed[[kk]]
[17:47:20.633]                   NAME <- NAMES[[kk]]
[17:47:20.633]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.633]                     next
[17:47:20.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.633]                 }
[17:47:20.633]                 if (length(args) > 0) 
[17:47:20.633]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.633]             }
[17:47:20.633]             else {
[17:47:20.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.633]             }
[17:47:20.633]             {
[17:47:20.633]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.633]                   0L) {
[17:47:20.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.633]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.633]                   base::options(opts)
[17:47:20.633]                 }
[17:47:20.633]                 {
[17:47:20.633]                   {
[17:47:20.633]                     NULL
[17:47:20.633]                     RNGkind("Mersenne-Twister")
[17:47:20.633]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:20.633]                       inherits = FALSE)
[17:47:20.633]                   }
[17:47:20.633]                   options(future.plan = NULL)
[17:47:20.633]                   if (is.na(NA_character_)) 
[17:47:20.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.633]                     .init = FALSE)
[17:47:20.633]                 }
[17:47:20.633]             }
[17:47:20.633]         }
[17:47:20.633]     })
[17:47:20.633]     if (TRUE) {
[17:47:20.633]         base::sink(type = "output", split = FALSE)
[17:47:20.633]         if (TRUE) {
[17:47:20.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.633]         }
[17:47:20.633]         else {
[17:47:20.633]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.633]         }
[17:47:20.633]         base::close(...future.stdout)
[17:47:20.633]         ...future.stdout <- NULL
[17:47:20.633]     }
[17:47:20.633]     ...future.result$conditions <- ...future.conditions
[17:47:20.633]     ...future.result$finished <- base::Sys.time()
[17:47:20.633]     ...future.result
[17:47:20.633] }
[17:47:20.635] plan(): Setting new future strategy stack:
[17:47:20.635] List of future strategies:
[17:47:20.635] 1. sequential:
[17:47:20.635]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:20.635]    - tweaked: FALSE
[17:47:20.635]    - call: NULL
[17:47:20.635] plan(): nbrOfWorkers() = 1
[17:47:20.638] plan(): Setting new future strategy stack:
[17:47:20.639] List of future strategies:
[17:47:20.639] 1. sequential:
[17:47:20.639]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:20.639]    - tweaked: FALSE
[17:47:20.639]    - call: future::plan("sequential")
[17:47:20.639] plan(): nbrOfWorkers() = 1
[17:47:20.639] SequentialFuture started (and completed)
[17:47:20.639] - Launch lazy future ... done
[17:47:20.639] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[17:47:20.644] getGlobalsAndPackages() ...
[17:47:20.644] 
[17:47:20.644] - globals: [0] <none>
[17:47:20.644] getGlobalsAndPackages() ... DONE
[17:47:20.655] Packages needed by the future expression (n = 0): <none>
[17:47:20.655] Packages needed by future strategies (n = 0): <none>
[17:47:20.656] {
[17:47:20.656]     {
[17:47:20.656]         {
[17:47:20.656]             ...future.startTime <- base::Sys.time()
[17:47:20.656]             {
[17:47:20.656]                 {
[17:47:20.656]                   {
[17:47:20.656]                     {
[17:47:20.656]                       base::local({
[17:47:20.656]                         has_future <- base::requireNamespace("future", 
[17:47:20.656]                           quietly = TRUE)
[17:47:20.656]                         if (has_future) {
[17:47:20.656]                           ns <- base::getNamespace("future")
[17:47:20.656]                           version <- ns[[".package"]][["version"]]
[17:47:20.656]                           if (is.null(version)) 
[17:47:20.656]                             version <- utils::packageVersion("future")
[17:47:20.656]                         }
[17:47:20.656]                         else {
[17:47:20.656]                           version <- NULL
[17:47:20.656]                         }
[17:47:20.656]                         if (!has_future || version < "1.8.0") {
[17:47:20.656]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.656]                             "", base::R.version$version.string), 
[17:47:20.656]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.656]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.656]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.656]                               "release", "version")], collapse = " "), 
[17:47:20.656]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.656]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.656]                             info)
[17:47:20.656]                           info <- base::paste(info, collapse = "; ")
[17:47:20.656]                           if (!has_future) {
[17:47:20.656]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.656]                               info)
[17:47:20.656]                           }
[17:47:20.656]                           else {
[17:47:20.656]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.656]                               info, version)
[17:47:20.656]                           }
[17:47:20.656]                           base::stop(msg)
[17:47:20.656]                         }
[17:47:20.656]                       })
[17:47:20.656]                     }
[17:47:20.656]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.656]                     base::options(mc.cores = 1L)
[17:47:20.656]                   }
[17:47:20.656]                   ...future.strategy.old <- future::plan("list")
[17:47:20.656]                   options(future.plan = NULL)
[17:47:20.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.656]                 }
[17:47:20.656]                 ...future.workdir <- getwd()
[17:47:20.656]             }
[17:47:20.656]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.656]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.656]         }
[17:47:20.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.656]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.656]             base::names(...future.oldOptions))
[17:47:20.656]     }
[17:47:20.656]     if (FALSE) {
[17:47:20.656]     }
[17:47:20.656]     else {
[17:47:20.656]         if (TRUE) {
[17:47:20.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.656]                 open = "w")
[17:47:20.656]         }
[17:47:20.656]         else {
[17:47:20.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.656]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.656]         }
[17:47:20.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.656]             base::sink(type = "output", split = FALSE)
[17:47:20.656]             base::close(...future.stdout)
[17:47:20.656]         }, add = TRUE)
[17:47:20.656]     }
[17:47:20.656]     ...future.frame <- base::sys.nframe()
[17:47:20.656]     ...future.conditions <- base::list()
[17:47:20.656]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.656]     if (FALSE) {
[17:47:20.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.656]     }
[17:47:20.656]     ...future.result <- base::tryCatch({
[17:47:20.656]         base::withCallingHandlers({
[17:47:20.656]             ...future.value <- base::withVisible(base::local({
[17:47:20.656]                 ...future.makeSendCondition <- base::local({
[17:47:20.656]                   sendCondition <- NULL
[17:47:20.656]                   function(frame = 1L) {
[17:47:20.656]                     if (is.function(sendCondition)) 
[17:47:20.656]                       return(sendCondition)
[17:47:20.656]                     ns <- getNamespace("parallel")
[17:47:20.656]                     if (exists("sendData", mode = "function", 
[17:47:20.656]                       envir = ns)) {
[17:47:20.656]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.656]                         envir = ns)
[17:47:20.656]                       envir <- sys.frame(frame)
[17:47:20.656]                       master <- NULL
[17:47:20.656]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.656]                         !identical(envir, emptyenv())) {
[17:47:20.656]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.656]                           inherits = FALSE)) {
[17:47:20.656]                           master <- get("master", mode = "list", 
[17:47:20.656]                             envir = envir, inherits = FALSE)
[17:47:20.656]                           if (inherits(master, c("SOCKnode", 
[17:47:20.656]                             "SOCK0node"))) {
[17:47:20.656]                             sendCondition <<- function(cond) {
[17:47:20.656]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.656]                                 success = TRUE)
[17:47:20.656]                               parallel_sendData(master, data)
[17:47:20.656]                             }
[17:47:20.656]                             return(sendCondition)
[17:47:20.656]                           }
[17:47:20.656]                         }
[17:47:20.656]                         frame <- frame + 1L
[17:47:20.656]                         envir <- sys.frame(frame)
[17:47:20.656]                       }
[17:47:20.656]                     }
[17:47:20.656]                     sendCondition <<- function(cond) NULL
[17:47:20.656]                   }
[17:47:20.656]                 })
[17:47:20.656]                 withCallingHandlers({
[17:47:20.656]                   {
[17:47:20.656]                     stop("Whoops!")
[17:47:20.656]                     1
[17:47:20.656]                   }
[17:47:20.656]                 }, immediateCondition = function(cond) {
[17:47:20.656]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.656]                   sendCondition(cond)
[17:47:20.656]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.656]                   {
[17:47:20.656]                     inherits <- base::inherits
[17:47:20.656]                     invokeRestart <- base::invokeRestart
[17:47:20.656]                     is.null <- base::is.null
[17:47:20.656]                     muffled <- FALSE
[17:47:20.656]                     if (inherits(cond, "message")) {
[17:47:20.656]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.656]                       if (muffled) 
[17:47:20.656]                         invokeRestart("muffleMessage")
[17:47:20.656]                     }
[17:47:20.656]                     else if (inherits(cond, "warning")) {
[17:47:20.656]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.656]                       if (muffled) 
[17:47:20.656]                         invokeRestart("muffleWarning")
[17:47:20.656]                     }
[17:47:20.656]                     else if (inherits(cond, "condition")) {
[17:47:20.656]                       if (!is.null(pattern)) {
[17:47:20.656]                         computeRestarts <- base::computeRestarts
[17:47:20.656]                         grepl <- base::grepl
[17:47:20.656]                         restarts <- computeRestarts(cond)
[17:47:20.656]                         for (restart in restarts) {
[17:47:20.656]                           name <- restart$name
[17:47:20.656]                           if (is.null(name)) 
[17:47:20.656]                             next
[17:47:20.656]                           if (!grepl(pattern, name)) 
[17:47:20.656]                             next
[17:47:20.656]                           invokeRestart(restart)
[17:47:20.656]                           muffled <- TRUE
[17:47:20.656]                           break
[17:47:20.656]                         }
[17:47:20.656]                       }
[17:47:20.656]                     }
[17:47:20.656]                     invisible(muffled)
[17:47:20.656]                   }
[17:47:20.656]                   muffleCondition(cond)
[17:47:20.656]                 })
[17:47:20.656]             }))
[17:47:20.656]             future::FutureResult(value = ...future.value$value, 
[17:47:20.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.656]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.656]                     ...future.globalenv.names))
[17:47:20.656]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.656]         }, condition = base::local({
[17:47:20.656]             c <- base::c
[17:47:20.656]             inherits <- base::inherits
[17:47:20.656]             invokeRestart <- base::invokeRestart
[17:47:20.656]             length <- base::length
[17:47:20.656]             list <- base::list
[17:47:20.656]             seq.int <- base::seq.int
[17:47:20.656]             signalCondition <- base::signalCondition
[17:47:20.656]             sys.calls <- base::sys.calls
[17:47:20.656]             `[[` <- base::`[[`
[17:47:20.656]             `+` <- base::`+`
[17:47:20.656]             `<<-` <- base::`<<-`
[17:47:20.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.656]                   3L)]
[17:47:20.656]             }
[17:47:20.656]             function(cond) {
[17:47:20.656]                 is_error <- inherits(cond, "error")
[17:47:20.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.656]                   NULL)
[17:47:20.656]                 if (is_error) {
[17:47:20.656]                   sessionInformation <- function() {
[17:47:20.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.656]                       search = base::search(), system = base::Sys.info())
[17:47:20.656]                   }
[17:47:20.656]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.656]                     cond$call), session = sessionInformation(), 
[17:47:20.656]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.656]                   signalCondition(cond)
[17:47:20.656]                 }
[17:47:20.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.656]                 "immediateCondition"))) {
[17:47:20.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.656]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.656]                   if (TRUE && !signal) {
[17:47:20.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.656]                     {
[17:47:20.656]                       inherits <- base::inherits
[17:47:20.656]                       invokeRestart <- base::invokeRestart
[17:47:20.656]                       is.null <- base::is.null
[17:47:20.656]                       muffled <- FALSE
[17:47:20.656]                       if (inherits(cond, "message")) {
[17:47:20.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.656]                         if (muffled) 
[17:47:20.656]                           invokeRestart("muffleMessage")
[17:47:20.656]                       }
[17:47:20.656]                       else if (inherits(cond, "warning")) {
[17:47:20.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.656]                         if (muffled) 
[17:47:20.656]                           invokeRestart("muffleWarning")
[17:47:20.656]                       }
[17:47:20.656]                       else if (inherits(cond, "condition")) {
[17:47:20.656]                         if (!is.null(pattern)) {
[17:47:20.656]                           computeRestarts <- base::computeRestarts
[17:47:20.656]                           grepl <- base::grepl
[17:47:20.656]                           restarts <- computeRestarts(cond)
[17:47:20.656]                           for (restart in restarts) {
[17:47:20.656]                             name <- restart$name
[17:47:20.656]                             if (is.null(name)) 
[17:47:20.656]                               next
[17:47:20.656]                             if (!grepl(pattern, name)) 
[17:47:20.656]                               next
[17:47:20.656]                             invokeRestart(restart)
[17:47:20.656]                             muffled <- TRUE
[17:47:20.656]                             break
[17:47:20.656]                           }
[17:47:20.656]                         }
[17:47:20.656]                       }
[17:47:20.656]                       invisible(muffled)
[17:47:20.656]                     }
[17:47:20.656]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.656]                   }
[17:47:20.656]                 }
[17:47:20.656]                 else {
[17:47:20.656]                   if (TRUE) {
[17:47:20.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.656]                     {
[17:47:20.656]                       inherits <- base::inherits
[17:47:20.656]                       invokeRestart <- base::invokeRestart
[17:47:20.656]                       is.null <- base::is.null
[17:47:20.656]                       muffled <- FALSE
[17:47:20.656]                       if (inherits(cond, "message")) {
[17:47:20.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.656]                         if (muffled) 
[17:47:20.656]                           invokeRestart("muffleMessage")
[17:47:20.656]                       }
[17:47:20.656]                       else if (inherits(cond, "warning")) {
[17:47:20.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.656]                         if (muffled) 
[17:47:20.656]                           invokeRestart("muffleWarning")
[17:47:20.656]                       }
[17:47:20.656]                       else if (inherits(cond, "condition")) {
[17:47:20.656]                         if (!is.null(pattern)) {
[17:47:20.656]                           computeRestarts <- base::computeRestarts
[17:47:20.656]                           grepl <- base::grepl
[17:47:20.656]                           restarts <- computeRestarts(cond)
[17:47:20.656]                           for (restart in restarts) {
[17:47:20.656]                             name <- restart$name
[17:47:20.656]                             if (is.null(name)) 
[17:47:20.656]                               next
[17:47:20.656]                             if (!grepl(pattern, name)) 
[17:47:20.656]                               next
[17:47:20.656]                             invokeRestart(restart)
[17:47:20.656]                             muffled <- TRUE
[17:47:20.656]                             break
[17:47:20.656]                           }
[17:47:20.656]                         }
[17:47:20.656]                       }
[17:47:20.656]                       invisible(muffled)
[17:47:20.656]                     }
[17:47:20.656]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.656]                   }
[17:47:20.656]                 }
[17:47:20.656]             }
[17:47:20.656]         }))
[17:47:20.656]     }, error = function(ex) {
[17:47:20.656]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.656]                 ...future.rng), started = ...future.startTime, 
[17:47:20.656]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.656]             version = "1.8"), class = "FutureResult")
[17:47:20.656]     }, finally = {
[17:47:20.656]         if (!identical(...future.workdir, getwd())) 
[17:47:20.656]             setwd(...future.workdir)
[17:47:20.656]         {
[17:47:20.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.656]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.656]             }
[17:47:20.656]             base::options(...future.oldOptions)
[17:47:20.656]             if (.Platform$OS.type == "windows") {
[17:47:20.656]                 old_names <- names(...future.oldEnvVars)
[17:47:20.656]                 envs <- base::Sys.getenv()
[17:47:20.656]                 names <- names(envs)
[17:47:20.656]                 common <- intersect(names, old_names)
[17:47:20.656]                 added <- setdiff(names, old_names)
[17:47:20.656]                 removed <- setdiff(old_names, names)
[17:47:20.656]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.656]                   envs[common]]
[17:47:20.656]                 NAMES <- toupper(changed)
[17:47:20.656]                 args <- list()
[17:47:20.656]                 for (kk in seq_along(NAMES)) {
[17:47:20.656]                   name <- changed[[kk]]
[17:47:20.656]                   NAME <- NAMES[[kk]]
[17:47:20.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.656]                     next
[17:47:20.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.656]                 }
[17:47:20.656]                 NAMES <- toupper(added)
[17:47:20.656]                 for (kk in seq_along(NAMES)) {
[17:47:20.656]                   name <- added[[kk]]
[17:47:20.656]                   NAME <- NAMES[[kk]]
[17:47:20.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.656]                     next
[17:47:20.656]                   args[[name]] <- ""
[17:47:20.656]                 }
[17:47:20.656]                 NAMES <- toupper(removed)
[17:47:20.656]                 for (kk in seq_along(NAMES)) {
[17:47:20.656]                   name <- removed[[kk]]
[17:47:20.656]                   NAME <- NAMES[[kk]]
[17:47:20.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.656]                     next
[17:47:20.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.656]                 }
[17:47:20.656]                 if (length(args) > 0) 
[17:47:20.656]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.656]             }
[17:47:20.656]             else {
[17:47:20.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.656]             }
[17:47:20.656]             {
[17:47:20.656]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.656]                   0L) {
[17:47:20.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.656]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.656]                   base::options(opts)
[17:47:20.656]                 }
[17:47:20.656]                 {
[17:47:20.656]                   {
[17:47:20.656]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.656]                     NULL
[17:47:20.656]                   }
[17:47:20.656]                   options(future.plan = NULL)
[17:47:20.656]                   if (is.na(NA_character_)) 
[17:47:20.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.656]                     .init = FALSE)
[17:47:20.656]                 }
[17:47:20.656]             }
[17:47:20.656]         }
[17:47:20.656]     })
[17:47:20.656]     if (TRUE) {
[17:47:20.656]         base::sink(type = "output", split = FALSE)
[17:47:20.656]         if (TRUE) {
[17:47:20.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.656]         }
[17:47:20.656]         else {
[17:47:20.656]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.656]         }
[17:47:20.656]         base::close(...future.stdout)
[17:47:20.656]         ...future.stdout <- NULL
[17:47:20.656]     }
[17:47:20.656]     ...future.result$conditions <- ...future.conditions
[17:47:20.656]     ...future.result$finished <- base::Sys.time()
[17:47:20.656]     ...future.result
[17:47:20.656] }
[17:47:20.659] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:20.661] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.661] - Validating connection of MultisessionFuture
[17:47:20.661] - received message: FutureResult
[17:47:20.661] - Received FutureResult
[17:47:20.662] - Erased future from FutureRegistry
[17:47:20.662] result() for ClusterFuture ...
[17:47:20.662] - result already collected: FutureResult
[17:47:20.662] result() for ClusterFuture ... done
[17:47:20.662] signalConditions() ...
[17:47:20.662]  - include = ‘immediateCondition’
[17:47:20.662]  - exclude = 
[17:47:20.662]  - resignal = FALSE
[17:47:20.662]  - Number of conditions: 1
[17:47:20.662] signalConditions() ... done
[17:47:20.662] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:20.663] result() for ClusterFuture ...
[17:47:20.663] - result already collected: FutureResult
[17:47:20.663] result() for ClusterFuture ... done
[17:47:20.663] result() for ClusterFuture ...
[17:47:20.663] - result already collected: FutureResult
[17:47:20.663] result() for ClusterFuture ... done
[17:47:20.663] signalConditions() ...
[17:47:20.663]  - include = ‘immediateCondition’
[17:47:20.663]  - exclude = 
[17:47:20.663]  - resignal = FALSE
[17:47:20.663]  - Number of conditions: 1
[17:47:20.664] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:20.664] result() for ClusterFuture ...
[17:47:20.664] - result already collected: FutureResult
[17:47:20.664] result() for ClusterFuture ... done
[17:47:20.664] result() for ClusterFuture ...
[17:47:20.664] - result already collected: FutureResult
[17:47:20.664] result() for ClusterFuture ... done
[17:47:20.664] signalConditions() ...
[17:47:20.665]  - include = ‘immediateCondition’
[17:47:20.665]  - exclude = 
[17:47:20.665]  - resignal = FALSE
[17:47:20.665]  - Number of conditions: 1
[17:47:20.665] signalConditions() ... done
[17:47:20.665] Future state: ‘finished’
[17:47:20.665] result() for ClusterFuture ...
[17:47:20.665] - result already collected: FutureResult
[17:47:20.665] result() for ClusterFuture ... done
[17:47:20.665] signalConditions() ...
[17:47:20.665]  - include = ‘condition’
[17:47:20.665]  - exclude = ‘immediateCondition’
[17:47:20.666]  - resignal = TRUE
[17:47:20.666]  - Number of conditions: 1
[17:47:20.666]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:20.666] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:20.666] result() for ClusterFuture ...
[17:47:20.666] - result already collected: FutureResult
[17:47:20.667] result() for ClusterFuture ... done
[17:47:20.667] result() for ClusterFuture ...
[17:47:20.667] - result already collected: FutureResult
[17:47:20.667] result() for ClusterFuture ... done
[17:47:20.667] signalConditions() ...
[17:47:20.667]  - include = ‘immediateCondition’
[17:47:20.667]  - exclude = 
[17:47:20.667]  - resignal = FALSE
[17:47:20.667]  - Number of conditions: 1
[17:47:20.667] signalConditions() ... done
[17:47:20.667] Future state: ‘finished’
[17:47:20.668] result() for ClusterFuture ...
[17:47:20.668] - result already collected: FutureResult
[17:47:20.668] result() for ClusterFuture ... done
[17:47:20.668] signalConditions() ...
[17:47:20.668]  - include = ‘condition’
[17:47:20.668]  - exclude = ‘immediateCondition’
[17:47:20.668]  - resignal = TRUE
[17:47:20.668]  - Number of conditions: 1
[17:47:20.668]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:20.668] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:20.672] getGlobalsAndPackages() ...
[17:47:20.672] 
[17:47:20.672] - globals: [0] <none>
[17:47:20.673] getGlobalsAndPackages() ... DONE
[17:47:20.683] Packages needed by the future expression (n = 0): <none>
[17:47:20.683] Packages needed by future strategies (n = 0): <none>
[17:47:20.684] {
[17:47:20.684]     {
[17:47:20.684]         {
[17:47:20.684]             ...future.startTime <- base::Sys.time()
[17:47:20.684]             {
[17:47:20.684]                 {
[17:47:20.684]                   {
[17:47:20.684]                     {
[17:47:20.684]                       base::local({
[17:47:20.684]                         has_future <- base::requireNamespace("future", 
[17:47:20.684]                           quietly = TRUE)
[17:47:20.684]                         if (has_future) {
[17:47:20.684]                           ns <- base::getNamespace("future")
[17:47:20.684]                           version <- ns[[".package"]][["version"]]
[17:47:20.684]                           if (is.null(version)) 
[17:47:20.684]                             version <- utils::packageVersion("future")
[17:47:20.684]                         }
[17:47:20.684]                         else {
[17:47:20.684]                           version <- NULL
[17:47:20.684]                         }
[17:47:20.684]                         if (!has_future || version < "1.8.0") {
[17:47:20.684]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.684]                             "", base::R.version$version.string), 
[17:47:20.684]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.684]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.684]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.684]                               "release", "version")], collapse = " "), 
[17:47:20.684]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.684]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.684]                             info)
[17:47:20.684]                           info <- base::paste(info, collapse = "; ")
[17:47:20.684]                           if (!has_future) {
[17:47:20.684]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.684]                               info)
[17:47:20.684]                           }
[17:47:20.684]                           else {
[17:47:20.684]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.684]                               info, version)
[17:47:20.684]                           }
[17:47:20.684]                           base::stop(msg)
[17:47:20.684]                         }
[17:47:20.684]                       })
[17:47:20.684]                     }
[17:47:20.684]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.684]                     base::options(mc.cores = 1L)
[17:47:20.684]                   }
[17:47:20.684]                   ...future.strategy.old <- future::plan("list")
[17:47:20.684]                   options(future.plan = NULL)
[17:47:20.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.684]                 }
[17:47:20.684]                 ...future.workdir <- getwd()
[17:47:20.684]             }
[17:47:20.684]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.684]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.684]         }
[17:47:20.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.684]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.684]             base::names(...future.oldOptions))
[17:47:20.684]     }
[17:47:20.684]     if (FALSE) {
[17:47:20.684]     }
[17:47:20.684]     else {
[17:47:20.684]         if (TRUE) {
[17:47:20.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.684]                 open = "w")
[17:47:20.684]         }
[17:47:20.684]         else {
[17:47:20.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.684]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.684]         }
[17:47:20.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.684]             base::sink(type = "output", split = FALSE)
[17:47:20.684]             base::close(...future.stdout)
[17:47:20.684]         }, add = TRUE)
[17:47:20.684]     }
[17:47:20.684]     ...future.frame <- base::sys.nframe()
[17:47:20.684]     ...future.conditions <- base::list()
[17:47:20.684]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.684]     if (FALSE) {
[17:47:20.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.684]     }
[17:47:20.684]     ...future.result <- base::tryCatch({
[17:47:20.684]         base::withCallingHandlers({
[17:47:20.684]             ...future.value <- base::withVisible(base::local({
[17:47:20.684]                 ...future.makeSendCondition <- base::local({
[17:47:20.684]                   sendCondition <- NULL
[17:47:20.684]                   function(frame = 1L) {
[17:47:20.684]                     if (is.function(sendCondition)) 
[17:47:20.684]                       return(sendCondition)
[17:47:20.684]                     ns <- getNamespace("parallel")
[17:47:20.684]                     if (exists("sendData", mode = "function", 
[17:47:20.684]                       envir = ns)) {
[17:47:20.684]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.684]                         envir = ns)
[17:47:20.684]                       envir <- sys.frame(frame)
[17:47:20.684]                       master <- NULL
[17:47:20.684]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.684]                         !identical(envir, emptyenv())) {
[17:47:20.684]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.684]                           inherits = FALSE)) {
[17:47:20.684]                           master <- get("master", mode = "list", 
[17:47:20.684]                             envir = envir, inherits = FALSE)
[17:47:20.684]                           if (inherits(master, c("SOCKnode", 
[17:47:20.684]                             "SOCK0node"))) {
[17:47:20.684]                             sendCondition <<- function(cond) {
[17:47:20.684]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.684]                                 success = TRUE)
[17:47:20.684]                               parallel_sendData(master, data)
[17:47:20.684]                             }
[17:47:20.684]                             return(sendCondition)
[17:47:20.684]                           }
[17:47:20.684]                         }
[17:47:20.684]                         frame <- frame + 1L
[17:47:20.684]                         envir <- sys.frame(frame)
[17:47:20.684]                       }
[17:47:20.684]                     }
[17:47:20.684]                     sendCondition <<- function(cond) NULL
[17:47:20.684]                   }
[17:47:20.684]                 })
[17:47:20.684]                 withCallingHandlers({
[17:47:20.684]                   {
[17:47:20.684]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:47:20.684]                       "error", "condition")))
[17:47:20.684]                   }
[17:47:20.684]                 }, immediateCondition = function(cond) {
[17:47:20.684]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.684]                   sendCondition(cond)
[17:47:20.684]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.684]                   {
[17:47:20.684]                     inherits <- base::inherits
[17:47:20.684]                     invokeRestart <- base::invokeRestart
[17:47:20.684]                     is.null <- base::is.null
[17:47:20.684]                     muffled <- FALSE
[17:47:20.684]                     if (inherits(cond, "message")) {
[17:47:20.684]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.684]                       if (muffled) 
[17:47:20.684]                         invokeRestart("muffleMessage")
[17:47:20.684]                     }
[17:47:20.684]                     else if (inherits(cond, "warning")) {
[17:47:20.684]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.684]                       if (muffled) 
[17:47:20.684]                         invokeRestart("muffleWarning")
[17:47:20.684]                     }
[17:47:20.684]                     else if (inherits(cond, "condition")) {
[17:47:20.684]                       if (!is.null(pattern)) {
[17:47:20.684]                         computeRestarts <- base::computeRestarts
[17:47:20.684]                         grepl <- base::grepl
[17:47:20.684]                         restarts <- computeRestarts(cond)
[17:47:20.684]                         for (restart in restarts) {
[17:47:20.684]                           name <- restart$name
[17:47:20.684]                           if (is.null(name)) 
[17:47:20.684]                             next
[17:47:20.684]                           if (!grepl(pattern, name)) 
[17:47:20.684]                             next
[17:47:20.684]                           invokeRestart(restart)
[17:47:20.684]                           muffled <- TRUE
[17:47:20.684]                           break
[17:47:20.684]                         }
[17:47:20.684]                       }
[17:47:20.684]                     }
[17:47:20.684]                     invisible(muffled)
[17:47:20.684]                   }
[17:47:20.684]                   muffleCondition(cond)
[17:47:20.684]                 })
[17:47:20.684]             }))
[17:47:20.684]             future::FutureResult(value = ...future.value$value, 
[17:47:20.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.684]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.684]                     ...future.globalenv.names))
[17:47:20.684]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.684]         }, condition = base::local({
[17:47:20.684]             c <- base::c
[17:47:20.684]             inherits <- base::inherits
[17:47:20.684]             invokeRestart <- base::invokeRestart
[17:47:20.684]             length <- base::length
[17:47:20.684]             list <- base::list
[17:47:20.684]             seq.int <- base::seq.int
[17:47:20.684]             signalCondition <- base::signalCondition
[17:47:20.684]             sys.calls <- base::sys.calls
[17:47:20.684]             `[[` <- base::`[[`
[17:47:20.684]             `+` <- base::`+`
[17:47:20.684]             `<<-` <- base::`<<-`
[17:47:20.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.684]                   3L)]
[17:47:20.684]             }
[17:47:20.684]             function(cond) {
[17:47:20.684]                 is_error <- inherits(cond, "error")
[17:47:20.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.684]                   NULL)
[17:47:20.684]                 if (is_error) {
[17:47:20.684]                   sessionInformation <- function() {
[17:47:20.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.684]                       search = base::search(), system = base::Sys.info())
[17:47:20.684]                   }
[17:47:20.684]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.684]                     cond$call), session = sessionInformation(), 
[17:47:20.684]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.684]                   signalCondition(cond)
[17:47:20.684]                 }
[17:47:20.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.684]                 "immediateCondition"))) {
[17:47:20.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.684]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.684]                   if (TRUE && !signal) {
[17:47:20.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.684]                     {
[17:47:20.684]                       inherits <- base::inherits
[17:47:20.684]                       invokeRestart <- base::invokeRestart
[17:47:20.684]                       is.null <- base::is.null
[17:47:20.684]                       muffled <- FALSE
[17:47:20.684]                       if (inherits(cond, "message")) {
[17:47:20.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.684]                         if (muffled) 
[17:47:20.684]                           invokeRestart("muffleMessage")
[17:47:20.684]                       }
[17:47:20.684]                       else if (inherits(cond, "warning")) {
[17:47:20.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.684]                         if (muffled) 
[17:47:20.684]                           invokeRestart("muffleWarning")
[17:47:20.684]                       }
[17:47:20.684]                       else if (inherits(cond, "condition")) {
[17:47:20.684]                         if (!is.null(pattern)) {
[17:47:20.684]                           computeRestarts <- base::computeRestarts
[17:47:20.684]                           grepl <- base::grepl
[17:47:20.684]                           restarts <- computeRestarts(cond)
[17:47:20.684]                           for (restart in restarts) {
[17:47:20.684]                             name <- restart$name
[17:47:20.684]                             if (is.null(name)) 
[17:47:20.684]                               next
[17:47:20.684]                             if (!grepl(pattern, name)) 
[17:47:20.684]                               next
[17:47:20.684]                             invokeRestart(restart)
[17:47:20.684]                             muffled <- TRUE
[17:47:20.684]                             break
[17:47:20.684]                           }
[17:47:20.684]                         }
[17:47:20.684]                       }
[17:47:20.684]                       invisible(muffled)
[17:47:20.684]                     }
[17:47:20.684]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.684]                   }
[17:47:20.684]                 }
[17:47:20.684]                 else {
[17:47:20.684]                   if (TRUE) {
[17:47:20.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.684]                     {
[17:47:20.684]                       inherits <- base::inherits
[17:47:20.684]                       invokeRestart <- base::invokeRestart
[17:47:20.684]                       is.null <- base::is.null
[17:47:20.684]                       muffled <- FALSE
[17:47:20.684]                       if (inherits(cond, "message")) {
[17:47:20.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.684]                         if (muffled) 
[17:47:20.684]                           invokeRestart("muffleMessage")
[17:47:20.684]                       }
[17:47:20.684]                       else if (inherits(cond, "warning")) {
[17:47:20.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.684]                         if (muffled) 
[17:47:20.684]                           invokeRestart("muffleWarning")
[17:47:20.684]                       }
[17:47:20.684]                       else if (inherits(cond, "condition")) {
[17:47:20.684]                         if (!is.null(pattern)) {
[17:47:20.684]                           computeRestarts <- base::computeRestarts
[17:47:20.684]                           grepl <- base::grepl
[17:47:20.684]                           restarts <- computeRestarts(cond)
[17:47:20.684]                           for (restart in restarts) {
[17:47:20.684]                             name <- restart$name
[17:47:20.684]                             if (is.null(name)) 
[17:47:20.684]                               next
[17:47:20.684]                             if (!grepl(pattern, name)) 
[17:47:20.684]                               next
[17:47:20.684]                             invokeRestart(restart)
[17:47:20.684]                             muffled <- TRUE
[17:47:20.684]                             break
[17:47:20.684]                           }
[17:47:20.684]                         }
[17:47:20.684]                       }
[17:47:20.684]                       invisible(muffled)
[17:47:20.684]                     }
[17:47:20.684]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.684]                   }
[17:47:20.684]                 }
[17:47:20.684]             }
[17:47:20.684]         }))
[17:47:20.684]     }, error = function(ex) {
[17:47:20.684]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.684]                 ...future.rng), started = ...future.startTime, 
[17:47:20.684]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.684]             version = "1.8"), class = "FutureResult")
[17:47:20.684]     }, finally = {
[17:47:20.684]         if (!identical(...future.workdir, getwd())) 
[17:47:20.684]             setwd(...future.workdir)
[17:47:20.684]         {
[17:47:20.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.684]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.684]             }
[17:47:20.684]             base::options(...future.oldOptions)
[17:47:20.684]             if (.Platform$OS.type == "windows") {
[17:47:20.684]                 old_names <- names(...future.oldEnvVars)
[17:47:20.684]                 envs <- base::Sys.getenv()
[17:47:20.684]                 names <- names(envs)
[17:47:20.684]                 common <- intersect(names, old_names)
[17:47:20.684]                 added <- setdiff(names, old_names)
[17:47:20.684]                 removed <- setdiff(old_names, names)
[17:47:20.684]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.684]                   envs[common]]
[17:47:20.684]                 NAMES <- toupper(changed)
[17:47:20.684]                 args <- list()
[17:47:20.684]                 for (kk in seq_along(NAMES)) {
[17:47:20.684]                   name <- changed[[kk]]
[17:47:20.684]                   NAME <- NAMES[[kk]]
[17:47:20.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.684]                     next
[17:47:20.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.684]                 }
[17:47:20.684]                 NAMES <- toupper(added)
[17:47:20.684]                 for (kk in seq_along(NAMES)) {
[17:47:20.684]                   name <- added[[kk]]
[17:47:20.684]                   NAME <- NAMES[[kk]]
[17:47:20.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.684]                     next
[17:47:20.684]                   args[[name]] <- ""
[17:47:20.684]                 }
[17:47:20.684]                 NAMES <- toupper(removed)
[17:47:20.684]                 for (kk in seq_along(NAMES)) {
[17:47:20.684]                   name <- removed[[kk]]
[17:47:20.684]                   NAME <- NAMES[[kk]]
[17:47:20.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.684]                     next
[17:47:20.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.684]                 }
[17:47:20.684]                 if (length(args) > 0) 
[17:47:20.684]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.684]             }
[17:47:20.684]             else {
[17:47:20.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.684]             }
[17:47:20.684]             {
[17:47:20.684]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.684]                   0L) {
[17:47:20.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.684]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.684]                   base::options(opts)
[17:47:20.684]                 }
[17:47:20.684]                 {
[17:47:20.684]                   {
[17:47:20.684]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.684]                     NULL
[17:47:20.684]                   }
[17:47:20.684]                   options(future.plan = NULL)
[17:47:20.684]                   if (is.na(NA_character_)) 
[17:47:20.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.684]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.684]                     .init = FALSE)
[17:47:20.684]                 }
[17:47:20.684]             }
[17:47:20.684]         }
[17:47:20.684]     })
[17:47:20.684]     if (TRUE) {
[17:47:20.684]         base::sink(type = "output", split = FALSE)
[17:47:20.684]         if (TRUE) {
[17:47:20.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.684]         }
[17:47:20.684]         else {
[17:47:20.684]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.684]         }
[17:47:20.684]         base::close(...future.stdout)
[17:47:20.684]         ...future.stdout <- NULL
[17:47:20.684]     }
[17:47:20.684]     ...future.result$conditions <- ...future.conditions
[17:47:20.684]     ...future.result$finished <- base::Sys.time()
[17:47:20.684]     ...future.result
[17:47:20.684] }
[17:47:20.686] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:20.688] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.688] - Validating connection of MultisessionFuture
[17:47:20.689] - received message: FutureResult
[17:47:20.689] - Received FutureResult
[17:47:20.689] - Erased future from FutureRegistry
[17:47:20.689] result() for ClusterFuture ...
[17:47:20.689] - result already collected: FutureResult
[17:47:20.689] result() for ClusterFuture ... done
[17:47:20.689] signalConditions() ...
[17:47:20.689]  - include = ‘immediateCondition’
[17:47:20.690]  - exclude = 
[17:47:20.690]  - resignal = FALSE
[17:47:20.690]  - Number of conditions: 1
[17:47:20.690] signalConditions() ... done
[17:47:20.690] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:20.690] result() for ClusterFuture ...
[17:47:20.690] - result already collected: FutureResult
[17:47:20.690] result() for ClusterFuture ... done
[17:47:20.690] result() for ClusterFuture ...
[17:47:20.690] - result already collected: FutureResult
[17:47:20.691] result() for ClusterFuture ... done
[17:47:20.691] signalConditions() ...
[17:47:20.691]  - include = ‘immediateCondition’
[17:47:20.691]  - exclude = 
[17:47:20.691]  - resignal = FALSE
[17:47:20.691]  - Number of conditions: 1
[17:47:20.691] signalConditions() ... done
<MyError: boom>
[17:47:20.691] result() for ClusterFuture ...
[17:47:20.691] - result already collected: FutureResult
[17:47:20.691] result() for ClusterFuture ... done
[17:47:20.692] result() for ClusterFuture ...
[17:47:20.692] - result already collected: FutureResult
[17:47:20.692] result() for ClusterFuture ... done
[17:47:20.692] signalConditions() ...
[17:47:20.692]  - include = ‘immediateCondition’
[17:47:20.692]  - exclude = 
[17:47:20.692]  - resignal = FALSE
[17:47:20.692]  - Number of conditions: 1
[17:47:20.692] signalConditions() ... done
[17:47:20.692] Future state: ‘finished’
[17:47:20.692] result() for ClusterFuture ...
[17:47:20.693] - result already collected: FutureResult
[17:47:20.693] result() for ClusterFuture ... done
[17:47:20.693] signalConditions() ...
[17:47:20.693]  - include = ‘condition’
[17:47:20.693]  - exclude = ‘immediateCondition’
[17:47:20.693]  - resignal = TRUE
[17:47:20.693]  - Number of conditions: 1
[17:47:20.693]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:47:20.693] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[17:47:20.709] getGlobalsAndPackages() ...
[17:47:20.709] Searching for globals...
[17:47:20.710] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:47:20.710] Searching for globals ... DONE
[17:47:20.710] Resolving globals: FALSE
[17:47:20.711] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[17:47:20.711] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[17:47:20.711] - globals: [1] ‘a’
[17:47:20.711] 
[17:47:20.711] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:20.712] Packages needed by the future expression (n = 0): <none>
[17:47:20.712] Packages needed by future strategies (n = 0): <none>
[17:47:20.713] {
[17:47:20.713]     {
[17:47:20.713]         {
[17:47:20.713]             ...future.startTime <- base::Sys.time()
[17:47:20.713]             {
[17:47:20.713]                 {
[17:47:20.713]                   {
[17:47:20.713]                     base::local({
[17:47:20.713]                       has_future <- base::requireNamespace("future", 
[17:47:20.713]                         quietly = TRUE)
[17:47:20.713]                       if (has_future) {
[17:47:20.713]                         ns <- base::getNamespace("future")
[17:47:20.713]                         version <- ns[[".package"]][["version"]]
[17:47:20.713]                         if (is.null(version)) 
[17:47:20.713]                           version <- utils::packageVersion("future")
[17:47:20.713]                       }
[17:47:20.713]                       else {
[17:47:20.713]                         version <- NULL
[17:47:20.713]                       }
[17:47:20.713]                       if (!has_future || version < "1.8.0") {
[17:47:20.713]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.713]                           "", base::R.version$version.string), 
[17:47:20.713]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:20.713]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.713]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.713]                             "release", "version")], collapse = " "), 
[17:47:20.713]                           hostname = base::Sys.info()[["nodename"]])
[17:47:20.713]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.713]                           info)
[17:47:20.713]                         info <- base::paste(info, collapse = "; ")
[17:47:20.713]                         if (!has_future) {
[17:47:20.713]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.713]                             info)
[17:47:20.713]                         }
[17:47:20.713]                         else {
[17:47:20.713]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.713]                             info, version)
[17:47:20.713]                         }
[17:47:20.713]                         base::stop(msg)
[17:47:20.713]                       }
[17:47:20.713]                     })
[17:47:20.713]                   }
[17:47:20.713]                   ...future.strategy.old <- future::plan("list")
[17:47:20.713]                   options(future.plan = NULL)
[17:47:20.713]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.713]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.713]                 }
[17:47:20.713]                 ...future.workdir <- getwd()
[17:47:20.713]             }
[17:47:20.713]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.713]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.713]         }
[17:47:20.713]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.713]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[17:47:20.713]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.713]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.713]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.713]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.713]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.713]             base::names(...future.oldOptions))
[17:47:20.713]     }
[17:47:20.713]     if (FALSE) {
[17:47:20.713]     }
[17:47:20.713]     else {
[17:47:20.713]         if (TRUE) {
[17:47:20.713]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.713]                 open = "w")
[17:47:20.713]         }
[17:47:20.713]         else {
[17:47:20.713]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.713]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.713]         }
[17:47:20.713]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.713]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.713]             base::sink(type = "output", split = FALSE)
[17:47:20.713]             base::close(...future.stdout)
[17:47:20.713]         }, add = TRUE)
[17:47:20.713]     }
[17:47:20.713]     ...future.frame <- base::sys.nframe()
[17:47:20.713]     ...future.conditions <- base::list()
[17:47:20.713]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.713]     if (FALSE) {
[17:47:20.713]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.713]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.713]     }
[17:47:20.713]     ...future.result <- base::tryCatch({
[17:47:20.713]         base::withCallingHandlers({
[17:47:20.713]             ...future.value <- base::withVisible(base::local({
[17:47:20.713]                 sum(a)
[17:47:20.713]             }))
[17:47:20.713]             future::FutureResult(value = ...future.value$value, 
[17:47:20.713]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.713]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.713]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.713]                     ...future.globalenv.names))
[17:47:20.713]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.713]         }, condition = base::local({
[17:47:20.713]             c <- base::c
[17:47:20.713]             inherits <- base::inherits
[17:47:20.713]             invokeRestart <- base::invokeRestart
[17:47:20.713]             length <- base::length
[17:47:20.713]             list <- base::list
[17:47:20.713]             seq.int <- base::seq.int
[17:47:20.713]             signalCondition <- base::signalCondition
[17:47:20.713]             sys.calls <- base::sys.calls
[17:47:20.713]             `[[` <- base::`[[`
[17:47:20.713]             `+` <- base::`+`
[17:47:20.713]             `<<-` <- base::`<<-`
[17:47:20.713]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.713]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.713]                   3L)]
[17:47:20.713]             }
[17:47:20.713]             function(cond) {
[17:47:20.713]                 is_error <- inherits(cond, "error")
[17:47:20.713]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.713]                   NULL)
[17:47:20.713]                 if (is_error) {
[17:47:20.713]                   sessionInformation <- function() {
[17:47:20.713]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.713]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.713]                       search = base::search(), system = base::Sys.info())
[17:47:20.713]                   }
[17:47:20.713]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.713]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.713]                     cond$call), session = sessionInformation(), 
[17:47:20.713]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.713]                   signalCondition(cond)
[17:47:20.713]                 }
[17:47:20.713]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.713]                 "immediateCondition"))) {
[17:47:20.713]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.713]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.713]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.713]                   if (TRUE && !signal) {
[17:47:20.713]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.713]                     {
[17:47:20.713]                       inherits <- base::inherits
[17:47:20.713]                       invokeRestart <- base::invokeRestart
[17:47:20.713]                       is.null <- base::is.null
[17:47:20.713]                       muffled <- FALSE
[17:47:20.713]                       if (inherits(cond, "message")) {
[17:47:20.713]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.713]                         if (muffled) 
[17:47:20.713]                           invokeRestart("muffleMessage")
[17:47:20.713]                       }
[17:47:20.713]                       else if (inherits(cond, "warning")) {
[17:47:20.713]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.713]                         if (muffled) 
[17:47:20.713]                           invokeRestart("muffleWarning")
[17:47:20.713]                       }
[17:47:20.713]                       else if (inherits(cond, "condition")) {
[17:47:20.713]                         if (!is.null(pattern)) {
[17:47:20.713]                           computeRestarts <- base::computeRestarts
[17:47:20.713]                           grepl <- base::grepl
[17:47:20.713]                           restarts <- computeRestarts(cond)
[17:47:20.713]                           for (restart in restarts) {
[17:47:20.713]                             name <- restart$name
[17:47:20.713]                             if (is.null(name)) 
[17:47:20.713]                               next
[17:47:20.713]                             if (!grepl(pattern, name)) 
[17:47:20.713]                               next
[17:47:20.713]                             invokeRestart(restart)
[17:47:20.713]                             muffled <- TRUE
[17:47:20.713]                             break
[17:47:20.713]                           }
[17:47:20.713]                         }
[17:47:20.713]                       }
[17:47:20.713]                       invisible(muffled)
[17:47:20.713]                     }
[17:47:20.713]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.713]                   }
[17:47:20.713]                 }
[17:47:20.713]                 else {
[17:47:20.713]                   if (TRUE) {
[17:47:20.713]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.713]                     {
[17:47:20.713]                       inherits <- base::inherits
[17:47:20.713]                       invokeRestart <- base::invokeRestart
[17:47:20.713]                       is.null <- base::is.null
[17:47:20.713]                       muffled <- FALSE
[17:47:20.713]                       if (inherits(cond, "message")) {
[17:47:20.713]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.713]                         if (muffled) 
[17:47:20.713]                           invokeRestart("muffleMessage")
[17:47:20.713]                       }
[17:47:20.713]                       else if (inherits(cond, "warning")) {
[17:47:20.713]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.713]                         if (muffled) 
[17:47:20.713]                           invokeRestart("muffleWarning")
[17:47:20.713]                       }
[17:47:20.713]                       else if (inherits(cond, "condition")) {
[17:47:20.713]                         if (!is.null(pattern)) {
[17:47:20.713]                           computeRestarts <- base::computeRestarts
[17:47:20.713]                           grepl <- base::grepl
[17:47:20.713]                           restarts <- computeRestarts(cond)
[17:47:20.713]                           for (restart in restarts) {
[17:47:20.713]                             name <- restart$name
[17:47:20.713]                             if (is.null(name)) 
[17:47:20.713]                               next
[17:47:20.713]                             if (!grepl(pattern, name)) 
[17:47:20.713]                               next
[17:47:20.713]                             invokeRestart(restart)
[17:47:20.713]                             muffled <- TRUE
[17:47:20.713]                             break
[17:47:20.713]                           }
[17:47:20.713]                         }
[17:47:20.713]                       }
[17:47:20.713]                       invisible(muffled)
[17:47:20.713]                     }
[17:47:20.713]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.713]                   }
[17:47:20.713]                 }
[17:47:20.713]             }
[17:47:20.713]         }))
[17:47:20.713]     }, error = function(ex) {
[17:47:20.713]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.713]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.713]                 ...future.rng), started = ...future.startTime, 
[17:47:20.713]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.713]             version = "1.8"), class = "FutureResult")
[17:47:20.713]     }, finally = {
[17:47:20.713]         if (!identical(...future.workdir, getwd())) 
[17:47:20.713]             setwd(...future.workdir)
[17:47:20.713]         {
[17:47:20.713]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.713]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.713]             }
[17:47:20.713]             base::options(...future.oldOptions)
[17:47:20.713]             if (.Platform$OS.type == "windows") {
[17:47:20.713]                 old_names <- names(...future.oldEnvVars)
[17:47:20.713]                 envs <- base::Sys.getenv()
[17:47:20.713]                 names <- names(envs)
[17:47:20.713]                 common <- intersect(names, old_names)
[17:47:20.713]                 added <- setdiff(names, old_names)
[17:47:20.713]                 removed <- setdiff(old_names, names)
[17:47:20.713]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.713]                   envs[common]]
[17:47:20.713]                 NAMES <- toupper(changed)
[17:47:20.713]                 args <- list()
[17:47:20.713]                 for (kk in seq_along(NAMES)) {
[17:47:20.713]                   name <- changed[[kk]]
[17:47:20.713]                   NAME <- NAMES[[kk]]
[17:47:20.713]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.713]                     next
[17:47:20.713]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.713]                 }
[17:47:20.713]                 NAMES <- toupper(added)
[17:47:20.713]                 for (kk in seq_along(NAMES)) {
[17:47:20.713]                   name <- added[[kk]]
[17:47:20.713]                   NAME <- NAMES[[kk]]
[17:47:20.713]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.713]                     next
[17:47:20.713]                   args[[name]] <- ""
[17:47:20.713]                 }
[17:47:20.713]                 NAMES <- toupper(removed)
[17:47:20.713]                 for (kk in seq_along(NAMES)) {
[17:47:20.713]                   name <- removed[[kk]]
[17:47:20.713]                   NAME <- NAMES[[kk]]
[17:47:20.713]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.713]                     next
[17:47:20.713]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.713]                 }
[17:47:20.713]                 if (length(args) > 0) 
[17:47:20.713]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.713]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.713]             }
[17:47:20.713]             else {
[17:47:20.713]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.713]             }
[17:47:20.713]             {
[17:47:20.713]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.713]                   0L) {
[17:47:20.713]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.713]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.713]                   base::options(opts)
[17:47:20.713]                 }
[17:47:20.713]                 {
[17:47:20.713]                   {
[17:47:20.713]                     NULL
[17:47:20.713]                     RNGkind("Mersenne-Twister")
[17:47:20.713]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:20.713]                       inherits = FALSE)
[17:47:20.713]                   }
[17:47:20.713]                   options(future.plan = NULL)
[17:47:20.713]                   if (is.na(NA_character_)) 
[17:47:20.713]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.713]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.713]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.713]                     .init = FALSE)
[17:47:20.713]                 }
[17:47:20.713]             }
[17:47:20.713]         }
[17:47:20.713]     })
[17:47:20.713]     if (TRUE) {
[17:47:20.713]         base::sink(type = "output", split = FALSE)
[17:47:20.713]         if (TRUE) {
[17:47:20.713]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.713]         }
[17:47:20.713]         else {
[17:47:20.713]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.713]         }
[17:47:20.713]         base::close(...future.stdout)
[17:47:20.713]         ...future.stdout <- NULL
[17:47:20.713]     }
[17:47:20.713]     ...future.result$conditions <- ...future.conditions
[17:47:20.713]     ...future.result$finished <- base::Sys.time()
[17:47:20.713]     ...future.result
[17:47:20.713] }
[17:47:20.715] assign_globals() ...
[17:47:20.715] List of 1
[17:47:20.715]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[17:47:20.715]  - attr(*, "where")=List of 1
[17:47:20.715]   ..$ a:<environment: R_EmptyEnv> 
[17:47:20.715]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:20.715]  - attr(*, "resolved")= logi FALSE
[17:47:20.715]  - attr(*, "total_size")= num 4104
[17:47:20.717] - copied ‘a’ to environment
[17:47:20.717] assign_globals() ... done
[17:47:20.717] plan(): Setting new future strategy stack:
[17:47:20.717] List of future strategies:
[17:47:20.717] 1. sequential:
[17:47:20.717]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:20.717]    - tweaked: FALSE
[17:47:20.717]    - call: NULL
[17:47:20.718] plan(): nbrOfWorkers() = 1
[17:47:20.719] plan(): Setting new future strategy stack:
[17:47:20.719] List of future strategies:
[17:47:20.719] 1. sequential:
[17:47:20.719]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:20.719]    - tweaked: FALSE
[17:47:20.719]    - call: future::plan("sequential")
[17:47:20.719] plan(): nbrOfWorkers() = 1
[17:47:20.719] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[17:47:20.720] getGlobalsAndPackages() ...
[17:47:20.720] Searching for globals...
[17:47:20.720] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:47:20.721] Searching for globals ... DONE
[17:47:20.721] Resolving globals: FALSE
[17:47:20.721] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[17:47:20.721] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[17:47:20.722] getGlobalsAndPackages() ...
[17:47:20.722] Searching for globals...
[17:47:20.723] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:47:20.723] Searching for globals ... DONE
[17:47:20.723] Resolving globals: FALSE
[17:47:20.723] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[17:47:20.724] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[17:47:20.724] - globals: [1] ‘a’
[17:47:20.724] 
[17:47:20.724] getGlobalsAndPackages() ... DONE
[17:47:20.734] Packages needed by the future expression (n = 0): <none>
[17:47:20.734] Packages needed by future strategies (n = 0): <none>
[17:47:20.735] {
[17:47:20.735]     {
[17:47:20.735]         {
[17:47:20.735]             ...future.startTime <- base::Sys.time()
[17:47:20.735]             {
[17:47:20.735]                 {
[17:47:20.735]                   {
[17:47:20.735]                     {
[17:47:20.735]                       base::local({
[17:47:20.735]                         has_future <- base::requireNamespace("future", 
[17:47:20.735]                           quietly = TRUE)
[17:47:20.735]                         if (has_future) {
[17:47:20.735]                           ns <- base::getNamespace("future")
[17:47:20.735]                           version <- ns[[".package"]][["version"]]
[17:47:20.735]                           if (is.null(version)) 
[17:47:20.735]                             version <- utils::packageVersion("future")
[17:47:20.735]                         }
[17:47:20.735]                         else {
[17:47:20.735]                           version <- NULL
[17:47:20.735]                         }
[17:47:20.735]                         if (!has_future || version < "1.8.0") {
[17:47:20.735]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.735]                             "", base::R.version$version.string), 
[17:47:20.735]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:20.735]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.735]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.735]                               "release", "version")], collapse = " "), 
[17:47:20.735]                             hostname = base::Sys.info()[["nodename"]])
[17:47:20.735]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.735]                             info)
[17:47:20.735]                           info <- base::paste(info, collapse = "; ")
[17:47:20.735]                           if (!has_future) {
[17:47:20.735]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.735]                               info)
[17:47:20.735]                           }
[17:47:20.735]                           else {
[17:47:20.735]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.735]                               info, version)
[17:47:20.735]                           }
[17:47:20.735]                           base::stop(msg)
[17:47:20.735]                         }
[17:47:20.735]                       })
[17:47:20.735]                     }
[17:47:20.735]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:20.735]                     base::options(mc.cores = 1L)
[17:47:20.735]                   }
[17:47:20.735]                   ...future.strategy.old <- future::plan("list")
[17:47:20.735]                   options(future.plan = NULL)
[17:47:20.735]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.735]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.735]                 }
[17:47:20.735]                 ...future.workdir <- getwd()
[17:47:20.735]             }
[17:47:20.735]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.735]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.735]         }
[17:47:20.735]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.735]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[17:47:20.735]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.735]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.735]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.735]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.735]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.735]             base::names(...future.oldOptions))
[17:47:20.735]     }
[17:47:20.735]     if (FALSE) {
[17:47:20.735]     }
[17:47:20.735]     else {
[17:47:20.735]         if (TRUE) {
[17:47:20.735]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.735]                 open = "w")
[17:47:20.735]         }
[17:47:20.735]         else {
[17:47:20.735]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.735]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.735]         }
[17:47:20.735]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.735]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.735]             base::sink(type = "output", split = FALSE)
[17:47:20.735]             base::close(...future.stdout)
[17:47:20.735]         }, add = TRUE)
[17:47:20.735]     }
[17:47:20.735]     ...future.frame <- base::sys.nframe()
[17:47:20.735]     ...future.conditions <- base::list()
[17:47:20.735]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.735]     if (FALSE) {
[17:47:20.735]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.735]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.735]     }
[17:47:20.735]     ...future.result <- base::tryCatch({
[17:47:20.735]         base::withCallingHandlers({
[17:47:20.735]             ...future.value <- base::withVisible(base::local({
[17:47:20.735]                 ...future.makeSendCondition <- base::local({
[17:47:20.735]                   sendCondition <- NULL
[17:47:20.735]                   function(frame = 1L) {
[17:47:20.735]                     if (is.function(sendCondition)) 
[17:47:20.735]                       return(sendCondition)
[17:47:20.735]                     ns <- getNamespace("parallel")
[17:47:20.735]                     if (exists("sendData", mode = "function", 
[17:47:20.735]                       envir = ns)) {
[17:47:20.735]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:20.735]                         envir = ns)
[17:47:20.735]                       envir <- sys.frame(frame)
[17:47:20.735]                       master <- NULL
[17:47:20.735]                       while (!identical(envir, .GlobalEnv) && 
[17:47:20.735]                         !identical(envir, emptyenv())) {
[17:47:20.735]                         if (exists("master", mode = "list", envir = envir, 
[17:47:20.735]                           inherits = FALSE)) {
[17:47:20.735]                           master <- get("master", mode = "list", 
[17:47:20.735]                             envir = envir, inherits = FALSE)
[17:47:20.735]                           if (inherits(master, c("SOCKnode", 
[17:47:20.735]                             "SOCK0node"))) {
[17:47:20.735]                             sendCondition <<- function(cond) {
[17:47:20.735]                               data <- list(type = "VALUE", value = cond, 
[17:47:20.735]                                 success = TRUE)
[17:47:20.735]                               parallel_sendData(master, data)
[17:47:20.735]                             }
[17:47:20.735]                             return(sendCondition)
[17:47:20.735]                           }
[17:47:20.735]                         }
[17:47:20.735]                         frame <- frame + 1L
[17:47:20.735]                         envir <- sys.frame(frame)
[17:47:20.735]                       }
[17:47:20.735]                     }
[17:47:20.735]                     sendCondition <<- function(cond) NULL
[17:47:20.735]                   }
[17:47:20.735]                 })
[17:47:20.735]                 withCallingHandlers({
[17:47:20.735]                   {
[17:47:20.735]                     sum(a)
[17:47:20.735]                   }
[17:47:20.735]                 }, immediateCondition = function(cond) {
[17:47:20.735]                   sendCondition <- ...future.makeSendCondition()
[17:47:20.735]                   sendCondition(cond)
[17:47:20.735]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.735]                   {
[17:47:20.735]                     inherits <- base::inherits
[17:47:20.735]                     invokeRestart <- base::invokeRestart
[17:47:20.735]                     is.null <- base::is.null
[17:47:20.735]                     muffled <- FALSE
[17:47:20.735]                     if (inherits(cond, "message")) {
[17:47:20.735]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:20.735]                       if (muffled) 
[17:47:20.735]                         invokeRestart("muffleMessage")
[17:47:20.735]                     }
[17:47:20.735]                     else if (inherits(cond, "warning")) {
[17:47:20.735]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:20.735]                       if (muffled) 
[17:47:20.735]                         invokeRestart("muffleWarning")
[17:47:20.735]                     }
[17:47:20.735]                     else if (inherits(cond, "condition")) {
[17:47:20.735]                       if (!is.null(pattern)) {
[17:47:20.735]                         computeRestarts <- base::computeRestarts
[17:47:20.735]                         grepl <- base::grepl
[17:47:20.735]                         restarts <- computeRestarts(cond)
[17:47:20.735]                         for (restart in restarts) {
[17:47:20.735]                           name <- restart$name
[17:47:20.735]                           if (is.null(name)) 
[17:47:20.735]                             next
[17:47:20.735]                           if (!grepl(pattern, name)) 
[17:47:20.735]                             next
[17:47:20.735]                           invokeRestart(restart)
[17:47:20.735]                           muffled <- TRUE
[17:47:20.735]                           break
[17:47:20.735]                         }
[17:47:20.735]                       }
[17:47:20.735]                     }
[17:47:20.735]                     invisible(muffled)
[17:47:20.735]                   }
[17:47:20.735]                   muffleCondition(cond)
[17:47:20.735]                 })
[17:47:20.735]             }))
[17:47:20.735]             future::FutureResult(value = ...future.value$value, 
[17:47:20.735]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.735]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.735]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.735]                     ...future.globalenv.names))
[17:47:20.735]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.735]         }, condition = base::local({
[17:47:20.735]             c <- base::c
[17:47:20.735]             inherits <- base::inherits
[17:47:20.735]             invokeRestart <- base::invokeRestart
[17:47:20.735]             length <- base::length
[17:47:20.735]             list <- base::list
[17:47:20.735]             seq.int <- base::seq.int
[17:47:20.735]             signalCondition <- base::signalCondition
[17:47:20.735]             sys.calls <- base::sys.calls
[17:47:20.735]             `[[` <- base::`[[`
[17:47:20.735]             `+` <- base::`+`
[17:47:20.735]             `<<-` <- base::`<<-`
[17:47:20.735]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.735]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.735]                   3L)]
[17:47:20.735]             }
[17:47:20.735]             function(cond) {
[17:47:20.735]                 is_error <- inherits(cond, "error")
[17:47:20.735]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.735]                   NULL)
[17:47:20.735]                 if (is_error) {
[17:47:20.735]                   sessionInformation <- function() {
[17:47:20.735]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.735]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.735]                       search = base::search(), system = base::Sys.info())
[17:47:20.735]                   }
[17:47:20.735]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.735]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.735]                     cond$call), session = sessionInformation(), 
[17:47:20.735]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.735]                   signalCondition(cond)
[17:47:20.735]                 }
[17:47:20.735]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.735]                 "immediateCondition"))) {
[17:47:20.735]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.735]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.735]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.735]                   if (TRUE && !signal) {
[17:47:20.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.735]                     {
[17:47:20.735]                       inherits <- base::inherits
[17:47:20.735]                       invokeRestart <- base::invokeRestart
[17:47:20.735]                       is.null <- base::is.null
[17:47:20.735]                       muffled <- FALSE
[17:47:20.735]                       if (inherits(cond, "message")) {
[17:47:20.735]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.735]                         if (muffled) 
[17:47:20.735]                           invokeRestart("muffleMessage")
[17:47:20.735]                       }
[17:47:20.735]                       else if (inherits(cond, "warning")) {
[17:47:20.735]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.735]                         if (muffled) 
[17:47:20.735]                           invokeRestart("muffleWarning")
[17:47:20.735]                       }
[17:47:20.735]                       else if (inherits(cond, "condition")) {
[17:47:20.735]                         if (!is.null(pattern)) {
[17:47:20.735]                           computeRestarts <- base::computeRestarts
[17:47:20.735]                           grepl <- base::grepl
[17:47:20.735]                           restarts <- computeRestarts(cond)
[17:47:20.735]                           for (restart in restarts) {
[17:47:20.735]                             name <- restart$name
[17:47:20.735]                             if (is.null(name)) 
[17:47:20.735]                               next
[17:47:20.735]                             if (!grepl(pattern, name)) 
[17:47:20.735]                               next
[17:47:20.735]                             invokeRestart(restart)
[17:47:20.735]                             muffled <- TRUE
[17:47:20.735]                             break
[17:47:20.735]                           }
[17:47:20.735]                         }
[17:47:20.735]                       }
[17:47:20.735]                       invisible(muffled)
[17:47:20.735]                     }
[17:47:20.735]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.735]                   }
[17:47:20.735]                 }
[17:47:20.735]                 else {
[17:47:20.735]                   if (TRUE) {
[17:47:20.735]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.735]                     {
[17:47:20.735]                       inherits <- base::inherits
[17:47:20.735]                       invokeRestart <- base::invokeRestart
[17:47:20.735]                       is.null <- base::is.null
[17:47:20.735]                       muffled <- FALSE
[17:47:20.735]                       if (inherits(cond, "message")) {
[17:47:20.735]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.735]                         if (muffled) 
[17:47:20.735]                           invokeRestart("muffleMessage")
[17:47:20.735]                       }
[17:47:20.735]                       else if (inherits(cond, "warning")) {
[17:47:20.735]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.735]                         if (muffled) 
[17:47:20.735]                           invokeRestart("muffleWarning")
[17:47:20.735]                       }
[17:47:20.735]                       else if (inherits(cond, "condition")) {
[17:47:20.735]                         if (!is.null(pattern)) {
[17:47:20.735]                           computeRestarts <- base::computeRestarts
[17:47:20.735]                           grepl <- base::grepl
[17:47:20.735]                           restarts <- computeRestarts(cond)
[17:47:20.735]                           for (restart in restarts) {
[17:47:20.735]                             name <- restart$name
[17:47:20.735]                             if (is.null(name)) 
[17:47:20.735]                               next
[17:47:20.735]                             if (!grepl(pattern, name)) 
[17:47:20.735]                               next
[17:47:20.735]                             invokeRestart(restart)
[17:47:20.735]                             muffled <- TRUE
[17:47:20.735]                             break
[17:47:20.735]                           }
[17:47:20.735]                         }
[17:47:20.735]                       }
[17:47:20.735]                       invisible(muffled)
[17:47:20.735]                     }
[17:47:20.735]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.735]                   }
[17:47:20.735]                 }
[17:47:20.735]             }
[17:47:20.735]         }))
[17:47:20.735]     }, error = function(ex) {
[17:47:20.735]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.735]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.735]                 ...future.rng), started = ...future.startTime, 
[17:47:20.735]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.735]             version = "1.8"), class = "FutureResult")
[17:47:20.735]     }, finally = {
[17:47:20.735]         if (!identical(...future.workdir, getwd())) 
[17:47:20.735]             setwd(...future.workdir)
[17:47:20.735]         {
[17:47:20.735]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.735]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.735]             }
[17:47:20.735]             base::options(...future.oldOptions)
[17:47:20.735]             if (.Platform$OS.type == "windows") {
[17:47:20.735]                 old_names <- names(...future.oldEnvVars)
[17:47:20.735]                 envs <- base::Sys.getenv()
[17:47:20.735]                 names <- names(envs)
[17:47:20.735]                 common <- intersect(names, old_names)
[17:47:20.735]                 added <- setdiff(names, old_names)
[17:47:20.735]                 removed <- setdiff(old_names, names)
[17:47:20.735]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.735]                   envs[common]]
[17:47:20.735]                 NAMES <- toupper(changed)
[17:47:20.735]                 args <- list()
[17:47:20.735]                 for (kk in seq_along(NAMES)) {
[17:47:20.735]                   name <- changed[[kk]]
[17:47:20.735]                   NAME <- NAMES[[kk]]
[17:47:20.735]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.735]                     next
[17:47:20.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.735]                 }
[17:47:20.735]                 NAMES <- toupper(added)
[17:47:20.735]                 for (kk in seq_along(NAMES)) {
[17:47:20.735]                   name <- added[[kk]]
[17:47:20.735]                   NAME <- NAMES[[kk]]
[17:47:20.735]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.735]                     next
[17:47:20.735]                   args[[name]] <- ""
[17:47:20.735]                 }
[17:47:20.735]                 NAMES <- toupper(removed)
[17:47:20.735]                 for (kk in seq_along(NAMES)) {
[17:47:20.735]                   name <- removed[[kk]]
[17:47:20.735]                   NAME <- NAMES[[kk]]
[17:47:20.735]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.735]                     next
[17:47:20.735]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.735]                 }
[17:47:20.735]                 if (length(args) > 0) 
[17:47:20.735]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.735]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.735]             }
[17:47:20.735]             else {
[17:47:20.735]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.735]             }
[17:47:20.735]             {
[17:47:20.735]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.735]                   0L) {
[17:47:20.735]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.735]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.735]                   base::options(opts)
[17:47:20.735]                 }
[17:47:20.735]                 {
[17:47:20.735]                   {
[17:47:20.735]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:20.735]                     NULL
[17:47:20.735]                   }
[17:47:20.735]                   options(future.plan = NULL)
[17:47:20.735]                   if (is.na(NA_character_)) 
[17:47:20.735]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.735]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.735]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.735]                     .init = FALSE)
[17:47:20.735]                 }
[17:47:20.735]             }
[17:47:20.735]         }
[17:47:20.735]     })
[17:47:20.735]     if (TRUE) {
[17:47:20.735]         base::sink(type = "output", split = FALSE)
[17:47:20.735]         if (TRUE) {
[17:47:20.735]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.735]         }
[17:47:20.735]         else {
[17:47:20.735]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.735]         }
[17:47:20.735]         base::close(...future.stdout)
[17:47:20.735]         ...future.stdout <- NULL
[17:47:20.735]     }
[17:47:20.735]     ...future.result$conditions <- ...future.conditions
[17:47:20.735]     ...future.result$finished <- base::Sys.time()
[17:47:20.735]     ...future.result
[17:47:20.735] }
[17:47:20.737] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[17:47:20.738] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[17:47:20.738] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[17:47:20.738] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[17:47:20.738] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:20.740] receiveMessageFromWorker() for ClusterFuture ...
[17:47:20.740] - Validating connection of MultisessionFuture
[17:47:20.740] - received message: FutureResult
[17:47:20.740] - Received FutureResult
[17:47:20.741] - Erased future from FutureRegistry
[17:47:20.741] result() for ClusterFuture ...
[17:47:20.741] - result already collected: FutureResult
[17:47:20.741] result() for ClusterFuture ... done
[17:47:20.741] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2712700a-5633-611d-aed4-06f2fc08c4cb
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:20.741] result() for ClusterFuture ...
[17:47:20.741] - result already collected: FutureResult
[17:47:20.741] result() for ClusterFuture ... done
[17:47:20.741] result() for ClusterFuture ...
[17:47:20.741] - result already collected: FutureResult
[17:47:20.742] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[17:47:20.742] getGlobalsAndPackages() ...
[17:47:20.742] Searching for globals...
[17:47:20.743] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:47:20.743] Searching for globals ... DONE
[17:47:20.743] Resolving globals: FALSE
[17:47:20.743] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[17:47:20.744] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[17:47:20.744] getGlobalsAndPackages() ...
[17:47:20.744] Searching for globals...
[17:47:20.745] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:47:20.745] Searching for globals ... DONE
[17:47:20.745] Resolving globals: FALSE
[17:47:20.746] The total size of the 2 globals is 112 bytes (112 bytes)
[17:47:20.746] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:47:20.746] - globals: [2] ‘a’, ‘b’
[17:47:20.746] 
[17:47:20.746] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[17:47:20.747] Packages needed by the future expression (n = 0): <none>
[17:47:20.747] Packages needed by future strategies (n = 0): <none>
[17:47:20.747] {
[17:47:20.747]     {
[17:47:20.747]         {
[17:47:20.747]             ...future.startTime <- base::Sys.time()
[17:47:20.747]             {
[17:47:20.747]                 {
[17:47:20.747]                   {
[17:47:20.747]                     base::local({
[17:47:20.747]                       has_future <- base::requireNamespace("future", 
[17:47:20.747]                         quietly = TRUE)
[17:47:20.747]                       if (has_future) {
[17:47:20.747]                         ns <- base::getNamespace("future")
[17:47:20.747]                         version <- ns[[".package"]][["version"]]
[17:47:20.747]                         if (is.null(version)) 
[17:47:20.747]                           version <- utils::packageVersion("future")
[17:47:20.747]                       }
[17:47:20.747]                       else {
[17:47:20.747]                         version <- NULL
[17:47:20.747]                       }
[17:47:20.747]                       if (!has_future || version < "1.8.0") {
[17:47:20.747]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:20.747]                           "", base::R.version$version.string), 
[17:47:20.747]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:20.747]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:20.747]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:20.747]                             "release", "version")], collapse = " "), 
[17:47:20.747]                           hostname = base::Sys.info()[["nodename"]])
[17:47:20.747]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:20.747]                           info)
[17:47:20.747]                         info <- base::paste(info, collapse = "; ")
[17:47:20.747]                         if (!has_future) {
[17:47:20.747]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:20.747]                             info)
[17:47:20.747]                         }
[17:47:20.747]                         else {
[17:47:20.747]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:20.747]                             info, version)
[17:47:20.747]                         }
[17:47:20.747]                         base::stop(msg)
[17:47:20.747]                       }
[17:47:20.747]                     })
[17:47:20.747]                   }
[17:47:20.747]                   ...future.strategy.old <- future::plan("list")
[17:47:20.747]                   options(future.plan = NULL)
[17:47:20.747]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.747]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:20.747]                 }
[17:47:20.747]                 ...future.workdir <- getwd()
[17:47:20.747]             }
[17:47:20.747]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:20.747]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:20.747]         }
[17:47:20.747]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:20.747]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:20.747]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:20.747]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:20.747]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:20.747]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:20.747]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:20.747]             base::names(...future.oldOptions))
[17:47:20.747]     }
[17:47:20.747]     if (FALSE) {
[17:47:20.747]     }
[17:47:20.747]     else {
[17:47:20.747]         if (TRUE) {
[17:47:20.747]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:20.747]                 open = "w")
[17:47:20.747]         }
[17:47:20.747]         else {
[17:47:20.747]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:20.747]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:20.747]         }
[17:47:20.747]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:20.747]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:20.747]             base::sink(type = "output", split = FALSE)
[17:47:20.747]             base::close(...future.stdout)
[17:47:20.747]         }, add = TRUE)
[17:47:20.747]     }
[17:47:20.747]     ...future.frame <- base::sys.nframe()
[17:47:20.747]     ...future.conditions <- base::list()
[17:47:20.747]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:20.747]     if (FALSE) {
[17:47:20.747]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:20.747]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:20.747]     }
[17:47:20.747]     ...future.result <- base::tryCatch({
[17:47:20.747]         base::withCallingHandlers({
[17:47:20.747]             ...future.value <- base::withVisible(base::local({
[17:47:20.747]                 a * b
[17:47:20.747]             }))
[17:47:20.747]             future::FutureResult(value = ...future.value$value, 
[17:47:20.747]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.747]                   ...future.rng), globalenv = if (FALSE) 
[17:47:20.747]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:20.747]                     ...future.globalenv.names))
[17:47:20.747]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:20.747]         }, condition = base::local({
[17:47:20.747]             c <- base::c
[17:47:20.747]             inherits <- base::inherits
[17:47:20.747]             invokeRestart <- base::invokeRestart
[17:47:20.747]             length <- base::length
[17:47:20.747]             list <- base::list
[17:47:20.747]             seq.int <- base::seq.int
[17:47:20.747]             signalCondition <- base::signalCondition
[17:47:20.747]             sys.calls <- base::sys.calls
[17:47:20.747]             `[[` <- base::`[[`
[17:47:20.747]             `+` <- base::`+`
[17:47:20.747]             `<<-` <- base::`<<-`
[17:47:20.747]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:20.747]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:20.747]                   3L)]
[17:47:20.747]             }
[17:47:20.747]             function(cond) {
[17:47:20.747]                 is_error <- inherits(cond, "error")
[17:47:20.747]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:20.747]                   NULL)
[17:47:20.747]                 if (is_error) {
[17:47:20.747]                   sessionInformation <- function() {
[17:47:20.747]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:20.747]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:20.747]                       search = base::search(), system = base::Sys.info())
[17:47:20.747]                   }
[17:47:20.747]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.747]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:20.747]                     cond$call), session = sessionInformation(), 
[17:47:20.747]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:20.747]                   signalCondition(cond)
[17:47:20.747]                 }
[17:47:20.747]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:20.747]                 "immediateCondition"))) {
[17:47:20.747]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:20.747]                   ...future.conditions[[length(...future.conditions) + 
[17:47:20.747]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:20.747]                   if (TRUE && !signal) {
[17:47:20.747]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.747]                     {
[17:47:20.747]                       inherits <- base::inherits
[17:47:20.747]                       invokeRestart <- base::invokeRestart
[17:47:20.747]                       is.null <- base::is.null
[17:47:20.747]                       muffled <- FALSE
[17:47:20.747]                       if (inherits(cond, "message")) {
[17:47:20.747]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.747]                         if (muffled) 
[17:47:20.747]                           invokeRestart("muffleMessage")
[17:47:20.747]                       }
[17:47:20.747]                       else if (inherits(cond, "warning")) {
[17:47:20.747]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.747]                         if (muffled) 
[17:47:20.747]                           invokeRestart("muffleWarning")
[17:47:20.747]                       }
[17:47:20.747]                       else if (inherits(cond, "condition")) {
[17:47:20.747]                         if (!is.null(pattern)) {
[17:47:20.747]                           computeRestarts <- base::computeRestarts
[17:47:20.747]                           grepl <- base::grepl
[17:47:20.747]                           restarts <- computeRestarts(cond)
[17:47:20.747]                           for (restart in restarts) {
[17:47:20.747]                             name <- restart$name
[17:47:20.747]                             if (is.null(name)) 
[17:47:20.747]                               next
[17:47:20.747]                             if (!grepl(pattern, name)) 
[17:47:20.747]                               next
[17:47:20.747]                             invokeRestart(restart)
[17:47:20.747]                             muffled <- TRUE
[17:47:20.747]                             break
[17:47:20.747]                           }
[17:47:20.747]                         }
[17:47:20.747]                       }
[17:47:20.747]                       invisible(muffled)
[17:47:20.747]                     }
[17:47:20.747]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.747]                   }
[17:47:20.747]                 }
[17:47:20.747]                 else {
[17:47:20.747]                   if (TRUE) {
[17:47:20.747]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:20.747]                     {
[17:47:20.747]                       inherits <- base::inherits
[17:47:20.747]                       invokeRestart <- base::invokeRestart
[17:47:20.747]                       is.null <- base::is.null
[17:47:20.747]                       muffled <- FALSE
[17:47:20.747]                       if (inherits(cond, "message")) {
[17:47:20.747]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:20.747]                         if (muffled) 
[17:47:20.747]                           invokeRestart("muffleMessage")
[17:47:20.747]                       }
[17:47:20.747]                       else if (inherits(cond, "warning")) {
[17:47:20.747]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:20.747]                         if (muffled) 
[17:47:20.747]                           invokeRestart("muffleWarning")
[17:47:20.747]                       }
[17:47:20.747]                       else if (inherits(cond, "condition")) {
[17:47:20.747]                         if (!is.null(pattern)) {
[17:47:20.747]                           computeRestarts <- base::computeRestarts
[17:47:20.747]                           grepl <- base::grepl
[17:47:20.747]                           restarts <- computeRestarts(cond)
[17:47:20.747]                           for (restart in restarts) {
[17:47:20.747]                             name <- restart$name
[17:47:20.747]                             if (is.null(name)) 
[17:47:20.747]                               next
[17:47:20.747]                             if (!grepl(pattern, name)) 
[17:47:20.747]                               next
[17:47:20.747]                             invokeRestart(restart)
[17:47:20.747]                             muffled <- TRUE
[17:47:20.747]                             break
[17:47:20.747]                           }
[17:47:20.747]                         }
[17:47:20.747]                       }
[17:47:20.747]                       invisible(muffled)
[17:47:20.747]                     }
[17:47:20.747]                     muffleCondition(cond, pattern = "^muffle")
[17:47:20.747]                   }
[17:47:20.747]                 }
[17:47:20.747]             }
[17:47:20.747]         }))
[17:47:20.747]     }, error = function(ex) {
[17:47:20.747]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:20.747]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:20.747]                 ...future.rng), started = ...future.startTime, 
[17:47:20.747]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:20.747]             version = "1.8"), class = "FutureResult")
[17:47:20.747]     }, finally = {
[17:47:20.747]         if (!identical(...future.workdir, getwd())) 
[17:47:20.747]             setwd(...future.workdir)
[17:47:20.747]         {
[17:47:20.747]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:20.747]                 ...future.oldOptions$nwarnings <- NULL
[17:47:20.747]             }
[17:47:20.747]             base::options(...future.oldOptions)
[17:47:20.747]             if (.Platform$OS.type == "windows") {
[17:47:20.747]                 old_names <- names(...future.oldEnvVars)
[17:47:20.747]                 envs <- base::Sys.getenv()
[17:47:20.747]                 names <- names(envs)
[17:47:20.747]                 common <- intersect(names, old_names)
[17:47:20.747]                 added <- setdiff(names, old_names)
[17:47:20.747]                 removed <- setdiff(old_names, names)
[17:47:20.747]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:20.747]                   envs[common]]
[17:47:20.747]                 NAMES <- toupper(changed)
[17:47:20.747]                 args <- list()
[17:47:20.747]                 for (kk in seq_along(NAMES)) {
[17:47:20.747]                   name <- changed[[kk]]
[17:47:20.747]                   NAME <- NAMES[[kk]]
[17:47:20.747]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.747]                     next
[17:47:20.747]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.747]                 }
[17:47:20.747]                 NAMES <- toupper(added)
[17:47:20.747]                 for (kk in seq_along(NAMES)) {
[17:47:20.747]                   name <- added[[kk]]
[17:47:20.747]                   NAME <- NAMES[[kk]]
[17:47:20.747]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.747]                     next
[17:47:20.747]                   args[[name]] <- ""
[17:47:20.747]                 }
[17:47:20.747]                 NAMES <- toupper(removed)
[17:47:20.747]                 for (kk in seq_along(NAMES)) {
[17:47:20.747]                   name <- removed[[kk]]
[17:47:20.747]                   NAME <- NAMES[[kk]]
[17:47:20.747]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:20.747]                     next
[17:47:20.747]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:20.747]                 }
[17:47:20.747]                 if (length(args) > 0) 
[17:47:20.747]                   base::do.call(base::Sys.setenv, args = args)
[17:47:20.747]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:20.747]             }
[17:47:20.747]             else {
[17:47:20.747]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:20.747]             }
[17:47:20.747]             {
[17:47:20.747]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:20.747]                   0L) {
[17:47:20.747]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:20.747]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:20.747]                   base::options(opts)
[17:47:20.747]                 }
[17:47:20.747]                 {
[17:47:20.747]                   {
[17:47:20.747]                     NULL
[17:47:20.747]                     RNGkind("Mersenne-Twister")
[17:47:20.747]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:20.747]                       inherits = FALSE)
[17:47:20.747]                   }
[17:47:20.747]                   options(future.plan = NULL)
[17:47:20.747]                   if (is.na(NA_character_)) 
[17:47:20.747]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:20.747]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:20.747]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:20.747]                     .init = FALSE)
[17:47:20.747]                 }
[17:47:20.747]             }
[17:47:20.747]         }
[17:47:20.747]     })
[17:47:20.747]     if (TRUE) {
[17:47:20.747]         base::sink(type = "output", split = FALSE)
[17:47:20.747]         if (TRUE) {
[17:47:20.747]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:20.747]         }
[17:47:20.747]         else {
[17:47:20.747]             ...future.result["stdout"] <- base::list(NULL)
[17:47:20.747]         }
[17:47:20.747]         base::close(...future.stdout)
[17:47:20.747]         ...future.stdout <- NULL
[17:47:20.747]     }
[17:47:20.747]     ...future.result$conditions <- ...future.conditions
[17:47:20.747]     ...future.result$finished <- base::Sys.time()
[17:47:20.747]     ...future.result
[17:47:20.747] }
[17:47:20.749] assign_globals() ...
[17:47:20.749] List of 2
[17:47:20.749]  $ a: num 2
[17:47:20.749]  $ b: num 3
[17:47:20.749]  - attr(*, "where")=List of 2
[17:47:20.749]   ..$ a:<environment: R_EmptyEnv> 
[17:47:20.749]   ..$ b:<environment: R_EmptyEnv> 
[17:47:20.749]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:20.749]  - attr(*, "resolved")= logi FALSE
[17:47:20.749]  - attr(*, "total_size")= num 112
[17:47:20.754] - copied ‘a’ to environment
[17:47:20.754] - copied ‘b’ to environment
[17:47:20.754] assign_globals() ... done
[17:47:20.754] plan(): Setting new future strategy stack:
[17:47:20.754] List of future strategies:
[17:47:20.754] 1. sequential:
[17:47:20.754]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:20.754]    - tweaked: FALSE
[17:47:20.754]    - call: NULL
[17:47:20.755] plan(): nbrOfWorkers() = 1
[17:47:20.756] plan(): Setting new future strategy stack:
[17:47:20.756] List of future strategies:
[17:47:20.756] 1. sequential:
[17:47:20.756]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:20.756]    - tweaked: FALSE
[17:47:20.756]    - call: future::plan("sequential")
[17:47:20.756] plan(): nbrOfWorkers() = 1
[17:47:20.756] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[17:47:20.757] plan(): Setting new future strategy stack:
[17:47:20.757] List of future strategies:
[17:47:20.757] 1. multisession:
[17:47:20.757]    - args: function (..., workers = 2L, envir = parent.frame())
[17:47:20.757]    - tweaked: TRUE
[17:47:20.757]    - call: plan(multisession, workers = 2L)
[17:47:20.772] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:20.772] multisession:
[17:47:20.772] - args: function (..., workers = 2L, envir = parent.frame())
[17:47:20.772] - tweaked: TRUE
[17:47:20.772] - call: plan(multisession, workers = 2L)
[17:47:20.773] getGlobalsAndPackages() ...
[17:47:20.773] Not searching for globals
[17:47:20.773] - globals: [0] <none>
[17:47:20.773] getGlobalsAndPackages() ... DONE
[17:47:20.773] [local output] makeClusterPSOCK() ...
[17:47:20.777] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:20.778] [local output] Base port: 11924
[17:47:20.778] [local output] Getting setup options for 2 cluster nodes ...
[17:47:20.778] [local output]  - Node 1 of 2 ...
[17:47:20.778] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:20.779] [local output] Rscript port: 11924

[17:47:20.779] [local output]  - Node 2 of 2 ...
[17:47:20.779] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:20.780] [local output] Rscript port: 11924

[17:47:20.780] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:20.780] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:20.781] [local output] Setting up PSOCK nodes in parallel
[17:47:20.781] List of 36
[17:47:20.781]  $ worker          : chr "localhost"
[17:47:20.781]   ..- attr(*, "localhost")= logi TRUE
[17:47:20.781]  $ master          : chr "localhost"
[17:47:20.781]  $ port            : int 11924
[17:47:20.781]  $ connectTimeout  : num 120
[17:47:20.781]  $ timeout         : num 2592000
[17:47:20.781]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:20.781]  $ homogeneous     : logi TRUE
[17:47:20.781]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:20.781]  $ rscript_envs    : NULL
[17:47:20.781]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:20.781]  $ rscript_startup : NULL
[17:47:20.781]  $ rscript_sh      : chr "sh"
[17:47:20.781]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:20.781]  $ methods         : logi TRUE
[17:47:20.781]  $ socketOptions   : chr "no-delay"
[17:47:20.781]  $ useXDR          : logi FALSE
[17:47:20.781]  $ outfile         : chr "/dev/null"
[17:47:20.781]  $ renice          : int NA
[17:47:20.781]  $ rshcmd          : NULL
[17:47:20.781]  $ user            : chr(0) 
[17:47:20.781]  $ revtunnel       : logi FALSE
[17:47:20.781]  $ rshlogfile      : NULL
[17:47:20.781]  $ rshopts         : chr(0) 
[17:47:20.781]  $ rank            : int 1
[17:47:20.781]  $ manual          : logi FALSE
[17:47:20.781]  $ dryrun          : logi FALSE
[17:47:20.781]  $ quiet           : logi FALSE
[17:47:20.781]  $ setup_strategy  : chr "parallel"
[17:47:20.781]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:20.781]  $ pidfile         : chr "/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b24744d46ad0.pid"
[17:47:20.781]  $ rshcmd_label    : NULL
[17:47:20.781]  $ rsh_call        : NULL
[17:47:20.781]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:20.781]  $ localMachine    : logi TRUE
[17:47:20.781]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:20.781]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:20.781]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:20.781]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:20.781]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:20.781]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:20.781]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:20.781]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:20.781]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:20.781]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:20.781]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:20.781]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:20.781]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:20.781]  $ arguments       :List of 28
[17:47:20.781]   ..$ worker          : chr "localhost"
[17:47:20.781]   ..$ master          : NULL
[17:47:20.781]   ..$ port            : int 11924
[17:47:20.781]   ..$ connectTimeout  : num 120
[17:47:20.781]   ..$ timeout         : num 2592000
[17:47:20.781]   ..$ rscript         : NULL
[17:47:20.781]   ..$ homogeneous     : NULL
[17:47:20.781]   ..$ rscript_args    : NULL
[17:47:20.781]   ..$ rscript_envs    : NULL
[17:47:20.781]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:20.781]   ..$ rscript_startup : NULL
[17:47:20.781]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:20.781]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:20.781]   ..$ methods         : logi TRUE
[17:47:20.781]   ..$ socketOptions   : chr "no-delay"
[17:47:20.781]   ..$ useXDR          : logi FALSE
[17:47:20.781]   ..$ outfile         : chr "/dev/null"
[17:47:20.781]   ..$ renice          : int NA
[17:47:20.781]   ..$ rshcmd          : NULL
[17:47:20.781]   ..$ user            : NULL
[17:47:20.781]   ..$ revtunnel       : logi NA
[17:47:20.781]   ..$ rshlogfile      : NULL
[17:47:20.781]   ..$ rshopts         : NULL
[17:47:20.781]   ..$ rank            : int 1
[17:47:20.781]   ..$ manual          : logi FALSE
[17:47:20.781]   ..$ dryrun          : logi FALSE
[17:47:20.781]   ..$ quiet           : logi FALSE
[17:47:20.781]   ..$ setup_strategy  : chr "parallel"
[17:47:20.781]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:20.797] [local output] System call to launch all workers:
[17:47:20.797] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b24744d46ad0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11924 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:20.797] [local output] Starting PSOCK main server
[17:47:20.799] [local output] Workers launched
[17:47:20.799] [local output] Waiting for workers to connect back
[17:47:20.799]  - [local output] 0 workers out of 2 ready
[17:47:21.043]  - [local output] 0 workers out of 2 ready
[17:47:21.044]  - [local output] 1 workers out of 2 ready
[17:47:21.051]  - [local output] 1 workers out of 2 ready
[17:47:21.052]  - [local output] 2 workers out of 2 ready
[17:47:21.052] [local output] Launching of workers completed
[17:47:21.052] [local output] Collecting session information from workers
[17:47:21.052] [local output]  - Worker #1 of 2
[17:47:21.053] [local output]  - Worker #2 of 2
[17:47:21.053] [local output] makeClusterPSOCK() ... done
[17:47:21.064] Packages needed by the future expression (n = 0): <none>
[17:47:21.064] Packages needed by future strategies (n = 0): <none>
[17:47:21.064] {
[17:47:21.064]     {
[17:47:21.064]         {
[17:47:21.064]             ...future.startTime <- base::Sys.time()
[17:47:21.064]             {
[17:47:21.064]                 {
[17:47:21.064]                   {
[17:47:21.064]                     {
[17:47:21.064]                       base::local({
[17:47:21.064]                         has_future <- base::requireNamespace("future", 
[17:47:21.064]                           quietly = TRUE)
[17:47:21.064]                         if (has_future) {
[17:47:21.064]                           ns <- base::getNamespace("future")
[17:47:21.064]                           version <- ns[[".package"]][["version"]]
[17:47:21.064]                           if (is.null(version)) 
[17:47:21.064]                             version <- utils::packageVersion("future")
[17:47:21.064]                         }
[17:47:21.064]                         else {
[17:47:21.064]                           version <- NULL
[17:47:21.064]                         }
[17:47:21.064]                         if (!has_future || version < "1.8.0") {
[17:47:21.064]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:21.064]                             "", base::R.version$version.string), 
[17:47:21.064]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:21.064]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:21.064]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:21.064]                               "release", "version")], collapse = " "), 
[17:47:21.064]                             hostname = base::Sys.info()[["nodename"]])
[17:47:21.064]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:21.064]                             info)
[17:47:21.064]                           info <- base::paste(info, collapse = "; ")
[17:47:21.064]                           if (!has_future) {
[17:47:21.064]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:21.064]                               info)
[17:47:21.064]                           }
[17:47:21.064]                           else {
[17:47:21.064]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:21.064]                               info, version)
[17:47:21.064]                           }
[17:47:21.064]                           base::stop(msg)
[17:47:21.064]                         }
[17:47:21.064]                       })
[17:47:21.064]                     }
[17:47:21.064]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:21.064]                     base::options(mc.cores = 1L)
[17:47:21.064]                   }
[17:47:21.064]                   ...future.strategy.old <- future::plan("list")
[17:47:21.064]                   options(future.plan = NULL)
[17:47:21.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:21.064]                 }
[17:47:21.064]                 ...future.workdir <- getwd()
[17:47:21.064]             }
[17:47:21.064]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:21.064]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:21.064]         }
[17:47:21.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:21.064]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:21.064]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:21.064]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:21.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:21.064]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:21.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:21.064]             base::names(...future.oldOptions))
[17:47:21.064]     }
[17:47:21.064]     if (FALSE) {
[17:47:21.064]     }
[17:47:21.064]     else {
[17:47:21.064]         if (TRUE) {
[17:47:21.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:21.064]                 open = "w")
[17:47:21.064]         }
[17:47:21.064]         else {
[17:47:21.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:21.064]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:21.064]         }
[17:47:21.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:21.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:21.064]             base::sink(type = "output", split = FALSE)
[17:47:21.064]             base::close(...future.stdout)
[17:47:21.064]         }, add = TRUE)
[17:47:21.064]     }
[17:47:21.064]     ...future.frame <- base::sys.nframe()
[17:47:21.064]     ...future.conditions <- base::list()
[17:47:21.064]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:21.064]     if (FALSE) {
[17:47:21.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:21.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:21.064]     }
[17:47:21.064]     ...future.result <- base::tryCatch({
[17:47:21.064]         base::withCallingHandlers({
[17:47:21.064]             ...future.value <- base::withVisible(base::local({
[17:47:21.064]                 ...future.makeSendCondition <- base::local({
[17:47:21.064]                   sendCondition <- NULL
[17:47:21.064]                   function(frame = 1L) {
[17:47:21.064]                     if (is.function(sendCondition)) 
[17:47:21.064]                       return(sendCondition)
[17:47:21.064]                     ns <- getNamespace("parallel")
[17:47:21.064]                     if (exists("sendData", mode = "function", 
[17:47:21.064]                       envir = ns)) {
[17:47:21.064]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:21.064]                         envir = ns)
[17:47:21.064]                       envir <- sys.frame(frame)
[17:47:21.064]                       master <- NULL
[17:47:21.064]                       while (!identical(envir, .GlobalEnv) && 
[17:47:21.064]                         !identical(envir, emptyenv())) {
[17:47:21.064]                         if (exists("master", mode = "list", envir = envir, 
[17:47:21.064]                           inherits = FALSE)) {
[17:47:21.064]                           master <- get("master", mode = "list", 
[17:47:21.064]                             envir = envir, inherits = FALSE)
[17:47:21.064]                           if (inherits(master, c("SOCKnode", 
[17:47:21.064]                             "SOCK0node"))) {
[17:47:21.064]                             sendCondition <<- function(cond) {
[17:47:21.064]                               data <- list(type = "VALUE", value = cond, 
[17:47:21.064]                                 success = TRUE)
[17:47:21.064]                               parallel_sendData(master, data)
[17:47:21.064]                             }
[17:47:21.064]                             return(sendCondition)
[17:47:21.064]                           }
[17:47:21.064]                         }
[17:47:21.064]                         frame <- frame + 1L
[17:47:21.064]                         envir <- sys.frame(frame)
[17:47:21.064]                       }
[17:47:21.064]                     }
[17:47:21.064]                     sendCondition <<- function(cond) NULL
[17:47:21.064]                   }
[17:47:21.064]                 })
[17:47:21.064]                 withCallingHandlers({
[17:47:21.064]                   NA
[17:47:21.064]                 }, immediateCondition = function(cond) {
[17:47:21.064]                   sendCondition <- ...future.makeSendCondition()
[17:47:21.064]                   sendCondition(cond)
[17:47:21.064]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.064]                   {
[17:47:21.064]                     inherits <- base::inherits
[17:47:21.064]                     invokeRestart <- base::invokeRestart
[17:47:21.064]                     is.null <- base::is.null
[17:47:21.064]                     muffled <- FALSE
[17:47:21.064]                     if (inherits(cond, "message")) {
[17:47:21.064]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:21.064]                       if (muffled) 
[17:47:21.064]                         invokeRestart("muffleMessage")
[17:47:21.064]                     }
[17:47:21.064]                     else if (inherits(cond, "warning")) {
[17:47:21.064]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:21.064]                       if (muffled) 
[17:47:21.064]                         invokeRestart("muffleWarning")
[17:47:21.064]                     }
[17:47:21.064]                     else if (inherits(cond, "condition")) {
[17:47:21.064]                       if (!is.null(pattern)) {
[17:47:21.064]                         computeRestarts <- base::computeRestarts
[17:47:21.064]                         grepl <- base::grepl
[17:47:21.064]                         restarts <- computeRestarts(cond)
[17:47:21.064]                         for (restart in restarts) {
[17:47:21.064]                           name <- restart$name
[17:47:21.064]                           if (is.null(name)) 
[17:47:21.064]                             next
[17:47:21.064]                           if (!grepl(pattern, name)) 
[17:47:21.064]                             next
[17:47:21.064]                           invokeRestart(restart)
[17:47:21.064]                           muffled <- TRUE
[17:47:21.064]                           break
[17:47:21.064]                         }
[17:47:21.064]                       }
[17:47:21.064]                     }
[17:47:21.064]                     invisible(muffled)
[17:47:21.064]                   }
[17:47:21.064]                   muffleCondition(cond)
[17:47:21.064]                 })
[17:47:21.064]             }))
[17:47:21.064]             future::FutureResult(value = ...future.value$value, 
[17:47:21.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.064]                   ...future.rng), globalenv = if (FALSE) 
[17:47:21.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:21.064]                     ...future.globalenv.names))
[17:47:21.064]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:21.064]         }, condition = base::local({
[17:47:21.064]             c <- base::c
[17:47:21.064]             inherits <- base::inherits
[17:47:21.064]             invokeRestart <- base::invokeRestart
[17:47:21.064]             length <- base::length
[17:47:21.064]             list <- base::list
[17:47:21.064]             seq.int <- base::seq.int
[17:47:21.064]             signalCondition <- base::signalCondition
[17:47:21.064]             sys.calls <- base::sys.calls
[17:47:21.064]             `[[` <- base::`[[`
[17:47:21.064]             `+` <- base::`+`
[17:47:21.064]             `<<-` <- base::`<<-`
[17:47:21.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:21.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:21.064]                   3L)]
[17:47:21.064]             }
[17:47:21.064]             function(cond) {
[17:47:21.064]                 is_error <- inherits(cond, "error")
[17:47:21.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:21.064]                   NULL)
[17:47:21.064]                 if (is_error) {
[17:47:21.064]                   sessionInformation <- function() {
[17:47:21.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:21.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:21.064]                       search = base::search(), system = base::Sys.info())
[17:47:21.064]                   }
[17:47:21.064]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:21.064]                     cond$call), session = sessionInformation(), 
[17:47:21.064]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:21.064]                   signalCondition(cond)
[17:47:21.064]                 }
[17:47:21.064]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:21.064]                 "immediateCondition"))) {
[17:47:21.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:21.064]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:21.064]                   if (TRUE && !signal) {
[17:47:21.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.064]                     {
[17:47:21.064]                       inherits <- base::inherits
[17:47:21.064]                       invokeRestart <- base::invokeRestart
[17:47:21.064]                       is.null <- base::is.null
[17:47:21.064]                       muffled <- FALSE
[17:47:21.064]                       if (inherits(cond, "message")) {
[17:47:21.064]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.064]                         if (muffled) 
[17:47:21.064]                           invokeRestart("muffleMessage")
[17:47:21.064]                       }
[17:47:21.064]                       else if (inherits(cond, "warning")) {
[17:47:21.064]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.064]                         if (muffled) 
[17:47:21.064]                           invokeRestart("muffleWarning")
[17:47:21.064]                       }
[17:47:21.064]                       else if (inherits(cond, "condition")) {
[17:47:21.064]                         if (!is.null(pattern)) {
[17:47:21.064]                           computeRestarts <- base::computeRestarts
[17:47:21.064]                           grepl <- base::grepl
[17:47:21.064]                           restarts <- computeRestarts(cond)
[17:47:21.064]                           for (restart in restarts) {
[17:47:21.064]                             name <- restart$name
[17:47:21.064]                             if (is.null(name)) 
[17:47:21.064]                               next
[17:47:21.064]                             if (!grepl(pattern, name)) 
[17:47:21.064]                               next
[17:47:21.064]                             invokeRestart(restart)
[17:47:21.064]                             muffled <- TRUE
[17:47:21.064]                             break
[17:47:21.064]                           }
[17:47:21.064]                         }
[17:47:21.064]                       }
[17:47:21.064]                       invisible(muffled)
[17:47:21.064]                     }
[17:47:21.064]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.064]                   }
[17:47:21.064]                 }
[17:47:21.064]                 else {
[17:47:21.064]                   if (TRUE) {
[17:47:21.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.064]                     {
[17:47:21.064]                       inherits <- base::inherits
[17:47:21.064]                       invokeRestart <- base::invokeRestart
[17:47:21.064]                       is.null <- base::is.null
[17:47:21.064]                       muffled <- FALSE
[17:47:21.064]                       if (inherits(cond, "message")) {
[17:47:21.064]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.064]                         if (muffled) 
[17:47:21.064]                           invokeRestart("muffleMessage")
[17:47:21.064]                       }
[17:47:21.064]                       else if (inherits(cond, "warning")) {
[17:47:21.064]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.064]                         if (muffled) 
[17:47:21.064]                           invokeRestart("muffleWarning")
[17:47:21.064]                       }
[17:47:21.064]                       else if (inherits(cond, "condition")) {
[17:47:21.064]                         if (!is.null(pattern)) {
[17:47:21.064]                           computeRestarts <- base::computeRestarts
[17:47:21.064]                           grepl <- base::grepl
[17:47:21.064]                           restarts <- computeRestarts(cond)
[17:47:21.064]                           for (restart in restarts) {
[17:47:21.064]                             name <- restart$name
[17:47:21.064]                             if (is.null(name)) 
[17:47:21.064]                               next
[17:47:21.064]                             if (!grepl(pattern, name)) 
[17:47:21.064]                               next
[17:47:21.064]                             invokeRestart(restart)
[17:47:21.064]                             muffled <- TRUE
[17:47:21.064]                             break
[17:47:21.064]                           }
[17:47:21.064]                         }
[17:47:21.064]                       }
[17:47:21.064]                       invisible(muffled)
[17:47:21.064]                     }
[17:47:21.064]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.064]                   }
[17:47:21.064]                 }
[17:47:21.064]             }
[17:47:21.064]         }))
[17:47:21.064]     }, error = function(ex) {
[17:47:21.064]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:21.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.064]                 ...future.rng), started = ...future.startTime, 
[17:47:21.064]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:21.064]             version = "1.8"), class = "FutureResult")
[17:47:21.064]     }, finally = {
[17:47:21.064]         if (!identical(...future.workdir, getwd())) 
[17:47:21.064]             setwd(...future.workdir)
[17:47:21.064]         {
[17:47:21.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:21.064]                 ...future.oldOptions$nwarnings <- NULL
[17:47:21.064]             }
[17:47:21.064]             base::options(...future.oldOptions)
[17:47:21.064]             if (.Platform$OS.type == "windows") {
[17:47:21.064]                 old_names <- names(...future.oldEnvVars)
[17:47:21.064]                 envs <- base::Sys.getenv()
[17:47:21.064]                 names <- names(envs)
[17:47:21.064]                 common <- intersect(names, old_names)
[17:47:21.064]                 added <- setdiff(names, old_names)
[17:47:21.064]                 removed <- setdiff(old_names, names)
[17:47:21.064]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:21.064]                   envs[common]]
[17:47:21.064]                 NAMES <- toupper(changed)
[17:47:21.064]                 args <- list()
[17:47:21.064]                 for (kk in seq_along(NAMES)) {
[17:47:21.064]                   name <- changed[[kk]]
[17:47:21.064]                   NAME <- NAMES[[kk]]
[17:47:21.064]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.064]                     next
[17:47:21.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.064]                 }
[17:47:21.064]                 NAMES <- toupper(added)
[17:47:21.064]                 for (kk in seq_along(NAMES)) {
[17:47:21.064]                   name <- added[[kk]]
[17:47:21.064]                   NAME <- NAMES[[kk]]
[17:47:21.064]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.064]                     next
[17:47:21.064]                   args[[name]] <- ""
[17:47:21.064]                 }
[17:47:21.064]                 NAMES <- toupper(removed)
[17:47:21.064]                 for (kk in seq_along(NAMES)) {
[17:47:21.064]                   name <- removed[[kk]]
[17:47:21.064]                   NAME <- NAMES[[kk]]
[17:47:21.064]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.064]                     next
[17:47:21.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.064]                 }
[17:47:21.064]                 if (length(args) > 0) 
[17:47:21.064]                   base::do.call(base::Sys.setenv, args = args)
[17:47:21.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:21.064]             }
[17:47:21.064]             else {
[17:47:21.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:21.064]             }
[17:47:21.064]             {
[17:47:21.064]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:21.064]                   0L) {
[17:47:21.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:21.064]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:21.064]                   base::options(opts)
[17:47:21.064]                 }
[17:47:21.064]                 {
[17:47:21.064]                   {
[17:47:21.064]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:21.064]                     NULL
[17:47:21.064]                   }
[17:47:21.064]                   options(future.plan = NULL)
[17:47:21.064]                   if (is.na(NA_character_)) 
[17:47:21.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:21.064]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:21.064]                     .init = FALSE)
[17:47:21.064]                 }
[17:47:21.064]             }
[17:47:21.064]         }
[17:47:21.064]     })
[17:47:21.064]     if (TRUE) {
[17:47:21.064]         base::sink(type = "output", split = FALSE)
[17:47:21.064]         if (TRUE) {
[17:47:21.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:21.064]         }
[17:47:21.064]         else {
[17:47:21.064]             ...future.result["stdout"] <- base::list(NULL)
[17:47:21.064]         }
[17:47:21.064]         base::close(...future.stdout)
[17:47:21.064]         ...future.stdout <- NULL
[17:47:21.064]     }
[17:47:21.064]     ...future.result$conditions <- ...future.conditions
[17:47:21.064]     ...future.result$finished <- base::Sys.time()
[17:47:21.064]     ...future.result
[17:47:21.064] }
[17:47:21.117] MultisessionFuture started
[17:47:21.118] result() for ClusterFuture ...
[17:47:21.118] receiveMessageFromWorker() for ClusterFuture ...
[17:47:21.118] - Validating connection of MultisessionFuture
[17:47:21.150] - received message: FutureResult
[17:47:21.150] - Received FutureResult
[17:47:21.150] - Erased future from FutureRegistry
[17:47:21.151] result() for ClusterFuture ...
[17:47:21.151] - result already collected: FutureResult
[17:47:21.151] result() for ClusterFuture ... done
[17:47:21.151] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:21.151] result() for ClusterFuture ... done
[17:47:21.151] result() for ClusterFuture ...
[17:47:21.151] - result already collected: FutureResult
[17:47:21.151] result() for ClusterFuture ... done
[17:47:21.151] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:21.152] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[17:47:21.152] getGlobalsAndPackages() ...
[17:47:21.152] Searching for globals...
[17:47:21.153] - globals found: [2] ‘{’, ‘gc’
[17:47:21.153] Searching for globals ... DONE
[17:47:21.153] Resolving globals: FALSE
[17:47:21.153] 
[17:47:21.153] 
[17:47:21.154] getGlobalsAndPackages() ... DONE
[17:47:21.154] run() for ‘Future’ ...
[17:47:21.154] - state: ‘created’
[17:47:21.154] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:21.164] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:21.165] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:21.165]   - Field: ‘node’
[17:47:21.165]   - Field: ‘label’
[17:47:21.165]   - Field: ‘local’
[17:47:21.165]   - Field: ‘owner’
[17:47:21.165]   - Field: ‘envir’
[17:47:21.165]   - Field: ‘workers’
[17:47:21.165]   - Field: ‘packages’
[17:47:21.165]   - Field: ‘gc’
[17:47:21.165]   - Field: ‘conditions’
[17:47:21.166]   - Field: ‘persistent’
[17:47:21.166]   - Field: ‘expr’
[17:47:21.166]   - Field: ‘uuid’
[17:47:21.166]   - Field: ‘seed’
[17:47:21.166]   - Field: ‘version’
[17:47:21.166]   - Field: ‘result’
[17:47:21.166]   - Field: ‘asynchronous’
[17:47:21.166]   - Field: ‘calls’
[17:47:21.166]   - Field: ‘globals’
[17:47:21.166]   - Field: ‘stdout’
[17:47:21.166]   - Field: ‘earlySignal’
[17:47:21.167]   - Field: ‘lazy’
[17:47:21.167]   - Field: ‘state’
[17:47:21.167] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:21.167] - Launch lazy future ...
[17:47:21.167] Packages needed by the future expression (n = 0): <none>
[17:47:21.167] Packages needed by future strategies (n = 0): <none>
[17:47:21.168] {
[17:47:21.168]     {
[17:47:21.168]         {
[17:47:21.168]             ...future.startTime <- base::Sys.time()
[17:47:21.168]             {
[17:47:21.168]                 {
[17:47:21.168]                   {
[17:47:21.168]                     {
[17:47:21.168]                       base::local({
[17:47:21.168]                         has_future <- base::requireNamespace("future", 
[17:47:21.168]                           quietly = TRUE)
[17:47:21.168]                         if (has_future) {
[17:47:21.168]                           ns <- base::getNamespace("future")
[17:47:21.168]                           version <- ns[[".package"]][["version"]]
[17:47:21.168]                           if (is.null(version)) 
[17:47:21.168]                             version <- utils::packageVersion("future")
[17:47:21.168]                         }
[17:47:21.168]                         else {
[17:47:21.168]                           version <- NULL
[17:47:21.168]                         }
[17:47:21.168]                         if (!has_future || version < "1.8.0") {
[17:47:21.168]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:21.168]                             "", base::R.version$version.string), 
[17:47:21.168]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:21.168]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:21.168]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:21.168]                               "release", "version")], collapse = " "), 
[17:47:21.168]                             hostname = base::Sys.info()[["nodename"]])
[17:47:21.168]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:21.168]                             info)
[17:47:21.168]                           info <- base::paste(info, collapse = "; ")
[17:47:21.168]                           if (!has_future) {
[17:47:21.168]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:21.168]                               info)
[17:47:21.168]                           }
[17:47:21.168]                           else {
[17:47:21.168]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:21.168]                               info, version)
[17:47:21.168]                           }
[17:47:21.168]                           base::stop(msg)
[17:47:21.168]                         }
[17:47:21.168]                       })
[17:47:21.168]                     }
[17:47:21.168]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:21.168]                     base::options(mc.cores = 1L)
[17:47:21.168]                   }
[17:47:21.168]                   ...future.strategy.old <- future::plan("list")
[17:47:21.168]                   options(future.plan = NULL)
[17:47:21.168]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.168]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:21.168]                 }
[17:47:21.168]                 ...future.workdir <- getwd()
[17:47:21.168]             }
[17:47:21.168]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:21.168]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:21.168]         }
[17:47:21.168]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:21.168]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:21.168]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:21.168]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:21.168]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:21.168]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:21.168]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:21.168]             base::names(...future.oldOptions))
[17:47:21.168]     }
[17:47:21.168]     if (FALSE) {
[17:47:21.168]     }
[17:47:21.168]     else {
[17:47:21.168]         if (TRUE) {
[17:47:21.168]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:21.168]                 open = "w")
[17:47:21.168]         }
[17:47:21.168]         else {
[17:47:21.168]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:21.168]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:21.168]         }
[17:47:21.168]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:21.168]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:21.168]             base::sink(type = "output", split = FALSE)
[17:47:21.168]             base::close(...future.stdout)
[17:47:21.168]         }, add = TRUE)
[17:47:21.168]     }
[17:47:21.168]     ...future.frame <- base::sys.nframe()
[17:47:21.168]     ...future.conditions <- base::list()
[17:47:21.168]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:21.168]     if (FALSE) {
[17:47:21.168]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:21.168]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:21.168]     }
[17:47:21.168]     ...future.result <- base::tryCatch({
[17:47:21.168]         base::withCallingHandlers({
[17:47:21.168]             ...future.value <- base::withVisible(base::local({
[17:47:21.168]                 ...future.makeSendCondition <- base::local({
[17:47:21.168]                   sendCondition <- NULL
[17:47:21.168]                   function(frame = 1L) {
[17:47:21.168]                     if (is.function(sendCondition)) 
[17:47:21.168]                       return(sendCondition)
[17:47:21.168]                     ns <- getNamespace("parallel")
[17:47:21.168]                     if (exists("sendData", mode = "function", 
[17:47:21.168]                       envir = ns)) {
[17:47:21.168]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:21.168]                         envir = ns)
[17:47:21.168]                       envir <- sys.frame(frame)
[17:47:21.168]                       master <- NULL
[17:47:21.168]                       while (!identical(envir, .GlobalEnv) && 
[17:47:21.168]                         !identical(envir, emptyenv())) {
[17:47:21.168]                         if (exists("master", mode = "list", envir = envir, 
[17:47:21.168]                           inherits = FALSE)) {
[17:47:21.168]                           master <- get("master", mode = "list", 
[17:47:21.168]                             envir = envir, inherits = FALSE)
[17:47:21.168]                           if (inherits(master, c("SOCKnode", 
[17:47:21.168]                             "SOCK0node"))) {
[17:47:21.168]                             sendCondition <<- function(cond) {
[17:47:21.168]                               data <- list(type = "VALUE", value = cond, 
[17:47:21.168]                                 success = TRUE)
[17:47:21.168]                               parallel_sendData(master, data)
[17:47:21.168]                             }
[17:47:21.168]                             return(sendCondition)
[17:47:21.168]                           }
[17:47:21.168]                         }
[17:47:21.168]                         frame <- frame + 1L
[17:47:21.168]                         envir <- sys.frame(frame)
[17:47:21.168]                       }
[17:47:21.168]                     }
[17:47:21.168]                     sendCondition <<- function(cond) NULL
[17:47:21.168]                   }
[17:47:21.168]                 })
[17:47:21.168]                 withCallingHandlers({
[17:47:21.168]                   {
[17:47:21.168]                     gc()
[17:47:21.168]                   }
[17:47:21.168]                 }, immediateCondition = function(cond) {
[17:47:21.168]                   sendCondition <- ...future.makeSendCondition()
[17:47:21.168]                   sendCondition(cond)
[17:47:21.168]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.168]                   {
[17:47:21.168]                     inherits <- base::inherits
[17:47:21.168]                     invokeRestart <- base::invokeRestart
[17:47:21.168]                     is.null <- base::is.null
[17:47:21.168]                     muffled <- FALSE
[17:47:21.168]                     if (inherits(cond, "message")) {
[17:47:21.168]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:21.168]                       if (muffled) 
[17:47:21.168]                         invokeRestart("muffleMessage")
[17:47:21.168]                     }
[17:47:21.168]                     else if (inherits(cond, "warning")) {
[17:47:21.168]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:21.168]                       if (muffled) 
[17:47:21.168]                         invokeRestart("muffleWarning")
[17:47:21.168]                     }
[17:47:21.168]                     else if (inherits(cond, "condition")) {
[17:47:21.168]                       if (!is.null(pattern)) {
[17:47:21.168]                         computeRestarts <- base::computeRestarts
[17:47:21.168]                         grepl <- base::grepl
[17:47:21.168]                         restarts <- computeRestarts(cond)
[17:47:21.168]                         for (restart in restarts) {
[17:47:21.168]                           name <- restart$name
[17:47:21.168]                           if (is.null(name)) 
[17:47:21.168]                             next
[17:47:21.168]                           if (!grepl(pattern, name)) 
[17:47:21.168]                             next
[17:47:21.168]                           invokeRestart(restart)
[17:47:21.168]                           muffled <- TRUE
[17:47:21.168]                           break
[17:47:21.168]                         }
[17:47:21.168]                       }
[17:47:21.168]                     }
[17:47:21.168]                     invisible(muffled)
[17:47:21.168]                   }
[17:47:21.168]                   muffleCondition(cond)
[17:47:21.168]                 })
[17:47:21.168]             }))
[17:47:21.168]             future::FutureResult(value = ...future.value$value, 
[17:47:21.168]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.168]                   ...future.rng), globalenv = if (FALSE) 
[17:47:21.168]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:21.168]                     ...future.globalenv.names))
[17:47:21.168]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:21.168]         }, condition = base::local({
[17:47:21.168]             c <- base::c
[17:47:21.168]             inherits <- base::inherits
[17:47:21.168]             invokeRestart <- base::invokeRestart
[17:47:21.168]             length <- base::length
[17:47:21.168]             list <- base::list
[17:47:21.168]             seq.int <- base::seq.int
[17:47:21.168]             signalCondition <- base::signalCondition
[17:47:21.168]             sys.calls <- base::sys.calls
[17:47:21.168]             `[[` <- base::`[[`
[17:47:21.168]             `+` <- base::`+`
[17:47:21.168]             `<<-` <- base::`<<-`
[17:47:21.168]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:21.168]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:21.168]                   3L)]
[17:47:21.168]             }
[17:47:21.168]             function(cond) {
[17:47:21.168]                 is_error <- inherits(cond, "error")
[17:47:21.168]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:21.168]                   NULL)
[17:47:21.168]                 if (is_error) {
[17:47:21.168]                   sessionInformation <- function() {
[17:47:21.168]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:21.168]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:21.168]                       search = base::search(), system = base::Sys.info())
[17:47:21.168]                   }
[17:47:21.168]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.168]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:21.168]                     cond$call), session = sessionInformation(), 
[17:47:21.168]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:21.168]                   signalCondition(cond)
[17:47:21.168]                 }
[17:47:21.168]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:21.168]                 "immediateCondition"))) {
[17:47:21.168]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:21.168]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.168]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:21.168]                   if (TRUE && !signal) {
[17:47:21.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.168]                     {
[17:47:21.168]                       inherits <- base::inherits
[17:47:21.168]                       invokeRestart <- base::invokeRestart
[17:47:21.168]                       is.null <- base::is.null
[17:47:21.168]                       muffled <- FALSE
[17:47:21.168]                       if (inherits(cond, "message")) {
[17:47:21.168]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.168]                         if (muffled) 
[17:47:21.168]                           invokeRestart("muffleMessage")
[17:47:21.168]                       }
[17:47:21.168]                       else if (inherits(cond, "warning")) {
[17:47:21.168]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.168]                         if (muffled) 
[17:47:21.168]                           invokeRestart("muffleWarning")
[17:47:21.168]                       }
[17:47:21.168]                       else if (inherits(cond, "condition")) {
[17:47:21.168]                         if (!is.null(pattern)) {
[17:47:21.168]                           computeRestarts <- base::computeRestarts
[17:47:21.168]                           grepl <- base::grepl
[17:47:21.168]                           restarts <- computeRestarts(cond)
[17:47:21.168]                           for (restart in restarts) {
[17:47:21.168]                             name <- restart$name
[17:47:21.168]                             if (is.null(name)) 
[17:47:21.168]                               next
[17:47:21.168]                             if (!grepl(pattern, name)) 
[17:47:21.168]                               next
[17:47:21.168]                             invokeRestart(restart)
[17:47:21.168]                             muffled <- TRUE
[17:47:21.168]                             break
[17:47:21.168]                           }
[17:47:21.168]                         }
[17:47:21.168]                       }
[17:47:21.168]                       invisible(muffled)
[17:47:21.168]                     }
[17:47:21.168]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.168]                   }
[17:47:21.168]                 }
[17:47:21.168]                 else {
[17:47:21.168]                   if (TRUE) {
[17:47:21.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.168]                     {
[17:47:21.168]                       inherits <- base::inherits
[17:47:21.168]                       invokeRestart <- base::invokeRestart
[17:47:21.168]                       is.null <- base::is.null
[17:47:21.168]                       muffled <- FALSE
[17:47:21.168]                       if (inherits(cond, "message")) {
[17:47:21.168]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.168]                         if (muffled) 
[17:47:21.168]                           invokeRestart("muffleMessage")
[17:47:21.168]                       }
[17:47:21.168]                       else if (inherits(cond, "warning")) {
[17:47:21.168]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.168]                         if (muffled) 
[17:47:21.168]                           invokeRestart("muffleWarning")
[17:47:21.168]                       }
[17:47:21.168]                       else if (inherits(cond, "condition")) {
[17:47:21.168]                         if (!is.null(pattern)) {
[17:47:21.168]                           computeRestarts <- base::computeRestarts
[17:47:21.168]                           grepl <- base::grepl
[17:47:21.168]                           restarts <- computeRestarts(cond)
[17:47:21.168]                           for (restart in restarts) {
[17:47:21.168]                             name <- restart$name
[17:47:21.168]                             if (is.null(name)) 
[17:47:21.168]                               next
[17:47:21.168]                             if (!grepl(pattern, name)) 
[17:47:21.168]                               next
[17:47:21.168]                             invokeRestart(restart)
[17:47:21.168]                             muffled <- TRUE
[17:47:21.168]                             break
[17:47:21.168]                           }
[17:47:21.168]                         }
[17:47:21.168]                       }
[17:47:21.168]                       invisible(muffled)
[17:47:21.168]                     }
[17:47:21.168]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.168]                   }
[17:47:21.168]                 }
[17:47:21.168]             }
[17:47:21.168]         }))
[17:47:21.168]     }, error = function(ex) {
[17:47:21.168]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:21.168]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.168]                 ...future.rng), started = ...future.startTime, 
[17:47:21.168]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:21.168]             version = "1.8"), class = "FutureResult")
[17:47:21.168]     }, finally = {
[17:47:21.168]         if (!identical(...future.workdir, getwd())) 
[17:47:21.168]             setwd(...future.workdir)
[17:47:21.168]         {
[17:47:21.168]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:21.168]                 ...future.oldOptions$nwarnings <- NULL
[17:47:21.168]             }
[17:47:21.168]             base::options(...future.oldOptions)
[17:47:21.168]             if (.Platform$OS.type == "windows") {
[17:47:21.168]                 old_names <- names(...future.oldEnvVars)
[17:47:21.168]                 envs <- base::Sys.getenv()
[17:47:21.168]                 names <- names(envs)
[17:47:21.168]                 common <- intersect(names, old_names)
[17:47:21.168]                 added <- setdiff(names, old_names)
[17:47:21.168]                 removed <- setdiff(old_names, names)
[17:47:21.168]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:21.168]                   envs[common]]
[17:47:21.168]                 NAMES <- toupper(changed)
[17:47:21.168]                 args <- list()
[17:47:21.168]                 for (kk in seq_along(NAMES)) {
[17:47:21.168]                   name <- changed[[kk]]
[17:47:21.168]                   NAME <- NAMES[[kk]]
[17:47:21.168]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.168]                     next
[17:47:21.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.168]                 }
[17:47:21.168]                 NAMES <- toupper(added)
[17:47:21.168]                 for (kk in seq_along(NAMES)) {
[17:47:21.168]                   name <- added[[kk]]
[17:47:21.168]                   NAME <- NAMES[[kk]]
[17:47:21.168]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.168]                     next
[17:47:21.168]                   args[[name]] <- ""
[17:47:21.168]                 }
[17:47:21.168]                 NAMES <- toupper(removed)
[17:47:21.168]                 for (kk in seq_along(NAMES)) {
[17:47:21.168]                   name <- removed[[kk]]
[17:47:21.168]                   NAME <- NAMES[[kk]]
[17:47:21.168]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.168]                     next
[17:47:21.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.168]                 }
[17:47:21.168]                 if (length(args) > 0) 
[17:47:21.168]                   base::do.call(base::Sys.setenv, args = args)
[17:47:21.168]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:21.168]             }
[17:47:21.168]             else {
[17:47:21.168]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:21.168]             }
[17:47:21.168]             {
[17:47:21.168]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:21.168]                   0L) {
[17:47:21.168]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:21.168]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:21.168]                   base::options(opts)
[17:47:21.168]                 }
[17:47:21.168]                 {
[17:47:21.168]                   {
[17:47:21.168]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:21.168]                     NULL
[17:47:21.168]                   }
[17:47:21.168]                   options(future.plan = NULL)
[17:47:21.168]                   if (is.na(NA_character_)) 
[17:47:21.168]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.168]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:21.168]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:21.168]                     .init = FALSE)
[17:47:21.168]                 }
[17:47:21.168]             }
[17:47:21.168]         }
[17:47:21.168]     })
[17:47:21.168]     if (TRUE) {
[17:47:21.168]         base::sink(type = "output", split = FALSE)
[17:47:21.168]         if (TRUE) {
[17:47:21.168]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:21.168]         }
[17:47:21.168]         else {
[17:47:21.168]             ...future.result["stdout"] <- base::list(NULL)
[17:47:21.168]         }
[17:47:21.168]         base::close(...future.stdout)
[17:47:21.168]         ...future.stdout <- NULL
[17:47:21.168]     }
[17:47:21.168]     ...future.result$conditions <- ...future.conditions
[17:47:21.168]     ...future.result$finished <- base::Sys.time()
[17:47:21.168]     ...future.result
[17:47:21.168] }
[17:47:21.171] MultisessionFuture started
[17:47:21.171] - Launch lazy future ... done
[17:47:21.171] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:47:21.171] result() for ClusterFuture ...
[17:47:21.171] receiveMessageFromWorker() for ClusterFuture ...
[17:47:21.172] - Validating connection of MultisessionFuture
[17:47:21.199] - received message: FutureResult
[17:47:21.199] - Received FutureResult
[17:47:21.199] - Erased future from FutureRegistry
[17:47:21.199] result() for ClusterFuture ...
[17:47:21.199] - result already collected: FutureResult
[17:47:21.199] result() for ClusterFuture ... done
[17:47:21.199] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:21.199] result() for ClusterFuture ... done
[17:47:21.200] result() for ClusterFuture ...
[17:47:21.200] - result already collected: FutureResult
[17:47:21.200] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 407014 21.8     692222   37   692222 37.0
Vcells 729668  5.6    8388608   64  1923668 14.7
> 
> f <- future({ integer(10e6) })
[17:47:21.200] getGlobalsAndPackages() ...
[17:47:21.200] Searching for globals...
[17:47:21.201] - globals found: [2] ‘{’, ‘integer’
[17:47:21.201] Searching for globals ... DONE
[17:47:21.201] Resolving globals: FALSE
[17:47:21.202] 
[17:47:21.202] 
[17:47:21.202] getGlobalsAndPackages() ... DONE
[17:47:21.202] run() for ‘Future’ ...
[17:47:21.202] - state: ‘created’
[17:47:21.202] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:21.213] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:21.213] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:21.213]   - Field: ‘node’
[17:47:21.213]   - Field: ‘label’
[17:47:21.213]   - Field: ‘local’
[17:47:21.213]   - Field: ‘owner’
[17:47:21.213]   - Field: ‘envir’
[17:47:21.213]   - Field: ‘workers’
[17:47:21.213]   - Field: ‘packages’
[17:47:21.214]   - Field: ‘gc’
[17:47:21.214]   - Field: ‘conditions’
[17:47:21.214]   - Field: ‘persistent’
[17:47:21.214]   - Field: ‘expr’
[17:47:21.214]   - Field: ‘uuid’
[17:47:21.214]   - Field: ‘seed’
[17:47:21.214]   - Field: ‘version’
[17:47:21.214]   - Field: ‘result’
[17:47:21.214]   - Field: ‘asynchronous’
[17:47:21.214]   - Field: ‘calls’
[17:47:21.214]   - Field: ‘globals’
[17:47:21.215]   - Field: ‘stdout’
[17:47:21.215]   - Field: ‘earlySignal’
[17:47:21.215]   - Field: ‘lazy’
[17:47:21.215]   - Field: ‘state’
[17:47:21.215] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:21.215] - Launch lazy future ...
[17:47:21.215] Packages needed by the future expression (n = 0): <none>
[17:47:21.217] Packages needed by future strategies (n = 0): <none>
[17:47:21.218] {
[17:47:21.218]     {
[17:47:21.218]         {
[17:47:21.218]             ...future.startTime <- base::Sys.time()
[17:47:21.218]             {
[17:47:21.218]                 {
[17:47:21.218]                   {
[17:47:21.218]                     {
[17:47:21.218]                       base::local({
[17:47:21.218]                         has_future <- base::requireNamespace("future", 
[17:47:21.218]                           quietly = TRUE)
[17:47:21.218]                         if (has_future) {
[17:47:21.218]                           ns <- base::getNamespace("future")
[17:47:21.218]                           version <- ns[[".package"]][["version"]]
[17:47:21.218]                           if (is.null(version)) 
[17:47:21.218]                             version <- utils::packageVersion("future")
[17:47:21.218]                         }
[17:47:21.218]                         else {
[17:47:21.218]                           version <- NULL
[17:47:21.218]                         }
[17:47:21.218]                         if (!has_future || version < "1.8.0") {
[17:47:21.218]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:21.218]                             "", base::R.version$version.string), 
[17:47:21.218]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:21.218]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:21.218]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:21.218]                               "release", "version")], collapse = " "), 
[17:47:21.218]                             hostname = base::Sys.info()[["nodename"]])
[17:47:21.218]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:21.218]                             info)
[17:47:21.218]                           info <- base::paste(info, collapse = "; ")
[17:47:21.218]                           if (!has_future) {
[17:47:21.218]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:21.218]                               info)
[17:47:21.218]                           }
[17:47:21.218]                           else {
[17:47:21.218]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:21.218]                               info, version)
[17:47:21.218]                           }
[17:47:21.218]                           base::stop(msg)
[17:47:21.218]                         }
[17:47:21.218]                       })
[17:47:21.218]                     }
[17:47:21.218]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:21.218]                     base::options(mc.cores = 1L)
[17:47:21.218]                   }
[17:47:21.218]                   ...future.strategy.old <- future::plan("list")
[17:47:21.218]                   options(future.plan = NULL)
[17:47:21.218]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.218]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:21.218]                 }
[17:47:21.218]                 ...future.workdir <- getwd()
[17:47:21.218]             }
[17:47:21.218]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:21.218]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:21.218]         }
[17:47:21.218]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:21.218]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:21.218]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:21.218]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:21.218]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:21.218]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:21.218]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:21.218]             base::names(...future.oldOptions))
[17:47:21.218]     }
[17:47:21.218]     if (FALSE) {
[17:47:21.218]     }
[17:47:21.218]     else {
[17:47:21.218]         if (TRUE) {
[17:47:21.218]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:21.218]                 open = "w")
[17:47:21.218]         }
[17:47:21.218]         else {
[17:47:21.218]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:21.218]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:21.218]         }
[17:47:21.218]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:21.218]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:21.218]             base::sink(type = "output", split = FALSE)
[17:47:21.218]             base::close(...future.stdout)
[17:47:21.218]         }, add = TRUE)
[17:47:21.218]     }
[17:47:21.218]     ...future.frame <- base::sys.nframe()
[17:47:21.218]     ...future.conditions <- base::list()
[17:47:21.218]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:21.218]     if (FALSE) {
[17:47:21.218]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:21.218]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:21.218]     }
[17:47:21.218]     ...future.result <- base::tryCatch({
[17:47:21.218]         base::withCallingHandlers({
[17:47:21.218]             ...future.value <- base::withVisible(base::local({
[17:47:21.218]                 ...future.makeSendCondition <- base::local({
[17:47:21.218]                   sendCondition <- NULL
[17:47:21.218]                   function(frame = 1L) {
[17:47:21.218]                     if (is.function(sendCondition)) 
[17:47:21.218]                       return(sendCondition)
[17:47:21.218]                     ns <- getNamespace("parallel")
[17:47:21.218]                     if (exists("sendData", mode = "function", 
[17:47:21.218]                       envir = ns)) {
[17:47:21.218]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:21.218]                         envir = ns)
[17:47:21.218]                       envir <- sys.frame(frame)
[17:47:21.218]                       master <- NULL
[17:47:21.218]                       while (!identical(envir, .GlobalEnv) && 
[17:47:21.218]                         !identical(envir, emptyenv())) {
[17:47:21.218]                         if (exists("master", mode = "list", envir = envir, 
[17:47:21.218]                           inherits = FALSE)) {
[17:47:21.218]                           master <- get("master", mode = "list", 
[17:47:21.218]                             envir = envir, inherits = FALSE)
[17:47:21.218]                           if (inherits(master, c("SOCKnode", 
[17:47:21.218]                             "SOCK0node"))) {
[17:47:21.218]                             sendCondition <<- function(cond) {
[17:47:21.218]                               data <- list(type = "VALUE", value = cond, 
[17:47:21.218]                                 success = TRUE)
[17:47:21.218]                               parallel_sendData(master, data)
[17:47:21.218]                             }
[17:47:21.218]                             return(sendCondition)
[17:47:21.218]                           }
[17:47:21.218]                         }
[17:47:21.218]                         frame <- frame + 1L
[17:47:21.218]                         envir <- sys.frame(frame)
[17:47:21.218]                       }
[17:47:21.218]                     }
[17:47:21.218]                     sendCondition <<- function(cond) NULL
[17:47:21.218]                   }
[17:47:21.218]                 })
[17:47:21.218]                 withCallingHandlers({
[17:47:21.218]                   {
[17:47:21.218]                     integer(1e+07)
[17:47:21.218]                   }
[17:47:21.218]                 }, immediateCondition = function(cond) {
[17:47:21.218]                   sendCondition <- ...future.makeSendCondition()
[17:47:21.218]                   sendCondition(cond)
[17:47:21.218]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.218]                   {
[17:47:21.218]                     inherits <- base::inherits
[17:47:21.218]                     invokeRestart <- base::invokeRestart
[17:47:21.218]                     is.null <- base::is.null
[17:47:21.218]                     muffled <- FALSE
[17:47:21.218]                     if (inherits(cond, "message")) {
[17:47:21.218]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:21.218]                       if (muffled) 
[17:47:21.218]                         invokeRestart("muffleMessage")
[17:47:21.218]                     }
[17:47:21.218]                     else if (inherits(cond, "warning")) {
[17:47:21.218]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:21.218]                       if (muffled) 
[17:47:21.218]                         invokeRestart("muffleWarning")
[17:47:21.218]                     }
[17:47:21.218]                     else if (inherits(cond, "condition")) {
[17:47:21.218]                       if (!is.null(pattern)) {
[17:47:21.218]                         computeRestarts <- base::computeRestarts
[17:47:21.218]                         grepl <- base::grepl
[17:47:21.218]                         restarts <- computeRestarts(cond)
[17:47:21.218]                         for (restart in restarts) {
[17:47:21.218]                           name <- restart$name
[17:47:21.218]                           if (is.null(name)) 
[17:47:21.218]                             next
[17:47:21.218]                           if (!grepl(pattern, name)) 
[17:47:21.218]                             next
[17:47:21.218]                           invokeRestart(restart)
[17:47:21.218]                           muffled <- TRUE
[17:47:21.218]                           break
[17:47:21.218]                         }
[17:47:21.218]                       }
[17:47:21.218]                     }
[17:47:21.218]                     invisible(muffled)
[17:47:21.218]                   }
[17:47:21.218]                   muffleCondition(cond)
[17:47:21.218]                 })
[17:47:21.218]             }))
[17:47:21.218]             future::FutureResult(value = ...future.value$value, 
[17:47:21.218]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.218]                   ...future.rng), globalenv = if (FALSE) 
[17:47:21.218]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:21.218]                     ...future.globalenv.names))
[17:47:21.218]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:21.218]         }, condition = base::local({
[17:47:21.218]             c <- base::c
[17:47:21.218]             inherits <- base::inherits
[17:47:21.218]             invokeRestart <- base::invokeRestart
[17:47:21.218]             length <- base::length
[17:47:21.218]             list <- base::list
[17:47:21.218]             seq.int <- base::seq.int
[17:47:21.218]             signalCondition <- base::signalCondition
[17:47:21.218]             sys.calls <- base::sys.calls
[17:47:21.218]             `[[` <- base::`[[`
[17:47:21.218]             `+` <- base::`+`
[17:47:21.218]             `<<-` <- base::`<<-`
[17:47:21.218]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:21.218]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:21.218]                   3L)]
[17:47:21.218]             }
[17:47:21.218]             function(cond) {
[17:47:21.218]                 is_error <- inherits(cond, "error")
[17:47:21.218]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:21.218]                   NULL)
[17:47:21.218]                 if (is_error) {
[17:47:21.218]                   sessionInformation <- function() {
[17:47:21.218]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:21.218]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:21.218]                       search = base::search(), system = base::Sys.info())
[17:47:21.218]                   }
[17:47:21.218]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.218]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:21.218]                     cond$call), session = sessionInformation(), 
[17:47:21.218]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:21.218]                   signalCondition(cond)
[17:47:21.218]                 }
[17:47:21.218]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:21.218]                 "immediateCondition"))) {
[17:47:21.218]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:21.218]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.218]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:21.218]                   if (TRUE && !signal) {
[17:47:21.218]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.218]                     {
[17:47:21.218]                       inherits <- base::inherits
[17:47:21.218]                       invokeRestart <- base::invokeRestart
[17:47:21.218]                       is.null <- base::is.null
[17:47:21.218]                       muffled <- FALSE
[17:47:21.218]                       if (inherits(cond, "message")) {
[17:47:21.218]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.218]                         if (muffled) 
[17:47:21.218]                           invokeRestart("muffleMessage")
[17:47:21.218]                       }
[17:47:21.218]                       else if (inherits(cond, "warning")) {
[17:47:21.218]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.218]                         if (muffled) 
[17:47:21.218]                           invokeRestart("muffleWarning")
[17:47:21.218]                       }
[17:47:21.218]                       else if (inherits(cond, "condition")) {
[17:47:21.218]                         if (!is.null(pattern)) {
[17:47:21.218]                           computeRestarts <- base::computeRestarts
[17:47:21.218]                           grepl <- base::grepl
[17:47:21.218]                           restarts <- computeRestarts(cond)
[17:47:21.218]                           for (restart in restarts) {
[17:47:21.218]                             name <- restart$name
[17:47:21.218]                             if (is.null(name)) 
[17:47:21.218]                               next
[17:47:21.218]                             if (!grepl(pattern, name)) 
[17:47:21.218]                               next
[17:47:21.218]                             invokeRestart(restart)
[17:47:21.218]                             muffled <- TRUE
[17:47:21.218]                             break
[17:47:21.218]                           }
[17:47:21.218]                         }
[17:47:21.218]                       }
[17:47:21.218]                       invisible(muffled)
[17:47:21.218]                     }
[17:47:21.218]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.218]                   }
[17:47:21.218]                 }
[17:47:21.218]                 else {
[17:47:21.218]                   if (TRUE) {
[17:47:21.218]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.218]                     {
[17:47:21.218]                       inherits <- base::inherits
[17:47:21.218]                       invokeRestart <- base::invokeRestart
[17:47:21.218]                       is.null <- base::is.null
[17:47:21.218]                       muffled <- FALSE
[17:47:21.218]                       if (inherits(cond, "message")) {
[17:47:21.218]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.218]                         if (muffled) 
[17:47:21.218]                           invokeRestart("muffleMessage")
[17:47:21.218]                       }
[17:47:21.218]                       else if (inherits(cond, "warning")) {
[17:47:21.218]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.218]                         if (muffled) 
[17:47:21.218]                           invokeRestart("muffleWarning")
[17:47:21.218]                       }
[17:47:21.218]                       else if (inherits(cond, "condition")) {
[17:47:21.218]                         if (!is.null(pattern)) {
[17:47:21.218]                           computeRestarts <- base::computeRestarts
[17:47:21.218]                           grepl <- base::grepl
[17:47:21.218]                           restarts <- computeRestarts(cond)
[17:47:21.218]                           for (restart in restarts) {
[17:47:21.218]                             name <- restart$name
[17:47:21.218]                             if (is.null(name)) 
[17:47:21.218]                               next
[17:47:21.218]                             if (!grepl(pattern, name)) 
[17:47:21.218]                               next
[17:47:21.218]                             invokeRestart(restart)
[17:47:21.218]                             muffled <- TRUE
[17:47:21.218]                             break
[17:47:21.218]                           }
[17:47:21.218]                         }
[17:47:21.218]                       }
[17:47:21.218]                       invisible(muffled)
[17:47:21.218]                     }
[17:47:21.218]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.218]                   }
[17:47:21.218]                 }
[17:47:21.218]             }
[17:47:21.218]         }))
[17:47:21.218]     }, error = function(ex) {
[17:47:21.218]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:21.218]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.218]                 ...future.rng), started = ...future.startTime, 
[17:47:21.218]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:21.218]             version = "1.8"), class = "FutureResult")
[17:47:21.218]     }, finally = {
[17:47:21.218]         if (!identical(...future.workdir, getwd())) 
[17:47:21.218]             setwd(...future.workdir)
[17:47:21.218]         {
[17:47:21.218]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:21.218]                 ...future.oldOptions$nwarnings <- NULL
[17:47:21.218]             }
[17:47:21.218]             base::options(...future.oldOptions)
[17:47:21.218]             if (.Platform$OS.type == "windows") {
[17:47:21.218]                 old_names <- names(...future.oldEnvVars)
[17:47:21.218]                 envs <- base::Sys.getenv()
[17:47:21.218]                 names <- names(envs)
[17:47:21.218]                 common <- intersect(names, old_names)
[17:47:21.218]                 added <- setdiff(names, old_names)
[17:47:21.218]                 removed <- setdiff(old_names, names)
[17:47:21.218]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:21.218]                   envs[common]]
[17:47:21.218]                 NAMES <- toupper(changed)
[17:47:21.218]                 args <- list()
[17:47:21.218]                 for (kk in seq_along(NAMES)) {
[17:47:21.218]                   name <- changed[[kk]]
[17:47:21.218]                   NAME <- NAMES[[kk]]
[17:47:21.218]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.218]                     next
[17:47:21.218]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.218]                 }
[17:47:21.218]                 NAMES <- toupper(added)
[17:47:21.218]                 for (kk in seq_along(NAMES)) {
[17:47:21.218]                   name <- added[[kk]]
[17:47:21.218]                   NAME <- NAMES[[kk]]
[17:47:21.218]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.218]                     next
[17:47:21.218]                   args[[name]] <- ""
[17:47:21.218]                 }
[17:47:21.218]                 NAMES <- toupper(removed)
[17:47:21.218]                 for (kk in seq_along(NAMES)) {
[17:47:21.218]                   name <- removed[[kk]]
[17:47:21.218]                   NAME <- NAMES[[kk]]
[17:47:21.218]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.218]                     next
[17:47:21.218]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.218]                 }
[17:47:21.218]                 if (length(args) > 0) 
[17:47:21.218]                   base::do.call(base::Sys.setenv, args = args)
[17:47:21.218]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:21.218]             }
[17:47:21.218]             else {
[17:47:21.218]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:21.218]             }
[17:47:21.218]             {
[17:47:21.218]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:21.218]                   0L) {
[17:47:21.218]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:21.218]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:21.218]                   base::options(opts)
[17:47:21.218]                 }
[17:47:21.218]                 {
[17:47:21.218]                   {
[17:47:21.218]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:21.218]                     NULL
[17:47:21.218]                   }
[17:47:21.218]                   options(future.plan = NULL)
[17:47:21.218]                   if (is.na(NA_character_)) 
[17:47:21.218]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.218]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:21.218]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:21.218]                     .init = FALSE)
[17:47:21.218]                 }
[17:47:21.218]             }
[17:47:21.218]         }
[17:47:21.218]     })
[17:47:21.218]     if (TRUE) {
[17:47:21.218]         base::sink(type = "output", split = FALSE)
[17:47:21.218]         if (TRUE) {
[17:47:21.218]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:21.218]         }
[17:47:21.218]         else {
[17:47:21.218]             ...future.result["stdout"] <- base::list(NULL)
[17:47:21.218]         }
[17:47:21.218]         base::close(...future.stdout)
[17:47:21.218]         ...future.stdout <- NULL
[17:47:21.218]     }
[17:47:21.218]     ...future.result$conditions <- ...future.conditions
[17:47:21.218]     ...future.result$finished <- base::Sys.time()
[17:47:21.218]     ...future.result
[17:47:21.218] }
[17:47:21.221] MultisessionFuture started
[17:47:21.221] - Launch lazy future ... done
[17:47:21.221] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:47:21.221] result() for ClusterFuture ...
[17:47:21.221] receiveMessageFromWorker() for ClusterFuture ...
[17:47:21.222] - Validating connection of MultisessionFuture
[17:47:21.281] - received message: FutureResult
[17:47:21.281] - Received FutureResult
[17:47:21.281] - Erased future from FutureRegistry
[17:47:21.281] result() for ClusterFuture ...
[17:47:21.282] - result already collected: FutureResult
[17:47:21.282] result() for ClusterFuture ... done
[17:47:21.282] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:21.282] result() for ClusterFuture ... done
[17:47:21.282] result() for ClusterFuture ...
[17:47:21.282] - result already collected: FutureResult
[17:47:21.282] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[17:47:21.283] getGlobalsAndPackages() ...
[17:47:21.283] Searching for globals...
[17:47:21.284] - globals found: [2] ‘{’, ‘gc’
[17:47:21.284] Searching for globals ... DONE
[17:47:21.284] Resolving globals: FALSE
[17:47:21.284] 
[17:47:21.284] 
[17:47:21.284] getGlobalsAndPackages() ... DONE
[17:47:21.285] run() for ‘Future’ ...
[17:47:21.285] - state: ‘created’
[17:47:21.285] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:21.295] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:21.295] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:21.295]   - Field: ‘node’
[17:47:21.296]   - Field: ‘label’
[17:47:21.296]   - Field: ‘local’
[17:47:21.296]   - Field: ‘owner’
[17:47:21.296]   - Field: ‘envir’
[17:47:21.296]   - Field: ‘workers’
[17:47:21.296]   - Field: ‘packages’
[17:47:21.296]   - Field: ‘gc’
[17:47:21.296]   - Field: ‘conditions’
[17:47:21.296]   - Field: ‘persistent’
[17:47:21.296]   - Field: ‘expr’
[17:47:21.296]   - Field: ‘uuid’
[17:47:21.297]   - Field: ‘seed’
[17:47:21.297]   - Field: ‘version’
[17:47:21.297]   - Field: ‘result’
[17:47:21.297]   - Field: ‘asynchronous’
[17:47:21.297]   - Field: ‘calls’
[17:47:21.297]   - Field: ‘globals’
[17:47:21.297]   - Field: ‘stdout’
[17:47:21.297]   - Field: ‘earlySignal’
[17:47:21.297]   - Field: ‘lazy’
[17:47:21.297]   - Field: ‘state’
[17:47:21.297] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:21.297] - Launch lazy future ...
[17:47:21.298] Packages needed by the future expression (n = 0): <none>
[17:47:21.298] Packages needed by future strategies (n = 0): <none>
[17:47:21.298] {
[17:47:21.298]     {
[17:47:21.298]         {
[17:47:21.298]             ...future.startTime <- base::Sys.time()
[17:47:21.298]             {
[17:47:21.298]                 {
[17:47:21.298]                   {
[17:47:21.298]                     {
[17:47:21.298]                       base::local({
[17:47:21.298]                         has_future <- base::requireNamespace("future", 
[17:47:21.298]                           quietly = TRUE)
[17:47:21.298]                         if (has_future) {
[17:47:21.298]                           ns <- base::getNamespace("future")
[17:47:21.298]                           version <- ns[[".package"]][["version"]]
[17:47:21.298]                           if (is.null(version)) 
[17:47:21.298]                             version <- utils::packageVersion("future")
[17:47:21.298]                         }
[17:47:21.298]                         else {
[17:47:21.298]                           version <- NULL
[17:47:21.298]                         }
[17:47:21.298]                         if (!has_future || version < "1.8.0") {
[17:47:21.298]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:21.298]                             "", base::R.version$version.string), 
[17:47:21.298]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:21.298]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:21.298]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:21.298]                               "release", "version")], collapse = " "), 
[17:47:21.298]                             hostname = base::Sys.info()[["nodename"]])
[17:47:21.298]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:21.298]                             info)
[17:47:21.298]                           info <- base::paste(info, collapse = "; ")
[17:47:21.298]                           if (!has_future) {
[17:47:21.298]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:21.298]                               info)
[17:47:21.298]                           }
[17:47:21.298]                           else {
[17:47:21.298]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:21.298]                               info, version)
[17:47:21.298]                           }
[17:47:21.298]                           base::stop(msg)
[17:47:21.298]                         }
[17:47:21.298]                       })
[17:47:21.298]                     }
[17:47:21.298]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:21.298]                     base::options(mc.cores = 1L)
[17:47:21.298]                   }
[17:47:21.298]                   ...future.strategy.old <- future::plan("list")
[17:47:21.298]                   options(future.plan = NULL)
[17:47:21.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:21.298]                 }
[17:47:21.298]                 ...future.workdir <- getwd()
[17:47:21.298]             }
[17:47:21.298]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:21.298]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:21.298]         }
[17:47:21.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:21.298]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:21.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:21.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:21.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:21.298]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:21.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:21.298]             base::names(...future.oldOptions))
[17:47:21.298]     }
[17:47:21.298]     if (FALSE) {
[17:47:21.298]     }
[17:47:21.298]     else {
[17:47:21.298]         if (TRUE) {
[17:47:21.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:21.298]                 open = "w")
[17:47:21.298]         }
[17:47:21.298]         else {
[17:47:21.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:21.298]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:21.298]         }
[17:47:21.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:21.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:21.298]             base::sink(type = "output", split = FALSE)
[17:47:21.298]             base::close(...future.stdout)
[17:47:21.298]         }, add = TRUE)
[17:47:21.298]     }
[17:47:21.298]     ...future.frame <- base::sys.nframe()
[17:47:21.298]     ...future.conditions <- base::list()
[17:47:21.298]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:21.298]     if (FALSE) {
[17:47:21.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:21.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:21.298]     }
[17:47:21.298]     ...future.result <- base::tryCatch({
[17:47:21.298]         base::withCallingHandlers({
[17:47:21.298]             ...future.value <- base::withVisible(base::local({
[17:47:21.298]                 ...future.makeSendCondition <- base::local({
[17:47:21.298]                   sendCondition <- NULL
[17:47:21.298]                   function(frame = 1L) {
[17:47:21.298]                     if (is.function(sendCondition)) 
[17:47:21.298]                       return(sendCondition)
[17:47:21.298]                     ns <- getNamespace("parallel")
[17:47:21.298]                     if (exists("sendData", mode = "function", 
[17:47:21.298]                       envir = ns)) {
[17:47:21.298]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:21.298]                         envir = ns)
[17:47:21.298]                       envir <- sys.frame(frame)
[17:47:21.298]                       master <- NULL
[17:47:21.298]                       while (!identical(envir, .GlobalEnv) && 
[17:47:21.298]                         !identical(envir, emptyenv())) {
[17:47:21.298]                         if (exists("master", mode = "list", envir = envir, 
[17:47:21.298]                           inherits = FALSE)) {
[17:47:21.298]                           master <- get("master", mode = "list", 
[17:47:21.298]                             envir = envir, inherits = FALSE)
[17:47:21.298]                           if (inherits(master, c("SOCKnode", 
[17:47:21.298]                             "SOCK0node"))) {
[17:47:21.298]                             sendCondition <<- function(cond) {
[17:47:21.298]                               data <- list(type = "VALUE", value = cond, 
[17:47:21.298]                                 success = TRUE)
[17:47:21.298]                               parallel_sendData(master, data)
[17:47:21.298]                             }
[17:47:21.298]                             return(sendCondition)
[17:47:21.298]                           }
[17:47:21.298]                         }
[17:47:21.298]                         frame <- frame + 1L
[17:47:21.298]                         envir <- sys.frame(frame)
[17:47:21.298]                       }
[17:47:21.298]                     }
[17:47:21.298]                     sendCondition <<- function(cond) NULL
[17:47:21.298]                   }
[17:47:21.298]                 })
[17:47:21.298]                 withCallingHandlers({
[17:47:21.298]                   {
[17:47:21.298]                     gc()
[17:47:21.298]                   }
[17:47:21.298]                 }, immediateCondition = function(cond) {
[17:47:21.298]                   sendCondition <- ...future.makeSendCondition()
[17:47:21.298]                   sendCondition(cond)
[17:47:21.298]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.298]                   {
[17:47:21.298]                     inherits <- base::inherits
[17:47:21.298]                     invokeRestart <- base::invokeRestart
[17:47:21.298]                     is.null <- base::is.null
[17:47:21.298]                     muffled <- FALSE
[17:47:21.298]                     if (inherits(cond, "message")) {
[17:47:21.298]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:21.298]                       if (muffled) 
[17:47:21.298]                         invokeRestart("muffleMessage")
[17:47:21.298]                     }
[17:47:21.298]                     else if (inherits(cond, "warning")) {
[17:47:21.298]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:21.298]                       if (muffled) 
[17:47:21.298]                         invokeRestart("muffleWarning")
[17:47:21.298]                     }
[17:47:21.298]                     else if (inherits(cond, "condition")) {
[17:47:21.298]                       if (!is.null(pattern)) {
[17:47:21.298]                         computeRestarts <- base::computeRestarts
[17:47:21.298]                         grepl <- base::grepl
[17:47:21.298]                         restarts <- computeRestarts(cond)
[17:47:21.298]                         for (restart in restarts) {
[17:47:21.298]                           name <- restart$name
[17:47:21.298]                           if (is.null(name)) 
[17:47:21.298]                             next
[17:47:21.298]                           if (!grepl(pattern, name)) 
[17:47:21.298]                             next
[17:47:21.298]                           invokeRestart(restart)
[17:47:21.298]                           muffled <- TRUE
[17:47:21.298]                           break
[17:47:21.298]                         }
[17:47:21.298]                       }
[17:47:21.298]                     }
[17:47:21.298]                     invisible(muffled)
[17:47:21.298]                   }
[17:47:21.298]                   muffleCondition(cond)
[17:47:21.298]                 })
[17:47:21.298]             }))
[17:47:21.298]             future::FutureResult(value = ...future.value$value, 
[17:47:21.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.298]                   ...future.rng), globalenv = if (FALSE) 
[17:47:21.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:21.298]                     ...future.globalenv.names))
[17:47:21.298]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:21.298]         }, condition = base::local({
[17:47:21.298]             c <- base::c
[17:47:21.298]             inherits <- base::inherits
[17:47:21.298]             invokeRestart <- base::invokeRestart
[17:47:21.298]             length <- base::length
[17:47:21.298]             list <- base::list
[17:47:21.298]             seq.int <- base::seq.int
[17:47:21.298]             signalCondition <- base::signalCondition
[17:47:21.298]             sys.calls <- base::sys.calls
[17:47:21.298]             `[[` <- base::`[[`
[17:47:21.298]             `+` <- base::`+`
[17:47:21.298]             `<<-` <- base::`<<-`
[17:47:21.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:21.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:21.298]                   3L)]
[17:47:21.298]             }
[17:47:21.298]             function(cond) {
[17:47:21.298]                 is_error <- inherits(cond, "error")
[17:47:21.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:21.298]                   NULL)
[17:47:21.298]                 if (is_error) {
[17:47:21.298]                   sessionInformation <- function() {
[17:47:21.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:21.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:21.298]                       search = base::search(), system = base::Sys.info())
[17:47:21.298]                   }
[17:47:21.298]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:21.298]                     cond$call), session = sessionInformation(), 
[17:47:21.298]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:21.298]                   signalCondition(cond)
[17:47:21.298]                 }
[17:47:21.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:21.298]                 "immediateCondition"))) {
[17:47:21.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:21.298]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:21.298]                   if (TRUE && !signal) {
[17:47:21.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.298]                     {
[17:47:21.298]                       inherits <- base::inherits
[17:47:21.298]                       invokeRestart <- base::invokeRestart
[17:47:21.298]                       is.null <- base::is.null
[17:47:21.298]                       muffled <- FALSE
[17:47:21.298]                       if (inherits(cond, "message")) {
[17:47:21.298]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.298]                         if (muffled) 
[17:47:21.298]                           invokeRestart("muffleMessage")
[17:47:21.298]                       }
[17:47:21.298]                       else if (inherits(cond, "warning")) {
[17:47:21.298]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.298]                         if (muffled) 
[17:47:21.298]                           invokeRestart("muffleWarning")
[17:47:21.298]                       }
[17:47:21.298]                       else if (inherits(cond, "condition")) {
[17:47:21.298]                         if (!is.null(pattern)) {
[17:47:21.298]                           computeRestarts <- base::computeRestarts
[17:47:21.298]                           grepl <- base::grepl
[17:47:21.298]                           restarts <- computeRestarts(cond)
[17:47:21.298]                           for (restart in restarts) {
[17:47:21.298]                             name <- restart$name
[17:47:21.298]                             if (is.null(name)) 
[17:47:21.298]                               next
[17:47:21.298]                             if (!grepl(pattern, name)) 
[17:47:21.298]                               next
[17:47:21.298]                             invokeRestart(restart)
[17:47:21.298]                             muffled <- TRUE
[17:47:21.298]                             break
[17:47:21.298]                           }
[17:47:21.298]                         }
[17:47:21.298]                       }
[17:47:21.298]                       invisible(muffled)
[17:47:21.298]                     }
[17:47:21.298]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.298]                   }
[17:47:21.298]                 }
[17:47:21.298]                 else {
[17:47:21.298]                   if (TRUE) {
[17:47:21.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.298]                     {
[17:47:21.298]                       inherits <- base::inherits
[17:47:21.298]                       invokeRestart <- base::invokeRestart
[17:47:21.298]                       is.null <- base::is.null
[17:47:21.298]                       muffled <- FALSE
[17:47:21.298]                       if (inherits(cond, "message")) {
[17:47:21.298]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.298]                         if (muffled) 
[17:47:21.298]                           invokeRestart("muffleMessage")
[17:47:21.298]                       }
[17:47:21.298]                       else if (inherits(cond, "warning")) {
[17:47:21.298]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.298]                         if (muffled) 
[17:47:21.298]                           invokeRestart("muffleWarning")
[17:47:21.298]                       }
[17:47:21.298]                       else if (inherits(cond, "condition")) {
[17:47:21.298]                         if (!is.null(pattern)) {
[17:47:21.298]                           computeRestarts <- base::computeRestarts
[17:47:21.298]                           grepl <- base::grepl
[17:47:21.298]                           restarts <- computeRestarts(cond)
[17:47:21.298]                           for (restart in restarts) {
[17:47:21.298]                             name <- restart$name
[17:47:21.298]                             if (is.null(name)) 
[17:47:21.298]                               next
[17:47:21.298]                             if (!grepl(pattern, name)) 
[17:47:21.298]                               next
[17:47:21.298]                             invokeRestart(restart)
[17:47:21.298]                             muffled <- TRUE
[17:47:21.298]                             break
[17:47:21.298]                           }
[17:47:21.298]                         }
[17:47:21.298]                       }
[17:47:21.298]                       invisible(muffled)
[17:47:21.298]                     }
[17:47:21.298]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.298]                   }
[17:47:21.298]                 }
[17:47:21.298]             }
[17:47:21.298]         }))
[17:47:21.298]     }, error = function(ex) {
[17:47:21.298]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:21.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.298]                 ...future.rng), started = ...future.startTime, 
[17:47:21.298]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:21.298]             version = "1.8"), class = "FutureResult")
[17:47:21.298]     }, finally = {
[17:47:21.298]         if (!identical(...future.workdir, getwd())) 
[17:47:21.298]             setwd(...future.workdir)
[17:47:21.298]         {
[17:47:21.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:21.298]                 ...future.oldOptions$nwarnings <- NULL
[17:47:21.298]             }
[17:47:21.298]             base::options(...future.oldOptions)
[17:47:21.298]             if (.Platform$OS.type == "windows") {
[17:47:21.298]                 old_names <- names(...future.oldEnvVars)
[17:47:21.298]                 envs <- base::Sys.getenv()
[17:47:21.298]                 names <- names(envs)
[17:47:21.298]                 common <- intersect(names, old_names)
[17:47:21.298]                 added <- setdiff(names, old_names)
[17:47:21.298]                 removed <- setdiff(old_names, names)
[17:47:21.298]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:21.298]                   envs[common]]
[17:47:21.298]                 NAMES <- toupper(changed)
[17:47:21.298]                 args <- list()
[17:47:21.298]                 for (kk in seq_along(NAMES)) {
[17:47:21.298]                   name <- changed[[kk]]
[17:47:21.298]                   NAME <- NAMES[[kk]]
[17:47:21.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.298]                     next
[17:47:21.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.298]                 }
[17:47:21.298]                 NAMES <- toupper(added)
[17:47:21.298]                 for (kk in seq_along(NAMES)) {
[17:47:21.298]                   name <- added[[kk]]
[17:47:21.298]                   NAME <- NAMES[[kk]]
[17:47:21.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.298]                     next
[17:47:21.298]                   args[[name]] <- ""
[17:47:21.298]                 }
[17:47:21.298]                 NAMES <- toupper(removed)
[17:47:21.298]                 for (kk in seq_along(NAMES)) {
[17:47:21.298]                   name <- removed[[kk]]
[17:47:21.298]                   NAME <- NAMES[[kk]]
[17:47:21.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.298]                     next
[17:47:21.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.298]                 }
[17:47:21.298]                 if (length(args) > 0) 
[17:47:21.298]                   base::do.call(base::Sys.setenv, args = args)
[17:47:21.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:21.298]             }
[17:47:21.298]             else {
[17:47:21.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:21.298]             }
[17:47:21.298]             {
[17:47:21.298]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:21.298]                   0L) {
[17:47:21.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:21.298]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:21.298]                   base::options(opts)
[17:47:21.298]                 }
[17:47:21.298]                 {
[17:47:21.298]                   {
[17:47:21.298]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:21.298]                     NULL
[17:47:21.298]                   }
[17:47:21.298]                   options(future.plan = NULL)
[17:47:21.298]                   if (is.na(NA_character_)) 
[17:47:21.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:21.298]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:21.298]                     .init = FALSE)
[17:47:21.298]                 }
[17:47:21.298]             }
[17:47:21.298]         }
[17:47:21.298]     })
[17:47:21.298]     if (TRUE) {
[17:47:21.298]         base::sink(type = "output", split = FALSE)
[17:47:21.298]         if (TRUE) {
[17:47:21.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:21.298]         }
[17:47:21.298]         else {
[17:47:21.298]             ...future.result["stdout"] <- base::list(NULL)
[17:47:21.298]         }
[17:47:21.298]         base::close(...future.stdout)
[17:47:21.298]         ...future.stdout <- NULL
[17:47:21.298]     }
[17:47:21.298]     ...future.result$conditions <- ...future.conditions
[17:47:21.298]     ...future.result$finished <- base::Sys.time()
[17:47:21.298]     ...future.result
[17:47:21.298] }
[17:47:21.301] MultisessionFuture started
[17:47:21.302] - Launch lazy future ... done
[17:47:21.302] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:47:21.302] result() for ClusterFuture ...
[17:47:21.302] receiveMessageFromWorker() for ClusterFuture ...
[17:47:21.302] - Validating connection of MultisessionFuture
[17:47:21.329] - received message: FutureResult
[17:47:21.329] - Received FutureResult
[17:47:21.329] - Erased future from FutureRegistry
[17:47:21.329] result() for ClusterFuture ...
[17:47:21.329] - result already collected: FutureResult
[17:47:21.329] result() for ClusterFuture ... done
[17:47:21.330] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:21.330] result() for ClusterFuture ... done
[17:47:21.330] result() for ClusterFuture ...
[17:47:21.330] - result already collected: FutureResult
[17:47:21.330] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 407009 21.8     692222   37   692222 37.0
Vcells 729658  5.6    8388608   64  5751575 43.9
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[17:47:21.330] getGlobalsAndPackages() ...
[17:47:21.330] Searching for globals...
[17:47:21.331] - globals found: [2] ‘{’, ‘integer’
[17:47:21.331] Searching for globals ... DONE
[17:47:21.331] Resolving globals: FALSE
[17:47:21.332] 
[17:47:21.332] 
[17:47:21.332] getGlobalsAndPackages() ... DONE
[17:47:21.332] run() for ‘Future’ ...
[17:47:21.332] - state: ‘created’
[17:47:21.332] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:21.343] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:21.343] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:21.343]   - Field: ‘node’
[17:47:21.343]   - Field: ‘label’
[17:47:21.344]   - Field: ‘local’
[17:47:21.344]   - Field: ‘owner’
[17:47:21.344]   - Field: ‘envir’
[17:47:21.344]   - Field: ‘workers’
[17:47:21.344]   - Field: ‘packages’
[17:47:21.344]   - Field: ‘gc’
[17:47:21.344]   - Field: ‘conditions’
[17:47:21.344]   - Field: ‘persistent’
[17:47:21.344]   - Field: ‘expr’
[17:47:21.344]   - Field: ‘uuid’
[17:47:21.344]   - Field: ‘seed’
[17:47:21.345]   - Field: ‘version’
[17:47:21.345]   - Field: ‘result’
[17:47:21.345]   - Field: ‘asynchronous’
[17:47:21.345]   - Field: ‘calls’
[17:47:21.345]   - Field: ‘globals’
[17:47:21.345]   - Field: ‘stdout’
[17:47:21.345]   - Field: ‘earlySignal’
[17:47:21.345]   - Field: ‘lazy’
[17:47:21.345]   - Field: ‘state’
[17:47:21.345] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:21.345] - Launch lazy future ...
[17:47:21.346] Packages needed by the future expression (n = 0): <none>
[17:47:21.346] Packages needed by future strategies (n = 0): <none>
[17:47:21.346] {
[17:47:21.346]     {
[17:47:21.346]         {
[17:47:21.346]             ...future.startTime <- base::Sys.time()
[17:47:21.346]             {
[17:47:21.346]                 {
[17:47:21.346]                   {
[17:47:21.346]                     {
[17:47:21.346]                       base::local({
[17:47:21.346]                         has_future <- base::requireNamespace("future", 
[17:47:21.346]                           quietly = TRUE)
[17:47:21.346]                         if (has_future) {
[17:47:21.346]                           ns <- base::getNamespace("future")
[17:47:21.346]                           version <- ns[[".package"]][["version"]]
[17:47:21.346]                           if (is.null(version)) 
[17:47:21.346]                             version <- utils::packageVersion("future")
[17:47:21.346]                         }
[17:47:21.346]                         else {
[17:47:21.346]                           version <- NULL
[17:47:21.346]                         }
[17:47:21.346]                         if (!has_future || version < "1.8.0") {
[17:47:21.346]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:21.346]                             "", base::R.version$version.string), 
[17:47:21.346]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:21.346]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:21.346]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:21.346]                               "release", "version")], collapse = " "), 
[17:47:21.346]                             hostname = base::Sys.info()[["nodename"]])
[17:47:21.346]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:21.346]                             info)
[17:47:21.346]                           info <- base::paste(info, collapse = "; ")
[17:47:21.346]                           if (!has_future) {
[17:47:21.346]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:21.346]                               info)
[17:47:21.346]                           }
[17:47:21.346]                           else {
[17:47:21.346]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:21.346]                               info, version)
[17:47:21.346]                           }
[17:47:21.346]                           base::stop(msg)
[17:47:21.346]                         }
[17:47:21.346]                       })
[17:47:21.346]                     }
[17:47:21.346]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:21.346]                     base::options(mc.cores = 1L)
[17:47:21.346]                   }
[17:47:21.346]                   ...future.strategy.old <- future::plan("list")
[17:47:21.346]                   options(future.plan = NULL)
[17:47:21.346]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.346]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:21.346]                 }
[17:47:21.346]                 ...future.workdir <- getwd()
[17:47:21.346]             }
[17:47:21.346]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:21.346]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:21.346]         }
[17:47:21.346]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:21.346]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:21.346]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:21.346]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:21.346]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:21.346]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:21.346]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:21.346]             base::names(...future.oldOptions))
[17:47:21.346]     }
[17:47:21.346]     if (FALSE) {
[17:47:21.346]     }
[17:47:21.346]     else {
[17:47:21.346]         if (TRUE) {
[17:47:21.346]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:21.346]                 open = "w")
[17:47:21.346]         }
[17:47:21.346]         else {
[17:47:21.346]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:21.346]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:21.346]         }
[17:47:21.346]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:21.346]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:21.346]             base::sink(type = "output", split = FALSE)
[17:47:21.346]             base::close(...future.stdout)
[17:47:21.346]         }, add = TRUE)
[17:47:21.346]     }
[17:47:21.346]     ...future.frame <- base::sys.nframe()
[17:47:21.346]     ...future.conditions <- base::list()
[17:47:21.346]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:21.346]     if (FALSE) {
[17:47:21.346]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:21.346]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:21.346]     }
[17:47:21.346]     ...future.result <- base::tryCatch({
[17:47:21.346]         base::withCallingHandlers({
[17:47:21.346]             ...future.value <- base::withVisible(base::local({
[17:47:21.346]                 ...future.makeSendCondition <- base::local({
[17:47:21.346]                   sendCondition <- NULL
[17:47:21.346]                   function(frame = 1L) {
[17:47:21.346]                     if (is.function(sendCondition)) 
[17:47:21.346]                       return(sendCondition)
[17:47:21.346]                     ns <- getNamespace("parallel")
[17:47:21.346]                     if (exists("sendData", mode = "function", 
[17:47:21.346]                       envir = ns)) {
[17:47:21.346]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:21.346]                         envir = ns)
[17:47:21.346]                       envir <- sys.frame(frame)
[17:47:21.346]                       master <- NULL
[17:47:21.346]                       while (!identical(envir, .GlobalEnv) && 
[17:47:21.346]                         !identical(envir, emptyenv())) {
[17:47:21.346]                         if (exists("master", mode = "list", envir = envir, 
[17:47:21.346]                           inherits = FALSE)) {
[17:47:21.346]                           master <- get("master", mode = "list", 
[17:47:21.346]                             envir = envir, inherits = FALSE)
[17:47:21.346]                           if (inherits(master, c("SOCKnode", 
[17:47:21.346]                             "SOCK0node"))) {
[17:47:21.346]                             sendCondition <<- function(cond) {
[17:47:21.346]                               data <- list(type = "VALUE", value = cond, 
[17:47:21.346]                                 success = TRUE)
[17:47:21.346]                               parallel_sendData(master, data)
[17:47:21.346]                             }
[17:47:21.346]                             return(sendCondition)
[17:47:21.346]                           }
[17:47:21.346]                         }
[17:47:21.346]                         frame <- frame + 1L
[17:47:21.346]                         envir <- sys.frame(frame)
[17:47:21.346]                       }
[17:47:21.346]                     }
[17:47:21.346]                     sendCondition <<- function(cond) NULL
[17:47:21.346]                   }
[17:47:21.346]                 })
[17:47:21.346]                 withCallingHandlers({
[17:47:21.346]                   {
[17:47:21.346]                     integer(1e+07)
[17:47:21.346]                   }
[17:47:21.346]                 }, immediateCondition = function(cond) {
[17:47:21.346]                   sendCondition <- ...future.makeSendCondition()
[17:47:21.346]                   sendCondition(cond)
[17:47:21.346]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.346]                   {
[17:47:21.346]                     inherits <- base::inherits
[17:47:21.346]                     invokeRestart <- base::invokeRestart
[17:47:21.346]                     is.null <- base::is.null
[17:47:21.346]                     muffled <- FALSE
[17:47:21.346]                     if (inherits(cond, "message")) {
[17:47:21.346]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:21.346]                       if (muffled) 
[17:47:21.346]                         invokeRestart("muffleMessage")
[17:47:21.346]                     }
[17:47:21.346]                     else if (inherits(cond, "warning")) {
[17:47:21.346]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:21.346]                       if (muffled) 
[17:47:21.346]                         invokeRestart("muffleWarning")
[17:47:21.346]                     }
[17:47:21.346]                     else if (inherits(cond, "condition")) {
[17:47:21.346]                       if (!is.null(pattern)) {
[17:47:21.346]                         computeRestarts <- base::computeRestarts
[17:47:21.346]                         grepl <- base::grepl
[17:47:21.346]                         restarts <- computeRestarts(cond)
[17:47:21.346]                         for (restart in restarts) {
[17:47:21.346]                           name <- restart$name
[17:47:21.346]                           if (is.null(name)) 
[17:47:21.346]                             next
[17:47:21.346]                           if (!grepl(pattern, name)) 
[17:47:21.346]                             next
[17:47:21.346]                           invokeRestart(restart)
[17:47:21.346]                           muffled <- TRUE
[17:47:21.346]                           break
[17:47:21.346]                         }
[17:47:21.346]                       }
[17:47:21.346]                     }
[17:47:21.346]                     invisible(muffled)
[17:47:21.346]                   }
[17:47:21.346]                   muffleCondition(cond)
[17:47:21.346]                 })
[17:47:21.346]             }))
[17:47:21.346]             future::FutureResult(value = ...future.value$value, 
[17:47:21.346]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.346]                   ...future.rng), globalenv = if (FALSE) 
[17:47:21.346]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:21.346]                     ...future.globalenv.names))
[17:47:21.346]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:21.346]         }, condition = base::local({
[17:47:21.346]             c <- base::c
[17:47:21.346]             inherits <- base::inherits
[17:47:21.346]             invokeRestart <- base::invokeRestart
[17:47:21.346]             length <- base::length
[17:47:21.346]             list <- base::list
[17:47:21.346]             seq.int <- base::seq.int
[17:47:21.346]             signalCondition <- base::signalCondition
[17:47:21.346]             sys.calls <- base::sys.calls
[17:47:21.346]             `[[` <- base::`[[`
[17:47:21.346]             `+` <- base::`+`
[17:47:21.346]             `<<-` <- base::`<<-`
[17:47:21.346]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:21.346]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:21.346]                   3L)]
[17:47:21.346]             }
[17:47:21.346]             function(cond) {
[17:47:21.346]                 is_error <- inherits(cond, "error")
[17:47:21.346]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:21.346]                   NULL)
[17:47:21.346]                 if (is_error) {
[17:47:21.346]                   sessionInformation <- function() {
[17:47:21.346]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:21.346]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:21.346]                       search = base::search(), system = base::Sys.info())
[17:47:21.346]                   }
[17:47:21.346]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.346]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:21.346]                     cond$call), session = sessionInformation(), 
[17:47:21.346]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:21.346]                   signalCondition(cond)
[17:47:21.346]                 }
[17:47:21.346]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:21.346]                 "immediateCondition"))) {
[17:47:21.346]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:21.346]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.346]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:21.346]                   if (TRUE && !signal) {
[17:47:21.346]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.346]                     {
[17:47:21.346]                       inherits <- base::inherits
[17:47:21.346]                       invokeRestart <- base::invokeRestart
[17:47:21.346]                       is.null <- base::is.null
[17:47:21.346]                       muffled <- FALSE
[17:47:21.346]                       if (inherits(cond, "message")) {
[17:47:21.346]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.346]                         if (muffled) 
[17:47:21.346]                           invokeRestart("muffleMessage")
[17:47:21.346]                       }
[17:47:21.346]                       else if (inherits(cond, "warning")) {
[17:47:21.346]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.346]                         if (muffled) 
[17:47:21.346]                           invokeRestart("muffleWarning")
[17:47:21.346]                       }
[17:47:21.346]                       else if (inherits(cond, "condition")) {
[17:47:21.346]                         if (!is.null(pattern)) {
[17:47:21.346]                           computeRestarts <- base::computeRestarts
[17:47:21.346]                           grepl <- base::grepl
[17:47:21.346]                           restarts <- computeRestarts(cond)
[17:47:21.346]                           for (restart in restarts) {
[17:47:21.346]                             name <- restart$name
[17:47:21.346]                             if (is.null(name)) 
[17:47:21.346]                               next
[17:47:21.346]                             if (!grepl(pattern, name)) 
[17:47:21.346]                               next
[17:47:21.346]                             invokeRestart(restart)
[17:47:21.346]                             muffled <- TRUE
[17:47:21.346]                             break
[17:47:21.346]                           }
[17:47:21.346]                         }
[17:47:21.346]                       }
[17:47:21.346]                       invisible(muffled)
[17:47:21.346]                     }
[17:47:21.346]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.346]                   }
[17:47:21.346]                 }
[17:47:21.346]                 else {
[17:47:21.346]                   if (TRUE) {
[17:47:21.346]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.346]                     {
[17:47:21.346]                       inherits <- base::inherits
[17:47:21.346]                       invokeRestart <- base::invokeRestart
[17:47:21.346]                       is.null <- base::is.null
[17:47:21.346]                       muffled <- FALSE
[17:47:21.346]                       if (inherits(cond, "message")) {
[17:47:21.346]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.346]                         if (muffled) 
[17:47:21.346]                           invokeRestart("muffleMessage")
[17:47:21.346]                       }
[17:47:21.346]                       else if (inherits(cond, "warning")) {
[17:47:21.346]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.346]                         if (muffled) 
[17:47:21.346]                           invokeRestart("muffleWarning")
[17:47:21.346]                       }
[17:47:21.346]                       else if (inherits(cond, "condition")) {
[17:47:21.346]                         if (!is.null(pattern)) {
[17:47:21.346]                           computeRestarts <- base::computeRestarts
[17:47:21.346]                           grepl <- base::grepl
[17:47:21.346]                           restarts <- computeRestarts(cond)
[17:47:21.346]                           for (restart in restarts) {
[17:47:21.346]                             name <- restart$name
[17:47:21.346]                             if (is.null(name)) 
[17:47:21.346]                               next
[17:47:21.346]                             if (!grepl(pattern, name)) 
[17:47:21.346]                               next
[17:47:21.346]                             invokeRestart(restart)
[17:47:21.346]                             muffled <- TRUE
[17:47:21.346]                             break
[17:47:21.346]                           }
[17:47:21.346]                         }
[17:47:21.346]                       }
[17:47:21.346]                       invisible(muffled)
[17:47:21.346]                     }
[17:47:21.346]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.346]                   }
[17:47:21.346]                 }
[17:47:21.346]             }
[17:47:21.346]         }))
[17:47:21.346]     }, error = function(ex) {
[17:47:21.346]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:21.346]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.346]                 ...future.rng), started = ...future.startTime, 
[17:47:21.346]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:21.346]             version = "1.8"), class = "FutureResult")
[17:47:21.346]     }, finally = {
[17:47:21.346]         if (!identical(...future.workdir, getwd())) 
[17:47:21.346]             setwd(...future.workdir)
[17:47:21.346]         {
[17:47:21.346]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:21.346]                 ...future.oldOptions$nwarnings <- NULL
[17:47:21.346]             }
[17:47:21.346]             base::options(...future.oldOptions)
[17:47:21.346]             if (.Platform$OS.type == "windows") {
[17:47:21.346]                 old_names <- names(...future.oldEnvVars)
[17:47:21.346]                 envs <- base::Sys.getenv()
[17:47:21.346]                 names <- names(envs)
[17:47:21.346]                 common <- intersect(names, old_names)
[17:47:21.346]                 added <- setdiff(names, old_names)
[17:47:21.346]                 removed <- setdiff(old_names, names)
[17:47:21.346]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:21.346]                   envs[common]]
[17:47:21.346]                 NAMES <- toupper(changed)
[17:47:21.346]                 args <- list()
[17:47:21.346]                 for (kk in seq_along(NAMES)) {
[17:47:21.346]                   name <- changed[[kk]]
[17:47:21.346]                   NAME <- NAMES[[kk]]
[17:47:21.346]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.346]                     next
[17:47:21.346]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.346]                 }
[17:47:21.346]                 NAMES <- toupper(added)
[17:47:21.346]                 for (kk in seq_along(NAMES)) {
[17:47:21.346]                   name <- added[[kk]]
[17:47:21.346]                   NAME <- NAMES[[kk]]
[17:47:21.346]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.346]                     next
[17:47:21.346]                   args[[name]] <- ""
[17:47:21.346]                 }
[17:47:21.346]                 NAMES <- toupper(removed)
[17:47:21.346]                 for (kk in seq_along(NAMES)) {
[17:47:21.346]                   name <- removed[[kk]]
[17:47:21.346]                   NAME <- NAMES[[kk]]
[17:47:21.346]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.346]                     next
[17:47:21.346]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.346]                 }
[17:47:21.346]                 if (length(args) > 0) 
[17:47:21.346]                   base::do.call(base::Sys.setenv, args = args)
[17:47:21.346]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:21.346]             }
[17:47:21.346]             else {
[17:47:21.346]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:21.346]             }
[17:47:21.346]             {
[17:47:21.346]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:21.346]                   0L) {
[17:47:21.346]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:21.346]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:21.346]                   base::options(opts)
[17:47:21.346]                 }
[17:47:21.346]                 {
[17:47:21.346]                   {
[17:47:21.346]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:21.346]                     NULL
[17:47:21.346]                   }
[17:47:21.346]                   options(future.plan = NULL)
[17:47:21.346]                   if (is.na(NA_character_)) 
[17:47:21.346]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.346]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:21.346]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:21.346]                     .init = FALSE)
[17:47:21.346]                 }
[17:47:21.346]             }
[17:47:21.346]         }
[17:47:21.346]     })
[17:47:21.346]     if (TRUE) {
[17:47:21.346]         base::sink(type = "output", split = FALSE)
[17:47:21.346]         if (TRUE) {
[17:47:21.346]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:21.346]         }
[17:47:21.346]         else {
[17:47:21.346]             ...future.result["stdout"] <- base::list(NULL)
[17:47:21.346]         }
[17:47:21.346]         base::close(...future.stdout)
[17:47:21.346]         ...future.stdout <- NULL
[17:47:21.346]     }
[17:47:21.346]     ...future.result$conditions <- ...future.conditions
[17:47:21.346]     ...future.result$finished <- base::Sys.time()
[17:47:21.346]     ...future.result
[17:47:21.346] }
[17:47:21.349] MultisessionFuture started
[17:47:21.350] - Launch lazy future ... done
[17:47:21.350] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:47:21.350] result() for ClusterFuture ...
[17:47:21.350] receiveMessageFromWorker() for ClusterFuture ...
[17:47:21.350] - Validating connection of MultisessionFuture
[17:47:21.412] - received message: FutureResult
[17:47:21.412] - Received FutureResult
[17:47:21.412] - Erased future from FutureRegistry
[17:47:21.412] result() for ClusterFuture ...
[17:47:21.412] - result already collected: FutureResult
[17:47:21.413] result() for ClusterFuture ... done
[17:47:21.413] - Garbage collecting worker ...
[17:47:21.644] - Garbage collecting worker ... done
[17:47:21.644] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:21.644] result() for ClusterFuture ... done
[17:47:21.645] result() for ClusterFuture ...
[17:47:21.645] - result already collected: FutureResult
[17:47:21.645] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[17:47:21.645] getGlobalsAndPackages() ...
[17:47:21.645] Searching for globals...
[17:47:21.646] - globals found: [2] ‘{’, ‘gc’
[17:47:21.646] Searching for globals ... DONE
[17:47:21.646] Resolving globals: FALSE
[17:47:21.647] 
[17:47:21.647] 
[17:47:21.647] getGlobalsAndPackages() ... DONE
[17:47:21.647] run() for ‘Future’ ...
[17:47:21.647] - state: ‘created’
[17:47:21.648] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:21.658] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:21.658] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:21.658]   - Field: ‘node’
[17:47:21.658]   - Field: ‘label’
[17:47:21.658]   - Field: ‘local’
[17:47:21.658]   - Field: ‘owner’
[17:47:21.659]   - Field: ‘envir’
[17:47:21.659]   - Field: ‘workers’
[17:47:21.659]   - Field: ‘packages’
[17:47:21.659]   - Field: ‘gc’
[17:47:21.659]   - Field: ‘conditions’
[17:47:21.659]   - Field: ‘persistent’
[17:47:21.659]   - Field: ‘expr’
[17:47:21.659]   - Field: ‘uuid’
[17:47:21.659]   - Field: ‘seed’
[17:47:21.659]   - Field: ‘version’
[17:47:21.659]   - Field: ‘result’
[17:47:21.660]   - Field: ‘asynchronous’
[17:47:21.660]   - Field: ‘calls’
[17:47:21.660]   - Field: ‘globals’
[17:47:21.660]   - Field: ‘stdout’
[17:47:21.660]   - Field: ‘earlySignal’
[17:47:21.660]   - Field: ‘lazy’
[17:47:21.660]   - Field: ‘state’
[17:47:21.660] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:21.660] - Launch lazy future ...
[17:47:21.661] Packages needed by the future expression (n = 0): <none>
[17:47:21.661] Packages needed by future strategies (n = 0): <none>
[17:47:21.661] {
[17:47:21.661]     {
[17:47:21.661]         {
[17:47:21.661]             ...future.startTime <- base::Sys.time()
[17:47:21.661]             {
[17:47:21.661]                 {
[17:47:21.661]                   {
[17:47:21.661]                     {
[17:47:21.661]                       base::local({
[17:47:21.661]                         has_future <- base::requireNamespace("future", 
[17:47:21.661]                           quietly = TRUE)
[17:47:21.661]                         if (has_future) {
[17:47:21.661]                           ns <- base::getNamespace("future")
[17:47:21.661]                           version <- ns[[".package"]][["version"]]
[17:47:21.661]                           if (is.null(version)) 
[17:47:21.661]                             version <- utils::packageVersion("future")
[17:47:21.661]                         }
[17:47:21.661]                         else {
[17:47:21.661]                           version <- NULL
[17:47:21.661]                         }
[17:47:21.661]                         if (!has_future || version < "1.8.0") {
[17:47:21.661]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:21.661]                             "", base::R.version$version.string), 
[17:47:21.661]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:21.661]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:21.661]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:21.661]                               "release", "version")], collapse = " "), 
[17:47:21.661]                             hostname = base::Sys.info()[["nodename"]])
[17:47:21.661]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:21.661]                             info)
[17:47:21.661]                           info <- base::paste(info, collapse = "; ")
[17:47:21.661]                           if (!has_future) {
[17:47:21.661]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:21.661]                               info)
[17:47:21.661]                           }
[17:47:21.661]                           else {
[17:47:21.661]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:21.661]                               info, version)
[17:47:21.661]                           }
[17:47:21.661]                           base::stop(msg)
[17:47:21.661]                         }
[17:47:21.661]                       })
[17:47:21.661]                     }
[17:47:21.661]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:21.661]                     base::options(mc.cores = 1L)
[17:47:21.661]                   }
[17:47:21.661]                   ...future.strategy.old <- future::plan("list")
[17:47:21.661]                   options(future.plan = NULL)
[17:47:21.661]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.661]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:21.661]                 }
[17:47:21.661]                 ...future.workdir <- getwd()
[17:47:21.661]             }
[17:47:21.661]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:21.661]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:21.661]         }
[17:47:21.661]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:21.661]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:21.661]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:21.661]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:21.661]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:21.661]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:21.661]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:21.661]             base::names(...future.oldOptions))
[17:47:21.661]     }
[17:47:21.661]     if (FALSE) {
[17:47:21.661]     }
[17:47:21.661]     else {
[17:47:21.661]         if (TRUE) {
[17:47:21.661]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:21.661]                 open = "w")
[17:47:21.661]         }
[17:47:21.661]         else {
[17:47:21.661]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:21.661]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:21.661]         }
[17:47:21.661]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:21.661]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:21.661]             base::sink(type = "output", split = FALSE)
[17:47:21.661]             base::close(...future.stdout)
[17:47:21.661]         }, add = TRUE)
[17:47:21.661]     }
[17:47:21.661]     ...future.frame <- base::sys.nframe()
[17:47:21.661]     ...future.conditions <- base::list()
[17:47:21.661]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:21.661]     if (FALSE) {
[17:47:21.661]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:21.661]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:21.661]     }
[17:47:21.661]     ...future.result <- base::tryCatch({
[17:47:21.661]         base::withCallingHandlers({
[17:47:21.661]             ...future.value <- base::withVisible(base::local({
[17:47:21.661]                 ...future.makeSendCondition <- base::local({
[17:47:21.661]                   sendCondition <- NULL
[17:47:21.661]                   function(frame = 1L) {
[17:47:21.661]                     if (is.function(sendCondition)) 
[17:47:21.661]                       return(sendCondition)
[17:47:21.661]                     ns <- getNamespace("parallel")
[17:47:21.661]                     if (exists("sendData", mode = "function", 
[17:47:21.661]                       envir = ns)) {
[17:47:21.661]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:21.661]                         envir = ns)
[17:47:21.661]                       envir <- sys.frame(frame)
[17:47:21.661]                       master <- NULL
[17:47:21.661]                       while (!identical(envir, .GlobalEnv) && 
[17:47:21.661]                         !identical(envir, emptyenv())) {
[17:47:21.661]                         if (exists("master", mode = "list", envir = envir, 
[17:47:21.661]                           inherits = FALSE)) {
[17:47:21.661]                           master <- get("master", mode = "list", 
[17:47:21.661]                             envir = envir, inherits = FALSE)
[17:47:21.661]                           if (inherits(master, c("SOCKnode", 
[17:47:21.661]                             "SOCK0node"))) {
[17:47:21.661]                             sendCondition <<- function(cond) {
[17:47:21.661]                               data <- list(type = "VALUE", value = cond, 
[17:47:21.661]                                 success = TRUE)
[17:47:21.661]                               parallel_sendData(master, data)
[17:47:21.661]                             }
[17:47:21.661]                             return(sendCondition)
[17:47:21.661]                           }
[17:47:21.661]                         }
[17:47:21.661]                         frame <- frame + 1L
[17:47:21.661]                         envir <- sys.frame(frame)
[17:47:21.661]                       }
[17:47:21.661]                     }
[17:47:21.661]                     sendCondition <<- function(cond) NULL
[17:47:21.661]                   }
[17:47:21.661]                 })
[17:47:21.661]                 withCallingHandlers({
[17:47:21.661]                   {
[17:47:21.661]                     gc()
[17:47:21.661]                   }
[17:47:21.661]                 }, immediateCondition = function(cond) {
[17:47:21.661]                   sendCondition <- ...future.makeSendCondition()
[17:47:21.661]                   sendCondition(cond)
[17:47:21.661]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.661]                   {
[17:47:21.661]                     inherits <- base::inherits
[17:47:21.661]                     invokeRestart <- base::invokeRestart
[17:47:21.661]                     is.null <- base::is.null
[17:47:21.661]                     muffled <- FALSE
[17:47:21.661]                     if (inherits(cond, "message")) {
[17:47:21.661]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:21.661]                       if (muffled) 
[17:47:21.661]                         invokeRestart("muffleMessage")
[17:47:21.661]                     }
[17:47:21.661]                     else if (inherits(cond, "warning")) {
[17:47:21.661]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:21.661]                       if (muffled) 
[17:47:21.661]                         invokeRestart("muffleWarning")
[17:47:21.661]                     }
[17:47:21.661]                     else if (inherits(cond, "condition")) {
[17:47:21.661]                       if (!is.null(pattern)) {
[17:47:21.661]                         computeRestarts <- base::computeRestarts
[17:47:21.661]                         grepl <- base::grepl
[17:47:21.661]                         restarts <- computeRestarts(cond)
[17:47:21.661]                         for (restart in restarts) {
[17:47:21.661]                           name <- restart$name
[17:47:21.661]                           if (is.null(name)) 
[17:47:21.661]                             next
[17:47:21.661]                           if (!grepl(pattern, name)) 
[17:47:21.661]                             next
[17:47:21.661]                           invokeRestart(restart)
[17:47:21.661]                           muffled <- TRUE
[17:47:21.661]                           break
[17:47:21.661]                         }
[17:47:21.661]                       }
[17:47:21.661]                     }
[17:47:21.661]                     invisible(muffled)
[17:47:21.661]                   }
[17:47:21.661]                   muffleCondition(cond)
[17:47:21.661]                 })
[17:47:21.661]             }))
[17:47:21.661]             future::FutureResult(value = ...future.value$value, 
[17:47:21.661]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.661]                   ...future.rng), globalenv = if (FALSE) 
[17:47:21.661]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:21.661]                     ...future.globalenv.names))
[17:47:21.661]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:21.661]         }, condition = base::local({
[17:47:21.661]             c <- base::c
[17:47:21.661]             inherits <- base::inherits
[17:47:21.661]             invokeRestart <- base::invokeRestart
[17:47:21.661]             length <- base::length
[17:47:21.661]             list <- base::list
[17:47:21.661]             seq.int <- base::seq.int
[17:47:21.661]             signalCondition <- base::signalCondition
[17:47:21.661]             sys.calls <- base::sys.calls
[17:47:21.661]             `[[` <- base::`[[`
[17:47:21.661]             `+` <- base::`+`
[17:47:21.661]             `<<-` <- base::`<<-`
[17:47:21.661]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:21.661]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:21.661]                   3L)]
[17:47:21.661]             }
[17:47:21.661]             function(cond) {
[17:47:21.661]                 is_error <- inherits(cond, "error")
[17:47:21.661]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:21.661]                   NULL)
[17:47:21.661]                 if (is_error) {
[17:47:21.661]                   sessionInformation <- function() {
[17:47:21.661]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:21.661]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:21.661]                       search = base::search(), system = base::Sys.info())
[17:47:21.661]                   }
[17:47:21.661]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.661]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:21.661]                     cond$call), session = sessionInformation(), 
[17:47:21.661]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:21.661]                   signalCondition(cond)
[17:47:21.661]                 }
[17:47:21.661]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:21.661]                 "immediateCondition"))) {
[17:47:21.661]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:21.661]                   ...future.conditions[[length(...future.conditions) + 
[17:47:21.661]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:21.661]                   if (TRUE && !signal) {
[17:47:21.661]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.661]                     {
[17:47:21.661]                       inherits <- base::inherits
[17:47:21.661]                       invokeRestart <- base::invokeRestart
[17:47:21.661]                       is.null <- base::is.null
[17:47:21.661]                       muffled <- FALSE
[17:47:21.661]                       if (inherits(cond, "message")) {
[17:47:21.661]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.661]                         if (muffled) 
[17:47:21.661]                           invokeRestart("muffleMessage")
[17:47:21.661]                       }
[17:47:21.661]                       else if (inherits(cond, "warning")) {
[17:47:21.661]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.661]                         if (muffled) 
[17:47:21.661]                           invokeRestart("muffleWarning")
[17:47:21.661]                       }
[17:47:21.661]                       else if (inherits(cond, "condition")) {
[17:47:21.661]                         if (!is.null(pattern)) {
[17:47:21.661]                           computeRestarts <- base::computeRestarts
[17:47:21.661]                           grepl <- base::grepl
[17:47:21.661]                           restarts <- computeRestarts(cond)
[17:47:21.661]                           for (restart in restarts) {
[17:47:21.661]                             name <- restart$name
[17:47:21.661]                             if (is.null(name)) 
[17:47:21.661]                               next
[17:47:21.661]                             if (!grepl(pattern, name)) 
[17:47:21.661]                               next
[17:47:21.661]                             invokeRestart(restart)
[17:47:21.661]                             muffled <- TRUE
[17:47:21.661]                             break
[17:47:21.661]                           }
[17:47:21.661]                         }
[17:47:21.661]                       }
[17:47:21.661]                       invisible(muffled)
[17:47:21.661]                     }
[17:47:21.661]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.661]                   }
[17:47:21.661]                 }
[17:47:21.661]                 else {
[17:47:21.661]                   if (TRUE) {
[17:47:21.661]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:21.661]                     {
[17:47:21.661]                       inherits <- base::inherits
[17:47:21.661]                       invokeRestart <- base::invokeRestart
[17:47:21.661]                       is.null <- base::is.null
[17:47:21.661]                       muffled <- FALSE
[17:47:21.661]                       if (inherits(cond, "message")) {
[17:47:21.661]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:21.661]                         if (muffled) 
[17:47:21.661]                           invokeRestart("muffleMessage")
[17:47:21.661]                       }
[17:47:21.661]                       else if (inherits(cond, "warning")) {
[17:47:21.661]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:21.661]                         if (muffled) 
[17:47:21.661]                           invokeRestart("muffleWarning")
[17:47:21.661]                       }
[17:47:21.661]                       else if (inherits(cond, "condition")) {
[17:47:21.661]                         if (!is.null(pattern)) {
[17:47:21.661]                           computeRestarts <- base::computeRestarts
[17:47:21.661]                           grepl <- base::grepl
[17:47:21.661]                           restarts <- computeRestarts(cond)
[17:47:21.661]                           for (restart in restarts) {
[17:47:21.661]                             name <- restart$name
[17:47:21.661]                             if (is.null(name)) 
[17:47:21.661]                               next
[17:47:21.661]                             if (!grepl(pattern, name)) 
[17:47:21.661]                               next
[17:47:21.661]                             invokeRestart(restart)
[17:47:21.661]                             muffled <- TRUE
[17:47:21.661]                             break
[17:47:21.661]                           }
[17:47:21.661]                         }
[17:47:21.661]                       }
[17:47:21.661]                       invisible(muffled)
[17:47:21.661]                     }
[17:47:21.661]                     muffleCondition(cond, pattern = "^muffle")
[17:47:21.661]                   }
[17:47:21.661]                 }
[17:47:21.661]             }
[17:47:21.661]         }))
[17:47:21.661]     }, error = function(ex) {
[17:47:21.661]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:21.661]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:21.661]                 ...future.rng), started = ...future.startTime, 
[17:47:21.661]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:21.661]             version = "1.8"), class = "FutureResult")
[17:47:21.661]     }, finally = {
[17:47:21.661]         if (!identical(...future.workdir, getwd())) 
[17:47:21.661]             setwd(...future.workdir)
[17:47:21.661]         {
[17:47:21.661]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:21.661]                 ...future.oldOptions$nwarnings <- NULL
[17:47:21.661]             }
[17:47:21.661]             base::options(...future.oldOptions)
[17:47:21.661]             if (.Platform$OS.type == "windows") {
[17:47:21.661]                 old_names <- names(...future.oldEnvVars)
[17:47:21.661]                 envs <- base::Sys.getenv()
[17:47:21.661]                 names <- names(envs)
[17:47:21.661]                 common <- intersect(names, old_names)
[17:47:21.661]                 added <- setdiff(names, old_names)
[17:47:21.661]                 removed <- setdiff(old_names, names)
[17:47:21.661]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:21.661]                   envs[common]]
[17:47:21.661]                 NAMES <- toupper(changed)
[17:47:21.661]                 args <- list()
[17:47:21.661]                 for (kk in seq_along(NAMES)) {
[17:47:21.661]                   name <- changed[[kk]]
[17:47:21.661]                   NAME <- NAMES[[kk]]
[17:47:21.661]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.661]                     next
[17:47:21.661]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.661]                 }
[17:47:21.661]                 NAMES <- toupper(added)
[17:47:21.661]                 for (kk in seq_along(NAMES)) {
[17:47:21.661]                   name <- added[[kk]]
[17:47:21.661]                   NAME <- NAMES[[kk]]
[17:47:21.661]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.661]                     next
[17:47:21.661]                   args[[name]] <- ""
[17:47:21.661]                 }
[17:47:21.661]                 NAMES <- toupper(removed)
[17:47:21.661]                 for (kk in seq_along(NAMES)) {
[17:47:21.661]                   name <- removed[[kk]]
[17:47:21.661]                   NAME <- NAMES[[kk]]
[17:47:21.661]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:21.661]                     next
[17:47:21.661]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:21.661]                 }
[17:47:21.661]                 if (length(args) > 0) 
[17:47:21.661]                   base::do.call(base::Sys.setenv, args = args)
[17:47:21.661]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:21.661]             }
[17:47:21.661]             else {
[17:47:21.661]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:21.661]             }
[17:47:21.661]             {
[17:47:21.661]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:21.661]                   0L) {
[17:47:21.661]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:21.661]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:21.661]                   base::options(opts)
[17:47:21.661]                 }
[17:47:21.661]                 {
[17:47:21.661]                   {
[17:47:21.661]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:21.661]                     NULL
[17:47:21.661]                   }
[17:47:21.661]                   options(future.plan = NULL)
[17:47:21.661]                   if (is.na(NA_character_)) 
[17:47:21.661]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:21.661]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:21.661]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:21.661]                     .init = FALSE)
[17:47:21.661]                 }
[17:47:21.661]             }
[17:47:21.661]         }
[17:47:21.661]     })
[17:47:21.661]     if (TRUE) {
[17:47:21.661]         base::sink(type = "output", split = FALSE)
[17:47:21.661]         if (TRUE) {
[17:47:21.661]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:21.661]         }
[17:47:21.661]         else {
[17:47:21.661]             ...future.result["stdout"] <- base::list(NULL)
[17:47:21.661]         }
[17:47:21.661]         base::close(...future.stdout)
[17:47:21.661]         ...future.stdout <- NULL
[17:47:21.661]     }
[17:47:21.661]     ...future.result$conditions <- ...future.conditions
[17:47:21.661]     ...future.result$finished <- base::Sys.time()
[17:47:21.661]     ...future.result
[17:47:21.661] }
[17:47:21.664] MultisessionFuture started
[17:47:21.664] - Launch lazy future ... done
[17:47:21.664] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:47:21.664] result() for ClusterFuture ...
[17:47:21.664] receiveMessageFromWorker() for ClusterFuture ...
[17:47:21.665] - Validating connection of MultisessionFuture
[17:47:21.733] - received message: FutureResult
[17:47:21.733] - Received FutureResult
[17:47:21.734] - Erased future from FutureRegistry
[17:47:21.734] result() for ClusterFuture ...
[17:47:21.734] - result already collected: FutureResult
[17:47:21.734] result() for ClusterFuture ... done
[17:47:21.734] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:21.734] result() for ClusterFuture ... done
[17:47:21.734] result() for ClusterFuture ...
[17:47:21.734] - result already collected: FutureResult
[17:47:21.734] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 407154 21.8     899071  48.1   692222  37.0
Vcells 729747  5.6   13476992 102.9 15806168 120.6
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[17:47:21.735] plan(): Setting new future strategy stack:
[17:47:21.735] List of future strategies:
[17:47:21.735] 1. multisession:
[17:47:21.735]    - args: function (..., workers = 2L, envir = parent.frame())
[17:47:21.735]    - tweaked: TRUE
[17:47:21.735]    - call: plan(multisession, workers = 2L)
[17:47:21.736] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:21.736] multisession:
[17:47:21.736] - args: function (..., workers = 2L, envir = parent.frame())
[17:47:21.736] - tweaked: TRUE
[17:47:21.736] - call: plan(multisession, workers = 2L)
[17:47:21.737] getGlobalsAndPackages() ...
[17:47:21.737] Not searching for globals
[17:47:21.737] - globals: [0] <none>
[17:47:21.737] getGlobalsAndPackages() ... DONE
[17:47:21.738] [local output] makeClusterPSOCK() ...
[17:47:21.742] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:21.742] [local output] Base port: 11558
[17:47:21.742] [local output] Getting setup options for 2 cluster nodes ...
[17:47:21.742] [local output]  - Node 1 of 2 ...
[17:47:21.743] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:21.743] [local output] Rscript port: 11558

[17:47:21.744] [local output]  - Node 2 of 2 ...
[17:47:21.744] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:21.745] [local output] Rscript port: 11558

[17:47:21.745] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:21.745] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:21.745] [local output] Setting up PSOCK nodes in parallel
[17:47:21.745] List of 36
[17:47:21.745]  $ worker          : chr "localhost"
[17:47:21.745]   ..- attr(*, "localhost")= logi TRUE
[17:47:21.745]  $ master          : chr "localhost"
[17:47:21.745]  $ port            : int 11558
[17:47:21.745]  $ connectTimeout  : num 120
[17:47:21.745]  $ timeout         : num 2592000
[17:47:21.745]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:21.745]  $ homogeneous     : logi TRUE
[17:47:21.745]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:21.745]  $ rscript_envs    : NULL
[17:47:21.745]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:21.745]  $ rscript_startup : NULL
[17:47:21.745]  $ rscript_sh      : chr "sh"
[17:47:21.745]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:21.745]  $ methods         : logi TRUE
[17:47:21.745]  $ socketOptions   : chr "no-delay"
[17:47:21.745]  $ useXDR          : logi FALSE
[17:47:21.745]  $ outfile         : chr "/dev/null"
[17:47:21.745]  $ renice          : int NA
[17:47:21.745]  $ rshcmd          : NULL
[17:47:21.745]  $ user            : chr(0) 
[17:47:21.745]  $ revtunnel       : logi FALSE
[17:47:21.745]  $ rshlogfile      : NULL
[17:47:21.745]  $ rshopts         : chr(0) 
[17:47:21.745]  $ rank            : int 1
[17:47:21.745]  $ manual          : logi FALSE
[17:47:21.745]  $ dryrun          : logi FALSE
[17:47:21.745]  $ quiet           : logi FALSE
[17:47:21.745]  $ setup_strategy  : chr "parallel"
[17:47:21.745]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:21.745]  $ pidfile         : chr "/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b24748698ad8.pid"
[17:47:21.745]  $ rshcmd_label    : NULL
[17:47:21.745]  $ rsh_call        : NULL
[17:47:21.745]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:21.745]  $ localMachine    : logi TRUE
[17:47:21.745]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:21.745]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:21.745]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:21.745]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:21.745]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:21.745]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:21.745]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:21.745]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:21.745]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:21.745]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:21.745]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:21.745]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:21.745]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:21.745]  $ arguments       :List of 28
[17:47:21.745]   ..$ worker          : chr "localhost"
[17:47:21.745]   ..$ master          : NULL
[17:47:21.745]   ..$ port            : int 11558
[17:47:21.745]   ..$ connectTimeout  : num 120
[17:47:21.745]   ..$ timeout         : num 2592000
[17:47:21.745]   ..$ rscript         : NULL
[17:47:21.745]   ..$ homogeneous     : NULL
[17:47:21.745]   ..$ rscript_args    : NULL
[17:47:21.745]   ..$ rscript_envs    : NULL
[17:47:21.745]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:21.745]   ..$ rscript_startup : NULL
[17:47:21.745]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:21.745]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:21.745]   ..$ methods         : logi TRUE
[17:47:21.745]   ..$ socketOptions   : chr "no-delay"
[17:47:21.745]   ..$ useXDR          : logi FALSE
[17:47:21.745]   ..$ outfile         : chr "/dev/null"
[17:47:21.745]   ..$ renice          : int NA
[17:47:21.745]   ..$ rshcmd          : NULL
[17:47:21.745]   ..$ user            : NULL
[17:47:21.745]   ..$ revtunnel       : logi NA
[17:47:21.745]   ..$ rshlogfile      : NULL
[17:47:21.745]   ..$ rshopts         : NULL
[17:47:21.745]   ..$ rank            : int 1
[17:47:21.745]   ..$ manual          : logi FALSE
[17:47:21.745]   ..$ dryrun          : logi FALSE
[17:47:21.745]   ..$ quiet           : logi FALSE
[17:47:21.745]   ..$ setup_strategy  : chr "parallel"
[17:47:21.745]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:21.764] [local output] System call to launch all workers:
[17:47:21.765] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpusaNjr/worker.rank=1.parallelly.parent=45639.b24748698ad8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11558 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:21.765] [local output] Starting PSOCK main server
[17:47:21.766] [local output] Workers launched
[17:47:21.766] [local output] Waiting for workers to connect back
[17:47:21.766]  - [local output] 0 workers out of 2 ready
[17:47:22.034]  - [local output] 0 workers out of 2 ready
[17:47:22.034]  - [local output] 1 workers out of 2 ready
[17:47:22.035]  - [local output] 1 workers out of 2 ready
[17:47:22.036]  - [local output] 2 workers out of 2 ready
[17:47:22.036] [local output] Launching of workers completed
[17:47:22.036] [local output] Collecting session information from workers
[17:47:22.037] [local output]  - Worker #1 of 2
[17:47:22.037] [local output]  - Worker #2 of 2
[17:47:22.037] [local output] makeClusterPSOCK() ... done
[17:47:22.048] Packages needed by the future expression (n = 0): <none>
[17:47:22.048] Packages needed by future strategies (n = 0): <none>
[17:47:22.049] {
[17:47:22.049]     {
[17:47:22.049]         {
[17:47:22.049]             ...future.startTime <- base::Sys.time()
[17:47:22.049]             {
[17:47:22.049]                 {
[17:47:22.049]                   {
[17:47:22.049]                     {
[17:47:22.049]                       base::local({
[17:47:22.049]                         has_future <- base::requireNamespace("future", 
[17:47:22.049]                           quietly = TRUE)
[17:47:22.049]                         if (has_future) {
[17:47:22.049]                           ns <- base::getNamespace("future")
[17:47:22.049]                           version <- ns[[".package"]][["version"]]
[17:47:22.049]                           if (is.null(version)) 
[17:47:22.049]                             version <- utils::packageVersion("future")
[17:47:22.049]                         }
[17:47:22.049]                         else {
[17:47:22.049]                           version <- NULL
[17:47:22.049]                         }
[17:47:22.049]                         if (!has_future || version < "1.8.0") {
[17:47:22.049]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:22.049]                             "", base::R.version$version.string), 
[17:47:22.049]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:22.049]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:22.049]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:22.049]                               "release", "version")], collapse = " "), 
[17:47:22.049]                             hostname = base::Sys.info()[["nodename"]])
[17:47:22.049]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:22.049]                             info)
[17:47:22.049]                           info <- base::paste(info, collapse = "; ")
[17:47:22.049]                           if (!has_future) {
[17:47:22.049]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:22.049]                               info)
[17:47:22.049]                           }
[17:47:22.049]                           else {
[17:47:22.049]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:22.049]                               info, version)
[17:47:22.049]                           }
[17:47:22.049]                           base::stop(msg)
[17:47:22.049]                         }
[17:47:22.049]                       })
[17:47:22.049]                     }
[17:47:22.049]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:22.049]                     base::options(mc.cores = 1L)
[17:47:22.049]                   }
[17:47:22.049]                   ...future.strategy.old <- future::plan("list")
[17:47:22.049]                   options(future.plan = NULL)
[17:47:22.049]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:22.049]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:22.049]                 }
[17:47:22.049]                 ...future.workdir <- getwd()
[17:47:22.049]             }
[17:47:22.049]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:22.049]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:22.049]         }
[17:47:22.049]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:22.049]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:22.049]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:22.049]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:22.049]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:22.049]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:22.049]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:22.049]             base::names(...future.oldOptions))
[17:47:22.049]     }
[17:47:22.049]     if (FALSE) {
[17:47:22.049]     }
[17:47:22.049]     else {
[17:47:22.049]         if (TRUE) {
[17:47:22.049]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:22.049]                 open = "w")
[17:47:22.049]         }
[17:47:22.049]         else {
[17:47:22.049]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:22.049]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:22.049]         }
[17:47:22.049]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:22.049]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:22.049]             base::sink(type = "output", split = FALSE)
[17:47:22.049]             base::close(...future.stdout)
[17:47:22.049]         }, add = TRUE)
[17:47:22.049]     }
[17:47:22.049]     ...future.frame <- base::sys.nframe()
[17:47:22.049]     ...future.conditions <- base::list()
[17:47:22.049]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:22.049]     if (FALSE) {
[17:47:22.049]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:22.049]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:22.049]     }
[17:47:22.049]     ...future.result <- base::tryCatch({
[17:47:22.049]         base::withCallingHandlers({
[17:47:22.049]             ...future.value <- base::withVisible(base::local({
[17:47:22.049]                 ...future.makeSendCondition <- base::local({
[17:47:22.049]                   sendCondition <- NULL
[17:47:22.049]                   function(frame = 1L) {
[17:47:22.049]                     if (is.function(sendCondition)) 
[17:47:22.049]                       return(sendCondition)
[17:47:22.049]                     ns <- getNamespace("parallel")
[17:47:22.049]                     if (exists("sendData", mode = "function", 
[17:47:22.049]                       envir = ns)) {
[17:47:22.049]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:22.049]                         envir = ns)
[17:47:22.049]                       envir <- sys.frame(frame)
[17:47:22.049]                       master <- NULL
[17:47:22.049]                       while (!identical(envir, .GlobalEnv) && 
[17:47:22.049]                         !identical(envir, emptyenv())) {
[17:47:22.049]                         if (exists("master", mode = "list", envir = envir, 
[17:47:22.049]                           inherits = FALSE)) {
[17:47:22.049]                           master <- get("master", mode = "list", 
[17:47:22.049]                             envir = envir, inherits = FALSE)
[17:47:22.049]                           if (inherits(master, c("SOCKnode", 
[17:47:22.049]                             "SOCK0node"))) {
[17:47:22.049]                             sendCondition <<- function(cond) {
[17:47:22.049]                               data <- list(type = "VALUE", value = cond, 
[17:47:22.049]                                 success = TRUE)
[17:47:22.049]                               parallel_sendData(master, data)
[17:47:22.049]                             }
[17:47:22.049]                             return(sendCondition)
[17:47:22.049]                           }
[17:47:22.049]                         }
[17:47:22.049]                         frame <- frame + 1L
[17:47:22.049]                         envir <- sys.frame(frame)
[17:47:22.049]                       }
[17:47:22.049]                     }
[17:47:22.049]                     sendCondition <<- function(cond) NULL
[17:47:22.049]                   }
[17:47:22.049]                 })
[17:47:22.049]                 withCallingHandlers({
[17:47:22.049]                   NA
[17:47:22.049]                 }, immediateCondition = function(cond) {
[17:47:22.049]                   sendCondition <- ...future.makeSendCondition()
[17:47:22.049]                   sendCondition(cond)
[17:47:22.049]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:22.049]                   {
[17:47:22.049]                     inherits <- base::inherits
[17:47:22.049]                     invokeRestart <- base::invokeRestart
[17:47:22.049]                     is.null <- base::is.null
[17:47:22.049]                     muffled <- FALSE
[17:47:22.049]                     if (inherits(cond, "message")) {
[17:47:22.049]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:22.049]                       if (muffled) 
[17:47:22.049]                         invokeRestart("muffleMessage")
[17:47:22.049]                     }
[17:47:22.049]                     else if (inherits(cond, "warning")) {
[17:47:22.049]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:22.049]                       if (muffled) 
[17:47:22.049]                         invokeRestart("muffleWarning")
[17:47:22.049]                     }
[17:47:22.049]                     else if (inherits(cond, "condition")) {
[17:47:22.049]                       if (!is.null(pattern)) {
[17:47:22.049]                         computeRestarts <- base::computeRestarts
[17:47:22.049]                         grepl <- base::grepl
[17:47:22.049]                         restarts <- computeRestarts(cond)
[17:47:22.049]                         for (restart in restarts) {
[17:47:22.049]                           name <- restart$name
[17:47:22.049]                           if (is.null(name)) 
[17:47:22.049]                             next
[17:47:22.049]                           if (!grepl(pattern, name)) 
[17:47:22.049]                             next
[17:47:22.049]                           invokeRestart(restart)
[17:47:22.049]                           muffled <- TRUE
[17:47:22.049]                           break
[17:47:22.049]                         }
[17:47:22.049]                       }
[17:47:22.049]                     }
[17:47:22.049]                     invisible(muffled)
[17:47:22.049]                   }
[17:47:22.049]                   muffleCondition(cond)
[17:47:22.049]                 })
[17:47:22.049]             }))
[17:47:22.049]             future::FutureResult(value = ...future.value$value, 
[17:47:22.049]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:22.049]                   ...future.rng), globalenv = if (FALSE) 
[17:47:22.049]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:22.049]                     ...future.globalenv.names))
[17:47:22.049]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:22.049]         }, condition = base::local({
[17:47:22.049]             c <- base::c
[17:47:22.049]             inherits <- base::inherits
[17:47:22.049]             invokeRestart <- base::invokeRestart
[17:47:22.049]             length <- base::length
[17:47:22.049]             list <- base::list
[17:47:22.049]             seq.int <- base::seq.int
[17:47:22.049]             signalCondition <- base::signalCondition
[17:47:22.049]             sys.calls <- base::sys.calls
[17:47:22.049]             `[[` <- base::`[[`
[17:47:22.049]             `+` <- base::`+`
[17:47:22.049]             `<<-` <- base::`<<-`
[17:47:22.049]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:22.049]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:22.049]                   3L)]
[17:47:22.049]             }
[17:47:22.049]             function(cond) {
[17:47:22.049]                 is_error <- inherits(cond, "error")
[17:47:22.049]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:22.049]                   NULL)
[17:47:22.049]                 if (is_error) {
[17:47:22.049]                   sessionInformation <- function() {
[17:47:22.049]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:22.049]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:22.049]                       search = base::search(), system = base::Sys.info())
[17:47:22.049]                   }
[17:47:22.049]                   ...future.conditions[[length(...future.conditions) + 
[17:47:22.049]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:22.049]                     cond$call), session = sessionInformation(), 
[17:47:22.049]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:22.049]                   signalCondition(cond)
[17:47:22.049]                 }
[17:47:22.049]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:22.049]                 "immediateCondition"))) {
[17:47:22.049]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:22.049]                   ...future.conditions[[length(...future.conditions) + 
[17:47:22.049]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:22.049]                   if (TRUE && !signal) {
[17:47:22.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:22.049]                     {
[17:47:22.049]                       inherits <- base::inherits
[17:47:22.049]                       invokeRestart <- base::invokeRestart
[17:47:22.049]                       is.null <- base::is.null
[17:47:22.049]                       muffled <- FALSE
[17:47:22.049]                       if (inherits(cond, "message")) {
[17:47:22.049]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:22.049]                         if (muffled) 
[17:47:22.049]                           invokeRestart("muffleMessage")
[17:47:22.049]                       }
[17:47:22.049]                       else if (inherits(cond, "warning")) {
[17:47:22.049]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:22.049]                         if (muffled) 
[17:47:22.049]                           invokeRestart("muffleWarning")
[17:47:22.049]                       }
[17:47:22.049]                       else if (inherits(cond, "condition")) {
[17:47:22.049]                         if (!is.null(pattern)) {
[17:47:22.049]                           computeRestarts <- base::computeRestarts
[17:47:22.049]                           grepl <- base::grepl
[17:47:22.049]                           restarts <- computeRestarts(cond)
[17:47:22.049]                           for (restart in restarts) {
[17:47:22.049]                             name <- restart$name
[17:47:22.049]                             if (is.null(name)) 
[17:47:22.049]                               next
[17:47:22.049]                             if (!grepl(pattern, name)) 
[17:47:22.049]                               next
[17:47:22.049]                             invokeRestart(restart)
[17:47:22.049]                             muffled <- TRUE
[17:47:22.049]                             break
[17:47:22.049]                           }
[17:47:22.049]                         }
[17:47:22.049]                       }
[17:47:22.049]                       invisible(muffled)
[17:47:22.049]                     }
[17:47:22.049]                     muffleCondition(cond, pattern = "^muffle")
[17:47:22.049]                   }
[17:47:22.049]                 }
[17:47:22.049]                 else {
[17:47:22.049]                   if (TRUE) {
[17:47:22.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:22.049]                     {
[17:47:22.049]                       inherits <- base::inherits
[17:47:22.049]                       invokeRestart <- base::invokeRestart
[17:47:22.049]                       is.null <- base::is.null
[17:47:22.049]                       muffled <- FALSE
[17:47:22.049]                       if (inherits(cond, "message")) {
[17:47:22.049]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:22.049]                         if (muffled) 
[17:47:22.049]                           invokeRestart("muffleMessage")
[17:47:22.049]                       }
[17:47:22.049]                       else if (inherits(cond, "warning")) {
[17:47:22.049]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:22.049]                         if (muffled) 
[17:47:22.049]                           invokeRestart("muffleWarning")
[17:47:22.049]                       }
[17:47:22.049]                       else if (inherits(cond, "condition")) {
[17:47:22.049]                         if (!is.null(pattern)) {
[17:47:22.049]                           computeRestarts <- base::computeRestarts
[17:47:22.049]                           grepl <- base::grepl
[17:47:22.049]                           restarts <- computeRestarts(cond)
[17:47:22.049]                           for (restart in restarts) {
[17:47:22.049]                             name <- restart$name
[17:47:22.049]                             if (is.null(name)) 
[17:47:22.049]                               next
[17:47:22.049]                             if (!grepl(pattern, name)) 
[17:47:22.049]                               next
[17:47:22.049]                             invokeRestart(restart)
[17:47:22.049]                             muffled <- TRUE
[17:47:22.049]                             break
[17:47:22.049]                           }
[17:47:22.049]                         }
[17:47:22.049]                       }
[17:47:22.049]                       invisible(muffled)
[17:47:22.049]                     }
[17:47:22.049]                     muffleCondition(cond, pattern = "^muffle")
[17:47:22.049]                   }
[17:47:22.049]                 }
[17:47:22.049]             }
[17:47:22.049]         }))
[17:47:22.049]     }, error = function(ex) {
[17:47:22.049]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:22.049]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:22.049]                 ...future.rng), started = ...future.startTime, 
[17:47:22.049]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:22.049]             version = "1.8"), class = "FutureResult")
[17:47:22.049]     }, finally = {
[17:47:22.049]         if (!identical(...future.workdir, getwd())) 
[17:47:22.049]             setwd(...future.workdir)
[17:47:22.049]         {
[17:47:22.049]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:22.049]                 ...future.oldOptions$nwarnings <- NULL
[17:47:22.049]             }
[17:47:22.049]             base::options(...future.oldOptions)
[17:47:22.049]             if (.Platform$OS.type == "windows") {
[17:47:22.049]                 old_names <- names(...future.oldEnvVars)
[17:47:22.049]                 envs <- base::Sys.getenv()
[17:47:22.049]                 names <- names(envs)
[17:47:22.049]                 common <- intersect(names, old_names)
[17:47:22.049]                 added <- setdiff(names, old_names)
[17:47:22.049]                 removed <- setdiff(old_names, names)
[17:47:22.049]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:22.049]                   envs[common]]
[17:47:22.049]                 NAMES <- toupper(changed)
[17:47:22.049]                 args <- list()
[17:47:22.049]                 for (kk in seq_along(NAMES)) {
[17:47:22.049]                   name <- changed[[kk]]
[17:47:22.049]                   NAME <- NAMES[[kk]]
[17:47:22.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:22.049]                     next
[17:47:22.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:22.049]                 }
[17:47:22.049]                 NAMES <- toupper(added)
[17:47:22.049]                 for (kk in seq_along(NAMES)) {
[17:47:22.049]                   name <- added[[kk]]
[17:47:22.049]                   NAME <- NAMES[[kk]]
[17:47:22.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:22.049]                     next
[17:47:22.049]                   args[[name]] <- ""
[17:47:22.049]                 }
[17:47:22.049]                 NAMES <- toupper(removed)
[17:47:22.049]                 for (kk in seq_along(NAMES)) {
[17:47:22.049]                   name <- removed[[kk]]
[17:47:22.049]                   NAME <- NAMES[[kk]]
[17:47:22.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:22.049]                     next
[17:47:22.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:22.049]                 }
[17:47:22.049]                 if (length(args) > 0) 
[17:47:22.049]                   base::do.call(base::Sys.setenv, args = args)
[17:47:22.049]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:22.049]             }
[17:47:22.049]             else {
[17:47:22.049]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:22.049]             }
[17:47:22.049]             {
[17:47:22.049]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:22.049]                   0L) {
[17:47:22.049]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:22.049]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:22.049]                   base::options(opts)
[17:47:22.049]                 }
[17:47:22.049]                 {
[17:47:22.049]                   {
[17:47:22.049]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:22.049]                     NULL
[17:47:22.049]                   }
[17:47:22.049]                   options(future.plan = NULL)
[17:47:22.049]                   if (is.na(NA_character_)) 
[17:47:22.049]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:22.049]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:22.049]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:22.049]                     .init = FALSE)
[17:47:22.049]                 }
[17:47:22.049]             }
[17:47:22.049]         }
[17:47:22.049]     })
[17:47:22.049]     if (TRUE) {
[17:47:22.049]         base::sink(type = "output", split = FALSE)
[17:47:22.049]         if (TRUE) {
[17:47:22.049]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:22.049]         }
[17:47:22.049]         else {
[17:47:22.049]             ...future.result["stdout"] <- base::list(NULL)
[17:47:22.049]         }
[17:47:22.049]         base::close(...future.stdout)
[17:47:22.049]         ...future.stdout <- NULL
[17:47:22.049]     }
[17:47:22.049]     ...future.result$conditions <- ...future.conditions
[17:47:22.049]     ...future.result$finished <- base::Sys.time()
[17:47:22.049]     ...future.result
[17:47:22.049] }
[17:47:22.101] MultisessionFuture started
[17:47:22.101] result() for ClusterFuture ...
[17:47:22.102] receiveMessageFromWorker() for ClusterFuture ...
[17:47:22.102] - Validating connection of MultisessionFuture
[17:47:22.134] - received message: FutureResult
[17:47:22.134] - Received FutureResult
[17:47:22.135] - Erased future from FutureRegistry
[17:47:22.135] result() for ClusterFuture ...
[17:47:22.135] - result already collected: FutureResult
[17:47:22.135] result() for ClusterFuture ... done
[17:47:22.135] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:22.135] result() for ClusterFuture ... done
[17:47:22.135] result() for ClusterFuture ...
[17:47:22.135] - result already collected: FutureResult
[17:47:22.135] result() for ClusterFuture ... done
[17:47:22.135] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:22.136] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[17:47:22.136] getGlobalsAndPackages() ...
[17:47:22.136] Searching for globals...
[17:47:22.136] 
[17:47:22.136] Searching for globals ... DONE
[17:47:22.136] - globals: [0] <none>
[17:47:22.137] getGlobalsAndPackages() ... DONE
[17:47:22.137] run() for ‘Future’ ...
[17:47:22.137] - state: ‘created’
[17:47:22.137] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:22.147] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:22.148] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:22.148]   - Field: ‘node’
[17:47:22.148]   - Field: ‘label’
[17:47:22.148]   - Field: ‘local’
[17:47:22.148]   - Field: ‘owner’
[17:47:22.148]   - Field: ‘envir’
[17:47:22.148]   - Field: ‘workers’
[17:47:22.148]   - Field: ‘packages’
[17:47:22.148]   - Field: ‘gc’
[17:47:22.148]   - Field: ‘conditions’
[17:47:22.149]   - Field: ‘persistent’
[17:47:22.149]   - Field: ‘expr’
[17:47:22.149]   - Field: ‘uuid’
[17:47:22.149]   - Field: ‘seed’
[17:47:22.149]   - Field: ‘version’
[17:47:22.149]   - Field: ‘result’
[17:47:22.149]   - Field: ‘asynchronous’
[17:47:22.149]   - Field: ‘calls’
[17:47:22.149]   - Field: ‘globals’
[17:47:22.149]   - Field: ‘stdout’
[17:47:22.149]   - Field: ‘earlySignal’
[17:47:22.149]   - Field: ‘lazy’
[17:47:22.150]   - Field: ‘state’
[17:47:22.150] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:22.150] - Launch lazy future ...
[17:47:22.150] Packages needed by the future expression (n = 0): <none>
[17:47:22.150] Packages needed by future strategies (n = 0): <none>
[17:47:22.151] {
[17:47:22.151]     {
[17:47:22.151]         {
[17:47:22.151]             ...future.startTime <- base::Sys.time()
[17:47:22.151]             {
[17:47:22.151]                 {
[17:47:22.151]                   {
[17:47:22.151]                     {
[17:47:22.151]                       base::local({
[17:47:22.151]                         has_future <- base::requireNamespace("future", 
[17:47:22.151]                           quietly = TRUE)
[17:47:22.151]                         if (has_future) {
[17:47:22.151]                           ns <- base::getNamespace("future")
[17:47:22.151]                           version <- ns[[".package"]][["version"]]
[17:47:22.151]                           if (is.null(version)) 
[17:47:22.151]                             version <- utils::packageVersion("future")
[17:47:22.151]                         }
[17:47:22.151]                         else {
[17:47:22.151]                           version <- NULL
[17:47:22.151]                         }
[17:47:22.151]                         if (!has_future || version < "1.8.0") {
[17:47:22.151]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:22.151]                             "", base::R.version$version.string), 
[17:47:22.151]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:22.151]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:22.151]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:22.151]                               "release", "version")], collapse = " "), 
[17:47:22.151]                             hostname = base::Sys.info()[["nodename"]])
[17:47:22.151]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:22.151]                             info)
[17:47:22.151]                           info <- base::paste(info, collapse = "; ")
[17:47:22.151]                           if (!has_future) {
[17:47:22.151]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:22.151]                               info)
[17:47:22.151]                           }
[17:47:22.151]                           else {
[17:47:22.151]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:22.151]                               info, version)
[17:47:22.151]                           }
[17:47:22.151]                           base::stop(msg)
[17:47:22.151]                         }
[17:47:22.151]                       })
[17:47:22.151]                     }
[17:47:22.151]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:22.151]                     base::options(mc.cores = 1L)
[17:47:22.151]                   }
[17:47:22.151]                   ...future.strategy.old <- future::plan("list")
[17:47:22.151]                   options(future.plan = NULL)
[17:47:22.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:22.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:22.151]                 }
[17:47:22.151]                 ...future.workdir <- getwd()
[17:47:22.151]             }
[17:47:22.151]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:22.151]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:22.151]         }
[17:47:22.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:22.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:22.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:22.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:22.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:22.151]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:22.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:22.151]             base::names(...future.oldOptions))
[17:47:22.151]     }
[17:47:22.151]     if (FALSE) {
[17:47:22.151]     }
[17:47:22.151]     else {
[17:47:22.151]         if (TRUE) {
[17:47:22.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:22.151]                 open = "w")
[17:47:22.151]         }
[17:47:22.151]         else {
[17:47:22.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:22.151]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:22.151]         }
[17:47:22.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:22.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:22.151]             base::sink(type = "output", split = FALSE)
[17:47:22.151]             base::close(...future.stdout)
[17:47:22.151]         }, add = TRUE)
[17:47:22.151]     }
[17:47:22.151]     ...future.frame <- base::sys.nframe()
[17:47:22.151]     ...future.conditions <- base::list()
[17:47:22.151]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:22.151]     if (FALSE) {
[17:47:22.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:22.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:22.151]     }
[17:47:22.151]     ...future.result <- base::tryCatch({
[17:47:22.151]         base::withCallingHandlers({
[17:47:22.151]             ...future.value <- base::withVisible(base::local({
[17:47:22.151]                 ...future.makeSendCondition <- base::local({
[17:47:22.151]                   sendCondition <- NULL
[17:47:22.151]                   function(frame = 1L) {
[17:47:22.151]                     if (is.function(sendCondition)) 
[17:47:22.151]                       return(sendCondition)
[17:47:22.151]                     ns <- getNamespace("parallel")
[17:47:22.151]                     if (exists("sendData", mode = "function", 
[17:47:22.151]                       envir = ns)) {
[17:47:22.151]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:22.151]                         envir = ns)
[17:47:22.151]                       envir <- sys.frame(frame)
[17:47:22.151]                       master <- NULL
[17:47:22.151]                       while (!identical(envir, .GlobalEnv) && 
[17:47:22.151]                         !identical(envir, emptyenv())) {
[17:47:22.151]                         if (exists("master", mode = "list", envir = envir, 
[17:47:22.151]                           inherits = FALSE)) {
[17:47:22.151]                           master <- get("master", mode = "list", 
[17:47:22.151]                             envir = envir, inherits = FALSE)
[17:47:22.151]                           if (inherits(master, c("SOCKnode", 
[17:47:22.151]                             "SOCK0node"))) {
[17:47:22.151]                             sendCondition <<- function(cond) {
[17:47:22.151]                               data <- list(type = "VALUE", value = cond, 
[17:47:22.151]                                 success = TRUE)
[17:47:22.151]                               parallel_sendData(master, data)
[17:47:22.151]                             }
[17:47:22.151]                             return(sendCondition)
[17:47:22.151]                           }
[17:47:22.151]                         }
[17:47:22.151]                         frame <- frame + 1L
[17:47:22.151]                         envir <- sys.frame(frame)
[17:47:22.151]                       }
[17:47:22.151]                     }
[17:47:22.151]                     sendCondition <<- function(cond) NULL
[17:47:22.151]                   }
[17:47:22.151]                 })
[17:47:22.151]                 withCallingHandlers({
[17:47:22.151]                   1L
[17:47:22.151]                 }, immediateCondition = function(cond) {
[17:47:22.151]                   sendCondition <- ...future.makeSendCondition()
[17:47:22.151]                   sendCondition(cond)
[17:47:22.151]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:22.151]                   {
[17:47:22.151]                     inherits <- base::inherits
[17:47:22.151]                     invokeRestart <- base::invokeRestart
[17:47:22.151]                     is.null <- base::is.null
[17:47:22.151]                     muffled <- FALSE
[17:47:22.151]                     if (inherits(cond, "message")) {
[17:47:22.151]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:22.151]                       if (muffled) 
[17:47:22.151]                         invokeRestart("muffleMessage")
[17:47:22.151]                     }
[17:47:22.151]                     else if (inherits(cond, "warning")) {
[17:47:22.151]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:22.151]                       if (muffled) 
[17:47:22.151]                         invokeRestart("muffleWarning")
[17:47:22.151]                     }
[17:47:22.151]                     else if (inherits(cond, "condition")) {
[17:47:22.151]                       if (!is.null(pattern)) {
[17:47:22.151]                         computeRestarts <- base::computeRestarts
[17:47:22.151]                         grepl <- base::grepl
[17:47:22.151]                         restarts <- computeRestarts(cond)
[17:47:22.151]                         for (restart in restarts) {
[17:47:22.151]                           name <- restart$name
[17:47:22.151]                           if (is.null(name)) 
[17:47:22.151]                             next
[17:47:22.151]                           if (!grepl(pattern, name)) 
[17:47:22.151]                             next
[17:47:22.151]                           invokeRestart(restart)
[17:47:22.151]                           muffled <- TRUE
[17:47:22.151]                           break
[17:47:22.151]                         }
[17:47:22.151]                       }
[17:47:22.151]                     }
[17:47:22.151]                     invisible(muffled)
[17:47:22.151]                   }
[17:47:22.151]                   muffleCondition(cond)
[17:47:22.151]                 })
[17:47:22.151]             }))
[17:47:22.151]             future::FutureResult(value = ...future.value$value, 
[17:47:22.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:22.151]                   ...future.rng), globalenv = if (FALSE) 
[17:47:22.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:22.151]                     ...future.globalenv.names))
[17:47:22.151]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:22.151]         }, condition = base::local({
[17:47:22.151]             c <- base::c
[17:47:22.151]             inherits <- base::inherits
[17:47:22.151]             invokeRestart <- base::invokeRestart
[17:47:22.151]             length <- base::length
[17:47:22.151]             list <- base::list
[17:47:22.151]             seq.int <- base::seq.int
[17:47:22.151]             signalCondition <- base::signalCondition
[17:47:22.151]             sys.calls <- base::sys.calls
[17:47:22.151]             `[[` <- base::`[[`
[17:47:22.151]             `+` <- base::`+`
[17:47:22.151]             `<<-` <- base::`<<-`
[17:47:22.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:22.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:22.151]                   3L)]
[17:47:22.151]             }
[17:47:22.151]             function(cond) {
[17:47:22.151]                 is_error <- inherits(cond, "error")
[17:47:22.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:22.151]                   NULL)
[17:47:22.151]                 if (is_error) {
[17:47:22.151]                   sessionInformation <- function() {
[17:47:22.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:22.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:22.151]                       search = base::search(), system = base::Sys.info())
[17:47:22.151]                   }
[17:47:22.151]                   ...future.conditions[[length(...future.conditions) + 
[17:47:22.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:22.151]                     cond$call), session = sessionInformation(), 
[17:47:22.151]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:22.151]                   signalCondition(cond)
[17:47:22.151]                 }
[17:47:22.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:22.151]                 "immediateCondition"))) {
[17:47:22.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:22.151]                   ...future.conditions[[length(...future.conditions) + 
[17:47:22.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:22.151]                   if (TRUE && !signal) {
[17:47:22.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:22.151]                     {
[17:47:22.151]                       inherits <- base::inherits
[17:47:22.151]                       invokeRestart <- base::invokeRestart
[17:47:22.151]                       is.null <- base::is.null
[17:47:22.151]                       muffled <- FALSE
[17:47:22.151]                       if (inherits(cond, "message")) {
[17:47:22.151]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:22.151]                         if (muffled) 
[17:47:22.151]                           invokeRestart("muffleMessage")
[17:47:22.151]                       }
[17:47:22.151]                       else if (inherits(cond, "warning")) {
[17:47:22.151]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:22.151]                         if (muffled) 
[17:47:22.151]                           invokeRestart("muffleWarning")
[17:47:22.151]                       }
[17:47:22.151]                       else if (inherits(cond, "condition")) {
[17:47:22.151]                         if (!is.null(pattern)) {
[17:47:22.151]                           computeRestarts <- base::computeRestarts
[17:47:22.151]                           grepl <- base::grepl
[17:47:22.151]                           restarts <- computeRestarts(cond)
[17:47:22.151]                           for (restart in restarts) {
[17:47:22.151]                             name <- restart$name
[17:47:22.151]                             if (is.null(name)) 
[17:47:22.151]                               next
[17:47:22.151]                             if (!grepl(pattern, name)) 
[17:47:22.151]                               next
[17:47:22.151]                             invokeRestart(restart)
[17:47:22.151]                             muffled <- TRUE
[17:47:22.151]                             break
[17:47:22.151]                           }
[17:47:22.151]                         }
[17:47:22.151]                       }
[17:47:22.151]                       invisible(muffled)
[17:47:22.151]                     }
[17:47:22.151]                     muffleCondition(cond, pattern = "^muffle")
[17:47:22.151]                   }
[17:47:22.151]                 }
[17:47:22.151]                 else {
[17:47:22.151]                   if (TRUE) {
[17:47:22.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:22.151]                     {
[17:47:22.151]                       inherits <- base::inherits
[17:47:22.151]                       invokeRestart <- base::invokeRestart
[17:47:22.151]                       is.null <- base::is.null
[17:47:22.151]                       muffled <- FALSE
[17:47:22.151]                       if (inherits(cond, "message")) {
[17:47:22.151]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:22.151]                         if (muffled) 
[17:47:22.151]                           invokeRestart("muffleMessage")
[17:47:22.151]                       }
[17:47:22.151]                       else if (inherits(cond, "warning")) {
[17:47:22.151]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:22.151]                         if (muffled) 
[17:47:22.151]                           invokeRestart("muffleWarning")
[17:47:22.151]                       }
[17:47:22.151]                       else if (inherits(cond, "condition")) {
[17:47:22.151]                         if (!is.null(pattern)) {
[17:47:22.151]                           computeRestarts <- base::computeRestarts
[17:47:22.151]                           grepl <- base::grepl
[17:47:22.151]                           restarts <- computeRestarts(cond)
[17:47:22.151]                           for (restart in restarts) {
[17:47:22.151]                             name <- restart$name
[17:47:22.151]                             if (is.null(name)) 
[17:47:22.151]                               next
[17:47:22.151]                             if (!grepl(pattern, name)) 
[17:47:22.151]                               next
[17:47:22.151]                             invokeRestart(restart)
[17:47:22.151]                             muffled <- TRUE
[17:47:22.151]                             break
[17:47:22.151]                           }
[17:47:22.151]                         }
[17:47:22.151]                       }
[17:47:22.151]                       invisible(muffled)
[17:47:22.151]                     }
[17:47:22.151]                     muffleCondition(cond, pattern = "^muffle")
[17:47:22.151]                   }
[17:47:22.151]                 }
[17:47:22.151]             }
[17:47:22.151]         }))
[17:47:22.151]     }, error = function(ex) {
[17:47:22.151]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:22.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:22.151]                 ...future.rng), started = ...future.startTime, 
[17:47:22.151]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:22.151]             version = "1.8"), class = "FutureResult")
[17:47:22.151]     }, finally = {
[17:47:22.151]         if (!identical(...future.workdir, getwd())) 
[17:47:22.151]             setwd(...future.workdir)
[17:47:22.151]         {
[17:47:22.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:22.151]                 ...future.oldOptions$nwarnings <- NULL
[17:47:22.151]             }
[17:47:22.151]             base::options(...future.oldOptions)
[17:47:22.151]             if (.Platform$OS.type == "windows") {
[17:47:22.151]                 old_names <- names(...future.oldEnvVars)
[17:47:22.151]                 envs <- base::Sys.getenv()
[17:47:22.151]                 names <- names(envs)
[17:47:22.151]                 common <- intersect(names, old_names)
[17:47:22.151]                 added <- setdiff(names, old_names)
[17:47:22.151]                 removed <- setdiff(old_names, names)
[17:47:22.151]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:22.151]                   envs[common]]
[17:47:22.151]                 NAMES <- toupper(changed)
[17:47:22.151]                 args <- list()
[17:47:22.151]                 for (kk in seq_along(NAMES)) {
[17:47:22.151]                   name <- changed[[kk]]
[17:47:22.151]                   NAME <- NAMES[[kk]]
[17:47:22.151]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:22.151]                     next
[17:47:22.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:22.151]                 }
[17:47:22.151]                 NAMES <- toupper(added)
[17:47:22.151]                 for (kk in seq_along(NAMES)) {
[17:47:22.151]                   name <- added[[kk]]
[17:47:22.151]                   NAME <- NAMES[[kk]]
[17:47:22.151]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:22.151]                     next
[17:47:22.151]                   args[[name]] <- ""
[17:47:22.151]                 }
[17:47:22.151]                 NAMES <- toupper(removed)
[17:47:22.151]                 for (kk in seq_along(NAMES)) {
[17:47:22.151]                   name <- removed[[kk]]
[17:47:22.151]                   NAME <- NAMES[[kk]]
[17:47:22.151]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:22.151]                     next
[17:47:22.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:22.151]                 }
[17:47:22.151]                 if (length(args) > 0) 
[17:47:22.151]                   base::do.call(base::Sys.setenv, args = args)
[17:47:22.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:22.151]             }
[17:47:22.151]             else {
[17:47:22.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:22.151]             }
[17:47:22.151]             {
[17:47:22.151]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:22.151]                   0L) {
[17:47:22.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:22.151]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:22.151]                   base::options(opts)
[17:47:22.151]                 }
[17:47:22.151]                 {
[17:47:22.151]                   {
[17:47:22.151]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:22.151]                     NULL
[17:47:22.151]                   }
[17:47:22.151]                   options(future.plan = NULL)
[17:47:22.151]                   if (is.na(NA_character_)) 
[17:47:22.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:22.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:22.151]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:22.151]                     .init = FALSE)
[17:47:22.151]                 }
[17:47:22.151]             }
[17:47:22.151]         }
[17:47:22.151]     })
[17:47:22.151]     if (TRUE) {
[17:47:22.151]         base::sink(type = "output", split = FALSE)
[17:47:22.151]         if (TRUE) {
[17:47:22.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:22.151]         }
[17:47:22.151]         else {
[17:47:22.151]             ...future.result["stdout"] <- base::list(NULL)
[17:47:22.151]         }
[17:47:22.151]         base::close(...future.stdout)
[17:47:22.151]         ...future.stdout <- NULL
[17:47:22.151]     }
[17:47:22.151]     ...future.result$conditions <- ...future.conditions
[17:47:22.151]     ...future.result$finished <- base::Sys.time()
[17:47:22.151]     ...future.result
[17:47:22.151] }
[17:47:22.154] MultisessionFuture started
[17:47:22.154] - Launch lazy future ... done
[17:47:22.154] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[17:47:22.154] plan(): Setting new future strategy stack:
[17:47:22.154] List of future strategies:
[17:47:22.154] 1. sequential:
[17:47:22.154]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:22.154]    - tweaked: FALSE
[17:47:22.154]    - call: plan(sequential)
[17:47:22.155] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[17:47:22.156] plan(): Setting new future strategy stack:
[17:47:22.156] List of future strategies:
[17:47:22.156] 1. FutureStrategy:
[17:47:22.156]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:22.156]    - tweaked: FALSE
[17:47:22.156]    - call: future::plan(oplan)
[17:47:22.156] plan(): nbrOfWorkers() = 1
> 
