
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:37.708] plan(): Setting new future strategy stack:
[18:03:37.709] List of future strategies:
[18:03:37.709] 1. sequential:
[18:03:37.709]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.709]    - tweaked: FALSE
[18:03:37.709]    - call: future::plan("sequential")
[18:03:37.732] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[18:03:37.832] plan(): Setting new future strategy stack:
[18:03:37.832] List of future strategies:
[18:03:37.832] 1. sequential:
[18:03:37.832]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.832]    - tweaked: FALSE
[18:03:37.832]    - call: plan(strategy, substitute = FALSE)
[18:03:37.857] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x59a4af829bb0>
Arguments '...' exists: TRUE
[18:03:37.861] getGlobalsAndPackages() ...
[18:03:37.861] Searching for globals...
[18:03:37.876] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[18:03:37.877] Searching for globals ... DONE
[18:03:37.877] Resolving globals: FALSE
[18:03:37.877] Tweak future expression to call with '...' arguments ...
[18:03:37.877] {
[18:03:37.877]     do.call(function(...) {
[18:03:37.877]         sum(x, ...)
[18:03:37.877]     }, args = future.call.arguments)
[18:03:37.877] }
[18:03:37.878] Tweak future expression to call with '...' arguments ... DONE
[18:03:37.880] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:37.881] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[18:03:37.881] - globals: [2] ‘x’, ‘future.call.arguments’
[18:03:37.882] 
[18:03:37.882] getGlobalsAndPackages() ... DONE
[18:03:37.884] run() for ‘Future’ ...
[18:03:37.884] - state: ‘created’
[18:03:37.884] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:37.885] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:37.885] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:37.886]   - Field: ‘label’
[18:03:37.886]   - Field: ‘local’
[18:03:37.886]   - Field: ‘owner’
[18:03:37.886]   - Field: ‘envir’
[18:03:37.886]   - Field: ‘packages’
[18:03:37.887]   - Field: ‘gc’
[18:03:37.887]   - Field: ‘conditions’
[18:03:37.887]   - Field: ‘expr’
[18:03:37.887]   - Field: ‘uuid’
[18:03:37.887]   - Field: ‘seed’
[18:03:37.888]   - Field: ‘version’
[18:03:37.888]   - Field: ‘result’
[18:03:37.888]   - Field: ‘asynchronous’
[18:03:37.888]   - Field: ‘calls’
[18:03:37.888]   - Field: ‘globals’
[18:03:37.889]   - Field: ‘stdout’
[18:03:37.889]   - Field: ‘earlySignal’
[18:03:37.889]   - Field: ‘lazy’
[18:03:37.889]   - Field: ‘state’
[18:03:37.889] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:37.890] - Launch lazy future ...
[18:03:37.891] Packages needed by the future expression (n = 0): <none>
[18:03:37.891] Packages needed by future strategies (n = 0): <none>
[18:03:37.893] {
[18:03:37.893]     {
[18:03:37.893]         {
[18:03:37.893]             ...future.startTime <- base::Sys.time()
[18:03:37.893]             {
[18:03:37.893]                 {
[18:03:37.893]                   {
[18:03:37.893]                     base::local({
[18:03:37.893]                       has_future <- base::requireNamespace("future", 
[18:03:37.893]                         quietly = TRUE)
[18:03:37.893]                       if (has_future) {
[18:03:37.893]                         ns <- base::getNamespace("future")
[18:03:37.893]                         version <- ns[[".package"]][["version"]]
[18:03:37.893]                         if (is.null(version)) 
[18:03:37.893]                           version <- utils::packageVersion("future")
[18:03:37.893]                       }
[18:03:37.893]                       else {
[18:03:37.893]                         version <- NULL
[18:03:37.893]                       }
[18:03:37.893]                       if (!has_future || version < "1.8.0") {
[18:03:37.893]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:37.893]                           "", base::R.version$version.string), 
[18:03:37.893]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:37.893]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:37.893]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:37.893]                             "release", "version")], collapse = " "), 
[18:03:37.893]                           hostname = base::Sys.info()[["nodename"]])
[18:03:37.893]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:37.893]                           info)
[18:03:37.893]                         info <- base::paste(info, collapse = "; ")
[18:03:37.893]                         if (!has_future) {
[18:03:37.893]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:37.893]                             info)
[18:03:37.893]                         }
[18:03:37.893]                         else {
[18:03:37.893]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:37.893]                             info, version)
[18:03:37.893]                         }
[18:03:37.893]                         base::stop(msg)
[18:03:37.893]                       }
[18:03:37.893]                     })
[18:03:37.893]                   }
[18:03:37.893]                   ...future.strategy.old <- future::plan("list")
[18:03:37.893]                   options(future.plan = NULL)
[18:03:37.893]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.893]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:37.893]                 }
[18:03:37.893]                 ...future.workdir <- getwd()
[18:03:37.893]             }
[18:03:37.893]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:37.893]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:37.893]         }
[18:03:37.893]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:37.893]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:37.893]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:37.893]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:37.893]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:37.893]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:37.893]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:37.893]             base::names(...future.oldOptions))
[18:03:37.893]     }
[18:03:37.893]     if (FALSE) {
[18:03:37.893]     }
[18:03:37.893]     else {
[18:03:37.893]         if (TRUE) {
[18:03:37.893]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:37.893]                 open = "w")
[18:03:37.893]         }
[18:03:37.893]         else {
[18:03:37.893]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:37.893]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:37.893]         }
[18:03:37.893]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:37.893]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:37.893]             base::sink(type = "output", split = FALSE)
[18:03:37.893]             base::close(...future.stdout)
[18:03:37.893]         }, add = TRUE)
[18:03:37.893]     }
[18:03:37.893]     ...future.frame <- base::sys.nframe()
[18:03:37.893]     ...future.conditions <- base::list()
[18:03:37.893]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:37.893]     if (FALSE) {
[18:03:37.893]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:37.893]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:37.893]     }
[18:03:37.893]     ...future.result <- base::tryCatch({
[18:03:37.893]         base::withCallingHandlers({
[18:03:37.893]             ...future.value <- base::withVisible(base::local({
[18:03:37.893]                 do.call(function(...) {
[18:03:37.893]                   sum(x, ...)
[18:03:37.893]                 }, args = future.call.arguments)
[18:03:37.893]             }))
[18:03:37.893]             future::FutureResult(value = ...future.value$value, 
[18:03:37.893]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.893]                   ...future.rng), globalenv = if (FALSE) 
[18:03:37.893]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:37.893]                     ...future.globalenv.names))
[18:03:37.893]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:37.893]         }, condition = base::local({
[18:03:37.893]             c <- base::c
[18:03:37.893]             inherits <- base::inherits
[18:03:37.893]             invokeRestart <- base::invokeRestart
[18:03:37.893]             length <- base::length
[18:03:37.893]             list <- base::list
[18:03:37.893]             seq.int <- base::seq.int
[18:03:37.893]             signalCondition <- base::signalCondition
[18:03:37.893]             sys.calls <- base::sys.calls
[18:03:37.893]             `[[` <- base::`[[`
[18:03:37.893]             `+` <- base::`+`
[18:03:37.893]             `<<-` <- base::`<<-`
[18:03:37.893]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:37.893]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:37.893]                   3L)]
[18:03:37.893]             }
[18:03:37.893]             function(cond) {
[18:03:37.893]                 is_error <- inherits(cond, "error")
[18:03:37.893]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:37.893]                   NULL)
[18:03:37.893]                 if (is_error) {
[18:03:37.893]                   sessionInformation <- function() {
[18:03:37.893]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:37.893]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:37.893]                       search = base::search(), system = base::Sys.info())
[18:03:37.893]                   }
[18:03:37.893]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.893]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:37.893]                     cond$call), session = sessionInformation(), 
[18:03:37.893]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:37.893]                   signalCondition(cond)
[18:03:37.893]                 }
[18:03:37.893]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:37.893]                 "immediateCondition"))) {
[18:03:37.893]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:37.893]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.893]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:37.893]                   if (TRUE && !signal) {
[18:03:37.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.893]                     {
[18:03:37.893]                       inherits <- base::inherits
[18:03:37.893]                       invokeRestart <- base::invokeRestart
[18:03:37.893]                       is.null <- base::is.null
[18:03:37.893]                       muffled <- FALSE
[18:03:37.893]                       if (inherits(cond, "message")) {
[18:03:37.893]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.893]                         if (muffled) 
[18:03:37.893]                           invokeRestart("muffleMessage")
[18:03:37.893]                       }
[18:03:37.893]                       else if (inherits(cond, "warning")) {
[18:03:37.893]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.893]                         if (muffled) 
[18:03:37.893]                           invokeRestart("muffleWarning")
[18:03:37.893]                       }
[18:03:37.893]                       else if (inherits(cond, "condition")) {
[18:03:37.893]                         if (!is.null(pattern)) {
[18:03:37.893]                           computeRestarts <- base::computeRestarts
[18:03:37.893]                           grepl <- base::grepl
[18:03:37.893]                           restarts <- computeRestarts(cond)
[18:03:37.893]                           for (restart in restarts) {
[18:03:37.893]                             name <- restart$name
[18:03:37.893]                             if (is.null(name)) 
[18:03:37.893]                               next
[18:03:37.893]                             if (!grepl(pattern, name)) 
[18:03:37.893]                               next
[18:03:37.893]                             invokeRestart(restart)
[18:03:37.893]                             muffled <- TRUE
[18:03:37.893]                             break
[18:03:37.893]                           }
[18:03:37.893]                         }
[18:03:37.893]                       }
[18:03:37.893]                       invisible(muffled)
[18:03:37.893]                     }
[18:03:37.893]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.893]                   }
[18:03:37.893]                 }
[18:03:37.893]                 else {
[18:03:37.893]                   if (TRUE) {
[18:03:37.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.893]                     {
[18:03:37.893]                       inherits <- base::inherits
[18:03:37.893]                       invokeRestart <- base::invokeRestart
[18:03:37.893]                       is.null <- base::is.null
[18:03:37.893]                       muffled <- FALSE
[18:03:37.893]                       if (inherits(cond, "message")) {
[18:03:37.893]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.893]                         if (muffled) 
[18:03:37.893]                           invokeRestart("muffleMessage")
[18:03:37.893]                       }
[18:03:37.893]                       else if (inherits(cond, "warning")) {
[18:03:37.893]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.893]                         if (muffled) 
[18:03:37.893]                           invokeRestart("muffleWarning")
[18:03:37.893]                       }
[18:03:37.893]                       else if (inherits(cond, "condition")) {
[18:03:37.893]                         if (!is.null(pattern)) {
[18:03:37.893]                           computeRestarts <- base::computeRestarts
[18:03:37.893]                           grepl <- base::grepl
[18:03:37.893]                           restarts <- computeRestarts(cond)
[18:03:37.893]                           for (restart in restarts) {
[18:03:37.893]                             name <- restart$name
[18:03:37.893]                             if (is.null(name)) 
[18:03:37.893]                               next
[18:03:37.893]                             if (!grepl(pattern, name)) 
[18:03:37.893]                               next
[18:03:37.893]                             invokeRestart(restart)
[18:03:37.893]                             muffled <- TRUE
[18:03:37.893]                             break
[18:03:37.893]                           }
[18:03:37.893]                         }
[18:03:37.893]                       }
[18:03:37.893]                       invisible(muffled)
[18:03:37.893]                     }
[18:03:37.893]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.893]                   }
[18:03:37.893]                 }
[18:03:37.893]             }
[18:03:37.893]         }))
[18:03:37.893]     }, error = function(ex) {
[18:03:37.893]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:37.893]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.893]                 ...future.rng), started = ...future.startTime, 
[18:03:37.893]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:37.893]             version = "1.8"), class = "FutureResult")
[18:03:37.893]     }, finally = {
[18:03:37.893]         if (!identical(...future.workdir, getwd())) 
[18:03:37.893]             setwd(...future.workdir)
[18:03:37.893]         {
[18:03:37.893]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:37.893]                 ...future.oldOptions$nwarnings <- NULL
[18:03:37.893]             }
[18:03:37.893]             base::options(...future.oldOptions)
[18:03:37.893]             if (.Platform$OS.type == "windows") {
[18:03:37.893]                 old_names <- names(...future.oldEnvVars)
[18:03:37.893]                 envs <- base::Sys.getenv()
[18:03:37.893]                 names <- names(envs)
[18:03:37.893]                 common <- intersect(names, old_names)
[18:03:37.893]                 added <- setdiff(names, old_names)
[18:03:37.893]                 removed <- setdiff(old_names, names)
[18:03:37.893]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:37.893]                   envs[common]]
[18:03:37.893]                 NAMES <- toupper(changed)
[18:03:37.893]                 args <- list()
[18:03:37.893]                 for (kk in seq_along(NAMES)) {
[18:03:37.893]                   name <- changed[[kk]]
[18:03:37.893]                   NAME <- NAMES[[kk]]
[18:03:37.893]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.893]                     next
[18:03:37.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.893]                 }
[18:03:37.893]                 NAMES <- toupper(added)
[18:03:37.893]                 for (kk in seq_along(NAMES)) {
[18:03:37.893]                   name <- added[[kk]]
[18:03:37.893]                   NAME <- NAMES[[kk]]
[18:03:37.893]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.893]                     next
[18:03:37.893]                   args[[name]] <- ""
[18:03:37.893]                 }
[18:03:37.893]                 NAMES <- toupper(removed)
[18:03:37.893]                 for (kk in seq_along(NAMES)) {
[18:03:37.893]                   name <- removed[[kk]]
[18:03:37.893]                   NAME <- NAMES[[kk]]
[18:03:37.893]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.893]                     next
[18:03:37.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.893]                 }
[18:03:37.893]                 if (length(args) > 0) 
[18:03:37.893]                   base::do.call(base::Sys.setenv, args = args)
[18:03:37.893]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:37.893]             }
[18:03:37.893]             else {
[18:03:37.893]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:37.893]             }
[18:03:37.893]             {
[18:03:37.893]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:37.893]                   0L) {
[18:03:37.893]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:37.893]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:37.893]                   base::options(opts)
[18:03:37.893]                 }
[18:03:37.893]                 {
[18:03:37.893]                   {
[18:03:37.893]                     NULL
[18:03:37.893]                     RNGkind("Mersenne-Twister")
[18:03:37.893]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:37.893]                       inherits = FALSE)
[18:03:37.893]                   }
[18:03:37.893]                   options(future.plan = NULL)
[18:03:37.893]                   if (is.na(NA_character_)) 
[18:03:37.893]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.893]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:37.893]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:37.893]                     .init = FALSE)
[18:03:37.893]                 }
[18:03:37.893]             }
[18:03:37.893]         }
[18:03:37.893]     })
[18:03:37.893]     if (TRUE) {
[18:03:37.893]         base::sink(type = "output", split = FALSE)
[18:03:37.893]         if (TRUE) {
[18:03:37.893]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:37.893]         }
[18:03:37.893]         else {
[18:03:37.893]             ...future.result["stdout"] <- base::list(NULL)
[18:03:37.893]         }
[18:03:37.893]         base::close(...future.stdout)
[18:03:37.893]         ...future.stdout <- NULL
[18:03:37.893]     }
[18:03:37.893]     ...future.result$conditions <- ...future.conditions
[18:03:37.893]     ...future.result$finished <- base::Sys.time()
[18:03:37.893]     ...future.result
[18:03:37.893] }
[18:03:37.896] assign_globals() ...
[18:03:37.897] List of 2
[18:03:37.897]  $ x                    : int [1:2] 1 2
[18:03:37.897]  $ future.call.arguments:List of 1
[18:03:37.897]   ..$ : num 3
[18:03:37.897]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:03:37.897]  - attr(*, "where")=List of 2
[18:03:37.897]   ..$ x                    :<environment: R_EmptyEnv> 
[18:03:37.897]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[18:03:37.897]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:37.897]  - attr(*, "resolved")= logi FALSE
[18:03:37.897]  - attr(*, "total_size")= num 112
[18:03:37.897]  - attr(*, "already-done")= logi TRUE
[18:03:37.909] - copied ‘x’ to environment
[18:03:37.909] - copied ‘future.call.arguments’ to environment
[18:03:37.909] assign_globals() ... done
[18:03:37.910] plan(): Setting new future strategy stack:
[18:03:37.910] List of future strategies:
[18:03:37.910] 1. sequential:
[18:03:37.910]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.910]    - tweaked: FALSE
[18:03:37.910]    - call: NULL
[18:03:37.911] plan(): nbrOfWorkers() = 1
[18:03:37.913] plan(): Setting new future strategy stack:
[18:03:37.913] List of future strategies:
[18:03:37.913] 1. sequential:
[18:03:37.913]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.913]    - tweaked: FALSE
[18:03:37.913]    - call: plan(strategy, substitute = FALSE)
[18:03:37.914] plan(): nbrOfWorkers() = 1
[18:03:37.915] SequentialFuture started (and completed)
[18:03:37.916] - Launch lazy future ... done
[18:03:37.916] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x59a4afbb1398>
Arguments '...' exists: TRUE
[18:03:37.918] getGlobalsAndPackages() ...
[18:03:37.918] Searching for globals...
[18:03:37.921] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[18:03:37.921] Searching for globals ... DONE
[18:03:37.921] Resolving globals: FALSE
[18:03:37.921] Tweak future expression to call with '...' arguments ...
[18:03:37.922] {
[18:03:37.922]     do.call(function(...) {
[18:03:37.922]         sum(x, ...)
[18:03:37.922]     }, args = future.call.arguments)
[18:03:37.922] }
[18:03:37.922] Tweak future expression to call with '...' arguments ... DONE
[18:03:37.923] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:37.924] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[18:03:37.924] - globals: [2] ‘x’, ‘future.call.arguments’
[18:03:37.924] 
[18:03:37.924] getGlobalsAndPackages() ... DONE
[18:03:37.925] run() for ‘Future’ ...
[18:03:37.925] - state: ‘created’
[18:03:37.925] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:37.926] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:37.926] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:37.926]   - Field: ‘label’
[18:03:37.927]   - Field: ‘local’
[18:03:37.927]   - Field: ‘owner’
[18:03:37.927]   - Field: ‘envir’
[18:03:37.927]   - Field: ‘packages’
[18:03:37.927]   - Field: ‘gc’
[18:03:37.928]   - Field: ‘conditions’
[18:03:37.928]   - Field: ‘expr’
[18:03:37.928]   - Field: ‘uuid’
[18:03:37.928]   - Field: ‘seed’
[18:03:37.928]   - Field: ‘version’
[18:03:37.928]   - Field: ‘result’
[18:03:37.929]   - Field: ‘asynchronous’
[18:03:37.929]   - Field: ‘calls’
[18:03:37.929]   - Field: ‘globals’
[18:03:37.929]   - Field: ‘stdout’
[18:03:37.929]   - Field: ‘earlySignal’
[18:03:37.930]   - Field: ‘lazy’
[18:03:37.930]   - Field: ‘state’
[18:03:37.930] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:37.930] - Launch lazy future ...
[18:03:37.931] Packages needed by the future expression (n = 0): <none>
[18:03:37.931] Packages needed by future strategies (n = 0): <none>
[18:03:37.932] {
[18:03:37.932]     {
[18:03:37.932]         {
[18:03:37.932]             ...future.startTime <- base::Sys.time()
[18:03:37.932]             {
[18:03:37.932]                 {
[18:03:37.932]                   {
[18:03:37.932]                     base::local({
[18:03:37.932]                       has_future <- base::requireNamespace("future", 
[18:03:37.932]                         quietly = TRUE)
[18:03:37.932]                       if (has_future) {
[18:03:37.932]                         ns <- base::getNamespace("future")
[18:03:37.932]                         version <- ns[[".package"]][["version"]]
[18:03:37.932]                         if (is.null(version)) 
[18:03:37.932]                           version <- utils::packageVersion("future")
[18:03:37.932]                       }
[18:03:37.932]                       else {
[18:03:37.932]                         version <- NULL
[18:03:37.932]                       }
[18:03:37.932]                       if (!has_future || version < "1.8.0") {
[18:03:37.932]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:37.932]                           "", base::R.version$version.string), 
[18:03:37.932]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:37.932]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:37.932]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:37.932]                             "release", "version")], collapse = " "), 
[18:03:37.932]                           hostname = base::Sys.info()[["nodename"]])
[18:03:37.932]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:37.932]                           info)
[18:03:37.932]                         info <- base::paste(info, collapse = "; ")
[18:03:37.932]                         if (!has_future) {
[18:03:37.932]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:37.932]                             info)
[18:03:37.932]                         }
[18:03:37.932]                         else {
[18:03:37.932]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:37.932]                             info, version)
[18:03:37.932]                         }
[18:03:37.932]                         base::stop(msg)
[18:03:37.932]                       }
[18:03:37.932]                     })
[18:03:37.932]                   }
[18:03:37.932]                   ...future.strategy.old <- future::plan("list")
[18:03:37.932]                   options(future.plan = NULL)
[18:03:37.932]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.932]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:37.932]                 }
[18:03:37.932]                 ...future.workdir <- getwd()
[18:03:37.932]             }
[18:03:37.932]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:37.932]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:37.932]         }
[18:03:37.932]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:37.932]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:37.932]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:37.932]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:37.932]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:37.932]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:37.932]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:37.932]             base::names(...future.oldOptions))
[18:03:37.932]     }
[18:03:37.932]     if (FALSE) {
[18:03:37.932]     }
[18:03:37.932]     else {
[18:03:37.932]         if (TRUE) {
[18:03:37.932]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:37.932]                 open = "w")
[18:03:37.932]         }
[18:03:37.932]         else {
[18:03:37.932]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:37.932]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:37.932]         }
[18:03:37.932]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:37.932]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:37.932]             base::sink(type = "output", split = FALSE)
[18:03:37.932]             base::close(...future.stdout)
[18:03:37.932]         }, add = TRUE)
[18:03:37.932]     }
[18:03:37.932]     ...future.frame <- base::sys.nframe()
[18:03:37.932]     ...future.conditions <- base::list()
[18:03:37.932]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:37.932]     if (FALSE) {
[18:03:37.932]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:37.932]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:37.932]     }
[18:03:37.932]     ...future.result <- base::tryCatch({
[18:03:37.932]         base::withCallingHandlers({
[18:03:37.932]             ...future.value <- base::withVisible(base::local({
[18:03:37.932]                 do.call(function(...) {
[18:03:37.932]                   sum(x, ...)
[18:03:37.932]                 }, args = future.call.arguments)
[18:03:37.932]             }))
[18:03:37.932]             future::FutureResult(value = ...future.value$value, 
[18:03:37.932]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.932]                   ...future.rng), globalenv = if (FALSE) 
[18:03:37.932]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:37.932]                     ...future.globalenv.names))
[18:03:37.932]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:37.932]         }, condition = base::local({
[18:03:37.932]             c <- base::c
[18:03:37.932]             inherits <- base::inherits
[18:03:37.932]             invokeRestart <- base::invokeRestart
[18:03:37.932]             length <- base::length
[18:03:37.932]             list <- base::list
[18:03:37.932]             seq.int <- base::seq.int
[18:03:37.932]             signalCondition <- base::signalCondition
[18:03:37.932]             sys.calls <- base::sys.calls
[18:03:37.932]             `[[` <- base::`[[`
[18:03:37.932]             `+` <- base::`+`
[18:03:37.932]             `<<-` <- base::`<<-`
[18:03:37.932]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:37.932]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:37.932]                   3L)]
[18:03:37.932]             }
[18:03:37.932]             function(cond) {
[18:03:37.932]                 is_error <- inherits(cond, "error")
[18:03:37.932]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:37.932]                   NULL)
[18:03:37.932]                 if (is_error) {
[18:03:37.932]                   sessionInformation <- function() {
[18:03:37.932]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:37.932]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:37.932]                       search = base::search(), system = base::Sys.info())
[18:03:37.932]                   }
[18:03:37.932]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.932]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:37.932]                     cond$call), session = sessionInformation(), 
[18:03:37.932]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:37.932]                   signalCondition(cond)
[18:03:37.932]                 }
[18:03:37.932]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:37.932]                 "immediateCondition"))) {
[18:03:37.932]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:37.932]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.932]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:37.932]                   if (TRUE && !signal) {
[18:03:37.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.932]                     {
[18:03:37.932]                       inherits <- base::inherits
[18:03:37.932]                       invokeRestart <- base::invokeRestart
[18:03:37.932]                       is.null <- base::is.null
[18:03:37.932]                       muffled <- FALSE
[18:03:37.932]                       if (inherits(cond, "message")) {
[18:03:37.932]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.932]                         if (muffled) 
[18:03:37.932]                           invokeRestart("muffleMessage")
[18:03:37.932]                       }
[18:03:37.932]                       else if (inherits(cond, "warning")) {
[18:03:37.932]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.932]                         if (muffled) 
[18:03:37.932]                           invokeRestart("muffleWarning")
[18:03:37.932]                       }
[18:03:37.932]                       else if (inherits(cond, "condition")) {
[18:03:37.932]                         if (!is.null(pattern)) {
[18:03:37.932]                           computeRestarts <- base::computeRestarts
[18:03:37.932]                           grepl <- base::grepl
[18:03:37.932]                           restarts <- computeRestarts(cond)
[18:03:37.932]                           for (restart in restarts) {
[18:03:37.932]                             name <- restart$name
[18:03:37.932]                             if (is.null(name)) 
[18:03:37.932]                               next
[18:03:37.932]                             if (!grepl(pattern, name)) 
[18:03:37.932]                               next
[18:03:37.932]                             invokeRestart(restart)
[18:03:37.932]                             muffled <- TRUE
[18:03:37.932]                             break
[18:03:37.932]                           }
[18:03:37.932]                         }
[18:03:37.932]                       }
[18:03:37.932]                       invisible(muffled)
[18:03:37.932]                     }
[18:03:37.932]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.932]                   }
[18:03:37.932]                 }
[18:03:37.932]                 else {
[18:03:37.932]                   if (TRUE) {
[18:03:37.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.932]                     {
[18:03:37.932]                       inherits <- base::inherits
[18:03:37.932]                       invokeRestart <- base::invokeRestart
[18:03:37.932]                       is.null <- base::is.null
[18:03:37.932]                       muffled <- FALSE
[18:03:37.932]                       if (inherits(cond, "message")) {
[18:03:37.932]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.932]                         if (muffled) 
[18:03:37.932]                           invokeRestart("muffleMessage")
[18:03:37.932]                       }
[18:03:37.932]                       else if (inherits(cond, "warning")) {
[18:03:37.932]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.932]                         if (muffled) 
[18:03:37.932]                           invokeRestart("muffleWarning")
[18:03:37.932]                       }
[18:03:37.932]                       else if (inherits(cond, "condition")) {
[18:03:37.932]                         if (!is.null(pattern)) {
[18:03:37.932]                           computeRestarts <- base::computeRestarts
[18:03:37.932]                           grepl <- base::grepl
[18:03:37.932]                           restarts <- computeRestarts(cond)
[18:03:37.932]                           for (restart in restarts) {
[18:03:37.932]                             name <- restart$name
[18:03:37.932]                             if (is.null(name)) 
[18:03:37.932]                               next
[18:03:37.932]                             if (!grepl(pattern, name)) 
[18:03:37.932]                               next
[18:03:37.932]                             invokeRestart(restart)
[18:03:37.932]                             muffled <- TRUE
[18:03:37.932]                             break
[18:03:37.932]                           }
[18:03:37.932]                         }
[18:03:37.932]                       }
[18:03:37.932]                       invisible(muffled)
[18:03:37.932]                     }
[18:03:37.932]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.932]                   }
[18:03:37.932]                 }
[18:03:37.932]             }
[18:03:37.932]         }))
[18:03:37.932]     }, error = function(ex) {
[18:03:37.932]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:37.932]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.932]                 ...future.rng), started = ...future.startTime, 
[18:03:37.932]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:37.932]             version = "1.8"), class = "FutureResult")
[18:03:37.932]     }, finally = {
[18:03:37.932]         if (!identical(...future.workdir, getwd())) 
[18:03:37.932]             setwd(...future.workdir)
[18:03:37.932]         {
[18:03:37.932]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:37.932]                 ...future.oldOptions$nwarnings <- NULL
[18:03:37.932]             }
[18:03:37.932]             base::options(...future.oldOptions)
[18:03:37.932]             if (.Platform$OS.type == "windows") {
[18:03:37.932]                 old_names <- names(...future.oldEnvVars)
[18:03:37.932]                 envs <- base::Sys.getenv()
[18:03:37.932]                 names <- names(envs)
[18:03:37.932]                 common <- intersect(names, old_names)
[18:03:37.932]                 added <- setdiff(names, old_names)
[18:03:37.932]                 removed <- setdiff(old_names, names)
[18:03:37.932]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:37.932]                   envs[common]]
[18:03:37.932]                 NAMES <- toupper(changed)
[18:03:37.932]                 args <- list()
[18:03:37.932]                 for (kk in seq_along(NAMES)) {
[18:03:37.932]                   name <- changed[[kk]]
[18:03:37.932]                   NAME <- NAMES[[kk]]
[18:03:37.932]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.932]                     next
[18:03:37.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.932]                 }
[18:03:37.932]                 NAMES <- toupper(added)
[18:03:37.932]                 for (kk in seq_along(NAMES)) {
[18:03:37.932]                   name <- added[[kk]]
[18:03:37.932]                   NAME <- NAMES[[kk]]
[18:03:37.932]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.932]                     next
[18:03:37.932]                   args[[name]] <- ""
[18:03:37.932]                 }
[18:03:37.932]                 NAMES <- toupper(removed)
[18:03:37.932]                 for (kk in seq_along(NAMES)) {
[18:03:37.932]                   name <- removed[[kk]]
[18:03:37.932]                   NAME <- NAMES[[kk]]
[18:03:37.932]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.932]                     next
[18:03:37.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.932]                 }
[18:03:37.932]                 if (length(args) > 0) 
[18:03:37.932]                   base::do.call(base::Sys.setenv, args = args)
[18:03:37.932]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:37.932]             }
[18:03:37.932]             else {
[18:03:37.932]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:37.932]             }
[18:03:37.932]             {
[18:03:37.932]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:37.932]                   0L) {
[18:03:37.932]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:37.932]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:37.932]                   base::options(opts)
[18:03:37.932]                 }
[18:03:37.932]                 {
[18:03:37.932]                   {
[18:03:37.932]                     NULL
[18:03:37.932]                     RNGkind("Mersenne-Twister")
[18:03:37.932]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:37.932]                       inherits = FALSE)
[18:03:37.932]                   }
[18:03:37.932]                   options(future.plan = NULL)
[18:03:37.932]                   if (is.na(NA_character_)) 
[18:03:37.932]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.932]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:37.932]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:37.932]                     .init = FALSE)
[18:03:37.932]                 }
[18:03:37.932]             }
[18:03:37.932]         }
[18:03:37.932]     })
[18:03:37.932]     if (TRUE) {
[18:03:37.932]         base::sink(type = "output", split = FALSE)
[18:03:37.932]         if (TRUE) {
[18:03:37.932]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:37.932]         }
[18:03:37.932]         else {
[18:03:37.932]             ...future.result["stdout"] <- base::list(NULL)
[18:03:37.932]         }
[18:03:37.932]         base::close(...future.stdout)
[18:03:37.932]         ...future.stdout <- NULL
[18:03:37.932]     }
[18:03:37.932]     ...future.result$conditions <- ...future.conditions
[18:03:37.932]     ...future.result$finished <- base::Sys.time()
[18:03:37.932]     ...future.result
[18:03:37.932] }
[18:03:37.935] assign_globals() ...
[18:03:37.935] List of 2
[18:03:37.935]  $ x                    : int [1:2] 1 2
[18:03:37.935]  $ future.call.arguments:List of 1
[18:03:37.935]   ..$ : num 3
[18:03:37.935]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:03:37.935]  - attr(*, "where")=List of 2
[18:03:37.935]   ..$ x                    :<environment: R_EmptyEnv> 
[18:03:37.935]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[18:03:37.935]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:37.935]  - attr(*, "resolved")= logi FALSE
[18:03:37.935]  - attr(*, "total_size")= num 112
[18:03:37.935]  - attr(*, "already-done")= logi TRUE
[18:03:37.942] - copied ‘x’ to environment
[18:03:37.942] - copied ‘future.call.arguments’ to environment
[18:03:37.942] assign_globals() ... done
[18:03:37.943] plan(): Setting new future strategy stack:
[18:03:37.943] List of future strategies:
[18:03:37.943] 1. sequential:
[18:03:37.943]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.943]    - tweaked: FALSE
[18:03:37.943]    - call: NULL
[18:03:37.944] plan(): nbrOfWorkers() = 1
[18:03:37.945] plan(): Setting new future strategy stack:
[18:03:37.946] List of future strategies:
[18:03:37.946] 1. sequential:
[18:03:37.946]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.946]    - tweaked: FALSE
[18:03:37.946]    - call: plan(strategy, substitute = FALSE)
[18:03:37.946] plan(): nbrOfWorkers() = 1
[18:03:37.947] SequentialFuture started (and completed)
[18:03:37.947] - Launch lazy future ... done
[18:03:37.947] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x59a4afd7f3f8>
Arguments '...' exists: FALSE
[18:03:37.952] getGlobalsAndPackages() ...
[18:03:37.952] Searching for globals...
[18:03:37.954] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[18:03:37.954] Searching for globals ... DONE
[18:03:37.955] Resolving globals: FALSE
[18:03:37.955] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:37.956] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:37.956] - globals: [2] ‘x’, ‘y’
[18:03:37.956] 
[18:03:37.957] getGlobalsAndPackages() ... DONE
[18:03:37.957] run() for ‘Future’ ...
[18:03:37.957] - state: ‘created’
[18:03:37.958] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:37.958] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:37.958] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:37.959]   - Field: ‘label’
[18:03:37.959]   - Field: ‘local’
[18:03:37.959]   - Field: ‘owner’
[18:03:37.959]   - Field: ‘envir’
[18:03:37.959]   - Field: ‘packages’
[18:03:37.960]   - Field: ‘gc’
[18:03:37.960]   - Field: ‘conditions’
[18:03:37.960]   - Field: ‘expr’
[18:03:37.960]   - Field: ‘uuid’
[18:03:37.960]   - Field: ‘seed’
[18:03:37.961]   - Field: ‘version’
[18:03:37.961]   - Field: ‘result’
[18:03:37.961]   - Field: ‘asynchronous’
[18:03:37.961]   - Field: ‘calls’
[18:03:37.961]   - Field: ‘globals’
[18:03:37.961]   - Field: ‘stdout’
[18:03:37.962]   - Field: ‘earlySignal’
[18:03:37.962]   - Field: ‘lazy’
[18:03:37.962]   - Field: ‘state’
[18:03:37.962] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:37.962] - Launch lazy future ...
[18:03:37.963] Packages needed by the future expression (n = 0): <none>
[18:03:37.963] Packages needed by future strategies (n = 0): <none>
[18:03:37.964] {
[18:03:37.964]     {
[18:03:37.964]         {
[18:03:37.964]             ...future.startTime <- base::Sys.time()
[18:03:37.964]             {
[18:03:37.964]                 {
[18:03:37.964]                   {
[18:03:37.964]                     base::local({
[18:03:37.964]                       has_future <- base::requireNamespace("future", 
[18:03:37.964]                         quietly = TRUE)
[18:03:37.964]                       if (has_future) {
[18:03:37.964]                         ns <- base::getNamespace("future")
[18:03:37.964]                         version <- ns[[".package"]][["version"]]
[18:03:37.964]                         if (is.null(version)) 
[18:03:37.964]                           version <- utils::packageVersion("future")
[18:03:37.964]                       }
[18:03:37.964]                       else {
[18:03:37.964]                         version <- NULL
[18:03:37.964]                       }
[18:03:37.964]                       if (!has_future || version < "1.8.0") {
[18:03:37.964]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:37.964]                           "", base::R.version$version.string), 
[18:03:37.964]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:37.964]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:37.964]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:37.964]                             "release", "version")], collapse = " "), 
[18:03:37.964]                           hostname = base::Sys.info()[["nodename"]])
[18:03:37.964]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:37.964]                           info)
[18:03:37.964]                         info <- base::paste(info, collapse = "; ")
[18:03:37.964]                         if (!has_future) {
[18:03:37.964]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:37.964]                             info)
[18:03:37.964]                         }
[18:03:37.964]                         else {
[18:03:37.964]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:37.964]                             info, version)
[18:03:37.964]                         }
[18:03:37.964]                         base::stop(msg)
[18:03:37.964]                       }
[18:03:37.964]                     })
[18:03:37.964]                   }
[18:03:37.964]                   ...future.strategy.old <- future::plan("list")
[18:03:37.964]                   options(future.plan = NULL)
[18:03:37.964]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.964]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:37.964]                 }
[18:03:37.964]                 ...future.workdir <- getwd()
[18:03:37.964]             }
[18:03:37.964]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:37.964]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:37.964]         }
[18:03:37.964]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:37.964]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:37.964]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:37.964]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:37.964]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:37.964]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:37.964]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:37.964]             base::names(...future.oldOptions))
[18:03:37.964]     }
[18:03:37.964]     if (FALSE) {
[18:03:37.964]     }
[18:03:37.964]     else {
[18:03:37.964]         if (TRUE) {
[18:03:37.964]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:37.964]                 open = "w")
[18:03:37.964]         }
[18:03:37.964]         else {
[18:03:37.964]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:37.964]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:37.964]         }
[18:03:37.964]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:37.964]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:37.964]             base::sink(type = "output", split = FALSE)
[18:03:37.964]             base::close(...future.stdout)
[18:03:37.964]         }, add = TRUE)
[18:03:37.964]     }
[18:03:37.964]     ...future.frame <- base::sys.nframe()
[18:03:37.964]     ...future.conditions <- base::list()
[18:03:37.964]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:37.964]     if (FALSE) {
[18:03:37.964]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:37.964]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:37.964]     }
[18:03:37.964]     ...future.result <- base::tryCatch({
[18:03:37.964]         base::withCallingHandlers({
[18:03:37.964]             ...future.value <- base::withVisible(base::local({
[18:03:37.964]                 sum(x, y)
[18:03:37.964]             }))
[18:03:37.964]             future::FutureResult(value = ...future.value$value, 
[18:03:37.964]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.964]                   ...future.rng), globalenv = if (FALSE) 
[18:03:37.964]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:37.964]                     ...future.globalenv.names))
[18:03:37.964]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:37.964]         }, condition = base::local({
[18:03:37.964]             c <- base::c
[18:03:37.964]             inherits <- base::inherits
[18:03:37.964]             invokeRestart <- base::invokeRestart
[18:03:37.964]             length <- base::length
[18:03:37.964]             list <- base::list
[18:03:37.964]             seq.int <- base::seq.int
[18:03:37.964]             signalCondition <- base::signalCondition
[18:03:37.964]             sys.calls <- base::sys.calls
[18:03:37.964]             `[[` <- base::`[[`
[18:03:37.964]             `+` <- base::`+`
[18:03:37.964]             `<<-` <- base::`<<-`
[18:03:37.964]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:37.964]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:37.964]                   3L)]
[18:03:37.964]             }
[18:03:37.964]             function(cond) {
[18:03:37.964]                 is_error <- inherits(cond, "error")
[18:03:37.964]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:37.964]                   NULL)
[18:03:37.964]                 if (is_error) {
[18:03:37.964]                   sessionInformation <- function() {
[18:03:37.964]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:37.964]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:37.964]                       search = base::search(), system = base::Sys.info())
[18:03:37.964]                   }
[18:03:37.964]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.964]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:37.964]                     cond$call), session = sessionInformation(), 
[18:03:37.964]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:37.964]                   signalCondition(cond)
[18:03:37.964]                 }
[18:03:37.964]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:37.964]                 "immediateCondition"))) {
[18:03:37.964]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:37.964]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.964]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:37.964]                   if (TRUE && !signal) {
[18:03:37.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.964]                     {
[18:03:37.964]                       inherits <- base::inherits
[18:03:37.964]                       invokeRestart <- base::invokeRestart
[18:03:37.964]                       is.null <- base::is.null
[18:03:37.964]                       muffled <- FALSE
[18:03:37.964]                       if (inherits(cond, "message")) {
[18:03:37.964]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.964]                         if (muffled) 
[18:03:37.964]                           invokeRestart("muffleMessage")
[18:03:37.964]                       }
[18:03:37.964]                       else if (inherits(cond, "warning")) {
[18:03:37.964]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.964]                         if (muffled) 
[18:03:37.964]                           invokeRestart("muffleWarning")
[18:03:37.964]                       }
[18:03:37.964]                       else if (inherits(cond, "condition")) {
[18:03:37.964]                         if (!is.null(pattern)) {
[18:03:37.964]                           computeRestarts <- base::computeRestarts
[18:03:37.964]                           grepl <- base::grepl
[18:03:37.964]                           restarts <- computeRestarts(cond)
[18:03:37.964]                           for (restart in restarts) {
[18:03:37.964]                             name <- restart$name
[18:03:37.964]                             if (is.null(name)) 
[18:03:37.964]                               next
[18:03:37.964]                             if (!grepl(pattern, name)) 
[18:03:37.964]                               next
[18:03:37.964]                             invokeRestart(restart)
[18:03:37.964]                             muffled <- TRUE
[18:03:37.964]                             break
[18:03:37.964]                           }
[18:03:37.964]                         }
[18:03:37.964]                       }
[18:03:37.964]                       invisible(muffled)
[18:03:37.964]                     }
[18:03:37.964]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.964]                   }
[18:03:37.964]                 }
[18:03:37.964]                 else {
[18:03:37.964]                   if (TRUE) {
[18:03:37.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.964]                     {
[18:03:37.964]                       inherits <- base::inherits
[18:03:37.964]                       invokeRestart <- base::invokeRestart
[18:03:37.964]                       is.null <- base::is.null
[18:03:37.964]                       muffled <- FALSE
[18:03:37.964]                       if (inherits(cond, "message")) {
[18:03:37.964]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.964]                         if (muffled) 
[18:03:37.964]                           invokeRestart("muffleMessage")
[18:03:37.964]                       }
[18:03:37.964]                       else if (inherits(cond, "warning")) {
[18:03:37.964]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.964]                         if (muffled) 
[18:03:37.964]                           invokeRestart("muffleWarning")
[18:03:37.964]                       }
[18:03:37.964]                       else if (inherits(cond, "condition")) {
[18:03:37.964]                         if (!is.null(pattern)) {
[18:03:37.964]                           computeRestarts <- base::computeRestarts
[18:03:37.964]                           grepl <- base::grepl
[18:03:37.964]                           restarts <- computeRestarts(cond)
[18:03:37.964]                           for (restart in restarts) {
[18:03:37.964]                             name <- restart$name
[18:03:37.964]                             if (is.null(name)) 
[18:03:37.964]                               next
[18:03:37.964]                             if (!grepl(pattern, name)) 
[18:03:37.964]                               next
[18:03:37.964]                             invokeRestart(restart)
[18:03:37.964]                             muffled <- TRUE
[18:03:37.964]                             break
[18:03:37.964]                           }
[18:03:37.964]                         }
[18:03:37.964]                       }
[18:03:37.964]                       invisible(muffled)
[18:03:37.964]                     }
[18:03:37.964]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.964]                   }
[18:03:37.964]                 }
[18:03:37.964]             }
[18:03:37.964]         }))
[18:03:37.964]     }, error = function(ex) {
[18:03:37.964]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:37.964]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.964]                 ...future.rng), started = ...future.startTime, 
[18:03:37.964]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:37.964]             version = "1.8"), class = "FutureResult")
[18:03:37.964]     }, finally = {
[18:03:37.964]         if (!identical(...future.workdir, getwd())) 
[18:03:37.964]             setwd(...future.workdir)
[18:03:37.964]         {
[18:03:37.964]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:37.964]                 ...future.oldOptions$nwarnings <- NULL
[18:03:37.964]             }
[18:03:37.964]             base::options(...future.oldOptions)
[18:03:37.964]             if (.Platform$OS.type == "windows") {
[18:03:37.964]                 old_names <- names(...future.oldEnvVars)
[18:03:37.964]                 envs <- base::Sys.getenv()
[18:03:37.964]                 names <- names(envs)
[18:03:37.964]                 common <- intersect(names, old_names)
[18:03:37.964]                 added <- setdiff(names, old_names)
[18:03:37.964]                 removed <- setdiff(old_names, names)
[18:03:37.964]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:37.964]                   envs[common]]
[18:03:37.964]                 NAMES <- toupper(changed)
[18:03:37.964]                 args <- list()
[18:03:37.964]                 for (kk in seq_along(NAMES)) {
[18:03:37.964]                   name <- changed[[kk]]
[18:03:37.964]                   NAME <- NAMES[[kk]]
[18:03:37.964]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.964]                     next
[18:03:37.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.964]                 }
[18:03:37.964]                 NAMES <- toupper(added)
[18:03:37.964]                 for (kk in seq_along(NAMES)) {
[18:03:37.964]                   name <- added[[kk]]
[18:03:37.964]                   NAME <- NAMES[[kk]]
[18:03:37.964]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.964]                     next
[18:03:37.964]                   args[[name]] <- ""
[18:03:37.964]                 }
[18:03:37.964]                 NAMES <- toupper(removed)
[18:03:37.964]                 for (kk in seq_along(NAMES)) {
[18:03:37.964]                   name <- removed[[kk]]
[18:03:37.964]                   NAME <- NAMES[[kk]]
[18:03:37.964]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.964]                     next
[18:03:37.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.964]                 }
[18:03:37.964]                 if (length(args) > 0) 
[18:03:37.964]                   base::do.call(base::Sys.setenv, args = args)
[18:03:37.964]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:37.964]             }
[18:03:37.964]             else {
[18:03:37.964]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:37.964]             }
[18:03:37.964]             {
[18:03:37.964]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:37.964]                   0L) {
[18:03:37.964]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:37.964]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:37.964]                   base::options(opts)
[18:03:37.964]                 }
[18:03:37.964]                 {
[18:03:37.964]                   {
[18:03:37.964]                     NULL
[18:03:37.964]                     RNGkind("Mersenne-Twister")
[18:03:37.964]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:37.964]                       inherits = FALSE)
[18:03:37.964]                   }
[18:03:37.964]                   options(future.plan = NULL)
[18:03:37.964]                   if (is.na(NA_character_)) 
[18:03:37.964]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.964]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:37.964]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:37.964]                     .init = FALSE)
[18:03:37.964]                 }
[18:03:37.964]             }
[18:03:37.964]         }
[18:03:37.964]     })
[18:03:37.964]     if (TRUE) {
[18:03:37.964]         base::sink(type = "output", split = FALSE)
[18:03:37.964]         if (TRUE) {
[18:03:37.964]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:37.964]         }
[18:03:37.964]         else {
[18:03:37.964]             ...future.result["stdout"] <- base::list(NULL)
[18:03:37.964]         }
[18:03:37.964]         base::close(...future.stdout)
[18:03:37.964]         ...future.stdout <- NULL
[18:03:37.964]     }
[18:03:37.964]     ...future.result$conditions <- ...future.conditions
[18:03:37.964]     ...future.result$finished <- base::Sys.time()
[18:03:37.964]     ...future.result
[18:03:37.964] }
[18:03:37.967] assign_globals() ...
[18:03:37.967] List of 2
[18:03:37.967]  $ x: int [1:2] 1 2
[18:03:37.967]  $ y: num 3
[18:03:37.967]  - attr(*, "where")=List of 2
[18:03:37.967]   ..$ x:<environment: R_EmptyEnv> 
[18:03:37.967]   ..$ y:<environment: R_EmptyEnv> 
[18:03:37.967]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:37.967]  - attr(*, "resolved")= logi FALSE
[18:03:37.967]  - attr(*, "total_size")= num 112
[18:03:37.967]  - attr(*, "already-done")= logi TRUE
[18:03:37.973] - copied ‘x’ to environment
[18:03:37.973] - copied ‘y’ to environment
[18:03:37.974] assign_globals() ... done
[18:03:37.974] plan(): Setting new future strategy stack:
[18:03:37.974] List of future strategies:
[18:03:37.974] 1. sequential:
[18:03:37.974]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.974]    - tweaked: FALSE
[18:03:37.974]    - call: NULL
[18:03:37.975] plan(): nbrOfWorkers() = 1
[18:03:37.976] plan(): Setting new future strategy stack:
[18:03:37.977] List of future strategies:
[18:03:37.977] 1. sequential:
[18:03:37.977]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:37.977]    - tweaked: FALSE
[18:03:37.977]    - call: plan(strategy, substitute = FALSE)
[18:03:37.978] plan(): nbrOfWorkers() = 1
[18:03:37.978] SequentialFuture started (and completed)
[18:03:37.978] - Launch lazy future ... done
[18:03:37.978] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x59a4aff1b5a0>
Arguments '...' exists: FALSE
[18:03:37.979] getGlobalsAndPackages() ...
[18:03:37.980] Searching for globals...
[18:03:37.982] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[18:03:37.983] Searching for globals ... DONE
[18:03:37.983] Resolving globals: FALSE
[18:03:37.983] Tweak future expression to call with '...' arguments ...
[18:03:37.984] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:37.985] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:37.985] - globals: [2] ‘x’, ‘y’
[18:03:37.985] 
[18:03:37.985] getGlobalsAndPackages() ... DONE
[18:03:37.986] run() for ‘Future’ ...
[18:03:37.986] - state: ‘created’
[18:03:37.986] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:37.987] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:37.987] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:37.987]   - Field: ‘label’
[18:03:37.988]   - Field: ‘local’
[18:03:37.988]   - Field: ‘owner’
[18:03:37.988]   - Field: ‘envir’
[18:03:37.988]   - Field: ‘packages’
[18:03:37.988]   - Field: ‘gc’
[18:03:37.989]   - Field: ‘conditions’
[18:03:37.989]   - Field: ‘expr’
[18:03:37.989]   - Field: ‘uuid’
[18:03:37.989]   - Field: ‘seed’
[18:03:37.989]   - Field: ‘version’
[18:03:37.989]   - Field: ‘result’
[18:03:37.990]   - Field: ‘asynchronous’
[18:03:37.990]   - Field: ‘calls’
[18:03:37.990]   - Field: ‘globals’
[18:03:37.990]   - Field: ‘stdout’
[18:03:37.990]   - Field: ‘earlySignal’
[18:03:37.991]   - Field: ‘lazy’
[18:03:37.991]   - Field: ‘state’
[18:03:37.991] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:37.991] - Launch lazy future ...
[18:03:37.992] Packages needed by the future expression (n = 0): <none>
[18:03:37.992] Packages needed by future strategies (n = 0): <none>
[18:03:37.993] {
[18:03:37.993]     {
[18:03:37.993]         {
[18:03:37.993]             ...future.startTime <- base::Sys.time()
[18:03:37.993]             {
[18:03:37.993]                 {
[18:03:37.993]                   {
[18:03:37.993]                     base::local({
[18:03:37.993]                       has_future <- base::requireNamespace("future", 
[18:03:37.993]                         quietly = TRUE)
[18:03:37.993]                       if (has_future) {
[18:03:37.993]                         ns <- base::getNamespace("future")
[18:03:37.993]                         version <- ns[[".package"]][["version"]]
[18:03:37.993]                         if (is.null(version)) 
[18:03:37.993]                           version <- utils::packageVersion("future")
[18:03:37.993]                       }
[18:03:37.993]                       else {
[18:03:37.993]                         version <- NULL
[18:03:37.993]                       }
[18:03:37.993]                       if (!has_future || version < "1.8.0") {
[18:03:37.993]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:37.993]                           "", base::R.version$version.string), 
[18:03:37.993]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:37.993]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:37.993]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:37.993]                             "release", "version")], collapse = " "), 
[18:03:37.993]                           hostname = base::Sys.info()[["nodename"]])
[18:03:37.993]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:37.993]                           info)
[18:03:37.993]                         info <- base::paste(info, collapse = "; ")
[18:03:37.993]                         if (!has_future) {
[18:03:37.993]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:37.993]                             info)
[18:03:37.993]                         }
[18:03:37.993]                         else {
[18:03:37.993]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:37.993]                             info, version)
[18:03:37.993]                         }
[18:03:37.993]                         base::stop(msg)
[18:03:37.993]                       }
[18:03:37.993]                     })
[18:03:37.993]                   }
[18:03:37.993]                   ...future.strategy.old <- future::plan("list")
[18:03:37.993]                   options(future.plan = NULL)
[18:03:37.993]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.993]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:37.993]                 }
[18:03:37.993]                 ...future.workdir <- getwd()
[18:03:37.993]             }
[18:03:37.993]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:37.993]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:37.993]         }
[18:03:37.993]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:37.993]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:37.993]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:37.993]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:37.993]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:37.993]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:37.993]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:37.993]             base::names(...future.oldOptions))
[18:03:37.993]     }
[18:03:37.993]     if (FALSE) {
[18:03:37.993]     }
[18:03:37.993]     else {
[18:03:37.993]         if (TRUE) {
[18:03:37.993]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:37.993]                 open = "w")
[18:03:37.993]         }
[18:03:37.993]         else {
[18:03:37.993]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:37.993]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:37.993]         }
[18:03:37.993]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:37.993]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:37.993]             base::sink(type = "output", split = FALSE)
[18:03:37.993]             base::close(...future.stdout)
[18:03:37.993]         }, add = TRUE)
[18:03:37.993]     }
[18:03:37.993]     ...future.frame <- base::sys.nframe()
[18:03:37.993]     ...future.conditions <- base::list()
[18:03:37.993]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:37.993]     if (FALSE) {
[18:03:37.993]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:37.993]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:37.993]     }
[18:03:37.993]     ...future.result <- base::tryCatch({
[18:03:37.993]         base::withCallingHandlers({
[18:03:37.993]             ...future.value <- base::withVisible(base::local({
[18:03:37.993]                 sum(x, y, ...)
[18:03:37.993]             }))
[18:03:37.993]             future::FutureResult(value = ...future.value$value, 
[18:03:37.993]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.993]                   ...future.rng), globalenv = if (FALSE) 
[18:03:37.993]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:37.993]                     ...future.globalenv.names))
[18:03:37.993]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:37.993]         }, condition = base::local({
[18:03:37.993]             c <- base::c
[18:03:37.993]             inherits <- base::inherits
[18:03:37.993]             invokeRestart <- base::invokeRestart
[18:03:37.993]             length <- base::length
[18:03:37.993]             list <- base::list
[18:03:37.993]             seq.int <- base::seq.int
[18:03:37.993]             signalCondition <- base::signalCondition
[18:03:37.993]             sys.calls <- base::sys.calls
[18:03:37.993]             `[[` <- base::`[[`
[18:03:37.993]             `+` <- base::`+`
[18:03:37.993]             `<<-` <- base::`<<-`
[18:03:37.993]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:37.993]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:37.993]                   3L)]
[18:03:37.993]             }
[18:03:37.993]             function(cond) {
[18:03:37.993]                 is_error <- inherits(cond, "error")
[18:03:37.993]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:37.993]                   NULL)
[18:03:37.993]                 if (is_error) {
[18:03:37.993]                   sessionInformation <- function() {
[18:03:37.993]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:37.993]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:37.993]                       search = base::search(), system = base::Sys.info())
[18:03:37.993]                   }
[18:03:37.993]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.993]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:37.993]                     cond$call), session = sessionInformation(), 
[18:03:37.993]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:37.993]                   signalCondition(cond)
[18:03:37.993]                 }
[18:03:37.993]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:37.993]                 "immediateCondition"))) {
[18:03:37.993]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:37.993]                   ...future.conditions[[length(...future.conditions) + 
[18:03:37.993]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:37.993]                   if (TRUE && !signal) {
[18:03:37.993]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.993]                     {
[18:03:37.993]                       inherits <- base::inherits
[18:03:37.993]                       invokeRestart <- base::invokeRestart
[18:03:37.993]                       is.null <- base::is.null
[18:03:37.993]                       muffled <- FALSE
[18:03:37.993]                       if (inherits(cond, "message")) {
[18:03:37.993]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.993]                         if (muffled) 
[18:03:37.993]                           invokeRestart("muffleMessage")
[18:03:37.993]                       }
[18:03:37.993]                       else if (inherits(cond, "warning")) {
[18:03:37.993]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.993]                         if (muffled) 
[18:03:37.993]                           invokeRestart("muffleWarning")
[18:03:37.993]                       }
[18:03:37.993]                       else if (inherits(cond, "condition")) {
[18:03:37.993]                         if (!is.null(pattern)) {
[18:03:37.993]                           computeRestarts <- base::computeRestarts
[18:03:37.993]                           grepl <- base::grepl
[18:03:37.993]                           restarts <- computeRestarts(cond)
[18:03:37.993]                           for (restart in restarts) {
[18:03:37.993]                             name <- restart$name
[18:03:37.993]                             if (is.null(name)) 
[18:03:37.993]                               next
[18:03:37.993]                             if (!grepl(pattern, name)) 
[18:03:37.993]                               next
[18:03:37.993]                             invokeRestart(restart)
[18:03:37.993]                             muffled <- TRUE
[18:03:37.993]                             break
[18:03:37.993]                           }
[18:03:37.993]                         }
[18:03:37.993]                       }
[18:03:37.993]                       invisible(muffled)
[18:03:37.993]                     }
[18:03:37.993]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.993]                   }
[18:03:37.993]                 }
[18:03:37.993]                 else {
[18:03:37.993]                   if (TRUE) {
[18:03:37.993]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:37.993]                     {
[18:03:37.993]                       inherits <- base::inherits
[18:03:37.993]                       invokeRestart <- base::invokeRestart
[18:03:37.993]                       is.null <- base::is.null
[18:03:37.993]                       muffled <- FALSE
[18:03:37.993]                       if (inherits(cond, "message")) {
[18:03:37.993]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:37.993]                         if (muffled) 
[18:03:37.993]                           invokeRestart("muffleMessage")
[18:03:37.993]                       }
[18:03:37.993]                       else if (inherits(cond, "warning")) {
[18:03:37.993]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:37.993]                         if (muffled) 
[18:03:37.993]                           invokeRestart("muffleWarning")
[18:03:37.993]                       }
[18:03:37.993]                       else if (inherits(cond, "condition")) {
[18:03:37.993]                         if (!is.null(pattern)) {
[18:03:37.993]                           computeRestarts <- base::computeRestarts
[18:03:37.993]                           grepl <- base::grepl
[18:03:37.993]                           restarts <- computeRestarts(cond)
[18:03:37.993]                           for (restart in restarts) {
[18:03:37.993]                             name <- restart$name
[18:03:37.993]                             if (is.null(name)) 
[18:03:37.993]                               next
[18:03:37.993]                             if (!grepl(pattern, name)) 
[18:03:37.993]                               next
[18:03:37.993]                             invokeRestart(restart)
[18:03:37.993]                             muffled <- TRUE
[18:03:37.993]                             break
[18:03:37.993]                           }
[18:03:37.993]                         }
[18:03:37.993]                       }
[18:03:37.993]                       invisible(muffled)
[18:03:37.993]                     }
[18:03:37.993]                     muffleCondition(cond, pattern = "^muffle")
[18:03:37.993]                   }
[18:03:37.993]                 }
[18:03:37.993]             }
[18:03:37.993]         }))
[18:03:37.993]     }, error = function(ex) {
[18:03:37.993]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:37.993]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:37.993]                 ...future.rng), started = ...future.startTime, 
[18:03:37.993]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:37.993]             version = "1.8"), class = "FutureResult")
[18:03:37.993]     }, finally = {
[18:03:37.993]         if (!identical(...future.workdir, getwd())) 
[18:03:37.993]             setwd(...future.workdir)
[18:03:37.993]         {
[18:03:37.993]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:37.993]                 ...future.oldOptions$nwarnings <- NULL
[18:03:37.993]             }
[18:03:37.993]             base::options(...future.oldOptions)
[18:03:37.993]             if (.Platform$OS.type == "windows") {
[18:03:37.993]                 old_names <- names(...future.oldEnvVars)
[18:03:37.993]                 envs <- base::Sys.getenv()
[18:03:37.993]                 names <- names(envs)
[18:03:37.993]                 common <- intersect(names, old_names)
[18:03:37.993]                 added <- setdiff(names, old_names)
[18:03:37.993]                 removed <- setdiff(old_names, names)
[18:03:37.993]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:37.993]                   envs[common]]
[18:03:37.993]                 NAMES <- toupper(changed)
[18:03:37.993]                 args <- list()
[18:03:37.993]                 for (kk in seq_along(NAMES)) {
[18:03:37.993]                   name <- changed[[kk]]
[18:03:37.993]                   NAME <- NAMES[[kk]]
[18:03:37.993]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.993]                     next
[18:03:37.993]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.993]                 }
[18:03:37.993]                 NAMES <- toupper(added)
[18:03:37.993]                 for (kk in seq_along(NAMES)) {
[18:03:37.993]                   name <- added[[kk]]
[18:03:37.993]                   NAME <- NAMES[[kk]]
[18:03:37.993]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.993]                     next
[18:03:37.993]                   args[[name]] <- ""
[18:03:37.993]                 }
[18:03:37.993]                 NAMES <- toupper(removed)
[18:03:37.993]                 for (kk in seq_along(NAMES)) {
[18:03:37.993]                   name <- removed[[kk]]
[18:03:37.993]                   NAME <- NAMES[[kk]]
[18:03:37.993]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:37.993]                     next
[18:03:37.993]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:37.993]                 }
[18:03:37.993]                 if (length(args) > 0) 
[18:03:37.993]                   base::do.call(base::Sys.setenv, args = args)
[18:03:37.993]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:37.993]             }
[18:03:37.993]             else {
[18:03:37.993]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:37.993]             }
[18:03:37.993]             {
[18:03:37.993]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:37.993]                   0L) {
[18:03:37.993]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:37.993]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:37.993]                   base::options(opts)
[18:03:37.993]                 }
[18:03:37.993]                 {
[18:03:37.993]                   {
[18:03:37.993]                     NULL
[18:03:37.993]                     RNGkind("Mersenne-Twister")
[18:03:37.993]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:37.993]                       inherits = FALSE)
[18:03:37.993]                   }
[18:03:37.993]                   options(future.plan = NULL)
[18:03:37.993]                   if (is.na(NA_character_)) 
[18:03:37.993]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:37.993]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:37.993]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:37.993]                     .init = FALSE)
[18:03:37.993]                 }
[18:03:37.993]             }
[18:03:37.993]         }
[18:03:37.993]     })
[18:03:37.993]     if (TRUE) {
[18:03:37.993]         base::sink(type = "output", split = FALSE)
[18:03:37.993]         if (TRUE) {
[18:03:37.993]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:37.993]         }
[18:03:37.993]         else {
[18:03:37.993]             ...future.result["stdout"] <- base::list(NULL)
[18:03:37.993]         }
[18:03:37.993]         base::close(...future.stdout)
[18:03:37.993]         ...future.stdout <- NULL
[18:03:37.993]     }
[18:03:37.993]     ...future.result$conditions <- ...future.conditions
[18:03:37.993]     ...future.result$finished <- base::Sys.time()
[18:03:37.993]     ...future.result
[18:03:37.993] }
[18:03:37.996] assign_globals() ...
[18:03:37.996] List of 2
[18:03:37.996]  $ x: int [1:2] 1 2
[18:03:37.996]  $ y: num 3
[18:03:37.996]  - attr(*, "where")=List of 2
[18:03:37.996]   ..$ x:<environment: R_EmptyEnv> 
[18:03:37.996]   ..$ y:<environment: R_EmptyEnv> 
[18:03:37.996]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:37.996]  - attr(*, "resolved")= logi FALSE
[18:03:37.996]  - attr(*, "total_size")= num 112
[18:03:37.996]  - attr(*, "already-done")= logi TRUE
[18:03:38.002] - copied ‘x’ to environment
[18:03:38.002] - copied ‘y’ to environment
[18:03:38.002] assign_globals() ... done
[18:03:38.003] plan(): Setting new future strategy stack:
[18:03:38.003] List of future strategies:
[18:03:38.003] 1. sequential:
[18:03:38.003]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.003]    - tweaked: FALSE
[18:03:38.003]    - call: NULL
[18:03:38.004] plan(): nbrOfWorkers() = 1
[18:03:38.006] plan(): Setting new future strategy stack:
[18:03:38.006] List of future strategies:
[18:03:38.006] 1. sequential:
[18:03:38.006]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.006]    - tweaked: FALSE
[18:03:38.006]    - call: plan(strategy, substitute = FALSE)
[18:03:38.007] plan(): nbrOfWorkers() = 1
[18:03:38.007] SequentialFuture started (and completed)
[18:03:38.007] signalConditions() ...
[18:03:38.008]  - include = ‘immediateCondition’
[18:03:38.008]  - exclude = 
[18:03:38.008]  - resignal = FALSE
[18:03:38.008]  - Number of conditions: 1
[18:03:38.008] signalConditions() ... done
[18:03:38.008] - Launch lazy future ... done
[18:03:38.009] run() for ‘SequentialFuture’ ... done
[18:03:38.009] signalConditions() ...
[18:03:38.009]  - include = ‘immediateCondition’
[18:03:38.009]  - exclude = 
[18:03:38.010]  - resignal = FALSE
[18:03:38.010]  - Number of conditions: 1
[18:03:38.010] signalConditions() ... done
[18:03:38.013] Future state: ‘finished’
[18:03:38.013] signalConditions() ...
[18:03:38.013]  - include = ‘condition’
[18:03:38.013]  - exclude = ‘immediateCondition’
[18:03:38.013]  - resignal = TRUE
[18:03:38.014]  - Number of conditions: 1
[18:03:38.014]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:03:38.014] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x59a4b0506b38>
Arguments '...' exists: TRUE
[18:03:38.015] getGlobalsAndPackages() ...
[18:03:38.016] - globals passed as-is: [1] ‘...’
[18:03:38.016] Resolving globals: FALSE
[18:03:38.016] Tweak future expression to call with '...' arguments ...
[18:03:38.016] {
[18:03:38.016]     do.call(function(...) {
[18:03:38.016]         fcn <- function() sum(...)
[18:03:38.016]         fcn()
[18:03:38.016]     }, args = future.call.arguments)
[18:03:38.016] }
[18:03:38.017] Tweak future expression to call with '...' arguments ... DONE
[18:03:38.017] The total size of the 1 globals is 112 bytes (112 bytes)
[18:03:38.018] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[18:03:38.018] - globals: [1] ‘future.call.arguments’
[18:03:38.019] 
[18:03:38.019] getGlobalsAndPackages() ... DONE
[18:03:38.019] run() for ‘Future’ ...
[18:03:38.019] - state: ‘created’
[18:03:38.020] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:38.020] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:38.020] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:38.021]   - Field: ‘label’
[18:03:38.021]   - Field: ‘local’
[18:03:38.021]   - Field: ‘owner’
[18:03:38.021]   - Field: ‘envir’
[18:03:38.021]   - Field: ‘packages’
[18:03:38.022]   - Field: ‘gc’
[18:03:38.022]   - Field: ‘conditions’
[18:03:38.022]   - Field: ‘expr’
[18:03:38.022]   - Field: ‘uuid’
[18:03:38.022]   - Field: ‘seed’
[18:03:38.023]   - Field: ‘version’
[18:03:38.023]   - Field: ‘result’
[18:03:38.023]   - Field: ‘asynchronous’
[18:03:38.023]   - Field: ‘calls’
[18:03:38.023]   - Field: ‘globals’
[18:03:38.023]   - Field: ‘stdout’
[18:03:38.024]   - Field: ‘earlySignal’
[18:03:38.024]   - Field: ‘lazy’
[18:03:38.024]   - Field: ‘state’
[18:03:38.024] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:38.024] - Launch lazy future ...
[18:03:38.025] Packages needed by the future expression (n = 0): <none>
[18:03:38.025] Packages needed by future strategies (n = 0): <none>
[18:03:38.026] {
[18:03:38.026]     {
[18:03:38.026]         {
[18:03:38.026]             ...future.startTime <- base::Sys.time()
[18:03:38.026]             {
[18:03:38.026]                 {
[18:03:38.026]                   {
[18:03:38.026]                     base::local({
[18:03:38.026]                       has_future <- base::requireNamespace("future", 
[18:03:38.026]                         quietly = TRUE)
[18:03:38.026]                       if (has_future) {
[18:03:38.026]                         ns <- base::getNamespace("future")
[18:03:38.026]                         version <- ns[[".package"]][["version"]]
[18:03:38.026]                         if (is.null(version)) 
[18:03:38.026]                           version <- utils::packageVersion("future")
[18:03:38.026]                       }
[18:03:38.026]                       else {
[18:03:38.026]                         version <- NULL
[18:03:38.026]                       }
[18:03:38.026]                       if (!has_future || version < "1.8.0") {
[18:03:38.026]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.026]                           "", base::R.version$version.string), 
[18:03:38.026]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:38.026]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.026]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.026]                             "release", "version")], collapse = " "), 
[18:03:38.026]                           hostname = base::Sys.info()[["nodename"]])
[18:03:38.026]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.026]                           info)
[18:03:38.026]                         info <- base::paste(info, collapse = "; ")
[18:03:38.026]                         if (!has_future) {
[18:03:38.026]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.026]                             info)
[18:03:38.026]                         }
[18:03:38.026]                         else {
[18:03:38.026]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.026]                             info, version)
[18:03:38.026]                         }
[18:03:38.026]                         base::stop(msg)
[18:03:38.026]                       }
[18:03:38.026]                     })
[18:03:38.026]                   }
[18:03:38.026]                   ...future.strategy.old <- future::plan("list")
[18:03:38.026]                   options(future.plan = NULL)
[18:03:38.026]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.026]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.026]                 }
[18:03:38.026]                 ...future.workdir <- getwd()
[18:03:38.026]             }
[18:03:38.026]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.026]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.026]         }
[18:03:38.026]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.026]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.026]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.026]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.026]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.026]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.026]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.026]             base::names(...future.oldOptions))
[18:03:38.026]     }
[18:03:38.026]     if (FALSE) {
[18:03:38.026]     }
[18:03:38.026]     else {
[18:03:38.026]         if (TRUE) {
[18:03:38.026]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.026]                 open = "w")
[18:03:38.026]         }
[18:03:38.026]         else {
[18:03:38.026]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.026]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.026]         }
[18:03:38.026]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.026]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.026]             base::sink(type = "output", split = FALSE)
[18:03:38.026]             base::close(...future.stdout)
[18:03:38.026]         }, add = TRUE)
[18:03:38.026]     }
[18:03:38.026]     ...future.frame <- base::sys.nframe()
[18:03:38.026]     ...future.conditions <- base::list()
[18:03:38.026]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.026]     if (FALSE) {
[18:03:38.026]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.026]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.026]     }
[18:03:38.026]     ...future.result <- base::tryCatch({
[18:03:38.026]         base::withCallingHandlers({
[18:03:38.026]             ...future.value <- base::withVisible(base::local({
[18:03:38.026]                 do.call(function(...) {
[18:03:38.026]                   fcn <- function() sum(...)
[18:03:38.026]                   fcn()
[18:03:38.026]                 }, args = future.call.arguments)
[18:03:38.026]             }))
[18:03:38.026]             future::FutureResult(value = ...future.value$value, 
[18:03:38.026]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.026]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.026]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.026]                     ...future.globalenv.names))
[18:03:38.026]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.026]         }, condition = base::local({
[18:03:38.026]             c <- base::c
[18:03:38.026]             inherits <- base::inherits
[18:03:38.026]             invokeRestart <- base::invokeRestart
[18:03:38.026]             length <- base::length
[18:03:38.026]             list <- base::list
[18:03:38.026]             seq.int <- base::seq.int
[18:03:38.026]             signalCondition <- base::signalCondition
[18:03:38.026]             sys.calls <- base::sys.calls
[18:03:38.026]             `[[` <- base::`[[`
[18:03:38.026]             `+` <- base::`+`
[18:03:38.026]             `<<-` <- base::`<<-`
[18:03:38.026]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.026]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.026]                   3L)]
[18:03:38.026]             }
[18:03:38.026]             function(cond) {
[18:03:38.026]                 is_error <- inherits(cond, "error")
[18:03:38.026]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.026]                   NULL)
[18:03:38.026]                 if (is_error) {
[18:03:38.026]                   sessionInformation <- function() {
[18:03:38.026]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.026]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.026]                       search = base::search(), system = base::Sys.info())
[18:03:38.026]                   }
[18:03:38.026]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.026]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.026]                     cond$call), session = sessionInformation(), 
[18:03:38.026]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.026]                   signalCondition(cond)
[18:03:38.026]                 }
[18:03:38.026]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.026]                 "immediateCondition"))) {
[18:03:38.026]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.026]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.026]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.026]                   if (TRUE && !signal) {
[18:03:38.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.026]                     {
[18:03:38.026]                       inherits <- base::inherits
[18:03:38.026]                       invokeRestart <- base::invokeRestart
[18:03:38.026]                       is.null <- base::is.null
[18:03:38.026]                       muffled <- FALSE
[18:03:38.026]                       if (inherits(cond, "message")) {
[18:03:38.026]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.026]                         if (muffled) 
[18:03:38.026]                           invokeRestart("muffleMessage")
[18:03:38.026]                       }
[18:03:38.026]                       else if (inherits(cond, "warning")) {
[18:03:38.026]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.026]                         if (muffled) 
[18:03:38.026]                           invokeRestart("muffleWarning")
[18:03:38.026]                       }
[18:03:38.026]                       else if (inherits(cond, "condition")) {
[18:03:38.026]                         if (!is.null(pattern)) {
[18:03:38.026]                           computeRestarts <- base::computeRestarts
[18:03:38.026]                           grepl <- base::grepl
[18:03:38.026]                           restarts <- computeRestarts(cond)
[18:03:38.026]                           for (restart in restarts) {
[18:03:38.026]                             name <- restart$name
[18:03:38.026]                             if (is.null(name)) 
[18:03:38.026]                               next
[18:03:38.026]                             if (!grepl(pattern, name)) 
[18:03:38.026]                               next
[18:03:38.026]                             invokeRestart(restart)
[18:03:38.026]                             muffled <- TRUE
[18:03:38.026]                             break
[18:03:38.026]                           }
[18:03:38.026]                         }
[18:03:38.026]                       }
[18:03:38.026]                       invisible(muffled)
[18:03:38.026]                     }
[18:03:38.026]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.026]                   }
[18:03:38.026]                 }
[18:03:38.026]                 else {
[18:03:38.026]                   if (TRUE) {
[18:03:38.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.026]                     {
[18:03:38.026]                       inherits <- base::inherits
[18:03:38.026]                       invokeRestart <- base::invokeRestart
[18:03:38.026]                       is.null <- base::is.null
[18:03:38.026]                       muffled <- FALSE
[18:03:38.026]                       if (inherits(cond, "message")) {
[18:03:38.026]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.026]                         if (muffled) 
[18:03:38.026]                           invokeRestart("muffleMessage")
[18:03:38.026]                       }
[18:03:38.026]                       else if (inherits(cond, "warning")) {
[18:03:38.026]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.026]                         if (muffled) 
[18:03:38.026]                           invokeRestart("muffleWarning")
[18:03:38.026]                       }
[18:03:38.026]                       else if (inherits(cond, "condition")) {
[18:03:38.026]                         if (!is.null(pattern)) {
[18:03:38.026]                           computeRestarts <- base::computeRestarts
[18:03:38.026]                           grepl <- base::grepl
[18:03:38.026]                           restarts <- computeRestarts(cond)
[18:03:38.026]                           for (restart in restarts) {
[18:03:38.026]                             name <- restart$name
[18:03:38.026]                             if (is.null(name)) 
[18:03:38.026]                               next
[18:03:38.026]                             if (!grepl(pattern, name)) 
[18:03:38.026]                               next
[18:03:38.026]                             invokeRestart(restart)
[18:03:38.026]                             muffled <- TRUE
[18:03:38.026]                             break
[18:03:38.026]                           }
[18:03:38.026]                         }
[18:03:38.026]                       }
[18:03:38.026]                       invisible(muffled)
[18:03:38.026]                     }
[18:03:38.026]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.026]                   }
[18:03:38.026]                 }
[18:03:38.026]             }
[18:03:38.026]         }))
[18:03:38.026]     }, error = function(ex) {
[18:03:38.026]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.026]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.026]                 ...future.rng), started = ...future.startTime, 
[18:03:38.026]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.026]             version = "1.8"), class = "FutureResult")
[18:03:38.026]     }, finally = {
[18:03:38.026]         if (!identical(...future.workdir, getwd())) 
[18:03:38.026]             setwd(...future.workdir)
[18:03:38.026]         {
[18:03:38.026]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.026]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.026]             }
[18:03:38.026]             base::options(...future.oldOptions)
[18:03:38.026]             if (.Platform$OS.type == "windows") {
[18:03:38.026]                 old_names <- names(...future.oldEnvVars)
[18:03:38.026]                 envs <- base::Sys.getenv()
[18:03:38.026]                 names <- names(envs)
[18:03:38.026]                 common <- intersect(names, old_names)
[18:03:38.026]                 added <- setdiff(names, old_names)
[18:03:38.026]                 removed <- setdiff(old_names, names)
[18:03:38.026]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.026]                   envs[common]]
[18:03:38.026]                 NAMES <- toupper(changed)
[18:03:38.026]                 args <- list()
[18:03:38.026]                 for (kk in seq_along(NAMES)) {
[18:03:38.026]                   name <- changed[[kk]]
[18:03:38.026]                   NAME <- NAMES[[kk]]
[18:03:38.026]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.026]                     next
[18:03:38.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.026]                 }
[18:03:38.026]                 NAMES <- toupper(added)
[18:03:38.026]                 for (kk in seq_along(NAMES)) {
[18:03:38.026]                   name <- added[[kk]]
[18:03:38.026]                   NAME <- NAMES[[kk]]
[18:03:38.026]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.026]                     next
[18:03:38.026]                   args[[name]] <- ""
[18:03:38.026]                 }
[18:03:38.026]                 NAMES <- toupper(removed)
[18:03:38.026]                 for (kk in seq_along(NAMES)) {
[18:03:38.026]                   name <- removed[[kk]]
[18:03:38.026]                   NAME <- NAMES[[kk]]
[18:03:38.026]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.026]                     next
[18:03:38.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.026]                 }
[18:03:38.026]                 if (length(args) > 0) 
[18:03:38.026]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.026]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.026]             }
[18:03:38.026]             else {
[18:03:38.026]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.026]             }
[18:03:38.026]             {
[18:03:38.026]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.026]                   0L) {
[18:03:38.026]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.026]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.026]                   base::options(opts)
[18:03:38.026]                 }
[18:03:38.026]                 {
[18:03:38.026]                   {
[18:03:38.026]                     NULL
[18:03:38.026]                     RNGkind("Mersenne-Twister")
[18:03:38.026]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:38.026]                       inherits = FALSE)
[18:03:38.026]                   }
[18:03:38.026]                   options(future.plan = NULL)
[18:03:38.026]                   if (is.na(NA_character_)) 
[18:03:38.026]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.026]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.026]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.026]                     .init = FALSE)
[18:03:38.026]                 }
[18:03:38.026]             }
[18:03:38.026]         }
[18:03:38.026]     })
[18:03:38.026]     if (TRUE) {
[18:03:38.026]         base::sink(type = "output", split = FALSE)
[18:03:38.026]         if (TRUE) {
[18:03:38.026]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.026]         }
[18:03:38.026]         else {
[18:03:38.026]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.026]         }
[18:03:38.026]         base::close(...future.stdout)
[18:03:38.026]         ...future.stdout <- NULL
[18:03:38.026]     }
[18:03:38.026]     ...future.result$conditions <- ...future.conditions
[18:03:38.026]     ...future.result$finished <- base::Sys.time()
[18:03:38.026]     ...future.result
[18:03:38.026] }
[18:03:38.029] assign_globals() ...
[18:03:38.029] List of 1
[18:03:38.029]  $ future.call.arguments:List of 2
[18:03:38.029]   ..$ : int [1:2] 1 2
[18:03:38.029]   ..$ : num 3
[18:03:38.029]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:03:38.029]  - attr(*, "where")=List of 1
[18:03:38.029]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[18:03:38.029]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.029]  - attr(*, "resolved")= logi FALSE
[18:03:38.029]  - attr(*, "total_size")= num 112
[18:03:38.029]  - attr(*, "already-done")= logi TRUE
[18:03:38.036] - copied ‘future.call.arguments’ to environment
[18:03:38.036] assign_globals() ... done
[18:03:38.036] plan(): Setting new future strategy stack:
[18:03:38.037] List of future strategies:
[18:03:38.037] 1. sequential:
[18:03:38.037]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.037]    - tweaked: FALSE
[18:03:38.037]    - call: NULL
[18:03:38.037] plan(): nbrOfWorkers() = 1
[18:03:38.039] plan(): Setting new future strategy stack:
[18:03:38.039] List of future strategies:
[18:03:38.039] 1. sequential:
[18:03:38.039]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.039]    - tweaked: FALSE
[18:03:38.039]    - call: plan(strategy, substitute = FALSE)
[18:03:38.040] plan(): nbrOfWorkers() = 1
[18:03:38.040] SequentialFuture started (and completed)
[18:03:38.041] - Launch lazy future ... done
[18:03:38.041] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x59a4ae54de38>
Using '...' in a formula
[18:03:38.042] getGlobalsAndPackages() ...
[18:03:38.042] Searching for globals...
[18:03:38.047] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[18:03:38.048] Searching for globals ... DONE
[18:03:38.048] Resolving globals: FALSE
[18:03:38.049] Tweak future expression to call with '...' arguments ...
[18:03:38.050] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[18:03:38.050] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:38.051] - globals: [3] ‘fcn’, ‘x’, ‘y’
[18:03:38.051] 
[18:03:38.051] getGlobalsAndPackages() ... DONE
[18:03:38.052] run() for ‘Future’ ...
[18:03:38.052] - state: ‘created’
[18:03:38.052] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:38.053] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:38.053] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:38.053]   - Field: ‘label’
[18:03:38.053]   - Field: ‘local’
[18:03:38.053]   - Field: ‘owner’
[18:03:38.054]   - Field: ‘envir’
[18:03:38.054]   - Field: ‘packages’
[18:03:38.054]   - Field: ‘gc’
[18:03:38.054]   - Field: ‘conditions’
[18:03:38.054]   - Field: ‘expr’
[18:03:38.055]   - Field: ‘uuid’
[18:03:38.055]   - Field: ‘seed’
[18:03:38.055]   - Field: ‘version’
[18:03:38.055]   - Field: ‘result’
[18:03:38.055]   - Field: ‘asynchronous’
[18:03:38.056]   - Field: ‘calls’
[18:03:38.056]   - Field: ‘globals’
[18:03:38.056]   - Field: ‘stdout’
[18:03:38.056]   - Field: ‘earlySignal’
[18:03:38.056]   - Field: ‘lazy’
[18:03:38.057]   - Field: ‘state’
[18:03:38.057] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:38.057] - Launch lazy future ...
[18:03:38.057] Packages needed by the future expression (n = 0): <none>
[18:03:38.058] Packages needed by future strategies (n = 0): <none>
[18:03:38.058] {
[18:03:38.058]     {
[18:03:38.058]         {
[18:03:38.058]             ...future.startTime <- base::Sys.time()
[18:03:38.058]             {
[18:03:38.058]                 {
[18:03:38.058]                   {
[18:03:38.058]                     base::local({
[18:03:38.058]                       has_future <- base::requireNamespace("future", 
[18:03:38.058]                         quietly = TRUE)
[18:03:38.058]                       if (has_future) {
[18:03:38.058]                         ns <- base::getNamespace("future")
[18:03:38.058]                         version <- ns[[".package"]][["version"]]
[18:03:38.058]                         if (is.null(version)) 
[18:03:38.058]                           version <- utils::packageVersion("future")
[18:03:38.058]                       }
[18:03:38.058]                       else {
[18:03:38.058]                         version <- NULL
[18:03:38.058]                       }
[18:03:38.058]                       if (!has_future || version < "1.8.0") {
[18:03:38.058]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.058]                           "", base::R.version$version.string), 
[18:03:38.058]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:38.058]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.058]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.058]                             "release", "version")], collapse = " "), 
[18:03:38.058]                           hostname = base::Sys.info()[["nodename"]])
[18:03:38.058]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.058]                           info)
[18:03:38.058]                         info <- base::paste(info, collapse = "; ")
[18:03:38.058]                         if (!has_future) {
[18:03:38.058]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.058]                             info)
[18:03:38.058]                         }
[18:03:38.058]                         else {
[18:03:38.058]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.058]                             info, version)
[18:03:38.058]                         }
[18:03:38.058]                         base::stop(msg)
[18:03:38.058]                       }
[18:03:38.058]                     })
[18:03:38.058]                   }
[18:03:38.058]                   ...future.strategy.old <- future::plan("list")
[18:03:38.058]                   options(future.plan = NULL)
[18:03:38.058]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.058]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.058]                 }
[18:03:38.058]                 ...future.workdir <- getwd()
[18:03:38.058]             }
[18:03:38.058]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.058]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.058]         }
[18:03:38.058]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.058]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.058]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.058]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.058]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.058]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.058]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.058]             base::names(...future.oldOptions))
[18:03:38.058]     }
[18:03:38.058]     if (FALSE) {
[18:03:38.058]     }
[18:03:38.058]     else {
[18:03:38.058]         if (TRUE) {
[18:03:38.058]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.058]                 open = "w")
[18:03:38.058]         }
[18:03:38.058]         else {
[18:03:38.058]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.058]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.058]         }
[18:03:38.058]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.058]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.058]             base::sink(type = "output", split = FALSE)
[18:03:38.058]             base::close(...future.stdout)
[18:03:38.058]         }, add = TRUE)
[18:03:38.058]     }
[18:03:38.058]     ...future.frame <- base::sys.nframe()
[18:03:38.058]     ...future.conditions <- base::list()
[18:03:38.058]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.058]     if (FALSE) {
[18:03:38.058]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.058]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.058]     }
[18:03:38.058]     ...future.result <- base::tryCatch({
[18:03:38.058]         base::withCallingHandlers({
[18:03:38.058]             ...future.value <- base::withVisible(base::local(fcn(x, 
[18:03:38.058]                 y)))
[18:03:38.058]             future::FutureResult(value = ...future.value$value, 
[18:03:38.058]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.058]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.058]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.058]                     ...future.globalenv.names))
[18:03:38.058]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.058]         }, condition = base::local({
[18:03:38.058]             c <- base::c
[18:03:38.058]             inherits <- base::inherits
[18:03:38.058]             invokeRestart <- base::invokeRestart
[18:03:38.058]             length <- base::length
[18:03:38.058]             list <- base::list
[18:03:38.058]             seq.int <- base::seq.int
[18:03:38.058]             signalCondition <- base::signalCondition
[18:03:38.058]             sys.calls <- base::sys.calls
[18:03:38.058]             `[[` <- base::`[[`
[18:03:38.058]             `+` <- base::`+`
[18:03:38.058]             `<<-` <- base::`<<-`
[18:03:38.058]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.058]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.058]                   3L)]
[18:03:38.058]             }
[18:03:38.058]             function(cond) {
[18:03:38.058]                 is_error <- inherits(cond, "error")
[18:03:38.058]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.058]                   NULL)
[18:03:38.058]                 if (is_error) {
[18:03:38.058]                   sessionInformation <- function() {
[18:03:38.058]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.058]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.058]                       search = base::search(), system = base::Sys.info())
[18:03:38.058]                   }
[18:03:38.058]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.058]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.058]                     cond$call), session = sessionInformation(), 
[18:03:38.058]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.058]                   signalCondition(cond)
[18:03:38.058]                 }
[18:03:38.058]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.058]                 "immediateCondition"))) {
[18:03:38.058]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.058]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.058]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.058]                   if (TRUE && !signal) {
[18:03:38.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.058]                     {
[18:03:38.058]                       inherits <- base::inherits
[18:03:38.058]                       invokeRestart <- base::invokeRestart
[18:03:38.058]                       is.null <- base::is.null
[18:03:38.058]                       muffled <- FALSE
[18:03:38.058]                       if (inherits(cond, "message")) {
[18:03:38.058]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.058]                         if (muffled) 
[18:03:38.058]                           invokeRestart("muffleMessage")
[18:03:38.058]                       }
[18:03:38.058]                       else if (inherits(cond, "warning")) {
[18:03:38.058]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.058]                         if (muffled) 
[18:03:38.058]                           invokeRestart("muffleWarning")
[18:03:38.058]                       }
[18:03:38.058]                       else if (inherits(cond, "condition")) {
[18:03:38.058]                         if (!is.null(pattern)) {
[18:03:38.058]                           computeRestarts <- base::computeRestarts
[18:03:38.058]                           grepl <- base::grepl
[18:03:38.058]                           restarts <- computeRestarts(cond)
[18:03:38.058]                           for (restart in restarts) {
[18:03:38.058]                             name <- restart$name
[18:03:38.058]                             if (is.null(name)) 
[18:03:38.058]                               next
[18:03:38.058]                             if (!grepl(pattern, name)) 
[18:03:38.058]                               next
[18:03:38.058]                             invokeRestart(restart)
[18:03:38.058]                             muffled <- TRUE
[18:03:38.058]                             break
[18:03:38.058]                           }
[18:03:38.058]                         }
[18:03:38.058]                       }
[18:03:38.058]                       invisible(muffled)
[18:03:38.058]                     }
[18:03:38.058]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.058]                   }
[18:03:38.058]                 }
[18:03:38.058]                 else {
[18:03:38.058]                   if (TRUE) {
[18:03:38.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.058]                     {
[18:03:38.058]                       inherits <- base::inherits
[18:03:38.058]                       invokeRestart <- base::invokeRestart
[18:03:38.058]                       is.null <- base::is.null
[18:03:38.058]                       muffled <- FALSE
[18:03:38.058]                       if (inherits(cond, "message")) {
[18:03:38.058]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.058]                         if (muffled) 
[18:03:38.058]                           invokeRestart("muffleMessage")
[18:03:38.058]                       }
[18:03:38.058]                       else if (inherits(cond, "warning")) {
[18:03:38.058]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.058]                         if (muffled) 
[18:03:38.058]                           invokeRestart("muffleWarning")
[18:03:38.058]                       }
[18:03:38.058]                       else if (inherits(cond, "condition")) {
[18:03:38.058]                         if (!is.null(pattern)) {
[18:03:38.058]                           computeRestarts <- base::computeRestarts
[18:03:38.058]                           grepl <- base::grepl
[18:03:38.058]                           restarts <- computeRestarts(cond)
[18:03:38.058]                           for (restart in restarts) {
[18:03:38.058]                             name <- restart$name
[18:03:38.058]                             if (is.null(name)) 
[18:03:38.058]                               next
[18:03:38.058]                             if (!grepl(pattern, name)) 
[18:03:38.058]                               next
[18:03:38.058]                             invokeRestart(restart)
[18:03:38.058]                             muffled <- TRUE
[18:03:38.058]                             break
[18:03:38.058]                           }
[18:03:38.058]                         }
[18:03:38.058]                       }
[18:03:38.058]                       invisible(muffled)
[18:03:38.058]                     }
[18:03:38.058]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.058]                   }
[18:03:38.058]                 }
[18:03:38.058]             }
[18:03:38.058]         }))
[18:03:38.058]     }, error = function(ex) {
[18:03:38.058]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.058]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.058]                 ...future.rng), started = ...future.startTime, 
[18:03:38.058]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.058]             version = "1.8"), class = "FutureResult")
[18:03:38.058]     }, finally = {
[18:03:38.058]         if (!identical(...future.workdir, getwd())) 
[18:03:38.058]             setwd(...future.workdir)
[18:03:38.058]         {
[18:03:38.058]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.058]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.058]             }
[18:03:38.058]             base::options(...future.oldOptions)
[18:03:38.058]             if (.Platform$OS.type == "windows") {
[18:03:38.058]                 old_names <- names(...future.oldEnvVars)
[18:03:38.058]                 envs <- base::Sys.getenv()
[18:03:38.058]                 names <- names(envs)
[18:03:38.058]                 common <- intersect(names, old_names)
[18:03:38.058]                 added <- setdiff(names, old_names)
[18:03:38.058]                 removed <- setdiff(old_names, names)
[18:03:38.058]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.058]                   envs[common]]
[18:03:38.058]                 NAMES <- toupper(changed)
[18:03:38.058]                 args <- list()
[18:03:38.058]                 for (kk in seq_along(NAMES)) {
[18:03:38.058]                   name <- changed[[kk]]
[18:03:38.058]                   NAME <- NAMES[[kk]]
[18:03:38.058]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.058]                     next
[18:03:38.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.058]                 }
[18:03:38.058]                 NAMES <- toupper(added)
[18:03:38.058]                 for (kk in seq_along(NAMES)) {
[18:03:38.058]                   name <- added[[kk]]
[18:03:38.058]                   NAME <- NAMES[[kk]]
[18:03:38.058]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.058]                     next
[18:03:38.058]                   args[[name]] <- ""
[18:03:38.058]                 }
[18:03:38.058]                 NAMES <- toupper(removed)
[18:03:38.058]                 for (kk in seq_along(NAMES)) {
[18:03:38.058]                   name <- removed[[kk]]
[18:03:38.058]                   NAME <- NAMES[[kk]]
[18:03:38.058]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.058]                     next
[18:03:38.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.058]                 }
[18:03:38.058]                 if (length(args) > 0) 
[18:03:38.058]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.058]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.058]             }
[18:03:38.058]             else {
[18:03:38.058]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.058]             }
[18:03:38.058]             {
[18:03:38.058]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.058]                   0L) {
[18:03:38.058]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.058]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.058]                   base::options(opts)
[18:03:38.058]                 }
[18:03:38.058]                 {
[18:03:38.058]                   {
[18:03:38.058]                     NULL
[18:03:38.058]                     RNGkind("Mersenne-Twister")
[18:03:38.058]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:38.058]                       inherits = FALSE)
[18:03:38.058]                   }
[18:03:38.058]                   options(future.plan = NULL)
[18:03:38.058]                   if (is.na(NA_character_)) 
[18:03:38.058]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.058]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.058]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.058]                     .init = FALSE)
[18:03:38.058]                 }
[18:03:38.058]             }
[18:03:38.058]         }
[18:03:38.058]     })
[18:03:38.058]     if (TRUE) {
[18:03:38.058]         base::sink(type = "output", split = FALSE)
[18:03:38.058]         if (TRUE) {
[18:03:38.058]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.058]         }
[18:03:38.058]         else {
[18:03:38.058]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.058]         }
[18:03:38.058]         base::close(...future.stdout)
[18:03:38.058]         ...future.stdout <- NULL
[18:03:38.058]     }
[18:03:38.058]     ...future.result$conditions <- ...future.conditions
[18:03:38.058]     ...future.result$finished <- base::Sys.time()
[18:03:38.058]     ...future.result
[18:03:38.058] }
[18:03:38.061] assign_globals() ...
[18:03:38.062] List of 3
[18:03:38.062]  $ fcn:function (x, y)  
[18:03:38.062]  $ x  : int [1:2] 1 2
[18:03:38.062]  $ y  : num 3
[18:03:38.062]  - attr(*, "where")=List of 3
[18:03:38.062]   ..$ fcn:<environment: R_EmptyEnv> 
[18:03:38.062]   ..$ x  :<environment: R_EmptyEnv> 
[18:03:38.062]   ..$ y  :<environment: R_EmptyEnv> 
[18:03:38.062]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.062]  - attr(*, "resolved")= logi FALSE
[18:03:38.062]  - attr(*, "total_size")= num 4280
[18:03:38.062]  - attr(*, "already-done")= logi TRUE
[18:03:38.069] - reassign environment for ‘fcn’
[18:03:38.069] - copied ‘fcn’ to environment
[18:03:38.069] - copied ‘x’ to environment
[18:03:38.069] - copied ‘y’ to environment
[18:03:38.069] assign_globals() ... done
[18:03:38.070] plan(): Setting new future strategy stack:
[18:03:38.070] List of future strategies:
[18:03:38.070] 1. sequential:
[18:03:38.070]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.070]    - tweaked: FALSE
[18:03:38.070]    - call: NULL
[18:03:38.073] plan(): nbrOfWorkers() = 1
[18:03:38.075] plan(): Setting new future strategy stack:
[18:03:38.075] List of future strategies:
[18:03:38.075] 1. sequential:
[18:03:38.075]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.075]    - tweaked: FALSE
[18:03:38.075]    - call: plan(strategy, substitute = FALSE)
[18:03:38.076] plan(): nbrOfWorkers() = 1
[18:03:38.076] SequentialFuture started (and completed)
[18:03:38.077] - Launch lazy future ... done
[18:03:38.077] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[18:03:38.088] plan(): Setting new future strategy stack:
[18:03:38.088] List of future strategies:
[18:03:38.088] 1. multicore:
[18:03:38.088]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.088]    - tweaked: FALSE
[18:03:38.088]    - call: plan(strategy, substitute = FALSE)
[18:03:38.095] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x59a4af829bb0>
Arguments '...' exists: TRUE
[18:03:38.096] getGlobalsAndPackages() ...
[18:03:38.096] Searching for globals...
[18:03:38.099] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[18:03:38.099] Searching for globals ... DONE
[18:03:38.099] Resolving globals: FALSE
[18:03:38.099] Tweak future expression to call with '...' arguments ...
[18:03:38.100] {
[18:03:38.100]     do.call(function(...) {
[18:03:38.100]         sum(x, ...)
[18:03:38.100]     }, args = future.call.arguments)
[18:03:38.100] }
[18:03:38.100] Tweak future expression to call with '...' arguments ... DONE
[18:03:38.101] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:38.102] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[18:03:38.103] - globals: [2] ‘x’, ‘future.call.arguments’
[18:03:38.103] 
[18:03:38.103] getGlobalsAndPackages() ... DONE
[18:03:38.104] run() for ‘Future’ ...
[18:03:38.104] - state: ‘created’
[18:03:38.104] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:38.112] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:38.112] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:38.112]   - Field: ‘label’
[18:03:38.112]   - Field: ‘local’
[18:03:38.113]   - Field: ‘owner’
[18:03:38.113]   - Field: ‘envir’
[18:03:38.113]   - Field: ‘workers’
[18:03:38.113]   - Field: ‘packages’
[18:03:38.114]   - Field: ‘gc’
[18:03:38.114]   - Field: ‘job’
[18:03:38.114]   - Field: ‘conditions’
[18:03:38.114]   - Field: ‘expr’
[18:03:38.114]   - Field: ‘uuid’
[18:03:38.115]   - Field: ‘seed’
[18:03:38.115]   - Field: ‘version’
[18:03:38.115]   - Field: ‘result’
[18:03:38.115]   - Field: ‘asynchronous’
[18:03:38.115]   - Field: ‘calls’
[18:03:38.116]   - Field: ‘globals’
[18:03:38.116]   - Field: ‘stdout’
[18:03:38.116]   - Field: ‘earlySignal’
[18:03:38.116]   - Field: ‘lazy’
[18:03:38.116]   - Field: ‘state’
[18:03:38.117] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:38.117] - Launch lazy future ...
[18:03:38.119] Packages needed by the future expression (n = 0): <none>
[18:03:38.119] Packages needed by future strategies (n = 0): <none>
[18:03:38.120] {
[18:03:38.120]     {
[18:03:38.120]         {
[18:03:38.120]             ...future.startTime <- base::Sys.time()
[18:03:38.120]             {
[18:03:38.120]                 {
[18:03:38.120]                   {
[18:03:38.120]                     {
[18:03:38.120]                       base::local({
[18:03:38.120]                         has_future <- base::requireNamespace("future", 
[18:03:38.120]                           quietly = TRUE)
[18:03:38.120]                         if (has_future) {
[18:03:38.120]                           ns <- base::getNamespace("future")
[18:03:38.120]                           version <- ns[[".package"]][["version"]]
[18:03:38.120]                           if (is.null(version)) 
[18:03:38.120]                             version <- utils::packageVersion("future")
[18:03:38.120]                         }
[18:03:38.120]                         else {
[18:03:38.120]                           version <- NULL
[18:03:38.120]                         }
[18:03:38.120]                         if (!has_future || version < "1.8.0") {
[18:03:38.120]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.120]                             "", base::R.version$version.string), 
[18:03:38.120]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:38.120]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.120]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.120]                               "release", "version")], collapse = " "), 
[18:03:38.120]                             hostname = base::Sys.info()[["nodename"]])
[18:03:38.120]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.120]                             info)
[18:03:38.120]                           info <- base::paste(info, collapse = "; ")
[18:03:38.120]                           if (!has_future) {
[18:03:38.120]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.120]                               info)
[18:03:38.120]                           }
[18:03:38.120]                           else {
[18:03:38.120]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.120]                               info, version)
[18:03:38.120]                           }
[18:03:38.120]                           base::stop(msg)
[18:03:38.120]                         }
[18:03:38.120]                       })
[18:03:38.120]                     }
[18:03:38.120]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:38.120]                     base::options(mc.cores = 1L)
[18:03:38.120]                   }
[18:03:38.120]                   ...future.strategy.old <- future::plan("list")
[18:03:38.120]                   options(future.plan = NULL)
[18:03:38.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.120]                 }
[18:03:38.120]                 ...future.workdir <- getwd()
[18:03:38.120]             }
[18:03:38.120]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.120]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.120]         }
[18:03:38.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.120]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.120]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.120]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.120]             base::names(...future.oldOptions))
[18:03:38.120]     }
[18:03:38.120]     if (FALSE) {
[18:03:38.120]     }
[18:03:38.120]     else {
[18:03:38.120]         if (TRUE) {
[18:03:38.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.120]                 open = "w")
[18:03:38.120]         }
[18:03:38.120]         else {
[18:03:38.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.120]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.120]         }
[18:03:38.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.120]             base::sink(type = "output", split = FALSE)
[18:03:38.120]             base::close(...future.stdout)
[18:03:38.120]         }, add = TRUE)
[18:03:38.120]     }
[18:03:38.120]     ...future.frame <- base::sys.nframe()
[18:03:38.120]     ...future.conditions <- base::list()
[18:03:38.120]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.120]     if (FALSE) {
[18:03:38.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.120]     }
[18:03:38.120]     ...future.result <- base::tryCatch({
[18:03:38.120]         base::withCallingHandlers({
[18:03:38.120]             ...future.value <- base::withVisible(base::local({
[18:03:38.120]                 withCallingHandlers({
[18:03:38.120]                   {
[18:03:38.120]                     do.call(function(...) {
[18:03:38.120]                       sum(x, ...)
[18:03:38.120]                     }, args = future.call.arguments)
[18:03:38.120]                   }
[18:03:38.120]                 }, immediateCondition = function(cond) {
[18:03:38.120]                   save_rds <- function (object, pathname, ...) 
[18:03:38.120]                   {
[18:03:38.120]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:38.120]                     if (file_test("-f", pathname_tmp)) {
[18:03:38.120]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.120]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:38.120]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.120]                         fi_tmp[["mtime"]])
[18:03:38.120]                     }
[18:03:38.120]                     tryCatch({
[18:03:38.120]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:38.120]                     }, error = function(ex) {
[18:03:38.120]                       msg <- conditionMessage(ex)
[18:03:38.120]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.120]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:38.120]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.120]                         fi_tmp[["mtime"]], msg)
[18:03:38.120]                       ex$message <- msg
[18:03:38.120]                       stop(ex)
[18:03:38.120]                     })
[18:03:38.120]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:38.120]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:38.120]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:38.120]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.120]                       fi <- file.info(pathname)
[18:03:38.120]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:38.120]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.120]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:38.120]                         fi[["size"]], fi[["mtime"]])
[18:03:38.120]                       stop(msg)
[18:03:38.120]                     }
[18:03:38.120]                     invisible(pathname)
[18:03:38.120]                   }
[18:03:38.120]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:38.120]                     rootPath = tempdir()) 
[18:03:38.120]                   {
[18:03:38.120]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:38.120]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:38.120]                       tmpdir = path, fileext = ".rds")
[18:03:38.120]                     save_rds(obj, file)
[18:03:38.120]                   }
[18:03:38.120]                   saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")
[18:03:38.120]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.120]                   {
[18:03:38.120]                     inherits <- base::inherits
[18:03:38.120]                     invokeRestart <- base::invokeRestart
[18:03:38.120]                     is.null <- base::is.null
[18:03:38.120]                     muffled <- FALSE
[18:03:38.120]                     if (inherits(cond, "message")) {
[18:03:38.120]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:38.120]                       if (muffled) 
[18:03:38.120]                         invokeRestart("muffleMessage")
[18:03:38.120]                     }
[18:03:38.120]                     else if (inherits(cond, "warning")) {
[18:03:38.120]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:38.120]                       if (muffled) 
[18:03:38.120]                         invokeRestart("muffleWarning")
[18:03:38.120]                     }
[18:03:38.120]                     else if (inherits(cond, "condition")) {
[18:03:38.120]                       if (!is.null(pattern)) {
[18:03:38.120]                         computeRestarts <- base::computeRestarts
[18:03:38.120]                         grepl <- base::grepl
[18:03:38.120]                         restarts <- computeRestarts(cond)
[18:03:38.120]                         for (restart in restarts) {
[18:03:38.120]                           name <- restart$name
[18:03:38.120]                           if (is.null(name)) 
[18:03:38.120]                             next
[18:03:38.120]                           if (!grepl(pattern, name)) 
[18:03:38.120]                             next
[18:03:38.120]                           invokeRestart(restart)
[18:03:38.120]                           muffled <- TRUE
[18:03:38.120]                           break
[18:03:38.120]                         }
[18:03:38.120]                       }
[18:03:38.120]                     }
[18:03:38.120]                     invisible(muffled)
[18:03:38.120]                   }
[18:03:38.120]                   muffleCondition(cond)
[18:03:38.120]                 })
[18:03:38.120]             }))
[18:03:38.120]             future::FutureResult(value = ...future.value$value, 
[18:03:38.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.120]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.120]                     ...future.globalenv.names))
[18:03:38.120]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.120]         }, condition = base::local({
[18:03:38.120]             c <- base::c
[18:03:38.120]             inherits <- base::inherits
[18:03:38.120]             invokeRestart <- base::invokeRestart
[18:03:38.120]             length <- base::length
[18:03:38.120]             list <- base::list
[18:03:38.120]             seq.int <- base::seq.int
[18:03:38.120]             signalCondition <- base::signalCondition
[18:03:38.120]             sys.calls <- base::sys.calls
[18:03:38.120]             `[[` <- base::`[[`
[18:03:38.120]             `+` <- base::`+`
[18:03:38.120]             `<<-` <- base::`<<-`
[18:03:38.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.120]                   3L)]
[18:03:38.120]             }
[18:03:38.120]             function(cond) {
[18:03:38.120]                 is_error <- inherits(cond, "error")
[18:03:38.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.120]                   NULL)
[18:03:38.120]                 if (is_error) {
[18:03:38.120]                   sessionInformation <- function() {
[18:03:38.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.120]                       search = base::search(), system = base::Sys.info())
[18:03:38.120]                   }
[18:03:38.120]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.120]                     cond$call), session = sessionInformation(), 
[18:03:38.120]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.120]                   signalCondition(cond)
[18:03:38.120]                 }
[18:03:38.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.120]                 "immediateCondition"))) {
[18:03:38.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.120]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.120]                   if (TRUE && !signal) {
[18:03:38.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.120]                     {
[18:03:38.120]                       inherits <- base::inherits
[18:03:38.120]                       invokeRestart <- base::invokeRestart
[18:03:38.120]                       is.null <- base::is.null
[18:03:38.120]                       muffled <- FALSE
[18:03:38.120]                       if (inherits(cond, "message")) {
[18:03:38.120]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.120]                         if (muffled) 
[18:03:38.120]                           invokeRestart("muffleMessage")
[18:03:38.120]                       }
[18:03:38.120]                       else if (inherits(cond, "warning")) {
[18:03:38.120]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.120]                         if (muffled) 
[18:03:38.120]                           invokeRestart("muffleWarning")
[18:03:38.120]                       }
[18:03:38.120]                       else if (inherits(cond, "condition")) {
[18:03:38.120]                         if (!is.null(pattern)) {
[18:03:38.120]                           computeRestarts <- base::computeRestarts
[18:03:38.120]                           grepl <- base::grepl
[18:03:38.120]                           restarts <- computeRestarts(cond)
[18:03:38.120]                           for (restart in restarts) {
[18:03:38.120]                             name <- restart$name
[18:03:38.120]                             if (is.null(name)) 
[18:03:38.120]                               next
[18:03:38.120]                             if (!grepl(pattern, name)) 
[18:03:38.120]                               next
[18:03:38.120]                             invokeRestart(restart)
[18:03:38.120]                             muffled <- TRUE
[18:03:38.120]                             break
[18:03:38.120]                           }
[18:03:38.120]                         }
[18:03:38.120]                       }
[18:03:38.120]                       invisible(muffled)
[18:03:38.120]                     }
[18:03:38.120]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.120]                   }
[18:03:38.120]                 }
[18:03:38.120]                 else {
[18:03:38.120]                   if (TRUE) {
[18:03:38.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.120]                     {
[18:03:38.120]                       inherits <- base::inherits
[18:03:38.120]                       invokeRestart <- base::invokeRestart
[18:03:38.120]                       is.null <- base::is.null
[18:03:38.120]                       muffled <- FALSE
[18:03:38.120]                       if (inherits(cond, "message")) {
[18:03:38.120]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.120]                         if (muffled) 
[18:03:38.120]                           invokeRestart("muffleMessage")
[18:03:38.120]                       }
[18:03:38.120]                       else if (inherits(cond, "warning")) {
[18:03:38.120]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.120]                         if (muffled) 
[18:03:38.120]                           invokeRestart("muffleWarning")
[18:03:38.120]                       }
[18:03:38.120]                       else if (inherits(cond, "condition")) {
[18:03:38.120]                         if (!is.null(pattern)) {
[18:03:38.120]                           computeRestarts <- base::computeRestarts
[18:03:38.120]                           grepl <- base::grepl
[18:03:38.120]                           restarts <- computeRestarts(cond)
[18:03:38.120]                           for (restart in restarts) {
[18:03:38.120]                             name <- restart$name
[18:03:38.120]                             if (is.null(name)) 
[18:03:38.120]                               next
[18:03:38.120]                             if (!grepl(pattern, name)) 
[18:03:38.120]                               next
[18:03:38.120]                             invokeRestart(restart)
[18:03:38.120]                             muffled <- TRUE
[18:03:38.120]                             break
[18:03:38.120]                           }
[18:03:38.120]                         }
[18:03:38.120]                       }
[18:03:38.120]                       invisible(muffled)
[18:03:38.120]                     }
[18:03:38.120]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.120]                   }
[18:03:38.120]                 }
[18:03:38.120]             }
[18:03:38.120]         }))
[18:03:38.120]     }, error = function(ex) {
[18:03:38.120]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.120]                 ...future.rng), started = ...future.startTime, 
[18:03:38.120]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.120]             version = "1.8"), class = "FutureResult")
[18:03:38.120]     }, finally = {
[18:03:38.120]         if (!identical(...future.workdir, getwd())) 
[18:03:38.120]             setwd(...future.workdir)
[18:03:38.120]         {
[18:03:38.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.120]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.120]             }
[18:03:38.120]             base::options(...future.oldOptions)
[18:03:38.120]             if (.Platform$OS.type == "windows") {
[18:03:38.120]                 old_names <- names(...future.oldEnvVars)
[18:03:38.120]                 envs <- base::Sys.getenv()
[18:03:38.120]                 names <- names(envs)
[18:03:38.120]                 common <- intersect(names, old_names)
[18:03:38.120]                 added <- setdiff(names, old_names)
[18:03:38.120]                 removed <- setdiff(old_names, names)
[18:03:38.120]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.120]                   envs[common]]
[18:03:38.120]                 NAMES <- toupper(changed)
[18:03:38.120]                 args <- list()
[18:03:38.120]                 for (kk in seq_along(NAMES)) {
[18:03:38.120]                   name <- changed[[kk]]
[18:03:38.120]                   NAME <- NAMES[[kk]]
[18:03:38.120]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.120]                     next
[18:03:38.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.120]                 }
[18:03:38.120]                 NAMES <- toupper(added)
[18:03:38.120]                 for (kk in seq_along(NAMES)) {
[18:03:38.120]                   name <- added[[kk]]
[18:03:38.120]                   NAME <- NAMES[[kk]]
[18:03:38.120]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.120]                     next
[18:03:38.120]                   args[[name]] <- ""
[18:03:38.120]                 }
[18:03:38.120]                 NAMES <- toupper(removed)
[18:03:38.120]                 for (kk in seq_along(NAMES)) {
[18:03:38.120]                   name <- removed[[kk]]
[18:03:38.120]                   NAME <- NAMES[[kk]]
[18:03:38.120]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.120]                     next
[18:03:38.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.120]                 }
[18:03:38.120]                 if (length(args) > 0) 
[18:03:38.120]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.120]             }
[18:03:38.120]             else {
[18:03:38.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.120]             }
[18:03:38.120]             {
[18:03:38.120]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.120]                   0L) {
[18:03:38.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.120]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.120]                   base::options(opts)
[18:03:38.120]                 }
[18:03:38.120]                 {
[18:03:38.120]                   {
[18:03:38.120]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:38.120]                     NULL
[18:03:38.120]                   }
[18:03:38.120]                   options(future.plan = NULL)
[18:03:38.120]                   if (is.na(NA_character_)) 
[18:03:38.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.120]                     .init = FALSE)
[18:03:38.120]                 }
[18:03:38.120]             }
[18:03:38.120]         }
[18:03:38.120]     })
[18:03:38.120]     if (TRUE) {
[18:03:38.120]         base::sink(type = "output", split = FALSE)
[18:03:38.120]         if (TRUE) {
[18:03:38.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.120]         }
[18:03:38.120]         else {
[18:03:38.120]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.120]         }
[18:03:38.120]         base::close(...future.stdout)
[18:03:38.120]         ...future.stdout <- NULL
[18:03:38.120]     }
[18:03:38.120]     ...future.result$conditions <- ...future.conditions
[18:03:38.120]     ...future.result$finished <- base::Sys.time()
[18:03:38.120]     ...future.result
[18:03:38.120] }
[18:03:38.125] assign_globals() ...
[18:03:38.125] List of 2
[18:03:38.125]  $ x                    : int [1:2] 1 2
[18:03:38.125]  $ future.call.arguments:List of 1
[18:03:38.125]   ..$ : num 3
[18:03:38.125]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:03:38.125]  - attr(*, "where")=List of 2
[18:03:38.125]   ..$ x                    :<environment: R_EmptyEnv> 
[18:03:38.125]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[18:03:38.125]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.125]  - attr(*, "resolved")= logi FALSE
[18:03:38.125]  - attr(*, "total_size")= num 112
[18:03:38.125]  - attr(*, "already-done")= logi TRUE
[18:03:38.133] - copied ‘x’ to environment
[18:03:38.133] - copied ‘future.call.arguments’ to environment
[18:03:38.133] assign_globals() ... done
[18:03:38.134] requestCore(): workers = 2
[18:03:38.138] MulticoreFuture started
[18:03:38.139] - Launch lazy future ... done
[18:03:38.140] run() for ‘MulticoreFuture’ ... done
[18:03:38.142] result() for MulticoreFuture ...
[18:03:38.144] plan(): Setting new future strategy stack:
[18:03:38.145] List of future strategies:
[18:03:38.145] 1. sequential:
[18:03:38.145]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.145]    - tweaked: FALSE
[18:03:38.145]    - call: NULL
[18:03:38.147] plan(): nbrOfWorkers() = 1
[18:03:38.151] plan(): Setting new future strategy stack:
[18:03:38.151] List of future strategies:
[18:03:38.151] 1. multicore:
[18:03:38.151]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.151]    - tweaked: FALSE
[18:03:38.151]    - call: plan(strategy, substitute = FALSE)
[18:03:38.169] plan(): nbrOfWorkers() = 2
[18:03:38.184] result() for MulticoreFuture ...
[18:03:38.185] result() for MulticoreFuture ... done
[18:03:38.185] result() for MulticoreFuture ... done
[18:03:38.185] result() for MulticoreFuture ...
[18:03:38.186] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x59a4afbb1398>
Arguments '...' exists: TRUE
[18:03:38.187] getGlobalsAndPackages() ...
[18:03:38.188] Searching for globals...
[18:03:38.191] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[18:03:38.192] Searching for globals ... DONE
[18:03:38.192] Resolving globals: FALSE
[18:03:38.192] Tweak future expression to call with '...' arguments ...
[18:03:38.193] {
[18:03:38.193]     do.call(function(...) {
[18:03:38.193]         sum(x, ...)
[18:03:38.193]     }, args = future.call.arguments)
[18:03:38.193] }
[18:03:38.193] Tweak future expression to call with '...' arguments ... DONE
[18:03:38.194] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:38.195] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[18:03:38.196] - globals: [2] ‘x’, ‘future.call.arguments’
[18:03:38.196] 
[18:03:38.196] getGlobalsAndPackages() ... DONE
[18:03:38.197] run() for ‘Future’ ...
[18:03:38.197] - state: ‘created’
[18:03:38.198] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:38.205] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:38.205] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:38.205]   - Field: ‘label’
[18:03:38.206]   - Field: ‘local’
[18:03:38.206]   - Field: ‘owner’
[18:03:38.206]   - Field: ‘envir’
[18:03:38.206]   - Field: ‘workers’
[18:03:38.207]   - Field: ‘packages’
[18:03:38.207]   - Field: ‘gc’
[18:03:38.207]   - Field: ‘job’
[18:03:38.207]   - Field: ‘conditions’
[18:03:38.207]   - Field: ‘expr’
[18:03:38.208]   - Field: ‘uuid’
[18:03:38.208]   - Field: ‘seed’
[18:03:38.208]   - Field: ‘version’
[18:03:38.208]   - Field: ‘result’
[18:03:38.209]   - Field: ‘asynchronous’
[18:03:38.209]   - Field: ‘calls’
[18:03:38.209]   - Field: ‘globals’
[18:03:38.209]   - Field: ‘stdout’
[18:03:38.209]   - Field: ‘earlySignal’
[18:03:38.210]   - Field: ‘lazy’
[18:03:38.210]   - Field: ‘state’
[18:03:38.210] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:38.210] - Launch lazy future ...
[18:03:38.211] Packages needed by the future expression (n = 0): <none>
[18:03:38.211] Packages needed by future strategies (n = 0): <none>
[18:03:38.212] {
[18:03:38.212]     {
[18:03:38.212]         {
[18:03:38.212]             ...future.startTime <- base::Sys.time()
[18:03:38.212]             {
[18:03:38.212]                 {
[18:03:38.212]                   {
[18:03:38.212]                     {
[18:03:38.212]                       base::local({
[18:03:38.212]                         has_future <- base::requireNamespace("future", 
[18:03:38.212]                           quietly = TRUE)
[18:03:38.212]                         if (has_future) {
[18:03:38.212]                           ns <- base::getNamespace("future")
[18:03:38.212]                           version <- ns[[".package"]][["version"]]
[18:03:38.212]                           if (is.null(version)) 
[18:03:38.212]                             version <- utils::packageVersion("future")
[18:03:38.212]                         }
[18:03:38.212]                         else {
[18:03:38.212]                           version <- NULL
[18:03:38.212]                         }
[18:03:38.212]                         if (!has_future || version < "1.8.0") {
[18:03:38.212]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.212]                             "", base::R.version$version.string), 
[18:03:38.212]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:38.212]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.212]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.212]                               "release", "version")], collapse = " "), 
[18:03:38.212]                             hostname = base::Sys.info()[["nodename"]])
[18:03:38.212]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.212]                             info)
[18:03:38.212]                           info <- base::paste(info, collapse = "; ")
[18:03:38.212]                           if (!has_future) {
[18:03:38.212]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.212]                               info)
[18:03:38.212]                           }
[18:03:38.212]                           else {
[18:03:38.212]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.212]                               info, version)
[18:03:38.212]                           }
[18:03:38.212]                           base::stop(msg)
[18:03:38.212]                         }
[18:03:38.212]                       })
[18:03:38.212]                     }
[18:03:38.212]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:38.212]                     base::options(mc.cores = 1L)
[18:03:38.212]                   }
[18:03:38.212]                   ...future.strategy.old <- future::plan("list")
[18:03:38.212]                   options(future.plan = NULL)
[18:03:38.212]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.212]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.212]                 }
[18:03:38.212]                 ...future.workdir <- getwd()
[18:03:38.212]             }
[18:03:38.212]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.212]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.212]         }
[18:03:38.212]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.212]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.212]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.212]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.212]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.212]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.212]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.212]             base::names(...future.oldOptions))
[18:03:38.212]     }
[18:03:38.212]     if (FALSE) {
[18:03:38.212]     }
[18:03:38.212]     else {
[18:03:38.212]         if (TRUE) {
[18:03:38.212]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.212]                 open = "w")
[18:03:38.212]         }
[18:03:38.212]         else {
[18:03:38.212]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.212]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.212]         }
[18:03:38.212]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.212]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.212]             base::sink(type = "output", split = FALSE)
[18:03:38.212]             base::close(...future.stdout)
[18:03:38.212]         }, add = TRUE)
[18:03:38.212]     }
[18:03:38.212]     ...future.frame <- base::sys.nframe()
[18:03:38.212]     ...future.conditions <- base::list()
[18:03:38.212]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.212]     if (FALSE) {
[18:03:38.212]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.212]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.212]     }
[18:03:38.212]     ...future.result <- base::tryCatch({
[18:03:38.212]         base::withCallingHandlers({
[18:03:38.212]             ...future.value <- base::withVisible(base::local({
[18:03:38.212]                 withCallingHandlers({
[18:03:38.212]                   {
[18:03:38.212]                     do.call(function(...) {
[18:03:38.212]                       sum(x, ...)
[18:03:38.212]                     }, args = future.call.arguments)
[18:03:38.212]                   }
[18:03:38.212]                 }, immediateCondition = function(cond) {
[18:03:38.212]                   save_rds <- function (object, pathname, ...) 
[18:03:38.212]                   {
[18:03:38.212]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:38.212]                     if (file_test("-f", pathname_tmp)) {
[18:03:38.212]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.212]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:38.212]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.212]                         fi_tmp[["mtime"]])
[18:03:38.212]                     }
[18:03:38.212]                     tryCatch({
[18:03:38.212]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:38.212]                     }, error = function(ex) {
[18:03:38.212]                       msg <- conditionMessage(ex)
[18:03:38.212]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.212]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:38.212]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.212]                         fi_tmp[["mtime"]], msg)
[18:03:38.212]                       ex$message <- msg
[18:03:38.212]                       stop(ex)
[18:03:38.212]                     })
[18:03:38.212]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:38.212]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:38.212]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:38.212]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.212]                       fi <- file.info(pathname)
[18:03:38.212]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:38.212]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.212]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:38.212]                         fi[["size"]], fi[["mtime"]])
[18:03:38.212]                       stop(msg)
[18:03:38.212]                     }
[18:03:38.212]                     invisible(pathname)
[18:03:38.212]                   }
[18:03:38.212]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:38.212]                     rootPath = tempdir()) 
[18:03:38.212]                   {
[18:03:38.212]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:38.212]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:38.212]                       tmpdir = path, fileext = ".rds")
[18:03:38.212]                     save_rds(obj, file)
[18:03:38.212]                   }
[18:03:38.212]                   saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")
[18:03:38.212]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.212]                   {
[18:03:38.212]                     inherits <- base::inherits
[18:03:38.212]                     invokeRestart <- base::invokeRestart
[18:03:38.212]                     is.null <- base::is.null
[18:03:38.212]                     muffled <- FALSE
[18:03:38.212]                     if (inherits(cond, "message")) {
[18:03:38.212]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:38.212]                       if (muffled) 
[18:03:38.212]                         invokeRestart("muffleMessage")
[18:03:38.212]                     }
[18:03:38.212]                     else if (inherits(cond, "warning")) {
[18:03:38.212]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:38.212]                       if (muffled) 
[18:03:38.212]                         invokeRestart("muffleWarning")
[18:03:38.212]                     }
[18:03:38.212]                     else if (inherits(cond, "condition")) {
[18:03:38.212]                       if (!is.null(pattern)) {
[18:03:38.212]                         computeRestarts <- base::computeRestarts
[18:03:38.212]                         grepl <- base::grepl
[18:03:38.212]                         restarts <- computeRestarts(cond)
[18:03:38.212]                         for (restart in restarts) {
[18:03:38.212]                           name <- restart$name
[18:03:38.212]                           if (is.null(name)) 
[18:03:38.212]                             next
[18:03:38.212]                           if (!grepl(pattern, name)) 
[18:03:38.212]                             next
[18:03:38.212]                           invokeRestart(restart)
[18:03:38.212]                           muffled <- TRUE
[18:03:38.212]                           break
[18:03:38.212]                         }
[18:03:38.212]                       }
[18:03:38.212]                     }
[18:03:38.212]                     invisible(muffled)
[18:03:38.212]                   }
[18:03:38.212]                   muffleCondition(cond)
[18:03:38.212]                 })
[18:03:38.212]             }))
[18:03:38.212]             future::FutureResult(value = ...future.value$value, 
[18:03:38.212]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.212]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.212]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.212]                     ...future.globalenv.names))
[18:03:38.212]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.212]         }, condition = base::local({
[18:03:38.212]             c <- base::c
[18:03:38.212]             inherits <- base::inherits
[18:03:38.212]             invokeRestart <- base::invokeRestart
[18:03:38.212]             length <- base::length
[18:03:38.212]             list <- base::list
[18:03:38.212]             seq.int <- base::seq.int
[18:03:38.212]             signalCondition <- base::signalCondition
[18:03:38.212]             sys.calls <- base::sys.calls
[18:03:38.212]             `[[` <- base::`[[`
[18:03:38.212]             `+` <- base::`+`
[18:03:38.212]             `<<-` <- base::`<<-`
[18:03:38.212]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.212]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.212]                   3L)]
[18:03:38.212]             }
[18:03:38.212]             function(cond) {
[18:03:38.212]                 is_error <- inherits(cond, "error")
[18:03:38.212]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.212]                   NULL)
[18:03:38.212]                 if (is_error) {
[18:03:38.212]                   sessionInformation <- function() {
[18:03:38.212]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.212]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.212]                       search = base::search(), system = base::Sys.info())
[18:03:38.212]                   }
[18:03:38.212]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.212]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.212]                     cond$call), session = sessionInformation(), 
[18:03:38.212]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.212]                   signalCondition(cond)
[18:03:38.212]                 }
[18:03:38.212]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.212]                 "immediateCondition"))) {
[18:03:38.212]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.212]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.212]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.212]                   if (TRUE && !signal) {
[18:03:38.212]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.212]                     {
[18:03:38.212]                       inherits <- base::inherits
[18:03:38.212]                       invokeRestart <- base::invokeRestart
[18:03:38.212]                       is.null <- base::is.null
[18:03:38.212]                       muffled <- FALSE
[18:03:38.212]                       if (inherits(cond, "message")) {
[18:03:38.212]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.212]                         if (muffled) 
[18:03:38.212]                           invokeRestart("muffleMessage")
[18:03:38.212]                       }
[18:03:38.212]                       else if (inherits(cond, "warning")) {
[18:03:38.212]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.212]                         if (muffled) 
[18:03:38.212]                           invokeRestart("muffleWarning")
[18:03:38.212]                       }
[18:03:38.212]                       else if (inherits(cond, "condition")) {
[18:03:38.212]                         if (!is.null(pattern)) {
[18:03:38.212]                           computeRestarts <- base::computeRestarts
[18:03:38.212]                           grepl <- base::grepl
[18:03:38.212]                           restarts <- computeRestarts(cond)
[18:03:38.212]                           for (restart in restarts) {
[18:03:38.212]                             name <- restart$name
[18:03:38.212]                             if (is.null(name)) 
[18:03:38.212]                               next
[18:03:38.212]                             if (!grepl(pattern, name)) 
[18:03:38.212]                               next
[18:03:38.212]                             invokeRestart(restart)
[18:03:38.212]                             muffled <- TRUE
[18:03:38.212]                             break
[18:03:38.212]                           }
[18:03:38.212]                         }
[18:03:38.212]                       }
[18:03:38.212]                       invisible(muffled)
[18:03:38.212]                     }
[18:03:38.212]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.212]                   }
[18:03:38.212]                 }
[18:03:38.212]                 else {
[18:03:38.212]                   if (TRUE) {
[18:03:38.212]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.212]                     {
[18:03:38.212]                       inherits <- base::inherits
[18:03:38.212]                       invokeRestart <- base::invokeRestart
[18:03:38.212]                       is.null <- base::is.null
[18:03:38.212]                       muffled <- FALSE
[18:03:38.212]                       if (inherits(cond, "message")) {
[18:03:38.212]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.212]                         if (muffled) 
[18:03:38.212]                           invokeRestart("muffleMessage")
[18:03:38.212]                       }
[18:03:38.212]                       else if (inherits(cond, "warning")) {
[18:03:38.212]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.212]                         if (muffled) 
[18:03:38.212]                           invokeRestart("muffleWarning")
[18:03:38.212]                       }
[18:03:38.212]                       else if (inherits(cond, "condition")) {
[18:03:38.212]                         if (!is.null(pattern)) {
[18:03:38.212]                           computeRestarts <- base::computeRestarts
[18:03:38.212]                           grepl <- base::grepl
[18:03:38.212]                           restarts <- computeRestarts(cond)
[18:03:38.212]                           for (restart in restarts) {
[18:03:38.212]                             name <- restart$name
[18:03:38.212]                             if (is.null(name)) 
[18:03:38.212]                               next
[18:03:38.212]                             if (!grepl(pattern, name)) 
[18:03:38.212]                               next
[18:03:38.212]                             invokeRestart(restart)
[18:03:38.212]                             muffled <- TRUE
[18:03:38.212]                             break
[18:03:38.212]                           }
[18:03:38.212]                         }
[18:03:38.212]                       }
[18:03:38.212]                       invisible(muffled)
[18:03:38.212]                     }
[18:03:38.212]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.212]                   }
[18:03:38.212]                 }
[18:03:38.212]             }
[18:03:38.212]         }))
[18:03:38.212]     }, error = function(ex) {
[18:03:38.212]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.212]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.212]                 ...future.rng), started = ...future.startTime, 
[18:03:38.212]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.212]             version = "1.8"), class = "FutureResult")
[18:03:38.212]     }, finally = {
[18:03:38.212]         if (!identical(...future.workdir, getwd())) 
[18:03:38.212]             setwd(...future.workdir)
[18:03:38.212]         {
[18:03:38.212]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.212]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.212]             }
[18:03:38.212]             base::options(...future.oldOptions)
[18:03:38.212]             if (.Platform$OS.type == "windows") {
[18:03:38.212]                 old_names <- names(...future.oldEnvVars)
[18:03:38.212]                 envs <- base::Sys.getenv()
[18:03:38.212]                 names <- names(envs)
[18:03:38.212]                 common <- intersect(names, old_names)
[18:03:38.212]                 added <- setdiff(names, old_names)
[18:03:38.212]                 removed <- setdiff(old_names, names)
[18:03:38.212]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.212]                   envs[common]]
[18:03:38.212]                 NAMES <- toupper(changed)
[18:03:38.212]                 args <- list()
[18:03:38.212]                 for (kk in seq_along(NAMES)) {
[18:03:38.212]                   name <- changed[[kk]]
[18:03:38.212]                   NAME <- NAMES[[kk]]
[18:03:38.212]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.212]                     next
[18:03:38.212]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.212]                 }
[18:03:38.212]                 NAMES <- toupper(added)
[18:03:38.212]                 for (kk in seq_along(NAMES)) {
[18:03:38.212]                   name <- added[[kk]]
[18:03:38.212]                   NAME <- NAMES[[kk]]
[18:03:38.212]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.212]                     next
[18:03:38.212]                   args[[name]] <- ""
[18:03:38.212]                 }
[18:03:38.212]                 NAMES <- toupper(removed)
[18:03:38.212]                 for (kk in seq_along(NAMES)) {
[18:03:38.212]                   name <- removed[[kk]]
[18:03:38.212]                   NAME <- NAMES[[kk]]
[18:03:38.212]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.212]                     next
[18:03:38.212]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.212]                 }
[18:03:38.212]                 if (length(args) > 0) 
[18:03:38.212]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.212]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.212]             }
[18:03:38.212]             else {
[18:03:38.212]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.212]             }
[18:03:38.212]             {
[18:03:38.212]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.212]                   0L) {
[18:03:38.212]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.212]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.212]                   base::options(opts)
[18:03:38.212]                 }
[18:03:38.212]                 {
[18:03:38.212]                   {
[18:03:38.212]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:38.212]                     NULL
[18:03:38.212]                   }
[18:03:38.212]                   options(future.plan = NULL)
[18:03:38.212]                   if (is.na(NA_character_)) 
[18:03:38.212]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.212]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.212]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.212]                     .init = FALSE)
[18:03:38.212]                 }
[18:03:38.212]             }
[18:03:38.212]         }
[18:03:38.212]     })
[18:03:38.212]     if (TRUE) {
[18:03:38.212]         base::sink(type = "output", split = FALSE)
[18:03:38.212]         if (TRUE) {
[18:03:38.212]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.212]         }
[18:03:38.212]         else {
[18:03:38.212]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.212]         }
[18:03:38.212]         base::close(...future.stdout)
[18:03:38.212]         ...future.stdout <- NULL
[18:03:38.212]     }
[18:03:38.212]     ...future.result$conditions <- ...future.conditions
[18:03:38.212]     ...future.result$finished <- base::Sys.time()
[18:03:38.212]     ...future.result
[18:03:38.212] }
[18:03:38.217] assign_globals() ...
[18:03:38.217] List of 2
[18:03:38.217]  $ x                    : int [1:2] 1 2
[18:03:38.217]  $ future.call.arguments:List of 1
[18:03:38.217]   ..$ : num 3
[18:03:38.217]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:03:38.217]  - attr(*, "where")=List of 2
[18:03:38.217]   ..$ x                    :<environment: R_EmptyEnv> 
[18:03:38.217]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[18:03:38.217]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.217]  - attr(*, "resolved")= logi FALSE
[18:03:38.217]  - attr(*, "total_size")= num 112
[18:03:38.217]  - attr(*, "already-done")= logi TRUE
[18:03:38.225] - copied ‘x’ to environment
[18:03:38.225] - copied ‘future.call.arguments’ to environment
[18:03:38.225] assign_globals() ... done
[18:03:38.226] requestCore(): workers = 2
[18:03:38.229] MulticoreFuture started
[18:03:38.230] - Launch lazy future ... done
[18:03:38.230] run() for ‘MulticoreFuture’ ... done
[18:03:38.231] result() for MulticoreFuture ...
[18:03:38.231] plan(): Setting new future strategy stack:
[18:03:38.231] List of future strategies:
[18:03:38.231] 1. sequential:
[18:03:38.231]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.231]    - tweaked: FALSE
[18:03:38.231]    - call: NULL
[18:03:38.234] plan(): nbrOfWorkers() = 1
[18:03:38.238] plan(): Setting new future strategy stack:
[18:03:38.238] List of future strategies:
[18:03:38.238] 1. multicore:
[18:03:38.238]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.238]    - tweaked: FALSE
[18:03:38.238]    - call: plan(strategy, substitute = FALSE)
[18:03:38.247] plan(): nbrOfWorkers() = 2
[18:03:38.249] result() for MulticoreFuture ...
[18:03:38.249] result() for MulticoreFuture ... done
[18:03:38.250] result() for MulticoreFuture ... done
[18:03:38.250] result() for MulticoreFuture ...
[18:03:38.250] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x59a4afd7f3f8>
Arguments '...' exists: FALSE
[18:03:38.252] getGlobalsAndPackages() ...
[18:03:38.252] Searching for globals...
[18:03:38.256] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[18:03:38.256] Searching for globals ... DONE
[18:03:38.256] Resolving globals: FALSE
[18:03:38.257] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:38.258] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:38.259] - globals: [2] ‘x’, ‘y’
[18:03:38.259] 
[18:03:38.259] getGlobalsAndPackages() ... DONE
[18:03:38.260] run() for ‘Future’ ...
[18:03:38.260] - state: ‘created’
[18:03:38.260] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:38.268] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:38.268] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:38.268]   - Field: ‘label’
[18:03:38.268]   - Field: ‘local’
[18:03:38.269]   - Field: ‘owner’
[18:03:38.269]   - Field: ‘envir’
[18:03:38.269]   - Field: ‘workers’
[18:03:38.269]   - Field: ‘packages’
[18:03:38.270]   - Field: ‘gc’
[18:03:38.270]   - Field: ‘job’
[18:03:38.270]   - Field: ‘conditions’
[18:03:38.270]   - Field: ‘expr’
[18:03:38.271]   - Field: ‘uuid’
[18:03:38.271]   - Field: ‘seed’
[18:03:38.271]   - Field: ‘version’
[18:03:38.271]   - Field: ‘result’
[18:03:38.272]   - Field: ‘asynchronous’
[18:03:38.272]   - Field: ‘calls’
[18:03:38.272]   - Field: ‘globals’
[18:03:38.272]   - Field: ‘stdout’
[18:03:38.272]   - Field: ‘earlySignal’
[18:03:38.273]   - Field: ‘lazy’
[18:03:38.273]   - Field: ‘state’
[18:03:38.273] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:38.273] - Launch lazy future ...
[18:03:38.274] Packages needed by the future expression (n = 0): <none>
[18:03:38.274] Packages needed by future strategies (n = 0): <none>
[18:03:38.275] {
[18:03:38.275]     {
[18:03:38.275]         {
[18:03:38.275]             ...future.startTime <- base::Sys.time()
[18:03:38.275]             {
[18:03:38.275]                 {
[18:03:38.275]                   {
[18:03:38.275]                     {
[18:03:38.275]                       base::local({
[18:03:38.275]                         has_future <- base::requireNamespace("future", 
[18:03:38.275]                           quietly = TRUE)
[18:03:38.275]                         if (has_future) {
[18:03:38.275]                           ns <- base::getNamespace("future")
[18:03:38.275]                           version <- ns[[".package"]][["version"]]
[18:03:38.275]                           if (is.null(version)) 
[18:03:38.275]                             version <- utils::packageVersion("future")
[18:03:38.275]                         }
[18:03:38.275]                         else {
[18:03:38.275]                           version <- NULL
[18:03:38.275]                         }
[18:03:38.275]                         if (!has_future || version < "1.8.0") {
[18:03:38.275]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.275]                             "", base::R.version$version.string), 
[18:03:38.275]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:38.275]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.275]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.275]                               "release", "version")], collapse = " "), 
[18:03:38.275]                             hostname = base::Sys.info()[["nodename"]])
[18:03:38.275]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.275]                             info)
[18:03:38.275]                           info <- base::paste(info, collapse = "; ")
[18:03:38.275]                           if (!has_future) {
[18:03:38.275]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.275]                               info)
[18:03:38.275]                           }
[18:03:38.275]                           else {
[18:03:38.275]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.275]                               info, version)
[18:03:38.275]                           }
[18:03:38.275]                           base::stop(msg)
[18:03:38.275]                         }
[18:03:38.275]                       })
[18:03:38.275]                     }
[18:03:38.275]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:38.275]                     base::options(mc.cores = 1L)
[18:03:38.275]                   }
[18:03:38.275]                   ...future.strategy.old <- future::plan("list")
[18:03:38.275]                   options(future.plan = NULL)
[18:03:38.275]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.275]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.275]                 }
[18:03:38.275]                 ...future.workdir <- getwd()
[18:03:38.275]             }
[18:03:38.275]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.275]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.275]         }
[18:03:38.275]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.275]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.275]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.275]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.275]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.275]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.275]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.275]             base::names(...future.oldOptions))
[18:03:38.275]     }
[18:03:38.275]     if (FALSE) {
[18:03:38.275]     }
[18:03:38.275]     else {
[18:03:38.275]         if (TRUE) {
[18:03:38.275]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.275]                 open = "w")
[18:03:38.275]         }
[18:03:38.275]         else {
[18:03:38.275]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.275]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.275]         }
[18:03:38.275]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.275]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.275]             base::sink(type = "output", split = FALSE)
[18:03:38.275]             base::close(...future.stdout)
[18:03:38.275]         }, add = TRUE)
[18:03:38.275]     }
[18:03:38.275]     ...future.frame <- base::sys.nframe()
[18:03:38.275]     ...future.conditions <- base::list()
[18:03:38.275]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.275]     if (FALSE) {
[18:03:38.275]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.275]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.275]     }
[18:03:38.275]     ...future.result <- base::tryCatch({
[18:03:38.275]         base::withCallingHandlers({
[18:03:38.275]             ...future.value <- base::withVisible(base::local({
[18:03:38.275]                 withCallingHandlers({
[18:03:38.275]                   {
[18:03:38.275]                     sum(x, y)
[18:03:38.275]                   }
[18:03:38.275]                 }, immediateCondition = function(cond) {
[18:03:38.275]                   save_rds <- function (object, pathname, ...) 
[18:03:38.275]                   {
[18:03:38.275]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:38.275]                     if (file_test("-f", pathname_tmp)) {
[18:03:38.275]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.275]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:38.275]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.275]                         fi_tmp[["mtime"]])
[18:03:38.275]                     }
[18:03:38.275]                     tryCatch({
[18:03:38.275]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:38.275]                     }, error = function(ex) {
[18:03:38.275]                       msg <- conditionMessage(ex)
[18:03:38.275]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.275]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:38.275]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.275]                         fi_tmp[["mtime"]], msg)
[18:03:38.275]                       ex$message <- msg
[18:03:38.275]                       stop(ex)
[18:03:38.275]                     })
[18:03:38.275]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:38.275]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:38.275]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:38.275]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.275]                       fi <- file.info(pathname)
[18:03:38.275]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:38.275]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.275]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:38.275]                         fi[["size"]], fi[["mtime"]])
[18:03:38.275]                       stop(msg)
[18:03:38.275]                     }
[18:03:38.275]                     invisible(pathname)
[18:03:38.275]                   }
[18:03:38.275]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:38.275]                     rootPath = tempdir()) 
[18:03:38.275]                   {
[18:03:38.275]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:38.275]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:38.275]                       tmpdir = path, fileext = ".rds")
[18:03:38.275]                     save_rds(obj, file)
[18:03:38.275]                   }
[18:03:38.275]                   saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")
[18:03:38.275]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.275]                   {
[18:03:38.275]                     inherits <- base::inherits
[18:03:38.275]                     invokeRestart <- base::invokeRestart
[18:03:38.275]                     is.null <- base::is.null
[18:03:38.275]                     muffled <- FALSE
[18:03:38.275]                     if (inherits(cond, "message")) {
[18:03:38.275]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:38.275]                       if (muffled) 
[18:03:38.275]                         invokeRestart("muffleMessage")
[18:03:38.275]                     }
[18:03:38.275]                     else if (inherits(cond, "warning")) {
[18:03:38.275]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:38.275]                       if (muffled) 
[18:03:38.275]                         invokeRestart("muffleWarning")
[18:03:38.275]                     }
[18:03:38.275]                     else if (inherits(cond, "condition")) {
[18:03:38.275]                       if (!is.null(pattern)) {
[18:03:38.275]                         computeRestarts <- base::computeRestarts
[18:03:38.275]                         grepl <- base::grepl
[18:03:38.275]                         restarts <- computeRestarts(cond)
[18:03:38.275]                         for (restart in restarts) {
[18:03:38.275]                           name <- restart$name
[18:03:38.275]                           if (is.null(name)) 
[18:03:38.275]                             next
[18:03:38.275]                           if (!grepl(pattern, name)) 
[18:03:38.275]                             next
[18:03:38.275]                           invokeRestart(restart)
[18:03:38.275]                           muffled <- TRUE
[18:03:38.275]                           break
[18:03:38.275]                         }
[18:03:38.275]                       }
[18:03:38.275]                     }
[18:03:38.275]                     invisible(muffled)
[18:03:38.275]                   }
[18:03:38.275]                   muffleCondition(cond)
[18:03:38.275]                 })
[18:03:38.275]             }))
[18:03:38.275]             future::FutureResult(value = ...future.value$value, 
[18:03:38.275]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.275]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.275]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.275]                     ...future.globalenv.names))
[18:03:38.275]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.275]         }, condition = base::local({
[18:03:38.275]             c <- base::c
[18:03:38.275]             inherits <- base::inherits
[18:03:38.275]             invokeRestart <- base::invokeRestart
[18:03:38.275]             length <- base::length
[18:03:38.275]             list <- base::list
[18:03:38.275]             seq.int <- base::seq.int
[18:03:38.275]             signalCondition <- base::signalCondition
[18:03:38.275]             sys.calls <- base::sys.calls
[18:03:38.275]             `[[` <- base::`[[`
[18:03:38.275]             `+` <- base::`+`
[18:03:38.275]             `<<-` <- base::`<<-`
[18:03:38.275]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.275]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.275]                   3L)]
[18:03:38.275]             }
[18:03:38.275]             function(cond) {
[18:03:38.275]                 is_error <- inherits(cond, "error")
[18:03:38.275]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.275]                   NULL)
[18:03:38.275]                 if (is_error) {
[18:03:38.275]                   sessionInformation <- function() {
[18:03:38.275]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.275]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.275]                       search = base::search(), system = base::Sys.info())
[18:03:38.275]                   }
[18:03:38.275]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.275]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.275]                     cond$call), session = sessionInformation(), 
[18:03:38.275]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.275]                   signalCondition(cond)
[18:03:38.275]                 }
[18:03:38.275]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.275]                 "immediateCondition"))) {
[18:03:38.275]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.275]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.275]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.275]                   if (TRUE && !signal) {
[18:03:38.275]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.275]                     {
[18:03:38.275]                       inherits <- base::inherits
[18:03:38.275]                       invokeRestart <- base::invokeRestart
[18:03:38.275]                       is.null <- base::is.null
[18:03:38.275]                       muffled <- FALSE
[18:03:38.275]                       if (inherits(cond, "message")) {
[18:03:38.275]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.275]                         if (muffled) 
[18:03:38.275]                           invokeRestart("muffleMessage")
[18:03:38.275]                       }
[18:03:38.275]                       else if (inherits(cond, "warning")) {
[18:03:38.275]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.275]                         if (muffled) 
[18:03:38.275]                           invokeRestart("muffleWarning")
[18:03:38.275]                       }
[18:03:38.275]                       else if (inherits(cond, "condition")) {
[18:03:38.275]                         if (!is.null(pattern)) {
[18:03:38.275]                           computeRestarts <- base::computeRestarts
[18:03:38.275]                           grepl <- base::grepl
[18:03:38.275]                           restarts <- computeRestarts(cond)
[18:03:38.275]                           for (restart in restarts) {
[18:03:38.275]                             name <- restart$name
[18:03:38.275]                             if (is.null(name)) 
[18:03:38.275]                               next
[18:03:38.275]                             if (!grepl(pattern, name)) 
[18:03:38.275]                               next
[18:03:38.275]                             invokeRestart(restart)
[18:03:38.275]                             muffled <- TRUE
[18:03:38.275]                             break
[18:03:38.275]                           }
[18:03:38.275]                         }
[18:03:38.275]                       }
[18:03:38.275]                       invisible(muffled)
[18:03:38.275]                     }
[18:03:38.275]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.275]                   }
[18:03:38.275]                 }
[18:03:38.275]                 else {
[18:03:38.275]                   if (TRUE) {
[18:03:38.275]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.275]                     {
[18:03:38.275]                       inherits <- base::inherits
[18:03:38.275]                       invokeRestart <- base::invokeRestart
[18:03:38.275]                       is.null <- base::is.null
[18:03:38.275]                       muffled <- FALSE
[18:03:38.275]                       if (inherits(cond, "message")) {
[18:03:38.275]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.275]                         if (muffled) 
[18:03:38.275]                           invokeRestart("muffleMessage")
[18:03:38.275]                       }
[18:03:38.275]                       else if (inherits(cond, "warning")) {
[18:03:38.275]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.275]                         if (muffled) 
[18:03:38.275]                           invokeRestart("muffleWarning")
[18:03:38.275]                       }
[18:03:38.275]                       else if (inherits(cond, "condition")) {
[18:03:38.275]                         if (!is.null(pattern)) {
[18:03:38.275]                           computeRestarts <- base::computeRestarts
[18:03:38.275]                           grepl <- base::grepl
[18:03:38.275]                           restarts <- computeRestarts(cond)
[18:03:38.275]                           for (restart in restarts) {
[18:03:38.275]                             name <- restart$name
[18:03:38.275]                             if (is.null(name)) 
[18:03:38.275]                               next
[18:03:38.275]                             if (!grepl(pattern, name)) 
[18:03:38.275]                               next
[18:03:38.275]                             invokeRestart(restart)
[18:03:38.275]                             muffled <- TRUE
[18:03:38.275]                             break
[18:03:38.275]                           }
[18:03:38.275]                         }
[18:03:38.275]                       }
[18:03:38.275]                       invisible(muffled)
[18:03:38.275]                     }
[18:03:38.275]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.275]                   }
[18:03:38.275]                 }
[18:03:38.275]             }
[18:03:38.275]         }))
[18:03:38.275]     }, error = function(ex) {
[18:03:38.275]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.275]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.275]                 ...future.rng), started = ...future.startTime, 
[18:03:38.275]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.275]             version = "1.8"), class = "FutureResult")
[18:03:38.275]     }, finally = {
[18:03:38.275]         if (!identical(...future.workdir, getwd())) 
[18:03:38.275]             setwd(...future.workdir)
[18:03:38.275]         {
[18:03:38.275]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.275]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.275]             }
[18:03:38.275]             base::options(...future.oldOptions)
[18:03:38.275]             if (.Platform$OS.type == "windows") {
[18:03:38.275]                 old_names <- names(...future.oldEnvVars)
[18:03:38.275]                 envs <- base::Sys.getenv()
[18:03:38.275]                 names <- names(envs)
[18:03:38.275]                 common <- intersect(names, old_names)
[18:03:38.275]                 added <- setdiff(names, old_names)
[18:03:38.275]                 removed <- setdiff(old_names, names)
[18:03:38.275]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.275]                   envs[common]]
[18:03:38.275]                 NAMES <- toupper(changed)
[18:03:38.275]                 args <- list()
[18:03:38.275]                 for (kk in seq_along(NAMES)) {
[18:03:38.275]                   name <- changed[[kk]]
[18:03:38.275]                   NAME <- NAMES[[kk]]
[18:03:38.275]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.275]                     next
[18:03:38.275]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.275]                 }
[18:03:38.275]                 NAMES <- toupper(added)
[18:03:38.275]                 for (kk in seq_along(NAMES)) {
[18:03:38.275]                   name <- added[[kk]]
[18:03:38.275]                   NAME <- NAMES[[kk]]
[18:03:38.275]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.275]                     next
[18:03:38.275]                   args[[name]] <- ""
[18:03:38.275]                 }
[18:03:38.275]                 NAMES <- toupper(removed)
[18:03:38.275]                 for (kk in seq_along(NAMES)) {
[18:03:38.275]                   name <- removed[[kk]]
[18:03:38.275]                   NAME <- NAMES[[kk]]
[18:03:38.275]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.275]                     next
[18:03:38.275]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.275]                 }
[18:03:38.275]                 if (length(args) > 0) 
[18:03:38.275]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.275]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.275]             }
[18:03:38.275]             else {
[18:03:38.275]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.275]             }
[18:03:38.275]             {
[18:03:38.275]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.275]                   0L) {
[18:03:38.275]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.275]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.275]                   base::options(opts)
[18:03:38.275]                 }
[18:03:38.275]                 {
[18:03:38.275]                   {
[18:03:38.275]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:38.275]                     NULL
[18:03:38.275]                   }
[18:03:38.275]                   options(future.plan = NULL)
[18:03:38.275]                   if (is.na(NA_character_)) 
[18:03:38.275]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.275]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.275]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.275]                     .init = FALSE)
[18:03:38.275]                 }
[18:03:38.275]             }
[18:03:38.275]         }
[18:03:38.275]     })
[18:03:38.275]     if (TRUE) {
[18:03:38.275]         base::sink(type = "output", split = FALSE)
[18:03:38.275]         if (TRUE) {
[18:03:38.275]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.275]         }
[18:03:38.275]         else {
[18:03:38.275]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.275]         }
[18:03:38.275]         base::close(...future.stdout)
[18:03:38.275]         ...future.stdout <- NULL
[18:03:38.275]     }
[18:03:38.275]     ...future.result$conditions <- ...future.conditions
[18:03:38.275]     ...future.result$finished <- base::Sys.time()
[18:03:38.275]     ...future.result
[18:03:38.275] }
[18:03:38.280] assign_globals() ...
[18:03:38.280] List of 2
[18:03:38.280]  $ x: int [1:2] 1 2
[18:03:38.280]  $ y: num 3
[18:03:38.280]  - attr(*, "where")=List of 2
[18:03:38.280]   ..$ x:<environment: R_EmptyEnv> 
[18:03:38.280]   ..$ y:<environment: R_EmptyEnv> 
[18:03:38.280]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.280]  - attr(*, "resolved")= logi FALSE
[18:03:38.280]  - attr(*, "total_size")= num 112
[18:03:38.280]  - attr(*, "already-done")= logi TRUE
[18:03:38.291] - copied ‘x’ to environment
[18:03:38.291] - copied ‘y’ to environment
[18:03:38.291] assign_globals() ... done
[18:03:38.292] requestCore(): workers = 2
[18:03:38.295] MulticoreFuture started
[18:03:38.296] - Launch lazy future ... done
[18:03:38.296] run() for ‘MulticoreFuture’ ... done
[18:03:38.297] plan(): Setting new future strategy stack:
[18:03:38.297] result() for MulticoreFuture ...
[18:03:38.297] List of future strategies:
[18:03:38.297] 1. sequential:
[18:03:38.297]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.297]    - tweaked: FALSE
[18:03:38.297]    - call: NULL
[18:03:38.300] plan(): nbrOfWorkers() = 1
[18:03:38.304] plan(): Setting new future strategy stack:
[18:03:38.305] List of future strategies:
[18:03:38.305] 1. multicore:
[18:03:38.305]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.305]    - tweaked: FALSE
[18:03:38.305]    - call: plan(strategy, substitute = FALSE)
[18:03:38.315] plan(): nbrOfWorkers() = 2
[18:03:38.317] result() for MulticoreFuture ...
[18:03:38.317] result() for MulticoreFuture ... done
[18:03:38.317] result() for MulticoreFuture ... done
[18:03:38.318] result() for MulticoreFuture ...
[18:03:38.318] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x59a4aff1b5a0>
Arguments '...' exists: FALSE
[18:03:38.319] getGlobalsAndPackages() ...
[18:03:38.320] Searching for globals...
[18:03:38.323] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[18:03:38.324] Searching for globals ... DONE
[18:03:38.324] Resolving globals: FALSE
[18:03:38.324] Tweak future expression to call with '...' arguments ...
[18:03:38.325] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:38.326] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:38.327] - globals: [2] ‘x’, ‘y’
[18:03:38.327] 
[18:03:38.327] getGlobalsAndPackages() ... DONE
[18:03:38.328] run() for ‘Future’ ...
[18:03:38.328] - state: ‘created’
[18:03:38.328] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:38.335] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:38.335] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:38.336]   - Field: ‘label’
[18:03:38.336]   - Field: ‘local’
[18:03:38.336]   - Field: ‘owner’
[18:03:38.336]   - Field: ‘envir’
[18:03:38.337]   - Field: ‘workers’
[18:03:38.337]   - Field: ‘packages’
[18:03:38.337]   - Field: ‘gc’
[18:03:38.337]   - Field: ‘job’
[18:03:38.338]   - Field: ‘conditions’
[18:03:38.338]   - Field: ‘expr’
[18:03:38.338]   - Field: ‘uuid’
[18:03:38.338]   - Field: ‘seed’
[18:03:38.339]   - Field: ‘version’
[18:03:38.339]   - Field: ‘result’
[18:03:38.339]   - Field: ‘asynchronous’
[18:03:38.339]   - Field: ‘calls’
[18:03:38.339]   - Field: ‘globals’
[18:03:38.340]   - Field: ‘stdout’
[18:03:38.340]   - Field: ‘earlySignal’
[18:03:38.340]   - Field: ‘lazy’
[18:03:38.340]   - Field: ‘state’
[18:03:38.341] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:38.341] - Launch lazy future ...
[18:03:38.342] Packages needed by the future expression (n = 0): <none>
[18:03:38.342] Packages needed by future strategies (n = 0): <none>
[18:03:38.343] {
[18:03:38.343]     {
[18:03:38.343]         {
[18:03:38.343]             ...future.startTime <- base::Sys.time()
[18:03:38.343]             {
[18:03:38.343]                 {
[18:03:38.343]                   {
[18:03:38.343]                     {
[18:03:38.343]                       base::local({
[18:03:38.343]                         has_future <- base::requireNamespace("future", 
[18:03:38.343]                           quietly = TRUE)
[18:03:38.343]                         if (has_future) {
[18:03:38.343]                           ns <- base::getNamespace("future")
[18:03:38.343]                           version <- ns[[".package"]][["version"]]
[18:03:38.343]                           if (is.null(version)) 
[18:03:38.343]                             version <- utils::packageVersion("future")
[18:03:38.343]                         }
[18:03:38.343]                         else {
[18:03:38.343]                           version <- NULL
[18:03:38.343]                         }
[18:03:38.343]                         if (!has_future || version < "1.8.0") {
[18:03:38.343]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.343]                             "", base::R.version$version.string), 
[18:03:38.343]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:38.343]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.343]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.343]                               "release", "version")], collapse = " "), 
[18:03:38.343]                             hostname = base::Sys.info()[["nodename"]])
[18:03:38.343]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.343]                             info)
[18:03:38.343]                           info <- base::paste(info, collapse = "; ")
[18:03:38.343]                           if (!has_future) {
[18:03:38.343]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.343]                               info)
[18:03:38.343]                           }
[18:03:38.343]                           else {
[18:03:38.343]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.343]                               info, version)
[18:03:38.343]                           }
[18:03:38.343]                           base::stop(msg)
[18:03:38.343]                         }
[18:03:38.343]                       })
[18:03:38.343]                     }
[18:03:38.343]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:38.343]                     base::options(mc.cores = 1L)
[18:03:38.343]                   }
[18:03:38.343]                   ...future.strategy.old <- future::plan("list")
[18:03:38.343]                   options(future.plan = NULL)
[18:03:38.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.343]                 }
[18:03:38.343]                 ...future.workdir <- getwd()
[18:03:38.343]             }
[18:03:38.343]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.343]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.343]         }
[18:03:38.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.343]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.343]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.343]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.343]             base::names(...future.oldOptions))
[18:03:38.343]     }
[18:03:38.343]     if (FALSE) {
[18:03:38.343]     }
[18:03:38.343]     else {
[18:03:38.343]         if (TRUE) {
[18:03:38.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.343]                 open = "w")
[18:03:38.343]         }
[18:03:38.343]         else {
[18:03:38.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.343]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.343]         }
[18:03:38.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.343]             base::sink(type = "output", split = FALSE)
[18:03:38.343]             base::close(...future.stdout)
[18:03:38.343]         }, add = TRUE)
[18:03:38.343]     }
[18:03:38.343]     ...future.frame <- base::sys.nframe()
[18:03:38.343]     ...future.conditions <- base::list()
[18:03:38.343]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.343]     if (FALSE) {
[18:03:38.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.343]     }
[18:03:38.343]     ...future.result <- base::tryCatch({
[18:03:38.343]         base::withCallingHandlers({
[18:03:38.343]             ...future.value <- base::withVisible(base::local({
[18:03:38.343]                 withCallingHandlers({
[18:03:38.343]                   {
[18:03:38.343]                     sum(x, y, ...)
[18:03:38.343]                   }
[18:03:38.343]                 }, immediateCondition = function(cond) {
[18:03:38.343]                   save_rds <- function (object, pathname, ...) 
[18:03:38.343]                   {
[18:03:38.343]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:38.343]                     if (file_test("-f", pathname_tmp)) {
[18:03:38.343]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.343]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:38.343]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.343]                         fi_tmp[["mtime"]])
[18:03:38.343]                     }
[18:03:38.343]                     tryCatch({
[18:03:38.343]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:38.343]                     }, error = function(ex) {
[18:03:38.343]                       msg <- conditionMessage(ex)
[18:03:38.343]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.343]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:38.343]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.343]                         fi_tmp[["mtime"]], msg)
[18:03:38.343]                       ex$message <- msg
[18:03:38.343]                       stop(ex)
[18:03:38.343]                     })
[18:03:38.343]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:38.343]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:38.343]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:38.343]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.343]                       fi <- file.info(pathname)
[18:03:38.343]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:38.343]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.343]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:38.343]                         fi[["size"]], fi[["mtime"]])
[18:03:38.343]                       stop(msg)
[18:03:38.343]                     }
[18:03:38.343]                     invisible(pathname)
[18:03:38.343]                   }
[18:03:38.343]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:38.343]                     rootPath = tempdir()) 
[18:03:38.343]                   {
[18:03:38.343]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:38.343]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:38.343]                       tmpdir = path, fileext = ".rds")
[18:03:38.343]                     save_rds(obj, file)
[18:03:38.343]                   }
[18:03:38.343]                   saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")
[18:03:38.343]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.343]                   {
[18:03:38.343]                     inherits <- base::inherits
[18:03:38.343]                     invokeRestart <- base::invokeRestart
[18:03:38.343]                     is.null <- base::is.null
[18:03:38.343]                     muffled <- FALSE
[18:03:38.343]                     if (inherits(cond, "message")) {
[18:03:38.343]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:38.343]                       if (muffled) 
[18:03:38.343]                         invokeRestart("muffleMessage")
[18:03:38.343]                     }
[18:03:38.343]                     else if (inherits(cond, "warning")) {
[18:03:38.343]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:38.343]                       if (muffled) 
[18:03:38.343]                         invokeRestart("muffleWarning")
[18:03:38.343]                     }
[18:03:38.343]                     else if (inherits(cond, "condition")) {
[18:03:38.343]                       if (!is.null(pattern)) {
[18:03:38.343]                         computeRestarts <- base::computeRestarts
[18:03:38.343]                         grepl <- base::grepl
[18:03:38.343]                         restarts <- computeRestarts(cond)
[18:03:38.343]                         for (restart in restarts) {
[18:03:38.343]                           name <- restart$name
[18:03:38.343]                           if (is.null(name)) 
[18:03:38.343]                             next
[18:03:38.343]                           if (!grepl(pattern, name)) 
[18:03:38.343]                             next
[18:03:38.343]                           invokeRestart(restart)
[18:03:38.343]                           muffled <- TRUE
[18:03:38.343]                           break
[18:03:38.343]                         }
[18:03:38.343]                       }
[18:03:38.343]                     }
[18:03:38.343]                     invisible(muffled)
[18:03:38.343]                   }
[18:03:38.343]                   muffleCondition(cond)
[18:03:38.343]                 })
[18:03:38.343]             }))
[18:03:38.343]             future::FutureResult(value = ...future.value$value, 
[18:03:38.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.343]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.343]                     ...future.globalenv.names))
[18:03:38.343]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.343]         }, condition = base::local({
[18:03:38.343]             c <- base::c
[18:03:38.343]             inherits <- base::inherits
[18:03:38.343]             invokeRestart <- base::invokeRestart
[18:03:38.343]             length <- base::length
[18:03:38.343]             list <- base::list
[18:03:38.343]             seq.int <- base::seq.int
[18:03:38.343]             signalCondition <- base::signalCondition
[18:03:38.343]             sys.calls <- base::sys.calls
[18:03:38.343]             `[[` <- base::`[[`
[18:03:38.343]             `+` <- base::`+`
[18:03:38.343]             `<<-` <- base::`<<-`
[18:03:38.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.343]                   3L)]
[18:03:38.343]             }
[18:03:38.343]             function(cond) {
[18:03:38.343]                 is_error <- inherits(cond, "error")
[18:03:38.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.343]                   NULL)
[18:03:38.343]                 if (is_error) {
[18:03:38.343]                   sessionInformation <- function() {
[18:03:38.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.343]                       search = base::search(), system = base::Sys.info())
[18:03:38.343]                   }
[18:03:38.343]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.343]                     cond$call), session = sessionInformation(), 
[18:03:38.343]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.343]                   signalCondition(cond)
[18:03:38.343]                 }
[18:03:38.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.343]                 "immediateCondition"))) {
[18:03:38.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.343]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.343]                   if (TRUE && !signal) {
[18:03:38.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.343]                     {
[18:03:38.343]                       inherits <- base::inherits
[18:03:38.343]                       invokeRestart <- base::invokeRestart
[18:03:38.343]                       is.null <- base::is.null
[18:03:38.343]                       muffled <- FALSE
[18:03:38.343]                       if (inherits(cond, "message")) {
[18:03:38.343]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.343]                         if (muffled) 
[18:03:38.343]                           invokeRestart("muffleMessage")
[18:03:38.343]                       }
[18:03:38.343]                       else if (inherits(cond, "warning")) {
[18:03:38.343]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.343]                         if (muffled) 
[18:03:38.343]                           invokeRestart("muffleWarning")
[18:03:38.343]                       }
[18:03:38.343]                       else if (inherits(cond, "condition")) {
[18:03:38.343]                         if (!is.null(pattern)) {
[18:03:38.343]                           computeRestarts <- base::computeRestarts
[18:03:38.343]                           grepl <- base::grepl
[18:03:38.343]                           restarts <- computeRestarts(cond)
[18:03:38.343]                           for (restart in restarts) {
[18:03:38.343]                             name <- restart$name
[18:03:38.343]                             if (is.null(name)) 
[18:03:38.343]                               next
[18:03:38.343]                             if (!grepl(pattern, name)) 
[18:03:38.343]                               next
[18:03:38.343]                             invokeRestart(restart)
[18:03:38.343]                             muffled <- TRUE
[18:03:38.343]                             break
[18:03:38.343]                           }
[18:03:38.343]                         }
[18:03:38.343]                       }
[18:03:38.343]                       invisible(muffled)
[18:03:38.343]                     }
[18:03:38.343]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.343]                   }
[18:03:38.343]                 }
[18:03:38.343]                 else {
[18:03:38.343]                   if (TRUE) {
[18:03:38.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.343]                     {
[18:03:38.343]                       inherits <- base::inherits
[18:03:38.343]                       invokeRestart <- base::invokeRestart
[18:03:38.343]                       is.null <- base::is.null
[18:03:38.343]                       muffled <- FALSE
[18:03:38.343]                       if (inherits(cond, "message")) {
[18:03:38.343]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.343]                         if (muffled) 
[18:03:38.343]                           invokeRestart("muffleMessage")
[18:03:38.343]                       }
[18:03:38.343]                       else if (inherits(cond, "warning")) {
[18:03:38.343]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.343]                         if (muffled) 
[18:03:38.343]                           invokeRestart("muffleWarning")
[18:03:38.343]                       }
[18:03:38.343]                       else if (inherits(cond, "condition")) {
[18:03:38.343]                         if (!is.null(pattern)) {
[18:03:38.343]                           computeRestarts <- base::computeRestarts
[18:03:38.343]                           grepl <- base::grepl
[18:03:38.343]                           restarts <- computeRestarts(cond)
[18:03:38.343]                           for (restart in restarts) {
[18:03:38.343]                             name <- restart$name
[18:03:38.343]                             if (is.null(name)) 
[18:03:38.343]                               next
[18:03:38.343]                             if (!grepl(pattern, name)) 
[18:03:38.343]                               next
[18:03:38.343]                             invokeRestart(restart)
[18:03:38.343]                             muffled <- TRUE
[18:03:38.343]                             break
[18:03:38.343]                           }
[18:03:38.343]                         }
[18:03:38.343]                       }
[18:03:38.343]                       invisible(muffled)
[18:03:38.343]                     }
[18:03:38.343]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.343]                   }
[18:03:38.343]                 }
[18:03:38.343]             }
[18:03:38.343]         }))
[18:03:38.343]     }, error = function(ex) {
[18:03:38.343]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.343]                 ...future.rng), started = ...future.startTime, 
[18:03:38.343]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.343]             version = "1.8"), class = "FutureResult")
[18:03:38.343]     }, finally = {
[18:03:38.343]         if (!identical(...future.workdir, getwd())) 
[18:03:38.343]             setwd(...future.workdir)
[18:03:38.343]         {
[18:03:38.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.343]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.343]             }
[18:03:38.343]             base::options(...future.oldOptions)
[18:03:38.343]             if (.Platform$OS.type == "windows") {
[18:03:38.343]                 old_names <- names(...future.oldEnvVars)
[18:03:38.343]                 envs <- base::Sys.getenv()
[18:03:38.343]                 names <- names(envs)
[18:03:38.343]                 common <- intersect(names, old_names)
[18:03:38.343]                 added <- setdiff(names, old_names)
[18:03:38.343]                 removed <- setdiff(old_names, names)
[18:03:38.343]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.343]                   envs[common]]
[18:03:38.343]                 NAMES <- toupper(changed)
[18:03:38.343]                 args <- list()
[18:03:38.343]                 for (kk in seq_along(NAMES)) {
[18:03:38.343]                   name <- changed[[kk]]
[18:03:38.343]                   NAME <- NAMES[[kk]]
[18:03:38.343]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.343]                     next
[18:03:38.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.343]                 }
[18:03:38.343]                 NAMES <- toupper(added)
[18:03:38.343]                 for (kk in seq_along(NAMES)) {
[18:03:38.343]                   name <- added[[kk]]
[18:03:38.343]                   NAME <- NAMES[[kk]]
[18:03:38.343]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.343]                     next
[18:03:38.343]                   args[[name]] <- ""
[18:03:38.343]                 }
[18:03:38.343]                 NAMES <- toupper(removed)
[18:03:38.343]                 for (kk in seq_along(NAMES)) {
[18:03:38.343]                   name <- removed[[kk]]
[18:03:38.343]                   NAME <- NAMES[[kk]]
[18:03:38.343]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.343]                     next
[18:03:38.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.343]                 }
[18:03:38.343]                 if (length(args) > 0) 
[18:03:38.343]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.343]             }
[18:03:38.343]             else {
[18:03:38.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.343]             }
[18:03:38.343]             {
[18:03:38.343]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.343]                   0L) {
[18:03:38.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.343]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.343]                   base::options(opts)
[18:03:38.343]                 }
[18:03:38.343]                 {
[18:03:38.343]                   {
[18:03:38.343]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:38.343]                     NULL
[18:03:38.343]                   }
[18:03:38.343]                   options(future.plan = NULL)
[18:03:38.343]                   if (is.na(NA_character_)) 
[18:03:38.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.343]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.343]                     .init = FALSE)
[18:03:38.343]                 }
[18:03:38.343]             }
[18:03:38.343]         }
[18:03:38.343]     })
[18:03:38.343]     if (TRUE) {
[18:03:38.343]         base::sink(type = "output", split = FALSE)
[18:03:38.343]         if (TRUE) {
[18:03:38.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.343]         }
[18:03:38.343]         else {
[18:03:38.343]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.343]         }
[18:03:38.343]         base::close(...future.stdout)
[18:03:38.343]         ...future.stdout <- NULL
[18:03:38.343]     }
[18:03:38.343]     ...future.result$conditions <- ...future.conditions
[18:03:38.343]     ...future.result$finished <- base::Sys.time()
[18:03:38.343]     ...future.result
[18:03:38.343] }
[18:03:38.348] assign_globals() ...
[18:03:38.348] List of 2
[18:03:38.348]  $ x: int [1:2] 1 2
[18:03:38.348]  $ y: num 3
[18:03:38.348]  - attr(*, "where")=List of 2
[18:03:38.348]   ..$ x:<environment: R_EmptyEnv> 
[18:03:38.348]   ..$ y:<environment: R_EmptyEnv> 
[18:03:38.348]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.348]  - attr(*, "resolved")= logi FALSE
[18:03:38.348]  - attr(*, "total_size")= num 112
[18:03:38.348]  - attr(*, "already-done")= logi TRUE
[18:03:38.355] - copied ‘x’ to environment
[18:03:38.356] - copied ‘y’ to environment
[18:03:38.356] assign_globals() ... done
[18:03:38.356] requestCore(): workers = 2
[18:03:38.360] MulticoreFuture started
[18:03:38.360] - Launch lazy future ... done
[18:03:38.361] run() for ‘MulticoreFuture’ ... done
[18:03:38.362] result() for MulticoreFuture ...
[18:03:38.362] plan(): Setting new future strategy stack:
[18:03:38.362] List of future strategies:
[18:03:38.362] 1. sequential:
[18:03:38.362]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.362]    - tweaked: FALSE
[18:03:38.362]    - call: NULL
[18:03:38.364] plan(): nbrOfWorkers() = 1
[18:03:38.370] plan(): Setting new future strategy stack:
[18:03:38.370] List of future strategies:
[18:03:38.370] 1. multicore:
[18:03:38.370]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.370]    - tweaked: FALSE
[18:03:38.370]    - call: plan(strategy, substitute = FALSE)
[18:03:38.383] plan(): nbrOfWorkers() = 2
[18:03:38.395] result() for MulticoreFuture ...
[18:03:38.396] result() for MulticoreFuture ... done
[18:03:38.396] signalConditions() ...
[18:03:38.396]  - include = ‘immediateCondition’
[18:03:38.396]  - exclude = 
[18:03:38.397]  - resignal = FALSE
[18:03:38.397]  - Number of conditions: 1
[18:03:38.397] signalConditions() ... done
[18:03:38.398] result() for MulticoreFuture ... done
[18:03:38.398] result() for MulticoreFuture ...
[18:03:38.398] result() for MulticoreFuture ... done
[18:03:38.398] signalConditions() ...
[18:03:38.399]  - include = ‘immediateCondition’
[18:03:38.399]  - exclude = 
[18:03:38.399]  - resignal = FALSE
[18:03:38.399]  - Number of conditions: 1
[18:03:38.399] signalConditions() ... done
[18:03:38.400] Future state: ‘finished’
[18:03:38.400] result() for MulticoreFuture ...
[18:03:38.400] result() for MulticoreFuture ... done
[18:03:38.401] signalConditions() ...
[18:03:38.401]  - include = ‘condition’
[18:03:38.401]  - exclude = ‘immediateCondition’
[18:03:38.401]  - resignal = TRUE
[18:03:38.401]  - Number of conditions: 1
[18:03:38.402]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:03:38.402] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x59a4b0506b38>
Arguments '...' exists: TRUE
[18:03:38.404] getGlobalsAndPackages() ...
[18:03:38.405] - globals passed as-is: [1] ‘...’
[18:03:38.405] Resolving globals: FALSE
[18:03:38.405] Tweak future expression to call with '...' arguments ...
[18:03:38.406] {
[18:03:38.406]     do.call(function(...) {
[18:03:38.406]         fcn <- function() sum(...)
[18:03:38.406]         fcn()
[18:03:38.406]     }, args = future.call.arguments)
[18:03:38.406] }
[18:03:38.406] Tweak future expression to call with '...' arguments ... DONE
[18:03:38.407] The total size of the 1 globals is 112 bytes (112 bytes)
[18:03:38.408] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[18:03:38.408] - globals: [1] ‘future.call.arguments’
[18:03:38.408] 
[18:03:38.409] getGlobalsAndPackages() ... DONE
[18:03:38.409] run() for ‘Future’ ...
[18:03:38.410] - state: ‘created’
[18:03:38.410] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:38.421] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:38.422] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:38.422]   - Field: ‘label’
[18:03:38.422]   - Field: ‘local’
[18:03:38.423]   - Field: ‘owner’
[18:03:38.423]   - Field: ‘envir’
[18:03:38.423]   - Field: ‘workers’
[18:03:38.424]   - Field: ‘packages’
[18:03:38.424]   - Field: ‘gc’
[18:03:38.424]   - Field: ‘job’
[18:03:38.424]   - Field: ‘conditions’
[18:03:38.425]   - Field: ‘expr’
[18:03:38.425]   - Field: ‘uuid’
[18:03:38.425]   - Field: ‘seed’
[18:03:38.425]   - Field: ‘version’
[18:03:38.426]   - Field: ‘result’
[18:03:38.426]   - Field: ‘asynchronous’
[18:03:38.426]   - Field: ‘calls’
[18:03:38.426]   - Field: ‘globals’
[18:03:38.427]   - Field: ‘stdout’
[18:03:38.427]   - Field: ‘earlySignal’
[18:03:38.427]   - Field: ‘lazy’
[18:03:38.427]   - Field: ‘state’
[18:03:38.427] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:38.428] - Launch lazy future ...
[18:03:38.428] Packages needed by the future expression (n = 0): <none>
[18:03:38.429] Packages needed by future strategies (n = 0): <none>
[18:03:38.430] {
[18:03:38.430]     {
[18:03:38.430]         {
[18:03:38.430]             ...future.startTime <- base::Sys.time()
[18:03:38.430]             {
[18:03:38.430]                 {
[18:03:38.430]                   {
[18:03:38.430]                     {
[18:03:38.430]                       base::local({
[18:03:38.430]                         has_future <- base::requireNamespace("future", 
[18:03:38.430]                           quietly = TRUE)
[18:03:38.430]                         if (has_future) {
[18:03:38.430]                           ns <- base::getNamespace("future")
[18:03:38.430]                           version <- ns[[".package"]][["version"]]
[18:03:38.430]                           if (is.null(version)) 
[18:03:38.430]                             version <- utils::packageVersion("future")
[18:03:38.430]                         }
[18:03:38.430]                         else {
[18:03:38.430]                           version <- NULL
[18:03:38.430]                         }
[18:03:38.430]                         if (!has_future || version < "1.8.0") {
[18:03:38.430]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.430]                             "", base::R.version$version.string), 
[18:03:38.430]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:38.430]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.430]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.430]                               "release", "version")], collapse = " "), 
[18:03:38.430]                             hostname = base::Sys.info()[["nodename"]])
[18:03:38.430]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.430]                             info)
[18:03:38.430]                           info <- base::paste(info, collapse = "; ")
[18:03:38.430]                           if (!has_future) {
[18:03:38.430]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.430]                               info)
[18:03:38.430]                           }
[18:03:38.430]                           else {
[18:03:38.430]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.430]                               info, version)
[18:03:38.430]                           }
[18:03:38.430]                           base::stop(msg)
[18:03:38.430]                         }
[18:03:38.430]                       })
[18:03:38.430]                     }
[18:03:38.430]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:38.430]                     base::options(mc.cores = 1L)
[18:03:38.430]                   }
[18:03:38.430]                   ...future.strategy.old <- future::plan("list")
[18:03:38.430]                   options(future.plan = NULL)
[18:03:38.430]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.430]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.430]                 }
[18:03:38.430]                 ...future.workdir <- getwd()
[18:03:38.430]             }
[18:03:38.430]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.430]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.430]         }
[18:03:38.430]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.430]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.430]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.430]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.430]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.430]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.430]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.430]             base::names(...future.oldOptions))
[18:03:38.430]     }
[18:03:38.430]     if (FALSE) {
[18:03:38.430]     }
[18:03:38.430]     else {
[18:03:38.430]         if (TRUE) {
[18:03:38.430]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.430]                 open = "w")
[18:03:38.430]         }
[18:03:38.430]         else {
[18:03:38.430]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.430]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.430]         }
[18:03:38.430]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.430]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.430]             base::sink(type = "output", split = FALSE)
[18:03:38.430]             base::close(...future.stdout)
[18:03:38.430]         }, add = TRUE)
[18:03:38.430]     }
[18:03:38.430]     ...future.frame <- base::sys.nframe()
[18:03:38.430]     ...future.conditions <- base::list()
[18:03:38.430]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.430]     if (FALSE) {
[18:03:38.430]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.430]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.430]     }
[18:03:38.430]     ...future.result <- base::tryCatch({
[18:03:38.430]         base::withCallingHandlers({
[18:03:38.430]             ...future.value <- base::withVisible(base::local({
[18:03:38.430]                 withCallingHandlers({
[18:03:38.430]                   {
[18:03:38.430]                     do.call(function(...) {
[18:03:38.430]                       fcn <- function() sum(...)
[18:03:38.430]                       fcn()
[18:03:38.430]                     }, args = future.call.arguments)
[18:03:38.430]                   }
[18:03:38.430]                 }, immediateCondition = function(cond) {
[18:03:38.430]                   save_rds <- function (object, pathname, ...) 
[18:03:38.430]                   {
[18:03:38.430]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:38.430]                     if (file_test("-f", pathname_tmp)) {
[18:03:38.430]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.430]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:38.430]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.430]                         fi_tmp[["mtime"]])
[18:03:38.430]                     }
[18:03:38.430]                     tryCatch({
[18:03:38.430]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:38.430]                     }, error = function(ex) {
[18:03:38.430]                       msg <- conditionMessage(ex)
[18:03:38.430]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.430]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:38.430]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.430]                         fi_tmp[["mtime"]], msg)
[18:03:38.430]                       ex$message <- msg
[18:03:38.430]                       stop(ex)
[18:03:38.430]                     })
[18:03:38.430]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:38.430]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:38.430]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:38.430]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.430]                       fi <- file.info(pathname)
[18:03:38.430]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:38.430]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.430]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:38.430]                         fi[["size"]], fi[["mtime"]])
[18:03:38.430]                       stop(msg)
[18:03:38.430]                     }
[18:03:38.430]                     invisible(pathname)
[18:03:38.430]                   }
[18:03:38.430]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:38.430]                     rootPath = tempdir()) 
[18:03:38.430]                   {
[18:03:38.430]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:38.430]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:38.430]                       tmpdir = path, fileext = ".rds")
[18:03:38.430]                     save_rds(obj, file)
[18:03:38.430]                   }
[18:03:38.430]                   saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")
[18:03:38.430]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.430]                   {
[18:03:38.430]                     inherits <- base::inherits
[18:03:38.430]                     invokeRestart <- base::invokeRestart
[18:03:38.430]                     is.null <- base::is.null
[18:03:38.430]                     muffled <- FALSE
[18:03:38.430]                     if (inherits(cond, "message")) {
[18:03:38.430]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:38.430]                       if (muffled) 
[18:03:38.430]                         invokeRestart("muffleMessage")
[18:03:38.430]                     }
[18:03:38.430]                     else if (inherits(cond, "warning")) {
[18:03:38.430]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:38.430]                       if (muffled) 
[18:03:38.430]                         invokeRestart("muffleWarning")
[18:03:38.430]                     }
[18:03:38.430]                     else if (inherits(cond, "condition")) {
[18:03:38.430]                       if (!is.null(pattern)) {
[18:03:38.430]                         computeRestarts <- base::computeRestarts
[18:03:38.430]                         grepl <- base::grepl
[18:03:38.430]                         restarts <- computeRestarts(cond)
[18:03:38.430]                         for (restart in restarts) {
[18:03:38.430]                           name <- restart$name
[18:03:38.430]                           if (is.null(name)) 
[18:03:38.430]                             next
[18:03:38.430]                           if (!grepl(pattern, name)) 
[18:03:38.430]                             next
[18:03:38.430]                           invokeRestart(restart)
[18:03:38.430]                           muffled <- TRUE
[18:03:38.430]                           break
[18:03:38.430]                         }
[18:03:38.430]                       }
[18:03:38.430]                     }
[18:03:38.430]                     invisible(muffled)
[18:03:38.430]                   }
[18:03:38.430]                   muffleCondition(cond)
[18:03:38.430]                 })
[18:03:38.430]             }))
[18:03:38.430]             future::FutureResult(value = ...future.value$value, 
[18:03:38.430]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.430]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.430]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.430]                     ...future.globalenv.names))
[18:03:38.430]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.430]         }, condition = base::local({
[18:03:38.430]             c <- base::c
[18:03:38.430]             inherits <- base::inherits
[18:03:38.430]             invokeRestart <- base::invokeRestart
[18:03:38.430]             length <- base::length
[18:03:38.430]             list <- base::list
[18:03:38.430]             seq.int <- base::seq.int
[18:03:38.430]             signalCondition <- base::signalCondition
[18:03:38.430]             sys.calls <- base::sys.calls
[18:03:38.430]             `[[` <- base::`[[`
[18:03:38.430]             `+` <- base::`+`
[18:03:38.430]             `<<-` <- base::`<<-`
[18:03:38.430]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.430]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.430]                   3L)]
[18:03:38.430]             }
[18:03:38.430]             function(cond) {
[18:03:38.430]                 is_error <- inherits(cond, "error")
[18:03:38.430]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.430]                   NULL)
[18:03:38.430]                 if (is_error) {
[18:03:38.430]                   sessionInformation <- function() {
[18:03:38.430]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.430]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.430]                       search = base::search(), system = base::Sys.info())
[18:03:38.430]                   }
[18:03:38.430]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.430]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.430]                     cond$call), session = sessionInformation(), 
[18:03:38.430]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.430]                   signalCondition(cond)
[18:03:38.430]                 }
[18:03:38.430]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.430]                 "immediateCondition"))) {
[18:03:38.430]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.430]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.430]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.430]                   if (TRUE && !signal) {
[18:03:38.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.430]                     {
[18:03:38.430]                       inherits <- base::inherits
[18:03:38.430]                       invokeRestart <- base::invokeRestart
[18:03:38.430]                       is.null <- base::is.null
[18:03:38.430]                       muffled <- FALSE
[18:03:38.430]                       if (inherits(cond, "message")) {
[18:03:38.430]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.430]                         if (muffled) 
[18:03:38.430]                           invokeRestart("muffleMessage")
[18:03:38.430]                       }
[18:03:38.430]                       else if (inherits(cond, "warning")) {
[18:03:38.430]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.430]                         if (muffled) 
[18:03:38.430]                           invokeRestart("muffleWarning")
[18:03:38.430]                       }
[18:03:38.430]                       else if (inherits(cond, "condition")) {
[18:03:38.430]                         if (!is.null(pattern)) {
[18:03:38.430]                           computeRestarts <- base::computeRestarts
[18:03:38.430]                           grepl <- base::grepl
[18:03:38.430]                           restarts <- computeRestarts(cond)
[18:03:38.430]                           for (restart in restarts) {
[18:03:38.430]                             name <- restart$name
[18:03:38.430]                             if (is.null(name)) 
[18:03:38.430]                               next
[18:03:38.430]                             if (!grepl(pattern, name)) 
[18:03:38.430]                               next
[18:03:38.430]                             invokeRestart(restart)
[18:03:38.430]                             muffled <- TRUE
[18:03:38.430]                             break
[18:03:38.430]                           }
[18:03:38.430]                         }
[18:03:38.430]                       }
[18:03:38.430]                       invisible(muffled)
[18:03:38.430]                     }
[18:03:38.430]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.430]                   }
[18:03:38.430]                 }
[18:03:38.430]                 else {
[18:03:38.430]                   if (TRUE) {
[18:03:38.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.430]                     {
[18:03:38.430]                       inherits <- base::inherits
[18:03:38.430]                       invokeRestart <- base::invokeRestart
[18:03:38.430]                       is.null <- base::is.null
[18:03:38.430]                       muffled <- FALSE
[18:03:38.430]                       if (inherits(cond, "message")) {
[18:03:38.430]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.430]                         if (muffled) 
[18:03:38.430]                           invokeRestart("muffleMessage")
[18:03:38.430]                       }
[18:03:38.430]                       else if (inherits(cond, "warning")) {
[18:03:38.430]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.430]                         if (muffled) 
[18:03:38.430]                           invokeRestart("muffleWarning")
[18:03:38.430]                       }
[18:03:38.430]                       else if (inherits(cond, "condition")) {
[18:03:38.430]                         if (!is.null(pattern)) {
[18:03:38.430]                           computeRestarts <- base::computeRestarts
[18:03:38.430]                           grepl <- base::grepl
[18:03:38.430]                           restarts <- computeRestarts(cond)
[18:03:38.430]                           for (restart in restarts) {
[18:03:38.430]                             name <- restart$name
[18:03:38.430]                             if (is.null(name)) 
[18:03:38.430]                               next
[18:03:38.430]                             if (!grepl(pattern, name)) 
[18:03:38.430]                               next
[18:03:38.430]                             invokeRestart(restart)
[18:03:38.430]                             muffled <- TRUE
[18:03:38.430]                             break
[18:03:38.430]                           }
[18:03:38.430]                         }
[18:03:38.430]                       }
[18:03:38.430]                       invisible(muffled)
[18:03:38.430]                     }
[18:03:38.430]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.430]                   }
[18:03:38.430]                 }
[18:03:38.430]             }
[18:03:38.430]         }))
[18:03:38.430]     }, error = function(ex) {
[18:03:38.430]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.430]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.430]                 ...future.rng), started = ...future.startTime, 
[18:03:38.430]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.430]             version = "1.8"), class = "FutureResult")
[18:03:38.430]     }, finally = {
[18:03:38.430]         if (!identical(...future.workdir, getwd())) 
[18:03:38.430]             setwd(...future.workdir)
[18:03:38.430]         {
[18:03:38.430]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.430]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.430]             }
[18:03:38.430]             base::options(...future.oldOptions)
[18:03:38.430]             if (.Platform$OS.type == "windows") {
[18:03:38.430]                 old_names <- names(...future.oldEnvVars)
[18:03:38.430]                 envs <- base::Sys.getenv()
[18:03:38.430]                 names <- names(envs)
[18:03:38.430]                 common <- intersect(names, old_names)
[18:03:38.430]                 added <- setdiff(names, old_names)
[18:03:38.430]                 removed <- setdiff(old_names, names)
[18:03:38.430]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.430]                   envs[common]]
[18:03:38.430]                 NAMES <- toupper(changed)
[18:03:38.430]                 args <- list()
[18:03:38.430]                 for (kk in seq_along(NAMES)) {
[18:03:38.430]                   name <- changed[[kk]]
[18:03:38.430]                   NAME <- NAMES[[kk]]
[18:03:38.430]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.430]                     next
[18:03:38.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.430]                 }
[18:03:38.430]                 NAMES <- toupper(added)
[18:03:38.430]                 for (kk in seq_along(NAMES)) {
[18:03:38.430]                   name <- added[[kk]]
[18:03:38.430]                   NAME <- NAMES[[kk]]
[18:03:38.430]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.430]                     next
[18:03:38.430]                   args[[name]] <- ""
[18:03:38.430]                 }
[18:03:38.430]                 NAMES <- toupper(removed)
[18:03:38.430]                 for (kk in seq_along(NAMES)) {
[18:03:38.430]                   name <- removed[[kk]]
[18:03:38.430]                   NAME <- NAMES[[kk]]
[18:03:38.430]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.430]                     next
[18:03:38.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.430]                 }
[18:03:38.430]                 if (length(args) > 0) 
[18:03:38.430]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.430]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.430]             }
[18:03:38.430]             else {
[18:03:38.430]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.430]             }
[18:03:38.430]             {
[18:03:38.430]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.430]                   0L) {
[18:03:38.430]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.430]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.430]                   base::options(opts)
[18:03:38.430]                 }
[18:03:38.430]                 {
[18:03:38.430]                   {
[18:03:38.430]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:38.430]                     NULL
[18:03:38.430]                   }
[18:03:38.430]                   options(future.plan = NULL)
[18:03:38.430]                   if (is.na(NA_character_)) 
[18:03:38.430]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.430]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.430]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.430]                     .init = FALSE)
[18:03:38.430]                 }
[18:03:38.430]             }
[18:03:38.430]         }
[18:03:38.430]     })
[18:03:38.430]     if (TRUE) {
[18:03:38.430]         base::sink(type = "output", split = FALSE)
[18:03:38.430]         if (TRUE) {
[18:03:38.430]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.430]         }
[18:03:38.430]         else {
[18:03:38.430]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.430]         }
[18:03:38.430]         base::close(...future.stdout)
[18:03:38.430]         ...future.stdout <- NULL
[18:03:38.430]     }
[18:03:38.430]     ...future.result$conditions <- ...future.conditions
[18:03:38.430]     ...future.result$finished <- base::Sys.time()
[18:03:38.430]     ...future.result
[18:03:38.430] }
[18:03:38.434] assign_globals() ...
[18:03:38.434] List of 1
[18:03:38.434]  $ future.call.arguments:List of 2
[18:03:38.434]   ..$ : int [1:2] 1 2
[18:03:38.434]   ..$ : num 3
[18:03:38.434]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[18:03:38.434]  - attr(*, "where")=List of 1
[18:03:38.434]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[18:03:38.434]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.434]  - attr(*, "resolved")= logi FALSE
[18:03:38.434]  - attr(*, "total_size")= num 112
[18:03:38.434]  - attr(*, "already-done")= logi TRUE
[18:03:38.443] - copied ‘future.call.arguments’ to environment
[18:03:38.443] assign_globals() ... done
[18:03:38.443] requestCore(): workers = 2
[18:03:38.447] MulticoreFuture started
[18:03:38.449] - Launch lazy future ... done
[18:03:38.450] run() for ‘MulticoreFuture’ ... done
[18:03:38.452] plan(): Setting new future strategy stack:
[18:03:38.450] result() for MulticoreFuture ...
[18:03:38.452] List of future strategies:
[18:03:38.452] 1. sequential:
[18:03:38.452]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.452]    - tweaked: FALSE
[18:03:38.452]    - call: NULL
[18:03:38.456] plan(): nbrOfWorkers() = 1
[18:03:38.460] plan(): Setting new future strategy stack:
[18:03:38.460] List of future strategies:
[18:03:38.460] 1. multicore:
[18:03:38.460]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.460]    - tweaked: FALSE
[18:03:38.460]    - call: plan(strategy, substitute = FALSE)
[18:03:38.470] plan(): nbrOfWorkers() = 2
[18:03:38.473] result() for MulticoreFuture ...
[18:03:38.474] result() for MulticoreFuture ... done
[18:03:38.474] result() for MulticoreFuture ... done
[18:03:38.475] result() for MulticoreFuture ...
[18:03:38.475] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x59a4ae54de38>
Using '...' in a formula
[18:03:38.476] getGlobalsAndPackages() ...
[18:03:38.476] Searching for globals...
[18:03:38.485] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[18:03:38.485] Searching for globals ... DONE
[18:03:38.485] Resolving globals: FALSE
[18:03:38.486] Tweak future expression to call with '...' arguments ...
[18:03:38.487] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[18:03:38.488] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:38.489] - globals: [3] ‘fcn’, ‘x’, ‘y’
[18:03:38.489] 
[18:03:38.489] getGlobalsAndPackages() ... DONE
[18:03:38.490] run() for ‘Future’ ...
[18:03:38.490] - state: ‘created’
[18:03:38.490] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:38.497] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:38.498] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:38.498]   - Field: ‘label’
[18:03:38.498]   - Field: ‘local’
[18:03:38.499]   - Field: ‘owner’
[18:03:38.499]   - Field: ‘envir’
[18:03:38.499]   - Field: ‘workers’
[18:03:38.499]   - Field: ‘packages’
[18:03:38.500]   - Field: ‘gc’
[18:03:38.500]   - Field: ‘job’
[18:03:38.500]   - Field: ‘conditions’
[18:03:38.500]   - Field: ‘expr’
[18:03:38.501]   - Field: ‘uuid’
[18:03:38.501]   - Field: ‘seed’
[18:03:38.501]   - Field: ‘version’
[18:03:38.501]   - Field: ‘result’
[18:03:38.502]   - Field: ‘asynchronous’
[18:03:38.502]   - Field: ‘calls’
[18:03:38.502]   - Field: ‘globals’
[18:03:38.502]   - Field: ‘stdout’
[18:03:38.503]   - Field: ‘earlySignal’
[18:03:38.503]   - Field: ‘lazy’
[18:03:38.503]   - Field: ‘state’
[18:03:38.503] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:38.504] - Launch lazy future ...
[18:03:38.504] Packages needed by the future expression (n = 0): <none>
[18:03:38.505] Packages needed by future strategies (n = 0): <none>
[18:03:38.506] {
[18:03:38.506]     {
[18:03:38.506]         {
[18:03:38.506]             ...future.startTime <- base::Sys.time()
[18:03:38.506]             {
[18:03:38.506]                 {
[18:03:38.506]                   {
[18:03:38.506]                     {
[18:03:38.506]                       base::local({
[18:03:38.506]                         has_future <- base::requireNamespace("future", 
[18:03:38.506]                           quietly = TRUE)
[18:03:38.506]                         if (has_future) {
[18:03:38.506]                           ns <- base::getNamespace("future")
[18:03:38.506]                           version <- ns[[".package"]][["version"]]
[18:03:38.506]                           if (is.null(version)) 
[18:03:38.506]                             version <- utils::packageVersion("future")
[18:03:38.506]                         }
[18:03:38.506]                         else {
[18:03:38.506]                           version <- NULL
[18:03:38.506]                         }
[18:03:38.506]                         if (!has_future || version < "1.8.0") {
[18:03:38.506]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:38.506]                             "", base::R.version$version.string), 
[18:03:38.506]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:38.506]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:38.506]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:38.506]                               "release", "version")], collapse = " "), 
[18:03:38.506]                             hostname = base::Sys.info()[["nodename"]])
[18:03:38.506]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:38.506]                             info)
[18:03:38.506]                           info <- base::paste(info, collapse = "; ")
[18:03:38.506]                           if (!has_future) {
[18:03:38.506]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:38.506]                               info)
[18:03:38.506]                           }
[18:03:38.506]                           else {
[18:03:38.506]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:38.506]                               info, version)
[18:03:38.506]                           }
[18:03:38.506]                           base::stop(msg)
[18:03:38.506]                         }
[18:03:38.506]                       })
[18:03:38.506]                     }
[18:03:38.506]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:38.506]                     base::options(mc.cores = 1L)
[18:03:38.506]                   }
[18:03:38.506]                   ...future.strategy.old <- future::plan("list")
[18:03:38.506]                   options(future.plan = NULL)
[18:03:38.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:38.506]                 }
[18:03:38.506]                 ...future.workdir <- getwd()
[18:03:38.506]             }
[18:03:38.506]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:38.506]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:38.506]         }
[18:03:38.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:38.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:38.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:38.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:38.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:38.506]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:38.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:38.506]             base::names(...future.oldOptions))
[18:03:38.506]     }
[18:03:38.506]     if (FALSE) {
[18:03:38.506]     }
[18:03:38.506]     else {
[18:03:38.506]         if (TRUE) {
[18:03:38.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:38.506]                 open = "w")
[18:03:38.506]         }
[18:03:38.506]         else {
[18:03:38.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:38.506]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:38.506]         }
[18:03:38.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:38.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:38.506]             base::sink(type = "output", split = FALSE)
[18:03:38.506]             base::close(...future.stdout)
[18:03:38.506]         }, add = TRUE)
[18:03:38.506]     }
[18:03:38.506]     ...future.frame <- base::sys.nframe()
[18:03:38.506]     ...future.conditions <- base::list()
[18:03:38.506]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:38.506]     if (FALSE) {
[18:03:38.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:38.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:38.506]     }
[18:03:38.506]     ...future.result <- base::tryCatch({
[18:03:38.506]         base::withCallingHandlers({
[18:03:38.506]             ...future.value <- base::withVisible(base::local({
[18:03:38.506]                 withCallingHandlers({
[18:03:38.506]                   fcn(x, y)
[18:03:38.506]                 }, immediateCondition = function(cond) {
[18:03:38.506]                   save_rds <- function (object, pathname, ...) 
[18:03:38.506]                   {
[18:03:38.506]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:38.506]                     if (file_test("-f", pathname_tmp)) {
[18:03:38.506]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.506]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:38.506]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.506]                         fi_tmp[["mtime"]])
[18:03:38.506]                     }
[18:03:38.506]                     tryCatch({
[18:03:38.506]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:38.506]                     }, error = function(ex) {
[18:03:38.506]                       msg <- conditionMessage(ex)
[18:03:38.506]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.506]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:38.506]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.506]                         fi_tmp[["mtime"]], msg)
[18:03:38.506]                       ex$message <- msg
[18:03:38.506]                       stop(ex)
[18:03:38.506]                     })
[18:03:38.506]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:38.506]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:38.506]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:38.506]                       fi_tmp <- file.info(pathname_tmp)
[18:03:38.506]                       fi <- file.info(pathname)
[18:03:38.506]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:38.506]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:38.506]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:38.506]                         fi[["size"]], fi[["mtime"]])
[18:03:38.506]                       stop(msg)
[18:03:38.506]                     }
[18:03:38.506]                     invisible(pathname)
[18:03:38.506]                   }
[18:03:38.506]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:38.506]                     rootPath = tempdir()) 
[18:03:38.506]                   {
[18:03:38.506]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:38.506]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:38.506]                       tmpdir = path, fileext = ".rds")
[18:03:38.506]                     save_rds(obj, file)
[18:03:38.506]                   }
[18:03:38.506]                   saveImmediateCondition(cond, path = "/tmp/Rtmp16EKKG/.future/immediateConditions")
[18:03:38.506]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.506]                   {
[18:03:38.506]                     inherits <- base::inherits
[18:03:38.506]                     invokeRestart <- base::invokeRestart
[18:03:38.506]                     is.null <- base::is.null
[18:03:38.506]                     muffled <- FALSE
[18:03:38.506]                     if (inherits(cond, "message")) {
[18:03:38.506]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:38.506]                       if (muffled) 
[18:03:38.506]                         invokeRestart("muffleMessage")
[18:03:38.506]                     }
[18:03:38.506]                     else if (inherits(cond, "warning")) {
[18:03:38.506]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:38.506]                       if (muffled) 
[18:03:38.506]                         invokeRestart("muffleWarning")
[18:03:38.506]                     }
[18:03:38.506]                     else if (inherits(cond, "condition")) {
[18:03:38.506]                       if (!is.null(pattern)) {
[18:03:38.506]                         computeRestarts <- base::computeRestarts
[18:03:38.506]                         grepl <- base::grepl
[18:03:38.506]                         restarts <- computeRestarts(cond)
[18:03:38.506]                         for (restart in restarts) {
[18:03:38.506]                           name <- restart$name
[18:03:38.506]                           if (is.null(name)) 
[18:03:38.506]                             next
[18:03:38.506]                           if (!grepl(pattern, name)) 
[18:03:38.506]                             next
[18:03:38.506]                           invokeRestart(restart)
[18:03:38.506]                           muffled <- TRUE
[18:03:38.506]                           break
[18:03:38.506]                         }
[18:03:38.506]                       }
[18:03:38.506]                     }
[18:03:38.506]                     invisible(muffled)
[18:03:38.506]                   }
[18:03:38.506]                   muffleCondition(cond)
[18:03:38.506]                 })
[18:03:38.506]             }))
[18:03:38.506]             future::FutureResult(value = ...future.value$value, 
[18:03:38.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.506]                   ...future.rng), globalenv = if (FALSE) 
[18:03:38.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:38.506]                     ...future.globalenv.names))
[18:03:38.506]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:38.506]         }, condition = base::local({
[18:03:38.506]             c <- base::c
[18:03:38.506]             inherits <- base::inherits
[18:03:38.506]             invokeRestart <- base::invokeRestart
[18:03:38.506]             length <- base::length
[18:03:38.506]             list <- base::list
[18:03:38.506]             seq.int <- base::seq.int
[18:03:38.506]             signalCondition <- base::signalCondition
[18:03:38.506]             sys.calls <- base::sys.calls
[18:03:38.506]             `[[` <- base::`[[`
[18:03:38.506]             `+` <- base::`+`
[18:03:38.506]             `<<-` <- base::`<<-`
[18:03:38.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:38.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:38.506]                   3L)]
[18:03:38.506]             }
[18:03:38.506]             function(cond) {
[18:03:38.506]                 is_error <- inherits(cond, "error")
[18:03:38.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:38.506]                   NULL)
[18:03:38.506]                 if (is_error) {
[18:03:38.506]                   sessionInformation <- function() {
[18:03:38.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:38.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:38.506]                       search = base::search(), system = base::Sys.info())
[18:03:38.506]                   }
[18:03:38.506]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:38.506]                     cond$call), session = sessionInformation(), 
[18:03:38.506]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:38.506]                   signalCondition(cond)
[18:03:38.506]                 }
[18:03:38.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:38.506]                 "immediateCondition"))) {
[18:03:38.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:38.506]                   ...future.conditions[[length(...future.conditions) + 
[18:03:38.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:38.506]                   if (TRUE && !signal) {
[18:03:38.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.506]                     {
[18:03:38.506]                       inherits <- base::inherits
[18:03:38.506]                       invokeRestart <- base::invokeRestart
[18:03:38.506]                       is.null <- base::is.null
[18:03:38.506]                       muffled <- FALSE
[18:03:38.506]                       if (inherits(cond, "message")) {
[18:03:38.506]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.506]                         if (muffled) 
[18:03:38.506]                           invokeRestart("muffleMessage")
[18:03:38.506]                       }
[18:03:38.506]                       else if (inherits(cond, "warning")) {
[18:03:38.506]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.506]                         if (muffled) 
[18:03:38.506]                           invokeRestart("muffleWarning")
[18:03:38.506]                       }
[18:03:38.506]                       else if (inherits(cond, "condition")) {
[18:03:38.506]                         if (!is.null(pattern)) {
[18:03:38.506]                           computeRestarts <- base::computeRestarts
[18:03:38.506]                           grepl <- base::grepl
[18:03:38.506]                           restarts <- computeRestarts(cond)
[18:03:38.506]                           for (restart in restarts) {
[18:03:38.506]                             name <- restart$name
[18:03:38.506]                             if (is.null(name)) 
[18:03:38.506]                               next
[18:03:38.506]                             if (!grepl(pattern, name)) 
[18:03:38.506]                               next
[18:03:38.506]                             invokeRestart(restart)
[18:03:38.506]                             muffled <- TRUE
[18:03:38.506]                             break
[18:03:38.506]                           }
[18:03:38.506]                         }
[18:03:38.506]                       }
[18:03:38.506]                       invisible(muffled)
[18:03:38.506]                     }
[18:03:38.506]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.506]                   }
[18:03:38.506]                 }
[18:03:38.506]                 else {
[18:03:38.506]                   if (TRUE) {
[18:03:38.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:38.506]                     {
[18:03:38.506]                       inherits <- base::inherits
[18:03:38.506]                       invokeRestart <- base::invokeRestart
[18:03:38.506]                       is.null <- base::is.null
[18:03:38.506]                       muffled <- FALSE
[18:03:38.506]                       if (inherits(cond, "message")) {
[18:03:38.506]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:38.506]                         if (muffled) 
[18:03:38.506]                           invokeRestart("muffleMessage")
[18:03:38.506]                       }
[18:03:38.506]                       else if (inherits(cond, "warning")) {
[18:03:38.506]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:38.506]                         if (muffled) 
[18:03:38.506]                           invokeRestart("muffleWarning")
[18:03:38.506]                       }
[18:03:38.506]                       else if (inherits(cond, "condition")) {
[18:03:38.506]                         if (!is.null(pattern)) {
[18:03:38.506]                           computeRestarts <- base::computeRestarts
[18:03:38.506]                           grepl <- base::grepl
[18:03:38.506]                           restarts <- computeRestarts(cond)
[18:03:38.506]                           for (restart in restarts) {
[18:03:38.506]                             name <- restart$name
[18:03:38.506]                             if (is.null(name)) 
[18:03:38.506]                               next
[18:03:38.506]                             if (!grepl(pattern, name)) 
[18:03:38.506]                               next
[18:03:38.506]                             invokeRestart(restart)
[18:03:38.506]                             muffled <- TRUE
[18:03:38.506]                             break
[18:03:38.506]                           }
[18:03:38.506]                         }
[18:03:38.506]                       }
[18:03:38.506]                       invisible(muffled)
[18:03:38.506]                     }
[18:03:38.506]                     muffleCondition(cond, pattern = "^muffle")
[18:03:38.506]                   }
[18:03:38.506]                 }
[18:03:38.506]             }
[18:03:38.506]         }))
[18:03:38.506]     }, error = function(ex) {
[18:03:38.506]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:38.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:38.506]                 ...future.rng), started = ...future.startTime, 
[18:03:38.506]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:38.506]             version = "1.8"), class = "FutureResult")
[18:03:38.506]     }, finally = {
[18:03:38.506]         if (!identical(...future.workdir, getwd())) 
[18:03:38.506]             setwd(...future.workdir)
[18:03:38.506]         {
[18:03:38.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:38.506]                 ...future.oldOptions$nwarnings <- NULL
[18:03:38.506]             }
[18:03:38.506]             base::options(...future.oldOptions)
[18:03:38.506]             if (.Platform$OS.type == "windows") {
[18:03:38.506]                 old_names <- names(...future.oldEnvVars)
[18:03:38.506]                 envs <- base::Sys.getenv()
[18:03:38.506]                 names <- names(envs)
[18:03:38.506]                 common <- intersect(names, old_names)
[18:03:38.506]                 added <- setdiff(names, old_names)
[18:03:38.506]                 removed <- setdiff(old_names, names)
[18:03:38.506]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:38.506]                   envs[common]]
[18:03:38.506]                 NAMES <- toupper(changed)
[18:03:38.506]                 args <- list()
[18:03:38.506]                 for (kk in seq_along(NAMES)) {
[18:03:38.506]                   name <- changed[[kk]]
[18:03:38.506]                   NAME <- NAMES[[kk]]
[18:03:38.506]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.506]                     next
[18:03:38.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.506]                 }
[18:03:38.506]                 NAMES <- toupper(added)
[18:03:38.506]                 for (kk in seq_along(NAMES)) {
[18:03:38.506]                   name <- added[[kk]]
[18:03:38.506]                   NAME <- NAMES[[kk]]
[18:03:38.506]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.506]                     next
[18:03:38.506]                   args[[name]] <- ""
[18:03:38.506]                 }
[18:03:38.506]                 NAMES <- toupper(removed)
[18:03:38.506]                 for (kk in seq_along(NAMES)) {
[18:03:38.506]                   name <- removed[[kk]]
[18:03:38.506]                   NAME <- NAMES[[kk]]
[18:03:38.506]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:38.506]                     next
[18:03:38.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:38.506]                 }
[18:03:38.506]                 if (length(args) > 0) 
[18:03:38.506]                   base::do.call(base::Sys.setenv, args = args)
[18:03:38.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:38.506]             }
[18:03:38.506]             else {
[18:03:38.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:38.506]             }
[18:03:38.506]             {
[18:03:38.506]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:38.506]                   0L) {
[18:03:38.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:38.506]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:38.506]                   base::options(opts)
[18:03:38.506]                 }
[18:03:38.506]                 {
[18:03:38.506]                   {
[18:03:38.506]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:38.506]                     NULL
[18:03:38.506]                   }
[18:03:38.506]                   options(future.plan = NULL)
[18:03:38.506]                   if (is.na(NA_character_)) 
[18:03:38.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:38.506]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:38.506]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:38.506]                     .init = FALSE)
[18:03:38.506]                 }
[18:03:38.506]             }
[18:03:38.506]         }
[18:03:38.506]     })
[18:03:38.506]     if (TRUE) {
[18:03:38.506]         base::sink(type = "output", split = FALSE)
[18:03:38.506]         if (TRUE) {
[18:03:38.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:38.506]         }
[18:03:38.506]         else {
[18:03:38.506]             ...future.result["stdout"] <- base::list(NULL)
[18:03:38.506]         }
[18:03:38.506]         base::close(...future.stdout)
[18:03:38.506]         ...future.stdout <- NULL
[18:03:38.506]     }
[18:03:38.506]     ...future.result$conditions <- ...future.conditions
[18:03:38.506]     ...future.result$finished <- base::Sys.time()
[18:03:38.506]     ...future.result
[18:03:38.506] }
[18:03:38.511] assign_globals() ...
[18:03:38.511] List of 3
[18:03:38.511]  $ fcn:function (x, y)  
[18:03:38.511]  $ x  : int [1:2] 1 2
[18:03:38.511]  $ y  : num 3
[18:03:38.511]  - attr(*, "where")=List of 3
[18:03:38.511]   ..$ fcn:<environment: R_EmptyEnv> 
[18:03:38.511]   ..$ x  :<environment: R_EmptyEnv> 
[18:03:38.511]   ..$ y  :<environment: R_EmptyEnv> 
[18:03:38.511]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:38.511]  - attr(*, "resolved")= logi FALSE
[18:03:38.511]  - attr(*, "total_size")= num 4280
[18:03:38.511]  - attr(*, "already-done")= logi TRUE
[18:03:38.546] - reassign environment for ‘fcn’
[18:03:38.547] - copied ‘fcn’ to environment
[18:03:38.564] - copied ‘x’ to environment
[18:03:38.564] - copied ‘y’ to environment
[18:03:38.565] assign_globals() ... done
[18:03:38.565] requestCore(): workers = 2
[18:03:38.576] MulticoreFuture started
[18:03:38.579] - Launch lazy future ... done
[18:03:38.580] run() for ‘MulticoreFuture’ ... done
[18:03:38.582] plan(): Setting new future strategy stack:
[18:03:38.581] result() for MulticoreFuture ...
[18:03:38.582] List of future strategies:
[18:03:38.582] 1. sequential:
[18:03:38.582]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:38.582]    - tweaked: FALSE
[18:03:38.582]    - call: NULL
[18:03:38.586] plan(): nbrOfWorkers() = 1
[18:03:38.591] plan(): Setting new future strategy stack:
[18:03:38.591] List of future strategies:
[18:03:38.591] 1. multicore:
[18:03:38.591]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:38.591]    - tweaked: FALSE
[18:03:38.591]    - call: plan(strategy, substitute = FALSE)
[18:03:38.600] plan(): nbrOfWorkers() = 2
[18:03:38.605] result() for MulticoreFuture ...
[18:03:38.605] result() for MulticoreFuture ... done
[18:03:38.605] result() for MulticoreFuture ... done
[18:03:38.607] result() for MulticoreFuture ...
[18:03:38.607] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[18:03:38.608] plan(): Setting new future strategy stack:
[18:03:38.609] List of future strategies:
[18:03:38.609] 1. multisession:
[18:03:38.609]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:03:38.609]    - tweaked: FALSE
[18:03:38.609]    - call: plan(strategy, substitute = FALSE)
[18:03:38.610] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:03:38.610] multisession:
[18:03:38.610] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:03:38.610] - tweaked: FALSE
[18:03:38.610] - call: plan(strategy, substitute = FALSE)
[18:03:38.622] getGlobalsAndPackages() ...
[18:03:38.622] Not searching for globals
[18:03:38.623] - globals: [0] <none>
[18:03:38.623] getGlobalsAndPackages() ... DONE
[18:03:38.624] [local output] makeClusterPSOCK() ...
[18:03:38.692] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:03:38.694] [local output] Base port: 11767
[18:03:38.695] [local output] Getting setup options for 2 cluster nodes ...
[18:03:38.695] [local output]  - Node 1 of 2 ...
[18:03:38.696] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:38.697] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp16EKKG/worker.rank=1.parallelly.parent=320334.4e34e4330aa86.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp16EKKG/worker.rank=1.parallelly.parent=320334.4e34e4330aa86.pid")'’
[18:03:38.971] - Possible to infer worker's PID: TRUE
[18:03:38.971] [local output] Rscript port: 11767

[18:03:38.972] [local output]  - Node 2 of 2 ...
[18:03:38.973] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:38.974] [local output] Rscript port: 11767

[18:03:38.974] [local output] Getting setup options for 2 cluster nodes ... done
[18:03:38.974] [local output]  - Parallel setup requested for some PSOCK nodes
[18:03:38.975] [local output] Setting up PSOCK nodes in parallel
[18:03:38.976] List of 36
[18:03:38.976]  $ worker          : chr "localhost"
[18:03:38.976]   ..- attr(*, "localhost")= logi TRUE
[18:03:38.976]  $ master          : chr "localhost"
[18:03:38.976]  $ port            : int 11767
[18:03:38.976]  $ connectTimeout  : num 120
[18:03:38.976]  $ timeout         : num 2592000
[18:03:38.976]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:03:38.976]  $ homogeneous     : logi TRUE
[18:03:38.976]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:03:38.976]  $ rscript_envs    : NULL
[18:03:38.976]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:38.976]  $ rscript_startup : NULL
[18:03:38.976]  $ rscript_sh      : chr "sh"
[18:03:38.976]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:38.976]  $ methods         : logi TRUE
[18:03:38.976]  $ socketOptions   : chr "no-delay"
[18:03:38.976]  $ useXDR          : logi FALSE
[18:03:38.976]  $ outfile         : chr "/dev/null"
[18:03:38.976]  $ renice          : int NA
[18:03:38.976]  $ rshcmd          : NULL
[18:03:38.976]  $ user            : chr(0) 
[18:03:38.976]  $ revtunnel       : logi FALSE
[18:03:38.976]  $ rshlogfile      : NULL
[18:03:38.976]  $ rshopts         : chr(0) 
[18:03:38.976]  $ rank            : int 1
[18:03:38.976]  $ manual          : logi FALSE
[18:03:38.976]  $ dryrun          : logi FALSE
[18:03:38.976]  $ quiet           : logi FALSE
[18:03:38.976]  $ setup_strategy  : chr "parallel"
[18:03:38.976]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:38.976]  $ pidfile         : chr "/tmp/Rtmp16EKKG/worker.rank=1.parallelly.parent=320334.4e34e4330aa86.pid"
[18:03:38.976]  $ rshcmd_label    : NULL
[18:03:38.976]  $ rsh_call        : NULL
[18:03:38.976]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:38.976]  $ localMachine    : logi TRUE
[18:03:38.976]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:03:38.976]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:03:38.976]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:03:38.976]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:03:38.976]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:03:38.976]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:03:38.976]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:03:38.976]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:03:38.976]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:03:38.976]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:03:38.976]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:03:38.976]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:03:38.976]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:03:38.976]  $ arguments       :List of 28
[18:03:38.976]   ..$ worker          : chr "localhost"
[18:03:38.976]   ..$ master          : NULL
[18:03:38.976]   ..$ port            : int 11767
[18:03:38.976]   ..$ connectTimeout  : num 120
[18:03:38.976]   ..$ timeout         : num 2592000
[18:03:38.976]   ..$ rscript         : NULL
[18:03:38.976]   ..$ homogeneous     : NULL
[18:03:38.976]   ..$ rscript_args    : NULL
[18:03:38.976]   ..$ rscript_envs    : NULL
[18:03:38.976]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:38.976]   ..$ rscript_startup : NULL
[18:03:38.976]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:03:38.976]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:38.976]   ..$ methods         : logi TRUE
[18:03:38.976]   ..$ socketOptions   : chr "no-delay"
[18:03:38.976]   ..$ useXDR          : logi FALSE
[18:03:38.976]   ..$ outfile         : chr "/dev/null"
[18:03:38.976]   ..$ renice          : int NA
[18:03:38.976]   ..$ rshcmd          : NULL
[18:03:38.976]   ..$ user            : NULL
[18:03:38.976]   ..$ revtunnel       : logi NA
[18:03:38.976]   ..$ rshlogfile      : NULL
[18:03:38.976]   ..$ rshopts         : NULL
[18:03:38.976]   ..$ rank            : int 1
[18:03:38.976]   ..$ manual          : logi FALSE
[18:03:38.976]   ..$ dryrun          : logi FALSE
[18:03:38.976]   ..$ quiet           : logi FALSE
[18:03:38.976]   ..$ setup_strategy  : chr "parallel"
[18:03:38.976]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:03:39.009] [local output] System call to launch all workers:
[18:03:39.010] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp16EKKG/worker.rank=1.parallelly.parent=320334.4e34e4330aa86.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11767 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:03:39.010] [local output] Starting PSOCK main server
[18:03:39.020] [local output] Workers launched
[18:03:39.020] [local output] Waiting for workers to connect back
[18:03:39.020]  - [local output] 0 workers out of 2 ready
[18:03:39.387]  - [local output] 0 workers out of 2 ready
[18:03:39.389]  - [local output] 1 workers out of 2 ready
[18:03:39.394]  - [local output] 1 workers out of 2 ready
[18:03:39.394]  - [local output] 2 workers out of 2 ready
[18:03:39.395] [local output] Launching of workers completed
[18:03:39.395] [local output] Collecting session information from workers
[18:03:39.396] [local output]  - Worker #1 of 2
[18:03:39.398] [local output]  - Worker #2 of 2
[18:03:39.398] [local output] makeClusterPSOCK() ... done
[18:03:39.417] Packages needed by the future expression (n = 0): <none>
[18:03:39.418] Packages needed by future strategies (n = 0): <none>
[18:03:39.418] {
[18:03:39.418]     {
[18:03:39.418]         {
[18:03:39.418]             ...future.startTime <- base::Sys.time()
[18:03:39.418]             {
[18:03:39.418]                 {
[18:03:39.418]                   {
[18:03:39.418]                     {
[18:03:39.418]                       base::local({
[18:03:39.418]                         has_future <- base::requireNamespace("future", 
[18:03:39.418]                           quietly = TRUE)
[18:03:39.418]                         if (has_future) {
[18:03:39.418]                           ns <- base::getNamespace("future")
[18:03:39.418]                           version <- ns[[".package"]][["version"]]
[18:03:39.418]                           if (is.null(version)) 
[18:03:39.418]                             version <- utils::packageVersion("future")
[18:03:39.418]                         }
[18:03:39.418]                         else {
[18:03:39.418]                           version <- NULL
[18:03:39.418]                         }
[18:03:39.418]                         if (!has_future || version < "1.8.0") {
[18:03:39.418]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:39.418]                             "", base::R.version$version.string), 
[18:03:39.418]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:39.418]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:39.418]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:39.418]                               "release", "version")], collapse = " "), 
[18:03:39.418]                             hostname = base::Sys.info()[["nodename"]])
[18:03:39.418]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:39.418]                             info)
[18:03:39.418]                           info <- base::paste(info, collapse = "; ")
[18:03:39.418]                           if (!has_future) {
[18:03:39.418]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:39.418]                               info)
[18:03:39.418]                           }
[18:03:39.418]                           else {
[18:03:39.418]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:39.418]                               info, version)
[18:03:39.418]                           }
[18:03:39.418]                           base::stop(msg)
[18:03:39.418]                         }
[18:03:39.418]                       })
[18:03:39.418]                     }
[18:03:39.418]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:39.418]                     base::options(mc.cores = 1L)
[18:03:39.418]                   }
[18:03:39.418]                   ...future.strategy.old <- future::plan("list")
[18:03:39.418]                   options(future.plan = NULL)
[18:03:39.418]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.418]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:39.418]                 }
[18:03:39.418]                 ...future.workdir <- getwd()
[18:03:39.418]             }
[18:03:39.418]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:39.418]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:39.418]         }
[18:03:39.418]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:39.418]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:39.418]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:39.418]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:39.418]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:39.418]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:39.418]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:39.418]             base::names(...future.oldOptions))
[18:03:39.418]     }
[18:03:39.418]     if (FALSE) {
[18:03:39.418]     }
[18:03:39.418]     else {
[18:03:39.418]         if (TRUE) {
[18:03:39.418]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:39.418]                 open = "w")
[18:03:39.418]         }
[18:03:39.418]         else {
[18:03:39.418]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:39.418]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:39.418]         }
[18:03:39.418]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:39.418]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:39.418]             base::sink(type = "output", split = FALSE)
[18:03:39.418]             base::close(...future.stdout)
[18:03:39.418]         }, add = TRUE)
[18:03:39.418]     }
[18:03:39.418]     ...future.frame <- base::sys.nframe()
[18:03:39.418]     ...future.conditions <- base::list()
[18:03:39.418]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:39.418]     if (FALSE) {
[18:03:39.418]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:39.418]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:39.418]     }
[18:03:39.418]     ...future.result <- base::tryCatch({
[18:03:39.418]         base::withCallingHandlers({
[18:03:39.418]             ...future.value <- base::withVisible(base::local({
[18:03:39.418]                 ...future.makeSendCondition <- base::local({
[18:03:39.418]                   sendCondition <- NULL
[18:03:39.418]                   function(frame = 1L) {
[18:03:39.418]                     if (is.function(sendCondition)) 
[18:03:39.418]                       return(sendCondition)
[18:03:39.418]                     ns <- getNamespace("parallel")
[18:03:39.418]                     if (exists("sendData", mode = "function", 
[18:03:39.418]                       envir = ns)) {
[18:03:39.418]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:39.418]                         envir = ns)
[18:03:39.418]                       envir <- sys.frame(frame)
[18:03:39.418]                       master <- NULL
[18:03:39.418]                       while (!identical(envir, .GlobalEnv) && 
[18:03:39.418]                         !identical(envir, emptyenv())) {
[18:03:39.418]                         if (exists("master", mode = "list", envir = envir, 
[18:03:39.418]                           inherits = FALSE)) {
[18:03:39.418]                           master <- get("master", mode = "list", 
[18:03:39.418]                             envir = envir, inherits = FALSE)
[18:03:39.418]                           if (inherits(master, c("SOCKnode", 
[18:03:39.418]                             "SOCK0node"))) {
[18:03:39.418]                             sendCondition <<- function(cond) {
[18:03:39.418]                               data <- list(type = "VALUE", value = cond, 
[18:03:39.418]                                 success = TRUE)
[18:03:39.418]                               parallel_sendData(master, data)
[18:03:39.418]                             }
[18:03:39.418]                             return(sendCondition)
[18:03:39.418]                           }
[18:03:39.418]                         }
[18:03:39.418]                         frame <- frame + 1L
[18:03:39.418]                         envir <- sys.frame(frame)
[18:03:39.418]                       }
[18:03:39.418]                     }
[18:03:39.418]                     sendCondition <<- function(cond) NULL
[18:03:39.418]                   }
[18:03:39.418]                 })
[18:03:39.418]                 withCallingHandlers({
[18:03:39.418]                   NA
[18:03:39.418]                 }, immediateCondition = function(cond) {
[18:03:39.418]                   sendCondition <- ...future.makeSendCondition()
[18:03:39.418]                   sendCondition(cond)
[18:03:39.418]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.418]                   {
[18:03:39.418]                     inherits <- base::inherits
[18:03:39.418]                     invokeRestart <- base::invokeRestart
[18:03:39.418]                     is.null <- base::is.null
[18:03:39.418]                     muffled <- FALSE
[18:03:39.418]                     if (inherits(cond, "message")) {
[18:03:39.418]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:39.418]                       if (muffled) 
[18:03:39.418]                         invokeRestart("muffleMessage")
[18:03:39.418]                     }
[18:03:39.418]                     else if (inherits(cond, "warning")) {
[18:03:39.418]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:39.418]                       if (muffled) 
[18:03:39.418]                         invokeRestart("muffleWarning")
[18:03:39.418]                     }
[18:03:39.418]                     else if (inherits(cond, "condition")) {
[18:03:39.418]                       if (!is.null(pattern)) {
[18:03:39.418]                         computeRestarts <- base::computeRestarts
[18:03:39.418]                         grepl <- base::grepl
[18:03:39.418]                         restarts <- computeRestarts(cond)
[18:03:39.418]                         for (restart in restarts) {
[18:03:39.418]                           name <- restart$name
[18:03:39.418]                           if (is.null(name)) 
[18:03:39.418]                             next
[18:03:39.418]                           if (!grepl(pattern, name)) 
[18:03:39.418]                             next
[18:03:39.418]                           invokeRestart(restart)
[18:03:39.418]                           muffled <- TRUE
[18:03:39.418]                           break
[18:03:39.418]                         }
[18:03:39.418]                       }
[18:03:39.418]                     }
[18:03:39.418]                     invisible(muffled)
[18:03:39.418]                   }
[18:03:39.418]                   muffleCondition(cond)
[18:03:39.418]                 })
[18:03:39.418]             }))
[18:03:39.418]             future::FutureResult(value = ...future.value$value, 
[18:03:39.418]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.418]                   ...future.rng), globalenv = if (FALSE) 
[18:03:39.418]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:39.418]                     ...future.globalenv.names))
[18:03:39.418]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:39.418]         }, condition = base::local({
[18:03:39.418]             c <- base::c
[18:03:39.418]             inherits <- base::inherits
[18:03:39.418]             invokeRestart <- base::invokeRestart
[18:03:39.418]             length <- base::length
[18:03:39.418]             list <- base::list
[18:03:39.418]             seq.int <- base::seq.int
[18:03:39.418]             signalCondition <- base::signalCondition
[18:03:39.418]             sys.calls <- base::sys.calls
[18:03:39.418]             `[[` <- base::`[[`
[18:03:39.418]             `+` <- base::`+`
[18:03:39.418]             `<<-` <- base::`<<-`
[18:03:39.418]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:39.418]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:39.418]                   3L)]
[18:03:39.418]             }
[18:03:39.418]             function(cond) {
[18:03:39.418]                 is_error <- inherits(cond, "error")
[18:03:39.418]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:39.418]                   NULL)
[18:03:39.418]                 if (is_error) {
[18:03:39.418]                   sessionInformation <- function() {
[18:03:39.418]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:39.418]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:39.418]                       search = base::search(), system = base::Sys.info())
[18:03:39.418]                   }
[18:03:39.418]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.418]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:39.418]                     cond$call), session = sessionInformation(), 
[18:03:39.418]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:39.418]                   signalCondition(cond)
[18:03:39.418]                 }
[18:03:39.418]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:39.418]                 "immediateCondition"))) {
[18:03:39.418]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:39.418]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.418]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:39.418]                   if (TRUE && !signal) {
[18:03:39.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.418]                     {
[18:03:39.418]                       inherits <- base::inherits
[18:03:39.418]                       invokeRestart <- base::invokeRestart
[18:03:39.418]                       is.null <- base::is.null
[18:03:39.418]                       muffled <- FALSE
[18:03:39.418]                       if (inherits(cond, "message")) {
[18:03:39.418]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.418]                         if (muffled) 
[18:03:39.418]                           invokeRestart("muffleMessage")
[18:03:39.418]                       }
[18:03:39.418]                       else if (inherits(cond, "warning")) {
[18:03:39.418]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.418]                         if (muffled) 
[18:03:39.418]                           invokeRestart("muffleWarning")
[18:03:39.418]                       }
[18:03:39.418]                       else if (inherits(cond, "condition")) {
[18:03:39.418]                         if (!is.null(pattern)) {
[18:03:39.418]                           computeRestarts <- base::computeRestarts
[18:03:39.418]                           grepl <- base::grepl
[18:03:39.418]                           restarts <- computeRestarts(cond)
[18:03:39.418]                           for (restart in restarts) {
[18:03:39.418]                             name <- restart$name
[18:03:39.418]                             if (is.null(name)) 
[18:03:39.418]                               next
[18:03:39.418]                             if (!grepl(pattern, name)) 
[18:03:39.418]                               next
[18:03:39.418]                             invokeRestart(restart)
[18:03:39.418]                             muffled <- TRUE
[18:03:39.418]                             break
[18:03:39.418]                           }
[18:03:39.418]                         }
[18:03:39.418]                       }
[18:03:39.418]                       invisible(muffled)
[18:03:39.418]                     }
[18:03:39.418]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.418]                   }
[18:03:39.418]                 }
[18:03:39.418]                 else {
[18:03:39.418]                   if (TRUE) {
[18:03:39.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.418]                     {
[18:03:39.418]                       inherits <- base::inherits
[18:03:39.418]                       invokeRestart <- base::invokeRestart
[18:03:39.418]                       is.null <- base::is.null
[18:03:39.418]                       muffled <- FALSE
[18:03:39.418]                       if (inherits(cond, "message")) {
[18:03:39.418]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.418]                         if (muffled) 
[18:03:39.418]                           invokeRestart("muffleMessage")
[18:03:39.418]                       }
[18:03:39.418]                       else if (inherits(cond, "warning")) {
[18:03:39.418]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.418]                         if (muffled) 
[18:03:39.418]                           invokeRestart("muffleWarning")
[18:03:39.418]                       }
[18:03:39.418]                       else if (inherits(cond, "condition")) {
[18:03:39.418]                         if (!is.null(pattern)) {
[18:03:39.418]                           computeRestarts <- base::computeRestarts
[18:03:39.418]                           grepl <- base::grepl
[18:03:39.418]                           restarts <- computeRestarts(cond)
[18:03:39.418]                           for (restart in restarts) {
[18:03:39.418]                             name <- restart$name
[18:03:39.418]                             if (is.null(name)) 
[18:03:39.418]                               next
[18:03:39.418]                             if (!grepl(pattern, name)) 
[18:03:39.418]                               next
[18:03:39.418]                             invokeRestart(restart)
[18:03:39.418]                             muffled <- TRUE
[18:03:39.418]                             break
[18:03:39.418]                           }
[18:03:39.418]                         }
[18:03:39.418]                       }
[18:03:39.418]                       invisible(muffled)
[18:03:39.418]                     }
[18:03:39.418]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.418]                   }
[18:03:39.418]                 }
[18:03:39.418]             }
[18:03:39.418]         }))
[18:03:39.418]     }, error = function(ex) {
[18:03:39.418]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:39.418]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.418]                 ...future.rng), started = ...future.startTime, 
[18:03:39.418]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:39.418]             version = "1.8"), class = "FutureResult")
[18:03:39.418]     }, finally = {
[18:03:39.418]         if (!identical(...future.workdir, getwd())) 
[18:03:39.418]             setwd(...future.workdir)
[18:03:39.418]         {
[18:03:39.418]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:39.418]                 ...future.oldOptions$nwarnings <- NULL
[18:03:39.418]             }
[18:03:39.418]             base::options(...future.oldOptions)
[18:03:39.418]             if (.Platform$OS.type == "windows") {
[18:03:39.418]                 old_names <- names(...future.oldEnvVars)
[18:03:39.418]                 envs <- base::Sys.getenv()
[18:03:39.418]                 names <- names(envs)
[18:03:39.418]                 common <- intersect(names, old_names)
[18:03:39.418]                 added <- setdiff(names, old_names)
[18:03:39.418]                 removed <- setdiff(old_names, names)
[18:03:39.418]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:39.418]                   envs[common]]
[18:03:39.418]                 NAMES <- toupper(changed)
[18:03:39.418]                 args <- list()
[18:03:39.418]                 for (kk in seq_along(NAMES)) {
[18:03:39.418]                   name <- changed[[kk]]
[18:03:39.418]                   NAME <- NAMES[[kk]]
[18:03:39.418]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.418]                     next
[18:03:39.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.418]                 }
[18:03:39.418]                 NAMES <- toupper(added)
[18:03:39.418]                 for (kk in seq_along(NAMES)) {
[18:03:39.418]                   name <- added[[kk]]
[18:03:39.418]                   NAME <- NAMES[[kk]]
[18:03:39.418]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.418]                     next
[18:03:39.418]                   args[[name]] <- ""
[18:03:39.418]                 }
[18:03:39.418]                 NAMES <- toupper(removed)
[18:03:39.418]                 for (kk in seq_along(NAMES)) {
[18:03:39.418]                   name <- removed[[kk]]
[18:03:39.418]                   NAME <- NAMES[[kk]]
[18:03:39.418]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.418]                     next
[18:03:39.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.418]                 }
[18:03:39.418]                 if (length(args) > 0) 
[18:03:39.418]                   base::do.call(base::Sys.setenv, args = args)
[18:03:39.418]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:39.418]             }
[18:03:39.418]             else {
[18:03:39.418]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:39.418]             }
[18:03:39.418]             {
[18:03:39.418]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:39.418]                   0L) {
[18:03:39.418]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:39.418]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:39.418]                   base::options(opts)
[18:03:39.418]                 }
[18:03:39.418]                 {
[18:03:39.418]                   {
[18:03:39.418]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:39.418]                     NULL
[18:03:39.418]                   }
[18:03:39.418]                   options(future.plan = NULL)
[18:03:39.418]                   if (is.na(NA_character_)) 
[18:03:39.418]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.418]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:39.418]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:39.418]                     .init = FALSE)
[18:03:39.418]                 }
[18:03:39.418]             }
[18:03:39.418]         }
[18:03:39.418]     })
[18:03:39.418]     if (TRUE) {
[18:03:39.418]         base::sink(type = "output", split = FALSE)
[18:03:39.418]         if (TRUE) {
[18:03:39.418]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:39.418]         }
[18:03:39.418]         else {
[18:03:39.418]             ...future.result["stdout"] <- base::list(NULL)
[18:03:39.418]         }
[18:03:39.418]         base::close(...future.stdout)
[18:03:39.418]         ...future.stdout <- NULL
[18:03:39.418]     }
[18:03:39.418]     ...future.result$conditions <- ...future.conditions
[18:03:39.418]     ...future.result$finished <- base::Sys.time()
[18:03:39.418]     ...future.result
[18:03:39.418] }
[18:03:39.523] MultisessionFuture started
[18:03:39.523] result() for ClusterFuture ...
[18:03:39.524] receiveMessageFromWorker() for ClusterFuture ...
[18:03:39.524] - Validating connection of MultisessionFuture
[18:03:39.586] - received message: FutureResult
[18:03:39.587] - Received FutureResult
[18:03:39.587] - Erased future from FutureRegistry
[18:03:39.588] result() for ClusterFuture ...
[18:03:39.588] - result already collected: FutureResult
[18:03:39.589] result() for ClusterFuture ... done
[18:03:39.589] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:39.589] result() for ClusterFuture ... done
[18:03:39.590] result() for ClusterFuture ...
[18:03:39.590] - result already collected: FutureResult
[18:03:39.591] result() for ClusterFuture ... done
[18:03:39.591] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:03:39.600] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x59a4af829bb0>
Arguments '...' exists: TRUE
[18:03:39.602] getGlobalsAndPackages() ...
[18:03:39.602] Searching for globals...
[18:03:39.607] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[18:03:39.608] Searching for globals ... DONE
[18:03:39.608] Resolving globals: FALSE
[18:03:39.609] Tweak future expression to call with '...' arguments ...
[18:03:39.609] {
[18:03:39.609]     do.call(function(...) {
[18:03:39.609]         sum(x, ...)
[18:03:39.609]     }, args = future.call.arguments)
[18:03:39.609] }
[18:03:39.610] Tweak future expression to call with '...' arguments ... DONE
[18:03:39.612] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:39.613] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[18:03:39.614] - globals: [2] ‘x’, ‘future.call.arguments’
[18:03:39.614] 
[18:03:39.615] getGlobalsAndPackages() ... DONE
[18:03:39.616] run() for ‘Future’ ...
[18:03:39.616] - state: ‘created’
[18:03:39.616] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:39.656] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:39.657] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:39.657]   - Field: ‘node’
[18:03:39.657]   - Field: ‘label’
[18:03:39.658]   - Field: ‘local’
[18:03:39.658]   - Field: ‘owner’
[18:03:39.658]   - Field: ‘envir’
[18:03:39.659]   - Field: ‘workers’
[18:03:39.659]   - Field: ‘packages’
[18:03:39.659]   - Field: ‘gc’
[18:03:39.660]   - Field: ‘conditions’
[18:03:39.660]   - Field: ‘persistent’
[18:03:39.660]   - Field: ‘expr’
[18:03:39.661]   - Field: ‘uuid’
[18:03:39.661]   - Field: ‘seed’
[18:03:39.661]   - Field: ‘version’
[18:03:39.662]   - Field: ‘result’
[18:03:39.662]   - Field: ‘asynchronous’
[18:03:39.662]   - Field: ‘calls’
[18:03:39.663]   - Field: ‘globals’
[18:03:39.663]   - Field: ‘stdout’
[18:03:39.663]   - Field: ‘earlySignal’
[18:03:39.664]   - Field: ‘lazy’
[18:03:39.664]   - Field: ‘state’
[18:03:39.664] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:39.665] - Launch lazy future ...
[18:03:39.665] Packages needed by the future expression (n = 0): <none>
[18:03:39.666] Packages needed by future strategies (n = 0): <none>
[18:03:39.667] {
[18:03:39.667]     {
[18:03:39.667]         {
[18:03:39.667]             ...future.startTime <- base::Sys.time()
[18:03:39.667]             {
[18:03:39.667]                 {
[18:03:39.667]                   {
[18:03:39.667]                     {
[18:03:39.667]                       base::local({
[18:03:39.667]                         has_future <- base::requireNamespace("future", 
[18:03:39.667]                           quietly = TRUE)
[18:03:39.667]                         if (has_future) {
[18:03:39.667]                           ns <- base::getNamespace("future")
[18:03:39.667]                           version <- ns[[".package"]][["version"]]
[18:03:39.667]                           if (is.null(version)) 
[18:03:39.667]                             version <- utils::packageVersion("future")
[18:03:39.667]                         }
[18:03:39.667]                         else {
[18:03:39.667]                           version <- NULL
[18:03:39.667]                         }
[18:03:39.667]                         if (!has_future || version < "1.8.0") {
[18:03:39.667]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:39.667]                             "", base::R.version$version.string), 
[18:03:39.667]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:39.667]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:39.667]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:39.667]                               "release", "version")], collapse = " "), 
[18:03:39.667]                             hostname = base::Sys.info()[["nodename"]])
[18:03:39.667]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:39.667]                             info)
[18:03:39.667]                           info <- base::paste(info, collapse = "; ")
[18:03:39.667]                           if (!has_future) {
[18:03:39.667]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:39.667]                               info)
[18:03:39.667]                           }
[18:03:39.667]                           else {
[18:03:39.667]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:39.667]                               info, version)
[18:03:39.667]                           }
[18:03:39.667]                           base::stop(msg)
[18:03:39.667]                         }
[18:03:39.667]                       })
[18:03:39.667]                     }
[18:03:39.667]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:39.667]                     base::options(mc.cores = 1L)
[18:03:39.667]                   }
[18:03:39.667]                   ...future.strategy.old <- future::plan("list")
[18:03:39.667]                   options(future.plan = NULL)
[18:03:39.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:39.667]                 }
[18:03:39.667]                 ...future.workdir <- getwd()
[18:03:39.667]             }
[18:03:39.667]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:39.667]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:39.667]         }
[18:03:39.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:39.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:39.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:39.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:39.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:39.667]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:39.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:39.667]             base::names(...future.oldOptions))
[18:03:39.667]     }
[18:03:39.667]     if (FALSE) {
[18:03:39.667]     }
[18:03:39.667]     else {
[18:03:39.667]         if (TRUE) {
[18:03:39.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:39.667]                 open = "w")
[18:03:39.667]         }
[18:03:39.667]         else {
[18:03:39.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:39.667]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:39.667]         }
[18:03:39.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:39.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:39.667]             base::sink(type = "output", split = FALSE)
[18:03:39.667]             base::close(...future.stdout)
[18:03:39.667]         }, add = TRUE)
[18:03:39.667]     }
[18:03:39.667]     ...future.frame <- base::sys.nframe()
[18:03:39.667]     ...future.conditions <- base::list()
[18:03:39.667]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:39.667]     if (FALSE) {
[18:03:39.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:39.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:39.667]     }
[18:03:39.667]     ...future.result <- base::tryCatch({
[18:03:39.667]         base::withCallingHandlers({
[18:03:39.667]             ...future.value <- base::withVisible(base::local({
[18:03:39.667]                 ...future.makeSendCondition <- base::local({
[18:03:39.667]                   sendCondition <- NULL
[18:03:39.667]                   function(frame = 1L) {
[18:03:39.667]                     if (is.function(sendCondition)) 
[18:03:39.667]                       return(sendCondition)
[18:03:39.667]                     ns <- getNamespace("parallel")
[18:03:39.667]                     if (exists("sendData", mode = "function", 
[18:03:39.667]                       envir = ns)) {
[18:03:39.667]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:39.667]                         envir = ns)
[18:03:39.667]                       envir <- sys.frame(frame)
[18:03:39.667]                       master <- NULL
[18:03:39.667]                       while (!identical(envir, .GlobalEnv) && 
[18:03:39.667]                         !identical(envir, emptyenv())) {
[18:03:39.667]                         if (exists("master", mode = "list", envir = envir, 
[18:03:39.667]                           inherits = FALSE)) {
[18:03:39.667]                           master <- get("master", mode = "list", 
[18:03:39.667]                             envir = envir, inherits = FALSE)
[18:03:39.667]                           if (inherits(master, c("SOCKnode", 
[18:03:39.667]                             "SOCK0node"))) {
[18:03:39.667]                             sendCondition <<- function(cond) {
[18:03:39.667]                               data <- list(type = "VALUE", value = cond, 
[18:03:39.667]                                 success = TRUE)
[18:03:39.667]                               parallel_sendData(master, data)
[18:03:39.667]                             }
[18:03:39.667]                             return(sendCondition)
[18:03:39.667]                           }
[18:03:39.667]                         }
[18:03:39.667]                         frame <- frame + 1L
[18:03:39.667]                         envir <- sys.frame(frame)
[18:03:39.667]                       }
[18:03:39.667]                     }
[18:03:39.667]                     sendCondition <<- function(cond) NULL
[18:03:39.667]                   }
[18:03:39.667]                 })
[18:03:39.667]                 withCallingHandlers({
[18:03:39.667]                   {
[18:03:39.667]                     do.call(function(...) {
[18:03:39.667]                       sum(x, ...)
[18:03:39.667]                     }, args = future.call.arguments)
[18:03:39.667]                   }
[18:03:39.667]                 }, immediateCondition = function(cond) {
[18:03:39.667]                   sendCondition <- ...future.makeSendCondition()
[18:03:39.667]                   sendCondition(cond)
[18:03:39.667]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.667]                   {
[18:03:39.667]                     inherits <- base::inherits
[18:03:39.667]                     invokeRestart <- base::invokeRestart
[18:03:39.667]                     is.null <- base::is.null
[18:03:39.667]                     muffled <- FALSE
[18:03:39.667]                     if (inherits(cond, "message")) {
[18:03:39.667]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:39.667]                       if (muffled) 
[18:03:39.667]                         invokeRestart("muffleMessage")
[18:03:39.667]                     }
[18:03:39.667]                     else if (inherits(cond, "warning")) {
[18:03:39.667]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:39.667]                       if (muffled) 
[18:03:39.667]                         invokeRestart("muffleWarning")
[18:03:39.667]                     }
[18:03:39.667]                     else if (inherits(cond, "condition")) {
[18:03:39.667]                       if (!is.null(pattern)) {
[18:03:39.667]                         computeRestarts <- base::computeRestarts
[18:03:39.667]                         grepl <- base::grepl
[18:03:39.667]                         restarts <- computeRestarts(cond)
[18:03:39.667]                         for (restart in restarts) {
[18:03:39.667]                           name <- restart$name
[18:03:39.667]                           if (is.null(name)) 
[18:03:39.667]                             next
[18:03:39.667]                           if (!grepl(pattern, name)) 
[18:03:39.667]                             next
[18:03:39.667]                           invokeRestart(restart)
[18:03:39.667]                           muffled <- TRUE
[18:03:39.667]                           break
[18:03:39.667]                         }
[18:03:39.667]                       }
[18:03:39.667]                     }
[18:03:39.667]                     invisible(muffled)
[18:03:39.667]                   }
[18:03:39.667]                   muffleCondition(cond)
[18:03:39.667]                 })
[18:03:39.667]             }))
[18:03:39.667]             future::FutureResult(value = ...future.value$value, 
[18:03:39.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.667]                   ...future.rng), globalenv = if (FALSE) 
[18:03:39.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:39.667]                     ...future.globalenv.names))
[18:03:39.667]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:39.667]         }, condition = base::local({
[18:03:39.667]             c <- base::c
[18:03:39.667]             inherits <- base::inherits
[18:03:39.667]             invokeRestart <- base::invokeRestart
[18:03:39.667]             length <- base::length
[18:03:39.667]             list <- base::list
[18:03:39.667]             seq.int <- base::seq.int
[18:03:39.667]             signalCondition <- base::signalCondition
[18:03:39.667]             sys.calls <- base::sys.calls
[18:03:39.667]             `[[` <- base::`[[`
[18:03:39.667]             `+` <- base::`+`
[18:03:39.667]             `<<-` <- base::`<<-`
[18:03:39.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:39.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:39.667]                   3L)]
[18:03:39.667]             }
[18:03:39.667]             function(cond) {
[18:03:39.667]                 is_error <- inherits(cond, "error")
[18:03:39.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:39.667]                   NULL)
[18:03:39.667]                 if (is_error) {
[18:03:39.667]                   sessionInformation <- function() {
[18:03:39.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:39.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:39.667]                       search = base::search(), system = base::Sys.info())
[18:03:39.667]                   }
[18:03:39.667]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:39.667]                     cond$call), session = sessionInformation(), 
[18:03:39.667]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:39.667]                   signalCondition(cond)
[18:03:39.667]                 }
[18:03:39.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:39.667]                 "immediateCondition"))) {
[18:03:39.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:39.667]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:39.667]                   if (TRUE && !signal) {
[18:03:39.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.667]                     {
[18:03:39.667]                       inherits <- base::inherits
[18:03:39.667]                       invokeRestart <- base::invokeRestart
[18:03:39.667]                       is.null <- base::is.null
[18:03:39.667]                       muffled <- FALSE
[18:03:39.667]                       if (inherits(cond, "message")) {
[18:03:39.667]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.667]                         if (muffled) 
[18:03:39.667]                           invokeRestart("muffleMessage")
[18:03:39.667]                       }
[18:03:39.667]                       else if (inherits(cond, "warning")) {
[18:03:39.667]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.667]                         if (muffled) 
[18:03:39.667]                           invokeRestart("muffleWarning")
[18:03:39.667]                       }
[18:03:39.667]                       else if (inherits(cond, "condition")) {
[18:03:39.667]                         if (!is.null(pattern)) {
[18:03:39.667]                           computeRestarts <- base::computeRestarts
[18:03:39.667]                           grepl <- base::grepl
[18:03:39.667]                           restarts <- computeRestarts(cond)
[18:03:39.667]                           for (restart in restarts) {
[18:03:39.667]                             name <- restart$name
[18:03:39.667]                             if (is.null(name)) 
[18:03:39.667]                               next
[18:03:39.667]                             if (!grepl(pattern, name)) 
[18:03:39.667]                               next
[18:03:39.667]                             invokeRestart(restart)
[18:03:39.667]                             muffled <- TRUE
[18:03:39.667]                             break
[18:03:39.667]                           }
[18:03:39.667]                         }
[18:03:39.667]                       }
[18:03:39.667]                       invisible(muffled)
[18:03:39.667]                     }
[18:03:39.667]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.667]                   }
[18:03:39.667]                 }
[18:03:39.667]                 else {
[18:03:39.667]                   if (TRUE) {
[18:03:39.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.667]                     {
[18:03:39.667]                       inherits <- base::inherits
[18:03:39.667]                       invokeRestart <- base::invokeRestart
[18:03:39.667]                       is.null <- base::is.null
[18:03:39.667]                       muffled <- FALSE
[18:03:39.667]                       if (inherits(cond, "message")) {
[18:03:39.667]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.667]                         if (muffled) 
[18:03:39.667]                           invokeRestart("muffleMessage")
[18:03:39.667]                       }
[18:03:39.667]                       else if (inherits(cond, "warning")) {
[18:03:39.667]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.667]                         if (muffled) 
[18:03:39.667]                           invokeRestart("muffleWarning")
[18:03:39.667]                       }
[18:03:39.667]                       else if (inherits(cond, "condition")) {
[18:03:39.667]                         if (!is.null(pattern)) {
[18:03:39.667]                           computeRestarts <- base::computeRestarts
[18:03:39.667]                           grepl <- base::grepl
[18:03:39.667]                           restarts <- computeRestarts(cond)
[18:03:39.667]                           for (restart in restarts) {
[18:03:39.667]                             name <- restart$name
[18:03:39.667]                             if (is.null(name)) 
[18:03:39.667]                               next
[18:03:39.667]                             if (!grepl(pattern, name)) 
[18:03:39.667]                               next
[18:03:39.667]                             invokeRestart(restart)
[18:03:39.667]                             muffled <- TRUE
[18:03:39.667]                             break
[18:03:39.667]                           }
[18:03:39.667]                         }
[18:03:39.667]                       }
[18:03:39.667]                       invisible(muffled)
[18:03:39.667]                     }
[18:03:39.667]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.667]                   }
[18:03:39.667]                 }
[18:03:39.667]             }
[18:03:39.667]         }))
[18:03:39.667]     }, error = function(ex) {
[18:03:39.667]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:39.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.667]                 ...future.rng), started = ...future.startTime, 
[18:03:39.667]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:39.667]             version = "1.8"), class = "FutureResult")
[18:03:39.667]     }, finally = {
[18:03:39.667]         if (!identical(...future.workdir, getwd())) 
[18:03:39.667]             setwd(...future.workdir)
[18:03:39.667]         {
[18:03:39.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:39.667]                 ...future.oldOptions$nwarnings <- NULL
[18:03:39.667]             }
[18:03:39.667]             base::options(...future.oldOptions)
[18:03:39.667]             if (.Platform$OS.type == "windows") {
[18:03:39.667]                 old_names <- names(...future.oldEnvVars)
[18:03:39.667]                 envs <- base::Sys.getenv()
[18:03:39.667]                 names <- names(envs)
[18:03:39.667]                 common <- intersect(names, old_names)
[18:03:39.667]                 added <- setdiff(names, old_names)
[18:03:39.667]                 removed <- setdiff(old_names, names)
[18:03:39.667]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:39.667]                   envs[common]]
[18:03:39.667]                 NAMES <- toupper(changed)
[18:03:39.667]                 args <- list()
[18:03:39.667]                 for (kk in seq_along(NAMES)) {
[18:03:39.667]                   name <- changed[[kk]]
[18:03:39.667]                   NAME <- NAMES[[kk]]
[18:03:39.667]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.667]                     next
[18:03:39.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.667]                 }
[18:03:39.667]                 NAMES <- toupper(added)
[18:03:39.667]                 for (kk in seq_along(NAMES)) {
[18:03:39.667]                   name <- added[[kk]]
[18:03:39.667]                   NAME <- NAMES[[kk]]
[18:03:39.667]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.667]                     next
[18:03:39.667]                   args[[name]] <- ""
[18:03:39.667]                 }
[18:03:39.667]                 NAMES <- toupper(removed)
[18:03:39.667]                 for (kk in seq_along(NAMES)) {
[18:03:39.667]                   name <- removed[[kk]]
[18:03:39.667]                   NAME <- NAMES[[kk]]
[18:03:39.667]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.667]                     next
[18:03:39.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.667]                 }
[18:03:39.667]                 if (length(args) > 0) 
[18:03:39.667]                   base::do.call(base::Sys.setenv, args = args)
[18:03:39.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:39.667]             }
[18:03:39.667]             else {
[18:03:39.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:39.667]             }
[18:03:39.667]             {
[18:03:39.667]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:39.667]                   0L) {
[18:03:39.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:39.667]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:39.667]                   base::options(opts)
[18:03:39.667]                 }
[18:03:39.667]                 {
[18:03:39.667]                   {
[18:03:39.667]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:39.667]                     NULL
[18:03:39.667]                   }
[18:03:39.667]                   options(future.plan = NULL)
[18:03:39.667]                   if (is.na(NA_character_)) 
[18:03:39.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:39.667]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:39.667]                     .init = FALSE)
[18:03:39.667]                 }
[18:03:39.667]             }
[18:03:39.667]         }
[18:03:39.667]     })
[18:03:39.667]     if (TRUE) {
[18:03:39.667]         base::sink(type = "output", split = FALSE)
[18:03:39.667]         if (TRUE) {
[18:03:39.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:39.667]         }
[18:03:39.667]         else {
[18:03:39.667]             ...future.result["stdout"] <- base::list(NULL)
[18:03:39.667]         }
[18:03:39.667]         base::close(...future.stdout)
[18:03:39.667]         ...future.stdout <- NULL
[18:03:39.667]     }
[18:03:39.667]     ...future.result$conditions <- ...future.conditions
[18:03:39.667]     ...future.result$finished <- base::Sys.time()
[18:03:39.667]     ...future.result
[18:03:39.667] }
[18:03:39.674] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[18:03:39.674] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:39.675] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.676] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[18:03:39.677] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.677] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[18:03:39.679] MultisessionFuture started
[18:03:39.679] - Launch lazy future ... done
[18:03:39.680] run() for ‘MultisessionFuture’ ... done
[18:03:39.680] result() for ClusterFuture ...
[18:03:39.681] receiveMessageFromWorker() for ClusterFuture ...
[18:03:39.681] - Validating connection of MultisessionFuture
[18:03:39.724] - received message: FutureResult
[18:03:39.724] - Received FutureResult
[18:03:39.725] - Erased future from FutureRegistry
[18:03:39.725] result() for ClusterFuture ...
[18:03:39.725] - result already collected: FutureResult
[18:03:39.725] result() for ClusterFuture ... done
[18:03:39.726] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:39.726] result() for ClusterFuture ... done
[18:03:39.726] result() for ClusterFuture ...
[18:03:39.726] - result already collected: FutureResult
[18:03:39.727] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x59a4afbb1398>
Arguments '...' exists: TRUE
[18:03:39.728] getGlobalsAndPackages() ...
[18:03:39.728] Searching for globals...
[18:03:39.732] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[18:03:39.732] Searching for globals ... DONE
[18:03:39.732] Resolving globals: FALSE
[18:03:39.733] Tweak future expression to call with '...' arguments ...
[18:03:39.733] {
[18:03:39.733]     do.call(function(...) {
[18:03:39.733]         sum(x, ...)
[18:03:39.733]     }, args = future.call.arguments)
[18:03:39.733] }
[18:03:39.734] Tweak future expression to call with '...' arguments ... DONE
[18:03:39.735] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:39.736] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[18:03:39.737] - globals: [2] ‘x’, ‘future.call.arguments’
[18:03:39.737] 
[18:03:39.737] getGlobalsAndPackages() ... DONE
[18:03:39.738] run() for ‘Future’ ...
[18:03:39.738] - state: ‘created’
[18:03:39.738] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:39.764] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:39.764] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:39.765]   - Field: ‘node’
[18:03:39.765]   - Field: ‘label’
[18:03:39.765]   - Field: ‘local’
[18:03:39.765]   - Field: ‘owner’
[18:03:39.765]   - Field: ‘envir’
[18:03:39.766]   - Field: ‘workers’
[18:03:39.766]   - Field: ‘packages’
[18:03:39.766]   - Field: ‘gc’
[18:03:39.766]   - Field: ‘conditions’
[18:03:39.766]   - Field: ‘persistent’
[18:03:39.767]   - Field: ‘expr’
[18:03:39.767]   - Field: ‘uuid’
[18:03:39.767]   - Field: ‘seed’
[18:03:39.767]   - Field: ‘version’
[18:03:39.768]   - Field: ‘result’
[18:03:39.768]   - Field: ‘asynchronous’
[18:03:39.768]   - Field: ‘calls’
[18:03:39.768]   - Field: ‘globals’
[18:03:39.769]   - Field: ‘stdout’
[18:03:39.769]   - Field: ‘earlySignal’
[18:03:39.769]   - Field: ‘lazy’
[18:03:39.769]   - Field: ‘state’
[18:03:39.769] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:39.770] - Launch lazy future ...
[18:03:39.770] Packages needed by the future expression (n = 0): <none>
[18:03:39.771] Packages needed by future strategies (n = 0): <none>
[18:03:39.772] {
[18:03:39.772]     {
[18:03:39.772]         {
[18:03:39.772]             ...future.startTime <- base::Sys.time()
[18:03:39.772]             {
[18:03:39.772]                 {
[18:03:39.772]                   {
[18:03:39.772]                     {
[18:03:39.772]                       base::local({
[18:03:39.772]                         has_future <- base::requireNamespace("future", 
[18:03:39.772]                           quietly = TRUE)
[18:03:39.772]                         if (has_future) {
[18:03:39.772]                           ns <- base::getNamespace("future")
[18:03:39.772]                           version <- ns[[".package"]][["version"]]
[18:03:39.772]                           if (is.null(version)) 
[18:03:39.772]                             version <- utils::packageVersion("future")
[18:03:39.772]                         }
[18:03:39.772]                         else {
[18:03:39.772]                           version <- NULL
[18:03:39.772]                         }
[18:03:39.772]                         if (!has_future || version < "1.8.0") {
[18:03:39.772]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:39.772]                             "", base::R.version$version.string), 
[18:03:39.772]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:39.772]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:39.772]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:39.772]                               "release", "version")], collapse = " "), 
[18:03:39.772]                             hostname = base::Sys.info()[["nodename"]])
[18:03:39.772]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:39.772]                             info)
[18:03:39.772]                           info <- base::paste(info, collapse = "; ")
[18:03:39.772]                           if (!has_future) {
[18:03:39.772]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:39.772]                               info)
[18:03:39.772]                           }
[18:03:39.772]                           else {
[18:03:39.772]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:39.772]                               info, version)
[18:03:39.772]                           }
[18:03:39.772]                           base::stop(msg)
[18:03:39.772]                         }
[18:03:39.772]                       })
[18:03:39.772]                     }
[18:03:39.772]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:39.772]                     base::options(mc.cores = 1L)
[18:03:39.772]                   }
[18:03:39.772]                   ...future.strategy.old <- future::plan("list")
[18:03:39.772]                   options(future.plan = NULL)
[18:03:39.772]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.772]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:39.772]                 }
[18:03:39.772]                 ...future.workdir <- getwd()
[18:03:39.772]             }
[18:03:39.772]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:39.772]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:39.772]         }
[18:03:39.772]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:39.772]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:39.772]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:39.772]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:39.772]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:39.772]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:39.772]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:39.772]             base::names(...future.oldOptions))
[18:03:39.772]     }
[18:03:39.772]     if (FALSE) {
[18:03:39.772]     }
[18:03:39.772]     else {
[18:03:39.772]         if (TRUE) {
[18:03:39.772]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:39.772]                 open = "w")
[18:03:39.772]         }
[18:03:39.772]         else {
[18:03:39.772]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:39.772]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:39.772]         }
[18:03:39.772]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:39.772]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:39.772]             base::sink(type = "output", split = FALSE)
[18:03:39.772]             base::close(...future.stdout)
[18:03:39.772]         }, add = TRUE)
[18:03:39.772]     }
[18:03:39.772]     ...future.frame <- base::sys.nframe()
[18:03:39.772]     ...future.conditions <- base::list()
[18:03:39.772]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:39.772]     if (FALSE) {
[18:03:39.772]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:39.772]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:39.772]     }
[18:03:39.772]     ...future.result <- base::tryCatch({
[18:03:39.772]         base::withCallingHandlers({
[18:03:39.772]             ...future.value <- base::withVisible(base::local({
[18:03:39.772]                 ...future.makeSendCondition <- base::local({
[18:03:39.772]                   sendCondition <- NULL
[18:03:39.772]                   function(frame = 1L) {
[18:03:39.772]                     if (is.function(sendCondition)) 
[18:03:39.772]                       return(sendCondition)
[18:03:39.772]                     ns <- getNamespace("parallel")
[18:03:39.772]                     if (exists("sendData", mode = "function", 
[18:03:39.772]                       envir = ns)) {
[18:03:39.772]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:39.772]                         envir = ns)
[18:03:39.772]                       envir <- sys.frame(frame)
[18:03:39.772]                       master <- NULL
[18:03:39.772]                       while (!identical(envir, .GlobalEnv) && 
[18:03:39.772]                         !identical(envir, emptyenv())) {
[18:03:39.772]                         if (exists("master", mode = "list", envir = envir, 
[18:03:39.772]                           inherits = FALSE)) {
[18:03:39.772]                           master <- get("master", mode = "list", 
[18:03:39.772]                             envir = envir, inherits = FALSE)
[18:03:39.772]                           if (inherits(master, c("SOCKnode", 
[18:03:39.772]                             "SOCK0node"))) {
[18:03:39.772]                             sendCondition <<- function(cond) {
[18:03:39.772]                               data <- list(type = "VALUE", value = cond, 
[18:03:39.772]                                 success = TRUE)
[18:03:39.772]                               parallel_sendData(master, data)
[18:03:39.772]                             }
[18:03:39.772]                             return(sendCondition)
[18:03:39.772]                           }
[18:03:39.772]                         }
[18:03:39.772]                         frame <- frame + 1L
[18:03:39.772]                         envir <- sys.frame(frame)
[18:03:39.772]                       }
[18:03:39.772]                     }
[18:03:39.772]                     sendCondition <<- function(cond) NULL
[18:03:39.772]                   }
[18:03:39.772]                 })
[18:03:39.772]                 withCallingHandlers({
[18:03:39.772]                   {
[18:03:39.772]                     do.call(function(...) {
[18:03:39.772]                       sum(x, ...)
[18:03:39.772]                     }, args = future.call.arguments)
[18:03:39.772]                   }
[18:03:39.772]                 }, immediateCondition = function(cond) {
[18:03:39.772]                   sendCondition <- ...future.makeSendCondition()
[18:03:39.772]                   sendCondition(cond)
[18:03:39.772]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.772]                   {
[18:03:39.772]                     inherits <- base::inherits
[18:03:39.772]                     invokeRestart <- base::invokeRestart
[18:03:39.772]                     is.null <- base::is.null
[18:03:39.772]                     muffled <- FALSE
[18:03:39.772]                     if (inherits(cond, "message")) {
[18:03:39.772]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:39.772]                       if (muffled) 
[18:03:39.772]                         invokeRestart("muffleMessage")
[18:03:39.772]                     }
[18:03:39.772]                     else if (inherits(cond, "warning")) {
[18:03:39.772]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:39.772]                       if (muffled) 
[18:03:39.772]                         invokeRestart("muffleWarning")
[18:03:39.772]                     }
[18:03:39.772]                     else if (inherits(cond, "condition")) {
[18:03:39.772]                       if (!is.null(pattern)) {
[18:03:39.772]                         computeRestarts <- base::computeRestarts
[18:03:39.772]                         grepl <- base::grepl
[18:03:39.772]                         restarts <- computeRestarts(cond)
[18:03:39.772]                         for (restart in restarts) {
[18:03:39.772]                           name <- restart$name
[18:03:39.772]                           if (is.null(name)) 
[18:03:39.772]                             next
[18:03:39.772]                           if (!grepl(pattern, name)) 
[18:03:39.772]                             next
[18:03:39.772]                           invokeRestart(restart)
[18:03:39.772]                           muffled <- TRUE
[18:03:39.772]                           break
[18:03:39.772]                         }
[18:03:39.772]                       }
[18:03:39.772]                     }
[18:03:39.772]                     invisible(muffled)
[18:03:39.772]                   }
[18:03:39.772]                   muffleCondition(cond)
[18:03:39.772]                 })
[18:03:39.772]             }))
[18:03:39.772]             future::FutureResult(value = ...future.value$value, 
[18:03:39.772]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.772]                   ...future.rng), globalenv = if (FALSE) 
[18:03:39.772]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:39.772]                     ...future.globalenv.names))
[18:03:39.772]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:39.772]         }, condition = base::local({
[18:03:39.772]             c <- base::c
[18:03:39.772]             inherits <- base::inherits
[18:03:39.772]             invokeRestart <- base::invokeRestart
[18:03:39.772]             length <- base::length
[18:03:39.772]             list <- base::list
[18:03:39.772]             seq.int <- base::seq.int
[18:03:39.772]             signalCondition <- base::signalCondition
[18:03:39.772]             sys.calls <- base::sys.calls
[18:03:39.772]             `[[` <- base::`[[`
[18:03:39.772]             `+` <- base::`+`
[18:03:39.772]             `<<-` <- base::`<<-`
[18:03:39.772]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:39.772]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:39.772]                   3L)]
[18:03:39.772]             }
[18:03:39.772]             function(cond) {
[18:03:39.772]                 is_error <- inherits(cond, "error")
[18:03:39.772]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:39.772]                   NULL)
[18:03:39.772]                 if (is_error) {
[18:03:39.772]                   sessionInformation <- function() {
[18:03:39.772]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:39.772]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:39.772]                       search = base::search(), system = base::Sys.info())
[18:03:39.772]                   }
[18:03:39.772]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.772]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:39.772]                     cond$call), session = sessionInformation(), 
[18:03:39.772]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:39.772]                   signalCondition(cond)
[18:03:39.772]                 }
[18:03:39.772]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:39.772]                 "immediateCondition"))) {
[18:03:39.772]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:39.772]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.772]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:39.772]                   if (TRUE && !signal) {
[18:03:39.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.772]                     {
[18:03:39.772]                       inherits <- base::inherits
[18:03:39.772]                       invokeRestart <- base::invokeRestart
[18:03:39.772]                       is.null <- base::is.null
[18:03:39.772]                       muffled <- FALSE
[18:03:39.772]                       if (inherits(cond, "message")) {
[18:03:39.772]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.772]                         if (muffled) 
[18:03:39.772]                           invokeRestart("muffleMessage")
[18:03:39.772]                       }
[18:03:39.772]                       else if (inherits(cond, "warning")) {
[18:03:39.772]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.772]                         if (muffled) 
[18:03:39.772]                           invokeRestart("muffleWarning")
[18:03:39.772]                       }
[18:03:39.772]                       else if (inherits(cond, "condition")) {
[18:03:39.772]                         if (!is.null(pattern)) {
[18:03:39.772]                           computeRestarts <- base::computeRestarts
[18:03:39.772]                           grepl <- base::grepl
[18:03:39.772]                           restarts <- computeRestarts(cond)
[18:03:39.772]                           for (restart in restarts) {
[18:03:39.772]                             name <- restart$name
[18:03:39.772]                             if (is.null(name)) 
[18:03:39.772]                               next
[18:03:39.772]                             if (!grepl(pattern, name)) 
[18:03:39.772]                               next
[18:03:39.772]                             invokeRestart(restart)
[18:03:39.772]                             muffled <- TRUE
[18:03:39.772]                             break
[18:03:39.772]                           }
[18:03:39.772]                         }
[18:03:39.772]                       }
[18:03:39.772]                       invisible(muffled)
[18:03:39.772]                     }
[18:03:39.772]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.772]                   }
[18:03:39.772]                 }
[18:03:39.772]                 else {
[18:03:39.772]                   if (TRUE) {
[18:03:39.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.772]                     {
[18:03:39.772]                       inherits <- base::inherits
[18:03:39.772]                       invokeRestart <- base::invokeRestart
[18:03:39.772]                       is.null <- base::is.null
[18:03:39.772]                       muffled <- FALSE
[18:03:39.772]                       if (inherits(cond, "message")) {
[18:03:39.772]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.772]                         if (muffled) 
[18:03:39.772]                           invokeRestart("muffleMessage")
[18:03:39.772]                       }
[18:03:39.772]                       else if (inherits(cond, "warning")) {
[18:03:39.772]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.772]                         if (muffled) 
[18:03:39.772]                           invokeRestart("muffleWarning")
[18:03:39.772]                       }
[18:03:39.772]                       else if (inherits(cond, "condition")) {
[18:03:39.772]                         if (!is.null(pattern)) {
[18:03:39.772]                           computeRestarts <- base::computeRestarts
[18:03:39.772]                           grepl <- base::grepl
[18:03:39.772]                           restarts <- computeRestarts(cond)
[18:03:39.772]                           for (restart in restarts) {
[18:03:39.772]                             name <- restart$name
[18:03:39.772]                             if (is.null(name)) 
[18:03:39.772]                               next
[18:03:39.772]                             if (!grepl(pattern, name)) 
[18:03:39.772]                               next
[18:03:39.772]                             invokeRestart(restart)
[18:03:39.772]                             muffled <- TRUE
[18:03:39.772]                             break
[18:03:39.772]                           }
[18:03:39.772]                         }
[18:03:39.772]                       }
[18:03:39.772]                       invisible(muffled)
[18:03:39.772]                     }
[18:03:39.772]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.772]                   }
[18:03:39.772]                 }
[18:03:39.772]             }
[18:03:39.772]         }))
[18:03:39.772]     }, error = function(ex) {
[18:03:39.772]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:39.772]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.772]                 ...future.rng), started = ...future.startTime, 
[18:03:39.772]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:39.772]             version = "1.8"), class = "FutureResult")
[18:03:39.772]     }, finally = {
[18:03:39.772]         if (!identical(...future.workdir, getwd())) 
[18:03:39.772]             setwd(...future.workdir)
[18:03:39.772]         {
[18:03:39.772]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:39.772]                 ...future.oldOptions$nwarnings <- NULL
[18:03:39.772]             }
[18:03:39.772]             base::options(...future.oldOptions)
[18:03:39.772]             if (.Platform$OS.type == "windows") {
[18:03:39.772]                 old_names <- names(...future.oldEnvVars)
[18:03:39.772]                 envs <- base::Sys.getenv()
[18:03:39.772]                 names <- names(envs)
[18:03:39.772]                 common <- intersect(names, old_names)
[18:03:39.772]                 added <- setdiff(names, old_names)
[18:03:39.772]                 removed <- setdiff(old_names, names)
[18:03:39.772]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:39.772]                   envs[common]]
[18:03:39.772]                 NAMES <- toupper(changed)
[18:03:39.772]                 args <- list()
[18:03:39.772]                 for (kk in seq_along(NAMES)) {
[18:03:39.772]                   name <- changed[[kk]]
[18:03:39.772]                   NAME <- NAMES[[kk]]
[18:03:39.772]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.772]                     next
[18:03:39.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.772]                 }
[18:03:39.772]                 NAMES <- toupper(added)
[18:03:39.772]                 for (kk in seq_along(NAMES)) {
[18:03:39.772]                   name <- added[[kk]]
[18:03:39.772]                   NAME <- NAMES[[kk]]
[18:03:39.772]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.772]                     next
[18:03:39.772]                   args[[name]] <- ""
[18:03:39.772]                 }
[18:03:39.772]                 NAMES <- toupper(removed)
[18:03:39.772]                 for (kk in seq_along(NAMES)) {
[18:03:39.772]                   name <- removed[[kk]]
[18:03:39.772]                   NAME <- NAMES[[kk]]
[18:03:39.772]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.772]                     next
[18:03:39.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.772]                 }
[18:03:39.772]                 if (length(args) > 0) 
[18:03:39.772]                   base::do.call(base::Sys.setenv, args = args)
[18:03:39.772]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:39.772]             }
[18:03:39.772]             else {
[18:03:39.772]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:39.772]             }
[18:03:39.772]             {
[18:03:39.772]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:39.772]                   0L) {
[18:03:39.772]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:39.772]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:39.772]                   base::options(opts)
[18:03:39.772]                 }
[18:03:39.772]                 {
[18:03:39.772]                   {
[18:03:39.772]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:39.772]                     NULL
[18:03:39.772]                   }
[18:03:39.772]                   options(future.plan = NULL)
[18:03:39.772]                   if (is.na(NA_character_)) 
[18:03:39.772]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.772]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:39.772]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:39.772]                     .init = FALSE)
[18:03:39.772]                 }
[18:03:39.772]             }
[18:03:39.772]         }
[18:03:39.772]     })
[18:03:39.772]     if (TRUE) {
[18:03:39.772]         base::sink(type = "output", split = FALSE)
[18:03:39.772]         if (TRUE) {
[18:03:39.772]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:39.772]         }
[18:03:39.772]         else {
[18:03:39.772]             ...future.result["stdout"] <- base::list(NULL)
[18:03:39.772]         }
[18:03:39.772]         base::close(...future.stdout)
[18:03:39.772]         ...future.stdout <- NULL
[18:03:39.772]     }
[18:03:39.772]     ...future.result$conditions <- ...future.conditions
[18:03:39.772]     ...future.result$finished <- base::Sys.time()
[18:03:39.772]     ...future.result
[18:03:39.772] }
[18:03:39.777] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[18:03:39.778] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:39.779] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.779] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[18:03:39.780] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.781] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[18:03:39.782] MultisessionFuture started
[18:03:39.782] - Launch lazy future ... done
[18:03:39.782] run() for ‘MultisessionFuture’ ... done
[18:03:39.783] result() for ClusterFuture ...
[18:03:39.783] receiveMessageFromWorker() for ClusterFuture ...
[18:03:39.783] - Validating connection of MultisessionFuture
[18:03:39.832] - received message: FutureResult
[18:03:39.832] - Received FutureResult
[18:03:39.833] - Erased future from FutureRegistry
[18:03:39.833] result() for ClusterFuture ...
[18:03:39.833] - result already collected: FutureResult
[18:03:39.833] result() for ClusterFuture ... done
[18:03:39.834] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:39.834] result() for ClusterFuture ... done
[18:03:39.834] result() for ClusterFuture ...
[18:03:39.834] - result already collected: FutureResult
[18:03:39.835] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x59a4afd7f3f8>
Arguments '...' exists: FALSE
[18:03:39.836] getGlobalsAndPackages() ...
[18:03:39.836] Searching for globals...
[18:03:39.839] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[18:03:39.840] Searching for globals ... DONE
[18:03:39.840] Resolving globals: FALSE
[18:03:39.841] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:39.842] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:39.842] - globals: [2] ‘x’, ‘y’
[18:03:39.843] 
[18:03:39.843] getGlobalsAndPackages() ... DONE
[18:03:39.844] run() for ‘Future’ ...
[18:03:39.844] - state: ‘created’
[18:03:39.844] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:39.869] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:39.870] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:39.870]   - Field: ‘node’
[18:03:39.870]   - Field: ‘label’
[18:03:39.870]   - Field: ‘local’
[18:03:39.871]   - Field: ‘owner’
[18:03:39.871]   - Field: ‘envir’
[18:03:39.871]   - Field: ‘workers’
[18:03:39.871]   - Field: ‘packages’
[18:03:39.871]   - Field: ‘gc’
[18:03:39.872]   - Field: ‘conditions’
[18:03:39.872]   - Field: ‘persistent’
[18:03:39.872]   - Field: ‘expr’
[18:03:39.872]   - Field: ‘uuid’
[18:03:39.873]   - Field: ‘seed’
[18:03:39.873]   - Field: ‘version’
[18:03:39.874]   - Field: ‘result’
[18:03:39.874]   - Field: ‘asynchronous’
[18:03:39.874]   - Field: ‘calls’
[18:03:39.874]   - Field: ‘globals’
[18:03:39.875]   - Field: ‘stdout’
[18:03:39.875]   - Field: ‘earlySignal’
[18:03:39.875]   - Field: ‘lazy’
[18:03:39.875]   - Field: ‘state’
[18:03:39.875] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:39.876] - Launch lazy future ...
[18:03:39.876] Packages needed by the future expression (n = 0): <none>
[18:03:39.877] Packages needed by future strategies (n = 0): <none>
[18:03:39.878] {
[18:03:39.878]     {
[18:03:39.878]         {
[18:03:39.878]             ...future.startTime <- base::Sys.time()
[18:03:39.878]             {
[18:03:39.878]                 {
[18:03:39.878]                   {
[18:03:39.878]                     {
[18:03:39.878]                       base::local({
[18:03:39.878]                         has_future <- base::requireNamespace("future", 
[18:03:39.878]                           quietly = TRUE)
[18:03:39.878]                         if (has_future) {
[18:03:39.878]                           ns <- base::getNamespace("future")
[18:03:39.878]                           version <- ns[[".package"]][["version"]]
[18:03:39.878]                           if (is.null(version)) 
[18:03:39.878]                             version <- utils::packageVersion("future")
[18:03:39.878]                         }
[18:03:39.878]                         else {
[18:03:39.878]                           version <- NULL
[18:03:39.878]                         }
[18:03:39.878]                         if (!has_future || version < "1.8.0") {
[18:03:39.878]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:39.878]                             "", base::R.version$version.string), 
[18:03:39.878]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:39.878]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:39.878]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:39.878]                               "release", "version")], collapse = " "), 
[18:03:39.878]                             hostname = base::Sys.info()[["nodename"]])
[18:03:39.878]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:39.878]                             info)
[18:03:39.878]                           info <- base::paste(info, collapse = "; ")
[18:03:39.878]                           if (!has_future) {
[18:03:39.878]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:39.878]                               info)
[18:03:39.878]                           }
[18:03:39.878]                           else {
[18:03:39.878]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:39.878]                               info, version)
[18:03:39.878]                           }
[18:03:39.878]                           base::stop(msg)
[18:03:39.878]                         }
[18:03:39.878]                       })
[18:03:39.878]                     }
[18:03:39.878]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:39.878]                     base::options(mc.cores = 1L)
[18:03:39.878]                   }
[18:03:39.878]                   ...future.strategy.old <- future::plan("list")
[18:03:39.878]                   options(future.plan = NULL)
[18:03:39.878]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.878]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:39.878]                 }
[18:03:39.878]                 ...future.workdir <- getwd()
[18:03:39.878]             }
[18:03:39.878]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:39.878]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:39.878]         }
[18:03:39.878]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:39.878]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:39.878]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:39.878]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:39.878]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:39.878]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:39.878]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:39.878]             base::names(...future.oldOptions))
[18:03:39.878]     }
[18:03:39.878]     if (FALSE) {
[18:03:39.878]     }
[18:03:39.878]     else {
[18:03:39.878]         if (TRUE) {
[18:03:39.878]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:39.878]                 open = "w")
[18:03:39.878]         }
[18:03:39.878]         else {
[18:03:39.878]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:39.878]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:39.878]         }
[18:03:39.878]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:39.878]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:39.878]             base::sink(type = "output", split = FALSE)
[18:03:39.878]             base::close(...future.stdout)
[18:03:39.878]         }, add = TRUE)
[18:03:39.878]     }
[18:03:39.878]     ...future.frame <- base::sys.nframe()
[18:03:39.878]     ...future.conditions <- base::list()
[18:03:39.878]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:39.878]     if (FALSE) {
[18:03:39.878]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:39.878]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:39.878]     }
[18:03:39.878]     ...future.result <- base::tryCatch({
[18:03:39.878]         base::withCallingHandlers({
[18:03:39.878]             ...future.value <- base::withVisible(base::local({
[18:03:39.878]                 ...future.makeSendCondition <- base::local({
[18:03:39.878]                   sendCondition <- NULL
[18:03:39.878]                   function(frame = 1L) {
[18:03:39.878]                     if (is.function(sendCondition)) 
[18:03:39.878]                       return(sendCondition)
[18:03:39.878]                     ns <- getNamespace("parallel")
[18:03:39.878]                     if (exists("sendData", mode = "function", 
[18:03:39.878]                       envir = ns)) {
[18:03:39.878]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:39.878]                         envir = ns)
[18:03:39.878]                       envir <- sys.frame(frame)
[18:03:39.878]                       master <- NULL
[18:03:39.878]                       while (!identical(envir, .GlobalEnv) && 
[18:03:39.878]                         !identical(envir, emptyenv())) {
[18:03:39.878]                         if (exists("master", mode = "list", envir = envir, 
[18:03:39.878]                           inherits = FALSE)) {
[18:03:39.878]                           master <- get("master", mode = "list", 
[18:03:39.878]                             envir = envir, inherits = FALSE)
[18:03:39.878]                           if (inherits(master, c("SOCKnode", 
[18:03:39.878]                             "SOCK0node"))) {
[18:03:39.878]                             sendCondition <<- function(cond) {
[18:03:39.878]                               data <- list(type = "VALUE", value = cond, 
[18:03:39.878]                                 success = TRUE)
[18:03:39.878]                               parallel_sendData(master, data)
[18:03:39.878]                             }
[18:03:39.878]                             return(sendCondition)
[18:03:39.878]                           }
[18:03:39.878]                         }
[18:03:39.878]                         frame <- frame + 1L
[18:03:39.878]                         envir <- sys.frame(frame)
[18:03:39.878]                       }
[18:03:39.878]                     }
[18:03:39.878]                     sendCondition <<- function(cond) NULL
[18:03:39.878]                   }
[18:03:39.878]                 })
[18:03:39.878]                 withCallingHandlers({
[18:03:39.878]                   {
[18:03:39.878]                     sum(x, y)
[18:03:39.878]                   }
[18:03:39.878]                 }, immediateCondition = function(cond) {
[18:03:39.878]                   sendCondition <- ...future.makeSendCondition()
[18:03:39.878]                   sendCondition(cond)
[18:03:39.878]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.878]                   {
[18:03:39.878]                     inherits <- base::inherits
[18:03:39.878]                     invokeRestart <- base::invokeRestart
[18:03:39.878]                     is.null <- base::is.null
[18:03:39.878]                     muffled <- FALSE
[18:03:39.878]                     if (inherits(cond, "message")) {
[18:03:39.878]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:39.878]                       if (muffled) 
[18:03:39.878]                         invokeRestart("muffleMessage")
[18:03:39.878]                     }
[18:03:39.878]                     else if (inherits(cond, "warning")) {
[18:03:39.878]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:39.878]                       if (muffled) 
[18:03:39.878]                         invokeRestart("muffleWarning")
[18:03:39.878]                     }
[18:03:39.878]                     else if (inherits(cond, "condition")) {
[18:03:39.878]                       if (!is.null(pattern)) {
[18:03:39.878]                         computeRestarts <- base::computeRestarts
[18:03:39.878]                         grepl <- base::grepl
[18:03:39.878]                         restarts <- computeRestarts(cond)
[18:03:39.878]                         for (restart in restarts) {
[18:03:39.878]                           name <- restart$name
[18:03:39.878]                           if (is.null(name)) 
[18:03:39.878]                             next
[18:03:39.878]                           if (!grepl(pattern, name)) 
[18:03:39.878]                             next
[18:03:39.878]                           invokeRestart(restart)
[18:03:39.878]                           muffled <- TRUE
[18:03:39.878]                           break
[18:03:39.878]                         }
[18:03:39.878]                       }
[18:03:39.878]                     }
[18:03:39.878]                     invisible(muffled)
[18:03:39.878]                   }
[18:03:39.878]                   muffleCondition(cond)
[18:03:39.878]                 })
[18:03:39.878]             }))
[18:03:39.878]             future::FutureResult(value = ...future.value$value, 
[18:03:39.878]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.878]                   ...future.rng), globalenv = if (FALSE) 
[18:03:39.878]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:39.878]                     ...future.globalenv.names))
[18:03:39.878]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:39.878]         }, condition = base::local({
[18:03:39.878]             c <- base::c
[18:03:39.878]             inherits <- base::inherits
[18:03:39.878]             invokeRestart <- base::invokeRestart
[18:03:39.878]             length <- base::length
[18:03:39.878]             list <- base::list
[18:03:39.878]             seq.int <- base::seq.int
[18:03:39.878]             signalCondition <- base::signalCondition
[18:03:39.878]             sys.calls <- base::sys.calls
[18:03:39.878]             `[[` <- base::`[[`
[18:03:39.878]             `+` <- base::`+`
[18:03:39.878]             `<<-` <- base::`<<-`
[18:03:39.878]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:39.878]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:39.878]                   3L)]
[18:03:39.878]             }
[18:03:39.878]             function(cond) {
[18:03:39.878]                 is_error <- inherits(cond, "error")
[18:03:39.878]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:39.878]                   NULL)
[18:03:39.878]                 if (is_error) {
[18:03:39.878]                   sessionInformation <- function() {
[18:03:39.878]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:39.878]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:39.878]                       search = base::search(), system = base::Sys.info())
[18:03:39.878]                   }
[18:03:39.878]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.878]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:39.878]                     cond$call), session = sessionInformation(), 
[18:03:39.878]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:39.878]                   signalCondition(cond)
[18:03:39.878]                 }
[18:03:39.878]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:39.878]                 "immediateCondition"))) {
[18:03:39.878]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:39.878]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.878]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:39.878]                   if (TRUE && !signal) {
[18:03:39.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.878]                     {
[18:03:39.878]                       inherits <- base::inherits
[18:03:39.878]                       invokeRestart <- base::invokeRestart
[18:03:39.878]                       is.null <- base::is.null
[18:03:39.878]                       muffled <- FALSE
[18:03:39.878]                       if (inherits(cond, "message")) {
[18:03:39.878]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.878]                         if (muffled) 
[18:03:39.878]                           invokeRestart("muffleMessage")
[18:03:39.878]                       }
[18:03:39.878]                       else if (inherits(cond, "warning")) {
[18:03:39.878]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.878]                         if (muffled) 
[18:03:39.878]                           invokeRestart("muffleWarning")
[18:03:39.878]                       }
[18:03:39.878]                       else if (inherits(cond, "condition")) {
[18:03:39.878]                         if (!is.null(pattern)) {
[18:03:39.878]                           computeRestarts <- base::computeRestarts
[18:03:39.878]                           grepl <- base::grepl
[18:03:39.878]                           restarts <- computeRestarts(cond)
[18:03:39.878]                           for (restart in restarts) {
[18:03:39.878]                             name <- restart$name
[18:03:39.878]                             if (is.null(name)) 
[18:03:39.878]                               next
[18:03:39.878]                             if (!grepl(pattern, name)) 
[18:03:39.878]                               next
[18:03:39.878]                             invokeRestart(restart)
[18:03:39.878]                             muffled <- TRUE
[18:03:39.878]                             break
[18:03:39.878]                           }
[18:03:39.878]                         }
[18:03:39.878]                       }
[18:03:39.878]                       invisible(muffled)
[18:03:39.878]                     }
[18:03:39.878]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.878]                   }
[18:03:39.878]                 }
[18:03:39.878]                 else {
[18:03:39.878]                   if (TRUE) {
[18:03:39.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.878]                     {
[18:03:39.878]                       inherits <- base::inherits
[18:03:39.878]                       invokeRestart <- base::invokeRestart
[18:03:39.878]                       is.null <- base::is.null
[18:03:39.878]                       muffled <- FALSE
[18:03:39.878]                       if (inherits(cond, "message")) {
[18:03:39.878]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.878]                         if (muffled) 
[18:03:39.878]                           invokeRestart("muffleMessage")
[18:03:39.878]                       }
[18:03:39.878]                       else if (inherits(cond, "warning")) {
[18:03:39.878]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.878]                         if (muffled) 
[18:03:39.878]                           invokeRestart("muffleWarning")
[18:03:39.878]                       }
[18:03:39.878]                       else if (inherits(cond, "condition")) {
[18:03:39.878]                         if (!is.null(pattern)) {
[18:03:39.878]                           computeRestarts <- base::computeRestarts
[18:03:39.878]                           grepl <- base::grepl
[18:03:39.878]                           restarts <- computeRestarts(cond)
[18:03:39.878]                           for (restart in restarts) {
[18:03:39.878]                             name <- restart$name
[18:03:39.878]                             if (is.null(name)) 
[18:03:39.878]                               next
[18:03:39.878]                             if (!grepl(pattern, name)) 
[18:03:39.878]                               next
[18:03:39.878]                             invokeRestart(restart)
[18:03:39.878]                             muffled <- TRUE
[18:03:39.878]                             break
[18:03:39.878]                           }
[18:03:39.878]                         }
[18:03:39.878]                       }
[18:03:39.878]                       invisible(muffled)
[18:03:39.878]                     }
[18:03:39.878]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.878]                   }
[18:03:39.878]                 }
[18:03:39.878]             }
[18:03:39.878]         }))
[18:03:39.878]     }, error = function(ex) {
[18:03:39.878]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:39.878]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.878]                 ...future.rng), started = ...future.startTime, 
[18:03:39.878]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:39.878]             version = "1.8"), class = "FutureResult")
[18:03:39.878]     }, finally = {
[18:03:39.878]         if (!identical(...future.workdir, getwd())) 
[18:03:39.878]             setwd(...future.workdir)
[18:03:39.878]         {
[18:03:39.878]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:39.878]                 ...future.oldOptions$nwarnings <- NULL
[18:03:39.878]             }
[18:03:39.878]             base::options(...future.oldOptions)
[18:03:39.878]             if (.Platform$OS.type == "windows") {
[18:03:39.878]                 old_names <- names(...future.oldEnvVars)
[18:03:39.878]                 envs <- base::Sys.getenv()
[18:03:39.878]                 names <- names(envs)
[18:03:39.878]                 common <- intersect(names, old_names)
[18:03:39.878]                 added <- setdiff(names, old_names)
[18:03:39.878]                 removed <- setdiff(old_names, names)
[18:03:39.878]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:39.878]                   envs[common]]
[18:03:39.878]                 NAMES <- toupper(changed)
[18:03:39.878]                 args <- list()
[18:03:39.878]                 for (kk in seq_along(NAMES)) {
[18:03:39.878]                   name <- changed[[kk]]
[18:03:39.878]                   NAME <- NAMES[[kk]]
[18:03:39.878]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.878]                     next
[18:03:39.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.878]                 }
[18:03:39.878]                 NAMES <- toupper(added)
[18:03:39.878]                 for (kk in seq_along(NAMES)) {
[18:03:39.878]                   name <- added[[kk]]
[18:03:39.878]                   NAME <- NAMES[[kk]]
[18:03:39.878]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.878]                     next
[18:03:39.878]                   args[[name]] <- ""
[18:03:39.878]                 }
[18:03:39.878]                 NAMES <- toupper(removed)
[18:03:39.878]                 for (kk in seq_along(NAMES)) {
[18:03:39.878]                   name <- removed[[kk]]
[18:03:39.878]                   NAME <- NAMES[[kk]]
[18:03:39.878]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.878]                     next
[18:03:39.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.878]                 }
[18:03:39.878]                 if (length(args) > 0) 
[18:03:39.878]                   base::do.call(base::Sys.setenv, args = args)
[18:03:39.878]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:39.878]             }
[18:03:39.878]             else {
[18:03:39.878]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:39.878]             }
[18:03:39.878]             {
[18:03:39.878]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:39.878]                   0L) {
[18:03:39.878]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:39.878]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:39.878]                   base::options(opts)
[18:03:39.878]                 }
[18:03:39.878]                 {
[18:03:39.878]                   {
[18:03:39.878]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:39.878]                     NULL
[18:03:39.878]                   }
[18:03:39.878]                   options(future.plan = NULL)
[18:03:39.878]                   if (is.na(NA_character_)) 
[18:03:39.878]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.878]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:39.878]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:39.878]                     .init = FALSE)
[18:03:39.878]                 }
[18:03:39.878]             }
[18:03:39.878]         }
[18:03:39.878]     })
[18:03:39.878]     if (TRUE) {
[18:03:39.878]         base::sink(type = "output", split = FALSE)
[18:03:39.878]         if (TRUE) {
[18:03:39.878]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:39.878]         }
[18:03:39.878]         else {
[18:03:39.878]             ...future.result["stdout"] <- base::list(NULL)
[18:03:39.878]         }
[18:03:39.878]         base::close(...future.stdout)
[18:03:39.878]         ...future.stdout <- NULL
[18:03:39.878]     }
[18:03:39.878]     ...future.result$conditions <- ...future.conditions
[18:03:39.878]     ...future.result$finished <- base::Sys.time()
[18:03:39.878]     ...future.result
[18:03:39.878] }
[18:03:39.883] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[18:03:39.884] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:39.885] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.885] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[18:03:39.886] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.886] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[18:03:39.891] MultisessionFuture started
[18:03:39.891] - Launch lazy future ... done
[18:03:39.891] run() for ‘MultisessionFuture’ ... done
[18:03:39.891] result() for ClusterFuture ...
[18:03:39.892] receiveMessageFromWorker() for ClusterFuture ...
[18:03:39.892] - Validating connection of MultisessionFuture
[18:03:39.934] - received message: FutureResult
[18:03:39.935] - Received FutureResult
[18:03:39.935] - Erased future from FutureRegistry
[18:03:39.935] result() for ClusterFuture ...
[18:03:39.935] - result already collected: FutureResult
[18:03:39.936] result() for ClusterFuture ... done
[18:03:39.936] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:39.936] result() for ClusterFuture ... done
[18:03:39.936] result() for ClusterFuture ...
[18:03:39.936] - result already collected: FutureResult
[18:03:39.937] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x59a4aff1b5a0>
Arguments '...' exists: FALSE
[18:03:39.938] getGlobalsAndPackages() ...
[18:03:39.938] Searching for globals...
[18:03:39.941] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[18:03:39.941] Searching for globals ... DONE
[18:03:39.941] Resolving globals: FALSE
[18:03:39.942] Tweak future expression to call with '...' arguments ...
[18:03:39.942] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:39.943] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:39.943] - globals: [2] ‘x’, ‘y’
[18:03:39.944] 
[18:03:39.944] getGlobalsAndPackages() ... DONE
[18:03:39.944] run() for ‘Future’ ...
[18:03:39.945] - state: ‘created’
[18:03:39.945] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:39.970] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:39.971] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:39.971]   - Field: ‘node’
[18:03:39.971]   - Field: ‘label’
[18:03:39.971]   - Field: ‘local’
[18:03:39.972]   - Field: ‘owner’
[18:03:39.972]   - Field: ‘envir’
[18:03:39.972]   - Field: ‘workers’
[18:03:39.972]   - Field: ‘packages’
[18:03:39.972]   - Field: ‘gc’
[18:03:39.973]   - Field: ‘conditions’
[18:03:39.973]   - Field: ‘persistent’
[18:03:39.973]   - Field: ‘expr’
[18:03:39.973]   - Field: ‘uuid’
[18:03:39.973]   - Field: ‘seed’
[18:03:39.974]   - Field: ‘version’
[18:03:39.974]   - Field: ‘result’
[18:03:39.974]   - Field: ‘asynchronous’
[18:03:39.974]   - Field: ‘calls’
[18:03:39.974]   - Field: ‘globals’
[18:03:39.975]   - Field: ‘stdout’
[18:03:39.975]   - Field: ‘earlySignal’
[18:03:39.975]   - Field: ‘lazy’
[18:03:39.975]   - Field: ‘state’
[18:03:39.975] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:39.976] - Launch lazy future ...
[18:03:39.976] Packages needed by the future expression (n = 0): <none>
[18:03:39.977] Packages needed by future strategies (n = 0): <none>
[18:03:39.977] {
[18:03:39.977]     {
[18:03:39.977]         {
[18:03:39.977]             ...future.startTime <- base::Sys.time()
[18:03:39.977]             {
[18:03:39.977]                 {
[18:03:39.977]                   {
[18:03:39.977]                     {
[18:03:39.977]                       base::local({
[18:03:39.977]                         has_future <- base::requireNamespace("future", 
[18:03:39.977]                           quietly = TRUE)
[18:03:39.977]                         if (has_future) {
[18:03:39.977]                           ns <- base::getNamespace("future")
[18:03:39.977]                           version <- ns[[".package"]][["version"]]
[18:03:39.977]                           if (is.null(version)) 
[18:03:39.977]                             version <- utils::packageVersion("future")
[18:03:39.977]                         }
[18:03:39.977]                         else {
[18:03:39.977]                           version <- NULL
[18:03:39.977]                         }
[18:03:39.977]                         if (!has_future || version < "1.8.0") {
[18:03:39.977]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:39.977]                             "", base::R.version$version.string), 
[18:03:39.977]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:39.977]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:39.977]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:39.977]                               "release", "version")], collapse = " "), 
[18:03:39.977]                             hostname = base::Sys.info()[["nodename"]])
[18:03:39.977]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:39.977]                             info)
[18:03:39.977]                           info <- base::paste(info, collapse = "; ")
[18:03:39.977]                           if (!has_future) {
[18:03:39.977]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:39.977]                               info)
[18:03:39.977]                           }
[18:03:39.977]                           else {
[18:03:39.977]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:39.977]                               info, version)
[18:03:39.977]                           }
[18:03:39.977]                           base::stop(msg)
[18:03:39.977]                         }
[18:03:39.977]                       })
[18:03:39.977]                     }
[18:03:39.977]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:39.977]                     base::options(mc.cores = 1L)
[18:03:39.977]                   }
[18:03:39.977]                   ...future.strategy.old <- future::plan("list")
[18:03:39.977]                   options(future.plan = NULL)
[18:03:39.977]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.977]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:39.977]                 }
[18:03:39.977]                 ...future.workdir <- getwd()
[18:03:39.977]             }
[18:03:39.977]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:39.977]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:39.977]         }
[18:03:39.977]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:39.977]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:39.977]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:39.977]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:39.977]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:39.977]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:39.977]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:39.977]             base::names(...future.oldOptions))
[18:03:39.977]     }
[18:03:39.977]     if (FALSE) {
[18:03:39.977]     }
[18:03:39.977]     else {
[18:03:39.977]         if (TRUE) {
[18:03:39.977]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:39.977]                 open = "w")
[18:03:39.977]         }
[18:03:39.977]         else {
[18:03:39.977]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:39.977]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:39.977]         }
[18:03:39.977]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:39.977]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:39.977]             base::sink(type = "output", split = FALSE)
[18:03:39.977]             base::close(...future.stdout)
[18:03:39.977]         }, add = TRUE)
[18:03:39.977]     }
[18:03:39.977]     ...future.frame <- base::sys.nframe()
[18:03:39.977]     ...future.conditions <- base::list()
[18:03:39.977]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:39.977]     if (FALSE) {
[18:03:39.977]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:39.977]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:39.977]     }
[18:03:39.977]     ...future.result <- base::tryCatch({
[18:03:39.977]         base::withCallingHandlers({
[18:03:39.977]             ...future.value <- base::withVisible(base::local({
[18:03:39.977]                 ...future.makeSendCondition <- base::local({
[18:03:39.977]                   sendCondition <- NULL
[18:03:39.977]                   function(frame = 1L) {
[18:03:39.977]                     if (is.function(sendCondition)) 
[18:03:39.977]                       return(sendCondition)
[18:03:39.977]                     ns <- getNamespace("parallel")
[18:03:39.977]                     if (exists("sendData", mode = "function", 
[18:03:39.977]                       envir = ns)) {
[18:03:39.977]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:39.977]                         envir = ns)
[18:03:39.977]                       envir <- sys.frame(frame)
[18:03:39.977]                       master <- NULL
[18:03:39.977]                       while (!identical(envir, .GlobalEnv) && 
[18:03:39.977]                         !identical(envir, emptyenv())) {
[18:03:39.977]                         if (exists("master", mode = "list", envir = envir, 
[18:03:39.977]                           inherits = FALSE)) {
[18:03:39.977]                           master <- get("master", mode = "list", 
[18:03:39.977]                             envir = envir, inherits = FALSE)
[18:03:39.977]                           if (inherits(master, c("SOCKnode", 
[18:03:39.977]                             "SOCK0node"))) {
[18:03:39.977]                             sendCondition <<- function(cond) {
[18:03:39.977]                               data <- list(type = "VALUE", value = cond, 
[18:03:39.977]                                 success = TRUE)
[18:03:39.977]                               parallel_sendData(master, data)
[18:03:39.977]                             }
[18:03:39.977]                             return(sendCondition)
[18:03:39.977]                           }
[18:03:39.977]                         }
[18:03:39.977]                         frame <- frame + 1L
[18:03:39.977]                         envir <- sys.frame(frame)
[18:03:39.977]                       }
[18:03:39.977]                     }
[18:03:39.977]                     sendCondition <<- function(cond) NULL
[18:03:39.977]                   }
[18:03:39.977]                 })
[18:03:39.977]                 withCallingHandlers({
[18:03:39.977]                   {
[18:03:39.977]                     sum(x, y, ...)
[18:03:39.977]                   }
[18:03:39.977]                 }, immediateCondition = function(cond) {
[18:03:39.977]                   sendCondition <- ...future.makeSendCondition()
[18:03:39.977]                   sendCondition(cond)
[18:03:39.977]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.977]                   {
[18:03:39.977]                     inherits <- base::inherits
[18:03:39.977]                     invokeRestart <- base::invokeRestart
[18:03:39.977]                     is.null <- base::is.null
[18:03:39.977]                     muffled <- FALSE
[18:03:39.977]                     if (inherits(cond, "message")) {
[18:03:39.977]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:39.977]                       if (muffled) 
[18:03:39.977]                         invokeRestart("muffleMessage")
[18:03:39.977]                     }
[18:03:39.977]                     else if (inherits(cond, "warning")) {
[18:03:39.977]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:39.977]                       if (muffled) 
[18:03:39.977]                         invokeRestart("muffleWarning")
[18:03:39.977]                     }
[18:03:39.977]                     else if (inherits(cond, "condition")) {
[18:03:39.977]                       if (!is.null(pattern)) {
[18:03:39.977]                         computeRestarts <- base::computeRestarts
[18:03:39.977]                         grepl <- base::grepl
[18:03:39.977]                         restarts <- computeRestarts(cond)
[18:03:39.977]                         for (restart in restarts) {
[18:03:39.977]                           name <- restart$name
[18:03:39.977]                           if (is.null(name)) 
[18:03:39.977]                             next
[18:03:39.977]                           if (!grepl(pattern, name)) 
[18:03:39.977]                             next
[18:03:39.977]                           invokeRestart(restart)
[18:03:39.977]                           muffled <- TRUE
[18:03:39.977]                           break
[18:03:39.977]                         }
[18:03:39.977]                       }
[18:03:39.977]                     }
[18:03:39.977]                     invisible(muffled)
[18:03:39.977]                   }
[18:03:39.977]                   muffleCondition(cond)
[18:03:39.977]                 })
[18:03:39.977]             }))
[18:03:39.977]             future::FutureResult(value = ...future.value$value, 
[18:03:39.977]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.977]                   ...future.rng), globalenv = if (FALSE) 
[18:03:39.977]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:39.977]                     ...future.globalenv.names))
[18:03:39.977]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:39.977]         }, condition = base::local({
[18:03:39.977]             c <- base::c
[18:03:39.977]             inherits <- base::inherits
[18:03:39.977]             invokeRestart <- base::invokeRestart
[18:03:39.977]             length <- base::length
[18:03:39.977]             list <- base::list
[18:03:39.977]             seq.int <- base::seq.int
[18:03:39.977]             signalCondition <- base::signalCondition
[18:03:39.977]             sys.calls <- base::sys.calls
[18:03:39.977]             `[[` <- base::`[[`
[18:03:39.977]             `+` <- base::`+`
[18:03:39.977]             `<<-` <- base::`<<-`
[18:03:39.977]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:39.977]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:39.977]                   3L)]
[18:03:39.977]             }
[18:03:39.977]             function(cond) {
[18:03:39.977]                 is_error <- inherits(cond, "error")
[18:03:39.977]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:39.977]                   NULL)
[18:03:39.977]                 if (is_error) {
[18:03:39.977]                   sessionInformation <- function() {
[18:03:39.977]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:39.977]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:39.977]                       search = base::search(), system = base::Sys.info())
[18:03:39.977]                   }
[18:03:39.977]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.977]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:39.977]                     cond$call), session = sessionInformation(), 
[18:03:39.977]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:39.977]                   signalCondition(cond)
[18:03:39.977]                 }
[18:03:39.977]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:39.977]                 "immediateCondition"))) {
[18:03:39.977]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:39.977]                   ...future.conditions[[length(...future.conditions) + 
[18:03:39.977]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:39.977]                   if (TRUE && !signal) {
[18:03:39.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.977]                     {
[18:03:39.977]                       inherits <- base::inherits
[18:03:39.977]                       invokeRestart <- base::invokeRestart
[18:03:39.977]                       is.null <- base::is.null
[18:03:39.977]                       muffled <- FALSE
[18:03:39.977]                       if (inherits(cond, "message")) {
[18:03:39.977]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.977]                         if (muffled) 
[18:03:39.977]                           invokeRestart("muffleMessage")
[18:03:39.977]                       }
[18:03:39.977]                       else if (inherits(cond, "warning")) {
[18:03:39.977]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.977]                         if (muffled) 
[18:03:39.977]                           invokeRestart("muffleWarning")
[18:03:39.977]                       }
[18:03:39.977]                       else if (inherits(cond, "condition")) {
[18:03:39.977]                         if (!is.null(pattern)) {
[18:03:39.977]                           computeRestarts <- base::computeRestarts
[18:03:39.977]                           grepl <- base::grepl
[18:03:39.977]                           restarts <- computeRestarts(cond)
[18:03:39.977]                           for (restart in restarts) {
[18:03:39.977]                             name <- restart$name
[18:03:39.977]                             if (is.null(name)) 
[18:03:39.977]                               next
[18:03:39.977]                             if (!grepl(pattern, name)) 
[18:03:39.977]                               next
[18:03:39.977]                             invokeRestart(restart)
[18:03:39.977]                             muffled <- TRUE
[18:03:39.977]                             break
[18:03:39.977]                           }
[18:03:39.977]                         }
[18:03:39.977]                       }
[18:03:39.977]                       invisible(muffled)
[18:03:39.977]                     }
[18:03:39.977]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.977]                   }
[18:03:39.977]                 }
[18:03:39.977]                 else {
[18:03:39.977]                   if (TRUE) {
[18:03:39.977]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:39.977]                     {
[18:03:39.977]                       inherits <- base::inherits
[18:03:39.977]                       invokeRestart <- base::invokeRestart
[18:03:39.977]                       is.null <- base::is.null
[18:03:39.977]                       muffled <- FALSE
[18:03:39.977]                       if (inherits(cond, "message")) {
[18:03:39.977]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:39.977]                         if (muffled) 
[18:03:39.977]                           invokeRestart("muffleMessage")
[18:03:39.977]                       }
[18:03:39.977]                       else if (inherits(cond, "warning")) {
[18:03:39.977]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:39.977]                         if (muffled) 
[18:03:39.977]                           invokeRestart("muffleWarning")
[18:03:39.977]                       }
[18:03:39.977]                       else if (inherits(cond, "condition")) {
[18:03:39.977]                         if (!is.null(pattern)) {
[18:03:39.977]                           computeRestarts <- base::computeRestarts
[18:03:39.977]                           grepl <- base::grepl
[18:03:39.977]                           restarts <- computeRestarts(cond)
[18:03:39.977]                           for (restart in restarts) {
[18:03:39.977]                             name <- restart$name
[18:03:39.977]                             if (is.null(name)) 
[18:03:39.977]                               next
[18:03:39.977]                             if (!grepl(pattern, name)) 
[18:03:39.977]                               next
[18:03:39.977]                             invokeRestart(restart)
[18:03:39.977]                             muffled <- TRUE
[18:03:39.977]                             break
[18:03:39.977]                           }
[18:03:39.977]                         }
[18:03:39.977]                       }
[18:03:39.977]                       invisible(muffled)
[18:03:39.977]                     }
[18:03:39.977]                     muffleCondition(cond, pattern = "^muffle")
[18:03:39.977]                   }
[18:03:39.977]                 }
[18:03:39.977]             }
[18:03:39.977]         }))
[18:03:39.977]     }, error = function(ex) {
[18:03:39.977]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:39.977]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:39.977]                 ...future.rng), started = ...future.startTime, 
[18:03:39.977]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:39.977]             version = "1.8"), class = "FutureResult")
[18:03:39.977]     }, finally = {
[18:03:39.977]         if (!identical(...future.workdir, getwd())) 
[18:03:39.977]             setwd(...future.workdir)
[18:03:39.977]         {
[18:03:39.977]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:39.977]                 ...future.oldOptions$nwarnings <- NULL
[18:03:39.977]             }
[18:03:39.977]             base::options(...future.oldOptions)
[18:03:39.977]             if (.Platform$OS.type == "windows") {
[18:03:39.977]                 old_names <- names(...future.oldEnvVars)
[18:03:39.977]                 envs <- base::Sys.getenv()
[18:03:39.977]                 names <- names(envs)
[18:03:39.977]                 common <- intersect(names, old_names)
[18:03:39.977]                 added <- setdiff(names, old_names)
[18:03:39.977]                 removed <- setdiff(old_names, names)
[18:03:39.977]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:39.977]                   envs[common]]
[18:03:39.977]                 NAMES <- toupper(changed)
[18:03:39.977]                 args <- list()
[18:03:39.977]                 for (kk in seq_along(NAMES)) {
[18:03:39.977]                   name <- changed[[kk]]
[18:03:39.977]                   NAME <- NAMES[[kk]]
[18:03:39.977]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.977]                     next
[18:03:39.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.977]                 }
[18:03:39.977]                 NAMES <- toupper(added)
[18:03:39.977]                 for (kk in seq_along(NAMES)) {
[18:03:39.977]                   name <- added[[kk]]
[18:03:39.977]                   NAME <- NAMES[[kk]]
[18:03:39.977]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.977]                     next
[18:03:39.977]                   args[[name]] <- ""
[18:03:39.977]                 }
[18:03:39.977]                 NAMES <- toupper(removed)
[18:03:39.977]                 for (kk in seq_along(NAMES)) {
[18:03:39.977]                   name <- removed[[kk]]
[18:03:39.977]                   NAME <- NAMES[[kk]]
[18:03:39.977]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:39.977]                     next
[18:03:39.977]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:39.977]                 }
[18:03:39.977]                 if (length(args) > 0) 
[18:03:39.977]                   base::do.call(base::Sys.setenv, args = args)
[18:03:39.977]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:39.977]             }
[18:03:39.977]             else {
[18:03:39.977]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:39.977]             }
[18:03:39.977]             {
[18:03:39.977]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:39.977]                   0L) {
[18:03:39.977]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:39.977]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:39.977]                   base::options(opts)
[18:03:39.977]                 }
[18:03:39.977]                 {
[18:03:39.977]                   {
[18:03:39.977]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:39.977]                     NULL
[18:03:39.977]                   }
[18:03:39.977]                   options(future.plan = NULL)
[18:03:39.977]                   if (is.na(NA_character_)) 
[18:03:39.977]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:39.977]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:39.977]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:39.977]                     .init = FALSE)
[18:03:39.977]                 }
[18:03:39.977]             }
[18:03:39.977]         }
[18:03:39.977]     })
[18:03:39.977]     if (TRUE) {
[18:03:39.977]         base::sink(type = "output", split = FALSE)
[18:03:39.977]         if (TRUE) {
[18:03:39.977]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:39.977]         }
[18:03:39.977]         else {
[18:03:39.977]             ...future.result["stdout"] <- base::list(NULL)
[18:03:39.977]         }
[18:03:39.977]         base::close(...future.stdout)
[18:03:39.977]         ...future.stdout <- NULL
[18:03:39.977]     }
[18:03:39.977]     ...future.result$conditions <- ...future.conditions
[18:03:39.977]     ...future.result$finished <- base::Sys.time()
[18:03:39.977]     ...future.result
[18:03:39.977] }
[18:03:39.983] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[18:03:39.983] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:39.984] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.984] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[18:03:39.985] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[18:03:39.985] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[18:03:39.987] MultisessionFuture started
[18:03:39.987] - Launch lazy future ... done
[18:03:39.987] run() for ‘MultisessionFuture’ ... done
[18:03:39.987] result() for ClusterFuture ...
[18:03:39.988] receiveMessageFromWorker() for ClusterFuture ...
[18:03:39.988] - Validating connection of MultisessionFuture
[18:03:40.032] - received message: FutureResult
[18:03:40.032] - Received FutureResult
[18:03:40.032] - Erased future from FutureRegistry
[18:03:40.033] result() for ClusterFuture ...
[18:03:40.033] - result already collected: FutureResult
[18:03:40.033] result() for ClusterFuture ... done
[18:03:40.033] signalConditions() ...
[18:03:40.033]  - include = ‘immediateCondition’
[18:03:40.034]  - exclude = 
[18:03:40.034]  - resignal = FALSE
[18:03:40.034]  - Number of conditions: 1
[18:03:40.034] signalConditions() ... done
[18:03:40.035] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:40.035] result() for ClusterFuture ... done
[18:03:40.035] result() for ClusterFuture ...
[18:03:40.035] - result already collected: FutureResult
[18:03:40.035] result() for ClusterFuture ... done
[18:03:40.035] signalConditions() ...
[18:03:40.036]  - include = ‘immediateCondition’
[18:03:40.036]  - exclude = 
[18:03:40.036]  - resignal = FALSE
[18:03:40.036]  - Number of conditions: 1
[18:03:40.036] signalConditions() ... done
[18:03:40.037] Future state: ‘finished’
[18:03:40.037] result() for ClusterFuture ...
[18:03:40.037] - result already collected: FutureResult
[18:03:40.037] result() for ClusterFuture ... done
[18:03:40.038] signalConditions() ...
[18:03:40.038]  - include = ‘condition’
[18:03:40.038]  - exclude = ‘immediateCondition’
[18:03:40.038]  - resignal = TRUE
[18:03:40.038]  - Number of conditions: 1
[18:03:40.038]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:03:40.039] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x59a4b0506b38>
Arguments '...' exists: TRUE
[18:03:40.040] getGlobalsAndPackages() ...
[18:03:40.041] - globals passed as-is: [1] ‘...’
[18:03:40.041] Resolving globals: FALSE
[18:03:40.042] Tweak future expression to call with '...' arguments ...
[18:03:40.042] {
[18:03:40.042]     do.call(function(...) {
[18:03:40.042]         fcn <- function() sum(...)
[18:03:40.042]         fcn()
[18:03:40.042]     }, args = future.call.arguments)
[18:03:40.042] }
[18:03:40.042] Tweak future expression to call with '...' arguments ... DONE
[18:03:40.043] The total size of the 1 globals is 112 bytes (112 bytes)
[18:03:40.044] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[18:03:40.044] - globals: [1] ‘future.call.arguments’
[18:03:40.044] 
[18:03:40.044] getGlobalsAndPackages() ... DONE
[18:03:40.045] run() for ‘Future’ ...
[18:03:40.045] - state: ‘created’
[18:03:40.045] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:40.068] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:40.069] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:40.069]   - Field: ‘node’
[18:03:40.069]   - Field: ‘label’
[18:03:40.069]   - Field: ‘local’
[18:03:40.069]   - Field: ‘owner’
[18:03:40.070]   - Field: ‘envir’
[18:03:40.070]   - Field: ‘workers’
[18:03:40.070]   - Field: ‘packages’
[18:03:40.070]   - Field: ‘gc’
[18:03:40.070]   - Field: ‘conditions’
[18:03:40.071]   - Field: ‘persistent’
[18:03:40.071]   - Field: ‘expr’
[18:03:40.071]   - Field: ‘uuid’
[18:03:40.071]   - Field: ‘seed’
[18:03:40.071]   - Field: ‘version’
[18:03:40.072]   - Field: ‘result’
[18:03:40.072]   - Field: ‘asynchronous’
[18:03:40.072]   - Field: ‘calls’
[18:03:40.072]   - Field: ‘globals’
[18:03:40.072]   - Field: ‘stdout’
[18:03:40.073]   - Field: ‘earlySignal’
[18:03:40.073]   - Field: ‘lazy’
[18:03:40.073]   - Field: ‘state’
[18:03:40.073] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:40.073] - Launch lazy future ...
[18:03:40.074] Packages needed by the future expression (n = 0): <none>
[18:03:40.074] Packages needed by future strategies (n = 0): <none>
[18:03:40.075] {
[18:03:40.075]     {
[18:03:40.075]         {
[18:03:40.075]             ...future.startTime <- base::Sys.time()
[18:03:40.075]             {
[18:03:40.075]                 {
[18:03:40.075]                   {
[18:03:40.075]                     {
[18:03:40.075]                       base::local({
[18:03:40.075]                         has_future <- base::requireNamespace("future", 
[18:03:40.075]                           quietly = TRUE)
[18:03:40.075]                         if (has_future) {
[18:03:40.075]                           ns <- base::getNamespace("future")
[18:03:40.075]                           version <- ns[[".package"]][["version"]]
[18:03:40.075]                           if (is.null(version)) 
[18:03:40.075]                             version <- utils::packageVersion("future")
[18:03:40.075]                         }
[18:03:40.075]                         else {
[18:03:40.075]                           version <- NULL
[18:03:40.075]                         }
[18:03:40.075]                         if (!has_future || version < "1.8.0") {
[18:03:40.075]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:40.075]                             "", base::R.version$version.string), 
[18:03:40.075]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:40.075]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:40.075]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:40.075]                               "release", "version")], collapse = " "), 
[18:03:40.075]                             hostname = base::Sys.info()[["nodename"]])
[18:03:40.075]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:40.075]                             info)
[18:03:40.075]                           info <- base::paste(info, collapse = "; ")
[18:03:40.075]                           if (!has_future) {
[18:03:40.075]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:40.075]                               info)
[18:03:40.075]                           }
[18:03:40.075]                           else {
[18:03:40.075]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:40.075]                               info, version)
[18:03:40.075]                           }
[18:03:40.075]                           base::stop(msg)
[18:03:40.075]                         }
[18:03:40.075]                       })
[18:03:40.075]                     }
[18:03:40.075]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:40.075]                     base::options(mc.cores = 1L)
[18:03:40.075]                   }
[18:03:40.075]                   ...future.strategy.old <- future::plan("list")
[18:03:40.075]                   options(future.plan = NULL)
[18:03:40.075]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:40.075]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:40.075]                 }
[18:03:40.075]                 ...future.workdir <- getwd()
[18:03:40.075]             }
[18:03:40.075]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:40.075]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:40.075]         }
[18:03:40.075]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:40.075]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:40.075]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:40.075]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:40.075]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:40.075]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:40.075]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:40.075]             base::names(...future.oldOptions))
[18:03:40.075]     }
[18:03:40.075]     if (FALSE) {
[18:03:40.075]     }
[18:03:40.075]     else {
[18:03:40.075]         if (TRUE) {
[18:03:40.075]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:40.075]                 open = "w")
[18:03:40.075]         }
[18:03:40.075]         else {
[18:03:40.075]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:40.075]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:40.075]         }
[18:03:40.075]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:40.075]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:40.075]             base::sink(type = "output", split = FALSE)
[18:03:40.075]             base::close(...future.stdout)
[18:03:40.075]         }, add = TRUE)
[18:03:40.075]     }
[18:03:40.075]     ...future.frame <- base::sys.nframe()
[18:03:40.075]     ...future.conditions <- base::list()
[18:03:40.075]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:40.075]     if (FALSE) {
[18:03:40.075]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:40.075]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:40.075]     }
[18:03:40.075]     ...future.result <- base::tryCatch({
[18:03:40.075]         base::withCallingHandlers({
[18:03:40.075]             ...future.value <- base::withVisible(base::local({
[18:03:40.075]                 ...future.makeSendCondition <- base::local({
[18:03:40.075]                   sendCondition <- NULL
[18:03:40.075]                   function(frame = 1L) {
[18:03:40.075]                     if (is.function(sendCondition)) 
[18:03:40.075]                       return(sendCondition)
[18:03:40.075]                     ns <- getNamespace("parallel")
[18:03:40.075]                     if (exists("sendData", mode = "function", 
[18:03:40.075]                       envir = ns)) {
[18:03:40.075]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:40.075]                         envir = ns)
[18:03:40.075]                       envir <- sys.frame(frame)
[18:03:40.075]                       master <- NULL
[18:03:40.075]                       while (!identical(envir, .GlobalEnv) && 
[18:03:40.075]                         !identical(envir, emptyenv())) {
[18:03:40.075]                         if (exists("master", mode = "list", envir = envir, 
[18:03:40.075]                           inherits = FALSE)) {
[18:03:40.075]                           master <- get("master", mode = "list", 
[18:03:40.075]                             envir = envir, inherits = FALSE)
[18:03:40.075]                           if (inherits(master, c("SOCKnode", 
[18:03:40.075]                             "SOCK0node"))) {
[18:03:40.075]                             sendCondition <<- function(cond) {
[18:03:40.075]                               data <- list(type = "VALUE", value = cond, 
[18:03:40.075]                                 success = TRUE)
[18:03:40.075]                               parallel_sendData(master, data)
[18:03:40.075]                             }
[18:03:40.075]                             return(sendCondition)
[18:03:40.075]                           }
[18:03:40.075]                         }
[18:03:40.075]                         frame <- frame + 1L
[18:03:40.075]                         envir <- sys.frame(frame)
[18:03:40.075]                       }
[18:03:40.075]                     }
[18:03:40.075]                     sendCondition <<- function(cond) NULL
[18:03:40.075]                   }
[18:03:40.075]                 })
[18:03:40.075]                 withCallingHandlers({
[18:03:40.075]                   {
[18:03:40.075]                     do.call(function(...) {
[18:03:40.075]                       fcn <- function() sum(...)
[18:03:40.075]                       fcn()
[18:03:40.075]                     }, args = future.call.arguments)
[18:03:40.075]                   }
[18:03:40.075]                 }, immediateCondition = function(cond) {
[18:03:40.075]                   sendCondition <- ...future.makeSendCondition()
[18:03:40.075]                   sendCondition(cond)
[18:03:40.075]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:40.075]                   {
[18:03:40.075]                     inherits <- base::inherits
[18:03:40.075]                     invokeRestart <- base::invokeRestart
[18:03:40.075]                     is.null <- base::is.null
[18:03:40.075]                     muffled <- FALSE
[18:03:40.075]                     if (inherits(cond, "message")) {
[18:03:40.075]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:40.075]                       if (muffled) 
[18:03:40.075]                         invokeRestart("muffleMessage")
[18:03:40.075]                     }
[18:03:40.075]                     else if (inherits(cond, "warning")) {
[18:03:40.075]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:40.075]                       if (muffled) 
[18:03:40.075]                         invokeRestart("muffleWarning")
[18:03:40.075]                     }
[18:03:40.075]                     else if (inherits(cond, "condition")) {
[18:03:40.075]                       if (!is.null(pattern)) {
[18:03:40.075]                         computeRestarts <- base::computeRestarts
[18:03:40.075]                         grepl <- base::grepl
[18:03:40.075]                         restarts <- computeRestarts(cond)
[18:03:40.075]                         for (restart in restarts) {
[18:03:40.075]                           name <- restart$name
[18:03:40.075]                           if (is.null(name)) 
[18:03:40.075]                             next
[18:03:40.075]                           if (!grepl(pattern, name)) 
[18:03:40.075]                             next
[18:03:40.075]                           invokeRestart(restart)
[18:03:40.075]                           muffled <- TRUE
[18:03:40.075]                           break
[18:03:40.075]                         }
[18:03:40.075]                       }
[18:03:40.075]                     }
[18:03:40.075]                     invisible(muffled)
[18:03:40.075]                   }
[18:03:40.075]                   muffleCondition(cond)
[18:03:40.075]                 })
[18:03:40.075]             }))
[18:03:40.075]             future::FutureResult(value = ...future.value$value, 
[18:03:40.075]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:40.075]                   ...future.rng), globalenv = if (FALSE) 
[18:03:40.075]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:40.075]                     ...future.globalenv.names))
[18:03:40.075]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:40.075]         }, condition = base::local({
[18:03:40.075]             c <- base::c
[18:03:40.075]             inherits <- base::inherits
[18:03:40.075]             invokeRestart <- base::invokeRestart
[18:03:40.075]             length <- base::length
[18:03:40.075]             list <- base::list
[18:03:40.075]             seq.int <- base::seq.int
[18:03:40.075]             signalCondition <- base::signalCondition
[18:03:40.075]             sys.calls <- base::sys.calls
[18:03:40.075]             `[[` <- base::`[[`
[18:03:40.075]             `+` <- base::`+`
[18:03:40.075]             `<<-` <- base::`<<-`
[18:03:40.075]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:40.075]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:40.075]                   3L)]
[18:03:40.075]             }
[18:03:40.075]             function(cond) {
[18:03:40.075]                 is_error <- inherits(cond, "error")
[18:03:40.075]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:40.075]                   NULL)
[18:03:40.075]                 if (is_error) {
[18:03:40.075]                   sessionInformation <- function() {
[18:03:40.075]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:40.075]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:40.075]                       search = base::search(), system = base::Sys.info())
[18:03:40.075]                   }
[18:03:40.075]                   ...future.conditions[[length(...future.conditions) + 
[18:03:40.075]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:40.075]                     cond$call), session = sessionInformation(), 
[18:03:40.075]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:40.075]                   signalCondition(cond)
[18:03:40.075]                 }
[18:03:40.075]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:40.075]                 "immediateCondition"))) {
[18:03:40.075]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:40.075]                   ...future.conditions[[length(...future.conditions) + 
[18:03:40.075]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:40.075]                   if (TRUE && !signal) {
[18:03:40.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:40.075]                     {
[18:03:40.075]                       inherits <- base::inherits
[18:03:40.075]                       invokeRestart <- base::invokeRestart
[18:03:40.075]                       is.null <- base::is.null
[18:03:40.075]                       muffled <- FALSE
[18:03:40.075]                       if (inherits(cond, "message")) {
[18:03:40.075]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:40.075]                         if (muffled) 
[18:03:40.075]                           invokeRestart("muffleMessage")
[18:03:40.075]                       }
[18:03:40.075]                       else if (inherits(cond, "warning")) {
[18:03:40.075]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:40.075]                         if (muffled) 
[18:03:40.075]                           invokeRestart("muffleWarning")
[18:03:40.075]                       }
[18:03:40.075]                       else if (inherits(cond, "condition")) {
[18:03:40.075]                         if (!is.null(pattern)) {
[18:03:40.075]                           computeRestarts <- base::computeRestarts
[18:03:40.075]                           grepl <- base::grepl
[18:03:40.075]                           restarts <- computeRestarts(cond)
[18:03:40.075]                           for (restart in restarts) {
[18:03:40.075]                             name <- restart$name
[18:03:40.075]                             if (is.null(name)) 
[18:03:40.075]                               next
[18:03:40.075]                             if (!grepl(pattern, name)) 
[18:03:40.075]                               next
[18:03:40.075]                             invokeRestart(restart)
[18:03:40.075]                             muffled <- TRUE
[18:03:40.075]                             break
[18:03:40.075]                           }
[18:03:40.075]                         }
[18:03:40.075]                       }
[18:03:40.075]                       invisible(muffled)
[18:03:40.075]                     }
[18:03:40.075]                     muffleCondition(cond, pattern = "^muffle")
[18:03:40.075]                   }
[18:03:40.075]                 }
[18:03:40.075]                 else {
[18:03:40.075]                   if (TRUE) {
[18:03:40.075]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:40.075]                     {
[18:03:40.075]                       inherits <- base::inherits
[18:03:40.075]                       invokeRestart <- base::invokeRestart
[18:03:40.075]                       is.null <- base::is.null
[18:03:40.075]                       muffled <- FALSE
[18:03:40.075]                       if (inherits(cond, "message")) {
[18:03:40.075]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:40.075]                         if (muffled) 
[18:03:40.075]                           invokeRestart("muffleMessage")
[18:03:40.075]                       }
[18:03:40.075]                       else if (inherits(cond, "warning")) {
[18:03:40.075]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:40.075]                         if (muffled) 
[18:03:40.075]                           invokeRestart("muffleWarning")
[18:03:40.075]                       }
[18:03:40.075]                       else if (inherits(cond, "condition")) {
[18:03:40.075]                         if (!is.null(pattern)) {
[18:03:40.075]                           computeRestarts <- base::computeRestarts
[18:03:40.075]                           grepl <- base::grepl
[18:03:40.075]                           restarts <- computeRestarts(cond)
[18:03:40.075]                           for (restart in restarts) {
[18:03:40.075]                             name <- restart$name
[18:03:40.075]                             if (is.null(name)) 
[18:03:40.075]                               next
[18:03:40.075]                             if (!grepl(pattern, name)) 
[18:03:40.075]                               next
[18:03:40.075]                             invokeRestart(restart)
[18:03:40.075]                             muffled <- TRUE
[18:03:40.075]                             break
[18:03:40.075]                           }
[18:03:40.075]                         }
[18:03:40.075]                       }
[18:03:40.075]                       invisible(muffled)
[18:03:40.075]                     }
[18:03:40.075]                     muffleCondition(cond, pattern = "^muffle")
[18:03:40.075]                   }
[18:03:40.075]                 }
[18:03:40.075]             }
[18:03:40.075]         }))
[18:03:40.075]     }, error = function(ex) {
[18:03:40.075]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:40.075]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:40.075]                 ...future.rng), started = ...future.startTime, 
[18:03:40.075]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:40.075]             version = "1.8"), class = "FutureResult")
[18:03:40.075]     }, finally = {
[18:03:40.075]         if (!identical(...future.workdir, getwd())) 
[18:03:40.075]             setwd(...future.workdir)
[18:03:40.075]         {
[18:03:40.075]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:40.075]                 ...future.oldOptions$nwarnings <- NULL
[18:03:40.075]             }
[18:03:40.075]             base::options(...future.oldOptions)
[18:03:40.075]             if (.Platform$OS.type == "windows") {
[18:03:40.075]                 old_names <- names(...future.oldEnvVars)
[18:03:40.075]                 envs <- base::Sys.getenv()
[18:03:40.075]                 names <- names(envs)
[18:03:40.075]                 common <- intersect(names, old_names)
[18:03:40.075]                 added <- setdiff(names, old_names)
[18:03:40.075]                 removed <- setdiff(old_names, names)
[18:03:40.075]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:40.075]                   envs[common]]
[18:03:40.075]                 NAMES <- toupper(changed)
[18:03:40.075]                 args <- list()
[18:03:40.075]                 for (kk in seq_along(NAMES)) {
[18:03:40.075]                   name <- changed[[kk]]
[18:03:40.075]                   NAME <- NAMES[[kk]]
[18:03:40.075]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:40.075]                     next
[18:03:40.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:40.075]                 }
[18:03:40.075]                 NAMES <- toupper(added)
[18:03:40.075]                 for (kk in seq_along(NAMES)) {
[18:03:40.075]                   name <- added[[kk]]
[18:03:40.075]                   NAME <- NAMES[[kk]]
[18:03:40.075]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:40.075]                     next
[18:03:40.075]                   args[[name]] <- ""
[18:03:40.075]                 }
[18:03:40.075]                 NAMES <- toupper(removed)
[18:03:40.075]                 for (kk in seq_along(NAMES)) {
[18:03:40.075]                   name <- removed[[kk]]
[18:03:40.075]                   NAME <- NAMES[[kk]]
[18:03:40.075]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:40.075]                     next
[18:03:40.075]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:40.075]                 }
[18:03:40.075]                 if (length(args) > 0) 
[18:03:40.075]                   base::do.call(base::Sys.setenv, args = args)
[18:03:40.075]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:40.075]             }
[18:03:40.075]             else {
[18:03:40.075]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:40.075]             }
[18:03:40.075]             {
[18:03:40.075]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:40.075]                   0L) {
[18:03:40.075]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:40.075]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:40.075]                   base::options(opts)
[18:03:40.075]                 }
[18:03:40.075]                 {
[18:03:40.075]                   {
[18:03:40.075]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:40.075]                     NULL
[18:03:40.075]                   }
[18:03:40.075]                   options(future.plan = NULL)
[18:03:40.075]                   if (is.na(NA_character_)) 
[18:03:40.075]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:40.075]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:40.075]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:40.075]                     .init = FALSE)
[18:03:40.075]                 }
[18:03:40.075]             }
[18:03:40.075]         }
[18:03:40.075]     })
[18:03:40.075]     if (TRUE) {
[18:03:40.075]         base::sink(type = "output", split = FALSE)
[18:03:40.075]         if (TRUE) {
[18:03:40.075]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:40.075]         }
[18:03:40.075]         else {
[18:03:40.075]             ...future.result["stdout"] <- base::list(NULL)
[18:03:40.075]         }
[18:03:40.075]         base::close(...future.stdout)
[18:03:40.075]         ...future.stdout <- NULL
[18:03:40.075]     }
[18:03:40.075]     ...future.result$conditions <- ...future.conditions
[18:03:40.075]     ...future.result$finished <- base::Sys.time()
[18:03:40.075]     ...future.result
[18:03:40.075] }
[18:03:40.080] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[18:03:40.081] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[18:03:40.081] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[18:03:40.082] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[18:03:40.083] MultisessionFuture started
[18:03:40.083] - Launch lazy future ... done
[18:03:40.083] run() for ‘MultisessionFuture’ ... done
[18:03:40.084] result() for ClusterFuture ...
[18:03:40.084] receiveMessageFromWorker() for ClusterFuture ...
[18:03:40.084] - Validating connection of MultisessionFuture
[18:03:40.127] - received message: FutureResult
[18:03:40.127] - Received FutureResult
[18:03:40.128] - Erased future from FutureRegistry
[18:03:40.128] result() for ClusterFuture ...
[18:03:40.128] - result already collected: FutureResult
[18:03:40.128] result() for ClusterFuture ... done
[18:03:40.128] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:40.129] result() for ClusterFuture ... done
[18:03:40.129] result() for ClusterFuture ...
[18:03:40.129] - result already collected: FutureResult
[18:03:40.129] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x59a4ae54de38>
Using '...' in a formula
[18:03:40.130] getGlobalsAndPackages() ...
[18:03:40.130] Searching for globals...
[18:03:40.136] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[18:03:40.136] Searching for globals ... DONE
[18:03:40.136] Resolving globals: FALSE
[18:03:40.137] Tweak future expression to call with '...' arguments ...
[18:03:40.138] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[18:03:40.139] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[18:03:40.139] - globals: [3] ‘fcn’, ‘x’, ‘y’
[18:03:40.139] 
[18:03:40.139] getGlobalsAndPackages() ... DONE
[18:03:40.140] run() for ‘Future’ ...
[18:03:40.140] - state: ‘created’
[18:03:40.141] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:40.167] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:40.167] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:40.168]   - Field: ‘node’
[18:03:40.168]   - Field: ‘label’
[18:03:40.168]   - Field: ‘local’
[18:03:40.169]   - Field: ‘owner’
[18:03:40.169]   - Field: ‘envir’
[18:03:40.169]   - Field: ‘workers’
[18:03:40.169]   - Field: ‘packages’
[18:03:40.170]   - Field: ‘gc’
[18:03:40.170]   - Field: ‘conditions’
[18:03:40.170]   - Field: ‘persistent’
[18:03:40.170]   - Field: ‘expr’
[18:03:40.170]   - Field: ‘uuid’
[18:03:40.171]   - Field: ‘seed’
[18:03:40.171]   - Field: ‘version’
[18:03:40.171]   - Field: ‘result’
[18:03:40.171]   - Field: ‘asynchronous’
[18:03:40.171]   - Field: ‘calls’
[18:03:40.172]   - Field: ‘globals’
[18:03:40.172]   - Field: ‘stdout’
[18:03:40.172]   - Field: ‘earlySignal’
[18:03:40.172]   - Field: ‘lazy’
[18:03:40.173]   - Field: ‘state’
[18:03:40.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:40.173] - Launch lazy future ...
[18:03:40.174] Packages needed by the future expression (n = 0): <none>
[18:03:40.174] Packages needed by future strategies (n = 0): <none>
[18:03:40.175] {
[18:03:40.175]     {
[18:03:40.175]         {
[18:03:40.175]             ...future.startTime <- base::Sys.time()
[18:03:40.175]             {
[18:03:40.175]                 {
[18:03:40.175]                   {
[18:03:40.175]                     {
[18:03:40.175]                       base::local({
[18:03:40.175]                         has_future <- base::requireNamespace("future", 
[18:03:40.175]                           quietly = TRUE)
[18:03:40.175]                         if (has_future) {
[18:03:40.175]                           ns <- base::getNamespace("future")
[18:03:40.175]                           version <- ns[[".package"]][["version"]]
[18:03:40.175]                           if (is.null(version)) 
[18:03:40.175]                             version <- utils::packageVersion("future")
[18:03:40.175]                         }
[18:03:40.175]                         else {
[18:03:40.175]                           version <- NULL
[18:03:40.175]                         }
[18:03:40.175]                         if (!has_future || version < "1.8.0") {
[18:03:40.175]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:40.175]                             "", base::R.version$version.string), 
[18:03:40.175]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:40.175]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:40.175]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:40.175]                               "release", "version")], collapse = " "), 
[18:03:40.175]                             hostname = base::Sys.info()[["nodename"]])
[18:03:40.175]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:40.175]                             info)
[18:03:40.175]                           info <- base::paste(info, collapse = "; ")
[18:03:40.175]                           if (!has_future) {
[18:03:40.175]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:40.175]                               info)
[18:03:40.175]                           }
[18:03:40.175]                           else {
[18:03:40.175]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:40.175]                               info, version)
[18:03:40.175]                           }
[18:03:40.175]                           base::stop(msg)
[18:03:40.175]                         }
[18:03:40.175]                       })
[18:03:40.175]                     }
[18:03:40.175]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:40.175]                     base::options(mc.cores = 1L)
[18:03:40.175]                   }
[18:03:40.175]                   ...future.strategy.old <- future::plan("list")
[18:03:40.175]                   options(future.plan = NULL)
[18:03:40.175]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:40.175]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:40.175]                 }
[18:03:40.175]                 ...future.workdir <- getwd()
[18:03:40.175]             }
[18:03:40.175]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:40.175]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:40.175]         }
[18:03:40.175]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:40.175]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:40.175]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:40.175]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:40.175]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:40.175]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:40.175]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:40.175]             base::names(...future.oldOptions))
[18:03:40.175]     }
[18:03:40.175]     if (FALSE) {
[18:03:40.175]     }
[18:03:40.175]     else {
[18:03:40.175]         if (TRUE) {
[18:03:40.175]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:40.175]                 open = "w")
[18:03:40.175]         }
[18:03:40.175]         else {
[18:03:40.175]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:40.175]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:40.175]         }
[18:03:40.175]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:40.175]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:40.175]             base::sink(type = "output", split = FALSE)
[18:03:40.175]             base::close(...future.stdout)
[18:03:40.175]         }, add = TRUE)
[18:03:40.175]     }
[18:03:40.175]     ...future.frame <- base::sys.nframe()
[18:03:40.175]     ...future.conditions <- base::list()
[18:03:40.175]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:40.175]     if (FALSE) {
[18:03:40.175]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:40.175]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:40.175]     }
[18:03:40.175]     ...future.result <- base::tryCatch({
[18:03:40.175]         base::withCallingHandlers({
[18:03:40.175]             ...future.value <- base::withVisible(base::local({
[18:03:40.175]                 ...future.makeSendCondition <- base::local({
[18:03:40.175]                   sendCondition <- NULL
[18:03:40.175]                   function(frame = 1L) {
[18:03:40.175]                     if (is.function(sendCondition)) 
[18:03:40.175]                       return(sendCondition)
[18:03:40.175]                     ns <- getNamespace("parallel")
[18:03:40.175]                     if (exists("sendData", mode = "function", 
[18:03:40.175]                       envir = ns)) {
[18:03:40.175]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:40.175]                         envir = ns)
[18:03:40.175]                       envir <- sys.frame(frame)
[18:03:40.175]                       master <- NULL
[18:03:40.175]                       while (!identical(envir, .GlobalEnv) && 
[18:03:40.175]                         !identical(envir, emptyenv())) {
[18:03:40.175]                         if (exists("master", mode = "list", envir = envir, 
[18:03:40.175]                           inherits = FALSE)) {
[18:03:40.175]                           master <- get("master", mode = "list", 
[18:03:40.175]                             envir = envir, inherits = FALSE)
[18:03:40.175]                           if (inherits(master, c("SOCKnode", 
[18:03:40.175]                             "SOCK0node"))) {
[18:03:40.175]                             sendCondition <<- function(cond) {
[18:03:40.175]                               data <- list(type = "VALUE", value = cond, 
[18:03:40.175]                                 success = TRUE)
[18:03:40.175]                               parallel_sendData(master, data)
[18:03:40.175]                             }
[18:03:40.175]                             return(sendCondition)
[18:03:40.175]                           }
[18:03:40.175]                         }
[18:03:40.175]                         frame <- frame + 1L
[18:03:40.175]                         envir <- sys.frame(frame)
[18:03:40.175]                       }
[18:03:40.175]                     }
[18:03:40.175]                     sendCondition <<- function(cond) NULL
[18:03:40.175]                   }
[18:03:40.175]                 })
[18:03:40.175]                 withCallingHandlers({
[18:03:40.175]                   fcn(x, y)
[18:03:40.175]                 }, immediateCondition = function(cond) {
[18:03:40.175]                   sendCondition <- ...future.makeSendCondition()
[18:03:40.175]                   sendCondition(cond)
[18:03:40.175]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:40.175]                   {
[18:03:40.175]                     inherits <- base::inherits
[18:03:40.175]                     invokeRestart <- base::invokeRestart
[18:03:40.175]                     is.null <- base::is.null
[18:03:40.175]                     muffled <- FALSE
[18:03:40.175]                     if (inherits(cond, "message")) {
[18:03:40.175]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:40.175]                       if (muffled) 
[18:03:40.175]                         invokeRestart("muffleMessage")
[18:03:40.175]                     }
[18:03:40.175]                     else if (inherits(cond, "warning")) {
[18:03:40.175]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:40.175]                       if (muffled) 
[18:03:40.175]                         invokeRestart("muffleWarning")
[18:03:40.175]                     }
[18:03:40.175]                     else if (inherits(cond, "condition")) {
[18:03:40.175]                       if (!is.null(pattern)) {
[18:03:40.175]                         computeRestarts <- base::computeRestarts
[18:03:40.175]                         grepl <- base::grepl
[18:03:40.175]                         restarts <- computeRestarts(cond)
[18:03:40.175]                         for (restart in restarts) {
[18:03:40.175]                           name <- restart$name
[18:03:40.175]                           if (is.null(name)) 
[18:03:40.175]                             next
[18:03:40.175]                           if (!grepl(pattern, name)) 
[18:03:40.175]                             next
[18:03:40.175]                           invokeRestart(restart)
[18:03:40.175]                           muffled <- TRUE
[18:03:40.175]                           break
[18:03:40.175]                         }
[18:03:40.175]                       }
[18:03:40.175]                     }
[18:03:40.175]                     invisible(muffled)
[18:03:40.175]                   }
[18:03:40.175]                   muffleCondition(cond)
[18:03:40.175]                 })
[18:03:40.175]             }))
[18:03:40.175]             future::FutureResult(value = ...future.value$value, 
[18:03:40.175]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:40.175]                   ...future.rng), globalenv = if (FALSE) 
[18:03:40.175]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:40.175]                     ...future.globalenv.names))
[18:03:40.175]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:40.175]         }, condition = base::local({
[18:03:40.175]             c <- base::c
[18:03:40.175]             inherits <- base::inherits
[18:03:40.175]             invokeRestart <- base::invokeRestart
[18:03:40.175]             length <- base::length
[18:03:40.175]             list <- base::list
[18:03:40.175]             seq.int <- base::seq.int
[18:03:40.175]             signalCondition <- base::signalCondition
[18:03:40.175]             sys.calls <- base::sys.calls
[18:03:40.175]             `[[` <- base::`[[`
[18:03:40.175]             `+` <- base::`+`
[18:03:40.175]             `<<-` <- base::`<<-`
[18:03:40.175]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:40.175]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:40.175]                   3L)]
[18:03:40.175]             }
[18:03:40.175]             function(cond) {
[18:03:40.175]                 is_error <- inherits(cond, "error")
[18:03:40.175]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:40.175]                   NULL)
[18:03:40.175]                 if (is_error) {
[18:03:40.175]                   sessionInformation <- function() {
[18:03:40.175]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:40.175]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:40.175]                       search = base::search(), system = base::Sys.info())
[18:03:40.175]                   }
[18:03:40.175]                   ...future.conditions[[length(...future.conditions) + 
[18:03:40.175]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:40.175]                     cond$call), session = sessionInformation(), 
[18:03:40.175]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:40.175]                   signalCondition(cond)
[18:03:40.175]                 }
[18:03:40.175]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:40.175]                 "immediateCondition"))) {
[18:03:40.175]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:40.175]                   ...future.conditions[[length(...future.conditions) + 
[18:03:40.175]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:40.175]                   if (TRUE && !signal) {
[18:03:40.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:40.175]                     {
[18:03:40.175]                       inherits <- base::inherits
[18:03:40.175]                       invokeRestart <- base::invokeRestart
[18:03:40.175]                       is.null <- base::is.null
[18:03:40.175]                       muffled <- FALSE
[18:03:40.175]                       if (inherits(cond, "message")) {
[18:03:40.175]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:40.175]                         if (muffled) 
[18:03:40.175]                           invokeRestart("muffleMessage")
[18:03:40.175]                       }
[18:03:40.175]                       else if (inherits(cond, "warning")) {
[18:03:40.175]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:40.175]                         if (muffled) 
[18:03:40.175]                           invokeRestart("muffleWarning")
[18:03:40.175]                       }
[18:03:40.175]                       else if (inherits(cond, "condition")) {
[18:03:40.175]                         if (!is.null(pattern)) {
[18:03:40.175]                           computeRestarts <- base::computeRestarts
[18:03:40.175]                           grepl <- base::grepl
[18:03:40.175]                           restarts <- computeRestarts(cond)
[18:03:40.175]                           for (restart in restarts) {
[18:03:40.175]                             name <- restart$name
[18:03:40.175]                             if (is.null(name)) 
[18:03:40.175]                               next
[18:03:40.175]                             if (!grepl(pattern, name)) 
[18:03:40.175]                               next
[18:03:40.175]                             invokeRestart(restart)
[18:03:40.175]                             muffled <- TRUE
[18:03:40.175]                             break
[18:03:40.175]                           }
[18:03:40.175]                         }
[18:03:40.175]                       }
[18:03:40.175]                       invisible(muffled)
[18:03:40.175]                     }
[18:03:40.175]                     muffleCondition(cond, pattern = "^muffle")
[18:03:40.175]                   }
[18:03:40.175]                 }
[18:03:40.175]                 else {
[18:03:40.175]                   if (TRUE) {
[18:03:40.175]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:40.175]                     {
[18:03:40.175]                       inherits <- base::inherits
[18:03:40.175]                       invokeRestart <- base::invokeRestart
[18:03:40.175]                       is.null <- base::is.null
[18:03:40.175]                       muffled <- FALSE
[18:03:40.175]                       if (inherits(cond, "message")) {
[18:03:40.175]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:40.175]                         if (muffled) 
[18:03:40.175]                           invokeRestart("muffleMessage")
[18:03:40.175]                       }
[18:03:40.175]                       else if (inherits(cond, "warning")) {
[18:03:40.175]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:40.175]                         if (muffled) 
[18:03:40.175]                           invokeRestart("muffleWarning")
[18:03:40.175]                       }
[18:03:40.175]                       else if (inherits(cond, "condition")) {
[18:03:40.175]                         if (!is.null(pattern)) {
[18:03:40.175]                           computeRestarts <- base::computeRestarts
[18:03:40.175]                           grepl <- base::grepl
[18:03:40.175]                           restarts <- computeRestarts(cond)
[18:03:40.175]                           for (restart in restarts) {
[18:03:40.175]                             name <- restart$name
[18:03:40.175]                             if (is.null(name)) 
[18:03:40.175]                               next
[18:03:40.175]                             if (!grepl(pattern, name)) 
[18:03:40.175]                               next
[18:03:40.175]                             invokeRestart(restart)
[18:03:40.175]                             muffled <- TRUE
[18:03:40.175]                             break
[18:03:40.175]                           }
[18:03:40.175]                         }
[18:03:40.175]                       }
[18:03:40.175]                       invisible(muffled)
[18:03:40.175]                     }
[18:03:40.175]                     muffleCondition(cond, pattern = "^muffle")
[18:03:40.175]                   }
[18:03:40.175]                 }
[18:03:40.175]             }
[18:03:40.175]         }))
[18:03:40.175]     }, error = function(ex) {
[18:03:40.175]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:40.175]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:40.175]                 ...future.rng), started = ...future.startTime, 
[18:03:40.175]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:40.175]             version = "1.8"), class = "FutureResult")
[18:03:40.175]     }, finally = {
[18:03:40.175]         if (!identical(...future.workdir, getwd())) 
[18:03:40.175]             setwd(...future.workdir)
[18:03:40.175]         {
[18:03:40.175]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:40.175]                 ...future.oldOptions$nwarnings <- NULL
[18:03:40.175]             }
[18:03:40.175]             base::options(...future.oldOptions)
[18:03:40.175]             if (.Platform$OS.type == "windows") {
[18:03:40.175]                 old_names <- names(...future.oldEnvVars)
[18:03:40.175]                 envs <- base::Sys.getenv()
[18:03:40.175]                 names <- names(envs)
[18:03:40.175]                 common <- intersect(names, old_names)
[18:03:40.175]                 added <- setdiff(names, old_names)
[18:03:40.175]                 removed <- setdiff(old_names, names)
[18:03:40.175]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:40.175]                   envs[common]]
[18:03:40.175]                 NAMES <- toupper(changed)
[18:03:40.175]                 args <- list()
[18:03:40.175]                 for (kk in seq_along(NAMES)) {
[18:03:40.175]                   name <- changed[[kk]]
[18:03:40.175]                   NAME <- NAMES[[kk]]
[18:03:40.175]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:40.175]                     next
[18:03:40.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:40.175]                 }
[18:03:40.175]                 NAMES <- toupper(added)
[18:03:40.175]                 for (kk in seq_along(NAMES)) {
[18:03:40.175]                   name <- added[[kk]]
[18:03:40.175]                   NAME <- NAMES[[kk]]
[18:03:40.175]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:40.175]                     next
[18:03:40.175]                   args[[name]] <- ""
[18:03:40.175]                 }
[18:03:40.175]                 NAMES <- toupper(removed)
[18:03:40.175]                 for (kk in seq_along(NAMES)) {
[18:03:40.175]                   name <- removed[[kk]]
[18:03:40.175]                   NAME <- NAMES[[kk]]
[18:03:40.175]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:40.175]                     next
[18:03:40.175]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:40.175]                 }
[18:03:40.175]                 if (length(args) > 0) 
[18:03:40.175]                   base::do.call(base::Sys.setenv, args = args)
[18:03:40.175]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:40.175]             }
[18:03:40.175]             else {
[18:03:40.175]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:40.175]             }
[18:03:40.175]             {
[18:03:40.175]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:40.175]                   0L) {
[18:03:40.175]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:40.175]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:40.175]                   base::options(opts)
[18:03:40.175]                 }
[18:03:40.175]                 {
[18:03:40.175]                   {
[18:03:40.175]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:40.175]                     NULL
[18:03:40.175]                   }
[18:03:40.175]                   options(future.plan = NULL)
[18:03:40.175]                   if (is.na(NA_character_)) 
[18:03:40.175]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:40.175]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:40.175]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:40.175]                     .init = FALSE)
[18:03:40.175]                 }
[18:03:40.175]             }
[18:03:40.175]         }
[18:03:40.175]     })
[18:03:40.175]     if (TRUE) {
[18:03:40.175]         base::sink(type = "output", split = FALSE)
[18:03:40.175]         if (TRUE) {
[18:03:40.175]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:40.175]         }
[18:03:40.175]         else {
[18:03:40.175]             ...future.result["stdout"] <- base::list(NULL)
[18:03:40.175]         }
[18:03:40.175]         base::close(...future.stdout)
[18:03:40.175]         ...future.stdout <- NULL
[18:03:40.175]     }
[18:03:40.175]     ...future.result$conditions <- ...future.conditions
[18:03:40.175]     ...future.result$finished <- base::Sys.time()
[18:03:40.175]     ...future.result
[18:03:40.175] }
[18:03:40.180] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[18:03:40.181] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[18:03:40.182] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[18:03:40.182] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[18:03:40.183] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[18:03:40.183] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[18:03:40.184] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[18:03:40.184] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[18:03:40.185] MultisessionFuture started
[18:03:40.186] - Launch lazy future ... done
[18:03:40.186] run() for ‘MultisessionFuture’ ... done
[18:03:40.186] result() for ClusterFuture ...
[18:03:40.186] receiveMessageFromWorker() for ClusterFuture ...
[18:03:40.187] - Validating connection of MultisessionFuture
[18:03:40.229] - received message: FutureResult
[18:03:40.230] - Received FutureResult
[18:03:40.230] - Erased future from FutureRegistry
[18:03:40.230] result() for ClusterFuture ...
[18:03:40.231] - result already collected: FutureResult
[18:03:40.231] result() for ClusterFuture ... done
[18:03:40.231] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:40.231] result() for ClusterFuture ... done
[18:03:40.232] result() for ClusterFuture ...
[18:03:40.232] - result already collected: FutureResult
[18:03:40.232] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[18:03:40.234] plan(): Setting new future strategy stack:
[18:03:40.234] List of future strategies:
[18:03:40.234] 1. FutureStrategy:
[18:03:40.234]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:40.234]    - tweaked: FALSE
[18:03:40.234]    - call: future::plan(oplan)
[18:03:40.238] plan(): nbrOfWorkers() = 1
> 
