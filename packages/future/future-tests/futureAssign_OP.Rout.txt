
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:20.069] plan(): Setting new future strategy stack:
[17:02:20.070] List of future strategies:
[17:02:20.070] 1. sequential:
[17:02:20.070]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.070]    - tweaked: FALSE
[17:02:20.070]    - call: future::plan("sequential")
[17:02:20.081] plan(): nbrOfWorkers() = 1
> 
> message("*** %<-% ...")
*** %<-% ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** %%<-%% with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     rm(list = intersect(c("x", "y"), ls()))
+ 
+     message("** Future evaluation without globals")
+     v1 %<-% { x <- 1 }
+     stopifnot(!exists("x", inherits = FALSE), identical(v1, 1))
+ 
+     message("** Future evaluation with globals")
+     a <- 2
+     v2 %<-% { x <- a }
+     stopifnot(!exists("x", inherits = FALSE), identical(v2, a))
+ 
+     message("** Future evaluation with errors")
+     v3 %<-% {
+       x <- 3
+       stop("Woops!")
+       x
+     }
+     stopifnot(!exists("x", inherits = FALSE))
+     res <- tryCatch(identical(v3, 3), error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     y <- listenv::listenv()
+     for (ii in 1:3) {
+       y[[ii]] %<-% {
+         if (ii %% 2 == 0) stop("Woops!")
+         ii
+       }
+     }
+     res <- tryCatch(as.list(y), error = identity)
+     stopifnot(inherits(res, "error"))
+     z <- y[c(1, 3)]
+     z <- unlist(z)
+     stopifnot(all(z == c(1, 3)))
+     res <- tryCatch(y[[2]], error = identity)
+     stopifnot(inherits(res, "error"))
+     res <- tryCatch(y[1:2], error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     message("** Future evaluation with a poor-man's \"progress bar\"")
+     v4 %<-% {
+       cat("Processing: ")
+       for (ii in 1:10) { cat(".") }
+       cat(" [100%]\n")
+       4
+     }
+ 
+ 
+     message("** Collecting results")
+     printf("v1 = %s\n", v1)
+     stopifnot(v1 == 1)
+ 
+     printf("v2 = %s\n", v2)
+     stopifnot(v2 == a)
+ 
+     stopifnot(tryCatch({
+       printf("v3 = %s\n", v3)
+     }, error = function(ex) {
+       printf("v3: <%s> (as expect)\n", class(ex)[1])
+       TRUE
+     }))
+ 
+     printf("v4 = %s\n", v4)
+     #stopifnot(v4 == 4)
+ 
+ 
+     message("** Left-to-right and right-to-left future assignments")
+     c %<-% 1
+     printf("c = %s\n", c)
+     1 %->% d
+     printf("d = %s\n", d)
+     stopifnot(d == c)
+ 
+ 
+ 
+     message("** Nested future assignments")
+     a %<-% {
+       b <- 1
+       c %<-% 2
+       3 -> d
+       4 %->% e
+       b + c + d + e
+     }
+     printf("a = %s\n", a)
+     stopifnot(a == 10)
+ 
+     { a + 1 } %->% b
+     printf("b = %s\n", b)
+     stopifnot(b == a + 1)
+ 
+     message(sprintf("*** %%<-%% with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** %<-% with ‘sequential’ futures ...
[17:02:20.141] plan(): Setting new future strategy stack:
[17:02:20.141] List of future strategies:
[17:02:20.141] 1. sequential:
[17:02:20.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.141]    - tweaked: FALSE
[17:02:20.141]    - call: plan(strategy)
[17:02:20.154] plan(): nbrOfWorkers() = 1
** Future evaluation without globals
[17:02:20.156] getGlobalsAndPackages() ...
[17:02:20.156] Searching for globals...
[17:02:20.161] - globals found: [2] ‘{’, ‘<-’
[17:02:20.161] Searching for globals ... DONE
[17:02:20.161] Resolving globals: FALSE
[17:02:20.161] 
[17:02:20.162] 
[17:02:20.162] getGlobalsAndPackages() ... DONE
[17:02:20.162] run() for ‘Future’ ...
[17:02:20.162] - state: ‘created’
[17:02:20.163] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.163] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.163] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.163]   - Field: ‘label’
[17:02:20.163]   - Field: ‘local’
[17:02:20.163]   - Field: ‘owner’
[17:02:20.163]   - Field: ‘envir’
[17:02:20.164]   - Field: ‘packages’
[17:02:20.164]   - Field: ‘gc’
[17:02:20.164]   - Field: ‘conditions’
[17:02:20.164]   - Field: ‘expr’
[17:02:20.164]   - Field: ‘uuid’
[17:02:20.164]   - Field: ‘seed’
[17:02:20.164]   - Field: ‘version’
[17:02:20.164]   - Field: ‘result’
[17:02:20.164]   - Field: ‘asynchronous’
[17:02:20.164]   - Field: ‘calls’
[17:02:20.164]   - Field: ‘globals’
[17:02:20.165]   - Field: ‘stdout’
[17:02:20.165]   - Field: ‘earlySignal’
[17:02:20.165]   - Field: ‘lazy’
[17:02:20.165]   - Field: ‘state’
[17:02:20.165] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.165] - Launch lazy future ...
[17:02:20.166] Packages needed by the future expression (n = 0): <none>
[17:02:20.166] Packages needed by future strategies (n = 0): <none>
[17:02:20.167] {
[17:02:20.167]     {
[17:02:20.167]         {
[17:02:20.167]             ...future.startTime <- base::Sys.time()
[17:02:20.167]             {
[17:02:20.167]                 {
[17:02:20.167]                   {
[17:02:20.167]                     base::local({
[17:02:20.167]                       has_future <- base::requireNamespace("future", 
[17:02:20.167]                         quietly = TRUE)
[17:02:20.167]                       if (has_future) {
[17:02:20.167]                         ns <- base::getNamespace("future")
[17:02:20.167]                         version <- ns[[".package"]][["version"]]
[17:02:20.167]                         if (is.null(version)) 
[17:02:20.167]                           version <- utils::packageVersion("future")
[17:02:20.167]                       }
[17:02:20.167]                       else {
[17:02:20.167]                         version <- NULL
[17:02:20.167]                       }
[17:02:20.167]                       if (!has_future || version < "1.8.0") {
[17:02:20.167]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.167]                           "", base::R.version$version.string), 
[17:02:20.167]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.167]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.167]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.167]                             "release", "version")], collapse = " "), 
[17:02:20.167]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.167]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.167]                           info)
[17:02:20.167]                         info <- base::paste(info, collapse = "; ")
[17:02:20.167]                         if (!has_future) {
[17:02:20.167]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.167]                             info)
[17:02:20.167]                         }
[17:02:20.167]                         else {
[17:02:20.167]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.167]                             info, version)
[17:02:20.167]                         }
[17:02:20.167]                         base::stop(msg)
[17:02:20.167]                       }
[17:02:20.167]                     })
[17:02:20.167]                   }
[17:02:20.167]                   ...future.strategy.old <- future::plan("list")
[17:02:20.167]                   options(future.plan = NULL)
[17:02:20.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.167]                 }
[17:02:20.167]                 ...future.workdir <- getwd()
[17:02:20.167]             }
[17:02:20.167]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.167]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.167]         }
[17:02:20.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.167]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.167]             base::names(...future.oldOptions))
[17:02:20.167]     }
[17:02:20.167]     if (FALSE) {
[17:02:20.167]     }
[17:02:20.167]     else {
[17:02:20.167]         if (TRUE) {
[17:02:20.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.167]                 open = "w")
[17:02:20.167]         }
[17:02:20.167]         else {
[17:02:20.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.167]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.167]         }
[17:02:20.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.167]             base::sink(type = "output", split = FALSE)
[17:02:20.167]             base::close(...future.stdout)
[17:02:20.167]         }, add = TRUE)
[17:02:20.167]     }
[17:02:20.167]     ...future.frame <- base::sys.nframe()
[17:02:20.167]     ...future.conditions <- base::list()
[17:02:20.167]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.167]     if (FALSE) {
[17:02:20.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.167]     }
[17:02:20.167]     ...future.result <- base::tryCatch({
[17:02:20.167]         base::withCallingHandlers({
[17:02:20.167]             ...future.value <- base::withVisible(base::local({
[17:02:20.167]                 x <- 1
[17:02:20.167]             }))
[17:02:20.167]             future::FutureResult(value = ...future.value$value, 
[17:02:20.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.167]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.167]                     ...future.globalenv.names))
[17:02:20.167]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.167]         }, condition = base::local({
[17:02:20.167]             c <- base::c
[17:02:20.167]             inherits <- base::inherits
[17:02:20.167]             invokeRestart <- base::invokeRestart
[17:02:20.167]             length <- base::length
[17:02:20.167]             list <- base::list
[17:02:20.167]             seq.int <- base::seq.int
[17:02:20.167]             signalCondition <- base::signalCondition
[17:02:20.167]             sys.calls <- base::sys.calls
[17:02:20.167]             `[[` <- base::`[[`
[17:02:20.167]             `+` <- base::`+`
[17:02:20.167]             `<<-` <- base::`<<-`
[17:02:20.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.167]                   3L)]
[17:02:20.167]             }
[17:02:20.167]             function(cond) {
[17:02:20.167]                 is_error <- inherits(cond, "error")
[17:02:20.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.167]                   NULL)
[17:02:20.167]                 if (is_error) {
[17:02:20.167]                   sessionInformation <- function() {
[17:02:20.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.167]                       search = base::search(), system = base::Sys.info())
[17:02:20.167]                   }
[17:02:20.167]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.167]                     cond$call), session = sessionInformation(), 
[17:02:20.167]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.167]                   signalCondition(cond)
[17:02:20.167]                 }
[17:02:20.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.167]                 "immediateCondition"))) {
[17:02:20.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.167]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.167]                   if (TRUE && !signal) {
[17:02:20.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.167]                     {
[17:02:20.167]                       inherits <- base::inherits
[17:02:20.167]                       invokeRestart <- base::invokeRestart
[17:02:20.167]                       is.null <- base::is.null
[17:02:20.167]                       muffled <- FALSE
[17:02:20.167]                       if (inherits(cond, "message")) {
[17:02:20.167]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.167]                         if (muffled) 
[17:02:20.167]                           invokeRestart("muffleMessage")
[17:02:20.167]                       }
[17:02:20.167]                       else if (inherits(cond, "warning")) {
[17:02:20.167]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.167]                         if (muffled) 
[17:02:20.167]                           invokeRestart("muffleWarning")
[17:02:20.167]                       }
[17:02:20.167]                       else if (inherits(cond, "condition")) {
[17:02:20.167]                         if (!is.null(pattern)) {
[17:02:20.167]                           computeRestarts <- base::computeRestarts
[17:02:20.167]                           grepl <- base::grepl
[17:02:20.167]                           restarts <- computeRestarts(cond)
[17:02:20.167]                           for (restart in restarts) {
[17:02:20.167]                             name <- restart$name
[17:02:20.167]                             if (is.null(name)) 
[17:02:20.167]                               next
[17:02:20.167]                             if (!grepl(pattern, name)) 
[17:02:20.167]                               next
[17:02:20.167]                             invokeRestart(restart)
[17:02:20.167]                             muffled <- TRUE
[17:02:20.167]                             break
[17:02:20.167]                           }
[17:02:20.167]                         }
[17:02:20.167]                       }
[17:02:20.167]                       invisible(muffled)
[17:02:20.167]                     }
[17:02:20.167]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.167]                   }
[17:02:20.167]                 }
[17:02:20.167]                 else {
[17:02:20.167]                   if (TRUE) {
[17:02:20.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.167]                     {
[17:02:20.167]                       inherits <- base::inherits
[17:02:20.167]                       invokeRestart <- base::invokeRestart
[17:02:20.167]                       is.null <- base::is.null
[17:02:20.167]                       muffled <- FALSE
[17:02:20.167]                       if (inherits(cond, "message")) {
[17:02:20.167]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.167]                         if (muffled) 
[17:02:20.167]                           invokeRestart("muffleMessage")
[17:02:20.167]                       }
[17:02:20.167]                       else if (inherits(cond, "warning")) {
[17:02:20.167]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.167]                         if (muffled) 
[17:02:20.167]                           invokeRestart("muffleWarning")
[17:02:20.167]                       }
[17:02:20.167]                       else if (inherits(cond, "condition")) {
[17:02:20.167]                         if (!is.null(pattern)) {
[17:02:20.167]                           computeRestarts <- base::computeRestarts
[17:02:20.167]                           grepl <- base::grepl
[17:02:20.167]                           restarts <- computeRestarts(cond)
[17:02:20.167]                           for (restart in restarts) {
[17:02:20.167]                             name <- restart$name
[17:02:20.167]                             if (is.null(name)) 
[17:02:20.167]                               next
[17:02:20.167]                             if (!grepl(pattern, name)) 
[17:02:20.167]                               next
[17:02:20.167]                             invokeRestart(restart)
[17:02:20.167]                             muffled <- TRUE
[17:02:20.167]                             break
[17:02:20.167]                           }
[17:02:20.167]                         }
[17:02:20.167]                       }
[17:02:20.167]                       invisible(muffled)
[17:02:20.167]                     }
[17:02:20.167]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.167]                   }
[17:02:20.167]                 }
[17:02:20.167]             }
[17:02:20.167]         }))
[17:02:20.167]     }, error = function(ex) {
[17:02:20.167]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.167]                 ...future.rng), started = ...future.startTime, 
[17:02:20.167]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.167]             version = "1.8"), class = "FutureResult")
[17:02:20.167]     }, finally = {
[17:02:20.167]         if (!identical(...future.workdir, getwd())) 
[17:02:20.167]             setwd(...future.workdir)
[17:02:20.167]         {
[17:02:20.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.167]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.167]             }
[17:02:20.167]             base::options(...future.oldOptions)
[17:02:20.167]             if (.Platform$OS.type == "windows") {
[17:02:20.167]                 old_names <- names(...future.oldEnvVars)
[17:02:20.167]                 envs <- base::Sys.getenv()
[17:02:20.167]                 names <- names(envs)
[17:02:20.167]                 common <- intersect(names, old_names)
[17:02:20.167]                 added <- setdiff(names, old_names)
[17:02:20.167]                 removed <- setdiff(old_names, names)
[17:02:20.167]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.167]                   envs[common]]
[17:02:20.167]                 NAMES <- toupper(changed)
[17:02:20.167]                 args <- list()
[17:02:20.167]                 for (kk in seq_along(NAMES)) {
[17:02:20.167]                   name <- changed[[kk]]
[17:02:20.167]                   NAME <- NAMES[[kk]]
[17:02:20.167]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.167]                     next
[17:02:20.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.167]                 }
[17:02:20.167]                 NAMES <- toupper(added)
[17:02:20.167]                 for (kk in seq_along(NAMES)) {
[17:02:20.167]                   name <- added[[kk]]
[17:02:20.167]                   NAME <- NAMES[[kk]]
[17:02:20.167]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.167]                     next
[17:02:20.167]                   args[[name]] <- ""
[17:02:20.167]                 }
[17:02:20.167]                 NAMES <- toupper(removed)
[17:02:20.167]                 for (kk in seq_along(NAMES)) {
[17:02:20.167]                   name <- removed[[kk]]
[17:02:20.167]                   NAME <- NAMES[[kk]]
[17:02:20.167]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.167]                     next
[17:02:20.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.167]                 }
[17:02:20.167]                 if (length(args) > 0) 
[17:02:20.167]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.167]             }
[17:02:20.167]             else {
[17:02:20.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.167]             }
[17:02:20.167]             {
[17:02:20.167]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.167]                   0L) {
[17:02:20.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.167]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.167]                   base::options(opts)
[17:02:20.167]                 }
[17:02:20.167]                 {
[17:02:20.167]                   {
[17:02:20.167]                     NULL
[17:02:20.167]                     RNGkind("Mersenne-Twister")
[17:02:20.167]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.167]                       inherits = FALSE)
[17:02:20.167]                   }
[17:02:20.167]                   options(future.plan = NULL)
[17:02:20.167]                   if (is.na(NA_character_)) 
[17:02:20.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.167]                     .init = FALSE)
[17:02:20.167]                 }
[17:02:20.167]             }
[17:02:20.167]         }
[17:02:20.167]     })
[17:02:20.167]     if (TRUE) {
[17:02:20.167]         base::sink(type = "output", split = FALSE)
[17:02:20.167]         if (TRUE) {
[17:02:20.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.167]         }
[17:02:20.167]         else {
[17:02:20.167]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.167]         }
[17:02:20.167]         base::close(...future.stdout)
[17:02:20.167]         ...future.stdout <- NULL
[17:02:20.167]     }
[17:02:20.167]     ...future.result$conditions <- ...future.conditions
[17:02:20.167]     ...future.result$finished <- base::Sys.time()
[17:02:20.167]     ...future.result
[17:02:20.167] }
[17:02:20.169] plan(): Setting new future strategy stack:
[17:02:20.169] List of future strategies:
[17:02:20.169] 1. sequential:
[17:02:20.169]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.169]    - tweaked: FALSE
[17:02:20.169]    - call: NULL
[17:02:20.169] plan(): nbrOfWorkers() = 1
[17:02:20.171] plan(): Setting new future strategy stack:
[17:02:20.171] List of future strategies:
[17:02:20.171] 1. sequential:
[17:02:20.171]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.171]    - tweaked: FALSE
[17:02:20.171]    - call: plan(strategy)
[17:02:20.171] plan(): nbrOfWorkers() = 1
[17:02:20.171] SequentialFuture started (and completed)
[17:02:20.172] - Launch lazy future ... done
[17:02:20.172] run() for ‘SequentialFuture’ ... done
** Future evaluation with globals
[17:02:20.173] getGlobalsAndPackages() ...
[17:02:20.173] Searching for globals...
[17:02:20.174] - globals found: [3] ‘{’, ‘<-’, ‘a’
[17:02:20.174] Searching for globals ... DONE
[17:02:20.174] Resolving globals: FALSE
[17:02:20.175] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.175] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:20.175] - globals: [1] ‘a’
[17:02:20.175] 
[17:02:20.175] getGlobalsAndPackages() ... DONE
[17:02:20.176] run() for ‘Future’ ...
[17:02:20.176] - state: ‘created’
[17:02:20.176] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.176] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.176] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.176]   - Field: ‘label’
[17:02:20.176]   - Field: ‘local’
[17:02:20.177]   - Field: ‘owner’
[17:02:20.177]   - Field: ‘envir’
[17:02:20.177]   - Field: ‘packages’
[17:02:20.177]   - Field: ‘gc’
[17:02:20.177]   - Field: ‘conditions’
[17:02:20.177]   - Field: ‘expr’
[17:02:20.177]   - Field: ‘uuid’
[17:02:20.177]   - Field: ‘seed’
[17:02:20.177]   - Field: ‘version’
[17:02:20.177]   - Field: ‘result’
[17:02:20.177]   - Field: ‘asynchronous’
[17:02:20.178]   - Field: ‘calls’
[17:02:20.178]   - Field: ‘globals’
[17:02:20.178]   - Field: ‘stdout’
[17:02:20.178]   - Field: ‘earlySignal’
[17:02:20.178]   - Field: ‘lazy’
[17:02:20.178]   - Field: ‘state’
[17:02:20.178] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.178] - Launch lazy future ...
[17:02:20.178] Packages needed by the future expression (n = 0): <none>
[17:02:20.178] Packages needed by future strategies (n = 0): <none>
[17:02:20.179] {
[17:02:20.179]     {
[17:02:20.179]         {
[17:02:20.179]             ...future.startTime <- base::Sys.time()
[17:02:20.179]             {
[17:02:20.179]                 {
[17:02:20.179]                   {
[17:02:20.179]                     base::local({
[17:02:20.179]                       has_future <- base::requireNamespace("future", 
[17:02:20.179]                         quietly = TRUE)
[17:02:20.179]                       if (has_future) {
[17:02:20.179]                         ns <- base::getNamespace("future")
[17:02:20.179]                         version <- ns[[".package"]][["version"]]
[17:02:20.179]                         if (is.null(version)) 
[17:02:20.179]                           version <- utils::packageVersion("future")
[17:02:20.179]                       }
[17:02:20.179]                       else {
[17:02:20.179]                         version <- NULL
[17:02:20.179]                       }
[17:02:20.179]                       if (!has_future || version < "1.8.0") {
[17:02:20.179]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.179]                           "", base::R.version$version.string), 
[17:02:20.179]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.179]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.179]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.179]                             "release", "version")], collapse = " "), 
[17:02:20.179]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.179]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.179]                           info)
[17:02:20.179]                         info <- base::paste(info, collapse = "; ")
[17:02:20.179]                         if (!has_future) {
[17:02:20.179]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.179]                             info)
[17:02:20.179]                         }
[17:02:20.179]                         else {
[17:02:20.179]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.179]                             info, version)
[17:02:20.179]                         }
[17:02:20.179]                         base::stop(msg)
[17:02:20.179]                       }
[17:02:20.179]                     })
[17:02:20.179]                   }
[17:02:20.179]                   ...future.strategy.old <- future::plan("list")
[17:02:20.179]                   options(future.plan = NULL)
[17:02:20.179]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.179]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.179]                 }
[17:02:20.179]                 ...future.workdir <- getwd()
[17:02:20.179]             }
[17:02:20.179]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.179]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.179]         }
[17:02:20.179]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.179]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.179]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.179]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.179]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.179]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.179]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.179]             base::names(...future.oldOptions))
[17:02:20.179]     }
[17:02:20.179]     if (FALSE) {
[17:02:20.179]     }
[17:02:20.179]     else {
[17:02:20.179]         if (TRUE) {
[17:02:20.179]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.179]                 open = "w")
[17:02:20.179]         }
[17:02:20.179]         else {
[17:02:20.179]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.179]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.179]         }
[17:02:20.179]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.179]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.179]             base::sink(type = "output", split = FALSE)
[17:02:20.179]             base::close(...future.stdout)
[17:02:20.179]         }, add = TRUE)
[17:02:20.179]     }
[17:02:20.179]     ...future.frame <- base::sys.nframe()
[17:02:20.179]     ...future.conditions <- base::list()
[17:02:20.179]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.179]     if (FALSE) {
[17:02:20.179]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.179]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.179]     }
[17:02:20.179]     ...future.result <- base::tryCatch({
[17:02:20.179]         base::withCallingHandlers({
[17:02:20.179]             ...future.value <- base::withVisible(base::local({
[17:02:20.179]                 x <- a
[17:02:20.179]             }))
[17:02:20.179]             future::FutureResult(value = ...future.value$value, 
[17:02:20.179]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.179]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.179]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.179]                     ...future.globalenv.names))
[17:02:20.179]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.179]         }, condition = base::local({
[17:02:20.179]             c <- base::c
[17:02:20.179]             inherits <- base::inherits
[17:02:20.179]             invokeRestart <- base::invokeRestart
[17:02:20.179]             length <- base::length
[17:02:20.179]             list <- base::list
[17:02:20.179]             seq.int <- base::seq.int
[17:02:20.179]             signalCondition <- base::signalCondition
[17:02:20.179]             sys.calls <- base::sys.calls
[17:02:20.179]             `[[` <- base::`[[`
[17:02:20.179]             `+` <- base::`+`
[17:02:20.179]             `<<-` <- base::`<<-`
[17:02:20.179]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.179]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.179]                   3L)]
[17:02:20.179]             }
[17:02:20.179]             function(cond) {
[17:02:20.179]                 is_error <- inherits(cond, "error")
[17:02:20.179]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.179]                   NULL)
[17:02:20.179]                 if (is_error) {
[17:02:20.179]                   sessionInformation <- function() {
[17:02:20.179]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.179]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.179]                       search = base::search(), system = base::Sys.info())
[17:02:20.179]                   }
[17:02:20.179]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.179]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.179]                     cond$call), session = sessionInformation(), 
[17:02:20.179]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.179]                   signalCondition(cond)
[17:02:20.179]                 }
[17:02:20.179]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.179]                 "immediateCondition"))) {
[17:02:20.179]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.179]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.179]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.179]                   if (TRUE && !signal) {
[17:02:20.179]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.179]                     {
[17:02:20.179]                       inherits <- base::inherits
[17:02:20.179]                       invokeRestart <- base::invokeRestart
[17:02:20.179]                       is.null <- base::is.null
[17:02:20.179]                       muffled <- FALSE
[17:02:20.179]                       if (inherits(cond, "message")) {
[17:02:20.179]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.179]                         if (muffled) 
[17:02:20.179]                           invokeRestart("muffleMessage")
[17:02:20.179]                       }
[17:02:20.179]                       else if (inherits(cond, "warning")) {
[17:02:20.179]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.179]                         if (muffled) 
[17:02:20.179]                           invokeRestart("muffleWarning")
[17:02:20.179]                       }
[17:02:20.179]                       else if (inherits(cond, "condition")) {
[17:02:20.179]                         if (!is.null(pattern)) {
[17:02:20.179]                           computeRestarts <- base::computeRestarts
[17:02:20.179]                           grepl <- base::grepl
[17:02:20.179]                           restarts <- computeRestarts(cond)
[17:02:20.179]                           for (restart in restarts) {
[17:02:20.179]                             name <- restart$name
[17:02:20.179]                             if (is.null(name)) 
[17:02:20.179]                               next
[17:02:20.179]                             if (!grepl(pattern, name)) 
[17:02:20.179]                               next
[17:02:20.179]                             invokeRestart(restart)
[17:02:20.179]                             muffled <- TRUE
[17:02:20.179]                             break
[17:02:20.179]                           }
[17:02:20.179]                         }
[17:02:20.179]                       }
[17:02:20.179]                       invisible(muffled)
[17:02:20.179]                     }
[17:02:20.179]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.179]                   }
[17:02:20.179]                 }
[17:02:20.179]                 else {
[17:02:20.179]                   if (TRUE) {
[17:02:20.179]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.179]                     {
[17:02:20.179]                       inherits <- base::inherits
[17:02:20.179]                       invokeRestart <- base::invokeRestart
[17:02:20.179]                       is.null <- base::is.null
[17:02:20.179]                       muffled <- FALSE
[17:02:20.179]                       if (inherits(cond, "message")) {
[17:02:20.179]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.179]                         if (muffled) 
[17:02:20.179]                           invokeRestart("muffleMessage")
[17:02:20.179]                       }
[17:02:20.179]                       else if (inherits(cond, "warning")) {
[17:02:20.179]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.179]                         if (muffled) 
[17:02:20.179]                           invokeRestart("muffleWarning")
[17:02:20.179]                       }
[17:02:20.179]                       else if (inherits(cond, "condition")) {
[17:02:20.179]                         if (!is.null(pattern)) {
[17:02:20.179]                           computeRestarts <- base::computeRestarts
[17:02:20.179]                           grepl <- base::grepl
[17:02:20.179]                           restarts <- computeRestarts(cond)
[17:02:20.179]                           for (restart in restarts) {
[17:02:20.179]                             name <- restart$name
[17:02:20.179]                             if (is.null(name)) 
[17:02:20.179]                               next
[17:02:20.179]                             if (!grepl(pattern, name)) 
[17:02:20.179]                               next
[17:02:20.179]                             invokeRestart(restart)
[17:02:20.179]                             muffled <- TRUE
[17:02:20.179]                             break
[17:02:20.179]                           }
[17:02:20.179]                         }
[17:02:20.179]                       }
[17:02:20.179]                       invisible(muffled)
[17:02:20.179]                     }
[17:02:20.179]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.179]                   }
[17:02:20.179]                 }
[17:02:20.179]             }
[17:02:20.179]         }))
[17:02:20.179]     }, error = function(ex) {
[17:02:20.179]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.179]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.179]                 ...future.rng), started = ...future.startTime, 
[17:02:20.179]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.179]             version = "1.8"), class = "FutureResult")
[17:02:20.179]     }, finally = {
[17:02:20.179]         if (!identical(...future.workdir, getwd())) 
[17:02:20.179]             setwd(...future.workdir)
[17:02:20.179]         {
[17:02:20.179]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.179]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.179]             }
[17:02:20.179]             base::options(...future.oldOptions)
[17:02:20.179]             if (.Platform$OS.type == "windows") {
[17:02:20.179]                 old_names <- names(...future.oldEnvVars)
[17:02:20.179]                 envs <- base::Sys.getenv()
[17:02:20.179]                 names <- names(envs)
[17:02:20.179]                 common <- intersect(names, old_names)
[17:02:20.179]                 added <- setdiff(names, old_names)
[17:02:20.179]                 removed <- setdiff(old_names, names)
[17:02:20.179]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.179]                   envs[common]]
[17:02:20.179]                 NAMES <- toupper(changed)
[17:02:20.179]                 args <- list()
[17:02:20.179]                 for (kk in seq_along(NAMES)) {
[17:02:20.179]                   name <- changed[[kk]]
[17:02:20.179]                   NAME <- NAMES[[kk]]
[17:02:20.179]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.179]                     next
[17:02:20.179]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.179]                 }
[17:02:20.179]                 NAMES <- toupper(added)
[17:02:20.179]                 for (kk in seq_along(NAMES)) {
[17:02:20.179]                   name <- added[[kk]]
[17:02:20.179]                   NAME <- NAMES[[kk]]
[17:02:20.179]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.179]                     next
[17:02:20.179]                   args[[name]] <- ""
[17:02:20.179]                 }
[17:02:20.179]                 NAMES <- toupper(removed)
[17:02:20.179]                 for (kk in seq_along(NAMES)) {
[17:02:20.179]                   name <- removed[[kk]]
[17:02:20.179]                   NAME <- NAMES[[kk]]
[17:02:20.179]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.179]                     next
[17:02:20.179]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.179]                 }
[17:02:20.179]                 if (length(args) > 0) 
[17:02:20.179]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.179]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.179]             }
[17:02:20.179]             else {
[17:02:20.179]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.179]             }
[17:02:20.179]             {
[17:02:20.179]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.179]                   0L) {
[17:02:20.179]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.179]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.179]                   base::options(opts)
[17:02:20.179]                 }
[17:02:20.179]                 {
[17:02:20.179]                   {
[17:02:20.179]                     NULL
[17:02:20.179]                     RNGkind("Mersenne-Twister")
[17:02:20.179]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.179]                       inherits = FALSE)
[17:02:20.179]                   }
[17:02:20.179]                   options(future.plan = NULL)
[17:02:20.179]                   if (is.na(NA_character_)) 
[17:02:20.179]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.179]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.179]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.179]                     .init = FALSE)
[17:02:20.179]                 }
[17:02:20.179]             }
[17:02:20.179]         }
[17:02:20.179]     })
[17:02:20.179]     if (TRUE) {
[17:02:20.179]         base::sink(type = "output", split = FALSE)
[17:02:20.179]         if (TRUE) {
[17:02:20.179]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.179]         }
[17:02:20.179]         else {
[17:02:20.179]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.179]         }
[17:02:20.179]         base::close(...future.stdout)
[17:02:20.179]         ...future.stdout <- NULL
[17:02:20.179]     }
[17:02:20.179]     ...future.result$conditions <- ...future.conditions
[17:02:20.179]     ...future.result$finished <- base::Sys.time()
[17:02:20.179]     ...future.result
[17:02:20.179] }
[17:02:20.181] assign_globals() ...
[17:02:20.181] List of 1
[17:02:20.181]  $ a: num 2
[17:02:20.181]  - attr(*, "where")=List of 1
[17:02:20.181]   ..$ a:<environment: R_EmptyEnv> 
[17:02:20.181]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.181]  - attr(*, "resolved")= logi FALSE
[17:02:20.181]  - attr(*, "total_size")= num 56
[17:02:20.181]  - attr(*, "already-done")= logi TRUE
[17:02:20.185] - copied ‘a’ to environment
[17:02:20.185] assign_globals() ... done
[17:02:20.186] plan(): Setting new future strategy stack:
[17:02:20.186] List of future strategies:
[17:02:20.186] 1. sequential:
[17:02:20.186]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.186]    - tweaked: FALSE
[17:02:20.186]    - call: NULL
[17:02:20.186] plan(): nbrOfWorkers() = 1
[17:02:20.187] plan(): Setting new future strategy stack:
[17:02:20.187] List of future strategies:
[17:02:20.187] 1. sequential:
[17:02:20.187]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.187]    - tweaked: FALSE
[17:02:20.187]    - call: plan(strategy)
[17:02:20.187] plan(): nbrOfWorkers() = 1
[17:02:20.188] SequentialFuture started (and completed)
[17:02:20.188] - Launch lazy future ... done
[17:02:20.188] run() for ‘SequentialFuture’ ... done
** Future evaluation with errors
[17:02:20.188] getGlobalsAndPackages() ...
[17:02:20.188] Searching for globals...
[17:02:20.195] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[17:02:20.195] Searching for globals ... DONE
[17:02:20.195] Resolving globals: FALSE
[17:02:20.195] 
[17:02:20.195] 
[17:02:20.196] getGlobalsAndPackages() ... DONE
[17:02:20.196] run() for ‘Future’ ...
[17:02:20.196] - state: ‘created’
[17:02:20.196] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.196] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.196] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.196]   - Field: ‘label’
[17:02:20.197]   - Field: ‘local’
[17:02:20.197]   - Field: ‘owner’
[17:02:20.197]   - Field: ‘envir’
[17:02:20.197]   - Field: ‘packages’
[17:02:20.197]   - Field: ‘gc’
[17:02:20.197]   - Field: ‘conditions’
[17:02:20.197]   - Field: ‘expr’
[17:02:20.197]   - Field: ‘uuid’
[17:02:20.197]   - Field: ‘seed’
[17:02:20.197]   - Field: ‘version’
[17:02:20.198]   - Field: ‘result’
[17:02:20.198]   - Field: ‘asynchronous’
[17:02:20.198]   - Field: ‘calls’
[17:02:20.198]   - Field: ‘globals’
[17:02:20.198]   - Field: ‘stdout’
[17:02:20.198]   - Field: ‘earlySignal’
[17:02:20.198]   - Field: ‘lazy’
[17:02:20.198]   - Field: ‘state’
[17:02:20.198] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.198] - Launch lazy future ...
[17:02:20.199] Packages needed by the future expression (n = 0): <none>
[17:02:20.199] Packages needed by future strategies (n = 0): <none>
[17:02:20.199] {
[17:02:20.199]     {
[17:02:20.199]         {
[17:02:20.199]             ...future.startTime <- base::Sys.time()
[17:02:20.199]             {
[17:02:20.199]                 {
[17:02:20.199]                   {
[17:02:20.199]                     base::local({
[17:02:20.199]                       has_future <- base::requireNamespace("future", 
[17:02:20.199]                         quietly = TRUE)
[17:02:20.199]                       if (has_future) {
[17:02:20.199]                         ns <- base::getNamespace("future")
[17:02:20.199]                         version <- ns[[".package"]][["version"]]
[17:02:20.199]                         if (is.null(version)) 
[17:02:20.199]                           version <- utils::packageVersion("future")
[17:02:20.199]                       }
[17:02:20.199]                       else {
[17:02:20.199]                         version <- NULL
[17:02:20.199]                       }
[17:02:20.199]                       if (!has_future || version < "1.8.0") {
[17:02:20.199]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.199]                           "", base::R.version$version.string), 
[17:02:20.199]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.199]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.199]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.199]                             "release", "version")], collapse = " "), 
[17:02:20.199]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.199]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.199]                           info)
[17:02:20.199]                         info <- base::paste(info, collapse = "; ")
[17:02:20.199]                         if (!has_future) {
[17:02:20.199]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.199]                             info)
[17:02:20.199]                         }
[17:02:20.199]                         else {
[17:02:20.199]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.199]                             info, version)
[17:02:20.199]                         }
[17:02:20.199]                         base::stop(msg)
[17:02:20.199]                       }
[17:02:20.199]                     })
[17:02:20.199]                   }
[17:02:20.199]                   ...future.strategy.old <- future::plan("list")
[17:02:20.199]                   options(future.plan = NULL)
[17:02:20.199]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.199]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.199]                 }
[17:02:20.199]                 ...future.workdir <- getwd()
[17:02:20.199]             }
[17:02:20.199]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.199]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.199]         }
[17:02:20.199]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.199]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.199]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.199]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.199]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.199]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.199]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.199]             base::names(...future.oldOptions))
[17:02:20.199]     }
[17:02:20.199]     if (FALSE) {
[17:02:20.199]     }
[17:02:20.199]     else {
[17:02:20.199]         if (TRUE) {
[17:02:20.199]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.199]                 open = "w")
[17:02:20.199]         }
[17:02:20.199]         else {
[17:02:20.199]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.199]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.199]         }
[17:02:20.199]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.199]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.199]             base::sink(type = "output", split = FALSE)
[17:02:20.199]             base::close(...future.stdout)
[17:02:20.199]         }, add = TRUE)
[17:02:20.199]     }
[17:02:20.199]     ...future.frame <- base::sys.nframe()
[17:02:20.199]     ...future.conditions <- base::list()
[17:02:20.199]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.199]     if (FALSE) {
[17:02:20.199]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.199]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.199]     }
[17:02:20.199]     ...future.result <- base::tryCatch({
[17:02:20.199]         base::withCallingHandlers({
[17:02:20.199]             ...future.value <- base::withVisible(base::local({
[17:02:20.199]                 x <- 3
[17:02:20.199]                 stop("Woops!")
[17:02:20.199]                 x
[17:02:20.199]             }))
[17:02:20.199]             future::FutureResult(value = ...future.value$value, 
[17:02:20.199]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.199]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.199]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.199]                     ...future.globalenv.names))
[17:02:20.199]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.199]         }, condition = base::local({
[17:02:20.199]             c <- base::c
[17:02:20.199]             inherits <- base::inherits
[17:02:20.199]             invokeRestart <- base::invokeRestart
[17:02:20.199]             length <- base::length
[17:02:20.199]             list <- base::list
[17:02:20.199]             seq.int <- base::seq.int
[17:02:20.199]             signalCondition <- base::signalCondition
[17:02:20.199]             sys.calls <- base::sys.calls
[17:02:20.199]             `[[` <- base::`[[`
[17:02:20.199]             `+` <- base::`+`
[17:02:20.199]             `<<-` <- base::`<<-`
[17:02:20.199]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.199]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.199]                   3L)]
[17:02:20.199]             }
[17:02:20.199]             function(cond) {
[17:02:20.199]                 is_error <- inherits(cond, "error")
[17:02:20.199]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.199]                   NULL)
[17:02:20.199]                 if (is_error) {
[17:02:20.199]                   sessionInformation <- function() {
[17:02:20.199]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.199]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.199]                       search = base::search(), system = base::Sys.info())
[17:02:20.199]                   }
[17:02:20.199]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.199]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.199]                     cond$call), session = sessionInformation(), 
[17:02:20.199]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.199]                   signalCondition(cond)
[17:02:20.199]                 }
[17:02:20.199]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.199]                 "immediateCondition"))) {
[17:02:20.199]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.199]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.199]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.199]                   if (TRUE && !signal) {
[17:02:20.199]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.199]                     {
[17:02:20.199]                       inherits <- base::inherits
[17:02:20.199]                       invokeRestart <- base::invokeRestart
[17:02:20.199]                       is.null <- base::is.null
[17:02:20.199]                       muffled <- FALSE
[17:02:20.199]                       if (inherits(cond, "message")) {
[17:02:20.199]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.199]                         if (muffled) 
[17:02:20.199]                           invokeRestart("muffleMessage")
[17:02:20.199]                       }
[17:02:20.199]                       else if (inherits(cond, "warning")) {
[17:02:20.199]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.199]                         if (muffled) 
[17:02:20.199]                           invokeRestart("muffleWarning")
[17:02:20.199]                       }
[17:02:20.199]                       else if (inherits(cond, "condition")) {
[17:02:20.199]                         if (!is.null(pattern)) {
[17:02:20.199]                           computeRestarts <- base::computeRestarts
[17:02:20.199]                           grepl <- base::grepl
[17:02:20.199]                           restarts <- computeRestarts(cond)
[17:02:20.199]                           for (restart in restarts) {
[17:02:20.199]                             name <- restart$name
[17:02:20.199]                             if (is.null(name)) 
[17:02:20.199]                               next
[17:02:20.199]                             if (!grepl(pattern, name)) 
[17:02:20.199]                               next
[17:02:20.199]                             invokeRestart(restart)
[17:02:20.199]                             muffled <- TRUE
[17:02:20.199]                             break
[17:02:20.199]                           }
[17:02:20.199]                         }
[17:02:20.199]                       }
[17:02:20.199]                       invisible(muffled)
[17:02:20.199]                     }
[17:02:20.199]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.199]                   }
[17:02:20.199]                 }
[17:02:20.199]                 else {
[17:02:20.199]                   if (TRUE) {
[17:02:20.199]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.199]                     {
[17:02:20.199]                       inherits <- base::inherits
[17:02:20.199]                       invokeRestart <- base::invokeRestart
[17:02:20.199]                       is.null <- base::is.null
[17:02:20.199]                       muffled <- FALSE
[17:02:20.199]                       if (inherits(cond, "message")) {
[17:02:20.199]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.199]                         if (muffled) 
[17:02:20.199]                           invokeRestart("muffleMessage")
[17:02:20.199]                       }
[17:02:20.199]                       else if (inherits(cond, "warning")) {
[17:02:20.199]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.199]                         if (muffled) 
[17:02:20.199]                           invokeRestart("muffleWarning")
[17:02:20.199]                       }
[17:02:20.199]                       else if (inherits(cond, "condition")) {
[17:02:20.199]                         if (!is.null(pattern)) {
[17:02:20.199]                           computeRestarts <- base::computeRestarts
[17:02:20.199]                           grepl <- base::grepl
[17:02:20.199]                           restarts <- computeRestarts(cond)
[17:02:20.199]                           for (restart in restarts) {
[17:02:20.199]                             name <- restart$name
[17:02:20.199]                             if (is.null(name)) 
[17:02:20.199]                               next
[17:02:20.199]                             if (!grepl(pattern, name)) 
[17:02:20.199]                               next
[17:02:20.199]                             invokeRestart(restart)
[17:02:20.199]                             muffled <- TRUE
[17:02:20.199]                             break
[17:02:20.199]                           }
[17:02:20.199]                         }
[17:02:20.199]                       }
[17:02:20.199]                       invisible(muffled)
[17:02:20.199]                     }
[17:02:20.199]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.199]                   }
[17:02:20.199]                 }
[17:02:20.199]             }
[17:02:20.199]         }))
[17:02:20.199]     }, error = function(ex) {
[17:02:20.199]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.199]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.199]                 ...future.rng), started = ...future.startTime, 
[17:02:20.199]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.199]             version = "1.8"), class = "FutureResult")
[17:02:20.199]     }, finally = {
[17:02:20.199]         if (!identical(...future.workdir, getwd())) 
[17:02:20.199]             setwd(...future.workdir)
[17:02:20.199]         {
[17:02:20.199]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.199]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.199]             }
[17:02:20.199]             base::options(...future.oldOptions)
[17:02:20.199]             if (.Platform$OS.type == "windows") {
[17:02:20.199]                 old_names <- names(...future.oldEnvVars)
[17:02:20.199]                 envs <- base::Sys.getenv()
[17:02:20.199]                 names <- names(envs)
[17:02:20.199]                 common <- intersect(names, old_names)
[17:02:20.199]                 added <- setdiff(names, old_names)
[17:02:20.199]                 removed <- setdiff(old_names, names)
[17:02:20.199]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.199]                   envs[common]]
[17:02:20.199]                 NAMES <- toupper(changed)
[17:02:20.199]                 args <- list()
[17:02:20.199]                 for (kk in seq_along(NAMES)) {
[17:02:20.199]                   name <- changed[[kk]]
[17:02:20.199]                   NAME <- NAMES[[kk]]
[17:02:20.199]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.199]                     next
[17:02:20.199]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.199]                 }
[17:02:20.199]                 NAMES <- toupper(added)
[17:02:20.199]                 for (kk in seq_along(NAMES)) {
[17:02:20.199]                   name <- added[[kk]]
[17:02:20.199]                   NAME <- NAMES[[kk]]
[17:02:20.199]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.199]                     next
[17:02:20.199]                   args[[name]] <- ""
[17:02:20.199]                 }
[17:02:20.199]                 NAMES <- toupper(removed)
[17:02:20.199]                 for (kk in seq_along(NAMES)) {
[17:02:20.199]                   name <- removed[[kk]]
[17:02:20.199]                   NAME <- NAMES[[kk]]
[17:02:20.199]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.199]                     next
[17:02:20.199]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.199]                 }
[17:02:20.199]                 if (length(args) > 0) 
[17:02:20.199]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.199]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.199]             }
[17:02:20.199]             else {
[17:02:20.199]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.199]             }
[17:02:20.199]             {
[17:02:20.199]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.199]                   0L) {
[17:02:20.199]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.199]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.199]                   base::options(opts)
[17:02:20.199]                 }
[17:02:20.199]                 {
[17:02:20.199]                   {
[17:02:20.199]                     NULL
[17:02:20.199]                     RNGkind("Mersenne-Twister")
[17:02:20.199]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.199]                       inherits = FALSE)
[17:02:20.199]                   }
[17:02:20.199]                   options(future.plan = NULL)
[17:02:20.199]                   if (is.na(NA_character_)) 
[17:02:20.199]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.199]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.199]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.199]                     .init = FALSE)
[17:02:20.199]                 }
[17:02:20.199]             }
[17:02:20.199]         }
[17:02:20.199]     })
[17:02:20.199]     if (TRUE) {
[17:02:20.199]         base::sink(type = "output", split = FALSE)
[17:02:20.199]         if (TRUE) {
[17:02:20.199]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.199]         }
[17:02:20.199]         else {
[17:02:20.199]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.199]         }
[17:02:20.199]         base::close(...future.stdout)
[17:02:20.199]         ...future.stdout <- NULL
[17:02:20.199]     }
[17:02:20.199]     ...future.result$conditions <- ...future.conditions
[17:02:20.199]     ...future.result$finished <- base::Sys.time()
[17:02:20.199]     ...future.result
[17:02:20.199] }
[17:02:20.201] plan(): Setting new future strategy stack:
[17:02:20.201] List of future strategies:
[17:02:20.201] 1. sequential:
[17:02:20.201]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.201]    - tweaked: FALSE
[17:02:20.201]    - call: NULL
[17:02:20.201] plan(): nbrOfWorkers() = 1
[17:02:20.202] plan(): Setting new future strategy stack:
[17:02:20.202] List of future strategies:
[17:02:20.202] 1. sequential:
[17:02:20.202]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.202]    - tweaked: FALSE
[17:02:20.202]    - call: plan(strategy)
[17:02:20.203] plan(): nbrOfWorkers() = 1
[17:02:20.203] SequentialFuture started (and completed)
[17:02:20.203] signalConditions() ...
[17:02:20.203]  - include = ‘immediateCondition’
[17:02:20.203]  - exclude = 
[17:02:20.203]  - resignal = FALSE
[17:02:20.203]  - Number of conditions: 1
[17:02:20.204] signalConditions() ... done
[17:02:20.204] - Launch lazy future ... done
[17:02:20.204] run() for ‘SequentialFuture’ ... done
[17:02:20.204] signalConditions() ...
[17:02:20.204]  - include = ‘immediateCondition’
[17:02:20.204]  - exclude = 
[17:02:20.204]  - resignal = FALSE
[17:02:20.204]  - Number of conditions: 1
[17:02:20.204] signalConditions() ... done
[17:02:20.204] Future state: ‘finished’
[17:02:20.205] signalConditions() ...
[17:02:20.205]  - include = ‘condition’
[17:02:20.205]  - exclude = ‘immediateCondition’
[17:02:20.205]  - resignal = TRUE
[17:02:20.205]  - Number of conditions: 1
[17:02:20.205]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.205] signalConditions() ... done
[17:02:20.206] getGlobalsAndPackages() ...
[17:02:20.206] Searching for globals...
[17:02:20.208] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:20.208] Searching for globals ... DONE
[17:02:20.208] Resolving globals: FALSE
[17:02:20.208] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.209] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:20.209] - globals: [1] ‘ii’
[17:02:20.209] 
[17:02:20.209] getGlobalsAndPackages() ... DONE
[17:02:20.209] run() for ‘Future’ ...
[17:02:20.209] - state: ‘created’
[17:02:20.210] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.210] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.210] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.210]   - Field: ‘label’
[17:02:20.210]   - Field: ‘local’
[17:02:20.210]   - Field: ‘owner’
[17:02:20.210]   - Field: ‘envir’
[17:02:20.210]   - Field: ‘packages’
[17:02:20.210]   - Field: ‘gc’
[17:02:20.211]   - Field: ‘conditions’
[17:02:20.211]   - Field: ‘expr’
[17:02:20.211]   - Field: ‘uuid’
[17:02:20.211]   - Field: ‘seed’
[17:02:20.211]   - Field: ‘version’
[17:02:20.211]   - Field: ‘result’
[17:02:20.211]   - Field: ‘asynchronous’
[17:02:20.211]   - Field: ‘calls’
[17:02:20.211]   - Field: ‘globals’
[17:02:20.211]   - Field: ‘stdout’
[17:02:20.212]   - Field: ‘earlySignal’
[17:02:20.212]   - Field: ‘lazy’
[17:02:20.212]   - Field: ‘state’
[17:02:20.212] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.212] - Launch lazy future ...
[17:02:20.212] Packages needed by the future expression (n = 0): <none>
[17:02:20.212] Packages needed by future strategies (n = 0): <none>
[17:02:20.213] {
[17:02:20.213]     {
[17:02:20.213]         {
[17:02:20.213]             ...future.startTime <- base::Sys.time()
[17:02:20.213]             {
[17:02:20.213]                 {
[17:02:20.213]                   {
[17:02:20.213]                     base::local({
[17:02:20.213]                       has_future <- base::requireNamespace("future", 
[17:02:20.213]                         quietly = TRUE)
[17:02:20.213]                       if (has_future) {
[17:02:20.213]                         ns <- base::getNamespace("future")
[17:02:20.213]                         version <- ns[[".package"]][["version"]]
[17:02:20.213]                         if (is.null(version)) 
[17:02:20.213]                           version <- utils::packageVersion("future")
[17:02:20.213]                       }
[17:02:20.213]                       else {
[17:02:20.213]                         version <- NULL
[17:02:20.213]                       }
[17:02:20.213]                       if (!has_future || version < "1.8.0") {
[17:02:20.213]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.213]                           "", base::R.version$version.string), 
[17:02:20.213]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.213]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.213]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.213]                             "release", "version")], collapse = " "), 
[17:02:20.213]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.213]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.213]                           info)
[17:02:20.213]                         info <- base::paste(info, collapse = "; ")
[17:02:20.213]                         if (!has_future) {
[17:02:20.213]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.213]                             info)
[17:02:20.213]                         }
[17:02:20.213]                         else {
[17:02:20.213]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.213]                             info, version)
[17:02:20.213]                         }
[17:02:20.213]                         base::stop(msg)
[17:02:20.213]                       }
[17:02:20.213]                     })
[17:02:20.213]                   }
[17:02:20.213]                   ...future.strategy.old <- future::plan("list")
[17:02:20.213]                   options(future.plan = NULL)
[17:02:20.213]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.213]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.213]                 }
[17:02:20.213]                 ...future.workdir <- getwd()
[17:02:20.213]             }
[17:02:20.213]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.213]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.213]         }
[17:02:20.213]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.213]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.213]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.213]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.213]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.213]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.213]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.213]             base::names(...future.oldOptions))
[17:02:20.213]     }
[17:02:20.213]     if (FALSE) {
[17:02:20.213]     }
[17:02:20.213]     else {
[17:02:20.213]         if (TRUE) {
[17:02:20.213]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.213]                 open = "w")
[17:02:20.213]         }
[17:02:20.213]         else {
[17:02:20.213]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.213]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.213]         }
[17:02:20.213]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.213]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.213]             base::sink(type = "output", split = FALSE)
[17:02:20.213]             base::close(...future.stdout)
[17:02:20.213]         }, add = TRUE)
[17:02:20.213]     }
[17:02:20.213]     ...future.frame <- base::sys.nframe()
[17:02:20.213]     ...future.conditions <- base::list()
[17:02:20.213]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.213]     if (FALSE) {
[17:02:20.213]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.213]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.213]     }
[17:02:20.213]     ...future.result <- base::tryCatch({
[17:02:20.213]         base::withCallingHandlers({
[17:02:20.213]             ...future.value <- base::withVisible(base::local({
[17:02:20.213]                 if (ii%%2 == 0) 
[17:02:20.213]                   stop("Woops!")
[17:02:20.213]                 ii
[17:02:20.213]             }))
[17:02:20.213]             future::FutureResult(value = ...future.value$value, 
[17:02:20.213]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.213]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.213]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.213]                     ...future.globalenv.names))
[17:02:20.213]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.213]         }, condition = base::local({
[17:02:20.213]             c <- base::c
[17:02:20.213]             inherits <- base::inherits
[17:02:20.213]             invokeRestart <- base::invokeRestart
[17:02:20.213]             length <- base::length
[17:02:20.213]             list <- base::list
[17:02:20.213]             seq.int <- base::seq.int
[17:02:20.213]             signalCondition <- base::signalCondition
[17:02:20.213]             sys.calls <- base::sys.calls
[17:02:20.213]             `[[` <- base::`[[`
[17:02:20.213]             `+` <- base::`+`
[17:02:20.213]             `<<-` <- base::`<<-`
[17:02:20.213]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.213]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.213]                   3L)]
[17:02:20.213]             }
[17:02:20.213]             function(cond) {
[17:02:20.213]                 is_error <- inherits(cond, "error")
[17:02:20.213]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.213]                   NULL)
[17:02:20.213]                 if (is_error) {
[17:02:20.213]                   sessionInformation <- function() {
[17:02:20.213]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.213]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.213]                       search = base::search(), system = base::Sys.info())
[17:02:20.213]                   }
[17:02:20.213]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.213]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.213]                     cond$call), session = sessionInformation(), 
[17:02:20.213]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.213]                   signalCondition(cond)
[17:02:20.213]                 }
[17:02:20.213]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.213]                 "immediateCondition"))) {
[17:02:20.213]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.213]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.213]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.213]                   if (TRUE && !signal) {
[17:02:20.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.213]                     {
[17:02:20.213]                       inherits <- base::inherits
[17:02:20.213]                       invokeRestart <- base::invokeRestart
[17:02:20.213]                       is.null <- base::is.null
[17:02:20.213]                       muffled <- FALSE
[17:02:20.213]                       if (inherits(cond, "message")) {
[17:02:20.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.213]                         if (muffled) 
[17:02:20.213]                           invokeRestart("muffleMessage")
[17:02:20.213]                       }
[17:02:20.213]                       else if (inherits(cond, "warning")) {
[17:02:20.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.213]                         if (muffled) 
[17:02:20.213]                           invokeRestart("muffleWarning")
[17:02:20.213]                       }
[17:02:20.213]                       else if (inherits(cond, "condition")) {
[17:02:20.213]                         if (!is.null(pattern)) {
[17:02:20.213]                           computeRestarts <- base::computeRestarts
[17:02:20.213]                           grepl <- base::grepl
[17:02:20.213]                           restarts <- computeRestarts(cond)
[17:02:20.213]                           for (restart in restarts) {
[17:02:20.213]                             name <- restart$name
[17:02:20.213]                             if (is.null(name)) 
[17:02:20.213]                               next
[17:02:20.213]                             if (!grepl(pattern, name)) 
[17:02:20.213]                               next
[17:02:20.213]                             invokeRestart(restart)
[17:02:20.213]                             muffled <- TRUE
[17:02:20.213]                             break
[17:02:20.213]                           }
[17:02:20.213]                         }
[17:02:20.213]                       }
[17:02:20.213]                       invisible(muffled)
[17:02:20.213]                     }
[17:02:20.213]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.213]                   }
[17:02:20.213]                 }
[17:02:20.213]                 else {
[17:02:20.213]                   if (TRUE) {
[17:02:20.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.213]                     {
[17:02:20.213]                       inherits <- base::inherits
[17:02:20.213]                       invokeRestart <- base::invokeRestart
[17:02:20.213]                       is.null <- base::is.null
[17:02:20.213]                       muffled <- FALSE
[17:02:20.213]                       if (inherits(cond, "message")) {
[17:02:20.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.213]                         if (muffled) 
[17:02:20.213]                           invokeRestart("muffleMessage")
[17:02:20.213]                       }
[17:02:20.213]                       else if (inherits(cond, "warning")) {
[17:02:20.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.213]                         if (muffled) 
[17:02:20.213]                           invokeRestart("muffleWarning")
[17:02:20.213]                       }
[17:02:20.213]                       else if (inherits(cond, "condition")) {
[17:02:20.213]                         if (!is.null(pattern)) {
[17:02:20.213]                           computeRestarts <- base::computeRestarts
[17:02:20.213]                           grepl <- base::grepl
[17:02:20.213]                           restarts <- computeRestarts(cond)
[17:02:20.213]                           for (restart in restarts) {
[17:02:20.213]                             name <- restart$name
[17:02:20.213]                             if (is.null(name)) 
[17:02:20.213]                               next
[17:02:20.213]                             if (!grepl(pattern, name)) 
[17:02:20.213]                               next
[17:02:20.213]                             invokeRestart(restart)
[17:02:20.213]                             muffled <- TRUE
[17:02:20.213]                             break
[17:02:20.213]                           }
[17:02:20.213]                         }
[17:02:20.213]                       }
[17:02:20.213]                       invisible(muffled)
[17:02:20.213]                     }
[17:02:20.213]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.213]                   }
[17:02:20.213]                 }
[17:02:20.213]             }
[17:02:20.213]         }))
[17:02:20.213]     }, error = function(ex) {
[17:02:20.213]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.213]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.213]                 ...future.rng), started = ...future.startTime, 
[17:02:20.213]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.213]             version = "1.8"), class = "FutureResult")
[17:02:20.213]     }, finally = {
[17:02:20.213]         if (!identical(...future.workdir, getwd())) 
[17:02:20.213]             setwd(...future.workdir)
[17:02:20.213]         {
[17:02:20.213]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.213]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.213]             }
[17:02:20.213]             base::options(...future.oldOptions)
[17:02:20.213]             if (.Platform$OS.type == "windows") {
[17:02:20.213]                 old_names <- names(...future.oldEnvVars)
[17:02:20.213]                 envs <- base::Sys.getenv()
[17:02:20.213]                 names <- names(envs)
[17:02:20.213]                 common <- intersect(names, old_names)
[17:02:20.213]                 added <- setdiff(names, old_names)
[17:02:20.213]                 removed <- setdiff(old_names, names)
[17:02:20.213]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.213]                   envs[common]]
[17:02:20.213]                 NAMES <- toupper(changed)
[17:02:20.213]                 args <- list()
[17:02:20.213]                 for (kk in seq_along(NAMES)) {
[17:02:20.213]                   name <- changed[[kk]]
[17:02:20.213]                   NAME <- NAMES[[kk]]
[17:02:20.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.213]                     next
[17:02:20.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.213]                 }
[17:02:20.213]                 NAMES <- toupper(added)
[17:02:20.213]                 for (kk in seq_along(NAMES)) {
[17:02:20.213]                   name <- added[[kk]]
[17:02:20.213]                   NAME <- NAMES[[kk]]
[17:02:20.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.213]                     next
[17:02:20.213]                   args[[name]] <- ""
[17:02:20.213]                 }
[17:02:20.213]                 NAMES <- toupper(removed)
[17:02:20.213]                 for (kk in seq_along(NAMES)) {
[17:02:20.213]                   name <- removed[[kk]]
[17:02:20.213]                   NAME <- NAMES[[kk]]
[17:02:20.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.213]                     next
[17:02:20.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.213]                 }
[17:02:20.213]                 if (length(args) > 0) 
[17:02:20.213]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.213]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.213]             }
[17:02:20.213]             else {
[17:02:20.213]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.213]             }
[17:02:20.213]             {
[17:02:20.213]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.213]                   0L) {
[17:02:20.213]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.213]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.213]                   base::options(opts)
[17:02:20.213]                 }
[17:02:20.213]                 {
[17:02:20.213]                   {
[17:02:20.213]                     NULL
[17:02:20.213]                     RNGkind("Mersenne-Twister")
[17:02:20.213]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.213]                       inherits = FALSE)
[17:02:20.213]                   }
[17:02:20.213]                   options(future.plan = NULL)
[17:02:20.213]                   if (is.na(NA_character_)) 
[17:02:20.213]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.213]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.213]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.213]                     .init = FALSE)
[17:02:20.213]                 }
[17:02:20.213]             }
[17:02:20.213]         }
[17:02:20.213]     })
[17:02:20.213]     if (TRUE) {
[17:02:20.213]         base::sink(type = "output", split = FALSE)
[17:02:20.213]         if (TRUE) {
[17:02:20.213]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.213]         }
[17:02:20.213]         else {
[17:02:20.213]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.213]         }
[17:02:20.213]         base::close(...future.stdout)
[17:02:20.213]         ...future.stdout <- NULL
[17:02:20.213]     }
[17:02:20.213]     ...future.result$conditions <- ...future.conditions
[17:02:20.213]     ...future.result$finished <- base::Sys.time()
[17:02:20.213]     ...future.result
[17:02:20.213] }
[17:02:20.214] assign_globals() ...
[17:02:20.214] List of 1
[17:02:20.214]  $ ii: int 1
[17:02:20.214]  - attr(*, "where")=List of 1
[17:02:20.214]   ..$ ii:<environment: R_EmptyEnv> 
[17:02:20.214]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.214]  - attr(*, "resolved")= logi FALSE
[17:02:20.214]  - attr(*, "total_size")= num 56
[17:02:20.214]  - attr(*, "already-done")= logi TRUE
[17:02:20.217] - copied ‘ii’ to environment
[17:02:20.217] assign_globals() ... done
[17:02:20.217] plan(): Setting new future strategy stack:
[17:02:20.217] List of future strategies:
[17:02:20.217] 1. sequential:
[17:02:20.217]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.217]    - tweaked: FALSE
[17:02:20.217]    - call: NULL
[17:02:20.218] plan(): nbrOfWorkers() = 1
[17:02:20.218] plan(): Setting new future strategy stack:
[17:02:20.218] List of future strategies:
[17:02:20.218] 1. sequential:
[17:02:20.218]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.218]    - tweaked: FALSE
[17:02:20.218]    - call: plan(strategy)
[17:02:20.219] plan(): nbrOfWorkers() = 1
[17:02:20.219] SequentialFuture started (and completed)
[17:02:20.219] - Launch lazy future ... done
[17:02:20.219] run() for ‘SequentialFuture’ ... done
[17:02:20.220] getGlobalsAndPackages() ...
[17:02:20.220] Searching for globals...
[17:02:20.221] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:20.221] Searching for globals ... DONE
[17:02:20.221] Resolving globals: FALSE
[17:02:20.222] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.222] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:20.222] - globals: [1] ‘ii’
[17:02:20.222] 
[17:02:20.224] getGlobalsAndPackages() ... DONE
[17:02:20.224] run() for ‘Future’ ...
[17:02:20.224] - state: ‘created’
[17:02:20.225] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.225] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.225] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.225]   - Field: ‘label’
[17:02:20.225]   - Field: ‘local’
[17:02:20.225]   - Field: ‘owner’
[17:02:20.225]   - Field: ‘envir’
[17:02:20.225]   - Field: ‘packages’
[17:02:20.226]   - Field: ‘gc’
[17:02:20.226]   - Field: ‘conditions’
[17:02:20.226]   - Field: ‘expr’
[17:02:20.226]   - Field: ‘uuid’
[17:02:20.226]   - Field: ‘seed’
[17:02:20.226]   - Field: ‘version’
[17:02:20.226]   - Field: ‘result’
[17:02:20.226]   - Field: ‘asynchronous’
[17:02:20.226]   - Field: ‘calls’
[17:02:20.226]   - Field: ‘globals’
[17:02:20.226]   - Field: ‘stdout’
[17:02:20.227]   - Field: ‘earlySignal’
[17:02:20.227]   - Field: ‘lazy’
[17:02:20.227]   - Field: ‘state’
[17:02:20.227] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.227] - Launch lazy future ...
[17:02:20.227] Packages needed by the future expression (n = 0): <none>
[17:02:20.227] Packages needed by future strategies (n = 0): <none>
[17:02:20.228] {
[17:02:20.228]     {
[17:02:20.228]         {
[17:02:20.228]             ...future.startTime <- base::Sys.time()
[17:02:20.228]             {
[17:02:20.228]                 {
[17:02:20.228]                   {
[17:02:20.228]                     base::local({
[17:02:20.228]                       has_future <- base::requireNamespace("future", 
[17:02:20.228]                         quietly = TRUE)
[17:02:20.228]                       if (has_future) {
[17:02:20.228]                         ns <- base::getNamespace("future")
[17:02:20.228]                         version <- ns[[".package"]][["version"]]
[17:02:20.228]                         if (is.null(version)) 
[17:02:20.228]                           version <- utils::packageVersion("future")
[17:02:20.228]                       }
[17:02:20.228]                       else {
[17:02:20.228]                         version <- NULL
[17:02:20.228]                       }
[17:02:20.228]                       if (!has_future || version < "1.8.0") {
[17:02:20.228]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.228]                           "", base::R.version$version.string), 
[17:02:20.228]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.228]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.228]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.228]                             "release", "version")], collapse = " "), 
[17:02:20.228]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.228]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.228]                           info)
[17:02:20.228]                         info <- base::paste(info, collapse = "; ")
[17:02:20.228]                         if (!has_future) {
[17:02:20.228]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.228]                             info)
[17:02:20.228]                         }
[17:02:20.228]                         else {
[17:02:20.228]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.228]                             info, version)
[17:02:20.228]                         }
[17:02:20.228]                         base::stop(msg)
[17:02:20.228]                       }
[17:02:20.228]                     })
[17:02:20.228]                   }
[17:02:20.228]                   ...future.strategy.old <- future::plan("list")
[17:02:20.228]                   options(future.plan = NULL)
[17:02:20.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.228]                 }
[17:02:20.228]                 ...future.workdir <- getwd()
[17:02:20.228]             }
[17:02:20.228]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.228]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.228]         }
[17:02:20.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.228]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.228]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.228]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.228]             base::names(...future.oldOptions))
[17:02:20.228]     }
[17:02:20.228]     if (FALSE) {
[17:02:20.228]     }
[17:02:20.228]     else {
[17:02:20.228]         if (TRUE) {
[17:02:20.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.228]                 open = "w")
[17:02:20.228]         }
[17:02:20.228]         else {
[17:02:20.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.228]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.228]         }
[17:02:20.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.228]             base::sink(type = "output", split = FALSE)
[17:02:20.228]             base::close(...future.stdout)
[17:02:20.228]         }, add = TRUE)
[17:02:20.228]     }
[17:02:20.228]     ...future.frame <- base::sys.nframe()
[17:02:20.228]     ...future.conditions <- base::list()
[17:02:20.228]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.228]     if (FALSE) {
[17:02:20.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.228]     }
[17:02:20.228]     ...future.result <- base::tryCatch({
[17:02:20.228]         base::withCallingHandlers({
[17:02:20.228]             ...future.value <- base::withVisible(base::local({
[17:02:20.228]                 if (ii%%2 == 0) 
[17:02:20.228]                   stop("Woops!")
[17:02:20.228]                 ii
[17:02:20.228]             }))
[17:02:20.228]             future::FutureResult(value = ...future.value$value, 
[17:02:20.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.228]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.228]                     ...future.globalenv.names))
[17:02:20.228]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.228]         }, condition = base::local({
[17:02:20.228]             c <- base::c
[17:02:20.228]             inherits <- base::inherits
[17:02:20.228]             invokeRestart <- base::invokeRestart
[17:02:20.228]             length <- base::length
[17:02:20.228]             list <- base::list
[17:02:20.228]             seq.int <- base::seq.int
[17:02:20.228]             signalCondition <- base::signalCondition
[17:02:20.228]             sys.calls <- base::sys.calls
[17:02:20.228]             `[[` <- base::`[[`
[17:02:20.228]             `+` <- base::`+`
[17:02:20.228]             `<<-` <- base::`<<-`
[17:02:20.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.228]                   3L)]
[17:02:20.228]             }
[17:02:20.228]             function(cond) {
[17:02:20.228]                 is_error <- inherits(cond, "error")
[17:02:20.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.228]                   NULL)
[17:02:20.228]                 if (is_error) {
[17:02:20.228]                   sessionInformation <- function() {
[17:02:20.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.228]                       search = base::search(), system = base::Sys.info())
[17:02:20.228]                   }
[17:02:20.228]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.228]                     cond$call), session = sessionInformation(), 
[17:02:20.228]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.228]                   signalCondition(cond)
[17:02:20.228]                 }
[17:02:20.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.228]                 "immediateCondition"))) {
[17:02:20.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.228]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.228]                   if (TRUE && !signal) {
[17:02:20.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.228]                     {
[17:02:20.228]                       inherits <- base::inherits
[17:02:20.228]                       invokeRestart <- base::invokeRestart
[17:02:20.228]                       is.null <- base::is.null
[17:02:20.228]                       muffled <- FALSE
[17:02:20.228]                       if (inherits(cond, "message")) {
[17:02:20.228]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.228]                         if (muffled) 
[17:02:20.228]                           invokeRestart("muffleMessage")
[17:02:20.228]                       }
[17:02:20.228]                       else if (inherits(cond, "warning")) {
[17:02:20.228]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.228]                         if (muffled) 
[17:02:20.228]                           invokeRestart("muffleWarning")
[17:02:20.228]                       }
[17:02:20.228]                       else if (inherits(cond, "condition")) {
[17:02:20.228]                         if (!is.null(pattern)) {
[17:02:20.228]                           computeRestarts <- base::computeRestarts
[17:02:20.228]                           grepl <- base::grepl
[17:02:20.228]                           restarts <- computeRestarts(cond)
[17:02:20.228]                           for (restart in restarts) {
[17:02:20.228]                             name <- restart$name
[17:02:20.228]                             if (is.null(name)) 
[17:02:20.228]                               next
[17:02:20.228]                             if (!grepl(pattern, name)) 
[17:02:20.228]                               next
[17:02:20.228]                             invokeRestart(restart)
[17:02:20.228]                             muffled <- TRUE
[17:02:20.228]                             break
[17:02:20.228]                           }
[17:02:20.228]                         }
[17:02:20.228]                       }
[17:02:20.228]                       invisible(muffled)
[17:02:20.228]                     }
[17:02:20.228]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.228]                   }
[17:02:20.228]                 }
[17:02:20.228]                 else {
[17:02:20.228]                   if (TRUE) {
[17:02:20.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.228]                     {
[17:02:20.228]                       inherits <- base::inherits
[17:02:20.228]                       invokeRestart <- base::invokeRestart
[17:02:20.228]                       is.null <- base::is.null
[17:02:20.228]                       muffled <- FALSE
[17:02:20.228]                       if (inherits(cond, "message")) {
[17:02:20.228]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.228]                         if (muffled) 
[17:02:20.228]                           invokeRestart("muffleMessage")
[17:02:20.228]                       }
[17:02:20.228]                       else if (inherits(cond, "warning")) {
[17:02:20.228]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.228]                         if (muffled) 
[17:02:20.228]                           invokeRestart("muffleWarning")
[17:02:20.228]                       }
[17:02:20.228]                       else if (inherits(cond, "condition")) {
[17:02:20.228]                         if (!is.null(pattern)) {
[17:02:20.228]                           computeRestarts <- base::computeRestarts
[17:02:20.228]                           grepl <- base::grepl
[17:02:20.228]                           restarts <- computeRestarts(cond)
[17:02:20.228]                           for (restart in restarts) {
[17:02:20.228]                             name <- restart$name
[17:02:20.228]                             if (is.null(name)) 
[17:02:20.228]                               next
[17:02:20.228]                             if (!grepl(pattern, name)) 
[17:02:20.228]                               next
[17:02:20.228]                             invokeRestart(restart)
[17:02:20.228]                             muffled <- TRUE
[17:02:20.228]                             break
[17:02:20.228]                           }
[17:02:20.228]                         }
[17:02:20.228]                       }
[17:02:20.228]                       invisible(muffled)
[17:02:20.228]                     }
[17:02:20.228]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.228]                   }
[17:02:20.228]                 }
[17:02:20.228]             }
[17:02:20.228]         }))
[17:02:20.228]     }, error = function(ex) {
[17:02:20.228]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.228]                 ...future.rng), started = ...future.startTime, 
[17:02:20.228]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.228]             version = "1.8"), class = "FutureResult")
[17:02:20.228]     }, finally = {
[17:02:20.228]         if (!identical(...future.workdir, getwd())) 
[17:02:20.228]             setwd(...future.workdir)
[17:02:20.228]         {
[17:02:20.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.228]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.228]             }
[17:02:20.228]             base::options(...future.oldOptions)
[17:02:20.228]             if (.Platform$OS.type == "windows") {
[17:02:20.228]                 old_names <- names(...future.oldEnvVars)
[17:02:20.228]                 envs <- base::Sys.getenv()
[17:02:20.228]                 names <- names(envs)
[17:02:20.228]                 common <- intersect(names, old_names)
[17:02:20.228]                 added <- setdiff(names, old_names)
[17:02:20.228]                 removed <- setdiff(old_names, names)
[17:02:20.228]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.228]                   envs[common]]
[17:02:20.228]                 NAMES <- toupper(changed)
[17:02:20.228]                 args <- list()
[17:02:20.228]                 for (kk in seq_along(NAMES)) {
[17:02:20.228]                   name <- changed[[kk]]
[17:02:20.228]                   NAME <- NAMES[[kk]]
[17:02:20.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.228]                     next
[17:02:20.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.228]                 }
[17:02:20.228]                 NAMES <- toupper(added)
[17:02:20.228]                 for (kk in seq_along(NAMES)) {
[17:02:20.228]                   name <- added[[kk]]
[17:02:20.228]                   NAME <- NAMES[[kk]]
[17:02:20.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.228]                     next
[17:02:20.228]                   args[[name]] <- ""
[17:02:20.228]                 }
[17:02:20.228]                 NAMES <- toupper(removed)
[17:02:20.228]                 for (kk in seq_along(NAMES)) {
[17:02:20.228]                   name <- removed[[kk]]
[17:02:20.228]                   NAME <- NAMES[[kk]]
[17:02:20.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.228]                     next
[17:02:20.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.228]                 }
[17:02:20.228]                 if (length(args) > 0) 
[17:02:20.228]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.228]             }
[17:02:20.228]             else {
[17:02:20.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.228]             }
[17:02:20.228]             {
[17:02:20.228]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.228]                   0L) {
[17:02:20.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.228]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.228]                   base::options(opts)
[17:02:20.228]                 }
[17:02:20.228]                 {
[17:02:20.228]                   {
[17:02:20.228]                     NULL
[17:02:20.228]                     RNGkind("Mersenne-Twister")
[17:02:20.228]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.228]                       inherits = FALSE)
[17:02:20.228]                   }
[17:02:20.228]                   options(future.plan = NULL)
[17:02:20.228]                   if (is.na(NA_character_)) 
[17:02:20.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.228]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.228]                     .init = FALSE)
[17:02:20.228]                 }
[17:02:20.228]             }
[17:02:20.228]         }
[17:02:20.228]     })
[17:02:20.228]     if (TRUE) {
[17:02:20.228]         base::sink(type = "output", split = FALSE)
[17:02:20.228]         if (TRUE) {
[17:02:20.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.228]         }
[17:02:20.228]         else {
[17:02:20.228]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.228]         }
[17:02:20.228]         base::close(...future.stdout)
[17:02:20.228]         ...future.stdout <- NULL
[17:02:20.228]     }
[17:02:20.228]     ...future.result$conditions <- ...future.conditions
[17:02:20.228]     ...future.result$finished <- base::Sys.time()
[17:02:20.228]     ...future.result
[17:02:20.228] }
[17:02:20.229] assign_globals() ...
[17:02:20.229] List of 1
[17:02:20.229]  $ ii: int 2
[17:02:20.229]  - attr(*, "where")=List of 1
[17:02:20.229]   ..$ ii:<environment: R_EmptyEnv> 
[17:02:20.229]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.229]  - attr(*, "resolved")= logi FALSE
[17:02:20.229]  - attr(*, "total_size")= num 56
[17:02:20.229]  - attr(*, "already-done")= logi TRUE
[17:02:20.232] - copied ‘ii’ to environment
[17:02:20.232] assign_globals() ... done
[17:02:20.232] plan(): Setting new future strategy stack:
[17:02:20.232] List of future strategies:
[17:02:20.232] 1. sequential:
[17:02:20.232]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.232]    - tweaked: FALSE
[17:02:20.232]    - call: NULL
[17:02:20.233] plan(): nbrOfWorkers() = 1
[17:02:20.234] plan(): Setting new future strategy stack:
[17:02:20.234] List of future strategies:
[17:02:20.234] 1. sequential:
[17:02:20.234]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.234]    - tweaked: FALSE
[17:02:20.234]    - call: plan(strategy)
[17:02:20.234] plan(): nbrOfWorkers() = 1
[17:02:20.234] SequentialFuture started (and completed)
[17:02:20.234] signalConditions() ...
[17:02:20.234]  - include = ‘immediateCondition’
[17:02:20.235]  - exclude = 
[17:02:20.235]  - resignal = FALSE
[17:02:20.235]  - Number of conditions: 1
[17:02:20.235] signalConditions() ... done
[17:02:20.235] - Launch lazy future ... done
[17:02:20.235] run() for ‘SequentialFuture’ ... done
[17:02:20.235] getGlobalsAndPackages() ...
[17:02:20.236] Searching for globals...
[17:02:20.237] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:20.237] Searching for globals ... DONE
[17:02:20.237] Resolving globals: FALSE
[17:02:20.238] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.238] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:20.238] - globals: [1] ‘ii’
[17:02:20.238] 
[17:02:20.238] getGlobalsAndPackages() ... DONE
[17:02:20.239] run() for ‘Future’ ...
[17:02:20.239] - state: ‘created’
[17:02:20.239] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.239] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.239] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.239]   - Field: ‘label’
[17:02:20.239]   - Field: ‘local’
[17:02:20.239]   - Field: ‘owner’
[17:02:20.240]   - Field: ‘envir’
[17:02:20.240]   - Field: ‘packages’
[17:02:20.240]   - Field: ‘gc’
[17:02:20.240]   - Field: ‘conditions’
[17:02:20.240]   - Field: ‘expr’
[17:02:20.240]   - Field: ‘uuid’
[17:02:20.240]   - Field: ‘seed’
[17:02:20.240]   - Field: ‘version’
[17:02:20.240]   - Field: ‘result’
[17:02:20.240]   - Field: ‘asynchronous’
[17:02:20.240]   - Field: ‘calls’
[17:02:20.241]   - Field: ‘globals’
[17:02:20.241]   - Field: ‘stdout’
[17:02:20.241]   - Field: ‘earlySignal’
[17:02:20.241]   - Field: ‘lazy’
[17:02:20.241]   - Field: ‘state’
[17:02:20.241] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.241] - Launch lazy future ...
[17:02:20.241] Packages needed by the future expression (n = 0): <none>
[17:02:20.241] Packages needed by future strategies (n = 0): <none>
[17:02:20.242] {
[17:02:20.242]     {
[17:02:20.242]         {
[17:02:20.242]             ...future.startTime <- base::Sys.time()
[17:02:20.242]             {
[17:02:20.242]                 {
[17:02:20.242]                   {
[17:02:20.242]                     base::local({
[17:02:20.242]                       has_future <- base::requireNamespace("future", 
[17:02:20.242]                         quietly = TRUE)
[17:02:20.242]                       if (has_future) {
[17:02:20.242]                         ns <- base::getNamespace("future")
[17:02:20.242]                         version <- ns[[".package"]][["version"]]
[17:02:20.242]                         if (is.null(version)) 
[17:02:20.242]                           version <- utils::packageVersion("future")
[17:02:20.242]                       }
[17:02:20.242]                       else {
[17:02:20.242]                         version <- NULL
[17:02:20.242]                       }
[17:02:20.242]                       if (!has_future || version < "1.8.0") {
[17:02:20.242]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.242]                           "", base::R.version$version.string), 
[17:02:20.242]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.242]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.242]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.242]                             "release", "version")], collapse = " "), 
[17:02:20.242]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.242]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.242]                           info)
[17:02:20.242]                         info <- base::paste(info, collapse = "; ")
[17:02:20.242]                         if (!has_future) {
[17:02:20.242]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.242]                             info)
[17:02:20.242]                         }
[17:02:20.242]                         else {
[17:02:20.242]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.242]                             info, version)
[17:02:20.242]                         }
[17:02:20.242]                         base::stop(msg)
[17:02:20.242]                       }
[17:02:20.242]                     })
[17:02:20.242]                   }
[17:02:20.242]                   ...future.strategy.old <- future::plan("list")
[17:02:20.242]                   options(future.plan = NULL)
[17:02:20.242]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.242]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.242]                 }
[17:02:20.242]                 ...future.workdir <- getwd()
[17:02:20.242]             }
[17:02:20.242]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.242]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.242]         }
[17:02:20.242]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.242]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.242]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.242]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.242]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.242]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.242]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.242]             base::names(...future.oldOptions))
[17:02:20.242]     }
[17:02:20.242]     if (FALSE) {
[17:02:20.242]     }
[17:02:20.242]     else {
[17:02:20.242]         if (TRUE) {
[17:02:20.242]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.242]                 open = "w")
[17:02:20.242]         }
[17:02:20.242]         else {
[17:02:20.242]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.242]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.242]         }
[17:02:20.242]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.242]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.242]             base::sink(type = "output", split = FALSE)
[17:02:20.242]             base::close(...future.stdout)
[17:02:20.242]         }, add = TRUE)
[17:02:20.242]     }
[17:02:20.242]     ...future.frame <- base::sys.nframe()
[17:02:20.242]     ...future.conditions <- base::list()
[17:02:20.242]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.242]     if (FALSE) {
[17:02:20.242]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.242]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.242]     }
[17:02:20.242]     ...future.result <- base::tryCatch({
[17:02:20.242]         base::withCallingHandlers({
[17:02:20.242]             ...future.value <- base::withVisible(base::local({
[17:02:20.242]                 if (ii%%2 == 0) 
[17:02:20.242]                   stop("Woops!")
[17:02:20.242]                 ii
[17:02:20.242]             }))
[17:02:20.242]             future::FutureResult(value = ...future.value$value, 
[17:02:20.242]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.242]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.242]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.242]                     ...future.globalenv.names))
[17:02:20.242]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.242]         }, condition = base::local({
[17:02:20.242]             c <- base::c
[17:02:20.242]             inherits <- base::inherits
[17:02:20.242]             invokeRestart <- base::invokeRestart
[17:02:20.242]             length <- base::length
[17:02:20.242]             list <- base::list
[17:02:20.242]             seq.int <- base::seq.int
[17:02:20.242]             signalCondition <- base::signalCondition
[17:02:20.242]             sys.calls <- base::sys.calls
[17:02:20.242]             `[[` <- base::`[[`
[17:02:20.242]             `+` <- base::`+`
[17:02:20.242]             `<<-` <- base::`<<-`
[17:02:20.242]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.242]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.242]                   3L)]
[17:02:20.242]             }
[17:02:20.242]             function(cond) {
[17:02:20.242]                 is_error <- inherits(cond, "error")
[17:02:20.242]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.242]                   NULL)
[17:02:20.242]                 if (is_error) {
[17:02:20.242]                   sessionInformation <- function() {
[17:02:20.242]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.242]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.242]                       search = base::search(), system = base::Sys.info())
[17:02:20.242]                   }
[17:02:20.242]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.242]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.242]                     cond$call), session = sessionInformation(), 
[17:02:20.242]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.242]                   signalCondition(cond)
[17:02:20.242]                 }
[17:02:20.242]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.242]                 "immediateCondition"))) {
[17:02:20.242]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.242]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.242]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.242]                   if (TRUE && !signal) {
[17:02:20.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.242]                     {
[17:02:20.242]                       inherits <- base::inherits
[17:02:20.242]                       invokeRestart <- base::invokeRestart
[17:02:20.242]                       is.null <- base::is.null
[17:02:20.242]                       muffled <- FALSE
[17:02:20.242]                       if (inherits(cond, "message")) {
[17:02:20.242]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.242]                         if (muffled) 
[17:02:20.242]                           invokeRestart("muffleMessage")
[17:02:20.242]                       }
[17:02:20.242]                       else if (inherits(cond, "warning")) {
[17:02:20.242]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.242]                         if (muffled) 
[17:02:20.242]                           invokeRestart("muffleWarning")
[17:02:20.242]                       }
[17:02:20.242]                       else if (inherits(cond, "condition")) {
[17:02:20.242]                         if (!is.null(pattern)) {
[17:02:20.242]                           computeRestarts <- base::computeRestarts
[17:02:20.242]                           grepl <- base::grepl
[17:02:20.242]                           restarts <- computeRestarts(cond)
[17:02:20.242]                           for (restart in restarts) {
[17:02:20.242]                             name <- restart$name
[17:02:20.242]                             if (is.null(name)) 
[17:02:20.242]                               next
[17:02:20.242]                             if (!grepl(pattern, name)) 
[17:02:20.242]                               next
[17:02:20.242]                             invokeRestart(restart)
[17:02:20.242]                             muffled <- TRUE
[17:02:20.242]                             break
[17:02:20.242]                           }
[17:02:20.242]                         }
[17:02:20.242]                       }
[17:02:20.242]                       invisible(muffled)
[17:02:20.242]                     }
[17:02:20.242]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.242]                   }
[17:02:20.242]                 }
[17:02:20.242]                 else {
[17:02:20.242]                   if (TRUE) {
[17:02:20.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.242]                     {
[17:02:20.242]                       inherits <- base::inherits
[17:02:20.242]                       invokeRestart <- base::invokeRestart
[17:02:20.242]                       is.null <- base::is.null
[17:02:20.242]                       muffled <- FALSE
[17:02:20.242]                       if (inherits(cond, "message")) {
[17:02:20.242]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.242]                         if (muffled) 
[17:02:20.242]                           invokeRestart("muffleMessage")
[17:02:20.242]                       }
[17:02:20.242]                       else if (inherits(cond, "warning")) {
[17:02:20.242]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.242]                         if (muffled) 
[17:02:20.242]                           invokeRestart("muffleWarning")
[17:02:20.242]                       }
[17:02:20.242]                       else if (inherits(cond, "condition")) {
[17:02:20.242]                         if (!is.null(pattern)) {
[17:02:20.242]                           computeRestarts <- base::computeRestarts
[17:02:20.242]                           grepl <- base::grepl
[17:02:20.242]                           restarts <- computeRestarts(cond)
[17:02:20.242]                           for (restart in restarts) {
[17:02:20.242]                             name <- restart$name
[17:02:20.242]                             if (is.null(name)) 
[17:02:20.242]                               next
[17:02:20.242]                             if (!grepl(pattern, name)) 
[17:02:20.242]                               next
[17:02:20.242]                             invokeRestart(restart)
[17:02:20.242]                             muffled <- TRUE
[17:02:20.242]                             break
[17:02:20.242]                           }
[17:02:20.242]                         }
[17:02:20.242]                       }
[17:02:20.242]                       invisible(muffled)
[17:02:20.242]                     }
[17:02:20.242]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.242]                   }
[17:02:20.242]                 }
[17:02:20.242]             }
[17:02:20.242]         }))
[17:02:20.242]     }, error = function(ex) {
[17:02:20.242]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.242]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.242]                 ...future.rng), started = ...future.startTime, 
[17:02:20.242]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.242]             version = "1.8"), class = "FutureResult")
[17:02:20.242]     }, finally = {
[17:02:20.242]         if (!identical(...future.workdir, getwd())) 
[17:02:20.242]             setwd(...future.workdir)
[17:02:20.242]         {
[17:02:20.242]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.242]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.242]             }
[17:02:20.242]             base::options(...future.oldOptions)
[17:02:20.242]             if (.Platform$OS.type == "windows") {
[17:02:20.242]                 old_names <- names(...future.oldEnvVars)
[17:02:20.242]                 envs <- base::Sys.getenv()
[17:02:20.242]                 names <- names(envs)
[17:02:20.242]                 common <- intersect(names, old_names)
[17:02:20.242]                 added <- setdiff(names, old_names)
[17:02:20.242]                 removed <- setdiff(old_names, names)
[17:02:20.242]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.242]                   envs[common]]
[17:02:20.242]                 NAMES <- toupper(changed)
[17:02:20.242]                 args <- list()
[17:02:20.242]                 for (kk in seq_along(NAMES)) {
[17:02:20.242]                   name <- changed[[kk]]
[17:02:20.242]                   NAME <- NAMES[[kk]]
[17:02:20.242]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.242]                     next
[17:02:20.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.242]                 }
[17:02:20.242]                 NAMES <- toupper(added)
[17:02:20.242]                 for (kk in seq_along(NAMES)) {
[17:02:20.242]                   name <- added[[kk]]
[17:02:20.242]                   NAME <- NAMES[[kk]]
[17:02:20.242]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.242]                     next
[17:02:20.242]                   args[[name]] <- ""
[17:02:20.242]                 }
[17:02:20.242]                 NAMES <- toupper(removed)
[17:02:20.242]                 for (kk in seq_along(NAMES)) {
[17:02:20.242]                   name <- removed[[kk]]
[17:02:20.242]                   NAME <- NAMES[[kk]]
[17:02:20.242]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.242]                     next
[17:02:20.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.242]                 }
[17:02:20.242]                 if (length(args) > 0) 
[17:02:20.242]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.242]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.242]             }
[17:02:20.242]             else {
[17:02:20.242]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.242]             }
[17:02:20.242]             {
[17:02:20.242]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.242]                   0L) {
[17:02:20.242]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.242]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.242]                   base::options(opts)
[17:02:20.242]                 }
[17:02:20.242]                 {
[17:02:20.242]                   {
[17:02:20.242]                     NULL
[17:02:20.242]                     RNGkind("Mersenne-Twister")
[17:02:20.242]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.242]                       inherits = FALSE)
[17:02:20.242]                   }
[17:02:20.242]                   options(future.plan = NULL)
[17:02:20.242]                   if (is.na(NA_character_)) 
[17:02:20.242]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.242]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.242]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.242]                     .init = FALSE)
[17:02:20.242]                 }
[17:02:20.242]             }
[17:02:20.242]         }
[17:02:20.242]     })
[17:02:20.242]     if (TRUE) {
[17:02:20.242]         base::sink(type = "output", split = FALSE)
[17:02:20.242]         if (TRUE) {
[17:02:20.242]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.242]         }
[17:02:20.242]         else {
[17:02:20.242]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.242]         }
[17:02:20.242]         base::close(...future.stdout)
[17:02:20.242]         ...future.stdout <- NULL
[17:02:20.242]     }
[17:02:20.242]     ...future.result$conditions <- ...future.conditions
[17:02:20.242]     ...future.result$finished <- base::Sys.time()
[17:02:20.242]     ...future.result
[17:02:20.242] }
[17:02:20.243] assign_globals() ...
[17:02:20.244] List of 1
[17:02:20.244]  $ ii: int 3
[17:02:20.244]  - attr(*, "where")=List of 1
[17:02:20.244]   ..$ ii:<environment: R_EmptyEnv> 
[17:02:20.244]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.244]  - attr(*, "resolved")= logi FALSE
[17:02:20.244]  - attr(*, "total_size")= num 56
[17:02:20.244]  - attr(*, "already-done")= logi TRUE
[17:02:20.246] - copied ‘ii’ to environment
[17:02:20.246] assign_globals() ... done
[17:02:20.246] plan(): Setting new future strategy stack:
[17:02:20.246] List of future strategies:
[17:02:20.246] 1. sequential:
[17:02:20.246]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.246]    - tweaked: FALSE
[17:02:20.246]    - call: NULL
[17:02:20.247] plan(): nbrOfWorkers() = 1
[17:02:20.248] plan(): Setting new future strategy stack:
[17:02:20.248] List of future strategies:
[17:02:20.248] 1. sequential:
[17:02:20.248]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.248]    - tweaked: FALSE
[17:02:20.248]    - call: plan(strategy)
[17:02:20.248] plan(): nbrOfWorkers() = 1
[17:02:20.248] SequentialFuture started (and completed)
[17:02:20.248] - Launch lazy future ... done
[17:02:20.248] run() for ‘SequentialFuture’ ... done
[17:02:20.249] signalConditions() ...
[17:02:20.249]  - include = ‘immediateCondition’
[17:02:20.249]  - exclude = 
[17:02:20.249]  - resignal = FALSE
[17:02:20.249]  - Number of conditions: 1
[17:02:20.249] signalConditions() ... done
[17:02:20.249] Future state: ‘finished’
[17:02:20.250] signalConditions() ...
[17:02:20.250]  - include = ‘condition’
[17:02:20.250]  - exclude = ‘immediateCondition’
[17:02:20.250]  - resignal = TRUE
[17:02:20.250]  - Number of conditions: 1
[17:02:20.250]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.250] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:02:20.251] signalConditions() ...
[17:02:20.251]  - include = ‘immediateCondition’
[17:02:20.251]  - exclude = 
[17:02:20.251]  - resignal = FALSE
[17:02:20.252]  - Number of conditions: 1
[17:02:20.252] signalConditions() ... done
[17:02:20.252] Future state: ‘finished’
[17:02:20.252] signalConditions() ...
[17:02:20.252]  - include = ‘condition’
[17:02:20.252]  - exclude = ‘immediateCondition’
[17:02:20.252]  - resignal = TRUE
[17:02:20.252]  - Number of conditions: 1
[17:02:20.252]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.252] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:02:20.253] signalConditions() ...
[17:02:20.255]  - include = ‘immediateCondition’
[17:02:20.255]  - exclude = 
[17:02:20.255]  - resignal = FALSE
[17:02:20.255]  - Number of conditions: 1
[17:02:20.255] signalConditions() ... done
[17:02:20.255] Future state: ‘finished’
[17:02:20.255] signalConditions() ...
[17:02:20.255]  - include = ‘condition’
[17:02:20.255]  - exclude = ‘immediateCondition’
[17:02:20.256]  - resignal = TRUE
[17:02:20.256]  - Number of conditions: 1
[17:02:20.256]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.256] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[17:02:20.256] getGlobalsAndPackages() ...
[17:02:20.256] Searching for globals...
[17:02:20.258] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[17:02:20.258] Searching for globals ... DONE
[17:02:20.258] Resolving globals: FALSE
[17:02:20.259] 
[17:02:20.259] 
[17:02:20.259] getGlobalsAndPackages() ... DONE
[17:02:20.259] run() for ‘Future’ ...
[17:02:20.259] - state: ‘created’
[17:02:20.260] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.260] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.260] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.260]   - Field: ‘label’
[17:02:20.260]   - Field: ‘local’
[17:02:20.260]   - Field: ‘owner’
[17:02:20.260]   - Field: ‘envir’
[17:02:20.260]   - Field: ‘packages’
[17:02:20.261]   - Field: ‘gc’
[17:02:20.261]   - Field: ‘conditions’
[17:02:20.261]   - Field: ‘expr’
[17:02:20.261]   - Field: ‘uuid’
[17:02:20.261]   - Field: ‘seed’
[17:02:20.261]   - Field: ‘version’
[17:02:20.261]   - Field: ‘result’
[17:02:20.261]   - Field: ‘asynchronous’
[17:02:20.261]   - Field: ‘calls’
[17:02:20.261]   - Field: ‘globals’
[17:02:20.261]   - Field: ‘stdout’
[17:02:20.261]   - Field: ‘earlySignal’
[17:02:20.262]   - Field: ‘lazy’
[17:02:20.262]   - Field: ‘state’
[17:02:20.262] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.262] - Launch lazy future ...
[17:02:20.262] Packages needed by the future expression (n = 0): <none>
[17:02:20.262] Packages needed by future strategies (n = 0): <none>
[17:02:20.263] {
[17:02:20.263]     {
[17:02:20.263]         {
[17:02:20.263]             ...future.startTime <- base::Sys.time()
[17:02:20.263]             {
[17:02:20.263]                 {
[17:02:20.263]                   {
[17:02:20.263]                     base::local({
[17:02:20.263]                       has_future <- base::requireNamespace("future", 
[17:02:20.263]                         quietly = TRUE)
[17:02:20.263]                       if (has_future) {
[17:02:20.263]                         ns <- base::getNamespace("future")
[17:02:20.263]                         version <- ns[[".package"]][["version"]]
[17:02:20.263]                         if (is.null(version)) 
[17:02:20.263]                           version <- utils::packageVersion("future")
[17:02:20.263]                       }
[17:02:20.263]                       else {
[17:02:20.263]                         version <- NULL
[17:02:20.263]                       }
[17:02:20.263]                       if (!has_future || version < "1.8.0") {
[17:02:20.263]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.263]                           "", base::R.version$version.string), 
[17:02:20.263]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.263]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.263]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.263]                             "release", "version")], collapse = " "), 
[17:02:20.263]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.263]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.263]                           info)
[17:02:20.263]                         info <- base::paste(info, collapse = "; ")
[17:02:20.263]                         if (!has_future) {
[17:02:20.263]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.263]                             info)
[17:02:20.263]                         }
[17:02:20.263]                         else {
[17:02:20.263]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.263]                             info, version)
[17:02:20.263]                         }
[17:02:20.263]                         base::stop(msg)
[17:02:20.263]                       }
[17:02:20.263]                     })
[17:02:20.263]                   }
[17:02:20.263]                   ...future.strategy.old <- future::plan("list")
[17:02:20.263]                   options(future.plan = NULL)
[17:02:20.263]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.263]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.263]                 }
[17:02:20.263]                 ...future.workdir <- getwd()
[17:02:20.263]             }
[17:02:20.263]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.263]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.263]         }
[17:02:20.263]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.263]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.263]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.263]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.263]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.263]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.263]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.263]             base::names(...future.oldOptions))
[17:02:20.263]     }
[17:02:20.263]     if (FALSE) {
[17:02:20.263]     }
[17:02:20.263]     else {
[17:02:20.263]         if (TRUE) {
[17:02:20.263]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.263]                 open = "w")
[17:02:20.263]         }
[17:02:20.263]         else {
[17:02:20.263]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.263]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.263]         }
[17:02:20.263]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.263]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.263]             base::sink(type = "output", split = FALSE)
[17:02:20.263]             base::close(...future.stdout)
[17:02:20.263]         }, add = TRUE)
[17:02:20.263]     }
[17:02:20.263]     ...future.frame <- base::sys.nframe()
[17:02:20.263]     ...future.conditions <- base::list()
[17:02:20.263]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.263]     if (FALSE) {
[17:02:20.263]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.263]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.263]     }
[17:02:20.263]     ...future.result <- base::tryCatch({
[17:02:20.263]         base::withCallingHandlers({
[17:02:20.263]             ...future.value <- base::withVisible(base::local({
[17:02:20.263]                 cat("Processing: ")
[17:02:20.263]                 for (ii in 1:10) {
[17:02:20.263]                   cat(".")
[17:02:20.263]                 }
[17:02:20.263]                 cat(" [100%]\n")
[17:02:20.263]                 4
[17:02:20.263]             }))
[17:02:20.263]             future::FutureResult(value = ...future.value$value, 
[17:02:20.263]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.263]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.263]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.263]                     ...future.globalenv.names))
[17:02:20.263]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.263]         }, condition = base::local({
[17:02:20.263]             c <- base::c
[17:02:20.263]             inherits <- base::inherits
[17:02:20.263]             invokeRestart <- base::invokeRestart
[17:02:20.263]             length <- base::length
[17:02:20.263]             list <- base::list
[17:02:20.263]             seq.int <- base::seq.int
[17:02:20.263]             signalCondition <- base::signalCondition
[17:02:20.263]             sys.calls <- base::sys.calls
[17:02:20.263]             `[[` <- base::`[[`
[17:02:20.263]             `+` <- base::`+`
[17:02:20.263]             `<<-` <- base::`<<-`
[17:02:20.263]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.263]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.263]                   3L)]
[17:02:20.263]             }
[17:02:20.263]             function(cond) {
[17:02:20.263]                 is_error <- inherits(cond, "error")
[17:02:20.263]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.263]                   NULL)
[17:02:20.263]                 if (is_error) {
[17:02:20.263]                   sessionInformation <- function() {
[17:02:20.263]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.263]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.263]                       search = base::search(), system = base::Sys.info())
[17:02:20.263]                   }
[17:02:20.263]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.263]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.263]                     cond$call), session = sessionInformation(), 
[17:02:20.263]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.263]                   signalCondition(cond)
[17:02:20.263]                 }
[17:02:20.263]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.263]                 "immediateCondition"))) {
[17:02:20.263]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.263]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.263]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.263]                   if (TRUE && !signal) {
[17:02:20.263]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.263]                     {
[17:02:20.263]                       inherits <- base::inherits
[17:02:20.263]                       invokeRestart <- base::invokeRestart
[17:02:20.263]                       is.null <- base::is.null
[17:02:20.263]                       muffled <- FALSE
[17:02:20.263]                       if (inherits(cond, "message")) {
[17:02:20.263]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.263]                         if (muffled) 
[17:02:20.263]                           invokeRestart("muffleMessage")
[17:02:20.263]                       }
[17:02:20.263]                       else if (inherits(cond, "warning")) {
[17:02:20.263]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.263]                         if (muffled) 
[17:02:20.263]                           invokeRestart("muffleWarning")
[17:02:20.263]                       }
[17:02:20.263]                       else if (inherits(cond, "condition")) {
[17:02:20.263]                         if (!is.null(pattern)) {
[17:02:20.263]                           computeRestarts <- base::computeRestarts
[17:02:20.263]                           grepl <- base::grepl
[17:02:20.263]                           restarts <- computeRestarts(cond)
[17:02:20.263]                           for (restart in restarts) {
[17:02:20.263]                             name <- restart$name
[17:02:20.263]                             if (is.null(name)) 
[17:02:20.263]                               next
[17:02:20.263]                             if (!grepl(pattern, name)) 
[17:02:20.263]                               next
[17:02:20.263]                             invokeRestart(restart)
[17:02:20.263]                             muffled <- TRUE
[17:02:20.263]                             break
[17:02:20.263]                           }
[17:02:20.263]                         }
[17:02:20.263]                       }
[17:02:20.263]                       invisible(muffled)
[17:02:20.263]                     }
[17:02:20.263]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.263]                   }
[17:02:20.263]                 }
[17:02:20.263]                 else {
[17:02:20.263]                   if (TRUE) {
[17:02:20.263]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.263]                     {
[17:02:20.263]                       inherits <- base::inherits
[17:02:20.263]                       invokeRestart <- base::invokeRestart
[17:02:20.263]                       is.null <- base::is.null
[17:02:20.263]                       muffled <- FALSE
[17:02:20.263]                       if (inherits(cond, "message")) {
[17:02:20.263]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.263]                         if (muffled) 
[17:02:20.263]                           invokeRestart("muffleMessage")
[17:02:20.263]                       }
[17:02:20.263]                       else if (inherits(cond, "warning")) {
[17:02:20.263]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.263]                         if (muffled) 
[17:02:20.263]                           invokeRestart("muffleWarning")
[17:02:20.263]                       }
[17:02:20.263]                       else if (inherits(cond, "condition")) {
[17:02:20.263]                         if (!is.null(pattern)) {
[17:02:20.263]                           computeRestarts <- base::computeRestarts
[17:02:20.263]                           grepl <- base::grepl
[17:02:20.263]                           restarts <- computeRestarts(cond)
[17:02:20.263]                           for (restart in restarts) {
[17:02:20.263]                             name <- restart$name
[17:02:20.263]                             if (is.null(name)) 
[17:02:20.263]                               next
[17:02:20.263]                             if (!grepl(pattern, name)) 
[17:02:20.263]                               next
[17:02:20.263]                             invokeRestart(restart)
[17:02:20.263]                             muffled <- TRUE
[17:02:20.263]                             break
[17:02:20.263]                           }
[17:02:20.263]                         }
[17:02:20.263]                       }
[17:02:20.263]                       invisible(muffled)
[17:02:20.263]                     }
[17:02:20.263]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.263]                   }
[17:02:20.263]                 }
[17:02:20.263]             }
[17:02:20.263]         }))
[17:02:20.263]     }, error = function(ex) {
[17:02:20.263]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.263]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.263]                 ...future.rng), started = ...future.startTime, 
[17:02:20.263]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.263]             version = "1.8"), class = "FutureResult")
[17:02:20.263]     }, finally = {
[17:02:20.263]         if (!identical(...future.workdir, getwd())) 
[17:02:20.263]             setwd(...future.workdir)
[17:02:20.263]         {
[17:02:20.263]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.263]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.263]             }
[17:02:20.263]             base::options(...future.oldOptions)
[17:02:20.263]             if (.Platform$OS.type == "windows") {
[17:02:20.263]                 old_names <- names(...future.oldEnvVars)
[17:02:20.263]                 envs <- base::Sys.getenv()
[17:02:20.263]                 names <- names(envs)
[17:02:20.263]                 common <- intersect(names, old_names)
[17:02:20.263]                 added <- setdiff(names, old_names)
[17:02:20.263]                 removed <- setdiff(old_names, names)
[17:02:20.263]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.263]                   envs[common]]
[17:02:20.263]                 NAMES <- toupper(changed)
[17:02:20.263]                 args <- list()
[17:02:20.263]                 for (kk in seq_along(NAMES)) {
[17:02:20.263]                   name <- changed[[kk]]
[17:02:20.263]                   NAME <- NAMES[[kk]]
[17:02:20.263]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.263]                     next
[17:02:20.263]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.263]                 }
[17:02:20.263]                 NAMES <- toupper(added)
[17:02:20.263]                 for (kk in seq_along(NAMES)) {
[17:02:20.263]                   name <- added[[kk]]
[17:02:20.263]                   NAME <- NAMES[[kk]]
[17:02:20.263]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.263]                     next
[17:02:20.263]                   args[[name]] <- ""
[17:02:20.263]                 }
[17:02:20.263]                 NAMES <- toupper(removed)
[17:02:20.263]                 for (kk in seq_along(NAMES)) {
[17:02:20.263]                   name <- removed[[kk]]
[17:02:20.263]                   NAME <- NAMES[[kk]]
[17:02:20.263]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.263]                     next
[17:02:20.263]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.263]                 }
[17:02:20.263]                 if (length(args) > 0) 
[17:02:20.263]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.263]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.263]             }
[17:02:20.263]             else {
[17:02:20.263]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.263]             }
[17:02:20.263]             {
[17:02:20.263]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.263]                   0L) {
[17:02:20.263]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.263]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.263]                   base::options(opts)
[17:02:20.263]                 }
[17:02:20.263]                 {
[17:02:20.263]                   {
[17:02:20.263]                     NULL
[17:02:20.263]                     RNGkind("Mersenne-Twister")
[17:02:20.263]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.263]                       inherits = FALSE)
[17:02:20.263]                   }
[17:02:20.263]                   options(future.plan = NULL)
[17:02:20.263]                   if (is.na(NA_character_)) 
[17:02:20.263]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.263]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.263]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.263]                     .init = FALSE)
[17:02:20.263]                 }
[17:02:20.263]             }
[17:02:20.263]         }
[17:02:20.263]     })
[17:02:20.263]     if (TRUE) {
[17:02:20.263]         base::sink(type = "output", split = FALSE)
[17:02:20.263]         if (TRUE) {
[17:02:20.263]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.263]         }
[17:02:20.263]         else {
[17:02:20.263]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.263]         }
[17:02:20.263]         base::close(...future.stdout)
[17:02:20.263]         ...future.stdout <- NULL
[17:02:20.263]     }
[17:02:20.263]     ...future.result$conditions <- ...future.conditions
[17:02:20.263]     ...future.result$finished <- base::Sys.time()
[17:02:20.263]     ...future.result
[17:02:20.263] }
[17:02:20.265] plan(): Setting new future strategy stack:
[17:02:20.265] List of future strategies:
[17:02:20.265] 1. sequential:
[17:02:20.265]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.265]    - tweaked: FALSE
[17:02:20.265]    - call: NULL
[17:02:20.265] plan(): nbrOfWorkers() = 1
[17:02:20.266] plan(): Setting new future strategy stack:
[17:02:20.266] List of future strategies:
[17:02:20.266] 1. sequential:
[17:02:20.266]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.266]    - tweaked: FALSE
[17:02:20.266]    - call: plan(strategy)
[17:02:20.266] plan(): nbrOfWorkers() = 1
[17:02:20.267] SequentialFuture started (and completed)
[17:02:20.267] - Launch lazy future ... done
[17:02:20.267] run() for ‘SequentialFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[17:02:20.268] signalConditions() ...
[17:02:20.268]  - include = ‘immediateCondition’
[17:02:20.268]  - exclude = 
[17:02:20.269]  - resignal = FALSE
[17:02:20.269]  - Number of conditions: 1
[17:02:20.269] signalConditions() ... done
[17:02:20.269] Future state: ‘finished’
[17:02:20.269] signalConditions() ...
[17:02:20.269]  - include = ‘condition’
[17:02:20.269]  - exclude = ‘immediateCondition’
[17:02:20.269]  - resignal = TRUE
[17:02:20.269]  - Number of conditions: 1
[17:02:20.269]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.270] signalConditions() ... done
v3: <simpleError> (as expect)
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[17:02:20.270] getGlobalsAndPackages() ...
[17:02:20.270] Searching for globals...
[17:02:20.270] 
[17:02:20.270] Searching for globals ... DONE
[17:02:20.271] - globals: [0] <none>
[17:02:20.271] getGlobalsAndPackages() ... DONE
[17:02:20.271] run() for ‘Future’ ...
[17:02:20.271] - state: ‘created’
[17:02:20.271] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.271] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.271] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.272]   - Field: ‘label’
[17:02:20.272]   - Field: ‘local’
[17:02:20.272]   - Field: ‘owner’
[17:02:20.272]   - Field: ‘envir’
[17:02:20.272]   - Field: ‘packages’
[17:02:20.272]   - Field: ‘gc’
[17:02:20.272]   - Field: ‘conditions’
[17:02:20.272]   - Field: ‘expr’
[17:02:20.272]   - Field: ‘uuid’
[17:02:20.272]   - Field: ‘seed’
[17:02:20.273]   - Field: ‘version’
[17:02:20.273]   - Field: ‘result’
[17:02:20.273]   - Field: ‘asynchronous’
[17:02:20.273]   - Field: ‘calls’
[17:02:20.273]   - Field: ‘globals’
[17:02:20.273]   - Field: ‘stdout’
[17:02:20.273]   - Field: ‘earlySignal’
[17:02:20.273]   - Field: ‘lazy’
[17:02:20.273]   - Field: ‘state’
[17:02:20.273] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.273] - Launch lazy future ...
[17:02:20.274] Packages needed by the future expression (n = 0): <none>
[17:02:20.274] Packages needed by future strategies (n = 0): <none>
[17:02:20.274] {
[17:02:20.274]     {
[17:02:20.274]         {
[17:02:20.274]             ...future.startTime <- base::Sys.time()
[17:02:20.274]             {
[17:02:20.274]                 {
[17:02:20.274]                   {
[17:02:20.274]                     base::local({
[17:02:20.274]                       has_future <- base::requireNamespace("future", 
[17:02:20.274]                         quietly = TRUE)
[17:02:20.274]                       if (has_future) {
[17:02:20.274]                         ns <- base::getNamespace("future")
[17:02:20.274]                         version <- ns[[".package"]][["version"]]
[17:02:20.274]                         if (is.null(version)) 
[17:02:20.274]                           version <- utils::packageVersion("future")
[17:02:20.274]                       }
[17:02:20.274]                       else {
[17:02:20.274]                         version <- NULL
[17:02:20.274]                       }
[17:02:20.274]                       if (!has_future || version < "1.8.0") {
[17:02:20.274]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.274]                           "", base::R.version$version.string), 
[17:02:20.274]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.274]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.274]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.274]                             "release", "version")], collapse = " "), 
[17:02:20.274]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.274]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.274]                           info)
[17:02:20.274]                         info <- base::paste(info, collapse = "; ")
[17:02:20.274]                         if (!has_future) {
[17:02:20.274]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.274]                             info)
[17:02:20.274]                         }
[17:02:20.274]                         else {
[17:02:20.274]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.274]                             info, version)
[17:02:20.274]                         }
[17:02:20.274]                         base::stop(msg)
[17:02:20.274]                       }
[17:02:20.274]                     })
[17:02:20.274]                   }
[17:02:20.274]                   ...future.strategy.old <- future::plan("list")
[17:02:20.274]                   options(future.plan = NULL)
[17:02:20.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.274]                 }
[17:02:20.274]                 ...future.workdir <- getwd()
[17:02:20.274]             }
[17:02:20.274]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.274]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.274]         }
[17:02:20.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.274]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.274]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.274]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.274]             base::names(...future.oldOptions))
[17:02:20.274]     }
[17:02:20.274]     if (FALSE) {
[17:02:20.274]     }
[17:02:20.274]     else {
[17:02:20.274]         if (TRUE) {
[17:02:20.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.274]                 open = "w")
[17:02:20.274]         }
[17:02:20.274]         else {
[17:02:20.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.274]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.274]         }
[17:02:20.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.274]             base::sink(type = "output", split = FALSE)
[17:02:20.274]             base::close(...future.stdout)
[17:02:20.274]         }, add = TRUE)
[17:02:20.274]     }
[17:02:20.274]     ...future.frame <- base::sys.nframe()
[17:02:20.274]     ...future.conditions <- base::list()
[17:02:20.274]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.274]     if (FALSE) {
[17:02:20.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.274]     }
[17:02:20.274]     ...future.result <- base::tryCatch({
[17:02:20.274]         base::withCallingHandlers({
[17:02:20.274]             ...future.value <- base::withVisible(base::local(1))
[17:02:20.274]             future::FutureResult(value = ...future.value$value, 
[17:02:20.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.274]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.274]                     ...future.globalenv.names))
[17:02:20.274]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.274]         }, condition = base::local({
[17:02:20.274]             c <- base::c
[17:02:20.274]             inherits <- base::inherits
[17:02:20.274]             invokeRestart <- base::invokeRestart
[17:02:20.274]             length <- base::length
[17:02:20.274]             list <- base::list
[17:02:20.274]             seq.int <- base::seq.int
[17:02:20.274]             signalCondition <- base::signalCondition
[17:02:20.274]             sys.calls <- base::sys.calls
[17:02:20.274]             `[[` <- base::`[[`
[17:02:20.274]             `+` <- base::`+`
[17:02:20.274]             `<<-` <- base::`<<-`
[17:02:20.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.274]                   3L)]
[17:02:20.274]             }
[17:02:20.274]             function(cond) {
[17:02:20.274]                 is_error <- inherits(cond, "error")
[17:02:20.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.274]                   NULL)
[17:02:20.274]                 if (is_error) {
[17:02:20.274]                   sessionInformation <- function() {
[17:02:20.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.274]                       search = base::search(), system = base::Sys.info())
[17:02:20.274]                   }
[17:02:20.274]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.274]                     cond$call), session = sessionInformation(), 
[17:02:20.274]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.274]                   signalCondition(cond)
[17:02:20.274]                 }
[17:02:20.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.274]                 "immediateCondition"))) {
[17:02:20.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.274]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.274]                   if (TRUE && !signal) {
[17:02:20.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.274]                     {
[17:02:20.274]                       inherits <- base::inherits
[17:02:20.274]                       invokeRestart <- base::invokeRestart
[17:02:20.274]                       is.null <- base::is.null
[17:02:20.274]                       muffled <- FALSE
[17:02:20.274]                       if (inherits(cond, "message")) {
[17:02:20.274]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.274]                         if (muffled) 
[17:02:20.274]                           invokeRestart("muffleMessage")
[17:02:20.274]                       }
[17:02:20.274]                       else if (inherits(cond, "warning")) {
[17:02:20.274]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.274]                         if (muffled) 
[17:02:20.274]                           invokeRestart("muffleWarning")
[17:02:20.274]                       }
[17:02:20.274]                       else if (inherits(cond, "condition")) {
[17:02:20.274]                         if (!is.null(pattern)) {
[17:02:20.274]                           computeRestarts <- base::computeRestarts
[17:02:20.274]                           grepl <- base::grepl
[17:02:20.274]                           restarts <- computeRestarts(cond)
[17:02:20.274]                           for (restart in restarts) {
[17:02:20.274]                             name <- restart$name
[17:02:20.274]                             if (is.null(name)) 
[17:02:20.274]                               next
[17:02:20.274]                             if (!grepl(pattern, name)) 
[17:02:20.274]                               next
[17:02:20.274]                             invokeRestart(restart)
[17:02:20.274]                             muffled <- TRUE
[17:02:20.274]                             break
[17:02:20.274]                           }
[17:02:20.274]                         }
[17:02:20.274]                       }
[17:02:20.274]                       invisible(muffled)
[17:02:20.274]                     }
[17:02:20.274]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.274]                   }
[17:02:20.274]                 }
[17:02:20.274]                 else {
[17:02:20.274]                   if (TRUE) {
[17:02:20.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.274]                     {
[17:02:20.274]                       inherits <- base::inherits
[17:02:20.274]                       invokeRestart <- base::invokeRestart
[17:02:20.274]                       is.null <- base::is.null
[17:02:20.274]                       muffled <- FALSE
[17:02:20.274]                       if (inherits(cond, "message")) {
[17:02:20.274]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.274]                         if (muffled) 
[17:02:20.274]                           invokeRestart("muffleMessage")
[17:02:20.274]                       }
[17:02:20.274]                       else if (inherits(cond, "warning")) {
[17:02:20.274]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.274]                         if (muffled) 
[17:02:20.274]                           invokeRestart("muffleWarning")
[17:02:20.274]                       }
[17:02:20.274]                       else if (inherits(cond, "condition")) {
[17:02:20.274]                         if (!is.null(pattern)) {
[17:02:20.274]                           computeRestarts <- base::computeRestarts
[17:02:20.274]                           grepl <- base::grepl
[17:02:20.274]                           restarts <- computeRestarts(cond)
[17:02:20.274]                           for (restart in restarts) {
[17:02:20.274]                             name <- restart$name
[17:02:20.274]                             if (is.null(name)) 
[17:02:20.274]                               next
[17:02:20.274]                             if (!grepl(pattern, name)) 
[17:02:20.274]                               next
[17:02:20.274]                             invokeRestart(restart)
[17:02:20.274]                             muffled <- TRUE
[17:02:20.274]                             break
[17:02:20.274]                           }
[17:02:20.274]                         }
[17:02:20.274]                       }
[17:02:20.274]                       invisible(muffled)
[17:02:20.274]                     }
[17:02:20.274]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.274]                   }
[17:02:20.274]                 }
[17:02:20.274]             }
[17:02:20.274]         }))
[17:02:20.274]     }, error = function(ex) {
[17:02:20.274]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.274]                 ...future.rng), started = ...future.startTime, 
[17:02:20.274]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.274]             version = "1.8"), class = "FutureResult")
[17:02:20.274]     }, finally = {
[17:02:20.274]         if (!identical(...future.workdir, getwd())) 
[17:02:20.274]             setwd(...future.workdir)
[17:02:20.274]         {
[17:02:20.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.274]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.274]             }
[17:02:20.274]             base::options(...future.oldOptions)
[17:02:20.274]             if (.Platform$OS.type == "windows") {
[17:02:20.274]                 old_names <- names(...future.oldEnvVars)
[17:02:20.274]                 envs <- base::Sys.getenv()
[17:02:20.274]                 names <- names(envs)
[17:02:20.274]                 common <- intersect(names, old_names)
[17:02:20.274]                 added <- setdiff(names, old_names)
[17:02:20.274]                 removed <- setdiff(old_names, names)
[17:02:20.274]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.274]                   envs[common]]
[17:02:20.274]                 NAMES <- toupper(changed)
[17:02:20.274]                 args <- list()
[17:02:20.274]                 for (kk in seq_along(NAMES)) {
[17:02:20.274]                   name <- changed[[kk]]
[17:02:20.274]                   NAME <- NAMES[[kk]]
[17:02:20.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.274]                     next
[17:02:20.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.274]                 }
[17:02:20.274]                 NAMES <- toupper(added)
[17:02:20.274]                 for (kk in seq_along(NAMES)) {
[17:02:20.274]                   name <- added[[kk]]
[17:02:20.274]                   NAME <- NAMES[[kk]]
[17:02:20.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.274]                     next
[17:02:20.274]                   args[[name]] <- ""
[17:02:20.274]                 }
[17:02:20.274]                 NAMES <- toupper(removed)
[17:02:20.274]                 for (kk in seq_along(NAMES)) {
[17:02:20.274]                   name <- removed[[kk]]
[17:02:20.274]                   NAME <- NAMES[[kk]]
[17:02:20.274]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.274]                     next
[17:02:20.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.274]                 }
[17:02:20.274]                 if (length(args) > 0) 
[17:02:20.274]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.274]             }
[17:02:20.274]             else {
[17:02:20.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.274]             }
[17:02:20.274]             {
[17:02:20.274]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.274]                   0L) {
[17:02:20.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.274]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.274]                   base::options(opts)
[17:02:20.274]                 }
[17:02:20.274]                 {
[17:02:20.274]                   {
[17:02:20.274]                     NULL
[17:02:20.274]                     RNGkind("Mersenne-Twister")
[17:02:20.274]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.274]                       inherits = FALSE)
[17:02:20.274]                   }
[17:02:20.274]                   options(future.plan = NULL)
[17:02:20.274]                   if (is.na(NA_character_)) 
[17:02:20.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.274]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.274]                     .init = FALSE)
[17:02:20.274]                 }
[17:02:20.274]             }
[17:02:20.274]         }
[17:02:20.274]     })
[17:02:20.274]     if (TRUE) {
[17:02:20.274]         base::sink(type = "output", split = FALSE)
[17:02:20.274]         if (TRUE) {
[17:02:20.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.274]         }
[17:02:20.274]         else {
[17:02:20.274]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.274]         }
[17:02:20.274]         base::close(...future.stdout)
[17:02:20.274]         ...future.stdout <- NULL
[17:02:20.274]     }
[17:02:20.274]     ...future.result$conditions <- ...future.conditions
[17:02:20.274]     ...future.result$finished <- base::Sys.time()
[17:02:20.274]     ...future.result
[17:02:20.274] }
[17:02:20.276] plan(): Setting new future strategy stack:
[17:02:20.276] List of future strategies:
[17:02:20.276] 1. sequential:
[17:02:20.276]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.276]    - tweaked: FALSE
[17:02:20.276]    - call: NULL
[17:02:20.276] plan(): nbrOfWorkers() = 1
[17:02:20.277] plan(): Setting new future strategy stack:
[17:02:20.277] List of future strategies:
[17:02:20.277] 1. sequential:
[17:02:20.277]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.277]    - tweaked: FALSE
[17:02:20.277]    - call: plan(strategy)
[17:02:20.278] plan(): nbrOfWorkers() = 1
[17:02:20.278] SequentialFuture started (and completed)
[17:02:20.278] - Launch lazy future ... done
[17:02:20.278] run() for ‘SequentialFuture’ ... done
c = 1
[17:02:20.279] getGlobalsAndPackages() ...
[17:02:20.279] Searching for globals...
[17:02:20.279] 
[17:02:20.279] Searching for globals ... DONE
[17:02:20.279] - globals: [0] <none>
[17:02:20.279] getGlobalsAndPackages() ... DONE
[17:02:20.279] run() for ‘Future’ ...
[17:02:20.280] - state: ‘created’
[17:02:20.280] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.280] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.280] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.280]   - Field: ‘label’
[17:02:20.280]   - Field: ‘local’
[17:02:20.280]   - Field: ‘owner’
[17:02:20.280]   - Field: ‘envir’
[17:02:20.281]   - Field: ‘packages’
[17:02:20.281]   - Field: ‘gc’
[17:02:20.281]   - Field: ‘conditions’
[17:02:20.281]   - Field: ‘expr’
[17:02:20.281]   - Field: ‘uuid’
[17:02:20.281]   - Field: ‘seed’
[17:02:20.281]   - Field: ‘version’
[17:02:20.281]   - Field: ‘result’
[17:02:20.281]   - Field: ‘asynchronous’
[17:02:20.281]   - Field: ‘calls’
[17:02:20.281]   - Field: ‘globals’
[17:02:20.282]   - Field: ‘stdout’
[17:02:20.282]   - Field: ‘earlySignal’
[17:02:20.282]   - Field: ‘lazy’
[17:02:20.282]   - Field: ‘state’
[17:02:20.282] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.282] - Launch lazy future ...
[17:02:20.282] Packages needed by the future expression (n = 0): <none>
[17:02:20.282] Packages needed by future strategies (n = 0): <none>
[17:02:20.283] {
[17:02:20.283]     {
[17:02:20.283]         {
[17:02:20.283]             ...future.startTime <- base::Sys.time()
[17:02:20.283]             {
[17:02:20.283]                 {
[17:02:20.283]                   {
[17:02:20.283]                     base::local({
[17:02:20.283]                       has_future <- base::requireNamespace("future", 
[17:02:20.283]                         quietly = TRUE)
[17:02:20.283]                       if (has_future) {
[17:02:20.283]                         ns <- base::getNamespace("future")
[17:02:20.283]                         version <- ns[[".package"]][["version"]]
[17:02:20.283]                         if (is.null(version)) 
[17:02:20.283]                           version <- utils::packageVersion("future")
[17:02:20.283]                       }
[17:02:20.283]                       else {
[17:02:20.283]                         version <- NULL
[17:02:20.283]                       }
[17:02:20.283]                       if (!has_future || version < "1.8.0") {
[17:02:20.283]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.283]                           "", base::R.version$version.string), 
[17:02:20.283]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.283]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.283]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.283]                             "release", "version")], collapse = " "), 
[17:02:20.283]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.283]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.283]                           info)
[17:02:20.283]                         info <- base::paste(info, collapse = "; ")
[17:02:20.283]                         if (!has_future) {
[17:02:20.283]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.283]                             info)
[17:02:20.283]                         }
[17:02:20.283]                         else {
[17:02:20.283]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.283]                             info, version)
[17:02:20.283]                         }
[17:02:20.283]                         base::stop(msg)
[17:02:20.283]                       }
[17:02:20.283]                     })
[17:02:20.283]                   }
[17:02:20.283]                   ...future.strategy.old <- future::plan("list")
[17:02:20.283]                   options(future.plan = NULL)
[17:02:20.283]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.283]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.283]                 }
[17:02:20.283]                 ...future.workdir <- getwd()
[17:02:20.283]             }
[17:02:20.283]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.283]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.283]         }
[17:02:20.283]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.283]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.283]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.283]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.283]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.283]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.283]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.283]             base::names(...future.oldOptions))
[17:02:20.283]     }
[17:02:20.283]     if (FALSE) {
[17:02:20.283]     }
[17:02:20.283]     else {
[17:02:20.283]         if (TRUE) {
[17:02:20.283]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.283]                 open = "w")
[17:02:20.283]         }
[17:02:20.283]         else {
[17:02:20.283]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.283]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.283]         }
[17:02:20.283]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.283]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.283]             base::sink(type = "output", split = FALSE)
[17:02:20.283]             base::close(...future.stdout)
[17:02:20.283]         }, add = TRUE)
[17:02:20.283]     }
[17:02:20.283]     ...future.frame <- base::sys.nframe()
[17:02:20.283]     ...future.conditions <- base::list()
[17:02:20.283]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.283]     if (FALSE) {
[17:02:20.283]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.283]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.283]     }
[17:02:20.283]     ...future.result <- base::tryCatch({
[17:02:20.283]         base::withCallingHandlers({
[17:02:20.283]             ...future.value <- base::withVisible(base::local(1))
[17:02:20.283]             future::FutureResult(value = ...future.value$value, 
[17:02:20.283]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.283]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.283]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.283]                     ...future.globalenv.names))
[17:02:20.283]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.283]         }, condition = base::local({
[17:02:20.283]             c <- base::c
[17:02:20.283]             inherits <- base::inherits
[17:02:20.283]             invokeRestart <- base::invokeRestart
[17:02:20.283]             length <- base::length
[17:02:20.283]             list <- base::list
[17:02:20.283]             seq.int <- base::seq.int
[17:02:20.283]             signalCondition <- base::signalCondition
[17:02:20.283]             sys.calls <- base::sys.calls
[17:02:20.283]             `[[` <- base::`[[`
[17:02:20.283]             `+` <- base::`+`
[17:02:20.283]             `<<-` <- base::`<<-`
[17:02:20.283]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.283]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.283]                   3L)]
[17:02:20.283]             }
[17:02:20.283]             function(cond) {
[17:02:20.283]                 is_error <- inherits(cond, "error")
[17:02:20.283]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.283]                   NULL)
[17:02:20.283]                 if (is_error) {
[17:02:20.283]                   sessionInformation <- function() {
[17:02:20.283]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.283]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.283]                       search = base::search(), system = base::Sys.info())
[17:02:20.283]                   }
[17:02:20.283]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.283]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.283]                     cond$call), session = sessionInformation(), 
[17:02:20.283]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.283]                   signalCondition(cond)
[17:02:20.283]                 }
[17:02:20.283]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.283]                 "immediateCondition"))) {
[17:02:20.283]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.283]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.283]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.283]                   if (TRUE && !signal) {
[17:02:20.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.283]                     {
[17:02:20.283]                       inherits <- base::inherits
[17:02:20.283]                       invokeRestart <- base::invokeRestart
[17:02:20.283]                       is.null <- base::is.null
[17:02:20.283]                       muffled <- FALSE
[17:02:20.283]                       if (inherits(cond, "message")) {
[17:02:20.283]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.283]                         if (muffled) 
[17:02:20.283]                           invokeRestart("muffleMessage")
[17:02:20.283]                       }
[17:02:20.283]                       else if (inherits(cond, "warning")) {
[17:02:20.283]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.283]                         if (muffled) 
[17:02:20.283]                           invokeRestart("muffleWarning")
[17:02:20.283]                       }
[17:02:20.283]                       else if (inherits(cond, "condition")) {
[17:02:20.283]                         if (!is.null(pattern)) {
[17:02:20.283]                           computeRestarts <- base::computeRestarts
[17:02:20.283]                           grepl <- base::grepl
[17:02:20.283]                           restarts <- computeRestarts(cond)
[17:02:20.283]                           for (restart in restarts) {
[17:02:20.283]                             name <- restart$name
[17:02:20.283]                             if (is.null(name)) 
[17:02:20.283]                               next
[17:02:20.283]                             if (!grepl(pattern, name)) 
[17:02:20.283]                               next
[17:02:20.283]                             invokeRestart(restart)
[17:02:20.283]                             muffled <- TRUE
[17:02:20.283]                             break
[17:02:20.283]                           }
[17:02:20.283]                         }
[17:02:20.283]                       }
[17:02:20.283]                       invisible(muffled)
[17:02:20.283]                     }
[17:02:20.283]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.283]                   }
[17:02:20.283]                 }
[17:02:20.283]                 else {
[17:02:20.283]                   if (TRUE) {
[17:02:20.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.283]                     {
[17:02:20.283]                       inherits <- base::inherits
[17:02:20.283]                       invokeRestart <- base::invokeRestart
[17:02:20.283]                       is.null <- base::is.null
[17:02:20.283]                       muffled <- FALSE
[17:02:20.283]                       if (inherits(cond, "message")) {
[17:02:20.283]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.283]                         if (muffled) 
[17:02:20.283]                           invokeRestart("muffleMessage")
[17:02:20.283]                       }
[17:02:20.283]                       else if (inherits(cond, "warning")) {
[17:02:20.283]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.283]                         if (muffled) 
[17:02:20.283]                           invokeRestart("muffleWarning")
[17:02:20.283]                       }
[17:02:20.283]                       else if (inherits(cond, "condition")) {
[17:02:20.283]                         if (!is.null(pattern)) {
[17:02:20.283]                           computeRestarts <- base::computeRestarts
[17:02:20.283]                           grepl <- base::grepl
[17:02:20.283]                           restarts <- computeRestarts(cond)
[17:02:20.283]                           for (restart in restarts) {
[17:02:20.283]                             name <- restart$name
[17:02:20.283]                             if (is.null(name)) 
[17:02:20.283]                               next
[17:02:20.283]                             if (!grepl(pattern, name)) 
[17:02:20.283]                               next
[17:02:20.283]                             invokeRestart(restart)
[17:02:20.283]                             muffled <- TRUE
[17:02:20.283]                             break
[17:02:20.283]                           }
[17:02:20.283]                         }
[17:02:20.283]                       }
[17:02:20.283]                       invisible(muffled)
[17:02:20.283]                     }
[17:02:20.283]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.283]                   }
[17:02:20.283]                 }
[17:02:20.283]             }
[17:02:20.283]         }))
[17:02:20.283]     }, error = function(ex) {
[17:02:20.283]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.283]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.283]                 ...future.rng), started = ...future.startTime, 
[17:02:20.283]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.283]             version = "1.8"), class = "FutureResult")
[17:02:20.283]     }, finally = {
[17:02:20.283]         if (!identical(...future.workdir, getwd())) 
[17:02:20.283]             setwd(...future.workdir)
[17:02:20.283]         {
[17:02:20.283]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.283]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.283]             }
[17:02:20.283]             base::options(...future.oldOptions)
[17:02:20.283]             if (.Platform$OS.type == "windows") {
[17:02:20.283]                 old_names <- names(...future.oldEnvVars)
[17:02:20.283]                 envs <- base::Sys.getenv()
[17:02:20.283]                 names <- names(envs)
[17:02:20.283]                 common <- intersect(names, old_names)
[17:02:20.283]                 added <- setdiff(names, old_names)
[17:02:20.283]                 removed <- setdiff(old_names, names)
[17:02:20.283]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.283]                   envs[common]]
[17:02:20.283]                 NAMES <- toupper(changed)
[17:02:20.283]                 args <- list()
[17:02:20.283]                 for (kk in seq_along(NAMES)) {
[17:02:20.283]                   name <- changed[[kk]]
[17:02:20.283]                   NAME <- NAMES[[kk]]
[17:02:20.283]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.283]                     next
[17:02:20.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.283]                 }
[17:02:20.283]                 NAMES <- toupper(added)
[17:02:20.283]                 for (kk in seq_along(NAMES)) {
[17:02:20.283]                   name <- added[[kk]]
[17:02:20.283]                   NAME <- NAMES[[kk]]
[17:02:20.283]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.283]                     next
[17:02:20.283]                   args[[name]] <- ""
[17:02:20.283]                 }
[17:02:20.283]                 NAMES <- toupper(removed)
[17:02:20.283]                 for (kk in seq_along(NAMES)) {
[17:02:20.283]                   name <- removed[[kk]]
[17:02:20.283]                   NAME <- NAMES[[kk]]
[17:02:20.283]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.283]                     next
[17:02:20.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.283]                 }
[17:02:20.283]                 if (length(args) > 0) 
[17:02:20.283]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.283]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.283]             }
[17:02:20.283]             else {
[17:02:20.283]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.283]             }
[17:02:20.283]             {
[17:02:20.283]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.283]                   0L) {
[17:02:20.283]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.283]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.283]                   base::options(opts)
[17:02:20.283]                 }
[17:02:20.283]                 {
[17:02:20.283]                   {
[17:02:20.283]                     NULL
[17:02:20.283]                     RNGkind("Mersenne-Twister")
[17:02:20.283]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.283]                       inherits = FALSE)
[17:02:20.283]                   }
[17:02:20.283]                   options(future.plan = NULL)
[17:02:20.283]                   if (is.na(NA_character_)) 
[17:02:20.283]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.283]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.283]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.283]                     .init = FALSE)
[17:02:20.283]                 }
[17:02:20.283]             }
[17:02:20.283]         }
[17:02:20.283]     })
[17:02:20.283]     if (TRUE) {
[17:02:20.283]         base::sink(type = "output", split = FALSE)
[17:02:20.283]         if (TRUE) {
[17:02:20.283]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.283]         }
[17:02:20.283]         else {
[17:02:20.283]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.283]         }
[17:02:20.283]         base::close(...future.stdout)
[17:02:20.283]         ...future.stdout <- NULL
[17:02:20.283]     }
[17:02:20.283]     ...future.result$conditions <- ...future.conditions
[17:02:20.283]     ...future.result$finished <- base::Sys.time()
[17:02:20.283]     ...future.result
[17:02:20.283] }
[17:02:20.286] plan(): Setting new future strategy stack:
[17:02:20.286] List of future strategies:
[17:02:20.286] 1. sequential:
[17:02:20.286]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.286]    - tweaked: FALSE
[17:02:20.286]    - call: NULL
[17:02:20.287] plan(): nbrOfWorkers() = 1
[17:02:20.288] plan(): Setting new future strategy stack:
[17:02:20.288] List of future strategies:
[17:02:20.288] 1. sequential:
[17:02:20.288]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.288]    - tweaked: FALSE
[17:02:20.288]    - call: plan(strategy)
[17:02:20.288] plan(): nbrOfWorkers() = 1
[17:02:20.288] SequentialFuture started (and completed)
[17:02:20.289] - Launch lazy future ... done
[17:02:20.289] run() for ‘SequentialFuture’ ... done
d = 1
** Nested future assignments
[17:02:20.289] getGlobalsAndPackages() ...
[17:02:20.289] Searching for globals...
[17:02:20.293] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[17:02:20.293] Searching for globals ... DONE
[17:02:20.293] Resolving globals: FALSE
[17:02:20.293] 
[17:02:20.293] - packages: [1] ‘future’
[17:02:20.294] getGlobalsAndPackages() ... DONE
[17:02:20.294] run() for ‘Future’ ...
[17:02:20.294] - state: ‘created’
[17:02:20.294] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.294] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.294] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.294]   - Field: ‘label’
[17:02:20.295]   - Field: ‘local’
[17:02:20.295]   - Field: ‘owner’
[17:02:20.295]   - Field: ‘envir’
[17:02:20.295]   - Field: ‘packages’
[17:02:20.295]   - Field: ‘gc’
[17:02:20.295]   - Field: ‘conditions’
[17:02:20.295]   - Field: ‘expr’
[17:02:20.295]   - Field: ‘uuid’
[17:02:20.295]   - Field: ‘seed’
[17:02:20.295]   - Field: ‘version’
[17:02:20.296]   - Field: ‘result’
[17:02:20.296]   - Field: ‘asynchronous’
[17:02:20.296]   - Field: ‘calls’
[17:02:20.296]   - Field: ‘globals’
[17:02:20.296]   - Field: ‘stdout’
[17:02:20.296]   - Field: ‘earlySignal’
[17:02:20.296]   - Field: ‘lazy’
[17:02:20.296]   - Field: ‘state’
[17:02:20.296] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.296] - Launch lazy future ...
[17:02:20.297] Packages needed by the future expression (n = 1): ‘future’
[17:02:20.297] Packages needed by future strategies (n = 0): <none>
[17:02:20.297] {
[17:02:20.297]     {
[17:02:20.297]         {
[17:02:20.297]             ...future.startTime <- base::Sys.time()
[17:02:20.297]             {
[17:02:20.297]                 {
[17:02:20.297]                   {
[17:02:20.297]                     {
[17:02:20.297]                       base::local({
[17:02:20.297]                         has_future <- base::requireNamespace("future", 
[17:02:20.297]                           quietly = TRUE)
[17:02:20.297]                         if (has_future) {
[17:02:20.297]                           ns <- base::getNamespace("future")
[17:02:20.297]                           version <- ns[[".package"]][["version"]]
[17:02:20.297]                           if (is.null(version)) 
[17:02:20.297]                             version <- utils::packageVersion("future")
[17:02:20.297]                         }
[17:02:20.297]                         else {
[17:02:20.297]                           version <- NULL
[17:02:20.297]                         }
[17:02:20.297]                         if (!has_future || version < "1.8.0") {
[17:02:20.297]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.297]                             "", base::R.version$version.string), 
[17:02:20.297]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.297]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.297]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.297]                               "release", "version")], collapse = " "), 
[17:02:20.297]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.297]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.297]                             info)
[17:02:20.297]                           info <- base::paste(info, collapse = "; ")
[17:02:20.297]                           if (!has_future) {
[17:02:20.297]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.297]                               info)
[17:02:20.297]                           }
[17:02:20.297]                           else {
[17:02:20.297]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.297]                               info, version)
[17:02:20.297]                           }
[17:02:20.297]                           base::stop(msg)
[17:02:20.297]                         }
[17:02:20.297]                       })
[17:02:20.297]                     }
[17:02:20.297]                     base::local({
[17:02:20.297]                       for (pkg in "future") {
[17:02:20.297]                         base::loadNamespace(pkg)
[17:02:20.297]                         base::library(pkg, character.only = TRUE)
[17:02:20.297]                       }
[17:02:20.297]                     })
[17:02:20.297]                   }
[17:02:20.297]                   ...future.strategy.old <- future::plan("list")
[17:02:20.297]                   options(future.plan = NULL)
[17:02:20.297]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.297]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.297]                 }
[17:02:20.297]                 ...future.workdir <- getwd()
[17:02:20.297]             }
[17:02:20.297]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.297]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.297]         }
[17:02:20.297]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.297]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.297]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.297]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.297]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.297]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.297]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.297]             base::names(...future.oldOptions))
[17:02:20.297]     }
[17:02:20.297]     if (FALSE) {
[17:02:20.297]     }
[17:02:20.297]     else {
[17:02:20.297]         if (TRUE) {
[17:02:20.297]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.297]                 open = "w")
[17:02:20.297]         }
[17:02:20.297]         else {
[17:02:20.297]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.297]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.297]         }
[17:02:20.297]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.297]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.297]             base::sink(type = "output", split = FALSE)
[17:02:20.297]             base::close(...future.stdout)
[17:02:20.297]         }, add = TRUE)
[17:02:20.297]     }
[17:02:20.297]     ...future.frame <- base::sys.nframe()
[17:02:20.297]     ...future.conditions <- base::list()
[17:02:20.297]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.297]     if (FALSE) {
[17:02:20.297]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.297]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.297]     }
[17:02:20.297]     ...future.result <- base::tryCatch({
[17:02:20.297]         base::withCallingHandlers({
[17:02:20.297]             ...future.value <- base::withVisible(base::local({
[17:02:20.297]                 b <- 1
[17:02:20.297]                 c %<-% 2
[17:02:20.297]                 d <- 3
[17:02:20.297]                 4 %->% e
[17:02:20.297]                 b + c + d + e
[17:02:20.297]             }))
[17:02:20.297]             future::FutureResult(value = ...future.value$value, 
[17:02:20.297]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.297]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.297]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.297]                     ...future.globalenv.names))
[17:02:20.297]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.297]         }, condition = base::local({
[17:02:20.297]             c <- base::c
[17:02:20.297]             inherits <- base::inherits
[17:02:20.297]             invokeRestart <- base::invokeRestart
[17:02:20.297]             length <- base::length
[17:02:20.297]             list <- base::list
[17:02:20.297]             seq.int <- base::seq.int
[17:02:20.297]             signalCondition <- base::signalCondition
[17:02:20.297]             sys.calls <- base::sys.calls
[17:02:20.297]             `[[` <- base::`[[`
[17:02:20.297]             `+` <- base::`+`
[17:02:20.297]             `<<-` <- base::`<<-`
[17:02:20.297]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.297]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.297]                   3L)]
[17:02:20.297]             }
[17:02:20.297]             function(cond) {
[17:02:20.297]                 is_error <- inherits(cond, "error")
[17:02:20.297]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.297]                   NULL)
[17:02:20.297]                 if (is_error) {
[17:02:20.297]                   sessionInformation <- function() {
[17:02:20.297]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.297]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.297]                       search = base::search(), system = base::Sys.info())
[17:02:20.297]                   }
[17:02:20.297]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.297]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.297]                     cond$call), session = sessionInformation(), 
[17:02:20.297]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.297]                   signalCondition(cond)
[17:02:20.297]                 }
[17:02:20.297]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.297]                 "immediateCondition"))) {
[17:02:20.297]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.297]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.297]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.297]                   if (TRUE && !signal) {
[17:02:20.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.297]                     {
[17:02:20.297]                       inherits <- base::inherits
[17:02:20.297]                       invokeRestart <- base::invokeRestart
[17:02:20.297]                       is.null <- base::is.null
[17:02:20.297]                       muffled <- FALSE
[17:02:20.297]                       if (inherits(cond, "message")) {
[17:02:20.297]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.297]                         if (muffled) 
[17:02:20.297]                           invokeRestart("muffleMessage")
[17:02:20.297]                       }
[17:02:20.297]                       else if (inherits(cond, "warning")) {
[17:02:20.297]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.297]                         if (muffled) 
[17:02:20.297]                           invokeRestart("muffleWarning")
[17:02:20.297]                       }
[17:02:20.297]                       else if (inherits(cond, "condition")) {
[17:02:20.297]                         if (!is.null(pattern)) {
[17:02:20.297]                           computeRestarts <- base::computeRestarts
[17:02:20.297]                           grepl <- base::grepl
[17:02:20.297]                           restarts <- computeRestarts(cond)
[17:02:20.297]                           for (restart in restarts) {
[17:02:20.297]                             name <- restart$name
[17:02:20.297]                             if (is.null(name)) 
[17:02:20.297]                               next
[17:02:20.297]                             if (!grepl(pattern, name)) 
[17:02:20.297]                               next
[17:02:20.297]                             invokeRestart(restart)
[17:02:20.297]                             muffled <- TRUE
[17:02:20.297]                             break
[17:02:20.297]                           }
[17:02:20.297]                         }
[17:02:20.297]                       }
[17:02:20.297]                       invisible(muffled)
[17:02:20.297]                     }
[17:02:20.297]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.297]                   }
[17:02:20.297]                 }
[17:02:20.297]                 else {
[17:02:20.297]                   if (TRUE) {
[17:02:20.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.297]                     {
[17:02:20.297]                       inherits <- base::inherits
[17:02:20.297]                       invokeRestart <- base::invokeRestart
[17:02:20.297]                       is.null <- base::is.null
[17:02:20.297]                       muffled <- FALSE
[17:02:20.297]                       if (inherits(cond, "message")) {
[17:02:20.297]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.297]                         if (muffled) 
[17:02:20.297]                           invokeRestart("muffleMessage")
[17:02:20.297]                       }
[17:02:20.297]                       else if (inherits(cond, "warning")) {
[17:02:20.297]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.297]                         if (muffled) 
[17:02:20.297]                           invokeRestart("muffleWarning")
[17:02:20.297]                       }
[17:02:20.297]                       else if (inherits(cond, "condition")) {
[17:02:20.297]                         if (!is.null(pattern)) {
[17:02:20.297]                           computeRestarts <- base::computeRestarts
[17:02:20.297]                           grepl <- base::grepl
[17:02:20.297]                           restarts <- computeRestarts(cond)
[17:02:20.297]                           for (restart in restarts) {
[17:02:20.297]                             name <- restart$name
[17:02:20.297]                             if (is.null(name)) 
[17:02:20.297]                               next
[17:02:20.297]                             if (!grepl(pattern, name)) 
[17:02:20.297]                               next
[17:02:20.297]                             invokeRestart(restart)
[17:02:20.297]                             muffled <- TRUE
[17:02:20.297]                             break
[17:02:20.297]                           }
[17:02:20.297]                         }
[17:02:20.297]                       }
[17:02:20.297]                       invisible(muffled)
[17:02:20.297]                     }
[17:02:20.297]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.297]                   }
[17:02:20.297]                 }
[17:02:20.297]             }
[17:02:20.297]         }))
[17:02:20.297]     }, error = function(ex) {
[17:02:20.297]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.297]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.297]                 ...future.rng), started = ...future.startTime, 
[17:02:20.297]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.297]             version = "1.8"), class = "FutureResult")
[17:02:20.297]     }, finally = {
[17:02:20.297]         if (!identical(...future.workdir, getwd())) 
[17:02:20.297]             setwd(...future.workdir)
[17:02:20.297]         {
[17:02:20.297]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.297]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.297]             }
[17:02:20.297]             base::options(...future.oldOptions)
[17:02:20.297]             if (.Platform$OS.type == "windows") {
[17:02:20.297]                 old_names <- names(...future.oldEnvVars)
[17:02:20.297]                 envs <- base::Sys.getenv()
[17:02:20.297]                 names <- names(envs)
[17:02:20.297]                 common <- intersect(names, old_names)
[17:02:20.297]                 added <- setdiff(names, old_names)
[17:02:20.297]                 removed <- setdiff(old_names, names)
[17:02:20.297]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.297]                   envs[common]]
[17:02:20.297]                 NAMES <- toupper(changed)
[17:02:20.297]                 args <- list()
[17:02:20.297]                 for (kk in seq_along(NAMES)) {
[17:02:20.297]                   name <- changed[[kk]]
[17:02:20.297]                   NAME <- NAMES[[kk]]
[17:02:20.297]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.297]                     next
[17:02:20.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.297]                 }
[17:02:20.297]                 NAMES <- toupper(added)
[17:02:20.297]                 for (kk in seq_along(NAMES)) {
[17:02:20.297]                   name <- added[[kk]]
[17:02:20.297]                   NAME <- NAMES[[kk]]
[17:02:20.297]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.297]                     next
[17:02:20.297]                   args[[name]] <- ""
[17:02:20.297]                 }
[17:02:20.297]                 NAMES <- toupper(removed)
[17:02:20.297]                 for (kk in seq_along(NAMES)) {
[17:02:20.297]                   name <- removed[[kk]]
[17:02:20.297]                   NAME <- NAMES[[kk]]
[17:02:20.297]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.297]                     next
[17:02:20.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.297]                 }
[17:02:20.297]                 if (length(args) > 0) 
[17:02:20.297]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.297]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.297]             }
[17:02:20.297]             else {
[17:02:20.297]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.297]             }
[17:02:20.297]             {
[17:02:20.297]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.297]                   0L) {
[17:02:20.297]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.297]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.297]                   base::options(opts)
[17:02:20.297]                 }
[17:02:20.297]                 {
[17:02:20.297]                   {
[17:02:20.297]                     NULL
[17:02:20.297]                     RNGkind("Mersenne-Twister")
[17:02:20.297]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.297]                       inherits = FALSE)
[17:02:20.297]                   }
[17:02:20.297]                   options(future.plan = NULL)
[17:02:20.297]                   if (is.na(NA_character_)) 
[17:02:20.297]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.297]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.297]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.297]                     .init = FALSE)
[17:02:20.297]                 }
[17:02:20.297]             }
[17:02:20.297]         }
[17:02:20.297]     })
[17:02:20.297]     if (TRUE) {
[17:02:20.297]         base::sink(type = "output", split = FALSE)
[17:02:20.297]         if (TRUE) {
[17:02:20.297]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.297]         }
[17:02:20.297]         else {
[17:02:20.297]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.297]         }
[17:02:20.297]         base::close(...future.stdout)
[17:02:20.297]         ...future.stdout <- NULL
[17:02:20.297]     }
[17:02:20.297]     ...future.result$conditions <- ...future.conditions
[17:02:20.297]     ...future.result$finished <- base::Sys.time()
[17:02:20.297]     ...future.result
[17:02:20.297] }
[17:02:20.299] plan(): Setting new future strategy stack:
[17:02:20.299] List of future strategies:
[17:02:20.299] 1. sequential:
[17:02:20.299]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.299]    - tweaked: FALSE
[17:02:20.299]    - call: NULL
[17:02:20.300] plan(): nbrOfWorkers() = 1
[17:02:20.334] plan(): Setting new future strategy stack:
[17:02:20.335] List of future strategies:
[17:02:20.335] 1. sequential:
[17:02:20.335]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.335]    - tweaked: FALSE
[17:02:20.335]    - call: plan(strategy)
[17:02:20.335] plan(): nbrOfWorkers() = 1
[17:02:20.335] SequentialFuture started (and completed)
[17:02:20.335] signalConditions() ...
[17:02:20.335]  - include = ‘immediateCondition’
[17:02:20.336]  - exclude = 
[17:02:20.336]  - resignal = FALSE
[17:02:20.336]  - Number of conditions: 88
[17:02:20.336] signalConditions() ... done
[17:02:20.336] - Launch lazy future ... done
[17:02:20.336] run() for ‘SequentialFuture’ ... done
[17:02:20.336] signalConditions() ...
[17:02:20.336]  - include = ‘immediateCondition’
[17:02:20.336]  - exclude = 
[17:02:20.337]  - resignal = FALSE
[17:02:20.337]  - Number of conditions: 88
[17:02:20.337] signalConditions() ... done
[17:02:20.337] Future state: ‘finished’
[17:02:20.337] signalConditions() ...
[17:02:20.339]  - include = ‘condition’
[17:02:20.339]  - exclude = ‘immediateCondition’
[17:02:20.339]  - resignal = TRUE
[17:02:20.339]  - Number of conditions: 88
[17:02:20.339]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.300] getGlobalsAndPackages() ...
[17:02:20.340]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.300] Searching for globals...
[17:02:20.340]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.316] 
[17:02:20.340]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.316] Searching for globals ... DONE
[17:02:20.340]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.317] - globals: [0] <none>
[17:02:20.340]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.317] getGlobalsAndPackages() ... DONE
[17:02:20.340]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.317] run() for ‘Future’ ...
[17:02:20.340]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.317] - state: ‘created’
[17:02:20.340]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.317] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.341]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.317] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.341]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.341]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘label’
[17:02:20.341]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘local’
[17:02:20.341]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘owner’
[17:02:20.341]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘envir’
[17:02:20.341]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘packages’
[17:02:20.342]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘gc’
[17:02:20.342]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘conditions’
[17:02:20.342]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.318]   - Field: ‘expr’
[17:02:20.342]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘uuid’
[17:02:20.342]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘seed’
[17:02:20.342]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘version’
[17:02:20.342]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘result’
[17:02:20.342]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘asynchronous’
[17:02:20.343]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘calls’
[17:02:20.343]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘globals’
[17:02:20.343]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘stdout’
[17:02:20.343]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.319]   - Field: ‘earlySignal’
[17:02:20.343]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.320]   - Field: ‘lazy’
[17:02:20.343]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.320]   - Field: ‘state’
[17:02:20.343]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.320] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.344]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.320] - Launch lazy future ...
[17:02:20.344]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.320] Packages needed by the future expression (n = 0): <none>
[17:02:20.344]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.320] Packages needed by future strategies (n = 0): <none>
[17:02:20.344]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.321] {
[17:02:20.321]     {
[17:02:20.321]         {
[17:02:20.321]             ...future.startTime <- base::Sys.time()
[17:02:20.321]             {
[17:02:20.321]                 {
[17:02:20.321]                   {
[17:02:20.321]                     base::local({
[17:02:20.321]                       has_future <- base::requireNamespace("future", 
[17:02:20.321]                         quietly = TRUE)
[17:02:20.321]                       if (has_future) {
[17:02:20.321]                         ns <- base::getNamespace("future")
[17:02:20.321]                         version <- ns[[".package"]][["version"]]
[17:02:20.321]                         if (is.null(version)) 
[17:02:20.321]                           version <- utils::packageVersion("future")
[17:02:20.321]                       }
[17:02:20.321]                       else {
[17:02:20.321]                         version <- NULL
[17:02:20.321]                       }
[17:02:20.321]                       if (!has_future || version < "1.8.0") {
[17:02:20.321]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.321]                           "", base::R.version$version.string), 
[17:02:20.321]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.321]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.321]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.321]                             "release", "version")], collapse = " "), 
[17:02:20.321]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.321]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.321]                           info)
[17:02:20.321]                         info <- base::paste(info, collapse = "; ")
[17:02:20.321]                         if (!has_future) {
[17:02:20.321]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.321]                             info)
[17:02:20.321]                         }
[17:02:20.321]                         else {
[17:02:20.321]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.321]                             info, version)
[17:02:20.321]                         }
[17:02:20.321]                         base::stop(msg)
[17:02:20.321]                       }
[17:02:20.321]                     })
[17:02:20.321]                   }
[17:02:20.321]                   ...future.strategy.old <- future::plan("list")
[17:02:20.321]                   options(future.plan = NULL)
[17:02:20.321]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.321]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.321]                 }
[17:02:20.321]                 ...future.workdir <- getwd()
[17:02:20.321]             }
[17:02:20.321]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.321]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.321]         }
[17:02:20.321]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.321]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.321]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.321]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.321]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.321]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.321]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.321]             base::names(...future.oldOptions))
[17:02:20.321]     }
[17:02:20.321]     if (FALSE) {
[17:02:20.321]     }
[17:02:20.321]     else {
[17:02:20.321]         if (TRUE) {
[17:02:20.321]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.321]                 open = "w")
[17:02:20.321]         }
[17:02:20.321]         else {
[17:02:20.321]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.321]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.321]         }
[17:02:20.321]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.321]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.321]             base::sink(type = "output", split = FALSE)
[17:02:20.321]             base::close(...future.stdout)
[17:02:20.321]         }, add = TRUE)
[17:02:20.321]     }
[17:02:20.321]     ...future.frame <- base::sys.nframe()
[17:02:20.321]     ...future.conditions <- base::list()
[17:02:20.321]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.321]     if (FALSE) {
[17:02:20.321]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.321]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.321]     }
[17:02:20.321]     ...future.result <- base::tryCatch({
[17:02:20.321]         base::withCallingHandlers({
[17:02:20.321]             ...future.value <- base::withVisible(base::local(2))
[17:02:20.321]             future::FutureResult(value = ...future.value$value, 
[17:02:20.321]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.321]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.321]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.321]                     ...future.globalenv.names))
[17:02:20.321]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.321]         }, condition = base::local({
[17:02:20.321]             c <- base::c
[17:02:20.321]             inherits <- base::inherits
[17:02:20.321]             invokeRestart <- base::invokeRestart
[17:02:20.321]             length <- base::length
[17:02:20.321]             list <- base::list
[17:02:20.321]             seq.int <- base::seq.int
[17:02:20.321]             signalCondition <- base::signalCondition
[17:02:20.321]             sys.calls <- base::sys.calls
[17:02:20.321]             `[[` <- base::`[[`
[17:02:20.321]             `+` <- base::`+`
[17:02:20.321]             `<<-` <- base::`<<-`
[17:02:20.321]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.321]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.321]                   3L)]
[17:02:20.321]             }
[17:02:20.321]             function(cond) {
[17:02:20.321]                 is_error <- inherits(cond, "error")
[17:02:20.321]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.321]                   NULL)
[17:02:20.321]                 if (is_error) {
[17:02:20.321]                   sessionInformation <- function() {
[17:02:20.321]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.321]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.321]                       search = base::search(), system = base::Sys.info())
[17:02:20.321]                   }
[17:02:20.321]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.321]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.321]                     cond$call), session = sessionInformation(), 
[17:02:20.321]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.321]                   signalCondition(cond)
[17:02:20.321]                 }
[17:02:20.321]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.321]                 "immediateCondition"))) {
[17:02:20.321]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.321]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.321]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.321]                   if (TRUE && !signal) {
[17:02:20.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.321]                     {
[17:02:20.321]                       inherits <- base::inherits
[17:02:20.321]                       invokeRestart <- base::invokeRestart
[17:02:20.321]                       is.null <- base::is.null
[17:02:20.321]                       muffled <- FALSE
[17:02:20.321]                       if (inherits(cond, "message")) {
[17:02:20.321]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.321]                         if (muffled) 
[17:02:20.321]                           invokeRestart("muffleMessage")
[17:02:20.321]                       }
[17:02:20.321]                       else if (inherits(cond, "warning")) {
[17:02:20.321]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.321]                         if (muffled) 
[17:02:20.321]                           invokeRestart("muffleWarning")
[17:02:20.321]                       }
[17:02:20.321]                       else if (inherits(cond, "condition")) {
[17:02:20.321]                         if (!is.null(pattern)) {
[17:02:20.321]                           computeRestarts <- base::computeRestarts
[17:02:20.321]                           grepl <- base::grepl
[17:02:20.321]                           restarts <- computeRestarts(cond)
[17:02:20.321]                           for (restart in restarts) {
[17:02:20.321]                             name <- restart$name
[17:02:20.321]                             if (is.null(name)) 
[17:02:20.321]                               next
[17:02:20.321]                             if (!grepl(pattern, name)) 
[17:02:20.321]                               next
[17:02:20.321]                             invokeRestart(restart)
[17:02:20.321]                             muffled <- TRUE
[17:02:20.321]                             break
[17:02:20.321]                           }
[17:02:20.321]                         }
[17:02:20.321]                       }
[17:02:20.321]                       invisible(muffled)
[17:02:20.321]                     }
[17:02:20.321]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.321]                   }
[17:02:20.321]                 }
[17:02:20.321]                 else {
[17:02:20.321]                   if (TRUE) {
[17:02:20.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.321]                     {
[17:02:20.321]                       inherits <- base::inherits
[17:02:20.321]                       invokeRestart <- base::invokeRestart
[17:02:20.321]                       is.null <- base::is.null
[17:02:20.321]                       muffled <- FALSE
[17:02:20.321]                       if (inherits(cond, "message")) {
[17:02:20.321]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.321]                         if (muffled) 
[17:02:20.321]                           invokeRestart("muffleMessage")
[17:02:20.321]                       }
[17:02:20.321]                       else if (inherits(cond, "warning")) {
[17:02:20.321]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.321]                         if (muffled) 
[17:02:20.321]                           invokeRestart("muffleWarning")
[17:02:20.321]                       }
[17:02:20.321]                       else if (inherits(cond, "condition")) {
[17:02:20.321]                         if (!is.null(pattern)) {
[17:02:20.321]                           computeRestarts <- base::computeRestarts
[17:02:20.321]                           grepl <- base::grepl
[17:02:20.321]                           restarts <- computeRestarts(cond)
[17:02:20.321]                           for (restart in restarts) {
[17:02:20.321]                             name <- restart$name
[17:02:20.321]                             if (is.null(name)) 
[17:02:20.321]                               next
[17:02:20.321]                             if (!grepl(pattern, name)) 
[17:02:20.321]                               next
[17:02:20.321]                             invokeRestart(restart)
[17:02:20.321]                             muffled <- TRUE
[17:02:20.321]                             break
[17:02:20.321]                           }
[17:02:20.321]                         }
[17:02:20.321]                       }
[17:02:20.321]                       invisible(muffled)
[17:02:20.321]                     }
[17:02:20.321]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.321]                   }
[17:02:20.321]                 }
[17:02:20.321]             }
[17:02:20.321]         }))
[17:02:20.321]     }, error = function(ex) {
[17:02:20.321]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.321]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.321]                 ...future.rng), started = ...future.startTime, 
[17:02:20.321]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.321]             version = "1.8"), class = "FutureResult")
[17:02:20.321]     }, finally = {
[17:02:20.321]         if (!identical(...future.workdir, getwd())) 
[17:02:20.321]             setwd(...future.workdir)
[17:02:20.321]         {
[17:02:20.321]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.321]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.321]             }
[17:02:20.321]             base::options(...future.oldOptions)
[17:02:20.321]             if (.Platform$OS.type == "windows") {
[17:02:20.321]                 old_names <- names(...future.oldEnvVars)
[17:02:20.321]                 envs <- base::Sys.getenv()
[17:02:20.321]                 names <- names(envs)
[17:02:20.321]                 common <- intersect(names, old_names)
[17:02:20.321]                 added <- setdiff(names, old_names)
[17:02:20.321]                 removed <- setdiff(old_names, names)
[17:02:20.321]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.321]                   envs[common]]
[17:02:20.321]                 NAMES <- toupper(changed)
[17:02:20.321]                 args <- list()
[17:02:20.321]                 for (kk in seq_along(NAMES)) {
[17:02:20.321]                   name <- changed[[kk]]
[17:02:20.321]                   NAME <- NAMES[[kk]]
[17:02:20.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.321]                     next
[17:02:20.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.321]                 }
[17:02:20.321]                 NAMES <- toupper(added)
[17:02:20.321]                 for (kk in seq_along(NAMES)) {
[17:02:20.321]                   name <- added[[kk]]
[17:02:20.321]                   NAME <- NAMES[[kk]]
[17:02:20.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.321]                     next
[17:02:20.321]                   args[[name]] <- ""
[17:02:20.321]                 }
[17:02:20.321]                 NAMES <- toupper(removed)
[17:02:20.321]                 for (kk in seq_along(NAMES)) {
[17:02:20.321]                   name <- removed[[kk]]
[17:02:20.321]                   NAME <- NAMES[[kk]]
[17:02:20.321]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.321]                     next
[17:02:20.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.321]                 }
[17:02:20.321]                 if (length(args) > 0) 
[17:02:20.321]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.321]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.321]             }
[17:02:20.321]             else {
[17:02:20.321]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.321]             }
[17:02:20.321]             {
[17:02:20.321]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.321]                   0L) {
[17:02:20.321]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.321]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.321]                   base::options(opts)
[17:02:20.321]                 }
[17:02:20.321]                 {
[17:02:20.321]                   {
[17:02:20.321]                     NULL
[17:02:20.321]                     RNGkind("Mersenne-Twister")
[17:02:20.321]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.321]                       inherits = FALSE)
[17:02:20.321]                   }
[17:02:20.321]                   options(future.plan = NULL)
[17:02:20.321]                   if (is.na(NA_character_)) 
[17:02:20.321]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.321]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.321]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.321]                     .init = FALSE)
[17:02:20.321]                 }
[17:02:20.321]             }
[17:02:20.321]         }
[17:02:20.321]     })
[17:02:20.321]     if (TRUE) {
[17:02:20.321]         base::sink(type = "output", split = FALSE)
[17:02:20.321]         if (TRUE) {
[17:02:20.321]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.321]         }
[17:02:20.321]         else {
[17:02:20.321]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.321]         }
[17:02:20.321]         base::close(...future.stdout)
[17:02:20.321]         ...future.stdout <- NULL
[17:02:20.321]     }
[17:02:20.321]     ...future.result$conditions <- ...future.conditions
[17:02:20.321]     ...future.result$finished <- base::Sys.time()
[17:02:20.321]     ...future.result
[17:02:20.321] }
[17:02:20.344]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.322] plan(): Setting new future strategy stack:
[17:02:20.344]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.323] List of future strategies:
[17:02:20.323] 1. sequential:
[17:02:20.323]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.323]    - tweaked: FALSE
[17:02:20.323]    - call: NULL
[17:02:20.344]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.323] plan(): nbrOfWorkers() = 1
[17:02:20.344]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.324] plan(): Setting new future strategy stack:
[17:02:20.345]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.324] List of future strategies:
[17:02:20.324] 1. sequential:
[17:02:20.324]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.324]    - tweaked: FALSE
[17:02:20.324]    - call: NULL
[17:02:20.345]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.325] plan(): nbrOfWorkers() = 1
[17:02:20.345]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.325] SequentialFuture started (and completed)
[17:02:20.345]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.325] - Launch lazy future ... done
[17:02:20.345]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.325] run() for ‘SequentialFuture’ ... done
[17:02:20.345]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.325] getGlobalsAndPackages() ...
[17:02:20.345]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.325] Searching for globals...
[17:02:20.346]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.326] 
[17:02:20.346]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.326] Searching for globals ... DONE
[17:02:20.346]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.326] - globals: [0] <none>
[17:02:20.346]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.326] getGlobalsAndPackages() ... DONE
[17:02:20.346]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.326] run() for ‘Future’ ...
[17:02:20.346]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.326] - state: ‘created’
[17:02:20.346]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.346]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.347]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.347]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327]   - Field: ‘label’
[17:02:20.347]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327]   - Field: ‘local’
[17:02:20.347]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327]   - Field: ‘owner’
[17:02:20.347]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.327]   - Field: ‘envir’
[17:02:20.347]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘packages’
[17:02:20.347]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘gc’
[17:02:20.347]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘conditions’
[17:02:20.348]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘expr’
[17:02:20.348]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘uuid’
[17:02:20.348]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘seed’
[17:02:20.348]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘version’
[17:02:20.348]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘result’
[17:02:20.348]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘asynchronous’
[17:02:20.348]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.328]   - Field: ‘calls’
[17:02:20.348]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329]   - Field: ‘globals’
[17:02:20.349]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329]   - Field: ‘stdout’
[17:02:20.349]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329]   - Field: ‘earlySignal’
[17:02:20.349]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329]   - Field: ‘lazy’
[17:02:20.349]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329]   - Field: ‘state’
[17:02:20.349]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.349]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329] - Launch lazy future ...
[17:02:20.349]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329] Packages needed by the future expression (n = 0): <none>
[17:02:20.349]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.329] Packages needed by future strategies (n = 0): <none>
[17:02:20.350]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.330] {
[17:02:20.330]     {
[17:02:20.330]         {
[17:02:20.330]             ...future.startTime <- base::Sys.time()
[17:02:20.330]             {
[17:02:20.330]                 {
[17:02:20.330]                   {
[17:02:20.330]                     base::local({
[17:02:20.330]                       has_future <- base::requireNamespace("future", 
[17:02:20.330]                         quietly = TRUE)
[17:02:20.330]                       if (has_future) {
[17:02:20.330]                         ns <- base::getNamespace("future")
[17:02:20.330]                         version <- ns[[".package"]][["version"]]
[17:02:20.330]                         if (is.null(version)) 
[17:02:20.330]                           version <- utils::packageVersion("future")
[17:02:20.330]                       }
[17:02:20.330]                       else {
[17:02:20.330]                         version <- NULL
[17:02:20.330]                       }
[17:02:20.330]                       if (!has_future || version < "1.8.0") {
[17:02:20.330]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.330]                           "", base::R.version$version.string), 
[17:02:20.330]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.330]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.330]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.330]                             "release", "version")], collapse = " "), 
[17:02:20.330]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.330]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.330]                           info)
[17:02:20.330]                         info <- base::paste(info, collapse = "; ")
[17:02:20.330]                         if (!has_future) {
[17:02:20.330]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.330]                             info)
[17:02:20.330]                         }
[17:02:20.330]                         else {
[17:02:20.330]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.330]                             info, version)
[17:02:20.330]                         }
[17:02:20.330]                         base::stop(msg)
[17:02:20.330]                       }
[17:02:20.330]                     })
[17:02:20.330]                   }
[17:02:20.330]                   ...future.strategy.old <- future::plan("list")
[17:02:20.330]                   options(future.plan = NULL)
[17:02:20.330]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.330]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.330]                 }
[17:02:20.330]                 ...future.workdir <- getwd()
[17:02:20.330]             }
[17:02:20.330]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.330]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.330]         }
[17:02:20.330]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.330]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.330]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.330]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.330]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.330]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.330]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.330]             base::names(...future.oldOptions))
[17:02:20.330]     }
[17:02:20.330]     if (FALSE) {
[17:02:20.330]     }
[17:02:20.330]     else {
[17:02:20.330]         if (TRUE) {
[17:02:20.330]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.330]                 open = "w")
[17:02:20.330]         }
[17:02:20.330]         else {
[17:02:20.330]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.330]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.330]         }
[17:02:20.330]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.330]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.330]             base::sink(type = "output", split = FALSE)
[17:02:20.330]             base::close(...future.stdout)
[17:02:20.330]         }, add = TRUE)
[17:02:20.330]     }
[17:02:20.330]     ...future.frame <- base::sys.nframe()
[17:02:20.330]     ...future.conditions <- base::list()
[17:02:20.330]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.330]     if (FALSE) {
[17:02:20.330]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.330]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.330]     }
[17:02:20.330]     ...future.result <- base::tryCatch({
[17:02:20.330]         base::withCallingHandlers({
[17:02:20.330]             ...future.value <- base::withVisible(base::local(4))
[17:02:20.330]             future::FutureResult(value = ...future.value$value, 
[17:02:20.330]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.330]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.330]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.330]                     ...future.globalenv.names))
[17:02:20.330]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.330]         }, condition = base::local({
[17:02:20.330]             c <- base::c
[17:02:20.330]             inherits <- base::inherits
[17:02:20.330]             invokeRestart <- base::invokeRestart
[17:02:20.330]             length <- base::length
[17:02:20.330]             list <- base::list
[17:02:20.330]             seq.int <- base::seq.int
[17:02:20.330]             signalCondition <- base::signalCondition
[17:02:20.330]             sys.calls <- base::sys.calls
[17:02:20.330]             `[[` <- base::`[[`
[17:02:20.330]             `+` <- base::`+`
[17:02:20.330]             `<<-` <- base::`<<-`
[17:02:20.330]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.330]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.330]                   3L)]
[17:02:20.330]             }
[17:02:20.330]             function(cond) {
[17:02:20.330]                 is_error <- inherits(cond, "error")
[17:02:20.330]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.330]                   NULL)
[17:02:20.330]                 if (is_error) {
[17:02:20.330]                   sessionInformation <- function() {
[17:02:20.330]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.330]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.330]                       search = base::search(), system = base::Sys.info())
[17:02:20.330]                   }
[17:02:20.330]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.330]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.330]                     cond$call), session = sessionInformation(), 
[17:02:20.330]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.330]                   signalCondition(cond)
[17:02:20.330]                 }
[17:02:20.330]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.330]                 "immediateCondition"))) {
[17:02:20.330]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.330]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.330]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.330]                   if (TRUE && !signal) {
[17:02:20.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.330]                     {
[17:02:20.330]                       inherits <- base::inherits
[17:02:20.330]                       invokeRestart <- base::invokeRestart
[17:02:20.330]                       is.null <- base::is.null
[17:02:20.330]                       muffled <- FALSE
[17:02:20.330]                       if (inherits(cond, "message")) {
[17:02:20.330]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.330]                         if (muffled) 
[17:02:20.330]                           invokeRestart("muffleMessage")
[17:02:20.330]                       }
[17:02:20.330]                       else if (inherits(cond, "warning")) {
[17:02:20.330]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.330]                         if (muffled) 
[17:02:20.330]                           invokeRestart("muffleWarning")
[17:02:20.330]                       }
[17:02:20.330]                       else if (inherits(cond, "condition")) {
[17:02:20.330]                         if (!is.null(pattern)) {
[17:02:20.330]                           computeRestarts <- base::computeRestarts
[17:02:20.330]                           grepl <- base::grepl
[17:02:20.330]                           restarts <- computeRestarts(cond)
[17:02:20.330]                           for (restart in restarts) {
[17:02:20.330]                             name <- restart$name
[17:02:20.330]                             if (is.null(name)) 
[17:02:20.330]                               next
[17:02:20.330]                             if (!grepl(pattern, name)) 
[17:02:20.330]                               next
[17:02:20.330]                             invokeRestart(restart)
[17:02:20.330]                             muffled <- TRUE
[17:02:20.330]                             break
[17:02:20.330]                           }
[17:02:20.330]                         }
[17:02:20.330]                       }
[17:02:20.330]                       invisible(muffled)
[17:02:20.330]                     }
[17:02:20.330]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.330]                   }
[17:02:20.330]                 }
[17:02:20.330]                 else {
[17:02:20.330]                   if (TRUE) {
[17:02:20.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.330]                     {
[17:02:20.330]                       inherits <- base::inherits
[17:02:20.330]                       invokeRestart <- base::invokeRestart
[17:02:20.330]                       is.null <- base::is.null
[17:02:20.330]                       muffled <- FALSE
[17:02:20.330]                       if (inherits(cond, "message")) {
[17:02:20.330]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.330]                         if (muffled) 
[17:02:20.330]                           invokeRestart("muffleMessage")
[17:02:20.330]                       }
[17:02:20.330]                       else if (inherits(cond, "warning")) {
[17:02:20.330]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.330]                         if (muffled) 
[17:02:20.330]                           invokeRestart("muffleWarning")
[17:02:20.330]                       }
[17:02:20.330]                       else if (inherits(cond, "condition")) {
[17:02:20.330]                         if (!is.null(pattern)) {
[17:02:20.330]                           computeRestarts <- base::computeRestarts
[17:02:20.330]                           grepl <- base::grepl
[17:02:20.330]                           restarts <- computeRestarts(cond)
[17:02:20.330]                           for (restart in restarts) {
[17:02:20.330]                             name <- restart$name
[17:02:20.330]                             if (is.null(name)) 
[17:02:20.330]                               next
[17:02:20.330]                             if (!grepl(pattern, name)) 
[17:02:20.330]                               next
[17:02:20.330]                             invokeRestart(restart)
[17:02:20.330]                             muffled <- TRUE
[17:02:20.330]                             break
[17:02:20.330]                           }
[17:02:20.330]                         }
[17:02:20.330]                       }
[17:02:20.330]                       invisible(muffled)
[17:02:20.330]                     }
[17:02:20.330]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.330]                   }
[17:02:20.330]                 }
[17:02:20.330]             }
[17:02:20.330]         }))
[17:02:20.330]     }, error = function(ex) {
[17:02:20.330]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.330]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.330]                 ...future.rng), started = ...future.startTime, 
[17:02:20.330]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.330]             version = "1.8"), class = "FutureResult")
[17:02:20.330]     }, finally = {
[17:02:20.330]         if (!identical(...future.workdir, getwd())) 
[17:02:20.330]             setwd(...future.workdir)
[17:02:20.330]         {
[17:02:20.330]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.330]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.330]             }
[17:02:20.330]             base::options(...future.oldOptions)
[17:02:20.330]             if (.Platform$OS.type == "windows") {
[17:02:20.330]                 old_names <- names(...future.oldEnvVars)
[17:02:20.330]                 envs <- base::Sys.getenv()
[17:02:20.330]                 names <- names(envs)
[17:02:20.330]                 common <- intersect(names, old_names)
[17:02:20.330]                 added <- setdiff(names, old_names)
[17:02:20.330]                 removed <- setdiff(old_names, names)
[17:02:20.330]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.330]                   envs[common]]
[17:02:20.330]                 NAMES <- toupper(changed)
[17:02:20.330]                 args <- list()
[17:02:20.330]                 for (kk in seq_along(NAMES)) {
[17:02:20.330]                   name <- changed[[kk]]
[17:02:20.330]                   NAME <- NAMES[[kk]]
[17:02:20.330]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.330]                     next
[17:02:20.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.330]                 }
[17:02:20.330]                 NAMES <- toupper(added)
[17:02:20.330]                 for (kk in seq_along(NAMES)) {
[17:02:20.330]                   name <- added[[kk]]
[17:02:20.330]                   NAME <- NAMES[[kk]]
[17:02:20.330]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.330]                     next
[17:02:20.330]                   args[[name]] <- ""
[17:02:20.330]                 }
[17:02:20.330]                 NAMES <- toupper(removed)
[17:02:20.330]                 for (kk in seq_along(NAMES)) {
[17:02:20.330]                   name <- removed[[kk]]
[17:02:20.330]                   NAME <- NAMES[[kk]]
[17:02:20.330]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.330]                     next
[17:02:20.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.330]                 }
[17:02:20.330]                 if (length(args) > 0) 
[17:02:20.330]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.330]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.330]             }
[17:02:20.330]             else {
[17:02:20.330]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.330]             }
[17:02:20.330]             {
[17:02:20.330]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.330]                   0L) {
[17:02:20.330]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.330]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.330]                   base::options(opts)
[17:02:20.330]                 }
[17:02:20.330]                 {
[17:02:20.330]                   {
[17:02:20.330]                     NULL
[17:02:20.330]                     RNGkind("Mersenne-Twister")
[17:02:20.330]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.330]                       inherits = FALSE)
[17:02:20.330]                   }
[17:02:20.330]                   options(future.plan = NULL)
[17:02:20.330]                   if (is.na(NA_character_)) 
[17:02:20.330]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.330]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.330]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.330]                     .init = FALSE)
[17:02:20.330]                 }
[17:02:20.330]             }
[17:02:20.330]         }
[17:02:20.330]     })
[17:02:20.330]     if (TRUE) {
[17:02:20.330]         base::sink(type = "output", split = FALSE)
[17:02:20.330]         if (TRUE) {
[17:02:20.330]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.330]         }
[17:02:20.330]         else {
[17:02:20.330]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.330]         }
[17:02:20.330]         base::close(...future.stdout)
[17:02:20.330]         ...future.stdout <- NULL
[17:02:20.330]     }
[17:02:20.330]     ...future.result$conditions <- ...future.conditions
[17:02:20.330]     ...future.result$finished <- base::Sys.time()
[17:02:20.330]     ...future.result
[17:02:20.330] }
[17:02:20.350]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.332] plan(): Setting new future strategy stack:
[17:02:20.350]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.332] List of future strategies:
[17:02:20.332] 1. sequential:
[17:02:20.332]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.332]    - tweaked: FALSE
[17:02:20.332]    - call: NULL
[17:02:20.350]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.332] plan(): nbrOfWorkers() = 1
[17:02:20.350]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.333] plan(): Setting new future strategy stack:
[17:02:20.350]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.333] List of future strategies:
[17:02:20.333] 1. sequential:
[17:02:20.333]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.333]    - tweaked: FALSE
[17:02:20.333]    - call: NULL
[17:02:20.350]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.333] plan(): nbrOfWorkers() = 1
[17:02:20.350]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.334] SequentialFuture started (and completed)
[17:02:20.351]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.334] - Launch lazy future ... done
[17:02:20.351]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.334] run() for ‘SequentialFuture’ ... done
[17:02:20.351] signalConditions() ... done
a = 10
[17:02:20.351] getGlobalsAndPackages() ...
[17:02:20.351] Searching for globals...
[17:02:20.352] - globals found: [3] ‘{’, ‘+’, ‘a’
[17:02:20.352] Searching for globals ... DONE
[17:02:20.352] Resolving globals: FALSE
[17:02:20.353] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.353] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:20.353] - globals: [1] ‘a’
[17:02:20.353] 
[17:02:20.353] getGlobalsAndPackages() ... DONE
[17:02:20.354] run() for ‘Future’ ...
[17:02:20.354] - state: ‘created’
[17:02:20.354] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.354] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.354] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.354]   - Field: ‘label’
[17:02:20.354]   - Field: ‘local’
[17:02:20.354]   - Field: ‘owner’
[17:02:20.355]   - Field: ‘envir’
[17:02:20.355]   - Field: ‘packages’
[17:02:20.355]   - Field: ‘gc’
[17:02:20.355]   - Field: ‘conditions’
[17:02:20.355]   - Field: ‘expr’
[17:02:20.355]   - Field: ‘uuid’
[17:02:20.355]   - Field: ‘seed’
[17:02:20.355]   - Field: ‘version’
[17:02:20.355]   - Field: ‘result’
[17:02:20.355]   - Field: ‘asynchronous’
[17:02:20.355]   - Field: ‘calls’
[17:02:20.356]   - Field: ‘globals’
[17:02:20.356]   - Field: ‘stdout’
[17:02:20.356]   - Field: ‘earlySignal’
[17:02:20.356]   - Field: ‘lazy’
[17:02:20.356]   - Field: ‘state’
[17:02:20.356] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.356] - Launch lazy future ...
[17:02:20.356] Packages needed by the future expression (n = 0): <none>
[17:02:20.356] Packages needed by future strategies (n = 0): <none>
[17:02:20.357] {
[17:02:20.357]     {
[17:02:20.357]         {
[17:02:20.357]             ...future.startTime <- base::Sys.time()
[17:02:20.357]             {
[17:02:20.357]                 {
[17:02:20.357]                   {
[17:02:20.357]                     base::local({
[17:02:20.357]                       has_future <- base::requireNamespace("future", 
[17:02:20.357]                         quietly = TRUE)
[17:02:20.357]                       if (has_future) {
[17:02:20.357]                         ns <- base::getNamespace("future")
[17:02:20.357]                         version <- ns[[".package"]][["version"]]
[17:02:20.357]                         if (is.null(version)) 
[17:02:20.357]                           version <- utils::packageVersion("future")
[17:02:20.357]                       }
[17:02:20.357]                       else {
[17:02:20.357]                         version <- NULL
[17:02:20.357]                       }
[17:02:20.357]                       if (!has_future || version < "1.8.0") {
[17:02:20.357]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.357]                           "", base::R.version$version.string), 
[17:02:20.357]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.357]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.357]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.357]                             "release", "version")], collapse = " "), 
[17:02:20.357]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.357]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.357]                           info)
[17:02:20.357]                         info <- base::paste(info, collapse = "; ")
[17:02:20.357]                         if (!has_future) {
[17:02:20.357]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.357]                             info)
[17:02:20.357]                         }
[17:02:20.357]                         else {
[17:02:20.357]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.357]                             info, version)
[17:02:20.357]                         }
[17:02:20.357]                         base::stop(msg)
[17:02:20.357]                       }
[17:02:20.357]                     })
[17:02:20.357]                   }
[17:02:20.357]                   ...future.strategy.old <- future::plan("list")
[17:02:20.357]                   options(future.plan = NULL)
[17:02:20.357]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.357]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.357]                 }
[17:02:20.357]                 ...future.workdir <- getwd()
[17:02:20.357]             }
[17:02:20.357]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.357]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.357]         }
[17:02:20.357]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.357]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.357]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.357]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.357]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.357]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.357]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.357]             base::names(...future.oldOptions))
[17:02:20.357]     }
[17:02:20.357]     if (FALSE) {
[17:02:20.357]     }
[17:02:20.357]     else {
[17:02:20.357]         if (TRUE) {
[17:02:20.357]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.357]                 open = "w")
[17:02:20.357]         }
[17:02:20.357]         else {
[17:02:20.357]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.357]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.357]         }
[17:02:20.357]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.357]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.357]             base::sink(type = "output", split = FALSE)
[17:02:20.357]             base::close(...future.stdout)
[17:02:20.357]         }, add = TRUE)
[17:02:20.357]     }
[17:02:20.357]     ...future.frame <- base::sys.nframe()
[17:02:20.357]     ...future.conditions <- base::list()
[17:02:20.357]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.357]     if (FALSE) {
[17:02:20.357]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.357]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.357]     }
[17:02:20.357]     ...future.result <- base::tryCatch({
[17:02:20.357]         base::withCallingHandlers({
[17:02:20.357]             ...future.value <- base::withVisible(base::local({
[17:02:20.357]                 a + 1
[17:02:20.357]             }))
[17:02:20.357]             future::FutureResult(value = ...future.value$value, 
[17:02:20.357]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.357]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.357]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.357]                     ...future.globalenv.names))
[17:02:20.357]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.357]         }, condition = base::local({
[17:02:20.357]             c <- base::c
[17:02:20.357]             inherits <- base::inherits
[17:02:20.357]             invokeRestart <- base::invokeRestart
[17:02:20.357]             length <- base::length
[17:02:20.357]             list <- base::list
[17:02:20.357]             seq.int <- base::seq.int
[17:02:20.357]             signalCondition <- base::signalCondition
[17:02:20.357]             sys.calls <- base::sys.calls
[17:02:20.357]             `[[` <- base::`[[`
[17:02:20.357]             `+` <- base::`+`
[17:02:20.357]             `<<-` <- base::`<<-`
[17:02:20.357]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.357]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.357]                   3L)]
[17:02:20.357]             }
[17:02:20.357]             function(cond) {
[17:02:20.357]                 is_error <- inherits(cond, "error")
[17:02:20.357]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.357]                   NULL)
[17:02:20.357]                 if (is_error) {
[17:02:20.357]                   sessionInformation <- function() {
[17:02:20.357]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.357]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.357]                       search = base::search(), system = base::Sys.info())
[17:02:20.357]                   }
[17:02:20.357]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.357]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.357]                     cond$call), session = sessionInformation(), 
[17:02:20.357]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.357]                   signalCondition(cond)
[17:02:20.357]                 }
[17:02:20.357]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.357]                 "immediateCondition"))) {
[17:02:20.357]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.357]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.357]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.357]                   if (TRUE && !signal) {
[17:02:20.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.357]                     {
[17:02:20.357]                       inherits <- base::inherits
[17:02:20.357]                       invokeRestart <- base::invokeRestart
[17:02:20.357]                       is.null <- base::is.null
[17:02:20.357]                       muffled <- FALSE
[17:02:20.357]                       if (inherits(cond, "message")) {
[17:02:20.357]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.357]                         if (muffled) 
[17:02:20.357]                           invokeRestart("muffleMessage")
[17:02:20.357]                       }
[17:02:20.357]                       else if (inherits(cond, "warning")) {
[17:02:20.357]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.357]                         if (muffled) 
[17:02:20.357]                           invokeRestart("muffleWarning")
[17:02:20.357]                       }
[17:02:20.357]                       else if (inherits(cond, "condition")) {
[17:02:20.357]                         if (!is.null(pattern)) {
[17:02:20.357]                           computeRestarts <- base::computeRestarts
[17:02:20.357]                           grepl <- base::grepl
[17:02:20.357]                           restarts <- computeRestarts(cond)
[17:02:20.357]                           for (restart in restarts) {
[17:02:20.357]                             name <- restart$name
[17:02:20.357]                             if (is.null(name)) 
[17:02:20.357]                               next
[17:02:20.357]                             if (!grepl(pattern, name)) 
[17:02:20.357]                               next
[17:02:20.357]                             invokeRestart(restart)
[17:02:20.357]                             muffled <- TRUE
[17:02:20.357]                             break
[17:02:20.357]                           }
[17:02:20.357]                         }
[17:02:20.357]                       }
[17:02:20.357]                       invisible(muffled)
[17:02:20.357]                     }
[17:02:20.357]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.357]                   }
[17:02:20.357]                 }
[17:02:20.357]                 else {
[17:02:20.357]                   if (TRUE) {
[17:02:20.357]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.357]                     {
[17:02:20.357]                       inherits <- base::inherits
[17:02:20.357]                       invokeRestart <- base::invokeRestart
[17:02:20.357]                       is.null <- base::is.null
[17:02:20.357]                       muffled <- FALSE
[17:02:20.357]                       if (inherits(cond, "message")) {
[17:02:20.357]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.357]                         if (muffled) 
[17:02:20.357]                           invokeRestart("muffleMessage")
[17:02:20.357]                       }
[17:02:20.357]                       else if (inherits(cond, "warning")) {
[17:02:20.357]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.357]                         if (muffled) 
[17:02:20.357]                           invokeRestart("muffleWarning")
[17:02:20.357]                       }
[17:02:20.357]                       else if (inherits(cond, "condition")) {
[17:02:20.357]                         if (!is.null(pattern)) {
[17:02:20.357]                           computeRestarts <- base::computeRestarts
[17:02:20.357]                           grepl <- base::grepl
[17:02:20.357]                           restarts <- computeRestarts(cond)
[17:02:20.357]                           for (restart in restarts) {
[17:02:20.357]                             name <- restart$name
[17:02:20.357]                             if (is.null(name)) 
[17:02:20.357]                               next
[17:02:20.357]                             if (!grepl(pattern, name)) 
[17:02:20.357]                               next
[17:02:20.357]                             invokeRestart(restart)
[17:02:20.357]                             muffled <- TRUE
[17:02:20.357]                             break
[17:02:20.357]                           }
[17:02:20.357]                         }
[17:02:20.357]                       }
[17:02:20.357]                       invisible(muffled)
[17:02:20.357]                     }
[17:02:20.357]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.357]                   }
[17:02:20.357]                 }
[17:02:20.357]             }
[17:02:20.357]         }))
[17:02:20.357]     }, error = function(ex) {
[17:02:20.357]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.357]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.357]                 ...future.rng), started = ...future.startTime, 
[17:02:20.357]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.357]             version = "1.8"), class = "FutureResult")
[17:02:20.357]     }, finally = {
[17:02:20.357]         if (!identical(...future.workdir, getwd())) 
[17:02:20.357]             setwd(...future.workdir)
[17:02:20.357]         {
[17:02:20.357]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.357]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.357]             }
[17:02:20.357]             base::options(...future.oldOptions)
[17:02:20.357]             if (.Platform$OS.type == "windows") {
[17:02:20.357]                 old_names <- names(...future.oldEnvVars)
[17:02:20.357]                 envs <- base::Sys.getenv()
[17:02:20.357]                 names <- names(envs)
[17:02:20.357]                 common <- intersect(names, old_names)
[17:02:20.357]                 added <- setdiff(names, old_names)
[17:02:20.357]                 removed <- setdiff(old_names, names)
[17:02:20.357]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.357]                   envs[common]]
[17:02:20.357]                 NAMES <- toupper(changed)
[17:02:20.357]                 args <- list()
[17:02:20.357]                 for (kk in seq_along(NAMES)) {
[17:02:20.357]                   name <- changed[[kk]]
[17:02:20.357]                   NAME <- NAMES[[kk]]
[17:02:20.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.357]                     next
[17:02:20.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.357]                 }
[17:02:20.357]                 NAMES <- toupper(added)
[17:02:20.357]                 for (kk in seq_along(NAMES)) {
[17:02:20.357]                   name <- added[[kk]]
[17:02:20.357]                   NAME <- NAMES[[kk]]
[17:02:20.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.357]                     next
[17:02:20.357]                   args[[name]] <- ""
[17:02:20.357]                 }
[17:02:20.357]                 NAMES <- toupper(removed)
[17:02:20.357]                 for (kk in seq_along(NAMES)) {
[17:02:20.357]                   name <- removed[[kk]]
[17:02:20.357]                   NAME <- NAMES[[kk]]
[17:02:20.357]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.357]                     next
[17:02:20.357]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.357]                 }
[17:02:20.357]                 if (length(args) > 0) 
[17:02:20.357]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.357]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.357]             }
[17:02:20.357]             else {
[17:02:20.357]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.357]             }
[17:02:20.357]             {
[17:02:20.357]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.357]                   0L) {
[17:02:20.357]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.357]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.357]                   base::options(opts)
[17:02:20.357]                 }
[17:02:20.357]                 {
[17:02:20.357]                   {
[17:02:20.357]                     NULL
[17:02:20.357]                     RNGkind("Mersenne-Twister")
[17:02:20.357]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.357]                       inherits = FALSE)
[17:02:20.357]                   }
[17:02:20.357]                   options(future.plan = NULL)
[17:02:20.357]                   if (is.na(NA_character_)) 
[17:02:20.357]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.357]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.357]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.357]                     .init = FALSE)
[17:02:20.357]                 }
[17:02:20.357]             }
[17:02:20.357]         }
[17:02:20.357]     })
[17:02:20.357]     if (TRUE) {
[17:02:20.357]         base::sink(type = "output", split = FALSE)
[17:02:20.357]         if (TRUE) {
[17:02:20.357]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.357]         }
[17:02:20.357]         else {
[17:02:20.357]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.357]         }
[17:02:20.357]         base::close(...future.stdout)
[17:02:20.357]         ...future.stdout <- NULL
[17:02:20.357]     }
[17:02:20.357]     ...future.result$conditions <- ...future.conditions
[17:02:20.357]     ...future.result$finished <- base::Sys.time()
[17:02:20.357]     ...future.result
[17:02:20.357] }
[17:02:20.358] assign_globals() ...
[17:02:20.358] List of 1
[17:02:20.358]  $ a: num 10
[17:02:20.358]  - attr(*, "where")=List of 1
[17:02:20.358]   ..$ a:<environment: R_EmptyEnv> 
[17:02:20.358]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.358]  - attr(*, "resolved")= logi FALSE
[17:02:20.358]  - attr(*, "total_size")= num 56
[17:02:20.358]  - attr(*, "already-done")= logi TRUE
[17:02:20.361] - copied ‘a’ to environment
[17:02:20.361] assign_globals() ... done
[17:02:20.361] plan(): Setting new future strategy stack:
[17:02:20.361] List of future strategies:
[17:02:20.361] 1. sequential:
[17:02:20.361]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.361]    - tweaked: FALSE
[17:02:20.361]    - call: NULL
[17:02:20.362] plan(): nbrOfWorkers() = 1
[17:02:20.362] plan(): Setting new future strategy stack:
[17:02:20.362] List of future strategies:
[17:02:20.362] 1. sequential:
[17:02:20.362]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.362]    - tweaked: FALSE
[17:02:20.362]    - call: plan(strategy)
[17:02:20.363] plan(): nbrOfWorkers() = 1
[17:02:20.363] SequentialFuture started (and completed)
[17:02:20.363] - Launch lazy future ... done
[17:02:20.365] run() for ‘SequentialFuture’ ... done
b = 11
*** %<-% with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** %<-% with ‘multicore’ futures ...
[17:02:20.370] plan(): Setting new future strategy stack:
[17:02:20.370] List of future strategies:
[17:02:20.370] 1. multicore:
[17:02:20.370]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.370]    - tweaked: FALSE
[17:02:20.370]    - call: plan(strategy)
[17:02:20.374] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[17:02:20.375] getGlobalsAndPackages() ...
[17:02:20.375] Searching for globals...
[17:02:20.376] - globals found: [2] ‘{’, ‘<-’
[17:02:20.376] Searching for globals ... DONE
[17:02:20.376] Resolving globals: FALSE
[17:02:20.376] 
[17:02:20.376] 
[17:02:20.376] getGlobalsAndPackages() ... DONE
[17:02:20.377] run() for ‘Future’ ...
[17:02:20.377] - state: ‘created’
[17:02:20.377] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.380] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.381] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.381]   - Field: ‘label’
[17:02:20.381]   - Field: ‘local’
[17:02:20.381]   - Field: ‘owner’
[17:02:20.381]   - Field: ‘envir’
[17:02:20.381]   - Field: ‘workers’
[17:02:20.381]   - Field: ‘packages’
[17:02:20.381]   - Field: ‘gc’
[17:02:20.381]   - Field: ‘job’
[17:02:20.381]   - Field: ‘conditions’
[17:02:20.381]   - Field: ‘expr’
[17:02:20.382]   - Field: ‘uuid’
[17:02:20.382]   - Field: ‘seed’
[17:02:20.382]   - Field: ‘version’
[17:02:20.382]   - Field: ‘result’
[17:02:20.382]   - Field: ‘asynchronous’
[17:02:20.382]   - Field: ‘calls’
[17:02:20.382]   - Field: ‘globals’
[17:02:20.382]   - Field: ‘stdout’
[17:02:20.382]   - Field: ‘earlySignal’
[17:02:20.382]   - Field: ‘lazy’
[17:02:20.382]   - Field: ‘state’
[17:02:20.383] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.383] - Launch lazy future ...
[17:02:20.384] Packages needed by the future expression (n = 0): <none>
[17:02:20.384] Packages needed by future strategies (n = 0): <none>
[17:02:20.384] {
[17:02:20.384]     {
[17:02:20.384]         {
[17:02:20.384]             ...future.startTime <- base::Sys.time()
[17:02:20.384]             {
[17:02:20.384]                 {
[17:02:20.384]                   {
[17:02:20.384]                     {
[17:02:20.384]                       base::local({
[17:02:20.384]                         has_future <- base::requireNamespace("future", 
[17:02:20.384]                           quietly = TRUE)
[17:02:20.384]                         if (has_future) {
[17:02:20.384]                           ns <- base::getNamespace("future")
[17:02:20.384]                           version <- ns[[".package"]][["version"]]
[17:02:20.384]                           if (is.null(version)) 
[17:02:20.384]                             version <- utils::packageVersion("future")
[17:02:20.384]                         }
[17:02:20.384]                         else {
[17:02:20.384]                           version <- NULL
[17:02:20.384]                         }
[17:02:20.384]                         if (!has_future || version < "1.8.0") {
[17:02:20.384]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.384]                             "", base::R.version$version.string), 
[17:02:20.384]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.384]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.384]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.384]                               "release", "version")], collapse = " "), 
[17:02:20.384]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.384]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.384]                             info)
[17:02:20.384]                           info <- base::paste(info, collapse = "; ")
[17:02:20.384]                           if (!has_future) {
[17:02:20.384]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.384]                               info)
[17:02:20.384]                           }
[17:02:20.384]                           else {
[17:02:20.384]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.384]                               info, version)
[17:02:20.384]                           }
[17:02:20.384]                           base::stop(msg)
[17:02:20.384]                         }
[17:02:20.384]                       })
[17:02:20.384]                     }
[17:02:20.384]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.384]                     base::options(mc.cores = 1L)
[17:02:20.384]                   }
[17:02:20.384]                   ...future.strategy.old <- future::plan("list")
[17:02:20.384]                   options(future.plan = NULL)
[17:02:20.384]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.384]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.384]                 }
[17:02:20.384]                 ...future.workdir <- getwd()
[17:02:20.384]             }
[17:02:20.384]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.384]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.384]         }
[17:02:20.384]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.384]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.384]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.384]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.384]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.384]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.384]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.384]             base::names(...future.oldOptions))
[17:02:20.384]     }
[17:02:20.384]     if (FALSE) {
[17:02:20.384]     }
[17:02:20.384]     else {
[17:02:20.384]         if (TRUE) {
[17:02:20.384]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.384]                 open = "w")
[17:02:20.384]         }
[17:02:20.384]         else {
[17:02:20.384]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.384]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.384]         }
[17:02:20.384]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.384]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.384]             base::sink(type = "output", split = FALSE)
[17:02:20.384]             base::close(...future.stdout)
[17:02:20.384]         }, add = TRUE)
[17:02:20.384]     }
[17:02:20.384]     ...future.frame <- base::sys.nframe()
[17:02:20.384]     ...future.conditions <- base::list()
[17:02:20.384]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.384]     if (FALSE) {
[17:02:20.384]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.384]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.384]     }
[17:02:20.384]     ...future.result <- base::tryCatch({
[17:02:20.384]         base::withCallingHandlers({
[17:02:20.384]             ...future.value <- base::withVisible(base::local({
[17:02:20.384]                 withCallingHandlers({
[17:02:20.384]                   {
[17:02:20.384]                     x <- 1
[17:02:20.384]                   }
[17:02:20.384]                 }, immediateCondition = function(cond) {
[17:02:20.384]                   save_rds <- function (object, pathname, ...) 
[17:02:20.384]                   {
[17:02:20.384]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.384]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.384]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.384]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.384]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.384]                         fi_tmp[["mtime"]])
[17:02:20.384]                     }
[17:02:20.384]                     tryCatch({
[17:02:20.384]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.384]                     }, error = function(ex) {
[17:02:20.384]                       msg <- conditionMessage(ex)
[17:02:20.384]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.384]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.384]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.384]                         fi_tmp[["mtime"]], msg)
[17:02:20.384]                       ex$message <- msg
[17:02:20.384]                       stop(ex)
[17:02:20.384]                     })
[17:02:20.384]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.384]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.384]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.384]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.384]                       fi <- file.info(pathname)
[17:02:20.384]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.384]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.384]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.384]                         fi[["size"]], fi[["mtime"]])
[17:02:20.384]                       stop(msg)
[17:02:20.384]                     }
[17:02:20.384]                     invisible(pathname)
[17:02:20.384]                   }
[17:02:20.384]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.384]                     rootPath = tempdir()) 
[17:02:20.384]                   {
[17:02:20.384]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.384]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.384]                       tmpdir = path, fileext = ".rds")
[17:02:20.384]                     save_rds(obj, file)
[17:02:20.384]                   }
[17:02:20.384]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.384]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.384]                   {
[17:02:20.384]                     inherits <- base::inherits
[17:02:20.384]                     invokeRestart <- base::invokeRestart
[17:02:20.384]                     is.null <- base::is.null
[17:02:20.384]                     muffled <- FALSE
[17:02:20.384]                     if (inherits(cond, "message")) {
[17:02:20.384]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.384]                       if (muffled) 
[17:02:20.384]                         invokeRestart("muffleMessage")
[17:02:20.384]                     }
[17:02:20.384]                     else if (inherits(cond, "warning")) {
[17:02:20.384]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.384]                       if (muffled) 
[17:02:20.384]                         invokeRestart("muffleWarning")
[17:02:20.384]                     }
[17:02:20.384]                     else if (inherits(cond, "condition")) {
[17:02:20.384]                       if (!is.null(pattern)) {
[17:02:20.384]                         computeRestarts <- base::computeRestarts
[17:02:20.384]                         grepl <- base::grepl
[17:02:20.384]                         restarts <- computeRestarts(cond)
[17:02:20.384]                         for (restart in restarts) {
[17:02:20.384]                           name <- restart$name
[17:02:20.384]                           if (is.null(name)) 
[17:02:20.384]                             next
[17:02:20.384]                           if (!grepl(pattern, name)) 
[17:02:20.384]                             next
[17:02:20.384]                           invokeRestart(restart)
[17:02:20.384]                           muffled <- TRUE
[17:02:20.384]                           break
[17:02:20.384]                         }
[17:02:20.384]                       }
[17:02:20.384]                     }
[17:02:20.384]                     invisible(muffled)
[17:02:20.384]                   }
[17:02:20.384]                   muffleCondition(cond)
[17:02:20.384]                 })
[17:02:20.384]             }))
[17:02:20.384]             future::FutureResult(value = ...future.value$value, 
[17:02:20.384]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.384]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.384]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.384]                     ...future.globalenv.names))
[17:02:20.384]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.384]         }, condition = base::local({
[17:02:20.384]             c <- base::c
[17:02:20.384]             inherits <- base::inherits
[17:02:20.384]             invokeRestart <- base::invokeRestart
[17:02:20.384]             length <- base::length
[17:02:20.384]             list <- base::list
[17:02:20.384]             seq.int <- base::seq.int
[17:02:20.384]             signalCondition <- base::signalCondition
[17:02:20.384]             sys.calls <- base::sys.calls
[17:02:20.384]             `[[` <- base::`[[`
[17:02:20.384]             `+` <- base::`+`
[17:02:20.384]             `<<-` <- base::`<<-`
[17:02:20.384]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.384]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.384]                   3L)]
[17:02:20.384]             }
[17:02:20.384]             function(cond) {
[17:02:20.384]                 is_error <- inherits(cond, "error")
[17:02:20.384]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.384]                   NULL)
[17:02:20.384]                 if (is_error) {
[17:02:20.384]                   sessionInformation <- function() {
[17:02:20.384]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.384]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.384]                       search = base::search(), system = base::Sys.info())
[17:02:20.384]                   }
[17:02:20.384]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.384]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.384]                     cond$call), session = sessionInformation(), 
[17:02:20.384]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.384]                   signalCondition(cond)
[17:02:20.384]                 }
[17:02:20.384]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.384]                 "immediateCondition"))) {
[17:02:20.384]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.384]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.384]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.384]                   if (TRUE && !signal) {
[17:02:20.384]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.384]                     {
[17:02:20.384]                       inherits <- base::inherits
[17:02:20.384]                       invokeRestart <- base::invokeRestart
[17:02:20.384]                       is.null <- base::is.null
[17:02:20.384]                       muffled <- FALSE
[17:02:20.384]                       if (inherits(cond, "message")) {
[17:02:20.384]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.384]                         if (muffled) 
[17:02:20.384]                           invokeRestart("muffleMessage")
[17:02:20.384]                       }
[17:02:20.384]                       else if (inherits(cond, "warning")) {
[17:02:20.384]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.384]                         if (muffled) 
[17:02:20.384]                           invokeRestart("muffleWarning")
[17:02:20.384]                       }
[17:02:20.384]                       else if (inherits(cond, "condition")) {
[17:02:20.384]                         if (!is.null(pattern)) {
[17:02:20.384]                           computeRestarts <- base::computeRestarts
[17:02:20.384]                           grepl <- base::grepl
[17:02:20.384]                           restarts <- computeRestarts(cond)
[17:02:20.384]                           for (restart in restarts) {
[17:02:20.384]                             name <- restart$name
[17:02:20.384]                             if (is.null(name)) 
[17:02:20.384]                               next
[17:02:20.384]                             if (!grepl(pattern, name)) 
[17:02:20.384]                               next
[17:02:20.384]                             invokeRestart(restart)
[17:02:20.384]                             muffled <- TRUE
[17:02:20.384]                             break
[17:02:20.384]                           }
[17:02:20.384]                         }
[17:02:20.384]                       }
[17:02:20.384]                       invisible(muffled)
[17:02:20.384]                     }
[17:02:20.384]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.384]                   }
[17:02:20.384]                 }
[17:02:20.384]                 else {
[17:02:20.384]                   if (TRUE) {
[17:02:20.384]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.384]                     {
[17:02:20.384]                       inherits <- base::inherits
[17:02:20.384]                       invokeRestart <- base::invokeRestart
[17:02:20.384]                       is.null <- base::is.null
[17:02:20.384]                       muffled <- FALSE
[17:02:20.384]                       if (inherits(cond, "message")) {
[17:02:20.384]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.384]                         if (muffled) 
[17:02:20.384]                           invokeRestart("muffleMessage")
[17:02:20.384]                       }
[17:02:20.384]                       else if (inherits(cond, "warning")) {
[17:02:20.384]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.384]                         if (muffled) 
[17:02:20.384]                           invokeRestart("muffleWarning")
[17:02:20.384]                       }
[17:02:20.384]                       else if (inherits(cond, "condition")) {
[17:02:20.384]                         if (!is.null(pattern)) {
[17:02:20.384]                           computeRestarts <- base::computeRestarts
[17:02:20.384]                           grepl <- base::grepl
[17:02:20.384]                           restarts <- computeRestarts(cond)
[17:02:20.384]                           for (restart in restarts) {
[17:02:20.384]                             name <- restart$name
[17:02:20.384]                             if (is.null(name)) 
[17:02:20.384]                               next
[17:02:20.384]                             if (!grepl(pattern, name)) 
[17:02:20.384]                               next
[17:02:20.384]                             invokeRestart(restart)
[17:02:20.384]                             muffled <- TRUE
[17:02:20.384]                             break
[17:02:20.384]                           }
[17:02:20.384]                         }
[17:02:20.384]                       }
[17:02:20.384]                       invisible(muffled)
[17:02:20.384]                     }
[17:02:20.384]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.384]                   }
[17:02:20.384]                 }
[17:02:20.384]             }
[17:02:20.384]         }))
[17:02:20.384]     }, error = function(ex) {
[17:02:20.384]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.384]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.384]                 ...future.rng), started = ...future.startTime, 
[17:02:20.384]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.384]             version = "1.8"), class = "FutureResult")
[17:02:20.384]     }, finally = {
[17:02:20.384]         if (!identical(...future.workdir, getwd())) 
[17:02:20.384]             setwd(...future.workdir)
[17:02:20.384]         {
[17:02:20.384]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.384]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.384]             }
[17:02:20.384]             base::options(...future.oldOptions)
[17:02:20.384]             if (.Platform$OS.type == "windows") {
[17:02:20.384]                 old_names <- names(...future.oldEnvVars)
[17:02:20.384]                 envs <- base::Sys.getenv()
[17:02:20.384]                 names <- names(envs)
[17:02:20.384]                 common <- intersect(names, old_names)
[17:02:20.384]                 added <- setdiff(names, old_names)
[17:02:20.384]                 removed <- setdiff(old_names, names)
[17:02:20.384]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.384]                   envs[common]]
[17:02:20.384]                 NAMES <- toupper(changed)
[17:02:20.384]                 args <- list()
[17:02:20.384]                 for (kk in seq_along(NAMES)) {
[17:02:20.384]                   name <- changed[[kk]]
[17:02:20.384]                   NAME <- NAMES[[kk]]
[17:02:20.384]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.384]                     next
[17:02:20.384]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.384]                 }
[17:02:20.384]                 NAMES <- toupper(added)
[17:02:20.384]                 for (kk in seq_along(NAMES)) {
[17:02:20.384]                   name <- added[[kk]]
[17:02:20.384]                   NAME <- NAMES[[kk]]
[17:02:20.384]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.384]                     next
[17:02:20.384]                   args[[name]] <- ""
[17:02:20.384]                 }
[17:02:20.384]                 NAMES <- toupper(removed)
[17:02:20.384]                 for (kk in seq_along(NAMES)) {
[17:02:20.384]                   name <- removed[[kk]]
[17:02:20.384]                   NAME <- NAMES[[kk]]
[17:02:20.384]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.384]                     next
[17:02:20.384]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.384]                 }
[17:02:20.384]                 if (length(args) > 0) 
[17:02:20.384]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.384]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.384]             }
[17:02:20.384]             else {
[17:02:20.384]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.384]             }
[17:02:20.384]             {
[17:02:20.384]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.384]                   0L) {
[17:02:20.384]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.384]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.384]                   base::options(opts)
[17:02:20.384]                 }
[17:02:20.384]                 {
[17:02:20.384]                   {
[17:02:20.384]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.384]                     NULL
[17:02:20.384]                   }
[17:02:20.384]                   options(future.plan = NULL)
[17:02:20.384]                   if (is.na(NA_character_)) 
[17:02:20.384]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.384]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.384]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.384]                     .init = FALSE)
[17:02:20.384]                 }
[17:02:20.384]             }
[17:02:20.384]         }
[17:02:20.384]     })
[17:02:20.384]     if (TRUE) {
[17:02:20.384]         base::sink(type = "output", split = FALSE)
[17:02:20.384]         if (TRUE) {
[17:02:20.384]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.384]         }
[17:02:20.384]         else {
[17:02:20.384]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.384]         }
[17:02:20.384]         base::close(...future.stdout)
[17:02:20.384]         ...future.stdout <- NULL
[17:02:20.384]     }
[17:02:20.384]     ...future.result$conditions <- ...future.conditions
[17:02:20.384]     ...future.result$finished <- base::Sys.time()
[17:02:20.384]     ...future.result
[17:02:20.384] }
[17:02:20.386] requestCore(): workers = 2
[17:02:20.389] MulticoreFuture started
[17:02:20.390] - Launch lazy future ... done
[17:02:20.390] plan(): Setting new future strategy stack:
[17:02:20.390] run() for ‘MulticoreFuture’ ... done
[17:02:20.390] List of future strategies:
[17:02:20.390] 1. sequential:
[17:02:20.390]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.390]    - tweaked: FALSE
[17:02:20.390]    - call: NULL
[17:02:20.391] plan(): nbrOfWorkers() = 1
[17:02:20.391] result() for MulticoreFuture ...
[17:02:20.393] plan(): Setting new future strategy stack:
[17:02:20.393] List of future strategies:
[17:02:20.393] 1. multicore:
[17:02:20.393]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.393]    - tweaked: FALSE
[17:02:20.393]    - call: plan(strategy)
[17:02:20.398] plan(): nbrOfWorkers() = 2
[17:02:20.402] result() for MulticoreFuture ...
[17:02:20.403] result() for MulticoreFuture ... done
[17:02:20.403] result() for MulticoreFuture ... done
[17:02:20.403] result() for MulticoreFuture ...
[17:02:20.403] result() for MulticoreFuture ... done
** Future evaluation with globals
[17:02:20.404] getGlobalsAndPackages() ...
[17:02:20.404] Searching for globals...
[17:02:20.405] - globals found: [3] ‘{’, ‘<-’, ‘a’
[17:02:20.405] Searching for globals ... DONE
[17:02:20.405] Resolving globals: FALSE
[17:02:20.406] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.406] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:20.406] - globals: [1] ‘a’
[17:02:20.406] 
[17:02:20.407] getGlobalsAndPackages() ... DONE
[17:02:20.407] run() for ‘Future’ ...
[17:02:20.407] - state: ‘created’
[17:02:20.407] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.414] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.414] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.414]   - Field: ‘label’
[17:02:20.414]   - Field: ‘local’
[17:02:20.414]   - Field: ‘owner’
[17:02:20.414]   - Field: ‘envir’
[17:02:20.414]   - Field: ‘workers’
[17:02:20.415]   - Field: ‘packages’
[17:02:20.415]   - Field: ‘gc’
[17:02:20.415]   - Field: ‘job’
[17:02:20.415]   - Field: ‘conditions’
[17:02:20.415]   - Field: ‘expr’
[17:02:20.415]   - Field: ‘uuid’
[17:02:20.415]   - Field: ‘seed’
[17:02:20.416]   - Field: ‘version’
[17:02:20.416]   - Field: ‘result’
[17:02:20.416]   - Field: ‘asynchronous’
[17:02:20.416]   - Field: ‘calls’
[17:02:20.416]   - Field: ‘globals’
[17:02:20.416]   - Field: ‘stdout’
[17:02:20.416]   - Field: ‘earlySignal’
[17:02:20.416]   - Field: ‘lazy’
[17:02:20.416]   - Field: ‘state’
[17:02:20.417] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.417] - Launch lazy future ...
[17:02:20.417] Packages needed by the future expression (n = 0): <none>
[17:02:20.417] Packages needed by future strategies (n = 0): <none>
[17:02:20.418] {
[17:02:20.418]     {
[17:02:20.418]         {
[17:02:20.418]             ...future.startTime <- base::Sys.time()
[17:02:20.418]             {
[17:02:20.418]                 {
[17:02:20.418]                   {
[17:02:20.418]                     {
[17:02:20.418]                       base::local({
[17:02:20.418]                         has_future <- base::requireNamespace("future", 
[17:02:20.418]                           quietly = TRUE)
[17:02:20.418]                         if (has_future) {
[17:02:20.418]                           ns <- base::getNamespace("future")
[17:02:20.418]                           version <- ns[[".package"]][["version"]]
[17:02:20.418]                           if (is.null(version)) 
[17:02:20.418]                             version <- utils::packageVersion("future")
[17:02:20.418]                         }
[17:02:20.418]                         else {
[17:02:20.418]                           version <- NULL
[17:02:20.418]                         }
[17:02:20.418]                         if (!has_future || version < "1.8.0") {
[17:02:20.418]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.418]                             "", base::R.version$version.string), 
[17:02:20.418]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.418]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.418]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.418]                               "release", "version")], collapse = " "), 
[17:02:20.418]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.418]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.418]                             info)
[17:02:20.418]                           info <- base::paste(info, collapse = "; ")
[17:02:20.418]                           if (!has_future) {
[17:02:20.418]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.418]                               info)
[17:02:20.418]                           }
[17:02:20.418]                           else {
[17:02:20.418]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.418]                               info, version)
[17:02:20.418]                           }
[17:02:20.418]                           base::stop(msg)
[17:02:20.418]                         }
[17:02:20.418]                       })
[17:02:20.418]                     }
[17:02:20.418]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.418]                     base::options(mc.cores = 1L)
[17:02:20.418]                   }
[17:02:20.418]                   ...future.strategy.old <- future::plan("list")
[17:02:20.418]                   options(future.plan = NULL)
[17:02:20.418]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.418]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.418]                 }
[17:02:20.418]                 ...future.workdir <- getwd()
[17:02:20.418]             }
[17:02:20.418]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.418]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.418]         }
[17:02:20.418]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.418]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.418]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.418]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.418]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.418]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.418]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.418]             base::names(...future.oldOptions))
[17:02:20.418]     }
[17:02:20.418]     if (FALSE) {
[17:02:20.418]     }
[17:02:20.418]     else {
[17:02:20.418]         if (TRUE) {
[17:02:20.418]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.418]                 open = "w")
[17:02:20.418]         }
[17:02:20.418]         else {
[17:02:20.418]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.418]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.418]         }
[17:02:20.418]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.418]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.418]             base::sink(type = "output", split = FALSE)
[17:02:20.418]             base::close(...future.stdout)
[17:02:20.418]         }, add = TRUE)
[17:02:20.418]     }
[17:02:20.418]     ...future.frame <- base::sys.nframe()
[17:02:20.418]     ...future.conditions <- base::list()
[17:02:20.418]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.418]     if (FALSE) {
[17:02:20.418]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.418]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.418]     }
[17:02:20.418]     ...future.result <- base::tryCatch({
[17:02:20.418]         base::withCallingHandlers({
[17:02:20.418]             ...future.value <- base::withVisible(base::local({
[17:02:20.418]                 withCallingHandlers({
[17:02:20.418]                   {
[17:02:20.418]                     x <- a
[17:02:20.418]                   }
[17:02:20.418]                 }, immediateCondition = function(cond) {
[17:02:20.418]                   save_rds <- function (object, pathname, ...) 
[17:02:20.418]                   {
[17:02:20.418]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.418]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.418]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.418]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.418]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.418]                         fi_tmp[["mtime"]])
[17:02:20.418]                     }
[17:02:20.418]                     tryCatch({
[17:02:20.418]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.418]                     }, error = function(ex) {
[17:02:20.418]                       msg <- conditionMessage(ex)
[17:02:20.418]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.418]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.418]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.418]                         fi_tmp[["mtime"]], msg)
[17:02:20.418]                       ex$message <- msg
[17:02:20.418]                       stop(ex)
[17:02:20.418]                     })
[17:02:20.418]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.418]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.418]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.418]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.418]                       fi <- file.info(pathname)
[17:02:20.418]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.418]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.418]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.418]                         fi[["size"]], fi[["mtime"]])
[17:02:20.418]                       stop(msg)
[17:02:20.418]                     }
[17:02:20.418]                     invisible(pathname)
[17:02:20.418]                   }
[17:02:20.418]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.418]                     rootPath = tempdir()) 
[17:02:20.418]                   {
[17:02:20.418]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.418]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.418]                       tmpdir = path, fileext = ".rds")
[17:02:20.418]                     save_rds(obj, file)
[17:02:20.418]                   }
[17:02:20.418]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.418]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.418]                   {
[17:02:20.418]                     inherits <- base::inherits
[17:02:20.418]                     invokeRestart <- base::invokeRestart
[17:02:20.418]                     is.null <- base::is.null
[17:02:20.418]                     muffled <- FALSE
[17:02:20.418]                     if (inherits(cond, "message")) {
[17:02:20.418]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.418]                       if (muffled) 
[17:02:20.418]                         invokeRestart("muffleMessage")
[17:02:20.418]                     }
[17:02:20.418]                     else if (inherits(cond, "warning")) {
[17:02:20.418]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.418]                       if (muffled) 
[17:02:20.418]                         invokeRestart("muffleWarning")
[17:02:20.418]                     }
[17:02:20.418]                     else if (inherits(cond, "condition")) {
[17:02:20.418]                       if (!is.null(pattern)) {
[17:02:20.418]                         computeRestarts <- base::computeRestarts
[17:02:20.418]                         grepl <- base::grepl
[17:02:20.418]                         restarts <- computeRestarts(cond)
[17:02:20.418]                         for (restart in restarts) {
[17:02:20.418]                           name <- restart$name
[17:02:20.418]                           if (is.null(name)) 
[17:02:20.418]                             next
[17:02:20.418]                           if (!grepl(pattern, name)) 
[17:02:20.418]                             next
[17:02:20.418]                           invokeRestart(restart)
[17:02:20.418]                           muffled <- TRUE
[17:02:20.418]                           break
[17:02:20.418]                         }
[17:02:20.418]                       }
[17:02:20.418]                     }
[17:02:20.418]                     invisible(muffled)
[17:02:20.418]                   }
[17:02:20.418]                   muffleCondition(cond)
[17:02:20.418]                 })
[17:02:20.418]             }))
[17:02:20.418]             future::FutureResult(value = ...future.value$value, 
[17:02:20.418]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.418]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.418]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.418]                     ...future.globalenv.names))
[17:02:20.418]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.418]         }, condition = base::local({
[17:02:20.418]             c <- base::c
[17:02:20.418]             inherits <- base::inherits
[17:02:20.418]             invokeRestart <- base::invokeRestart
[17:02:20.418]             length <- base::length
[17:02:20.418]             list <- base::list
[17:02:20.418]             seq.int <- base::seq.int
[17:02:20.418]             signalCondition <- base::signalCondition
[17:02:20.418]             sys.calls <- base::sys.calls
[17:02:20.418]             `[[` <- base::`[[`
[17:02:20.418]             `+` <- base::`+`
[17:02:20.418]             `<<-` <- base::`<<-`
[17:02:20.418]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.418]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.418]                   3L)]
[17:02:20.418]             }
[17:02:20.418]             function(cond) {
[17:02:20.418]                 is_error <- inherits(cond, "error")
[17:02:20.418]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.418]                   NULL)
[17:02:20.418]                 if (is_error) {
[17:02:20.418]                   sessionInformation <- function() {
[17:02:20.418]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.418]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.418]                       search = base::search(), system = base::Sys.info())
[17:02:20.418]                   }
[17:02:20.418]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.418]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.418]                     cond$call), session = sessionInformation(), 
[17:02:20.418]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.418]                   signalCondition(cond)
[17:02:20.418]                 }
[17:02:20.418]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.418]                 "immediateCondition"))) {
[17:02:20.418]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.418]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.418]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.418]                   if (TRUE && !signal) {
[17:02:20.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.418]                     {
[17:02:20.418]                       inherits <- base::inherits
[17:02:20.418]                       invokeRestart <- base::invokeRestart
[17:02:20.418]                       is.null <- base::is.null
[17:02:20.418]                       muffled <- FALSE
[17:02:20.418]                       if (inherits(cond, "message")) {
[17:02:20.418]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.418]                         if (muffled) 
[17:02:20.418]                           invokeRestart("muffleMessage")
[17:02:20.418]                       }
[17:02:20.418]                       else if (inherits(cond, "warning")) {
[17:02:20.418]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.418]                         if (muffled) 
[17:02:20.418]                           invokeRestart("muffleWarning")
[17:02:20.418]                       }
[17:02:20.418]                       else if (inherits(cond, "condition")) {
[17:02:20.418]                         if (!is.null(pattern)) {
[17:02:20.418]                           computeRestarts <- base::computeRestarts
[17:02:20.418]                           grepl <- base::grepl
[17:02:20.418]                           restarts <- computeRestarts(cond)
[17:02:20.418]                           for (restart in restarts) {
[17:02:20.418]                             name <- restart$name
[17:02:20.418]                             if (is.null(name)) 
[17:02:20.418]                               next
[17:02:20.418]                             if (!grepl(pattern, name)) 
[17:02:20.418]                               next
[17:02:20.418]                             invokeRestart(restart)
[17:02:20.418]                             muffled <- TRUE
[17:02:20.418]                             break
[17:02:20.418]                           }
[17:02:20.418]                         }
[17:02:20.418]                       }
[17:02:20.418]                       invisible(muffled)
[17:02:20.418]                     }
[17:02:20.418]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.418]                   }
[17:02:20.418]                 }
[17:02:20.418]                 else {
[17:02:20.418]                   if (TRUE) {
[17:02:20.418]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.418]                     {
[17:02:20.418]                       inherits <- base::inherits
[17:02:20.418]                       invokeRestart <- base::invokeRestart
[17:02:20.418]                       is.null <- base::is.null
[17:02:20.418]                       muffled <- FALSE
[17:02:20.418]                       if (inherits(cond, "message")) {
[17:02:20.418]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.418]                         if (muffled) 
[17:02:20.418]                           invokeRestart("muffleMessage")
[17:02:20.418]                       }
[17:02:20.418]                       else if (inherits(cond, "warning")) {
[17:02:20.418]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.418]                         if (muffled) 
[17:02:20.418]                           invokeRestart("muffleWarning")
[17:02:20.418]                       }
[17:02:20.418]                       else if (inherits(cond, "condition")) {
[17:02:20.418]                         if (!is.null(pattern)) {
[17:02:20.418]                           computeRestarts <- base::computeRestarts
[17:02:20.418]                           grepl <- base::grepl
[17:02:20.418]                           restarts <- computeRestarts(cond)
[17:02:20.418]                           for (restart in restarts) {
[17:02:20.418]                             name <- restart$name
[17:02:20.418]                             if (is.null(name)) 
[17:02:20.418]                               next
[17:02:20.418]                             if (!grepl(pattern, name)) 
[17:02:20.418]                               next
[17:02:20.418]                             invokeRestart(restart)
[17:02:20.418]                             muffled <- TRUE
[17:02:20.418]                             break
[17:02:20.418]                           }
[17:02:20.418]                         }
[17:02:20.418]                       }
[17:02:20.418]                       invisible(muffled)
[17:02:20.418]                     }
[17:02:20.418]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.418]                   }
[17:02:20.418]                 }
[17:02:20.418]             }
[17:02:20.418]         }))
[17:02:20.418]     }, error = function(ex) {
[17:02:20.418]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.418]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.418]                 ...future.rng), started = ...future.startTime, 
[17:02:20.418]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.418]             version = "1.8"), class = "FutureResult")
[17:02:20.418]     }, finally = {
[17:02:20.418]         if (!identical(...future.workdir, getwd())) 
[17:02:20.418]             setwd(...future.workdir)
[17:02:20.418]         {
[17:02:20.418]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.418]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.418]             }
[17:02:20.418]             base::options(...future.oldOptions)
[17:02:20.418]             if (.Platform$OS.type == "windows") {
[17:02:20.418]                 old_names <- names(...future.oldEnvVars)
[17:02:20.418]                 envs <- base::Sys.getenv()
[17:02:20.418]                 names <- names(envs)
[17:02:20.418]                 common <- intersect(names, old_names)
[17:02:20.418]                 added <- setdiff(names, old_names)
[17:02:20.418]                 removed <- setdiff(old_names, names)
[17:02:20.418]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.418]                   envs[common]]
[17:02:20.418]                 NAMES <- toupper(changed)
[17:02:20.418]                 args <- list()
[17:02:20.418]                 for (kk in seq_along(NAMES)) {
[17:02:20.418]                   name <- changed[[kk]]
[17:02:20.418]                   NAME <- NAMES[[kk]]
[17:02:20.418]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.418]                     next
[17:02:20.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.418]                 }
[17:02:20.418]                 NAMES <- toupper(added)
[17:02:20.418]                 for (kk in seq_along(NAMES)) {
[17:02:20.418]                   name <- added[[kk]]
[17:02:20.418]                   NAME <- NAMES[[kk]]
[17:02:20.418]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.418]                     next
[17:02:20.418]                   args[[name]] <- ""
[17:02:20.418]                 }
[17:02:20.418]                 NAMES <- toupper(removed)
[17:02:20.418]                 for (kk in seq_along(NAMES)) {
[17:02:20.418]                   name <- removed[[kk]]
[17:02:20.418]                   NAME <- NAMES[[kk]]
[17:02:20.418]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.418]                     next
[17:02:20.418]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.418]                 }
[17:02:20.418]                 if (length(args) > 0) 
[17:02:20.418]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.418]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.418]             }
[17:02:20.418]             else {
[17:02:20.418]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.418]             }
[17:02:20.418]             {
[17:02:20.418]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.418]                   0L) {
[17:02:20.418]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.418]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.418]                   base::options(opts)
[17:02:20.418]                 }
[17:02:20.418]                 {
[17:02:20.418]                   {
[17:02:20.418]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.418]                     NULL
[17:02:20.418]                   }
[17:02:20.418]                   options(future.plan = NULL)
[17:02:20.418]                   if (is.na(NA_character_)) 
[17:02:20.418]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.418]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.418]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.418]                     .init = FALSE)
[17:02:20.418]                 }
[17:02:20.418]             }
[17:02:20.418]         }
[17:02:20.418]     })
[17:02:20.418]     if (TRUE) {
[17:02:20.418]         base::sink(type = "output", split = FALSE)
[17:02:20.418]         if (TRUE) {
[17:02:20.418]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.418]         }
[17:02:20.418]         else {
[17:02:20.418]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.418]         }
[17:02:20.418]         base::close(...future.stdout)
[17:02:20.418]         ...future.stdout <- NULL
[17:02:20.418]     }
[17:02:20.418]     ...future.result$conditions <- ...future.conditions
[17:02:20.418]     ...future.result$finished <- base::Sys.time()
[17:02:20.418]     ...future.result
[17:02:20.418] }
[17:02:20.420] assign_globals() ...
[17:02:20.420] List of 1
[17:02:20.420]  $ a: num 2
[17:02:20.420]  - attr(*, "where")=List of 1
[17:02:20.420]   ..$ a:<environment: R_EmptyEnv> 
[17:02:20.420]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.420]  - attr(*, "resolved")= logi FALSE
[17:02:20.420]  - attr(*, "total_size")= num 56
[17:02:20.420]  - attr(*, "already-done")= logi TRUE
[17:02:20.423] - copied ‘a’ to environment
[17:02:20.423] assign_globals() ... done
[17:02:20.423] requestCore(): workers = 2
[17:02:20.425] MulticoreFuture started
[17:02:20.426] - Launch lazy future ... done
[17:02:20.426] run() for ‘MulticoreFuture’ ... done
[17:02:20.426] result() for MulticoreFuture ...
[17:02:20.426] plan(): Setting new future strategy stack:
[17:02:20.426] List of future strategies:
[17:02:20.426] 1. sequential:
[17:02:20.426]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.426]    - tweaked: FALSE
[17:02:20.426]    - call: NULL
[17:02:20.428] plan(): nbrOfWorkers() = 1
[17:02:20.429] plan(): Setting new future strategy stack:
[17:02:20.430] List of future strategies:
[17:02:20.430] 1. multicore:
[17:02:20.430]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.430]    - tweaked: FALSE
[17:02:20.430]    - call: plan(strategy)
[17:02:20.435] plan(): nbrOfWorkers() = 2
[17:02:20.436] result() for MulticoreFuture ...
[17:02:20.436] result() for MulticoreFuture ... done
[17:02:20.436] result() for MulticoreFuture ... done
[17:02:20.437] result() for MulticoreFuture ...
[17:02:20.437] result() for MulticoreFuture ... done
** Future evaluation with errors
[17:02:20.437] getGlobalsAndPackages() ...
[17:02:20.438] Searching for globals...
[17:02:20.440] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[17:02:20.440] Searching for globals ... DONE
[17:02:20.440] Resolving globals: FALSE
[17:02:20.440] 
[17:02:20.440] 
[17:02:20.441] getGlobalsAndPackages() ... DONE
[17:02:20.441] run() for ‘Future’ ...
[17:02:20.441] - state: ‘created’
[17:02:20.441] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.445] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.445] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.446]   - Field: ‘label’
[17:02:20.446]   - Field: ‘local’
[17:02:20.446]   - Field: ‘owner’
[17:02:20.446]   - Field: ‘envir’
[17:02:20.446]   - Field: ‘workers’
[17:02:20.446]   - Field: ‘packages’
[17:02:20.446]   - Field: ‘gc’
[17:02:20.446]   - Field: ‘job’
[17:02:20.447]   - Field: ‘conditions’
[17:02:20.447]   - Field: ‘expr’
[17:02:20.447]   - Field: ‘uuid’
[17:02:20.447]   - Field: ‘seed’
[17:02:20.447]   - Field: ‘version’
[17:02:20.447]   - Field: ‘result’
[17:02:20.447]   - Field: ‘asynchronous’
[17:02:20.447]   - Field: ‘calls’
[17:02:20.447]   - Field: ‘globals’
[17:02:20.448]   - Field: ‘stdout’
[17:02:20.448]   - Field: ‘earlySignal’
[17:02:20.448]   - Field: ‘lazy’
[17:02:20.448]   - Field: ‘state’
[17:02:20.448] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.448] - Launch lazy future ...
[17:02:20.448] Packages needed by the future expression (n = 0): <none>
[17:02:20.449] Packages needed by future strategies (n = 0): <none>
[17:02:20.449] {
[17:02:20.449]     {
[17:02:20.449]         {
[17:02:20.449]             ...future.startTime <- base::Sys.time()
[17:02:20.449]             {
[17:02:20.449]                 {
[17:02:20.449]                   {
[17:02:20.449]                     {
[17:02:20.449]                       base::local({
[17:02:20.449]                         has_future <- base::requireNamespace("future", 
[17:02:20.449]                           quietly = TRUE)
[17:02:20.449]                         if (has_future) {
[17:02:20.449]                           ns <- base::getNamespace("future")
[17:02:20.449]                           version <- ns[[".package"]][["version"]]
[17:02:20.449]                           if (is.null(version)) 
[17:02:20.449]                             version <- utils::packageVersion("future")
[17:02:20.449]                         }
[17:02:20.449]                         else {
[17:02:20.449]                           version <- NULL
[17:02:20.449]                         }
[17:02:20.449]                         if (!has_future || version < "1.8.0") {
[17:02:20.449]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.449]                             "", base::R.version$version.string), 
[17:02:20.449]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.449]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.449]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.449]                               "release", "version")], collapse = " "), 
[17:02:20.449]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.449]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.449]                             info)
[17:02:20.449]                           info <- base::paste(info, collapse = "; ")
[17:02:20.449]                           if (!has_future) {
[17:02:20.449]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.449]                               info)
[17:02:20.449]                           }
[17:02:20.449]                           else {
[17:02:20.449]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.449]                               info, version)
[17:02:20.449]                           }
[17:02:20.449]                           base::stop(msg)
[17:02:20.449]                         }
[17:02:20.449]                       })
[17:02:20.449]                     }
[17:02:20.449]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.449]                     base::options(mc.cores = 1L)
[17:02:20.449]                   }
[17:02:20.449]                   ...future.strategy.old <- future::plan("list")
[17:02:20.449]                   options(future.plan = NULL)
[17:02:20.449]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.449]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.449]                 }
[17:02:20.449]                 ...future.workdir <- getwd()
[17:02:20.449]             }
[17:02:20.449]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.449]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.449]         }
[17:02:20.449]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.449]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.449]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.449]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.449]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.449]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.449]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.449]             base::names(...future.oldOptions))
[17:02:20.449]     }
[17:02:20.449]     if (FALSE) {
[17:02:20.449]     }
[17:02:20.449]     else {
[17:02:20.449]         if (TRUE) {
[17:02:20.449]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.449]                 open = "w")
[17:02:20.449]         }
[17:02:20.449]         else {
[17:02:20.449]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.449]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.449]         }
[17:02:20.449]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.449]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.449]             base::sink(type = "output", split = FALSE)
[17:02:20.449]             base::close(...future.stdout)
[17:02:20.449]         }, add = TRUE)
[17:02:20.449]     }
[17:02:20.449]     ...future.frame <- base::sys.nframe()
[17:02:20.449]     ...future.conditions <- base::list()
[17:02:20.449]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.449]     if (FALSE) {
[17:02:20.449]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.449]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.449]     }
[17:02:20.449]     ...future.result <- base::tryCatch({
[17:02:20.449]         base::withCallingHandlers({
[17:02:20.449]             ...future.value <- base::withVisible(base::local({
[17:02:20.449]                 withCallingHandlers({
[17:02:20.449]                   {
[17:02:20.449]                     x <- 3
[17:02:20.449]                     stop("Woops!")
[17:02:20.449]                     x
[17:02:20.449]                   }
[17:02:20.449]                 }, immediateCondition = function(cond) {
[17:02:20.449]                   save_rds <- function (object, pathname, ...) 
[17:02:20.449]                   {
[17:02:20.449]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.449]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.449]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.449]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.449]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.449]                         fi_tmp[["mtime"]])
[17:02:20.449]                     }
[17:02:20.449]                     tryCatch({
[17:02:20.449]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.449]                     }, error = function(ex) {
[17:02:20.449]                       msg <- conditionMessage(ex)
[17:02:20.449]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.449]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.449]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.449]                         fi_tmp[["mtime"]], msg)
[17:02:20.449]                       ex$message <- msg
[17:02:20.449]                       stop(ex)
[17:02:20.449]                     })
[17:02:20.449]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.449]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.449]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.449]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.449]                       fi <- file.info(pathname)
[17:02:20.449]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.449]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.449]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.449]                         fi[["size"]], fi[["mtime"]])
[17:02:20.449]                       stop(msg)
[17:02:20.449]                     }
[17:02:20.449]                     invisible(pathname)
[17:02:20.449]                   }
[17:02:20.449]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.449]                     rootPath = tempdir()) 
[17:02:20.449]                   {
[17:02:20.449]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.449]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.449]                       tmpdir = path, fileext = ".rds")
[17:02:20.449]                     save_rds(obj, file)
[17:02:20.449]                   }
[17:02:20.449]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.449]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.449]                   {
[17:02:20.449]                     inherits <- base::inherits
[17:02:20.449]                     invokeRestart <- base::invokeRestart
[17:02:20.449]                     is.null <- base::is.null
[17:02:20.449]                     muffled <- FALSE
[17:02:20.449]                     if (inherits(cond, "message")) {
[17:02:20.449]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.449]                       if (muffled) 
[17:02:20.449]                         invokeRestart("muffleMessage")
[17:02:20.449]                     }
[17:02:20.449]                     else if (inherits(cond, "warning")) {
[17:02:20.449]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.449]                       if (muffled) 
[17:02:20.449]                         invokeRestart("muffleWarning")
[17:02:20.449]                     }
[17:02:20.449]                     else if (inherits(cond, "condition")) {
[17:02:20.449]                       if (!is.null(pattern)) {
[17:02:20.449]                         computeRestarts <- base::computeRestarts
[17:02:20.449]                         grepl <- base::grepl
[17:02:20.449]                         restarts <- computeRestarts(cond)
[17:02:20.449]                         for (restart in restarts) {
[17:02:20.449]                           name <- restart$name
[17:02:20.449]                           if (is.null(name)) 
[17:02:20.449]                             next
[17:02:20.449]                           if (!grepl(pattern, name)) 
[17:02:20.449]                             next
[17:02:20.449]                           invokeRestart(restart)
[17:02:20.449]                           muffled <- TRUE
[17:02:20.449]                           break
[17:02:20.449]                         }
[17:02:20.449]                       }
[17:02:20.449]                     }
[17:02:20.449]                     invisible(muffled)
[17:02:20.449]                   }
[17:02:20.449]                   muffleCondition(cond)
[17:02:20.449]                 })
[17:02:20.449]             }))
[17:02:20.449]             future::FutureResult(value = ...future.value$value, 
[17:02:20.449]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.449]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.449]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.449]                     ...future.globalenv.names))
[17:02:20.449]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.449]         }, condition = base::local({
[17:02:20.449]             c <- base::c
[17:02:20.449]             inherits <- base::inherits
[17:02:20.449]             invokeRestart <- base::invokeRestart
[17:02:20.449]             length <- base::length
[17:02:20.449]             list <- base::list
[17:02:20.449]             seq.int <- base::seq.int
[17:02:20.449]             signalCondition <- base::signalCondition
[17:02:20.449]             sys.calls <- base::sys.calls
[17:02:20.449]             `[[` <- base::`[[`
[17:02:20.449]             `+` <- base::`+`
[17:02:20.449]             `<<-` <- base::`<<-`
[17:02:20.449]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.449]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.449]                   3L)]
[17:02:20.449]             }
[17:02:20.449]             function(cond) {
[17:02:20.449]                 is_error <- inherits(cond, "error")
[17:02:20.449]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.449]                   NULL)
[17:02:20.449]                 if (is_error) {
[17:02:20.449]                   sessionInformation <- function() {
[17:02:20.449]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.449]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.449]                       search = base::search(), system = base::Sys.info())
[17:02:20.449]                   }
[17:02:20.449]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.449]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.449]                     cond$call), session = sessionInformation(), 
[17:02:20.449]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.449]                   signalCondition(cond)
[17:02:20.449]                 }
[17:02:20.449]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.449]                 "immediateCondition"))) {
[17:02:20.449]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.449]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.449]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.449]                   if (TRUE && !signal) {
[17:02:20.449]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.449]                     {
[17:02:20.449]                       inherits <- base::inherits
[17:02:20.449]                       invokeRestart <- base::invokeRestart
[17:02:20.449]                       is.null <- base::is.null
[17:02:20.449]                       muffled <- FALSE
[17:02:20.449]                       if (inherits(cond, "message")) {
[17:02:20.449]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.449]                         if (muffled) 
[17:02:20.449]                           invokeRestart("muffleMessage")
[17:02:20.449]                       }
[17:02:20.449]                       else if (inherits(cond, "warning")) {
[17:02:20.449]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.449]                         if (muffled) 
[17:02:20.449]                           invokeRestart("muffleWarning")
[17:02:20.449]                       }
[17:02:20.449]                       else if (inherits(cond, "condition")) {
[17:02:20.449]                         if (!is.null(pattern)) {
[17:02:20.449]                           computeRestarts <- base::computeRestarts
[17:02:20.449]                           grepl <- base::grepl
[17:02:20.449]                           restarts <- computeRestarts(cond)
[17:02:20.449]                           for (restart in restarts) {
[17:02:20.449]                             name <- restart$name
[17:02:20.449]                             if (is.null(name)) 
[17:02:20.449]                               next
[17:02:20.449]                             if (!grepl(pattern, name)) 
[17:02:20.449]                               next
[17:02:20.449]                             invokeRestart(restart)
[17:02:20.449]                             muffled <- TRUE
[17:02:20.449]                             break
[17:02:20.449]                           }
[17:02:20.449]                         }
[17:02:20.449]                       }
[17:02:20.449]                       invisible(muffled)
[17:02:20.449]                     }
[17:02:20.449]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.449]                   }
[17:02:20.449]                 }
[17:02:20.449]                 else {
[17:02:20.449]                   if (TRUE) {
[17:02:20.449]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.449]                     {
[17:02:20.449]                       inherits <- base::inherits
[17:02:20.449]                       invokeRestart <- base::invokeRestart
[17:02:20.449]                       is.null <- base::is.null
[17:02:20.449]                       muffled <- FALSE
[17:02:20.449]                       if (inherits(cond, "message")) {
[17:02:20.449]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.449]                         if (muffled) 
[17:02:20.449]                           invokeRestart("muffleMessage")
[17:02:20.449]                       }
[17:02:20.449]                       else if (inherits(cond, "warning")) {
[17:02:20.449]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.449]                         if (muffled) 
[17:02:20.449]                           invokeRestart("muffleWarning")
[17:02:20.449]                       }
[17:02:20.449]                       else if (inherits(cond, "condition")) {
[17:02:20.449]                         if (!is.null(pattern)) {
[17:02:20.449]                           computeRestarts <- base::computeRestarts
[17:02:20.449]                           grepl <- base::grepl
[17:02:20.449]                           restarts <- computeRestarts(cond)
[17:02:20.449]                           for (restart in restarts) {
[17:02:20.449]                             name <- restart$name
[17:02:20.449]                             if (is.null(name)) 
[17:02:20.449]                               next
[17:02:20.449]                             if (!grepl(pattern, name)) 
[17:02:20.449]                               next
[17:02:20.449]                             invokeRestart(restart)
[17:02:20.449]                             muffled <- TRUE
[17:02:20.449]                             break
[17:02:20.449]                           }
[17:02:20.449]                         }
[17:02:20.449]                       }
[17:02:20.449]                       invisible(muffled)
[17:02:20.449]                     }
[17:02:20.449]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.449]                   }
[17:02:20.449]                 }
[17:02:20.449]             }
[17:02:20.449]         }))
[17:02:20.449]     }, error = function(ex) {
[17:02:20.449]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.449]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.449]                 ...future.rng), started = ...future.startTime, 
[17:02:20.449]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.449]             version = "1.8"), class = "FutureResult")
[17:02:20.449]     }, finally = {
[17:02:20.449]         if (!identical(...future.workdir, getwd())) 
[17:02:20.449]             setwd(...future.workdir)
[17:02:20.449]         {
[17:02:20.449]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.449]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.449]             }
[17:02:20.449]             base::options(...future.oldOptions)
[17:02:20.449]             if (.Platform$OS.type == "windows") {
[17:02:20.449]                 old_names <- names(...future.oldEnvVars)
[17:02:20.449]                 envs <- base::Sys.getenv()
[17:02:20.449]                 names <- names(envs)
[17:02:20.449]                 common <- intersect(names, old_names)
[17:02:20.449]                 added <- setdiff(names, old_names)
[17:02:20.449]                 removed <- setdiff(old_names, names)
[17:02:20.449]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.449]                   envs[common]]
[17:02:20.449]                 NAMES <- toupper(changed)
[17:02:20.449]                 args <- list()
[17:02:20.449]                 for (kk in seq_along(NAMES)) {
[17:02:20.449]                   name <- changed[[kk]]
[17:02:20.449]                   NAME <- NAMES[[kk]]
[17:02:20.449]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.449]                     next
[17:02:20.449]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.449]                 }
[17:02:20.449]                 NAMES <- toupper(added)
[17:02:20.449]                 for (kk in seq_along(NAMES)) {
[17:02:20.449]                   name <- added[[kk]]
[17:02:20.449]                   NAME <- NAMES[[kk]]
[17:02:20.449]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.449]                     next
[17:02:20.449]                   args[[name]] <- ""
[17:02:20.449]                 }
[17:02:20.449]                 NAMES <- toupper(removed)
[17:02:20.449]                 for (kk in seq_along(NAMES)) {
[17:02:20.449]                   name <- removed[[kk]]
[17:02:20.449]                   NAME <- NAMES[[kk]]
[17:02:20.449]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.449]                     next
[17:02:20.449]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.449]                 }
[17:02:20.449]                 if (length(args) > 0) 
[17:02:20.449]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.449]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.449]             }
[17:02:20.449]             else {
[17:02:20.449]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.449]             }
[17:02:20.449]             {
[17:02:20.449]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.449]                   0L) {
[17:02:20.449]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.449]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.449]                   base::options(opts)
[17:02:20.449]                 }
[17:02:20.449]                 {
[17:02:20.449]                   {
[17:02:20.449]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.449]                     NULL
[17:02:20.449]                   }
[17:02:20.449]                   options(future.plan = NULL)
[17:02:20.449]                   if (is.na(NA_character_)) 
[17:02:20.449]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.449]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.449]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.449]                     .init = FALSE)
[17:02:20.449]                 }
[17:02:20.449]             }
[17:02:20.449]         }
[17:02:20.449]     })
[17:02:20.449]     if (TRUE) {
[17:02:20.449]         base::sink(type = "output", split = FALSE)
[17:02:20.449]         if (TRUE) {
[17:02:20.449]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.449]         }
[17:02:20.449]         else {
[17:02:20.449]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.449]         }
[17:02:20.449]         base::close(...future.stdout)
[17:02:20.449]         ...future.stdout <- NULL
[17:02:20.449]     }
[17:02:20.449]     ...future.result$conditions <- ...future.conditions
[17:02:20.449]     ...future.result$finished <- base::Sys.time()
[17:02:20.449]     ...future.result
[17:02:20.449] }
[17:02:20.452] requestCore(): workers = 2
[17:02:20.454] MulticoreFuture started
[17:02:20.454] - Launch lazy future ... done
[17:02:20.455] run() for ‘MulticoreFuture’ ... done
[17:02:20.455] result() for MulticoreFuture ...
[17:02:20.455] plan(): Setting new future strategy stack:
[17:02:20.455] List of future strategies:
[17:02:20.455] 1. sequential:
[17:02:20.455]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.455]    - tweaked: FALSE
[17:02:20.455]    - call: NULL
[17:02:20.456] plan(): nbrOfWorkers() = 1
[17:02:20.458] plan(): Setting new future strategy stack:
[17:02:20.459] List of future strategies:
[17:02:20.459] 1. multicore:
[17:02:20.459]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.459]    - tweaked: FALSE
[17:02:20.459]    - call: plan(strategy)
[17:02:20.464] plan(): nbrOfWorkers() = 2
[17:02:20.469] result() for MulticoreFuture ...
[17:02:20.469] result() for MulticoreFuture ... done
[17:02:20.469] signalConditions() ...
[17:02:20.469]  - include = ‘immediateCondition’
[17:02:20.469]  - exclude = 
[17:02:20.469]  - resignal = FALSE
[17:02:20.470]  - Number of conditions: 1
[17:02:20.470] signalConditions() ... done
[17:02:20.470] result() for MulticoreFuture ... done
[17:02:20.470] result() for MulticoreFuture ...
[17:02:20.470] result() for MulticoreFuture ... done
[17:02:20.470] signalConditions() ...
[17:02:20.470]  - include = ‘immediateCondition’
[17:02:20.470]  - exclude = 
[17:02:20.471]  - resignal = FALSE
[17:02:20.471]  - Number of conditions: 1
[17:02:20.471] signalConditions() ... done
[17:02:20.471] Future state: ‘finished’
[17:02:20.471] result() for MulticoreFuture ...
[17:02:20.471] result() for MulticoreFuture ... done
[17:02:20.471] signalConditions() ...
[17:02:20.471]  - include = ‘condition’
[17:02:20.472]  - exclude = ‘immediateCondition’
[17:02:20.472]  - resignal = TRUE
[17:02:20.472]  - Number of conditions: 1
[17:02:20.472]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.472] signalConditions() ... done
[17:02:20.473] getGlobalsAndPackages() ...
[17:02:20.473] Searching for globals...
[17:02:20.475] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:20.478] Searching for globals ... DONE
[17:02:20.478] Resolving globals: FALSE
[17:02:20.479] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.479] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:20.479] - globals: [1] ‘ii’
[17:02:20.480] 
[17:02:20.480] getGlobalsAndPackages() ... DONE
[17:02:20.480] run() for ‘Future’ ...
[17:02:20.480] - state: ‘created’
[17:02:20.480] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.485] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.485] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.485]   - Field: ‘label’
[17:02:20.485]   - Field: ‘local’
[17:02:20.485]   - Field: ‘owner’
[17:02:20.486]   - Field: ‘envir’
[17:02:20.486]   - Field: ‘workers’
[17:02:20.486]   - Field: ‘packages’
[17:02:20.486]   - Field: ‘gc’
[17:02:20.486]   - Field: ‘job’
[17:02:20.486]   - Field: ‘conditions’
[17:02:20.486]   - Field: ‘expr’
[17:02:20.486]   - Field: ‘uuid’
[17:02:20.487]   - Field: ‘seed’
[17:02:20.487]   - Field: ‘version’
[17:02:20.487]   - Field: ‘result’
[17:02:20.487]   - Field: ‘asynchronous’
[17:02:20.487]   - Field: ‘calls’
[17:02:20.487]   - Field: ‘globals’
[17:02:20.487]   - Field: ‘stdout’
[17:02:20.488]   - Field: ‘earlySignal’
[17:02:20.488]   - Field: ‘lazy’
[17:02:20.488]   - Field: ‘state’
[17:02:20.488] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.488] - Launch lazy future ...
[17:02:20.488] Packages needed by the future expression (n = 0): <none>
[17:02:20.489] Packages needed by future strategies (n = 0): <none>
[17:02:20.489] {
[17:02:20.489]     {
[17:02:20.489]         {
[17:02:20.489]             ...future.startTime <- base::Sys.time()
[17:02:20.489]             {
[17:02:20.489]                 {
[17:02:20.489]                   {
[17:02:20.489]                     {
[17:02:20.489]                       base::local({
[17:02:20.489]                         has_future <- base::requireNamespace("future", 
[17:02:20.489]                           quietly = TRUE)
[17:02:20.489]                         if (has_future) {
[17:02:20.489]                           ns <- base::getNamespace("future")
[17:02:20.489]                           version <- ns[[".package"]][["version"]]
[17:02:20.489]                           if (is.null(version)) 
[17:02:20.489]                             version <- utils::packageVersion("future")
[17:02:20.489]                         }
[17:02:20.489]                         else {
[17:02:20.489]                           version <- NULL
[17:02:20.489]                         }
[17:02:20.489]                         if (!has_future || version < "1.8.0") {
[17:02:20.489]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.489]                             "", base::R.version$version.string), 
[17:02:20.489]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.489]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.489]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.489]                               "release", "version")], collapse = " "), 
[17:02:20.489]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.489]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.489]                             info)
[17:02:20.489]                           info <- base::paste(info, collapse = "; ")
[17:02:20.489]                           if (!has_future) {
[17:02:20.489]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.489]                               info)
[17:02:20.489]                           }
[17:02:20.489]                           else {
[17:02:20.489]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.489]                               info, version)
[17:02:20.489]                           }
[17:02:20.489]                           base::stop(msg)
[17:02:20.489]                         }
[17:02:20.489]                       })
[17:02:20.489]                     }
[17:02:20.489]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.489]                     base::options(mc.cores = 1L)
[17:02:20.489]                   }
[17:02:20.489]                   ...future.strategy.old <- future::plan("list")
[17:02:20.489]                   options(future.plan = NULL)
[17:02:20.489]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.489]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.489]                 }
[17:02:20.489]                 ...future.workdir <- getwd()
[17:02:20.489]             }
[17:02:20.489]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.489]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.489]         }
[17:02:20.489]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.489]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.489]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.489]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.489]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.489]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.489]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.489]             base::names(...future.oldOptions))
[17:02:20.489]     }
[17:02:20.489]     if (FALSE) {
[17:02:20.489]     }
[17:02:20.489]     else {
[17:02:20.489]         if (TRUE) {
[17:02:20.489]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.489]                 open = "w")
[17:02:20.489]         }
[17:02:20.489]         else {
[17:02:20.489]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.489]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.489]         }
[17:02:20.489]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.489]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.489]             base::sink(type = "output", split = FALSE)
[17:02:20.489]             base::close(...future.stdout)
[17:02:20.489]         }, add = TRUE)
[17:02:20.489]     }
[17:02:20.489]     ...future.frame <- base::sys.nframe()
[17:02:20.489]     ...future.conditions <- base::list()
[17:02:20.489]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.489]     if (FALSE) {
[17:02:20.489]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.489]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.489]     }
[17:02:20.489]     ...future.result <- base::tryCatch({
[17:02:20.489]         base::withCallingHandlers({
[17:02:20.489]             ...future.value <- base::withVisible(base::local({
[17:02:20.489]                 withCallingHandlers({
[17:02:20.489]                   {
[17:02:20.489]                     if (ii%%2 == 0) 
[17:02:20.489]                       stop("Woops!")
[17:02:20.489]                     ii
[17:02:20.489]                   }
[17:02:20.489]                 }, immediateCondition = function(cond) {
[17:02:20.489]                   save_rds <- function (object, pathname, ...) 
[17:02:20.489]                   {
[17:02:20.489]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.489]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.489]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.489]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.489]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.489]                         fi_tmp[["mtime"]])
[17:02:20.489]                     }
[17:02:20.489]                     tryCatch({
[17:02:20.489]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.489]                     }, error = function(ex) {
[17:02:20.489]                       msg <- conditionMessage(ex)
[17:02:20.489]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.489]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.489]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.489]                         fi_tmp[["mtime"]], msg)
[17:02:20.489]                       ex$message <- msg
[17:02:20.489]                       stop(ex)
[17:02:20.489]                     })
[17:02:20.489]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.489]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.489]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.489]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.489]                       fi <- file.info(pathname)
[17:02:20.489]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.489]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.489]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.489]                         fi[["size"]], fi[["mtime"]])
[17:02:20.489]                       stop(msg)
[17:02:20.489]                     }
[17:02:20.489]                     invisible(pathname)
[17:02:20.489]                   }
[17:02:20.489]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.489]                     rootPath = tempdir()) 
[17:02:20.489]                   {
[17:02:20.489]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.489]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.489]                       tmpdir = path, fileext = ".rds")
[17:02:20.489]                     save_rds(obj, file)
[17:02:20.489]                   }
[17:02:20.489]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.489]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.489]                   {
[17:02:20.489]                     inherits <- base::inherits
[17:02:20.489]                     invokeRestart <- base::invokeRestart
[17:02:20.489]                     is.null <- base::is.null
[17:02:20.489]                     muffled <- FALSE
[17:02:20.489]                     if (inherits(cond, "message")) {
[17:02:20.489]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.489]                       if (muffled) 
[17:02:20.489]                         invokeRestart("muffleMessage")
[17:02:20.489]                     }
[17:02:20.489]                     else if (inherits(cond, "warning")) {
[17:02:20.489]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.489]                       if (muffled) 
[17:02:20.489]                         invokeRestart("muffleWarning")
[17:02:20.489]                     }
[17:02:20.489]                     else if (inherits(cond, "condition")) {
[17:02:20.489]                       if (!is.null(pattern)) {
[17:02:20.489]                         computeRestarts <- base::computeRestarts
[17:02:20.489]                         grepl <- base::grepl
[17:02:20.489]                         restarts <- computeRestarts(cond)
[17:02:20.489]                         for (restart in restarts) {
[17:02:20.489]                           name <- restart$name
[17:02:20.489]                           if (is.null(name)) 
[17:02:20.489]                             next
[17:02:20.489]                           if (!grepl(pattern, name)) 
[17:02:20.489]                             next
[17:02:20.489]                           invokeRestart(restart)
[17:02:20.489]                           muffled <- TRUE
[17:02:20.489]                           break
[17:02:20.489]                         }
[17:02:20.489]                       }
[17:02:20.489]                     }
[17:02:20.489]                     invisible(muffled)
[17:02:20.489]                   }
[17:02:20.489]                   muffleCondition(cond)
[17:02:20.489]                 })
[17:02:20.489]             }))
[17:02:20.489]             future::FutureResult(value = ...future.value$value, 
[17:02:20.489]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.489]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.489]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.489]                     ...future.globalenv.names))
[17:02:20.489]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.489]         }, condition = base::local({
[17:02:20.489]             c <- base::c
[17:02:20.489]             inherits <- base::inherits
[17:02:20.489]             invokeRestart <- base::invokeRestart
[17:02:20.489]             length <- base::length
[17:02:20.489]             list <- base::list
[17:02:20.489]             seq.int <- base::seq.int
[17:02:20.489]             signalCondition <- base::signalCondition
[17:02:20.489]             sys.calls <- base::sys.calls
[17:02:20.489]             `[[` <- base::`[[`
[17:02:20.489]             `+` <- base::`+`
[17:02:20.489]             `<<-` <- base::`<<-`
[17:02:20.489]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.489]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.489]                   3L)]
[17:02:20.489]             }
[17:02:20.489]             function(cond) {
[17:02:20.489]                 is_error <- inherits(cond, "error")
[17:02:20.489]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.489]                   NULL)
[17:02:20.489]                 if (is_error) {
[17:02:20.489]                   sessionInformation <- function() {
[17:02:20.489]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.489]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.489]                       search = base::search(), system = base::Sys.info())
[17:02:20.489]                   }
[17:02:20.489]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.489]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.489]                     cond$call), session = sessionInformation(), 
[17:02:20.489]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.489]                   signalCondition(cond)
[17:02:20.489]                 }
[17:02:20.489]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.489]                 "immediateCondition"))) {
[17:02:20.489]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.489]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.489]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.489]                   if (TRUE && !signal) {
[17:02:20.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.489]                     {
[17:02:20.489]                       inherits <- base::inherits
[17:02:20.489]                       invokeRestart <- base::invokeRestart
[17:02:20.489]                       is.null <- base::is.null
[17:02:20.489]                       muffled <- FALSE
[17:02:20.489]                       if (inherits(cond, "message")) {
[17:02:20.489]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.489]                         if (muffled) 
[17:02:20.489]                           invokeRestart("muffleMessage")
[17:02:20.489]                       }
[17:02:20.489]                       else if (inherits(cond, "warning")) {
[17:02:20.489]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.489]                         if (muffled) 
[17:02:20.489]                           invokeRestart("muffleWarning")
[17:02:20.489]                       }
[17:02:20.489]                       else if (inherits(cond, "condition")) {
[17:02:20.489]                         if (!is.null(pattern)) {
[17:02:20.489]                           computeRestarts <- base::computeRestarts
[17:02:20.489]                           grepl <- base::grepl
[17:02:20.489]                           restarts <- computeRestarts(cond)
[17:02:20.489]                           for (restart in restarts) {
[17:02:20.489]                             name <- restart$name
[17:02:20.489]                             if (is.null(name)) 
[17:02:20.489]                               next
[17:02:20.489]                             if (!grepl(pattern, name)) 
[17:02:20.489]                               next
[17:02:20.489]                             invokeRestart(restart)
[17:02:20.489]                             muffled <- TRUE
[17:02:20.489]                             break
[17:02:20.489]                           }
[17:02:20.489]                         }
[17:02:20.489]                       }
[17:02:20.489]                       invisible(muffled)
[17:02:20.489]                     }
[17:02:20.489]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.489]                   }
[17:02:20.489]                 }
[17:02:20.489]                 else {
[17:02:20.489]                   if (TRUE) {
[17:02:20.489]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.489]                     {
[17:02:20.489]                       inherits <- base::inherits
[17:02:20.489]                       invokeRestart <- base::invokeRestart
[17:02:20.489]                       is.null <- base::is.null
[17:02:20.489]                       muffled <- FALSE
[17:02:20.489]                       if (inherits(cond, "message")) {
[17:02:20.489]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.489]                         if (muffled) 
[17:02:20.489]                           invokeRestart("muffleMessage")
[17:02:20.489]                       }
[17:02:20.489]                       else if (inherits(cond, "warning")) {
[17:02:20.489]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.489]                         if (muffled) 
[17:02:20.489]                           invokeRestart("muffleWarning")
[17:02:20.489]                       }
[17:02:20.489]                       else if (inherits(cond, "condition")) {
[17:02:20.489]                         if (!is.null(pattern)) {
[17:02:20.489]                           computeRestarts <- base::computeRestarts
[17:02:20.489]                           grepl <- base::grepl
[17:02:20.489]                           restarts <- computeRestarts(cond)
[17:02:20.489]                           for (restart in restarts) {
[17:02:20.489]                             name <- restart$name
[17:02:20.489]                             if (is.null(name)) 
[17:02:20.489]                               next
[17:02:20.489]                             if (!grepl(pattern, name)) 
[17:02:20.489]                               next
[17:02:20.489]                             invokeRestart(restart)
[17:02:20.489]                             muffled <- TRUE
[17:02:20.489]                             break
[17:02:20.489]                           }
[17:02:20.489]                         }
[17:02:20.489]                       }
[17:02:20.489]                       invisible(muffled)
[17:02:20.489]                     }
[17:02:20.489]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.489]                   }
[17:02:20.489]                 }
[17:02:20.489]             }
[17:02:20.489]         }))
[17:02:20.489]     }, error = function(ex) {
[17:02:20.489]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.489]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.489]                 ...future.rng), started = ...future.startTime, 
[17:02:20.489]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.489]             version = "1.8"), class = "FutureResult")
[17:02:20.489]     }, finally = {
[17:02:20.489]         if (!identical(...future.workdir, getwd())) 
[17:02:20.489]             setwd(...future.workdir)
[17:02:20.489]         {
[17:02:20.489]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.489]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.489]             }
[17:02:20.489]             base::options(...future.oldOptions)
[17:02:20.489]             if (.Platform$OS.type == "windows") {
[17:02:20.489]                 old_names <- names(...future.oldEnvVars)
[17:02:20.489]                 envs <- base::Sys.getenv()
[17:02:20.489]                 names <- names(envs)
[17:02:20.489]                 common <- intersect(names, old_names)
[17:02:20.489]                 added <- setdiff(names, old_names)
[17:02:20.489]                 removed <- setdiff(old_names, names)
[17:02:20.489]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.489]                   envs[common]]
[17:02:20.489]                 NAMES <- toupper(changed)
[17:02:20.489]                 args <- list()
[17:02:20.489]                 for (kk in seq_along(NAMES)) {
[17:02:20.489]                   name <- changed[[kk]]
[17:02:20.489]                   NAME <- NAMES[[kk]]
[17:02:20.489]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.489]                     next
[17:02:20.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.489]                 }
[17:02:20.489]                 NAMES <- toupper(added)
[17:02:20.489]                 for (kk in seq_along(NAMES)) {
[17:02:20.489]                   name <- added[[kk]]
[17:02:20.489]                   NAME <- NAMES[[kk]]
[17:02:20.489]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.489]                     next
[17:02:20.489]                   args[[name]] <- ""
[17:02:20.489]                 }
[17:02:20.489]                 NAMES <- toupper(removed)
[17:02:20.489]                 for (kk in seq_along(NAMES)) {
[17:02:20.489]                   name <- removed[[kk]]
[17:02:20.489]                   NAME <- NAMES[[kk]]
[17:02:20.489]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.489]                     next
[17:02:20.489]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.489]                 }
[17:02:20.489]                 if (length(args) > 0) 
[17:02:20.489]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.489]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.489]             }
[17:02:20.489]             else {
[17:02:20.489]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.489]             }
[17:02:20.489]             {
[17:02:20.489]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.489]                   0L) {
[17:02:20.489]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.489]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.489]                   base::options(opts)
[17:02:20.489]                 }
[17:02:20.489]                 {
[17:02:20.489]                   {
[17:02:20.489]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.489]                     NULL
[17:02:20.489]                   }
[17:02:20.489]                   options(future.plan = NULL)
[17:02:20.489]                   if (is.na(NA_character_)) 
[17:02:20.489]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.489]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.489]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.489]                     .init = FALSE)
[17:02:20.489]                 }
[17:02:20.489]             }
[17:02:20.489]         }
[17:02:20.489]     })
[17:02:20.489]     if (TRUE) {
[17:02:20.489]         base::sink(type = "output", split = FALSE)
[17:02:20.489]         if (TRUE) {
[17:02:20.489]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.489]         }
[17:02:20.489]         else {
[17:02:20.489]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.489]         }
[17:02:20.489]         base::close(...future.stdout)
[17:02:20.489]         ...future.stdout <- NULL
[17:02:20.489]     }
[17:02:20.489]     ...future.result$conditions <- ...future.conditions
[17:02:20.489]     ...future.result$finished <- base::Sys.time()
[17:02:20.489]     ...future.result
[17:02:20.489] }
[17:02:20.492] assign_globals() ...
[17:02:20.492] List of 1
[17:02:20.492]  $ ii: int 1
[17:02:20.492]  - attr(*, "where")=List of 1
[17:02:20.492]   ..$ ii:<environment: R_EmptyEnv> 
[17:02:20.492]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.492]  - attr(*, "resolved")= logi FALSE
[17:02:20.492]  - attr(*, "total_size")= num 56
[17:02:20.492]  - attr(*, "already-done")= logi TRUE
[17:02:20.495] - copied ‘ii’ to environment
[17:02:20.495] assign_globals() ... done
[17:02:20.495] requestCore(): workers = 2
[17:02:20.497] MulticoreFuture started
[17:02:20.498] - Launch lazy future ... done
[17:02:20.498] run() for ‘MulticoreFuture’ ... done
[17:02:20.498] plan(): Setting new future strategy stack:
[17:02:20.499] getGlobalsAndPackages() ...
[17:02:20.499] Searching for globals...
[17:02:20.499] List of future strategies:
[17:02:20.499] 1. sequential:
[17:02:20.499]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.499]    - tweaked: FALSE
[17:02:20.499]    - call: NULL
[17:02:20.500] plan(): nbrOfWorkers() = 1
[17:02:20.501] plan(): Setting new future strategy stack:
[17:02:20.502] List of future strategies:
[17:02:20.502] 1. multicore:
[17:02:20.502]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.502]    - tweaked: FALSE
[17:02:20.502]    - call: plan(strategy)
[17:02:20.502] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:20.502] Searching for globals ... DONE
[17:02:20.503] Resolving globals: FALSE
[17:02:20.503] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.504] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:20.504] - globals: [1] ‘ii’
[17:02:20.505] 
[17:02:20.505] getGlobalsAndPackages() ... DONE
[17:02:20.505] run() for ‘Future’ ...
[17:02:20.506] - state: ‘created’
[17:02:20.506] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.507] plan(): nbrOfWorkers() = 2
[17:02:20.511] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.511] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.511]   - Field: ‘label’
[17:02:20.511]   - Field: ‘local’
[17:02:20.511]   - Field: ‘owner’
[17:02:20.511]   - Field: ‘envir’
[17:02:20.512]   - Field: ‘workers’
[17:02:20.512]   - Field: ‘packages’
[17:02:20.512]   - Field: ‘gc’
[17:02:20.512]   - Field: ‘job’
[17:02:20.512]   - Field: ‘conditions’
[17:02:20.512]   - Field: ‘expr’
[17:02:20.512]   - Field: ‘uuid’
[17:02:20.513]   - Field: ‘seed’
[17:02:20.513]   - Field: ‘version’
[17:02:20.513]   - Field: ‘result’
[17:02:20.513]   - Field: ‘asynchronous’
[17:02:20.513]   - Field: ‘calls’
[17:02:20.513]   - Field: ‘globals’
[17:02:20.513]   - Field: ‘stdout’
[17:02:20.514]   - Field: ‘earlySignal’
[17:02:20.514]   - Field: ‘lazy’
[17:02:20.514]   - Field: ‘state’
[17:02:20.514] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.514] - Launch lazy future ...
[17:02:20.514] Packages needed by the future expression (n = 0): <none>
[17:02:20.515] Packages needed by future strategies (n = 0): <none>
[17:02:20.515] {
[17:02:20.515]     {
[17:02:20.515]         {
[17:02:20.515]             ...future.startTime <- base::Sys.time()
[17:02:20.515]             {
[17:02:20.515]                 {
[17:02:20.515]                   {
[17:02:20.515]                     {
[17:02:20.515]                       base::local({
[17:02:20.515]                         has_future <- base::requireNamespace("future", 
[17:02:20.515]                           quietly = TRUE)
[17:02:20.515]                         if (has_future) {
[17:02:20.515]                           ns <- base::getNamespace("future")
[17:02:20.515]                           version <- ns[[".package"]][["version"]]
[17:02:20.515]                           if (is.null(version)) 
[17:02:20.515]                             version <- utils::packageVersion("future")
[17:02:20.515]                         }
[17:02:20.515]                         else {
[17:02:20.515]                           version <- NULL
[17:02:20.515]                         }
[17:02:20.515]                         if (!has_future || version < "1.8.0") {
[17:02:20.515]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.515]                             "", base::R.version$version.string), 
[17:02:20.515]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.515]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.515]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.515]                               "release", "version")], collapse = " "), 
[17:02:20.515]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.515]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.515]                             info)
[17:02:20.515]                           info <- base::paste(info, collapse = "; ")
[17:02:20.515]                           if (!has_future) {
[17:02:20.515]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.515]                               info)
[17:02:20.515]                           }
[17:02:20.515]                           else {
[17:02:20.515]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.515]                               info, version)
[17:02:20.515]                           }
[17:02:20.515]                           base::stop(msg)
[17:02:20.515]                         }
[17:02:20.515]                       })
[17:02:20.515]                     }
[17:02:20.515]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.515]                     base::options(mc.cores = 1L)
[17:02:20.515]                   }
[17:02:20.515]                   ...future.strategy.old <- future::plan("list")
[17:02:20.515]                   options(future.plan = NULL)
[17:02:20.515]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.515]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.515]                 }
[17:02:20.515]                 ...future.workdir <- getwd()
[17:02:20.515]             }
[17:02:20.515]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.515]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.515]         }
[17:02:20.515]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.515]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.515]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.515]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.515]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.515]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.515]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.515]             base::names(...future.oldOptions))
[17:02:20.515]     }
[17:02:20.515]     if (FALSE) {
[17:02:20.515]     }
[17:02:20.515]     else {
[17:02:20.515]         if (TRUE) {
[17:02:20.515]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.515]                 open = "w")
[17:02:20.515]         }
[17:02:20.515]         else {
[17:02:20.515]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.515]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.515]         }
[17:02:20.515]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.515]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.515]             base::sink(type = "output", split = FALSE)
[17:02:20.515]             base::close(...future.stdout)
[17:02:20.515]         }, add = TRUE)
[17:02:20.515]     }
[17:02:20.515]     ...future.frame <- base::sys.nframe()
[17:02:20.515]     ...future.conditions <- base::list()
[17:02:20.515]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.515]     if (FALSE) {
[17:02:20.515]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.515]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.515]     }
[17:02:20.515]     ...future.result <- base::tryCatch({
[17:02:20.515]         base::withCallingHandlers({
[17:02:20.515]             ...future.value <- base::withVisible(base::local({
[17:02:20.515]                 withCallingHandlers({
[17:02:20.515]                   {
[17:02:20.515]                     if (ii%%2 == 0) 
[17:02:20.515]                       stop("Woops!")
[17:02:20.515]                     ii
[17:02:20.515]                   }
[17:02:20.515]                 }, immediateCondition = function(cond) {
[17:02:20.515]                   save_rds <- function (object, pathname, ...) 
[17:02:20.515]                   {
[17:02:20.515]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.515]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.515]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.515]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.515]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.515]                         fi_tmp[["mtime"]])
[17:02:20.515]                     }
[17:02:20.515]                     tryCatch({
[17:02:20.515]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.515]                     }, error = function(ex) {
[17:02:20.515]                       msg <- conditionMessage(ex)
[17:02:20.515]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.515]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.515]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.515]                         fi_tmp[["mtime"]], msg)
[17:02:20.515]                       ex$message <- msg
[17:02:20.515]                       stop(ex)
[17:02:20.515]                     })
[17:02:20.515]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.515]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.515]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.515]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.515]                       fi <- file.info(pathname)
[17:02:20.515]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.515]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.515]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.515]                         fi[["size"]], fi[["mtime"]])
[17:02:20.515]                       stop(msg)
[17:02:20.515]                     }
[17:02:20.515]                     invisible(pathname)
[17:02:20.515]                   }
[17:02:20.515]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.515]                     rootPath = tempdir()) 
[17:02:20.515]                   {
[17:02:20.515]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.515]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.515]                       tmpdir = path, fileext = ".rds")
[17:02:20.515]                     save_rds(obj, file)
[17:02:20.515]                   }
[17:02:20.515]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.515]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.515]                   {
[17:02:20.515]                     inherits <- base::inherits
[17:02:20.515]                     invokeRestart <- base::invokeRestart
[17:02:20.515]                     is.null <- base::is.null
[17:02:20.515]                     muffled <- FALSE
[17:02:20.515]                     if (inherits(cond, "message")) {
[17:02:20.515]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.515]                       if (muffled) 
[17:02:20.515]                         invokeRestart("muffleMessage")
[17:02:20.515]                     }
[17:02:20.515]                     else if (inherits(cond, "warning")) {
[17:02:20.515]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.515]                       if (muffled) 
[17:02:20.515]                         invokeRestart("muffleWarning")
[17:02:20.515]                     }
[17:02:20.515]                     else if (inherits(cond, "condition")) {
[17:02:20.515]                       if (!is.null(pattern)) {
[17:02:20.515]                         computeRestarts <- base::computeRestarts
[17:02:20.515]                         grepl <- base::grepl
[17:02:20.515]                         restarts <- computeRestarts(cond)
[17:02:20.515]                         for (restart in restarts) {
[17:02:20.515]                           name <- restart$name
[17:02:20.515]                           if (is.null(name)) 
[17:02:20.515]                             next
[17:02:20.515]                           if (!grepl(pattern, name)) 
[17:02:20.515]                             next
[17:02:20.515]                           invokeRestart(restart)
[17:02:20.515]                           muffled <- TRUE
[17:02:20.515]                           break
[17:02:20.515]                         }
[17:02:20.515]                       }
[17:02:20.515]                     }
[17:02:20.515]                     invisible(muffled)
[17:02:20.515]                   }
[17:02:20.515]                   muffleCondition(cond)
[17:02:20.515]                 })
[17:02:20.515]             }))
[17:02:20.515]             future::FutureResult(value = ...future.value$value, 
[17:02:20.515]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.515]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.515]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.515]                     ...future.globalenv.names))
[17:02:20.515]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.515]         }, condition = base::local({
[17:02:20.515]             c <- base::c
[17:02:20.515]             inherits <- base::inherits
[17:02:20.515]             invokeRestart <- base::invokeRestart
[17:02:20.515]             length <- base::length
[17:02:20.515]             list <- base::list
[17:02:20.515]             seq.int <- base::seq.int
[17:02:20.515]             signalCondition <- base::signalCondition
[17:02:20.515]             sys.calls <- base::sys.calls
[17:02:20.515]             `[[` <- base::`[[`
[17:02:20.515]             `+` <- base::`+`
[17:02:20.515]             `<<-` <- base::`<<-`
[17:02:20.515]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.515]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.515]                   3L)]
[17:02:20.515]             }
[17:02:20.515]             function(cond) {
[17:02:20.515]                 is_error <- inherits(cond, "error")
[17:02:20.515]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.515]                   NULL)
[17:02:20.515]                 if (is_error) {
[17:02:20.515]                   sessionInformation <- function() {
[17:02:20.515]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.515]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.515]                       search = base::search(), system = base::Sys.info())
[17:02:20.515]                   }
[17:02:20.515]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.515]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.515]                     cond$call), session = sessionInformation(), 
[17:02:20.515]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.515]                   signalCondition(cond)
[17:02:20.515]                 }
[17:02:20.515]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.515]                 "immediateCondition"))) {
[17:02:20.515]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.515]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.515]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.515]                   if (TRUE && !signal) {
[17:02:20.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.515]                     {
[17:02:20.515]                       inherits <- base::inherits
[17:02:20.515]                       invokeRestart <- base::invokeRestart
[17:02:20.515]                       is.null <- base::is.null
[17:02:20.515]                       muffled <- FALSE
[17:02:20.515]                       if (inherits(cond, "message")) {
[17:02:20.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.515]                         if (muffled) 
[17:02:20.515]                           invokeRestart("muffleMessage")
[17:02:20.515]                       }
[17:02:20.515]                       else if (inherits(cond, "warning")) {
[17:02:20.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.515]                         if (muffled) 
[17:02:20.515]                           invokeRestart("muffleWarning")
[17:02:20.515]                       }
[17:02:20.515]                       else if (inherits(cond, "condition")) {
[17:02:20.515]                         if (!is.null(pattern)) {
[17:02:20.515]                           computeRestarts <- base::computeRestarts
[17:02:20.515]                           grepl <- base::grepl
[17:02:20.515]                           restarts <- computeRestarts(cond)
[17:02:20.515]                           for (restart in restarts) {
[17:02:20.515]                             name <- restart$name
[17:02:20.515]                             if (is.null(name)) 
[17:02:20.515]                               next
[17:02:20.515]                             if (!grepl(pattern, name)) 
[17:02:20.515]                               next
[17:02:20.515]                             invokeRestart(restart)
[17:02:20.515]                             muffled <- TRUE
[17:02:20.515]                             break
[17:02:20.515]                           }
[17:02:20.515]                         }
[17:02:20.515]                       }
[17:02:20.515]                       invisible(muffled)
[17:02:20.515]                     }
[17:02:20.515]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.515]                   }
[17:02:20.515]                 }
[17:02:20.515]                 else {
[17:02:20.515]                   if (TRUE) {
[17:02:20.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.515]                     {
[17:02:20.515]                       inherits <- base::inherits
[17:02:20.515]                       invokeRestart <- base::invokeRestart
[17:02:20.515]                       is.null <- base::is.null
[17:02:20.515]                       muffled <- FALSE
[17:02:20.515]                       if (inherits(cond, "message")) {
[17:02:20.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.515]                         if (muffled) 
[17:02:20.515]                           invokeRestart("muffleMessage")
[17:02:20.515]                       }
[17:02:20.515]                       else if (inherits(cond, "warning")) {
[17:02:20.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.515]                         if (muffled) 
[17:02:20.515]                           invokeRestart("muffleWarning")
[17:02:20.515]                       }
[17:02:20.515]                       else if (inherits(cond, "condition")) {
[17:02:20.515]                         if (!is.null(pattern)) {
[17:02:20.515]                           computeRestarts <- base::computeRestarts
[17:02:20.515]                           grepl <- base::grepl
[17:02:20.515]                           restarts <- computeRestarts(cond)
[17:02:20.515]                           for (restart in restarts) {
[17:02:20.515]                             name <- restart$name
[17:02:20.515]                             if (is.null(name)) 
[17:02:20.515]                               next
[17:02:20.515]                             if (!grepl(pattern, name)) 
[17:02:20.515]                               next
[17:02:20.515]                             invokeRestart(restart)
[17:02:20.515]                             muffled <- TRUE
[17:02:20.515]                             break
[17:02:20.515]                           }
[17:02:20.515]                         }
[17:02:20.515]                       }
[17:02:20.515]                       invisible(muffled)
[17:02:20.515]                     }
[17:02:20.515]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.515]                   }
[17:02:20.515]                 }
[17:02:20.515]             }
[17:02:20.515]         }))
[17:02:20.515]     }, error = function(ex) {
[17:02:20.515]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.515]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.515]                 ...future.rng), started = ...future.startTime, 
[17:02:20.515]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.515]             version = "1.8"), class = "FutureResult")
[17:02:20.515]     }, finally = {
[17:02:20.515]         if (!identical(...future.workdir, getwd())) 
[17:02:20.515]             setwd(...future.workdir)
[17:02:20.515]         {
[17:02:20.515]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.515]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.515]             }
[17:02:20.515]             base::options(...future.oldOptions)
[17:02:20.515]             if (.Platform$OS.type == "windows") {
[17:02:20.515]                 old_names <- names(...future.oldEnvVars)
[17:02:20.515]                 envs <- base::Sys.getenv()
[17:02:20.515]                 names <- names(envs)
[17:02:20.515]                 common <- intersect(names, old_names)
[17:02:20.515]                 added <- setdiff(names, old_names)
[17:02:20.515]                 removed <- setdiff(old_names, names)
[17:02:20.515]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.515]                   envs[common]]
[17:02:20.515]                 NAMES <- toupper(changed)
[17:02:20.515]                 args <- list()
[17:02:20.515]                 for (kk in seq_along(NAMES)) {
[17:02:20.515]                   name <- changed[[kk]]
[17:02:20.515]                   NAME <- NAMES[[kk]]
[17:02:20.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.515]                     next
[17:02:20.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.515]                 }
[17:02:20.515]                 NAMES <- toupper(added)
[17:02:20.515]                 for (kk in seq_along(NAMES)) {
[17:02:20.515]                   name <- added[[kk]]
[17:02:20.515]                   NAME <- NAMES[[kk]]
[17:02:20.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.515]                     next
[17:02:20.515]                   args[[name]] <- ""
[17:02:20.515]                 }
[17:02:20.515]                 NAMES <- toupper(removed)
[17:02:20.515]                 for (kk in seq_along(NAMES)) {
[17:02:20.515]                   name <- removed[[kk]]
[17:02:20.515]                   NAME <- NAMES[[kk]]
[17:02:20.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.515]                     next
[17:02:20.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.515]                 }
[17:02:20.515]                 if (length(args) > 0) 
[17:02:20.515]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.515]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.515]             }
[17:02:20.515]             else {
[17:02:20.515]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.515]             }
[17:02:20.515]             {
[17:02:20.515]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.515]                   0L) {
[17:02:20.515]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.515]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.515]                   base::options(opts)
[17:02:20.515]                 }
[17:02:20.515]                 {
[17:02:20.515]                   {
[17:02:20.515]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.515]                     NULL
[17:02:20.515]                   }
[17:02:20.515]                   options(future.plan = NULL)
[17:02:20.515]                   if (is.na(NA_character_)) 
[17:02:20.515]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.515]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.515]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.515]                     .init = FALSE)
[17:02:20.515]                 }
[17:02:20.515]             }
[17:02:20.515]         }
[17:02:20.515]     })
[17:02:20.515]     if (TRUE) {
[17:02:20.515]         base::sink(type = "output", split = FALSE)
[17:02:20.515]         if (TRUE) {
[17:02:20.515]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.515]         }
[17:02:20.515]         else {
[17:02:20.515]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.515]         }
[17:02:20.515]         base::close(...future.stdout)
[17:02:20.515]         ...future.stdout <- NULL
[17:02:20.515]     }
[17:02:20.515]     ...future.result$conditions <- ...future.conditions
[17:02:20.515]     ...future.result$finished <- base::Sys.time()
[17:02:20.515]     ...future.result
[17:02:20.515] }
[17:02:20.519] assign_globals() ...
[17:02:20.519] List of 1
[17:02:20.519]  $ ii: int 2
[17:02:20.519]  - attr(*, "where")=List of 1
[17:02:20.519]   ..$ ii:<environment: R_EmptyEnv> 
[17:02:20.519]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.519]  - attr(*, "resolved")= logi FALSE
[17:02:20.519]  - attr(*, "total_size")= num 56
[17:02:20.519]  - attr(*, "already-done")= logi TRUE
[17:02:20.523] - copied ‘ii’ to environment
[17:02:20.523] assign_globals() ... done
[17:02:20.523] requestCore(): workers = 2
[17:02:20.525] MulticoreFuture started
[17:02:20.526] - Launch lazy future ... done
[17:02:20.526] run() for ‘MulticoreFuture’ ... done
[17:02:20.526] plan(): Setting new future strategy stack:
[17:02:20.527] getGlobalsAndPackages() ...
[17:02:20.526] List of future strategies:
[17:02:20.526] 1. sequential:
[17:02:20.526]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.526]    - tweaked: FALSE
[17:02:20.526]    - call: NULL
[17:02:20.531] Searching for globals...
[17:02:20.531] plan(): nbrOfWorkers() = 1
[17:02:20.533] plan(): Setting new future strategy stack:
[17:02:20.533] List of future strategies:
[17:02:20.533] 1. multicore:
[17:02:20.533]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.533]    - tweaked: FALSE
[17:02:20.533]    - call: plan(strategy)
[17:02:20.535] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:20.535] Searching for globals ... DONE
[17:02:20.535] Resolving globals: FALSE
[17:02:20.536] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.537] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:20.537] - globals: [1] ‘ii’
[17:02:20.538] 
[17:02:20.538] getGlobalsAndPackages() ... DONE
[17:02:20.538] plan(): nbrOfWorkers() = 2
[17:02:20.538] run() for ‘Future’ ...
[17:02:20.539] - state: ‘created’
[17:02:20.539] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.544] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.544] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.544]   - Field: ‘label’
[17:02:20.544]   - Field: ‘local’
[17:02:20.544]   - Field: ‘owner’
[17:02:20.545]   - Field: ‘envir’
[17:02:20.545]   - Field: ‘workers’
[17:02:20.545]   - Field: ‘packages’
[17:02:20.545]   - Field: ‘gc’
[17:02:20.545]   - Field: ‘job’
[17:02:20.545]   - Field: ‘conditions’
[17:02:20.545]   - Field: ‘expr’
[17:02:20.546]   - Field: ‘uuid’
[17:02:20.546]   - Field: ‘seed’
[17:02:20.546]   - Field: ‘version’
[17:02:20.546]   - Field: ‘result’
[17:02:20.546]   - Field: ‘asynchronous’
[17:02:20.546]   - Field: ‘calls’
[17:02:20.546]   - Field: ‘globals’
[17:02:20.546]   - Field: ‘stdout’
[17:02:20.547]   - Field: ‘earlySignal’
[17:02:20.547]   - Field: ‘lazy’
[17:02:20.547]   - Field: ‘state’
[17:02:20.547] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.547] - Launch lazy future ...
[17:02:20.548] Packages needed by the future expression (n = 0): <none>
[17:02:20.548] Packages needed by future strategies (n = 0): <none>
[17:02:20.549] {
[17:02:20.549]     {
[17:02:20.549]         {
[17:02:20.549]             ...future.startTime <- base::Sys.time()
[17:02:20.549]             {
[17:02:20.549]                 {
[17:02:20.549]                   {
[17:02:20.549]                     {
[17:02:20.549]                       base::local({
[17:02:20.549]                         has_future <- base::requireNamespace("future", 
[17:02:20.549]                           quietly = TRUE)
[17:02:20.549]                         if (has_future) {
[17:02:20.549]                           ns <- base::getNamespace("future")
[17:02:20.549]                           version <- ns[[".package"]][["version"]]
[17:02:20.549]                           if (is.null(version)) 
[17:02:20.549]                             version <- utils::packageVersion("future")
[17:02:20.549]                         }
[17:02:20.549]                         else {
[17:02:20.549]                           version <- NULL
[17:02:20.549]                         }
[17:02:20.549]                         if (!has_future || version < "1.8.0") {
[17:02:20.549]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.549]                             "", base::R.version$version.string), 
[17:02:20.549]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.549]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.549]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.549]                               "release", "version")], collapse = " "), 
[17:02:20.549]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.549]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.549]                             info)
[17:02:20.549]                           info <- base::paste(info, collapse = "; ")
[17:02:20.549]                           if (!has_future) {
[17:02:20.549]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.549]                               info)
[17:02:20.549]                           }
[17:02:20.549]                           else {
[17:02:20.549]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.549]                               info, version)
[17:02:20.549]                           }
[17:02:20.549]                           base::stop(msg)
[17:02:20.549]                         }
[17:02:20.549]                       })
[17:02:20.549]                     }
[17:02:20.549]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.549]                     base::options(mc.cores = 1L)
[17:02:20.549]                   }
[17:02:20.549]                   ...future.strategy.old <- future::plan("list")
[17:02:20.549]                   options(future.plan = NULL)
[17:02:20.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.549]                 }
[17:02:20.549]                 ...future.workdir <- getwd()
[17:02:20.549]             }
[17:02:20.549]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.549]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.549]         }
[17:02:20.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.549]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.549]             base::names(...future.oldOptions))
[17:02:20.549]     }
[17:02:20.549]     if (FALSE) {
[17:02:20.549]     }
[17:02:20.549]     else {
[17:02:20.549]         if (TRUE) {
[17:02:20.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.549]                 open = "w")
[17:02:20.549]         }
[17:02:20.549]         else {
[17:02:20.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.549]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.549]         }
[17:02:20.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.549]             base::sink(type = "output", split = FALSE)
[17:02:20.549]             base::close(...future.stdout)
[17:02:20.549]         }, add = TRUE)
[17:02:20.549]     }
[17:02:20.549]     ...future.frame <- base::sys.nframe()
[17:02:20.549]     ...future.conditions <- base::list()
[17:02:20.549]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.549]     if (FALSE) {
[17:02:20.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.549]     }
[17:02:20.549]     ...future.result <- base::tryCatch({
[17:02:20.549]         base::withCallingHandlers({
[17:02:20.549]             ...future.value <- base::withVisible(base::local({
[17:02:20.549]                 withCallingHandlers({
[17:02:20.549]                   {
[17:02:20.549]                     if (ii%%2 == 0) 
[17:02:20.549]                       stop("Woops!")
[17:02:20.549]                     ii
[17:02:20.549]                   }
[17:02:20.549]                 }, immediateCondition = function(cond) {
[17:02:20.549]                   save_rds <- function (object, pathname, ...) 
[17:02:20.549]                   {
[17:02:20.549]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.549]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.549]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.549]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.549]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.549]                         fi_tmp[["mtime"]])
[17:02:20.549]                     }
[17:02:20.549]                     tryCatch({
[17:02:20.549]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.549]                     }, error = function(ex) {
[17:02:20.549]                       msg <- conditionMessage(ex)
[17:02:20.549]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.549]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.549]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.549]                         fi_tmp[["mtime"]], msg)
[17:02:20.549]                       ex$message <- msg
[17:02:20.549]                       stop(ex)
[17:02:20.549]                     })
[17:02:20.549]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.549]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.549]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.549]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.549]                       fi <- file.info(pathname)
[17:02:20.549]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.549]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.549]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.549]                         fi[["size"]], fi[["mtime"]])
[17:02:20.549]                       stop(msg)
[17:02:20.549]                     }
[17:02:20.549]                     invisible(pathname)
[17:02:20.549]                   }
[17:02:20.549]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.549]                     rootPath = tempdir()) 
[17:02:20.549]                   {
[17:02:20.549]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.549]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.549]                       tmpdir = path, fileext = ".rds")
[17:02:20.549]                     save_rds(obj, file)
[17:02:20.549]                   }
[17:02:20.549]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.549]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.549]                   {
[17:02:20.549]                     inherits <- base::inherits
[17:02:20.549]                     invokeRestart <- base::invokeRestart
[17:02:20.549]                     is.null <- base::is.null
[17:02:20.549]                     muffled <- FALSE
[17:02:20.549]                     if (inherits(cond, "message")) {
[17:02:20.549]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.549]                       if (muffled) 
[17:02:20.549]                         invokeRestart("muffleMessage")
[17:02:20.549]                     }
[17:02:20.549]                     else if (inherits(cond, "warning")) {
[17:02:20.549]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.549]                       if (muffled) 
[17:02:20.549]                         invokeRestart("muffleWarning")
[17:02:20.549]                     }
[17:02:20.549]                     else if (inherits(cond, "condition")) {
[17:02:20.549]                       if (!is.null(pattern)) {
[17:02:20.549]                         computeRestarts <- base::computeRestarts
[17:02:20.549]                         grepl <- base::grepl
[17:02:20.549]                         restarts <- computeRestarts(cond)
[17:02:20.549]                         for (restart in restarts) {
[17:02:20.549]                           name <- restart$name
[17:02:20.549]                           if (is.null(name)) 
[17:02:20.549]                             next
[17:02:20.549]                           if (!grepl(pattern, name)) 
[17:02:20.549]                             next
[17:02:20.549]                           invokeRestart(restart)
[17:02:20.549]                           muffled <- TRUE
[17:02:20.549]                           break
[17:02:20.549]                         }
[17:02:20.549]                       }
[17:02:20.549]                     }
[17:02:20.549]                     invisible(muffled)
[17:02:20.549]                   }
[17:02:20.549]                   muffleCondition(cond)
[17:02:20.549]                 })
[17:02:20.549]             }))
[17:02:20.549]             future::FutureResult(value = ...future.value$value, 
[17:02:20.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.549]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.549]                     ...future.globalenv.names))
[17:02:20.549]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.549]         }, condition = base::local({
[17:02:20.549]             c <- base::c
[17:02:20.549]             inherits <- base::inherits
[17:02:20.549]             invokeRestart <- base::invokeRestart
[17:02:20.549]             length <- base::length
[17:02:20.549]             list <- base::list
[17:02:20.549]             seq.int <- base::seq.int
[17:02:20.549]             signalCondition <- base::signalCondition
[17:02:20.549]             sys.calls <- base::sys.calls
[17:02:20.549]             `[[` <- base::`[[`
[17:02:20.549]             `+` <- base::`+`
[17:02:20.549]             `<<-` <- base::`<<-`
[17:02:20.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.549]                   3L)]
[17:02:20.549]             }
[17:02:20.549]             function(cond) {
[17:02:20.549]                 is_error <- inherits(cond, "error")
[17:02:20.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.549]                   NULL)
[17:02:20.549]                 if (is_error) {
[17:02:20.549]                   sessionInformation <- function() {
[17:02:20.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.549]                       search = base::search(), system = base::Sys.info())
[17:02:20.549]                   }
[17:02:20.549]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.549]                     cond$call), session = sessionInformation(), 
[17:02:20.549]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.549]                   signalCondition(cond)
[17:02:20.549]                 }
[17:02:20.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.549]                 "immediateCondition"))) {
[17:02:20.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.549]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.549]                   if (TRUE && !signal) {
[17:02:20.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.549]                     {
[17:02:20.549]                       inherits <- base::inherits
[17:02:20.549]                       invokeRestart <- base::invokeRestart
[17:02:20.549]                       is.null <- base::is.null
[17:02:20.549]                       muffled <- FALSE
[17:02:20.549]                       if (inherits(cond, "message")) {
[17:02:20.549]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.549]                         if (muffled) 
[17:02:20.549]                           invokeRestart("muffleMessage")
[17:02:20.549]                       }
[17:02:20.549]                       else if (inherits(cond, "warning")) {
[17:02:20.549]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.549]                         if (muffled) 
[17:02:20.549]                           invokeRestart("muffleWarning")
[17:02:20.549]                       }
[17:02:20.549]                       else if (inherits(cond, "condition")) {
[17:02:20.549]                         if (!is.null(pattern)) {
[17:02:20.549]                           computeRestarts <- base::computeRestarts
[17:02:20.549]                           grepl <- base::grepl
[17:02:20.549]                           restarts <- computeRestarts(cond)
[17:02:20.549]                           for (restart in restarts) {
[17:02:20.549]                             name <- restart$name
[17:02:20.549]                             if (is.null(name)) 
[17:02:20.549]                               next
[17:02:20.549]                             if (!grepl(pattern, name)) 
[17:02:20.549]                               next
[17:02:20.549]                             invokeRestart(restart)
[17:02:20.549]                             muffled <- TRUE
[17:02:20.549]                             break
[17:02:20.549]                           }
[17:02:20.549]                         }
[17:02:20.549]                       }
[17:02:20.549]                       invisible(muffled)
[17:02:20.549]                     }
[17:02:20.549]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.549]                   }
[17:02:20.549]                 }
[17:02:20.549]                 else {
[17:02:20.549]                   if (TRUE) {
[17:02:20.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.549]                     {
[17:02:20.549]                       inherits <- base::inherits
[17:02:20.549]                       invokeRestart <- base::invokeRestart
[17:02:20.549]                       is.null <- base::is.null
[17:02:20.549]                       muffled <- FALSE
[17:02:20.549]                       if (inherits(cond, "message")) {
[17:02:20.549]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.549]                         if (muffled) 
[17:02:20.549]                           invokeRestart("muffleMessage")
[17:02:20.549]                       }
[17:02:20.549]                       else if (inherits(cond, "warning")) {
[17:02:20.549]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.549]                         if (muffled) 
[17:02:20.549]                           invokeRestart("muffleWarning")
[17:02:20.549]                       }
[17:02:20.549]                       else if (inherits(cond, "condition")) {
[17:02:20.549]                         if (!is.null(pattern)) {
[17:02:20.549]                           computeRestarts <- base::computeRestarts
[17:02:20.549]                           grepl <- base::grepl
[17:02:20.549]                           restarts <- computeRestarts(cond)
[17:02:20.549]                           for (restart in restarts) {
[17:02:20.549]                             name <- restart$name
[17:02:20.549]                             if (is.null(name)) 
[17:02:20.549]                               next
[17:02:20.549]                             if (!grepl(pattern, name)) 
[17:02:20.549]                               next
[17:02:20.549]                             invokeRestart(restart)
[17:02:20.549]                             muffled <- TRUE
[17:02:20.549]                             break
[17:02:20.549]                           }
[17:02:20.549]                         }
[17:02:20.549]                       }
[17:02:20.549]                       invisible(muffled)
[17:02:20.549]                     }
[17:02:20.549]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.549]                   }
[17:02:20.549]                 }
[17:02:20.549]             }
[17:02:20.549]         }))
[17:02:20.549]     }, error = function(ex) {
[17:02:20.549]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.549]                 ...future.rng), started = ...future.startTime, 
[17:02:20.549]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.549]             version = "1.8"), class = "FutureResult")
[17:02:20.549]     }, finally = {
[17:02:20.549]         if (!identical(...future.workdir, getwd())) 
[17:02:20.549]             setwd(...future.workdir)
[17:02:20.549]         {
[17:02:20.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.549]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.549]             }
[17:02:20.549]             base::options(...future.oldOptions)
[17:02:20.549]             if (.Platform$OS.type == "windows") {
[17:02:20.549]                 old_names <- names(...future.oldEnvVars)
[17:02:20.549]                 envs <- base::Sys.getenv()
[17:02:20.549]                 names <- names(envs)
[17:02:20.549]                 common <- intersect(names, old_names)
[17:02:20.549]                 added <- setdiff(names, old_names)
[17:02:20.549]                 removed <- setdiff(old_names, names)
[17:02:20.549]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.549]                   envs[common]]
[17:02:20.549]                 NAMES <- toupper(changed)
[17:02:20.549]                 args <- list()
[17:02:20.549]                 for (kk in seq_along(NAMES)) {
[17:02:20.549]                   name <- changed[[kk]]
[17:02:20.549]                   NAME <- NAMES[[kk]]
[17:02:20.549]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.549]                     next
[17:02:20.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.549]                 }
[17:02:20.549]                 NAMES <- toupper(added)
[17:02:20.549]                 for (kk in seq_along(NAMES)) {
[17:02:20.549]                   name <- added[[kk]]
[17:02:20.549]                   NAME <- NAMES[[kk]]
[17:02:20.549]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.549]                     next
[17:02:20.549]                   args[[name]] <- ""
[17:02:20.549]                 }
[17:02:20.549]                 NAMES <- toupper(removed)
[17:02:20.549]                 for (kk in seq_along(NAMES)) {
[17:02:20.549]                   name <- removed[[kk]]
[17:02:20.549]                   NAME <- NAMES[[kk]]
[17:02:20.549]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.549]                     next
[17:02:20.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.549]                 }
[17:02:20.549]                 if (length(args) > 0) 
[17:02:20.549]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.549]             }
[17:02:20.549]             else {
[17:02:20.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.549]             }
[17:02:20.549]             {
[17:02:20.549]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.549]                   0L) {
[17:02:20.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.549]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.549]                   base::options(opts)
[17:02:20.549]                 }
[17:02:20.549]                 {
[17:02:20.549]                   {
[17:02:20.549]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.549]                     NULL
[17:02:20.549]                   }
[17:02:20.549]                   options(future.plan = NULL)
[17:02:20.549]                   if (is.na(NA_character_)) 
[17:02:20.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.549]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.549]                     .init = FALSE)
[17:02:20.549]                 }
[17:02:20.549]             }
[17:02:20.549]         }
[17:02:20.549]     })
[17:02:20.549]     if (TRUE) {
[17:02:20.549]         base::sink(type = "output", split = FALSE)
[17:02:20.549]         if (TRUE) {
[17:02:20.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.549]         }
[17:02:20.549]         else {
[17:02:20.549]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.549]         }
[17:02:20.549]         base::close(...future.stdout)
[17:02:20.549]         ...future.stdout <- NULL
[17:02:20.549]     }
[17:02:20.549]     ...future.result$conditions <- ...future.conditions
[17:02:20.549]     ...future.result$finished <- base::Sys.time()
[17:02:20.549]     ...future.result
[17:02:20.549] }
[17:02:20.551] assign_globals() ...
[17:02:20.551] List of 1
[17:02:20.551]  $ ii: int 3
[17:02:20.551]  - attr(*, "where")=List of 1
[17:02:20.551]   ..$ ii:<environment: R_EmptyEnv> 
[17:02:20.551]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.551]  - attr(*, "resolved")= logi FALSE
[17:02:20.551]  - attr(*, "total_size")= num 56
[17:02:20.551]  - attr(*, "already-done")= logi TRUE
[17:02:20.555] - copied ‘ii’ to environment
[17:02:20.555] assign_globals() ... done
[17:02:20.556] requestCore(): workers = 2
[17:02:20.556] Poll #1 (0): usedCores() = 2, workers = 2
[17:02:20.567] result() for MulticoreFuture ...
[17:02:20.568] result() for MulticoreFuture ...
[17:02:20.568] result() for MulticoreFuture ... done
[17:02:20.569] result() for MulticoreFuture ... done
[17:02:20.569] result() for MulticoreFuture ...
[17:02:20.569] result() for MulticoreFuture ... done
[17:02:20.572] MulticoreFuture started
[17:02:20.573] - Launch lazy future ... done
[17:02:20.573] run() for ‘MulticoreFuture’ ... done
[17:02:20.573] result() for MulticoreFuture ...
[17:02:20.573] plan(): Setting new future strategy stack:
[17:02:20.574] result() for MulticoreFuture ... done
[17:02:20.574] result() for MulticoreFuture ...
[17:02:20.574] result() for MulticoreFuture ... done
[17:02:20.574] result() for MulticoreFuture ...
[17:02:20.574] List of future strategies:
[17:02:20.574] 1. sequential:
[17:02:20.574]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.574]    - tweaked: FALSE
[17:02:20.574]    - call: NULL
[17:02:20.575] plan(): nbrOfWorkers() = 1
[17:02:20.577] plan(): Setting new future strategy stack:
[17:02:20.577] List of future strategies:
[17:02:20.577] 1. multicore:
[17:02:20.577]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.577]    - tweaked: FALSE
[17:02:20.577]    - call: plan(strategy)
[17:02:20.578] result() for MulticoreFuture ...
[17:02:20.578] result() for MulticoreFuture ... done
[17:02:20.578] signalConditions() ...
[17:02:20.578]  - include = ‘immediateCondition’
[17:02:20.578]  - exclude = 
[17:02:20.578]  - resignal = FALSE
[17:02:20.579]  - Number of conditions: 1
[17:02:20.579] signalConditions() ... done
[17:02:20.579] result() for MulticoreFuture ... done
[17:02:20.579] result() for MulticoreFuture ...
[17:02:20.579] result() for MulticoreFuture ... done
[17:02:20.579] signalConditions() ...
[17:02:20.580]  - include = ‘immediateCondition’
[17:02:20.580]  - exclude = 
[17:02:20.580]  - resignal = FALSE
[17:02:20.580]  - Number of conditions: 1
[17:02:20.580] signalConditions() ... done
[17:02:20.581] Future state: ‘finished’
[17:02:20.581] result() for MulticoreFuture ...
[17:02:20.581] result() for MulticoreFuture ... done
[17:02:20.581] signalConditions() ...
[17:02:20.581]  - include = ‘condition’
[17:02:20.582]  - exclude = ‘immediateCondition’
[17:02:20.582]  - resignal = TRUE
[17:02:20.582]  - Number of conditions: 1
[17:02:20.582]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.582] signalConditions() ... done
[17:02:20.583] plan(): nbrOfWorkers() = 2
[17:02:20.583] result() for MulticoreFuture ...
[17:02:20.584] result() for MulticoreFuture ...
[17:02:20.584] result() for MulticoreFuture ... done
[17:02:20.584] result() for MulticoreFuture ... done
[17:02:20.584] result() for MulticoreFuture ...
[17:02:20.584] result() for MulticoreFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:02:20.585] result() for MulticoreFuture ...
[17:02:20.585] result() for MulticoreFuture ... done
[17:02:20.585] result() for MulticoreFuture ...
[17:02:20.585] result() for MulticoreFuture ... done
[17:02:20.586] signalConditions() ...
[17:02:20.586]  - include = ‘immediateCondition’
[17:02:20.586]  - exclude = 
[17:02:20.586]  - resignal = FALSE
[17:02:20.586]  - Number of conditions: 1
[17:02:20.586] signalConditions() ... done
[17:02:20.586] Future state: ‘finished’
[17:02:20.586] result() for MulticoreFuture ...
[17:02:20.586] result() for MulticoreFuture ... done
[17:02:20.587] signalConditions() ...
[17:02:20.587]  - include = ‘condition’
[17:02:20.587]  - exclude = ‘immediateCondition’
[17:02:20.587]  - resignal = TRUE
[17:02:20.587]  - Number of conditions: 1
[17:02:20.587]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.587] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:02:20.588] result() for MulticoreFuture ...
[17:02:20.588] result() for MulticoreFuture ... done
[17:02:20.588] result() for MulticoreFuture ...
[17:02:20.588] result() for MulticoreFuture ... done
[17:02:20.588] signalConditions() ...
[17:02:20.591]  - include = ‘immediateCondition’
[17:02:20.591]  - exclude = 
[17:02:20.591]  - resignal = FALSE
[17:02:20.591]  - Number of conditions: 1
[17:02:20.591] signalConditions() ... done
[17:02:20.592] Future state: ‘finished’
[17:02:20.592] result() for MulticoreFuture ...
[17:02:20.592] result() for MulticoreFuture ... done
[17:02:20.592] signalConditions() ...
[17:02:20.592]  - include = ‘condition’
[17:02:20.592]  - exclude = ‘immediateCondition’
[17:02:20.592]  - resignal = TRUE
[17:02:20.592]  - Number of conditions: 1
[17:02:20.593]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.593] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[17:02:20.593] getGlobalsAndPackages() ...
[17:02:20.593] Searching for globals...
[17:02:20.596] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[17:02:20.596] Searching for globals ... DONE
[17:02:20.596] Resolving globals: FALSE
[17:02:20.597] 
[17:02:20.597] 
[17:02:20.597] getGlobalsAndPackages() ... DONE
[17:02:20.597] run() for ‘Future’ ...
[17:02:20.597] - state: ‘created’
[17:02:20.598] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.602] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.602] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.602]   - Field: ‘label’
[17:02:20.602]   - Field: ‘local’
[17:02:20.602]   - Field: ‘owner’
[17:02:20.602]   - Field: ‘envir’
[17:02:20.603]   - Field: ‘workers’
[17:02:20.603]   - Field: ‘packages’
[17:02:20.603]   - Field: ‘gc’
[17:02:20.603]   - Field: ‘job’
[17:02:20.603]   - Field: ‘conditions’
[17:02:20.603]   - Field: ‘expr’
[17:02:20.603]   - Field: ‘uuid’
[17:02:20.604]   - Field: ‘seed’
[17:02:20.604]   - Field: ‘version’
[17:02:20.604]   - Field: ‘result’
[17:02:20.604]   - Field: ‘asynchronous’
[17:02:20.604]   - Field: ‘calls’
[17:02:20.604]   - Field: ‘globals’
[17:02:20.604]   - Field: ‘stdout’
[17:02:20.604]   - Field: ‘earlySignal’
[17:02:20.604]   - Field: ‘lazy’
[17:02:20.605]   - Field: ‘state’
[17:02:20.605] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.605] - Launch lazy future ...
[17:02:20.605] Packages needed by the future expression (n = 0): <none>
[17:02:20.605] Packages needed by future strategies (n = 0): <none>
[17:02:20.606] {
[17:02:20.606]     {
[17:02:20.606]         {
[17:02:20.606]             ...future.startTime <- base::Sys.time()
[17:02:20.606]             {
[17:02:20.606]                 {
[17:02:20.606]                   {
[17:02:20.606]                     {
[17:02:20.606]                       base::local({
[17:02:20.606]                         has_future <- base::requireNamespace("future", 
[17:02:20.606]                           quietly = TRUE)
[17:02:20.606]                         if (has_future) {
[17:02:20.606]                           ns <- base::getNamespace("future")
[17:02:20.606]                           version <- ns[[".package"]][["version"]]
[17:02:20.606]                           if (is.null(version)) 
[17:02:20.606]                             version <- utils::packageVersion("future")
[17:02:20.606]                         }
[17:02:20.606]                         else {
[17:02:20.606]                           version <- NULL
[17:02:20.606]                         }
[17:02:20.606]                         if (!has_future || version < "1.8.0") {
[17:02:20.606]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.606]                             "", base::R.version$version.string), 
[17:02:20.606]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.606]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.606]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.606]                               "release", "version")], collapse = " "), 
[17:02:20.606]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.606]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.606]                             info)
[17:02:20.606]                           info <- base::paste(info, collapse = "; ")
[17:02:20.606]                           if (!has_future) {
[17:02:20.606]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.606]                               info)
[17:02:20.606]                           }
[17:02:20.606]                           else {
[17:02:20.606]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.606]                               info, version)
[17:02:20.606]                           }
[17:02:20.606]                           base::stop(msg)
[17:02:20.606]                         }
[17:02:20.606]                       })
[17:02:20.606]                     }
[17:02:20.606]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.606]                     base::options(mc.cores = 1L)
[17:02:20.606]                   }
[17:02:20.606]                   ...future.strategy.old <- future::plan("list")
[17:02:20.606]                   options(future.plan = NULL)
[17:02:20.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.606]                 }
[17:02:20.606]                 ...future.workdir <- getwd()
[17:02:20.606]             }
[17:02:20.606]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.606]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.606]         }
[17:02:20.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.606]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.606]             base::names(...future.oldOptions))
[17:02:20.606]     }
[17:02:20.606]     if (FALSE) {
[17:02:20.606]     }
[17:02:20.606]     else {
[17:02:20.606]         if (TRUE) {
[17:02:20.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.606]                 open = "w")
[17:02:20.606]         }
[17:02:20.606]         else {
[17:02:20.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.606]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.606]         }
[17:02:20.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.606]             base::sink(type = "output", split = FALSE)
[17:02:20.606]             base::close(...future.stdout)
[17:02:20.606]         }, add = TRUE)
[17:02:20.606]     }
[17:02:20.606]     ...future.frame <- base::sys.nframe()
[17:02:20.606]     ...future.conditions <- base::list()
[17:02:20.606]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.606]     if (FALSE) {
[17:02:20.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.606]     }
[17:02:20.606]     ...future.result <- base::tryCatch({
[17:02:20.606]         base::withCallingHandlers({
[17:02:20.606]             ...future.value <- base::withVisible(base::local({
[17:02:20.606]                 withCallingHandlers({
[17:02:20.606]                   {
[17:02:20.606]                     cat("Processing: ")
[17:02:20.606]                     for (ii in 1:10) {
[17:02:20.606]                       cat(".")
[17:02:20.606]                     }
[17:02:20.606]                     cat(" [100%]\n")
[17:02:20.606]                     4
[17:02:20.606]                   }
[17:02:20.606]                 }, immediateCondition = function(cond) {
[17:02:20.606]                   save_rds <- function (object, pathname, ...) 
[17:02:20.606]                   {
[17:02:20.606]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.606]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.606]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.606]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.606]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.606]                         fi_tmp[["mtime"]])
[17:02:20.606]                     }
[17:02:20.606]                     tryCatch({
[17:02:20.606]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.606]                     }, error = function(ex) {
[17:02:20.606]                       msg <- conditionMessage(ex)
[17:02:20.606]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.606]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.606]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.606]                         fi_tmp[["mtime"]], msg)
[17:02:20.606]                       ex$message <- msg
[17:02:20.606]                       stop(ex)
[17:02:20.606]                     })
[17:02:20.606]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.606]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.606]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.606]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.606]                       fi <- file.info(pathname)
[17:02:20.606]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.606]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.606]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.606]                         fi[["size"]], fi[["mtime"]])
[17:02:20.606]                       stop(msg)
[17:02:20.606]                     }
[17:02:20.606]                     invisible(pathname)
[17:02:20.606]                   }
[17:02:20.606]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.606]                     rootPath = tempdir()) 
[17:02:20.606]                   {
[17:02:20.606]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.606]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.606]                       tmpdir = path, fileext = ".rds")
[17:02:20.606]                     save_rds(obj, file)
[17:02:20.606]                   }
[17:02:20.606]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.606]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.606]                   {
[17:02:20.606]                     inherits <- base::inherits
[17:02:20.606]                     invokeRestart <- base::invokeRestart
[17:02:20.606]                     is.null <- base::is.null
[17:02:20.606]                     muffled <- FALSE
[17:02:20.606]                     if (inherits(cond, "message")) {
[17:02:20.606]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.606]                       if (muffled) 
[17:02:20.606]                         invokeRestart("muffleMessage")
[17:02:20.606]                     }
[17:02:20.606]                     else if (inherits(cond, "warning")) {
[17:02:20.606]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.606]                       if (muffled) 
[17:02:20.606]                         invokeRestart("muffleWarning")
[17:02:20.606]                     }
[17:02:20.606]                     else if (inherits(cond, "condition")) {
[17:02:20.606]                       if (!is.null(pattern)) {
[17:02:20.606]                         computeRestarts <- base::computeRestarts
[17:02:20.606]                         grepl <- base::grepl
[17:02:20.606]                         restarts <- computeRestarts(cond)
[17:02:20.606]                         for (restart in restarts) {
[17:02:20.606]                           name <- restart$name
[17:02:20.606]                           if (is.null(name)) 
[17:02:20.606]                             next
[17:02:20.606]                           if (!grepl(pattern, name)) 
[17:02:20.606]                             next
[17:02:20.606]                           invokeRestart(restart)
[17:02:20.606]                           muffled <- TRUE
[17:02:20.606]                           break
[17:02:20.606]                         }
[17:02:20.606]                       }
[17:02:20.606]                     }
[17:02:20.606]                     invisible(muffled)
[17:02:20.606]                   }
[17:02:20.606]                   muffleCondition(cond)
[17:02:20.606]                 })
[17:02:20.606]             }))
[17:02:20.606]             future::FutureResult(value = ...future.value$value, 
[17:02:20.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.606]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.606]                     ...future.globalenv.names))
[17:02:20.606]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.606]         }, condition = base::local({
[17:02:20.606]             c <- base::c
[17:02:20.606]             inherits <- base::inherits
[17:02:20.606]             invokeRestart <- base::invokeRestart
[17:02:20.606]             length <- base::length
[17:02:20.606]             list <- base::list
[17:02:20.606]             seq.int <- base::seq.int
[17:02:20.606]             signalCondition <- base::signalCondition
[17:02:20.606]             sys.calls <- base::sys.calls
[17:02:20.606]             `[[` <- base::`[[`
[17:02:20.606]             `+` <- base::`+`
[17:02:20.606]             `<<-` <- base::`<<-`
[17:02:20.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.606]                   3L)]
[17:02:20.606]             }
[17:02:20.606]             function(cond) {
[17:02:20.606]                 is_error <- inherits(cond, "error")
[17:02:20.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.606]                   NULL)
[17:02:20.606]                 if (is_error) {
[17:02:20.606]                   sessionInformation <- function() {
[17:02:20.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.606]                       search = base::search(), system = base::Sys.info())
[17:02:20.606]                   }
[17:02:20.606]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.606]                     cond$call), session = sessionInformation(), 
[17:02:20.606]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.606]                   signalCondition(cond)
[17:02:20.606]                 }
[17:02:20.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.606]                 "immediateCondition"))) {
[17:02:20.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.606]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.606]                   if (TRUE && !signal) {
[17:02:20.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.606]                     {
[17:02:20.606]                       inherits <- base::inherits
[17:02:20.606]                       invokeRestart <- base::invokeRestart
[17:02:20.606]                       is.null <- base::is.null
[17:02:20.606]                       muffled <- FALSE
[17:02:20.606]                       if (inherits(cond, "message")) {
[17:02:20.606]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.606]                         if (muffled) 
[17:02:20.606]                           invokeRestart("muffleMessage")
[17:02:20.606]                       }
[17:02:20.606]                       else if (inherits(cond, "warning")) {
[17:02:20.606]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.606]                         if (muffled) 
[17:02:20.606]                           invokeRestart("muffleWarning")
[17:02:20.606]                       }
[17:02:20.606]                       else if (inherits(cond, "condition")) {
[17:02:20.606]                         if (!is.null(pattern)) {
[17:02:20.606]                           computeRestarts <- base::computeRestarts
[17:02:20.606]                           grepl <- base::grepl
[17:02:20.606]                           restarts <- computeRestarts(cond)
[17:02:20.606]                           for (restart in restarts) {
[17:02:20.606]                             name <- restart$name
[17:02:20.606]                             if (is.null(name)) 
[17:02:20.606]                               next
[17:02:20.606]                             if (!grepl(pattern, name)) 
[17:02:20.606]                               next
[17:02:20.606]                             invokeRestart(restart)
[17:02:20.606]                             muffled <- TRUE
[17:02:20.606]                             break
[17:02:20.606]                           }
[17:02:20.606]                         }
[17:02:20.606]                       }
[17:02:20.606]                       invisible(muffled)
[17:02:20.606]                     }
[17:02:20.606]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.606]                   }
[17:02:20.606]                 }
[17:02:20.606]                 else {
[17:02:20.606]                   if (TRUE) {
[17:02:20.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.606]                     {
[17:02:20.606]                       inherits <- base::inherits
[17:02:20.606]                       invokeRestart <- base::invokeRestart
[17:02:20.606]                       is.null <- base::is.null
[17:02:20.606]                       muffled <- FALSE
[17:02:20.606]                       if (inherits(cond, "message")) {
[17:02:20.606]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.606]                         if (muffled) 
[17:02:20.606]                           invokeRestart("muffleMessage")
[17:02:20.606]                       }
[17:02:20.606]                       else if (inherits(cond, "warning")) {
[17:02:20.606]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.606]                         if (muffled) 
[17:02:20.606]                           invokeRestart("muffleWarning")
[17:02:20.606]                       }
[17:02:20.606]                       else if (inherits(cond, "condition")) {
[17:02:20.606]                         if (!is.null(pattern)) {
[17:02:20.606]                           computeRestarts <- base::computeRestarts
[17:02:20.606]                           grepl <- base::grepl
[17:02:20.606]                           restarts <- computeRestarts(cond)
[17:02:20.606]                           for (restart in restarts) {
[17:02:20.606]                             name <- restart$name
[17:02:20.606]                             if (is.null(name)) 
[17:02:20.606]                               next
[17:02:20.606]                             if (!grepl(pattern, name)) 
[17:02:20.606]                               next
[17:02:20.606]                             invokeRestart(restart)
[17:02:20.606]                             muffled <- TRUE
[17:02:20.606]                             break
[17:02:20.606]                           }
[17:02:20.606]                         }
[17:02:20.606]                       }
[17:02:20.606]                       invisible(muffled)
[17:02:20.606]                     }
[17:02:20.606]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.606]                   }
[17:02:20.606]                 }
[17:02:20.606]             }
[17:02:20.606]         }))
[17:02:20.606]     }, error = function(ex) {
[17:02:20.606]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.606]                 ...future.rng), started = ...future.startTime, 
[17:02:20.606]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.606]             version = "1.8"), class = "FutureResult")
[17:02:20.606]     }, finally = {
[17:02:20.606]         if (!identical(...future.workdir, getwd())) 
[17:02:20.606]             setwd(...future.workdir)
[17:02:20.606]         {
[17:02:20.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.606]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.606]             }
[17:02:20.606]             base::options(...future.oldOptions)
[17:02:20.606]             if (.Platform$OS.type == "windows") {
[17:02:20.606]                 old_names <- names(...future.oldEnvVars)
[17:02:20.606]                 envs <- base::Sys.getenv()
[17:02:20.606]                 names <- names(envs)
[17:02:20.606]                 common <- intersect(names, old_names)
[17:02:20.606]                 added <- setdiff(names, old_names)
[17:02:20.606]                 removed <- setdiff(old_names, names)
[17:02:20.606]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.606]                   envs[common]]
[17:02:20.606]                 NAMES <- toupper(changed)
[17:02:20.606]                 args <- list()
[17:02:20.606]                 for (kk in seq_along(NAMES)) {
[17:02:20.606]                   name <- changed[[kk]]
[17:02:20.606]                   NAME <- NAMES[[kk]]
[17:02:20.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.606]                     next
[17:02:20.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.606]                 }
[17:02:20.606]                 NAMES <- toupper(added)
[17:02:20.606]                 for (kk in seq_along(NAMES)) {
[17:02:20.606]                   name <- added[[kk]]
[17:02:20.606]                   NAME <- NAMES[[kk]]
[17:02:20.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.606]                     next
[17:02:20.606]                   args[[name]] <- ""
[17:02:20.606]                 }
[17:02:20.606]                 NAMES <- toupper(removed)
[17:02:20.606]                 for (kk in seq_along(NAMES)) {
[17:02:20.606]                   name <- removed[[kk]]
[17:02:20.606]                   NAME <- NAMES[[kk]]
[17:02:20.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.606]                     next
[17:02:20.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.606]                 }
[17:02:20.606]                 if (length(args) > 0) 
[17:02:20.606]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.606]             }
[17:02:20.606]             else {
[17:02:20.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.606]             }
[17:02:20.606]             {
[17:02:20.606]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.606]                   0L) {
[17:02:20.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.606]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.606]                   base::options(opts)
[17:02:20.606]                 }
[17:02:20.606]                 {
[17:02:20.606]                   {
[17:02:20.606]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.606]                     NULL
[17:02:20.606]                   }
[17:02:20.606]                   options(future.plan = NULL)
[17:02:20.606]                   if (is.na(NA_character_)) 
[17:02:20.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.606]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.606]                     .init = FALSE)
[17:02:20.606]                 }
[17:02:20.606]             }
[17:02:20.606]         }
[17:02:20.606]     })
[17:02:20.606]     if (TRUE) {
[17:02:20.606]         base::sink(type = "output", split = FALSE)
[17:02:20.606]         if (TRUE) {
[17:02:20.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.606]         }
[17:02:20.606]         else {
[17:02:20.606]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.606]         }
[17:02:20.606]         base::close(...future.stdout)
[17:02:20.606]         ...future.stdout <- NULL
[17:02:20.606]     }
[17:02:20.606]     ...future.result$conditions <- ...future.conditions
[17:02:20.606]     ...future.result$finished <- base::Sys.time()
[17:02:20.606]     ...future.result
[17:02:20.606] }
[17:02:20.608] requestCore(): workers = 2
[17:02:20.611] MulticoreFuture started
[17:02:20.611] - Launch lazy future ... done
[17:02:20.611] run() for ‘MulticoreFuture’ ... done
** Collecting results
v1 = 1
[17:02:20.612] plan(): Setting new future strategy stack:
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[17:02:20.612] result() for MulticoreFuture ...
[17:02:20.612] result() for MulticoreFuture ... done
[17:02:20.612] result() for MulticoreFuture ...
[17:02:20.612] List of future strategies:
[17:02:20.612] 1. sequential:
[17:02:20.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.612]    - tweaked: FALSE
[17:02:20.612]    - call: NULL
[17:02:20.613] result() for MulticoreFuture ... done
[17:02:20.613] signalConditions() ...
[17:02:20.613] plan(): nbrOfWorkers() = 1
[17:02:20.613]  - include = ‘immediateCondition’
[17:02:20.613]  - exclude = 
[17:02:20.613]  - resignal = FALSE
[17:02:20.613]  - Number of conditions: 1
[17:02:20.613] signalConditions() ... done
[17:02:20.614] Future state: ‘finished’
[17:02:20.614] result() for MulticoreFuture ...
[17:02:20.614] result() for MulticoreFuture ... done
[17:02:20.614] signalConditions() ...
[17:02:20.614]  - include = ‘condition’
[17:02:20.614]  - exclude = ‘immediateCondition’
[17:02:20.615]  - resignal = TRUE
[17:02:20.615]  - Number of conditions: 1
[17:02:20.615] plan(): Setting new future strategy stack:
[17:02:20.615]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:20.615] signalConditions() ... done
v3: <simpleError> (as expect)
[17:02:20.615] List of future strategies:
[17:02:20.615] 1. multicore:
[17:02:20.615]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.615]    - tweaked: FALSE
[17:02:20.615]    - call: plan(strategy)
[17:02:20.615] result() for MulticoreFuture ...
[17:02:20.620] plan(): nbrOfWorkers() = 2
[17:02:20.621] result() for MulticoreFuture ...
[17:02:20.621] result() for MulticoreFuture ... done
[17:02:20.621] result() for MulticoreFuture ... done
[17:02:20.622] result() for MulticoreFuture ...
[17:02:20.622] result() for MulticoreFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[17:02:20.623] getGlobalsAndPackages() ...
[17:02:20.623] Searching for globals...
[17:02:20.624] 
[17:02:20.624] Searching for globals ... DONE
[17:02:20.624] - globals: [0] <none>
[17:02:20.625] getGlobalsAndPackages() ... DONE
[17:02:20.625] run() for ‘Future’ ...
[17:02:20.625] - state: ‘created’
[17:02:20.625] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.630] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.630] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.630]   - Field: ‘label’
[17:02:20.630]   - Field: ‘local’
[17:02:20.630]   - Field: ‘owner’
[17:02:20.630]   - Field: ‘envir’
[17:02:20.631]   - Field: ‘workers’
[17:02:20.631]   - Field: ‘packages’
[17:02:20.631]   - Field: ‘gc’
[17:02:20.631]   - Field: ‘job’
[17:02:20.631]   - Field: ‘conditions’
[17:02:20.631]   - Field: ‘expr’
[17:02:20.631]   - Field: ‘uuid’
[17:02:20.631]   - Field: ‘seed’
[17:02:20.631]   - Field: ‘version’
[17:02:20.632]   - Field: ‘result’
[17:02:20.632]   - Field: ‘asynchronous’
[17:02:20.632]   - Field: ‘calls’
[17:02:20.632]   - Field: ‘globals’
[17:02:20.632]   - Field: ‘stdout’
[17:02:20.632]   - Field: ‘earlySignal’
[17:02:20.632]   - Field: ‘lazy’
[17:02:20.632]   - Field: ‘state’
[17:02:20.632] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.633] - Launch lazy future ...
[17:02:20.633] Packages needed by the future expression (n = 0): <none>
[17:02:20.633] Packages needed by future strategies (n = 0): <none>
[17:02:20.634] {
[17:02:20.634]     {
[17:02:20.634]         {
[17:02:20.634]             ...future.startTime <- base::Sys.time()
[17:02:20.634]             {
[17:02:20.634]                 {
[17:02:20.634]                   {
[17:02:20.634]                     {
[17:02:20.634]                       base::local({
[17:02:20.634]                         has_future <- base::requireNamespace("future", 
[17:02:20.634]                           quietly = TRUE)
[17:02:20.634]                         if (has_future) {
[17:02:20.634]                           ns <- base::getNamespace("future")
[17:02:20.634]                           version <- ns[[".package"]][["version"]]
[17:02:20.634]                           if (is.null(version)) 
[17:02:20.634]                             version <- utils::packageVersion("future")
[17:02:20.634]                         }
[17:02:20.634]                         else {
[17:02:20.634]                           version <- NULL
[17:02:20.634]                         }
[17:02:20.634]                         if (!has_future || version < "1.8.0") {
[17:02:20.634]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.634]                             "", base::R.version$version.string), 
[17:02:20.634]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.634]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.634]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.634]                               "release", "version")], collapse = " "), 
[17:02:20.634]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.634]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.634]                             info)
[17:02:20.634]                           info <- base::paste(info, collapse = "; ")
[17:02:20.634]                           if (!has_future) {
[17:02:20.634]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.634]                               info)
[17:02:20.634]                           }
[17:02:20.634]                           else {
[17:02:20.634]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.634]                               info, version)
[17:02:20.634]                           }
[17:02:20.634]                           base::stop(msg)
[17:02:20.634]                         }
[17:02:20.634]                       })
[17:02:20.634]                     }
[17:02:20.634]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.634]                     base::options(mc.cores = 1L)
[17:02:20.634]                   }
[17:02:20.634]                   ...future.strategy.old <- future::plan("list")
[17:02:20.634]                   options(future.plan = NULL)
[17:02:20.634]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.634]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.634]                 }
[17:02:20.634]                 ...future.workdir <- getwd()
[17:02:20.634]             }
[17:02:20.634]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.634]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.634]         }
[17:02:20.634]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.634]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.634]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.634]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.634]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.634]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.634]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.634]             base::names(...future.oldOptions))
[17:02:20.634]     }
[17:02:20.634]     if (FALSE) {
[17:02:20.634]     }
[17:02:20.634]     else {
[17:02:20.634]         if (TRUE) {
[17:02:20.634]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.634]                 open = "w")
[17:02:20.634]         }
[17:02:20.634]         else {
[17:02:20.634]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.634]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.634]         }
[17:02:20.634]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.634]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.634]             base::sink(type = "output", split = FALSE)
[17:02:20.634]             base::close(...future.stdout)
[17:02:20.634]         }, add = TRUE)
[17:02:20.634]     }
[17:02:20.634]     ...future.frame <- base::sys.nframe()
[17:02:20.634]     ...future.conditions <- base::list()
[17:02:20.634]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.634]     if (FALSE) {
[17:02:20.634]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.634]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.634]     }
[17:02:20.634]     ...future.result <- base::tryCatch({
[17:02:20.634]         base::withCallingHandlers({
[17:02:20.634]             ...future.value <- base::withVisible(base::local({
[17:02:20.634]                 withCallingHandlers({
[17:02:20.634]                   1
[17:02:20.634]                 }, immediateCondition = function(cond) {
[17:02:20.634]                   save_rds <- function (object, pathname, ...) 
[17:02:20.634]                   {
[17:02:20.634]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.634]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.634]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.634]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.634]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.634]                         fi_tmp[["mtime"]])
[17:02:20.634]                     }
[17:02:20.634]                     tryCatch({
[17:02:20.634]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.634]                     }, error = function(ex) {
[17:02:20.634]                       msg <- conditionMessage(ex)
[17:02:20.634]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.634]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.634]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.634]                         fi_tmp[["mtime"]], msg)
[17:02:20.634]                       ex$message <- msg
[17:02:20.634]                       stop(ex)
[17:02:20.634]                     })
[17:02:20.634]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.634]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.634]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.634]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.634]                       fi <- file.info(pathname)
[17:02:20.634]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.634]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.634]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.634]                         fi[["size"]], fi[["mtime"]])
[17:02:20.634]                       stop(msg)
[17:02:20.634]                     }
[17:02:20.634]                     invisible(pathname)
[17:02:20.634]                   }
[17:02:20.634]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.634]                     rootPath = tempdir()) 
[17:02:20.634]                   {
[17:02:20.634]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.634]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.634]                       tmpdir = path, fileext = ".rds")
[17:02:20.634]                     save_rds(obj, file)
[17:02:20.634]                   }
[17:02:20.634]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.634]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.634]                   {
[17:02:20.634]                     inherits <- base::inherits
[17:02:20.634]                     invokeRestart <- base::invokeRestart
[17:02:20.634]                     is.null <- base::is.null
[17:02:20.634]                     muffled <- FALSE
[17:02:20.634]                     if (inherits(cond, "message")) {
[17:02:20.634]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.634]                       if (muffled) 
[17:02:20.634]                         invokeRestart("muffleMessage")
[17:02:20.634]                     }
[17:02:20.634]                     else if (inherits(cond, "warning")) {
[17:02:20.634]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.634]                       if (muffled) 
[17:02:20.634]                         invokeRestart("muffleWarning")
[17:02:20.634]                     }
[17:02:20.634]                     else if (inherits(cond, "condition")) {
[17:02:20.634]                       if (!is.null(pattern)) {
[17:02:20.634]                         computeRestarts <- base::computeRestarts
[17:02:20.634]                         grepl <- base::grepl
[17:02:20.634]                         restarts <- computeRestarts(cond)
[17:02:20.634]                         for (restart in restarts) {
[17:02:20.634]                           name <- restart$name
[17:02:20.634]                           if (is.null(name)) 
[17:02:20.634]                             next
[17:02:20.634]                           if (!grepl(pattern, name)) 
[17:02:20.634]                             next
[17:02:20.634]                           invokeRestart(restart)
[17:02:20.634]                           muffled <- TRUE
[17:02:20.634]                           break
[17:02:20.634]                         }
[17:02:20.634]                       }
[17:02:20.634]                     }
[17:02:20.634]                     invisible(muffled)
[17:02:20.634]                   }
[17:02:20.634]                   muffleCondition(cond)
[17:02:20.634]                 })
[17:02:20.634]             }))
[17:02:20.634]             future::FutureResult(value = ...future.value$value, 
[17:02:20.634]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.634]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.634]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.634]                     ...future.globalenv.names))
[17:02:20.634]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.634]         }, condition = base::local({
[17:02:20.634]             c <- base::c
[17:02:20.634]             inherits <- base::inherits
[17:02:20.634]             invokeRestart <- base::invokeRestart
[17:02:20.634]             length <- base::length
[17:02:20.634]             list <- base::list
[17:02:20.634]             seq.int <- base::seq.int
[17:02:20.634]             signalCondition <- base::signalCondition
[17:02:20.634]             sys.calls <- base::sys.calls
[17:02:20.634]             `[[` <- base::`[[`
[17:02:20.634]             `+` <- base::`+`
[17:02:20.634]             `<<-` <- base::`<<-`
[17:02:20.634]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.634]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.634]                   3L)]
[17:02:20.634]             }
[17:02:20.634]             function(cond) {
[17:02:20.634]                 is_error <- inherits(cond, "error")
[17:02:20.634]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.634]                   NULL)
[17:02:20.634]                 if (is_error) {
[17:02:20.634]                   sessionInformation <- function() {
[17:02:20.634]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.634]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.634]                       search = base::search(), system = base::Sys.info())
[17:02:20.634]                   }
[17:02:20.634]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.634]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.634]                     cond$call), session = sessionInformation(), 
[17:02:20.634]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.634]                   signalCondition(cond)
[17:02:20.634]                 }
[17:02:20.634]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.634]                 "immediateCondition"))) {
[17:02:20.634]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.634]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.634]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.634]                   if (TRUE && !signal) {
[17:02:20.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.634]                     {
[17:02:20.634]                       inherits <- base::inherits
[17:02:20.634]                       invokeRestart <- base::invokeRestart
[17:02:20.634]                       is.null <- base::is.null
[17:02:20.634]                       muffled <- FALSE
[17:02:20.634]                       if (inherits(cond, "message")) {
[17:02:20.634]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.634]                         if (muffled) 
[17:02:20.634]                           invokeRestart("muffleMessage")
[17:02:20.634]                       }
[17:02:20.634]                       else if (inherits(cond, "warning")) {
[17:02:20.634]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.634]                         if (muffled) 
[17:02:20.634]                           invokeRestart("muffleWarning")
[17:02:20.634]                       }
[17:02:20.634]                       else if (inherits(cond, "condition")) {
[17:02:20.634]                         if (!is.null(pattern)) {
[17:02:20.634]                           computeRestarts <- base::computeRestarts
[17:02:20.634]                           grepl <- base::grepl
[17:02:20.634]                           restarts <- computeRestarts(cond)
[17:02:20.634]                           for (restart in restarts) {
[17:02:20.634]                             name <- restart$name
[17:02:20.634]                             if (is.null(name)) 
[17:02:20.634]                               next
[17:02:20.634]                             if (!grepl(pattern, name)) 
[17:02:20.634]                               next
[17:02:20.634]                             invokeRestart(restart)
[17:02:20.634]                             muffled <- TRUE
[17:02:20.634]                             break
[17:02:20.634]                           }
[17:02:20.634]                         }
[17:02:20.634]                       }
[17:02:20.634]                       invisible(muffled)
[17:02:20.634]                     }
[17:02:20.634]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.634]                   }
[17:02:20.634]                 }
[17:02:20.634]                 else {
[17:02:20.634]                   if (TRUE) {
[17:02:20.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.634]                     {
[17:02:20.634]                       inherits <- base::inherits
[17:02:20.634]                       invokeRestart <- base::invokeRestart
[17:02:20.634]                       is.null <- base::is.null
[17:02:20.634]                       muffled <- FALSE
[17:02:20.634]                       if (inherits(cond, "message")) {
[17:02:20.634]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.634]                         if (muffled) 
[17:02:20.634]                           invokeRestart("muffleMessage")
[17:02:20.634]                       }
[17:02:20.634]                       else if (inherits(cond, "warning")) {
[17:02:20.634]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.634]                         if (muffled) 
[17:02:20.634]                           invokeRestart("muffleWarning")
[17:02:20.634]                       }
[17:02:20.634]                       else if (inherits(cond, "condition")) {
[17:02:20.634]                         if (!is.null(pattern)) {
[17:02:20.634]                           computeRestarts <- base::computeRestarts
[17:02:20.634]                           grepl <- base::grepl
[17:02:20.634]                           restarts <- computeRestarts(cond)
[17:02:20.634]                           for (restart in restarts) {
[17:02:20.634]                             name <- restart$name
[17:02:20.634]                             if (is.null(name)) 
[17:02:20.634]                               next
[17:02:20.634]                             if (!grepl(pattern, name)) 
[17:02:20.634]                               next
[17:02:20.634]                             invokeRestart(restart)
[17:02:20.634]                             muffled <- TRUE
[17:02:20.634]                             break
[17:02:20.634]                           }
[17:02:20.634]                         }
[17:02:20.634]                       }
[17:02:20.634]                       invisible(muffled)
[17:02:20.634]                     }
[17:02:20.634]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.634]                   }
[17:02:20.634]                 }
[17:02:20.634]             }
[17:02:20.634]         }))
[17:02:20.634]     }, error = function(ex) {
[17:02:20.634]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.634]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.634]                 ...future.rng), started = ...future.startTime, 
[17:02:20.634]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.634]             version = "1.8"), class = "FutureResult")
[17:02:20.634]     }, finally = {
[17:02:20.634]         if (!identical(...future.workdir, getwd())) 
[17:02:20.634]             setwd(...future.workdir)
[17:02:20.634]         {
[17:02:20.634]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.634]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.634]             }
[17:02:20.634]             base::options(...future.oldOptions)
[17:02:20.634]             if (.Platform$OS.type == "windows") {
[17:02:20.634]                 old_names <- names(...future.oldEnvVars)
[17:02:20.634]                 envs <- base::Sys.getenv()
[17:02:20.634]                 names <- names(envs)
[17:02:20.634]                 common <- intersect(names, old_names)
[17:02:20.634]                 added <- setdiff(names, old_names)
[17:02:20.634]                 removed <- setdiff(old_names, names)
[17:02:20.634]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.634]                   envs[common]]
[17:02:20.634]                 NAMES <- toupper(changed)
[17:02:20.634]                 args <- list()
[17:02:20.634]                 for (kk in seq_along(NAMES)) {
[17:02:20.634]                   name <- changed[[kk]]
[17:02:20.634]                   NAME <- NAMES[[kk]]
[17:02:20.634]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.634]                     next
[17:02:20.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.634]                 }
[17:02:20.634]                 NAMES <- toupper(added)
[17:02:20.634]                 for (kk in seq_along(NAMES)) {
[17:02:20.634]                   name <- added[[kk]]
[17:02:20.634]                   NAME <- NAMES[[kk]]
[17:02:20.634]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.634]                     next
[17:02:20.634]                   args[[name]] <- ""
[17:02:20.634]                 }
[17:02:20.634]                 NAMES <- toupper(removed)
[17:02:20.634]                 for (kk in seq_along(NAMES)) {
[17:02:20.634]                   name <- removed[[kk]]
[17:02:20.634]                   NAME <- NAMES[[kk]]
[17:02:20.634]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.634]                     next
[17:02:20.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.634]                 }
[17:02:20.634]                 if (length(args) > 0) 
[17:02:20.634]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.634]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.634]             }
[17:02:20.634]             else {
[17:02:20.634]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.634]             }
[17:02:20.634]             {
[17:02:20.634]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.634]                   0L) {
[17:02:20.634]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.634]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.634]                   base::options(opts)
[17:02:20.634]                 }
[17:02:20.634]                 {
[17:02:20.634]                   {
[17:02:20.634]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.634]                     NULL
[17:02:20.634]                   }
[17:02:20.634]                   options(future.plan = NULL)
[17:02:20.634]                   if (is.na(NA_character_)) 
[17:02:20.634]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.634]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.634]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.634]                     .init = FALSE)
[17:02:20.634]                 }
[17:02:20.634]             }
[17:02:20.634]         }
[17:02:20.634]     })
[17:02:20.634]     if (TRUE) {
[17:02:20.634]         base::sink(type = "output", split = FALSE)
[17:02:20.634]         if (TRUE) {
[17:02:20.634]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.634]         }
[17:02:20.634]         else {
[17:02:20.634]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.634]         }
[17:02:20.634]         base::close(...future.stdout)
[17:02:20.634]         ...future.stdout <- NULL
[17:02:20.634]     }
[17:02:20.634]     ...future.result$conditions <- ...future.conditions
[17:02:20.634]     ...future.result$finished <- base::Sys.time()
[17:02:20.634]     ...future.result
[17:02:20.634] }
[17:02:20.636] requestCore(): workers = 2
[17:02:20.638] MulticoreFuture started
[17:02:20.638] - Launch lazy future ... done
[17:02:20.639] plan(): Setting new future strategy stack:
[17:02:20.639] run() for ‘MulticoreFuture’ ... done
[17:02:20.643] result() for MulticoreFuture ...
[17:02:20.639] List of future strategies:
[17:02:20.639] 1. sequential:
[17:02:20.639]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.639]    - tweaked: FALSE
[17:02:20.639]    - call: NULL
[17:02:20.644] plan(): nbrOfWorkers() = 1
[17:02:20.646] plan(): Setting new future strategy stack:
[17:02:20.646] List of future strategies:
[17:02:20.646] 1. multicore:
[17:02:20.646]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.646]    - tweaked: FALSE
[17:02:20.646]    - call: plan(strategy)
[17:02:20.651] plan(): nbrOfWorkers() = 2
[17:02:20.652] result() for MulticoreFuture ...
[17:02:20.652] result() for MulticoreFuture ... done
[17:02:20.652] result() for MulticoreFuture ... done
[17:02:20.652] result() for MulticoreFuture ...
[17:02:20.653] result() for MulticoreFuture ... done
c = 1
[17:02:20.653] getGlobalsAndPackages() ...
[17:02:20.653] Searching for globals...
[17:02:20.654] 
[17:02:20.654] Searching for globals ... DONE
[17:02:20.654] - globals: [0] <none>
[17:02:20.654] getGlobalsAndPackages() ... DONE
[17:02:20.655] run() for ‘Future’ ...
[17:02:20.655] - state: ‘created’
[17:02:20.655] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.659] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.659] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.659]   - Field: ‘label’
[17:02:20.659]   - Field: ‘local’
[17:02:20.660]   - Field: ‘owner’
[17:02:20.660]   - Field: ‘envir’
[17:02:20.660]   - Field: ‘workers’
[17:02:20.660]   - Field: ‘packages’
[17:02:20.660]   - Field: ‘gc’
[17:02:20.660]   - Field: ‘job’
[17:02:20.660]   - Field: ‘conditions’
[17:02:20.660]   - Field: ‘expr’
[17:02:20.661]   - Field: ‘uuid’
[17:02:20.661]   - Field: ‘seed’
[17:02:20.661]   - Field: ‘version’
[17:02:20.661]   - Field: ‘result’
[17:02:20.661]   - Field: ‘asynchronous’
[17:02:20.661]   - Field: ‘calls’
[17:02:20.661]   - Field: ‘globals’
[17:02:20.661]   - Field: ‘stdout’
[17:02:20.661]   - Field: ‘earlySignal’
[17:02:20.662]   - Field: ‘lazy’
[17:02:20.662]   - Field: ‘state’
[17:02:20.662] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.662] - Launch lazy future ...
[17:02:20.662] Packages needed by the future expression (n = 0): <none>
[17:02:20.662] Packages needed by future strategies (n = 0): <none>
[17:02:20.663] {
[17:02:20.663]     {
[17:02:20.663]         {
[17:02:20.663]             ...future.startTime <- base::Sys.time()
[17:02:20.663]             {
[17:02:20.663]                 {
[17:02:20.663]                   {
[17:02:20.663]                     {
[17:02:20.663]                       base::local({
[17:02:20.663]                         has_future <- base::requireNamespace("future", 
[17:02:20.663]                           quietly = TRUE)
[17:02:20.663]                         if (has_future) {
[17:02:20.663]                           ns <- base::getNamespace("future")
[17:02:20.663]                           version <- ns[[".package"]][["version"]]
[17:02:20.663]                           if (is.null(version)) 
[17:02:20.663]                             version <- utils::packageVersion("future")
[17:02:20.663]                         }
[17:02:20.663]                         else {
[17:02:20.663]                           version <- NULL
[17:02:20.663]                         }
[17:02:20.663]                         if (!has_future || version < "1.8.0") {
[17:02:20.663]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.663]                             "", base::R.version$version.string), 
[17:02:20.663]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.663]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.663]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.663]                               "release", "version")], collapse = " "), 
[17:02:20.663]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.663]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.663]                             info)
[17:02:20.663]                           info <- base::paste(info, collapse = "; ")
[17:02:20.663]                           if (!has_future) {
[17:02:20.663]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.663]                               info)
[17:02:20.663]                           }
[17:02:20.663]                           else {
[17:02:20.663]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.663]                               info, version)
[17:02:20.663]                           }
[17:02:20.663]                           base::stop(msg)
[17:02:20.663]                         }
[17:02:20.663]                       })
[17:02:20.663]                     }
[17:02:20.663]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.663]                     base::options(mc.cores = 1L)
[17:02:20.663]                   }
[17:02:20.663]                   ...future.strategy.old <- future::plan("list")
[17:02:20.663]                   options(future.plan = NULL)
[17:02:20.663]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.663]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.663]                 }
[17:02:20.663]                 ...future.workdir <- getwd()
[17:02:20.663]             }
[17:02:20.663]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.663]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.663]         }
[17:02:20.663]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.663]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.663]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.663]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.663]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.663]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.663]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.663]             base::names(...future.oldOptions))
[17:02:20.663]     }
[17:02:20.663]     if (FALSE) {
[17:02:20.663]     }
[17:02:20.663]     else {
[17:02:20.663]         if (TRUE) {
[17:02:20.663]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.663]                 open = "w")
[17:02:20.663]         }
[17:02:20.663]         else {
[17:02:20.663]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.663]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.663]         }
[17:02:20.663]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.663]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.663]             base::sink(type = "output", split = FALSE)
[17:02:20.663]             base::close(...future.stdout)
[17:02:20.663]         }, add = TRUE)
[17:02:20.663]     }
[17:02:20.663]     ...future.frame <- base::sys.nframe()
[17:02:20.663]     ...future.conditions <- base::list()
[17:02:20.663]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.663]     if (FALSE) {
[17:02:20.663]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.663]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.663]     }
[17:02:20.663]     ...future.result <- base::tryCatch({
[17:02:20.663]         base::withCallingHandlers({
[17:02:20.663]             ...future.value <- base::withVisible(base::local({
[17:02:20.663]                 withCallingHandlers({
[17:02:20.663]                   1
[17:02:20.663]                 }, immediateCondition = function(cond) {
[17:02:20.663]                   save_rds <- function (object, pathname, ...) 
[17:02:20.663]                   {
[17:02:20.663]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.663]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.663]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.663]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.663]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.663]                         fi_tmp[["mtime"]])
[17:02:20.663]                     }
[17:02:20.663]                     tryCatch({
[17:02:20.663]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.663]                     }, error = function(ex) {
[17:02:20.663]                       msg <- conditionMessage(ex)
[17:02:20.663]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.663]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.663]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.663]                         fi_tmp[["mtime"]], msg)
[17:02:20.663]                       ex$message <- msg
[17:02:20.663]                       stop(ex)
[17:02:20.663]                     })
[17:02:20.663]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.663]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.663]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.663]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.663]                       fi <- file.info(pathname)
[17:02:20.663]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.663]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.663]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.663]                         fi[["size"]], fi[["mtime"]])
[17:02:20.663]                       stop(msg)
[17:02:20.663]                     }
[17:02:20.663]                     invisible(pathname)
[17:02:20.663]                   }
[17:02:20.663]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.663]                     rootPath = tempdir()) 
[17:02:20.663]                   {
[17:02:20.663]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.663]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.663]                       tmpdir = path, fileext = ".rds")
[17:02:20.663]                     save_rds(obj, file)
[17:02:20.663]                   }
[17:02:20.663]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.663]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.663]                   {
[17:02:20.663]                     inherits <- base::inherits
[17:02:20.663]                     invokeRestart <- base::invokeRestart
[17:02:20.663]                     is.null <- base::is.null
[17:02:20.663]                     muffled <- FALSE
[17:02:20.663]                     if (inherits(cond, "message")) {
[17:02:20.663]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.663]                       if (muffled) 
[17:02:20.663]                         invokeRestart("muffleMessage")
[17:02:20.663]                     }
[17:02:20.663]                     else if (inherits(cond, "warning")) {
[17:02:20.663]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.663]                       if (muffled) 
[17:02:20.663]                         invokeRestart("muffleWarning")
[17:02:20.663]                     }
[17:02:20.663]                     else if (inherits(cond, "condition")) {
[17:02:20.663]                       if (!is.null(pattern)) {
[17:02:20.663]                         computeRestarts <- base::computeRestarts
[17:02:20.663]                         grepl <- base::grepl
[17:02:20.663]                         restarts <- computeRestarts(cond)
[17:02:20.663]                         for (restart in restarts) {
[17:02:20.663]                           name <- restart$name
[17:02:20.663]                           if (is.null(name)) 
[17:02:20.663]                             next
[17:02:20.663]                           if (!grepl(pattern, name)) 
[17:02:20.663]                             next
[17:02:20.663]                           invokeRestart(restart)
[17:02:20.663]                           muffled <- TRUE
[17:02:20.663]                           break
[17:02:20.663]                         }
[17:02:20.663]                       }
[17:02:20.663]                     }
[17:02:20.663]                     invisible(muffled)
[17:02:20.663]                   }
[17:02:20.663]                   muffleCondition(cond)
[17:02:20.663]                 })
[17:02:20.663]             }))
[17:02:20.663]             future::FutureResult(value = ...future.value$value, 
[17:02:20.663]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.663]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.663]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.663]                     ...future.globalenv.names))
[17:02:20.663]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.663]         }, condition = base::local({
[17:02:20.663]             c <- base::c
[17:02:20.663]             inherits <- base::inherits
[17:02:20.663]             invokeRestart <- base::invokeRestart
[17:02:20.663]             length <- base::length
[17:02:20.663]             list <- base::list
[17:02:20.663]             seq.int <- base::seq.int
[17:02:20.663]             signalCondition <- base::signalCondition
[17:02:20.663]             sys.calls <- base::sys.calls
[17:02:20.663]             `[[` <- base::`[[`
[17:02:20.663]             `+` <- base::`+`
[17:02:20.663]             `<<-` <- base::`<<-`
[17:02:20.663]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.663]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.663]                   3L)]
[17:02:20.663]             }
[17:02:20.663]             function(cond) {
[17:02:20.663]                 is_error <- inherits(cond, "error")
[17:02:20.663]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.663]                   NULL)
[17:02:20.663]                 if (is_error) {
[17:02:20.663]                   sessionInformation <- function() {
[17:02:20.663]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.663]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.663]                       search = base::search(), system = base::Sys.info())
[17:02:20.663]                   }
[17:02:20.663]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.663]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.663]                     cond$call), session = sessionInformation(), 
[17:02:20.663]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.663]                   signalCondition(cond)
[17:02:20.663]                 }
[17:02:20.663]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.663]                 "immediateCondition"))) {
[17:02:20.663]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.663]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.663]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.663]                   if (TRUE && !signal) {
[17:02:20.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.663]                     {
[17:02:20.663]                       inherits <- base::inherits
[17:02:20.663]                       invokeRestart <- base::invokeRestart
[17:02:20.663]                       is.null <- base::is.null
[17:02:20.663]                       muffled <- FALSE
[17:02:20.663]                       if (inherits(cond, "message")) {
[17:02:20.663]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.663]                         if (muffled) 
[17:02:20.663]                           invokeRestart("muffleMessage")
[17:02:20.663]                       }
[17:02:20.663]                       else if (inherits(cond, "warning")) {
[17:02:20.663]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.663]                         if (muffled) 
[17:02:20.663]                           invokeRestart("muffleWarning")
[17:02:20.663]                       }
[17:02:20.663]                       else if (inherits(cond, "condition")) {
[17:02:20.663]                         if (!is.null(pattern)) {
[17:02:20.663]                           computeRestarts <- base::computeRestarts
[17:02:20.663]                           grepl <- base::grepl
[17:02:20.663]                           restarts <- computeRestarts(cond)
[17:02:20.663]                           for (restart in restarts) {
[17:02:20.663]                             name <- restart$name
[17:02:20.663]                             if (is.null(name)) 
[17:02:20.663]                               next
[17:02:20.663]                             if (!grepl(pattern, name)) 
[17:02:20.663]                               next
[17:02:20.663]                             invokeRestart(restart)
[17:02:20.663]                             muffled <- TRUE
[17:02:20.663]                             break
[17:02:20.663]                           }
[17:02:20.663]                         }
[17:02:20.663]                       }
[17:02:20.663]                       invisible(muffled)
[17:02:20.663]                     }
[17:02:20.663]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.663]                   }
[17:02:20.663]                 }
[17:02:20.663]                 else {
[17:02:20.663]                   if (TRUE) {
[17:02:20.663]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.663]                     {
[17:02:20.663]                       inherits <- base::inherits
[17:02:20.663]                       invokeRestart <- base::invokeRestart
[17:02:20.663]                       is.null <- base::is.null
[17:02:20.663]                       muffled <- FALSE
[17:02:20.663]                       if (inherits(cond, "message")) {
[17:02:20.663]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.663]                         if (muffled) 
[17:02:20.663]                           invokeRestart("muffleMessage")
[17:02:20.663]                       }
[17:02:20.663]                       else if (inherits(cond, "warning")) {
[17:02:20.663]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.663]                         if (muffled) 
[17:02:20.663]                           invokeRestart("muffleWarning")
[17:02:20.663]                       }
[17:02:20.663]                       else if (inherits(cond, "condition")) {
[17:02:20.663]                         if (!is.null(pattern)) {
[17:02:20.663]                           computeRestarts <- base::computeRestarts
[17:02:20.663]                           grepl <- base::grepl
[17:02:20.663]                           restarts <- computeRestarts(cond)
[17:02:20.663]                           for (restart in restarts) {
[17:02:20.663]                             name <- restart$name
[17:02:20.663]                             if (is.null(name)) 
[17:02:20.663]                               next
[17:02:20.663]                             if (!grepl(pattern, name)) 
[17:02:20.663]                               next
[17:02:20.663]                             invokeRestart(restart)
[17:02:20.663]                             muffled <- TRUE
[17:02:20.663]                             break
[17:02:20.663]                           }
[17:02:20.663]                         }
[17:02:20.663]                       }
[17:02:20.663]                       invisible(muffled)
[17:02:20.663]                     }
[17:02:20.663]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.663]                   }
[17:02:20.663]                 }
[17:02:20.663]             }
[17:02:20.663]         }))
[17:02:20.663]     }, error = function(ex) {
[17:02:20.663]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.663]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.663]                 ...future.rng), started = ...future.startTime, 
[17:02:20.663]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.663]             version = "1.8"), class = "FutureResult")
[17:02:20.663]     }, finally = {
[17:02:20.663]         if (!identical(...future.workdir, getwd())) 
[17:02:20.663]             setwd(...future.workdir)
[17:02:20.663]         {
[17:02:20.663]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.663]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.663]             }
[17:02:20.663]             base::options(...future.oldOptions)
[17:02:20.663]             if (.Platform$OS.type == "windows") {
[17:02:20.663]                 old_names <- names(...future.oldEnvVars)
[17:02:20.663]                 envs <- base::Sys.getenv()
[17:02:20.663]                 names <- names(envs)
[17:02:20.663]                 common <- intersect(names, old_names)
[17:02:20.663]                 added <- setdiff(names, old_names)
[17:02:20.663]                 removed <- setdiff(old_names, names)
[17:02:20.663]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.663]                   envs[common]]
[17:02:20.663]                 NAMES <- toupper(changed)
[17:02:20.663]                 args <- list()
[17:02:20.663]                 for (kk in seq_along(NAMES)) {
[17:02:20.663]                   name <- changed[[kk]]
[17:02:20.663]                   NAME <- NAMES[[kk]]
[17:02:20.663]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.663]                     next
[17:02:20.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.663]                 }
[17:02:20.663]                 NAMES <- toupper(added)
[17:02:20.663]                 for (kk in seq_along(NAMES)) {
[17:02:20.663]                   name <- added[[kk]]
[17:02:20.663]                   NAME <- NAMES[[kk]]
[17:02:20.663]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.663]                     next
[17:02:20.663]                   args[[name]] <- ""
[17:02:20.663]                 }
[17:02:20.663]                 NAMES <- toupper(removed)
[17:02:20.663]                 for (kk in seq_along(NAMES)) {
[17:02:20.663]                   name <- removed[[kk]]
[17:02:20.663]                   NAME <- NAMES[[kk]]
[17:02:20.663]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.663]                     next
[17:02:20.663]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.663]                 }
[17:02:20.663]                 if (length(args) > 0) 
[17:02:20.663]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.663]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.663]             }
[17:02:20.663]             else {
[17:02:20.663]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.663]             }
[17:02:20.663]             {
[17:02:20.663]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.663]                   0L) {
[17:02:20.663]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.663]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.663]                   base::options(opts)
[17:02:20.663]                 }
[17:02:20.663]                 {
[17:02:20.663]                   {
[17:02:20.663]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.663]                     NULL
[17:02:20.663]                   }
[17:02:20.663]                   options(future.plan = NULL)
[17:02:20.663]                   if (is.na(NA_character_)) 
[17:02:20.663]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.663]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.663]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.663]                     .init = FALSE)
[17:02:20.663]                 }
[17:02:20.663]             }
[17:02:20.663]         }
[17:02:20.663]     })
[17:02:20.663]     if (TRUE) {
[17:02:20.663]         base::sink(type = "output", split = FALSE)
[17:02:20.663]         if (TRUE) {
[17:02:20.663]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.663]         }
[17:02:20.663]         else {
[17:02:20.663]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.663]         }
[17:02:20.663]         base::close(...future.stdout)
[17:02:20.663]         ...future.stdout <- NULL
[17:02:20.663]     }
[17:02:20.663]     ...future.result$conditions <- ...future.conditions
[17:02:20.663]     ...future.result$finished <- base::Sys.time()
[17:02:20.663]     ...future.result
[17:02:20.663] }
[17:02:20.665] requestCore(): workers = 2
[17:02:20.667] MulticoreFuture started
[17:02:20.667] - Launch lazy future ... done
[17:02:20.668] run() for ‘MulticoreFuture’ ... done
[17:02:20.668] result() for MulticoreFuture ...
[17:02:20.668] plan(): Setting new future strategy stack:
[17:02:20.668] List of future strategies:
[17:02:20.668] 1. sequential:
[17:02:20.668]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.668]    - tweaked: FALSE
[17:02:20.668]    - call: NULL
[17:02:20.669] plan(): nbrOfWorkers() = 1
[17:02:20.671] plan(): Setting new future strategy stack:
[17:02:20.672] List of future strategies:
[17:02:20.672] 1. multicore:
[17:02:20.672]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.672]    - tweaked: FALSE
[17:02:20.672]    - call: plan(strategy)
[17:02:20.677] plan(): nbrOfWorkers() = 2
[17:02:20.678] result() for MulticoreFuture ...
[17:02:20.678] result() for MulticoreFuture ... done
[17:02:20.678] result() for MulticoreFuture ... done
[17:02:20.678] result() for MulticoreFuture ...
[17:02:20.678] result() for MulticoreFuture ... done
d = 1
** Nested future assignments
[17:02:20.679] getGlobalsAndPackages() ...
[17:02:20.679] Searching for globals...
[17:02:20.684] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[17:02:20.684] Searching for globals ... DONE
[17:02:20.685] Resolving globals: FALSE
[17:02:20.685] 
[17:02:20.685] - packages: [1] ‘future’
[17:02:20.685] getGlobalsAndPackages() ... DONE
[17:02:20.686] run() for ‘Future’ ...
[17:02:20.686] - state: ‘created’
[17:02:20.686] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.690] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.690] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.691]   - Field: ‘label’
[17:02:20.691]   - Field: ‘local’
[17:02:20.691]   - Field: ‘owner’
[17:02:20.691]   - Field: ‘envir’
[17:02:20.691]   - Field: ‘workers’
[17:02:20.691]   - Field: ‘packages’
[17:02:20.691]   - Field: ‘gc’
[17:02:20.691]   - Field: ‘job’
[17:02:20.692]   - Field: ‘conditions’
[17:02:20.692]   - Field: ‘expr’
[17:02:20.692]   - Field: ‘uuid’
[17:02:20.692]   - Field: ‘seed’
[17:02:20.692]   - Field: ‘version’
[17:02:20.692]   - Field: ‘result’
[17:02:20.692]   - Field: ‘asynchronous’
[17:02:20.692]   - Field: ‘calls’
[17:02:20.692]   - Field: ‘globals’
[17:02:20.693]   - Field: ‘stdout’
[17:02:20.693]   - Field: ‘earlySignal’
[17:02:20.693]   - Field: ‘lazy’
[17:02:20.693]   - Field: ‘state’
[17:02:20.693] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.693] - Launch lazy future ...
[17:02:20.694] Packages needed by the future expression (n = 1): ‘future’
[17:02:20.694] Packages needed by future strategies (n = 0): <none>
[17:02:20.694] {
[17:02:20.694]     {
[17:02:20.694]         {
[17:02:20.694]             ...future.startTime <- base::Sys.time()
[17:02:20.694]             {
[17:02:20.694]                 {
[17:02:20.694]                   {
[17:02:20.694]                     {
[17:02:20.694]                       {
[17:02:20.694]                         base::local({
[17:02:20.694]                           has_future <- base::requireNamespace("future", 
[17:02:20.694]                             quietly = TRUE)
[17:02:20.694]                           if (has_future) {
[17:02:20.694]                             ns <- base::getNamespace("future")
[17:02:20.694]                             version <- ns[[".package"]][["version"]]
[17:02:20.694]                             if (is.null(version)) 
[17:02:20.694]                               version <- utils::packageVersion("future")
[17:02:20.694]                           }
[17:02:20.694]                           else {
[17:02:20.694]                             version <- NULL
[17:02:20.694]                           }
[17:02:20.694]                           if (!has_future || version < "1.8.0") {
[17:02:20.694]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.694]                               "", base::R.version$version.string), 
[17:02:20.694]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:20.694]                                 base::R.version$platform, 8 * 
[17:02:20.694]                                   base::.Machine$sizeof.pointer), 
[17:02:20.694]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.694]                                 "release", "version")], collapse = " "), 
[17:02:20.694]                               hostname = base::Sys.info()[["nodename"]])
[17:02:20.694]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.694]                               info)
[17:02:20.694]                             info <- base::paste(info, collapse = "; ")
[17:02:20.694]                             if (!has_future) {
[17:02:20.694]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.694]                                 info)
[17:02:20.694]                             }
[17:02:20.694]                             else {
[17:02:20.694]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.694]                                 info, version)
[17:02:20.694]                             }
[17:02:20.694]                             base::stop(msg)
[17:02:20.694]                           }
[17:02:20.694]                         })
[17:02:20.694]                       }
[17:02:20.694]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.694]                       base::options(mc.cores = 1L)
[17:02:20.694]                     }
[17:02:20.694]                     base::local({
[17:02:20.694]                       for (pkg in "future") {
[17:02:20.694]                         base::loadNamespace(pkg)
[17:02:20.694]                         base::library(pkg, character.only = TRUE)
[17:02:20.694]                       }
[17:02:20.694]                     })
[17:02:20.694]                   }
[17:02:20.694]                   ...future.strategy.old <- future::plan("list")
[17:02:20.694]                   options(future.plan = NULL)
[17:02:20.694]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.694]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.694]                 }
[17:02:20.694]                 ...future.workdir <- getwd()
[17:02:20.694]             }
[17:02:20.694]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.694]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.694]         }
[17:02:20.694]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.694]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.694]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.694]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.694]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.694]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.694]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.694]             base::names(...future.oldOptions))
[17:02:20.694]     }
[17:02:20.694]     if (FALSE) {
[17:02:20.694]     }
[17:02:20.694]     else {
[17:02:20.694]         if (TRUE) {
[17:02:20.694]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.694]                 open = "w")
[17:02:20.694]         }
[17:02:20.694]         else {
[17:02:20.694]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.694]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.694]         }
[17:02:20.694]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.694]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.694]             base::sink(type = "output", split = FALSE)
[17:02:20.694]             base::close(...future.stdout)
[17:02:20.694]         }, add = TRUE)
[17:02:20.694]     }
[17:02:20.694]     ...future.frame <- base::sys.nframe()
[17:02:20.694]     ...future.conditions <- base::list()
[17:02:20.694]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.694]     if (FALSE) {
[17:02:20.694]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.694]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.694]     }
[17:02:20.694]     ...future.result <- base::tryCatch({
[17:02:20.694]         base::withCallingHandlers({
[17:02:20.694]             ...future.value <- base::withVisible(base::local({
[17:02:20.694]                 withCallingHandlers({
[17:02:20.694]                   {
[17:02:20.694]                     b <- 1
[17:02:20.694]                     c %<-% 2
[17:02:20.694]                     d <- 3
[17:02:20.694]                     4 %->% e
[17:02:20.694]                     b + c + d + e
[17:02:20.694]                   }
[17:02:20.694]                 }, immediateCondition = function(cond) {
[17:02:20.694]                   save_rds <- function (object, pathname, ...) 
[17:02:20.694]                   {
[17:02:20.694]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.694]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.694]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.694]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.694]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.694]                         fi_tmp[["mtime"]])
[17:02:20.694]                     }
[17:02:20.694]                     tryCatch({
[17:02:20.694]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.694]                     }, error = function(ex) {
[17:02:20.694]                       msg <- conditionMessage(ex)
[17:02:20.694]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.694]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.694]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.694]                         fi_tmp[["mtime"]], msg)
[17:02:20.694]                       ex$message <- msg
[17:02:20.694]                       stop(ex)
[17:02:20.694]                     })
[17:02:20.694]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.694]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.694]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.694]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.694]                       fi <- file.info(pathname)
[17:02:20.694]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.694]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.694]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.694]                         fi[["size"]], fi[["mtime"]])
[17:02:20.694]                       stop(msg)
[17:02:20.694]                     }
[17:02:20.694]                     invisible(pathname)
[17:02:20.694]                   }
[17:02:20.694]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.694]                     rootPath = tempdir()) 
[17:02:20.694]                   {
[17:02:20.694]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.694]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.694]                       tmpdir = path, fileext = ".rds")
[17:02:20.694]                     save_rds(obj, file)
[17:02:20.694]                   }
[17:02:20.694]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.694]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.694]                   {
[17:02:20.694]                     inherits <- base::inherits
[17:02:20.694]                     invokeRestart <- base::invokeRestart
[17:02:20.694]                     is.null <- base::is.null
[17:02:20.694]                     muffled <- FALSE
[17:02:20.694]                     if (inherits(cond, "message")) {
[17:02:20.694]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.694]                       if (muffled) 
[17:02:20.694]                         invokeRestart("muffleMessage")
[17:02:20.694]                     }
[17:02:20.694]                     else if (inherits(cond, "warning")) {
[17:02:20.694]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.694]                       if (muffled) 
[17:02:20.694]                         invokeRestart("muffleWarning")
[17:02:20.694]                     }
[17:02:20.694]                     else if (inherits(cond, "condition")) {
[17:02:20.694]                       if (!is.null(pattern)) {
[17:02:20.694]                         computeRestarts <- base::computeRestarts
[17:02:20.694]                         grepl <- base::grepl
[17:02:20.694]                         restarts <- computeRestarts(cond)
[17:02:20.694]                         for (restart in restarts) {
[17:02:20.694]                           name <- restart$name
[17:02:20.694]                           if (is.null(name)) 
[17:02:20.694]                             next
[17:02:20.694]                           if (!grepl(pattern, name)) 
[17:02:20.694]                             next
[17:02:20.694]                           invokeRestart(restart)
[17:02:20.694]                           muffled <- TRUE
[17:02:20.694]                           break
[17:02:20.694]                         }
[17:02:20.694]                       }
[17:02:20.694]                     }
[17:02:20.694]                     invisible(muffled)
[17:02:20.694]                   }
[17:02:20.694]                   muffleCondition(cond)
[17:02:20.694]                 })
[17:02:20.694]             }))
[17:02:20.694]             future::FutureResult(value = ...future.value$value, 
[17:02:20.694]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.694]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.694]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.694]                     ...future.globalenv.names))
[17:02:20.694]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.694]         }, condition = base::local({
[17:02:20.694]             c <- base::c
[17:02:20.694]             inherits <- base::inherits
[17:02:20.694]             invokeRestart <- base::invokeRestart
[17:02:20.694]             length <- base::length
[17:02:20.694]             list <- base::list
[17:02:20.694]             seq.int <- base::seq.int
[17:02:20.694]             signalCondition <- base::signalCondition
[17:02:20.694]             sys.calls <- base::sys.calls
[17:02:20.694]             `[[` <- base::`[[`
[17:02:20.694]             `+` <- base::`+`
[17:02:20.694]             `<<-` <- base::`<<-`
[17:02:20.694]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.694]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.694]                   3L)]
[17:02:20.694]             }
[17:02:20.694]             function(cond) {
[17:02:20.694]                 is_error <- inherits(cond, "error")
[17:02:20.694]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.694]                   NULL)
[17:02:20.694]                 if (is_error) {
[17:02:20.694]                   sessionInformation <- function() {
[17:02:20.694]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.694]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.694]                       search = base::search(), system = base::Sys.info())
[17:02:20.694]                   }
[17:02:20.694]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.694]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.694]                     cond$call), session = sessionInformation(), 
[17:02:20.694]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.694]                   signalCondition(cond)
[17:02:20.694]                 }
[17:02:20.694]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.694]                 "immediateCondition"))) {
[17:02:20.694]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.694]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.694]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.694]                   if (TRUE && !signal) {
[17:02:20.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.694]                     {
[17:02:20.694]                       inherits <- base::inherits
[17:02:20.694]                       invokeRestart <- base::invokeRestart
[17:02:20.694]                       is.null <- base::is.null
[17:02:20.694]                       muffled <- FALSE
[17:02:20.694]                       if (inherits(cond, "message")) {
[17:02:20.694]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.694]                         if (muffled) 
[17:02:20.694]                           invokeRestart("muffleMessage")
[17:02:20.694]                       }
[17:02:20.694]                       else if (inherits(cond, "warning")) {
[17:02:20.694]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.694]                         if (muffled) 
[17:02:20.694]                           invokeRestart("muffleWarning")
[17:02:20.694]                       }
[17:02:20.694]                       else if (inherits(cond, "condition")) {
[17:02:20.694]                         if (!is.null(pattern)) {
[17:02:20.694]                           computeRestarts <- base::computeRestarts
[17:02:20.694]                           grepl <- base::grepl
[17:02:20.694]                           restarts <- computeRestarts(cond)
[17:02:20.694]                           for (restart in restarts) {
[17:02:20.694]                             name <- restart$name
[17:02:20.694]                             if (is.null(name)) 
[17:02:20.694]                               next
[17:02:20.694]                             if (!grepl(pattern, name)) 
[17:02:20.694]                               next
[17:02:20.694]                             invokeRestart(restart)
[17:02:20.694]                             muffled <- TRUE
[17:02:20.694]                             break
[17:02:20.694]                           }
[17:02:20.694]                         }
[17:02:20.694]                       }
[17:02:20.694]                       invisible(muffled)
[17:02:20.694]                     }
[17:02:20.694]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.694]                   }
[17:02:20.694]                 }
[17:02:20.694]                 else {
[17:02:20.694]                   if (TRUE) {
[17:02:20.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.694]                     {
[17:02:20.694]                       inherits <- base::inherits
[17:02:20.694]                       invokeRestart <- base::invokeRestart
[17:02:20.694]                       is.null <- base::is.null
[17:02:20.694]                       muffled <- FALSE
[17:02:20.694]                       if (inherits(cond, "message")) {
[17:02:20.694]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.694]                         if (muffled) 
[17:02:20.694]                           invokeRestart("muffleMessage")
[17:02:20.694]                       }
[17:02:20.694]                       else if (inherits(cond, "warning")) {
[17:02:20.694]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.694]                         if (muffled) 
[17:02:20.694]                           invokeRestart("muffleWarning")
[17:02:20.694]                       }
[17:02:20.694]                       else if (inherits(cond, "condition")) {
[17:02:20.694]                         if (!is.null(pattern)) {
[17:02:20.694]                           computeRestarts <- base::computeRestarts
[17:02:20.694]                           grepl <- base::grepl
[17:02:20.694]                           restarts <- computeRestarts(cond)
[17:02:20.694]                           for (restart in restarts) {
[17:02:20.694]                             name <- restart$name
[17:02:20.694]                             if (is.null(name)) 
[17:02:20.694]                               next
[17:02:20.694]                             if (!grepl(pattern, name)) 
[17:02:20.694]                               next
[17:02:20.694]                             invokeRestart(restart)
[17:02:20.694]                             muffled <- TRUE
[17:02:20.694]                             break
[17:02:20.694]                           }
[17:02:20.694]                         }
[17:02:20.694]                       }
[17:02:20.694]                       invisible(muffled)
[17:02:20.694]                     }
[17:02:20.694]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.694]                   }
[17:02:20.694]                 }
[17:02:20.694]             }
[17:02:20.694]         }))
[17:02:20.694]     }, error = function(ex) {
[17:02:20.694]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.694]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.694]                 ...future.rng), started = ...future.startTime, 
[17:02:20.694]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.694]             version = "1.8"), class = "FutureResult")
[17:02:20.694]     }, finally = {
[17:02:20.694]         if (!identical(...future.workdir, getwd())) 
[17:02:20.694]             setwd(...future.workdir)
[17:02:20.694]         {
[17:02:20.694]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.694]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.694]             }
[17:02:20.694]             base::options(...future.oldOptions)
[17:02:20.694]             if (.Platform$OS.type == "windows") {
[17:02:20.694]                 old_names <- names(...future.oldEnvVars)
[17:02:20.694]                 envs <- base::Sys.getenv()
[17:02:20.694]                 names <- names(envs)
[17:02:20.694]                 common <- intersect(names, old_names)
[17:02:20.694]                 added <- setdiff(names, old_names)
[17:02:20.694]                 removed <- setdiff(old_names, names)
[17:02:20.694]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.694]                   envs[common]]
[17:02:20.694]                 NAMES <- toupper(changed)
[17:02:20.694]                 args <- list()
[17:02:20.694]                 for (kk in seq_along(NAMES)) {
[17:02:20.694]                   name <- changed[[kk]]
[17:02:20.694]                   NAME <- NAMES[[kk]]
[17:02:20.694]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.694]                     next
[17:02:20.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.694]                 }
[17:02:20.694]                 NAMES <- toupper(added)
[17:02:20.694]                 for (kk in seq_along(NAMES)) {
[17:02:20.694]                   name <- added[[kk]]
[17:02:20.694]                   NAME <- NAMES[[kk]]
[17:02:20.694]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.694]                     next
[17:02:20.694]                   args[[name]] <- ""
[17:02:20.694]                 }
[17:02:20.694]                 NAMES <- toupper(removed)
[17:02:20.694]                 for (kk in seq_along(NAMES)) {
[17:02:20.694]                   name <- removed[[kk]]
[17:02:20.694]                   NAME <- NAMES[[kk]]
[17:02:20.694]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.694]                     next
[17:02:20.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.694]                 }
[17:02:20.694]                 if (length(args) > 0) 
[17:02:20.694]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.694]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.694]             }
[17:02:20.694]             else {
[17:02:20.694]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.694]             }
[17:02:20.694]             {
[17:02:20.694]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.694]                   0L) {
[17:02:20.694]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.694]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.694]                   base::options(opts)
[17:02:20.694]                 }
[17:02:20.694]                 {
[17:02:20.694]                   {
[17:02:20.694]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.694]                     NULL
[17:02:20.694]                   }
[17:02:20.694]                   options(future.plan = NULL)
[17:02:20.694]                   if (is.na(NA_character_)) 
[17:02:20.694]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.694]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.694]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.694]                     .init = FALSE)
[17:02:20.694]                 }
[17:02:20.694]             }
[17:02:20.694]         }
[17:02:20.694]     })
[17:02:20.694]     if (TRUE) {
[17:02:20.694]         base::sink(type = "output", split = FALSE)
[17:02:20.694]         if (TRUE) {
[17:02:20.694]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.694]         }
[17:02:20.694]         else {
[17:02:20.694]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.694]         }
[17:02:20.694]         base::close(...future.stdout)
[17:02:20.694]         ...future.stdout <- NULL
[17:02:20.694]     }
[17:02:20.694]     ...future.result$conditions <- ...future.conditions
[17:02:20.694]     ...future.result$finished <- base::Sys.time()
[17:02:20.694]     ...future.result
[17:02:20.694] }
[17:02:20.697] requestCore(): workers = 2
[17:02:20.699] MulticoreFuture started
[17:02:20.700] - Launch lazy future ... done
[17:02:20.704] run() for ‘MulticoreFuture’ ... done
[17:02:20.704] plan(): Setting new future strategy stack:
[17:02:20.704] result() for MulticoreFuture ...
[17:02:20.705] List of future strategies:
[17:02:20.705] 1. sequential:
[17:02:20.705]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.705]    - tweaked: FALSE
[17:02:20.705]    - call: NULL
[17:02:20.706] plan(): nbrOfWorkers() = 1
[17:02:20.735] plan(): Setting new future strategy stack:
[17:02:20.736] List of future strategies:
[17:02:20.736] 1. multicore:
[17:02:20.736]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.736]    - tweaked: FALSE
[17:02:20.736]    - call: plan(strategy)
[17:02:20.740] plan(): nbrOfWorkers() = 2
[17:02:20.741] result() for MulticoreFuture ...
[17:02:20.742] result() for MulticoreFuture ... done
[17:02:20.742] signalConditions() ...
[17:02:20.742]  - include = ‘immediateCondition’
[17:02:20.742]  - exclude = 
[17:02:20.742]  - resignal = FALSE
[17:02:20.742]  - Number of conditions: 88
[17:02:20.743] signalConditions() ... done
[17:02:20.743] result() for MulticoreFuture ... done
[17:02:20.743] result() for MulticoreFuture ...
[17:02:20.743] result() for MulticoreFuture ... done
[17:02:20.743] signalConditions() ...
[17:02:20.743]  - include = ‘immediateCondition’
[17:02:20.743]  - exclude = 
[17:02:20.743]  - resignal = FALSE
[17:02:20.744]  - Number of conditions: 88
[17:02:20.744] signalConditions() ... done
[17:02:20.744] Future state: ‘finished’
[17:02:20.744] result() for MulticoreFuture ...
[17:02:20.744] result() for MulticoreFuture ... done
[17:02:20.744] signalConditions() ...
[17:02:20.745]  - include = ‘condition’
[17:02:20.745]  - exclude = ‘immediateCondition’
[17:02:20.745]  - resignal = TRUE
[17:02:20.745]  - Number of conditions: 88
[17:02:20.745]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.707] getGlobalsAndPackages() ...
[17:02:20.745]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.708] Searching for globals...
[17:02:20.745]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.708] 
[17:02:20.746]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.709] Searching for globals ... DONE
[17:02:20.746]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.709] - globals: [0] <none>
[17:02:20.746]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.709] getGlobalsAndPackages() ... DONE
[17:02:20.746]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.710] run() for ‘Future’ ...
[17:02:20.746]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.710] - state: ‘created’
[17:02:20.747]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.710] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.747]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.711] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.747]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.711] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.747]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.711]   - Field: ‘label’
[17:02:20.747]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.712]   - Field: ‘local’
[17:02:20.747]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.712]   - Field: ‘owner’
[17:02:20.748]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.712]   - Field: ‘envir’
[17:02:20.748]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.712]   - Field: ‘packages’
[17:02:20.748]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.712]   - Field: ‘gc’
[17:02:20.748]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.713]   - Field: ‘conditions’
[17:02:20.748]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.713]   - Field: ‘expr’
[17:02:20.748]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.713]   - Field: ‘uuid’
[17:02:20.749]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.713]   - Field: ‘seed’
[17:02:20.749]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.713]   - Field: ‘version’
[17:02:20.749]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.713]   - Field: ‘result’
[17:02:20.749]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.714]   - Field: ‘asynchronous’
[17:02:20.749]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.714]   - Field: ‘calls’
[17:02:20.749]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.714]   - Field: ‘globals’
[17:02:20.750]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.714]   - Field: ‘stdout’
[17:02:20.750]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.714]   - Field: ‘earlySignal’
[17:02:20.750]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.715]   - Field: ‘lazy’
[17:02:20.750]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.715]   - Field: ‘state’
[17:02:20.750]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.715] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.750]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.715] - Launch lazy future ...
[17:02:20.750]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.715] Packages needed by the future expression (n = 0): <none>
[17:02:20.751]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.716] Packages needed by future strategies (n = 0): <none>
[17:02:20.751]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.716] {
[17:02:20.716]     {
[17:02:20.716]         {
[17:02:20.716]             ...future.startTime <- base::Sys.time()
[17:02:20.716]             {
[17:02:20.716]                 {
[17:02:20.716]                   {
[17:02:20.716]                     base::local({
[17:02:20.716]                       has_future <- base::requireNamespace("future", 
[17:02:20.716]                         quietly = TRUE)
[17:02:20.716]                       if (has_future) {
[17:02:20.716]                         ns <- base::getNamespace("future")
[17:02:20.716]                         version <- ns[[".package"]][["version"]]
[17:02:20.716]                         if (is.null(version)) 
[17:02:20.716]                           version <- utils::packageVersion("future")
[17:02:20.716]                       }
[17:02:20.716]                       else {
[17:02:20.716]                         version <- NULL
[17:02:20.716]                       }
[17:02:20.716]                       if (!has_future || version < "1.8.0") {
[17:02:20.716]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.716]                           "", base::R.version$version.string), 
[17:02:20.716]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.716]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.716]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.716]                             "release", "version")], collapse = " "), 
[17:02:20.716]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.716]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.716]                           info)
[17:02:20.716]                         info <- base::paste(info, collapse = "; ")
[17:02:20.716]                         if (!has_future) {
[17:02:20.716]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.716]                             info)
[17:02:20.716]                         }
[17:02:20.716]                         else {
[17:02:20.716]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.716]                             info, version)
[17:02:20.716]                         }
[17:02:20.716]                         base::stop(msg)
[17:02:20.716]                       }
[17:02:20.716]                     })
[17:02:20.716]                   }
[17:02:20.716]                   ...future.strategy.old <- future::plan("list")
[17:02:20.716]                   options(future.plan = NULL)
[17:02:20.716]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.716]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.716]                 }
[17:02:20.716]                 ...future.workdir <- getwd()
[17:02:20.716]             }
[17:02:20.716]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.716]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.716]         }
[17:02:20.716]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.716]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.716]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.716]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.716]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.716]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.716]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.716]             base::names(...future.oldOptions))
[17:02:20.716]     }
[17:02:20.716]     if (FALSE) {
[17:02:20.716]     }
[17:02:20.716]     else {
[17:02:20.716]         if (TRUE) {
[17:02:20.716]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.716]                 open = "w")
[17:02:20.716]         }
[17:02:20.716]         else {
[17:02:20.716]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.716]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.716]         }
[17:02:20.716]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.716]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.716]             base::sink(type = "output", split = FALSE)
[17:02:20.716]             base::close(...future.stdout)
[17:02:20.716]         }, add = TRUE)
[17:02:20.716]     }
[17:02:20.716]     ...future.frame <- base::sys.nframe()
[17:02:20.716]     ...future.conditions <- base::list()
[17:02:20.716]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.716]     if (FALSE) {
[17:02:20.716]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.716]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.716]     }
[17:02:20.716]     ...future.result <- base::tryCatch({
[17:02:20.716]         base::withCallingHandlers({
[17:02:20.716]             ...future.value <- base::withVisible(base::local(2))
[17:02:20.716]             future::FutureResult(value = ...future.value$value, 
[17:02:20.716]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.716]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.716]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.716]                     ...future.globalenv.names))
[17:02:20.716]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.716]         }, condition = base::local({
[17:02:20.716]             c <- base::c
[17:02:20.716]             inherits <- base::inherits
[17:02:20.716]             invokeRestart <- base::invokeRestart
[17:02:20.716]             length <- base::length
[17:02:20.716]             list <- base::list
[17:02:20.716]             seq.int <- base::seq.int
[17:02:20.716]             signalCondition <- base::signalCondition
[17:02:20.716]             sys.calls <- base::sys.calls
[17:02:20.716]             `[[` <- base::`[[`
[17:02:20.716]             `+` <- base::`+`
[17:02:20.716]             `<<-` <- base::`<<-`
[17:02:20.716]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.716]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.716]                   3L)]
[17:02:20.716]             }
[17:02:20.716]             function(cond) {
[17:02:20.716]                 is_error <- inherits(cond, "error")
[17:02:20.716]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.716]                   NULL)
[17:02:20.716]                 if (is_error) {
[17:02:20.716]                   sessionInformation <- function() {
[17:02:20.716]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.716]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.716]                       search = base::search(), system = base::Sys.info())
[17:02:20.716]                   }
[17:02:20.716]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.716]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.716]                     cond$call), session = sessionInformation(), 
[17:02:20.716]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.716]                   signalCondition(cond)
[17:02:20.716]                 }
[17:02:20.716]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.716]                 "immediateCondition"))) {
[17:02:20.716]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.716]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.716]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.716]                   if (TRUE && !signal) {
[17:02:20.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.716]                     {
[17:02:20.716]                       inherits <- base::inherits
[17:02:20.716]                       invokeRestart <- base::invokeRestart
[17:02:20.716]                       is.null <- base::is.null
[17:02:20.716]                       muffled <- FALSE
[17:02:20.716]                       if (inherits(cond, "message")) {
[17:02:20.716]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.716]                         if (muffled) 
[17:02:20.716]                           invokeRestart("muffleMessage")
[17:02:20.716]                       }
[17:02:20.716]                       else if (inherits(cond, "warning")) {
[17:02:20.716]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.716]                         if (muffled) 
[17:02:20.716]                           invokeRestart("muffleWarning")
[17:02:20.716]                       }
[17:02:20.716]                       else if (inherits(cond, "condition")) {
[17:02:20.716]                         if (!is.null(pattern)) {
[17:02:20.716]                           computeRestarts <- base::computeRestarts
[17:02:20.716]                           grepl <- base::grepl
[17:02:20.716]                           restarts <- computeRestarts(cond)
[17:02:20.716]                           for (restart in restarts) {
[17:02:20.716]                             name <- restart$name
[17:02:20.716]                             if (is.null(name)) 
[17:02:20.716]                               next
[17:02:20.716]                             if (!grepl(pattern, name)) 
[17:02:20.716]                               next
[17:02:20.716]                             invokeRestart(restart)
[17:02:20.716]                             muffled <- TRUE
[17:02:20.716]                             break
[17:02:20.716]                           }
[17:02:20.716]                         }
[17:02:20.716]                       }
[17:02:20.716]                       invisible(muffled)
[17:02:20.716]                     }
[17:02:20.716]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.716]                   }
[17:02:20.716]                 }
[17:02:20.716]                 else {
[17:02:20.716]                   if (TRUE) {
[17:02:20.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.716]                     {
[17:02:20.716]                       inherits <- base::inherits
[17:02:20.716]                       invokeRestart <- base::invokeRestart
[17:02:20.716]                       is.null <- base::is.null
[17:02:20.716]                       muffled <- FALSE
[17:02:20.716]                       if (inherits(cond, "message")) {
[17:02:20.716]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.716]                         if (muffled) 
[17:02:20.716]                           invokeRestart("muffleMessage")
[17:02:20.716]                       }
[17:02:20.716]                       else if (inherits(cond, "warning")) {
[17:02:20.716]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.716]                         if (muffled) 
[17:02:20.716]                           invokeRestart("muffleWarning")
[17:02:20.716]                       }
[17:02:20.716]                       else if (inherits(cond, "condition")) {
[17:02:20.716]                         if (!is.null(pattern)) {
[17:02:20.716]                           computeRestarts <- base::computeRestarts
[17:02:20.716]                           grepl <- base::grepl
[17:02:20.716]                           restarts <- computeRestarts(cond)
[17:02:20.716]                           for (restart in restarts) {
[17:02:20.716]                             name <- restart$name
[17:02:20.716]                             if (is.null(name)) 
[17:02:20.716]                               next
[17:02:20.716]                             if (!grepl(pattern, name)) 
[17:02:20.716]                               next
[17:02:20.716]                             invokeRestart(restart)
[17:02:20.716]                             muffled <- TRUE
[17:02:20.716]                             break
[17:02:20.716]                           }
[17:02:20.716]                         }
[17:02:20.716]                       }
[17:02:20.716]                       invisible(muffled)
[17:02:20.716]                     }
[17:02:20.716]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.716]                   }
[17:02:20.716]                 }
[17:02:20.716]             }
[17:02:20.716]         }))
[17:02:20.716]     }, error = function(ex) {
[17:02:20.716]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.716]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.716]                 ...future.rng), started = ...future.startTime, 
[17:02:20.716]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.716]             version = "1.8"), class = "FutureResult")
[17:02:20.716]     }, finally = {
[17:02:20.716]         if (!identical(...future.workdir, getwd())) 
[17:02:20.716]             setwd(...future.workdir)
[17:02:20.716]         {
[17:02:20.716]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.716]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.716]             }
[17:02:20.716]             base::options(...future.oldOptions)
[17:02:20.716]             if (.Platform$OS.type == "windows") {
[17:02:20.716]                 old_names <- names(...future.oldEnvVars)
[17:02:20.716]                 envs <- base::Sys.getenv()
[17:02:20.716]                 names <- names(envs)
[17:02:20.716]                 common <- intersect(names, old_names)
[17:02:20.716]                 added <- setdiff(names, old_names)
[17:02:20.716]                 removed <- setdiff(old_names, names)
[17:02:20.716]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.716]                   envs[common]]
[17:02:20.716]                 NAMES <- toupper(changed)
[17:02:20.716]                 args <- list()
[17:02:20.716]                 for (kk in seq_along(NAMES)) {
[17:02:20.716]                   name <- changed[[kk]]
[17:02:20.716]                   NAME <- NAMES[[kk]]
[17:02:20.716]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.716]                     next
[17:02:20.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.716]                 }
[17:02:20.716]                 NAMES <- toupper(added)
[17:02:20.716]                 for (kk in seq_along(NAMES)) {
[17:02:20.716]                   name <- added[[kk]]
[17:02:20.716]                   NAME <- NAMES[[kk]]
[17:02:20.716]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.716]                     next
[17:02:20.716]                   args[[name]] <- ""
[17:02:20.716]                 }
[17:02:20.716]                 NAMES <- toupper(removed)
[17:02:20.716]                 for (kk in seq_along(NAMES)) {
[17:02:20.716]                   name <- removed[[kk]]
[17:02:20.716]                   NAME <- NAMES[[kk]]
[17:02:20.716]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.716]                     next
[17:02:20.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.716]                 }
[17:02:20.716]                 if (length(args) > 0) 
[17:02:20.716]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.716]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.716]             }
[17:02:20.716]             else {
[17:02:20.716]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.716]             }
[17:02:20.716]             {
[17:02:20.716]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.716]                   0L) {
[17:02:20.716]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.716]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.716]                   base::options(opts)
[17:02:20.716]                 }
[17:02:20.716]                 {
[17:02:20.716]                   {
[17:02:20.716]                     NULL
[17:02:20.716]                     RNGkind("Mersenne-Twister")
[17:02:20.716]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.716]                       inherits = FALSE)
[17:02:20.716]                   }
[17:02:20.716]                   options(future.plan = NULL)
[17:02:20.716]                   if (is.na(NA_character_)) 
[17:02:20.716]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.716]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.716]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.716]                     .init = FALSE)
[17:02:20.716]                 }
[17:02:20.716]             }
[17:02:20.716]         }
[17:02:20.716]     })
[17:02:20.716]     if (TRUE) {
[17:02:20.716]         base::sink(type = "output", split = FALSE)
[17:02:20.716]         if (TRUE) {
[17:02:20.716]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.716]         }
[17:02:20.716]         else {
[17:02:20.716]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.716]         }
[17:02:20.716]         base::close(...future.stdout)
[17:02:20.716]         ...future.stdout <- NULL
[17:02:20.716]     }
[17:02:20.716]     ...future.result$conditions <- ...future.conditions
[17:02:20.716]     ...future.result$finished <- base::Sys.time()
[17:02:20.716]     ...future.result
[17:02:20.716] }
[17:02:20.751]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.719] plan(): Setting new future strategy stack:
[17:02:20.751]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.719] List of future strategies:
[17:02:20.719] 1. sequential:
[17:02:20.719]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.719]    - tweaked: FALSE
[17:02:20.719]    - call: NULL
[17:02:20.751]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.719] plan(): nbrOfWorkers() = 1
[17:02:20.751]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.721] plan(): Setting new future strategy stack:
[17:02:20.752]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.721] List of future strategies:
[17:02:20.721] 1. sequential:
[17:02:20.721]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.721]    - tweaked: FALSE
[17:02:20.721]    - call: NULL
[17:02:20.752]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.721] plan(): nbrOfWorkers() = 1
[17:02:20.752]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.722] SequentialFuture started (and completed)
[17:02:20.752]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.722] - Launch lazy future ... done
[17:02:20.752]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.722] run() for ‘SequentialFuture’ ... done
[17:02:20.752]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.722] getGlobalsAndPackages() ...
[17:02:20.753]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.722] Searching for globals...
[17:02:20.753]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.723] 
[17:02:20.753]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.723] Searching for globals ... DONE
[17:02:20.753]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.723] - globals: [0] <none>
[17:02:20.753]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.723] getGlobalsAndPackages() ... DONE
[17:02:20.753]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.724] run() for ‘Future’ ...
[17:02:20.754]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.724] - state: ‘created’
[17:02:20.754]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.724] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:20.754]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.725] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:20.754]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.725] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:20.754]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.725]   - Field: ‘label’
[17:02:20.754]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.725]   - Field: ‘local’
[17:02:20.754]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.725]   - Field: ‘owner’
[17:02:20.755]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘envir’
[17:02:20.755]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘packages’
[17:02:20.755]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘gc’
[17:02:20.755]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘conditions’
[17:02:20.755]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘expr’
[17:02:20.755]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘uuid’
[17:02:20.756]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.726]   - Field: ‘seed’
[17:02:20.756]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.727]   - Field: ‘version’
[17:02:20.756]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.727]   - Field: ‘result’
[17:02:20.756]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.727]   - Field: ‘asynchronous’
[17:02:20.756]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.727]   - Field: ‘calls’
[17:02:20.757]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.727]   - Field: ‘globals’
[17:02:20.757]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.727]   - Field: ‘stdout’
[17:02:20.757]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.728]   - Field: ‘earlySignal’
[17:02:20.757]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.728]   - Field: ‘lazy’
[17:02:20.757]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.728]   - Field: ‘state’
[17:02:20.757]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.728] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:20.757]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.728] - Launch lazy future ...
[17:02:20.758]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.728] Packages needed by the future expression (n = 0): <none>
[17:02:20.758]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.729] Packages needed by future strategies (n = 0): <none>
[17:02:20.758]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.729] {
[17:02:20.729]     {
[17:02:20.729]         {
[17:02:20.729]             ...future.startTime <- base::Sys.time()
[17:02:20.729]             {
[17:02:20.729]                 {
[17:02:20.729]                   {
[17:02:20.729]                     base::local({
[17:02:20.729]                       has_future <- base::requireNamespace("future", 
[17:02:20.729]                         quietly = TRUE)
[17:02:20.729]                       if (has_future) {
[17:02:20.729]                         ns <- base::getNamespace("future")
[17:02:20.729]                         version <- ns[[".package"]][["version"]]
[17:02:20.729]                         if (is.null(version)) 
[17:02:20.729]                           version <- utils::packageVersion("future")
[17:02:20.729]                       }
[17:02:20.729]                       else {
[17:02:20.729]                         version <- NULL
[17:02:20.729]                       }
[17:02:20.729]                       if (!has_future || version < "1.8.0") {
[17:02:20.729]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.729]                           "", base::R.version$version.string), 
[17:02:20.729]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:20.729]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.729]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.729]                             "release", "version")], collapse = " "), 
[17:02:20.729]                           hostname = base::Sys.info()[["nodename"]])
[17:02:20.729]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.729]                           info)
[17:02:20.729]                         info <- base::paste(info, collapse = "; ")
[17:02:20.729]                         if (!has_future) {
[17:02:20.729]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.729]                             info)
[17:02:20.729]                         }
[17:02:20.729]                         else {
[17:02:20.729]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.729]                             info, version)
[17:02:20.729]                         }
[17:02:20.729]                         base::stop(msg)
[17:02:20.729]                       }
[17:02:20.729]                     })
[17:02:20.729]                   }
[17:02:20.729]                   ...future.strategy.old <- future::plan("list")
[17:02:20.729]                   options(future.plan = NULL)
[17:02:20.729]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.729]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.729]                 }
[17:02:20.729]                 ...future.workdir <- getwd()
[17:02:20.729]             }
[17:02:20.729]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.729]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.729]         }
[17:02:20.729]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.729]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.729]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.729]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.729]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.729]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.729]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.729]             base::names(...future.oldOptions))
[17:02:20.729]     }
[17:02:20.729]     if (FALSE) {
[17:02:20.729]     }
[17:02:20.729]     else {
[17:02:20.729]         if (TRUE) {
[17:02:20.729]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.729]                 open = "w")
[17:02:20.729]         }
[17:02:20.729]         else {
[17:02:20.729]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.729]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.729]         }
[17:02:20.729]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.729]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.729]             base::sink(type = "output", split = FALSE)
[17:02:20.729]             base::close(...future.stdout)
[17:02:20.729]         }, add = TRUE)
[17:02:20.729]     }
[17:02:20.729]     ...future.frame <- base::sys.nframe()
[17:02:20.729]     ...future.conditions <- base::list()
[17:02:20.729]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.729]     if (FALSE) {
[17:02:20.729]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.729]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.729]     }
[17:02:20.729]     ...future.result <- base::tryCatch({
[17:02:20.729]         base::withCallingHandlers({
[17:02:20.729]             ...future.value <- base::withVisible(base::local(4))
[17:02:20.729]             future::FutureResult(value = ...future.value$value, 
[17:02:20.729]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.729]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.729]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.729]                     ...future.globalenv.names))
[17:02:20.729]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.729]         }, condition = base::local({
[17:02:20.729]             c <- base::c
[17:02:20.729]             inherits <- base::inherits
[17:02:20.729]             invokeRestart <- base::invokeRestart
[17:02:20.729]             length <- base::length
[17:02:20.729]             list <- base::list
[17:02:20.729]             seq.int <- base::seq.int
[17:02:20.729]             signalCondition <- base::signalCondition
[17:02:20.729]             sys.calls <- base::sys.calls
[17:02:20.729]             `[[` <- base::`[[`
[17:02:20.729]             `+` <- base::`+`
[17:02:20.729]             `<<-` <- base::`<<-`
[17:02:20.729]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.729]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.729]                   3L)]
[17:02:20.729]             }
[17:02:20.729]             function(cond) {
[17:02:20.729]                 is_error <- inherits(cond, "error")
[17:02:20.729]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.729]                   NULL)
[17:02:20.729]                 if (is_error) {
[17:02:20.729]                   sessionInformation <- function() {
[17:02:20.729]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.729]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.729]                       search = base::search(), system = base::Sys.info())
[17:02:20.729]                   }
[17:02:20.729]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.729]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.729]                     cond$call), session = sessionInformation(), 
[17:02:20.729]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.729]                   signalCondition(cond)
[17:02:20.729]                 }
[17:02:20.729]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.729]                 "immediateCondition"))) {
[17:02:20.729]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.729]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.729]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.729]                   if (TRUE && !signal) {
[17:02:20.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.729]                     {
[17:02:20.729]                       inherits <- base::inherits
[17:02:20.729]                       invokeRestart <- base::invokeRestart
[17:02:20.729]                       is.null <- base::is.null
[17:02:20.729]                       muffled <- FALSE
[17:02:20.729]                       if (inherits(cond, "message")) {
[17:02:20.729]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.729]                         if (muffled) 
[17:02:20.729]                           invokeRestart("muffleMessage")
[17:02:20.729]                       }
[17:02:20.729]                       else if (inherits(cond, "warning")) {
[17:02:20.729]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.729]                         if (muffled) 
[17:02:20.729]                           invokeRestart("muffleWarning")
[17:02:20.729]                       }
[17:02:20.729]                       else if (inherits(cond, "condition")) {
[17:02:20.729]                         if (!is.null(pattern)) {
[17:02:20.729]                           computeRestarts <- base::computeRestarts
[17:02:20.729]                           grepl <- base::grepl
[17:02:20.729]                           restarts <- computeRestarts(cond)
[17:02:20.729]                           for (restart in restarts) {
[17:02:20.729]                             name <- restart$name
[17:02:20.729]                             if (is.null(name)) 
[17:02:20.729]                               next
[17:02:20.729]                             if (!grepl(pattern, name)) 
[17:02:20.729]                               next
[17:02:20.729]                             invokeRestart(restart)
[17:02:20.729]                             muffled <- TRUE
[17:02:20.729]                             break
[17:02:20.729]                           }
[17:02:20.729]                         }
[17:02:20.729]                       }
[17:02:20.729]                       invisible(muffled)
[17:02:20.729]                     }
[17:02:20.729]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.729]                   }
[17:02:20.729]                 }
[17:02:20.729]                 else {
[17:02:20.729]                   if (TRUE) {
[17:02:20.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.729]                     {
[17:02:20.729]                       inherits <- base::inherits
[17:02:20.729]                       invokeRestart <- base::invokeRestart
[17:02:20.729]                       is.null <- base::is.null
[17:02:20.729]                       muffled <- FALSE
[17:02:20.729]                       if (inherits(cond, "message")) {
[17:02:20.729]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.729]                         if (muffled) 
[17:02:20.729]                           invokeRestart("muffleMessage")
[17:02:20.729]                       }
[17:02:20.729]                       else if (inherits(cond, "warning")) {
[17:02:20.729]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.729]                         if (muffled) 
[17:02:20.729]                           invokeRestart("muffleWarning")
[17:02:20.729]                       }
[17:02:20.729]                       else if (inherits(cond, "condition")) {
[17:02:20.729]                         if (!is.null(pattern)) {
[17:02:20.729]                           computeRestarts <- base::computeRestarts
[17:02:20.729]                           grepl <- base::grepl
[17:02:20.729]                           restarts <- computeRestarts(cond)
[17:02:20.729]                           for (restart in restarts) {
[17:02:20.729]                             name <- restart$name
[17:02:20.729]                             if (is.null(name)) 
[17:02:20.729]                               next
[17:02:20.729]                             if (!grepl(pattern, name)) 
[17:02:20.729]                               next
[17:02:20.729]                             invokeRestart(restart)
[17:02:20.729]                             muffled <- TRUE
[17:02:20.729]                             break
[17:02:20.729]                           }
[17:02:20.729]                         }
[17:02:20.729]                       }
[17:02:20.729]                       invisible(muffled)
[17:02:20.729]                     }
[17:02:20.729]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.729]                   }
[17:02:20.729]                 }
[17:02:20.729]             }
[17:02:20.729]         }))
[17:02:20.729]     }, error = function(ex) {
[17:02:20.729]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.729]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.729]                 ...future.rng), started = ...future.startTime, 
[17:02:20.729]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.729]             version = "1.8"), class = "FutureResult")
[17:02:20.729]     }, finally = {
[17:02:20.729]         if (!identical(...future.workdir, getwd())) 
[17:02:20.729]             setwd(...future.workdir)
[17:02:20.729]         {
[17:02:20.729]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.729]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.729]             }
[17:02:20.729]             base::options(...future.oldOptions)
[17:02:20.729]             if (.Platform$OS.type == "windows") {
[17:02:20.729]                 old_names <- names(...future.oldEnvVars)
[17:02:20.729]                 envs <- base::Sys.getenv()
[17:02:20.729]                 names <- names(envs)
[17:02:20.729]                 common <- intersect(names, old_names)
[17:02:20.729]                 added <- setdiff(names, old_names)
[17:02:20.729]                 removed <- setdiff(old_names, names)
[17:02:20.729]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.729]                   envs[common]]
[17:02:20.729]                 NAMES <- toupper(changed)
[17:02:20.729]                 args <- list()
[17:02:20.729]                 for (kk in seq_along(NAMES)) {
[17:02:20.729]                   name <- changed[[kk]]
[17:02:20.729]                   NAME <- NAMES[[kk]]
[17:02:20.729]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.729]                     next
[17:02:20.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.729]                 }
[17:02:20.729]                 NAMES <- toupper(added)
[17:02:20.729]                 for (kk in seq_along(NAMES)) {
[17:02:20.729]                   name <- added[[kk]]
[17:02:20.729]                   NAME <- NAMES[[kk]]
[17:02:20.729]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.729]                     next
[17:02:20.729]                   args[[name]] <- ""
[17:02:20.729]                 }
[17:02:20.729]                 NAMES <- toupper(removed)
[17:02:20.729]                 for (kk in seq_along(NAMES)) {
[17:02:20.729]                   name <- removed[[kk]]
[17:02:20.729]                   NAME <- NAMES[[kk]]
[17:02:20.729]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.729]                     next
[17:02:20.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.729]                 }
[17:02:20.729]                 if (length(args) > 0) 
[17:02:20.729]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.729]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.729]             }
[17:02:20.729]             else {
[17:02:20.729]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.729]             }
[17:02:20.729]             {
[17:02:20.729]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.729]                   0L) {
[17:02:20.729]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.729]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.729]                   base::options(opts)
[17:02:20.729]                 }
[17:02:20.729]                 {
[17:02:20.729]                   {
[17:02:20.729]                     NULL
[17:02:20.729]                     RNGkind("Mersenne-Twister")
[17:02:20.729]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:20.729]                       inherits = FALSE)
[17:02:20.729]                   }
[17:02:20.729]                   options(future.plan = NULL)
[17:02:20.729]                   if (is.na(NA_character_)) 
[17:02:20.729]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.729]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.729]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.729]                     .init = FALSE)
[17:02:20.729]                 }
[17:02:20.729]             }
[17:02:20.729]         }
[17:02:20.729]     })
[17:02:20.729]     if (TRUE) {
[17:02:20.729]         base::sink(type = "output", split = FALSE)
[17:02:20.729]         if (TRUE) {
[17:02:20.729]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.729]         }
[17:02:20.729]         else {
[17:02:20.729]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.729]         }
[17:02:20.729]         base::close(...future.stdout)
[17:02:20.729]         ...future.stdout <- NULL
[17:02:20.729]     }
[17:02:20.729]     ...future.result$conditions <- ...future.conditions
[17:02:20.729]     ...future.result$finished <- base::Sys.time()
[17:02:20.729]     ...future.result
[17:02:20.729] }
[17:02:20.758]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.731] plan(): Setting new future strategy stack:
[17:02:20.758]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.732] List of future strategies:
[17:02:20.732] 1. sequential:
[17:02:20.732]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.732]    - tweaked: FALSE
[17:02:20.732]    - call: NULL
[17:02:20.758]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.732] plan(): nbrOfWorkers() = 1
[17:02:20.759]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.733] plan(): Setting new future strategy stack:
[17:02:20.759]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.733] List of future strategies:
[17:02:20.733] 1. sequential:
[17:02:20.733]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.733]    - tweaked: FALSE
[17:02:20.733]    - call: NULL
[17:02:20.759]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.734] plan(): nbrOfWorkers() = 1
[17:02:20.759]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.734] SequentialFuture started (and completed)
[17:02:20.759]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.734] - Launch lazy future ... done
[17:02:20.760]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:02:20.735] run() for ‘SequentialFuture’ ... done
[17:02:20.760] signalConditions() ... done
a = 10
[17:02:20.760] getGlobalsAndPackages() ...
[17:02:20.760] Searching for globals...
[17:02:20.761] - globals found: [3] ‘{’, ‘+’, ‘a’
[17:02:20.762] Searching for globals ... DONE
[17:02:20.762] Resolving globals: FALSE
[17:02:20.762] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:20.763] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:20.763] - globals: [1] ‘a’
[17:02:20.763] 
[17:02:20.763] getGlobalsAndPackages() ... DONE
[17:02:20.763] run() for ‘Future’ ...
[17:02:20.764] - state: ‘created’
[17:02:20.764] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:20.770] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:20.770] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:20.770]   - Field: ‘label’
[17:02:20.770]   - Field: ‘local’
[17:02:20.770]   - Field: ‘owner’
[17:02:20.770]   - Field: ‘envir’
[17:02:20.770]   - Field: ‘workers’
[17:02:20.771]   - Field: ‘packages’
[17:02:20.771]   - Field: ‘gc’
[17:02:20.771]   - Field: ‘job’
[17:02:20.771]   - Field: ‘conditions’
[17:02:20.771]   - Field: ‘expr’
[17:02:20.771]   - Field: ‘uuid’
[17:02:20.771]   - Field: ‘seed’
[17:02:20.771]   - Field: ‘version’
[17:02:20.771]   - Field: ‘result’
[17:02:20.772]   - Field: ‘asynchronous’
[17:02:20.772]   - Field: ‘calls’
[17:02:20.772]   - Field: ‘globals’
[17:02:20.772]   - Field: ‘stdout’
[17:02:20.772]   - Field: ‘earlySignal’
[17:02:20.772]   - Field: ‘lazy’
[17:02:20.772]   - Field: ‘state’
[17:02:20.772] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:20.772] - Launch lazy future ...
[17:02:20.773] Packages needed by the future expression (n = 0): <none>
[17:02:20.773] Packages needed by future strategies (n = 0): <none>
[17:02:20.773] {
[17:02:20.773]     {
[17:02:20.773]         {
[17:02:20.773]             ...future.startTime <- base::Sys.time()
[17:02:20.773]             {
[17:02:20.773]                 {
[17:02:20.773]                   {
[17:02:20.773]                     {
[17:02:20.773]                       base::local({
[17:02:20.773]                         has_future <- base::requireNamespace("future", 
[17:02:20.773]                           quietly = TRUE)
[17:02:20.773]                         if (has_future) {
[17:02:20.773]                           ns <- base::getNamespace("future")
[17:02:20.773]                           version <- ns[[".package"]][["version"]]
[17:02:20.773]                           if (is.null(version)) 
[17:02:20.773]                             version <- utils::packageVersion("future")
[17:02:20.773]                         }
[17:02:20.773]                         else {
[17:02:20.773]                           version <- NULL
[17:02:20.773]                         }
[17:02:20.773]                         if (!has_future || version < "1.8.0") {
[17:02:20.773]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:20.773]                             "", base::R.version$version.string), 
[17:02:20.773]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:20.773]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:20.773]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:20.773]                               "release", "version")], collapse = " "), 
[17:02:20.773]                             hostname = base::Sys.info()[["nodename"]])
[17:02:20.773]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:20.773]                             info)
[17:02:20.773]                           info <- base::paste(info, collapse = "; ")
[17:02:20.773]                           if (!has_future) {
[17:02:20.773]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:20.773]                               info)
[17:02:20.773]                           }
[17:02:20.773]                           else {
[17:02:20.773]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:20.773]                               info, version)
[17:02:20.773]                           }
[17:02:20.773]                           base::stop(msg)
[17:02:20.773]                         }
[17:02:20.773]                       })
[17:02:20.773]                     }
[17:02:20.773]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:20.773]                     base::options(mc.cores = 1L)
[17:02:20.773]                   }
[17:02:20.773]                   ...future.strategy.old <- future::plan("list")
[17:02:20.773]                   options(future.plan = NULL)
[17:02:20.773]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.773]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:20.773]                 }
[17:02:20.773]                 ...future.workdir <- getwd()
[17:02:20.773]             }
[17:02:20.773]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:20.773]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:20.773]         }
[17:02:20.773]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:20.773]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:20.773]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:20.773]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:20.773]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:20.773]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:20.773]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:20.773]             base::names(...future.oldOptions))
[17:02:20.773]     }
[17:02:20.773]     if (FALSE) {
[17:02:20.773]     }
[17:02:20.773]     else {
[17:02:20.773]         if (TRUE) {
[17:02:20.773]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:20.773]                 open = "w")
[17:02:20.773]         }
[17:02:20.773]         else {
[17:02:20.773]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:20.773]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:20.773]         }
[17:02:20.773]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:20.773]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:20.773]             base::sink(type = "output", split = FALSE)
[17:02:20.773]             base::close(...future.stdout)
[17:02:20.773]         }, add = TRUE)
[17:02:20.773]     }
[17:02:20.773]     ...future.frame <- base::sys.nframe()
[17:02:20.773]     ...future.conditions <- base::list()
[17:02:20.773]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:20.773]     if (FALSE) {
[17:02:20.773]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:20.773]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:20.773]     }
[17:02:20.773]     ...future.result <- base::tryCatch({
[17:02:20.773]         base::withCallingHandlers({
[17:02:20.773]             ...future.value <- base::withVisible(base::local({
[17:02:20.773]                 withCallingHandlers({
[17:02:20.773]                   {
[17:02:20.773]                     a + 1
[17:02:20.773]                   }
[17:02:20.773]                 }, immediateCondition = function(cond) {
[17:02:20.773]                   save_rds <- function (object, pathname, ...) 
[17:02:20.773]                   {
[17:02:20.773]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:20.773]                     if (file_test("-f", pathname_tmp)) {
[17:02:20.773]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.773]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:20.773]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.773]                         fi_tmp[["mtime"]])
[17:02:20.773]                     }
[17:02:20.773]                     tryCatch({
[17:02:20.773]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:20.773]                     }, error = function(ex) {
[17:02:20.773]                       msg <- conditionMessage(ex)
[17:02:20.773]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.773]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:20.773]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.773]                         fi_tmp[["mtime"]], msg)
[17:02:20.773]                       ex$message <- msg
[17:02:20.773]                       stop(ex)
[17:02:20.773]                     })
[17:02:20.773]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:20.773]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:20.773]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:20.773]                       fi_tmp <- file.info(pathname_tmp)
[17:02:20.773]                       fi <- file.info(pathname)
[17:02:20.773]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:20.773]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:20.773]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:20.773]                         fi[["size"]], fi[["mtime"]])
[17:02:20.773]                       stop(msg)
[17:02:20.773]                     }
[17:02:20.773]                     invisible(pathname)
[17:02:20.773]                   }
[17:02:20.773]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:20.773]                     rootPath = tempdir()) 
[17:02:20.773]                   {
[17:02:20.773]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:20.773]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:20.773]                       tmpdir = path, fileext = ".rds")
[17:02:20.773]                     save_rds(obj, file)
[17:02:20.773]                   }
[17:02:20.773]                   saveImmediateCondition(cond, path = "/tmp/Rtmp9cuntK/.future/immediateConditions")
[17:02:20.773]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.773]                   {
[17:02:20.773]                     inherits <- base::inherits
[17:02:20.773]                     invokeRestart <- base::invokeRestart
[17:02:20.773]                     is.null <- base::is.null
[17:02:20.773]                     muffled <- FALSE
[17:02:20.773]                     if (inherits(cond, "message")) {
[17:02:20.773]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:20.773]                       if (muffled) 
[17:02:20.773]                         invokeRestart("muffleMessage")
[17:02:20.773]                     }
[17:02:20.773]                     else if (inherits(cond, "warning")) {
[17:02:20.773]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:20.773]                       if (muffled) 
[17:02:20.773]                         invokeRestart("muffleWarning")
[17:02:20.773]                     }
[17:02:20.773]                     else if (inherits(cond, "condition")) {
[17:02:20.773]                       if (!is.null(pattern)) {
[17:02:20.773]                         computeRestarts <- base::computeRestarts
[17:02:20.773]                         grepl <- base::grepl
[17:02:20.773]                         restarts <- computeRestarts(cond)
[17:02:20.773]                         for (restart in restarts) {
[17:02:20.773]                           name <- restart$name
[17:02:20.773]                           if (is.null(name)) 
[17:02:20.773]                             next
[17:02:20.773]                           if (!grepl(pattern, name)) 
[17:02:20.773]                             next
[17:02:20.773]                           invokeRestart(restart)
[17:02:20.773]                           muffled <- TRUE
[17:02:20.773]                           break
[17:02:20.773]                         }
[17:02:20.773]                       }
[17:02:20.773]                     }
[17:02:20.773]                     invisible(muffled)
[17:02:20.773]                   }
[17:02:20.773]                   muffleCondition(cond)
[17:02:20.773]                 })
[17:02:20.773]             }))
[17:02:20.773]             future::FutureResult(value = ...future.value$value, 
[17:02:20.773]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.773]                   ...future.rng), globalenv = if (FALSE) 
[17:02:20.773]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:20.773]                     ...future.globalenv.names))
[17:02:20.773]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:20.773]         }, condition = base::local({
[17:02:20.773]             c <- base::c
[17:02:20.773]             inherits <- base::inherits
[17:02:20.773]             invokeRestart <- base::invokeRestart
[17:02:20.773]             length <- base::length
[17:02:20.773]             list <- base::list
[17:02:20.773]             seq.int <- base::seq.int
[17:02:20.773]             signalCondition <- base::signalCondition
[17:02:20.773]             sys.calls <- base::sys.calls
[17:02:20.773]             `[[` <- base::`[[`
[17:02:20.773]             `+` <- base::`+`
[17:02:20.773]             `<<-` <- base::`<<-`
[17:02:20.773]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:20.773]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:20.773]                   3L)]
[17:02:20.773]             }
[17:02:20.773]             function(cond) {
[17:02:20.773]                 is_error <- inherits(cond, "error")
[17:02:20.773]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:20.773]                   NULL)
[17:02:20.773]                 if (is_error) {
[17:02:20.773]                   sessionInformation <- function() {
[17:02:20.773]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:20.773]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:20.773]                       search = base::search(), system = base::Sys.info())
[17:02:20.773]                   }
[17:02:20.773]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.773]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:20.773]                     cond$call), session = sessionInformation(), 
[17:02:20.773]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:20.773]                   signalCondition(cond)
[17:02:20.773]                 }
[17:02:20.773]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:20.773]                 "immediateCondition"))) {
[17:02:20.773]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:20.773]                   ...future.conditions[[length(...future.conditions) + 
[17:02:20.773]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:20.773]                   if (TRUE && !signal) {
[17:02:20.773]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.773]                     {
[17:02:20.773]                       inherits <- base::inherits
[17:02:20.773]                       invokeRestart <- base::invokeRestart
[17:02:20.773]                       is.null <- base::is.null
[17:02:20.773]                       muffled <- FALSE
[17:02:20.773]                       if (inherits(cond, "message")) {
[17:02:20.773]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.773]                         if (muffled) 
[17:02:20.773]                           invokeRestart("muffleMessage")
[17:02:20.773]                       }
[17:02:20.773]                       else if (inherits(cond, "warning")) {
[17:02:20.773]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.773]                         if (muffled) 
[17:02:20.773]                           invokeRestart("muffleWarning")
[17:02:20.773]                       }
[17:02:20.773]                       else if (inherits(cond, "condition")) {
[17:02:20.773]                         if (!is.null(pattern)) {
[17:02:20.773]                           computeRestarts <- base::computeRestarts
[17:02:20.773]                           grepl <- base::grepl
[17:02:20.773]                           restarts <- computeRestarts(cond)
[17:02:20.773]                           for (restart in restarts) {
[17:02:20.773]                             name <- restart$name
[17:02:20.773]                             if (is.null(name)) 
[17:02:20.773]                               next
[17:02:20.773]                             if (!grepl(pattern, name)) 
[17:02:20.773]                               next
[17:02:20.773]                             invokeRestart(restart)
[17:02:20.773]                             muffled <- TRUE
[17:02:20.773]                             break
[17:02:20.773]                           }
[17:02:20.773]                         }
[17:02:20.773]                       }
[17:02:20.773]                       invisible(muffled)
[17:02:20.773]                     }
[17:02:20.773]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.773]                   }
[17:02:20.773]                 }
[17:02:20.773]                 else {
[17:02:20.773]                   if (TRUE) {
[17:02:20.773]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:20.773]                     {
[17:02:20.773]                       inherits <- base::inherits
[17:02:20.773]                       invokeRestart <- base::invokeRestart
[17:02:20.773]                       is.null <- base::is.null
[17:02:20.773]                       muffled <- FALSE
[17:02:20.773]                       if (inherits(cond, "message")) {
[17:02:20.773]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:20.773]                         if (muffled) 
[17:02:20.773]                           invokeRestart("muffleMessage")
[17:02:20.773]                       }
[17:02:20.773]                       else if (inherits(cond, "warning")) {
[17:02:20.773]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:20.773]                         if (muffled) 
[17:02:20.773]                           invokeRestart("muffleWarning")
[17:02:20.773]                       }
[17:02:20.773]                       else if (inherits(cond, "condition")) {
[17:02:20.773]                         if (!is.null(pattern)) {
[17:02:20.773]                           computeRestarts <- base::computeRestarts
[17:02:20.773]                           grepl <- base::grepl
[17:02:20.773]                           restarts <- computeRestarts(cond)
[17:02:20.773]                           for (restart in restarts) {
[17:02:20.773]                             name <- restart$name
[17:02:20.773]                             if (is.null(name)) 
[17:02:20.773]                               next
[17:02:20.773]                             if (!grepl(pattern, name)) 
[17:02:20.773]                               next
[17:02:20.773]                             invokeRestart(restart)
[17:02:20.773]                             muffled <- TRUE
[17:02:20.773]                             break
[17:02:20.773]                           }
[17:02:20.773]                         }
[17:02:20.773]                       }
[17:02:20.773]                       invisible(muffled)
[17:02:20.773]                     }
[17:02:20.773]                     muffleCondition(cond, pattern = "^muffle")
[17:02:20.773]                   }
[17:02:20.773]                 }
[17:02:20.773]             }
[17:02:20.773]         }))
[17:02:20.773]     }, error = function(ex) {
[17:02:20.773]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:20.773]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:20.773]                 ...future.rng), started = ...future.startTime, 
[17:02:20.773]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:20.773]             version = "1.8"), class = "FutureResult")
[17:02:20.773]     }, finally = {
[17:02:20.773]         if (!identical(...future.workdir, getwd())) 
[17:02:20.773]             setwd(...future.workdir)
[17:02:20.773]         {
[17:02:20.773]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:20.773]                 ...future.oldOptions$nwarnings <- NULL
[17:02:20.773]             }
[17:02:20.773]             base::options(...future.oldOptions)
[17:02:20.773]             if (.Platform$OS.type == "windows") {
[17:02:20.773]                 old_names <- names(...future.oldEnvVars)
[17:02:20.773]                 envs <- base::Sys.getenv()
[17:02:20.773]                 names <- names(envs)
[17:02:20.773]                 common <- intersect(names, old_names)
[17:02:20.773]                 added <- setdiff(names, old_names)
[17:02:20.773]                 removed <- setdiff(old_names, names)
[17:02:20.773]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:20.773]                   envs[common]]
[17:02:20.773]                 NAMES <- toupper(changed)
[17:02:20.773]                 args <- list()
[17:02:20.773]                 for (kk in seq_along(NAMES)) {
[17:02:20.773]                   name <- changed[[kk]]
[17:02:20.773]                   NAME <- NAMES[[kk]]
[17:02:20.773]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.773]                     next
[17:02:20.773]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.773]                 }
[17:02:20.773]                 NAMES <- toupper(added)
[17:02:20.773]                 for (kk in seq_along(NAMES)) {
[17:02:20.773]                   name <- added[[kk]]
[17:02:20.773]                   NAME <- NAMES[[kk]]
[17:02:20.773]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.773]                     next
[17:02:20.773]                   args[[name]] <- ""
[17:02:20.773]                 }
[17:02:20.773]                 NAMES <- toupper(removed)
[17:02:20.773]                 for (kk in seq_along(NAMES)) {
[17:02:20.773]                   name <- removed[[kk]]
[17:02:20.773]                   NAME <- NAMES[[kk]]
[17:02:20.773]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:20.773]                     next
[17:02:20.773]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:20.773]                 }
[17:02:20.773]                 if (length(args) > 0) 
[17:02:20.773]                   base::do.call(base::Sys.setenv, args = args)
[17:02:20.773]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:20.773]             }
[17:02:20.773]             else {
[17:02:20.773]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:20.773]             }
[17:02:20.773]             {
[17:02:20.773]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:20.773]                   0L) {
[17:02:20.773]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:20.773]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:20.773]                   base::options(opts)
[17:02:20.773]                 }
[17:02:20.773]                 {
[17:02:20.773]                   {
[17:02:20.773]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:20.773]                     NULL
[17:02:20.773]                   }
[17:02:20.773]                   options(future.plan = NULL)
[17:02:20.773]                   if (is.na(NA_character_)) 
[17:02:20.773]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:20.773]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:20.773]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:20.773]                     .init = FALSE)
[17:02:20.773]                 }
[17:02:20.773]             }
[17:02:20.773]         }
[17:02:20.773]     })
[17:02:20.773]     if (TRUE) {
[17:02:20.773]         base::sink(type = "output", split = FALSE)
[17:02:20.773]         if (TRUE) {
[17:02:20.773]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:20.773]         }
[17:02:20.773]         else {
[17:02:20.773]             ...future.result["stdout"] <- base::list(NULL)
[17:02:20.773]         }
[17:02:20.773]         base::close(...future.stdout)
[17:02:20.773]         ...future.stdout <- NULL
[17:02:20.773]     }
[17:02:20.773]     ...future.result$conditions <- ...future.conditions
[17:02:20.773]     ...future.result$finished <- base::Sys.time()
[17:02:20.773]     ...future.result
[17:02:20.773] }
[17:02:20.775] assign_globals() ...
[17:02:20.776] List of 1
[17:02:20.776]  $ a: num 10
[17:02:20.776]  - attr(*, "where")=List of 1
[17:02:20.776]   ..$ a:<environment: R_EmptyEnv> 
[17:02:20.776]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:20.776]  - attr(*, "resolved")= logi FALSE
[17:02:20.776]  - attr(*, "total_size")= num 56
[17:02:20.776]  - attr(*, "already-done")= logi TRUE
[17:02:20.778] - copied ‘a’ to environment
[17:02:20.778] assign_globals() ... done
[17:02:20.778] requestCore(): workers = 2
[17:02:20.781] MulticoreFuture started
[17:02:20.781] - Launch lazy future ... done
[17:02:20.781] run() for ‘MulticoreFuture’ ... done
[17:02:20.782] result() for MulticoreFuture ...
[17:02:20.782] plan(): Setting new future strategy stack:
[17:02:20.782] List of future strategies:
[17:02:20.782] 1. sequential:
[17:02:20.782]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:20.782]    - tweaked: FALSE
[17:02:20.782]    - call: NULL
[17:02:20.783] plan(): nbrOfWorkers() = 1
[17:02:20.785] plan(): Setting new future strategy stack:
[17:02:20.785] List of future strategies:
[17:02:20.785] 1. multicore:
[17:02:20.785]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:20.785]    - tweaked: FALSE
[17:02:20.785]    - call: plan(strategy)
[17:02:20.790] plan(): nbrOfWorkers() = 2
[17:02:20.791] result() for MulticoreFuture ...
[17:02:20.791] result() for MulticoreFuture ... done
[17:02:20.791] result() for MulticoreFuture ... done
[17:02:20.791] result() for MulticoreFuture ...
[17:02:20.792] result() for MulticoreFuture ... done
b = 11
*** %<-% with ‘multicore’ futures ... DONE
*** %<-% with ‘multisession’ futures ...
[17:02:20.792] plan(): Setting new future strategy stack:
[17:02:20.792] List of future strategies:
[17:02:20.792] 1. multisession:
[17:02:20.792]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:20.792]    - tweaked: FALSE
[17:02:20.792]    - call: plan(strategy)
[17:02:20.793] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:20.793] multisession:
[17:02:20.793] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:20.793] - tweaked: FALSE
[17:02:20.793] - call: plan(strategy)
[17:02:20.800] getGlobalsAndPackages() ...
[17:02:20.800] Not searching for globals
[17:02:20.800] - globals: [0] <none>
[17:02:20.801] getGlobalsAndPackages() ... DONE
[17:02:20.801] [local output] makeClusterPSOCK() ...
[17:02:20.851] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:20.853] [local output] Base port: 11651
[17:02:20.853] [local output] Getting setup options for 2 cluster nodes ...
[17:02:20.853] [local output]  - Node 1 of 2 ...
[17:02:20.853] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:20.854] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp9cuntK/worker.rank=1.parallelly.parent=41203.a0f34cc0ea63.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp9cuntK/worker.rank=1.parallelly.parent=41203.a0f34cc0ea63.pid")'’
[17:02:21.061] - Possible to infer worker's PID: TRUE
[17:02:21.062] [local output] Rscript port: 11651

[17:02:21.062] [local output]  - Node 2 of 2 ...
[17:02:21.063] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:21.063] [local output] Rscript port: 11651

[17:02:21.064] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:21.064] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:21.064] [local output] Setting up PSOCK nodes in parallel
[17:02:21.064] List of 36
[17:02:21.064]  $ worker          : chr "localhost"
[17:02:21.064]   ..- attr(*, "localhost")= logi TRUE
[17:02:21.064]  $ master          : chr "localhost"
[17:02:21.064]  $ port            : int 11651
[17:02:21.064]  $ connectTimeout  : num 120
[17:02:21.064]  $ timeout         : num 2592000
[17:02:21.064]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:21.064]  $ homogeneous     : logi TRUE
[17:02:21.064]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:21.064]  $ rscript_envs    : NULL
[17:02:21.064]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:21.064]  $ rscript_startup : NULL
[17:02:21.064]  $ rscript_sh      : chr "sh"
[17:02:21.064]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:21.064]  $ methods         : logi TRUE
[17:02:21.064]  $ socketOptions   : chr "no-delay"
[17:02:21.064]  $ useXDR          : logi FALSE
[17:02:21.064]  $ outfile         : chr "/dev/null"
[17:02:21.064]  $ renice          : int NA
[17:02:21.064]  $ rshcmd          : NULL
[17:02:21.064]  $ user            : chr(0) 
[17:02:21.064]  $ revtunnel       : logi FALSE
[17:02:21.064]  $ rshlogfile      : NULL
[17:02:21.064]  $ rshopts         : chr(0) 
[17:02:21.064]  $ rank            : int 1
[17:02:21.064]  $ manual          : logi FALSE
[17:02:21.064]  $ dryrun          : logi FALSE
[17:02:21.064]  $ quiet           : logi FALSE
[17:02:21.064]  $ setup_strategy  : chr "parallel"
[17:02:21.064]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:21.064]  $ pidfile         : chr "/tmp/Rtmp9cuntK/worker.rank=1.parallelly.parent=41203.a0f34cc0ea63.pid"
[17:02:21.064]  $ rshcmd_label    : NULL
[17:02:21.064]  $ rsh_call        : NULL
[17:02:21.064]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:21.064]  $ localMachine    : logi TRUE
[17:02:21.064]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:21.064]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:21.064]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:21.064]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:21.064]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:21.064]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:21.064]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:21.064]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:21.064]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:21.064]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:21.064]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:21.064]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:21.064]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:21.064]  $ arguments       :List of 28
[17:02:21.064]   ..$ worker          : chr "localhost"
[17:02:21.064]   ..$ master          : NULL
[17:02:21.064]   ..$ port            : int 11651
[17:02:21.064]   ..$ connectTimeout  : num 120
[17:02:21.064]   ..$ timeout         : num 2592000
[17:02:21.064]   ..$ rscript         : NULL
[17:02:21.064]   ..$ homogeneous     : NULL
[17:02:21.064]   ..$ rscript_args    : NULL
[17:02:21.064]   ..$ rscript_envs    : NULL
[17:02:21.064]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:21.064]   ..$ rscript_startup : NULL
[17:02:21.064]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:21.064]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:21.064]   ..$ methods         : logi TRUE
[17:02:21.064]   ..$ socketOptions   : chr "no-delay"
[17:02:21.064]   ..$ useXDR          : logi FALSE
[17:02:21.064]   ..$ outfile         : chr "/dev/null"
[17:02:21.064]   ..$ renice          : int NA
[17:02:21.064]   ..$ rshcmd          : NULL
[17:02:21.064]   ..$ user            : NULL
[17:02:21.064]   ..$ revtunnel       : logi NA
[17:02:21.064]   ..$ rshlogfile      : NULL
[17:02:21.064]   ..$ rshopts         : NULL
[17:02:21.064]   ..$ rank            : int 1
[17:02:21.064]   ..$ manual          : logi FALSE
[17:02:21.064]   ..$ dryrun          : logi FALSE
[17:02:21.064]   ..$ quiet           : logi FALSE
[17:02:21.064]   ..$ setup_strategy  : chr "parallel"
[17:02:21.064]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:21.081] [local output] System call to launch all workers:
[17:02:21.081] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp9cuntK/worker.rank=1.parallelly.parent=41203.a0f34cc0ea63.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11651 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:21.081] [local output] Starting PSOCK main server
[17:02:21.087] [local output] Workers launched
[17:02:21.087] [local output] Waiting for workers to connect back
[17:02:21.087]  - [local output] 0 workers out of 2 ready
[17:02:21.328]  - [local output] 0 workers out of 2 ready
[17:02:21.329]  - [local output] 1 workers out of 2 ready
[17:02:21.338]  - [local output] 1 workers out of 2 ready
[17:02:21.338]  - [local output] 2 workers out of 2 ready
[17:02:21.338] [local output] Launching of workers completed
[17:02:21.339] [local output] Collecting session information from workers
[17:02:21.340] [local output]  - Worker #1 of 2
[17:02:21.340] [local output]  - Worker #2 of 2
[17:02:21.340] [local output] makeClusterPSOCK() ... done
[17:02:21.352] Packages needed by the future expression (n = 0): <none>
[17:02:21.352] Packages needed by future strategies (n = 0): <none>
[17:02:21.353] {
[17:02:21.353]     {
[17:02:21.353]         {
[17:02:21.353]             ...future.startTime <- base::Sys.time()
[17:02:21.353]             {
[17:02:21.353]                 {
[17:02:21.353]                   {
[17:02:21.353]                     {
[17:02:21.353]                       base::local({
[17:02:21.353]                         has_future <- base::requireNamespace("future", 
[17:02:21.353]                           quietly = TRUE)
[17:02:21.353]                         if (has_future) {
[17:02:21.353]                           ns <- base::getNamespace("future")
[17:02:21.353]                           version <- ns[[".package"]][["version"]]
[17:02:21.353]                           if (is.null(version)) 
[17:02:21.353]                             version <- utils::packageVersion("future")
[17:02:21.353]                         }
[17:02:21.353]                         else {
[17:02:21.353]                           version <- NULL
[17:02:21.353]                         }
[17:02:21.353]                         if (!has_future || version < "1.8.0") {
[17:02:21.353]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.353]                             "", base::R.version$version.string), 
[17:02:21.353]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.353]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.353]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.353]                               "release", "version")], collapse = " "), 
[17:02:21.353]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.353]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.353]                             info)
[17:02:21.353]                           info <- base::paste(info, collapse = "; ")
[17:02:21.353]                           if (!has_future) {
[17:02:21.353]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.353]                               info)
[17:02:21.353]                           }
[17:02:21.353]                           else {
[17:02:21.353]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.353]                               info, version)
[17:02:21.353]                           }
[17:02:21.353]                           base::stop(msg)
[17:02:21.353]                         }
[17:02:21.353]                       })
[17:02:21.353]                     }
[17:02:21.353]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.353]                     base::options(mc.cores = 1L)
[17:02:21.353]                   }
[17:02:21.353]                   ...future.strategy.old <- future::plan("list")
[17:02:21.353]                   options(future.plan = NULL)
[17:02:21.353]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.353]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.353]                 }
[17:02:21.353]                 ...future.workdir <- getwd()
[17:02:21.353]             }
[17:02:21.353]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.353]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.353]         }
[17:02:21.353]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.353]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.353]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.353]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.353]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.353]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.353]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.353]             base::names(...future.oldOptions))
[17:02:21.353]     }
[17:02:21.353]     if (FALSE) {
[17:02:21.353]     }
[17:02:21.353]     else {
[17:02:21.353]         if (TRUE) {
[17:02:21.353]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.353]                 open = "w")
[17:02:21.353]         }
[17:02:21.353]         else {
[17:02:21.353]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.353]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.353]         }
[17:02:21.353]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.353]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.353]             base::sink(type = "output", split = FALSE)
[17:02:21.353]             base::close(...future.stdout)
[17:02:21.353]         }, add = TRUE)
[17:02:21.353]     }
[17:02:21.353]     ...future.frame <- base::sys.nframe()
[17:02:21.353]     ...future.conditions <- base::list()
[17:02:21.353]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.353]     if (FALSE) {
[17:02:21.353]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.353]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.353]     }
[17:02:21.353]     ...future.result <- base::tryCatch({
[17:02:21.353]         base::withCallingHandlers({
[17:02:21.353]             ...future.value <- base::withVisible(base::local({
[17:02:21.353]                 ...future.makeSendCondition <- base::local({
[17:02:21.353]                   sendCondition <- NULL
[17:02:21.353]                   function(frame = 1L) {
[17:02:21.353]                     if (is.function(sendCondition)) 
[17:02:21.353]                       return(sendCondition)
[17:02:21.353]                     ns <- getNamespace("parallel")
[17:02:21.353]                     if (exists("sendData", mode = "function", 
[17:02:21.353]                       envir = ns)) {
[17:02:21.353]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.353]                         envir = ns)
[17:02:21.353]                       envir <- sys.frame(frame)
[17:02:21.353]                       master <- NULL
[17:02:21.353]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.353]                         !identical(envir, emptyenv())) {
[17:02:21.353]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.353]                           inherits = FALSE)) {
[17:02:21.353]                           master <- get("master", mode = "list", 
[17:02:21.353]                             envir = envir, inherits = FALSE)
[17:02:21.353]                           if (inherits(master, c("SOCKnode", 
[17:02:21.353]                             "SOCK0node"))) {
[17:02:21.353]                             sendCondition <<- function(cond) {
[17:02:21.353]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.353]                                 success = TRUE)
[17:02:21.353]                               parallel_sendData(master, data)
[17:02:21.353]                             }
[17:02:21.353]                             return(sendCondition)
[17:02:21.353]                           }
[17:02:21.353]                         }
[17:02:21.353]                         frame <- frame + 1L
[17:02:21.353]                         envir <- sys.frame(frame)
[17:02:21.353]                       }
[17:02:21.353]                     }
[17:02:21.353]                     sendCondition <<- function(cond) NULL
[17:02:21.353]                   }
[17:02:21.353]                 })
[17:02:21.353]                 withCallingHandlers({
[17:02:21.353]                   NA
[17:02:21.353]                 }, immediateCondition = function(cond) {
[17:02:21.353]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.353]                   sendCondition(cond)
[17:02:21.353]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.353]                   {
[17:02:21.353]                     inherits <- base::inherits
[17:02:21.353]                     invokeRestart <- base::invokeRestart
[17:02:21.353]                     is.null <- base::is.null
[17:02:21.353]                     muffled <- FALSE
[17:02:21.353]                     if (inherits(cond, "message")) {
[17:02:21.353]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.353]                       if (muffled) 
[17:02:21.353]                         invokeRestart("muffleMessage")
[17:02:21.353]                     }
[17:02:21.353]                     else if (inherits(cond, "warning")) {
[17:02:21.353]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.353]                       if (muffled) 
[17:02:21.353]                         invokeRestart("muffleWarning")
[17:02:21.353]                     }
[17:02:21.353]                     else if (inherits(cond, "condition")) {
[17:02:21.353]                       if (!is.null(pattern)) {
[17:02:21.353]                         computeRestarts <- base::computeRestarts
[17:02:21.353]                         grepl <- base::grepl
[17:02:21.353]                         restarts <- computeRestarts(cond)
[17:02:21.353]                         for (restart in restarts) {
[17:02:21.353]                           name <- restart$name
[17:02:21.353]                           if (is.null(name)) 
[17:02:21.353]                             next
[17:02:21.353]                           if (!grepl(pattern, name)) 
[17:02:21.353]                             next
[17:02:21.353]                           invokeRestart(restart)
[17:02:21.353]                           muffled <- TRUE
[17:02:21.353]                           break
[17:02:21.353]                         }
[17:02:21.353]                       }
[17:02:21.353]                     }
[17:02:21.353]                     invisible(muffled)
[17:02:21.353]                   }
[17:02:21.353]                   muffleCondition(cond)
[17:02:21.353]                 })
[17:02:21.353]             }))
[17:02:21.353]             future::FutureResult(value = ...future.value$value, 
[17:02:21.353]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.353]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.353]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.353]                     ...future.globalenv.names))
[17:02:21.353]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.353]         }, condition = base::local({
[17:02:21.353]             c <- base::c
[17:02:21.353]             inherits <- base::inherits
[17:02:21.353]             invokeRestart <- base::invokeRestart
[17:02:21.353]             length <- base::length
[17:02:21.353]             list <- base::list
[17:02:21.353]             seq.int <- base::seq.int
[17:02:21.353]             signalCondition <- base::signalCondition
[17:02:21.353]             sys.calls <- base::sys.calls
[17:02:21.353]             `[[` <- base::`[[`
[17:02:21.353]             `+` <- base::`+`
[17:02:21.353]             `<<-` <- base::`<<-`
[17:02:21.353]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.353]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.353]                   3L)]
[17:02:21.353]             }
[17:02:21.353]             function(cond) {
[17:02:21.353]                 is_error <- inherits(cond, "error")
[17:02:21.353]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.353]                   NULL)
[17:02:21.353]                 if (is_error) {
[17:02:21.353]                   sessionInformation <- function() {
[17:02:21.353]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.353]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.353]                       search = base::search(), system = base::Sys.info())
[17:02:21.353]                   }
[17:02:21.353]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.353]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.353]                     cond$call), session = sessionInformation(), 
[17:02:21.353]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.353]                   signalCondition(cond)
[17:02:21.353]                 }
[17:02:21.353]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.353]                 "immediateCondition"))) {
[17:02:21.353]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.353]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.353]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.353]                   if (TRUE && !signal) {
[17:02:21.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.353]                     {
[17:02:21.353]                       inherits <- base::inherits
[17:02:21.353]                       invokeRestart <- base::invokeRestart
[17:02:21.353]                       is.null <- base::is.null
[17:02:21.353]                       muffled <- FALSE
[17:02:21.353]                       if (inherits(cond, "message")) {
[17:02:21.353]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.353]                         if (muffled) 
[17:02:21.353]                           invokeRestart("muffleMessage")
[17:02:21.353]                       }
[17:02:21.353]                       else if (inherits(cond, "warning")) {
[17:02:21.353]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.353]                         if (muffled) 
[17:02:21.353]                           invokeRestart("muffleWarning")
[17:02:21.353]                       }
[17:02:21.353]                       else if (inherits(cond, "condition")) {
[17:02:21.353]                         if (!is.null(pattern)) {
[17:02:21.353]                           computeRestarts <- base::computeRestarts
[17:02:21.353]                           grepl <- base::grepl
[17:02:21.353]                           restarts <- computeRestarts(cond)
[17:02:21.353]                           for (restart in restarts) {
[17:02:21.353]                             name <- restart$name
[17:02:21.353]                             if (is.null(name)) 
[17:02:21.353]                               next
[17:02:21.353]                             if (!grepl(pattern, name)) 
[17:02:21.353]                               next
[17:02:21.353]                             invokeRestart(restart)
[17:02:21.353]                             muffled <- TRUE
[17:02:21.353]                             break
[17:02:21.353]                           }
[17:02:21.353]                         }
[17:02:21.353]                       }
[17:02:21.353]                       invisible(muffled)
[17:02:21.353]                     }
[17:02:21.353]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.353]                   }
[17:02:21.353]                 }
[17:02:21.353]                 else {
[17:02:21.353]                   if (TRUE) {
[17:02:21.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.353]                     {
[17:02:21.353]                       inherits <- base::inherits
[17:02:21.353]                       invokeRestart <- base::invokeRestart
[17:02:21.353]                       is.null <- base::is.null
[17:02:21.353]                       muffled <- FALSE
[17:02:21.353]                       if (inherits(cond, "message")) {
[17:02:21.353]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.353]                         if (muffled) 
[17:02:21.353]                           invokeRestart("muffleMessage")
[17:02:21.353]                       }
[17:02:21.353]                       else if (inherits(cond, "warning")) {
[17:02:21.353]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.353]                         if (muffled) 
[17:02:21.353]                           invokeRestart("muffleWarning")
[17:02:21.353]                       }
[17:02:21.353]                       else if (inherits(cond, "condition")) {
[17:02:21.353]                         if (!is.null(pattern)) {
[17:02:21.353]                           computeRestarts <- base::computeRestarts
[17:02:21.353]                           grepl <- base::grepl
[17:02:21.353]                           restarts <- computeRestarts(cond)
[17:02:21.353]                           for (restart in restarts) {
[17:02:21.353]                             name <- restart$name
[17:02:21.353]                             if (is.null(name)) 
[17:02:21.353]                               next
[17:02:21.353]                             if (!grepl(pattern, name)) 
[17:02:21.353]                               next
[17:02:21.353]                             invokeRestart(restart)
[17:02:21.353]                             muffled <- TRUE
[17:02:21.353]                             break
[17:02:21.353]                           }
[17:02:21.353]                         }
[17:02:21.353]                       }
[17:02:21.353]                       invisible(muffled)
[17:02:21.353]                     }
[17:02:21.353]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.353]                   }
[17:02:21.353]                 }
[17:02:21.353]             }
[17:02:21.353]         }))
[17:02:21.353]     }, error = function(ex) {
[17:02:21.353]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.353]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.353]                 ...future.rng), started = ...future.startTime, 
[17:02:21.353]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.353]             version = "1.8"), class = "FutureResult")
[17:02:21.353]     }, finally = {
[17:02:21.353]         if (!identical(...future.workdir, getwd())) 
[17:02:21.353]             setwd(...future.workdir)
[17:02:21.353]         {
[17:02:21.353]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.353]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.353]             }
[17:02:21.353]             base::options(...future.oldOptions)
[17:02:21.353]             if (.Platform$OS.type == "windows") {
[17:02:21.353]                 old_names <- names(...future.oldEnvVars)
[17:02:21.353]                 envs <- base::Sys.getenv()
[17:02:21.353]                 names <- names(envs)
[17:02:21.353]                 common <- intersect(names, old_names)
[17:02:21.353]                 added <- setdiff(names, old_names)
[17:02:21.353]                 removed <- setdiff(old_names, names)
[17:02:21.353]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.353]                   envs[common]]
[17:02:21.353]                 NAMES <- toupper(changed)
[17:02:21.353]                 args <- list()
[17:02:21.353]                 for (kk in seq_along(NAMES)) {
[17:02:21.353]                   name <- changed[[kk]]
[17:02:21.353]                   NAME <- NAMES[[kk]]
[17:02:21.353]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.353]                     next
[17:02:21.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.353]                 }
[17:02:21.353]                 NAMES <- toupper(added)
[17:02:21.353]                 for (kk in seq_along(NAMES)) {
[17:02:21.353]                   name <- added[[kk]]
[17:02:21.353]                   NAME <- NAMES[[kk]]
[17:02:21.353]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.353]                     next
[17:02:21.353]                   args[[name]] <- ""
[17:02:21.353]                 }
[17:02:21.353]                 NAMES <- toupper(removed)
[17:02:21.353]                 for (kk in seq_along(NAMES)) {
[17:02:21.353]                   name <- removed[[kk]]
[17:02:21.353]                   NAME <- NAMES[[kk]]
[17:02:21.353]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.353]                     next
[17:02:21.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.353]                 }
[17:02:21.353]                 if (length(args) > 0) 
[17:02:21.353]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.353]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.353]             }
[17:02:21.353]             else {
[17:02:21.353]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.353]             }
[17:02:21.353]             {
[17:02:21.353]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.353]                   0L) {
[17:02:21.353]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.353]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.353]                   base::options(opts)
[17:02:21.353]                 }
[17:02:21.353]                 {
[17:02:21.353]                   {
[17:02:21.353]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.353]                     NULL
[17:02:21.353]                   }
[17:02:21.353]                   options(future.plan = NULL)
[17:02:21.353]                   if (is.na(NA_character_)) 
[17:02:21.353]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.353]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.353]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.353]                     .init = FALSE)
[17:02:21.353]                 }
[17:02:21.353]             }
[17:02:21.353]         }
[17:02:21.353]     })
[17:02:21.353]     if (TRUE) {
[17:02:21.353]         base::sink(type = "output", split = FALSE)
[17:02:21.353]         if (TRUE) {
[17:02:21.353]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.353]         }
[17:02:21.353]         else {
[17:02:21.353]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.353]         }
[17:02:21.353]         base::close(...future.stdout)
[17:02:21.353]         ...future.stdout <- NULL
[17:02:21.353]     }
[17:02:21.353]     ...future.result$conditions <- ...future.conditions
[17:02:21.353]     ...future.result$finished <- base::Sys.time()
[17:02:21.353]     ...future.result
[17:02:21.353] }
[17:02:21.405] MultisessionFuture started
[17:02:21.406] result() for ClusterFuture ...
[17:02:21.406] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.407] - Validating connection of MultisessionFuture
[17:02:21.438] - received message: FutureResult
[17:02:21.438] - Received FutureResult
[17:02:21.439] - Erased future from FutureRegistry
[17:02:21.439] result() for ClusterFuture ...
[17:02:21.439] - result already collected: FutureResult
[17:02:21.439] result() for ClusterFuture ... done
[17:02:21.439] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.439] result() for ClusterFuture ... done
[17:02:21.439] result() for ClusterFuture ...
[17:02:21.440] - result already collected: FutureResult
[17:02:21.440] result() for ClusterFuture ... done
[17:02:21.440] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:21.444] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[17:02:21.444] getGlobalsAndPackages() ...
[17:02:21.444] Searching for globals...
[17:02:21.445] - globals found: [2] ‘{’, ‘<-’
[17:02:21.446] Searching for globals ... DONE
[17:02:21.446] Resolving globals: FALSE
[17:02:21.446] 
[17:02:21.446] 
[17:02:21.446] getGlobalsAndPackages() ... DONE
[17:02:21.447] run() for ‘Future’ ...
[17:02:21.447] - state: ‘created’
[17:02:21.447] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.461] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.462] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.462]   - Field: ‘node’
[17:02:21.462]   - Field: ‘label’
[17:02:21.462]   - Field: ‘local’
[17:02:21.462]   - Field: ‘owner’
[17:02:21.462]   - Field: ‘envir’
[17:02:21.462]   - Field: ‘workers’
[17:02:21.462]   - Field: ‘packages’
[17:02:21.462]   - Field: ‘gc’
[17:02:21.462]   - Field: ‘conditions’
[17:02:21.463]   - Field: ‘persistent’
[17:02:21.463]   - Field: ‘expr’
[17:02:21.463]   - Field: ‘uuid’
[17:02:21.463]   - Field: ‘seed’
[17:02:21.463]   - Field: ‘version’
[17:02:21.463]   - Field: ‘result’
[17:02:21.463]   - Field: ‘asynchronous’
[17:02:21.463]   - Field: ‘calls’
[17:02:21.464]   - Field: ‘globals’
[17:02:21.464]   - Field: ‘stdout’
[17:02:21.464]   - Field: ‘earlySignal’
[17:02:21.464]   - Field: ‘lazy’
[17:02:21.464]   - Field: ‘state’
[17:02:21.464] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.464] - Launch lazy future ...
[17:02:21.465] Packages needed by the future expression (n = 0): <none>
[17:02:21.465] Packages needed by future strategies (n = 0): <none>
[17:02:21.465] {
[17:02:21.465]     {
[17:02:21.465]         {
[17:02:21.465]             ...future.startTime <- base::Sys.time()
[17:02:21.465]             {
[17:02:21.465]                 {
[17:02:21.465]                   {
[17:02:21.465]                     {
[17:02:21.465]                       base::local({
[17:02:21.465]                         has_future <- base::requireNamespace("future", 
[17:02:21.465]                           quietly = TRUE)
[17:02:21.465]                         if (has_future) {
[17:02:21.465]                           ns <- base::getNamespace("future")
[17:02:21.465]                           version <- ns[[".package"]][["version"]]
[17:02:21.465]                           if (is.null(version)) 
[17:02:21.465]                             version <- utils::packageVersion("future")
[17:02:21.465]                         }
[17:02:21.465]                         else {
[17:02:21.465]                           version <- NULL
[17:02:21.465]                         }
[17:02:21.465]                         if (!has_future || version < "1.8.0") {
[17:02:21.465]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.465]                             "", base::R.version$version.string), 
[17:02:21.465]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.465]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.465]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.465]                               "release", "version")], collapse = " "), 
[17:02:21.465]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.465]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.465]                             info)
[17:02:21.465]                           info <- base::paste(info, collapse = "; ")
[17:02:21.465]                           if (!has_future) {
[17:02:21.465]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.465]                               info)
[17:02:21.465]                           }
[17:02:21.465]                           else {
[17:02:21.465]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.465]                               info, version)
[17:02:21.465]                           }
[17:02:21.465]                           base::stop(msg)
[17:02:21.465]                         }
[17:02:21.465]                       })
[17:02:21.465]                     }
[17:02:21.465]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.465]                     base::options(mc.cores = 1L)
[17:02:21.465]                   }
[17:02:21.465]                   ...future.strategy.old <- future::plan("list")
[17:02:21.465]                   options(future.plan = NULL)
[17:02:21.465]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.465]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.465]                 }
[17:02:21.465]                 ...future.workdir <- getwd()
[17:02:21.465]             }
[17:02:21.465]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.465]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.465]         }
[17:02:21.465]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.465]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.465]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.465]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.465]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.465]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.465]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.465]             base::names(...future.oldOptions))
[17:02:21.465]     }
[17:02:21.465]     if (FALSE) {
[17:02:21.465]     }
[17:02:21.465]     else {
[17:02:21.465]         if (TRUE) {
[17:02:21.465]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.465]                 open = "w")
[17:02:21.465]         }
[17:02:21.465]         else {
[17:02:21.465]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.465]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.465]         }
[17:02:21.465]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.465]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.465]             base::sink(type = "output", split = FALSE)
[17:02:21.465]             base::close(...future.stdout)
[17:02:21.465]         }, add = TRUE)
[17:02:21.465]     }
[17:02:21.465]     ...future.frame <- base::sys.nframe()
[17:02:21.465]     ...future.conditions <- base::list()
[17:02:21.465]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.465]     if (FALSE) {
[17:02:21.465]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.465]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.465]     }
[17:02:21.465]     ...future.result <- base::tryCatch({
[17:02:21.465]         base::withCallingHandlers({
[17:02:21.465]             ...future.value <- base::withVisible(base::local({
[17:02:21.465]                 ...future.makeSendCondition <- base::local({
[17:02:21.465]                   sendCondition <- NULL
[17:02:21.465]                   function(frame = 1L) {
[17:02:21.465]                     if (is.function(sendCondition)) 
[17:02:21.465]                       return(sendCondition)
[17:02:21.465]                     ns <- getNamespace("parallel")
[17:02:21.465]                     if (exists("sendData", mode = "function", 
[17:02:21.465]                       envir = ns)) {
[17:02:21.465]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.465]                         envir = ns)
[17:02:21.465]                       envir <- sys.frame(frame)
[17:02:21.465]                       master <- NULL
[17:02:21.465]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.465]                         !identical(envir, emptyenv())) {
[17:02:21.465]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.465]                           inherits = FALSE)) {
[17:02:21.465]                           master <- get("master", mode = "list", 
[17:02:21.465]                             envir = envir, inherits = FALSE)
[17:02:21.465]                           if (inherits(master, c("SOCKnode", 
[17:02:21.465]                             "SOCK0node"))) {
[17:02:21.465]                             sendCondition <<- function(cond) {
[17:02:21.465]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.465]                                 success = TRUE)
[17:02:21.465]                               parallel_sendData(master, data)
[17:02:21.465]                             }
[17:02:21.465]                             return(sendCondition)
[17:02:21.465]                           }
[17:02:21.465]                         }
[17:02:21.465]                         frame <- frame + 1L
[17:02:21.465]                         envir <- sys.frame(frame)
[17:02:21.465]                       }
[17:02:21.465]                     }
[17:02:21.465]                     sendCondition <<- function(cond) NULL
[17:02:21.465]                   }
[17:02:21.465]                 })
[17:02:21.465]                 withCallingHandlers({
[17:02:21.465]                   {
[17:02:21.465]                     x <- 1
[17:02:21.465]                   }
[17:02:21.465]                 }, immediateCondition = function(cond) {
[17:02:21.465]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.465]                   sendCondition(cond)
[17:02:21.465]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.465]                   {
[17:02:21.465]                     inherits <- base::inherits
[17:02:21.465]                     invokeRestart <- base::invokeRestart
[17:02:21.465]                     is.null <- base::is.null
[17:02:21.465]                     muffled <- FALSE
[17:02:21.465]                     if (inherits(cond, "message")) {
[17:02:21.465]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.465]                       if (muffled) 
[17:02:21.465]                         invokeRestart("muffleMessage")
[17:02:21.465]                     }
[17:02:21.465]                     else if (inherits(cond, "warning")) {
[17:02:21.465]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.465]                       if (muffled) 
[17:02:21.465]                         invokeRestart("muffleWarning")
[17:02:21.465]                     }
[17:02:21.465]                     else if (inherits(cond, "condition")) {
[17:02:21.465]                       if (!is.null(pattern)) {
[17:02:21.465]                         computeRestarts <- base::computeRestarts
[17:02:21.465]                         grepl <- base::grepl
[17:02:21.465]                         restarts <- computeRestarts(cond)
[17:02:21.465]                         for (restart in restarts) {
[17:02:21.465]                           name <- restart$name
[17:02:21.465]                           if (is.null(name)) 
[17:02:21.465]                             next
[17:02:21.465]                           if (!grepl(pattern, name)) 
[17:02:21.465]                             next
[17:02:21.465]                           invokeRestart(restart)
[17:02:21.465]                           muffled <- TRUE
[17:02:21.465]                           break
[17:02:21.465]                         }
[17:02:21.465]                       }
[17:02:21.465]                     }
[17:02:21.465]                     invisible(muffled)
[17:02:21.465]                   }
[17:02:21.465]                   muffleCondition(cond)
[17:02:21.465]                 })
[17:02:21.465]             }))
[17:02:21.465]             future::FutureResult(value = ...future.value$value, 
[17:02:21.465]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.465]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.465]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.465]                     ...future.globalenv.names))
[17:02:21.465]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.465]         }, condition = base::local({
[17:02:21.465]             c <- base::c
[17:02:21.465]             inherits <- base::inherits
[17:02:21.465]             invokeRestart <- base::invokeRestart
[17:02:21.465]             length <- base::length
[17:02:21.465]             list <- base::list
[17:02:21.465]             seq.int <- base::seq.int
[17:02:21.465]             signalCondition <- base::signalCondition
[17:02:21.465]             sys.calls <- base::sys.calls
[17:02:21.465]             `[[` <- base::`[[`
[17:02:21.465]             `+` <- base::`+`
[17:02:21.465]             `<<-` <- base::`<<-`
[17:02:21.465]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.465]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.465]                   3L)]
[17:02:21.465]             }
[17:02:21.465]             function(cond) {
[17:02:21.465]                 is_error <- inherits(cond, "error")
[17:02:21.465]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.465]                   NULL)
[17:02:21.465]                 if (is_error) {
[17:02:21.465]                   sessionInformation <- function() {
[17:02:21.465]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.465]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.465]                       search = base::search(), system = base::Sys.info())
[17:02:21.465]                   }
[17:02:21.465]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.465]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.465]                     cond$call), session = sessionInformation(), 
[17:02:21.465]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.465]                   signalCondition(cond)
[17:02:21.465]                 }
[17:02:21.465]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.465]                 "immediateCondition"))) {
[17:02:21.465]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.465]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.465]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.465]                   if (TRUE && !signal) {
[17:02:21.465]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.465]                     {
[17:02:21.465]                       inherits <- base::inherits
[17:02:21.465]                       invokeRestart <- base::invokeRestart
[17:02:21.465]                       is.null <- base::is.null
[17:02:21.465]                       muffled <- FALSE
[17:02:21.465]                       if (inherits(cond, "message")) {
[17:02:21.465]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.465]                         if (muffled) 
[17:02:21.465]                           invokeRestart("muffleMessage")
[17:02:21.465]                       }
[17:02:21.465]                       else if (inherits(cond, "warning")) {
[17:02:21.465]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.465]                         if (muffled) 
[17:02:21.465]                           invokeRestart("muffleWarning")
[17:02:21.465]                       }
[17:02:21.465]                       else if (inherits(cond, "condition")) {
[17:02:21.465]                         if (!is.null(pattern)) {
[17:02:21.465]                           computeRestarts <- base::computeRestarts
[17:02:21.465]                           grepl <- base::grepl
[17:02:21.465]                           restarts <- computeRestarts(cond)
[17:02:21.465]                           for (restart in restarts) {
[17:02:21.465]                             name <- restart$name
[17:02:21.465]                             if (is.null(name)) 
[17:02:21.465]                               next
[17:02:21.465]                             if (!grepl(pattern, name)) 
[17:02:21.465]                               next
[17:02:21.465]                             invokeRestart(restart)
[17:02:21.465]                             muffled <- TRUE
[17:02:21.465]                             break
[17:02:21.465]                           }
[17:02:21.465]                         }
[17:02:21.465]                       }
[17:02:21.465]                       invisible(muffled)
[17:02:21.465]                     }
[17:02:21.465]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.465]                   }
[17:02:21.465]                 }
[17:02:21.465]                 else {
[17:02:21.465]                   if (TRUE) {
[17:02:21.465]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.465]                     {
[17:02:21.465]                       inherits <- base::inherits
[17:02:21.465]                       invokeRestart <- base::invokeRestart
[17:02:21.465]                       is.null <- base::is.null
[17:02:21.465]                       muffled <- FALSE
[17:02:21.465]                       if (inherits(cond, "message")) {
[17:02:21.465]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.465]                         if (muffled) 
[17:02:21.465]                           invokeRestart("muffleMessage")
[17:02:21.465]                       }
[17:02:21.465]                       else if (inherits(cond, "warning")) {
[17:02:21.465]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.465]                         if (muffled) 
[17:02:21.465]                           invokeRestart("muffleWarning")
[17:02:21.465]                       }
[17:02:21.465]                       else if (inherits(cond, "condition")) {
[17:02:21.465]                         if (!is.null(pattern)) {
[17:02:21.465]                           computeRestarts <- base::computeRestarts
[17:02:21.465]                           grepl <- base::grepl
[17:02:21.465]                           restarts <- computeRestarts(cond)
[17:02:21.465]                           for (restart in restarts) {
[17:02:21.465]                             name <- restart$name
[17:02:21.465]                             if (is.null(name)) 
[17:02:21.465]                               next
[17:02:21.465]                             if (!grepl(pattern, name)) 
[17:02:21.465]                               next
[17:02:21.465]                             invokeRestart(restart)
[17:02:21.465]                             muffled <- TRUE
[17:02:21.465]                             break
[17:02:21.465]                           }
[17:02:21.465]                         }
[17:02:21.465]                       }
[17:02:21.465]                       invisible(muffled)
[17:02:21.465]                     }
[17:02:21.465]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.465]                   }
[17:02:21.465]                 }
[17:02:21.465]             }
[17:02:21.465]         }))
[17:02:21.465]     }, error = function(ex) {
[17:02:21.465]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.465]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.465]                 ...future.rng), started = ...future.startTime, 
[17:02:21.465]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.465]             version = "1.8"), class = "FutureResult")
[17:02:21.465]     }, finally = {
[17:02:21.465]         if (!identical(...future.workdir, getwd())) 
[17:02:21.465]             setwd(...future.workdir)
[17:02:21.465]         {
[17:02:21.465]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.465]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.465]             }
[17:02:21.465]             base::options(...future.oldOptions)
[17:02:21.465]             if (.Platform$OS.type == "windows") {
[17:02:21.465]                 old_names <- names(...future.oldEnvVars)
[17:02:21.465]                 envs <- base::Sys.getenv()
[17:02:21.465]                 names <- names(envs)
[17:02:21.465]                 common <- intersect(names, old_names)
[17:02:21.465]                 added <- setdiff(names, old_names)
[17:02:21.465]                 removed <- setdiff(old_names, names)
[17:02:21.465]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.465]                   envs[common]]
[17:02:21.465]                 NAMES <- toupper(changed)
[17:02:21.465]                 args <- list()
[17:02:21.465]                 for (kk in seq_along(NAMES)) {
[17:02:21.465]                   name <- changed[[kk]]
[17:02:21.465]                   NAME <- NAMES[[kk]]
[17:02:21.465]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.465]                     next
[17:02:21.465]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.465]                 }
[17:02:21.465]                 NAMES <- toupper(added)
[17:02:21.465]                 for (kk in seq_along(NAMES)) {
[17:02:21.465]                   name <- added[[kk]]
[17:02:21.465]                   NAME <- NAMES[[kk]]
[17:02:21.465]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.465]                     next
[17:02:21.465]                   args[[name]] <- ""
[17:02:21.465]                 }
[17:02:21.465]                 NAMES <- toupper(removed)
[17:02:21.465]                 for (kk in seq_along(NAMES)) {
[17:02:21.465]                   name <- removed[[kk]]
[17:02:21.465]                   NAME <- NAMES[[kk]]
[17:02:21.465]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.465]                     next
[17:02:21.465]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.465]                 }
[17:02:21.465]                 if (length(args) > 0) 
[17:02:21.465]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.465]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.465]             }
[17:02:21.465]             else {
[17:02:21.465]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.465]             }
[17:02:21.465]             {
[17:02:21.465]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.465]                   0L) {
[17:02:21.465]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.465]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.465]                   base::options(opts)
[17:02:21.465]                 }
[17:02:21.465]                 {
[17:02:21.465]                   {
[17:02:21.465]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.465]                     NULL
[17:02:21.465]                   }
[17:02:21.465]                   options(future.plan = NULL)
[17:02:21.465]                   if (is.na(NA_character_)) 
[17:02:21.465]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.465]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.465]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.465]                     .init = FALSE)
[17:02:21.465]                 }
[17:02:21.465]             }
[17:02:21.465]         }
[17:02:21.465]     })
[17:02:21.465]     if (TRUE) {
[17:02:21.465]         base::sink(type = "output", split = FALSE)
[17:02:21.465]         if (TRUE) {
[17:02:21.465]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.465]         }
[17:02:21.465]         else {
[17:02:21.465]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.465]         }
[17:02:21.465]         base::close(...future.stdout)
[17:02:21.465]         ...future.stdout <- NULL
[17:02:21.465]     }
[17:02:21.465]     ...future.result$conditions <- ...future.conditions
[17:02:21.465]     ...future.result$finished <- base::Sys.time()
[17:02:21.465]     ...future.result
[17:02:21.465] }
[17:02:21.469] MultisessionFuture started
[17:02:21.469] - Launch lazy future ... done
[17:02:21.469] run() for ‘MultisessionFuture’ ... done
[17:02:21.469] result() for ClusterFuture ...
[17:02:21.470] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.470] - Validating connection of MultisessionFuture
[17:02:21.471] - received message: FutureResult
[17:02:21.471] - Received FutureResult
[17:02:21.471] - Erased future from FutureRegistry
[17:02:21.471] result() for ClusterFuture ...
[17:02:21.472] - result already collected: FutureResult
[17:02:21.472] result() for ClusterFuture ... done
[17:02:21.472] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.472] result() for ClusterFuture ... done
[17:02:21.472] result() for ClusterFuture ...
[17:02:21.472] - result already collected: FutureResult
[17:02:21.472] result() for ClusterFuture ... done
** Future evaluation with globals
[17:02:21.473] getGlobalsAndPackages() ...
[17:02:21.473] Searching for globals...
[17:02:21.474] - globals found: [3] ‘{’, ‘<-’, ‘a’
[17:02:21.474] Searching for globals ... DONE
[17:02:21.474] Resolving globals: FALSE
[17:02:21.475] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:21.475] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:21.475] - globals: [1] ‘a’
[17:02:21.475] 
[17:02:21.476] getGlobalsAndPackages() ... DONE
[17:02:21.476] run() for ‘Future’ ...
[17:02:21.476] - state: ‘created’
[17:02:21.476] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.491] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.491] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.491]   - Field: ‘node’
[17:02:21.491]   - Field: ‘label’
[17:02:21.491]   - Field: ‘local’
[17:02:21.491]   - Field: ‘owner’
[17:02:21.491]   - Field: ‘envir’
[17:02:21.491]   - Field: ‘workers’
[17:02:21.491]   - Field: ‘packages’
[17:02:21.492]   - Field: ‘gc’
[17:02:21.492]   - Field: ‘conditions’
[17:02:21.492]   - Field: ‘persistent’
[17:02:21.492]   - Field: ‘expr’
[17:02:21.492]   - Field: ‘uuid’
[17:02:21.492]   - Field: ‘seed’
[17:02:21.492]   - Field: ‘version’
[17:02:21.492]   - Field: ‘result’
[17:02:21.493]   - Field: ‘asynchronous’
[17:02:21.493]   - Field: ‘calls’
[17:02:21.493]   - Field: ‘globals’
[17:02:21.493]   - Field: ‘stdout’
[17:02:21.493]   - Field: ‘earlySignal’
[17:02:21.493]   - Field: ‘lazy’
[17:02:21.493]   - Field: ‘state’
[17:02:21.493] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.493] - Launch lazy future ...
[17:02:21.494] Packages needed by the future expression (n = 0): <none>
[17:02:21.494] Packages needed by future strategies (n = 0): <none>
[17:02:21.494] {
[17:02:21.494]     {
[17:02:21.494]         {
[17:02:21.494]             ...future.startTime <- base::Sys.time()
[17:02:21.494]             {
[17:02:21.494]                 {
[17:02:21.494]                   {
[17:02:21.494]                     {
[17:02:21.494]                       base::local({
[17:02:21.494]                         has_future <- base::requireNamespace("future", 
[17:02:21.494]                           quietly = TRUE)
[17:02:21.494]                         if (has_future) {
[17:02:21.494]                           ns <- base::getNamespace("future")
[17:02:21.494]                           version <- ns[[".package"]][["version"]]
[17:02:21.494]                           if (is.null(version)) 
[17:02:21.494]                             version <- utils::packageVersion("future")
[17:02:21.494]                         }
[17:02:21.494]                         else {
[17:02:21.494]                           version <- NULL
[17:02:21.494]                         }
[17:02:21.494]                         if (!has_future || version < "1.8.0") {
[17:02:21.494]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.494]                             "", base::R.version$version.string), 
[17:02:21.494]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.494]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.494]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.494]                               "release", "version")], collapse = " "), 
[17:02:21.494]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.494]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.494]                             info)
[17:02:21.494]                           info <- base::paste(info, collapse = "; ")
[17:02:21.494]                           if (!has_future) {
[17:02:21.494]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.494]                               info)
[17:02:21.494]                           }
[17:02:21.494]                           else {
[17:02:21.494]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.494]                               info, version)
[17:02:21.494]                           }
[17:02:21.494]                           base::stop(msg)
[17:02:21.494]                         }
[17:02:21.494]                       })
[17:02:21.494]                     }
[17:02:21.494]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.494]                     base::options(mc.cores = 1L)
[17:02:21.494]                   }
[17:02:21.494]                   ...future.strategy.old <- future::plan("list")
[17:02:21.494]                   options(future.plan = NULL)
[17:02:21.494]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.494]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.494]                 }
[17:02:21.494]                 ...future.workdir <- getwd()
[17:02:21.494]             }
[17:02:21.494]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.494]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.494]         }
[17:02:21.494]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.494]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.494]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.494]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.494]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.494]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.494]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.494]             base::names(...future.oldOptions))
[17:02:21.494]     }
[17:02:21.494]     if (FALSE) {
[17:02:21.494]     }
[17:02:21.494]     else {
[17:02:21.494]         if (TRUE) {
[17:02:21.494]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.494]                 open = "w")
[17:02:21.494]         }
[17:02:21.494]         else {
[17:02:21.494]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.494]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.494]         }
[17:02:21.494]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.494]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.494]             base::sink(type = "output", split = FALSE)
[17:02:21.494]             base::close(...future.stdout)
[17:02:21.494]         }, add = TRUE)
[17:02:21.494]     }
[17:02:21.494]     ...future.frame <- base::sys.nframe()
[17:02:21.494]     ...future.conditions <- base::list()
[17:02:21.494]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.494]     if (FALSE) {
[17:02:21.494]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.494]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.494]     }
[17:02:21.494]     ...future.result <- base::tryCatch({
[17:02:21.494]         base::withCallingHandlers({
[17:02:21.494]             ...future.value <- base::withVisible(base::local({
[17:02:21.494]                 ...future.makeSendCondition <- base::local({
[17:02:21.494]                   sendCondition <- NULL
[17:02:21.494]                   function(frame = 1L) {
[17:02:21.494]                     if (is.function(sendCondition)) 
[17:02:21.494]                       return(sendCondition)
[17:02:21.494]                     ns <- getNamespace("parallel")
[17:02:21.494]                     if (exists("sendData", mode = "function", 
[17:02:21.494]                       envir = ns)) {
[17:02:21.494]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.494]                         envir = ns)
[17:02:21.494]                       envir <- sys.frame(frame)
[17:02:21.494]                       master <- NULL
[17:02:21.494]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.494]                         !identical(envir, emptyenv())) {
[17:02:21.494]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.494]                           inherits = FALSE)) {
[17:02:21.494]                           master <- get("master", mode = "list", 
[17:02:21.494]                             envir = envir, inherits = FALSE)
[17:02:21.494]                           if (inherits(master, c("SOCKnode", 
[17:02:21.494]                             "SOCK0node"))) {
[17:02:21.494]                             sendCondition <<- function(cond) {
[17:02:21.494]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.494]                                 success = TRUE)
[17:02:21.494]                               parallel_sendData(master, data)
[17:02:21.494]                             }
[17:02:21.494]                             return(sendCondition)
[17:02:21.494]                           }
[17:02:21.494]                         }
[17:02:21.494]                         frame <- frame + 1L
[17:02:21.494]                         envir <- sys.frame(frame)
[17:02:21.494]                       }
[17:02:21.494]                     }
[17:02:21.494]                     sendCondition <<- function(cond) NULL
[17:02:21.494]                   }
[17:02:21.494]                 })
[17:02:21.494]                 withCallingHandlers({
[17:02:21.494]                   {
[17:02:21.494]                     x <- a
[17:02:21.494]                   }
[17:02:21.494]                 }, immediateCondition = function(cond) {
[17:02:21.494]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.494]                   sendCondition(cond)
[17:02:21.494]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.494]                   {
[17:02:21.494]                     inherits <- base::inherits
[17:02:21.494]                     invokeRestart <- base::invokeRestart
[17:02:21.494]                     is.null <- base::is.null
[17:02:21.494]                     muffled <- FALSE
[17:02:21.494]                     if (inherits(cond, "message")) {
[17:02:21.494]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.494]                       if (muffled) 
[17:02:21.494]                         invokeRestart("muffleMessage")
[17:02:21.494]                     }
[17:02:21.494]                     else if (inherits(cond, "warning")) {
[17:02:21.494]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.494]                       if (muffled) 
[17:02:21.494]                         invokeRestart("muffleWarning")
[17:02:21.494]                     }
[17:02:21.494]                     else if (inherits(cond, "condition")) {
[17:02:21.494]                       if (!is.null(pattern)) {
[17:02:21.494]                         computeRestarts <- base::computeRestarts
[17:02:21.494]                         grepl <- base::grepl
[17:02:21.494]                         restarts <- computeRestarts(cond)
[17:02:21.494]                         for (restart in restarts) {
[17:02:21.494]                           name <- restart$name
[17:02:21.494]                           if (is.null(name)) 
[17:02:21.494]                             next
[17:02:21.494]                           if (!grepl(pattern, name)) 
[17:02:21.494]                             next
[17:02:21.494]                           invokeRestart(restart)
[17:02:21.494]                           muffled <- TRUE
[17:02:21.494]                           break
[17:02:21.494]                         }
[17:02:21.494]                       }
[17:02:21.494]                     }
[17:02:21.494]                     invisible(muffled)
[17:02:21.494]                   }
[17:02:21.494]                   muffleCondition(cond)
[17:02:21.494]                 })
[17:02:21.494]             }))
[17:02:21.494]             future::FutureResult(value = ...future.value$value, 
[17:02:21.494]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.494]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.494]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.494]                     ...future.globalenv.names))
[17:02:21.494]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.494]         }, condition = base::local({
[17:02:21.494]             c <- base::c
[17:02:21.494]             inherits <- base::inherits
[17:02:21.494]             invokeRestart <- base::invokeRestart
[17:02:21.494]             length <- base::length
[17:02:21.494]             list <- base::list
[17:02:21.494]             seq.int <- base::seq.int
[17:02:21.494]             signalCondition <- base::signalCondition
[17:02:21.494]             sys.calls <- base::sys.calls
[17:02:21.494]             `[[` <- base::`[[`
[17:02:21.494]             `+` <- base::`+`
[17:02:21.494]             `<<-` <- base::`<<-`
[17:02:21.494]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.494]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.494]                   3L)]
[17:02:21.494]             }
[17:02:21.494]             function(cond) {
[17:02:21.494]                 is_error <- inherits(cond, "error")
[17:02:21.494]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.494]                   NULL)
[17:02:21.494]                 if (is_error) {
[17:02:21.494]                   sessionInformation <- function() {
[17:02:21.494]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.494]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.494]                       search = base::search(), system = base::Sys.info())
[17:02:21.494]                   }
[17:02:21.494]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.494]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.494]                     cond$call), session = sessionInformation(), 
[17:02:21.494]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.494]                   signalCondition(cond)
[17:02:21.494]                 }
[17:02:21.494]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.494]                 "immediateCondition"))) {
[17:02:21.494]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.494]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.494]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.494]                   if (TRUE && !signal) {
[17:02:21.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.494]                     {
[17:02:21.494]                       inherits <- base::inherits
[17:02:21.494]                       invokeRestart <- base::invokeRestart
[17:02:21.494]                       is.null <- base::is.null
[17:02:21.494]                       muffled <- FALSE
[17:02:21.494]                       if (inherits(cond, "message")) {
[17:02:21.494]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.494]                         if (muffled) 
[17:02:21.494]                           invokeRestart("muffleMessage")
[17:02:21.494]                       }
[17:02:21.494]                       else if (inherits(cond, "warning")) {
[17:02:21.494]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.494]                         if (muffled) 
[17:02:21.494]                           invokeRestart("muffleWarning")
[17:02:21.494]                       }
[17:02:21.494]                       else if (inherits(cond, "condition")) {
[17:02:21.494]                         if (!is.null(pattern)) {
[17:02:21.494]                           computeRestarts <- base::computeRestarts
[17:02:21.494]                           grepl <- base::grepl
[17:02:21.494]                           restarts <- computeRestarts(cond)
[17:02:21.494]                           for (restart in restarts) {
[17:02:21.494]                             name <- restart$name
[17:02:21.494]                             if (is.null(name)) 
[17:02:21.494]                               next
[17:02:21.494]                             if (!grepl(pattern, name)) 
[17:02:21.494]                               next
[17:02:21.494]                             invokeRestart(restart)
[17:02:21.494]                             muffled <- TRUE
[17:02:21.494]                             break
[17:02:21.494]                           }
[17:02:21.494]                         }
[17:02:21.494]                       }
[17:02:21.494]                       invisible(muffled)
[17:02:21.494]                     }
[17:02:21.494]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.494]                   }
[17:02:21.494]                 }
[17:02:21.494]                 else {
[17:02:21.494]                   if (TRUE) {
[17:02:21.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.494]                     {
[17:02:21.494]                       inherits <- base::inherits
[17:02:21.494]                       invokeRestart <- base::invokeRestart
[17:02:21.494]                       is.null <- base::is.null
[17:02:21.494]                       muffled <- FALSE
[17:02:21.494]                       if (inherits(cond, "message")) {
[17:02:21.494]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.494]                         if (muffled) 
[17:02:21.494]                           invokeRestart("muffleMessage")
[17:02:21.494]                       }
[17:02:21.494]                       else if (inherits(cond, "warning")) {
[17:02:21.494]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.494]                         if (muffled) 
[17:02:21.494]                           invokeRestart("muffleWarning")
[17:02:21.494]                       }
[17:02:21.494]                       else if (inherits(cond, "condition")) {
[17:02:21.494]                         if (!is.null(pattern)) {
[17:02:21.494]                           computeRestarts <- base::computeRestarts
[17:02:21.494]                           grepl <- base::grepl
[17:02:21.494]                           restarts <- computeRestarts(cond)
[17:02:21.494]                           for (restart in restarts) {
[17:02:21.494]                             name <- restart$name
[17:02:21.494]                             if (is.null(name)) 
[17:02:21.494]                               next
[17:02:21.494]                             if (!grepl(pattern, name)) 
[17:02:21.494]                               next
[17:02:21.494]                             invokeRestart(restart)
[17:02:21.494]                             muffled <- TRUE
[17:02:21.494]                             break
[17:02:21.494]                           }
[17:02:21.494]                         }
[17:02:21.494]                       }
[17:02:21.494]                       invisible(muffled)
[17:02:21.494]                     }
[17:02:21.494]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.494]                   }
[17:02:21.494]                 }
[17:02:21.494]             }
[17:02:21.494]         }))
[17:02:21.494]     }, error = function(ex) {
[17:02:21.494]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.494]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.494]                 ...future.rng), started = ...future.startTime, 
[17:02:21.494]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.494]             version = "1.8"), class = "FutureResult")
[17:02:21.494]     }, finally = {
[17:02:21.494]         if (!identical(...future.workdir, getwd())) 
[17:02:21.494]             setwd(...future.workdir)
[17:02:21.494]         {
[17:02:21.494]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.494]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.494]             }
[17:02:21.494]             base::options(...future.oldOptions)
[17:02:21.494]             if (.Platform$OS.type == "windows") {
[17:02:21.494]                 old_names <- names(...future.oldEnvVars)
[17:02:21.494]                 envs <- base::Sys.getenv()
[17:02:21.494]                 names <- names(envs)
[17:02:21.494]                 common <- intersect(names, old_names)
[17:02:21.494]                 added <- setdiff(names, old_names)
[17:02:21.494]                 removed <- setdiff(old_names, names)
[17:02:21.494]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.494]                   envs[common]]
[17:02:21.494]                 NAMES <- toupper(changed)
[17:02:21.494]                 args <- list()
[17:02:21.494]                 for (kk in seq_along(NAMES)) {
[17:02:21.494]                   name <- changed[[kk]]
[17:02:21.494]                   NAME <- NAMES[[kk]]
[17:02:21.494]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.494]                     next
[17:02:21.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.494]                 }
[17:02:21.494]                 NAMES <- toupper(added)
[17:02:21.494]                 for (kk in seq_along(NAMES)) {
[17:02:21.494]                   name <- added[[kk]]
[17:02:21.494]                   NAME <- NAMES[[kk]]
[17:02:21.494]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.494]                     next
[17:02:21.494]                   args[[name]] <- ""
[17:02:21.494]                 }
[17:02:21.494]                 NAMES <- toupper(removed)
[17:02:21.494]                 for (kk in seq_along(NAMES)) {
[17:02:21.494]                   name <- removed[[kk]]
[17:02:21.494]                   NAME <- NAMES[[kk]]
[17:02:21.494]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.494]                     next
[17:02:21.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.494]                 }
[17:02:21.494]                 if (length(args) > 0) 
[17:02:21.494]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.494]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.494]             }
[17:02:21.494]             else {
[17:02:21.494]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.494]             }
[17:02:21.494]             {
[17:02:21.494]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.494]                   0L) {
[17:02:21.494]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.494]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.494]                   base::options(opts)
[17:02:21.494]                 }
[17:02:21.494]                 {
[17:02:21.494]                   {
[17:02:21.494]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.494]                     NULL
[17:02:21.494]                   }
[17:02:21.494]                   options(future.plan = NULL)
[17:02:21.494]                   if (is.na(NA_character_)) 
[17:02:21.494]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.494]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.494]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.494]                     .init = FALSE)
[17:02:21.494]                 }
[17:02:21.494]             }
[17:02:21.494]         }
[17:02:21.494]     })
[17:02:21.494]     if (TRUE) {
[17:02:21.494]         base::sink(type = "output", split = FALSE)
[17:02:21.494]         if (TRUE) {
[17:02:21.494]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.494]         }
[17:02:21.494]         else {
[17:02:21.494]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.494]         }
[17:02:21.494]         base::close(...future.stdout)
[17:02:21.494]         ...future.stdout <- NULL
[17:02:21.494]     }
[17:02:21.494]     ...future.result$conditions <- ...future.conditions
[17:02:21.494]     ...future.result$finished <- base::Sys.time()
[17:02:21.494]     ...future.result
[17:02:21.494] }
[17:02:21.497] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:21.497] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:21.498] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:21.498] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:21.499] MultisessionFuture started
[17:02:21.499] - Launch lazy future ... done
[17:02:21.499] run() for ‘MultisessionFuture’ ... done
[17:02:21.499] result() for ClusterFuture ...
[17:02:21.500] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.500] - Validating connection of MultisessionFuture
[17:02:21.504] - received message: FutureResult
[17:02:21.504] - Received FutureResult
[17:02:21.504] - Erased future from FutureRegistry
[17:02:21.504] result() for ClusterFuture ...
[17:02:21.505] - result already collected: FutureResult
[17:02:21.505] result() for ClusterFuture ... done
[17:02:21.505] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.505] result() for ClusterFuture ... done
[17:02:21.505] result() for ClusterFuture ...
[17:02:21.505] - result already collected: FutureResult
[17:02:21.505] result() for ClusterFuture ... done
** Future evaluation with errors
[17:02:21.506] getGlobalsAndPackages() ...
[17:02:21.506] Searching for globals...
[17:02:21.508] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[17:02:21.508] Searching for globals ... DONE
[17:02:21.508] Resolving globals: FALSE
[17:02:21.508] 
[17:02:21.509] 
[17:02:21.509] getGlobalsAndPackages() ... DONE
[17:02:21.509] run() for ‘Future’ ...
[17:02:21.509] - state: ‘created’
[17:02:21.509] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.524] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.524] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.524]   - Field: ‘node’
[17:02:21.525]   - Field: ‘label’
[17:02:21.525]   - Field: ‘local’
[17:02:21.525]   - Field: ‘owner’
[17:02:21.525]   - Field: ‘envir’
[17:02:21.525]   - Field: ‘workers’
[17:02:21.525]   - Field: ‘packages’
[17:02:21.525]   - Field: ‘gc’
[17:02:21.525]   - Field: ‘conditions’
[17:02:21.525]   - Field: ‘persistent’
[17:02:21.525]   - Field: ‘expr’
[17:02:21.526]   - Field: ‘uuid’
[17:02:21.526]   - Field: ‘seed’
[17:02:21.526]   - Field: ‘version’
[17:02:21.526]   - Field: ‘result’
[17:02:21.526]   - Field: ‘asynchronous’
[17:02:21.526]   - Field: ‘calls’
[17:02:21.526]   - Field: ‘globals’
[17:02:21.526]   - Field: ‘stdout’
[17:02:21.527]   - Field: ‘earlySignal’
[17:02:21.527]   - Field: ‘lazy’
[17:02:21.527]   - Field: ‘state’
[17:02:21.527] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.527] - Launch lazy future ...
[17:02:21.527] Packages needed by the future expression (n = 0): <none>
[17:02:21.528] Packages needed by future strategies (n = 0): <none>
[17:02:21.528] {
[17:02:21.528]     {
[17:02:21.528]         {
[17:02:21.528]             ...future.startTime <- base::Sys.time()
[17:02:21.528]             {
[17:02:21.528]                 {
[17:02:21.528]                   {
[17:02:21.528]                     {
[17:02:21.528]                       base::local({
[17:02:21.528]                         has_future <- base::requireNamespace("future", 
[17:02:21.528]                           quietly = TRUE)
[17:02:21.528]                         if (has_future) {
[17:02:21.528]                           ns <- base::getNamespace("future")
[17:02:21.528]                           version <- ns[[".package"]][["version"]]
[17:02:21.528]                           if (is.null(version)) 
[17:02:21.528]                             version <- utils::packageVersion("future")
[17:02:21.528]                         }
[17:02:21.528]                         else {
[17:02:21.528]                           version <- NULL
[17:02:21.528]                         }
[17:02:21.528]                         if (!has_future || version < "1.8.0") {
[17:02:21.528]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.528]                             "", base::R.version$version.string), 
[17:02:21.528]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.528]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.528]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.528]                               "release", "version")], collapse = " "), 
[17:02:21.528]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.528]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.528]                             info)
[17:02:21.528]                           info <- base::paste(info, collapse = "; ")
[17:02:21.528]                           if (!has_future) {
[17:02:21.528]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.528]                               info)
[17:02:21.528]                           }
[17:02:21.528]                           else {
[17:02:21.528]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.528]                               info, version)
[17:02:21.528]                           }
[17:02:21.528]                           base::stop(msg)
[17:02:21.528]                         }
[17:02:21.528]                       })
[17:02:21.528]                     }
[17:02:21.528]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.528]                     base::options(mc.cores = 1L)
[17:02:21.528]                   }
[17:02:21.528]                   ...future.strategy.old <- future::plan("list")
[17:02:21.528]                   options(future.plan = NULL)
[17:02:21.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.528]                 }
[17:02:21.528]                 ...future.workdir <- getwd()
[17:02:21.528]             }
[17:02:21.528]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.528]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.528]         }
[17:02:21.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.528]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.528]             base::names(...future.oldOptions))
[17:02:21.528]     }
[17:02:21.528]     if (FALSE) {
[17:02:21.528]     }
[17:02:21.528]     else {
[17:02:21.528]         if (TRUE) {
[17:02:21.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.528]                 open = "w")
[17:02:21.528]         }
[17:02:21.528]         else {
[17:02:21.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.528]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.528]         }
[17:02:21.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.528]             base::sink(type = "output", split = FALSE)
[17:02:21.528]             base::close(...future.stdout)
[17:02:21.528]         }, add = TRUE)
[17:02:21.528]     }
[17:02:21.528]     ...future.frame <- base::sys.nframe()
[17:02:21.528]     ...future.conditions <- base::list()
[17:02:21.528]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.528]     if (FALSE) {
[17:02:21.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.528]     }
[17:02:21.528]     ...future.result <- base::tryCatch({
[17:02:21.528]         base::withCallingHandlers({
[17:02:21.528]             ...future.value <- base::withVisible(base::local({
[17:02:21.528]                 ...future.makeSendCondition <- base::local({
[17:02:21.528]                   sendCondition <- NULL
[17:02:21.528]                   function(frame = 1L) {
[17:02:21.528]                     if (is.function(sendCondition)) 
[17:02:21.528]                       return(sendCondition)
[17:02:21.528]                     ns <- getNamespace("parallel")
[17:02:21.528]                     if (exists("sendData", mode = "function", 
[17:02:21.528]                       envir = ns)) {
[17:02:21.528]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.528]                         envir = ns)
[17:02:21.528]                       envir <- sys.frame(frame)
[17:02:21.528]                       master <- NULL
[17:02:21.528]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.528]                         !identical(envir, emptyenv())) {
[17:02:21.528]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.528]                           inherits = FALSE)) {
[17:02:21.528]                           master <- get("master", mode = "list", 
[17:02:21.528]                             envir = envir, inherits = FALSE)
[17:02:21.528]                           if (inherits(master, c("SOCKnode", 
[17:02:21.528]                             "SOCK0node"))) {
[17:02:21.528]                             sendCondition <<- function(cond) {
[17:02:21.528]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.528]                                 success = TRUE)
[17:02:21.528]                               parallel_sendData(master, data)
[17:02:21.528]                             }
[17:02:21.528]                             return(sendCondition)
[17:02:21.528]                           }
[17:02:21.528]                         }
[17:02:21.528]                         frame <- frame + 1L
[17:02:21.528]                         envir <- sys.frame(frame)
[17:02:21.528]                       }
[17:02:21.528]                     }
[17:02:21.528]                     sendCondition <<- function(cond) NULL
[17:02:21.528]                   }
[17:02:21.528]                 })
[17:02:21.528]                 withCallingHandlers({
[17:02:21.528]                   {
[17:02:21.528]                     x <- 3
[17:02:21.528]                     stop("Woops!")
[17:02:21.528]                     x
[17:02:21.528]                   }
[17:02:21.528]                 }, immediateCondition = function(cond) {
[17:02:21.528]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.528]                   sendCondition(cond)
[17:02:21.528]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.528]                   {
[17:02:21.528]                     inherits <- base::inherits
[17:02:21.528]                     invokeRestart <- base::invokeRestart
[17:02:21.528]                     is.null <- base::is.null
[17:02:21.528]                     muffled <- FALSE
[17:02:21.528]                     if (inherits(cond, "message")) {
[17:02:21.528]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.528]                       if (muffled) 
[17:02:21.528]                         invokeRestart("muffleMessage")
[17:02:21.528]                     }
[17:02:21.528]                     else if (inherits(cond, "warning")) {
[17:02:21.528]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.528]                       if (muffled) 
[17:02:21.528]                         invokeRestart("muffleWarning")
[17:02:21.528]                     }
[17:02:21.528]                     else if (inherits(cond, "condition")) {
[17:02:21.528]                       if (!is.null(pattern)) {
[17:02:21.528]                         computeRestarts <- base::computeRestarts
[17:02:21.528]                         grepl <- base::grepl
[17:02:21.528]                         restarts <- computeRestarts(cond)
[17:02:21.528]                         for (restart in restarts) {
[17:02:21.528]                           name <- restart$name
[17:02:21.528]                           if (is.null(name)) 
[17:02:21.528]                             next
[17:02:21.528]                           if (!grepl(pattern, name)) 
[17:02:21.528]                             next
[17:02:21.528]                           invokeRestart(restart)
[17:02:21.528]                           muffled <- TRUE
[17:02:21.528]                           break
[17:02:21.528]                         }
[17:02:21.528]                       }
[17:02:21.528]                     }
[17:02:21.528]                     invisible(muffled)
[17:02:21.528]                   }
[17:02:21.528]                   muffleCondition(cond)
[17:02:21.528]                 })
[17:02:21.528]             }))
[17:02:21.528]             future::FutureResult(value = ...future.value$value, 
[17:02:21.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.528]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.528]                     ...future.globalenv.names))
[17:02:21.528]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.528]         }, condition = base::local({
[17:02:21.528]             c <- base::c
[17:02:21.528]             inherits <- base::inherits
[17:02:21.528]             invokeRestart <- base::invokeRestart
[17:02:21.528]             length <- base::length
[17:02:21.528]             list <- base::list
[17:02:21.528]             seq.int <- base::seq.int
[17:02:21.528]             signalCondition <- base::signalCondition
[17:02:21.528]             sys.calls <- base::sys.calls
[17:02:21.528]             `[[` <- base::`[[`
[17:02:21.528]             `+` <- base::`+`
[17:02:21.528]             `<<-` <- base::`<<-`
[17:02:21.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.528]                   3L)]
[17:02:21.528]             }
[17:02:21.528]             function(cond) {
[17:02:21.528]                 is_error <- inherits(cond, "error")
[17:02:21.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.528]                   NULL)
[17:02:21.528]                 if (is_error) {
[17:02:21.528]                   sessionInformation <- function() {
[17:02:21.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.528]                       search = base::search(), system = base::Sys.info())
[17:02:21.528]                   }
[17:02:21.528]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.528]                     cond$call), session = sessionInformation(), 
[17:02:21.528]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.528]                   signalCondition(cond)
[17:02:21.528]                 }
[17:02:21.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.528]                 "immediateCondition"))) {
[17:02:21.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.528]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.528]                   if (TRUE && !signal) {
[17:02:21.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.528]                     {
[17:02:21.528]                       inherits <- base::inherits
[17:02:21.528]                       invokeRestart <- base::invokeRestart
[17:02:21.528]                       is.null <- base::is.null
[17:02:21.528]                       muffled <- FALSE
[17:02:21.528]                       if (inherits(cond, "message")) {
[17:02:21.528]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.528]                         if (muffled) 
[17:02:21.528]                           invokeRestart("muffleMessage")
[17:02:21.528]                       }
[17:02:21.528]                       else if (inherits(cond, "warning")) {
[17:02:21.528]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.528]                         if (muffled) 
[17:02:21.528]                           invokeRestart("muffleWarning")
[17:02:21.528]                       }
[17:02:21.528]                       else if (inherits(cond, "condition")) {
[17:02:21.528]                         if (!is.null(pattern)) {
[17:02:21.528]                           computeRestarts <- base::computeRestarts
[17:02:21.528]                           grepl <- base::grepl
[17:02:21.528]                           restarts <- computeRestarts(cond)
[17:02:21.528]                           for (restart in restarts) {
[17:02:21.528]                             name <- restart$name
[17:02:21.528]                             if (is.null(name)) 
[17:02:21.528]                               next
[17:02:21.528]                             if (!grepl(pattern, name)) 
[17:02:21.528]                               next
[17:02:21.528]                             invokeRestart(restart)
[17:02:21.528]                             muffled <- TRUE
[17:02:21.528]                             break
[17:02:21.528]                           }
[17:02:21.528]                         }
[17:02:21.528]                       }
[17:02:21.528]                       invisible(muffled)
[17:02:21.528]                     }
[17:02:21.528]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.528]                   }
[17:02:21.528]                 }
[17:02:21.528]                 else {
[17:02:21.528]                   if (TRUE) {
[17:02:21.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.528]                     {
[17:02:21.528]                       inherits <- base::inherits
[17:02:21.528]                       invokeRestart <- base::invokeRestart
[17:02:21.528]                       is.null <- base::is.null
[17:02:21.528]                       muffled <- FALSE
[17:02:21.528]                       if (inherits(cond, "message")) {
[17:02:21.528]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.528]                         if (muffled) 
[17:02:21.528]                           invokeRestart("muffleMessage")
[17:02:21.528]                       }
[17:02:21.528]                       else if (inherits(cond, "warning")) {
[17:02:21.528]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.528]                         if (muffled) 
[17:02:21.528]                           invokeRestart("muffleWarning")
[17:02:21.528]                       }
[17:02:21.528]                       else if (inherits(cond, "condition")) {
[17:02:21.528]                         if (!is.null(pattern)) {
[17:02:21.528]                           computeRestarts <- base::computeRestarts
[17:02:21.528]                           grepl <- base::grepl
[17:02:21.528]                           restarts <- computeRestarts(cond)
[17:02:21.528]                           for (restart in restarts) {
[17:02:21.528]                             name <- restart$name
[17:02:21.528]                             if (is.null(name)) 
[17:02:21.528]                               next
[17:02:21.528]                             if (!grepl(pattern, name)) 
[17:02:21.528]                               next
[17:02:21.528]                             invokeRestart(restart)
[17:02:21.528]                             muffled <- TRUE
[17:02:21.528]                             break
[17:02:21.528]                           }
[17:02:21.528]                         }
[17:02:21.528]                       }
[17:02:21.528]                       invisible(muffled)
[17:02:21.528]                     }
[17:02:21.528]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.528]                   }
[17:02:21.528]                 }
[17:02:21.528]             }
[17:02:21.528]         }))
[17:02:21.528]     }, error = function(ex) {
[17:02:21.528]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.528]                 ...future.rng), started = ...future.startTime, 
[17:02:21.528]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.528]             version = "1.8"), class = "FutureResult")
[17:02:21.528]     }, finally = {
[17:02:21.528]         if (!identical(...future.workdir, getwd())) 
[17:02:21.528]             setwd(...future.workdir)
[17:02:21.528]         {
[17:02:21.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.528]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.528]             }
[17:02:21.528]             base::options(...future.oldOptions)
[17:02:21.528]             if (.Platform$OS.type == "windows") {
[17:02:21.528]                 old_names <- names(...future.oldEnvVars)
[17:02:21.528]                 envs <- base::Sys.getenv()
[17:02:21.528]                 names <- names(envs)
[17:02:21.528]                 common <- intersect(names, old_names)
[17:02:21.528]                 added <- setdiff(names, old_names)
[17:02:21.528]                 removed <- setdiff(old_names, names)
[17:02:21.528]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.528]                   envs[common]]
[17:02:21.528]                 NAMES <- toupper(changed)
[17:02:21.528]                 args <- list()
[17:02:21.528]                 for (kk in seq_along(NAMES)) {
[17:02:21.528]                   name <- changed[[kk]]
[17:02:21.528]                   NAME <- NAMES[[kk]]
[17:02:21.528]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.528]                     next
[17:02:21.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.528]                 }
[17:02:21.528]                 NAMES <- toupper(added)
[17:02:21.528]                 for (kk in seq_along(NAMES)) {
[17:02:21.528]                   name <- added[[kk]]
[17:02:21.528]                   NAME <- NAMES[[kk]]
[17:02:21.528]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.528]                     next
[17:02:21.528]                   args[[name]] <- ""
[17:02:21.528]                 }
[17:02:21.528]                 NAMES <- toupper(removed)
[17:02:21.528]                 for (kk in seq_along(NAMES)) {
[17:02:21.528]                   name <- removed[[kk]]
[17:02:21.528]                   NAME <- NAMES[[kk]]
[17:02:21.528]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.528]                     next
[17:02:21.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.528]                 }
[17:02:21.528]                 if (length(args) > 0) 
[17:02:21.528]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.528]             }
[17:02:21.528]             else {
[17:02:21.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.528]             }
[17:02:21.528]             {
[17:02:21.528]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.528]                   0L) {
[17:02:21.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.528]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.528]                   base::options(opts)
[17:02:21.528]                 }
[17:02:21.528]                 {
[17:02:21.528]                   {
[17:02:21.528]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.528]                     NULL
[17:02:21.528]                   }
[17:02:21.528]                   options(future.plan = NULL)
[17:02:21.528]                   if (is.na(NA_character_)) 
[17:02:21.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.528]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.528]                     .init = FALSE)
[17:02:21.528]                 }
[17:02:21.528]             }
[17:02:21.528]         }
[17:02:21.528]     })
[17:02:21.528]     if (TRUE) {
[17:02:21.528]         base::sink(type = "output", split = FALSE)
[17:02:21.528]         if (TRUE) {
[17:02:21.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.528]         }
[17:02:21.528]         else {
[17:02:21.528]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.528]         }
[17:02:21.528]         base::close(...future.stdout)
[17:02:21.528]         ...future.stdout <- NULL
[17:02:21.528]     }
[17:02:21.528]     ...future.result$conditions <- ...future.conditions
[17:02:21.528]     ...future.result$finished <- base::Sys.time()
[17:02:21.528]     ...future.result
[17:02:21.528] }
[17:02:21.532] MultisessionFuture started
[17:02:21.532] - Launch lazy future ... done
[17:02:21.532] run() for ‘MultisessionFuture’ ... done
[17:02:21.532] result() for ClusterFuture ...
[17:02:21.533] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.533] - Validating connection of MultisessionFuture
[17:02:21.535] - received message: FutureResult
[17:02:21.535] - Received FutureResult
[17:02:21.535] - Erased future from FutureRegistry
[17:02:21.535] result() for ClusterFuture ...
[17:02:21.535] - result already collected: FutureResult
[17:02:21.535] result() for ClusterFuture ... done
[17:02:21.535] signalConditions() ...
[17:02:21.536]  - include = ‘immediateCondition’
[17:02:21.536]  - exclude = 
[17:02:21.536]  - resignal = FALSE
[17:02:21.536]  - Number of conditions: 1
[17:02:21.536] signalConditions() ... done
[17:02:21.536] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.536] result() for ClusterFuture ... done
[17:02:21.536] result() for ClusterFuture ...
[17:02:21.536] - result already collected: FutureResult
[17:02:21.537] result() for ClusterFuture ... done
[17:02:21.537] signalConditions() ...
[17:02:21.537]  - include = ‘immediateCondition’
[17:02:21.537]  - exclude = 
[17:02:21.537]  - resignal = FALSE
[17:02:21.537]  - Number of conditions: 1
[17:02:21.537] signalConditions() ... done
[17:02:21.537] Future state: ‘finished’
[17:02:21.537] result() for ClusterFuture ...
[17:02:21.538] - result already collected: FutureResult
[17:02:21.538] result() for ClusterFuture ... done
[17:02:21.538] signalConditions() ...
[17:02:21.538]  - include = ‘condition’
[17:02:21.538]  - exclude = ‘immediateCondition’
[17:02:21.538]  - resignal = TRUE
[17:02:21.538]  - Number of conditions: 1
[17:02:21.538]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:21.538] signalConditions() ... done
[17:02:21.539] getGlobalsAndPackages() ...
[17:02:21.539] Searching for globals...
[17:02:21.541] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:21.541] Searching for globals ... DONE
[17:02:21.541] Resolving globals: FALSE
[17:02:21.542] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:21.542] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:21.542] - globals: [1] ‘ii’
[17:02:21.543] 
[17:02:21.543] getGlobalsAndPackages() ... DONE
[17:02:21.543] run() for ‘Future’ ...
[17:02:21.543] - state: ‘created’
[17:02:21.543] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.560] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.560] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.560]   - Field: ‘node’
[17:02:21.561]   - Field: ‘label’
[17:02:21.561]   - Field: ‘local’
[17:02:21.561]   - Field: ‘owner’
[17:02:21.561]   - Field: ‘envir’
[17:02:21.561]   - Field: ‘workers’
[17:02:21.561]   - Field: ‘packages’
[17:02:21.561]   - Field: ‘gc’
[17:02:21.561]   - Field: ‘conditions’
[17:02:21.561]   - Field: ‘persistent’
[17:02:21.561]   - Field: ‘expr’
[17:02:21.562]   - Field: ‘uuid’
[17:02:21.562]   - Field: ‘seed’
[17:02:21.562]   - Field: ‘version’
[17:02:21.562]   - Field: ‘result’
[17:02:21.562]   - Field: ‘asynchronous’
[17:02:21.562]   - Field: ‘calls’
[17:02:21.562]   - Field: ‘globals’
[17:02:21.562]   - Field: ‘stdout’
[17:02:21.562]   - Field: ‘earlySignal’
[17:02:21.562]   - Field: ‘lazy’
[17:02:21.562]   - Field: ‘state’
[17:02:21.563] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.563] - Launch lazy future ...
[17:02:21.563] Packages needed by the future expression (n = 0): <none>
[17:02:21.563] Packages needed by future strategies (n = 0): <none>
[17:02:21.564] {
[17:02:21.564]     {
[17:02:21.564]         {
[17:02:21.564]             ...future.startTime <- base::Sys.time()
[17:02:21.564]             {
[17:02:21.564]                 {
[17:02:21.564]                   {
[17:02:21.564]                     {
[17:02:21.564]                       base::local({
[17:02:21.564]                         has_future <- base::requireNamespace("future", 
[17:02:21.564]                           quietly = TRUE)
[17:02:21.564]                         if (has_future) {
[17:02:21.564]                           ns <- base::getNamespace("future")
[17:02:21.564]                           version <- ns[[".package"]][["version"]]
[17:02:21.564]                           if (is.null(version)) 
[17:02:21.564]                             version <- utils::packageVersion("future")
[17:02:21.564]                         }
[17:02:21.564]                         else {
[17:02:21.564]                           version <- NULL
[17:02:21.564]                         }
[17:02:21.564]                         if (!has_future || version < "1.8.0") {
[17:02:21.564]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.564]                             "", base::R.version$version.string), 
[17:02:21.564]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.564]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.564]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.564]                               "release", "version")], collapse = " "), 
[17:02:21.564]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.564]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.564]                             info)
[17:02:21.564]                           info <- base::paste(info, collapse = "; ")
[17:02:21.564]                           if (!has_future) {
[17:02:21.564]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.564]                               info)
[17:02:21.564]                           }
[17:02:21.564]                           else {
[17:02:21.564]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.564]                               info, version)
[17:02:21.564]                           }
[17:02:21.564]                           base::stop(msg)
[17:02:21.564]                         }
[17:02:21.564]                       })
[17:02:21.564]                     }
[17:02:21.564]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.564]                     base::options(mc.cores = 1L)
[17:02:21.564]                   }
[17:02:21.564]                   ...future.strategy.old <- future::plan("list")
[17:02:21.564]                   options(future.plan = NULL)
[17:02:21.564]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.564]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.564]                 }
[17:02:21.564]                 ...future.workdir <- getwd()
[17:02:21.564]             }
[17:02:21.564]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.564]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.564]         }
[17:02:21.564]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.564]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.564]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.564]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.564]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.564]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.564]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.564]             base::names(...future.oldOptions))
[17:02:21.564]     }
[17:02:21.564]     if (FALSE) {
[17:02:21.564]     }
[17:02:21.564]     else {
[17:02:21.564]         if (TRUE) {
[17:02:21.564]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.564]                 open = "w")
[17:02:21.564]         }
[17:02:21.564]         else {
[17:02:21.564]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.564]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.564]         }
[17:02:21.564]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.564]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.564]             base::sink(type = "output", split = FALSE)
[17:02:21.564]             base::close(...future.stdout)
[17:02:21.564]         }, add = TRUE)
[17:02:21.564]     }
[17:02:21.564]     ...future.frame <- base::sys.nframe()
[17:02:21.564]     ...future.conditions <- base::list()
[17:02:21.564]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.564]     if (FALSE) {
[17:02:21.564]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.564]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.564]     }
[17:02:21.564]     ...future.result <- base::tryCatch({
[17:02:21.564]         base::withCallingHandlers({
[17:02:21.564]             ...future.value <- base::withVisible(base::local({
[17:02:21.564]                 ...future.makeSendCondition <- base::local({
[17:02:21.564]                   sendCondition <- NULL
[17:02:21.564]                   function(frame = 1L) {
[17:02:21.564]                     if (is.function(sendCondition)) 
[17:02:21.564]                       return(sendCondition)
[17:02:21.564]                     ns <- getNamespace("parallel")
[17:02:21.564]                     if (exists("sendData", mode = "function", 
[17:02:21.564]                       envir = ns)) {
[17:02:21.564]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.564]                         envir = ns)
[17:02:21.564]                       envir <- sys.frame(frame)
[17:02:21.564]                       master <- NULL
[17:02:21.564]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.564]                         !identical(envir, emptyenv())) {
[17:02:21.564]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.564]                           inherits = FALSE)) {
[17:02:21.564]                           master <- get("master", mode = "list", 
[17:02:21.564]                             envir = envir, inherits = FALSE)
[17:02:21.564]                           if (inherits(master, c("SOCKnode", 
[17:02:21.564]                             "SOCK0node"))) {
[17:02:21.564]                             sendCondition <<- function(cond) {
[17:02:21.564]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.564]                                 success = TRUE)
[17:02:21.564]                               parallel_sendData(master, data)
[17:02:21.564]                             }
[17:02:21.564]                             return(sendCondition)
[17:02:21.564]                           }
[17:02:21.564]                         }
[17:02:21.564]                         frame <- frame + 1L
[17:02:21.564]                         envir <- sys.frame(frame)
[17:02:21.564]                       }
[17:02:21.564]                     }
[17:02:21.564]                     sendCondition <<- function(cond) NULL
[17:02:21.564]                   }
[17:02:21.564]                 })
[17:02:21.564]                 withCallingHandlers({
[17:02:21.564]                   {
[17:02:21.564]                     if (ii%%2 == 0) 
[17:02:21.564]                       stop("Woops!")
[17:02:21.564]                     ii
[17:02:21.564]                   }
[17:02:21.564]                 }, immediateCondition = function(cond) {
[17:02:21.564]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.564]                   sendCondition(cond)
[17:02:21.564]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.564]                   {
[17:02:21.564]                     inherits <- base::inherits
[17:02:21.564]                     invokeRestart <- base::invokeRestart
[17:02:21.564]                     is.null <- base::is.null
[17:02:21.564]                     muffled <- FALSE
[17:02:21.564]                     if (inherits(cond, "message")) {
[17:02:21.564]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.564]                       if (muffled) 
[17:02:21.564]                         invokeRestart("muffleMessage")
[17:02:21.564]                     }
[17:02:21.564]                     else if (inherits(cond, "warning")) {
[17:02:21.564]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.564]                       if (muffled) 
[17:02:21.564]                         invokeRestart("muffleWarning")
[17:02:21.564]                     }
[17:02:21.564]                     else if (inherits(cond, "condition")) {
[17:02:21.564]                       if (!is.null(pattern)) {
[17:02:21.564]                         computeRestarts <- base::computeRestarts
[17:02:21.564]                         grepl <- base::grepl
[17:02:21.564]                         restarts <- computeRestarts(cond)
[17:02:21.564]                         for (restart in restarts) {
[17:02:21.564]                           name <- restart$name
[17:02:21.564]                           if (is.null(name)) 
[17:02:21.564]                             next
[17:02:21.564]                           if (!grepl(pattern, name)) 
[17:02:21.564]                             next
[17:02:21.564]                           invokeRestart(restart)
[17:02:21.564]                           muffled <- TRUE
[17:02:21.564]                           break
[17:02:21.564]                         }
[17:02:21.564]                       }
[17:02:21.564]                     }
[17:02:21.564]                     invisible(muffled)
[17:02:21.564]                   }
[17:02:21.564]                   muffleCondition(cond)
[17:02:21.564]                 })
[17:02:21.564]             }))
[17:02:21.564]             future::FutureResult(value = ...future.value$value, 
[17:02:21.564]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.564]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.564]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.564]                     ...future.globalenv.names))
[17:02:21.564]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.564]         }, condition = base::local({
[17:02:21.564]             c <- base::c
[17:02:21.564]             inherits <- base::inherits
[17:02:21.564]             invokeRestart <- base::invokeRestart
[17:02:21.564]             length <- base::length
[17:02:21.564]             list <- base::list
[17:02:21.564]             seq.int <- base::seq.int
[17:02:21.564]             signalCondition <- base::signalCondition
[17:02:21.564]             sys.calls <- base::sys.calls
[17:02:21.564]             `[[` <- base::`[[`
[17:02:21.564]             `+` <- base::`+`
[17:02:21.564]             `<<-` <- base::`<<-`
[17:02:21.564]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.564]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.564]                   3L)]
[17:02:21.564]             }
[17:02:21.564]             function(cond) {
[17:02:21.564]                 is_error <- inherits(cond, "error")
[17:02:21.564]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.564]                   NULL)
[17:02:21.564]                 if (is_error) {
[17:02:21.564]                   sessionInformation <- function() {
[17:02:21.564]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.564]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.564]                       search = base::search(), system = base::Sys.info())
[17:02:21.564]                   }
[17:02:21.564]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.564]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.564]                     cond$call), session = sessionInformation(), 
[17:02:21.564]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.564]                   signalCondition(cond)
[17:02:21.564]                 }
[17:02:21.564]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.564]                 "immediateCondition"))) {
[17:02:21.564]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.564]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.564]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.564]                   if (TRUE && !signal) {
[17:02:21.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.564]                     {
[17:02:21.564]                       inherits <- base::inherits
[17:02:21.564]                       invokeRestart <- base::invokeRestart
[17:02:21.564]                       is.null <- base::is.null
[17:02:21.564]                       muffled <- FALSE
[17:02:21.564]                       if (inherits(cond, "message")) {
[17:02:21.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.564]                         if (muffled) 
[17:02:21.564]                           invokeRestart("muffleMessage")
[17:02:21.564]                       }
[17:02:21.564]                       else if (inherits(cond, "warning")) {
[17:02:21.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.564]                         if (muffled) 
[17:02:21.564]                           invokeRestart("muffleWarning")
[17:02:21.564]                       }
[17:02:21.564]                       else if (inherits(cond, "condition")) {
[17:02:21.564]                         if (!is.null(pattern)) {
[17:02:21.564]                           computeRestarts <- base::computeRestarts
[17:02:21.564]                           grepl <- base::grepl
[17:02:21.564]                           restarts <- computeRestarts(cond)
[17:02:21.564]                           for (restart in restarts) {
[17:02:21.564]                             name <- restart$name
[17:02:21.564]                             if (is.null(name)) 
[17:02:21.564]                               next
[17:02:21.564]                             if (!grepl(pattern, name)) 
[17:02:21.564]                               next
[17:02:21.564]                             invokeRestart(restart)
[17:02:21.564]                             muffled <- TRUE
[17:02:21.564]                             break
[17:02:21.564]                           }
[17:02:21.564]                         }
[17:02:21.564]                       }
[17:02:21.564]                       invisible(muffled)
[17:02:21.564]                     }
[17:02:21.564]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.564]                   }
[17:02:21.564]                 }
[17:02:21.564]                 else {
[17:02:21.564]                   if (TRUE) {
[17:02:21.564]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.564]                     {
[17:02:21.564]                       inherits <- base::inherits
[17:02:21.564]                       invokeRestart <- base::invokeRestart
[17:02:21.564]                       is.null <- base::is.null
[17:02:21.564]                       muffled <- FALSE
[17:02:21.564]                       if (inherits(cond, "message")) {
[17:02:21.564]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.564]                         if (muffled) 
[17:02:21.564]                           invokeRestart("muffleMessage")
[17:02:21.564]                       }
[17:02:21.564]                       else if (inherits(cond, "warning")) {
[17:02:21.564]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.564]                         if (muffled) 
[17:02:21.564]                           invokeRestart("muffleWarning")
[17:02:21.564]                       }
[17:02:21.564]                       else if (inherits(cond, "condition")) {
[17:02:21.564]                         if (!is.null(pattern)) {
[17:02:21.564]                           computeRestarts <- base::computeRestarts
[17:02:21.564]                           grepl <- base::grepl
[17:02:21.564]                           restarts <- computeRestarts(cond)
[17:02:21.564]                           for (restart in restarts) {
[17:02:21.564]                             name <- restart$name
[17:02:21.564]                             if (is.null(name)) 
[17:02:21.564]                               next
[17:02:21.564]                             if (!grepl(pattern, name)) 
[17:02:21.564]                               next
[17:02:21.564]                             invokeRestart(restart)
[17:02:21.564]                             muffled <- TRUE
[17:02:21.564]                             break
[17:02:21.564]                           }
[17:02:21.564]                         }
[17:02:21.564]                       }
[17:02:21.564]                       invisible(muffled)
[17:02:21.564]                     }
[17:02:21.564]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.564]                   }
[17:02:21.564]                 }
[17:02:21.564]             }
[17:02:21.564]         }))
[17:02:21.564]     }, error = function(ex) {
[17:02:21.564]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.564]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.564]                 ...future.rng), started = ...future.startTime, 
[17:02:21.564]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.564]             version = "1.8"), class = "FutureResult")
[17:02:21.564]     }, finally = {
[17:02:21.564]         if (!identical(...future.workdir, getwd())) 
[17:02:21.564]             setwd(...future.workdir)
[17:02:21.564]         {
[17:02:21.564]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.564]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.564]             }
[17:02:21.564]             base::options(...future.oldOptions)
[17:02:21.564]             if (.Platform$OS.type == "windows") {
[17:02:21.564]                 old_names <- names(...future.oldEnvVars)
[17:02:21.564]                 envs <- base::Sys.getenv()
[17:02:21.564]                 names <- names(envs)
[17:02:21.564]                 common <- intersect(names, old_names)
[17:02:21.564]                 added <- setdiff(names, old_names)
[17:02:21.564]                 removed <- setdiff(old_names, names)
[17:02:21.564]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.564]                   envs[common]]
[17:02:21.564]                 NAMES <- toupper(changed)
[17:02:21.564]                 args <- list()
[17:02:21.564]                 for (kk in seq_along(NAMES)) {
[17:02:21.564]                   name <- changed[[kk]]
[17:02:21.564]                   NAME <- NAMES[[kk]]
[17:02:21.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.564]                     next
[17:02:21.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.564]                 }
[17:02:21.564]                 NAMES <- toupper(added)
[17:02:21.564]                 for (kk in seq_along(NAMES)) {
[17:02:21.564]                   name <- added[[kk]]
[17:02:21.564]                   NAME <- NAMES[[kk]]
[17:02:21.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.564]                     next
[17:02:21.564]                   args[[name]] <- ""
[17:02:21.564]                 }
[17:02:21.564]                 NAMES <- toupper(removed)
[17:02:21.564]                 for (kk in seq_along(NAMES)) {
[17:02:21.564]                   name <- removed[[kk]]
[17:02:21.564]                   NAME <- NAMES[[kk]]
[17:02:21.564]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.564]                     next
[17:02:21.564]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.564]                 }
[17:02:21.564]                 if (length(args) > 0) 
[17:02:21.564]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.564]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.564]             }
[17:02:21.564]             else {
[17:02:21.564]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.564]             }
[17:02:21.564]             {
[17:02:21.564]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.564]                   0L) {
[17:02:21.564]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.564]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.564]                   base::options(opts)
[17:02:21.564]                 }
[17:02:21.564]                 {
[17:02:21.564]                   {
[17:02:21.564]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.564]                     NULL
[17:02:21.564]                   }
[17:02:21.564]                   options(future.plan = NULL)
[17:02:21.564]                   if (is.na(NA_character_)) 
[17:02:21.564]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.564]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.564]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.564]                     .init = FALSE)
[17:02:21.564]                 }
[17:02:21.564]             }
[17:02:21.564]         }
[17:02:21.564]     })
[17:02:21.564]     if (TRUE) {
[17:02:21.564]         base::sink(type = "output", split = FALSE)
[17:02:21.564]         if (TRUE) {
[17:02:21.564]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.564]         }
[17:02:21.564]         else {
[17:02:21.564]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.564]         }
[17:02:21.564]         base::close(...future.stdout)
[17:02:21.564]         ...future.stdout <- NULL
[17:02:21.564]     }
[17:02:21.564]     ...future.result$conditions <- ...future.conditions
[17:02:21.564]     ...future.result$finished <- base::Sys.time()
[17:02:21.564]     ...future.result
[17:02:21.564] }
[17:02:21.566] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:21.566] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:02:21.567] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:02:21.567] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:21.567] MultisessionFuture started
[17:02:21.568] - Launch lazy future ... done
[17:02:21.568] run() for ‘MultisessionFuture’ ... done
[17:02:21.568] getGlobalsAndPackages() ...
[17:02:21.568] Searching for globals...
[17:02:21.570] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:21.571] Searching for globals ... DONE
[17:02:21.571] Resolving globals: FALSE
[17:02:21.571] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:21.571] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:21.572] - globals: [1] ‘ii’
[17:02:21.572] 
[17:02:21.572] getGlobalsAndPackages() ... DONE
[17:02:21.572] run() for ‘Future’ ...
[17:02:21.572] - state: ‘created’
[17:02:21.572] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.586] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.587] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.587]   - Field: ‘node’
[17:02:21.587]   - Field: ‘label’
[17:02:21.587]   - Field: ‘local’
[17:02:21.587]   - Field: ‘owner’
[17:02:21.587]   - Field: ‘envir’
[17:02:21.587]   - Field: ‘workers’
[17:02:21.587]   - Field: ‘packages’
[17:02:21.587]   - Field: ‘gc’
[17:02:21.588]   - Field: ‘conditions’
[17:02:21.588]   - Field: ‘persistent’
[17:02:21.588]   - Field: ‘expr’
[17:02:21.588]   - Field: ‘uuid’
[17:02:21.588]   - Field: ‘seed’
[17:02:21.588]   - Field: ‘version’
[17:02:21.588]   - Field: ‘result’
[17:02:21.588]   - Field: ‘asynchronous’
[17:02:21.588]   - Field: ‘calls’
[17:02:21.588]   - Field: ‘globals’
[17:02:21.588]   - Field: ‘stdout’
[17:02:21.589]   - Field: ‘earlySignal’
[17:02:21.589]   - Field: ‘lazy’
[17:02:21.589]   - Field: ‘state’
[17:02:21.589] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.589] - Launch lazy future ...
[17:02:21.589] Packages needed by the future expression (n = 0): <none>
[17:02:21.589] Packages needed by future strategies (n = 0): <none>
[17:02:21.590] {
[17:02:21.590]     {
[17:02:21.590]         {
[17:02:21.590]             ...future.startTime <- base::Sys.time()
[17:02:21.590]             {
[17:02:21.590]                 {
[17:02:21.590]                   {
[17:02:21.590]                     {
[17:02:21.590]                       base::local({
[17:02:21.590]                         has_future <- base::requireNamespace("future", 
[17:02:21.590]                           quietly = TRUE)
[17:02:21.590]                         if (has_future) {
[17:02:21.590]                           ns <- base::getNamespace("future")
[17:02:21.590]                           version <- ns[[".package"]][["version"]]
[17:02:21.590]                           if (is.null(version)) 
[17:02:21.590]                             version <- utils::packageVersion("future")
[17:02:21.590]                         }
[17:02:21.590]                         else {
[17:02:21.590]                           version <- NULL
[17:02:21.590]                         }
[17:02:21.590]                         if (!has_future || version < "1.8.0") {
[17:02:21.590]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.590]                             "", base::R.version$version.string), 
[17:02:21.590]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.590]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.590]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.590]                               "release", "version")], collapse = " "), 
[17:02:21.590]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.590]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.590]                             info)
[17:02:21.590]                           info <- base::paste(info, collapse = "; ")
[17:02:21.590]                           if (!has_future) {
[17:02:21.590]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.590]                               info)
[17:02:21.590]                           }
[17:02:21.590]                           else {
[17:02:21.590]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.590]                               info, version)
[17:02:21.590]                           }
[17:02:21.590]                           base::stop(msg)
[17:02:21.590]                         }
[17:02:21.590]                       })
[17:02:21.590]                     }
[17:02:21.590]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.590]                     base::options(mc.cores = 1L)
[17:02:21.590]                   }
[17:02:21.590]                   ...future.strategy.old <- future::plan("list")
[17:02:21.590]                   options(future.plan = NULL)
[17:02:21.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.590]                 }
[17:02:21.590]                 ...future.workdir <- getwd()
[17:02:21.590]             }
[17:02:21.590]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.590]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.590]         }
[17:02:21.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.590]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.590]             base::names(...future.oldOptions))
[17:02:21.590]     }
[17:02:21.590]     if (FALSE) {
[17:02:21.590]     }
[17:02:21.590]     else {
[17:02:21.590]         if (TRUE) {
[17:02:21.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.590]                 open = "w")
[17:02:21.590]         }
[17:02:21.590]         else {
[17:02:21.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.590]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.590]         }
[17:02:21.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.590]             base::sink(type = "output", split = FALSE)
[17:02:21.590]             base::close(...future.stdout)
[17:02:21.590]         }, add = TRUE)
[17:02:21.590]     }
[17:02:21.590]     ...future.frame <- base::sys.nframe()
[17:02:21.590]     ...future.conditions <- base::list()
[17:02:21.590]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.590]     if (FALSE) {
[17:02:21.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.590]     }
[17:02:21.590]     ...future.result <- base::tryCatch({
[17:02:21.590]         base::withCallingHandlers({
[17:02:21.590]             ...future.value <- base::withVisible(base::local({
[17:02:21.590]                 ...future.makeSendCondition <- base::local({
[17:02:21.590]                   sendCondition <- NULL
[17:02:21.590]                   function(frame = 1L) {
[17:02:21.590]                     if (is.function(sendCondition)) 
[17:02:21.590]                       return(sendCondition)
[17:02:21.590]                     ns <- getNamespace("parallel")
[17:02:21.590]                     if (exists("sendData", mode = "function", 
[17:02:21.590]                       envir = ns)) {
[17:02:21.590]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.590]                         envir = ns)
[17:02:21.590]                       envir <- sys.frame(frame)
[17:02:21.590]                       master <- NULL
[17:02:21.590]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.590]                         !identical(envir, emptyenv())) {
[17:02:21.590]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.590]                           inherits = FALSE)) {
[17:02:21.590]                           master <- get("master", mode = "list", 
[17:02:21.590]                             envir = envir, inherits = FALSE)
[17:02:21.590]                           if (inherits(master, c("SOCKnode", 
[17:02:21.590]                             "SOCK0node"))) {
[17:02:21.590]                             sendCondition <<- function(cond) {
[17:02:21.590]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.590]                                 success = TRUE)
[17:02:21.590]                               parallel_sendData(master, data)
[17:02:21.590]                             }
[17:02:21.590]                             return(sendCondition)
[17:02:21.590]                           }
[17:02:21.590]                         }
[17:02:21.590]                         frame <- frame + 1L
[17:02:21.590]                         envir <- sys.frame(frame)
[17:02:21.590]                       }
[17:02:21.590]                     }
[17:02:21.590]                     sendCondition <<- function(cond) NULL
[17:02:21.590]                   }
[17:02:21.590]                 })
[17:02:21.590]                 withCallingHandlers({
[17:02:21.590]                   {
[17:02:21.590]                     if (ii%%2 == 0) 
[17:02:21.590]                       stop("Woops!")
[17:02:21.590]                     ii
[17:02:21.590]                   }
[17:02:21.590]                 }, immediateCondition = function(cond) {
[17:02:21.590]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.590]                   sendCondition(cond)
[17:02:21.590]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.590]                   {
[17:02:21.590]                     inherits <- base::inherits
[17:02:21.590]                     invokeRestart <- base::invokeRestart
[17:02:21.590]                     is.null <- base::is.null
[17:02:21.590]                     muffled <- FALSE
[17:02:21.590]                     if (inherits(cond, "message")) {
[17:02:21.590]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.590]                       if (muffled) 
[17:02:21.590]                         invokeRestart("muffleMessage")
[17:02:21.590]                     }
[17:02:21.590]                     else if (inherits(cond, "warning")) {
[17:02:21.590]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.590]                       if (muffled) 
[17:02:21.590]                         invokeRestart("muffleWarning")
[17:02:21.590]                     }
[17:02:21.590]                     else if (inherits(cond, "condition")) {
[17:02:21.590]                       if (!is.null(pattern)) {
[17:02:21.590]                         computeRestarts <- base::computeRestarts
[17:02:21.590]                         grepl <- base::grepl
[17:02:21.590]                         restarts <- computeRestarts(cond)
[17:02:21.590]                         for (restart in restarts) {
[17:02:21.590]                           name <- restart$name
[17:02:21.590]                           if (is.null(name)) 
[17:02:21.590]                             next
[17:02:21.590]                           if (!grepl(pattern, name)) 
[17:02:21.590]                             next
[17:02:21.590]                           invokeRestart(restart)
[17:02:21.590]                           muffled <- TRUE
[17:02:21.590]                           break
[17:02:21.590]                         }
[17:02:21.590]                       }
[17:02:21.590]                     }
[17:02:21.590]                     invisible(muffled)
[17:02:21.590]                   }
[17:02:21.590]                   muffleCondition(cond)
[17:02:21.590]                 })
[17:02:21.590]             }))
[17:02:21.590]             future::FutureResult(value = ...future.value$value, 
[17:02:21.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.590]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.590]                     ...future.globalenv.names))
[17:02:21.590]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.590]         }, condition = base::local({
[17:02:21.590]             c <- base::c
[17:02:21.590]             inherits <- base::inherits
[17:02:21.590]             invokeRestart <- base::invokeRestart
[17:02:21.590]             length <- base::length
[17:02:21.590]             list <- base::list
[17:02:21.590]             seq.int <- base::seq.int
[17:02:21.590]             signalCondition <- base::signalCondition
[17:02:21.590]             sys.calls <- base::sys.calls
[17:02:21.590]             `[[` <- base::`[[`
[17:02:21.590]             `+` <- base::`+`
[17:02:21.590]             `<<-` <- base::`<<-`
[17:02:21.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.590]                   3L)]
[17:02:21.590]             }
[17:02:21.590]             function(cond) {
[17:02:21.590]                 is_error <- inherits(cond, "error")
[17:02:21.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.590]                   NULL)
[17:02:21.590]                 if (is_error) {
[17:02:21.590]                   sessionInformation <- function() {
[17:02:21.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.590]                       search = base::search(), system = base::Sys.info())
[17:02:21.590]                   }
[17:02:21.590]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.590]                     cond$call), session = sessionInformation(), 
[17:02:21.590]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.590]                   signalCondition(cond)
[17:02:21.590]                 }
[17:02:21.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.590]                 "immediateCondition"))) {
[17:02:21.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.590]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.590]                   if (TRUE && !signal) {
[17:02:21.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.590]                     {
[17:02:21.590]                       inherits <- base::inherits
[17:02:21.590]                       invokeRestart <- base::invokeRestart
[17:02:21.590]                       is.null <- base::is.null
[17:02:21.590]                       muffled <- FALSE
[17:02:21.590]                       if (inherits(cond, "message")) {
[17:02:21.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.590]                         if (muffled) 
[17:02:21.590]                           invokeRestart("muffleMessage")
[17:02:21.590]                       }
[17:02:21.590]                       else if (inherits(cond, "warning")) {
[17:02:21.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.590]                         if (muffled) 
[17:02:21.590]                           invokeRestart("muffleWarning")
[17:02:21.590]                       }
[17:02:21.590]                       else if (inherits(cond, "condition")) {
[17:02:21.590]                         if (!is.null(pattern)) {
[17:02:21.590]                           computeRestarts <- base::computeRestarts
[17:02:21.590]                           grepl <- base::grepl
[17:02:21.590]                           restarts <- computeRestarts(cond)
[17:02:21.590]                           for (restart in restarts) {
[17:02:21.590]                             name <- restart$name
[17:02:21.590]                             if (is.null(name)) 
[17:02:21.590]                               next
[17:02:21.590]                             if (!grepl(pattern, name)) 
[17:02:21.590]                               next
[17:02:21.590]                             invokeRestart(restart)
[17:02:21.590]                             muffled <- TRUE
[17:02:21.590]                             break
[17:02:21.590]                           }
[17:02:21.590]                         }
[17:02:21.590]                       }
[17:02:21.590]                       invisible(muffled)
[17:02:21.590]                     }
[17:02:21.590]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.590]                   }
[17:02:21.590]                 }
[17:02:21.590]                 else {
[17:02:21.590]                   if (TRUE) {
[17:02:21.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.590]                     {
[17:02:21.590]                       inherits <- base::inherits
[17:02:21.590]                       invokeRestart <- base::invokeRestart
[17:02:21.590]                       is.null <- base::is.null
[17:02:21.590]                       muffled <- FALSE
[17:02:21.590]                       if (inherits(cond, "message")) {
[17:02:21.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.590]                         if (muffled) 
[17:02:21.590]                           invokeRestart("muffleMessage")
[17:02:21.590]                       }
[17:02:21.590]                       else if (inherits(cond, "warning")) {
[17:02:21.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.590]                         if (muffled) 
[17:02:21.590]                           invokeRestart("muffleWarning")
[17:02:21.590]                       }
[17:02:21.590]                       else if (inherits(cond, "condition")) {
[17:02:21.590]                         if (!is.null(pattern)) {
[17:02:21.590]                           computeRestarts <- base::computeRestarts
[17:02:21.590]                           grepl <- base::grepl
[17:02:21.590]                           restarts <- computeRestarts(cond)
[17:02:21.590]                           for (restart in restarts) {
[17:02:21.590]                             name <- restart$name
[17:02:21.590]                             if (is.null(name)) 
[17:02:21.590]                               next
[17:02:21.590]                             if (!grepl(pattern, name)) 
[17:02:21.590]                               next
[17:02:21.590]                             invokeRestart(restart)
[17:02:21.590]                             muffled <- TRUE
[17:02:21.590]                             break
[17:02:21.590]                           }
[17:02:21.590]                         }
[17:02:21.590]                       }
[17:02:21.590]                       invisible(muffled)
[17:02:21.590]                     }
[17:02:21.590]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.590]                   }
[17:02:21.590]                 }
[17:02:21.590]             }
[17:02:21.590]         }))
[17:02:21.590]     }, error = function(ex) {
[17:02:21.590]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.590]                 ...future.rng), started = ...future.startTime, 
[17:02:21.590]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.590]             version = "1.8"), class = "FutureResult")
[17:02:21.590]     }, finally = {
[17:02:21.590]         if (!identical(...future.workdir, getwd())) 
[17:02:21.590]             setwd(...future.workdir)
[17:02:21.590]         {
[17:02:21.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.590]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.590]             }
[17:02:21.590]             base::options(...future.oldOptions)
[17:02:21.590]             if (.Platform$OS.type == "windows") {
[17:02:21.590]                 old_names <- names(...future.oldEnvVars)
[17:02:21.590]                 envs <- base::Sys.getenv()
[17:02:21.590]                 names <- names(envs)
[17:02:21.590]                 common <- intersect(names, old_names)
[17:02:21.590]                 added <- setdiff(names, old_names)
[17:02:21.590]                 removed <- setdiff(old_names, names)
[17:02:21.590]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.590]                   envs[common]]
[17:02:21.590]                 NAMES <- toupper(changed)
[17:02:21.590]                 args <- list()
[17:02:21.590]                 for (kk in seq_along(NAMES)) {
[17:02:21.590]                   name <- changed[[kk]]
[17:02:21.590]                   NAME <- NAMES[[kk]]
[17:02:21.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.590]                     next
[17:02:21.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.590]                 }
[17:02:21.590]                 NAMES <- toupper(added)
[17:02:21.590]                 for (kk in seq_along(NAMES)) {
[17:02:21.590]                   name <- added[[kk]]
[17:02:21.590]                   NAME <- NAMES[[kk]]
[17:02:21.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.590]                     next
[17:02:21.590]                   args[[name]] <- ""
[17:02:21.590]                 }
[17:02:21.590]                 NAMES <- toupper(removed)
[17:02:21.590]                 for (kk in seq_along(NAMES)) {
[17:02:21.590]                   name <- removed[[kk]]
[17:02:21.590]                   NAME <- NAMES[[kk]]
[17:02:21.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.590]                     next
[17:02:21.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.590]                 }
[17:02:21.590]                 if (length(args) > 0) 
[17:02:21.590]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.590]             }
[17:02:21.590]             else {
[17:02:21.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.590]             }
[17:02:21.590]             {
[17:02:21.590]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.590]                   0L) {
[17:02:21.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.590]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.590]                   base::options(opts)
[17:02:21.590]                 }
[17:02:21.590]                 {
[17:02:21.590]                   {
[17:02:21.590]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.590]                     NULL
[17:02:21.590]                   }
[17:02:21.590]                   options(future.plan = NULL)
[17:02:21.590]                   if (is.na(NA_character_)) 
[17:02:21.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.590]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.590]                     .init = FALSE)
[17:02:21.590]                 }
[17:02:21.590]             }
[17:02:21.590]         }
[17:02:21.590]     })
[17:02:21.590]     if (TRUE) {
[17:02:21.590]         base::sink(type = "output", split = FALSE)
[17:02:21.590]         if (TRUE) {
[17:02:21.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.590]         }
[17:02:21.590]         else {
[17:02:21.590]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.590]         }
[17:02:21.590]         base::close(...future.stdout)
[17:02:21.590]         ...future.stdout <- NULL
[17:02:21.590]     }
[17:02:21.590]     ...future.result$conditions <- ...future.conditions
[17:02:21.590]     ...future.result$finished <- base::Sys.time()
[17:02:21.590]     ...future.result
[17:02:21.590] }
[17:02:21.643] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[17:02:21.643] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:02:21.643] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:02:21.644] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[17:02:21.644] MultisessionFuture started
[17:02:21.644] - Launch lazy future ... done
[17:02:21.644] run() for ‘MultisessionFuture’ ... done
[17:02:21.645] getGlobalsAndPackages() ...
[17:02:21.645] Searching for globals...
[17:02:21.646] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[17:02:21.647] Searching for globals ... DONE
[17:02:21.647] Resolving globals: FALSE
[17:02:21.647] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:21.647] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:02:21.648] - globals: [1] ‘ii’
[17:02:21.648] 
[17:02:21.648] getGlobalsAndPackages() ... DONE
[17:02:21.648] run() for ‘Future’ ...
[17:02:21.648] - state: ‘created’
[17:02:21.648] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.662] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.663]   - Field: ‘node’
[17:02:21.663]   - Field: ‘label’
[17:02:21.663]   - Field: ‘local’
[17:02:21.663]   - Field: ‘owner’
[17:02:21.663]   - Field: ‘envir’
[17:02:21.663]   - Field: ‘workers’
[17:02:21.663]   - Field: ‘packages’
[17:02:21.664]   - Field: ‘gc’
[17:02:21.664]   - Field: ‘conditions’
[17:02:21.664]   - Field: ‘persistent’
[17:02:21.664]   - Field: ‘expr’
[17:02:21.664]   - Field: ‘uuid’
[17:02:21.664]   - Field: ‘seed’
[17:02:21.664]   - Field: ‘version’
[17:02:21.664]   - Field: ‘result’
[17:02:21.664]   - Field: ‘asynchronous’
[17:02:21.664]   - Field: ‘calls’
[17:02:21.664]   - Field: ‘globals’
[17:02:21.665]   - Field: ‘stdout’
[17:02:21.665]   - Field: ‘earlySignal’
[17:02:21.665]   - Field: ‘lazy’
[17:02:21.665]   - Field: ‘state’
[17:02:21.665] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.665] - Launch lazy future ...
[17:02:21.665] Packages needed by the future expression (n = 0): <none>
[17:02:21.665] Packages needed by future strategies (n = 0): <none>
[17:02:21.666] {
[17:02:21.666]     {
[17:02:21.666]         {
[17:02:21.666]             ...future.startTime <- base::Sys.time()
[17:02:21.666]             {
[17:02:21.666]                 {
[17:02:21.666]                   {
[17:02:21.666]                     {
[17:02:21.666]                       base::local({
[17:02:21.666]                         has_future <- base::requireNamespace("future", 
[17:02:21.666]                           quietly = TRUE)
[17:02:21.666]                         if (has_future) {
[17:02:21.666]                           ns <- base::getNamespace("future")
[17:02:21.666]                           version <- ns[[".package"]][["version"]]
[17:02:21.666]                           if (is.null(version)) 
[17:02:21.666]                             version <- utils::packageVersion("future")
[17:02:21.666]                         }
[17:02:21.666]                         else {
[17:02:21.666]                           version <- NULL
[17:02:21.666]                         }
[17:02:21.666]                         if (!has_future || version < "1.8.0") {
[17:02:21.666]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.666]                             "", base::R.version$version.string), 
[17:02:21.666]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.666]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.666]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.666]                               "release", "version")], collapse = " "), 
[17:02:21.666]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.666]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.666]                             info)
[17:02:21.666]                           info <- base::paste(info, collapse = "; ")
[17:02:21.666]                           if (!has_future) {
[17:02:21.666]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.666]                               info)
[17:02:21.666]                           }
[17:02:21.666]                           else {
[17:02:21.666]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.666]                               info, version)
[17:02:21.666]                           }
[17:02:21.666]                           base::stop(msg)
[17:02:21.666]                         }
[17:02:21.666]                       })
[17:02:21.666]                     }
[17:02:21.666]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.666]                     base::options(mc.cores = 1L)
[17:02:21.666]                   }
[17:02:21.666]                   ...future.strategy.old <- future::plan("list")
[17:02:21.666]                   options(future.plan = NULL)
[17:02:21.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.666]                 }
[17:02:21.666]                 ...future.workdir <- getwd()
[17:02:21.666]             }
[17:02:21.666]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.666]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.666]         }
[17:02:21.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.666]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.666]             base::names(...future.oldOptions))
[17:02:21.666]     }
[17:02:21.666]     if (FALSE) {
[17:02:21.666]     }
[17:02:21.666]     else {
[17:02:21.666]         if (TRUE) {
[17:02:21.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.666]                 open = "w")
[17:02:21.666]         }
[17:02:21.666]         else {
[17:02:21.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.666]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.666]         }
[17:02:21.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.666]             base::sink(type = "output", split = FALSE)
[17:02:21.666]             base::close(...future.stdout)
[17:02:21.666]         }, add = TRUE)
[17:02:21.666]     }
[17:02:21.666]     ...future.frame <- base::sys.nframe()
[17:02:21.666]     ...future.conditions <- base::list()
[17:02:21.666]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.666]     if (FALSE) {
[17:02:21.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.666]     }
[17:02:21.666]     ...future.result <- base::tryCatch({
[17:02:21.666]         base::withCallingHandlers({
[17:02:21.666]             ...future.value <- base::withVisible(base::local({
[17:02:21.666]                 ...future.makeSendCondition <- base::local({
[17:02:21.666]                   sendCondition <- NULL
[17:02:21.666]                   function(frame = 1L) {
[17:02:21.666]                     if (is.function(sendCondition)) 
[17:02:21.666]                       return(sendCondition)
[17:02:21.666]                     ns <- getNamespace("parallel")
[17:02:21.666]                     if (exists("sendData", mode = "function", 
[17:02:21.666]                       envir = ns)) {
[17:02:21.666]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.666]                         envir = ns)
[17:02:21.666]                       envir <- sys.frame(frame)
[17:02:21.666]                       master <- NULL
[17:02:21.666]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.666]                         !identical(envir, emptyenv())) {
[17:02:21.666]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.666]                           inherits = FALSE)) {
[17:02:21.666]                           master <- get("master", mode = "list", 
[17:02:21.666]                             envir = envir, inherits = FALSE)
[17:02:21.666]                           if (inherits(master, c("SOCKnode", 
[17:02:21.666]                             "SOCK0node"))) {
[17:02:21.666]                             sendCondition <<- function(cond) {
[17:02:21.666]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.666]                                 success = TRUE)
[17:02:21.666]                               parallel_sendData(master, data)
[17:02:21.666]                             }
[17:02:21.666]                             return(sendCondition)
[17:02:21.666]                           }
[17:02:21.666]                         }
[17:02:21.666]                         frame <- frame + 1L
[17:02:21.666]                         envir <- sys.frame(frame)
[17:02:21.666]                       }
[17:02:21.666]                     }
[17:02:21.666]                     sendCondition <<- function(cond) NULL
[17:02:21.666]                   }
[17:02:21.666]                 })
[17:02:21.666]                 withCallingHandlers({
[17:02:21.666]                   {
[17:02:21.666]                     if (ii%%2 == 0) 
[17:02:21.666]                       stop("Woops!")
[17:02:21.666]                     ii
[17:02:21.666]                   }
[17:02:21.666]                 }, immediateCondition = function(cond) {
[17:02:21.666]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.666]                   sendCondition(cond)
[17:02:21.666]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.666]                   {
[17:02:21.666]                     inherits <- base::inherits
[17:02:21.666]                     invokeRestart <- base::invokeRestart
[17:02:21.666]                     is.null <- base::is.null
[17:02:21.666]                     muffled <- FALSE
[17:02:21.666]                     if (inherits(cond, "message")) {
[17:02:21.666]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.666]                       if (muffled) 
[17:02:21.666]                         invokeRestart("muffleMessage")
[17:02:21.666]                     }
[17:02:21.666]                     else if (inherits(cond, "warning")) {
[17:02:21.666]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.666]                       if (muffled) 
[17:02:21.666]                         invokeRestart("muffleWarning")
[17:02:21.666]                     }
[17:02:21.666]                     else if (inherits(cond, "condition")) {
[17:02:21.666]                       if (!is.null(pattern)) {
[17:02:21.666]                         computeRestarts <- base::computeRestarts
[17:02:21.666]                         grepl <- base::grepl
[17:02:21.666]                         restarts <- computeRestarts(cond)
[17:02:21.666]                         for (restart in restarts) {
[17:02:21.666]                           name <- restart$name
[17:02:21.666]                           if (is.null(name)) 
[17:02:21.666]                             next
[17:02:21.666]                           if (!grepl(pattern, name)) 
[17:02:21.666]                             next
[17:02:21.666]                           invokeRestart(restart)
[17:02:21.666]                           muffled <- TRUE
[17:02:21.666]                           break
[17:02:21.666]                         }
[17:02:21.666]                       }
[17:02:21.666]                     }
[17:02:21.666]                     invisible(muffled)
[17:02:21.666]                   }
[17:02:21.666]                   muffleCondition(cond)
[17:02:21.666]                 })
[17:02:21.666]             }))
[17:02:21.666]             future::FutureResult(value = ...future.value$value, 
[17:02:21.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.666]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.666]                     ...future.globalenv.names))
[17:02:21.666]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.666]         }, condition = base::local({
[17:02:21.666]             c <- base::c
[17:02:21.666]             inherits <- base::inherits
[17:02:21.666]             invokeRestart <- base::invokeRestart
[17:02:21.666]             length <- base::length
[17:02:21.666]             list <- base::list
[17:02:21.666]             seq.int <- base::seq.int
[17:02:21.666]             signalCondition <- base::signalCondition
[17:02:21.666]             sys.calls <- base::sys.calls
[17:02:21.666]             `[[` <- base::`[[`
[17:02:21.666]             `+` <- base::`+`
[17:02:21.666]             `<<-` <- base::`<<-`
[17:02:21.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.666]                   3L)]
[17:02:21.666]             }
[17:02:21.666]             function(cond) {
[17:02:21.666]                 is_error <- inherits(cond, "error")
[17:02:21.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.666]                   NULL)
[17:02:21.666]                 if (is_error) {
[17:02:21.666]                   sessionInformation <- function() {
[17:02:21.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.666]                       search = base::search(), system = base::Sys.info())
[17:02:21.666]                   }
[17:02:21.666]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.666]                     cond$call), session = sessionInformation(), 
[17:02:21.666]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.666]                   signalCondition(cond)
[17:02:21.666]                 }
[17:02:21.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.666]                 "immediateCondition"))) {
[17:02:21.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.666]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.666]                   if (TRUE && !signal) {
[17:02:21.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.666]                     {
[17:02:21.666]                       inherits <- base::inherits
[17:02:21.666]                       invokeRestart <- base::invokeRestart
[17:02:21.666]                       is.null <- base::is.null
[17:02:21.666]                       muffled <- FALSE
[17:02:21.666]                       if (inherits(cond, "message")) {
[17:02:21.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.666]                         if (muffled) 
[17:02:21.666]                           invokeRestart("muffleMessage")
[17:02:21.666]                       }
[17:02:21.666]                       else if (inherits(cond, "warning")) {
[17:02:21.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.666]                         if (muffled) 
[17:02:21.666]                           invokeRestart("muffleWarning")
[17:02:21.666]                       }
[17:02:21.666]                       else if (inherits(cond, "condition")) {
[17:02:21.666]                         if (!is.null(pattern)) {
[17:02:21.666]                           computeRestarts <- base::computeRestarts
[17:02:21.666]                           grepl <- base::grepl
[17:02:21.666]                           restarts <- computeRestarts(cond)
[17:02:21.666]                           for (restart in restarts) {
[17:02:21.666]                             name <- restart$name
[17:02:21.666]                             if (is.null(name)) 
[17:02:21.666]                               next
[17:02:21.666]                             if (!grepl(pattern, name)) 
[17:02:21.666]                               next
[17:02:21.666]                             invokeRestart(restart)
[17:02:21.666]                             muffled <- TRUE
[17:02:21.666]                             break
[17:02:21.666]                           }
[17:02:21.666]                         }
[17:02:21.666]                       }
[17:02:21.666]                       invisible(muffled)
[17:02:21.666]                     }
[17:02:21.666]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.666]                   }
[17:02:21.666]                 }
[17:02:21.666]                 else {
[17:02:21.666]                   if (TRUE) {
[17:02:21.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.666]                     {
[17:02:21.666]                       inherits <- base::inherits
[17:02:21.666]                       invokeRestart <- base::invokeRestart
[17:02:21.666]                       is.null <- base::is.null
[17:02:21.666]                       muffled <- FALSE
[17:02:21.666]                       if (inherits(cond, "message")) {
[17:02:21.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.666]                         if (muffled) 
[17:02:21.666]                           invokeRestart("muffleMessage")
[17:02:21.666]                       }
[17:02:21.666]                       else if (inherits(cond, "warning")) {
[17:02:21.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.666]                         if (muffled) 
[17:02:21.666]                           invokeRestart("muffleWarning")
[17:02:21.666]                       }
[17:02:21.666]                       else if (inherits(cond, "condition")) {
[17:02:21.666]                         if (!is.null(pattern)) {
[17:02:21.666]                           computeRestarts <- base::computeRestarts
[17:02:21.666]                           grepl <- base::grepl
[17:02:21.666]                           restarts <- computeRestarts(cond)
[17:02:21.666]                           for (restart in restarts) {
[17:02:21.666]                             name <- restart$name
[17:02:21.666]                             if (is.null(name)) 
[17:02:21.666]                               next
[17:02:21.666]                             if (!grepl(pattern, name)) 
[17:02:21.666]                               next
[17:02:21.666]                             invokeRestart(restart)
[17:02:21.666]                             muffled <- TRUE
[17:02:21.666]                             break
[17:02:21.666]                           }
[17:02:21.666]                         }
[17:02:21.666]                       }
[17:02:21.666]                       invisible(muffled)
[17:02:21.666]                     }
[17:02:21.666]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.666]                   }
[17:02:21.666]                 }
[17:02:21.666]             }
[17:02:21.666]         }))
[17:02:21.666]     }, error = function(ex) {
[17:02:21.666]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.666]                 ...future.rng), started = ...future.startTime, 
[17:02:21.666]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.666]             version = "1.8"), class = "FutureResult")
[17:02:21.666]     }, finally = {
[17:02:21.666]         if (!identical(...future.workdir, getwd())) 
[17:02:21.666]             setwd(...future.workdir)
[17:02:21.666]         {
[17:02:21.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.666]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.666]             }
[17:02:21.666]             base::options(...future.oldOptions)
[17:02:21.666]             if (.Platform$OS.type == "windows") {
[17:02:21.666]                 old_names <- names(...future.oldEnvVars)
[17:02:21.666]                 envs <- base::Sys.getenv()
[17:02:21.666]                 names <- names(envs)
[17:02:21.666]                 common <- intersect(names, old_names)
[17:02:21.666]                 added <- setdiff(names, old_names)
[17:02:21.666]                 removed <- setdiff(old_names, names)
[17:02:21.666]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.666]                   envs[common]]
[17:02:21.666]                 NAMES <- toupper(changed)
[17:02:21.666]                 args <- list()
[17:02:21.666]                 for (kk in seq_along(NAMES)) {
[17:02:21.666]                   name <- changed[[kk]]
[17:02:21.666]                   NAME <- NAMES[[kk]]
[17:02:21.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.666]                     next
[17:02:21.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.666]                 }
[17:02:21.666]                 NAMES <- toupper(added)
[17:02:21.666]                 for (kk in seq_along(NAMES)) {
[17:02:21.666]                   name <- added[[kk]]
[17:02:21.666]                   NAME <- NAMES[[kk]]
[17:02:21.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.666]                     next
[17:02:21.666]                   args[[name]] <- ""
[17:02:21.666]                 }
[17:02:21.666]                 NAMES <- toupper(removed)
[17:02:21.666]                 for (kk in seq_along(NAMES)) {
[17:02:21.666]                   name <- removed[[kk]]
[17:02:21.666]                   NAME <- NAMES[[kk]]
[17:02:21.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.666]                     next
[17:02:21.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.666]                 }
[17:02:21.666]                 if (length(args) > 0) 
[17:02:21.666]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.666]             }
[17:02:21.666]             else {
[17:02:21.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.666]             }
[17:02:21.666]             {
[17:02:21.666]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.666]                   0L) {
[17:02:21.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.666]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.666]                   base::options(opts)
[17:02:21.666]                 }
[17:02:21.666]                 {
[17:02:21.666]                   {
[17:02:21.666]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.666]                     NULL
[17:02:21.666]                   }
[17:02:21.666]                   options(future.plan = NULL)
[17:02:21.666]                   if (is.na(NA_character_)) 
[17:02:21.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.666]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.666]                     .init = FALSE)
[17:02:21.666]                 }
[17:02:21.666]             }
[17:02:21.666]         }
[17:02:21.666]     })
[17:02:21.666]     if (TRUE) {
[17:02:21.666]         base::sink(type = "output", split = FALSE)
[17:02:21.666]         if (TRUE) {
[17:02:21.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.666]         }
[17:02:21.666]         else {
[17:02:21.666]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.666]         }
[17:02:21.666]         base::close(...future.stdout)
[17:02:21.666]         ...future.stdout <- NULL
[17:02:21.666]     }
[17:02:21.666]     ...future.result$conditions <- ...future.conditions
[17:02:21.666]     ...future.result$finished <- base::Sys.time()
[17:02:21.666]     ...future.result
[17:02:21.666] }
[17:02:21.668] Poll #1 (0): usedNodes() = 2, workers = 2
[17:02:21.687] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.687] - Validating connection of MultisessionFuture
[17:02:21.687] - received message: FutureResult
[17:02:21.687] - Received FutureResult
[17:02:21.688] - Erased future from FutureRegistry
[17:02:21.688] result() for ClusterFuture ...
[17:02:21.688] - result already collected: FutureResult
[17:02:21.688] result() for ClusterFuture ... done
[17:02:21.688] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.688] result() for ClusterFuture ...
[17:02:21.688] - result already collected: FutureResult
[17:02:21.688] result() for ClusterFuture ... done
[17:02:21.688] result() for ClusterFuture ...
[17:02:21.688] - result already collected: FutureResult
[17:02:21.688] result() for ClusterFuture ... done
[17:02:21.689] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:21.689] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:02:21.690] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:02:21.690] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:21.690] MultisessionFuture started
[17:02:21.691] - Launch lazy future ... done
[17:02:21.691] run() for ‘MultisessionFuture’ ... done
[17:02:21.691] result() for ClusterFuture ...
[17:02:21.691] - result already collected: FutureResult
[17:02:21.691] result() for ClusterFuture ... done
[17:02:21.691] result() for ClusterFuture ...
[17:02:21.692] - result already collected: FutureResult
[17:02:21.692] result() for ClusterFuture ... done
[17:02:21.692] result() for ClusterFuture ...
[17:02:21.692] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.692] - Validating connection of MultisessionFuture
[17:02:21.693] - received message: FutureResult
[17:02:21.693] - Received FutureResult
[17:02:21.693] - Erased future from FutureRegistry
[17:02:21.693] result() for ClusterFuture ...
[17:02:21.693] - result already collected: FutureResult
[17:02:21.693] result() for ClusterFuture ... done
[17:02:21.693] signalConditions() ...
[17:02:21.694]  - include = ‘immediateCondition’
[17:02:21.694]  - exclude = 
[17:02:21.694]  - resignal = FALSE
[17:02:21.694]  - Number of conditions: 1
[17:02:21.694] signalConditions() ... done
[17:02:21.694] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.694] result() for ClusterFuture ... done
[17:02:21.694] result() for ClusterFuture ...
[17:02:21.694] - result already collected: FutureResult
[17:02:21.694] result() for ClusterFuture ... done
[17:02:21.694] signalConditions() ...
[17:02:21.694]  - include = ‘immediateCondition’
[17:02:21.695]  - exclude = 
[17:02:21.695]  - resignal = FALSE
[17:02:21.695]  - Number of conditions: 1
[17:02:21.695] signalConditions() ... done
[17:02:21.695] Future state: ‘finished’
[17:02:21.695] result() for ClusterFuture ...
[17:02:21.695] - result already collected: FutureResult
[17:02:21.695] result() for ClusterFuture ... done
[17:02:21.695] signalConditions() ...
[17:02:21.695]  - include = ‘condition’
[17:02:21.696]  - exclude = ‘immediateCondition’
[17:02:21.696]  - resignal = TRUE
[17:02:21.696]  - Number of conditions: 1
[17:02:21.696]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:21.696] signalConditions() ... done
[17:02:21.696] result() for ClusterFuture ...
[17:02:21.696] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.696] - Validating connection of MultisessionFuture
[17:02:21.697] - received message: FutureResult
[17:02:21.697] - Received FutureResult
[17:02:21.697] - Erased future from FutureRegistry
[17:02:21.697] result() for ClusterFuture ...
[17:02:21.697] - result already collected: FutureResult
[17:02:21.697] result() for ClusterFuture ... done
[17:02:21.697] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.697] result() for ClusterFuture ... done
[17:02:21.697] result() for ClusterFuture ...
[17:02:21.697] - result already collected: FutureResult
[17:02:21.697] result() for ClusterFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:02:21.698] result() for ClusterFuture ...
[17:02:21.698] - result already collected: FutureResult
[17:02:21.698] result() for ClusterFuture ... done
[17:02:21.698] result() for ClusterFuture ...
[17:02:21.698] - result already collected: FutureResult
[17:02:21.698] result() for ClusterFuture ... done
[17:02:21.698] signalConditions() ...
[17:02:21.698]  - include = ‘immediateCondition’
[17:02:21.698]  - exclude = 
[17:02:21.699]  - resignal = FALSE
[17:02:21.699]  - Number of conditions: 1
[17:02:21.699] signalConditions() ... done
[17:02:21.699] Future state: ‘finished’
[17:02:21.699] result() for ClusterFuture ...
[17:02:21.699] - result already collected: FutureResult
[17:02:21.699] result() for ClusterFuture ... done
[17:02:21.699] signalConditions() ...
[17:02:21.699]  - include = ‘condition’
[17:02:21.699]  - exclude = ‘immediateCondition’
[17:02:21.699]  - resignal = TRUE
[17:02:21.700]  - Number of conditions: 1
[17:02:21.700]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:21.700] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[17:02:21.700] result() for ClusterFuture ...
[17:02:21.700] - result already collected: FutureResult
[17:02:21.700] result() for ClusterFuture ... done
[17:02:21.700] result() for ClusterFuture ...
[17:02:21.700] - result already collected: FutureResult
[17:02:21.700] result() for ClusterFuture ... done
[17:02:21.701] signalConditions() ...
[17:02:21.701]  - include = ‘immediateCondition’
[17:02:21.701]  - exclude = 
[17:02:21.701]  - resignal = FALSE
[17:02:21.701]  - Number of conditions: 1
[17:02:21.701] signalConditions() ... done
[17:02:21.701] Future state: ‘finished’
[17:02:21.701] result() for ClusterFuture ...
[17:02:21.701] - result already collected: FutureResult
[17:02:21.701] result() for ClusterFuture ... done
[17:02:21.701] signalConditions() ...
[17:02:21.702]  - include = ‘condition’
[17:02:21.702]  - exclude = ‘immediateCondition’
[17:02:21.702]  - resignal = TRUE
[17:02:21.702]  - Number of conditions: 1
[17:02:21.702]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:21.702] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[17:02:21.702] getGlobalsAndPackages() ...
[17:02:21.702] Searching for globals...
[17:02:21.704] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[17:02:21.704] Searching for globals ... DONE
[17:02:21.704] Resolving globals: FALSE
[17:02:21.705] 
[17:02:21.705] 
[17:02:21.705] getGlobalsAndPackages() ... DONE
[17:02:21.705] run() for ‘Future’ ...
[17:02:21.705] - state: ‘created’
[17:02:21.705] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.719] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.719] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.719]   - Field: ‘node’
[17:02:21.720]   - Field: ‘label’
[17:02:21.720]   - Field: ‘local’
[17:02:21.720]   - Field: ‘owner’
[17:02:21.720]   - Field: ‘envir’
[17:02:21.720]   - Field: ‘workers’
[17:02:21.720]   - Field: ‘packages’
[17:02:21.720]   - Field: ‘gc’
[17:02:21.720]   - Field: ‘conditions’
[17:02:21.720]   - Field: ‘persistent’
[17:02:21.720]   - Field: ‘expr’
[17:02:21.720]   - Field: ‘uuid’
[17:02:21.721]   - Field: ‘seed’
[17:02:21.721]   - Field: ‘version’
[17:02:21.721]   - Field: ‘result’
[17:02:21.721]   - Field: ‘asynchronous’
[17:02:21.721]   - Field: ‘calls’
[17:02:21.721]   - Field: ‘globals’
[17:02:21.721]   - Field: ‘stdout’
[17:02:21.721]   - Field: ‘earlySignal’
[17:02:21.721]   - Field: ‘lazy’
[17:02:21.721]   - Field: ‘state’
[17:02:21.721] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.722] - Launch lazy future ...
[17:02:21.722] Packages needed by the future expression (n = 0): <none>
[17:02:21.722] Packages needed by future strategies (n = 0): <none>
[17:02:21.722] {
[17:02:21.722]     {
[17:02:21.722]         {
[17:02:21.722]             ...future.startTime <- base::Sys.time()
[17:02:21.722]             {
[17:02:21.722]                 {
[17:02:21.722]                   {
[17:02:21.722]                     {
[17:02:21.722]                       base::local({
[17:02:21.722]                         has_future <- base::requireNamespace("future", 
[17:02:21.722]                           quietly = TRUE)
[17:02:21.722]                         if (has_future) {
[17:02:21.722]                           ns <- base::getNamespace("future")
[17:02:21.722]                           version <- ns[[".package"]][["version"]]
[17:02:21.722]                           if (is.null(version)) 
[17:02:21.722]                             version <- utils::packageVersion("future")
[17:02:21.722]                         }
[17:02:21.722]                         else {
[17:02:21.722]                           version <- NULL
[17:02:21.722]                         }
[17:02:21.722]                         if (!has_future || version < "1.8.0") {
[17:02:21.722]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.722]                             "", base::R.version$version.string), 
[17:02:21.722]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.722]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.722]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.722]                               "release", "version")], collapse = " "), 
[17:02:21.722]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.722]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.722]                             info)
[17:02:21.722]                           info <- base::paste(info, collapse = "; ")
[17:02:21.722]                           if (!has_future) {
[17:02:21.722]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.722]                               info)
[17:02:21.722]                           }
[17:02:21.722]                           else {
[17:02:21.722]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.722]                               info, version)
[17:02:21.722]                           }
[17:02:21.722]                           base::stop(msg)
[17:02:21.722]                         }
[17:02:21.722]                       })
[17:02:21.722]                     }
[17:02:21.722]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.722]                     base::options(mc.cores = 1L)
[17:02:21.722]                   }
[17:02:21.722]                   ...future.strategy.old <- future::plan("list")
[17:02:21.722]                   options(future.plan = NULL)
[17:02:21.722]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.722]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.722]                 }
[17:02:21.722]                 ...future.workdir <- getwd()
[17:02:21.722]             }
[17:02:21.722]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.722]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.722]         }
[17:02:21.722]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.722]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.722]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.722]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.722]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.722]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.722]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.722]             base::names(...future.oldOptions))
[17:02:21.722]     }
[17:02:21.722]     if (FALSE) {
[17:02:21.722]     }
[17:02:21.722]     else {
[17:02:21.722]         if (TRUE) {
[17:02:21.722]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.722]                 open = "w")
[17:02:21.722]         }
[17:02:21.722]         else {
[17:02:21.722]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.722]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.722]         }
[17:02:21.722]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.722]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.722]             base::sink(type = "output", split = FALSE)
[17:02:21.722]             base::close(...future.stdout)
[17:02:21.722]         }, add = TRUE)
[17:02:21.722]     }
[17:02:21.722]     ...future.frame <- base::sys.nframe()
[17:02:21.722]     ...future.conditions <- base::list()
[17:02:21.722]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.722]     if (FALSE) {
[17:02:21.722]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.722]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.722]     }
[17:02:21.722]     ...future.result <- base::tryCatch({
[17:02:21.722]         base::withCallingHandlers({
[17:02:21.722]             ...future.value <- base::withVisible(base::local({
[17:02:21.722]                 ...future.makeSendCondition <- base::local({
[17:02:21.722]                   sendCondition <- NULL
[17:02:21.722]                   function(frame = 1L) {
[17:02:21.722]                     if (is.function(sendCondition)) 
[17:02:21.722]                       return(sendCondition)
[17:02:21.722]                     ns <- getNamespace("parallel")
[17:02:21.722]                     if (exists("sendData", mode = "function", 
[17:02:21.722]                       envir = ns)) {
[17:02:21.722]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.722]                         envir = ns)
[17:02:21.722]                       envir <- sys.frame(frame)
[17:02:21.722]                       master <- NULL
[17:02:21.722]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.722]                         !identical(envir, emptyenv())) {
[17:02:21.722]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.722]                           inherits = FALSE)) {
[17:02:21.722]                           master <- get("master", mode = "list", 
[17:02:21.722]                             envir = envir, inherits = FALSE)
[17:02:21.722]                           if (inherits(master, c("SOCKnode", 
[17:02:21.722]                             "SOCK0node"))) {
[17:02:21.722]                             sendCondition <<- function(cond) {
[17:02:21.722]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.722]                                 success = TRUE)
[17:02:21.722]                               parallel_sendData(master, data)
[17:02:21.722]                             }
[17:02:21.722]                             return(sendCondition)
[17:02:21.722]                           }
[17:02:21.722]                         }
[17:02:21.722]                         frame <- frame + 1L
[17:02:21.722]                         envir <- sys.frame(frame)
[17:02:21.722]                       }
[17:02:21.722]                     }
[17:02:21.722]                     sendCondition <<- function(cond) NULL
[17:02:21.722]                   }
[17:02:21.722]                 })
[17:02:21.722]                 withCallingHandlers({
[17:02:21.722]                   {
[17:02:21.722]                     cat("Processing: ")
[17:02:21.722]                     for (ii in 1:10) {
[17:02:21.722]                       cat(".")
[17:02:21.722]                     }
[17:02:21.722]                     cat(" [100%]\n")
[17:02:21.722]                     4
[17:02:21.722]                   }
[17:02:21.722]                 }, immediateCondition = function(cond) {
[17:02:21.722]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.722]                   sendCondition(cond)
[17:02:21.722]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.722]                   {
[17:02:21.722]                     inherits <- base::inherits
[17:02:21.722]                     invokeRestart <- base::invokeRestart
[17:02:21.722]                     is.null <- base::is.null
[17:02:21.722]                     muffled <- FALSE
[17:02:21.722]                     if (inherits(cond, "message")) {
[17:02:21.722]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.722]                       if (muffled) 
[17:02:21.722]                         invokeRestart("muffleMessage")
[17:02:21.722]                     }
[17:02:21.722]                     else if (inherits(cond, "warning")) {
[17:02:21.722]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.722]                       if (muffled) 
[17:02:21.722]                         invokeRestart("muffleWarning")
[17:02:21.722]                     }
[17:02:21.722]                     else if (inherits(cond, "condition")) {
[17:02:21.722]                       if (!is.null(pattern)) {
[17:02:21.722]                         computeRestarts <- base::computeRestarts
[17:02:21.722]                         grepl <- base::grepl
[17:02:21.722]                         restarts <- computeRestarts(cond)
[17:02:21.722]                         for (restart in restarts) {
[17:02:21.722]                           name <- restart$name
[17:02:21.722]                           if (is.null(name)) 
[17:02:21.722]                             next
[17:02:21.722]                           if (!grepl(pattern, name)) 
[17:02:21.722]                             next
[17:02:21.722]                           invokeRestart(restart)
[17:02:21.722]                           muffled <- TRUE
[17:02:21.722]                           break
[17:02:21.722]                         }
[17:02:21.722]                       }
[17:02:21.722]                     }
[17:02:21.722]                     invisible(muffled)
[17:02:21.722]                   }
[17:02:21.722]                   muffleCondition(cond)
[17:02:21.722]                 })
[17:02:21.722]             }))
[17:02:21.722]             future::FutureResult(value = ...future.value$value, 
[17:02:21.722]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.722]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.722]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.722]                     ...future.globalenv.names))
[17:02:21.722]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.722]         }, condition = base::local({
[17:02:21.722]             c <- base::c
[17:02:21.722]             inherits <- base::inherits
[17:02:21.722]             invokeRestart <- base::invokeRestart
[17:02:21.722]             length <- base::length
[17:02:21.722]             list <- base::list
[17:02:21.722]             seq.int <- base::seq.int
[17:02:21.722]             signalCondition <- base::signalCondition
[17:02:21.722]             sys.calls <- base::sys.calls
[17:02:21.722]             `[[` <- base::`[[`
[17:02:21.722]             `+` <- base::`+`
[17:02:21.722]             `<<-` <- base::`<<-`
[17:02:21.722]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.722]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.722]                   3L)]
[17:02:21.722]             }
[17:02:21.722]             function(cond) {
[17:02:21.722]                 is_error <- inherits(cond, "error")
[17:02:21.722]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.722]                   NULL)
[17:02:21.722]                 if (is_error) {
[17:02:21.722]                   sessionInformation <- function() {
[17:02:21.722]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.722]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.722]                       search = base::search(), system = base::Sys.info())
[17:02:21.722]                   }
[17:02:21.722]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.722]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.722]                     cond$call), session = sessionInformation(), 
[17:02:21.722]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.722]                   signalCondition(cond)
[17:02:21.722]                 }
[17:02:21.722]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.722]                 "immediateCondition"))) {
[17:02:21.722]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.722]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.722]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.722]                   if (TRUE && !signal) {
[17:02:21.722]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.722]                     {
[17:02:21.722]                       inherits <- base::inherits
[17:02:21.722]                       invokeRestart <- base::invokeRestart
[17:02:21.722]                       is.null <- base::is.null
[17:02:21.722]                       muffled <- FALSE
[17:02:21.722]                       if (inherits(cond, "message")) {
[17:02:21.722]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.722]                         if (muffled) 
[17:02:21.722]                           invokeRestart("muffleMessage")
[17:02:21.722]                       }
[17:02:21.722]                       else if (inherits(cond, "warning")) {
[17:02:21.722]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.722]                         if (muffled) 
[17:02:21.722]                           invokeRestart("muffleWarning")
[17:02:21.722]                       }
[17:02:21.722]                       else if (inherits(cond, "condition")) {
[17:02:21.722]                         if (!is.null(pattern)) {
[17:02:21.722]                           computeRestarts <- base::computeRestarts
[17:02:21.722]                           grepl <- base::grepl
[17:02:21.722]                           restarts <- computeRestarts(cond)
[17:02:21.722]                           for (restart in restarts) {
[17:02:21.722]                             name <- restart$name
[17:02:21.722]                             if (is.null(name)) 
[17:02:21.722]                               next
[17:02:21.722]                             if (!grepl(pattern, name)) 
[17:02:21.722]                               next
[17:02:21.722]                             invokeRestart(restart)
[17:02:21.722]                             muffled <- TRUE
[17:02:21.722]                             break
[17:02:21.722]                           }
[17:02:21.722]                         }
[17:02:21.722]                       }
[17:02:21.722]                       invisible(muffled)
[17:02:21.722]                     }
[17:02:21.722]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.722]                   }
[17:02:21.722]                 }
[17:02:21.722]                 else {
[17:02:21.722]                   if (TRUE) {
[17:02:21.722]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.722]                     {
[17:02:21.722]                       inherits <- base::inherits
[17:02:21.722]                       invokeRestart <- base::invokeRestart
[17:02:21.722]                       is.null <- base::is.null
[17:02:21.722]                       muffled <- FALSE
[17:02:21.722]                       if (inherits(cond, "message")) {
[17:02:21.722]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.722]                         if (muffled) 
[17:02:21.722]                           invokeRestart("muffleMessage")
[17:02:21.722]                       }
[17:02:21.722]                       else if (inherits(cond, "warning")) {
[17:02:21.722]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.722]                         if (muffled) 
[17:02:21.722]                           invokeRestart("muffleWarning")
[17:02:21.722]                       }
[17:02:21.722]                       else if (inherits(cond, "condition")) {
[17:02:21.722]                         if (!is.null(pattern)) {
[17:02:21.722]                           computeRestarts <- base::computeRestarts
[17:02:21.722]                           grepl <- base::grepl
[17:02:21.722]                           restarts <- computeRestarts(cond)
[17:02:21.722]                           for (restart in restarts) {
[17:02:21.722]                             name <- restart$name
[17:02:21.722]                             if (is.null(name)) 
[17:02:21.722]                               next
[17:02:21.722]                             if (!grepl(pattern, name)) 
[17:02:21.722]                               next
[17:02:21.722]                             invokeRestart(restart)
[17:02:21.722]                             muffled <- TRUE
[17:02:21.722]                             break
[17:02:21.722]                           }
[17:02:21.722]                         }
[17:02:21.722]                       }
[17:02:21.722]                       invisible(muffled)
[17:02:21.722]                     }
[17:02:21.722]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.722]                   }
[17:02:21.722]                 }
[17:02:21.722]             }
[17:02:21.722]         }))
[17:02:21.722]     }, error = function(ex) {
[17:02:21.722]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.722]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.722]                 ...future.rng), started = ...future.startTime, 
[17:02:21.722]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.722]             version = "1.8"), class = "FutureResult")
[17:02:21.722]     }, finally = {
[17:02:21.722]         if (!identical(...future.workdir, getwd())) 
[17:02:21.722]             setwd(...future.workdir)
[17:02:21.722]         {
[17:02:21.722]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.722]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.722]             }
[17:02:21.722]             base::options(...future.oldOptions)
[17:02:21.722]             if (.Platform$OS.type == "windows") {
[17:02:21.722]                 old_names <- names(...future.oldEnvVars)
[17:02:21.722]                 envs <- base::Sys.getenv()
[17:02:21.722]                 names <- names(envs)
[17:02:21.722]                 common <- intersect(names, old_names)
[17:02:21.722]                 added <- setdiff(names, old_names)
[17:02:21.722]                 removed <- setdiff(old_names, names)
[17:02:21.722]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.722]                   envs[common]]
[17:02:21.722]                 NAMES <- toupper(changed)
[17:02:21.722]                 args <- list()
[17:02:21.722]                 for (kk in seq_along(NAMES)) {
[17:02:21.722]                   name <- changed[[kk]]
[17:02:21.722]                   NAME <- NAMES[[kk]]
[17:02:21.722]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.722]                     next
[17:02:21.722]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.722]                 }
[17:02:21.722]                 NAMES <- toupper(added)
[17:02:21.722]                 for (kk in seq_along(NAMES)) {
[17:02:21.722]                   name <- added[[kk]]
[17:02:21.722]                   NAME <- NAMES[[kk]]
[17:02:21.722]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.722]                     next
[17:02:21.722]                   args[[name]] <- ""
[17:02:21.722]                 }
[17:02:21.722]                 NAMES <- toupper(removed)
[17:02:21.722]                 for (kk in seq_along(NAMES)) {
[17:02:21.722]                   name <- removed[[kk]]
[17:02:21.722]                   NAME <- NAMES[[kk]]
[17:02:21.722]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.722]                     next
[17:02:21.722]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.722]                 }
[17:02:21.722]                 if (length(args) > 0) 
[17:02:21.722]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.722]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.722]             }
[17:02:21.722]             else {
[17:02:21.722]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.722]             }
[17:02:21.722]             {
[17:02:21.722]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.722]                   0L) {
[17:02:21.722]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.722]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.722]                   base::options(opts)
[17:02:21.722]                 }
[17:02:21.722]                 {
[17:02:21.722]                   {
[17:02:21.722]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.722]                     NULL
[17:02:21.722]                   }
[17:02:21.722]                   options(future.plan = NULL)
[17:02:21.722]                   if (is.na(NA_character_)) 
[17:02:21.722]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.722]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.722]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.722]                     .init = FALSE)
[17:02:21.722]                 }
[17:02:21.722]             }
[17:02:21.722]         }
[17:02:21.722]     })
[17:02:21.722]     if (TRUE) {
[17:02:21.722]         base::sink(type = "output", split = FALSE)
[17:02:21.722]         if (TRUE) {
[17:02:21.722]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.722]         }
[17:02:21.722]         else {
[17:02:21.722]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.722]         }
[17:02:21.722]         base::close(...future.stdout)
[17:02:21.722]         ...future.stdout <- NULL
[17:02:21.722]     }
[17:02:21.722]     ...future.result$conditions <- ...future.conditions
[17:02:21.722]     ...future.result$finished <- base::Sys.time()
[17:02:21.722]     ...future.result
[17:02:21.722] }
[17:02:21.725] MultisessionFuture started
[17:02:21.726] - Launch lazy future ... done
[17:02:21.726] run() for ‘MultisessionFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[17:02:21.726] result() for ClusterFuture ...
[17:02:21.726] - result already collected: FutureResult
[17:02:21.727] result() for ClusterFuture ... done
[17:02:21.727] result() for ClusterFuture ...
[17:02:21.727] - result already collected: FutureResult
[17:02:21.727] result() for ClusterFuture ... done
[17:02:21.727] signalConditions() ...
[17:02:21.727]  - include = ‘immediateCondition’
[17:02:21.727]  - exclude = 
[17:02:21.728]  - resignal = FALSE
[17:02:21.728]  - Number of conditions: 1
[17:02:21.728] signalConditions() ... done
[17:02:21.728] Future state: ‘finished’
[17:02:21.728] result() for ClusterFuture ...
[17:02:21.728] - result already collected: FutureResult
[17:02:21.728] result() for ClusterFuture ... done
[17:02:21.728] signalConditions() ...
[17:02:21.729]  - include = ‘condition’
[17:02:21.729]  - exclude = ‘immediateCondition’
[17:02:21.729]  - resignal = TRUE
[17:02:21.729]  - Number of conditions: 1
[17:02:21.729]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:02:21.729] signalConditions() ... done
v3: <simpleError> (as expect)
[17:02:21.729] result() for ClusterFuture ...
[17:02:21.729] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.729] - Validating connection of MultisessionFuture
[17:02:21.730] - received message: FutureResult
[17:02:21.730] - Received FutureResult
[17:02:21.730] - Erased future from FutureRegistry
[17:02:21.730] result() for ClusterFuture ...
[17:02:21.730] - result already collected: FutureResult
[17:02:21.730] result() for ClusterFuture ... done
[17:02:21.730] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.730] result() for ClusterFuture ... done
[17:02:21.730] result() for ClusterFuture ...
[17:02:21.730] - result already collected: FutureResult
[17:02:21.730] result() for ClusterFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[17:02:21.731] getGlobalsAndPackages() ...
[17:02:21.731] Searching for globals...
[17:02:21.731] 
[17:02:21.731] Searching for globals ... DONE
[17:02:21.731] - globals: [0] <none>
[17:02:21.732] getGlobalsAndPackages() ... DONE
[17:02:21.732] run() for ‘Future’ ...
[17:02:21.732] - state: ‘created’
[17:02:21.732] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.746] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.746] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.746]   - Field: ‘node’
[17:02:21.746]   - Field: ‘label’
[17:02:21.746]   - Field: ‘local’
[17:02:21.746]   - Field: ‘owner’
[17:02:21.746]   - Field: ‘envir’
[17:02:21.747]   - Field: ‘workers’
[17:02:21.747]   - Field: ‘packages’
[17:02:21.747]   - Field: ‘gc’
[17:02:21.747]   - Field: ‘conditions’
[17:02:21.747]   - Field: ‘persistent’
[17:02:21.747]   - Field: ‘expr’
[17:02:21.747]   - Field: ‘uuid’
[17:02:21.747]   - Field: ‘seed’
[17:02:21.747]   - Field: ‘version’
[17:02:21.747]   - Field: ‘result’
[17:02:21.747]   - Field: ‘asynchronous’
[17:02:21.748]   - Field: ‘calls’
[17:02:21.748]   - Field: ‘globals’
[17:02:21.748]   - Field: ‘stdout’
[17:02:21.748]   - Field: ‘earlySignal’
[17:02:21.748]   - Field: ‘lazy’
[17:02:21.748]   - Field: ‘state’
[17:02:21.748] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.748] - Launch lazy future ...
[17:02:21.748] Packages needed by the future expression (n = 0): <none>
[17:02:21.749] Packages needed by future strategies (n = 0): <none>
[17:02:21.749] {
[17:02:21.749]     {
[17:02:21.749]         {
[17:02:21.749]             ...future.startTime <- base::Sys.time()
[17:02:21.749]             {
[17:02:21.749]                 {
[17:02:21.749]                   {
[17:02:21.749]                     {
[17:02:21.749]                       base::local({
[17:02:21.749]                         has_future <- base::requireNamespace("future", 
[17:02:21.749]                           quietly = TRUE)
[17:02:21.749]                         if (has_future) {
[17:02:21.749]                           ns <- base::getNamespace("future")
[17:02:21.749]                           version <- ns[[".package"]][["version"]]
[17:02:21.749]                           if (is.null(version)) 
[17:02:21.749]                             version <- utils::packageVersion("future")
[17:02:21.749]                         }
[17:02:21.749]                         else {
[17:02:21.749]                           version <- NULL
[17:02:21.749]                         }
[17:02:21.749]                         if (!has_future || version < "1.8.0") {
[17:02:21.749]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.749]                             "", base::R.version$version.string), 
[17:02:21.749]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.749]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.749]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.749]                               "release", "version")], collapse = " "), 
[17:02:21.749]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.749]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.749]                             info)
[17:02:21.749]                           info <- base::paste(info, collapse = "; ")
[17:02:21.749]                           if (!has_future) {
[17:02:21.749]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.749]                               info)
[17:02:21.749]                           }
[17:02:21.749]                           else {
[17:02:21.749]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.749]                               info, version)
[17:02:21.749]                           }
[17:02:21.749]                           base::stop(msg)
[17:02:21.749]                         }
[17:02:21.749]                       })
[17:02:21.749]                     }
[17:02:21.749]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.749]                     base::options(mc.cores = 1L)
[17:02:21.749]                   }
[17:02:21.749]                   ...future.strategy.old <- future::plan("list")
[17:02:21.749]                   options(future.plan = NULL)
[17:02:21.749]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.749]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.749]                 }
[17:02:21.749]                 ...future.workdir <- getwd()
[17:02:21.749]             }
[17:02:21.749]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.749]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.749]         }
[17:02:21.749]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.749]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.749]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.749]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.749]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.749]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.749]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.749]             base::names(...future.oldOptions))
[17:02:21.749]     }
[17:02:21.749]     if (FALSE) {
[17:02:21.749]     }
[17:02:21.749]     else {
[17:02:21.749]         if (TRUE) {
[17:02:21.749]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.749]                 open = "w")
[17:02:21.749]         }
[17:02:21.749]         else {
[17:02:21.749]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.749]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.749]         }
[17:02:21.749]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.749]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.749]             base::sink(type = "output", split = FALSE)
[17:02:21.749]             base::close(...future.stdout)
[17:02:21.749]         }, add = TRUE)
[17:02:21.749]     }
[17:02:21.749]     ...future.frame <- base::sys.nframe()
[17:02:21.749]     ...future.conditions <- base::list()
[17:02:21.749]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.749]     if (FALSE) {
[17:02:21.749]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.749]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.749]     }
[17:02:21.749]     ...future.result <- base::tryCatch({
[17:02:21.749]         base::withCallingHandlers({
[17:02:21.749]             ...future.value <- base::withVisible(base::local({
[17:02:21.749]                 ...future.makeSendCondition <- base::local({
[17:02:21.749]                   sendCondition <- NULL
[17:02:21.749]                   function(frame = 1L) {
[17:02:21.749]                     if (is.function(sendCondition)) 
[17:02:21.749]                       return(sendCondition)
[17:02:21.749]                     ns <- getNamespace("parallel")
[17:02:21.749]                     if (exists("sendData", mode = "function", 
[17:02:21.749]                       envir = ns)) {
[17:02:21.749]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.749]                         envir = ns)
[17:02:21.749]                       envir <- sys.frame(frame)
[17:02:21.749]                       master <- NULL
[17:02:21.749]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.749]                         !identical(envir, emptyenv())) {
[17:02:21.749]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.749]                           inherits = FALSE)) {
[17:02:21.749]                           master <- get("master", mode = "list", 
[17:02:21.749]                             envir = envir, inherits = FALSE)
[17:02:21.749]                           if (inherits(master, c("SOCKnode", 
[17:02:21.749]                             "SOCK0node"))) {
[17:02:21.749]                             sendCondition <<- function(cond) {
[17:02:21.749]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.749]                                 success = TRUE)
[17:02:21.749]                               parallel_sendData(master, data)
[17:02:21.749]                             }
[17:02:21.749]                             return(sendCondition)
[17:02:21.749]                           }
[17:02:21.749]                         }
[17:02:21.749]                         frame <- frame + 1L
[17:02:21.749]                         envir <- sys.frame(frame)
[17:02:21.749]                       }
[17:02:21.749]                     }
[17:02:21.749]                     sendCondition <<- function(cond) NULL
[17:02:21.749]                   }
[17:02:21.749]                 })
[17:02:21.749]                 withCallingHandlers({
[17:02:21.749]                   1
[17:02:21.749]                 }, immediateCondition = function(cond) {
[17:02:21.749]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.749]                   sendCondition(cond)
[17:02:21.749]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.749]                   {
[17:02:21.749]                     inherits <- base::inherits
[17:02:21.749]                     invokeRestart <- base::invokeRestart
[17:02:21.749]                     is.null <- base::is.null
[17:02:21.749]                     muffled <- FALSE
[17:02:21.749]                     if (inherits(cond, "message")) {
[17:02:21.749]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.749]                       if (muffled) 
[17:02:21.749]                         invokeRestart("muffleMessage")
[17:02:21.749]                     }
[17:02:21.749]                     else if (inherits(cond, "warning")) {
[17:02:21.749]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.749]                       if (muffled) 
[17:02:21.749]                         invokeRestart("muffleWarning")
[17:02:21.749]                     }
[17:02:21.749]                     else if (inherits(cond, "condition")) {
[17:02:21.749]                       if (!is.null(pattern)) {
[17:02:21.749]                         computeRestarts <- base::computeRestarts
[17:02:21.749]                         grepl <- base::grepl
[17:02:21.749]                         restarts <- computeRestarts(cond)
[17:02:21.749]                         for (restart in restarts) {
[17:02:21.749]                           name <- restart$name
[17:02:21.749]                           if (is.null(name)) 
[17:02:21.749]                             next
[17:02:21.749]                           if (!grepl(pattern, name)) 
[17:02:21.749]                             next
[17:02:21.749]                           invokeRestart(restart)
[17:02:21.749]                           muffled <- TRUE
[17:02:21.749]                           break
[17:02:21.749]                         }
[17:02:21.749]                       }
[17:02:21.749]                     }
[17:02:21.749]                     invisible(muffled)
[17:02:21.749]                   }
[17:02:21.749]                   muffleCondition(cond)
[17:02:21.749]                 })
[17:02:21.749]             }))
[17:02:21.749]             future::FutureResult(value = ...future.value$value, 
[17:02:21.749]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.749]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.749]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.749]                     ...future.globalenv.names))
[17:02:21.749]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.749]         }, condition = base::local({
[17:02:21.749]             c <- base::c
[17:02:21.749]             inherits <- base::inherits
[17:02:21.749]             invokeRestart <- base::invokeRestart
[17:02:21.749]             length <- base::length
[17:02:21.749]             list <- base::list
[17:02:21.749]             seq.int <- base::seq.int
[17:02:21.749]             signalCondition <- base::signalCondition
[17:02:21.749]             sys.calls <- base::sys.calls
[17:02:21.749]             `[[` <- base::`[[`
[17:02:21.749]             `+` <- base::`+`
[17:02:21.749]             `<<-` <- base::`<<-`
[17:02:21.749]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.749]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.749]                   3L)]
[17:02:21.749]             }
[17:02:21.749]             function(cond) {
[17:02:21.749]                 is_error <- inherits(cond, "error")
[17:02:21.749]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.749]                   NULL)
[17:02:21.749]                 if (is_error) {
[17:02:21.749]                   sessionInformation <- function() {
[17:02:21.749]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.749]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.749]                       search = base::search(), system = base::Sys.info())
[17:02:21.749]                   }
[17:02:21.749]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.749]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.749]                     cond$call), session = sessionInformation(), 
[17:02:21.749]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.749]                   signalCondition(cond)
[17:02:21.749]                 }
[17:02:21.749]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.749]                 "immediateCondition"))) {
[17:02:21.749]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.749]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.749]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.749]                   if (TRUE && !signal) {
[17:02:21.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.749]                     {
[17:02:21.749]                       inherits <- base::inherits
[17:02:21.749]                       invokeRestart <- base::invokeRestart
[17:02:21.749]                       is.null <- base::is.null
[17:02:21.749]                       muffled <- FALSE
[17:02:21.749]                       if (inherits(cond, "message")) {
[17:02:21.749]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.749]                         if (muffled) 
[17:02:21.749]                           invokeRestart("muffleMessage")
[17:02:21.749]                       }
[17:02:21.749]                       else if (inherits(cond, "warning")) {
[17:02:21.749]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.749]                         if (muffled) 
[17:02:21.749]                           invokeRestart("muffleWarning")
[17:02:21.749]                       }
[17:02:21.749]                       else if (inherits(cond, "condition")) {
[17:02:21.749]                         if (!is.null(pattern)) {
[17:02:21.749]                           computeRestarts <- base::computeRestarts
[17:02:21.749]                           grepl <- base::grepl
[17:02:21.749]                           restarts <- computeRestarts(cond)
[17:02:21.749]                           for (restart in restarts) {
[17:02:21.749]                             name <- restart$name
[17:02:21.749]                             if (is.null(name)) 
[17:02:21.749]                               next
[17:02:21.749]                             if (!grepl(pattern, name)) 
[17:02:21.749]                               next
[17:02:21.749]                             invokeRestart(restart)
[17:02:21.749]                             muffled <- TRUE
[17:02:21.749]                             break
[17:02:21.749]                           }
[17:02:21.749]                         }
[17:02:21.749]                       }
[17:02:21.749]                       invisible(muffled)
[17:02:21.749]                     }
[17:02:21.749]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.749]                   }
[17:02:21.749]                 }
[17:02:21.749]                 else {
[17:02:21.749]                   if (TRUE) {
[17:02:21.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.749]                     {
[17:02:21.749]                       inherits <- base::inherits
[17:02:21.749]                       invokeRestart <- base::invokeRestart
[17:02:21.749]                       is.null <- base::is.null
[17:02:21.749]                       muffled <- FALSE
[17:02:21.749]                       if (inherits(cond, "message")) {
[17:02:21.749]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.749]                         if (muffled) 
[17:02:21.749]                           invokeRestart("muffleMessage")
[17:02:21.749]                       }
[17:02:21.749]                       else if (inherits(cond, "warning")) {
[17:02:21.749]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.749]                         if (muffled) 
[17:02:21.749]                           invokeRestart("muffleWarning")
[17:02:21.749]                       }
[17:02:21.749]                       else if (inherits(cond, "condition")) {
[17:02:21.749]                         if (!is.null(pattern)) {
[17:02:21.749]                           computeRestarts <- base::computeRestarts
[17:02:21.749]                           grepl <- base::grepl
[17:02:21.749]                           restarts <- computeRestarts(cond)
[17:02:21.749]                           for (restart in restarts) {
[17:02:21.749]                             name <- restart$name
[17:02:21.749]                             if (is.null(name)) 
[17:02:21.749]                               next
[17:02:21.749]                             if (!grepl(pattern, name)) 
[17:02:21.749]                               next
[17:02:21.749]                             invokeRestart(restart)
[17:02:21.749]                             muffled <- TRUE
[17:02:21.749]                             break
[17:02:21.749]                           }
[17:02:21.749]                         }
[17:02:21.749]                       }
[17:02:21.749]                       invisible(muffled)
[17:02:21.749]                     }
[17:02:21.749]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.749]                   }
[17:02:21.749]                 }
[17:02:21.749]             }
[17:02:21.749]         }))
[17:02:21.749]     }, error = function(ex) {
[17:02:21.749]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.749]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.749]                 ...future.rng), started = ...future.startTime, 
[17:02:21.749]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.749]             version = "1.8"), class = "FutureResult")
[17:02:21.749]     }, finally = {
[17:02:21.749]         if (!identical(...future.workdir, getwd())) 
[17:02:21.749]             setwd(...future.workdir)
[17:02:21.749]         {
[17:02:21.749]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.749]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.749]             }
[17:02:21.749]             base::options(...future.oldOptions)
[17:02:21.749]             if (.Platform$OS.type == "windows") {
[17:02:21.749]                 old_names <- names(...future.oldEnvVars)
[17:02:21.749]                 envs <- base::Sys.getenv()
[17:02:21.749]                 names <- names(envs)
[17:02:21.749]                 common <- intersect(names, old_names)
[17:02:21.749]                 added <- setdiff(names, old_names)
[17:02:21.749]                 removed <- setdiff(old_names, names)
[17:02:21.749]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.749]                   envs[common]]
[17:02:21.749]                 NAMES <- toupper(changed)
[17:02:21.749]                 args <- list()
[17:02:21.749]                 for (kk in seq_along(NAMES)) {
[17:02:21.749]                   name <- changed[[kk]]
[17:02:21.749]                   NAME <- NAMES[[kk]]
[17:02:21.749]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.749]                     next
[17:02:21.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.749]                 }
[17:02:21.749]                 NAMES <- toupper(added)
[17:02:21.749]                 for (kk in seq_along(NAMES)) {
[17:02:21.749]                   name <- added[[kk]]
[17:02:21.749]                   NAME <- NAMES[[kk]]
[17:02:21.749]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.749]                     next
[17:02:21.749]                   args[[name]] <- ""
[17:02:21.749]                 }
[17:02:21.749]                 NAMES <- toupper(removed)
[17:02:21.749]                 for (kk in seq_along(NAMES)) {
[17:02:21.749]                   name <- removed[[kk]]
[17:02:21.749]                   NAME <- NAMES[[kk]]
[17:02:21.749]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.749]                     next
[17:02:21.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.749]                 }
[17:02:21.749]                 if (length(args) > 0) 
[17:02:21.749]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.749]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.749]             }
[17:02:21.749]             else {
[17:02:21.749]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.749]             }
[17:02:21.749]             {
[17:02:21.749]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.749]                   0L) {
[17:02:21.749]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.749]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.749]                   base::options(opts)
[17:02:21.749]                 }
[17:02:21.749]                 {
[17:02:21.749]                   {
[17:02:21.749]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.749]                     NULL
[17:02:21.749]                   }
[17:02:21.749]                   options(future.plan = NULL)
[17:02:21.749]                   if (is.na(NA_character_)) 
[17:02:21.749]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.749]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.749]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.749]                     .init = FALSE)
[17:02:21.749]                 }
[17:02:21.749]             }
[17:02:21.749]         }
[17:02:21.749]     })
[17:02:21.749]     if (TRUE) {
[17:02:21.749]         base::sink(type = "output", split = FALSE)
[17:02:21.749]         if (TRUE) {
[17:02:21.749]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.749]         }
[17:02:21.749]         else {
[17:02:21.749]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.749]         }
[17:02:21.749]         base::close(...future.stdout)
[17:02:21.749]         ...future.stdout <- NULL
[17:02:21.749]     }
[17:02:21.749]     ...future.result$conditions <- ...future.conditions
[17:02:21.749]     ...future.result$finished <- base::Sys.time()
[17:02:21.749]     ...future.result
[17:02:21.749] }
[17:02:21.752] MultisessionFuture started
[17:02:21.752] - Launch lazy future ... done
[17:02:21.752] run() for ‘MultisessionFuture’ ... done
[17:02:21.753] result() for ClusterFuture ...
[17:02:21.755] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.755] - Validating connection of MultisessionFuture
[17:02:21.756] - received message: FutureResult
[17:02:21.756] - Received FutureResult
[17:02:21.756] - Erased future from FutureRegistry
[17:02:21.756] result() for ClusterFuture ...
[17:02:21.756] - result already collected: FutureResult
[17:02:21.756] result() for ClusterFuture ... done
[17:02:21.756] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.756] result() for ClusterFuture ... done
[17:02:21.756] result() for ClusterFuture ...
[17:02:21.756] - result already collected: FutureResult
[17:02:21.756] result() for ClusterFuture ... done
c = 1
[17:02:21.757] getGlobalsAndPackages() ...
[17:02:21.757] Searching for globals...
[17:02:21.757] 
[17:02:21.757] Searching for globals ... DONE
[17:02:21.757] - globals: [0] <none>
[17:02:21.758] getGlobalsAndPackages() ... DONE
[17:02:21.758] run() for ‘Future’ ...
[17:02:21.758] - state: ‘created’
[17:02:21.758] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.772] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.772] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.772]   - Field: ‘node’
[17:02:21.772]   - Field: ‘label’
[17:02:21.772]   - Field: ‘local’
[17:02:21.772]   - Field: ‘owner’
[17:02:21.772]   - Field: ‘envir’
[17:02:21.772]   - Field: ‘workers’
[17:02:21.773]   - Field: ‘packages’
[17:02:21.773]   - Field: ‘gc’
[17:02:21.773]   - Field: ‘conditions’
[17:02:21.773]   - Field: ‘persistent’
[17:02:21.773]   - Field: ‘expr’
[17:02:21.773]   - Field: ‘uuid’
[17:02:21.773]   - Field: ‘seed’
[17:02:21.773]   - Field: ‘version’
[17:02:21.773]   - Field: ‘result’
[17:02:21.773]   - Field: ‘asynchronous’
[17:02:21.773]   - Field: ‘calls’
[17:02:21.773]   - Field: ‘globals’
[17:02:21.774]   - Field: ‘stdout’
[17:02:21.774]   - Field: ‘earlySignal’
[17:02:21.774]   - Field: ‘lazy’
[17:02:21.774]   - Field: ‘state’
[17:02:21.774] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.774] - Launch lazy future ...
[17:02:21.774] Packages needed by the future expression (n = 0): <none>
[17:02:21.774] Packages needed by future strategies (n = 0): <none>
[17:02:21.775] {
[17:02:21.775]     {
[17:02:21.775]         {
[17:02:21.775]             ...future.startTime <- base::Sys.time()
[17:02:21.775]             {
[17:02:21.775]                 {
[17:02:21.775]                   {
[17:02:21.775]                     {
[17:02:21.775]                       base::local({
[17:02:21.775]                         has_future <- base::requireNamespace("future", 
[17:02:21.775]                           quietly = TRUE)
[17:02:21.775]                         if (has_future) {
[17:02:21.775]                           ns <- base::getNamespace("future")
[17:02:21.775]                           version <- ns[[".package"]][["version"]]
[17:02:21.775]                           if (is.null(version)) 
[17:02:21.775]                             version <- utils::packageVersion("future")
[17:02:21.775]                         }
[17:02:21.775]                         else {
[17:02:21.775]                           version <- NULL
[17:02:21.775]                         }
[17:02:21.775]                         if (!has_future || version < "1.8.0") {
[17:02:21.775]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.775]                             "", base::R.version$version.string), 
[17:02:21.775]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.775]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.775]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.775]                               "release", "version")], collapse = " "), 
[17:02:21.775]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.775]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.775]                             info)
[17:02:21.775]                           info <- base::paste(info, collapse = "; ")
[17:02:21.775]                           if (!has_future) {
[17:02:21.775]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.775]                               info)
[17:02:21.775]                           }
[17:02:21.775]                           else {
[17:02:21.775]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.775]                               info, version)
[17:02:21.775]                           }
[17:02:21.775]                           base::stop(msg)
[17:02:21.775]                         }
[17:02:21.775]                       })
[17:02:21.775]                     }
[17:02:21.775]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.775]                     base::options(mc.cores = 1L)
[17:02:21.775]                   }
[17:02:21.775]                   ...future.strategy.old <- future::plan("list")
[17:02:21.775]                   options(future.plan = NULL)
[17:02:21.775]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.775]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.775]                 }
[17:02:21.775]                 ...future.workdir <- getwd()
[17:02:21.775]             }
[17:02:21.775]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.775]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.775]         }
[17:02:21.775]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.775]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.775]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.775]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.775]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.775]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.775]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.775]             base::names(...future.oldOptions))
[17:02:21.775]     }
[17:02:21.775]     if (FALSE) {
[17:02:21.775]     }
[17:02:21.775]     else {
[17:02:21.775]         if (TRUE) {
[17:02:21.775]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.775]                 open = "w")
[17:02:21.775]         }
[17:02:21.775]         else {
[17:02:21.775]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.775]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.775]         }
[17:02:21.775]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.775]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.775]             base::sink(type = "output", split = FALSE)
[17:02:21.775]             base::close(...future.stdout)
[17:02:21.775]         }, add = TRUE)
[17:02:21.775]     }
[17:02:21.775]     ...future.frame <- base::sys.nframe()
[17:02:21.775]     ...future.conditions <- base::list()
[17:02:21.775]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.775]     if (FALSE) {
[17:02:21.775]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.775]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.775]     }
[17:02:21.775]     ...future.result <- base::tryCatch({
[17:02:21.775]         base::withCallingHandlers({
[17:02:21.775]             ...future.value <- base::withVisible(base::local({
[17:02:21.775]                 ...future.makeSendCondition <- base::local({
[17:02:21.775]                   sendCondition <- NULL
[17:02:21.775]                   function(frame = 1L) {
[17:02:21.775]                     if (is.function(sendCondition)) 
[17:02:21.775]                       return(sendCondition)
[17:02:21.775]                     ns <- getNamespace("parallel")
[17:02:21.775]                     if (exists("sendData", mode = "function", 
[17:02:21.775]                       envir = ns)) {
[17:02:21.775]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.775]                         envir = ns)
[17:02:21.775]                       envir <- sys.frame(frame)
[17:02:21.775]                       master <- NULL
[17:02:21.775]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.775]                         !identical(envir, emptyenv())) {
[17:02:21.775]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.775]                           inherits = FALSE)) {
[17:02:21.775]                           master <- get("master", mode = "list", 
[17:02:21.775]                             envir = envir, inherits = FALSE)
[17:02:21.775]                           if (inherits(master, c("SOCKnode", 
[17:02:21.775]                             "SOCK0node"))) {
[17:02:21.775]                             sendCondition <<- function(cond) {
[17:02:21.775]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.775]                                 success = TRUE)
[17:02:21.775]                               parallel_sendData(master, data)
[17:02:21.775]                             }
[17:02:21.775]                             return(sendCondition)
[17:02:21.775]                           }
[17:02:21.775]                         }
[17:02:21.775]                         frame <- frame + 1L
[17:02:21.775]                         envir <- sys.frame(frame)
[17:02:21.775]                       }
[17:02:21.775]                     }
[17:02:21.775]                     sendCondition <<- function(cond) NULL
[17:02:21.775]                   }
[17:02:21.775]                 })
[17:02:21.775]                 withCallingHandlers({
[17:02:21.775]                   1
[17:02:21.775]                 }, immediateCondition = function(cond) {
[17:02:21.775]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.775]                   sendCondition(cond)
[17:02:21.775]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.775]                   {
[17:02:21.775]                     inherits <- base::inherits
[17:02:21.775]                     invokeRestart <- base::invokeRestart
[17:02:21.775]                     is.null <- base::is.null
[17:02:21.775]                     muffled <- FALSE
[17:02:21.775]                     if (inherits(cond, "message")) {
[17:02:21.775]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.775]                       if (muffled) 
[17:02:21.775]                         invokeRestart("muffleMessage")
[17:02:21.775]                     }
[17:02:21.775]                     else if (inherits(cond, "warning")) {
[17:02:21.775]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.775]                       if (muffled) 
[17:02:21.775]                         invokeRestart("muffleWarning")
[17:02:21.775]                     }
[17:02:21.775]                     else if (inherits(cond, "condition")) {
[17:02:21.775]                       if (!is.null(pattern)) {
[17:02:21.775]                         computeRestarts <- base::computeRestarts
[17:02:21.775]                         grepl <- base::grepl
[17:02:21.775]                         restarts <- computeRestarts(cond)
[17:02:21.775]                         for (restart in restarts) {
[17:02:21.775]                           name <- restart$name
[17:02:21.775]                           if (is.null(name)) 
[17:02:21.775]                             next
[17:02:21.775]                           if (!grepl(pattern, name)) 
[17:02:21.775]                             next
[17:02:21.775]                           invokeRestart(restart)
[17:02:21.775]                           muffled <- TRUE
[17:02:21.775]                           break
[17:02:21.775]                         }
[17:02:21.775]                       }
[17:02:21.775]                     }
[17:02:21.775]                     invisible(muffled)
[17:02:21.775]                   }
[17:02:21.775]                   muffleCondition(cond)
[17:02:21.775]                 })
[17:02:21.775]             }))
[17:02:21.775]             future::FutureResult(value = ...future.value$value, 
[17:02:21.775]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.775]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.775]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.775]                     ...future.globalenv.names))
[17:02:21.775]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.775]         }, condition = base::local({
[17:02:21.775]             c <- base::c
[17:02:21.775]             inherits <- base::inherits
[17:02:21.775]             invokeRestart <- base::invokeRestart
[17:02:21.775]             length <- base::length
[17:02:21.775]             list <- base::list
[17:02:21.775]             seq.int <- base::seq.int
[17:02:21.775]             signalCondition <- base::signalCondition
[17:02:21.775]             sys.calls <- base::sys.calls
[17:02:21.775]             `[[` <- base::`[[`
[17:02:21.775]             `+` <- base::`+`
[17:02:21.775]             `<<-` <- base::`<<-`
[17:02:21.775]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.775]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.775]                   3L)]
[17:02:21.775]             }
[17:02:21.775]             function(cond) {
[17:02:21.775]                 is_error <- inherits(cond, "error")
[17:02:21.775]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.775]                   NULL)
[17:02:21.775]                 if (is_error) {
[17:02:21.775]                   sessionInformation <- function() {
[17:02:21.775]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.775]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.775]                       search = base::search(), system = base::Sys.info())
[17:02:21.775]                   }
[17:02:21.775]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.775]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.775]                     cond$call), session = sessionInformation(), 
[17:02:21.775]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.775]                   signalCondition(cond)
[17:02:21.775]                 }
[17:02:21.775]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.775]                 "immediateCondition"))) {
[17:02:21.775]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.775]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.775]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.775]                   if (TRUE && !signal) {
[17:02:21.775]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.775]                     {
[17:02:21.775]                       inherits <- base::inherits
[17:02:21.775]                       invokeRestart <- base::invokeRestart
[17:02:21.775]                       is.null <- base::is.null
[17:02:21.775]                       muffled <- FALSE
[17:02:21.775]                       if (inherits(cond, "message")) {
[17:02:21.775]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.775]                         if (muffled) 
[17:02:21.775]                           invokeRestart("muffleMessage")
[17:02:21.775]                       }
[17:02:21.775]                       else if (inherits(cond, "warning")) {
[17:02:21.775]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.775]                         if (muffled) 
[17:02:21.775]                           invokeRestart("muffleWarning")
[17:02:21.775]                       }
[17:02:21.775]                       else if (inherits(cond, "condition")) {
[17:02:21.775]                         if (!is.null(pattern)) {
[17:02:21.775]                           computeRestarts <- base::computeRestarts
[17:02:21.775]                           grepl <- base::grepl
[17:02:21.775]                           restarts <- computeRestarts(cond)
[17:02:21.775]                           for (restart in restarts) {
[17:02:21.775]                             name <- restart$name
[17:02:21.775]                             if (is.null(name)) 
[17:02:21.775]                               next
[17:02:21.775]                             if (!grepl(pattern, name)) 
[17:02:21.775]                               next
[17:02:21.775]                             invokeRestart(restart)
[17:02:21.775]                             muffled <- TRUE
[17:02:21.775]                             break
[17:02:21.775]                           }
[17:02:21.775]                         }
[17:02:21.775]                       }
[17:02:21.775]                       invisible(muffled)
[17:02:21.775]                     }
[17:02:21.775]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.775]                   }
[17:02:21.775]                 }
[17:02:21.775]                 else {
[17:02:21.775]                   if (TRUE) {
[17:02:21.775]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.775]                     {
[17:02:21.775]                       inherits <- base::inherits
[17:02:21.775]                       invokeRestart <- base::invokeRestart
[17:02:21.775]                       is.null <- base::is.null
[17:02:21.775]                       muffled <- FALSE
[17:02:21.775]                       if (inherits(cond, "message")) {
[17:02:21.775]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.775]                         if (muffled) 
[17:02:21.775]                           invokeRestart("muffleMessage")
[17:02:21.775]                       }
[17:02:21.775]                       else if (inherits(cond, "warning")) {
[17:02:21.775]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.775]                         if (muffled) 
[17:02:21.775]                           invokeRestart("muffleWarning")
[17:02:21.775]                       }
[17:02:21.775]                       else if (inherits(cond, "condition")) {
[17:02:21.775]                         if (!is.null(pattern)) {
[17:02:21.775]                           computeRestarts <- base::computeRestarts
[17:02:21.775]                           grepl <- base::grepl
[17:02:21.775]                           restarts <- computeRestarts(cond)
[17:02:21.775]                           for (restart in restarts) {
[17:02:21.775]                             name <- restart$name
[17:02:21.775]                             if (is.null(name)) 
[17:02:21.775]                               next
[17:02:21.775]                             if (!grepl(pattern, name)) 
[17:02:21.775]                               next
[17:02:21.775]                             invokeRestart(restart)
[17:02:21.775]                             muffled <- TRUE
[17:02:21.775]                             break
[17:02:21.775]                           }
[17:02:21.775]                         }
[17:02:21.775]                       }
[17:02:21.775]                       invisible(muffled)
[17:02:21.775]                     }
[17:02:21.775]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.775]                   }
[17:02:21.775]                 }
[17:02:21.775]             }
[17:02:21.775]         }))
[17:02:21.775]     }, error = function(ex) {
[17:02:21.775]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.775]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.775]                 ...future.rng), started = ...future.startTime, 
[17:02:21.775]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.775]             version = "1.8"), class = "FutureResult")
[17:02:21.775]     }, finally = {
[17:02:21.775]         if (!identical(...future.workdir, getwd())) 
[17:02:21.775]             setwd(...future.workdir)
[17:02:21.775]         {
[17:02:21.775]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.775]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.775]             }
[17:02:21.775]             base::options(...future.oldOptions)
[17:02:21.775]             if (.Platform$OS.type == "windows") {
[17:02:21.775]                 old_names <- names(...future.oldEnvVars)
[17:02:21.775]                 envs <- base::Sys.getenv()
[17:02:21.775]                 names <- names(envs)
[17:02:21.775]                 common <- intersect(names, old_names)
[17:02:21.775]                 added <- setdiff(names, old_names)
[17:02:21.775]                 removed <- setdiff(old_names, names)
[17:02:21.775]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.775]                   envs[common]]
[17:02:21.775]                 NAMES <- toupper(changed)
[17:02:21.775]                 args <- list()
[17:02:21.775]                 for (kk in seq_along(NAMES)) {
[17:02:21.775]                   name <- changed[[kk]]
[17:02:21.775]                   NAME <- NAMES[[kk]]
[17:02:21.775]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.775]                     next
[17:02:21.775]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.775]                 }
[17:02:21.775]                 NAMES <- toupper(added)
[17:02:21.775]                 for (kk in seq_along(NAMES)) {
[17:02:21.775]                   name <- added[[kk]]
[17:02:21.775]                   NAME <- NAMES[[kk]]
[17:02:21.775]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.775]                     next
[17:02:21.775]                   args[[name]] <- ""
[17:02:21.775]                 }
[17:02:21.775]                 NAMES <- toupper(removed)
[17:02:21.775]                 for (kk in seq_along(NAMES)) {
[17:02:21.775]                   name <- removed[[kk]]
[17:02:21.775]                   NAME <- NAMES[[kk]]
[17:02:21.775]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.775]                     next
[17:02:21.775]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.775]                 }
[17:02:21.775]                 if (length(args) > 0) 
[17:02:21.775]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.775]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.775]             }
[17:02:21.775]             else {
[17:02:21.775]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.775]             }
[17:02:21.775]             {
[17:02:21.775]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.775]                   0L) {
[17:02:21.775]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.775]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.775]                   base::options(opts)
[17:02:21.775]                 }
[17:02:21.775]                 {
[17:02:21.775]                   {
[17:02:21.775]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.775]                     NULL
[17:02:21.775]                   }
[17:02:21.775]                   options(future.plan = NULL)
[17:02:21.775]                   if (is.na(NA_character_)) 
[17:02:21.775]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.775]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.775]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.775]                     .init = FALSE)
[17:02:21.775]                 }
[17:02:21.775]             }
[17:02:21.775]         }
[17:02:21.775]     })
[17:02:21.775]     if (TRUE) {
[17:02:21.775]         base::sink(type = "output", split = FALSE)
[17:02:21.775]         if (TRUE) {
[17:02:21.775]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.775]         }
[17:02:21.775]         else {
[17:02:21.775]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.775]         }
[17:02:21.775]         base::close(...future.stdout)
[17:02:21.775]         ...future.stdout <- NULL
[17:02:21.775]     }
[17:02:21.775]     ...future.result$conditions <- ...future.conditions
[17:02:21.775]     ...future.result$finished <- base::Sys.time()
[17:02:21.775]     ...future.result
[17:02:21.775] }
[17:02:21.778] MultisessionFuture started
[17:02:21.778] - Launch lazy future ... done
[17:02:21.778] run() for ‘MultisessionFuture’ ... done
[17:02:21.778] result() for ClusterFuture ...
[17:02:21.778] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.779] - Validating connection of MultisessionFuture
[17:02:21.780] - received message: FutureResult
[17:02:21.780] - Received FutureResult
[17:02:21.780] - Erased future from FutureRegistry
[17:02:21.780] result() for ClusterFuture ...
[17:02:21.780] - result already collected: FutureResult
[17:02:21.780] result() for ClusterFuture ... done
[17:02:21.780] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.780] result() for ClusterFuture ... done
[17:02:21.780] result() for ClusterFuture ...
[17:02:21.780] - result already collected: FutureResult
[17:02:21.780] result() for ClusterFuture ... done
d = 1
** Nested future assignments
[17:02:21.781] getGlobalsAndPackages() ...
[17:02:21.781] Searching for globals...
[17:02:21.784] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[17:02:21.784] Searching for globals ... DONE
[17:02:21.785] Resolving globals: FALSE
[17:02:21.785] 
[17:02:21.785] - packages: [1] ‘future’
[17:02:21.785] getGlobalsAndPackages() ... DONE
[17:02:21.785] run() for ‘Future’ ...
[17:02:21.786] - state: ‘created’
[17:02:21.786] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.799] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.799] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.800]   - Field: ‘node’
[17:02:21.800]   - Field: ‘label’
[17:02:21.800]   - Field: ‘local’
[17:02:21.800]   - Field: ‘owner’
[17:02:21.800]   - Field: ‘envir’
[17:02:21.800]   - Field: ‘workers’
[17:02:21.800]   - Field: ‘packages’
[17:02:21.800]   - Field: ‘gc’
[17:02:21.800]   - Field: ‘conditions’
[17:02:21.800]   - Field: ‘persistent’
[17:02:21.800]   - Field: ‘expr’
[17:02:21.801]   - Field: ‘uuid’
[17:02:21.801]   - Field: ‘seed’
[17:02:21.801]   - Field: ‘version’
[17:02:21.801]   - Field: ‘result’
[17:02:21.801]   - Field: ‘asynchronous’
[17:02:21.801]   - Field: ‘calls’
[17:02:21.801]   - Field: ‘globals’
[17:02:21.801]   - Field: ‘stdout’
[17:02:21.801]   - Field: ‘earlySignal’
[17:02:21.801]   - Field: ‘lazy’
[17:02:21.801]   - Field: ‘state’
[17:02:21.801] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.802] - Launch lazy future ...
[17:02:21.802] Packages needed by the future expression (n = 1): ‘future’
[17:02:21.802] Packages needed by future strategies (n = 0): <none>
[17:02:21.802] {
[17:02:21.802]     {
[17:02:21.802]         {
[17:02:21.802]             ...future.startTime <- base::Sys.time()
[17:02:21.802]             {
[17:02:21.802]                 {
[17:02:21.802]                   {
[17:02:21.802]                     {
[17:02:21.802]                       {
[17:02:21.802]                         base::local({
[17:02:21.802]                           has_future <- base::requireNamespace("future", 
[17:02:21.802]                             quietly = TRUE)
[17:02:21.802]                           if (has_future) {
[17:02:21.802]                             ns <- base::getNamespace("future")
[17:02:21.802]                             version <- ns[[".package"]][["version"]]
[17:02:21.802]                             if (is.null(version)) 
[17:02:21.802]                               version <- utils::packageVersion("future")
[17:02:21.802]                           }
[17:02:21.802]                           else {
[17:02:21.802]                             version <- NULL
[17:02:21.802]                           }
[17:02:21.802]                           if (!has_future || version < "1.8.0") {
[17:02:21.802]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.802]                               "", base::R.version$version.string), 
[17:02:21.802]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:21.802]                                 base::R.version$platform, 8 * 
[17:02:21.802]                                   base::.Machine$sizeof.pointer), 
[17:02:21.802]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.802]                                 "release", "version")], collapse = " "), 
[17:02:21.802]                               hostname = base::Sys.info()[["nodename"]])
[17:02:21.802]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.802]                               info)
[17:02:21.802]                             info <- base::paste(info, collapse = "; ")
[17:02:21.802]                             if (!has_future) {
[17:02:21.802]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.802]                                 info)
[17:02:21.802]                             }
[17:02:21.802]                             else {
[17:02:21.802]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.802]                                 info, version)
[17:02:21.802]                             }
[17:02:21.802]                             base::stop(msg)
[17:02:21.802]                           }
[17:02:21.802]                         })
[17:02:21.802]                       }
[17:02:21.802]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.802]                       base::options(mc.cores = 1L)
[17:02:21.802]                     }
[17:02:21.802]                     base::local({
[17:02:21.802]                       for (pkg in "future") {
[17:02:21.802]                         base::loadNamespace(pkg)
[17:02:21.802]                         base::library(pkg, character.only = TRUE)
[17:02:21.802]                       }
[17:02:21.802]                     })
[17:02:21.802]                   }
[17:02:21.802]                   ...future.strategy.old <- future::plan("list")
[17:02:21.802]                   options(future.plan = NULL)
[17:02:21.802]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.802]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.802]                 }
[17:02:21.802]                 ...future.workdir <- getwd()
[17:02:21.802]             }
[17:02:21.802]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.802]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.802]         }
[17:02:21.802]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.802]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.802]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.802]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.802]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.802]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.802]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.802]             base::names(...future.oldOptions))
[17:02:21.802]     }
[17:02:21.802]     if (FALSE) {
[17:02:21.802]     }
[17:02:21.802]     else {
[17:02:21.802]         if (TRUE) {
[17:02:21.802]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.802]                 open = "w")
[17:02:21.802]         }
[17:02:21.802]         else {
[17:02:21.802]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.802]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.802]         }
[17:02:21.802]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.802]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.802]             base::sink(type = "output", split = FALSE)
[17:02:21.802]             base::close(...future.stdout)
[17:02:21.802]         }, add = TRUE)
[17:02:21.802]     }
[17:02:21.802]     ...future.frame <- base::sys.nframe()
[17:02:21.802]     ...future.conditions <- base::list()
[17:02:21.802]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.802]     if (FALSE) {
[17:02:21.802]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.802]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.802]     }
[17:02:21.802]     ...future.result <- base::tryCatch({
[17:02:21.802]         base::withCallingHandlers({
[17:02:21.802]             ...future.value <- base::withVisible(base::local({
[17:02:21.802]                 ...future.makeSendCondition <- base::local({
[17:02:21.802]                   sendCondition <- NULL
[17:02:21.802]                   function(frame = 1L) {
[17:02:21.802]                     if (is.function(sendCondition)) 
[17:02:21.802]                       return(sendCondition)
[17:02:21.802]                     ns <- getNamespace("parallel")
[17:02:21.802]                     if (exists("sendData", mode = "function", 
[17:02:21.802]                       envir = ns)) {
[17:02:21.802]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.802]                         envir = ns)
[17:02:21.802]                       envir <- sys.frame(frame)
[17:02:21.802]                       master <- NULL
[17:02:21.802]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.802]                         !identical(envir, emptyenv())) {
[17:02:21.802]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.802]                           inherits = FALSE)) {
[17:02:21.802]                           master <- get("master", mode = "list", 
[17:02:21.802]                             envir = envir, inherits = FALSE)
[17:02:21.802]                           if (inherits(master, c("SOCKnode", 
[17:02:21.802]                             "SOCK0node"))) {
[17:02:21.802]                             sendCondition <<- function(cond) {
[17:02:21.802]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.802]                                 success = TRUE)
[17:02:21.802]                               parallel_sendData(master, data)
[17:02:21.802]                             }
[17:02:21.802]                             return(sendCondition)
[17:02:21.802]                           }
[17:02:21.802]                         }
[17:02:21.802]                         frame <- frame + 1L
[17:02:21.802]                         envir <- sys.frame(frame)
[17:02:21.802]                       }
[17:02:21.802]                     }
[17:02:21.802]                     sendCondition <<- function(cond) NULL
[17:02:21.802]                   }
[17:02:21.802]                 })
[17:02:21.802]                 withCallingHandlers({
[17:02:21.802]                   {
[17:02:21.802]                     b <- 1
[17:02:21.802]                     c %<-% 2
[17:02:21.802]                     d <- 3
[17:02:21.802]                     4 %->% e
[17:02:21.802]                     b + c + d + e
[17:02:21.802]                   }
[17:02:21.802]                 }, immediateCondition = function(cond) {
[17:02:21.802]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.802]                   sendCondition(cond)
[17:02:21.802]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.802]                   {
[17:02:21.802]                     inherits <- base::inherits
[17:02:21.802]                     invokeRestart <- base::invokeRestart
[17:02:21.802]                     is.null <- base::is.null
[17:02:21.802]                     muffled <- FALSE
[17:02:21.802]                     if (inherits(cond, "message")) {
[17:02:21.802]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.802]                       if (muffled) 
[17:02:21.802]                         invokeRestart("muffleMessage")
[17:02:21.802]                     }
[17:02:21.802]                     else if (inherits(cond, "warning")) {
[17:02:21.802]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.802]                       if (muffled) 
[17:02:21.802]                         invokeRestart("muffleWarning")
[17:02:21.802]                     }
[17:02:21.802]                     else if (inherits(cond, "condition")) {
[17:02:21.802]                       if (!is.null(pattern)) {
[17:02:21.802]                         computeRestarts <- base::computeRestarts
[17:02:21.802]                         grepl <- base::grepl
[17:02:21.802]                         restarts <- computeRestarts(cond)
[17:02:21.802]                         for (restart in restarts) {
[17:02:21.802]                           name <- restart$name
[17:02:21.802]                           if (is.null(name)) 
[17:02:21.802]                             next
[17:02:21.802]                           if (!grepl(pattern, name)) 
[17:02:21.802]                             next
[17:02:21.802]                           invokeRestart(restart)
[17:02:21.802]                           muffled <- TRUE
[17:02:21.802]                           break
[17:02:21.802]                         }
[17:02:21.802]                       }
[17:02:21.802]                     }
[17:02:21.802]                     invisible(muffled)
[17:02:21.802]                   }
[17:02:21.802]                   muffleCondition(cond)
[17:02:21.802]                 })
[17:02:21.802]             }))
[17:02:21.802]             future::FutureResult(value = ...future.value$value, 
[17:02:21.802]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.802]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.802]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.802]                     ...future.globalenv.names))
[17:02:21.802]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.802]         }, condition = base::local({
[17:02:21.802]             c <- base::c
[17:02:21.802]             inherits <- base::inherits
[17:02:21.802]             invokeRestart <- base::invokeRestart
[17:02:21.802]             length <- base::length
[17:02:21.802]             list <- base::list
[17:02:21.802]             seq.int <- base::seq.int
[17:02:21.802]             signalCondition <- base::signalCondition
[17:02:21.802]             sys.calls <- base::sys.calls
[17:02:21.802]             `[[` <- base::`[[`
[17:02:21.802]             `+` <- base::`+`
[17:02:21.802]             `<<-` <- base::`<<-`
[17:02:21.802]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.802]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.802]                   3L)]
[17:02:21.802]             }
[17:02:21.802]             function(cond) {
[17:02:21.802]                 is_error <- inherits(cond, "error")
[17:02:21.802]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.802]                   NULL)
[17:02:21.802]                 if (is_error) {
[17:02:21.802]                   sessionInformation <- function() {
[17:02:21.802]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.802]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.802]                       search = base::search(), system = base::Sys.info())
[17:02:21.802]                   }
[17:02:21.802]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.802]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.802]                     cond$call), session = sessionInformation(), 
[17:02:21.802]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.802]                   signalCondition(cond)
[17:02:21.802]                 }
[17:02:21.802]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.802]                 "immediateCondition"))) {
[17:02:21.802]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.802]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.802]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.802]                   if (TRUE && !signal) {
[17:02:21.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.802]                     {
[17:02:21.802]                       inherits <- base::inherits
[17:02:21.802]                       invokeRestart <- base::invokeRestart
[17:02:21.802]                       is.null <- base::is.null
[17:02:21.802]                       muffled <- FALSE
[17:02:21.802]                       if (inherits(cond, "message")) {
[17:02:21.802]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.802]                         if (muffled) 
[17:02:21.802]                           invokeRestart("muffleMessage")
[17:02:21.802]                       }
[17:02:21.802]                       else if (inherits(cond, "warning")) {
[17:02:21.802]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.802]                         if (muffled) 
[17:02:21.802]                           invokeRestart("muffleWarning")
[17:02:21.802]                       }
[17:02:21.802]                       else if (inherits(cond, "condition")) {
[17:02:21.802]                         if (!is.null(pattern)) {
[17:02:21.802]                           computeRestarts <- base::computeRestarts
[17:02:21.802]                           grepl <- base::grepl
[17:02:21.802]                           restarts <- computeRestarts(cond)
[17:02:21.802]                           for (restart in restarts) {
[17:02:21.802]                             name <- restart$name
[17:02:21.802]                             if (is.null(name)) 
[17:02:21.802]                               next
[17:02:21.802]                             if (!grepl(pattern, name)) 
[17:02:21.802]                               next
[17:02:21.802]                             invokeRestart(restart)
[17:02:21.802]                             muffled <- TRUE
[17:02:21.802]                             break
[17:02:21.802]                           }
[17:02:21.802]                         }
[17:02:21.802]                       }
[17:02:21.802]                       invisible(muffled)
[17:02:21.802]                     }
[17:02:21.802]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.802]                   }
[17:02:21.802]                 }
[17:02:21.802]                 else {
[17:02:21.802]                   if (TRUE) {
[17:02:21.802]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.802]                     {
[17:02:21.802]                       inherits <- base::inherits
[17:02:21.802]                       invokeRestart <- base::invokeRestart
[17:02:21.802]                       is.null <- base::is.null
[17:02:21.802]                       muffled <- FALSE
[17:02:21.802]                       if (inherits(cond, "message")) {
[17:02:21.802]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.802]                         if (muffled) 
[17:02:21.802]                           invokeRestart("muffleMessage")
[17:02:21.802]                       }
[17:02:21.802]                       else if (inherits(cond, "warning")) {
[17:02:21.802]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.802]                         if (muffled) 
[17:02:21.802]                           invokeRestart("muffleWarning")
[17:02:21.802]                       }
[17:02:21.802]                       else if (inherits(cond, "condition")) {
[17:02:21.802]                         if (!is.null(pattern)) {
[17:02:21.802]                           computeRestarts <- base::computeRestarts
[17:02:21.802]                           grepl <- base::grepl
[17:02:21.802]                           restarts <- computeRestarts(cond)
[17:02:21.802]                           for (restart in restarts) {
[17:02:21.802]                             name <- restart$name
[17:02:21.802]                             if (is.null(name)) 
[17:02:21.802]                               next
[17:02:21.802]                             if (!grepl(pattern, name)) 
[17:02:21.802]                               next
[17:02:21.802]                             invokeRestart(restart)
[17:02:21.802]                             muffled <- TRUE
[17:02:21.802]                             break
[17:02:21.802]                           }
[17:02:21.802]                         }
[17:02:21.802]                       }
[17:02:21.802]                       invisible(muffled)
[17:02:21.802]                     }
[17:02:21.802]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.802]                   }
[17:02:21.802]                 }
[17:02:21.802]             }
[17:02:21.802]         }))
[17:02:21.802]     }, error = function(ex) {
[17:02:21.802]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.802]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.802]                 ...future.rng), started = ...future.startTime, 
[17:02:21.802]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.802]             version = "1.8"), class = "FutureResult")
[17:02:21.802]     }, finally = {
[17:02:21.802]         if (!identical(...future.workdir, getwd())) 
[17:02:21.802]             setwd(...future.workdir)
[17:02:21.802]         {
[17:02:21.802]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.802]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.802]             }
[17:02:21.802]             base::options(...future.oldOptions)
[17:02:21.802]             if (.Platform$OS.type == "windows") {
[17:02:21.802]                 old_names <- names(...future.oldEnvVars)
[17:02:21.802]                 envs <- base::Sys.getenv()
[17:02:21.802]                 names <- names(envs)
[17:02:21.802]                 common <- intersect(names, old_names)
[17:02:21.802]                 added <- setdiff(names, old_names)
[17:02:21.802]                 removed <- setdiff(old_names, names)
[17:02:21.802]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.802]                   envs[common]]
[17:02:21.802]                 NAMES <- toupper(changed)
[17:02:21.802]                 args <- list()
[17:02:21.802]                 for (kk in seq_along(NAMES)) {
[17:02:21.802]                   name <- changed[[kk]]
[17:02:21.802]                   NAME <- NAMES[[kk]]
[17:02:21.802]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.802]                     next
[17:02:21.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.802]                 }
[17:02:21.802]                 NAMES <- toupper(added)
[17:02:21.802]                 for (kk in seq_along(NAMES)) {
[17:02:21.802]                   name <- added[[kk]]
[17:02:21.802]                   NAME <- NAMES[[kk]]
[17:02:21.802]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.802]                     next
[17:02:21.802]                   args[[name]] <- ""
[17:02:21.802]                 }
[17:02:21.802]                 NAMES <- toupper(removed)
[17:02:21.802]                 for (kk in seq_along(NAMES)) {
[17:02:21.802]                   name <- removed[[kk]]
[17:02:21.802]                   NAME <- NAMES[[kk]]
[17:02:21.802]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.802]                     next
[17:02:21.802]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.802]                 }
[17:02:21.802]                 if (length(args) > 0) 
[17:02:21.802]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.802]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.802]             }
[17:02:21.802]             else {
[17:02:21.802]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.802]             }
[17:02:21.802]             {
[17:02:21.802]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.802]                   0L) {
[17:02:21.802]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.802]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.802]                   base::options(opts)
[17:02:21.802]                 }
[17:02:21.802]                 {
[17:02:21.802]                   {
[17:02:21.802]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.802]                     NULL
[17:02:21.802]                   }
[17:02:21.802]                   options(future.plan = NULL)
[17:02:21.802]                   if (is.na(NA_character_)) 
[17:02:21.802]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.802]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.802]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.802]                     .init = FALSE)
[17:02:21.802]                 }
[17:02:21.802]             }
[17:02:21.802]         }
[17:02:21.802]     })
[17:02:21.802]     if (TRUE) {
[17:02:21.802]         base::sink(type = "output", split = FALSE)
[17:02:21.802]         if (TRUE) {
[17:02:21.802]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.802]         }
[17:02:21.802]         else {
[17:02:21.802]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.802]         }
[17:02:21.802]         base::close(...future.stdout)
[17:02:21.802]         ...future.stdout <- NULL
[17:02:21.802]     }
[17:02:21.802]     ...future.result$conditions <- ...future.conditions
[17:02:21.802]     ...future.result$finished <- base::Sys.time()
[17:02:21.802]     ...future.result
[17:02:21.802] }
[17:02:21.806] MultisessionFuture started
[17:02:21.806] - Launch lazy future ... done
[17:02:21.806] run() for ‘MultisessionFuture’ ... done
[17:02:21.806] result() for ClusterFuture ...
[17:02:21.806] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.806] - Validating connection of MultisessionFuture
[17:02:21.862] - received message: FutureResult
[17:02:21.862] - Received FutureResult
[17:02:21.862] - Erased future from FutureRegistry
[17:02:21.863] result() for ClusterFuture ...
[17:02:21.863] - result already collected: FutureResult
[17:02:21.863] result() for ClusterFuture ... done
[17:02:21.863] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.863] result() for ClusterFuture ... done
[17:02:21.863] result() for ClusterFuture ...
[17:02:21.863] - result already collected: FutureResult
[17:02:21.863] result() for ClusterFuture ... done
a = 10
[17:02:21.864] getGlobalsAndPackages() ...
[17:02:21.864] Searching for globals...
[17:02:21.865] - globals found: [3] ‘{’, ‘+’, ‘a’
[17:02:21.865] Searching for globals ... DONE
[17:02:21.865] Resolving globals: FALSE
[17:02:21.865] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:21.866] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:21.866] - globals: [1] ‘a’
[17:02:21.866] 
[17:02:21.866] getGlobalsAndPackages() ... DONE
[17:02:21.866] run() for ‘Future’ ...
[17:02:21.866] - state: ‘created’
[17:02:21.866] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:21.880] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:21.881] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:21.881]   - Field: ‘node’
[17:02:21.881]   - Field: ‘label’
[17:02:21.881]   - Field: ‘local’
[17:02:21.881]   - Field: ‘owner’
[17:02:21.881]   - Field: ‘envir’
[17:02:21.881]   - Field: ‘workers’
[17:02:21.881]   - Field: ‘packages’
[17:02:21.881]   - Field: ‘gc’
[17:02:21.882]   - Field: ‘conditions’
[17:02:21.882]   - Field: ‘persistent’
[17:02:21.882]   - Field: ‘expr’
[17:02:21.882]   - Field: ‘uuid’
[17:02:21.882]   - Field: ‘seed’
[17:02:21.882]   - Field: ‘version’
[17:02:21.882]   - Field: ‘result’
[17:02:21.882]   - Field: ‘asynchronous’
[17:02:21.882]   - Field: ‘calls’
[17:02:21.882]   - Field: ‘globals’
[17:02:21.882]   - Field: ‘stdout’
[17:02:21.883]   - Field: ‘earlySignal’
[17:02:21.883]   - Field: ‘lazy’
[17:02:21.883]   - Field: ‘state’
[17:02:21.883] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:21.883] - Launch lazy future ...
[17:02:21.883] Packages needed by the future expression (n = 0): <none>
[17:02:21.883] Packages needed by future strategies (n = 0): <none>
[17:02:21.884] {
[17:02:21.884]     {
[17:02:21.884]         {
[17:02:21.884]             ...future.startTime <- base::Sys.time()
[17:02:21.884]             {
[17:02:21.884]                 {
[17:02:21.884]                   {
[17:02:21.884]                     {
[17:02:21.884]                       base::local({
[17:02:21.884]                         has_future <- base::requireNamespace("future", 
[17:02:21.884]                           quietly = TRUE)
[17:02:21.884]                         if (has_future) {
[17:02:21.884]                           ns <- base::getNamespace("future")
[17:02:21.884]                           version <- ns[[".package"]][["version"]]
[17:02:21.884]                           if (is.null(version)) 
[17:02:21.884]                             version <- utils::packageVersion("future")
[17:02:21.884]                         }
[17:02:21.884]                         else {
[17:02:21.884]                           version <- NULL
[17:02:21.884]                         }
[17:02:21.884]                         if (!has_future || version < "1.8.0") {
[17:02:21.884]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:21.884]                             "", base::R.version$version.string), 
[17:02:21.884]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:21.884]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:21.884]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:21.884]                               "release", "version")], collapse = " "), 
[17:02:21.884]                             hostname = base::Sys.info()[["nodename"]])
[17:02:21.884]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:21.884]                             info)
[17:02:21.884]                           info <- base::paste(info, collapse = "; ")
[17:02:21.884]                           if (!has_future) {
[17:02:21.884]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:21.884]                               info)
[17:02:21.884]                           }
[17:02:21.884]                           else {
[17:02:21.884]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:21.884]                               info, version)
[17:02:21.884]                           }
[17:02:21.884]                           base::stop(msg)
[17:02:21.884]                         }
[17:02:21.884]                       })
[17:02:21.884]                     }
[17:02:21.884]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:21.884]                     base::options(mc.cores = 1L)
[17:02:21.884]                   }
[17:02:21.884]                   ...future.strategy.old <- future::plan("list")
[17:02:21.884]                   options(future.plan = NULL)
[17:02:21.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:21.884]                 }
[17:02:21.884]                 ...future.workdir <- getwd()
[17:02:21.884]             }
[17:02:21.884]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:21.884]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:21.884]         }
[17:02:21.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:21.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:21.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:21.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:21.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:21.884]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:21.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:21.884]             base::names(...future.oldOptions))
[17:02:21.884]     }
[17:02:21.884]     if (FALSE) {
[17:02:21.884]     }
[17:02:21.884]     else {
[17:02:21.884]         if (TRUE) {
[17:02:21.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:21.884]                 open = "w")
[17:02:21.884]         }
[17:02:21.884]         else {
[17:02:21.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:21.884]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:21.884]         }
[17:02:21.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:21.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:21.884]             base::sink(type = "output", split = FALSE)
[17:02:21.884]             base::close(...future.stdout)
[17:02:21.884]         }, add = TRUE)
[17:02:21.884]     }
[17:02:21.884]     ...future.frame <- base::sys.nframe()
[17:02:21.884]     ...future.conditions <- base::list()
[17:02:21.884]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:21.884]     if (FALSE) {
[17:02:21.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:21.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:21.884]     }
[17:02:21.884]     ...future.result <- base::tryCatch({
[17:02:21.884]         base::withCallingHandlers({
[17:02:21.884]             ...future.value <- base::withVisible(base::local({
[17:02:21.884]                 ...future.makeSendCondition <- base::local({
[17:02:21.884]                   sendCondition <- NULL
[17:02:21.884]                   function(frame = 1L) {
[17:02:21.884]                     if (is.function(sendCondition)) 
[17:02:21.884]                       return(sendCondition)
[17:02:21.884]                     ns <- getNamespace("parallel")
[17:02:21.884]                     if (exists("sendData", mode = "function", 
[17:02:21.884]                       envir = ns)) {
[17:02:21.884]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:21.884]                         envir = ns)
[17:02:21.884]                       envir <- sys.frame(frame)
[17:02:21.884]                       master <- NULL
[17:02:21.884]                       while (!identical(envir, .GlobalEnv) && 
[17:02:21.884]                         !identical(envir, emptyenv())) {
[17:02:21.884]                         if (exists("master", mode = "list", envir = envir, 
[17:02:21.884]                           inherits = FALSE)) {
[17:02:21.884]                           master <- get("master", mode = "list", 
[17:02:21.884]                             envir = envir, inherits = FALSE)
[17:02:21.884]                           if (inherits(master, c("SOCKnode", 
[17:02:21.884]                             "SOCK0node"))) {
[17:02:21.884]                             sendCondition <<- function(cond) {
[17:02:21.884]                               data <- list(type = "VALUE", value = cond, 
[17:02:21.884]                                 success = TRUE)
[17:02:21.884]                               parallel_sendData(master, data)
[17:02:21.884]                             }
[17:02:21.884]                             return(sendCondition)
[17:02:21.884]                           }
[17:02:21.884]                         }
[17:02:21.884]                         frame <- frame + 1L
[17:02:21.884]                         envir <- sys.frame(frame)
[17:02:21.884]                       }
[17:02:21.884]                     }
[17:02:21.884]                     sendCondition <<- function(cond) NULL
[17:02:21.884]                   }
[17:02:21.884]                 })
[17:02:21.884]                 withCallingHandlers({
[17:02:21.884]                   {
[17:02:21.884]                     a + 1
[17:02:21.884]                   }
[17:02:21.884]                 }, immediateCondition = function(cond) {
[17:02:21.884]                   sendCondition <- ...future.makeSendCondition()
[17:02:21.884]                   sendCondition(cond)
[17:02:21.884]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.884]                   {
[17:02:21.884]                     inherits <- base::inherits
[17:02:21.884]                     invokeRestart <- base::invokeRestart
[17:02:21.884]                     is.null <- base::is.null
[17:02:21.884]                     muffled <- FALSE
[17:02:21.884]                     if (inherits(cond, "message")) {
[17:02:21.884]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:21.884]                       if (muffled) 
[17:02:21.884]                         invokeRestart("muffleMessage")
[17:02:21.884]                     }
[17:02:21.884]                     else if (inherits(cond, "warning")) {
[17:02:21.884]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:21.884]                       if (muffled) 
[17:02:21.884]                         invokeRestart("muffleWarning")
[17:02:21.884]                     }
[17:02:21.884]                     else if (inherits(cond, "condition")) {
[17:02:21.884]                       if (!is.null(pattern)) {
[17:02:21.884]                         computeRestarts <- base::computeRestarts
[17:02:21.884]                         grepl <- base::grepl
[17:02:21.884]                         restarts <- computeRestarts(cond)
[17:02:21.884]                         for (restart in restarts) {
[17:02:21.884]                           name <- restart$name
[17:02:21.884]                           if (is.null(name)) 
[17:02:21.884]                             next
[17:02:21.884]                           if (!grepl(pattern, name)) 
[17:02:21.884]                             next
[17:02:21.884]                           invokeRestart(restart)
[17:02:21.884]                           muffled <- TRUE
[17:02:21.884]                           break
[17:02:21.884]                         }
[17:02:21.884]                       }
[17:02:21.884]                     }
[17:02:21.884]                     invisible(muffled)
[17:02:21.884]                   }
[17:02:21.884]                   muffleCondition(cond)
[17:02:21.884]                 })
[17:02:21.884]             }))
[17:02:21.884]             future::FutureResult(value = ...future.value$value, 
[17:02:21.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.884]                   ...future.rng), globalenv = if (FALSE) 
[17:02:21.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:21.884]                     ...future.globalenv.names))
[17:02:21.884]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:21.884]         }, condition = base::local({
[17:02:21.884]             c <- base::c
[17:02:21.884]             inherits <- base::inherits
[17:02:21.884]             invokeRestart <- base::invokeRestart
[17:02:21.884]             length <- base::length
[17:02:21.884]             list <- base::list
[17:02:21.884]             seq.int <- base::seq.int
[17:02:21.884]             signalCondition <- base::signalCondition
[17:02:21.884]             sys.calls <- base::sys.calls
[17:02:21.884]             `[[` <- base::`[[`
[17:02:21.884]             `+` <- base::`+`
[17:02:21.884]             `<<-` <- base::`<<-`
[17:02:21.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:21.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:21.884]                   3L)]
[17:02:21.884]             }
[17:02:21.884]             function(cond) {
[17:02:21.884]                 is_error <- inherits(cond, "error")
[17:02:21.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:21.884]                   NULL)
[17:02:21.884]                 if (is_error) {
[17:02:21.884]                   sessionInformation <- function() {
[17:02:21.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:21.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:21.884]                       search = base::search(), system = base::Sys.info())
[17:02:21.884]                   }
[17:02:21.884]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:21.884]                     cond$call), session = sessionInformation(), 
[17:02:21.884]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:21.884]                   signalCondition(cond)
[17:02:21.884]                 }
[17:02:21.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:21.884]                 "immediateCondition"))) {
[17:02:21.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:21.884]                   ...future.conditions[[length(...future.conditions) + 
[17:02:21.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:21.884]                   if (TRUE && !signal) {
[17:02:21.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.884]                     {
[17:02:21.884]                       inherits <- base::inherits
[17:02:21.884]                       invokeRestart <- base::invokeRestart
[17:02:21.884]                       is.null <- base::is.null
[17:02:21.884]                       muffled <- FALSE
[17:02:21.884]                       if (inherits(cond, "message")) {
[17:02:21.884]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.884]                         if (muffled) 
[17:02:21.884]                           invokeRestart("muffleMessage")
[17:02:21.884]                       }
[17:02:21.884]                       else if (inherits(cond, "warning")) {
[17:02:21.884]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.884]                         if (muffled) 
[17:02:21.884]                           invokeRestart("muffleWarning")
[17:02:21.884]                       }
[17:02:21.884]                       else if (inherits(cond, "condition")) {
[17:02:21.884]                         if (!is.null(pattern)) {
[17:02:21.884]                           computeRestarts <- base::computeRestarts
[17:02:21.884]                           grepl <- base::grepl
[17:02:21.884]                           restarts <- computeRestarts(cond)
[17:02:21.884]                           for (restart in restarts) {
[17:02:21.884]                             name <- restart$name
[17:02:21.884]                             if (is.null(name)) 
[17:02:21.884]                               next
[17:02:21.884]                             if (!grepl(pattern, name)) 
[17:02:21.884]                               next
[17:02:21.884]                             invokeRestart(restart)
[17:02:21.884]                             muffled <- TRUE
[17:02:21.884]                             break
[17:02:21.884]                           }
[17:02:21.884]                         }
[17:02:21.884]                       }
[17:02:21.884]                       invisible(muffled)
[17:02:21.884]                     }
[17:02:21.884]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.884]                   }
[17:02:21.884]                 }
[17:02:21.884]                 else {
[17:02:21.884]                   if (TRUE) {
[17:02:21.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:21.884]                     {
[17:02:21.884]                       inherits <- base::inherits
[17:02:21.884]                       invokeRestart <- base::invokeRestart
[17:02:21.884]                       is.null <- base::is.null
[17:02:21.884]                       muffled <- FALSE
[17:02:21.884]                       if (inherits(cond, "message")) {
[17:02:21.884]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:21.884]                         if (muffled) 
[17:02:21.884]                           invokeRestart("muffleMessage")
[17:02:21.884]                       }
[17:02:21.884]                       else if (inherits(cond, "warning")) {
[17:02:21.884]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:21.884]                         if (muffled) 
[17:02:21.884]                           invokeRestart("muffleWarning")
[17:02:21.884]                       }
[17:02:21.884]                       else if (inherits(cond, "condition")) {
[17:02:21.884]                         if (!is.null(pattern)) {
[17:02:21.884]                           computeRestarts <- base::computeRestarts
[17:02:21.884]                           grepl <- base::grepl
[17:02:21.884]                           restarts <- computeRestarts(cond)
[17:02:21.884]                           for (restart in restarts) {
[17:02:21.884]                             name <- restart$name
[17:02:21.884]                             if (is.null(name)) 
[17:02:21.884]                               next
[17:02:21.884]                             if (!grepl(pattern, name)) 
[17:02:21.884]                               next
[17:02:21.884]                             invokeRestart(restart)
[17:02:21.884]                             muffled <- TRUE
[17:02:21.884]                             break
[17:02:21.884]                           }
[17:02:21.884]                         }
[17:02:21.884]                       }
[17:02:21.884]                       invisible(muffled)
[17:02:21.884]                     }
[17:02:21.884]                     muffleCondition(cond, pattern = "^muffle")
[17:02:21.884]                   }
[17:02:21.884]                 }
[17:02:21.884]             }
[17:02:21.884]         }))
[17:02:21.884]     }, error = function(ex) {
[17:02:21.884]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:21.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:21.884]                 ...future.rng), started = ...future.startTime, 
[17:02:21.884]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:21.884]             version = "1.8"), class = "FutureResult")
[17:02:21.884]     }, finally = {
[17:02:21.884]         if (!identical(...future.workdir, getwd())) 
[17:02:21.884]             setwd(...future.workdir)
[17:02:21.884]         {
[17:02:21.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:21.884]                 ...future.oldOptions$nwarnings <- NULL
[17:02:21.884]             }
[17:02:21.884]             base::options(...future.oldOptions)
[17:02:21.884]             if (.Platform$OS.type == "windows") {
[17:02:21.884]                 old_names <- names(...future.oldEnvVars)
[17:02:21.884]                 envs <- base::Sys.getenv()
[17:02:21.884]                 names <- names(envs)
[17:02:21.884]                 common <- intersect(names, old_names)
[17:02:21.884]                 added <- setdiff(names, old_names)
[17:02:21.884]                 removed <- setdiff(old_names, names)
[17:02:21.884]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:21.884]                   envs[common]]
[17:02:21.884]                 NAMES <- toupper(changed)
[17:02:21.884]                 args <- list()
[17:02:21.884]                 for (kk in seq_along(NAMES)) {
[17:02:21.884]                   name <- changed[[kk]]
[17:02:21.884]                   NAME <- NAMES[[kk]]
[17:02:21.884]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.884]                     next
[17:02:21.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.884]                 }
[17:02:21.884]                 NAMES <- toupper(added)
[17:02:21.884]                 for (kk in seq_along(NAMES)) {
[17:02:21.884]                   name <- added[[kk]]
[17:02:21.884]                   NAME <- NAMES[[kk]]
[17:02:21.884]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.884]                     next
[17:02:21.884]                   args[[name]] <- ""
[17:02:21.884]                 }
[17:02:21.884]                 NAMES <- toupper(removed)
[17:02:21.884]                 for (kk in seq_along(NAMES)) {
[17:02:21.884]                   name <- removed[[kk]]
[17:02:21.884]                   NAME <- NAMES[[kk]]
[17:02:21.884]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:21.884]                     next
[17:02:21.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:21.884]                 }
[17:02:21.884]                 if (length(args) > 0) 
[17:02:21.884]                   base::do.call(base::Sys.setenv, args = args)
[17:02:21.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:21.884]             }
[17:02:21.884]             else {
[17:02:21.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:21.884]             }
[17:02:21.884]             {
[17:02:21.884]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:21.884]                   0L) {
[17:02:21.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:21.884]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:21.884]                   base::options(opts)
[17:02:21.884]                 }
[17:02:21.884]                 {
[17:02:21.884]                   {
[17:02:21.884]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:21.884]                     NULL
[17:02:21.884]                   }
[17:02:21.884]                   options(future.plan = NULL)
[17:02:21.884]                   if (is.na(NA_character_)) 
[17:02:21.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:21.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:21.884]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:21.884]                     .init = FALSE)
[17:02:21.884]                 }
[17:02:21.884]             }
[17:02:21.884]         }
[17:02:21.884]     })
[17:02:21.884]     if (TRUE) {
[17:02:21.884]         base::sink(type = "output", split = FALSE)
[17:02:21.884]         if (TRUE) {
[17:02:21.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:21.884]         }
[17:02:21.884]         else {
[17:02:21.884]             ...future.result["stdout"] <- base::list(NULL)
[17:02:21.884]         }
[17:02:21.884]         base::close(...future.stdout)
[17:02:21.884]         ...future.stdout <- NULL
[17:02:21.884]     }
[17:02:21.884]     ...future.result$conditions <- ...future.conditions
[17:02:21.884]     ...future.result$finished <- base::Sys.time()
[17:02:21.884]     ...future.result
[17:02:21.884] }
[17:02:21.887] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:21.887] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:21.887] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:21.887] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:21.888] MultisessionFuture started
[17:02:21.888] - Launch lazy future ... done
[17:02:21.888] run() for ‘MultisessionFuture’ ... done
[17:02:21.888] result() for ClusterFuture ...
[17:02:21.888] receiveMessageFromWorker() for ClusterFuture ...
[17:02:21.889] - Validating connection of MultisessionFuture
[17:02:21.890] - received message: FutureResult
[17:02:21.890] - Received FutureResult
[17:02:21.890] - Erased future from FutureRegistry
[17:02:21.890] result() for ClusterFuture ...
[17:02:21.890] - result already collected: FutureResult
[17:02:21.890] result() for ClusterFuture ... done
[17:02:21.890] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:21.890] result() for ClusterFuture ... done
[17:02:21.891] result() for ClusterFuture ...
[17:02:21.891] - result already collected: FutureResult
[17:02:21.891] result() for ClusterFuture ... done
b = 11
*** %<-% with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** %<-% ... DONE")
*** %<-% ... DONE
> 
> source("incl/end.R")
[17:02:21.892] plan(): Setting new future strategy stack:
[17:02:21.892] List of future strategies:
[17:02:21.892] 1. FutureStrategy:
[17:02:21.892]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:21.892]    - tweaked: FALSE
[17:02:21.892]    - call: future::plan(oplan)
[17:02:21.893] plan(): nbrOfWorkers() = 1
> 
